CFStringRef _StringForError(uint64_t a1)
{
  CFStringRef result;
  uint64_t v2;
  uint64_t v3;

  if (a1 <= 511)
  {
    switch(a1)
    {
      case 1:
        return (const __CFString *)+[NSString stringWithFormat:@"invalid filename (%ld)", 1];
      case 2:
        return (const __CFString *)+[NSString stringWithFormat:@"data is too large (%ld)", 2];
      case 3:
        return (const __CFString *)+[NSString stringWithFormat:@"IO failure (%ld)", 3];
      case 4:
        return (const __CFString *)+[NSString stringWithFormat:@"out of memory (%ld)", 4];
      case 5:
        v3 = 5;
        goto LABEL_64;
      case 6:
        v3 = 6;
LABEL_64:
        result = +[NSString stringWithFormat:@"Unable to connect to the device. (%ld)", v3];
        break;
      case 7:
        result = +[NSString stringWithFormat:@"read-only capture archive (%ld)", 7];
        break;
      case 8:
        result = +[NSString stringWithFormat:@"truncated capture archive store (%ld)", 8];
        break;
      case 9:
        result = +[NSString stringWithFormat:@"truncated capture archive index (%ld)", 9];
        break;
      case 10:
        result = +[NSString stringWithFormat:@"invalid capture archive index (%ld)", 10];
        break;
      case 11:
        result = +[NSString stringWithFormat:@"unknown capture archive index version (%ld)", 11];
        break;
      case 12:
        result = +[NSString stringWithFormat:@"file exists in capture archive (%ld)", 12];
        break;
      case 13:
        result = +[NSString stringWithFormat:@"file does not exists in capture archive (%ld)", 13];
        break;
      case 14:
        result = +[NSString stringWithFormat:@"capture archive does not exist (%ld)", 14];
        break;
      case 15:
        result = +[NSString stringWithFormat:@"missing capture archive index (%ld)", 15];
        break;
      case 16:
        result = +[NSString stringWithFormat:@"invalid capture archive metadata (%ld)", 16];
        break;
      case 17:
      case 27:
        return 0;
      case 18:
        result = +[NSString stringWithFormat:@"corrupted capture archive store (%ld)", 18];
        break;
      case 19:
        result = +[NSString stringWithFormat:@"could not write capture archive metadata (%ld)", 19];
        break;
      case 20:
        result = +[NSString stringWithFormat:@"capture archive has been closed (%ld)", 20];
        break;
      case 21:
        result = +[NSString stringWithFormat:@"already tried to launch guest app (%ld)", 21];
        break;
      case 22:
        result = +[NSString stringWithFormat:@"invalid launch dictionary (%ld)", 22];
        break;
      case 23:
        result = +[NSString stringWithFormat:@"guest app not found (%ld)", 23];
        break;
      case 24:
        result = +[NSString stringWithFormat:@"guest app launch timed out (%ld)", 24];
        break;
      case 25:
        result = +[NSString stringWithFormat:@"invalid guest app session (%ld)", 25];
        break;
      case 26:
        result = +[NSString stringWithFormat:@"guest app has not been launched yet (%ld)", 26];
        break;
      case 28:
        result = +[NSString stringWithFormat:@"did not find interpose dylib (%ld)", 28];
        break;
      case 29:
        result = +[NSString stringWithFormat:@"failed to launch guest app (%ld)", 29];
        break;
      case 30:
        result = +[NSString stringWithFormat:@"guest app terminated (%ld)", 30];
        break;
      case 31:
        result = +[NSString stringWithFormat:@"lost transport connection (%ld)", 31];
        break;
      case 32:
        result = +[NSString stringWithFormat:@"invalid transport (%ld)", 32];
        break;
      case 33:
        result = +[NSString stringWithFormat:@"transport is not connected (%ld)", 33];
        break;
      case 34:
        result = +[NSString stringWithFormat:@"message has already been sent (%ld)", 34];
        break;
      case 35:
        result = +[NSString stringWithFormat:@"in-reply-to message has not been sent (%ld)", 35];
        break;
      case 36:
        result = +[NSString stringWithFormat:@"failed to encode message attributes (%ld)", 36];
        break;
      case 37:
        result = +[NSString stringWithFormat:@"connect timed out (%ld)", 37];
        break;
      case 38:
        result = +[NSString stringWithFormat:@"undefined socket path (%ld)", 38];
        break;
      case 39:
        result = +[NSString stringWithFormat:@"socket path is too long (%ld)", 39];
        break;
      case 40:
        result = +[NSString stringWithFormat:@"message originated from this transport (%ld)", 40];
        break;
      case 41:
        result = +[NSString stringWithFormat:@"initialized function stream with immutable data but swapping is required (%ld)", 41];
        break;
      case 42:
        result = +[NSString stringWithFormat:@"transfer refused (%ld)", 42];
        break;
      case 43:
        result = +[NSString stringWithFormat:@"protocol error (%ld)", 43];
        break;
      case 44:
        result = +[NSString stringWithFormat:@"path outside destination root (%ld)", 44];
        break;
      case 45:
        result = +[NSString stringWithFormat:@"transfer aborted (%ld)", 45];
        break;
      case 46:
        result = +[NSString stringWithFormat:@"unknown item type (%ld)", 46];
        break;
      default:
        switch(a1)
        {
          case 256:
            result = +[NSString stringWithFormat:@"invalid socket descriptor (%ld)", 256];
            break;
          case 257:
            result = +[NSString stringWithFormat:@"invalid socket url (%ld)", 257];
            break;
          case 258:
            result = +[NSString stringWithFormat:@"transport source cancelled (%ld)", 258];
            break;
          case 259:
            result = +[NSString stringWithFormat:@"corrupt transport message header (%ld)", 259];
            break;
          case 260:
            result = +[NSString stringWithFormat:@"corrupt transport message attributes (%ld)", 260];
            break;
          case 261:
            result = +[NSString stringWithFormat:@"message too large (%ld)", 261];
            break;
          default:
            return 0;
        }
        break;
    }
    return result;
  }
  if (a1 <= 2047)
  {
    if (a1 <= 1023)
    {
      v2 = a1 - 512;
      result = @"Device connection lost.";
      switch(v2)
      {
        case 0:
          result = +[NSString stringWithFormat:@"guest app crashed (%ld)", 512];
          break;
        case 1:
          result = +[NSString stringWithFormat:@"another capture session is active (%ld)", 513];
          break;
        case 2:
          result = +[NSString stringWithFormat:@"capture session is already active (%ld)", 514];
          break;
        case 3:
          result = +[NSString stringWithFormat:@"capture session activation failed (%ld)", 515];
          break;
        case 4:
          result = +[NSString stringWithFormat:@"inferior already running (%ld)", 516];
          break;
        case 5:
          result = +[NSString stringWithFormat:@"GL dispatch table mismatch (%ld)", 517];
          break;
        case 6:
          result = +[NSString stringWithFormat:@"inferior and host session ids mismatch (%ld)", 518];
          break;
        case 7:
          return result;
        default:
          return 0;
      }
      return result;
    }
    if (a1 <= 1279)
    {
      switch(a1)
      {
        case 1024:
          return (const __CFString *)+[NSString stringWithFormat:@"truncated data (%ld)", 1024];
        case 1025:
          return (const __CFString *)+[NSString stringWithFormat:@"invalid transport message payload (%ld)", 1025];
        case 1026:
          return (const __CFString *)+[NSString stringWithFormat:@"unexpected transport message (%ld)", 1026];
      }
    }
    else if (a1 > 1791)
    {
      if (a1 == 1792) {
        return (const __CFString *)+[NSString stringWithFormat:@"no data (%ld)", 1792];
      }
      if (a1 == 1793) {
        return (const __CFString *)+[NSString stringWithFormat:@"guest app session error (%ld)", 1793];
      }
    }
    else
    {
      if (a1 == 1280) {
        return (const __CFString *)+[NSString stringWithFormat:@"invalid function stream header (%ld)", 1280];
      }
      if (a1 == 1536) {
        return (const __CFString *)+[NSString stringWithFormat:@"position does not exist in archive (%ld)", 1536];
      }
    }
    return 0;
  }
  if (a1 <= 4351)
  {
    if (a1 > 2304)
    {
      switch(a1)
      {
        case 2305:
          return (const __CFString *)+[NSString stringWithFormat:@"no archive data (%ld)", 2305];
        case 2306:
          return (const __CFString *)+[NSString stringWithFormat:@"no thumbnail support (%ld)", 2306];
        case 4096:
          return (const __CFString *)+[NSString stringWithFormat:@"failed to create core symbolicator (%ld)", 4096];
      }
    }
    else
    {
      switch(a1)
      {
        case 2048:
          return (const __CFString *)+[NSString stringWithFormat:@"already replaying (%ld)", 2048];
        case 2049:
          return (const __CFString *)+[NSString stringWithFormat:@"no loaded archives (%ld)", 2049];
        case 2304:
          return (const __CFString *)+[NSString stringWithFormat:@"no resource streamer (%ld)", 2304];
      }
    }
    return 0;
  }
  switch(a1)
  {
    case 4608:
      result = +[NSString stringWithFormat:@"Cannot find the specified username and host (%ld)", 4608];
      break;
    case 4609:
      result = +[NSString stringWithFormat:@"Specified remote machine is not available. Please make sure to login with specified user (%ld)", 4609];
      break;
    case 4610:
      result = +[NSString stringWithFormat:@"Cannot find the target path provided (%ld)", 4610];
      break;
    case 4611:
      result = +[NSString stringWithFormat:@"Cannot authenticate SSH, make sure the authentication is done right (%ld)", 4611];
      break;
    case 4612:
      result = +[NSString stringWithFormat:@"Cannot find Xcode.app on the remote machine. Please make sure that Xcode.app is in the Applications folder (%ld)", 4612];
      break;
    case 4613:
      result = +[NSString stringWithFormat:@"Metal.framework is not available on the remote machine (%ld)", 4613];
      break;
    case 4614:
      result = +[NSString stringWithFormat:@"Missing environment variables, please make sure all the required environment variables are enabled (%ld)", 4614];
      break;
    default:
      if (a1 == 4352)
      {
        result = +[NSString stringWithFormat:@"Shader profiler failed due to an internal error (%ld)", 4352];
      }
      else
      {
        if (a1 != 4353) {
          return 0;
        }
        result = +[NSString stringWithFormat:@"Shader profiler does not support multi-context captures (%ld)", 4353];
      }
      break;
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<long long,objc_object  {objcproto8NSObject}*>,std::__unordered_map_hasher<long long,objc_object  {objcproto8NSObject}*,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,objc_object  {objcproto8NSObject}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto8NSObject}*>>::find<long long>(void *a1, unint64_t a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (*(void *)&v2 <= a2) {
      unint64_t v4 = a2 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v4 = (*(void *)&v2 - 1) & a2;
  }
  v5 = *(void **)(*a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  result = (void *)*v5;
  if (*v5)
  {
    do
    {
      unint64_t v7 = result[1];
      if (v7 == a2)
      {
        if (result[2] == a2) {
          return result;
        }
      }
      else
      {
        if (v3.u32[0] > 1uLL)
        {
          if (v7 >= *(void *)&v2) {
            v7 %= *(void *)&v2;
          }
        }
        else
        {
          v7 &= *(void *)&v2 - 1;
        }
        if (v7 != v4) {
          return 0;
        }
      }
      result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void sub_28B4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<long long,objc_object  {objcproto8NSObject}*>,std::__unordered_map_hasher<long long,objc_object  {objcproto8NSObject}*,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,objc_object  {objcproto8NSObject}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto8NSObject}*>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(void *)&v4)
  {
    if (prime >= *(void *)&v4) {
      return;
    }
    unint64_t v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      unint64_t v11 = std::__next_prime(v11);
    }
    else
    {
      uint64_t v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2) {
        unint64_t v11 = v13;
      }
    }
    if (prime <= v11) {
      size_t prime = v11;
    }
    if (prime >= *(void *)&v4) {
      return;
    }
    if (!prime)
    {
      v16 = *(void **)a1;
      *(void *)a1 = 0;
      if (v16) {
        operator delete(v16);
      }
      *(void *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v5 = operator new(8 * prime);
  v6 = *(void **)a1;
  *(void *)a1 = v5;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = 0;
  *(void *)(a1 + 8) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  v8 = *(void **)(a1 + 16);
  if (v8)
  {
    size_t v9 = v8[1];
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime) {
        v9 %= prime;
      }
    }
    else
    {
      v9 &= prime - 1;
    }
    *(void *)(*(void *)a1 + 8 * v9) = a1 + 16;
    v14 = (void *)*v8;
    if (*v8)
    {
      do
      {
        size_t v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime) {
            v15 %= prime;
          }
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(void *)(*(void *)a1 + 8 * v15))
          {
            *(void *)(*(void *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          void *v8 = *v14;
          void *v14 = **(void **)(*(void *)a1 + 8 * v15);
          **(void **)(*(void *)a1 + 8 * v15) = v14;
          v14 = v8;
        }
        size_t v15 = v9;
LABEL_31:
        v8 = v14;
        v14 = (void *)*v14;
        size_t v9 = v15;
      }
      while (v14);
    }
  }
}

void std::__throw_bad_array_new_length[abi:nn180100]()
{
}

void sub_2BE8(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<long long,objc_object  {objcproto8NSObject}*>,std::__unordered_map_hasher<long long,objc_object  {objcproto8NSObject}*,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,objc_object  {objcproto8NSObject}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto8NSObject}*>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<long long,objc_object  {objcproto8NSObject}*>,std::__unordered_map_hasher<long long,objc_object  {objcproto8NSObject}*,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,objc_object  {objcproto8NSObject}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto8NSObject}*>>::~__hash_table(uint64_t a1)
{
  int8x8_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint8x8_t v3 = (void *)*v2;
      operator delete(v2);
      int8x8_t v2 = v3;
    }
    while (v3);
  }
  int8x8_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void sub_30A8()
{
  std::__hash_table<std::__hash_value_type<long long,objc_object  {objcproto8NSObject}*>,std::__unordered_map_hasher<long long,objc_object  {objcproto8NSObject}*,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,objc_object  {objcproto8NSObject}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto8NSObject}*>>::~__hash_table(v0);
  operator delete();
}

void sub_4E5C(_Unwind_Exception *exception_object)
{
}

void sub_4E94(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    if (a2 == 2)
    {
      *(void *)(v2 + 40) = 0;
      objc_end_catch();
    }
    JUMPOUT(0x4DF0);
  }
  JUMPOUT(0x4E84);
}

void __clang_call_terminate(void *a1)
{
}

void __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

void sub_7854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t GPUTools::VMBuffer::resize(GPUTools::VMBuffer *this, vm_size_t a2)
{
  vm_address_t v3 = *(void *)this;
  vm_size_t v4 = *((void *)this + 1);
  uint64_t v5 = *((void *)this + 2);
  uint64_t result = GPUTools::VMBuffer::_alloc(this, a2, v5);
  if (result)
  {
    if (v4 >= *((void *)this + 1)) {
      vm_size_t v7 = *((void *)this + 1);
    }
    else {
      vm_size_t v7 = v4;
    }
    if (vm_copy(mach_task_self_, v3, v7, *(void *)this))
    {
      GPUTools::VMBuffer::_dealloc((vm_address_t *)this);
      return 0;
    }
    else
    {
      vm_deallocate(mach_task_self_, v3, vm_page_size + v4 + v4 * v5);
      return 1;
    }
  }
  return result;
}

uint64_t GPUTools::VMBuffer::_alloc(GPUTools::VMBuffer *this, vm_size_t a2, uint64_t a3)
{
  int v3 = 0;
  vm_address_t address = 0;
  if (3 * vm_page_size <= a2) {
    vm_size_t v4 = (a2 + vm_page_size - 1) & -(uint64_t)vm_page_size;
  }
  else {
    vm_size_t v4 = 3 * vm_page_size;
  }
  vm_size_t v5 = v4 + v4 * a3;
  while (1)
  {
    vm_map_t v6 = mach_task_self_;
    vm_size_t v7 = vm_page_size + v5;
    if (!vm_allocate(mach_task_self_, &address, vm_page_size + v5, 1))
    {
      vm_address_t v8 = address;
      vm_address_t v9 = address + v4;
      target_vm_address_t address = address + v4;
      uint64_t v10 = a3;
      if (a3)
      {
        while (!vm_deallocate(v6, v9, v4))
        {
          uint64_t cur_protection = 0;
          if (vm_remap(v6, &target_address, v4, 0, 0, v6, address, 0, (vm_prot_t *)&cur_protection + 1, (vm_prot_t *)&cur_protection, 2u))
          {
            break;
          }
          vm_address_t v9 = target_address + v4;
          target_address += v4;
          if (!--v10)
          {
            vm_address_t v8 = address;
            goto LABEL_11;
          }
        }
        goto LABEL_12;
      }
LABEL_11:
      if (!vm_protect(v6, v8 + v7 - vm_page_size, vm_page_size, 0, 0)) {
        break;
      }
    }
LABEL_12:
    vm_deallocate(mach_task_self_, address, vm_page_size + v5);
    if (++v3 == 5) {
      return 0;
    }
  }
  *(void *)this = address;
  *((void *)this + 1) = v4;
  *((void *)this + 2) = a3;
  return 1;
}

vm_address_t *GPUTools::VMBuffer::_dealloc(vm_address_t *this)
{
  if (*this)
  {
    uint64_t v1 = this;
    this = (vm_address_t *)vm_deallocate(mach_task_self_, *this, vm_page_size + this[1] + this[1] * this[2]);
    v1[1] = 0;
    v1[2] = 0;
    vm_address_t *v1 = 0;
  }
  return this;
}

void sub_82FC()
{
}

void sub_83BC()
{
}

void sub_A750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t smt_poll_thread_entry(void *a1)
{
  uint64_t v2 = a1[1];
  int v3 = (void *)a1[2];
  snprintf(__str, 0x40uLL, "gputools.smt_poll.%p", a1);
  pthread_setname_np(__str);
  while (!*((unsigned char *)a1 + 24))
  {
    dispatch_sync(v2, v3);
    usleep(0x1F40u);
  }

  return 0;
}

void sub_B860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id DYErrorFromDictionary(NSDictionary *a1)
{
  id result = [(NSDictionary *)a1 objectForKey:@"error domain"];
  if (result)
  {
    id v3 = result;
    id v4 = objc_msgSend(-[NSDictionary objectForKey:](a1, "objectForKey:", @"error code"), "integerValue");
    vm_size_t v5 = +[NSDictionary dictionaryWithObject:[(NSDictionary *)a1 objectForKey:@"error description"] forKey:NSLocalizedDescriptionKey];
    return +[GTError_capture errorWithDomain:v3 code:v4 userInfo:v5];
  }
  return result;
}

NSDictionary *DYDictionaryFromError(NSDictionary *result)
{
  if (result) {
    return +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", [(NSDictionary *)result domain], @"error domain", +[NSNumber numberWithInteger:[(NSDictionary *)result code]], @"error code", [(NSDictionary *)result localizedDescription], @"error description", 0);
  }
  return result;
}

unint64_t GPUTools::VMBuffer::round_size(unint64_t this)
{
  if (3 * vm_page_size <= this) {
    return (this + vm_page_size - 1) & -(uint64_t)vm_page_size;
  }
  else {
    return 3 * vm_page_size;
  }
}

GPUTools::VMBuffer *GPUTools::VMBuffer::VMBuffer(GPUTools::VMBuffer *this, vm_size_t a2, uint64_t a3)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 1;
  GPUTools::VMBuffer::_dealloc((vm_address_t *)this);
  GPUTools::VMBuffer::_alloc(this, a2, a3);
  return this;
}

{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 1;
  GPUTools::VMBuffer::_dealloc((vm_address_t *)this);
  GPUTools::VMBuffer::_alloc(this, a2, a3);
  return this;
}

uint64_t GPUTools::VMBuffer::alloc(vm_address_t *this, vm_size_t a2, uint64_t a3)
{
  GPUTools::VMBuffer::_dealloc(this);

  return GPUTools::VMBuffer::_alloc((GPUTools::VMBuffer *)this, a2, a3);
}

void GPUTools::VMBuffer::~VMBuffer(vm_address_t *this)
{
}

{
  GPUTools::VMBuffer::_dealloc(this);
}

vm_address_t *GPUTools::VMBuffer::operator=(vm_address_t *this, uint64_t a2)
{
  if (this != (vm_address_t *)a2)
  {
    GPUTools::VMBuffer::_dealloc(this);
    *(_OWORD *)this = *(_OWORD *)a2;
    *((_OWORD *)this + 1) = *(_OWORD *)(a2 + 16);
    *((_OWORD *)this + 2) = *(_OWORD *)(a2 + 32);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  return this;
}

BOOL GPUTools::VMBuffer::protect_readonly(vm_address_t *this)
{
  return vm_protect(mach_task_self_, *this, this[2] * this[1], 0, 1) == 0;
}

GTBaseSocketTransport_capture *DYCreateTransportSocket(uint64_t a1)
{
  uint64_t v2 = objc_alloc_init(GTBaseSocketTransport_capture);
  [(GTBaseSocketTransport_capture *)v2 runWithSocket:a1];
  return v2;
}

id DYCreateTransportC(uint64_t a1)
{
  if (!a1)
  {
    if (s_logUsingOsLog)
    {
      vm_address_t v9 = gt_default_log();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        uint64_t v10 = "fail: [create_transport] GT_HOST_URL environment not set";
        unint64_t v11 = v9;
        uint32_t v12 = 2;
        goto LABEL_24;
      }
    }
    else
    {
      v14 = __stderrp;
      [+[NSString stringWithFormat:@"fail: [create_transport] GT_HOST_URL environment not set"] UTF8String];
      fprintf(v14, "%s\n");
    }
    goto LABEL_29;
  }
  uint64_t v2 = +[NSString stringWithCString:a1 encoding:4];
  if (!v2) {
    __assert_rtn("GTTransport *DYCreateTransportC(const char *)", "", 0, "url_str");
  }
  id v3 = +[NSURL URLWithString:v2];
  if (!v3)
  {
    if (s_logUsingOsLog)
    {
      uint64_t v13 = gt_default_log();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136315138;
        uint64_t v18 = a1;
        uint64_t v10 = "fail: [create_transport] failed to parse GT_HOST_URL: %s";
LABEL_23:
        unint64_t v11 = v13;
        uint32_t v12 = 12;
LABEL_24:
        _os_log_fault_impl(&def_CFBEC, v11, OS_LOG_TYPE_FAULT, v10, buf, v12);
        abort();
      }
LABEL_29:
      abort();
    }
    size_t v15 = __stderrp;
    v16 = +[NSString stringWithFormat:@"fail: [create_transport] failed to parse GT_HOST_URL: %s", a1];
LABEL_28:
    [(NSString *)v16 UTF8String];
    fprintf(v15, "%s\n");
    goto LABEL_29;
  }
  id v4 = v3;
  vm_size_t v5 = [(NSURL *)v3 scheme];
  if (![(NSString *)v5 isEqualToString:@"null"])
  {
    if ([(NSString *)v5 isEqualToString:@"file"])
    {
      vm_size_t v7 = &off_220DB0;
    }
    else
    {
      if (![(NSString *)v5 isEqualToString:@"dysmt"]
        && ![(NSString *)v5 isEqualToString:@"dysmtdeferred"])
      {
LABEL_20:
        if (s_logUsingOsLog)
        {
          uint64_t v13 = gt_default_log();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = 136315138;
            uint64_t v18 = a1;
            uint64_t v10 = "fail: [create_transport] failed to create transport; GT_HOST_URL: %s";
            goto LABEL_23;
          }
          goto LABEL_29;
        }
        size_t v15 = __stderrp;
        v16 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"fail: [create_transport] failed to create transport; GT_HOST_URL: %s",
                a1);
        goto LABEL_28;
      }
      vm_size_t v7 = &off_220D58;
    }
    id v6 = [objc_alloc(*v7) initWithMode:1];
    [v6 setUrl:v4];
    if (v6) {
      return v6;
    }
    goto LABEL_20;
  }
  return 0;
}

void *GTTraceDispatch_create(apr_pool_t *parent, uint64_t a2)
{
  newpool = 0;
  apr_pool_create_ex(&newpool, parent, 0, 0);
  id v3 = newpool;
  id result = apr_palloc(newpool, 0x28uLL);
  if (result)
  {
    result[2] = 0;
    result[3] = 0;
    result[4] = 0;
  }
  void *result = v3;
  result[1] = a2;
  return result;
}

void GTTraceDispatch_destroy(apr_pool_t **a1)
{
}

void GTTraceDispatch_sort(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = __chkstk_darwin(a1, a2);
  id v3 = *(apr_pool_t **)v2;
  id v4 = *(void **)(v2 + 8);
  uint64_t v96 = v4[68];
  uint64_t v107 = v4[2];
  uint64_t v99 = v4[69];
  uint64_t v102 = v4[71];
  uint64_t v104 = v4[3];
  newpool = 0;
  apr_pool_create_ex(&newpool, v3, 0, 0);
  vm_size_t v5 = newpool;
  uint64_t v101 = v2;
  id v6 = *(void **)(v2 + 8);
  uint64_t v7 = v6[2];
  uint64_t v8 = v6[71];
  vm_address_t v9 = apr_array_make(newpool, 4, 8);
  unint64_t v10 = v6[5] + v6[6] - 1;
  GTMTLSMContext_getObjects(*(_DWORD **)(v8 + 128), v10, v9);
  GTMTLSMContext_getObjects(*(_DWORD **)(v8 + 136), v10, v9);
  v97 = v6;
  unint64_t v11 = (apr_array_header_t *)v6[68];
  uint32_t v12 = apr_array_make(v5, 4, 64);
  if (v9->nelts >= 1)
  {
    uint64_t v13 = 0;
    uint64_t v105 = v7;
    do
    {
      uint64_t v14 = *(void *)&v9->elts[8 * v13];
      if (v14) {
        uint64_t v14 = *(void *)(v14 + 8);
      }
      uint64_t v108 = v14;
      entry = find_entry(v7, &v108, 8uLL, 0);
      if (*entry)
      {
        uint64_t v16 = *(void *)(*entry + 32);
        if (v16)
        {
          uint64_t v17 = *(void *)(v16 + 32);
          if (v17)
          {
            unsigned int v18 = 0;
            while (1)
            {
              unsigned int v19 = atomic_load((unsigned int *)(v17 + 4));
              uint64_t v20 = v18 + (v19 >> 6) - 1;
              if ((int)v20 > 0) {
                break;
              }
              uint64_t v17 = *(void *)(v17 + 40);
              unsigned int v18 = v20;
              if (!v17)
              {
                unsigned int v18 = v20;
                goto LABEL_14;
              }
            }
          }
          else
          {
            unsigned int v18 = 0;
          }
          uint64_t v20 = 0;
LABEL_14:
          unint64_t v21 = v18 | (unint64_t)(v20 << 32);
LABEL_15:
          uint64_t v22 = v17 + 64;
          while (v17 && (*(unsigned char *)(v22 + ((uint64_t)(HIDWORD(v21) - (int)v21) << 6) + 15) & 8) != 0)
          {
            v23 = (long long *)(v22 + ((uint64_t)(HIDWORD(v21) - (int)v21) << 6));
            if (*(void *)v23 > v10)
            {
              int v24 = *((_DWORD *)v23 + 2);
              if (v24 == -15490 || v24 == -15975)
              {
                v26 = apr_array_push(v12);
                long long v27 = *v23;
                long long v28 = v23[1];
                long long v29 = v23[3];
                v26[2] = v23[2];
                v26[3] = v29;
                _OWORD *v26 = v27;
                v26[1] = v28;
                if (v10 <= *(void *)v23) {
                  unint64_t v10 = *(void *)v23;
                }
              }
            }
            unsigned int v30 = atomic_load((unsigned int *)(v17 + 4));
            int v31 = v21 + (v30 >> 6);
            uint64_t v32 = (HIDWORD(v21) + 1);
            unint64_t v21 = (v32 << 32) | v21;
            if (v32 == v31 - 1)
            {
              unint64_t v21 = (v32 << 32) | v32;
              uint64_t v17 = *(void *)(v17 + 40);
              goto LABEL_15;
            }
          }
          uint64_t v7 = v105;
        }
      }
      ++v13;
    }
    while (v13 < v9->nelts);
    vm_size_t v5 = newpool;
  }
  uint64_t v33 = v101;
  qsort(v12->elts, v12->nelts, v12->elt_size, (int (__cdecl *)(const void *, const void *))CompareGTTraceFunc);
  apr_array_cat(v11, v12);
  v97[6] = v10 - v97[5] + 1;
  v34 = apr_array_make(*(apr_pool_t **)v101, *(_DWORD *)(v96 + 12), *(_DWORD *)(v96 + 8));
  unint64_t v106 = *(void *)(*(void *)(v101 + 8) + 40);
  v35 = apr_array_make(v5, *(_DWORD *)(v99 + 12), 16);
  uint64_t v36 = *(unsigned int *)(v99 + 12);
  if ((int)v36 >= 1)
  {
    unint64_t v37 = v36 + 1;
    do
      *(void *)apr_array_push(v35) = *(void *)(*(void *)(v99 + 24) + 8 * (v37-- - 2));
    while (v37 > 1);
  }
  v38 = GTEventTracker_make(v107, v104, v102, v5);
  v103 = v35;
  if (*(int *)(v99 + 12) >= 1)
  {
    uint64_t v39 = 0;
    do
    {
      uint64_t v108 = 0;
      uint64_t v108 = *(void *)(*(void *)(v99 + 24) + 8 * v39);
      uint64_t v40 = *(void *)(*(void *)(*find_entry(v107, &v108, 8uLL, 0) + 32) + 32);
      if (v40)
      {
        unsigned int v41 = 0;
        while (1)
        {
          unsigned int v42 = atomic_load((unsigned int *)(v40 + 4));
          uint64_t v43 = v41 + (v42 >> 6) - 1;
          if ((int)v43 > 0) {
            break;
          }
          uint64_t v40 = *(void *)(v40 + 40);
          unsigned int v41 = v43;
          if (!v40)
          {
            unsigned int v41 = v43;
            goto LABEL_43;
          }
        }
      }
      else
      {
        unsigned int v41 = 0;
      }
      uint64_t v43 = 0;
LABEL_43:
      unint64_t v44 = v41 | (unint64_t)(v43 << 32);
LABEL_44:
      uint64_t v45 = v40 + 64;
      while (v40 && (*(unsigned char *)(v45 + ((uint64_t)(HIDWORD(v44) - (int)v44) << 6) + 15) & 8) != 0)
      {
        GTEventTracker_processFunction((uint64_t)v38, v45 + ((uint64_t)(HIDWORD(v44) - (int)v44) << 6));
        unsigned int v46 = atomic_load((unsigned int *)(v40 + 4));
        int v47 = v44 + (v46 >> 6);
        uint64_t v48 = (HIDWORD(v44) + 1);
        unint64_t v44 = (v48 << 32) | v44;
        if (v48 == v47 - 1)
        {
          unint64_t v44 = (v48 << 32) | v48;
          uint64_t v40 = *(void *)(v40 + 40);
          goto LABEL_44;
        }
      }
      ++v39;
      v35 = v103;
    }
    while (v39 < *(int *)(v99 + 12));
  }
  v49 = (uint64_t *)GTEventTracker_makeFrom((uint64_t)v38);
  GTCoreLogTagEnabled(2uLL);
  uint64_t v98 = *(void *)(*(void *)(v101 + 8) + 48) + *(void *)(*(void *)(v101 + 8) + 40);
  unint64_t v100 = v98 - 1;
  if (v35->nelts)
  {
    while (1)
    {
      uint64_t NextBufferToProcess = FindNextBufferToProcess((uint64_t)v35, (uint64_t)v49, *(void *)(*(void *)(v33 + 8) + 16), *(void *)(*(void *)(v33 + 8) + 24));
      if (NextBufferToProcess)
      {
LABEL_60:
        uint64_t v58 = NextBufferToProcess;
      }
      else
      {
        uint64_t nelts = v35->nelts;
        int v52 = nelts + 1;
        uint64_t v53 = 16 * nelts - 16;
        while (--v52 >= 1)
        {
          uint64_t v54 = *find_entry(v107, &v35->elts[v53], 8uLL, 0);
          if (v54) {
            uint64_t v55 = *(void *)(v54 + 32);
          }
          else {
            uint64_t v55 = 0;
          }
          unint64_t v56 = CommandBufferCommitIndex(v55);
          if (v56 > v106)
          {
            unint64_t v57 = v56;
            ProcessResourceAPIs((uint64_t)v34, v106, v56 - v106, v49, *(void **)(v33 + 8));
            unint64_t v106 = v57;
          }
          v53 -= 16;
          uint64_t NextBufferToProcess = FindNextBufferToProcess((uint64_t)v35, (uint64_t)v49, *(void *)(*(void *)(v33 + 8) + 16), *(void *)(*(void *)(v33 + 8) + 24));
          if (NextBufferToProcess) {
            goto LABEL_60;
          }
        }
        if (v106 < v100) {
          ProcessResourceAPIs((uint64_t)v34, v106, v98 - v106, v49, *(void **)(v33 + 8));
        }
        uint64_t v58 = FindNextBufferToProcess((uint64_t)v35, (uint64_t)v49, *(void *)(*(void *)(v33 + 8) + 16), *(void *)(*(void *)(v33 + 8) + 24));
        unint64_t v106 = v98 - 1;
        if (!v58)
        {
          GTCoreLogTagEnabled(2uLL);
          goto LABEL_112;
        }
      }
      uint64_t v59 = *find_entry(v107, (unsigned char *)v58, 8uLL, 0);
      if (!v59) {
        break;
      }
      uint64_t v60 = *(void *)(v59 + 32);
      if (!v60) {
        goto LABEL_67;
      }
      uint64_t v61 = *(void *)(v60 + 32);
      if (!v61 || (*(unsigned char *)(v61 + 79) & 8) == 0) {
        goto LABEL_67;
      }
      uint64_t v62 = v61 + 64;
LABEL_68:
      v63 = GTTraceFunc_targetContext(v62, v104);
      unint64_t v64 = CommandBufferCommitIndex(v60);
      uint64_t v65 = *(void *)(v58 + 8);
      if (!v65)
      {
        unint64_t v66 = v64;
        unint64_t v67 = v106;
        if (v64 > v106)
        {
          ProcessResourceAPIs((uint64_t)v34, v106, v64 - v106, v49, *(void **)(v101 + 8));
          unint64_t v67 = v66;
        }
        unint64_t v106 = v67;
        if (v60 && (uint64_t v68 = *(void *)(v60 + 32)) != 0 && (*(unsigned char *)(v68 + 79) & 8) != 0) {
          v69 = (long long *)(v68 + 64);
        }
        else {
          v69 = 0;
        }
        v70 = apr_array_push(v34);
        long long v71 = v69[3];
        long long v73 = *v69;
        long long v72 = v69[1];
        v70[2] = v69[2];
        v70[3] = v71;
        _OWORD *v70 = v73;
        v70[1] = v72;
        *(void *)(v58 + 8) = 1;
        uint64_t v65 = 1;
      }
      uint64_t v74 = *(void *)(v60 + 32);
      if (v74)
      {
        int v75 = 0;
        while (1)
        {
          unsigned int v76 = atomic_load((unsigned int *)(v74 + 4));
          uint64_t v77 = v75 + (v76 >> 6) - 1;
          if ((int)v77 > (int)v65) {
            break;
          }
          uint64_t v74 = *(void *)(v74 + 40);
          int v75 = v77;
          if (!v74)
          {
            uint64_t v65 = v77;
            goto LABEL_83;
          }
        }
        LODWORD(v77) = v75;
      }
      else
      {
        LODWORD(v77) = 0;
        uint64_t v65 = 0;
      }
LABEL_83:
      uint64_t v78 = v77 | (unint64_t)(v65 << 32);
LABEL_84:
      uint64_t v79 = v74 + 64;
      while (v74)
      {
        if ((*(unsigned char *)(v79 + ((uint64_t)(HIDWORD(v78) - (int)v78) << 6) + 15) & 8) == 0) {
          goto LABEL_101;
        }
        uint64_t v80 = v79 + ((uint64_t)(HIDWORD(v78) - (int)v78) << 6);
        GTEventTracker_processFunction((uint64_t)v49, v80);
        int v81 = *(_DWORD *)(v80 + 8);
        if (v81 > -15340)
        {
          BOOL v82 = v81 == -15308;
          int v83 = -15339;
        }
        else
        {
          BOOL v82 = v81 == -15991;
          int v83 = -15749;
        }
        BOOL v84 = v82 || v81 == v83;
        if (v84 && GTEventTracker_isBlocked((uint64_t)v49, (uint64_t)v63))
        {
          *(void *)(v58 + 8) = v78 >> 32;
LABEL_101:
          if ((*(unsigned char *)(v79 + ((uint64_t)(0xFFFFFFFF00000001 * v78) >> 32 << 6) + 15) & 8) != 0) {
            goto LABEL_103;
          }
          break;
        }
        v85 = apr_array_push(v34);
        long long v86 = *(_OWORD *)(v80 + 48);
        long long v88 = *(_OWORD *)v80;
        long long v87 = *(_OWORD *)(v80 + 16);
        v85[2] = *(_OWORD *)(v80 + 32);
        v85[3] = v86;
        _OWORD *v85 = v88;
        v85[1] = v87;
        int FuncEnumConstructorType = GetFuncEnumConstructorType(*(_DWORD *)(v80 + 8));
        if (IsCommandEncoder(FuncEnumConstructorType))
        {
          bzero(&v108, 0x2B90uLL);
          GTMTLSMCommandEncoder_processTraceFunc((uint64_t)&v108, (uint64_t *)v80, v104);
          WriteCommandEncoder(v107, v104);
        }
        unsigned int v90 = atomic_load((unsigned int *)(v74 + 4));
        int v91 = v78 + (v90 >> 6);
        uint64_t v92 = (HIDWORD(v78) + 1);
        uint64_t v78 = (v92 << 32) | v78;
        if (v92 == v91 - 1)
        {
          uint64_t v78 = (v92 << 32) | v92;
          uint64_t v74 = *(void *)(v74 + 40);
          goto LABEL_84;
        }
      }
      elts = v103->elts;
      uint64_t elt_size = v103->elt_size;
      uint64_t v95 = v103->nelts - 1;
      v103->uint64_t nelts = v95;
      memmove(&elts[(int)elt_size * (uint64_t)(int)((v58 - (uint64_t)elts) >> 4)], &elts[elt_size + (int)elt_size * (uint64_t)(int)((v58 - (uint64_t)elts) >> 4)], elt_size * (v95 - (int)((unint64_t)(v58 - (void)elts) >> 4)));
LABEL_103:
      uint64_t v33 = v101;
      v35 = v103;
      if (!v103->nelts) {
        goto LABEL_110;
      }
    }
    uint64_t v60 = 0;
LABEL_67:
    uint64_t v62 = 0;
    goto LABEL_68;
  }
LABEL_110:
  GTCoreLogTagEnabled(2uLL);
  if (v106 < v100) {
    ProcessResourceAPIs((uint64_t)v34, v106, v98 - v106, v49, *(void **)(v33 + 8));
  }
LABEL_112:
  apr_pool_destroy(newpool);
  *(void *)(v33 + 16) = v34;
}

uint64_t FindNextBufferToProcess(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(unsigned int *)(a1 + 12);
  uint64_t v9 = 16 * v8;
  int v10 = v8 + 1;
  while (--v10 >= 1)
  {
    uint64_t v11 = *(void *)(a1 + 24);
    uint64_t v12 = *find_entry(a3, (unsigned char *)(v11 + v9 - 16), 8uLL, 0);
    if (v12
      && (uint64_t v13 = *(void *)(v12 + 32)) != 0
      && (uint64_t v14 = *(void *)(v13 + 32)) != 0
      && (*(unsigned char *)(v14 + 79) & 8) != 0)
    {
      uint64_t v15 = v14 + 64;
    }
    else
    {
      uint64_t v15 = 0;
    }
    v9 -= 16;
    uint64_t v16 = GTTraceFunc_targetContext(v15, a4);
    if (!GTEventTracker_isBlocked(a2, (uint64_t)v16)) {
      return v11 + v9;
    }
  }
  return 0;
}

uint64_t ProcessResourceAPIs(uint64_t result, unint64_t a2, uint64_t a3, uint64_t *a4, void *a5)
{
  arr = (apr_array_header_t *)result;
  uint64_t v7 = a5[3];
  uint64_t v8 = a5[68];
  uint64_t v9 = *(unsigned int *)(v8 + 12);
  if ((int)v9 < 1)
  {
    LODWORD(v10) = 0;
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = *(unint64_t **)(v8 + 24);
    while (1)
    {
      unint64_t v12 = *v11;
      v11 += 8;
      if (a2 <= v12) {
        break;
      }
      if (v9 == ++v10) {
        return result;
      }
    }
  }
  if ((int)v10 < (int)v9)
  {
    unint64_t v13 = a2 + a3;
    for (unint64_t i = (unint64_t)v10 << 6; ; i += 64)
    {
      uint64_t v15 = *(void *)(v8 + 24);
      uint64_t v16 = v15 + i;
      if (v13 <= *(void *)(v15 + i)) {
        return result;
      }
      FuncStreamRef = GTTraceFunc_getFuncStreamRef(v15 + i, a5[3]);
      uint64_t v18 = a5[2];
      uint64_t v33 = FuncStreamRef;
      id result = (uint64_t)find_entry(v18, &v33, 8uLL, 0);
      if (*(void *)result)
      {
        uint64_t v19 = *(void *)(*(void *)result + 32);
        if (v19)
        {
          uint64_t v20 = *(void *)(v19 + 32);
          if (v20)
          {
            if ((*(unsigned char *)(v20 + 79) & 8) != 0) {
              uint64_t v21 = v20 + 64;
            }
            else {
              uint64_t v21 = 0;
            }
          }
          else
          {
            uint64_t v21 = 0;
          }
          uint64_t v22 = v15 + i;
          int v23 = *(unsigned char *)(v15 + i + 15) & 0x40;
          int v24 = *(_DWORD *)(v15 + i + 8);
          if (v24 != -15490 && v24 != -15975 || v23 == 0) {
            goto LABEL_26;
          }
          long long v27 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)v16, *(unsigned __int8 *)(v22 + 13), v7);
          id result = GTEventTracker_isValueSignaled(a4, *v27, v27[1]);
          if ((result & 1) == 0) {
            break;
          }
        }
      }
LABEL_40:
      uint64_t v8 = a5[68];
      LODWORD(v10) = v10 + 1;
      if (*(_DWORD *)(v8 + 12) <= (int)v10) {
        return result;
      }
    }
    GTEventTracker_processFunction((uint64_t)a4, v16);
    int v24 = *(_DWORD *)(v22 + 8);
LABEL_26:
    id result = GetFuncEnumConstructorType(v24);
    if (result != 25)
    {
      BOOL v28 = (v24 + 6144) > 0x29 || ((0x3806C9D5295uLL >> v24) & 1) == 0;
      if (v28
        && (((v24 + 15345) < 0x39) & (0x17C40BE00017E7FuLL >> (v24 - 15))) == 0
        && result != 51
        && v24 != -20474
        && v24 != -20457)
      {
        if (v21 && (id result = IsFuncEnumCreateResource(*(_DWORD *)(v21 + 8)), (result & 1) != 0) || v24 == -10168)
        {
          id result = (uint64_t)apr_array_push(arr);
          long long v29 = *(_OWORD *)(v16 + 48);
          long long v31 = *(_OWORD *)v16;
          long long v30 = *(_OWORD *)(v16 + 16);
          *(_OWORD *)(result + 32) = *(_OWORD *)(v16 + 32);
          *(_OWORD *)(result + 48) = v29;
          *(_OWORD *)id result = v31;
          *(_OWORD *)(result + 16) = v30;
        }
      }
    }
    goto LABEL_40;
  }
  return result;
}

void WriteCommandEncoder(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = __chkstk_darwin(a1, a2);
  id v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = v2;
  v27[0] = v8;
  entry = find_entry(v2, v27, 8uLL, 0);
  if (*entry) {
    uint64_t v10 = *(void *)(*entry + 32);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t nelts = v4->nelts;
  uint64_t v12 = *(void *)(v10 + 32);
  if (v12)
  {
    unsigned int v13 = 0;
    while (1)
    {
      unsigned int v14 = atomic_load((unsigned int *)(v12 + 4));
      uint64_t v15 = v13 + (v14 >> 6) - 1;
      if ((int)v15 > 1) {
        break;
      }
      uint64_t v12 = *(void *)(v12 + 40);
      unsigned int v13 = v15;
      if (!v12)
      {
        unsigned int v13 = v15;
        goto LABEL_11;
      }
    }
    uint64_t v15 = 1;
  }
  else
  {
    unsigned int v13 = 0;
    uint64_t v15 = 0;
  }
LABEL_11:
  unint64_t v16 = v13 | (unint64_t)(v15 << 32);
LABEL_12:
  uint64_t v17 = v12 + 64;
  while (v12 && (*(unsigned char *)(v17 + ((uint64_t)(HIDWORD(v16) - (int)v16) << 6) + 15) & 8) != 0)
  {
    uint64_t v18 = (long long *)(v17 + ((uint64_t)(HIDWORD(v16) - (int)v16) << 6));
    uint64_t v19 = apr_array_push(v4);
    long long v20 = v18[3];
    long long v22 = *v18;
    long long v21 = v18[1];
    v19[2] = v18[2];
    v19[3] = v20;
    *uint64_t v19 = v22;
    v19[1] = v21;
    int FuncEnumConstructorType = GetFuncEnumConstructorType(*((_DWORD *)v18 + 2));
    if (IsCommandEncoder(FuncEnumConstructorType))
    {
      bzero(v27, 0x2B90uLL);
      GTMTLSMCommandEncoder_processTraceFunc((uint64_t)v27, (uint64_t *)v18, v6);
      WriteCommandEncoder(v7, v6, v4, v27[1]);
    }
    unsigned int v24 = atomic_load((unsigned int *)(v12 + 4));
    int v25 = v16 + (v24 >> 6);
    uint64_t v26 = (HIDWORD(v16) + 1);
    unint64_t v16 = (v26 << 32) | v16;
    if (v26 == v25 - 1)
    {
      unint64_t v16 = (v26 << 32) | v26;
      uint64_t v12 = *(void *)(v12 + 40);
      goto LABEL_12;
    }
  }
  if (GetFuncEnumConstructorType(*(_DWORD *)(*(void *)(v10 + 32) + 72)) == 17) {
    qsort(&v4->elts[v4->elt_size * (uint64_t)(int)nelts], v4->nelts - nelts, v4->elt_size, (int (__cdecl *)(const void *, const void *))CompareGTTraceFunc);
  }
}

uint64_t CompareGTTraceFunc(void *a1, void *a2)
{
  if (*a1 < *a2) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *a1 > *a2;
  }
}

uint64_t MapPresentToBoundary(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a1;
  uint64_t v8 = *(void *)(a2 + 24) + (a1 << 6);
  if (GetFuncEnumReceiverType(*(_DWORD *)(v8 + 8)) == 25)
  {
    uint64_t v9 = GTTraceFunc_targetContext(v8, a4);
    unint64_t v10 = *(int *)(a2 + 12);
    if (v7 + 1 < v10)
    {
      uint64_t v11 = v9;
      for (uint64_t i = (v7++ << 6) + 72; ; i += 64)
      {
        uint64_t v13 = *(void *)(a2 + 24);
        int v14 = *(_DWORD *)(v13 + i);
        if (v14 <= -15909)
        {
          if (v14 == -16361 || v14 == -16202)
          {
LABEL_18:
            if (GTTraceFunc_targetContext(v13 + i - 8, a4) == v11) {
              return v7;
            }
            LODWORD(v10) = *(_DWORD *)(a2 + 12);
          }
        }
        else if (v14 == -15908 || v14 == -15316 || v14 == -15318)
        {
          goto LABEL_18;
        }
        if (++v7 >= (unint64_t)(int)v10) {
          return v7;
        }
      }
    }
    ++v7;
  }
  else if (*(unsigned char *)(v8 + 12))
  {
    uint64_t v20 = *(void *)GTTraceFunc_argumentBytesWithMap((void *)v8, *(unsigned __int8 *)(v8 + 12), a4);
    uint64_t v18 = *find_entry(a3, &v20, 8uLL, 0);
    if (v18) {
      uint64_t v18 = *(void *)(v18 + 32);
    }
    if (v18) {
      return v18;
    }
    else {
      return -1;
    }
  }
  return v7;
}

void GTTraceDispatch_boundaries(apr_pool_t **a1, uint64_t a2)
{
  id v3 = a1;
  newpool = 0;
  apr_pool_create_ex(&newpool, *a1, 0, 0);
  id v4 = v3[1];
  uint64_t v5 = (const apr_array_header_t *)v3[2];
  uint64_t v6 = *((void *)v4 + 3);
  uint64_t v82 = *((void *)v4 + 2);
  uint64_t v7 = *((void *)v4 + 68);
  uint64_t v8 = apr_array_make(*v3, v5->nelts, v5->elt_size);
  uint64_t nelts = v5->nelts;
  uint64_t v10 = *(void *)(a2 + 48);
  switch(*(_DWORD *)(a2 + 80))
  {
    case 0:
    case 1:
      uint64_t v11 = apr_array_copy(*v3, v5);
      uint64_t v12 = v11;
      if (*(_DWORD *)(a2 + 80) != 1) {
        goto LABEL_60;
      }
      uint64_t v13 = v11->nelts;
      if ((int)v13 < 1) {
        goto LABEL_60;
      }
      uint64_t v14 = 0;
      uint64_t v15 = (int *)(v11->elts + 8);
      while (2)
      {
        int v17 = *v15;
        v15 += 16;
        int v16 = v17;
        if (v17 <= -15909)
        {
          if (v16 != -16361 && v16 != -16202)
          {
LABEL_20:
            if (v13 == ++v14) {
              goto LABEL_60;
            }
            continue;
          }
        }
        else if (v16 != -15908 && v16 != -15316 && v16 != -15318)
        {
          goto LABEL_20;
        }
        break;
      }
      if (--v10) {
        goto LABEL_20;
      }
      IndexOfFirstCommandBufferInQueue = 0;
      uint64_t nelts = (v14 + 1);
      goto LABEL_120;
    case 2:
    case 3:
      IndexOfFirstCommandBufferInQueue = (apr_pool_t *)(int)FindIndexOfFirstCommandBufferInQueue(*(char **)(a2 + 8), (uint64_t)v5, v6);
      uint64_t nelts = v5->nelts - (void)IndexOfFirstCommandBufferInQueue;
      long long v22 = apr_array_copy(*v3, v5);
      uint64_t v12 = v22;
      if (*(_DWORD *)(a2 + 80) != 3 || v22->nelts < 1) {
        goto LABEL_120;
      }
      int v23 = v3;
      uint64_t v24 = 0;
      uint64_t v25 = 0;
      uint64_t v26 = *(char **)(a2 + 8);
      while (1)
      {
        elts = v12->elts;
        int v28 = *(_DWORD *)&elts[v24 + 8];
        if (v28 <= -15909)
        {
          BOOL v29 = v28 == -16361;
          int v30 = -16202;
        }
        else
        {
          BOOL v29 = v28 == -15908 || v28 == -15316;
          int v30 = -15318;
        }
        if (v29 || v28 == v30)
        {
          BOOL v84 = GTTraceFunc_targetContext((uint64_t)&elts[v24], v6);
          uint64_t v32 = *find_entry(v82, &v84, 8uLL, 0);
          if (v32
            && (uint64_t v33 = *(void *)(v32 + 32)) != 0
            && (uint64_t v34 = *(void *)(v33 + 32)) != 0
            && (*(unsigned char *)(v34 + 79) & 8) != 0)
          {
            uint64_t v35 = v34 + 64;
          }
          else
          {
            uint64_t v35 = 0;
          }
          if (v26 == GTTraceFunc_targetContext(v35, v6) && !--v10) {
            break;
          }
        }
        ++v25;
        v24 += 64;
        if (v25 >= v12->nelts) {
          goto LABEL_119;
        }
      }
      uint64_t nelts = v25 - (void)IndexOfFirstCommandBufferInQueue + 1;
LABEL_119:
      id v3 = v23;
      goto LABEL_120;
    case 4:
      IndexOfFirstCommandBufferInQueue = (apr_pool_t *)(int)FindIndexOfFirstCommandBufferInQueue(*(char **)(a2 + 8), (uint64_t)v5, v6);
      uint64_t nelts = v5->nelts - (void)IndexOfFirstCommandBufferInQueue;
      uint64_t v12 = apr_array_copy(*v3, v5);
      goto LABEL_120;
    case 5:
    case 6:
      uint64_t v36 = *(void *)(v7 + 24);
      int v37 = *(_DWORD *)(v36 + 8);
      BOOL v39 = GetFuncEnumReceiverType(v37) == 2 || v37 == -10168 || v37 == -16341;
      uint64_t v80 = v3;
      if (!v39)
      {
        int v81 = *(char **)(a2 + 24);
        if (v81)
        {
          uint64_t v42 = 0;
          goto LABEL_69;
        }
        BOOL v84 = GTTraceFunc_targetContext(v36, v6);
        uint64_t v42 = *(void *)(*(void *)(*find_entry(v82, &v84, 8uLL, 0) + 32) + 32);
        if (v42)
        {
          unsigned int v71 = 0;
          do
          {
            unsigned int v72 = atomic_load((unsigned int *)(v42 + 4));
            uint64_t v73 = v71 + (v72 >> 6) - 1;
            if ((int)v73 > 0) {
              goto LABEL_128;
            }
            uint64_t v42 = *(void *)(v42 + 40);
            unsigned int v71 = v73;
          }
          while (v42);
          unsigned int v71 = v73;
        }
        else
        {
          unsigned int v71 = 0;
LABEL_128:
          uint64_t v73 = 0;
        }
        uint64_t v43 = 0;
        unint64_t v74 = v71 | (unint64_t)(v73 << 32);
        while (1)
        {
          uint64_t v75 = v42 + 64;
          do
          {
            if (!v42) {
              goto LABEL_63;
            }
            if ((*(unsigned char *)(v75 + ((uint64_t)(HIDWORD(v74) - (int)v74) << 6) + 15) & 8) == 0)
            {
              uint64_t v42 = 0;
              goto LABEL_63;
            }
            uint64_t v76 = v75 + ((uint64_t)(HIDWORD(v74) - (int)v74) << 6);
            if (IsFuncEnumPresent(*(_DWORD *)(v76 + 8))) {
              uint64_t v43 = (char *)*((void *)GTTraceFunc_argumentBytesWithMap((void *)v76, *(unsigned __int8 *)(v76 + 13), v6)+ 1);
            }
            unsigned int v77 = atomic_load((unsigned int *)(v42 + 4));
            int v78 = v74 + (v77 >> 6);
            uint64_t v79 = (HIDWORD(v74) + 1);
            unint64_t v74 = (v79 << 32) | v74;
          }
          while (v79 != v78 - 1);
          unint64_t v74 = (v79 << 32) | v79;
          uint64_t v42 = *(void *)(v42 + 40);
        }
      }
      ++v10;
      BOOL v40 = IsFuncEnumPresent(v37);
      int v81 = *(char **)(a2 + 24);
      if (!v40 || *(void *)(a2 + 24) != 0)
      {
        uint64_t v42 = -1;
        goto LABEL_69;
      }
      uint64_t v43 = GTTraceFunc_targetContext(v36, v6);
      uint64_t v42 = -1;
LABEL_63:
      BOOL v84 = v43;
      uint64_t v44 = *find_entry(v82, &v84, 8uLL, 0);
      if (v44
        && (uint64_t v45 = *(void *)(v44 + 32)) != 0
        && (uint64_t v46 = *(void *)(v45 + 32)) != 0
        && (*(unsigned char *)(v46 + 79) & 8) != 0)
      {
        uint64_t v47 = v46 + 64;
      }
      else
      {
        uint64_t v47 = 0;
      }
      int v81 = GTTraceFunc_targetContext(v47, v6);
LABEL_69:
      uint64_t v48 = apr_hash_make(newpool);
      uint64_t v49 = v5->nelts;
      if ((int)v49 <= 0) {
        goto LABEL_105;
      }
      v50 = v48;
      uint64_t v51 = 0;
      int v52 = 0;
      while (2)
      {
        uint64_t v53 = v5->elts;
        int v54 = *(_DWORD *)&v53[v51 + 8];
        if (v54 <= -15909)
        {
          BOOL v55 = v54 == -16361;
          int v56 = -16202;
        }
        else
        {
          BOOL v55 = v54 == -15908 || v54 == -15316;
          int v56 = -15318;
        }
        if (v55 || v54 == v56)
        {
          apr_hash_set(v50, &v53[v51], 8, v52);
          int v54 = *(_DWORD *)&v53[v51 + 8];
        }
        if (IsFuncEnumPresent(v54))
        {
          if (GetFuncEnumReceiverType(v54) == 25) {
            uint64_t v58 = (char *)*((void *)GTTraceFunc_argumentBytesWithMap(&v53[v51], v53[v51 + 13], v6) + 1);
          }
          else {
            uint64_t v58 = GTTraceFunc_targetContext((uint64_t)&v53[v51], v6);
          }
          BOOL v84 = v58;
          uint64_t v60 = *find_entry(v82, &v84, 8uLL, 0);
          if (v60
            && (uint64_t v61 = *(void *)(v60 + 32)) != 0
            && (uint64_t v62 = *(void *)(v61 + 32)) != 0
            && (*(unsigned char *)(v62 + 79) & 8) != 0)
          {
            uint64_t v63 = v62 + 64;
          }
          else
          {
            uint64_t v63 = 0;
          }
          if (v81 != GTTraceFunc_targetContext(v63, v6)) {
            goto LABEL_102;
          }
        }
        else if (v54 != -16341 && v54 != -10168)
        {
          goto LABEL_102;
        }
        uint64_t v64 = MapPresentToBoundary((uint64_t)v52, (uint64_t)v5, (uint64_t)v50, v6);
        if (v64 == -1) {
          goto LABEL_102;
        }
        uint64_t v49 = v64;
        if (v42 == -1) {
          uint64_t v42 = v64;
        }
        if (--v10)
        {
LABEL_102:
          ++v52;
          uint64_t v49 = v5->nelts;
          v51 += 64;
          if ((uint64_t)v52 >= v49) {
            break;
          }
          continue;
        }
        break;
      }
LABEL_105:
      if (v42 == -1) {
        uint64_t v65 = 0;
      }
      else {
        uint64_t v65 = v42;
      }
      uint64_t v12 = apr_array_copy(*v80, v5);
      int v66 = *((_DWORD *)v12->elts + 2);
      BOOL v67 = IsFuncEnumPresent(v66);
      uint64_t v69 = v66 == -10168 || v66 == -16341 || v67;
      IndexOfFirstCommandBufferInQueue = (apr_pool_t *)(v65 + v69);
      uint64_t v70 = v49 - (v65 + v69);
      id v3 = v80;
      uint64_t nelts = v70 + 1;
LABEL_120:
      v3[2] = (apr_pool_t *)v12;
      v3[3] = IndexOfFirstCommandBufferInQueue;
      v3[4] = (apr_pool_t *)nelts;
      apr_pool_destroy(newpool);
      return;
    default:
      uint64_t v12 = v8;
LABEL_60:
      IndexOfFirstCommandBufferInQueue = 0;
      goto LABEL_120;
  }
}

uint64_t FindIndexOfFirstCommandBufferInQueue(char *a1, uint64_t a2, uint64_t a3)
{
  if (!a1) {
    return 0;
  }
  int v4 = *(_DWORD *)(a2 + 12);
  if (v4 < 1) {
    return 0;
  }
  uint64_t v7 = 0;
  for (uint64_t i = 0; i < v4; ++i)
  {
    uint64_t v9 = *(void *)(a2 + 24) + v7;
    int v10 = *(_DWORD *)(v9 + 8);
    int FuncEnumReceiverType = GetFuncEnumReceiverType(v10);
    if (GetFuncEnumConstructorType(v10)) {
      BOOL v12 = FuncEnumReceiverType == 27;
    }
    else {
      BOOL v12 = 0;
    }
    if (v12)
    {
      if (GTTraceFunc_targetContext(v9, a3) == a1) {
        return i;
      }
      int v4 = *(_DWORD *)(a2 + 12);
    }
    v7 += 64;
  }
  return i;
}

void *GTTraceDispatch_serialize(uint64_t a1, uint64_t a2)
{
  newpool[0] = 0;
  apr_pool_create_ex(newpool, *(apr_pool_t **)a1, 0, 0);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v313 = *(void *)(*(void *)(a1 + 8) + 24);
  uint64_t v315 = a1;
  int v4 = newpool[0];
  uint64_t v5 = apr_hash_make(newpool[0]);
  uint64_t v6 = apr_hash_make(v4);
  p = v4;
  arr = apr_array_make(v4, 8, 16);
  if (*(_DWORD *)(v3 + 12))
  {
    uint64_t v7 = 0;
    for (uint64_t i = 0; (unint64_t)i < *(int *)(v3 + 12); ++i)
    {
      uint64_t v9 = *(void *)(v3 + 24);
      uint64_t v10 = v9 + v7;
      int v11 = *(_DWORD *)(v9 + v7 + 8);
      if (v11 <= -15909)
      {
        if (v11 != -16361 && v11 != -16202) {
          goto LABEL_13;
        }
      }
      else if (v11 != -15908 && v11 != -15316 && v11 != -15318)
      {
        goto LABEL_13;
      }
      apr_hash_set(v5, (const void *)(v9 + v7), 8, i);
      int v11 = *(_DWORD *)(v10 + 8);
LABEL_13:
      if (IsFuncEnumPresent(v11) && GetFuncEnumReceiverType(v11) == 2)
      {
        uint64_t v14 = MapPresentToBoundary((uint64_t)i, v3, (uint64_t)v5, v313);
        if (v14 == -1)
        {
          uint64_t v18 = apr_palloc(v4, 8uLL);
          *uint64_t v18 = i;
          apr_hash_set(v6, v18, 8, (char *)&def_CFBEC + 1);
        }
        else
        {
          uint64_t v15 = v14;
          int v16 = apr_array_push(arr);
          void *v16 = v15;
          v16[1] = i;
        }
      }
      v7 += 64;
    }
  }
  size_t nelts = arr->nelts;
  if ((int)nelts <= 0)
  {
    uint64_t v20 = v315;
  }
  else
  {
    qsort(arr->elts, nelts, arr->elt_size, (int (__cdecl *)(const void *, const void *))CompareCommandBufferIndex);
    uint64_t v20 = v315;
    long long v21 = apr_array_make(*(apr_pool_t **)v315, *(_DWORD *)(*(void *)(v315 + 16) + 12), *(_DWORD *)(*(void *)(v315 + 16) + 8));
    *(void *)&long long v334 = 0;
    *(void *)&v332[0] = 0;
    elts = arr->elts;
    *(void *)&key[0] = 0;
    if (*(_DWORD *)(v3 + 12))
    {
      unint64_t v23 = 0;
      int v24 = 1;
      while (1)
      {
        uint64_t v25 = (long long *)(*(void *)(v3 + 24) + (v23 << 6));
        if (v23 == *(void *)elts)
        {
          unint64_t v26 = *(void *)(v315 + 24);
          uint64_t v27 = *(void *)(v315 + 32);
          int v28 = apr_array_push(v21);
          long long v29 = v25[3];
          long long v31 = *v25;
          long long v30 = v25[1];
          v28[2] = v25[2];
          v28[3] = v29;
          *int v28 = v31;
          v28[1] = v30;
          if (v26 > v23)
          {
            uint64_t v32 = &v334;
            goto LABEL_38;
          }
          if (v27 + v26 > v23)
          {
            uint64_t v32 = v332;
LABEL_38:
            ++*(void *)v32;
          }
          uint64_t v42 = *(void *)elts;
          uint64_t v45 = *((void *)elts + 1);
          uint64_t v44 = elts + 8;
          uint64_t v43 = v45;
          if (v42 != v45)
          {
            uint64_t v46 = (long long *)(*(void *)(v3 + 24) + (v43 << 6));
            unint64_t v47 = *(void *)&key[0];
            unint64_t v48 = *(void *)(v315 + 24);
            uint64_t v49 = *(void *)(v315 + 32);
            v50 = apr_array_push(v21);
            long long v51 = v46[3];
            long long v53 = *v46;
            long long v52 = v46[1];
            v50[2] = v46[2];
            v50[3] = v51;
            _OWORD *v50 = v53;
            v50[1] = v52;
            if (v48 > v47)
            {
              int v54 = &v334;
              goto LABEL_47;
            }
            if (v49 + v48 > v47)
            {
              int v54 = v332;
LABEL_47:
              ++*(void *)v54;
            }
          }
          apr_hash_set(v6, v44, 8, (char *)&def_CFBEC + 1);
          elts = &arr->elts[16 * v24++];
          goto LABEL_49;
        }
        if (*((_DWORD *)v6 + 12) && (uint64_t v33 = *find_entry((uint64_t)v6, key, 8uLL, 0)) != 0 && *(void *)(v33 + 32))
        {
          apr_hash_set(v6, key, 8, 0);
        }
        else
        {
          unint64_t v34 = *(void *)&key[0];
          unint64_t v35 = *(void *)(v315 + 24);
          uint64_t v36 = *(void *)(v315 + 32);
          int v37 = apr_array_push(v21);
          long long v38 = v25[3];
          long long v40 = *v25;
          long long v39 = v25[1];
          v37[2] = v25[2];
          v37[3] = v38;
          *int v37 = v40;
          v37[1] = v39;
          if (v35 > v34)
          {
            unsigned int v41 = &v334;
LABEL_44:
            ++*(void *)v41;
            goto LABEL_49;
          }
          if (v36 + v35 > v34)
          {
            unsigned int v41 = v332;
            goto LABEL_44;
          }
        }
LABEL_49:
        unint64_t v23 = *(void *)&key[0] + 1;
        *(void *)&key[0] = v23;
        if (v23 >= *(int *)(v3 + 12))
        {
          uint64_t v55 = v334;
          uint64_t v56 = *(void *)&v332[0];
          p = newpool[0];
          goto LABEL_53;
        }
      }
    }
    uint64_t v56 = 0;
    uint64_t v55 = 0;
LABEL_53:
    *(void *)(v315 + 16) = v21;
    *(void *)(v315 + 24) = v55;
    *(void *)(v315 + 32) = v56;
  }
  apr_pool_destroy(p);
  *(void *)&long long v334 = 0;
  apr_pool_create_ex((apr_pool_t **)&v334, *(apr_pool_t **)v20, 0, 0);
  unint64_t v57 = *(void **)(v20 + 8);
  uint64_t v58 = *(const apr_array_header_t **)(v20 + 16);
  uint64_t v59 = v57[2];
  uint64_t v60 = v57[71];
  uint64_t v61 = v57[6];
  pa = (apr_pool_t *)v57[5];
  uint64_t v62 = (apr_pool_t *)v334;
  uint64_t v63 = GTResourceTrackerMake(v59, v57[3], (apr_pool_t *)v334);
  uint64_t v65 = *(void *)(v20 + 32);
  uint64_t v64 = (apr_array_header_t *)(v20 + 32);
  if (&v64[-1].elts[v65])
  {
    uint64_t v66 = 0;
    unint64_t v67 = 0;
    do
    {
      GTResourceTrackerProcessFunction((uint64_t)v63, (uint64_t)&v58->elts[v66]);
      ++v67;
      v66 += 64;
    }
    while ((apr_pool_t *)((char *)v64->pool + (unint64_t)v64[-1].elts) > (apr_pool_t *)v67);
  }
  arra = (apr_array_header_t *)((char *)v64 - 8);
  v314 = v64;
  ResourceTracker_processUsedDrawables((uint64_t)v63);
  uint64_t v68 = v63[2];
  uint64_t v69 = apr_array_make(v62, v58->nelts, v58->elt_size);
  uint64_t v70 = apr_array_make(v62, 4, 8);
  GTMTLSMContext_getObjects(*(_DWORD **)(v60 + 240), (unint64_t)pa, v70);
  uint64_t v71 = v70->nelts;
  if ((int)v71 >= 1)
  {
    v307 = (char *)pa + v61;
    do
    {
      uint64_t v72 = *(void *)&v70->elts[8 * (v71 - 1)];
      entry = find_entry(v68, (unsigned char *)(v72 + 8), 8uLL, 0);
      if (*entry && *(void *)(*entry + 32))
      {
        newpool[0] = *(apr_pool_t **)(v72 + 8);
        uint64_t v74 = *find_entry(v59, newpool, 8uLL, 0);
        if (!v74)
        {
          id result = apr_array_push(v69);
          __break(1u);
          return result;
        }
        uint64_t v75 = *(void *)(v74 + 32);
        uint64_t v76 = apr_array_push(v69);
        unsigned int v77 = *(_OWORD **)(v75 + 32);
        long long v78 = v77[4];
        long long v79 = v77[5];
        long long v80 = v77[7];
        v76[2] = v77[6];
        v76[3] = v80;
        *uint64_t v76 = v78;
        v76[1] = v79;
        v69->elts[64 * (uint64_t)v69->nelts - 49] = 64;
        int v81 = find_entry(v68, (unsigned char *)(v72 + 48), 8uLL, 0);
        if (*v81)
        {
          if (*(void *)(*v81 + 32))
          {
            uint64_t v82 = *(void *)(v75 + 32);
            if (v82)
            {
              unsigned int v83 = 0;
              while (1)
              {
                unsigned int v84 = atomic_load((unsigned int *)(v82 + 4));
                uint64_t v85 = v83 + (v84 >> 6) - 1;
                if ((int)v85 > 0) {
                  break;
                }
                uint64_t v82 = *(void *)(v82 + 40);
                unsigned int v83 = v85;
                if (!v82)
                {
                  unsigned int v83 = v85;
                  goto LABEL_71;
                }
              }
            }
            else
            {
              unsigned int v83 = 0;
            }
            uint64_t v85 = 0;
LABEL_71:
            unint64_t v86 = v83 | (unint64_t)(v85 << 32);
            while (1)
            {
              uint64_t v87 = (*(unsigned char *)(v82 + 64 + ((uint64_t)(0xFFFFFFFF00000001 * v86) >> 32 << 6) + 15) & 8) != 0
                  ? v82 + 64 + ((uint64_t)(0xFFFFFFFF00000001 * v86) >> 32 << 6)
                  : 0;
              if (*(_DWORD *)(v87 + 8) == -7167) {
                break;
              }
              unsigned int v88 = atomic_load((unsigned int *)(v82 + 4));
              int v89 = v86 + (v88 >> 6);
              uint64_t v90 = (HIDWORD(v86) + 1);
              unint64_t v86 = (v90 << 32) | v86;
              if (v90 == v89 - 1)
              {
                unint64_t v86 = (v90 << 32) | v90;
                uint64_t v82 = *(void *)(v82 + 40);
              }
            }
            BOOL v91 = (unint64_t)pa <= *(void *)v87 && (unint64_t)v307 > *(void *)v87;
            if (!v91)
            {
              uint64_t v92 = apr_array_push(v69);
              long long v93 = *(_OWORD *)v87;
              long long v94 = *(_OWORD *)(v87 + 16);
              long long v95 = *(_OWORD *)(v87 + 48);
              v92[2] = *(_OWORD *)(v87 + 32);
              v92[3] = v95;
              *uint64_t v92 = v93;
              v92[1] = v94;
              v69->elts[64 * (uint64_t)v69->nelts - 49] = 64;
            }
          }
        }
      }
      BOOL v91 = v71-- <= 1;
    }
    while (!v91);
  }
  uint64_t v96 = arra;
  v97 = arra->pool;
  uint64_t v98 = arra;
  if (!arra->pool)
  {
    uint64_t v98 = v314;
    v97 = v314->pool;
  }
  v98->pool = (apr_pool_t *)((char *)v97 + v69->nelts);
  uint64_t v99 = *(apr_pool_t **)v315;
  unint64_t v100 = (apr_array_header_t *)apr_palloc(*(apr_pool_t **)v315, 0x20uLL);
  v100->pool = v99;
  v100->elts = v69->elts;
  *(void *)&v100->uint64_t elt_size = *(void *)&v69->elt_size;
  v100->nalloc = v69->nelts;
  apr_array_cat(v100, v58);
  *(void *)(v315 + 16) = v100;
  apr_pool_destroy((apr_pool_t *)v334);
  newpool[0] = 0;
  apr_pool_create_ex(newpool, *(apr_pool_t **)v315, 0, 0);
  if (*(void *)(v315 + 32) + *(void *)(v315 + 24))
  {
    uint64_t v281 = 0;
    v282 = 0;
    uint64_t v283 = *(void *)(v315 + 8);
    uint64_t v284 = *(void *)(v315 + 16);
    uint64_t v285 = *(void *)(v283 + 24);
    v286 = *(uint64_t **)(v283 + 568);
    do
    {
      uint64_t v287 = *(void *)(v284 + 24);
      int v288 = *(_DWORD *)(v287 + v281 + 8);
      if (v288 != -7167
        && (GetFuncEnumReceiverType(*(_DWORD *)(v287 + v281 + 8)) == 80
         || GetFuncEnumConstructorType(v288) == 80))
      {
        FuncStreamRef = GTTraceFunc_getFuncStreamRef(v287 + v281, v285);
        Object = GTMTLSMContext_getObject(v286, (uint64_t)FuncStreamRef, *(void *)(v287 + v281));
        if (Object)
        {
          if (Object[24] || (uint64_t v291 = Object[13]) != 0 && *(unsigned char *)(v291 + 44)) {
            *(unsigned char *)(v287 + v281 + 15) |= 3u;
          }
        }
      }
      v282 = (apr_pool_t *)((char *)v282 + 1);
      uint64_t v96 = arra;
      v281 += 64;
    }
    while ((char *)v314->pool + (unint64_t)arra->pool > (char *)v282);
  }
  apr_pool_destroy(newpool[0]);
  uint64_t v101 = a2;
  if (!*(_DWORD *)(*(void *)(v315 + 16) + 12)) {
    goto LABEL_293;
  }
  pool = 0;
  apr_pool_create_ex(&pool, *(apr_pool_t **)v315, 0, 0);
  uint64_t v102 = *(void **)(v315 + 8);
  uint64_t v297 = v102[64];
  uint64_t v103 = v102[62];
  uint64_t v104 = v102[2];
  uint64_t v105 = v102[3];
  uint64_t v293 = v102[66];
  unint64_t v106 = (uint64_t *)v102[71];
  uint64_t v303 = v102[4];
  uint64_t v107 = pool;
  v295 = apr_hash_make(pool);
  ht = apr_hash_make(v107);
  pb = (apr_pool_t *)v104;
  uint64_t v308 = v105;
  v304 = GTEventTracker_make(v104, v105, (uint64_t)v106, v107);
  v306 = *(apr_array_header_t **)(v315 + 16);
  uint64_t v108 = apr_array_push(v306);
  *uint64_t v108 = 0u;
  v108[1] = 0u;
  v108[2] = 0u;
  v108[3] = 0u;
  v109 = *(apr_pool_t **)(v315 + 24);
  if (!(apr_pool_t *)((char *)v109 + *(void *)(v315 + 32))) {
    goto LABEL_292;
  }
  uint64_t v292 = v103;
  v110 = 0;
  v296 = 0;
  v300 = 0;
  uint64_t v112 = v104;
  v111 = v314;
  uint64_t v113 = v308;
  v298 = v106;
  do
  {
    BOOL v114 = v109 > v110;
    v115 = v306->elts;
    uint64_t v116 = (uint64_t)&v115[64 * (void)v110];
    if (*(char *)(v116 + 15) < 0) {
      goto LABEL_290;
    }
    v301 = (char *)(v116 + 15);
    v302 = v306->elts;
    uint64_t v117 = (4 * v114);
    GTEventTracker_processFunction((uint64_t)v304, (uint64_t)&v115[64 * (void)v110]);
    v119 = (int *)(v116 + 8);
    int v118 = *(_DWORD *)(v116 + 8);
    int FuncEnumReceiverType = GetFuncEnumReceiverType(v118);
    unsigned int v305 = v117;
    if (FuncEnumReceiverType != 52 && FuncEnumReceiverType != 27 || !GetFuncEnumConstructorType(v118))
    {
      int v123 = 0;
      goto LABEL_130;
    }
    v319 = 0;
    v319 = GTTraceFunc_getFuncStreamRef(v116, v113);
    uint64_t v121 = *find_entry(v112, &v319, 8uLL, 0);
    if (v121) {
      uint64_t v122 = *(void *)(v121 + 32);
    }
    else {
      uint64_t v122 = 0;
    }
    unint64_t v124 = CommandBufferCommitIndex(v122);
    v125 = pool;
    v126 = GTResourceTrackerMake(v112, v113, pool);
    GTResourceTrackerProcessCommandBuffer(v126, (uint64_t)v319, 1);
    ResourceTracker_addChainedResources(v126, v106, v124, v125);
    ResourceTracker_addIndirectResources(v126, (_DWORD **)v106, v124, v125);
    uint64_t v127 = 0;
    *(void *)&long long v325 = 0;
    long long v323 = 0u;
    long long v324 = 0u;
    *(_OWORD *)newpool = 0u;
    long long v322 = 0u;
    do
    {
      v128 = apr_array_make(v125, 16, 8);
      newpool[v127] = (apr_pool_t *)v128;
      if ((v127 + 1) > 0x24)
      {
        unsigned int v129 = 0;
      }
      else
      {
        unsigned int v129 = dword_1DA4F0[v127 + 1] - 2;
        if (v129 > 0x51) {
          goto LABEL_106;
        }
      }
      int v130 = byte_1DA584[v129];
      if ((v130 & 0x80000000) == 0)
      {
        v131 = (_DWORD *)v106[v130 + 1];
        goto LABEL_107;
      }
LABEL_106:
      v131 = 0;
LABEL_107:
      GTMTLSMContext_getObjects(v131, v124, v128);
      v128->size_t nelts = GTMTLSMObject_sortUsedResources((uint64_t *)v128->elts, v128->nelts, v126[2]);
      ++v127;
    }
    while (v127 != 9);
    GTResourceTrackerBuildArgumentBuffers((uint64_t)pb, v308);
    v133 = v132;
    v134 = (const void *)SaveDYMTLMutableBufferAncestorMaps(v132[2], *(void **)(v101 + 8), *(unsigned int *)(v101 + 16), (uint64_t)pb);
    if ((unint64_t)v134 > *(unsigned int *)(v101 + 16))
    {
      v135 = apr_palloc(*(apr_pool_t **)(v101 + 40), (apr_size_t)v134);
      *(void *)(v101 + 8) = v135;
      *(_DWORD *)(v101 + 16) = v134;
      SaveDYMTLMutableBufferAncestorMaps(v133[2], v135, v134, (uint64_t)pb);
    }
    v136 = *(uint64_t **)(v101 + 8);
    HashBytes(v136, (unint64_t)v134, (char *)&v334);
    GTMTLCaptureState_storePointer(v303, (char *)&v334, v136, v134);
    v332[2] = v336;
    v332[3] = v337;
    char v333 = v338;
    v332[0] = v334;
    v332[1] = v335;
    v137 = (const void *)SaveDYMTLIndirectArgumentBufferInfos(v133[1], *v133, *(void **)(v101 + 8), *(unsigned int *)(v101 + 16), (uint64_t)pb);
    if ((unint64_t)v137 > *(unsigned int *)(v101 + 16))
    {
      v138 = apr_palloc(*(apr_pool_t **)(v101 + 40), (apr_size_t)v137);
      *(void *)(v101 + 8) = v138;
      *(_DWORD *)(v101 + 16) = v137;
      SaveDYMTLIndirectArgumentBufferInfos(v133[1], *v133, v138, v137, (uint64_t)pb);
    }
    v139 = *(uint64_t **)(v101 + 8);
    HashBytes(v139, (unint64_t)v137, (char *)&v334);
    GTMTLCaptureState_storePointer(v303, (char *)&v334, v139, v137);
    key[2] = v336;
    key[3] = v337;
    char v331 = v338;
    key[0] = v334;
    key[1] = v335;
    v140 = (const void *)SaveResourceMapsData(newpool, *(void **)(v101 + 8), *(unsigned int *)(v101 + 16), (uint64_t)pb);
    if ((unint64_t)v140 > *(unsigned int *)(v101 + 16))
    {
      v141 = apr_palloc(*(apr_pool_t **)(v101 + 40), (apr_size_t)v140);
      *(void *)(v101 + 8) = v141;
      *(_DWORD *)(v101 + 16) = v140;
      SaveResourceMapsData(newpool, v141, v140, (uint64_t)pb);
    }
    v142 = *(uint64_t **)(v101 + 8);
    HashBytes(v142, (unint64_t)v140, (char *)&v334);
    GTMTLCaptureState_storePointer(v303, (char *)&v334, v142, v140);
    v328[2] = v336;
    v328[3] = v337;
    char v329 = v338;
    v328[0] = v334;
    v328[1] = v335;
    *(void *)&long long v334 = v124;
    *((void *)&v334 + 1) = 255;
    v143 = find_entry(v308, &v334, 9uLL, 0);
    if (*v143)
    {
      uint64_t v144 = *(void *)(*v143 + 32);
      uint64_t v117 = v305;
      if (v144)
      {
        v145 = (uint64_t *)(v144 + 16);
        unint64_t v146 = *(unsigned int *)(v144 + 12);
      }
      else
      {
        v145 = 0;
        unint64_t v146 = 0;
      }
    }
    else
    {
      v145 = 0;
      unint64_t v146 = 0;
      uint64_t v117 = v305;
    }
    *(void *)&long long v334 = v319;
    v318[0] = *(void *)(*(void *)(*find_entry((uint64_t)pb, &v334, 8uLL, 0) + 32) + 8);
    v318[1] = v332;
    v318[2] = key;
    v318[3] = v328;
    if (v145)
    {
      HashBytes(v145, v146, (char *)&v334);
      GTMTLCaptureState_storePointer(v303, (char *)&v334, v145, (const void *)v146);
      v326[2] = v336;
      v326[3] = v337;
      char v327 = v338;
      v326[0] = v334;
      v326[1] = v335;
      v147 = v326;
    }
    else
    {
      v147 = 0;
    }
    v318[4] = v147;
    DYTraceEncode_MTLCommandBuffer_indirectArgumentBufferData((uint64_t)v318, *(unsigned int **)(v101 + 8), *(unsigned int *)(v101 + 16), 0, 0);
    v148 = *(unsigned int **)(v101 + 8);
    uint64_t v149 = *v148;
    if ((*((unsigned char *)v148 + 33) & 0x10) != 0)
    {
      v151 = *(unsigned int **)(v101 + 8);
      unint64_t v150 = *v148;
      do
      {
        v151 = (unsigned int *)((char *)v151 + v149);
        uint64_t v149 = *v151;
        v150 += v149;
      }
      while ((*((unsigned char *)v151 + 33) & 0x20) == 0);
    }
    else
    {
      unint64_t v150 = *v148;
    }
    fbstream_write(*(void *)(v101 + 24), (uint64_t)v148, v150);
    GTTraceFuncToFbuf(v101, *(void *)(v315 + 8), v116, v117);
    uint64_t v152 = *find_entry(v297, &v319, 8uLL, 0);
    if (v152) {
      uint64_t v153 = *(void *)(v152 + 32);
    }
    else {
      uint64_t v153 = 0;
    }
    uint64_t v113 = v308;
    WriteRestores(v101, v153, v117, (uint64_t)pb);
    int v118 = *v119;
    int v123 = 1;
LABEL_130:
    if (v118 > -15340)
    {
      BOOL v154 = v118 == -15308;
      int v155 = -15339;
    }
    else
    {
      BOOL v154 = v118 == -15991;
      int v155 = -15749;
    }
    BOOL v156 = v154 || v118 == v155;
    uint64_t v157 = v117;
    if (v156)
    {
      if (!GTEventTracker_wasWaitSignaled((uint64_t)v304, v116))
      {
        uint64_t v157 = v117 | 2;
        goto LABEL_155;
      }
      *(void *)&v332[0] = 0;
      *(void *)&v332[0] = GTTraceFunc_targetContext(v116, v113);
      v158 = v306->elts;
      uint64_t v159 = *find_entry((uint64_t)pb, v332, 8uLL, 0);
      if (v159 && (uint64_t v160 = *(void *)(v159 + 32)) != 0)
      {
        uint64_t v299 = v160;
        uint64_t v161 = *(void *)(v160 + 32);
        if (v161 && (*(unsigned char *)(v161 + 79) & 8) != 0)
        {
          uint64_t v162 = v161 + 64;
          goto LABEL_147;
        }
      }
      else
      {
        uint64_t v299 = 0;
      }
      uint64_t v162 = 0;
LABEL_147:
      uint64_t v163 = (uint64_t)v110 - 1;
      uint64_t v164 = (uint64_t)&v158[64 * ((void)v110 - 1)];
      int v165 = *(_DWORD *)(v162 + 8);
      if (GetFuncEnumConstructorType(v165) == 25)
      {
        if (!IsFuncEnumCommandBufferRelated(*(_DWORD *)&v158[64 * v163 + 8])
          || (v166 = *(char **)&v332[0],
              v166 != GetCommandBufferRef((uint64_t)&v158[64 * ((void)v110 - 1)], (uint64_t)pb, v308)))
        {
          v195 = GTTraceFunc_targetContext(v162, v308);
          long long v324 = 0u;
          long long v325 = 0u;
          long long v322 = 0u;
          long long v323 = 0u;
          *(_OWORD *)newpool = 0u;
          GTMTLSMCommandBuffer_processTraceFunc((char *)newpool, (uint64_t *)v162, v308);
          *(void *)&long long v334 = v195;
          uint64_t v196 = *(void *)(*(void *)(*find_entry((uint64_t)pb, &v334, 8uLL, 0) + 32) + 8);
          *(void *)&long long v334 = *(void *)&v332[0];
          uint64_t v197 = *(void *)(*(void *)(*find_entry((uint64_t)pb, &v334, 8uLL, 0) + 32) + 8);
          *(void *)&long long v334 = *(void *)&v332[0];
          uint64_t v198 = *(void *)(*(void *)(*find_entry((uint64_t)pb, &v334, 8uLL, 0) + 32) + 8);
          int v199 = BYTE9(v325);
          uint64_t v200 = a2;
          uint64_t v201 = *(void *)(a2 + 8);
          *(void *)(v201 + 16) = 0;
          *(void *)(v201 + 24) = 0;
          *(void *)(v201 + 8) = 0;
          *(void *)(v201 + 32) = 0x69744300008005;
          *(void *)uint64_t v201 = 0xFFFFCF0000000028;
          *(void *)(v201 + 40) = v196;
          *(void *)(v201 + 48) = v198;
          *(_DWORD *)(v201 + 56) = v199;
          *(_DWORD *)(v201 + 60) = 116;
          *(void *)(v201 + 64) = v197;
          *(_DWORD *)uint64_t v201 = 72;
          v202 = *(unsigned int **)(a2 + 8);
          unint64_t v203 = *v202;
          if ((*((unsigned char *)v202 + 33) & 0x10) != 0)
          {
            uint64_t v204 = *v202;
            v205 = *(unsigned int **)(a2 + 8);
            do
            {
              v205 = (unsigned int *)((char *)v205 + v204);
              uint64_t v204 = *v205;
              v203 += v204;
            }
            while ((*((unsigned char *)v205 + 33) & 0x20) == 0);
          }
          goto LABEL_197;
        }
        int v165 = *(_DWORD *)(v162 + 8);
      }
      if (GetFuncEnumConstructorType(v165) != 51
        || IsFuncIOCommandBufferRelated(*(_DWORD *)&v158[64 * v163 + 8])
        && (v167 = *(char **)&v332[0], v167 == GetIOCommandBufferRef(v164, (uint64_t)pb, v308)))
      {
LABEL_154:
        uint64_t v157 = v305;
        uint64_t v113 = v308;
        uint64_t v101 = a2;
        goto LABEL_155;
      }
      v212 = GTTraceFunc_targetContext(v162, v308);
      long long v324 = 0u;
      long long v325 = 0u;
      long long v322 = 0u;
      long long v323 = 0u;
      *(_OWORD *)newpool = 0u;
      GTMTLSMIOCommandBuffer_processTraceFunc((char *)newpool, (uint64_t *)v162, v308);
      *(void *)&long long v334 = v212;
      uint64_t v213 = *(void *)(*(void *)(*find_entry((uint64_t)pb, &v334, 8uLL, 0) + 32) + 8);
      *(void *)&long long v334 = *(void *)&v332[0];
      uint64_t v214 = *(void *)(*(void *)(*find_entry((uint64_t)pb, &v334, 8uLL, 0) + 32) + 8);
      *(void *)&long long v334 = *(void *)&v332[0];
      uint64_t v215 = *(void *)(*(void *)(*find_entry((uint64_t)pb, &v334, 8uLL, 0) + 32) + 8);
      int v216 = BYTE9(v325);
      uint64_t v200 = a2;
      uint64_t v217 = *(void *)(a2 + 8);
      *(void *)(v217 + 16) = 0;
      *(void *)(v217 + 24) = 0;
      *(void *)(v217 + 8) = 0;
      *(void *)(v217 + 32) = 0x69744300008005;
      *(void *)uint64_t v217 = 0xFFFFCF0100000028;
      *(void *)(v217 + 40) = v213;
      *(void *)(v217 + 48) = v215;
      *(_DWORD *)(v217 + 56) = v216;
      *(_DWORD *)(v217 + 60) = 116;
      *(void *)(v217 + 64) = v214;
      *(_DWORD *)uint64_t v217 = 72;
      v202 = *(unsigned int **)(a2 + 8);
      unint64_t v203 = *v202;
      if ((*((unsigned char *)v202 + 33) & 0x10) != 0)
      {
        uint64_t v218 = *v202;
        v219 = *(unsigned int **)(a2 + 8);
        do
        {
          v219 = (unsigned int *)((char *)v219 + v218);
          uint64_t v218 = *v219;
          v203 += v218;
        }
        while ((*((unsigned char *)v219 + 33) & 0x20) == 0);
      }
LABEL_197:
      fbstream_write(*(void *)(v200 + 24), (uint64_t)v202, v203);
      uint64_t v220 = *(void *)(v299 + 32);
      if (v220)
      {
        unsigned int v221 = 0;
        while (1)
        {
          unsigned int v222 = atomic_load((unsigned int *)(v220 + 4));
          uint64_t v223 = v221 + (v222 >> 6) - 1;
          if ((int)v223 > 0) {
            break;
          }
          uint64_t v220 = *(void *)(v220 + 40);
          unsigned int v221 = v223;
          if (!v220)
          {
            unsigned int v221 = v223;
            goto LABEL_204;
          }
        }
      }
      else
      {
        unsigned int v221 = 0;
      }
      uint64_t v223 = 0;
LABEL_204:
      unint64_t v224 = v221 | (unint64_t)(v223 << 32);
LABEL_205:
      uint64_t v225 = v220 + 64;
      while (v220)
      {
        if ((*(unsigned char *)(v225 + ((uint64_t)(HIDWORD(v224) - (int)v224) << 6) + 15) & 8) == 0) {
          break;
        }
        uint64_t v226 = v225 + ((uint64_t)(HIDWORD(v224) - (int)v224) << 6);
        if (*(void *)v226 == *(void *)v116) {
          break;
        }
        int v227 = *(_DWORD *)(v226 + 8);
        if ((v227 + 16065) < 2 || v227 == -15313 || v227 == -16365) {
          GTTraceFuncToFbuf(a2, *(void *)(v315 + 8), v226, 32772);
        }
        unsigned int v230 = atomic_load((unsigned int *)(v220 + 4));
        int v231 = v224 + (v230 >> 6);
        uint64_t v232 = (HIDWORD(v224) + 1);
        unint64_t v224 = (v232 << 32) | v224;
        if (v232 == v231 - 1)
        {
          unint64_t v224 = (v232 << 32) | v232;
          uint64_t v220 = *(void *)(v220 + 40);
          goto LABEL_205;
        }
      }
      goto LABEL_154;
    }
LABEL_155:
    int v168 = *v119;
    BOOL v169 = IsFuncEnumCommandBufferRelated(*v119);
    BOOL v170 = IsFuncIOCommandBufferRelated(v168);
    if (((v123 | (!v169 && !v170)) & 1) == 0)
    {
      uint64_t v171 = v315;
      GTTraceFuncToFbuf(v101, *(void *)(v315 + 8), v116, v157);
      if (v169) {
        goto LABEL_164;
      }
LABEL_157:
      if (v170)
      {
        if (*v119 == -15343) {
          v296 = GTTraceFunc_targetContext(v116, v113);
        }
        uint64_t v112 = (uint64_t)pb;
        IOCommandBufferRef = GetIOCommandBufferRef(v116, (uint64_t)pb, v113);
        uint64_t v173 = (uint64_t)&v306->elts[64 * (unint64_t)(v110 + 1)];
        int v174 = *(_DWORD *)(v173 + 8);
        BOOL v175 = IsFuncEnumCommandBufferRelated(v174);
        BOOL v176 = IsFuncIOCommandBufferRelated(v174);
        v111 = v314;
        if ((v175 || v176) && IOCommandBufferRef != GetIOCommandBufferRef(v173, (uint64_t)pb, v113))
        {
          uint64_t v96 = arra;
          if (v296 != IOCommandBufferRef)
          {
            newpool[0] = (apr_pool_t *)IOCommandBufferRef;
            uint64_t v206 = *(void *)(*(void *)(*find_entry((uint64_t)pb, newpool, 8uLL, 0) + 32) + 8);
            v207 = *(void **)(v101 + 8);
            v207[1] = 0;
            v207[2] = 0;
            v207[3] = 0;
            v207[4] = 0x4300000000;
            void *v207 = 0xFFFFC41100000028;
            v207[5] = v206;
            *(_DWORD *)v207 = 48;
            v208 = *(unsigned int **)(v101 + 8);
            v208[8] = v305 | 0x8004;
            fbstream_write(*(void *)(v101 + 24), (uint64_t)v208, *v208);
            newpool[0] = (apr_pool_t *)IOCommandBufferRef;
            uint64_t v209 = *(void *)(*(void *)(*find_entry((uint64_t)pb, newpool, 8uLL, 0) + 32) + 8);
            v210 = *(void **)(v101 + 8);
            v210[1] = 0;
            v210[2] = 0;
            v210[3] = 0;
            v210[4] = 0x4300000000;
            void *v210 = 0xFFFFC41300000028;
            v210[5] = v209;
            *(_DWORD *)v210 = 48;
            v211 = *(unsigned int **)(v101 + 8);
            v211[8] = v305 | 0x8004;
            uint64_t v113 = v308;
            fbstream_write(*(void *)(v101 + 24), (uint64_t)v211, *v211);
          }
        }
        else
        {
          uint64_t v96 = arra;
        }
        goto LABEL_290;
      }
      *(void *)&long long v334 = 0;
      *(void *)&long long v334 = GTTraceFunc_getFuncStreamRef(v116, v113);
      newpool[0] = (apr_pool_t *)v334;
      v179 = find_entry((uint64_t)pb, newpool, 8uLL, 0);
      if (*v179)
      {
        uint64_t v180 = *(void *)(*v179 + 32);
        uint64_t v96 = arra;
        if (!v180) {
          goto LABEL_288;
        }
        if ((*v119 + 7158) < 3)
        {
          if (qword_2501C8)
          {
            v181 = (uint64_t *)GTTraceFunc_argumentBytesWithPool((uint64_t *)v116, v302[64 * (void)v110 + 13], *(void *)(v180 + 24));
            v182 = GTMTLSMContext_getObject(v106, *v181, *(void *)v116);
            if (v182)
            {
              v183 = find_entry(v292, (unsigned char *)v182 + 48, 8uLL, 0);
              if (*v183)
              {
                uint64_t v184 = *(void *)(*v183 + 32);
                if (v184)
                {
                  v185 = apr_array_make(pool, 1, 8);
                  *(void *)apr_array_push(v185) = v184;
                  WriteRestores(a2, (uint64_t)v185, v305 | 6, (uint64_t)pb);
                }
              }
            }
          }
LABEL_256:
          uint64_t v266 = *(void *)(v180 + 32);
          if (v266)
          {
            uint64_t v101 = a2;
            if ((*(unsigned char *)(v266 + 79) & 8) != 0) {
              uint64_t v267 = v266 + 64;
            }
            else {
              uint64_t v267 = 0;
            }
          }
          else
          {
            uint64_t v267 = 0;
            uint64_t v101 = a2;
          }
          int v268 = *v119;
          int FuncEnumConstructorType = GetFuncEnumConstructorType(*v119);
          if (FuncEnumConstructorType != 25
            && ((v268 + 6144) > 0x29 || ((0x3806C9D5295uLL >> v268) & 1) == 0)
            && ((v268 + 15345) > 0x38 || ((0x17C40BE00017E7FuLL >> (v268 - 15)) & 1) == 0)
            && FuncEnumConstructorType != 51
            && v267
            && IsFuncEnumCreateResource(*(_DWORD *)(v267 + 8)))
          {
            v270 = (unsigned __int8 *)(v116 + 15);
            if ((*v301 & 1) == 0)
            {
              uint64_t v271 = *find_entry(v293, &v334, 8uLL, 0);
              if (v271)
              {
                int v268 = *v119;
                if (*(void *)(v271 + 32))
                {
                  int v272 = v305;
                  v270 = (unsigned __int8 *)(v116 + 15);
LABEL_277:
                  int v274 = (*v270 >> 4) & 4;
                  if (IsFuncEnumDestructor(v268)) {
                    int v275 = 6;
                  }
                  else {
                    int v275 = v274;
                  }
                  unsigned int v276 = v275 | v272;
                  if (!GTMTLSMContext_getObject(v106, v334, *(void *)v116)) {
                    v276 |= 0x200u;
                  }
                  uint64_t v277 = *find_entry(v293, &v334, 8uLL, 0);
                  if (v277) {
                    uint64_t v277 = *(void *)(v277 + 32);
                  }
                  if (v277) {
                    uint64_t v278 = v276;
                  }
                  else {
                    uint64_t v278 = v276 | 6;
                  }
                  GTTraceFuncToFbuf(v101, *(void *)(v171 + 8), v116, v278);
                  goto LABEL_288;
                }
              }
              else
              {
                int v268 = *v119;
              }
              BOOL v273 = NeverIgnoreFenum(v268);
              v270 = (unsigned __int8 *)(v116 + 15);
              if (v273)
              {
                int v272 = v305;
                goto LABEL_277;
              }
            }
            int v272 = v305 | 6;
            goto LABEL_277;
          }
LABEL_288:
          uint64_t v112 = (uint64_t)pb;
          v111 = v314;
          goto LABEL_289;
        }
        if (*v119 != -7167) {
          goto LABEL_256;
        }
        v233 = GTTraceFunc_argumentBytesWithPool((uint64_t *)v116, v302[64 * (void)v110 + 13], *(void *)(v180 + 24));
        *(void *)&v332[0] = 0;
        *(void *)&v332[0] = *(void *)v233;
        uint64_t v101 = a2;
        if (GTMTLSMContext_getObject(v106, *(uint64_t *)&v332[0], *(void *)v116))
        {
          uint64_t v234 = *find_entry(v293, &v334, 8uLL, 0);
          if (v234) {
            uint64_t v234 = *(void *)(v234 + 32);
          }
          if (v234) {
            unsigned int v235 = v305;
          }
          else {
            unsigned int v235 = v305 | 6;
          }
          char v236 = *v301;
          unsigned int v237 = v235 | 4;
          uint64_t v238 = *find_entry((uint64_t)ht, v332, 8uLL, 0);
          if (!v238 || !*(void *)(v238 + 32))
          {
            if ((v236 & 0x40) != 0) {
              uint64_t v239 = v237;
            }
            else {
              uint64_t v239 = v235;
            }
            GTTraceFuncToFbuf(a2, *(void *)(v171 + 8), v116, v239);
            apr_hash_set(ht, v332, 8, *((const void **)v233 + 1));
          }
          v240 = (uint64_t *)(v233 + 8);
          uint64_t v241 = *find_entry((uint64_t)v295, v233 + 8, 8uLL, 0);
          uint64_t v101 = a2;
          if (!v241 || !*(void *)(v241 + 32))
          {
            uint64_t v242 = GTMTLSMContext_lastObject(v106, *v240, 0xFFFFFFFFFFFFFFFFLL);
            uint64_t v243 = v242;
            if (*(void *)(v242 + 112))
            {
              newpool[0] = *(apr_pool_t **)(v242 + 8);
              uint64_t v244 = *(void *)(*(void *)(*find_entry((uint64_t)pb, newpool, 8uLL, 0) + 32) + 8);
              WriteTextureInfo(a2, v243, (uint64_t)pb, v237);
              if (*(void *)(v243 + 72)) {
                v245 = *(const char **)(v243 + 72);
              }
              else {
                v245 = "";
              }
              v246 = *(unsigned int **)(a2 + 8);
              *((void *)v246 + 1) = 0;
              *((void *)v246 + 2) = 0;
              *((void *)v246 + 3) = 0;
              *((void *)v246 + 4) = 0x534300000000;
              *(void *)v246 = 0xFFFFC09000000028;
              *((void *)v246 + 5) = v244;
              unsigned int *v246 = 48;
              AppendString(v245, (int *)v246);
              uint64_t v247 = *v246;
              uint64_t v248 = (v247 + 3) & 0xFFFFFFFC;
              bzero((char *)v246 + v247, v248 - v247);
              unsigned int *v246 = v248;
              v249 = *(unsigned int **)(a2 + 8);
              int v250 = v249[8] | v237;
              v249[8] = v250;
              unint64_t v251 = *v249;
              if ((v250 & 0x1000) != 0)
              {
                uint64_t v252 = *v249;
                v253 = v249;
                do
                {
                  v253 = (unsigned int *)((char *)v253 + v252);
                  uint64_t v252 = *v253;
                  v251 += v252;
                }
                while ((*((unsigned char *)v253 + 33) & 0x20) == 0);
              }
              uint64_t v254 = a2;
              fbstream_write(*(void *)(a2 + 24), (uint64_t)v249, v251);
              if (!*(void *)(v243 + 48) && !*(void *)(v243 + 136) && !*(void *)(v243 + 144))
              {
                uint64_t v255 = *(unsigned __int16 *)(v243 + 98);
                v256 = *(void **)(a2 + 8);
                v256[2] = 0;
                v256[3] = 0;
                v256[1] = 0;
                v256[4] = 0x6C754300000000;
                void *v256 = 0xFFFFC09800000028;
                v256[5] = v244;
                v256[6] = v255;
                *(_DWORD *)v256 = 56;
                v257 = *(unsigned int **)(a2 + 8);
                LODWORD(v255) = v257[8] | v237;
                v257[8] = v255;
                unint64_t v258 = *v257;
                if ((v255 & 0x1000) != 0)
                {
                  uint64_t v259 = *v257;
                  v260 = v257;
                  do
                  {
                    v260 = (unsigned int *)((char *)v260 + v259);
                    uint64_t v259 = *v260;
                    v258 += v259;
                  }
                  while ((*((unsigned char *)v260 + 33) & 0x20) == 0);
                }
                uint64_t v254 = a2;
                fbstream_write(*(void *)(a2 + 24), (uint64_t)v257, v258);
              }
              uint64_t v261 = *(void *)(v254 + 8);
              *(void *)(v261 + 16) = 0;
              *(void *)(v261 + 24) = 0;
              *(void *)(v261 + 8) = 0;
              *(void *)(v261 + 32) = 0x69754300000006;
              *(void *)uint64_t v261 = 0xFFFFD80600000028;
              *(void *)(v261 + 40) = v244;
              *(_DWORD *)(v261 + 48) = 0;
              *(_DWORD *)uint64_t v261 = 52;
              v262 = *(unsigned int **)(v254 + 8);
              LODWORD(v261) = v262[8] | v237;
              v262[8] = v261;
              unint64_t v263 = *v262;
              uint64_t v101 = v254;
              if ((v261 & 0x1000) != 0)
              {
                uint64_t v264 = *v262;
                v265 = v262;
                do
                {
                  v265 = (unsigned int *)((char *)v265 + v264);
                  uint64_t v264 = *v265;
                  v263 += v264;
                }
                while ((*((unsigned char *)v265 + 33) & 0x20) == 0);
              }
              fbstream_write(*(void *)(v254 + 24), (uint64_t)v262, v263);
            }
            apr_hash_set(v295, v240, 8, (const void *)v243);
          }
        }
      }
      uint64_t v96 = arra;
      goto LABEL_288;
    }
    unsigned int v305 = v157;
    uint64_t v171 = v315;
    if (!v169) {
      goto LABEL_157;
    }
LABEL_164:
    int v177 = *v119;
    if (*v119 > -15909)
    {
      uint64_t v112 = (uint64_t)pb;
      v111 = v314;
      uint64_t v96 = arra;
      if (v177 != -15908 && v177 != -15316)
      {
        int v178 = -15318;
        goto LABEL_178;
      }
      goto LABEL_179;
    }
    uint64_t v112 = (uint64_t)pb;
    v111 = v314;
    uint64_t v96 = arra;
    if (v177 == -16361) {
      goto LABEL_179;
    }
    int v178 = -16202;
LABEL_178:
    if (v177 == v178) {
LABEL_179:
    }
      v300 = GTTraceFunc_targetContext(v116, v113);
    CommandBufferRef = GetCommandBufferRef(v116, v112, v113);
    uint64_t v187 = (uint64_t)&v306->elts[64 * (unint64_t)(v110 + 1)];
    int v188 = *(_DWORD *)(v187 + 8);
    if (!IsFuncEnumCommandBufferRelated(v188))
    {
      unint64_t v106 = v298;
      if (v300 != CommandBufferRef) {
        goto LABEL_185;
      }
      goto LABEL_289;
    }
    if (CommandBufferRef == GetCommandBufferRef(v187, v112, v113))
    {
      uint64_t v113 = v308;
      unint64_t v106 = v298;
    }
    else
    {
      unint64_t v106 = v298;
      if (v300 != CommandBufferRef)
      {
        int v188 = *(_DWORD *)(v187 + 8);
LABEL_185:
        if (v188)
        {
          newpool[0] = (apr_pool_t *)CommandBufferRef;
          uint64_t v189 = *(void *)(*(void *)(*find_entry(v112, newpool, 8uLL, 0) + 32) + 8);
          v190 = *(void **)(v101 + 8);
          v190[1] = 0;
          v190[2] = 0;
          v190[3] = 0;
          v190[4] = 0x4300000000;
          void *v190 = 0xFFFFC01700000028;
          v190[5] = v189;
          *(_DWORD *)v190 = 48;
          v191 = *(unsigned int **)(v101 + 8);
          v191[8] = v305 | 0x8004;
          fbstream_write(*(void *)(v101 + 24), (uint64_t)v191, *v191);
          newpool[0] = (apr_pool_t *)CommandBufferRef;
          uint64_t v192 = *(void *)(*(void *)(*find_entry(v112, newpool, 8uLL, 0) + 32) + 8);
          v193 = *(void **)(v101 + 8);
          v193[1] = 0;
          v193[2] = 0;
          v193[3] = 0;
          v193[4] = 0x4300000000;
          void *v193 = 0xFFFFC01500000028;
          v193[5] = v192;
          *(_DWORD *)v193 = 48;
          v194 = *(unsigned int **)(v101 + 8);
          v194[8] = v305 | 0x8004;
          fbstream_write(*(void *)(v101 + 24), (uint64_t)v194, *v194);
        }
      }
LABEL_289:
      uint64_t v113 = v308;
    }
LABEL_290:
    v110 = (apr_pool_t *)((char *)v110 + 1);
    v109 = v96->pool;
  }
  while ((char *)v111->pool + (unint64_t)v96->pool > (char *)v110);
  uint64_t v107 = pool;
LABEL_292:
  apr_pool_destroy(v107);
LABEL_293:
  v279 = *(apr_pool_t ***)(v101 + 24);
  apr_pool_cleanup_kill(*v279, v279, (apr_status_t (__cdecl *)(void *))fbstream_cleanup);
  return (void *)fbstream_cleanup((uint64_t)v279);
}

void WriteRestores(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a2 && *(int *)(a2 + 12) >= 1)
  {
    for (uint64_t i = 0; i < *(int *)(a2 + 12); ++i)
    {
      uint64_t v9 = *(void *)(*(void *)(a2 + 24) + 8 * i);
      unsigned int v10 = *(unsigned __int8 *)(v9 + 46);
      if (v10 <= 0x4F)
      {
        if (v10 == 22)
        {
          *(void *)__str = *(void *)(v9 + 16);
          v46[0] = *(void *)(*(void *)(*find_entry(a4, __str, 8uLL, 0) + 32) + 8);
          *(void *)__str = *(void *)(v9 + 8);
          v46[1] = *(void *)(*(void *)(*find_entry(a4, __str, 8uLL, 0) + 32) + 8);
          GTResourceDownloaderGetResourceFilename(v9, 0, __str, 0x80uLL);
          v46[2] = __str;
          long long v47 = *(_OWORD *)(v9 + 48);
          DYTraceEncode_MTLCommandBuffer_restoreMTLBufferContents((uint64_t)v46, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
          int v11 = *(unsigned int **)(a1 + 8);
          int v36 = v11[8] | a3;
          v11[8] = v36;
          unint64_t v13 = *v11;
          if ((v36 & 0x1000) != 0)
          {
            uint64_t v37 = *v11;
            long long v38 = v11;
            do
            {
              long long v38 = (unsigned int *)((char *)v38 + v37);
              uint64_t v37 = *v38;
              v13 += v37;
            }
            while ((*((unsigned char *)v38 + 33) & 0x20) == 0);
          }
LABEL_29:
          uint64_t v31 = *(void *)(a1 + 24);
LABEL_30:
          fbstream_write(v31, (uint64_t)v11, v13);
          continue;
        }
        if (v10 == 60)
        {
          *(void *)__str = *(void *)(v9 + 8);
          uint64_t v16 = *(void *)(*(void *)(*find_entry(a4, __str, 8uLL, 0) + 32) + 8);
          GTResourceDownloaderGetResourceFilename(v9, 1, __str, 0x80uLL);
          int v17 = *(unsigned int **)(a1 + 8);
          *((void *)v17 + 3) = 0;
          *((void *)v17 + 4) = 0x554300000000;
          *((void *)v17 + 1) = 0;
          *((void *)v17 + 2) = 0;
          *(void *)int v17 = 0xFFFFD85800000028;
          *((void *)v17 + 5) = v16;
          *int v17 = 48;
          AppendString(__str, (int *)v17);
          uint64_t v18 = *v17;
          uint64_t v19 = (v18 + 3) & 0xFFFFFFFC;
          bzero((char *)v17 + v18, v19 - v18);
          *int v17 = v19;
          int v11 = *(unsigned int **)(a1 + 8);
          unsigned int v20 = v11[8];
          v11[8] = v20 | 4;
          unint64_t v13 = *v11;
          if ((v20 & 0x1000) != 0)
          {
            uint64_t v21 = *v11;
            long long v22 = v11;
            do
            {
              long long v22 = (unsigned int *)((char *)v22 + v21);
              uint64_t v21 = *v22;
              v13 += v21;
            }
            while ((*((unsigned char *)v22 + 33) & 0x20) == 0);
          }
          goto LABEL_29;
        }
      }
      else
      {
        switch(v10)
        {
          case 'P':
            *(void *)__str = *(void *)(v9 + 8);
            uint64_t v23 = *(void *)(*(void *)(*find_entry(a4, __str, 8uLL, 0) + 32) + 8);
            memset(&v43[1], 0, 24);
            uint64_t v24 = *(unsigned int *)(v9 + 60);
            v43[0] = v23;
            v43[4] = v24;
            uint64_t v25 = *(unsigned __int16 *)(v9 + 66);
            v43[5] = *(unsigned __int16 *)(v9 + 64);
            v43[6] = v25;
            uint64_t v26 = *(unsigned __int16 *)(v9 + 48);
            v43[7] = *(unsigned __int16 *)(v9 + 50);
            v43[8] = v26;
            GTResourceDownloaderGetResourceFilename(v9, 0, __str, 0x80uLL);
            v43[9] = __str;
            uint64_t v27 = *(void *)(v9 + 68);
            *(void *)&long long v28 = v27;
            *((void *)&v28 + 1) = HIDWORD(v27);
            long long v44 = v28;
            uint64_t v45 = *(unsigned int *)(v9 + 76);
            DYTraceEncode_MTLTexture_replaceRegion_mipmapLevel_slice_withBytes_bytesPerRow_bytesPerImage((uint64_t)v43, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
            int v11 = *(unsigned int **)(a1 + 8);
            v11[1] = -10236;
            int v29 = v11[8] | a3;
            __int16 v30 = v29 | 4;
            v11[8] = v29 | 4;
            if ((*(unsigned char *)(v9 + 47) & 4) != 0)
            {
              __int16 v30 = v29 | 6;
              v11[8] = v29 | 6;
            }
            uint64_t v31 = *(void *)(a1 + 24);
            uint64_t v32 = *v11;
            if ((v30 & 0x1000) != 0)
            {
              long long v39 = v11;
              unint64_t v13 = *v11;
              do
              {
                long long v39 = (unsigned int *)((char *)v39 + v32);
                uint64_t v32 = *v39;
                v13 += v32;
              }
              while ((*((unsigned char *)v39 + 33) & 0x20) == 0);
            }
            else
            {
              unint64_t v13 = *v11;
            }
            goto LABEL_30;
          case 'S':
            *(void *)__str = *(void *)(v9 + 8);
            v40[0] = *(void *)(*(void *)(*find_entry(a4, __str, 8uLL, 0) + 32) + 8);
            GTResourceDownloaderGetResourceFilename(v9, 0, __str, 0x80uLL);
            v40[1] = __str;
            v40[2] = 0;
            v40[3] = *(void *)(v9 + 48);
            DYTraceEncode_MTLVisibleFunctionTable_setFunctions_withRange((uint64_t)v40, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
            int v11 = *(unsigned int **)(a1 + 8);
            unsigned int v33 = v11[8];
            v11[8] = v33 | 4;
            unint64_t v13 = *v11;
            if ((v33 & 0x1000) != 0)
            {
              uint64_t v34 = *v11;
              unint64_t v35 = v11;
              do
              {
                unint64_t v35 = (unsigned int *)((char *)v35 + v34);
                uint64_t v34 = *v35;
                v13 += v34;
              }
              while ((*((unsigned char *)v35 + 33) & 0x20) == 0);
            }
            goto LABEL_29;
          case 'V':
            *(void *)__str = *(void *)(v9 + 8);
            v41[0] = *(void *)(*(void *)(*find_entry(a4, __str, 8uLL, 0) + 32) + 8);
            GTResourceDownloaderGetResourceFilename(v9, *(_DWORD *)(v9 + 56), __str, 0x80uLL);
            v41[1] = __str;
            long long v42 = *(_OWORD *)(v9 + 48);
            DYTraceEncode_MTLTexture_restoreIOSurfaceData_length_forPlane((uint64_t)v41, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
            int v11 = *(unsigned int **)(a1 + 8);
            unsigned int v12 = v11[8];
            v11[8] = v12 | 4;
            unint64_t v13 = *v11;
            if ((v12 & 0x1000) != 0)
            {
              uint64_t v14 = *v11;
              uint64_t v15 = v11;
              do
              {
                uint64_t v15 = (unsigned int *)((char *)v15 + v14);
                uint64_t v14 = *v15;
                v13 += v14;
              }
              while ((*((unsigned char *)v15 + 33) & 0x20) == 0);
            }
            goto LABEL_29;
        }
      }
    }
  }
}

char *GetCommandBufferRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = GTTraceFunc_targetContext(a1, a3);
  int v7 = *(_DWORD *)(a1 + 8);
  int FuncEnumReceiverType = GetFuncEnumReceiverType(v7);
  if (FuncEnumReceiverType == 25) {
    return v6;
  }
  int v9 = FuncEnumReceiverType;
  if (FuncEnumReceiverType == 51) {
    return v6;
  }
  int FuncEnumConstructorType = GetFuncEnumConstructorType(v7);
  if (v9 == 27 && FuncEnumConstructorType != 0)
  {
    return GTTraceFunc_getFuncStreamRef(a1, a3);
  }
  if (v7 == -20457 || v7 == -20474) {
    return (char *)*((void *)GTTraceFunc_argumentBytesWithMap((void *)a1, *(unsigned __int8 *)(a1 + 13), a3) + 1);
  }
  unsigned int v20 = v6;
  uint64_t v13 = *(void *)(*(void *)(*find_entry(a2, &v20, 8uLL, 0) + 32) + 32);
  int v14 = *(_DWORD *)(v13 + 72);
  uint64_t v15 = GTTraceFunc_targetContext(v13 + 64, a3);
  uint64_t v6 = v15;
  if (v14 != -16286) {
    return v6;
  }
  unsigned int v20 = v15;
  uint64_t v16 = *find_entry(a2, &v20, 8uLL, 0);
  if (v16
    && (uint64_t v17 = *(void *)(v16 + 32)) != 0
    && (uint64_t v18 = *(void *)(v17 + 32)) != 0
    && (*(unsigned char *)(v18 + 79) & 8) != 0)
  {
    uint64_t v19 = v18 + 64;
  }
  else
  {
    uint64_t v19 = 0;
  }

  return GTTraceFunc_targetContext(v19, a3);
}

char *GetIOCommandBufferRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = GTTraceFunc_targetContext(a1, a3);
  int v7 = *(_DWORD *)(a1 + 8);
  int FuncEnumReceiverType = GetFuncEnumReceiverType(v7);
  if (FuncEnumReceiverType == 25) {
    return v6;
  }
  int v9 = FuncEnumReceiverType;
  if (FuncEnumReceiverType == 51) {
    return v6;
  }
  int FuncEnumConstructorType = GetFuncEnumConstructorType(v7);
  if (v9 != 52 || FuncEnumConstructorType == 0)
  {
    uint64_t v17 = v6;
    uint64_t v13 = *find_entry(a2, &v17, 8uLL, 0);
    if (v13
      && (uint64_t v14 = *(void *)(v13 + 32)) != 0
      && (uint64_t v15 = *(void *)(v14 + 32)) != 0
      && (*(unsigned char *)(v15 + 79) & 8) != 0)
    {
      uint64_t v16 = v15 + 64;
    }
    else
    {
      uint64_t v16 = 0;
    }
    return GTTraceFunc_targetContext(v16, a3);
  }
  else
  {
    return GTTraceFunc_getFuncStreamRef(a1, a3);
  }
}

BOOL NeverIgnoreFenum(int a1)
{
  return (a1 + 16073) <= 6 && a1 != -16072 || (a1 + 15736) < 2;
}

uint64_t CompareCommandBufferIndex(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2 = *a1;
  BOOL v3 = *a1 > *a2;
  if (*a2 == -1) {
    BOOL v3 = 1;
  }
  if (v2 < *a2 || v2 == -1) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v3;
  }
}

pthread_mutex_t *GTResourceHarvesterMake(apr_pool_t *a1)
{
  unint64_t v2 = (pthread_mutex_t *)apr_palloc(a1, 0x48uLL);
  pthread_mutex_init(v2, 0);
  v2[1].__sig = (uint64_t)apr_hash_make(a1);
  return v2;
}

apr_array_header_t *GTResourceHarvesterGetDownloadRequests(pthread_mutex_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(apr_pool_t **)a1[1].__sig;
  pthread_mutex_lock(a1);
  p = v5;
  uint64_t v6 = apr_array_make(v5, 0, 88);
  if (*(int *)(a3 + 12) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(void *)(a3 + 24);
      uint64_t v10 = v9 + v7;
      if (*(void *)(v9 + v7 + 24) != 0x7FFFFFFFFFFFFFFFLL)
      {
        int v11 = (int8x16_t *)(v10 + 8);
        uint64_t v12 = *find_entry(a1[1].__sig, (unsigned char *)(v10 + 8), 8uLL, 0);
        if (v12 && (uint64_t v13 = *(void *)(v12 + 32)) != 0)
        {
          if (*(void *)(v9 + v7 + 32) != *(void *)v13 && *(unsigned char *)(v9 + v7 + 48))
          {
            uint64_t v14 = v9 + v7;
            uint64_t v15 = *(void *)(v9 + v7);
            uint64_t v16 = *(void *)(v13 + 8);
            int v17 = *(_DWORD *)(v13 + 16);
            *(_DWORD *)(v13 + 16) = v17 + 1;
            int v18 = *(_DWORD *)(v14 + 40);
            uint64_t v19 = (char *)apr_array_push(v6);
            *(void *)uint64_t v19 = v15;
            *((void *)v19 + 1) = v16;
            *((void *)v19 + 3) = 0;
            *((void *)v19 + 4) = 0;
            *((void *)v19 + 2) = a2;
            *((_DWORD *)v19 + 10) = v17;
            *((_WORD *)v19 + 22) = 0;
            v19[46] = v18;
            *(_OWORD *)(v19 + 47) = 0u;
            *(_OWORD *)(v19 + 63) = 0u;
            *(_OWORD *)(v19 + 72) = 0u;
          }
        }
        else
        {
          unsigned int v20 = apr_palloc(p, 0x18uLL);
          uint64_t v21 = v20;
          if (v20)
          {
            *unsigned int v20 = 0;
            v20[1] = 0;
            v20[2] = 0;
          }
          int8x16_t v29 = *v11;
          *(int8x16_t *)unsigned int v20 = vextq_s8(*v11, *v11, 8uLL);
          uint64_t v22 = v9 + v7;
          uint64_t v23 = *(void *)(v9 + v7);
          *((_DWORD *)v20 + 4) = 1;
          int v24 = *(_DWORD *)(v22 + 40);
          uint64_t v25 = (char *)apr_array_push(v6);
          *(void *)uint64_t v25 = v23;
          *((void *)v25 + 1) = v29.i64[0];
          *((void *)v25 + 3) = 0;
          *((void *)v25 + 4) = 0;
          *((void *)v25 + 2) = a2;
          *(void *)(v25 + 38) = 0;
          v25[46] = v24;
          *(_OWORD *)(v25 + 47) = 0u;
          *(_OWORD *)(v25 + 63) = 0u;
          *(_OWORD *)(v25 + 72) = 0u;
          apr_hash_set((apr_hash_t *)a1[1].__sig, v21 + 1, 8, v21);
        }
      }
      ++v8;
      v7 += 56;
    }
    while (v8 < *(int *)(a3 + 12));
  }
  pthread_mutex_unlock(a1);
  return v6;
}

uint64_t dna1_length()
{
  return 17134;
}

void TranslateGTMTLArgument(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v60 = a2;
  id v7 = [v60 name];
  id v8 = [v7 UTF8String];
  id v9 = [v60 name];
  if ([v9 UTF8String])
  {
    id v10 = [v60 name];
    size_t v11 = strlen((const char *)[v10 UTF8String]);
    size_t v12 = v11 + 1;
    if (v11 == -1) {
      uint64_t v13 = 0;
    }
    else {
      uint64_t v13 = (void *)a3[23];
    }
    a3[23] += v12;
    if (a4) {
      memcpy(v13, v8, v12);
    }
  }
  else
  {
    uint64_t v13 = 0;
  }

  unsigned __int8 v14 = [v60 access];
  unsigned __int8 v15 = [v60 isActive];
  unsigned __int8 v16 = [v60 index];
  unsigned __int8 v17 = [v60 type];
  int v18 = (int *)[v60 type];
  uint64_t v19 = 0;
  unsigned __int16 v20 = 0;
  unsigned __int8 v58 = v14;
  uint64_t v59 = v13;
  unsigned __int8 v57 = v16;
  unsigned __int8 v56 = v15;
  unsigned __int8 v55 = v17;
  if ((uint64_t)v18 > 15)
  {
    if (v18 == &dword_10)
    {
      id v43 = v60;
      uint64_t v44 = [v43 imageBlockDataSize];
      unint64_t v45 = v44 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)[v43 aliasImplicitImageBlockRenderTarget] << 32);
      unsigned int v46 = [v43 aliasImplicitImageBlock];
      uint64_t v47 = 0x10000000000;
      if (!v46) {
        uint64_t v47 = 0;
      }
      uint64_t v23 = v45 | v47;
      unint64_t v48 = [v43 imageBlockMasterStructMembers];
      if (!v48)
      {
LABEL_39:
        uint64_t v49 = [v43 dataTypeDescription];
        uint64_t v25 = TranslateGTMTLType(v49, a3, a4);
        unint64_t v24 = 0;
LABEL_40:

        unsigned __int16 v20 = 0;
        unsigned __int16 v21 = 0;
        unsigned __int8 v22 = 0;
        uint64_t v19 = 0;
        if (!a4) {
          goto LABEL_29;
        }
        goto LABEL_28;
      }
    }
    else
    {
      if (v18 != (int *)((char *)&dword_10 + 1))
      {
        unsigned __int16 v21 = 0;
        unsigned __int8 v22 = 0;
        uint64_t v23 = 0;
        unint64_t v24 = 0;
        uint64_t v25 = 0;
        if (v18 != (int *)((char *)&stru_20.cmd + 3)) {
          goto LABEL_27;
        }
        id v31 = v60;
        uint64_t v32 = [v31 meshVertexStruct];
        uint64_t v23 = TranslateGTMTLStructType(v32, a3, a4);

        unsigned int v33 = [v31 meshPrimitiveStruct];
        uint64_t v19 = TranslateGTMTLStructType(v33, a3, a4);

        unsigned __int16 v20 = (unsigned __int16)[v31 meshVertexCount];
        unsigned __int16 v21 = (unsigned __int16)[v31 meshPrimitiveCount];
        unsigned __int8 v22 = [v31 meshTopologyType];
        uint64_t v34 = [v31 builtInType];
        unsigned __int8 v35 = [v31 builtInDataType];

        uint64_t v25 = 0;
        unint64_t v24 = v34 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)v35 << 8);
        if (!a4) {
          goto LABEL_29;
        }
LABEL_28:
        *(void *)a1 = v59;
        *(void *)(a1 + 8) = v25;
        *(unsigned char *)(a1 + 16) = v55;
        *(unsigned char *)(a1 + 17) = v58;
        *(unsigned char *)(a1 + 18) = v57;
        *(unsigned char *)(a1 + 19) = v56 | 2;
        *(_DWORD *)(a1 + 20) = 0;
        *(void *)(a1 + 24) = v24;
        *(void *)(a1 + 32) = v23;
        *(void *)(a1 + 40) = v19;
        *(_WORD *)(a1 + 48) = v20;
        *(_WORD *)(a1 + 50) = v21;
        *(unsigned char *)(a1 + 52) = v22;
        *(_WORD *)(a1 + 53) = 0;
        *(unsigned char *)(a1 + 55) = 0;
        goto LABEL_29;
      }
      id v43 = v60;
      unsigned __int8 v50 = [v43 imageBlockKind];
      unint64_t v51 = [v43 imageBlockDataSize] | ((unint64_t)v50 << 48);
      unint64_t v52 = v51 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)[v43 aliasImplicitImageBlockRenderTarget] << 32);
      unsigned int v53 = [v43 aliasImplicitImageBlock];
      uint64_t v54 = 0x10000000000;
      if (!v53) {
        uint64_t v54 = 0;
      }
      uint64_t v23 = v52 | v54;
      unint64_t v48 = [v43 dataTypeDescription];
      if (v48) {
        goto LABEL_39;
      }
    }
    uint64_t v49 = [v43 imageBlockMasterStructMembers];
    unint64_t v24 = TranslateGTMTLStructType(v49, a3, a4);
    uint64_t v25 = 0;
    goto LABEL_40;
  }
  if (!v18)
  {
    unsigned __int16 v36 = (unsigned __int16)[v60 bufferAlignment];
    unint64_t v37 = [v60 bufferDataSize] | ((unint64_t)v36 << 32);
    unint64_t v38 = v37 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)[v60 bufferDataType] << 48);
    unsigned int v39 = [v60 isVertexDescriptorBuffer];
    uint64_t v40 = 0x100000000000000;
    if (!v39) {
      uint64_t v40 = 0;
    }
    unint64_t v24 = v38 | v40;
    goto LABEL_26;
  }
  if (v18 == (int *)((char *)&def_CFBEC + 1))
  {
    unsigned __int16 v41 = (unsigned __int16)[v60 threadgroupMemoryAlignment];
    unint64_t v24 = [v60 threadgroupMemoryDataSize] | ((unint64_t)v41 << 32);
LABEL_26:
    long long v42 = [v60 dataTypeDescription];
    uint64_t v25 = TranslateGTMTLType(v42, a3, a4);

    unsigned __int16 v20 = 0;
    unsigned __int16 v21 = 0;
    unsigned __int8 v22 = 0;
    uint64_t v19 = 0;
    uint64_t v23 = 0;
LABEL_27:
    if (!a4) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  unsigned __int16 v21 = 0;
  unsigned __int8 v22 = 0;
  uint64_t v23 = 0;
  unint64_t v24 = 0;
  uint64_t v25 = 0;
  if (v18 != (int *)((char *)&def_CFBEC + 2)) {
    goto LABEL_27;
  }
  unsigned __int8 v26 = [v60 textureDataType];
  unint64_t v27 = [v60 textureType] | ((unint64_t)v26 << 8);
  unint64_t v28 = v27 & 0xFFFFFFFFFF00FFFFLL | ((unint64_t)[v60 arrayLength] << 16);
  unsigned int v29 = [v60 isDepthTexture];
  unsigned __int16 v20 = 0;
  unsigned __int16 v21 = 0;
  unsigned __int8 v22 = 0;
  uint64_t v19 = 0;
  uint64_t v23 = 0;
  uint64_t v25 = 0;
  uint64_t v30 = 0x1000000;
  if (!v29) {
    uint64_t v30 = 0;
  }
  unint64_t v24 = v28 | v30;
  if (a4) {
    goto LABEL_28;
  }
LABEL_29:
}

uint64_t TranslateGTMTLType(void *a1, void *a2, uint64_t a3)
{
  id v5 = a1;
  uint64_t v6 = v5;
  if (v5)
  {
    id v7 = (char *)[v5 dataType];
    uint64_t v8 = 0;
    if ((uint64_t)v7 > 57)
    {
      if (v7 == (unsigned char *)&stru_20.vmaddr + 2)
      {
        uint64_t v8 = a2[19];
        a2[19] = v8 + 16;
        if (a3)
        {
          *(unsigned char *)uint64_t v8 = 58;
          id v14 = v6;
          *(unsigned char *)(v8 + 10) = [v14 access];
          *(unsigned char *)(v8 + 8) = [v14 textureDataType];
          unsigned __int8 v15 = [v14 textureType];

          *(unsigned char *)(v8 + 9) = v15;
        }
      }
      else if (v7 == (unsigned char *)&stru_20.vmaddr + 4)
      {
        id v9 = v6;
        uint64_t v8 = a2[15];
        a2[15] = v8 + 24;
        size_t v12 = [v9 elementTypeDescription];
        uint64_t v13 = TranslateGTMTLType(v12, a2, a3);

        if (a3)
        {
          *(unsigned char *)uint64_t v8 = 60;
          *(unsigned char *)(v8 + 23) = [v9 access];
          *(_WORD *)(v8 + 20) = (unsigned __int16)[v9 alignment];
          *(_DWORD *)(v8 + 16) = [v9 dataSize];
          *(unsigned char *)(v8 + 22) = [v9 elementType];
          *(void *)(v8 + 8) = v13;
        }
        goto LABEL_13;
      }
    }
    else
    {
      if (v7 == (unsigned char *)&def_CFBEC + 1)
      {
        uint64_t v8 = TranslateGTMTLStructType(v6, a2, a3);
        goto LABEL_17;
      }
      if (v7 == (unsigned char *)&def_CFBEC + 2)
      {
        id v9 = v6;
        uint64_t v8 = a2[18];
        a2[18] = v8 + 32;
        id v10 = [v9 elementTypeDescription];
        uint64_t v11 = TranslateGTMTLType(v10, a2, a3);

        if (a3)
        {
          *(unsigned char *)uint64_t v8 = 2;
          *(_WORD *)(v8 + 20) = (unsigned __int16)[v9 arrayLength];
          *(unsigned char *)(v8 + 24) = [v9 elementType];
          *(_DWORD *)(v8 + 16) = [v9 stride];
          *(_WORD *)(v8 + 22) = (unsigned __int16)[v9 argumentIndexStride];
          *(void *)(v8 + 8) = v11;
          if (objc_opt_respondsToSelector()) {
            *(unsigned char *)(v8 + 25) = [v9 aluType];
          }
        }
LABEL_13:
      }
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
LABEL_17:

  return v8;
}

uint64_t TranslateGTMTLStructType(void *a1, void *a2, uint64_t a3)
{
  id v5 = a1;
  uint64_t v6 = v5;
  if (v5)
  {
    uint64_t v7 = a2[16];
    uint64_t v8 = a2[17];
    a2[16] = v7 + 24;
    id v9 = [v5 members];
    a2[17] += 32 * (void)[v9 count];

    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    id obj = [v6 members];
    id v33 = [obj countByEnumeratingWithState:&v34 objects:v38 count:16];
    if (v33)
    {
      uint64_t v27 = v7;
      unint64_t v28 = v6;
      int v10 = 0;
      uint64_t v32 = *(void *)v35;
      uint64_t v26 = v8;
      uint64_t v29 = v8 + 25;
      do
      {
        uint64_t v11 = 0;
        int v30 = v10;
        size_t v12 = (unsigned char *)(v29 + 32 * v10);
        do
        {
          if (*(void *)v35 != v32) {
            objc_enumerationMutation(obj);
          }
          id v13 = *(id *)(*((void *)&v34 + 1) + 8 * (void)v11);
          id v14 = [v13 name];
          id v15 = [v14 UTF8String];
          id v16 = [v13 name];
          if ([v16 UTF8String])
          {
            id v17 = [v13 name];
            size_t v18 = strlen((const char *)[v17 UTF8String]);
            size_t v19 = v18 + 1;
            if (v18 == -1) {
              unsigned __int16 v20 = 0;
            }
            else {
              unsigned __int16 v20 = (void *)a2[23];
            }
            a2[23] += v19;
            if (a3) {
              memcpy(v20, v15, v19);
            }
          }
          else
          {
            unsigned __int16 v20 = 0;
          }

          unsigned __int16 v21 = [v13 dataTypeDescription];
          uint64_t v22 = TranslateGTMTLType(v21, a2, a3);

          if (a3)
          {
            *(void *)(v12 - 25) = v20;
            *(_DWORD *)(v12 - 9) = [v13 offset];
            *(v12 - 1) = [v13 dataType];
            *(_WORD *)(v12 - 5) = (unsigned __int16)[v13 argumentIndex];
            *(_WORD *)(v12 - 3) = (unsigned __int16)[v13 indirectArgumentIndex];
            *(void *)(v12 - 17) = v22;
            if (objc_opt_respondsToSelector())
            {
              id v23 = v13;
              *size_t v12 = [v23 aluType];
            }
          }

          uint64_t v11 = (char *)v11 + 1;
          v12 += 32;
        }
        while (v33 != v11);
        int v10 = v30 + v11;
        id v33 = [obj countByEnumeratingWithState:&v34 objects:v38 count:16];
      }
      while (v33);
      uint64_t v7 = v27;
      uint64_t v6 = v28;
      uint64_t v8 = v26;
    }
    else
    {
      int v10 = 0;
    }

    if (a3)
    {
      *(unsigned char *)uint64_t v7 = 1;
      if (v10) {
        uint64_t v24 = v8;
      }
      else {
        uint64_t v24 = 0;
      }
      *(void *)(v7 + 8) = v24;
      *(_DWORD *)(v7 + 16) = v10;
    }
  }
  else
  {
    uint64_t v7 = 0;
  }

  return v7;
}

void TranslateGTMTLBinding(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = a2;
  id v8 = [v7 name];
  id v9 = [v8 UTF8String];
  id v10 = [v7 name];
  if ([v10 UTF8String])
  {
    id v11 = [v7 name];
    size_t v12 = strlen((const char *)[v11 UTF8String]);
    size_t v13 = v12 + 1;
    if (v12 == -1) {
      id v14 = 0;
    }
    else {
      id v14 = (void *)a3[23];
    }
    a3[23] += v13;
    if (a4) {
      memcpy(v14, v9, v13);
    }
  }
  else
  {
    id v14 = 0;
  }

  unsigned __int8 v15 = [v7 access];
  unsigned __int8 v16 = [v7 isUsed];
  if ([v7 isArgument]) {
    char v17 = 2;
  }
  else {
    char v17 = 0;
  }
  char v54 = v17;
  unsigned __int8 v18 = [v7 index];
  id v53 = [v7 type];
  id v59 = v7;
  size_t v19 = (int *)[v59 type];
  unsigned __int16 v20 = 0;
  uint64_t v21 = 0;
  unsigned __int8 v57 = v15;
  unsigned __int8 v58 = v14;
  unsigned __int8 v56 = v16;
  unsigned __int8 v55 = v18;
  if ((uint64_t)v19 <= 15)
  {
    if (v19)
    {
      if (v19 != (int *)((char *)&def_CFBEC + 1))
      {
        uint64_t v22 = 0;
        unsigned __int16 v23 = 0;
        unsigned __int8 v24 = 0;
        unint64_t v25 = 0;
        uint64_t v26 = 0;
        if (v19 == (int *)((char *)&def_CFBEC + 2))
        {
          unsigned __int8 v27 = [v59 textureDataType];
          unint64_t v28 = [v59 textureType] | ((unint64_t)v27 << 8);
          unint64_t v29 = v28 & 0xFFFFFFFFFF00FFFFLL | ((unint64_t)[v59 arrayLength] << 16);
          unsigned int v30 = [v59 isDepthTexture];
          uint64_t v21 = 0;
          uint64_t v22 = 0;
          unsigned __int16 v20 = 0;
          unsigned __int16 v23 = 0;
          unsigned __int8 v24 = 0;
          uint64_t v26 = 0;
          uint64_t v31 = 0x1000000;
          if (!v30) {
            uint64_t v31 = 0;
          }
          unint64_t v25 = v29 | v31;
        }
        goto LABEL_38;
      }
      unsigned __int16 v40 = (unsigned __int16)[v59 threadgroupMemoryAlignment];
      unint64_t v25 = [v59 threadgroupMemoryDataSize] | ((unint64_t)v40 << 32);
    }
    else
    {
      unsigned __int16 v35 = (unsigned __int16)[v59 bufferAlignment];
      unint64_t v36 = [v59 bufferDataSize] | ((unint64_t)v35 << 32);
      unint64_t v37 = v36 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)[v59 bufferDataType] << 48);
      unsigned int v38 = [v59 isVertexDescriptorBuffer];
      uint64_t v39 = 0x100000000000000;
      if (!v38) {
        uint64_t v39 = 0;
      }
      unint64_t v25 = v37 | v39;
    }
    unsigned __int16 v41 = objc_msgSend(v59, "dataTypeDescription", v53);
    uint64_t v26 = TranslateGTMTLType(v41, a3, a4);

    uint64_t v21 = 0;
LABEL_37:
    uint64_t v22 = 0;
    unsigned __int16 v20 = 0;
    unsigned __int16 v23 = 0;
    unsigned __int8 v24 = 0;
    goto LABEL_38;
  }
  if (v19 == &dword_10)
  {
    uint64_t v42 = [v59 imageBlockDataSize];
    unint64_t v43 = v42 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)[v59 aliasImplicitImageBlockRenderTarget] << 32);
    unsigned int v44 = [v59 aliasImplicitImageBlock];
    uint64_t v45 = 0x10000000000;
    if (!v44) {
      uint64_t v45 = 0;
    }
    uint64_t v21 = v43 | v45;
    unsigned int v46 = objc_msgSend(v59, "imageBlockMasterStructMembers", v53);
    if (!v46) {
      goto LABEL_35;
    }
    goto LABEL_31;
  }
  if (v19 == (int *)((char *)&dword_10 + 1))
  {
    unsigned __int8 v48 = [v59 imageBlockKind];
    unint64_t v49 = [v59 imageBlockDataSize] | ((unint64_t)v48 << 48);
    unint64_t v50 = v49 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)[v59 aliasImplicitImageBlockRenderTarget] << 32);
    unsigned int v51 = [v59 aliasImplicitImageBlock];
    uint64_t v52 = 0x10000000000;
    if (!v51) {
      uint64_t v52 = 0;
    }
    uint64_t v21 = v50 | v52;
    unsigned int v46 = objc_msgSend(v59, "dataTypeDescription", v53);
    if (v46)
    {
LABEL_35:
      uint64_t v47 = [v59 dataTypeDescription];
      uint64_t v26 = TranslateGTMTLType(v47, a3, a4);
      unint64_t v25 = 0;
      goto LABEL_36;
    }
LABEL_31:
    uint64_t v47 = [v59 imageBlockMasterStructMembers];
    unint64_t v25 = TranslateGTMTLStructType(v47, a3, a4);
    uint64_t v26 = 0;
LABEL_36:

    goto LABEL_37;
  }
  uint64_t v22 = 0;
  unsigned __int16 v23 = 0;
  unsigned __int8 v24 = 0;
  unint64_t v25 = 0;
  uint64_t v26 = 0;
  if (v19 == (int *)((char *)&stru_20.cmd + 3))
  {
    uint64_t v32 = [v59 meshVertexStruct];
    uint64_t v21 = TranslateGTMTLStructType(v32, a3, a4);

    id v33 = [v59 meshPrimitiveStruct];
    uint64_t v22 = TranslateGTMTLStructType(v33, a3, a4);

    unsigned __int16 v20 = (unsigned __int16)[v59 meshVertexCount];
    unsigned __int16 v23 = (unsigned __int16)[v59 meshPrimitiveCount];
    unsigned __int8 v24 = [v59 meshTopologyType];
    uint64_t v34 = [v59 builtInType];
    uint64_t v26 = 0;
    unint64_t v25 = v34 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)[v59 builtInDataType] << 8);
  }
LABEL_38:
  if (a4)
  {
    *(void *)a1 = v58;
    *(void *)(a1 + 8) = v26;
    *(unsigned char *)(a1 + 16) = (_BYTE)v53;
    *(unsigned char *)(a1 + 17) = v57;
    *(unsigned char *)(a1 + 18) = v55;
    *(unsigned char *)(a1 + 19) = v54 | v56;
    *(_DWORD *)(a1 + 20) = 0;
    *(void *)(a1 + 24) = v25;
    *(void *)(a1 + 32) = v21;
    *(void *)(a1 + 40) = v22;
    *(_WORD *)(a1 + 48) = v20;
    *(_WORD *)(a1 + 50) = v23;
    *(unsigned char *)(a1 + 52) = v24;
    *(_WORD *)(a1 + 53) = 0;
    *(unsigned char *)(a1 + 55) = 0;
  }
}

uint64_t TranslateGTMTLRenderPipelineReflection(void *a1, void *a2, uint64_t a3)
{
  id v5 = a1;
  uint64_t v44 = a2[14];
  uint64_t v6 = [v5 vertexBindings];
  __int16 v45 = TranslateBindings(v6, a2, a3);

  uint64_t v42 = a2[14];
  id v7 = [v5 fragmentBindings];
  __int16 v43 = TranslateBindings(v7, a2, a3);

  uint64_t v40 = a2[14];
  id v8 = [v5 vertexBuiltInArguments];
  __int16 v41 = TranslateArguments(v8, a2, a3);

  if ((objc_opt_respondsToSelector() & 1) != 0
    && ([v5 imageBlockDataReturn], id v9 = objc_claimAutoreleasedReturnValue(), v9, v9))
  {
    uint64_t v10 = a2[14];
    a2[14] = v10 + 56;
    id v11 = [v5 imageBlockDataReturn];
    uint64_t v39 = v10;
    TranslateGTMTLArgument(v10, v11, a2, a3);
  }
  else
  {
    uint64_t v39 = 0;
  }
  if (objc_opt_respondsToSelector())
  {
    size_t v12 = [v5 tileBindings];
  }
  else
  {
    size_t v12 = &__NSArray0__struct;
  }
  uint64_t v37 = a2[14];
  unint64_t v49 = v12;
  __int16 v38 = TranslateBindings(v12, a2, a3);
  if (objc_opt_respondsToSelector())
  {
    size_t v13 = [v5 objectBindings];
  }
  else
  {
    size_t v13 = &__NSArray0__struct;
  }
  if (objc_opt_respondsToSelector())
  {
    id v14 = [v5 objectBuiltInArguments];
  }
  else
  {
    id v14 = &__NSArray0__struct;
  }
  if (objc_opt_respondsToSelector())
  {
    unsigned __int8 v15 = [v5 meshBindings];
  }
  else
  {
    unsigned __int8 v15 = &__NSArray0__struct;
  }
  if (objc_opt_respondsToSelector())
  {
    unsigned __int8 v16 = [v5 meshBuiltInArguments];
  }
  else
  {
    unsigned __int8 v16 = &__NSArray0__struct;
  }
  uint64_t v36 = a2[14];
  unsigned __int8 v48 = v13;
  __int16 v17 = TranslateBindings(v13, a2, a3);
  uint64_t v18 = a2[14];
  uint64_t v47 = v14;
  __int16 v19 = TranslateArguments(v14, a2, a3);
  uint64_t v20 = a2[14];
  unsigned int v46 = v15;
  __int16 v21 = TranslateBindings(v15, a2, a3);
  uint64_t v22 = a2[14];
  __int16 v23 = TranslateArguments(v16, a2, a3);
  if (a3)
  {
    uint64_t v24 = a2[12];
    uint64_t v25 = v44;
    if (!v45) {
      uint64_t v25 = 0;
    }
    uint64_t v26 = v40;
    if (!v41) {
      uint64_t v26 = 0;
    }
    *(void *)uint64_t v24 = 0;
    *(void *)(v24 + 8) = 0;
    uint64_t v27 = v42;
    if (!v43) {
      uint64_t v27 = 0;
    }
    uint64_t v28 = v37;
    if (!v38) {
      uint64_t v28 = 0;
    }
    *(void *)(v24 + 16) = 0;
    *(void *)(v24 + 24) = v25;
    uint64_t v29 = v36;
    if (!v17) {
      uint64_t v29 = 0;
    }
    if (v19) {
      uint64_t v30 = v18;
    }
    else {
      uint64_t v30 = 0;
    }
    *(void *)(v24 + 32) = v27;
    *(void *)(v24 + 40) = v29;
    if (v21) {
      uint64_t v31 = v20;
    }
    else {
      uint64_t v31 = 0;
    }
    if (v23) {
      uint64_t v32 = v22;
    }
    else {
      uint64_t v32 = 0;
    }
    *(void *)(v24 + 48) = v31;
    *(void *)(v24 + 56) = v28;
    *(void *)(v24 + 64) = v39;
    *(void *)(v24 + 72) = v26;
    *(void *)(v24 + 80) = v30;
    *(void *)(v24 + 88) = v32;
    *(_OWORD *)(v24 + 96) = 0u;
    *(_OWORD *)(v24 + 112) = 0u;
    *(_OWORD *)(v24 + 128) = 0u;
    *(_OWORD *)(v24 + 144) = 0u;
    *(_OWORD *)(v24 + 160) = 0u;
    *(_OWORD *)(v24 + 176) = 0u;
    *(void *)(v24 + 190) = 0;
    *(_OWORD *)(v24 + 214) = 0u;
    id v33 = (_OWORD *)(v24 + 214);
    *((_WORD *)v33 - 8) = v45;
    *((_WORD *)v33 - 7) = v43;
    *((_WORD *)v33 - 6) = v38;
    *((_WORD *)v33 - 5) = v17;
    *((_WORD *)v33 - 4) = v21;
    *((_WORD *)v33 - 3) = v41;
    *((_WORD *)v33 - 2) = v19;
    *((_WORD *)v33 - 1) = v23;
    v33[1] = 0u;
    v33[2] = 0u;
    v33[3] = 0u;
    v33[4] = 0u;
    v33[5] = 0u;
    v33[6] = 0u;
    v33[7] = 0u;
    v33[8] = 0u;
    v33[9] = 0u;
    v33[10] = 0u;
    v33[11] = 0u;
    v33[12] = 0u;
    v33[13] = 0u;
    v33[14] = 0u;
    v33[15] = 0u;
    v33[16] = 0u;
    *(_OWORD *)((char *)v33 + 266) = 0u;
  }
  uint64_t v34 = a2[12];
  a2[12] = v34 + 496;

  return v34;
}

uint64_t TranslateBindings(void *a1, void *a2, uint64_t a3)
{
  id v5 = a1;
  uint64_t v6 = a2[14];
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id v7 = [v5 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v18;
    do
    {
      for (uint64_t i = 0; i != v8; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v18 != v9) {
          objc_enumerationMutation(v5);
        }
        id v11 = *(void **)(*((void *)&v17 + 1) + 8 * i);
        unint64_t v12 = (unint64_t)[v11 type];
        if (v12 <= 0x23 && ((1 << v12) & 0x80F03000FLL) != 0)
        {
          uint64_t v14 = a2[14];
          a2[14] = v14 + 56;
          TranslateGTMTLBinding(v14, v11, a2, a3);
        }
      }
      id v8 = [v5 countByEnumeratingWithState:&v17 objects:v21 count:16];
    }
    while (v8);
  }
  uint64_t v15 = a2[14];

  return -1227133513 * ((unint64_t)(v15 - v6) >> 3);
}

uint64_t TranslateArguments(void *a1, void *a2, uint64_t a3)
{
  id v5 = a1;
  uint64_t v6 = a2[14];
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id v7 = [v5 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v18;
    do
    {
      for (uint64_t i = 0; i != v8; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v18 != v9) {
          objc_enumerationMutation(v5);
        }
        id v11 = *(void **)(*((void *)&v17 + 1) + 8 * i);
        unint64_t v12 = (unint64_t)[v11 type];
        if (v12 <= 0x23 && ((1 << v12) & 0x80F03000FLL) != 0)
        {
          uint64_t v14 = a2[14];
          a2[14] = v14 + 56;
          TranslateGTMTLArgument(v14, v11, a2, a3);
        }
      }
      id v8 = [v5 countByEnumeratingWithState:&v17 objects:v21 count:16];
    }
    while (v8);
  }
  uint64_t v15 = a2[14];

  return -1227133513 * ((unint64_t)(v15 - v6) >> 3);
}

uint64_t TranslateGTMTLComputePipelineReflection(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a2[14];
  id v6 = a1;
  id v7 = [v6 builtInArguments];
  __int16 v8 = TranslateArguments(v7, a2, a3);

  uint64_t v9 = a2[14];
  uint64_t v10 = [v6 bindings];

  __int16 v11 = TranslateBindings(v10, a2, a3);
  if (a3)
  {
    uint64_t v12 = a2[11];
    if (v8) {
      uint64_t v13 = v5;
    }
    else {
      uint64_t v13 = 0;
    }
    if (v11) {
      uint64_t v14 = v9;
    }
    else {
      uint64_t v14 = 0;
    }
    *(void *)uint64_t v12 = 0;
    *(void *)(v12 + 8) = 0;
    *(void *)(v12 + 16) = 0;
    *(void *)(v12 + 24) = v13;
    *(void *)(v12 + 32) = v14;
    *(_OWORD *)(v12 + 40) = 0u;
    *(_OWORD *)(v12 + 56) = 0u;
    *(_OWORD *)(v12 + 72) = 0u;
    *(_DWORD *)(v12 + 88) = 0;
    *(_WORD *)(v12 + 92) = v8;
    *(_WORD *)(v12 + 94) = v11;
    *(_OWORD *)(v12 + 96) = 0u;
    *(_OWORD *)(v12 + 112) = 0u;
    *(_OWORD *)(v12 + 128) = 0u;
    *(_OWORD *)(v12 + 144) = 0u;
  }
  uint64_t result = a2[11];
  a2[11] = result + 160;
  return result;
}

void TranslateGTMTLFunctionInfo(void *a1, void *a2, void *a3, void *a4, int a5)
{
  id v9 = a1;
  id v10 = a2;
  id v11 = a3;
  if (!v9) {
    goto LABEL_70;
  }
  *(_DWORD *)((char *)v98 + 3) = 0;
  v98[0] = 0;
  id v81 = v11;
  id v12 = v11;
  id v13 = [v12 UTF8String];
  id v14 = v12;
  if (![v14 UTF8String])
  {
    size_t v19 = 0;
    unsigned __int8 v16 = a4 + 23;
    long long v17 = (char *)a4[23];
    goto LABEL_6;
  }
  size_t v15 = strlen((const char *)[v14 UTF8String]);
  unsigned __int8 v16 = a4 + 23;
  long long v17 = (char *)a4[23];
  long long v18 = v17;
  size_t v19 = v15 + 1;
  if (v15 == -1) {
LABEL_6:
  }
    long long v18 = 0;
  void *v16 = &v17[v19];
  if (a5) {
    memcpy(v18, v13, v19);
  }
  long long v80 = v18;
  id v20 = [v10 filePath];
  id v21 = [v20 UTF8String];
  id v22 = [v10 filePath];
  id v23 = [v22 UTF8String];
  if (!v23)
  {
    size_t v27 = 0;
    uint64_t v25 = a4 + 23;
    uint64_t v26 = (char *)a4[23];
    goto LABEL_13;
  }
  id obj = [v10 filePath];
  size_t v24 = strlen((const char *)[obj UTF8String]);
  uint64_t v25 = a4 + 23;
  uint64_t v26 = (char *)a4[23];
  __dst = v26;
  size_t v27 = v24 + 1;
  if (v24 == -1) {
LABEL_13:
  }
    __dst = 0;
  *uint64_t v25 = &v26[v27];
  if (a5) {
    memcpy(__dst, v21, v27);
  }
  id v28 = [v10 unpackedFilePath];
  id v29 = [v28 UTF8String];
  id v30 = [v10 unpackedFilePath];
  id v31 = [v30 UTF8String];
  uint64_t v32 = v10;
  id v33 = v31;
  uint64_t v82 = v32;
  if (v31)
  {
    id v5 = [v32 unpackedFilePath];
    size_t v34 = strlen((const char *)[v5 UTF8String]);
    unsigned __int16 v35 = a4 + 23;
    uint64_t v36 = (char *)a4[23];
    unsigned int v83 = v36;
    size_t v37 = v34 + 1;
    if (v34 != -1) {
      goto LABEL_21;
    }
  }
  else
  {
    size_t v37 = 0;
    unsigned __int16 v35 = a4 + 23;
    uint64_t v36 = (char *)a4[23];
  }
  unsigned int v83 = 0;
LABEL_21:
  void *v35 = &v36[v37];
  if (a5) {
    memcpy(v83, v29, v37);
  }
  unsigned __int16 v79 = (unsigned __int16)[v9 functionType];
  unsigned __int16 v78 = (unsigned __int16)[v9 lineNumber];
  unsigned __int16 v77 = (unsigned __int16)[v9 patchControlPointCount];
  unsigned __int8 v76 = [v9 patchType];
  v98[0] = 0;
  *(_DWORD *)((char *)v98 + 3) = 0;
  if (v33) {

  }
  if (v23) {
  __int16 v38 = [v9 vertexAttributes];
  }
  unsigned __int8 v39 = [v38 count];

  unsigned __int8 v75 = v39;
  if (v39) {
    uint64_t v74 = a4[20];
  }
  else {
    uint64_t v74 = 0;
  }
  long long v96 = 0u;
  long long v97 = 0u;
  long long v94 = 0u;
  long long v95 = 0u;
  uint64_t v85 = v9;
  id obja = [v9 vertexAttributes];
  id v40 = [obja countByEnumeratingWithState:&v94 objects:v100 count:16];
  if (v40)
  {
    id v41 = v40;
    uint64_t v42 = *(void *)v95;
    do
    {
      for (uint64_t i = 0; i != v41; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v95 != v42) {
          objc_enumerationMutation(obja);
        }
        uint64_t v44 = *(void **)(*((void *)&v94 + 1) + 8 * i);
        id v45 = [v44 name];
        id v46 = [v45 UTF8String];
        id v47 = [v44 name];
        if ([v47 UTF8String])
        {
          id v48 = [v44 name];
          size_t v49 = strlen((const char *)[v48 UTF8String]);
          size_t v50 = v49 + 1;
          if (v49 == -1) {
            unsigned int v51 = 0;
          }
          else {
            unsigned int v51 = (void *)a4[23];
          }
          a4[23] += v50;
          if (a5) {
            memcpy(v51, v46, v50);
          }
        }
        else
        {
          unsigned int v51 = 0;
        }

        uint64_t v52 = a4[20];
        if (a5)
        {
          *(void *)uint64_t v52 = v51;
          *(_DWORD *)(a4[20] + 8) = [v44 attributeIndex];
          *(unsigned char *)(a4[20] + 12) = [v44 attributeType];
          *(unsigned char *)(a4[20] + 13) = [v44 isActive];
          *(unsigned char *)(a4[20] + 14) = [v44 isPatchData];
          unsigned __int8 v53 = [v44 isPatchControlPointData];
          uint64_t v52 = a4[20];
          *(unsigned char *)(v52 + 15) = v53;
        }
        a4[20] = v52 + 16;
      }
      id v41 = [obja countByEnumeratingWithState:&v94 objects:v100 count:16];
    }
    while (v41);
  }

  char v54 = [v85 stageInputAttributes];
  unsigned __int8 v55 = [v54 count];

  unsigned __int8 v73 = v55;
  if (v55) {
    uint64_t v71 = a4[21];
  }
  else {
    uint64_t v71 = 0;
  }
  long long v92 = 0u;
  long long v93 = 0u;
  long long v90 = 0u;
  long long v91 = 0u;
  objc_msgSend(v85, "stageInputAttributes", v71);
  id objb = (id)objc_claimAutoreleasedReturnValue();
  id v56 = [objb countByEnumeratingWithState:&v90 objects:v99 count:16];
  if (v56)
  {
    id v57 = v56;
    uint64_t v58 = *(void *)v91;
    do
    {
      for (j = 0; j != v57; j = (char *)j + 1)
      {
        if (*(void *)v91 != v58) {
          objc_enumerationMutation(objb);
        }
        id v60 = *(void **)(*((void *)&v90 + 1) + 8 * (void)j);
        id v61 = [v60 name];
        id v62 = [v61 UTF8String];
        id v63 = [v60 name];
        if ([v63 UTF8String])
        {
          id v64 = [v60 name];
          size_t v65 = strlen((const char *)[v64 UTF8String]);
          size_t v66 = v65 + 1;
          if (v65 == -1) {
            unint64_t v67 = 0;
          }
          else {
            unint64_t v67 = (void *)a4[23];
          }
          a4[23] += v66;
          if (a5) {
            memcpy(v67, v62, v66);
          }
        }
        else
        {
          unint64_t v67 = 0;
        }

        uint64_t v68 = a4[21];
        if (a5)
        {
          *(void *)uint64_t v68 = v67;
          *(_DWORD *)(a4[21] + 8) = [v60 attributeIndex];
          *(unsigned char *)(a4[21] + 12) = [v60 attributeType];
          *(unsigned char *)(a4[21] + 13) = [v60 isActive];
          *(unsigned char *)(a4[21] + 14) = [v60 isPatchData];
          unsigned __int8 v69 = [v60 isPatchControlPointData];
          uint64_t v68 = a4[21];
          *(unsigned char *)(v68 + 15) = v69;
        }
        a4[21] = v68 + 16;
      }
      id v57 = [objb countByEnumeratingWithState:&v90 objects:v99 count:16];
    }
    while (v57);
  }

  if (a5)
  {
    uint64_t v70 = a4[3];
    *(void *)uint64_t v70 = v80;
    *(void *)(v70 + 8) = __dst;
    *(void *)(v70 + 16) = v83;
    *(void *)(v70 + 24) = v74;
    *(void *)(v70 + 32) = v72;
    *(_WORD *)(v70 + 40) = v79;
    *(_WORD *)(v70 + 42) = v78;
    *(_WORD *)(v70 + 44) = v77;
    *(unsigned char *)(v70 + 46) = v75;
    *(unsigned char *)(v70 + 47) = v73;
    *(unsigned char *)(v70 + 48) = v76;
    *(_DWORD *)(v70 + 49) = v98[0];
    *(_DWORD *)(v70 + 52) = *(_DWORD *)((char *)v98 + 3);
  }
  a4[3] += 56;
  id v9 = v85;
  id v11 = v81;
  id v10 = v82;
LABEL_70:
}

void TranslateGTMTLDynamicLibraryInfo(void *a1, void *a2, int a3)
{
  id v5 = a1;
  if (v5)
  {
    id v42 = v5;
    id v6 = v5;
    id v7 = [v6 exportedFunctions];
    unsigned __int16 v8 = (unsigned __int16)[v7 count];
    unsigned __int16 v39 = v8;
    if (v8) {
      uint64_t v9 = a2[22];
    }
    else {
      uint64_t v9 = 0;
    }
    a2[22] += 8 * v8;
    id v10 = [v6 installName];
    id v11 = [v10 UTF8String];
    id v12 = [v6 installName];
    if ([v12 UTF8String])
    {
      id v13 = [v6 installName];
      size_t v14 = strlen((const char *)[v13 UTF8String]);
      size_t v15 = v14 + 1;
      if (v14 == -1) {
        unsigned __int8 v16 = 0;
      }
      else {
        unsigned __int8 v16 = (void *)a2[23];
      }
      __dst = v16;
      a2[23] += v15;
      if (a3) {
        memcpy(v16, v11, v15);
      }
    }
    else
    {
      __dst = 0;
    }

    id v17 = [v6 libraryPath];
    id v18 = [v17 UTF8String];
    id v19 = [v6 libraryPath];
    id v41 = v6;
    if ([v19 UTF8String])
    {
      id v20 = [v6 libraryPath];
      size_t v21 = strlen((const char *)[v20 UTF8String]);
      size_t v22 = v21 + 1;
      if (v21 == -1) {
        id v23 = 0;
      }
      else {
        id v23 = (void *)a2[23];
      }
      a2[23] += v22;
      if (a3) {
        memcpy(v23, v18, v22);
      }
      __int16 v38 = v23;
    }
    else
    {
      __int16 v38 = 0;
    }

    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    id v24 = v7;
    id v25 = [v24 countByEnumeratingWithState:&v43 objects:v47 count:16];
    if (v25)
    {
      id v26 = v25;
      int v27 = 0;
      uint64_t v28 = *(void *)v44;
      do
      {
        for (uint64_t i = 0; i != v26; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v44 != v28) {
            objc_enumerationMutation(v24);
          }
          id v30 = *(id *)(*((void *)&v43 + 1) + 8 * i);
          id v31 = [v30 UTF8String];
          id v32 = v30;
          if (![v32 UTF8String])
          {
            size_t v36 = 0;
            size_t v34 = (char *)a2[23];
LABEL_30:
            unsigned __int16 v35 = 0;
            goto LABEL_31;
          }
          size_t v33 = strlen((const char *)[v32 UTF8String]);
          size_t v34 = (char *)a2[23];
          unsigned __int16 v35 = v34;
          size_t v36 = v33 + 1;
          if (v33 == -1) {
            goto LABEL_30;
          }
LABEL_31:
          a2[23] = &v34[v36];
          if (a3)
          {
            memcpy(v35, v31, v36);
            *(void *)(v9 + 8 * v27++) = v35;
          }
        }
        id v26 = [v24 countByEnumeratingWithState:&v43 objects:v47 count:16];
      }
      while (v26);
    }

    if (a3)
    {
      uint64_t v37 = a2[2];
      *(void *)uint64_t v37 = __dst;
      *(void *)(v37 + 8) = v38;
      *(void *)(v37 + 16) = v9;
      *(_WORD *)(v37 + 24) = v39;
      *(_DWORD *)(v37 + 26) = 0;
      *(_WORD *)(v37 + 30) = 0;
    }
    a2[2] += 32;

    id v5 = v42;
  }
}

void TranslateGTMTLBufferInfo(void *a1, uint64_t a2, int a3)
{
  id v5 = a1;
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v6 + 48;
  if (!a3) {
    goto LABEL_13;
  }
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)uint64_t v6 = 0u;
  id v10 = v5;
  id v7 = v5;
  TranslateGTMTLResourceInfo(v7, v6);
  if (objc_opt_respondsToSelector()) {
    *(void *)(v6 + 24) = [v7 gpuAddress];
  }
  unsigned __int16 v8 = [v7 heap];
  if (v8 && (objc_opt_respondsToSelector() & 1) != 0)
  {
    id v9 = [v8 gpuAddress];
LABEL_9:
    *(void *)(v6 + 32) = v9;
    goto LABEL_10;
  }
  if (objc_opt_respondsToSelector())
  {
    id v9 = [v7 parentGPUAddress];
    goto LABEL_9;
  }
LABEL_10:
  if (objc_opt_respondsToSelector()) {
    *(void *)(v6 + 40) = [v7 parentGPUSize];
  }

  id v5 = v10;
LABEL_13:
}

void TranslateGTMTLResourceInfo(void *a1, uint64_t a2)
{
  id v3 = a1;
  if (objc_opt_respondsToSelector()) {
    *(void *)(a2 + 8) = [v3 allocatedSize];
  }
  if (objc_opt_respondsToSelector()) {
    *(void *)a2 = [v3 allocationID];
  }
  if (objc_opt_respondsToSelector()) {
    *(_DWORD *)(a2 + 16) = [v3 responsibleProcess];
  }
}

uint64_t CanHarvestTextureAsIOSurfaceUsingCPU(void *a1)
{
  id v1 = a1;
  if (![v1 iosurface]
    || ([v1 isDrawable] & 1) != 0
    || ([v1 isFramebufferOnly] & 1) != 0
    || ((unint64_t)[v1 pixelFormat] & 0xFFFFFFFFFFFFFFFELL) == 0x226)
  {
    uint64_t v2 = 0;
  }
  else
  {
    uint64_t v2 = [v1 isShareable] ^ 1;
  }

  return v2;
}

void TranslateGTMTLTextureMipmapLevels(void *a1, uint64_t a2, uint64_t a3)
{
  id v5 = a1;
  buffer = (__IOSurface *)[v5 iosurface];
  unint64_t v6 = (unint64_t)[v5 width];
  unint64_t v7 = (unint64_t)[v5 height];
  unint64_t v8 = (unint64_t)[v5 depth];
  id v9 = (uint32_t *)[v5 pixelFormat];
  uint64_t v37 = 0;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v34 = 0u;
  id v10 = [v5 device];
  id v32 = v9;
  GTMTLPixelFormatGetInfoForDevice((uint64_t)v9, (uint64_t)&v34);

  id v30 = [v5 sampleCount];
  int v33 = CanHarvestTextureAsIOSurfaceUsingCPU(v5);
  if (a3)
  {
    id v11 = (int *)(a2 + 8);
    unint64_t v12 = (unint64_t)(v9 - 40);
    unint64_t v13 = (unint64_t)v9 - 550;
    do
    {
      if (v33)
      {
        size_t BytesPerRowOfPlane = IOSurfaceGetBytesPerRowOfPlane(buffer, (size_t)[v5 iosurfacePlane]);
        size_t v15 = IOSurfaceGetHeightOfPlane(buffer, (size_t)[v5 iosurfacePlane]) * BytesPerRowOfPlane;
        if ([v5 isFramebufferOnly]) {
          unint64_t v16 = BytesPerRowOfPlane * v7;
        }
        else {
          unint64_t v16 = v15;
        }
        unint64_t v17 = v6;
        LODWORD(v18) = v7;
      }
      else
      {
        unint64_t v17 = v6;
        unint64_t v18 = v7;
        uint64_t v19 = 5 * (void)v30;
        if (v32 != &stru_B8.reserved3)
        {
          if ((BYTE9(v34) & 4) != 0)
          {
            unint64_t v17 = (v6 + (unint64_t)v36 - 1) / (unint64_t)v36;
            uint64_t v19 = *((void *)&v35 + 1) * (void)v30;
            unint64_t v18 = (v7 + *((void *)&v36 + 1) - 1) / *((void *)&v36 + 1);
          }
          else
          {
            uint64_t v19 = *((void *)&v35 + 1) * (void)v30;
            unint64_t v17 = v6;
            unint64_t v18 = v7;
          }
        }
        size_t BytesPerRowOfPlane = v19 * v17;
        size_t v15 = v19 * v17 * v18;
        unint64_t v16 = v15 * v8;
      }
      int v20 = v18 * v17;
      int v21 = 5 * v20;
      int v22 = 4 * v20;
      BOOL v23 = BytesPerRowOfPlane >= 4 * v17;
      if (BytesPerRowOfPlane <= 4 * v17) {
        int v24 = 4 * v17;
      }
      else {
        int v24 = BytesPerRowOfPlane;
      }
      if (v23) {
        int v22 = v15;
      }
      if (v13 < 2)
      {
        int v25 = v22;
      }
      else
      {
        int v24 = BytesPerRowOfPlane;
        int v25 = v15;
      }
      if (v13 >= 2) {
        int v21 = v16;
      }
      if (v16 <= 0x10) {
        int v26 = 16;
      }
      else {
        int v26 = v16;
      }
      if (v16 <= 0x20) {
        LODWORD(v16) = 32;
      }
      if (((1 << v12) & 0x33) == 0) {
        int v26 = v16;
      }
      if (v12 <= 7) {
        int v27 = 0;
      }
      else {
        int v27 = v24;
      }
      if (v12 <= 7) {
        int v28 = 0;
      }
      else {
        int v28 = v25;
      }
      if (v12 <= 7) {
        int v29 = v26;
      }
      else {
        int v29 = v21;
      }
      *(v11 - 2) = v27;
      *(v11 - 1) = v28;
      *id v11 = v29;
      v11 += 4;
      if (v6 <= 1) {
        unint64_t v6 = 1;
      }
      else {
        v6 >>= 1;
      }
      if (v7 <= 1) {
        unint64_t v7 = 1;
      }
      else {
        v7 >>= 1;
      }
      if (v8 <= 1) {
        unint64_t v8 = 1;
      }
      else {
        v8 >>= 1;
      }
      --a3;
    }
    while (a3);
  }
}

void TranslateGTMTLTextureInfo(void *a1, uint64_t a2, int a3)
{
  id v11 = a1;
  uint64_t v5 = *(void *)(a2 + 72);
  *(void *)(a2 + 72) = v5 + 88;
  uint64_t v6 = (uint64_t)[v11 mipmapLevelCount];
  unint64_t v7 = v11;
  if (a3)
  {
    *(void *)(v5 + 80) = 0;
    *(_OWORD *)(v5 + 48) = 0u;
    *(_OWORD *)(v5 + 64) = 0u;
    *(_OWORD *)(v5 + 16) = 0u;
    *(_OWORD *)(v5 + 32) = 0u;
    *(_OWORD *)uint64_t v5 = 0u;
    id v8 = v11;
    TranslateGTMTLResourceInfo(v8, v5);
    if (objc_opt_respondsToSelector()) {
      *(void *)(v5 + 40) = [v8 uniqueIdentifier];
    }
    if (objc_opt_respondsToSelector()) {
      *(void *)(v5 + 56) = [v8 resourceIndex];
    }
    if (objc_opt_respondsToSelector()) {
      *(void *)(v5 + 64) = [v8 gpuAddress];
    }
    id v9 = [v8 heap];
    if (v9)
    {
      if (objc_opt_respondsToSelector())
      {
        *(void *)(v5 + 72) = [v9 gpuAddress];
        if ((~[v8 resourceOptions] & 0x30) == 0) {
          *(void *)(v5 + 64) = *(void *)(v5 + 72);
        }
      }
    }
    if (objc_opt_respondsToSelector()) {
      *(_WORD *)(v5 + 80) = (unsigned __int16)[v8 compressionFeedback];
    }
    TranslateGTMTLTextureMipmapLevels(v8, *(void *)(a2 + 104), v6);
    if (v6) {
      uint64_t v10 = *(void *)(a2 + 104);
    }
    else {
      uint64_t v10 = 0;
    }
    *(void *)(v5 + 24) = v10;
    *(unsigned char *)(v5 + 32) = v6;
    if (objc_opt_respondsToSelector()) {
      *(void *)(v5 + 48) = [v8 gpuResourceID];
    }

    unint64_t v7 = v11;
  }
  *(void *)(a2 + 104) += 16 * v6;
}

void TranslateGTMTLIndirectCommandBufferInfo(void *a1, uint64_t a2, int a3)
{
  id v5 = a1;
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = v6 + 56;
  if (a3)
  {
    *(void *)(v6 + 48) = 0;
    *(_OWORD *)(v6 + 16) = 0u;
    *(_OWORD *)(v6 + 32) = 0u;
    *(_OWORD *)uint64_t v6 = 0u;
    id v8 = v5;
    id v7 = v5;
    TranslateGTMTLResourceInfo(v7, v6);
    if (objc_opt_respondsToSelector()) {
      *(void *)(v6 + 24) = [v7 uniqueIdentifier];
    }
    if (objc_opt_respondsToSelector()) {
      *(void *)(v6 + 40) = [v7 gpuAddress];
    }
    if (objc_opt_respondsToSelector()) {
      *(void *)(v6 + 32) = [v7 resourceIndex];
    }
    if (objc_opt_respondsToSelector()) {
      *(void *)(v6 + 48) = [v7 gpuResourceID];
    }

    id v5 = v8;
  }
}

void TranslateGTMTLVisibleFunctionTableInfo(void *a1, uint64_t a2, int a3)
{
  id v5 = a1;
  uint64_t v6 = *(void *)(a2 + 80);
  *(void *)(a2 + 80) = v6 + 56;
  if (a3)
  {
    *(void *)(v6 + 48) = 0;
    *(_OWORD *)(v6 + 16) = 0u;
    *(_OWORD *)(v6 + 32) = 0u;
    *(_OWORD *)uint64_t v6 = 0u;
    id v8 = v5;
    id v7 = v5;
    TranslateGTMTLResourceInfo(v7, v6);
    if (objc_opt_respondsToSelector()) {
      *(void *)(v6 + 24) = [v7 uniqueIdentifier];
    }
    if (objc_opt_respondsToSelector()) {
      *(void *)(v6 + 32) = [v7 resourceIndex];
    }
    if (objc_opt_respondsToSelector()) {
      *(void *)(v6 + 40) = [v7 gpuResourceID];
    }
    if (objc_opt_respondsToSelector()) {
      *(void *)(v6 + 48) = [v7 gpuAddress];
    }

    id v5 = v8;
  }
}

void TranslateGTMTLIntersectionFunctionTableInfo(void *a1, uint64_t a2, int a3)
{
  id v5 = a1;
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = v6 + 48;
  if (a3)
  {
    *(_OWORD *)(v6 + 16) = 0u;
    *(_OWORD *)(v6 + 32) = 0u;
    *(_OWORD *)uint64_t v6 = 0u;
    id v8 = v5;
    id v7 = v5;
    TranslateGTMTLResourceInfo(v7, v6);
    if (objc_opt_respondsToSelector()) {
      *(void *)(v6 + 24) = [v7 uniqueIdentifier];
    }
    if (objc_opt_respondsToSelector()) {
      *(void *)(v6 + 32) = [v7 resourceIndex];
    }
    if (objc_opt_respondsToSelector()) {
      *(void *)(v6 + 40) = [v7 gpuResourceID];
    }

    id v5 = v8;
  }
}

void TranslateGTMTLAccelerationStructureInfo(void *a1, uint64_t *a2, int a3)
{
  id v5 = a1;
  uint64_t v6 = *a2;
  *a2 += 112;
  if (!a3) {
    goto LABEL_29;
  }
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)uint64_t v6 = 0u;
  id v11 = v5;
  id v7 = v5;
  TranslateGTMTLResourceInfo(v7, v6);
  if (objc_opt_respondsToSelector())
  {
    *(void *)(v6 + 24) = [v7 accelerationStructureUniqueIdentifier];
  }
  else if (objc_opt_respondsToSelector())
  {
    *(void *)(v6 + 48) = [v7 bufferOffset];
  }
  if (objc_opt_respondsToSelector()) {
    *(void *)(v6 + 32) = [v7 size];
  }
  if (objc_opt_respondsToSelector()) {
    *(void *)(v6 + 40) = [v7 resourceIndex];
  }
  if (objc_opt_respondsToSelector()) {
    *(_WORD *)(v6 + 64) = (unsigned __int16)[v7 resourceOptions];
  }
  id v8 = [v7 buffer];
  id v9 = [v7 heap];
  if (v9 && (objc_opt_respondsToSelector() & 1) != 0)
  {
    id v10 = [v9 gpuAddress];
LABEL_17:
    *(void *)(v6 + 80) = v10;
    goto LABEL_18;
  }
  if (objc_opt_respondsToSelector())
  {
    id v10 = [v8 parentGPUAddress];
    goto LABEL_17;
  }
LABEL_18:
  if (objc_opt_respondsToSelector()) {
    *(void *)(v6 + 72) = [v8 gpuAddress];
  }
  if (objc_opt_respondsToSelector()) {
    *(void *)(v6 + 88) = [v8 parentGPUSize];
  }
  if (objc_opt_respondsToSelector()) {
    *(void *)(v6 + 96) = [v8 length];
  }
  if (objc_opt_respondsToSelector()) {
    *(_WORD *)(v6 + 104) = (unsigned __int16)[v8 resourceOptions];
  }
  if (objc_opt_respondsToSelector()) {
    *(void *)(v6 + 56) = [v7 gpuResourceID];
  }

  id v5 = v11;
LABEL_29:
}

void TranslateGTMTLSamplerStateInfo(void *a1, uint64_t a2, int a3)
{
  id v5 = a1;
  uint64_t v6 = *(void **)(a2 + 64);
  *(void *)(a2 + 64) = v6 + 3;
  if (a3)
  {
    void *v6 = 0;
    v6[1] = 0;
    v6[2] = 0;
    id v8 = v5;
    id v7 = v5;
    if (objc_opt_respondsToSelector()) {
      void *v6 = [v7 uniqueIdentifier];
    }
    if (objc_opt_respondsToSelector()) {
      v6[2] = [v7 resourceIndex];
    }
    if (objc_opt_respondsToSelector()) {
      v6[1] = [v7 gpuResourceID];
    }

    id v5 = v8;
  }
}

void TranslateGTMTLLibraryInfo(void *a1, uint64_t a2, int a3, const char *a4)
{
  id v28 = a1;
  id v7 = *(char ***)(a2 + 48);
  *(void *)(a2 + 48) = v7 + 3;
  if (objc_opt_respondsToSelector())
  {
    id v8 = [v28 libraryIdentifier];
    id v9 = [v8 UUIDString];
    id v10 = [v9 UTF8String];
    id v11 = [v28 libraryIdentifier];
    id v12 = [v11 UUIDString];
    if ([v12 UTF8String])
    {
      __src = v10;
      int v27 = v8;
      unint64_t v13 = [v28 libraryIdentifier];
      [v13 UUIDString];
      int v14 = a3;
      id v15 = objc_claimAutoreleasedReturnValue();
      size_t v16 = strlen((const char *)[v15 UTF8String]);
      size_t v17 = v16 + 1;
      if (v16 == -1) {
        unint64_t v18 = 0;
      }
      else {
        unint64_t v18 = *(void **)(a2 + 184);
      }
      *(void *)(a2 + 184) += v17;
      if (v14) {
        memcpy(v18, __src, v17);
      }

      a3 = v14;
      id v8 = v27;
    }
    else
    {
      unint64_t v18 = 0;
    }

    if (!a4) {
      goto LABEL_14;
    }
  }
  else
  {
    unint64_t v18 = 0;
    if (!a4)
    {
LABEL_14:
      size_t v24 = 0;
      int v25 = *(char **)(a2 + 184);
      int v21 = (void *)(a2 + 184);
      int v20 = v25;
      goto LABEL_15;
    }
  }
  size_t v19 = strlen(a4);
  int v22 = *(char **)(a2 + 184);
  int v21 = (void *)(a2 + 184);
  int v20 = v22;
  BOOL v23 = v22;
  size_t v24 = v19 + 1;
  if (v19 == -1) {
LABEL_15:
  }
    BOOL v23 = 0;
  *int v21 = &v20[v24];
  if (a3)
  {
    memcpy(v23, a4, v24);
    v7[1] = 0;
    v7[2] = 0;
    *id v7 = 0;
    if (objc_opt_respondsToSelector()) {
      *((unsigned char *)v7 + 16) = [v28 type];
    }
    *id v7 = v23;
    v7[1] = (char *)v18;
  }
}

void TranslateGTMTLPipelineLibraryInfo(void *a1, void *a2, int a3, const char *a4)
{
  id v6 = a1;
  __int16 v69 = 0;
  int v68 = 0;
  if (!a4)
  {
    id obj = 0;
    size_t v11 = 0;
    id v8 = a2 + 23;
    id v9 = (char *)a2[23];
    goto LABEL_5;
  }
  size_t v7 = strlen(a4);
  id v8 = a2 + 23;
  id v9 = (char *)a2[23];
  id obj = a4;
  id v10 = v9;
  size_t v11 = v7 + 1;
  if (v7 == -1) {
LABEL_5:
  }
    id v10 = 0;
  void *v8 = &v9[v11];
  if (a3) {
    memcpy(v10, a4, v11);
  }
  size_t v49 = v10;
  id v58 = objc_alloc_init((Class)NSMutableArray);
  size_t v50 = v6;
  if (objc_opt_respondsToSelector())
  {
    id v12 = [v6 metallibPaths];
    long long v64 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    id v13 = [v12 countByEnumeratingWithState:&v64 objects:v75 count:16];
    if (v13)
    {
      id v14 = v13;
      uint64_t v15 = *(void *)v65;
      uint64_t v56 = *(void *)v65;
      do
      {
        for (uint64_t i = 0; i != v14; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v65 != v15) {
            objc_enumerationMutation(v12);
          }
          size_t v17 = *(void **)(*((void *)&v64 + 1) + 8 * i);
          unint64_t v18 = +[NSString stringWithUTF8String:a4];
          size_t v19 = [v18 stringByDeletingLastPathComponent];

          int v20 = [v17 stringByDeletingLastPathComponent];
          if ([v19 isEqualToString:v20])
          {
            [v58 addObject:v17];
          }
          else if (s_logUsingOsLog)
          {
            int v21 = gt_default_log();
            if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
            {
              id v25 = [v17 UTF8String];
              *(_DWORD *)buf = 136315394;
              uint64_t v72 = obj;
              __int16 v73 = 2080;
              id v74 = v25;
              _os_log_error_impl(&def_CFBEC, v21, OS_LOG_TYPE_ERROR, "warning: .pipelinelib %s and .metallib %s must be in the same directory", buf, 0x16u);
            }
          }
          else
          {
            int v22 = __stderrp;
            BOOL v23 = v12;
            +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"warning: .pipelinelib %s and .metallib %s must be in the same directory", a4, [v17 UTF8String]);
            id v24 = objc_claimAutoreleasedReturnValue();
            fprintf(v22, "%s\n", (const char *)[v24 UTF8String]);

            id v12 = v23;
            uint64_t v15 = v56;
          }
        }
        id v14 = [v12 countByEnumeratingWithState:&v64 objects:v75 count:16];
      }
      while (v14);
    }
  }
  unsigned __int16 v26 = (unsigned __int16)[v58 count];
  uint64_t v27 = a2[22];
  unsigned __int16 v48 = v26;
  a2[22] = v27 + 8 * v26 + 8 * v26;
  long long v60 = 0u;
  long long v61 = 0u;
  if (v26) {
    uint64_t v28 = v27;
  }
  else {
    uint64_t v28 = 0;
  }
  if (v26) {
    uint64_t v29 = v27 + 8 * v26;
  }
  else {
    uint64_t v29 = 0;
  }
  uint64_t v51 = v28;
  uint64_t v52 = v29;
  long long v62 = 0uLL;
  long long v63 = 0uLL;
  id obja = v58;
  int v30 = a3;
  id v59 = [obja countByEnumeratingWithState:&v60 objects:v70 count:16];
  if (v59)
  {
    int v31 = 0;
    uint64_t v57 = *(void *)v61;
    do
    {
      for (j = 0; j != v59; j = (char *)j + 1)
      {
        if (*(void *)v61 != v57) {
          objc_enumerationMutation(obja);
        }
        id v33 = *(id *)(*((void *)&v60 + 1) + 8 * (void)j);
        id v34 = [v33 UTF8String];
        id v35 = v33;
        if (![v35 UTF8String])
        {
          size_t v39 = 0;
          uint64_t v37 = (char *)a2[23];
LABEL_39:
          __int16 v38 = 0;
          goto LABEL_40;
        }
        size_t v36 = strlen((const char *)[v35 UTF8String]);
        uint64_t v37 = (char *)a2[23];
        __int16 v38 = v37;
        size_t v39 = v36 + 1;
        if (v36 == -1) {
          goto LABEL_39;
        }
LABEL_40:
        a2[23] = &v37[v39];
        if (v30) {
          memcpy(v38, v34, v39);
        }
        id v40 = [v35 lastPathComponent];
        id v41 = [v40 UTF8String];
        id v42 = [v35 lastPathComponent];
        if ([v42 UTF8String])
        {
          id v43 = [v35 lastPathComponent];
          size_t v44 = strlen((const char *)[v43 UTF8String]);
          size_t v45 = v44 + 1;
          if (v44 == -1) {
            long long v46 = 0;
          }
          else {
            long long v46 = (void *)a2[23];
          }
          a2[23] += v45;
          if (v30) {
            memcpy(v46, v41, v45);
          }

          int v30 = a3;
        }
        else
        {
          long long v46 = 0;
        }

        if (v30)
        {
          *(void *)(v51 + 8 * v31) = v38;
          *(void *)(v52 + 8 * v31++) = v46;
        }
      }
      id v59 = [obja countByEnumeratingWithState:&v60 objects:v70 count:16];
    }
    while (v59);
  }

  if (v30)
  {
    uint64_t v47 = a2[7];
    *(void *)uint64_t v47 = v49;
    *(void *)(v47 + 8) = v51;
    *(void *)(v47 + 16) = v52;
    *(_WORD *)(v47 + 24) = v48;
    *(_DWORD *)(v47 + 26) = v68;
    *(_WORD *)(v47 + 30) = v69;
  }
  a2[7] += 32;
}

id DEVICEOBJECT(id a1)
{
  while ((objc_opt_respondsToSelector() & 1) != 0)
    a1 = [a1 performSelector:"baseObject"];

  return a1;
}

void CaptureInit()
{
  if (CaptureInterposerInit_onceToken != -1) {
    dispatch_once(&CaptureInterposerInit_onceToken, &__block_literal_global_56);
  }
}

void CaptureExit()
{
  apr_pool_destroy(*(apr_pool_t **)(boundaryTrackerInstance + 8));
  boundaryTrackerInstance = 0;
  uint64_t v0 = g_ctx;
  id v1 = *(void **)(g_ctx + 112);

  GTTraceContext_closeStream(v0, v1);
}

void CaptureInterposerInit()
{
  if (CaptureInterposerInit_onceToken != -1) {
    dispatch_once(&CaptureInterposerInit_onceToken, &__block_literal_global_56);
  }
}

void *GTHarvesterInitMetadata(void *a1, __int16 a2, size_t a3)
{
  int v3 = a3;
  bzero(a1, a3);
  *a1 = 0x63617074757265;
  *((_WORD *)a1 + 4) = 2;
  *((_WORD *)a1 + 5) = a2;
  *((_DWORD *)a1 + 3) = v3;
  return a1;
}

uint64_t GTHarvesterGetMetadataSize(uint64_t result)
{
  if (result)
  {
    if (*(_WORD *)(result + 8) == 1) {
      return *(int *)(result + 12) + 16;
    }
    else {
      return *(int *)(result + 12);
    }
  }
  return result;
}

void *GTHarvesterGetMetadata(void *a1, unint64_t a2)
{
  uint64_t result = 0;
  if (a1 && a2 >= 0x10)
  {
    if (*a1 == 0x63617074757265) {
      return a1;
    }
    else {
      return 0;
    }
  }
  return result;
}

unint64_t GTHarvesterGetDataSize(uint64_t a1, unint64_t a2)
{
  if (a1 && a2 >= 0x10 && *(void *)a1 == 0x63617074757265)
  {
    uint64_t v2 = *(int *)(a1 + 12);
    if (*(_WORD *)(a1 + 8) == 1) {
      v2 += 16;
    }
    a2 -= v2;
  }
  return a2;
}

uint64_t GTHarvesterGetData(uint64_t result, unint64_t a2)
{
  if (result && a2 >= 0x10 && *(void *)result == 0x63617074757265)
  {
    uint64_t v2 = *(int *)(result + 12);
    if (*(_WORD *)(result + 8) == 1) {
      v2 += 16;
    }
    result += v2;
  }
  return result;
}

unint64_t GTHarvesterGetTextureMetadataRequiredSize(uint64_t a1)
{
  return (48 * a1 + 279) & 0xFFFFFFFFFFFFFF00;
}

uint64_t GTHarvesterGetTexturePlaneCount(uint64_t result)
{
  if (result)
  {
    if (*(_WORD *)(result + 10) == 1) {
      return *(void *)(result + 16);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t GTHarvesterGetTexturePlane(uint64_t result, unint64_t a2)
{
  if (result)
  {
    if (*(_WORD *)(result + 10) == 1)
    {
      if (*(void *)(result + 16) >= a2) {
        result += 48 * a2 + 24;
      }
      else {
        return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

__n128 GTHarvesterAddTexturePlane(uint64_t a1, long long *a2)
{
  uint64_t v2 = a1 + 48 * *(void *)(a1 + 16);
  long long v4 = *a2;
  __n128 result = (__n128)a2[1];
  *(_OWORD *)(v2 + 56) = a2[2];
  *(_OWORD *)(v2 + 24) = v4;
  *(__n128 *)(v2 + 40) = result;
  ++*(void *)(a1 + 16);
  return result;
}

void GTTraceStore_buildDebugContext(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  if (a3)
  {
    int v3 = a2;
    id v5 = (unsigned int *)((char *)a2 + a3);
    id v6 = (uint64_t *)(a1 + 8);
    do
    {
      int v7 = *((unsigned __int8 *)v3 + 8);
      id v8 = (void *)(a1 + 24 * *((unsigned __int8 *)v3 + 8));
      uint64_t v9 = v8[5];
      ++v8[4];
      uint64_t v10 = atomic_load(v3 + 1);
      uint64_t v11 = v8[6];
      v8[5] = v9 + v10;
      v8[6] = v11 + *v3;
      id v12 = (uint64_t *)a1;
      if (v7 == 1) {
        goto LABEL_6;
      }
      if (v7 == 3)
      {
        size_t v17 = *(apr_hash_t **)(a1 + 24);
        uint64_t v18 = atomic_load(v3 + 1);
        if (v18 != 64)
        {
          size_t v19 = v3 + 16;
          int v20 = (unsigned int *)((char *)v3 + v18);
          do
          {
            apr_hash_set(v17, v19, 8, v19 + 2);
            size_t v19 = (unsigned int *)((char *)v19 + ((8 * *((void *)v19 + 1) + 23) & 0xFFFFFFFF8));
          }
          while (v19 != v20);
        }
        goto LABEL_18;
      }
      id v12 = v6;
      if (v7 == 2)
      {
LABEL_6:
        id v13 = (apr_hash_t *)*v12;
        uint64_t v14 = *find_entry(*v12, (unsigned char *)v3 + 16, 8uLL, 0);
        if (!v14) {
          goto LABEL_14;
        }
        for (uint64_t i = *(void *)(v14 + 32); (unsigned int *)i != v3 && i != 0; uint64_t i = *(void *)(i + 40))
          ;
        if (!i) {
LABEL_14:
        }
          apr_hash_set(v13, v3 + 4, 8, v3);
      }
LABEL_18:
      int v3 = (unsigned int *)((char *)v3 + *v3);
    }
    while (v3 != v5);
  }
}

unint64_t GTTraceStoreDebugDescription()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  int v3 = (const char *)v0;
  if (!GTCoreLogTagEnabled(1uLL)) {
    return 0;
  }
  if (s_logUsingOsLog)
  {
    long long v4 = gt_tagged_log(1uLL);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      *(void *)v191 = v3;
      _os_log_impl(&def_CFBEC, v4, OS_LOG_TYPE_INFO, "Trace store at %s:", buf, 0xCu);
    }
  }
  else
  {
    fprintf(__stdoutp, "Trace store at %s:\n", v3);
  }
  newpool = 0;
  apr_pool_create_ex(&newpool, 0, 0, 0);
  long long v176 = 0u;
  long long v175 = 0u;
  long long v174 = 0u;
  long long v173 = 0u;
  long long v172 = 0u;
  long long v171 = 0u;
  id v6 = newpool;
  int v7 = apr_hash_make(newpool);
  v167 = v7;
  int v168 = apr_hash_make(v6);
  ht = apr_hash_make(v6);
  BOOL v170 = apr_hash_make(v6);
  setlocale(0, "");
  uint64_t v161 = (pthread_mutex_t *)(v2 + 66);
  pthread_mutex_lock((pthread_mutex_t *)(v2 + 66));
  if (*v2 >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    do
    {
      GTTraceStore_buildDebugContext((uint64_t)&v167, *(unsigned int **)(*((void *)v2 + 1) + v8), *(void *)(*((void *)v2 + 1) + v8 + 8));
      ++v9;
      v8 += 16;
    }
    while (v9 < *v2);
    int v7 = v167;
  }
  *((void *)v7 + 2) = v7;
  *((void *)v7 + 3) = 0;
  *((void *)v7 + 4) = 0;
  *((_DWORD *)v7 + 10) = 0;
  uint64_t v10 = apr_hash_next((apr_hash_t *)((char *)v7 + 16));
  if (v10)
  {
    uint64_t v11 = v10;
    id v12 = ht;
    do
    {
      for (uint64_t i = *(void *)(*((void *)v11 + 1) + 32); i; uint64_t i = *(void *)(i + 40))
      {
        unsigned int v14 = atomic_load((unsigned int *)(i + 4));
        if (v14 >= 0x80)
        {
          uint64_t v15 = (char *)(i + 64);
          uint64_t v16 = (int)((v14 >> 6) - 1);
          do
          {
            apr_hash_set(v12, v15, 8, v15);
            v15 += 64;
            --v16;
          }
          while (v16);
        }
      }
      uint64_t v11 = apr_hash_next(v11);
    }
    while (v11);
  }
  if (s_logUsingOsLog)
  {
    size_t v17 = gt_tagged_log(1uLL);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&def_CFBEC, v17, OS_LOG_TYPE_INFO, "[SUMMARY]", buf, 2u);
    }
  }
  else
  {
    fwrite("[SUMMARY]\n", 0xAuLL, 1uLL, __stdoutp);
  }
  int64x2_t v18 = 0uLL;
  uint64_t v19 = 32;
  int64x2_t v20 = 0uLL;
  int64x2_t v21 = 0uLL;
  do
  {
    int v22 = (const double *)((char *)&v167 + v19);
    v19 += 48;
    float64x2x3_t v227 = vld3q_f64(v22);
    int64x2_t v21 = vaddq_s64((int64x2_t)v227.val[0], v21);
    int64x2_t v20 = vaddq_s64((int64x2_t)v227.val[1], v20);
    int64x2_t v18 = vaddq_s64((int64x2_t)v227.val[2], v18);
  }
  while (v19 != 128);
  int64x2_t v164 = v20;
  uint64_t v23 = 0;
  uint64_t v163 = vaddvq_s64(v21);
  unint64_t v162 = vaddvq_s64(v18);
  double v24 = (double)v162;
  id v25 = (unint64_t *)&v172;
  do
  {
    if (s_logUsingOsLog)
    {
      unsigned __int16 v26 = gt_tagged_log(1uLL);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
      {
        uint64_t v28 = *(v25 - 2);
        unint64_t v27 = *(v25 - 1);
        unint64_t v29 = *v25;
        double v30 = (double)*v25 * 100.0;
        int v31 = (&off_2215A0)[v23];
        *(_DWORD *)buf = 67110658;
        *(_DWORD *)v191 = v23;
        *(_WORD *)&v191[4] = 2048;
        *(void *)&v191[6] = v27;
        *(_WORD *)&v191[14] = 2048;
        *(void *)&v191[16] = v29;
        *(_WORD *)&v191[24] = 2048;
        *(double *)&v191[26] = (double)v27 * 100.0 / v24;
        *(_WORD *)&v191[34] = 2048;
        *(double *)&v191[36] = v30 / v24;
        *(_WORD *)&v191[44] = 2048;
        *(void *)&v191[46] = v28;
        __int16 v192 = 2080;
        v193 = v31;
        _os_log_impl(&def_CFBEC, v26, OS_LOG_TYPE_INFO, "%d:\t%'zub / %'zub\t|\t%.1f%% / %.1f%%\t|\t(%'zu)\t|\t%s", buf, 0x44u);
      }
    }
    else
    {
      fprintf(__stdoutp, "%d:\t%'zub / %'zub\t|\t%.1f%% / %.1f%%\t|\t(%'zu)\t|\t%s\n", v23, *(v25 - 1), *v25, (double)*(v25 - 1) * 100.0 / v24, (double)*v25 * 100.0 / v24, *(v25 - 2), (&off_2215A0)[v23]);
    }
    ++v23;
    v25 += 3;
  }
  while (v23 != 4);
  unint64_t v32 = vaddvq_s64(v164);
  if (s_logUsingOsLog)
  {
    id v33 = gt_tagged_log(1uLL);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134219008;
      *(void *)v191 = v32;
      *(_WORD *)&v191[8] = 2048;
      *(void *)&v191[10] = v162;
      *(_WORD *)&v191[18] = 2048;
      *(double *)&v191[20] = (double)v32 * 100.0 / v24;
      *(_WORD *)&v191[28] = 2048;
      *(double *)&v191[30] = v24 * 100.0 / v24;
      *(_WORD *)&v191[38] = 2048;
      *(void *)&v191[40] = v163;
      _os_log_impl(&def_CFBEC, v33, OS_LOG_TYPE_INFO, "=\t%'zub / %'zub\t|\t%.1f%% / %.1f%%\t|\t(%'zu)\t|\tTOTAL", buf, 0x34u);
    }
  }
  else
  {
    fprintf(__stdoutp, "=\t%'zub / %'zub\t|\t%.1f%% / %.1f%%\t|\t(%'zu)\t|\tTOTAL\n", v32, v162, (double)v32 * 100.0 / v24, v24 * 100.0 / v24, v163);
  }
  unint64_t v34 = *((void *)&v173 + 1);
  id v35 = newpool;
  unint64_t v160 = v32;
  if (s_logUsingOsLog)
  {
    size_t v36 = gt_tagged_log(1uLL);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&def_CFBEC, v36, OS_LOG_TYPE_INFO, "[STREAMS BY FENUM]", buf, 2u);
    }
  }
  else
  {
    fwrite("[STREAMS BY FENUM]\n", 0x13uLL, 1uLL, __stdoutp);
  }
  uint64_t v37 = 0;
  unsigned int v38 = *((_DWORD *)v7 + 12);
  long long v226 = 0u;
  unsigned int v39 = v38;
  long long v225 = 0u;
  long long v224 = 0u;
  long long v223 = 0u;
  long long v222 = 0u;
  long long v221 = 0u;
  long long v220 = 0u;
  long long v219 = 0u;
  long long v218 = 0u;
  long long v217 = 0u;
  long long v216 = 0u;
  long long v215 = 0u;
  long long v214 = 0u;
  long long v213 = 0u;
  long long v212 = 0u;
  long long v211 = 0u;
  long long v210 = 0u;
  long long v209 = 0u;
  long long v208 = 0u;
  long long v207 = 0u;
  long long v206 = 0u;
  long long v205 = 0u;
  long long v204 = 0u;
  long long v203 = 0u;
  long long v202 = 0u;
  long long v201 = 0u;
  long long v200 = 0u;
  long long v199 = 0u;
  long long v198 = 0u;
  long long v197 = 0u;
  long long v196 = 0u;
  long long v195 = 0u;
  do
  {
    *(void *)((char *)&v195 + v37) = apr_array_make(v35, v39 / 0x57, 8);
    v37 += 8;
  }
  while (v37 != 696);
  bzero(buf, 0x828uLL);
  *((void *)v7 + 2) = v7;
  *((void *)v7 + 3) = 0;
  *((void *)v7 + 4) = 0;
  *((_DWORD *)v7 + 10) = 0;
  id v40 = apr_hash_next((apr_hash_t *)((char *)v7 + 16));
  if (v40)
  {
    id v41 = v40;
    do
    {
      uint64_t v42 = *(void *)(*((void *)v41 + 1) + 32);
      unsigned int v43 = atomic_load((unsigned int *)(v42 + 4));
      if ((v43 & 0xFFFFFFC0) != 0x40)
      {
        unsigned int FuncEnumConstructorType = GetFuncEnumConstructorType(*(_DWORD *)(v42 + 72));
        *(void *)apr_array_push(*((apr_array_header_t **)&v195 + FuncEnumConstructorType)) = v42;
      }
      id v41 = apr_hash_next(v41);
    }
    while (v41);
  }
  for (uint64_t j = 0; j != 87; ++j)
  {
    uint64_t v46 = *((void *)&v195 + j);
    int v47 = *(_DWORD *)(v46 + 12);
    if (v47 >= 1)
    {
      uint64_t v48 = 0;
      size_t v49 = &buf[24 * j];
      do
      {
        size_t v50 = *(unsigned int **)(*(void *)(v46 + 24) + 8 * v48);
        if (v50)
        {
          do
          {
            uint64_t v51 = atomic_load(v50 + 1);
            *((void *)v49 + 1) += v51;
            *((void *)v49 + 2) += *v50;
            size_t v50 = (unsigned int *)*((void *)v50 + 5);
          }
          while (v50);
          int v47 = *(_DWORD *)(v46 + 12);
        }
        ++*(void *)v49;
        ++v48;
      }
      while (v48 < v47);
    }
    uint64_t v52 = &__base[j];
    *((_DWORD *)v52 + 2) = j;
    *(void *)uint64_t v52 = *(void *)&v191[24 * j + 12];
  }
  qsort(__base, 0x57uLL, 0x10uLL, (int (__cdecl *)(const void *, const void *))CompareKeyValuePair);
  unsigned __int8 v53 = apr_array_make(v35, 32, 16);
  char v54 = apr_hash_make(v35);
  uint64_t v55 = 0;
  double v56 = (double)v34;
  do
  {
    int v57 = DWORD2(__base[v55]);
    id v58 = &buf[24 * v57];
    uint64_t v165 = v55;
    if (s_logUsingOsLog)
    {
      id v59 = gt_tagged_log(1uLL);
      if (os_log_type_enabled(v59, OS_LOG_TYPE_INFO))
      {
        long long v60 = "Unknown";
        if ((v57 - 1) <= 0x55) {
          long long v60 = off_222318[v57 - 1];
        }
        long long v61 = &buf[24 * v57];
        unint64_t v63 = *((void *)v61 + 1);
        double v62 = *((double *)v61 + 2);
        uint64_t v64 = *(void *)v58;
        *(_DWORD *)int v178 = 67110658;
        int v179 = v57;
        __int16 v180 = 2048;
        unint64_t v181 = v63;
        __int16 v182 = 2048;
        double v183 = v62;
        __int16 v184 = 2048;
        *(double *)v185 = (double)v63 * 100.0 / v56;
        *(_WORD *)&v185[8] = 2048;
        *(double *)&v185[10] = (double)*(unint64_t *)&v62 * 100.0 / v56;
        __int16 v186 = 2048;
        uint64_t v187 = v64;
        __int16 v188 = 2080;
        uint64_t v189 = v60;
        _os_log_impl(&def_CFBEC, v59, OS_LOG_TYPE_INFO, "%d:\t%'zub / %'zub\t|\t%.1f%% / %.1f%%\t|\t(%'zu)\t|\t%s", v178, 0x44u);
      }
    }
    else
    {
      long long v65 = "Unknown";
      if ((v57 - 1) <= 0x55) {
        long long v65 = off_222318[v57 - 1];
      }
      fprintf(__stdoutp, "%d:\t%'zub / %'zub\t|\t%.1f%% / %.1f%%\t|\t(%'zu)\t|\t%s\n", v57, *(void *)&v191[24 * v57 + 4], *(void *)&v191[24 * v57 + 12], (double)*(unint64_t *)&v191[24 * v57 + 4] * 100.0 / v56, (double)*(unint64_t *)&v191[24 * v57 + 12] * 100.0 / v56, *(void *)v58, v65);
    }
    apr_hash_clear(v54);
    uint64_t v66 = *((void *)&v195 + v57);
    int v67 = *(_DWORD *)(v66 + 12);
    if (v67 >= 1)
    {
      for (uint64_t k = 0; k < v67; ++k)
      {
        uint64_t v69 = *(void *)(*(void *)(v66 + 24) + 8 * k);
        if (v69)
        {
          uint64_t v70 = *(apr_pool_t **)v54;
          do
          {
            unsigned int v71 = atomic_load((unsigned int *)(v69 + 4));
            if (v71 >= 0x80)
            {
              uint64_t v72 = (int)((v71 >> 6) - 1);
              __int16 v73 = (unsigned char *)(v69 + 72);
              do
              {
                uint64_t v74 = *find_entry((uint64_t)v54, v73, 4uLL, 0);
                if (!v74 || (unsigned __int8 v75 = *(void **)(v74 + 32)) == 0)
                {
                  unsigned __int8 v76 = apr_palloc(v70, 0x10uLL);
                  unsigned __int8 v75 = v76;
                  if (v76)
                  {
                    *unsigned __int8 v76 = 0;
                    v76[1] = 0;
                  }
                  *((_DWORD *)v76 + 2) = *(_DWORD *)v73;
                  apr_hash_set(v54, v76 + 1, 4, v76);
                }
                *v75 += 64;
                ++*((_DWORD *)v75 + 3);
                v73 += 64;
                --v72;
              }
              while (v72);
            }
            uint64_t v69 = *(void *)(v69 + 40);
          }
          while (v69);
          int v67 = *(_DWORD *)(v66 + 12);
        }
      }
    }
    v53->int nelts = 0;
    *((void *)v54 + 2) = v54;
    *((void *)v54 + 3) = 0;
    *((void *)v54 + 4) = 0;
    *((_DWORD *)v54 + 10) = 0;
    for (m = (apr_hash_t *)((char *)v54 + 16); ; m = v78)
    {
      unsigned __int16 v78 = apr_hash_next(m);
      if (!v78) {
        break;
      }
      *(_OWORD *)apr_array_push(v53) = *(_OWORD *)*(void *)(*((void *)v78 + 1) + 32);
    }
    qsort(v53->elts, v53->nelts, v53->elt_size, (int (__cdecl *)(const void *, const void *))CompareKeyValuePair);
    if (v53->nelts >= 1)
    {
      uint64_t v79 = 0;
      uint64_t v80 = 0;
      do
      {
        id v81 = &v53->elts[v79];
        unint64_t v82 = *(void *)v81;
        int v84 = *((_DWORD *)v81 + 2);
        int v83 = *((_DWORD *)v81 + 3);
        if (s_logUsingOsLog)
        {
          uint64_t v85 = gt_tagged_log(1uLL);
          if (os_log_type_enabled(v85, OS_LOG_TYPE_INFO))
          {
            FuncEnumAsString = GetFuncEnumAsString(v84);
            *(_DWORD *)int v178 = 67110146;
            int v179 = v84;
            __int16 v180 = 2048;
            unint64_t v181 = v82;
            __int16 v182 = 2048;
            double v183 = (double)v82 * 100.0 / v56;
            __int16 v184 = 1024;
            *(_DWORD *)v185 = v83;
            *(_WORD *)&v185[4] = 2080;
            *(void *)&v185[6] = FuncEnumAsString;
            _os_log_impl(&def_CFBEC, v85, OS_LOG_TYPE_INFO, "*\t0x%x:\t%'zub\t|\t%.1f%%\t|\t(%'u)\t|\t%s", v178, 0x2Cu);
          }
        }
        else
        {
          uint64_t v87 = __stdoutp;
          unsigned int v88 = GetFuncEnumAsString(v84);
          fprintf(v87, "*\t0x%x:\t%'zub\t|\t%.1f%%\t|\t(%'u)\t|\t%s\n", v84, v82, (double)v82 * 100.0 / v56, v83, v88);
        }
        ++v80;
        int nelts = v53->nelts;
        if (nelts >= 5) {
          int nelts = 5;
        }
        v79 += 16;
      }
      while (v80 < nelts);
    }
    uint64_t v55 = v165 + 1;
  }
  while (v165 != 4);
  unint64_t v90 = v175;
  long long v91 = newpool;
  if (s_logUsingOsLog)
  {
    long long v92 = gt_tagged_log(1uLL);
    if (os_log_type_enabled(v92, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&def_CFBEC, v92, OS_LOG_TYPE_INFO, "[MEMORY BY FENUM]", buf, 2u);
    }
  }
  else
  {
    fwrite("[MEMORY BY FENUM]\n", 0x12uLL, 1uLL, __stdoutp);
  }
  uint64_t v93 = 0;
  long long v94 = v168;
  unsigned int v95 = *((_DWORD *)v168 + 12) / 0x57u;
  long long v226 = 0u;
  long long v225 = 0u;
  long long v224 = 0u;
  long long v223 = 0u;
  long long v222 = 0u;
  long long v221 = 0u;
  long long v220 = 0u;
  long long v219 = 0u;
  long long v218 = 0u;
  long long v217 = 0u;
  long long v216 = 0u;
  long long v215 = 0u;
  long long v214 = 0u;
  long long v213 = 0u;
  long long v212 = 0u;
  long long v211 = 0u;
  long long v210 = 0u;
  long long v209 = 0u;
  long long v208 = 0u;
  long long v207 = 0u;
  long long v206 = 0u;
  long long v205 = 0u;
  long long v204 = 0u;
  long long v203 = 0u;
  long long v202 = 0u;
  long long v201 = 0u;
  long long v200 = 0u;
  long long v199 = 0u;
  long long v198 = 0u;
  long long v197 = 0u;
  long long v196 = 0u;
  long long v195 = 0u;
  do
  {
    *(void *)((char *)&v195 + v93) = apr_array_make(v91, v95, 8);
    v93 += 8;
  }
  while (v93 != 696);
  bzero(buf, 0x828uLL);
  *((void *)v94 + 3) = 0;
  *((void *)v94 + 4) = 0;
  *((void *)v94 + 2) = v94;
  *((_DWORD *)v94 + 10) = 0;
  long long v96 = apr_hash_next((apr_hash_t *)((char *)v94 + 16));
  if (v96)
  {
    long long v97 = v96;
    uint64_t v98 = (apr_array_header_t *)v195;
    uint64_t v99 = (uint64_t)v167;
    while (1)
    {
      uint64_t v100 = *(void *)(*((void *)v97 + 1) + 32);
      uint64_t v101 = *find_entry(v99, (unsigned char *)(v100 + 16), 8uLL, 0);
      uint64_t v102 = v98;
      if (!v101) {
        goto LABEL_103;
      }
      uint64_t v103 = *(void *)(v101 + 32);
      uint64_t v102 = v98;
      if (!v103) {
        goto LABEL_103;
      }
      unsigned int v104 = atomic_load((unsigned int *)(v103 + 4));
      if ((v104 & 0xFFFFFFC0) != 0x40) {
        break;
      }
LABEL_104:
      long long v97 = apr_hash_next(v97);
      if (!v97) {
        goto LABEL_105;
      }
    }
    uint64_t v102 = (apr_array_header_t *)*((void *)&v195 + GetFuncEnumConstructorType(*(_DWORD *)(v103 + 72)));
LABEL_103:
    *(void *)apr_array_push(v102) = v100;
    goto LABEL_104;
  }
LABEL_105:
  for (uint64_t n = 0; n != 87; ++n)
  {
    uint64_t v106 = *((void *)&v195 + n);
    int v107 = *(_DWORD *)(v106 + 12);
    if (v107 >= 1)
    {
      uint64_t v108 = 0;
      v109 = &buf[24 * n];
      do
      {
        v110 = *(unsigned int **)(*(void *)(v106 + 24) + 8 * v108);
        if (v110)
        {
          do
          {
            uint64_t v111 = atomic_load(v110 + 1);
            *((void *)v109 + 1) += v111;
            *((void *)v109 + 2) += *v110;
            v110 = (unsigned int *)*((void *)v110 + 5);
          }
          while (v110);
          int v107 = *(_DWORD *)(v106 + 12);
        }
        ++*(void *)v109;
        ++v108;
      }
      while (v108 < v107);
    }
    uint64_t v112 = &__base[n];
    *((_DWORD *)v112 + 2) = n;
    *(void *)uint64_t v112 = *(void *)&v191[24 * n + 12];
  }
  qsort(__base, 0x57uLL, 0x10uLL, (int (__cdecl *)(const void *, const void *))CompareKeyValuePair);
  uint64_t v113 = apr_array_make(v91, 32, 16);
  BOOL v114 = apr_hash_make(v91);
  v115 = apr_hash_make(v91);
  uint64_t v116 = 0;
  double v117 = (double)v90;
  do
  {
    int v118 = DWORD2(__base[v116]);
    v119 = &buf[24 * v118];
    uint64_t v166 = v116;
    if (s_logUsingOsLog)
    {
      v120 = gt_tagged_log(1uLL);
      if (os_log_type_enabled(v120, OS_LOG_TYPE_INFO))
      {
        uint64_t v121 = "Unknown";
        if ((v118 - 1) <= 0x55) {
          uint64_t v121 = off_222318[v118 - 1];
        }
        uint64_t v122 = &buf[24 * v118];
        unint64_t v124 = *((void *)v122 + 1);
        double v123 = *((double *)v122 + 2);
        uint64_t v125 = *(void *)v119;
        *(_DWORD *)int v178 = 67110658;
        int v179 = v118;
        __int16 v180 = 2048;
        unint64_t v181 = v124;
        __int16 v182 = 2048;
        double v183 = v123;
        __int16 v184 = 2048;
        *(double *)v185 = (double)v124 * 100.0 / v117;
        *(_WORD *)&v185[8] = 2048;
        *(double *)&v185[10] = (double)*(unint64_t *)&v123 * 100.0 / v117;
        __int16 v186 = 2048;
        uint64_t v187 = v125;
        __int16 v188 = 2080;
        uint64_t v189 = v121;
        _os_log_impl(&def_CFBEC, v120, OS_LOG_TYPE_INFO, "%d:\t%'zub / %'zub\t|\t%.1f%% / %.1f%%\t|\t(%'zu)\t|\t%s", v178, 0x44u);
      }
    }
    else
    {
      v126 = "Unknown";
      if ((v118 - 1) <= 0x55) {
        v126 = off_222318[v118 - 1];
      }
      fprintf(__stdoutp, "%d:\t%'zub / %'zub\t|\t%.1f%% / %.1f%%\t|\t(%'zu)\t|\t%s\n", v118, *(void *)&v191[24 * v118 + 4], *(void *)&v191[24 * v118 + 12], (double)*(unint64_t *)&v191[24 * v118 + 4] * 100.0 / v117, (double)*(unint64_t *)&v191[24 * v118 + 12] * 100.0 / v117, *(void *)v119, v126);
    }
    apr_hash_clear(v114);
    apr_hash_clear(v115);
    uint64_t v127 = *((void *)&v195 + v118);
    int v128 = *(_DWORD *)(v127 + 12);
    if (v128 >= 1)
    {
      for (iuint64_t i = 0; ii < v128; ++ii)
      {
        uint64_t v130 = *(void *)(*(void *)(v127 + 24) + 8 * ii);
        if (v130)
        {
          do
          {
            unsigned int v131 = atomic_load((unsigned int *)(v130 + 4));
            int v132 = v131 - 64;
            if ((int)(v131 - 64) >= 1)
            {
              v133 = (_DWORD *)(v130 + 64);
              do
              {
                apr_hash_set(v115, v133, 9, v133);
                signed int v134 = (v133[3] + 23) & 0xFFFFFFF8;
                v133 = (_DWORD *)((char *)v133 + v134);
                BOOL v135 = __OFSUB__(v132, v134);
                v132 -= v134;
              }
              while (!((v132 < 0) ^ v135 | (v132 == 0)));
            }
            uint64_t v130 = *(void *)(v130 + 40);
          }
          while (v130);
          int v128 = *(_DWORD *)(v127 + 12);
        }
      }
    }
    v136 = ht;
    v137 = *(apr_pool_t **)v114;
    *((void *)v115 + 2) = v115;
    *((void *)v115 + 3) = 0;
    *((void *)v115 + 4) = 0;
    *((_DWORD *)v115 + 10) = 0;
    v138 = apr_hash_next((apr_hash_t *)((char *)v115 + 16));
    if (v138)
    {
      v139 = v138;
      do
      {
        uint64_t v140 = *(void *)(*((void *)v139 + 1) + 32);
        uint64_t v141 = *find_entry((uint64_t)v136, (unsigned char *)v140, 8uLL, 0);
        if (v141)
        {
          uint64_t v142 = *(void *)(v141 + 32);
          if (v142)
          {
            v143 = (_DWORD *)(v142 + 8);
            uint64_t v144 = *find_entry((uint64_t)v114, (unsigned char *)(v142 + 8), 4uLL, 0);
            if (!v144 || (v145 = *(void **)(v144 + 32)) == 0)
            {
              unint64_t v146 = apr_palloc(v137, 0x10uLL);
              v145 = v146;
              if (v146)
              {
                *unint64_t v146 = 0;
                v146[1] = 0;
              }
              *((_DWORD *)v146 + 2) = *v143;
              apr_hash_set(v114, v146 + 1, 4, v146);
            }
            *v145 += *(unsigned int *)(v140 + 12);
            ++*((_DWORD *)v145 + 3);
          }
        }
        v139 = apr_hash_next(v139);
      }
      while (v139);
    }
    v113->int nelts = 0;
    *((void *)v114 + 2) = v114;
    v147 = (apr_hash_t *)((char *)v114 + 16);
    *((void *)v114 + 3) = 0;
    *((void *)v114 + 4) = 0;
    *((_DWORD *)v114 + 10) = 0;
    while (1)
    {
      v148 = apr_hash_next(v147);
      if (!v148) {
        break;
      }
      *(_OWORD *)apr_array_push(v113) = *(_OWORD *)*(void *)(*((void *)v148 + 1) + 32);
      v147 = v148;
    }
    qsort(v113->elts, v113->nelts, v113->elt_size, (int (__cdecl *)(const void *, const void *))CompareKeyValuePair);
    if (v113->nelts >= 1)
    {
      uint64_t v149 = 0;
      uint64_t v150 = 0;
      do
      {
        v151 = &v113->elts[v149];
        unint64_t v152 = *(void *)v151;
        int v153 = *((_DWORD *)v151 + 2);
        int v154 = *((_DWORD *)v151 + 3);
        if (s_logUsingOsLog)
        {
          int v155 = gt_tagged_log(1uLL);
          if (os_log_type_enabled(v155, OS_LOG_TYPE_INFO))
          {
            BOOL v156 = GetFuncEnumAsString(v153);
            *(_DWORD *)int v178 = 67110146;
            int v179 = v153;
            __int16 v180 = 2048;
            unint64_t v181 = v152;
            __int16 v182 = 2048;
            double v183 = (double)v152 * 100.0 / v117;
            __int16 v184 = 1024;
            *(_DWORD *)v185 = v154;
            *(_WORD *)&v185[4] = 2080;
            *(void *)&v185[6] = v156;
            _os_log_impl(&def_CFBEC, v155, OS_LOG_TYPE_INFO, "*\t0x%x:\t%'zub\t|\t%.1f%%\t|\t(%'u)\t|\t%s", v178, 0x2Cu);
          }
        }
        else
        {
          uint64_t v157 = __stdoutp;
          v158 = GetFuncEnumAsString(v153);
          fprintf(v157, "*\t0x%x:\t%'zub\t|\t%.1f%%\t|\t(%'u)\t|\t%s\n", v153, v152, (double)v152 * 100.0 / v117, v154, v158);
        }
        ++v150;
        int v159 = v113->nelts;
        if (v159 >= 5) {
          int v159 = 5;
        }
        v149 += 16;
      }
      while (v150 < v159);
    }
    uint64_t v116 = v166 + 1;
  }
  while (v166 != 4);
  pthread_mutex_unlock(v161);
  apr_pool_destroy(newpool);
  return v160;
}

uint64_t CompareKeyValuePair(void *a1, void *a2)
{
  if (*a1 > *a2) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *a1 != *a2;
  }
}

uint64_t GTMTLCreateIndirectCommandEncoder(uint64_t result, uint64_t a2)
{
  *(void *)&long long v2 = -1;
  *((void *)&v2 + 1) = -1;
  *(_OWORD *)(result + 80) = v2;
  *(_OWORD *)(result + 96) = v2;
  *(_OWORD *)(result + 48) = v2;
  *(_OWORD *)(result + 64) = v2;
  *(_OWORD *)(result + 16) = v2;
  *(_OWORD *)(result + 32) = v2;
  *(void *)__n128 result = a2;
  *(void *)(result + 8) = 0;
  if (*(unsigned char *)(a2 + 11))
  {
    uint64_t v3 = 8;
  }
  else
  {
    *(void *)(result + 16) = 8;
    uint64_t v3 = 16;
  }
  if (!*(unsigned char *)(a2 + 10))
  {
    uint64_t v4 = *(unsigned __int8 *)(a2 + 18);
    *(void *)(result + 24) = v3;
    *(void *)(result + 32) = v3 + 8 * v4;
    uint64_t v5 = v4 + *(unsigned __int8 *)(a2 + 12);
    uint64_t v6 = v3 + 8 * v5;
    uint64_t v7 = v5 + *(unsigned __int8 *)(a2 + 16);
    *(void *)(result + 40) = v6;
    *(void *)(result + 48) = v3 + 8 * v7;
    uint64_t v8 = v7 + *(unsigned __int8 *)(a2 + 15);
    *(void *)(result + 56) = v3 + 8 * v8;
    v3 += 8 * (v8 + *(unsigned __int8 *)(a2 + 13));
  }
  uint64_t v9 = *(unsigned __int8 *)(a2 + 17);
  *(void *)(result + 64) = v3;
  *(void *)(result + 72) = v3 + 8 * v9;
  uint64_t v10 = v9 + *(unsigned __int8 *)(a2 + 14);
  uint64_t v11 = v3 + 8 * v10;
  uint64_t v12 = *(unsigned __int16 *)(a2 + 8);
  *(void *)(result + 80) = v11;
  if (*(unsigned char *)(a2 + 19))
  {
    if ((v12 & 0xF) != 0)
    {
      uint64_t v13 = *(unsigned __int8 *)(a2 + 18);
    }
    else
    {
      if ((v12 & 0x60) == 0) {
        goto LABEL_12;
      }
      uint64_t v13 = *(unsigned __int8 *)(a2 + 13);
    }
    uint64_t v11 = v3 + 8 * (v10 + v13);
  }
LABEL_12:
  if (*(unsigned char *)(a2 + 21))
  {
    *(void *)(result + 88) = v11;
    v11 += 8;
  }
  unint64_t v14 = (v12 << 63 >> 63) & 0x28;
  if ((v12 & 2) != 0) {
    unint64_t v14 = 56;
  }
  uint64_t v15 = 72;
  if ((v12 & 4) != 0) {
    unint64_t v14 = 72;
  }
  if ((v12 & 8) != 0) {
    unint64_t v14 = 80;
  }
  if ((v12 & 0x60) != 0) {
    unint64_t v14 = 120;
  }
  if (v14 <= 0x48) {
    uint64_t v16 = 72;
  }
  else {
    uint64_t v16 = v14;
  }
  if ((v12 & 0x80) != 0) {
    unint64_t v14 = v16;
  }
  if (v14 > 0x48) {
    uint64_t v15 = v14;
  }
  if ((v12 & 0x100) != 0) {
    unint64_t v14 = v15;
  }
  *(void *)(result + 96) = v11;
  *(void *)(result + 104) = v11 + v14;
  return result;
}

double GetExecuteCommandsInBufferArgs@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  switch(*(_DWORD *)(a1 + 8))
  {
    case 0xFFFFC1A4:
    case 0xFFFFC1A6:
      uint64_t v10 = GTTraceFunc_argumentBytesWithMap((void *)a1, *(unsigned __int8 *)(a1 + 13), a2);
      *(_OWORD *)a3 = *(_OWORD *)(v10 + 8);
      uint64_t v9 = *((void *)v10 + 4);
      *(void *)(a3 + 16) = *((void *)v10 + 3);
      unsigned int v8 = v10[40];
      goto LABEL_4;
    case 0xFFFFC1A5:
    case 0xFFFFC1A7:
      uint64_t v6 = GTTraceFunc_argumentBytesWithMap((void *)a1, *(unsigned __int8 *)(a1 + 13), a2);
      uint64_t v7 = GTTraceFunc_argumentBlobWithMap((void *)a1, v6[41], a2);
      *(void *)a3 = *((void *)v6 + 1);
      *(_OWORD *)(a3 + 8) = *(_OWORD *)(v7 + 16);
      unsigned int v8 = v6[40];
      uint64_t v9 = *((void *)v6 + 4);
LABEL_4:
      uint64_t v11 = GTTraceMemoryMap_argumentBlobAtIndex(v8, a2, v9);
      if (v11)
      {
        uint64_t v13 = v11 + 16;
        uint64_t v14 = *(unsigned int *)(v11 + 12);
      }
      else
      {
        uint64_t v13 = 0;
        uint64_t v14 = 0;
      }
      *(void *)(a3 + 24) = v13;
      *(void *)(a3 + 32) = v14;
      break;
    default:
      *(void *)(a3 + 32) = 0;
      double result = 0.0;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      break;
  }
  return result;
}

uint64_t DYMTLDrawRenderCommandEncoder(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9 = a1;
  id v10 = a5;
  uint64_t v11 = *(void *)(a3 + *(void *)(a2 + 8));
  uint64_t v12 = 1;
  uint64_t v13 = 0;
  switch(v11)
  {
    case 0:
      goto LABEL_31;
    case 1:
      [v9 drawPrimitives:*(void *)(a3 + *(void *)(a2 + 96)) vertexStart:*(void *)(a3 + *(void *)(a2 + 96) + 8) vertexCount:*(void *)(a3 + *(void *)(a2 + 96) + 16) instanceCount:*(void *)(a3 + *(void *)(a2 + 96) + 24) baseInstance:*(void *)(a3 + *(void *)(a2 + 96) + 32)];
      break;
    case 2:
      int64x2_t v18 = (void *)(a3 + *(void *)(a2 + 96));
      uint64_t v19 = *(void **)(*(void *)a4 + 24);
      unint64_t v20 = *(int *)(*(void *)a4 + 12);
      unint64_t v21 = v18[3];
      int v22 = GTMTLGPUAddressResource_resourceForGPUAddress(v19, v20, v21);
      if (v22)
      {
        unint64_t v23 = v21 - *v22;
        uint64_t v24 = v22[2];
      }
      else
      {
        unint64_t v23 = 0;
        uint64_t v24 = 0;
      }
      uint64_t v42 = GetObjectForKey(v10, v24);
      uint64_t v12 = v42 != 0;
      if (v42) {
        [v9 drawIndexedPrimitives:*v18 indexCount:v18[1] indexType:v18[2] indexBuffer:v42 indexBufferOffset:v23 instanceCount:v18[4] baseVertex:v18[5] baseInstance:v18[6]];
      }
      goto LABEL_19;
    case 3:
    case 5:
    case 6:
    case 7:
      break;
    case 4:
      id v25 = (void *)(*(void *)(a2 + 96) + a3);
      unsigned __int16 v26 = *(void **)(*(void *)a4 + 24);
      unint64_t v27 = *(int *)(*(void *)a4 + 12);
      unint64_t v28 = v25[6];
      unint64_t v29 = GTMTLGPUAddressResource_resourceForGPUAddress(v26, v27, v28);
      if (v29)
      {
        unint64_t v30 = v28 - *v29;
        uint64_t v31 = v29[2];
      }
      else
      {
        unint64_t v30 = 0;
        uint64_t v31 = 0;
      }
      uint64_t v42 = GetObjectForKey(v10, v31);
      int v43 = v42 != 0;
      unsigned int v44 = v31 == 0;
      uint64_t v12 = v43 ^ v44;
      if (v43 != v44) {
        [v9 drawPatches:v25[3] patchStart:v25[4] patchCount:v25[5] patchIndexBuffer:v42 patchIndexBufferOffset:v30 instanceCount:v25[7] baseInstance:v25[8]];
      }
LABEL_19:

      break;
    case 8:
      uint64_t v32 = *(void *)(a2 + 96) + a3;
      id v33 = (void *)(v32 + 24);
      unint64_t v34 = *(void *)(v32 + 48);
      id v35 = GTMTLGPUAddressResource_resourceForGPUAddress(*(void **)(*(void *)a4 + 24), *(int *)(*(void *)a4 + 12), v34);
      if (v35)
      {
        unint64_t v36 = v34 - *v35;
        uint64_t v37 = v35[2];
      }
      else
      {
        unint64_t v36 = 0;
        uint64_t v37 = 0;
      }
      size_t v45 = GetObjectForKey(v10, v37);
      unsigned int v46 = (v45 != 0) ^ (v37 == 0);
      int v47 = *(void **)(*(void *)a4 + 24);
      unint64_t v48 = *(int *)(*(void *)a4 + 12);
      unint64_t v49 = v33[4];
      size_t v50 = GTMTLGPUAddressResource_resourceForGPUAddress(v47, v48, v49);
      if (v50)
      {
        unint64_t v51 = v49 - *v50;
        uint64_t v52 = v50[2];
      }
      else
      {
        unint64_t v51 = 0;
        uint64_t v52 = 0;
      }
      unsigned __int8 v53 = GetObjectForKey(v10, v52);
      if (v53) {
        uint64_t v12 = v46;
      }
      else {
        uint64_t v12 = 0;
      }
      if (v12 == 1) {
        [v9 drawIndexedPatches:*v33 patchStart:v33[1] patchCount:v33[2] patchIndexBuffer:v45 patchIndexBufferOffset:v36 controlPointIndexBuffer:v53 controlPointIndexBufferOffset:v51 instanceCount:v33[5] baseInstance:v33[6]];
      }

      break;
    default:
      if (v11 == 128)
      {
        unsigned int v38 = (long long *)(a3 + *(void *)(a2 + 96));
        uint64_t v39 = *((void *)v38 + 2);
        long long v65 = *v38;
        uint64_t v66 = v39;
        uint64_t v40 = *((void *)v38 + 5);
        long long v63 = *(long long *)((char *)v38 + 24);
        uint64_t v64 = v40;
        uint64_t v41 = *((void *)v38 + 8);
        long long v61 = v38[3];
        uint64_t v62 = v41;
        [v9 drawMeshThreadgroups:&v65 threadsPerObjectThreadgroup:&v63 threadsPerMeshThreadgroup:&v61];
      }
      else if (v11 == 256)
      {
        uint64_t v14 = (long long *)(a3 + *(void *)(a2 + 96));
        uint64_t v15 = *((void *)v14 + 2);
        long long v59 = *v14;
        uint64_t v60 = v15;
        uint64_t v16 = *((void *)v14 + 5);
        long long v57 = *(long long *)((char *)v14 + 24);
        uint64_t v58 = v16;
        uint64_t v17 = *((void *)v14 + 8);
        long long v55 = v14[3];
        uint64_t v56 = v17;
        [v9 drawMeshThreads:&v59 threadsPerObjectThreadgroup:&v57 threadsPerMeshThreadgroup:&v55];
      }
      break;
  }
  uint64_t v13 = v12;
LABEL_31:

  return v13;
}

id GetObjectForKey(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v4 = +[NSNumber numberWithUnsignedLongLong:a2];
  uint64_t v5 = [v3 objectForKeyedSubscript:v4];

  return v5;
}

uint64_t DYMTLDispatchComputeCommandEncoder(void *a1, uint64_t a2, uint64_t a3)
{
  id v5 = a1;
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(a3 + *(void *)(a2 + 8));
  if (v7 == 64)
  {
    uint64_t v11 = *(void *)(a2 + 96) + a3;
    uint64_t v12 = *(void *)(v11 + 88);
    long long v18 = *(_OWORD *)(v11 + 72);
    uint64_t v19 = v12;
    uint64_t v13 = *(void *)(v11 + 112);
    long long v16 = *(_OWORD *)(v11 + 96);
    uint64_t v17 = v13;
    [v5 dispatchThreads:&v18 threadsPerThreadgroup:&v16];
  }
  else
  {
    if (v7 != 32)
    {
      uint64_t v14 = 0;
      goto LABEL_7;
    }
    uint64_t v8 = *(void *)(a2 + 96) + a3;
    uint64_t v9 = *(void *)(v8 + 88);
    long long v22 = *(_OWORD *)(v8 + 72);
    uint64_t v23 = v9;
    uint64_t v10 = *(void *)(v8 + 112);
    long long v20 = *(_OWORD *)(v8 + 96);
    uint64_t v21 = v10;
    [v5 dispatchThreadgroups:&v22 threadsPerThreadgroup:&v20];
  }
  uint64_t v14 = 1;
LABEL_7:

  return v14;
}

id GTMTLDecodeIndirectCommandBuffer(void *a1, void *a2)
{
  memset(v9, 0, sizeof(v9));
  id v3 = a2;
  id v4 = a1;
  objc_msgSend(v4, "device", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0,
    0,
    0,
    0,
    0,
    v9,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
  id v5 = 0);
  TranslateGTMTLIndirectCommandBufferDescriptorWithDevice(v3, v5, (uint64_t)&v8, 1);

  uint64_t v6 = GTMTLDecodeIndirectCommandBufferInternal(v4, (uint64_t)v9);

  return v6;
}

id GTMTLDecodeIndirectCommandBufferInternal(void *a1, uint64_t a2)
{
  id v3 = a1;
  long long v135 = 0u;
  long long v136 = 0u;
  long long v133 = 0u;
  long long v134 = 0u;
  long long v131 = 0u;
  long long v132 = 0u;
  long long v130 = 0u;
  GTMTLCreateIndirectCommandEncoder((uint64_t)&v130, a2);
  int v4 = *(unsigned __int16 *)(a2 + 8);
  if ((v4 & 0xFE70) != 0)
  {
    if ((v4 & 0xFFFFFF9F) != 0)
    {
      id v5 = 0;
      goto LABEL_139;
    }
    id v101 = v3;
    id v126 = v3;
    id v69 = [v126 size];
    uint64_t v70 = *((void *)&v136 + 1);
    id v103 = +[NSMutableData dataWithLength:*((void *)&v136 + 1) * (void)v69];
    id v122 = v69;
    unint64_t v124 = (char *)[v103 mutableBytes];
    if (v69)
    {
      unsigned int v71 = 0;
      uint64_t v72 = 0;
      uint64_t v109 = v136 + 72;
      id v111 = 0;
      __int16 v73 = (unsigned char *)v130;
      uint64_t v117 = v70;
      uint64_t v120 = *((void *)&v130 + 1);
      uint64_t v107 = v131;
      uint64_t v115 = v136;
      id v113 = (id)(((void)v136 - (void)v135) >> 3);
      uint64_t v74 = &v124[v135];
      uint64_t v105 = *((void *)&v133 + 1);
      unsigned __int8 v75 = &v124[*((void *)&v133 + 1)];
      unsigned __int8 v76 = &v124[*((void *)&v134 + 1)];
      while (1)
      {
        int v128 = v71;
        unsigned __int16 v77 = [v126 indirectComputeCommandAtIndex:v72];
        unsigned __int16 v78 = &v124[v70 * (void)v72];
        uint64_t v79 = (uint64_t *)[v77 getCommandType];
        *(void *)&v78[v120] = v79;
        if (v79) {
          break;
        }
        unsigned int v71 = v128;
LABEL_136:

        uint64_t v72 = (char *)v72 + 1;
        v74 += v70;
        v75 += v70;
        v76 += v70;
        if (v72 == v122) {
          goto LABEL_137;
        }
      }
      uint64_t v80 = v79;
      if ((int)v113 >= 1)
      {
        uint64_t v81 = 0;
        do
        {
          *(void *)&v74[8 * v81] = [v77 getKernelAttributeStrideAtIndex:v81];
          ++v81;
        }
        while (v113 != v81);
      }
      unint64_t v82 = &v78[v115];
      if (v80 == (uint64_t *)&stru_20)
      {
        uint64_t v85 = [v77 dispatchThreadgroupsArguments];
        int v84 = v85;
        long long v149 = 0uLL;
        uint64_t v150 = 0;
        if (v85)
        {
          [v85 threadgroupsPerGrid];
          goto LABEL_113;
        }
      }
      else
      {
        if (v80 != &stru_20.vmsize)
        {
LABEL_119:
          if (!v73[11])
          {
            id v94 = [v77 getPipelineStateUniqueIdentifier];
            id v95 = v111;
            if (v94 != (id)-1) {
              id v95 = v94;
            }
            id v111 = v95;
            *(void *)&v78[v107] = v95;
          }
          uint64_t v70 = v117;
          if (v73[10])
          {
            unsigned int v71 = v128;
          }
          else
          {
            if (v73[13])
            {
              unint64_t v96 = 0;
              do
              {
                id v97 = [v77 getKernelBufferAtIndex:v96];
                if (v97 == (id)-1)
                {
                  if (v128) {
                    id v97 = *(id *)&v128[8 * v96];
                  }
                  else {
                    id v97 = 0;
                  }
                }
                *(void *)&v75[8 * v96++] = v97;
              }
              while (v96 < v73[13]);
            }
            unsigned int v71 = &v78[v105];
            uint64_t v70 = v117;
          }
          if (v73[14])
          {
            unint64_t v98 = 0;
            do
            {
              *(void *)&v76[8 * v98] = [v77 getThreadgroupMemoryLengthAtIndex:v98];
              ++v98;
            }
            while (v98 < v73[14]);
          }
          goto LABEL_136;
        }
        int v83 = [v77 dispatchThreadsArguments];
        int v84 = v83;
        long long v149 = 0uLL;
        uint64_t v150 = 0;
        if (v83)
        {
          [v83 threadsPerGrid];
LABEL_113:
          long long v147 = 0uLL;
          uint64_t v148 = 0;
          [v84 threadsPerThreadgroup];
          long long v86 = v149;
          uint64_t v87 = v150;
          long long v88 = v147;
          uint64_t v89 = v148;
LABEL_115:
          unint64_t v90 = &v78[v109];
          *(_OWORD *)unint64_t v90 = v86;
          *((void *)v90 + 2) = v87;
          *(_OWORD *)(v90 + 24) = v88;
          *((void *)v90 + 5) = v89;
          long long v91 = 0uLL;
          long long v145 = 0u;
          long long v146 = 0u;
          long long v144 = 0u;
          if (v77)
          {
            [v77 getStageInRegion];
            long long v91 = v144;
            long long v92 = v145;
            long long v93 = v146;
          }
          else
          {
            long long v92 = 0uLL;
            long long v93 = 0uLL;
          }
          *(_OWORD *)unint64_t v82 = v91;
          *((_OWORD *)v82 + 1) = v92;
          *((_OWORD *)v82 + 2) = v93;
          v82[64] = [v77 hasBarrier];

          goto LABEL_119;
        }
      }
      uint64_t v89 = 0;
      uint64_t v87 = 0;
      uint64_t v148 = 0;
      long long v86 = 0uLL;
      long long v147 = 0u;
      long long v88 = 0uLL;
      goto LABEL_115;
    }
LABEL_137:
    id v5 = [v103 copy];

    int v68 = v126;
  }
  else
  {
    id v101 = v3;
    id v114 = v3;
    id v6 = [v114 size];
    uint64_t v7 = *((void *)&v136 + 1);
    +[NSMutableData dataWithLength:*((void *)&v136 + 1) * (void)v6];
    id v110 = v6;
    id v112 = (id)objc_claimAutoreleasedReturnValue();
    if (v6)
    {
      uint64_t v8 = 0;
      uint64_t v102 = 0;
      id v104 = 0;
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v121 = 0;
      uint64_t v100 = 0;
      uint64_t v11 = 0;
      uint64_t v106 = v7;
      uint64_t v108 = *((void *)&v130 + 1);
      do
      {
        uint64_t v13 = [v114 indirectRenderCommandAtIndex:v11];
        uint64_t v127 = (char *)[v112 mutableBytes];
        uint64_t v14 = &v127[v7 * (void)v11];
        uint64_t v15 = (uint32_t *)[v13 getCommandType];
        *(void *)&v14[v108] = v15;
        if (v15)
        {
          long long v16 = v15;
          double v123 = &v127[v7 * (void)v11];
          uint64_t v125 = v9;
          uint64_t v116 = v12;
          int v118 = v10;
          uint64_t v17 = v136;
          long long v18 = &v14[v136];
          if ((int)(((void)v136 - (void)v135) >> 3) >= 1)
          {
            uint64_t v19 = 0;
            uint64_t v20 = (((void)v136 - (void)v135) >> 3);
            uint64_t v21 = &v127[v135 + v8];
            do
            {
              *(void *)&v21[8 * v19] = [v13 getVertexAttributeStrideAtIndex:v19];
              ++v19;
            }
            while (v20 != v19);
          }
          long long v22 = v121;
          switch((unint64_t)v16)
          {
            case 1uLL:
              uint64_t v23 = [v13 drawArguments];
              *(void *)long long v18 = [v23 primitiveType];
              *((void *)v18 + 1) = [v23 vertexStart];
              *((void *)v18 + 2) = [v23 vertexCount];
              *((void *)v18 + 3) = [v23 instanceCount];
              *((void *)v18 + 4) = [v23 baseInstance];
              goto LABEL_34;
            case 2uLL:
              uint64_t v23 = [v13 drawIndexedArguments];
              *(void *)long long v18 = [v23 primitiveType];
              *((void *)v18 + 1) = [v23 indexCount];
              *((void *)v18 + 2) = [v23 indexType];
              *((void *)v18 + 3) = [v23 indexBufferGPUVirtualAddress];
              *((void *)v18 + 4) = [v23 instanceCount];
              *((void *)v18 + 5) = [v23 baseVertex];
              *((void *)v18 + 6) = [v23 baseInstance];
              if (*((void *)v18 + 2) == -1) {
                *((void *)v18 + 2) = *((void *)v100 + 2);
              }
              uint64_t v100 = v18;
              goto LABEL_34;
            case 3uLL:
            case 5uLL:
            case 6uLL:
            case 7uLL:
              goto LABEL_35;
            case 4uLL:
              unint64_t v29 = [v13 getTessellationFactorArguments];
              unint64_t v30 = &v123[v17];
              *(void *)&v123[v17] = [v29 virtualAddress];
              *((void *)v18 + 1) = [v29 instanceStride];
              [v29 scale];
              *((_DWORD *)v18 + 4) = v31;

              uint64_t v23 = [v13 drawPatchesArguments];
              *((void *)v30 + 3) = [v23 numberOfPatchControlPoints];
              *((void *)v30 + 4) = [v23 patchStart];
              *((void *)v30 + 5) = [v23 patchCount];
              *((void *)v30 + 6) = [v23 patchIndexBufferVirtualAddress];
              *((void *)v30 + 7) = [v23 instanceCount];
              *((void *)v30 + 8) = [v23 baseInstance];
              goto LABEL_34;
            case 8uLL:
              uint64_t v32 = [v13 getTessellationFactorArguments];
              id v33 = &v123[v17];
              *(void *)&v123[v17] = [v32 virtualAddress];
              *((void *)v18 + 1) = [v32 instanceStride];
              [v32 scale];
              *((_DWORD *)v18 + 4) = v34;

              uint64_t v23 = [v13 drawIndexedPatchesArguments];
              *((void *)v33 + 3) = [v23 numberOfPatchControlPoints];
              *((void *)v33 + 4) = [v23 patchStart];
              *((void *)v33 + 5) = [v23 patchCount];
              *((void *)v33 + 6) = [v23 patchIndexBufferVirtualAddress];
              *((void *)v33 + 7) = [v23 controlPointIndexBufferVirtualAddress];
              *((void *)v33 + 8) = [v23 instanceCount];
              *((void *)v33 + 9) = [v23 baseInstance];
              goto LABEL_34;
            default:
              if (v16 == (uint32_t *)&stru_68.segname[8])
              {
                id v35 = [v13 drawMeshThreadgroupsArguments];
                uint64_t v23 = v35;
                long long v22 = v121;
                if (v35)
                {
                  [v35 threadgroupsPerGrid];
                  uint64_t v36 = v145;
                  *(_OWORD *)long long v18 = v144;
                  *((void *)v18 + 2) = v36;
                  [v23 threadsPerObjectThreadgroup];
                  uint64_t v37 = v150;
                  *(_OWORD *)(v18 + 24) = v149;
                  *((void *)v18 + 5) = v37;
                  [v23 threadsPerMeshThreadgroup];
                  long long v27 = v147;
                  uint64_t v28 = v148;
                }
                else
                {
                  if (s_logUsingOsLog)
                  {
                    uint64_t v39 = gt_default_log();
                    if (os_log_type_enabled(v39, OS_LOG_TYPE_FAULT))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_fault_impl(&def_CFBEC, v39, OS_LOG_TYPE_FAULT, "fail: Unable to decode MTLIndirectCommandTypeDrawMeshThreadgroups", buf, 2u);
                    }
                  }
                  else
                  {
                    uint64_t v41 = __stderrp;
                    uint64_t v39 = +[NSString stringWithFormat:@"fail: Unable to decode MTLIndirectCommandTypeDrawMeshThreadgroups"];
                    fprintf(v41, "%s\n", (const char *)[v39 UTF8String]);
                  }

                  uint64_t v28 = 0;
                  *(void *)&long long v145 = 0;
                  long long v27 = 0uLL;
                  long long v144 = 0u;
                  *((void *)v18 + 2) = 0;
                  *(_OWORD *)long long v18 = 0u;
                  uint64_t v150 = 0;
                  long long v149 = 0u;
                  *((void *)v18 + 5) = 0;
                  *(_OWORD *)(v18 + 24) = 0u;
                  uint64_t v148 = 0;
                  long long v147 = 0u;
                }
              }
              else
              {
                long long v22 = v121;
                if (v16 != &stru_B8.reserved2) {
                  goto LABEL_35;
                }
                uint64_t v24 = [v13 drawMeshThreadsArguments];
                uint64_t v23 = v24;
                if (v24)
                {
                  [v24 threadsPerGrid];
                  uint64_t v25 = v142;
                  *(_OWORD *)long long v18 = v141;
                  *((void *)v18 + 2) = v25;
                  [v23 threadsPerObjectThreadgroup];
                  uint64_t v26 = v140;
                  *(_OWORD *)(v18 + 24) = v139;
                  *((void *)v18 + 5) = v26;
                  [v23 threadsPerMeshThreadgroup];
                  long long v27 = v137;
                  uint64_t v28 = v138;
                }
                else
                {
                  if (s_logUsingOsLog)
                  {
                    unsigned int v38 = gt_default_log();
                    if (os_log_type_enabled(v38, OS_LOG_TYPE_FAULT))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_fault_impl(&def_CFBEC, v38, OS_LOG_TYPE_FAULT, "fail: Unable to decode MTLIndirectCommandTypeDrawMeshThreads", buf, 2u);
                    }
                  }
                  else
                  {
                    uint64_t v40 = __stderrp;
                    unsigned int v38 = +[NSString stringWithFormat:@"fail: Unable to decode MTLIndirectCommandTypeDrawMeshThreads"];
                    fprintf(v40, "%s\n", (const char *)[v38 UTF8String]);
                  }

                  uint64_t v28 = 0;
                  uint64_t v142 = 0;
                  long long v27 = 0uLL;
                  long long v141 = 0u;
                  *((void *)v18 + 2) = 0;
                  *(_OWORD *)long long v18 = 0u;
                  uint64_t v140 = 0;
                  long long v139 = 0u;
                  *((void *)v18 + 5) = 0;
                  *(_OWORD *)(v18 + 24) = 0u;
                  uint64_t v138 = 0;
                  long long v137 = 0u;
                }
              }
              *((_OWORD *)v18 + 3) = v27;
              *((void *)v18 + 8) = v28;
LABEL_34:

LABEL_35:
              uint64_t v42 = (unsigned char *)v130;
              if (!*(unsigned char *)(v130 + 11))
              {
                id v43 = [v13 getPipelineStateUniqueIdentifier];
                id v44 = v104;
                if (v43 != (id)-1) {
                  id v44 = v43;
                }
                id v104 = v44;
                *(void *)&v123[v131] = v44;
              }
              uint64_t v10 = v118;
              if (!v42[10])
              {
                uint64_t v119 = *((void *)&v131 + 1);
                if (v42[18])
                {
                  unint64_t v45 = 0;
                  unsigned int v46 = &v127[*((void *)&v131 + 1) + v8];
                  do
                  {
                    if (objc_opt_respondsToSelector()) {
                      id v47 = [v13 getVertexBufferAddressAtIndex:v45];
                    }
                    else {
                      id v47 = [v13 getVertexBufferAtIndex:v45];
                    }
                    if (v47 == (id)-1) {
                      id v48 = 0;
                    }
                    else {
                      id v48 = v47;
                    }
                    if (v47 == (id)-1 && v102) {
                      id v48 = *(id *)&v102[8 * v45];
                    }
                    *(void *)&v46[8 * v45++] = v48;
                  }
                  while (v45 < v42[18]);
                }
                uint64_t v49 = v132;
                if (v42[12])
                {
                  unint64_t v50 = 0;
                  unint64_t v51 = &v127[v132 + v8];
                  do
                  {
                    if (objc_opt_respondsToSelector()) {
                      id v52 = [v13 getFragmentBufferAddressAtIndex:v50];
                    }
                    else {
                      id v52 = [v13 getFragmentBufferAtIndex:v50];
                    }
                    if (v52 == (id)-1) {
                      id v53 = 0;
                    }
                    else {
                      id v53 = v52;
                    }
                    if (v52 == (id)-1 && v125) {
                      id v53 = *(id *)&v125[8 * v50];
                    }
                    *(void *)&v51[8 * v50++] = v53;
                  }
                  while (v50 < v42[12]);
                }
                uint64_t v54 = *((void *)&v132 + 1);
                if (v42[16])
                {
                  unint64_t v55 = 0;
                  uint64_t v56 = &v127[*((void *)&v132 + 1) + v8];
                  do
                  {
                    if (objc_opt_respondsToSelector())
                    {
                      id v57 = [v13 getObjectBufferAddressAtIndex:v55];
                      if (v57 == (id)-1) {
                        id v58 = 0;
                      }
                      else {
                        id v58 = v57;
                      }
                      if (v57 == (id)-1 && v10) {
                        id v58 = *(id *)&v10[8 * v55];
                      }
                    }
                    else
                    {
                      if (GTMTLDecodeIndirectRenderCommandBuffer_onceToken != -1) {
                        dispatch_once(&GTMTLDecodeIndirectRenderCommandBuffer_onceToken, &__block_literal_global_216);
                      }
                      id v58 = 0;
                    }
                    *(void *)&v56[8 * v55++] = v58;
                  }
                  while (v55 < v42[16]);
                }
                uint64_t v102 = &v123[v119];
                uint64_t v125 = &v123[v49];
                uint64_t v10 = &v123[v54];
                long long v59 = &v123[v133];
                if (v42[15])
                {
                  uint64_t v60 = v10;
                  unint64_t v61 = 0;
                  uint64_t v62 = &v127[v133 + v8];
                  do
                  {
                    if (objc_opt_respondsToSelector())
                    {
                      id v63 = [v13 getMeshBufferAddressAtIndex:v61];
                      if (v63 == (id)-1) {
                        id v64 = 0;
                      }
                      else {
                        id v64 = v63;
                      }
                      if (v63 == (id)-1 && v121) {
                        id v64 = *(id *)&v121[8 * v61];
                      }
                    }
                    else
                    {
                      if (GTMTLDecodeIndirectRenderCommandBuffer_onceToken_44 != -1) {
                        dispatch_once(&GTMTLDecodeIndirectRenderCommandBuffer_onceToken_44, &__block_literal_global_47);
                      }
                      id v64 = 0;
                    }
                    *(void *)&v62[8 * v61++] = v64;
                  }
                  while (v61 < v42[15]);
                  long long v22 = v59;
                  uint64_t v10 = v60;
                }
                else
                {
                  long long v22 = &v123[v133];
                }
              }
              if (v42[17])
              {
                unint64_t v65 = 0;
                uint64_t v66 = &v127[v134 + v8];
                do
                {
                  *(void *)&v66[8 * v65] = [v13 getObjectThreadgroupMemoryLengthAtIndex:v65];
                  ++v65;
                }
                while (v65 < v42[17]);
              }
              uint64_t v121 = v22;
              if (v42[21])
              {
                uint64_t v67 = *((void *)&v135 + 1);
                *(void *)&v123[v67] = [v13 hasBarrier];
              }
              uint64_t v7 = v106;
              uint64_t v12 = v116;
              uint64_t v9 = v125;
              break;
          }
        }

        uint64_t v11 = (char *)v11 + 1;
        v8 += v7;
      }
      while (v11 != v110);
    }
    id v5 = [v112 copy];

    int v68 = v114;
  }

  id v3 = v101;
LABEL_139:

  return v5;
}

void GTMTLEncodeIndirectCommandBufferWithRange(void *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  id v11 = a1;
  id v12 = a7;
  long long v146 = 0u;
  long long v147 = 0u;
  long long v144 = 0u;
  long long v145 = 0u;
  long long v142 = 0u;
  long long v143 = 0u;
  long long v141 = 0u;
  GTMTLCreateIndirectCommandEncoder((uint64_t)&v141, a4);
  int v13 = *(unsigned __int16 *)(a4 + 8);
  if ((v13 & 0xFE70) == 0)
  {
    id v116 = v11;
    id v131 = v11;
    id v115 = v12;
    id v136 = v12;
    uint64_t v129 = a2 + a3;
    if (a2 < a2 + a3)
    {
      uint64_t v41 = *((void *)&v147 + 1);
      uint64_t v127 = *((void *)&v141 + 1);
      uint64_t v42 = a5 + a2 * *((void *)&v147 + 1);
      uint64_t v118 = *((void *)&v147 + 1);
      do
      {
        uint64_t v44 = a5 + v41 * a2;
        unint64_t v139 = a2;
        unint64_t v45 = [v131 indirectRenderCommandAtIndex:a2];
        unsigned int v46 = v45;
        uint64_t v47 = *(void *)(v44 + v127);
        switch(v47)
        {
          case 0:
            [v45 reset];
            goto LABEL_112;
          case 1:
            [v45 drawPrimitives:*(void *)(v44 + v147) vertexStart:*(void *)(v44 + v147 + 8) vertexCount:*(void *)(v44 + v147 + 16) instanceCount:*(void *)(v44 + v147 + 24) baseInstance:*(void *)(v44 + v147 + 32)];
            break;
          case 2:
            unint64_t v51 = (void *)(v44 + v147);
            unint64_t v52 = *(void *)(v44 + v147 + 24);
            id v53 = GTMTLGPUAddressResource_resourceForGPUAddress(*(void **)(*(void *)a6 + 24), *(int *)(*(void *)a6 + 12), v52);
            if (v53)
            {
              unint64_t v54 = v52 - *v53;
              uint64_t v55 = v53[2];
            }
            else
            {
              unint64_t v54 = 0;
              uint64_t v55 = 0;
            }
            unsigned int v71 = GetObjectForKey(v136, v55);
            if (v71) {
              [v46 drawIndexedPrimitives:*v51 indexCount:v51[1] indexType:v51[2] indexBuffer:v71 indexBufferOffset:v54 instanceCount:v51[4] baseVertex:v51[5] baseInstance:v51[6]];
            }
            else {
              [v46 reset];
            }

            break;
          case 3:
          case 5:
          case 6:
          case 7:
            break;
          case 4:
            uint64_t v56 = v147;
            id v57 = (void *)(v147 + v44);
            unint64_t v58 = *(void *)(v147 + v44 + 48);
            long long v59 = GTMTLGPUAddressResource_resourceForGPUAddress(*(void **)(*(void *)a6 + 24), *(int *)(*(void *)a6 + 12), v58);
            uint64_t v60 = v44;
            if (v59)
            {
              unint64_t v123 = v58 - *v59;
              uint64_t v61 = v59[2];
            }
            else
            {
              unint64_t v123 = 0;
              uint64_t v61 = 0;
            }
            uint64_t v72 = GetObjectForKey(v136, v61);
            BOOL v73 = v61 == 0;
            uint64_t v74 = (unint64_t *)(v60 + v56);
            unint64_t v75 = *v74;
            unsigned __int8 v76 = GTMTLGPUAddressResource_resourceForGPUAddress(*(void **)(*(void *)a6 + 24), *(int *)(*(void *)a6 + 12), *v74);
            uint64_t v77 = v42;
            if (v76)
            {
              unint64_t v78 = v75 - *v76;
              uint64_t v79 = v76[2];
            }
            else
            {
              unint64_t v78 = 0;
              uint64_t v79 = 0;
            }
            uint64_t v85 = GetObjectForKey(v136, v79);
            long long v86 = (void *)v85;
            if (v85) {
              int v87 = (v72 != 0) ^ v73;
            }
            else {
              int v87 = 0;
            }
            if (v87 == 1) {
              [v46 drawPatches:v57[3] patchStart:v57[4] patchCount:v57[5] patchIndexBuffer:v72 patchIndexBufferOffset:v123 instanceCount:v57[7] baseInstance:v57[8] tessellationFactorBuffer:v85 tessellationFactorBufferOffset:v78 tessellationFactorBufferInstanceStride:v74[1]];
            }
            else {
              [v46 reset];
            }
            uint64_t v41 = v118;
            uint64_t v42 = v77;
            uint64_t v44 = v60;
            goto LABEL_83;
          case 8:
            uint64_t v62 = v147;
            uint64_t v63 = v147 + v44;
            unint64_t v64 = *(void *)(v147 + v44 + 48);
            unint64_t v65 = GTMTLGPUAddressResource_resourceForGPUAddress(*(void **)(*(void *)a6 + 24), *(int *)(*(void *)a6 + 12), v64);
            long long v133 = v43;
            uint64_t v66 = v44;
            if (v65)
            {
              unint64_t v124 = v64 - *v65;
              uint64_t v67 = v65[2];
            }
            else
            {
              unint64_t v124 = 0;
              uint64_t v67 = 0;
            }
            uint64_t v80 = (void *)(v63 + 24);
            uint64_t v72 = GetObjectForKey(v136, v67);
            BOOL v81 = v67 == 0;
            unint64_t v82 = v80[4];
            int v83 = GTMTLGPUAddressResource_resourceForGPUAddress(*(void **)(*(void *)a6 + 24), *(int *)(*(void *)a6 + 12), v82);
            if (v83)
            {
              unint64_t v120 = v82 - *v83;
              uint64_t v84 = v83[2];
            }
            else
            {
              unint64_t v120 = 0;
              uint64_t v84 = 0;
            }
            long long v86 = GetObjectForKey(v136, v84);
            if (v86) {
              int v88 = (v72 != 0) ^ v81;
            }
            else {
              int v88 = 0;
            }
            uint64_t v89 = v66 + v62;
            unint64_t v90 = *(void *)(v66 + v62);
            long long v91 = GTMTLGPUAddressResource_resourceForGPUAddress(*(void **)(*(void *)a6 + 24), *(int *)(*(void *)a6 + 12), v90);
            if (v91)
            {
              unint64_t v92 = v90 - *v91;
              uint64_t v93 = v91[2];
            }
            else
            {
              unint64_t v92 = 0;
              uint64_t v93 = 0;
            }
            uint64_t v94 = GetObjectForKey(v136, v93);
            id v95 = (void *)v94;
            if (v94) {
              int v96 = v88;
            }
            else {
              int v96 = 0;
            }
            if (v96 == 1) {
              [v46 drawIndexedPatches:*v80 patchStart:v80[1] patchCount:v80[2] patchIndexBuffer:v72 patchIndexBufferOffset:v124 controlPointIndexBuffer:v86 controlPointIndexBufferOffset:v120 instanceCount:v80[5] baseInstance:v80[6] tessellationFactorBuffer:v94 tessellationFactorBufferOffset:v92 tessellationFactorBufferInstanceStride:*(void *)(v89 + 8)];
            }
            else {
              [v46 reset];
            }
            uint64_t v41 = v118;
            id v43 = v133;
            uint64_t v44 = v66;

LABEL_83:
            break;
          default:
            if (v47 == 128)
            {
              uint64_t v68 = *(void *)(v44 + v147 + 16);
              long long v154 = *(_OWORD *)(v44 + v147);
              *(void *)&long long v155 = v68;
              uint64_t v69 = *(void *)(v44 + v147 + 40);
              long long v159 = *(_OWORD *)(v44 + v147 + 24);
              uint64_t v160 = v69;
              uint64_t v70 = *(void *)(v44 + v147 + 64);
              long long v157 = *(_OWORD *)(v44 + v147 + 48);
              uint64_t v158 = v70;
              [v45 drawMeshThreadgroups:&v154 threadsPerObjectThreadgroup:&v159 threadsPerMeshThreadgroup:&v157];
            }
            else if (v47 == 256)
            {
              uint64_t v48 = *(void *)(v44 + v147 + 16);
              long long v152 = *(_OWORD *)(v44 + v147);
              uint64_t v153 = v48;
              uint64_t v49 = *(void *)(v44 + v147 + 40);
              long long v150 = *(_OWORD *)(v44 + v147 + 24);
              uint64_t v151 = v49;
              uint64_t v50 = *(void *)(v44 + v147 + 64);
              long long v148 = *(_OWORD *)(v44 + v147 + 48);
              uint64_t v149 = v50;
              [v45 drawMeshThreads:&v152 threadsPerObjectThreadgroup:&v150 threadsPerMeshThreadgroup:&v148];
            }
            break;
        }
        id v97 = (unsigned char *)v141;
        if (!*(unsigned char *)(v141 + 11))
        {
          uint64_t v98 = *(void *)(v44 + v142);
          if (v98)
          {
            uint64_t v99 = GTMTLIndirectResources_renderPipelineIdForUniqueIdentifier(a6, v98);
            uint64_t v100 = GetObjectForKey(v136, v99);
            if (v100) {
              [v46 setRenderPipelineState:v100];
            }
          }
        }
        if (v97[19]) {
          uint64_t v101 = v44 + v146;
        }
        else {
          uint64_t v101 = 0;
        }
        if (!v97[10])
        {
          uint64_t v121 = v44;
          uint64_t v125 = v42;
          long long v134 = v43;
          uint64_t v102 = *((void *)&v142 + 1);
          uint64_t v103 = v97[18];
          id v104 = v46;
          id v105 = v136;
          if (v103)
          {
            uint64_t v106 = 0;
            uint64_t v107 = v42 + v102;
            do
            {
              uint64_t v108 = *(void *)(v107 + 8 * v106);
              if (v108)
              {
                uint64_t v109 = GTMTLGPUAddressResource_resourceForGPUAddress(*(void **)(*(void *)a6 + 24), *(int *)(*(void *)a6 + 12), *(void *)(v107 + 8 * v106));
                if (v109)
                {
                  uint64_t v110 = v108 - *v109;
                  uint64_t v111 = v109[2];
                }
                else
                {
                  uint64_t v110 = 0;
                  uint64_t v111 = 0;
                }
                id v112 = GetObjectForKey(v105, v111);
                if (v112)
                {
                  if (v101) {
                    [v104 setVertexBuffer:v112 offset:v110 attributeStride:*(void *)(v101 + 8 * v106) atIndex:v106];
                  }
                  else {
                    [v104 setVertexBuffer:v112 offset:v110 atIndex:v106];
                  }
                }
              }
              ++v106;
            }
            while (v103 != v106);
          }

          uint64_t v44 = v121;
          GTMTLEncodeIndirectBufferBindings(v104, v121 + v143, v97[12], 2, a6, v105);
          GTMTLEncodeIndirectBufferBindings(v104, v121 + *((void *)&v143 + 1), v97[16], 8, a6, v105);
          GTMTLEncodeIndirectBufferBindings(v104, v121 + v144, v97[15], 16, a6, v105);
          uint64_t v41 = v118;
          uint64_t v42 = v125;
          id v43 = v134;
        }
        if (v97[17])
        {
          unint64_t v113 = 0;
          uint64_t v114 = v42 + v145;
          do
          {
            [v46 setObjectThreadgroupMemoryLength:*(void *)(v114 + 8 * v113) atIndex:v113];
            ++v113;
          }
          while (v113 < v97[17]);
        }
        if (v97[21] && *(void *)(v44 + *((void *)&v146 + 1))) {
          [v46 setBarrier];
        }
LABEL_112:

        a2 = v139 + 1;
        v42 += v41;
      }
      while (v139 + 1 != v129);
    }

    uint64_t v40 = v131;
LABEL_114:

    id v12 = v115;
    id v11 = v116;
    goto LABEL_115;
  }
  if ((v13 & 0xFFFFFF9F) == 0)
  {
    id v116 = v11;
    id v132 = v11;
    id v115 = v12;
    id v14 = v12;
    uint64_t v130 = a2 + a3;
    if (a2 < a2 + a3)
    {
      uint64_t v15 = *((void *)&v147 + 1);
      uint64_t v122 = v147;
      long long v16 = (unsigned char *)v141;
      uint64_t v117 = v142;
      uint64_t v119 = v147 + 72;
      uint64_t v126 = v146;
      uint64_t v128 = *((void *)&v141 + 1);
      uint64_t v17 = a5 + *((void *)&v144 + 1) + a2 * *((void *)&v147 + 1);
      uint64_t v18 = a5 + *((void *)&v145 + 1) + a2 * *((void *)&v147 + 1);
      while (1)
      {
        uint64_t v20 = a5 + v15 * a2;
        uint64_t v21 = *(void *)(v20 + v128);
        unint64_t v138 = a2;
        long long v22 = [v132 indirectComputeCommandAtIndex:a2];
        uint64_t v23 = v22;
        if (v21 == 64) {
          break;
        }
        if (v21 == 32)
        {
          uint64_t v24 = *(void *)(v20 + v119 + 16);
          long long v159 = *(_OWORD *)(v20 + v119);
          uint64_t v160 = v24;
          uint64_t v25 = *(void *)(v20 + v119 + 40);
          long long v157 = *(_OWORD *)(v20 + v119 + 24);
          uint64_t v158 = v25;
          [v22 concurrentDispatchThreadgroups:&v159 threadsPerThreadgroup:&v157];
          goto LABEL_11;
        }
        if (v21) {
          goto LABEL_13;
        }
        [v22 reset];
LABEL_33:

        a2 = v138 + 1;
        v17 += v15;
        v18 += v15;
        if (v138 + 1 == v130) {
          goto LABEL_34;
        }
      }
      uint64_t v26 = *(void *)(v20 + v119 + 16);
      long long v152 = *(_OWORD *)(v20 + v119);
      uint64_t v153 = v26;
      uint64_t v27 = *(void *)(v20 + v119 + 40);
      long long v150 = *(_OWORD *)(v20 + v119 + 24);
      uint64_t v151 = v27;
      [v22 concurrentDispatchThreads:&v152 threadsPerThreadgroup:&v150];
LABEL_11:
      long long v28 = *(_OWORD *)(v20 + v122 + 16);
      long long v154 = *(_OWORD *)(v20 + v122);
      long long v155 = v28;
      long long v156 = *(_OWORD *)(v20 + v122 + 32);
      [v23 setStageInRegion:&v154];
      if (*(unsigned char *)(v20 + v122 + 64)) {
        [v23 setBarrier];
      }
LABEL_13:
      long long v135 = v19;
      if (!v16[11])
      {
        uint64_t v29 = GTMTLIndirectResources_computePipelineIdForUniqueIdentifier(a6, *(void *)(v20 + v117));
        unint64_t v30 = GetObjectForKey(v14, v29);
        [v23 setComputePipelineState:v30];
      }
      if (v16[19]) {
        uint64_t v31 = v20 + v126;
      }
      else {
        uint64_t v31 = 0;
      }
      if (!v16[10])
      {
        unsigned __int8 v32 = v16[13];
        if (v32)
        {
          for (unint64_t i = 0; i < v32; ++i)
          {
            uint64_t v34 = *(void *)(v17 + 8 * i);
            if (v34)
            {
              id v35 = GTMTLGPUAddressResource_resourceForGPUAddress(*(void **)(*(void *)a6 + 24), *(int *)(*(void *)a6 + 12), *(void *)(v17 + 8 * i));
              if (v35)
              {
                uint64_t v36 = v34 - *v35;
                uint64_t v37 = v35[2];
              }
              else
              {
                uint64_t v36 = 0;
                uint64_t v37 = 0;
              }
              unsigned int v38 = GetObjectForKey(v14, v37);
              if (v31) {
                [v23 setKernelBuffer:v38 offset:v36 attributeStride:*(void *)(v31 + 8 * i) atIndex:i];
              }
              else {
                [v23 setKernelBuffer:v38 offset:v36 atIndex:i];
              }

              unsigned __int8 v32 = v16[13];
            }
          }
        }
      }
      uint64_t v19 = v135;
      if (v16[14])
      {
        unint64_t v39 = 0;
        do
        {
          [v23 setThreadgroupMemoryLength:*(void *)(v18 + 8 * v39) atIndex:v39];
          ++v39;
        }
        while (v39 < v16[14]);
      }
      goto LABEL_33;
    }
LABEL_34:

    uint64_t v40 = v132;
    goto LABEL_114;
  }
LABEL_115:
}

void GTMTLEncodeIndirectBufferBindings(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  id v18 = a1;
  id v11 = a6;
  if (a3)
  {
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = *(void *)(a2 + 8 * v12);
      if (v13)
      {
        id v14 = GTMTLGPUAddressResource_resourceForGPUAddress(*(void **)(*(void *)a5 + 24), *(int *)(*(void *)a5 + 12), *(void *)(a2 + 8 * v12));
        if (v14)
        {
          uint64_t v15 = v13 - *v14;
          uint64_t v16 = v14[2];
        }
        else
        {
          uint64_t v15 = 0;
          uint64_t v16 = 0;
        }
        uint64_t v17 = GetObjectForKey(v11, v16);
        if (v17)
        {
          switch(a4)
          {
            case 16:
              [v18 setMeshBuffer:v17 offset:v15 atIndex:v12];
              break;
            case 8:
              [v18 setObjectBuffer:v17 offset:v15 atIndex:v12];
              break;
            case 2:
              [v18 setFragmentBuffer:v17 offset:v15 atIndex:v12];
              break;
          }
        }
      }
      ++v12;
    }
    while (a3 != v12);
  }
}

uint64_t GTMTLCaptureStatistics_begin(uint64_t result)
{
  switch(*(_DWORD *)(result + 80))
  {
    case 0:
    case 1:
      goto LABEL_4;
    case 2:
    case 3:
      goto LABEL_2;
    case 4:
      uint64_t v1 = *(void *)result;
      if (*(void *)result) {
        goto LABEL_5;
      }
LABEL_2:
      result += 8;
LABEL_4:
      uint64_t v1 = *(void *)result;
LABEL_5:
      g_targetRef = v1;
      atomic_store(0, &g_frameCount);
      atomic_store(0, &g_frameOther);
      atomic_store(0, &g_commitCount);
      atomic_store(0, &g_commitOther);
      atomic_store(0, &g_resourceCount);
      atomic_store(0, &g_resourceDownloaded);
      atomic_store(0, &g_GPUDataSize);
      atomic_store(0, &g_GPUDataDownloaded);
      return result;
    case 5:
    case 6:
      result += 24;
      goto LABEL_4;
    default:
      uint64_t v1 = 0;
      goto LABEL_5;
  }
}

void GTMTLCaptureStatistics_end()
{
  g_targetRef = 0;
}

uint64_t GTMTLCaptureStatistics_trackPresent(uint64_t result)
{
  if (g_targetRef == result) {
    uint64_t v1 = &g_frameCount;
  }
  else {
    uint64_t v1 = &g_frameOther;
  }
  atomic_fetch_add((atomic_ullong *volatile)v1, 1uLL);
  return result;
}

uint64_t GTMTLCaptureStatistics_trackCommit(uint64_t result, uint64_t a2)
{
  BOOL v2 = g_targetRef == result || g_targetRef == a2;
  id v3 = &g_commitCount;
  if (!v2) {
    id v3 = &g_commitOther;
  }
  atomic_fetch_add((atomic_ullong *volatile)v3, 1uLL);
  return result;
}

unint64_t GTMTLCaptureStatistics_trackResources(unint64_t result)
{
  return result;
}

unint64_t GTMTLCaptureStatistics_trackResourcesDownloaded(unint64_t result)
{
  return result;
}

unint64_t GTMTLCaptureStatistics_trackGPUData(unint64_t result)
{
  return result;
}

unint64_t GTMTLCaptureStatistics_trackGPUDataDownloaded(unint64_t result)
{
  return result;
}

double GTMTLCaptureStatistics_stats@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  unint64_t v2 = atomic_load(&g_frameCount);
  unint64_t v3 = atomic_load(&g_frameOther);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  unint64_t v4 = atomic_load(&g_commitCount);
  unint64_t v5 = atomic_load(&g_commitOther);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  unint64_t v6 = atomic_load(&g_resourceCount);
  unint64_t v7 = atomic_load(&g_resourceDownloaded);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  unint64_t v8 = atomic_load(&g_GPUDataSize);
  unint64_t v9 = atomic_load(&g_GPUDataDownloaded);
  *(void *)(a1 + 48) = v8;
  *(void *)(a1 + 56) = v9;
  return result;
}

id LoadDynamicLibrariesForTileRenderPipelineDescriptor(void *a1)
{
  uint64_t v1 = deviceMTLTileRenderPipelineDescriptor(a1);
  unint64_t v2 = [v1 tileFunction];
  unint64_t v3 = DEVICEOBJECT(v2);

  unint64_t v4 = [v3 device];
  id v5 = objc_alloc_init((Class)NSMutableOrderedSet);
  unint64_t v6 = [v1 preloadedLibraries];
  LoadDynamicLibrariesForFunction(v4, v3, v6, v5);
  if (objc_opt_respondsToSelector())
  {
    unint64_t v7 = [v1 linkedFunctions];
    LoadDynamicLibrariesForLinkedFunctions(v4, v7, v6, v5);
  }
  unint64_t v8 = [v5 array];

  return v8;
}

void LoadDynamicLibrariesForFunction(void *a1, void *a2, void *a3, void *a4)
{
  id v11 = a1;
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v7 && (objc_opt_respondsToSelector() & 1) != 0 && (objc_opt_respondsToSelector() & 1) != 0)
  {
    id v10 = [v11 loadDynamicLibrariesForFunction:v7 insertLibraries:v8 error:0];
    [v9 addObjectsFromArray:v10];
  }
}

void LoadDynamicLibrariesForLinkedFunctions(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  id v11 = [v8 functions];
  id v12 = [v11 countByEnumeratingWithState:&v34 objects:v40 count:16];
  if (v12)
  {
    id v13 = v12;
    uint64_t v14 = *(void *)v35;
    do
    {
      uint64_t v15 = 0;
      do
      {
        if (*(void *)v35 != v14) {
          objc_enumerationMutation(v11);
        }
        LoadDynamicLibrariesForFunction(v7, *(void **)(*((void *)&v34 + 1) + 8 * (void)v15), v9, v10);
        uint64_t v15 = (char *)v15 + 1;
      }
      while (v13 != v15);
      id v13 = [v11 countByEnumeratingWithState:&v34 objects:v40 count:16];
    }
    while (v13);
  }

  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  uint64_t v16 = [v8 binaryFunctions];
  id v17 = [v16 countByEnumeratingWithState:&v30 objects:v39 count:16];
  if (v17)
  {
    id v18 = v17;
    uint64_t v19 = *(void *)v31;
    do
    {
      uint64_t v20 = 0;
      do
      {
        if (*(void *)v31 != v19) {
          objc_enumerationMutation(v16);
        }
        LoadDynamicLibrariesForFunction(v7, *(void **)(*((void *)&v30 + 1) + 8 * (void)v20), v9, v10);
        uint64_t v20 = (char *)v20 + 1;
      }
      while (v18 != v20);
      id v18 = [v16 countByEnumeratingWithState:&v30 objects:v39 count:16];
    }
    while (v18);
  }

  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  uint64_t v21 = objc_msgSend(v8, "privateFunctions", 0);
  id v22 = [v21 countByEnumeratingWithState:&v26 objects:v38 count:16];
  if (v22)
  {
    id v23 = v22;
    uint64_t v24 = *(void *)v27;
    do
    {
      uint64_t v25 = 0;
      do
      {
        if (*(void *)v27 != v24) {
          objc_enumerationMutation(v21);
        }
        LoadDynamicLibrariesForFunction(v7, *(void **)(*((void *)&v26 + 1) + 8 * (void)v25), v9, v10);
        uint64_t v25 = (char *)v25 + 1;
      }
      while (v23 != v25);
      id v23 = [v21 countByEnumeratingWithState:&v26 objects:v38 count:16];
    }
    while (v23);
  }
}

id LoadDynamicLibrariesForRenderPipelineDescriptor(void *a1)
{
  uint64_t v1 = deviceMTLRenderPipelineDescriptor(a1);
  unint64_t v2 = [v1 vertexFunction];
  unint64_t v3 = [v1 fragmentFunction];
  unint64_t v4 = v3;
  if (v2) {
    unint64_t v3 = v2;
  }
  id v5 = [v3 device];
  id v6 = objc_alloc_init((Class)NSMutableOrderedSet);
  if (objc_opt_respondsToSelector())
  {
    id v7 = [v1 vertexPreloadedLibraries];
  }
  else
  {
    id v7 = 0;
  }
  if (objc_opt_respondsToSelector())
  {
    id v8 = [v1 fragmentPreloadedLibraries];
  }
  else
  {
    id v8 = 0;
  }
  LoadDynamicLibrariesForFunction(v5, v2, v7, v6);
  LoadDynamicLibrariesForFunction(v5, v4, v8, v6);
  if (objc_opt_respondsToSelector())
  {
    id v9 = [v1 vertexLinkedFunctions];
    LoadDynamicLibrariesForLinkedFunctions(v5, v9, v7, v6);
  }
  if (objc_opt_respondsToSelector())
  {
    id v10 = [v1 fragmentLinkedFunctions];
    LoadDynamicLibrariesForLinkedFunctions(v5, v10, v8, v6);
  }
  id v11 = [v6 array];

  return v11;
}

void CaptureMTLDevice_initIndirectCommandBufferCopy(void *a1)
{
  uint64_t v1 = a1;
  unint64_t v2 = v1 + 6;
  dispatch_once_t v3 = v1[6];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = __CaptureMTLDevice_initIndirectCommandBufferCopy_block_invoke;
  block[3] = &unk_222120;
  id v6 = v1;
  unint64_t v4 = v1;
  if (v3 != -1) {
    dispatch_once(v2, block);
  }
}

void WaitForDevice(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void **)(GTTraceContext_getStream(a1, a2) + 16);
  id v3 = v2;
  if (v2)
  {
    unint64_t v4 = g_signpostLog;
    if (os_signpost_enabled((os_log_t)g_signpostLog))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&def_CFBEC, v4, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "Capture-WaitForDevice", (const char *)&unk_21C232, buf, 2u);
    }
    id v5 = [v3 dispatchGroup];
    dispatch_group_wait(v5, 0xFFFFFFFFFFFFFFFFLL);

    id v6 = g_signpostLog;
    if (os_signpost_enabled((os_log_t)g_signpostLog))
    {
      *(_WORD *)id v7 = 0;
      _os_signpost_emit_with_name_impl(&def_CFBEC, v6, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "Capture-WaitForDevice", (const char *)&unk_21C232, v7, 2u);
    }
  }
}

void DownloadFromDevice(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a2;
  id v5 = *(id *)(*(void *)(*find_entry(a1, &v6, 8uLL, 0) + 32) + 16);
  unint64_t v4 = [v5 downloader];
  [v4 downloadRequest:a3];
}

void CaptureMTLBuffer_registerBaseBufferForTracing(void *a1, uint64_t a2, int a3)
{
  id v10 = a1;
  if (ShouldRegisterBufferForTracing(v10))
  {
    id v5 = v10;
    GTMemoryGuard_registerRegion((unint64_t)[v5 contents], (vm_size_t)objc_msgSend(v5, "length"), a2, a3);
    uint64_t v6 = v10;
  }
  else
  {
    uint64_t v6 = v10;
    if (a2)
    {
      unint64_t v7 = atomic_load((unint64_t *)(a2 + 56));
      unint64_t v8 = v7;
      do
      {
        atomic_compare_exchange_strong((atomic_ullong *volatile)(a2 + 56), &v8, v7 | 8);
        BOOL v9 = v8 == v7;
        unint64_t v7 = v8;
      }
      while (!v9);
    }
  }
}

BOOL ShouldRegisterBufferForTracing(void *a1)
{
  id v1 = a1;
  unint64_t v2 = v1;
  if ((qword_2501C8 & 0x1000) != 0 && [v1 storageMode] != (char *)&def_CFBEC + 2)
  {
    unint64_t v4 = [v2 heap];
    BOOL v3 = v4 == 0;
  }
  else
  {
    BOOL v3 = 0;
  }

  return v3;
}

void CaptureMTLBuffer_registerForTracing(uint64_t a1, int a2)
{
  if (a1) {
    CaptureMTLBuffer_registerBaseBufferForTracing(*(void **)(a1 + 8), *(void *)(a1 + 48), a2);
  }
}

uint64_t GTMTLCaptureEnvironment_init()
{
  qword_2501C8 = qword_2501C8 & 0xFFFFFFFFFFFFFFFELL | GetEnvDefault("MTLCAPTURE_PRESENT_DOWNLOAD", 0) & 1;
  qword_2501C8 = qword_2501C8 & 0xFFFFFFFFFFFFFFFDLL | (2 * (GetEnvDefault("MTLCAPTURE_LOG_ERRORS", 0) & 1));
  qword_2501C8 = qword_2501C8 & 0xFFFFFFFFFFFFFFDFLL | (32 * (GetEnvDefault("MTLCAPTURE_HASH_DUPLICATE_FILES", 1) & 1));
  GT_ENV = GetEnvDefault("MTLCAPTURE_WAIT_EVENT_TIMEOUT", 90);
  qword_2501B8 = GetEnvDefault("MTLCAPTURE_MAX_DOWNLOAD_COMMAND_BUFFERS", 512);
  qword_2501C8 = qword_2501C8 & 0xFFFFFFFFFFFFF7FFLL | ((GetEnvDefault("MTLCAPTURE_DESTINATION_DEVELOPER_TOOLS_ENABLE", 0) & 1) << 11);
  qword_2501C8 = qword_2501C8 & 0xFFFFFFFFFFFFFFBFLL | ((GetEnvDefault("MTLCAPTURE_WAIT_FOR_SIGNAL", 0) & 1) << 6);
  qword_2501C8 = qword_2501C8 & 0xFFFFFFFFFFFFFEFFLL | ((GetEnvDefault("MTLCAPTURE_NO_METALFX_CAPTURE", 0) & 1) << 8);
  qword_2501C8 = qword_2501C8 & 0xFFFFFFFFFFFFFDFFLL | ((GetEnvDefault("MTLCAPTURE_DISABLE_HEAP_TEXTURE_COMPRESSION", 0) & 1) << 9);
  qword_2501C8 = qword_2501C8 & 0xFFFFFFFFFFFFFFFBLL | (4 * (GetEnvDefault("MTLCAPTURE_CAPTURE_ADS_BUFFER_SPI", 0) & 1));
  qword_2501C8 = qword_2501C8 & 0xFFFFFFFFFFFFFFEFLL | (16 * (GetEnvDefault("MTLCAPTURE_ADS_EXTRA_BUFFERS", 0) & 1));
  qword_2501B8 = GetEnvDefault("MTLCAPTURE_MAX_DOWNLOAD_COMMAND_BUFFERS", 512);
  qword_2501C8 = qword_2501C8 & 0xFFFFFFFFFFFFFFF7 | (8
                                                      * (GetEnvDefault("MTLCAPTURE_FORCE_RAYTRACING_ENABLE", 0) & 1));
  qword_2501C8 = qword_2501C8 & 0xFFFFFFFFFFFFFF7FLL | ((GetEnvDefault("MTLCAPTURE_IS_COMPOSITOR", 0) & 1) << 7);
  qword_2501C8 = qword_2501C8 & 0xFFFFFFFFFFFFFBFFLL | ((GetEnvDefault("MTLCAPTURE_ENABLE_DOWNLOADS_AT_EVENTS", 0) & 1) << 10);
  qword_2501C8 = qword_2501C8 & 0xFFFFFFFFFFFFEFFFLL | ((GetEnvDefault("MTLCAPTURE_ENABLE_MPROTECT", 0) & 1) << 12);
  qword_2501C8 = qword_2501C8 & 0xFFFFFFFFFFFFDFFFLL | ((GetEnvDefault("MTLCAPTURE_ENABLE_MPROTECT_BUFFER_SPLITTING", 0) & 1) << 13);
  qword_2501C8 = qword_2501C8 & 0xFFFFFFFFFFFFBFFFLL | ((GetEnvDefault("MTLCAPTURE_DISABLE_HEAPS", 0) & 1) << 14);
  qword_2501C8 = qword_2501C8 & 0xFFFFFFFFFFFF7FFFLL | ((GetEnvDefault("MTLCAPTURE_DISABLE_PLACEMENT_HEAPS", 0) & 1) << 15);
  qword_2501C8 = qword_2501C8 & 0xFFFFFFFFFFFEFFFFLL | ((GetEnvDefault("MTLCAPTURE_FORCE_WAIT_UNTIL_COMPLETED_ON_COMMIT", 0) & 1) << 16);
  qword_2501C8 = qword_2501C8 & 0xFFFFFFFFFFFDFFFFLL | ((GetEnvDefault("MTLCAPTURE_REDIRECT_LOGGING_TO_STREAMS", 0) & 1) << 17);
  qword_2501C8 = qword_2501C8 & 0xFFFFFFFFFFFBFFFFLL | ((GetEnvDefault("MTLCAPTURE_WITH_F12", 0) & 1) << 18);
  qword_2501C8 = qword_2501C8 & 0xFFFFFFFFFFF7FFFFLL | ((GetEnvDefault("MTLCAPTURE_SUPPORT_SUPERSEDING_LAYERS", 0) & 1) << 19);
  qword_2501C8 = qword_2501C8 & 0xFFFFFFFFFFEFFFFFLL | ((GetEnvDefault("MTLCAPTURE_DOWNLOADER_ENHANCED_COMMAND_BUFFER_ERRORS", 0) & 1) << 20);
  qword_2501C8 = qword_2501C8 & 0xFFFFFFFFFFDFFFFFLL | ((GetEnvDefault("MTLCAPTURE_DOWNLOADER_FORCE_SPLIT_COMMAND_ENCODERS", 0) & 1) << 21);
  uint64_t result = GetEnvDefault("MTLCAPTURE_ENABLE_DOWNLOADER_FULL_HEAPS", 0);
  qword_2501C8 = qword_2501C8 & 0xFFFFFFFFFFBFFFFFLL | ((unint64_t)(result & 1) << 22);
  return result;
}

uint64_t GetEnvDefault(const char *a1, uint64_t a2)
{
  BOOL v3 = getenv(a1);
  if (!v3) {
    return a2;
  }

  return strtol(v3, 0, 0);
}

void sub_34D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t IsEventActuallyShared(uint64_t a1)
{
  int v2 = *(_DWORD *)(*(void *)(a1 + 32) + 72);
  uint64_t result = 1;
  if (v2 <= -15910)
  {
    if (v2 != -15996)
    {
      if (v2 == -15912) {
        return result;
      }
      return 0;
    }
LABEL_7:
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4)
    {
      unsigned int v5 = 0;
      while (1)
      {
        unsigned int v6 = atomic_load((unsigned int *)(v4 + 4));
        uint64_t v7 = v5 + (v6 >> 6) - 1;
        if ((int)v7 > 0) {
          break;
        }
        uint64_t v4 = *(void *)(v4 + 40);
        unsigned int v5 = v7;
        if (!v4)
        {
          unsigned int v5 = v7;
          goto LABEL_14;
        }
      }
    }
    else
    {
      unsigned int v5 = 0;
    }
    uint64_t v7 = 0;
LABEL_14:
    unint64_t v8 = v5 | (unint64_t)(v7 << 32);
LABEL_15:
    uint64_t v9 = v4 + 64;
    while (v4 && (*(unsigned char *)(v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6) + 15) & 8) != 0)
    {
      if ((*(unsigned char *)(v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6) + 15) & 0x40) == 0)
      {
        int v10 = *(_DWORD *)(v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6) + 8);
        if (v10 == -15907 || v10 == -15488) {
          return 1;
        }
      }
      unsigned int v12 = atomic_load((unsigned int *)(v4 + 4));
      uint64_t v13 = (HIDWORD(v8) + 1);
      int v14 = v8 + (v12 >> 6) - 1;
      unint64_t v8 = (v13 << 32) | v8;
      if (v13 == v14)
      {
        unint64_t v8 = (v13 << 32) | v13;
        uint64_t v4 = *(void *)(v4 + 40);
        goto LABEL_15;
      }
    }
    return 0;
  }
  if (v2 != -15909)
  {
    if (v2 != -15496) {
      return 0;
    }
    goto LABEL_7;
  }
  return result;
}

id newDYMTLCaptureScopeInfo(void *a1)
{
  id v1 = a1;
  id v2 = objc_alloc_init((Class)DYGTMTLCaptureScopeInfo);
  BOOL v3 = [v1 device];
  [v2 setDeviceAddress:v3];

  uint64_t v4 = [v1 device];
  objc_msgSend(v2, "setDeviceStreamRef:", objc_msgSend(v4, "streamReference"));

  unsigned int v5 = [v1 commandQueue];
  if (v5)
  {
    unsigned int v6 = [v1 commandQueue];
    objc_msgSend(v2, "setCommandQueueStreamRef:", objc_msgSend(v6, "streamReference"));
  }
  else
  {
    [v2 setCommandQueueStreamRef:0];
  }

  [v2 setScopeAddress:v1];
  objc_msgSend(v2, "setScopeStreamRef:", objc_msgSend(v1, "streamReference"));
  uint64_t v7 = [v1 label];
  [v2 setLabel:v7];

  unint64_t v8 = +[MTLCaptureManager sharedCaptureManager];
  id v9 = [v8 defaultCaptureScope];
  [v2 setIsDefaultCapturable:v9 == v1];

  return v2;
}

void ResidencySetTakeSnapshotInternal(void *a1, char a2)
{
  BOOL v3 = a1;
  id v4 = v3;
  if ((a2 & 1) != 0 || (*(_DWORD *)(boundaryTrackerInstance + 20) & 0xFFFFFFFE) == 2)
  {
    if (!*((unsigned char *)v3 + 56))
    {
      uint64_t v5 = v3[5];
      unsigned int v6 = +[NSSet setWithArray:v3[6]];
      uint64_t v7 = NSSetDiff(v5, v6);
      unint64_t v8 = [v7 allObjects];

      id v9 = +[NSSet setWithArray:*((void *)v4 + 6)];
      int v10 = NSSetDiff((uint64_t)v9, *((void **)v4 + 5));
      id v11 = [v10 allObjects];

      s();
      uint64_t v13 = v12;
      *(unsigned char *)(v12 + 8) |= 0x80u;
      long long v69 = 0u;
      long long v70 = 0u;
      long long v68 = 0u;
      GTTraceContext_pushEncoderWithStream(*((void *)v4 + 3), (uint64_t)&v68);
      uint64_t v14 = v69;
      *(_DWORD *)(v69 + 8) = -15208;
      char v15 = BYTE9(v70);
      if (BYTE9(v70) > 0x38uLL)
      {
        uint64_t v17 = *(void *)(*((void *)&v68 + 1) + 24);
        uint64_t v18 = BYTE10(v70);
        ++BYTE10(v70);
        uint64_t v16 = GTTraceMemPool_allocateBytes(v17, *((uint64_t *)&v69 + 1), v18 | 0x800000000) + 16;
        char v15 = v18;
      }
      else
      {
        uint64_t v16 = (char *)(v14 + BYTE9(v70));
        BYTE9(v70) += 8;
      }
      *(unsigned char *)(v14 + 13) = v15;
      uint64_t v19 = (uint64_t *)[v4 traceStream];
      if (v19) {
        uint64_t v20 = *v19;
      }
      else {
        uint64_t v20 = 0;
      }
      *(void *)uint64_t v16 = v20;
      *(void *)uint64_t v13 = v70;
      *(unsigned char *)(v13 + 8) = BYTE8(v70);
      *(unsigned char *)(v69 + 15) |= 8u;
      if ([*((id *)v4 + 6) count])
      {
        long long v69 = 0u;
        long long v70 = 0u;
        long long v68 = 0u;
        GTTraceContext_pushEncoderWithStream(*((void *)v4 + 3), (uint64_t)&v68);
        uint64_t v21 = v69;
        *(_DWORD *)(v69 + 8) = -15211;
        char v22 = BYTE9(v70);
        if (BYTE9(v70) > 0x28uLL)
        {
          uint64_t v24 = *(void *)(*((void *)&v68 + 1) + 24);
          uint64_t v25 = BYTE10(v70);
          ++BYTE10(v70);
          id v23 = GTTraceMemPool_allocateBytes(v24, *((uint64_t *)&v69 + 1), v25 | 0x1800000000) + 16;
          char v22 = v25;
        }
        else
        {
          id v23 = (char *)(v21 + BYTE9(v70));
          BYTE9(v70) += 24;
        }
        *(unsigned char *)(v21 + 13) = v22;
        long long v26 = (uint64_t *)[v4 traceStream];
        if (v26) {
          uint64_t v27 = *v26;
        }
        else {
          uint64_t v27 = 0;
        }
        id v28 = [*((id *)v4 + 6) count];
        id v29 = [*((id *)v4 + 6) count];
        __chkstk_darwin(v29, 8 * (void)v29);
        long long v31 = (void *)((char *)&v68 - v30);
        bzero((char *)&v68 - v30, v32);
        char v33 = StreamNSArray((uint64_t)&v68, v31, *((void **)v4 + 6));
        *(void *)id v23 = v27;
        *((void *)v23 + 1) = v28;
        v23[16] = v33;
        *(_DWORD *)(v23 + 17) = 0;
        *((_DWORD *)v23 + 5) = 0;
        *(void *)uint64_t v13 = v70;
        *(unsigned char *)(v13 + 8) = BYTE8(v70);
        *(unsigned char *)(v69 + 15) |= 8u;
        long long v69 = 0u;
        long long v70 = 0u;
        long long v68 = 0u;
        GTTraceContext_pushEncoderWithStream(*((void *)v4 + 3), (uint64_t)&v68);
        uint64_t v34 = v69;
        *(_DWORD *)(v69 + 8) = -15220;
        char v35 = BYTE9(v70);
        if (BYTE9(v70) > 0x38uLL)
        {
          uint64_t v37 = *(void *)(*((void *)&v68 + 1) + 24);
          uint64_t v38 = BYTE10(v70);
          ++BYTE10(v70);
          long long v36 = GTTraceMemPool_allocateBytes(v37, *((uint64_t *)&v69 + 1), v38 | 0x800000000) + 16;
          char v35 = v38;
        }
        else
        {
          long long v36 = (char *)(v34 + BYTE9(v70));
          BYTE9(v70) += 8;
        }
        *(unsigned char *)(v34 + 13) = v35;
        unint64_t v39 = (uint64_t *)[v4 traceStream];
        if (v39) {
          uint64_t v40 = *v39;
        }
        else {
          uint64_t v40 = 0;
        }
        *(void *)long long v36 = v40;
        *(void *)uint64_t v13 = v70;
        *(unsigned char *)(v13 + 8) = BYTE8(v70);
        *(unsigned char *)(v69 + 15) |= 8u;
      }
      if ([v8 count])
      {
        long long v69 = 0u;
        long long v70 = 0u;
        long long v68 = 0u;
        GTTraceContext_pushEncoderWithStream(*((void *)v4 + 3), (uint64_t)&v68);
        uint64_t v41 = v69;
        *(_DWORD *)(v69 + 8) = -15211;
        char v42 = BYTE9(v70);
        if (BYTE9(v70) > 0x28uLL)
        {
          uint64_t v44 = *(void *)(*((void *)&v68 + 1) + 24);
          uint64_t v45 = BYTE10(v70);
          ++BYTE10(v70);
          id v43 = GTTraceMemPool_allocateBytes(v44, *((uint64_t *)&v69 + 1), v45 | 0x1800000000) + 16;
          char v42 = v45;
        }
        else
        {
          id v43 = (char *)(v41 + BYTE9(v70));
          BYTE9(v70) += 24;
        }
        *(unsigned char *)(v41 + 13) = v42;
        unsigned int v46 = (uint64_t *)[v4 traceStream];
        if (v46) {
          uint64_t v47 = *v46;
        }
        else {
          uint64_t v47 = 0;
        }
        id v48 = [v8 count];
        id v49 = [v8 count];
        __chkstk_darwin(v49, 8 * (void)v49);
        unint64_t v51 = (void *)((char *)&v68 - v50);
        bzero((char *)&v68 - v50, v52);
        char v53 = StreamNSArray((uint64_t)&v68, v51, v8);
        *(void *)id v43 = v47;
        *((void *)v43 + 1) = v48;
        v43[16] = v53;
        *(_DWORD *)(v43 + 17) = 0;
        *((_DWORD *)v43 + 5) = 0;
        *(void *)uint64_t v13 = v70;
        *(unsigned char *)(v13 + 8) = BYTE8(v70);
        *(unsigned char *)(v69 + 15) |= 8u;
      }
      if ([v11 count])
      {
        long long v69 = 0u;
        long long v70 = 0u;
        long long v68 = 0u;
        GTTraceContext_pushEncoderWithStream(*((void *)v4 + 3), (uint64_t)&v68);
        uint64_t v54 = v69;
        *(_DWORD *)(v69 + 8) = -15206;
        char v55 = BYTE9(v70);
        if (BYTE9(v70) > 0x28uLL)
        {
          uint64_t v58 = *(void *)(*((void *)&v68 + 1) + 24);
          uint64_t v59 = BYTE10(v70);
          ++BYTE10(v70);
          uint64_t v56 = GTTraceMemPool_allocateBytes(v58, *((uint64_t *)&v69 + 1), v59 | 0x1800000000) + 16;
          char v55 = v59;
        }
        else
        {
          uint64_t v56 = (char *)(v54 + BYTE9(v70));
          BYTE9(v70) += 24;
        }
        *(unsigned char *)(v54 + 13) = v55;
        uint64_t v60 = (uint64_t *)[v4 traceStream];
        if (v60) {
          uint64_t v61 = *v60;
        }
        else {
          uint64_t v61 = 0;
        }
        id v62 = [v11 count];
        id v63 = [v11 count];
        __chkstk_darwin(v63, 8 * (void)v63);
        unint64_t v65 = (void *)((char *)&v68 - v64);
        bzero((char *)&v68 - v64, v66);
        char v67 = StreamNSArray((uint64_t)&v68, v65, v11);
        *(void *)uint64_t v56 = v61;
        *((void *)v56 + 1) = v62;
        v56[16] = v67;
        *(_DWORD *)(v56 + 17) = 0;
        *((_DWORD *)v56 + 5) = 0;
        *(void *)uint64_t v13 = v70;
        char v57 = BYTE8(v70);
        *(unsigned char *)(v69 + 15) |= 8u;
      }
      else
      {
        char v57 = *(unsigned char *)(v13 + 8);
      }
      *(unsigned char *)(v13 + 8) = v57 & 0x7F;
      *((unsigned char *)v4 + 56) = 1;
    }
  }
  else
  {
    *((unsigned char *)v3 + 56) = 0;
  }
}

id NSSetDiff(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[NSMutableSet setWithSet:a1];
  [v4 minusSet:v3];

  return v4;
}

void ResidencySetTakeSnapshot(void *a1)
{
}

void ResidencySetTakeSnapshotForce(void *a1)
{
}

BOOL GTCaptureBoundaryCondition_equals(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2
      && *(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4)
      && *(void *)(a1 + 8) == *(void *)(a2 + 8)
      && *(void *)(a1 + 16) == *(void *)(a2 + 16)
      && *(void *)(a1 + 24) == *(void *)(a2 + 24)
      && *(void *)(a1 + 32) == *(void *)(a2 + 32)
      && *(void *)(a1 + 40) == *(void *)(a2 + 40)
      && *(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 48);
}

void *GTCapturePhase_create(apr_pool_t *a1)
{
  id v2 = apr_palloc(a1, 0x10uLL);
  *id v2 = a1;
  v2[1] = apr_array_make(a1, 0, 64);
  return v2;
}

uint64_t GTCapturePhase_resetHitCount(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  uint64_t v2 = *(unsigned int *)(v1 + 12);
  if ((int)v2 >= 1)
  {
    id v3 = (_DWORD *)(*(void *)(v1 + 24) + 60);
    do
    {
      *id v3 = 0;
      v3 += 16;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t GTCapturePhase_removeAllConditions(uint64_t result)
{
  *(_DWORD *)(*(void *)(result + 8) + 12) = 0;
  return result;
}

__n128 GTCapturePhase_addCondition(uint64_t a1, __n128 *a2)
{
  id v3 = (__n128 *)apr_array_push(*(apr_array_header_t **)(a1 + 8));
  __n128 result = a2[2];
  __n128 v5 = a2[3];
  __n128 v7 = *a2;
  __n128 v6 = a2[1];
  v3[2] = result;
  v3[3] = v5;
  *id v3 = v7;
  v3[1] = v6;
  return result;
}

BOOL GTCapturePhase_isComplete(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  unint64_t v2 = *(unsigned int *)(v1 + 12);
  if (!v2) {
    return 1;
  }
  if ((int)v2 < 1) {
    return 0;
  }
  id v3 = *(_DWORD **)(v1 + 24);
  if (v3[15] >= v3[14]) {
    return 1;
  }
  unint64_t v4 = 0;
  __n128 v5 = v3 + 31;
  while (v2 - 1 != v4)
  {
    unsigned int v6 = *(v5 - 1);
    unsigned int v7 = *v5;
    v5 += 16;
    ++v4;
    if (v7 >= v6) {
      return v4 < v2;
    }
  }
  unint64_t v4 = v2;
  return v4 < v2;
}

uint64_t GTCapturePhase_numConditions(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 8) + 12);
}

__n128 GTCapturePhase_getCondition@<Q0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 8) + 24) + ((uint64_t)a2 << 6);
  long long v4 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)a3 = *(_OWORD *)v3;
  *(_OWORD *)(a3 + 16) = v4;
  __n128 result = *(__n128 *)(v3 + 32);
  long long v6 = *(_OWORD *)(v3 + 48);
  *(__n128 *)(a3 + 32) = result;
  *(_OWORD *)(a3 + 48) = v6;
  return result;
}

uint64_t GTCapturePhase_findCondition(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(unsigned int *)(v2 + 12);
  if ((int)v3 < 1) {
    return 0;
  }
  for (uint64_t i = *(void *)(v2 + 24); !GTCaptureBoundaryCondition_equals(i, a2); i += 64)
  {
    if (!--v3) {
      return 0;
    }
  }
  return i;
}

uint64_t GTCapturePhase_findConditionWithTriggerType(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(unsigned int *)(v2 + 12);
  if ((int)v3 < 1) {
    return 0;
  }
  uint64_t v4 = 0;
  uint64_t v5 = *(void *)(v2 + 24);
  long long v6 = (int *)(v5 + 4);
  while (1)
  {
    int v7 = *v6;
    v6 += 16;
    if (v7 == a2) {
      break;
    }
    if (v3 == ++v4) {
      return 0;
    }
  }
  return v5 + (v4 << 6);
}

uint64_t GTCapturePhase_checkTrigger(uint64_t a1, int *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(unsigned int *)(v2 + 12);
  if ((int)v3 >= 1)
  {
    char v4 = 0;
    uint64_t v5 = *(void *)(v2 + 24);
    uint64_t v6 = *((void *)a2 + 4);
    uint64_t v7 = *((void *)a2 + 5);
    uint64_t v8 = *((void *)a2 + 6);
    uint64_t v9 = *((void *)a2 + 7);
    uint64_t v10 = *((void *)a2 + 8);
    int v11 = *((unsigned __int8 *)a2 + 72);
    int v12 = *a2;
    for (uint64_t i = (uint64_t *)(v5 + 32); ; i += 8)
    {
      int v14 = *((_DWORD *)i - 8);
      if (v12 != v14 && v14 != 1) {
        goto LABEL_35;
      }
      int v16 = *((_DWORD *)i - 7);
      uint64_t v18 = *(i - 1);
      uint64_t v17 = *i;
      uint64_t v19 = i[1];
      if (v16)
      {
        if (a2[1] != v16) {
          goto LABEL_35;
        }
      }
      if (v14 == 8)
      {
        if (v18 && v18 != v7) {
          goto LABEL_35;
        }
        if (v17 && v17 != v9) {
          goto LABEL_35;
        }
        BOOL v20 = *((unsigned char *)i + 16) && v11 == 0;
        BOOL v21 = !v20;
        BOOL v22 = v19 == v10 || v19 == 0;
        if (!v22 || !v21) {
          goto LABEL_35;
        }
      }
      else if (v14 == 3)
      {
        if (v16 == 3 && v8 != *(i - 3)) {
          goto LABEL_35;
        }
      }
      else if (v14 == 2 && *(i - 2) != v6)
      {
        goto LABEL_35;
      }
      ++*((_DWORD *)i + 7);
      int v12 = *a2;
      char v4 = 1;
LABEL_35:
      if (!--v3) {
        return v4 & 1;
      }
    }
  }
  char v4 = 0;
  return v4 & 1;
}

id GTMTLQL_EncodeSamplerState(uint64_t a1, void *a2)
{
  id v3 = a2;
  char v4 = [v3 traceStream];
  long long v46 = 0u;
  uint64_t v47 = 0;
  long long v50 = 0u;
  long long v49 = 0u;
  LODWORD(v46) = 75;
  uint64_t v48 = -1;
  uint64_t v52 = 0;
  long long v51 = 0xFFFFFFFFFFFFFFFFLL;
  uint64_t v5 = v4[4];
  if (v5 && (*(unsigned char *)(v5 + 79) & 8) != 0) {
    uint64_t v6 = v5 + 64;
  }
  else {
    uint64_t v6 = 0;
  }
  GTMTLSMSamplerState_processTraceFuncWithPool((char *)&v46, v4[3], v6);
  uint64_t v7 = *(void *)(GTTraceContext_getStream(a1, *((uint64_t *)&v46 + 1)) + 8);
  uint64_t v8 = *(void *)(GTTraceContext_getStream(a1, *((uint64_t *)&v49 + 1)) + 8);
  uint64_t v9 = [v3 device];

  id v10 = objc_alloc_init((Class)NSMutableData);
  uint64_t v45 = 0x4005053544DLL;
  [v10 appendBytes:&v45 length:8];
  uint64_t v40 = v8;
  int v41 = 7;
  long long v42 = 0u;
  long long v43 = 0u;
  int v44 = 0;
  DWORD1(v42) = 2;
  DYTraceEncode_InternalData((uint64_t)&v40, (unsigned int *)&v53, 0x400uLL, v11, 0);
  LODWORD(v57) = v57 | 0x46;
  [v10 appendBytes:&v53 length:v53];
  int v12 = +[NSMutableDictionary dictionaryWithDictionary:&off_226EA8];
  uint64_t v13 = [v9 traceStream];
  if (v13 && (uint64_t v14 = v13[4]) != 0 && (*(unsigned char *)(v14 + 79) & 8) != 0) {
    uint64_t v15 = v14 + 64;
  }
  else {
    uint64_t v15 = 0;
  }
  long long v36 = 0u;
  uint64_t v37 = 0;
  long long v39 = 0u;
  LODWORD(v36) = 36;
  uint64_t v38 = -1;
  GTMTLSMDevice_processTraceFuncWithPool((char *)&v36, *((void *)[v9 traceStream] + 3), v15);
  int v16 = SaveDeviceDescriptor(*((uint64_t *)&v39 + 1), v12);
  uint64_t v17 = *(void *)(GTTraceContext_getStream(a1, (uint64_t)[v9 streamReference]) + 8);
  id v18 = v16;
  uint64_t v19 = (const char *)[v18 UTF8String];
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  uint64_t v57 = 0x554300000000;
  uint64_t v58 = v17;
  unint64_t v53 = 0xFFFFD80100000030;
  AppendString(v19, (int *)&v53);
  uint64_t v20 = (v53 + 3) & 0xFFFFFFFC;
  bzero((char *)&v53 + v53, v20 - v53);
  LODWORD(v53) = v20;
  [v10 appendBytes:&v53 length:v20];

  uint64_t v21 = v50;
  id v22 = v12;
  unint64_t v23 = EncodeDYMTLSamplerDescriptor(v21, 0, 0);
  id v24 = [objc_alloc((Class)NSMutableData) initWithLength:v23];
  EncodeDYMTLSamplerDescriptor(v21, (uint64_t)[v24 mutableBytes], v23);
  uint64_t v25 = HashDataBytes(v24);
  id v26 = [v24 copy];
  [v22 setObject:v26 forKeyedSubscript:v25];

  v35[0] = v8;
  v35[1] = v7;
  id v27 = v25;
  v35[2] = [v27 UTF8String];
  DYTraceEncode_MTLDevice_newSamplerStateWithDescriptor((uint64_t)v35, (unsigned int *)&v53, 0x400uLL, 0, 0);
  [v10 appendBytes:&v53 length:v53];
  if ((void)v51)
  {
    uint64_t v54 = 0;
    uint64_t v55 = 0;
    uint64_t v56 = 0;
    uint64_t v57 = 0x77754300000004;
    uint64_t v58 = v7;
    uint64_t v59 = v51;
    unint64_t v53 = 0xFFFFD80E00000038;
    [v10 appendBytes:&v53 length:56];
  }
  id v28 = [v10 copy];
  [v22 setObject:v28 forKeyedSubscript:@"capture"];

  id v34 = 0;
  id v29 = +[NSKeyedArchiver archivedDataWithRootObject:v22 requiringSecureCoding:1 error:&v34];
  id v30 = v34;
  long long v31 = v30;
  if (v30)
  {
    size_t v32 = [v30 localizedDescription];
    NSLog(@"Failed to encode datatip data: %@", v32);
  }

  return v29;
}

id SaveDeviceDescriptor(uint64_t a1, void *a2)
{
  id v3 = a2;
  unint64_t v4 = EncodeDYMTLDeviceDescriptor(a1, 0, 0);
  id v5 = [objc_alloc((Class)NSMutableData) initWithLength:v4];
  EncodeDYMTLDeviceDescriptor(a1, [v5 mutableBytes], v4);
  uint64_t v6 = HashDataBytes(v5);
  id v7 = [v5 copy];
  [v3 setObject:v7 forKeyedSubscript:v6];

  return v6;
}

id HashDataBytes(void *a1)
{
  id v1 = a1;
  CC_SHA256([v1 bytes], (CC_LONG)objc_msgSend(v1, "length"), md);
  uint64_t v2 = 0;
  id v3 = v8;
  do
  {
    unint64_t v4 = md[v2];
    *(v3 - 1) = byte_1DA2B0[v4 >> 4];
    *id v3 = byte_1DA2B0[v4 & 0xF];
    v3 += 2;
    ++v2;
  }
  while (v2 != 32);
  v8[63] = 0;
  id v5 = [objc_alloc((Class)NSString) initWithUTF8String:&v7];

  return v5;
}

id GTMTLQL_EncodeBuffer(uint64_t a1, void *a2)
{
  id v3 = a2;
  unint64_t v4 = [v3 traceStream];
  long long v54 = 0u;
  uint64_t v55 = 0;
  long long v61 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v60 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  LODWORD(v54) = 22;
  uint64_t v56 = -1;
  WORD1(v61) = 2;
  long long v59 = 0xFFFFFFFFFFFFFFFFLL;
  long long v62 = 0xFFFFFFFFFFFFFFFFLL;
  uint64_t v5 = v4[4];
  if (v5 && (*(unsigned char *)(v5 + 79) & 8) != 0) {
    uint64_t v6 = v5 + 64;
  }
  else {
    uint64_t v6 = 0;
  }
  GTMTLSMBuffer_processTraceFuncWithPool((char *)&v54, v4[3], v6);
  uint64_t v36 = *(void *)(GTTraceContext_getStream(a1, *((uint64_t *)&v54 + 1)) + 8);
  uint64_t v37 = *(void *)(GTTraceContext_getStream(a1, *((uint64_t *)&v57 + 1)) + 8);
  char v7 = [v3 device];
  id v8 = objc_alloc_init((Class)NSMutableData);
  uint64_t v53 = 0x4005053544DLL;
  [v8 appendBytes:&v53 length:8];
  uint64_t v48 = v37;
  long long v50 = 0u;
  long long v51 = 0u;
  int v52 = 0;
  int v49 = 7;
  DWORD1(v50) = 2;
  DYTraceEncode_InternalData((uint64_t)&v48, (unsigned int *)v65, 0x400uLL, v9, 0);
  LODWORD(v66) = v66 | 0x46;
  [v8 appendBytes:v65 length:LODWORD(v65[0])];
  id v10 = +[NSMutableDictionary dictionaryWithDictionary:&off_226ED0];
  uint64_t v11 = [v7 traceStream];
  if (v11 && (uint64_t v12 = v11[4]) != 0 && (*(unsigned char *)(v12 + 79) & 8) != 0) {
    uint64_t v13 = v12 + 64;
  }
  else {
    uint64_t v13 = 0;
  }
  long long v44 = 0u;
  uint64_t v45 = 0;
  long long v47 = 0u;
  LODWORD(v44) = 36;
  uint64_t v46 = -1;
  GTMTLSMDevice_processTraceFuncWithPool((char *)&v44, *((void *)[v7 traceStream] + 3), v13);
  uint64_t v14 = SaveDeviceDescriptor(*((uint64_t *)&v47 + 1), v10);
  uint64_t v15 = *(void *)(GTTraceContext_getStream(a1, (uint64_t)[v7 streamReference]) + 8);
  id v16 = v14;
  uint64_t v17 = (const char *)[v16 UTF8String];
  memset(&v65[1], 0, 24);
  uint64_t v66 = 0x554300000000;
  uint64_t v67 = v15;
  v65[0] = 0xFFFFD80100000030;
  AppendString(v17, (int *)v65);
  uint64_t v18 = (LODWORD(v65[0]) + 3) & 0xFFFFFFFC;
  bzero((char *)v65 + LODWORD(v65[0]), v18 - LODWORD(v65[0]));
  LODWORD(v65[0]) = v18;
  [v8 appendBytes:v65 length:v18];

  newpool = 0;
  apr_pool_create_ex(&newpool, 0, 0, 0);
  uint64_t v19 = newpool;
  uint64_t v20 = apr_array_make(newpool, 1, 88);
  uint64_t v21 = (char *)apr_array_push(v20);
  id v22 = [v3 streamReference];
  *(void *)uint64_t v21 = v36;
  *((void *)v21 + 1) = v22;
  *((void *)v21 + 3) = 0;
  *((void *)v21 + 4) = 0;
  *((void *)v21 + 2) = 0;
  *(void *)(v21 + 38) = 0;
  v21[46] = 22;
  *(_OWORD *)(v21 + 47) = 0u;
  *(_OWORD *)(v21 + 63) = 0u;
  *(_OWORD *)(v21 + 72) = 0u;
  unint64_t v23 = GTResourceDownloaderProcessRequest(v19, (uint64_t)v20);
  elts = v23->elts;
  uint64_t v25 = [v7 downloader];
  id v26 = [GTDownloadContext alloc];
  id v27 = [v25 downloadQueue];
  id v28 = [(GTDownloadContext *)v26 initWithQueue:v27 forRequest:v23];

  DownloadBuffer(v25, v28, elts);
  apr_pool_destroy(v19);
  *(void *)&long long v44 = 0;
  *((void *)&v44 + 1) = &v44;
  uint64_t v45 = 0x3032000000;
  uint64_t v46 = (uint64_t)__Block_byref_object_copy__2462;
  *(void *)&long long v47 = __Block_byref_object_dispose__2463;
  *((void *)&v47 + 1) = 0;
  v40[0] = _NSConcreteStackBlock;
  v40[1] = 3221225472;
  v40[2] = __GTMTLQL_EncodeBuffer_block_invoke;
  v40[3] = &unk_221918;
  long long v42 = &v44;
  id v29 = v10;
  id v41 = v29;
  [(GTDownloadContext *)v28 flushWithCallback:v40];
  v39[0] = v37;
  v39[1] = v36;
  v39[2] = [*(id *)(*((void *)&v44 + 1) + 40) UTF8String];
  v39[3] = *((void *)&v61 + 1);
  v39[4] = 0;
  v39[5] = 0;
  DYTraceEncode_MTLDevice_newBufferWithBytes_length_options((uint64_t)v39, (unsigned int *)v65, 0x400uLL, 0, 0);
  [v8 appendBytes:v65 length:LODWORD(v65[0])];
  id v30 = [v8 copy];
  [v29 setObject:v30 forKeyedSubscript:@"capture"];

  id v38 = 0;
  long long v31 = +[NSKeyedArchiver archivedDataWithRootObject:v29 requiringSecureCoding:1 error:&v38];
  id v32 = v38;
  char v33 = v32;
  if (v32)
  {
    id v34 = [v32 localizedDescription];
    NSLog(@"Failed to encode datatip data: %@", v34);
  }
  _Block_object_dispose(&v44, 8);

  return v31;
}

void sub_3E9F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

uint64_t __Block_byref_object_copy__2462(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__2463(uint64_t a1)
{
}

id GTMTLQL_EncodeTexture(uint64_t a1, void *a2)
{
  id v3 = a2;
  unint64_t v4 = [v3 traceStream];
  long long v82 = 0u;
  uint64_t v83 = 0;
  long long v94 = 0u;
  long long v95 = 0u;
  long long v92 = 0u;
  long long v93 = 0u;
  long long v90 = 0u;
  long long v91 = 0u;
  long long v88 = 0u;
  long long v89 = 0u;
  long long v86 = 0u;
  long long v85 = 0u;
  LODWORD(v82) = 80;
  uint64_t v84 = -1;
  WORD1(v89) = 2;
  long long v87 = 0xFFFFFFFFFFFFFFFFLL;
  uint64_t v96 = 0xFFFFFFFFLL;
  uint64_t v5 = v4[4];
  if (v5 && (*(unsigned char *)(v5 + 79) & 8) != 0) {
    uint64_t v6 = v5 + 64;
  }
  else {
    uint64_t v6 = 0;
  }
  GTMTLSMTexture_processTraceFuncWithPool((char *)&v82, v4[3], v6);
  uint64_t v7 = *(void *)(GTTraceContext_getStream(a1, *((uint64_t *)&v82 + 1)) + 8);
  uint64_t v8 = *(void *)(GTTraceContext_getStream(a1, *((uint64_t *)&v85 + 1)) + 8);
  uint64_t v9 = [v3 device];
  id v10 = objc_alloc_init((Class)NSMutableData);
  uint64_t v81 = 0x4005053544DLL;
  [v10 appendBytes:&v81 length:8];
  uint64_t v76 = v8;
  long long v78 = 0u;
  long long v79 = 0u;
  int v80 = 0;
  int v77 = 7;
  DWORD1(v78) = 2;
  DYTraceEncode_InternalData((uint64_t)&v76, (unsigned int *)v97, 0x400uLL, v11, 0);
  LODWORD(v98) = v98 | 0x46;
  [v10 appendBytes:v97 length:LODWORD(v97[0])];
  uint64_t v12 = +[NSMutableDictionary dictionaryWithDictionary:&off_226EF8];
  uint64_t v13 = [v9 traceStream];
  if (v13 && (uint64_t v14 = v13[4]) != 0 && (*(unsigned char *)(v14 + 79) & 8) != 0) {
    uint64_t v15 = v14 + 64;
  }
  else {
    uint64_t v15 = 0;
  }
  *(_OWORD *)__str = 0u;
  *(void *)&long long v101 = 0;
  long long v102 = 0u;
  *(_DWORD *)__str = 36;
  *((void *)&v101 + 1) = -1;
  GTMTLSMDevice_processTraceFuncWithPool(__str, *((void *)[v9 traceStream] + 3), v15);
  id v16 = SaveDeviceDescriptor(*((uint64_t *)&v102 + 1), v12);
  uint64_t v17 = *(void *)(GTTraceContext_getStream(a1, (uint64_t)[v9 streamReference]) + 8);
  id v18 = v16;
  uint64_t v19 = (const char *)[v18 UTF8String];
  memset(&v97[1], 0, 24);
  uint64_t v98 = 0x554300000000;
  uint64_t v99 = v17;
  v97[0] = 0xFFFFD80100000030;
  AppendString(v19, (int *)v97);
  uint64_t v20 = (LODWORD(v97[0]) + 3) & 0xFFFFFFFC;
  bzero((char *)v97 + LODWORD(v97[0]), v20 - LODWORD(v97[0]));
  LODWORD(v97[0]) = v20;
  [v10 appendBytes:v97 length:v20];

  newpool = 0;
  apr_pool_create_ex(&newpool, 0, 0, 0);
  uint64_t v21 = newpool;
  id v22 = apr_array_make(newpool, 1, 88);
  unint64_t v23 = (char *)apr_array_push(v22);
  id v24 = [v3 streamReference];
  *(void *)unint64_t v23 = v7;
  *((void *)v23 + 1) = v24;
  *((void *)v23 + 3) = 0;
  *((void *)v23 + 4) = 0;
  *((void *)v23 + 2) = 0;
  *(void *)(v23 + 38) = 0;
  v23[46] = 80;
  *(_OWORD *)(v23 + 47) = 0u;
  *(_OWORD *)(v23 + 63) = 0u;
  *(_OWORD *)(v23 + 72) = 0u;
  p = v21;
  id v25 = v3;
  id v26 = GTResourceDownloaderProcessRequest(v21, (uint64_t)v22);
  long long v57 = v9;
  id v27 = [v9 downloader];
  id v28 = [GTDownloadContext alloc];
  id v29 = v27;
  id v30 = [v27 downloadQueue];
  long long v58 = [(GTDownloadContext *)v28 initWithQueue:v30 forRequest:v26];

  uint64_t elts = (uint64_t)v26->elts;
  v74[0] = v8;
  v74[1] = v7;
  v74[2] = "descriptor";
  v74[3] = 0;
  DYTraceEncode_MTLDevice_newTextureWithDescriptor((uint64_t)v74, (unsigned int *)v97, 0x400uLL, 0, 0);
  [v10 appendBytes:v97 length:LODWORD(v97[0])];
  long long v59 = v25;
  while ((objc_opt_respondsToSelector() & 1) != 0)
    id v25 = [v25 performSelector:"baseObject"];
  char v33 = MakeMTLTextureDescriptorFromTextureWithoutResourceIndex(v25);
  uint64_t v73 = 0;
  memset(v72, 0, sizeof(v72));
  uint64_t v127 = 0;
  long long v126 = 0u;
  long long v125 = 0u;
  long long v124 = 0u;
  long long v123 = 0u;
  long long v122 = 0u;
  long long v121 = 0u;
  long long v120 = 0u;
  long long v119 = 0u;
  long long v118 = 0u;
  long long v117 = 0u;
  long long v116 = 0u;
  uint64_t v114 = 0;
  long long v113 = 0u;
  long long v112 = 0u;
  long long v111 = 0u;
  long long v110 = 0u;
  long long v109 = 0u;
  long long v108 = 0u;
  long long v107 = 0u;
  long long v106 = 0u;
  long long v105 = 0u;
  long long v104 = 0u;
  long long v103 = 0u;
  long long v102 = 0u;
  long long v101 = 0u;
  *(_OWORD *)__str = 0u;
  id v115 = v72;
  TranslateGTMTLTextureDescriptor(v33, (uint64_t)__str, 1);
  unint64_t v34 = EncodeDYMTLTextureDescriptor((uint64_t)v72, 0, 0);
  id v35 = +[NSMutableData dataWithLength:v34];
  EncodeDYMTLTextureDescriptor((uint64_t)v72, [v35 mutableBytes], v34);
  [v12 setObject:v35 forKeyedSubscript:@"descriptor"];

  int v36 = *(unsigned __int8 *)(elts + 46);
  if (v36 == 86)
  {
    uint64_t v37 = v29;
    id v38 = v58;
    DownloadIOSurface(v29, v58, (id *)elts);
    v61[0] = _NSConcreteStackBlock;
    v61[1] = 3221225472;
    v61[2] = __GTMTLQL_EncodeTexture_block_invoke_2;
    v61[3] = &unk_221968;
    uint64_t v40 = &v62;
    id v62 = v59;
    id v63 = v12;
    unint64_t v65 = v97;
    uint64_t v66 = 1024;
    id v64 = v10;
    [(GTDownloadContext *)v58 flushWithCallback:v61];

    long long v39 = p;
  }
  else
  {
    uint64_t v37 = v29;
    id v38 = v58;
    long long v39 = p;
    if (v36 != 80) {
      goto LABEL_20;
    }
    DownloadTexture(v37, v58, (id *)elts, v26->nelts);
    v70[0] = _NSConcreteStackBlock;
    v70[1] = 3221225472;
    v70[2] = __GTMTLQL_EncodeTexture_block_invoke;
    v70[3] = &unk_221940;
    uint64_t v40 = &v71;
    id v71 = v12;
    [(GTDownloadContext *)v58 flushWithCallback:v70];
    if (v26->nelts >= 1)
    {
      uint64_t v41 = 0;
      uint64_t v42 = 68;
      do
      {
        long long v43 = v26->elts;
        GTResourceDownloaderGetResourceFilename(elts, v41, __str, 0x80uLL);
        uint64_t v44 = *(unsigned int *)&v43[v42 - 16];
        v67[0] = 0;
        v67[1] = v44;
        uint64_t v45 = *(unsigned __int16 *)&v43[v42 - 10];
        v67[2] = *(unsigned __int16 *)&v43[v42 - 12];
        v67[3] = v45;
        uint64_t v46 = *(unsigned __int16 *)&v43[v42 - 4];
        v67[4] = *(unsigned int *)&v43[v42 - 8];
        v67[5] = v46;
        uint64_t v47 = *(unsigned __int16 *)&v43[v42 - 18];
        v67[6] = *(unsigned __int16 *)&v43[v42 - 2];
        v67[7] = v47;
        v67[8] = *(unsigned __int16 *)&v43[v42 - 20];
        v67[9] = __str;
        uint64_t v48 = *(void *)&v43[v42];
        *(void *)&long long v49 = v48;
        *((void *)&v49 + 1) = HIDWORD(v48);
        long long v68 = v49;
        uint64_t v69 = 0;
        DYTraceEncode_MTLTexture_replaceRegion_mipmapLevel_slice_withBytes_bytesPerRow_bytesPerImage((uint64_t)v67, (unsigned int *)v97, 0x400uLL, 0, 0);
        [v10 appendBytes:v97 length:LODWORD(v97[0])];
        ++v41;
        v42 += 88;
      }
      while (v41 < v26->nelts);
      id v38 = v58;
      uint64_t v40 = &v71;
    }
  }

LABEL_20:
  apr_pool_destroy(v39);
  id v50 = [v10 copy];
  [v12 setObject:v50 forKeyedSubscript:@"capture"];

  id v60 = 0;
  long long v51 = +[NSKeyedArchiver archivedDataWithRootObject:v12 requiringSecureCoding:1 error:&v60];
  id v52 = v60;
  uint64_t v53 = v52;
  if (v52)
  {
    long long v54 = [v52 localizedDescription];
    NSLog(@"Failed to encode datatip data: %@", v54);
  }

  return v51;
}

id GTMTLGuestAppClient_allCaptureObjects(os_unfair_lock_s *a1)
{
  uint64_t v2 = a1 + 8;
  os_unfair_lock_lock(a1 + 8);
  id v3 = GTMTLGuestAppClient_allCaptureObjectsUnsafe((uint64_t)a1);
  os_unfair_lock_unlock(v2);

  return v3;
}

id GTMTLGuestAppClient_allCaptureObjectsUnsafe(uint64_t a1)
{
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 32));
  id v2 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(*(id *)(a1 + 88), "count"));
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v3 = *(id *)(a1 + 88);
  id v4 = [v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v15;
    do
    {
      for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v15 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = copyDYMTLCommandQueueInfo(*(void **)(*((void *)&v14 + 1) + 8 * i));
        objc_msgSend(v2, "addObject:", v8, (void)v14);
      }
      id v5 = [v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v5);
  }

  id v9 = objc_alloc_init((Class)GTCaptureObjects);
  id v10 = GTMTLGuestAppClient_captureDevicesUnsafe(a1);
  [v9 setDevices:v10];

  [v9 setCommandQueues:v2];
  uint64_t v11 = +[GTMTLCaptureScopeInfo allCaptureScopes];
  [v9 setCaptureScopes:v11];

  uint64_t v12 = AllMetalLayers();
  [v9 setMetalLayers:v12];

  return v9;
}

id copyDYMTLCommandQueueInfo(void *a1)
{
  id v1 = a1;
  id v2 = objc_alloc_init((Class)DYGTMTLCommandQueueInfo);
  objc_msgSend(v2, "setStreamRef:", objc_msgSend(v1, "streamRef"));
  objc_msgSend(v2, "setDeviceAddress:", objc_msgSend(v1, "deviceAddress"));
  objc_msgSend(v2, "setDeviceStreamRef:", objc_msgSend(v1, "deviceStreamRef"));
  objc_msgSend(v2, "setToolsDeviceAddress:", objc_msgSend(v1, "toolsDeviceAddress"));
  objc_msgSend(v2, "setQueueAddress:", objc_msgSend(v1, "queueAddress"));
  objc_msgSend(v2, "setToolsQueueAddress:", objc_msgSend(v1, "toolsQueueAddress"));
  id v3 = [v1 label];
  [v2 setLabel:v3];

  [v2 setCanBeCaptured:1];
  [v2 setIsOpenGLQueue:0];
  id v4 = [v1 isInternalQueue];

  [v2 setIsInternalQueue:v4];

  return v2;
}

id GTMTLGuestAppClient_captureDevicesUnsafe(uint64_t a1)
{
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 32));
  id v2 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(*(id *)(a1 + 96), "count"));
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v3 = *(id *)(a1 + 96);
  id v4 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v13;
    do
    {
      for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v13 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void **)(*((void *)&v12 + 1) + 8 * i);
        id v9 = DEVICEOBJECT(v8);
        id v10 = newProfileWithMTLDevice(v9);

        objc_msgSend(v10, "setStreamRef:", objc_msgSend(v8, "streamReference", (void)v12));
        [v2 addObject:v10];
      }
      id v5 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v5);
  }

  return v2;
}

id GTMTLGuestAppClient_getTelemetry(uint64_t a1, uint64_t a2)
{
  __chkstk_darwin(a1, a2);
  memset(v47, 0, 512);
  GTTelemetry_stats((char *)v47);
  id v2 = objc_alloc_init((Class)NSMutableArray);
  for (uint64_t i = 0; i != 128; i += 2)
  {
    uint64_t v4 = *(void *)&v47[i];
    if (!v4) {
      break;
    }
    id v5 = objc_alloc_init((Class)GTTelemetryLayerObject);
    [v5 setStreamRef:v4];
    [v5 setFrames:*((void *)&v47[i + 1] + 1)];
    id v6 = objc_alloc_init((Class)GTTelemetryRecordObject);
    [v5 setFps:v6];

    int v7 = DWORD2(v47[i]);
    uint64_t v8 = [v5 fps];
    LODWORD(v9) = v7;
    [v8 setAverage:v9];

    int v10 = HIDWORD(v47[i]);
    uint64_t v11 = [v5 fps];
    LODWORD(v12) = v10;
    [v11 setMin:v12];

    int v13 = v47[i + 1];
    long long v14 = [v5 fps];
    LODWORD(v15) = v13;
    [v14 setMax:v15];

    [v2 addObject:v5];
  }
  id v16 = objc_alloc_init((Class)NSMutableArray);
  for (uint64_t j = 0; j != 8; j += 2)
  {
    uint64_t v18 = *(void *)&v47[j + 1152];
    if (!v18) {
      break;
    }
    id v19 = objc_alloc_init((Class)GTTelemetryDeviceObject);
    [v19 setStreamRef:v18];
    [v19 setCommits:*((void *)&v47[j + 1153] + 1)];
    id v20 = objc_alloc_init((Class)GTTelemetryRecordObject);
    [v19 setGpuTime:v20];

    int v21 = DWORD2(v47[j + 1152]);
    id v22 = [v19 gpuTime];
    LODWORD(v23) = v21;
    [v22 setAverage:v23];

    int v24 = HIDWORD(v47[j + 1152]);
    id v25 = [v19 gpuTime];
    LODWORD(v26) = v24;
    [v25 setMin:v26];

    int v27 = v47[j + 1153];
    id v28 = [v19 gpuTime];
    LODWORD(v29) = v27;
    [v28 setMax:v29];

    [v16 addObject:v19];
  }
  id v30 = objc_alloc_init((Class)NSMutableArray);
  for (uint64_t k = 0; k != 1024; k += 2)
  {
    id v32 = &v47[k];
    uint64_t v33 = *(void *)&v47[k + 128];
    if (!v33) {
      break;
    }
    id v34 = objc_alloc_init((Class)GTTelemetryQueueObject);
    [v34 setStreamRef:v33];
    [v34 setCommits:*((void *)v32 + 259)];
    id v35 = objc_alloc_init((Class)GTTelemetryRecordObject);
    [v34 setGpuTime:v35];

    int v36 = *((_DWORD *)v32 + 514);
    uint64_t v37 = [v34 gpuTime];
    LODWORD(v38) = v36;
    [v37 setAverage:v38];

    int v39 = *((_DWORD *)v32 + 515);
    uint64_t v40 = [v34 gpuTime];
    LODWORD(v41) = v39;
    [v40 setMin:v41];

    int v42 = *((_DWORD *)v32 + 516);
    long long v43 = [v34 gpuTime];
    LODWORD(v44) = v42;
    [v43 setMax:v44];

    [v30 addObject:v34];
  }
  id v45 = objc_alloc_init((Class)GTTelemetryStatistics);
  [v45 setLayers:v2];
  [v45 setQueues:v30];
  [v45 setDevices:v16];

  return v45;
}

void GTMTLGuestAppClient_reportTelemetry(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(g_guestAppClientMTL + 129))
  {
    id v2 = *(void **)(g_guestAppClientMTL + 16);
    if (v2)
    {
      GTMTLGuestAppClient_getTelemetry(a1, a2);
      id v3 = (id)objc_claimAutoreleasedReturnValue();
      [v2 notifyStatistics:v3];
    }
  }
}

id newDYMTLCommandQueueInfo(void *a1)
{
  id v1 = a1;
  id v2 = objc_alloc_init((Class)DYGTMTLCommandQueueInfo);
  objc_msgSend(v2, "setStreamRef:", objc_msgSend(v1, "streamReference"));
  id v3 = [v1 device];
  [v2 setDeviceAddress:v3];

  uint64_t v4 = [v1 device];
  id v5 = [v4 baseObject];
  [v2 setToolsDeviceAddress:v5];

  [v2 setQueueAddress:v1];
  id v6 = [v1 baseObject];
  [v2 setToolsQueueAddress:v6];

  int v7 = [v1 label];

  [v2 setLabel:v7];
  [v2 setCanBeCaptured:1];
  [v2 setIsOpenGLQueue:0];
  id v8 = [v2 label];
  objc_msgSend(v2, "setIsInternalQueue:", IsAppleInternalLabel((BOOL)objc_msgSend(v8, "UTF8String")));

  return v2;
}

void GTMTLGuestAppClientUpdateCAMetalLayerInfo(uint64_t a1, void *a2)
{
  id v3 = (os_unfair_lock_s *)(a1 + 32);
  id v4 = a2;
  os_unfair_lock_lock(v3);
  id v9 = objc_alloc_init((Class)GTCaptureObjects);
  id v5 = GTMTLGuestAppClient_captureDevicesUnsafe(a1);
  [v9 setDevices:v5];

  [v9 setCommandQueues:*(void *)(a1 + 88)];
  id v6 = +[GTMTLCaptureScopeInfo allCaptureScopes];
  [v9 setCaptureScopes:v6];

  [v9 setMetalLayers:v4];
  [*(id *)(a1 + 8) notifyCaptureObjectsChanged:v9];
  int v7 = *(void **)a1;
  id v8 = +[GTTransportMessage_capture messageWithKind:1550 objectPayload:v4];

  [v7 send:v8 error:0];
  os_unfair_lock_unlock(v3);
}

void GTMTLGuestAppClientUpdateMTLDeviceInfo(uint64_t a1)
{
  id v2 = (os_unfair_lock_s *)(a1 + 32);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 32));
  GTMTLGuestAppClient_captureDevicesUnsafe(a1);
  id v8 = (id)objc_claimAutoreleasedReturnValue();
  id v3 = objc_alloc_init((Class)GTCaptureObjects);
  [v3 setDevices:v8];
  [v3 setCommandQueues:*(void *)(a1 + 88)];
  id v4 = +[GTMTLCaptureScopeInfo allCaptureScopes];
  [v3 setCaptureScopes:v4];

  id v5 = AllMetalLayers();
  [v3 setMetalLayers:v5];

  [*(id *)(a1 + 8) notifyCaptureObjectsChanged:v3];
  id v6 = *(void **)a1;
  int v7 = +[GTTransportMessage_capture messageWithKind:1551 objectPayload:v8];
  [v6 send:v7 error:0];

  os_unfair_lock_unlock(v2);
}

id GTMTLGuestAppClient_notifyCaptureProgress(id result)
{
  if (*(unsigned char *)(g_guestAppClientMTL + 129)) {
    return [*(id *)(g_guestAppClientMTL + 8) notifyCaptureProgress:result];
  }
  return result;
}

void _sendTimebaseUpdate(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  v14.tv_sec = 0;
  *(void *)&v14.tv_usec = 0;
  uint64_t v6 = mach_absolute_time();
  gettimeofday(&v14, 0);
  uint64_t v7 = v6 + ((mach_absolute_time() - v6) >> 1);
  v15[0] = @"nanoseconds since epoch timestamp";
  id v8 = +[NSNumber numberWithUnsignedLongLong:1000000000 * v14.tv_sec + 1000 * v14.tv_usec];
  v16[0] = v8;
  v15[1] = @"mach absolute timestamp";
  id v9 = +[NSNumber numberWithUnsignedLongLong:v7];
  v16[1] = v9;
  v15[2] = @"mach timebase numerator";
  int v10 = +[NSNumber numberWithUnsignedInt:g_DYTimebaseInfo];
  v16[2] = v10;
  v15[3] = @"mach timebase denominator";
  uint64_t v11 = +[NSNumber numberWithUnsignedInt:dword_24FF3C];
  v16[3] = v11;
  double v12 = +[NSDictionary dictionaryWithObjects:v16 forKeys:v15 count:4];

  int v13 = +[GTTransportMessage_capture messageWithKind:1539 attributes:v12];
  [v3 send:v13 inReplyTo:v4 error:0];
}

void **GTMTLGuestAppClient_interposeCommonInit()
{
  inited = (void **)GTMTLGuestAppClient_initPlatform();
  GTMTLGuestAppClient_sendInferiorLaunchedMessage(inited);
  return inited;
}

void GTMTLGuestAppClient_sendInferiorLaunchedMessage(void **a1)
{
  mach_timebase_info((mach_timebase_info_t)&g_DYTimebaseInfo);
  _sendTimebaseUpdate(*a1, 0);
  id v3 = +[NSBundle mainBundle];
  id v4 = v3;
  if (v3)
  {
    id v5 = [v3 bundlePath];
    uint64_t v6 = [v4 executablePath];
    uint64_t v7 = [v4 bundleIdentifier];
    if (v7)
    {
      id v8 = [v4 bundleIdentifier];
    }
    else
    {
      id v8 = &stru_223D10;
    }
  }
  else
  {
    uint32_t bufsize = 0;
    uint64_t v9 = _NSGetExecutablePath(0, &bufsize);
    int v10 = (char *)GTCoreAlloc(v9, bufsize);
    uint64_t v6 = 0;
    id v8 = 0;
    id v5 = 0;
    if (!_NSGetExecutablePath(v10, &bufsize))
    {
      uint64_t v6 = +[NSString stringWithUTF8String:v10];
      id v5 = [(__CFString *)v6 stringByDeletingLastPathComponent];
      id v8 = &stru_223D10;
    }
    vm_deallocate(mach_task_self_, (vm_address_t)v10, bufsize);
  }
  v20[0] = @"pid";
  uint64_t v11 = +[NSNumber numberWithInt:getpid()];
  double v12 = (void *)v11;
  if (v5) {
    CFStringRef v13 = v5;
  }
  else {
    CFStringRef v13 = &stru_223D10;
  }
  v21[0] = v11;
  v21[1] = v13;
  v20[1] = @"path";
  v20[2] = @"executable-path";
  v20[3] = @"identifier";
  if (v6) {
    CFStringRef v14 = v6;
  }
  else {
    CFStringRef v14 = &stru_223D10;
  }
  if (v8) {
    CFStringRef v15 = v8;
  }
  else {
    CFStringRef v15 = &stru_223D10;
  }
  v21[2] = v14;
  v21[3] = v15;
  id v16 = +[NSDictionary dictionaryWithObjects:v21 forKeys:v20 count:4];

  long long v17 = *a1;
  uint64_t v18 = +[GTTransportMessage_capture messageWithKind:1536 attributes:v16];
  [v17 send:v18 error:0];
}

BOOL GTMTLGuestAppClient_supportsRemoteCapture(void *a1)
{
  return *a1 != 0;
}

id GTMTLGuestAppClient_copyDeviceProfiles(uint64_t a1)
{
  id v3 = (os_unfair_lock_s *)(a1 + 32);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 32));
  id v4 = [*(id *)(a1 + 80) copy];
  os_unfair_lock_unlock(v3);

  return v4;
}

void GTMTLGuestAppClientSendMTLCaptureScopeInfo(uint64_t a1, void *a2)
{
  id v3 = (os_unfair_lock_s *)(a1 + 32);
  id v4 = a2;
  os_unfair_lock_lock(v3);
  id v9 = objc_alloc_init((Class)GTCaptureObjects);
  id v5 = GTMTLGuestAppClient_captureDevicesUnsafe(a1);
  [v9 setDevices:v5];

  [v9 setCommandQueues:*(void *)(a1 + 88)];
  [v9 setCaptureScopes:v4];
  uint64_t v6 = AllMetalLayers();
  [v9 setMetalLayers:v6];

  [*(id *)(a1 + 8) notifyCaptureObjectsChanged:v9];
  os_unfair_lock_unlock(v3);
  uint64_t v7 = *(void **)a1;
  id v8 = +[GTTransportMessage_capture messageWithKind:1549 objectPayload:v4];

  [v7 send:v8 error:0];
}

void GTMTLGuestAppClientUpdateMTLCommandQueueInfo(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 32));
  id v3 = *(void **)(a1 + 8);
  id v4 = GTMTLGuestAppClient_allCaptureObjectsUnsafe(a1);
  [v3 notifyCaptureObjectsChanged:v4];

  id v5 = +[GTTransportMessage_capture messageWithKind:1547 objectPayload:*(void *)(a1 + 88)];
  [*(id *)a1 send:v5 error:0];
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 32));
}

void GTMTLGuestAppClientAddMTLCommandQueueInfo(uint64_t a1, void *a2)
{
  id v16 = a2;
  id v4 = [v16 device];
  DEVICEOBJECT(v4);
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 32));
  uint64_t v6 = (char *)[*(id *)(a1 + 80) count];
  uint64_t v7 = 0;
  if (v6)
  {
    while (1)
    {
      id v8 = [*(id *)(a1 + 80) objectAtIndexedSubscript:v7];
      id v9 = [v8 device];

      if (v9 == v5) {
        break;
      }
      if (v6 == ++v7) {
        goto LABEL_6;
      }
    }
  }
  if (v7 == v6)
  {
LABEL_6:
    int v10 = DEVICEOBJECT(v5);
    uint64_t v11 = newProfileWithMTLDevice(v10);

    [v11 setDevice:v5];
    [*(id *)(a1 + 80) addObject:v11];
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 32));

  double v12 = newDYMTLCommandQueueInfo(v16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 32));
  [*(id *)(a1 + 88) addObject:v12];
  GTTelemetry_addCommandQueue(v16);
  CFStringRef v13 = *(void **)(a1 + 8);
  CFStringRef v14 = GTMTLGuestAppClient_allCaptureObjectsUnsafe(a1);
  [v13 notifyCaptureObjectsChanged:v14];

  CFStringRef v15 = +[GTTransportMessage_capture messageWithKind:1547 objectPayload:*(void *)(a1 + 88)];
  [*(id *)a1 send:v15 error:0];
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 32));
}

void GTMTLGuestAppClientRemoveMTLCommandQueueInfo(uint64_t a1, void *a2)
{
  id v16 = a2;
  id v4 = (os_unfair_lock_s *)(a1 + 32);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 32));
  id v5 = (char *)[*(id *)(a1 + 88) count];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = 0;
    while (1)
    {
      id v8 = [*(id *)(a1 + 88) objectAtIndex:v7];
      id v9 = [v8 streamRef];
      id v10 = [v16 streamReference];

      if (v9 == v10) {
        break;
      }
      if (v6 == ++v7)
      {
        uint64_t v7 = v6;
        break;
      }
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v11 = [*(id *)(a1 + 88) lastObject];
  [*(id *)(a1 + 88) replaceObjectAtIndex:v7 withObject:v11];
  [*(id *)(a1 + 88) removeLastObject];
  GTTelemetry_removeCommandQueue(v16);
  double v12 = *(void **)(a1 + 8);
  CFStringRef v13 = GTMTLGuestAppClient_allCaptureObjectsUnsafe(a1);
  [v12 notifyCaptureObjectsChanged:v13];

  CFStringRef v14 = *(void **)a1;
  CFStringRef v15 = +[GTTransportMessage_capture messageWithKind:1547 objectPayload:*(void *)(a1 + 88)];
  [v14 send:v15 error:0];

  os_unfair_lock_unlock(v4);
}

void GTMTLGuestAppClient_addCaptureDevice(uint64_t a1, void *a2)
{
  id v5 = a2;
  id v4 = [v5 baseObject];
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 32));
  if ([*(id *)(a1 + 96) containsObject:v5])
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 32));
  }
  else
  {
    [*(id *)(a1 + 96) addObject:v5];
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 32));
    GTMTLGuestAppClientUpdateMTLDeviceInfo(a1);
    GTTelemetry_addDevice(v5);
  }
}

id GTMTLGuestAppClient_copyCaptureDevices(uint64_t a1)
{
  id v3 = (os_unfair_lock_s *)(a1 + 32);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 32));
  id v4 = [*(id *)(a1 + 96) copy];
  os_unfair_lock_unlock(v3);

  return v4;
}

uint64_t GTMTLGuestAppClient_isUsingNewTransport()
{
  return *(unsigned __int8 *)(g_guestAppClientMTL + 129);
}

uint64_t GTMTLGuestAppClient_advanceToNextFrame(uint64_t a1)
{
  uint64_t add = atomic_fetch_add((atomic_ullong *volatile)(a1 + 64), 1uLL);
  if (*(unsigned char *)(a1 + 48)) {
    GTMTLGuestAppClient_collectFrameProfilingData(a1, add);
  }
  return add + 1;
}

void GTMTLGuestAppClient_collectFrameProfilingData(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = mach_absolute_time();
  unint64_t v6 = v5 - *(void *)(a1 + 40);
  if (g_DYTimebaseInfo != dword_24FF3C) {
    unint64_t v6 = __udivti3();
  }
  if (v6 >= *(void *)(a1 + 56))
  {
    v34[0] = @"frame index";
    uint64_t v7 = +[NSNumber numberWithUnsignedLongLong:a2];
    v35[0] = v7;
    v34[1] = @"frame duration";
    id v8 = +[NSNumber numberWithUnsignedLongLong:v6];
    v35[1] = v8;
    v34[2] = @"timestamp";
    uint64_t v9 = v5;
    if (g_DYTimebaseInfo != dword_24FF3C) {
      uint64_t v9 = __udivti3();
    }
    id v10 = +[NSNumber numberWithUnsignedLongLong:v9];
    v35[2] = v10;
    uint64_t v11 = +[NSDictionary dictionaryWithObjects:v35 forKeys:v34 count:3];
    double v12 = +[NSMutableDictionary dictionaryWithDictionary:v11];

    if ((*(unsigned char *)(a1 + 49) & 1) != 0 && *(_DWORD *)(a1 + 36))
    {
      int v27 = v12;
      id v28 = v4;
      CFStringRef v13 = GTMTLGuestAppClient_copyCaptureDevices(a1);
      CFStringRef v14 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", [v13 count]);
      long long v29 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      id v15 = v13;
      id v16 = [v15 countByEnumeratingWithState:&v29 objects:v33 count:16];
      if (v16)
      {
        id v17 = v16;
        uint64_t v18 = *(void *)v30;
        do
        {
          for (uint64_t i = 0; i != v17; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v30 != v18) {
              objc_enumerationMutation(v15);
            }
            id v20 = [*(id *)(*((void *)&v29 + 1) + 8 * i) baseObject];
            CFTypeRef CFProperty = IORegistryEntryCreateCFProperty((io_registry_entry_t)[v20 acceleratorPort], @"PerformanceStatistics", kCFAllocatorDefault, 0);
            if (CFProperty)
            {
              id v22 = (void *)CFProperty;
              [v14 addObject:CFProperty];
            }
          }
          id v17 = [v15 countByEnumeratingWithState:&v29 objects:v33 count:16];
        }
        while (v17);
      }

      double v12 = v27;
      [v27 setObject:v14 forKeyedSubscript:@"PerformanceStatisticsActiveDevices"];
      CFTypeRef v23 = IORegistryEntryCreateCFProperty(*(_DWORD *)(a1 + 36), @"PerformanceStatistics", kCFAllocatorDefault, 0);
      if (v23)
      {
        int v24 = (void *)v23;
        [v27 setObject:v23 forKeyedSubscript:@"PerformanceStatistics"];
      }
      id v4 = v28;
    }
    id v25 = *(void **)a1;
    double v26 = +[GTTransportMessage_capture messageWithKind:1541 plistPayload:v12];
    [v25 send:v26 error:0];

    *(void *)(a1 + 40) = v5;
  }
}

void FillCaptureDescriptor(uint64_t a1, void *a2)
{
  id v3 = a2;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  id v4 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = 0;

  id v49 = [v3 objectForKeyedSubscript:@"HostCaptureArchivePath"];
  uint64_t v5 = [v3 objectForKeyedSubscript:@"sandbox_extensions"];
  id v48 = v5;
  if (v5)
  {
    [v5 UTF8String];
    uint64_t v6 = sandbox_extension_consume();
  }
  else
  {
    uint64_t v6 = -1;
  }
  *(void *)(a1 + 56) = v6;
  NSTemporaryDirectory();
  id v47 = (id)objc_claimAutoreleasedReturnValue();

  uint64_t v7 = [v3 objectForKeyedSubscript:@"Serial"];
  uint64_t v8 = [v7 unsignedIntValue];

  *(void *)(a1 + 32) = v8;
  uint64_t v9 = [v3 objectForKeyedSubscript:@"TriggerFrame"];
  *(void *)(a1 + 40) = [v9 unsignedLongLongValue];

  id v10 = [v3 objectForKeyedSubscript:@"FrameLimit"];
  *(void *)(a1 + 48) = [v10 unsignedLongLongValue];

  id v11 = v3;
  id v50 = [v11 objectForKeyedSubscript:@"IsBoundaryLess"];
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && [v50 BOOLValue])
  {
    *(_DWORD *)(a1 + 80) = 0;
    *(unsigned char *)(a1 + 86) = 1;
  }
  else
  {
    double v12 = [v11 objectForKeyedSubscript:@"CaptureDeviceName"];
    if (!v12) {
      goto LABEL_21;
    }
    uint64_t v13 = g_guestAppClientMTL;
    locuint64_t k = (os_unfair_lock_s *)(g_guestAppClientMTL + 32);
    os_unfair_lock_lock((os_unfair_lock_t)(g_guestAppClientMTL + 32));
    long long v53 = 0u;
    long long v54 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    id v14 = *(id *)(v13 + 96);
    id v15 = [v14 countByEnumeratingWithState:&v51 objects:v55 count:16];
    if (v15)
    {
      uint64_t v16 = *(void *)v52;
      while (2)
      {
        for (uint64_t i = 0; i != v15; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v52 != v16) {
            objc_enumerationMutation(v14);
          }
          uint64_t v18 = *(void **)(*((void *)&v51 + 1) + 8 * i);
          id v19 = [v18 name];
          unsigned int v20 = [v19 isEqualToString:v12];

          if (v20)
          {
            id v21 = v18;
            goto LABEL_18;
          }
        }
        id v15 = [v14 countByEnumeratingWithState:&v51 objects:v55 count:16];
        if (v15) {
          continue;
        }
        break;
      }
    }
    id v21 = 0;
LABEL_18:

    os_unfair_lock_unlock(lock);
    if (v21)
    {
      *(_DWORD *)(a1 + 80) = *(void *)(a1 + 48) != 0;
      id v22 = (uint64_t *)[v21 traceStream];
      if (v22) {
        uint64_t v23 = *v22;
      }
      else {
        uint64_t v23 = 0;
      }
      *(void *)a1 = v23;
    }
    else
    {
LABEL_21:
      int v24 = [v11 objectForKeyedSubscript:@"CaptureLayerAddress"];
      id v25 = [v24 unsignedLongLongValue];

      if (v25 && (FindMetalLayerWithAddress(v25), (id v21 = (id)objc_claimAutoreleasedReturnValue()) != 0))
      {
        *(_DWORD *)(a1 + 80) = 6;
        if (objc_opt_respondsToSelector()) {
          id v26 = [v21 streamReference];
        }
        else {
          id v26 = 0;
        }
        *(void *)(a1 + 24) = v26;
        uint64_t v37 = [v21 device];
        *(void *)a1 = [v37 streamReference];
      }
      else
      {
        int v27 = [v11 objectForKeyedSubscript:@"CaptureScopeID"];
        double v44 = v27;
        if (v27)
        {
          +[GTMTLCaptureScopeInfo getInfoWithStreamRef:](GTMTLCaptureScopeInfo, "getInfoWithStreamRef:", [v27 unsignedLongLongValue]);
          id v21 = (id)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          id v21 = 0;
        }
        os_unfair_lock_t locka = [v11 objectForKeyedSubscript:@"CaptureScopeAddress"];
        if (!v21 && locka)
        {
          id v21 = +[GTMTLCaptureScopeInfo getInfoWithAddress:[(os_unfair_lock_s *)locka unsignedLongLongValue]];
        }
        if (v21)
        {
          *(_DWORD *)(a1 + 80) = 4;
          *(void *)(a1 + 16) = [v21 scopeStreamRef];
          *(void *)(a1 + 8) = [v21 commandQueueStreamRef];
          *(void *)a1 = [v21 deviceStreamRef];
        }
        else
        {
          id v28 = [v11 objectForKeyedSubscript:@"CaptureCommandQueueAddress"];
          id v29 = [v28 unsignedLongLongValue];

          if (!v29) {
            goto LABEL_53;
          }
          uint64_t v30 = g_guestAppClientMTL;
          long long v43 = (os_unfair_lock_s *)(g_guestAppClientMTL + 32);
          os_unfair_lock_lock((os_unfair_lock_t)(g_guestAppClientMTL + 32));
          long long v53 = 0u;
          long long v54 = 0u;
          long long v51 = 0u;
          long long v52 = 0u;
          id v31 = *(id *)(v30 + 88);
          id v32 = [v31 countByEnumeratingWithState:&v51 objects:v55 count:16];
          if (v32)
          {
            uint64_t v33 = *(void *)v52;
            while (2)
            {
              for (uint64_t j = 0; j != v32; uint64_t j = (char *)j + 1)
              {
                if (*(void *)v52 != v33) {
                  objc_enumerationMutation(v31);
                }
                id v35 = *(void **)(*((void *)&v51 + 1) + 8 * (void)j);
                if ([v35 queueAddress] == v29)
                {
                  id v36 = v35;
                  goto LABEL_48;
                }
              }
              id v32 = [v31 countByEnumeratingWithState:&v51 objects:v55 count:16];
              if (v32) {
                continue;
              }
              break;
            }
          }
          id v36 = 0;
LABEL_48:

          os_unfair_lock_unlock(v43);
          if (v36)
          {
            if (*(void *)(a1 + 48)) {
              int v38 = 3;
            }
            else {
              int v38 = 2;
            }
            *(_DWORD *)(a1 + 80) = v38;
            *(void *)(a1 + 8) = [v36 streamRef];
            *(void *)a1 = [v36 deviceStreamRef];
          }
          else
          {
LABEL_53:
            *(_DWORD *)(a1 + 80) = 5;
          }
        }
      }
    }
  }
  int v39 = [v11 objectForKeyedSubscript:@"SuspendAfterCompletion"];
  *(unsigned char *)(a1 + 84) = [v39 BOOLValue];

  uint64_t v40 = [v11 objectForKeyedSubscript:@"LockOpenGLAfterCompletion"];
  *(unsigned char *)(a1 + 85) = [v40 BOOLValue];

  id v41 = v47;
  *(void *)(a1 + 64) = [v41 UTF8String];
  id v42 = v49;
  *(void *)(a1 + 72) = [v42 UTF8String];
  *(unsigned char *)(a1 + 92) = 1;
}

void GTMTLGuestAppClient_processMessage(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = g_signpostLog;
  if (os_signpost_enabled((os_log_t)g_signpostLog))
  {
    uint64_t v6 = v5;
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = GTMessageKindAsString((int)[v3 kind]);
    _os_signpost_emit_with_name_impl(&def_CFBEC, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Capture-ProcessMessage", "%s", buf, 0xCu);
  }
  int v7 = [v3 kind];
  if (v7 > 1538)
  {
    if (v7 == 1539)
    {
      _sendTimebaseUpdate(*(void **)a1, v3);
      goto LABEL_29;
    }
    if (v7 != 1794)
    {
      if (v7 == 1793)
      {
        id v9 = v3;
        _setTraceMode(a1, (uint64_t)[v9 uint32ForKey:@"trace mode"]);
        *(_DWORD *)(a1 + 108) = [v9 uint64ForKey:@"trace host type"];
        *(void *)(a1 + 56) = [v9 uint64ForKey:@"profiling send period"];
        id v10 = [v9 uint64ForKey:@"profiling flags"];

        *(void *)(a1 + 48) = v10;
      }
      goto LABEL_29;
    }
    id v12 = v3;
    uint64_t v13 = [v12 uint32ForKey:@"override_flags"];
    if (*(void *)(a1 + 112) == v13) {
      goto LABEL_26;
    }
    if (v13)
    {
      if (*(_DWORD *)(a1 + 104) == 7)
      {
LABEL_25:
        *(void *)(a1 + 112) = v13;
LABEL_26:
        if ((v13 & 0x40) != 0)
        {
          [v12 doubleForKey:@"override_scale_tesselation_factor"];
          *(void *)(a1 + 120) = v15;
        }

        goto LABEL_29;
      }
      uint64_t v14 = 7;
    }
    else
    {
      uint64_t v14 = 1;
    }
    _setTraceMode(a1, v14);
    goto LABEL_25;
  }
  switch(v7)
  {
    case 260:
      long long v27 = 0u;
      long long v26 = 0u;
      long long v25 = 0u;
      long long v24 = 0u;
      *(_OWORD *)&buf[8] = 0u;
      uint64_t v8 = 0x800000004;
      goto LABEL_13;
    case 264:
      id v28 = 0;
      id v11 = [v3 plistPayload];
      FillCaptureDescriptor((uint64_t)buf, v11);

      if (_sharedCaptureManager)
      {
        GTMTLCaptureManager_updateCaptureDescriptorFromHost((intptr_t)buf);
      }
      else
      {
        long long v19 = 0u;
        long long v20 = 0u;
        long long v17 = 0u;
        long long v18 = 0u;
        uint64_t v16 = 0x700000004;
        uint64_t v21 = 0;
        id v22 = buf;
        GTCaptureBoundaryTracker_handleTrigger((long long *)&v16);
      }

      break;
    case 265:
      long long v27 = 0u;
      long long v26 = 0u;
      long long v25 = 0u;
      long long v24 = 0u;
      *(_OWORD *)&buf[8] = 0u;
      uint64_t v8 = 0x900000004;
LABEL_13:
      *(void *)buf = v8;
      GTCaptureBoundaryTracker_handleTrigger((long long *)buf);
      break;
  }
LABEL_29:
}

void sub_460BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33)
{
  _Unwind_Resume(a1);
}

void _setTraceMode(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 104) = a2;
  id v2 = *(void **)a1;
  id v4 = +[NSNumber numberWithUnsignedInt:a2];
  id v3 = +[GTTransportMessage_capture messageWithKind:1796 objectPayload:v4];
  [v2 send:v3 error:0];
}

void GTMTLGuestAppClient_notifyCaptureRequest(uint64_t *a1)
{
  if (*(unsigned char *)(g_guestAppClientMTL + 129))
  {
    id v2 = objc_alloc((Class)GTCaptureDescriptor);
    atomic_fetch_add(g_requestID, 1u);
    id v4 = objc_msgSend(v2, "initWithRequestID:");
    [v4 setTriggerHitsToStart:a1[5]];
    [v4 setTriggerHitsToEnd:a1[6]];
    [v4 setSuspendAfterCapture:*((unsigned __int8 *)a1 + 84)];
    [v4 setIgnoreUnusedResources:*((unsigned __int8 *)a1 + 91)];
    switch(*((_DWORD *)a1 + 20))
    {
      case 0:
        uint64_t v3 = *a1;
        goto LABEL_9;
      case 1:
        uint64_t v3 = *a1;
        break;
      case 2:
        uint64_t v3 = a1[1];
LABEL_9:
        [v4 setTriggerHitsToEnd:-1];
        break;
      case 3:
        uint64_t v3 = a1[1];
        break;
      case 4:
        uint64_t v3 = a1[2];
        break;
      case 5:
      case 6:
        uint64_t v3 = a1[3];
        break;
      default:
        uint64_t v3 = 0;
        break;
    }
    [v4 setStreamRef:v3];
    dispatch_group_wait(*(dispatch_group_t *)(g_guestAppClientMTL + 24), 0xFFFFFFFFFFFFFFFFLL);
    [*(id *)(g_guestAppClientMTL + 8) notifyCaptureRequest:v4];
  }
}

void GTMTLGuestAppClient_notifyUnsupportedFenum(void *a1)
{
  id v2 = a1;
  id v4 = (id *)g_guestAppClientMTL;
  os_unfair_lock_lock((os_unfair_lock_t)(g_guestAppClientMTL + 32));
  if (!*((unsigned char *)v4 + 128))
  {
    objc_storeStrong(v4 + 9, a1);
    [v4[1] notifyUnsupportedFenum:v2];
    if (v4[1]) {
      *((unsigned char *)v4 + 128) = 1;
    }
    v58[0] = @"fenum";
    uint64_t v5 = [v2 fenum];
    if (v5)
    {
      uint64_t v6 = [v2 fenum];
    }
    else
    {
      uint64_t v6 = &stru_223D10;
    }
    v59[0] = v6;
    v58[1] = @"category";
    id v7 = [v2 category];
    if (v7)
    {
      uint64_t v8 = [v2 category];
    }
    else
    {
      uint64_t v8 = &stru_223D10;
    }
    v59[1] = v8;
    v58[2] = @"customMessage";
    id v9 = [v2 customMessage];
    if (v9)
    {
      id v10 = [v2 customMessage];
    }
    else
    {
      id v10 = &stru_223D10;
    }
    v59[2] = v10;
    id v11 = +[NSDictionary dictionaryWithObjects:v59 forKeys:v58 count:3];
    if (v9) {

    }
    if (v7) {
    if (v5)
    }

    id v12 = *v4;
    uint64_t v13 = +[GTTransportMessage_capture messageWithKind:4357 objectPayload:v11];
    id v49 = 0;
    [v12 send:v13 error:&v49];
    id v14 = v49;

    if (*v4)
    {
      if (v14)
      {
        if (s_logUsingOsLog)
        {
          uint64_t v15 = gt_default_log();
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          {
            uint64_t v16 = [v2 fenum];
            if (v16)
            {
              id v4 = [v2 fenum];
              long long v17 = (const char *)[v4 UTF8String];
            }
            else
            {
              long long v17 = "(null)";
            }
            id v42 = [v14 localizedDescription];
            if (v42)
            {
              uint64_t v8 = [v14 localizedDescription];
              long long v43 = (const char *)[(__CFString *)v8 UTF8String];
            }
            else
            {
              long long v43 = "(null)";
            }
            *(_DWORD *)buf = 136315394;
            long long v51 = v17;
            __int16 v52 = 2080;
            long long v53 = v43;
            _os_log_error_impl(&def_CFBEC, v15, OS_LOG_TYPE_ERROR, "warning: Failed to send kGTMessageGuestAppUnsupportedFenumDetected with fenum %s, error: %s", buf, 0x16u);
            if (v42) {

            }
            if (v16) {
          }
            }
        }
        else
        {
          uint64_t v46 = __stderrp;
          uint64_t v15 = [v2 fenum];
          if (v15)
          {
            id v4 = [v2 fenum];
            long long v18 = (const char *)[v4 UTF8String];
          }
          else
          {
            long long v18 = "(null)";
          }
          long long v19 = [v14 localizedDescription];
          if (v19)
          {
            id v7 = [v14 localizedDescription];
            long long v20 = (const char *)[v7 UTF8String];
          }
          else
          {
            long long v20 = "(null)";
          }
          id v21 = +[NSString stringWithFormat:@"warning: Failed to send kGTMessageGuestAppUnsupportedFenumDetected with fenum %s, error: %s", v18, v20];
          fprintf(v46, "%s\n", (const char *)[v21 UTF8String]);

          if (v19) {
          if (v15)
          }
        }
      }
      else
      {
        *((unsigned char *)v4 + 128) = 1;
      }
    }
    if ((qword_2501C8 & 2) != 0)
    {
      id v22 = [v2 asError];
      uint64_t v23 = v22;
      if (s_logUsingOsLog)
      {
        long long v24 = gt_default_log();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_FAULT))
        {
          id v45 = (const char *)[v23 code];
          id v47 = [v23 localizedDescription];
          long long v25 = (const char *)[(FILE *)v47 UTF8String];
          if (v25) {
            long long v26 = v25;
          }
          else {
            long long v26 = "(unknown)";
          }
          id v27 = [v23 localizedFailureReason];
          id v28 = (const char *)[v27 UTF8String];
          if (v28) {
            id v29 = v28;
          }
          else {
            id v29 = "";
          }
          id v30 = [v23 localizedRecoverySuggestion];
          id v31 = (const char *)[v30 UTF8String];
          *(_DWORD *)buf = 134218754;
          id v32 = "none";
          long long v51 = v45;
          if (v31) {
            id v32 = v31;
          }
          __int16 v52 = 2080;
          long long v53 = v26;
          __int16 v54 = 2080;
          uint64_t v55 = v29;
          __int16 v56 = 2080;
          long long v57 = v32;
          _os_log_fault_impl(&def_CFBEC, v24, OS_LOG_TYPE_FAULT, "fail: error (%ld): %s %s [recommendation: %s]", buf, 0x2Au);
        }
      }
      else
      {
        id v48 = __stderrp;
        id v44 = [v22 code];
        long long v24 = [v23 localizedDescription];
        uint64_t v33 = (const char *)[v24 UTF8String];
        if (v33) {
          id v34 = v33;
        }
        else {
          id v34 = "(unknown)";
        }
        id v35 = [v23 localizedFailureReason];
        id v36 = (const char *)[v35 UTF8String];
        if (v36) {
          uint64_t v37 = v36;
        }
        else {
          uint64_t v37 = "";
        }
        id v38 = [v23 localizedRecoverySuggestion];
        int v39 = (const char *)[v38 UTF8String];
        uint64_t v40 = "none";
        if (v39) {
          uint64_t v40 = v39;
        }
        id v41 = +[NSString stringWithFormat:@"fail: error (%ld): %s %s [recommendation: %s]", v44, v34, v37, v40];
        fprintf(v48, "%s\n", (const char *)[v41 UTF8String]);
      }
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(g_guestAppClientMTL + 32));
}

BOOL GTMTLGuestAppClient_unsupportedFenumDetected()
{
  os_unfair_lock_lock((os_unfair_lock_t)(g_guestAppClientMTL + 32));
  BOOL v0 = *(void *)(g_guestAppClientMTL + 72) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(g_guestAppClientMTL + 32));
  return v0;
}

id GTMTLGuestAppClient_getUnsupportedFenumInfo()
{
  os_unfair_lock_lock((os_unfair_lock_t)(g_guestAppClientMTL + 32));
  id v0 = *(id *)(g_guestAppClientMTL + 72);
  os_unfair_lock_unlock((os_unfair_lock_t)(g_guestAppClientMTL + 32));

  return v0;
}

void SaveMTLComputePipelineReflection(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  if (v9)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      uint64_t v13 = [v9 reflection];

      id v10 = (id)v13;
    }
    id v87 = v12;
    id v14 = [v10 performanceStatistics];
    id v106 = 0;
    uint64_t v15 = +[NSKeyedArchiver archivedDataWithRootObject:v14 requiringSecureCoding:1 error:&v106];
    id v90 = v106;

    uint64_t v16 = 0;
    if (objc_opt_respondsToSelector())
    {
      long long v17 = [v10 pluginReturnData];
      uint64_t v16 = GetPluginReturnData((uint64_t)v17);
    }
    long long v105 = 0u;
    memset(v104, 0, sizeof(v104));
    long long v89 = v10;
    TranslateGTMTLComputePipelineReflection(v10, v104, 0);
    id v18 = v15;
    [v18 bytes];
    long long v19 = (char *)[v18 length];
    uint64_t v20 = *((void *)&v105 + 1);
    id v21 = v16;
    [v21 bytes];
    id v91 = v21;
    id v22 = &v19[(void)[v21 length] + v20];
    *((void *)&v105 + 1) = v22;
    id v23 = v11;
    if (!v11 && v87)
    {
      id v23 = objc_alloc_init((Class)MTLComputePipelineDescriptor);
      [v23 setComputeFunction:v87];
    }
    long long v86 = v9;
    long long v88 = v23;
    if (v23)
    {
      long long v24 = [v9 device];
      id v103 = v90;
      id v23 = [v24 loadDynamicLibrariesForComputeDescriptor:v23 error:&v103];
      id v25 = v103;

      id v90 = v25;
    }
    long long v101 = 0u;
    long long v102 = 0u;
    long long v100 = 0u;
    long long v99 = 0u;
    id v26 = v23;
    id v27 = [v26 countByEnumeratingWithState:&v99 objects:v108 count:16];
    if (v27)
    {
      id v28 = v27;
      uint64_t v83 = a1;
      unsigned int v29 = 0;
      uint64_t v30 = *(void *)v100;
      do
      {
        for (uint64_t i = 0; i != v28; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v100 != v30) {
            objc_enumerationMutation(v26);
          }
          id v32 = *(void **)(*((void *)&v99 + 1) + 8 * i);
          uint64_t v33 = [v32 libraryPath];

          if (v33)
          {
            id v34 = [v32 libraryPath];
            [v34 UTF8String];
            id v35 = [v32 libraryPath];
            if ([v35 UTF8String])
            {
              id v36 = [v32 libraryPath];
              v22 += strlen((const char *)[v36 UTF8String]) + 1;
            }
            ++v29;
          }
        }
        id v28 = [v26 countByEnumeratingWithState:&v99 objects:v108 count:16];
      }
      while (v28);
      *((void *)&v105 + 1) = v22;
      a1 = v83;
    }
    else
    {
      unsigned int v29 = 0;
    }

    *(void *)&long long v105 = v105 + 16 * v29;
    *(unsigned char *)(*(void *)(a1 + 16) + 14) = AllocatePipelineReflectionWithType(a1, (uint64_t)v104, 0x78u);
    uint64_t v37 = TranslateGTMTLComputePipelineReflection(v89, v104, 1);
    id v38 = v18;
    id v39 = [v38 bytes];
    uint64_t v84 = v38;
    uint64_t v40 = (char *)[v38 length];
    id v41 = v40;
    if (v40) {
      id v42 = (void *)*((void *)&v105 + 1);
    }
    else {
      id v42 = 0;
    }
    long long v43 = &v40[*((void *)&v105 + 1)];
    memcpy(v42, v39, (size_t)v40);
    *(void *)(v37 + 56) = v42;
    *(void *)(v37 + 64) = v41;
    id v44 = v91;
    id v45 = [v44 bytes];
    long long v82 = v44;
    uint64_t v46 = (char *)[v44 length];
    id v47 = v46;
    if (v46) {
      id v48 = v43;
    }
    else {
      id v48 = 0;
    }
    id v49 = &v46[(void)v43];
    *((void *)&v105 + 1) = &v46[(void)v43];
    memcpy(v48, v45, (size_t)v46);
    *(void *)(v37 + 72) = v48;
    *(void *)(v37 + 80) = v47;
    if (v29) {
      uint64_t v50 = v105;
    }
    else {
      uint64_t v50 = 0;
    }
    uint64_t v51 = v105 + 8 * v29;
    if (v29) {
      uint64_t v52 = v105 + 8 * v29;
    }
    else {
      uint64_t v52 = 0;
    }
    *(void *)(v37 + 40) = v50;
    *(void *)(v37 + 48) = v52;
    *(void *)&long long v105 = v51 + 8 * v29;
    *(_WORD *)(v37 + 96) = 0;
    long long v95 = 0u;
    long long v96 = 0u;
    long long v97 = 0u;
    long long v98 = 0u;
    id v53 = v26;
    id v54 = [v53 countByEnumeratingWithState:&v95 objects:v107 count:16];
    id v92 = v53;
    if (v54)
    {
      id v55 = v54;
      uint64_t v56 = *(void *)v96;
      do
      {
        for (uint64_t j = 0; j != v55; uint64_t j = (char *)j + 1)
        {
          if (*(void *)v96 != v56) {
            objc_enumerationMutation(v53);
          }
          long long v58 = *(void **)(*((void *)&v95 + 1) + 8 * (void)j);
          long long v59 = [v58 libraryPath];

          if (v59)
          {
            id v60 = [v58 libraryPath];
            id v61 = [v60 UTF8String];
            id v62 = [v58 libraryPath];
            if ([v62 UTF8String])
            {
              id v63 = [v58 libraryPath];
              size_t v64 = strlen((const char *)[v63 UTF8String]);
              size_t v65 = v64 + 1;
              if (v64 == -1)
              {
                uint64_t v66 = 0;
                *((void *)&v105 + 1) = v49;
              }
              else
              {
                uint64_t v67 = &v49[v65];
                *((void *)&v105 + 1) = &v49[v65];
                memcpy(v49, v61, v65);
                uint64_t v66 = v49;
                id v49 = v67;
                id v53 = v92;
              }
              *(void *)(*(void *)(v37 + 48) + 8 * *(unsigned __int16 *)(v37 + 96)) = v66;
            }
            else
            {
              *((void *)&v105 + 1) = v49;
              *(void *)(*(void *)(v37 + 48) + 8 * *(unsigned __int16 *)(v37 + 96)) = 0;
            }

            uint64_t v68 = *(unsigned __int16 *)(v37 + 96);
            *(void *)(*(void *)(v37 + 40) + 8 * v68) = 0;
            *(_WORD *)(v37 + 96) = v68 + 1;
          }
        }
        id v55 = [v53 countByEnumeratingWithState:&v95 objects:v107 count:16];
      }
      while (v55);
    }

    GTMTLComputePipelineReflection_resourceAccess(v37, (uint64_t)v93);
    long long v69 = v93[1];
    *(_OWORD *)(v37 + 104) = v93[0];
    *(_OWORD *)(v37 + 120) = v69;
    *(_OWORD *)(v37 + 136) = v93[2];
    *(void *)(v37 + 152) = v94;
    id v70 = [v88 stageInputDescriptor];
    id v10 = v89;
    if (v70)
    {
      uint64_t v71 = 0;
      while (1)
      {
        uint64_t v72 = [v70 attributes];
        uint64_t v73 = [v72 objectAtIndexedSubscript:v71];

        if ([v73 format])
        {
          id v74 = [v73 bufferIndex];
          if ((unint64_t)v74 <= 0x1E)
          {
            id v75 = v74;
            uint64_t v76 = [v70 layouts];
            int v77 = [v76 objectAtIndexedSubscript:v75];
            long long v78 = (char *)[v77 stepFunction];

            if ((unint64_t)(v78 - 7) < 2) {
              break;
            }
          }
        }

        if (++v71 == 31) {
          goto LABEL_57;
        }
      }

      id v11 = v88;
      int v80 = [v88 stageInputDescriptor];
      uint64_t v81 = (uint64_t)[v80 indexBufferIndex];

      *(void *)(v37 + 104 + 16 * (int)(v81 >> 6)) |= 1 << v81;
    }
    else
    {
LABEL_57:

      id v11 = v88;
    }
    id v9 = v86;
    long long v79 = DEVICEOBJECT(v86);
    id v12 = v87;
    if (objc_opt_respondsToSelector())
    {
      if ([v79 supportIndirectCommandBuffers])
      {
        *(void *)uint64_t v37 = [v79 uniqueIdentifier];
        *(void *)(v37 + 8) = [v79 resourceIndex];
        if (objc_opt_respondsToSelector()) {
          *(void *)(v37 + 16) = [v79 gpuResourceID];
        }
      }
    }
    if (objc_opt_respondsToSelector()) {
      *(_DWORD *)(v37 + 88) = [v79 allocatedSize];
    }
  }
}

id GetPluginReturnData(uint64_t a1)
{
  if (a1)
  {
    id v1 = +[NSPropertyListSerialization propertyListWithData:a1 options:0 format:0 error:0];
    id v2 = v1;
    if (v1)
    {
      uint64_t v3 = [v1 objectForKeyedSubscript:@"metalLib"];
    }
    else
    {
      uint64_t v3 = 0;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

uint64_t AllocatePipelineReflectionWithType(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4 = 0;
  int64x2_t v5 = 0uLL;
  int64x2_t v6 = vdupq_n_s64(7uLL);
  int8x16_t v7 = (int8x16_t)vdupq_n_s64(0xFFFFFFFFFFFFFFF8);
  do
  {
    int64x2_t v5 = vaddq_s64((int64x2_t)vandq_s8((int8x16_t)vaddq_s64(*(int64x2_t *)(a2 + v4), v6), v7), v5);
    v4 += 16;
  }
  while (v4 != 192);
  uint64_t v8 = *(void *)(*(void *)(a1 + 8) + 24);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(unsigned __int8 *)(a1 + 42);
  *(unsigned char *)(a1 + 42) = v10 + 1;
  Bytes = GTTraceMemPool_allocateBytes(v8, v9, (vaddvq_s64(v5) << 32) | ((unint64_t)a3 << 16) | v10 | 0x100);
  uint64_t v12 = 0;
  uint64_t v13 = Bytes + 16;
  do
  {
    if (((*(void *)(a2 + v12) + 7) & 0xFFFFFFFFFFFFFFF8) != 0) {
      id v14 = v13;
    }
    else {
      id v14 = 0;
    }
    v13 += (*(void *)(a2 + v12) + 7) & 0xFFFFFFFFFFFFFFF8;
    *(void *)(a2 + v12) = v14;
    v12 += 8;
  }
  while (v12 != 192);
  return Bytes[8];
}

void SaveMTLRenderPipelineReflection(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v7)
  {
    objc_opt_class();
    uint64_t v75 = a1;
    if (objc_opt_isKindOfClass())
    {
      uint64_t v10 = [v7 reflection];

      id v8 = (id)v10;
    }
    int v80 = v7;
    id v11 = [v8 performanceStatistics];
    id v93 = 0;
    uint64_t v12 = +[NSKeyedArchiver archivedDataWithRootObject:v11 requiringSecureCoding:1 error:&v93];
    id v77 = v93;

    uint64_t v13 = 0;
    id v14 = 0;
    if (objc_opt_respondsToSelector())
    {
      uint64_t v15 = [v8 vertexPluginReturnData];
      id v14 = GetPluginReturnData((uint64_t)v15);

      uint64_t v16 = [v8 fragmentPluginReturnData];
      uint64_t v13 = GetPluginReturnData((uint64_t)v16);
    }
    long long v92 = 0u;
    memset(v91, 0, sizeof(v91));
    TranslateGTMTLRenderPipelineReflection(v8, v91, 0);
    id v17 = v12;
    [v17 bytes];
    id v18 = [v17 length];
    uint64_t v19 = *((void *)&v92 + 1);
    id v20 = v14;
    [v20 bytes];
    id v73 = v20;
    id v21 = (char *)[v20 length] + v19;
    id v22 = v13;
    [v22 bytes];
    id v72 = v22;
    id v23 = (char *)[v22 length] + (void)v21 + (unint64_t)v18;
    *((void *)&v92 + 1) = v23;
    long long v87 = 0u;
    long long v88 = 0u;
    long long v89 = 0u;
    long long v90 = 0u;
    id v79 = v9;
    id v24 = v9;
    id v25 = [v24 countByEnumeratingWithState:&v87 objects:v95 count:16];
    id v81 = v8;
    if (v25)
    {
      id v26 = v25;
      int v27 = 0;
      uint64_t v28 = *(void *)v88;
      do
      {
        for (uint64_t i = 0; i != v26; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v88 != v28) {
            objc_enumerationMutation(v24);
          }
          uint64_t v30 = [*(id *)(*((void *)&v87 + 1) + 8 * i) libraryPath];
          id v31 = v30;
          if (v30)
          {
            id v32 = v30;
            [v32 UTF8String];
            id v33 = v32;
            if ([v33 UTF8String]) {
              size_t v34 = strlen((const char *)[v33 UTF8String]) + 1;
            }
            else {
              size_t v34 = 0;
            }
            v23 += v34;
            ++v27;
          }
        }
        id v26 = [v24 countByEnumeratingWithState:&v87 objects:v95 count:16];
      }
      while (v26);
      *((void *)&v92 + 1) = v23;
      id v8 = v81;
    }
    else
    {
      int v27 = 0;
    }

    *(void *)&long long v92 = v92 + 16 * v27;
    *(unsigned char *)(*(void *)(v75 + 16) + 14) = AllocatePipelineReflectionWithType(v75, (uint64_t)v91, 0x77u);
    uint64_t v35 = TranslateGTMTLRenderPipelineReflection(v8, v91, 1);
    id v36 = v17;
    id v37 = [v36 bytes];
    uint64_t v76 = v36;
    id v38 = (char *)[v36 length];
    id v39 = v38;
    if (v38) {
      uint64_t v40 = (void *)*((void *)&v92 + 1);
    }
    else {
      uint64_t v40 = 0;
    }
    id v41 = &v38[*((void *)&v92 + 1)];
    memcpy(v40, v37, (size_t)v38);
    *(void *)(v35 + 112) = v40;
    *(void *)(v35 + 120) = v39;
    id v42 = v73;
    id v43 = [v42 bytes];
    id v74 = v42;
    id v44 = (char *)[v42 length];
    id v45 = v44;
    if (v44) {
      uint64_t v46 = v41;
    }
    else {
      uint64_t v46 = 0;
    }
    id v47 = &v44[(void)v41];
    memcpy(v46, v43, (size_t)v44);
    *(void *)(v35 + 128) = v46;
    *(void *)(v35 + 136) = v45;
    id v48 = v72;
    id v49 = [v48 bytes];
    uint64_t v50 = (char *)[v48 length];
    uint64_t v51 = v50;
    if (v50) {
      uint64_t v52 = v47;
    }
    else {
      uint64_t v52 = 0;
    }
    id v53 = &v50[(void)v47];
    *((void *)&v92 + 1) = &v50[(void)v47];
    memcpy(v52, v49, (size_t)v50);
    *(void *)(v35 + 144) = v52;
    *(void *)(v35 + 152) = v51;
    if (v27) {
      uint64_t v54 = v92;
    }
    else {
      uint64_t v54 = 0;
    }
    uint64_t v55 = v92 + 8 * v27;
    if (v27) {
      uint64_t v56 = v92 + 8 * v27;
    }
    else {
      uint64_t v56 = 0;
    }
    *(void *)(v35 + 96) = v54;
    *(void *)(v35 + 104) = v56;
    *(void *)&long long v92 = v55 + 8 * v27;
    *(_WORD *)(v35 + 214) = 0;
    long long v83 = 0u;
    long long v84 = 0u;
    long long v85 = 0u;
    long long v86 = 0u;
    id v57 = v24;
    id v58 = [v57 countByEnumeratingWithState:&v83 objects:v94 count:16];
    if (v58)
    {
      id v59 = v58;
      uint64_t v60 = *(void *)v84;
      do
      {
        for (uint64_t j = 0; j != v59; uint64_t j = (char *)j + 1)
        {
          if (*(void *)v84 != v60) {
            objc_enumerationMutation(v57);
          }
          id v62 = [*(id *)(*((void *)&v83 + 1) + 8 * (void)j) libraryPath];
          id v63 = v62;
          if (v62)
          {
            id v64 = v62;
            id v65 = [v64 UTF8String];
            id v66 = v64;
            if ([v66 UTF8String]
              && (size_t v67 = strlen((const char *)[v66 UTF8String]),
                  size_t v68 = v67 + 1,
                  v67 != -1))
            {
              long long v69 = v53;
            }
            else
            {
              size_t v68 = 0;
              long long v69 = 0;
            }
            v53 += v68;
            *((void *)&v92 + 1) = v53;
            memcpy(v69, v65, v68);
            uint64_t v70 = *(unsigned __int16 *)(v35 + 214);
            *(void *)(*(void *)(v35 + 104) + 8 * v70) = v69;
            *(void *)(*(void *)(v35 + 96) + 8 * v70) = 0;
            *(_WORD *)(v35 + 214) = v70 + 1;
          }
        }
        id v59 = [v57 countByEnumeratingWithState:&v83 objects:v94 count:16];
      }
      while (v59);
    }

    GTMTLRenderPipelineReflection_resourceAccess(v35, (uint64_t)__src);
    memcpy((void *)(v35 + 216), __src, 0x118uLL);
    id v7 = v80;
    uint64_t v71 = DEVICEOBJECT(v80);
    if ([v80 supportIndirectCommandBuffers])
    {
      *(void *)uint64_t v35 = [v71 uniqueIdentifier];
      *(void *)(v35 + 8) = [v71 resourceIndex];
      if (objc_opt_respondsToSelector()) {
        *(void *)(v35 + 16) = [v71 gpuResourceID];
      }
    }
    id v8 = v81;
    if (objc_opt_respondsToSelector()) {
      *(_DWORD *)(v35 + 192) = [v71 allocatedSize];
    }
    *(_WORD *)(v35 + 196) = (unsigned __int16)[v71 imageblockSampleLength];

    id v9 = v79;
  }
}

void SaveMTLFunctionInfo(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  int64x2_t v6 = v8;
  if (v8)
  {
    if (!v5)
    {
      id v5 = v8;
      int64x2_t v6 = v8;
    }
    memset(v9, 0, sizeof(v9));
    id v7 = [v6 label];
    TranslateGTMTLFunctionInfo(v8, v5, v7, v9, 0);
    *(unsigned char *)(*(void *)(a1 + 16) + 14) = AllocatePipelineReflectionWithType(a1, (uint64_t)v9, 0x7Bu);
    TranslateGTMTLFunctionInfo(v8, v5, v7, v9, 1);
  }
}

void SaveMTLDynamicLibraryInfo(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = v3;
    DEVICEOBJECT(v3);
    id v5 = (id)objc_claimAutoreleasedReturnValue();

    memset(v6, 0, sizeof(v6));
    TranslateGTMTLDynamicLibraryInfo(v5, v6, 0);
    *(unsigned char *)(*(void *)(a1 + 16) + 14) = AllocatePipelineReflectionWithType(a1, (uint64_t)v6, 0x7Cu);
    TranslateGTMTLDynamicLibraryInfo(v5, v6, 1);
  }
}

void SaveMTLBufferInfo(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = v3;
    id v5 = DEVICEOBJECT(v3);

    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    v7[0] = 0;
    long long v8 = 0u;
    id v6 = v5;
    v7[1] = 48;

    *(unsigned char *)(*(void *)(a1 + 16) + 14) = AllocatePipelineReflectionWithType(a1, (uint64_t)v7, 0x7Eu);
    TranslateGTMTLBufferInfo(v6, (uint64_t)v7, 1);
  }
}

void SaveMTLTextureInfo(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = v3;
    id v5 = DEVICEOBJECT(v3);

    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    uint64_t v11 = 0;
    long long v13 = 0u;
    uint64_t v8 = 0;
    long long v10 = 0u;
    memset(v7, 0, sizeof(v7));
    id v6 = v5;
    uint64_t v9 = 88;
    uint64_t v12 = 16 * (void)[v6 mipmapLevelCount];

    *(unsigned char *)(*(void *)(a1 + 16) + 14) = AllocatePipelineReflectionWithType(a1, (uint64_t)v7, 0x7Fu);
    TranslateGTMTLTextureInfo(v6, (uint64_t)v7, 1);
  }
}

void SaveMTLIndirectCommandBufferInfo(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = v3;
    id v5 = DEVICEOBJECT(v3);

    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    memset(v7, 0, sizeof(v7));
    id v6 = v5;
    *(void *)&long long v8 = 56;

    *(unsigned char *)(*(void *)(a1 + 16) + 14) = AllocatePipelineReflectionWithType(a1, (uint64_t)v7, 0x80u);
    TranslateGTMTLIndirectCommandBufferInfo(v6, (uint64_t)v7, 1);
  }
}

void SaveMTLVisibleFunctionTableInfo(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = v3;
    id v5 = DEVICEOBJECT(v3);

    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v8 = 0u;
    memset(v7, 0, sizeof(v7));
    id v6 = v5;
    *(void *)&long long v8 = 56;

    *(unsigned char *)(*(void *)(a1 + 16) + 14) = AllocatePipelineReflectionWithType(a1, (uint64_t)v7, 0x81u);
    TranslateGTMTLVisibleFunctionTableInfo(v6, (uint64_t)v7, 1);
  }
}

void SaveMTLIntersectionFunctionTableInfo(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = v3;
    id v5 = DEVICEOBJECT(v3);

    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    uint64_t v8 = 0;
    long long v10 = 0u;
    memset(v7, 0, sizeof(v7));
    id v6 = v5;
    uint64_t v9 = 48;

    *(unsigned char *)(*(void *)(a1 + 16) + 14) = AllocatePipelineReflectionWithType(a1, (uint64_t)v7, 0x82u);
    TranslateGTMTLIntersectionFunctionTableInfo(v6, (uint64_t)v7, 1);
  }
}

void SaveMTLAccelerationStructureInfo(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = v3;
    id v5 = DEVICEOBJECT(v3);

    uint64_t v19 = 0;
    long long v18 = 0u;
    long long v17 = 0u;
    long long v16 = 0u;
    long long v15 = 0u;
    long long v14 = 0u;
    long long v13 = 0u;
    long long v12 = 0u;
    long long v11 = 0u;
    long long v10 = 0u;
    long long v9 = 0u;
    long long v8 = 0u;
    id v6 = v5;
    uint64_t v7 = 112;

    *(unsigned char *)(*(void *)(a1 + 16) + 14) = AllocatePipelineReflectionWithType(a1, (uint64_t)&v7, 0x83u);
    TranslateGTMTLAccelerationStructureInfo(v6, &v7, 1);
  }
}

void SaveMTLSamplerStateInfo(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = v3;
    id v5 = DEVICEOBJECT(v3);

    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    memset(v7, 0, sizeof(v7));
    id v6 = v5;
    *(void *)&long long v8 = 24;

    *(unsigned char *)(*(void *)(a1 + 16) + 14) = AllocatePipelineReflectionWithType(a1, (uint64_t)v7, 0x84u);
    TranslateGTMTLSamplerStateInfo(v6, (uint64_t)v7, 1);
  }
}

void SaveMTLLibraryInfoWithPath(uint64_t a1, void *a2, const char *a3)
{
  id v5 = a2;
  if (v5)
  {
    id v6 = v5;
    DEVICEOBJECT(v5);
    id v7 = (id)objc_claimAutoreleasedReturnValue();

    memset(v8, 0, sizeof(v8));
    TranslateGTMTLLibraryInfo(v7, (uint64_t)v8, 0, a3);
    *(unsigned char *)(*(void *)(a1 + 16) + 14) = AllocatePipelineReflectionWithType(a1, (uint64_t)v8, 0x85u);
    TranslateGTMTLLibraryInfo(v7, (uint64_t)v8, 1, a3);
  }
}

void SaveMTLPipelineLibraryInfoWithPath(uint64_t a1, void *a2, const char *a3)
{
  id v5 = a2;
  if (v5)
  {
    id v6 = v5;
    DEVICEOBJECT(v5);
    id v7 = (id)objc_claimAutoreleasedReturnValue();

    memset(v8, 0, sizeof(v8));
    TranslateGTMTLPipelineLibraryInfo(v7, v8, 0, a3);
    *(unsigned char *)(*(void *)(a1 + 16) + 14) = AllocatePipelineReflectionWithType(a1, (uint64_t)v8, 0x8Au);
    TranslateGTMTLPipelineLibraryInfo(v7, v8, 1, a3);
  }
}

uint64_t SaveDispatchData_(uint64_t a1, dispatch_data_t data)
{
  if (!data) {
    return 0;
  }
  id v6 = 0;
  size_t size_ptr = 0;
  dispatch_data_t v3 = dispatch_data_create_map(data, &v6, &size_ptr);
  uint64_t v4 = GTTraceEncoder_storeBlob(a1, v6, size_ptr);

  return v4;
}

uint64_t SaveNSData(uint64_t a1, id a2)
{
  id v3 = a2;
  id v4 = [v3 bytes];
  id v5 = [v3 length];

  return GTTraceEncoder_storeBlob(a1, v4, (uint64_t)v5);
}

const char *SaveNSURL(uint64_t a1, id a2)
{
  __n128 result = (const char *)[a2 fileSystemRepresentation];
  if (result)
  {
    id v4 = (char *)result;
    size_t v5 = strlen(result) + 1;
    return (const char *)GTTraceEncoder_storeBytes(a1, v4, v5);
  }
  return result;
}

uint64_t SaveMTLViewport(uint64_t a1, const void *a2, uint64_t a3)
{
  return GTTraceEncoder_storeBlob(a1, a2, 48 * a3);
}

uint64_t SaveMTLScissorRect(uint64_t a1, const void *a2, uint64_t a3)
{
  return GTTraceEncoder_storeBlob(a1, a2, 32 * a3);
}

uint64_t SaveMTLVertexAmplificationViewMappings(uint64_t a1, const void *a2, uint64_t a3)
{
  if (a2) {
    return GTTraceEncoder_storeBlob(a1, a2, 8 * a3);
  }
  else {
    return 0;
  }
}

uint64_t TransferBytes(uint64_t a1, uint64_t *a2, const void *a3)
{
  if ((*(_DWORD *)(boundaryTrackerInstance + 20) & 0xFFFFFFFE) != 2) {
    return 0;
  }
  uint64_t v6 = _sharedCaptureManager;
  HashBytes(a2, (unint64_t)a3, __s);
  GTMTLCaptureState_storePointer(v6, __s, a2, a3);
  v8[2] = v12;
  v8[3] = v13;
  char v9 = v14;
  v8[0] = *(_OWORD *)__s;
  v8[1] = v11;
  return GTTraceEncoder_storeBytes(a1, v8, 0x41uLL);
}

uint64_t SaveMTLTextureMipmapInfo(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_msgSend(v3, "mipmapLevelCount", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0);
  *((void *)&v14 + 1) = 16;
  *(void *)&long long v15 = 16 * (void)v4;
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a1, (uint64_t)&v13, 0x5Fu, 1u);
  id v6 = v3;
  id v7 = [v6 mipmapLevelCount];
  char v8 = (char)v7;
  uint64_t v9 = *((void *)&v14 + 1);
  uint64_t v10 = v15;
  TranslateGTMTLTextureMipmapLevels(v6, v15, (uint64_t)v7);

  *(unsigned char *)(v9 + 8) = v8;
  if (v8) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  *(void *)uint64_t v9 = v11;

  return DescriptorWithCount;
}

uint64_t AllocateDescriptorWithCount(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  do
  {
    v6 += (*(void *)(a2 + v5) + 7) & 0xFFFFFFFFFFFFFFF8;
    v5 += 8;
  }
  while (v5 != 424);
  uint64_t v7 = *(void *)(*(void *)(a1 + 8) + 24);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(unsigned __int8 *)(a1 + 42);
  *(unsigned char *)(a1 + 42) = v9 + 1;
  Bytes = GTTraceMemPool_allocateBytes(v7, v8, (v6 << 32) | ((unint64_t)a3 << 16) | ((unint64_t)a4 << 8) | v9);
  uint64_t v11 = 0;
  long long v12 = Bytes + 16;
  do
  {
    if (((*(void *)(a2 + v11) + 7) & 0xFFFFFFFFFFFFFFF8) != 0) {
      long long v13 = v12;
    }
    else {
      long long v13 = 0;
    }
    v12 += (*(void *)(a2 + v11) + 7) & 0xFFFFFFFFFFFFFFF8;
    *(void *)(a2 + v11) = v13;
    v11 += 8;
  }
  while (v11 != 424);
  return Bytes[8];
}

uint64_t SaveMTLArray(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    uint64_t v21 = 0;
    long long v20 = 0u;
    memset(v19, 0, sizeof(v19));
    *(void *)&long long v20 = 8 * (void)[v3 count] + 8;
    uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a1, (uint64_t)v19, 0, 1u);
    id v6 = [v4 count];
    uint64_t v7 = v20;
    *(void *)long long v20 = v6;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    id v8 = v4;
    id v9 = [v8 countByEnumeratingWithState:&v15 objects:v22 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = (void *)(v7 + 8);
      uint64_t v12 = *(void *)v16;
      do
      {
        for (uint64_t i = 0; i != v10; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v16 != v12) {
            objc_enumerationMutation(v8);
          }
          *v11++ = objc_msgSend(*(id *)(*((void *)&v15 + 1) + 8 * i), "streamReference", (void)v15);
        }
        id v10 = [v8 countByEnumeratingWithState:&v15 objects:v22 count:16];
      }
      while (v10);
    }
  }
  else
  {
    uint64_t DescriptorWithCount = 0;
  }

  return DescriptorWithCount;
}

uint64_t SaveIOSurfaceRef(uint64_t a1, __IOSurface *a2)
{
  uint64_t v7 = 0;
  memset(v6, 0, sizeof(v6));
  TranslateGTIOSurface(a2, (uint64_t)v6, 0);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a1, (uint64_t)v6, 0x3Fu, 1u);
  TranslateGTIOSurface(a2, (uint64_t)v6, 1);
  return DescriptorWithCount;
}

uint64_t SaveImageFilterFunctionInfo(uint64_t a1, char *a2, int a3)
{
  uint64_t v22 = 0;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  memset(v11, 0, sizeof(v11));
  if (a3 >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = a3;
    uint64_t v7 = (uint64_t *)(a2 + 8);
    do
    {
      uint64_t v8 = *v7;
      v7 += 3;
      v5 += 24 * v8;
      --v6;
    }
    while (v6);
    *(void *)&long long v12 = 24 * a3;
    *((void *)&v16 + 1) = v5;
  }
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a1, (uint64_t)v11, 0x14u, a3);
  TranslateGTMTLImageFilterFunctionInfo(a2, a3, (uint64_t)v11, 1);
  return DescriptorWithCount;
}

uint64_t SaveMTLFunctionDescriptor(uint64_t a1, void *a2, void *a3)
{
  uint64_t v10 = 0;
  memset(v9, 0, sizeof(v9));
  id v5 = a3;
  id v6 = a2;
  TranslateGTMTLFunctionDescriptor(v6, v5, v9, 0);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a1, (uint64_t)v9, 0x51u, 1u);
  TranslateGTMTLFunctionDescriptor(v6, v5, v9, 1);

  return DescriptorWithCount;
}

uint64_t SaveMTLIntersectionFunctionDescriptor(uint64_t a1, void *a2, void *a3)
{
  uint64_t v10 = 0;
  memset(v9, 0, sizeof(v9));
  id v5 = a3;
  id v6 = a2;
  TranslateGTMTLIntersectionFunctionDescriptor(v6, v5, v9, 0);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a1, (uint64_t)v9, 0x5Du, 1u);
  TranslateGTMTLIntersectionFunctionDescriptor(v6, v5, v9, 1);

  return DescriptorWithCount;
}

uint64_t SaveMTLBinaryArchiveDescriptor()
{
  return 0;
}

uint64_t SaveMTLFunctionConstantValues(uint64_t a1, void *a2, void *a3)
{
  uint64_t v10 = 0;
  memset(v9, 0, sizeof(v9));
  id v5 = a3;
  id v6 = a2;
  TranslateGTMTLFunctionConstantValues(v6, v5, v9, 0);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a1, (uint64_t)v9, 0x50u, 1u);
  TranslateGTMTLFunctionConstantValues(v6, v5, v9, 1);

  return DescriptorWithCount;
}

uint64_t SaveMTLDeviceDescriptor(uint64_t a1, void *a2)
{
  uint64_t v7 = 0;
  memset(v6, 0, sizeof(v6));
  id v3 = a2;
  TranslateGTMTLDeviceDescriptor(v3, (uint64_t)v6, 0);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a1, (uint64_t)v6, 0x41u, 1u);
  TranslateGTMTLDeviceDescriptor(v3, (uint64_t)v6, 1);

  return DescriptorWithCount;
}

uint64_t SaveMTLIndirectCommandBufferDescriptor(uint64_t a1, void *a2, void *a3)
{
  if (!a2) {
    return 0;
  }
  uint64_t v10 = 0;
  memset(v9, 0, sizeof(v9));
  id v5 = a3;
  id v6 = a2;
  TranslateGTMTLIndirectCommandBufferDescriptorWithDevice(v6, v5, (uint64_t)v9, 0);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a1, (uint64_t)v9, 0x37u, 1u);
  TranslateGTMTLIndirectCommandBufferDescriptorWithDevice(v6, v5, (uint64_t)v9, 1);

  return DescriptorWithCount;
}

uint64_t SaveMTLRenderPassDescriptor(uint64_t a1, void *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = 0;
  memset(v6, 0, sizeof(v6));
  id v3 = a2;
  TranslateGTMTLRenderPassDescriptor(v3, (uint64_t)v6, 0);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a1, (uint64_t)v6, 0x22u, 1u);
  TranslateGTMTLRenderPassDescriptor(v3, (uint64_t)v6, 1);

  return DescriptorWithCount;
}

uint64_t SaveMTLTextureDescriptor(uint64_t a1, void *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = 0;
  memset(v6, 0, sizeof(v6));
  id v3 = a2;
  TranslateGTMTLTextureDescriptor(v3, (uint64_t)v6, 0);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a1, (uint64_t)v6, 0x29u, 1u);
  TranslateGTMTLTextureDescriptor(v3, (uint64_t)v6, 1);

  return DescriptorWithCount;
}

uint64_t SaveMTLBufferDescriptor(uint64_t a1, void *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v19 = 0;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  memset(v6, 0, sizeof(v6));
  id v3 = a2;
  *(void *)&long long v7 = 40;

  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a1, (uint64_t)v6, 0x2Au, 1u);
  TranslateGTMTLBufferDescriptor(v3, (uint64_t)v6, 1);

  return DescriptorWithCount;
}

uint64_t SaveMTLRenderPipelineDescriptor(uint64_t a1, void *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = 0;
  memset(v6, 0, sizeof(v6));
  id v3 = a2;
  TranslateGTMTLRenderPipelineDescriptor(v3, v6, 0);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a1, (uint64_t)v6, 0x32u, 1u);
  TranslateGTMTLRenderPipelineDescriptor(v3, v6, 1);

  return DescriptorWithCount;
}

uint64_t SaveMTLMeshRenderPipelineDescriptor(uint64_t a1, void *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = 0;
  memset(v6, 0, sizeof(v6));
  id v3 = a2;
  TranslateGTMTLMeshRenderPipelineDescriptor(v3, v6, 0);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a1, (uint64_t)v6, 0x88u, 1u);
  TranslateGTMTLMeshRenderPipelineDescriptor(v3, v6, 1);

  return DescriptorWithCount;
}

uint64_t SaveMTLDepthStencilDescriptor(uint64_t a1, void *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = 0;
  memset(v6, 0, sizeof(v6));
  id v3 = a2;
  TranslateGTMTLDepthStencilDescriptor(v3, (uint64_t)v6, 0);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a1, (uint64_t)v6, 0x34u, 1u);
  TranslateGTMTLDepthStencilDescriptor(v3, (uint64_t)v6, 1);

  return DescriptorWithCount;
}

uint64_t SaveMTLSamplerDescriptor(uint64_t a1, void *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = 0;
  memset(v6, 0, sizeof(v6));
  id v3 = a2;
  TranslateGTMTLSamplerDescriptor(v3, (uint64_t)v6, 0);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a1, (uint64_t)v6, 0x35u, 1u);
  TranslateGTMTLSamplerDescriptor(v3, (uint64_t)v6, 1);

  return DescriptorWithCount;
}

uint64_t SaveMTLHeapDescriptor(uint64_t a1, void *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = 0;
  memset(v6, 0, sizeof(v6));
  id v3 = a2;
  TranslateGTMTLHeapDescriptor(v3, (uint64_t)v6, 0);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a1, (uint64_t)v6, 0x36u, 1u);
  TranslateGTMTLHeapDescriptor(v3, (uint64_t)v6, 1);

  return DescriptorWithCount;
}

uint64_t SaveMTLComputePipelineDescriptor(uint64_t a1, void *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v24 = 0;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  memset(v7, 0, sizeof(v7));
  id v3 = a2;
  TranslateGTMTLComputePipelineDescriptorAuto(v3, v7, 0);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a1, (uint64_t)v7, 0x3Du, 1u);
  uint64_t v5 = *((void *)&v8 + 1);
  TranslateGTMTLComputePipelineDescriptorAuto(v3, v7, 1);
  *(unsigned char *)(v5 + 951) = -1;

  return DescriptorWithCount;
}

uint64_t SaveMTLTileRenderPipelineDescriptor(uint64_t a1, void *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = 0;
  memset(v6, 0, sizeof(v6));
  id v3 = a2;
  TranslateGTMTLTileRenderPipelineDescriptor(v3, v6, 0);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a1, (uint64_t)v6, 0x39u, 1u);
  TranslateGTMTLTileRenderPipelineDescriptor(v3, v6, 1);

  return DescriptorWithCount;
}

uint64_t SaveMTLCommandQueueDescriptor(uint64_t a1, void *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = 0;
  memset(v6, 0, sizeof(v6));
  id v3 = a2;
  TranslateGTMTLCommandQueueDescriptor(v3, (uint64_t)v6, 0);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a1, (uint64_t)v6, 0x43u, 1u);
  TranslateGTMTLCommandQueueDescriptor(v3, (uint64_t)v6, 1);

  return DescriptorWithCount;
}

uint64_t SaveMTLIOCommandQueueDescriptor(uint64_t a1, void *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v26 = 0;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  uint64_t v7 = 0;
  long long v9 = 0u;
  memset(v6, 0, sizeof(v6));
  id v3 = a2;
  uint64_t v8 = 8;

  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a1, (uint64_t)v6, 0x89u, 1u);
  TranslateGTMTLIOCommandQueueDescriptor(v3, (uint64_t)v6, 1);

  return DescriptorWithCount;
}

uint64_t SaveMTLCommandBufferDescriptor(uint64_t a1, void *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v25 = 0;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  memset(v6, 0, sizeof(v6));
  id v3 = a2;
  *(void *)&long long v7 = 16;

  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a1, (uint64_t)v6, 0x4Eu, 1u);
  TranslateGTMTLCommandBufferDescriptor(v3, (uint64_t)v6, 1);

  return DescriptorWithCount;
}

uint64_t SaveMTLVisibleFunctionTableDescriptor(uint64_t a1, void *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v26 = 0;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v7 = 0u;
  memset(v6, 0, sizeof(v6));
  id v3 = a2;
  *(void *)&long long v7 = 24;
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a1, (uint64_t)v6, 0x52u, 1u);
  TranslateGTMTLVisibleFunctionTableDescriptor(v3, (uint64_t)v6, 1);

  return DescriptorWithCount;
}

uint64_t SaveMTLRasterizationRateMapDescriptor(uint64_t a1, void *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = 0;
  memset(v6, 0, sizeof(v6));
  id v3 = a2;
  TranslateGTMTLRasterizationRateMapDescriptor(v3, v6, 0);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a1, (uint64_t)v6, 0x45u, 1u);
  TranslateGTMTLRasterizationRateMapDescriptor(v3, v6, 1);

  return DescriptorWithCount;
}

uint64_t SaveMTLCompileOptions(uint64_t a1, void *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = 0;
  memset(v6, 0, sizeof(v6));
  id v3 = a2;
  TranslateGTMTLCompileOptions(v3, (uint64_t)v6, 0);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a1, (uint64_t)v6, 0x49u, 1u);
  TranslateGTMTLCompileOptions(v3, (uint64_t)v6, 1);

  return DescriptorWithCount;
}

uint64_t SaveMTLAccelerationStructureDescriptor(uint64_t a1, void *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = 0;
  memset(v6, 0, sizeof(v6));
  id v3 = a2;
  TranslateGTMTLAccelerationStructureDescriptor(v3, v6, 0);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a1, (uint64_t)v6, 0x5Bu, 1u);
  TranslateGTMTLAccelerationStructureDescriptor(v3, v6, 1);

  return DescriptorWithCount;
}

uint64_t SaveMTLCaptureDescriptor(uint64_t a1, void *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = 0;
  memset(v6, 0, sizeof(v6));
  id v3 = a2;
  TranslateGTMTLCaptureDescriptor(v3, (uint64_t)v6, 0);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a1, (uint64_t)v6, 0x4Du, 1u);
  TranslateGTMTLCaptureDescriptor(v3, (uint64_t)v6, 1);

  return DescriptorWithCount;
}

uint64_t SaveMTLBlitPassDescriptor(uint64_t a1, void *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = 0;
  memset(v6, 0, sizeof(v6));
  id v3 = a2;
  TranslateGTMTLBlitPassDescriptor(v3, (uint64_t)v6, 0);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a1, (uint64_t)v6, 0x24u, 1u);
  TranslateGTMTLBlitPassDescriptor(v3, (uint64_t)v6, 1);

  return DescriptorWithCount;
}

uint64_t SaveMTLComputePassDescriptor(uint64_t a1, void *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = 0;
  memset(v6, 0, sizeof(v6));
  id v3 = a2;
  TranslateGTMTLComputePassDescriptor(v3, (uint64_t)v6, 0);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a1, (uint64_t)v6, 0x26u, 1u);
  TranslateGTMTLComputePassDescriptor(v3, (uint64_t)v6, 1);

  return DescriptorWithCount;
}

uint64_t SaveMTLResourceStatePassDescriptor(uint64_t a1, void *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = 0;
  memset(v6, 0, sizeof(v6));
  id v3 = a2;
  TranslateGTMTLResourceStatePassDescriptor(v3, (uint64_t)v6, 0);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a1, (uint64_t)v6, 0x28u, 1u);
  TranslateGTMTLResourceStatePassDescriptor(v3, (uint64_t)v6, 1);

  return DescriptorWithCount;
}

uint64_t SaveMTLAccelerationStructurePassDescriptor(uint64_t a1, void *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = 0;
  memset(v6, 0, sizeof(v6));
  id v3 = a2;
  TranslateGTMTLAccelerationStructurePassDescriptor(v3, (uint64_t)v6, 0);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a1, (uint64_t)v6, 0x86u, 1u);
  TranslateGTMTLAccelerationStructurePassDescriptor(v3, (uint64_t)v6, 1);

  return DescriptorWithCount;
}

uint64_t SaveMTLIntersectionFunctionTableDescriptor(uint64_t a1, void *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v31 = 0;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  memset(v6, 0, sizeof(v6));
  id v3 = a2;
  *(void *)&long long v7 = 16;
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a1, (uint64_t)v6, 0x5Cu, 1u);
  TranslateGTMTLIntersectionFunctionTableDescriptor(v3, (uint64_t)v6, 1);

  return DescriptorWithCount;
}

uint64_t SaveMTLRenderPipelineFunctionsDescriptor(uint64_t a1, void *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = 0;
  memset(v6, 0, sizeof(v6));
  id v3 = a2;
  TranslateGTMTLRenderPipelineFunctionsDescriptor(v3, (uint64_t)v6, 0);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a1, (uint64_t)v6, 0x60u, 1u);
  TranslateGTMTLRenderPipelineFunctionsDescriptor(v3, (uint64_t)v6, 1);

  return DescriptorWithCount;
}

uint64_t SaveMTLAccelerationStructureAllocationDescriptor(uint64_t a1, void *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v32 = 0;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  id v3 = a2;
  *(void *)&long long v7 = 16;
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a1, (uint64_t)&v6, 0x87u, 1u);
  TranslateGTMTLAccelerationStructureAllocationDescriptor(v3, (uint64_t)&v6, 1);

  return DescriptorWithCount;
}

uint64_t SaveMTLResidencySetDescriptor(uint64_t a1, void *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = 0;
  memset(v6, 0, sizeof(v6));
  id v3 = a2;
  TranslateGTMTLResidencySetDescriptor(v3, (uint64_t *)v6, 0);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a1, (uint64_t)v6, 0x8Eu, 1u);
  TranslateGTMTLResidencySetDescriptor(v3, (uint64_t *)v6, 1);

  return DescriptorWithCount;
}

uint64_t SaveMTLCounterSampleBufferDescriptor(uint64_t a1, void *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = 0;
  memset(v6, 0, sizeof(v6));
  id v3 = a2;
  TranslateGTMTLCounterSampleBufferDescriptor(v3, v6, 0);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a1, (uint64_t)v6, 0x48u, 1u);
  TranslateGTMTLCounterSampleBufferDescriptor(v3, v6, 1);

  return DescriptorWithCount;
}

uint64_t SaveMTLStitchedLibraryDescriptor(uint64_t a1, void *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = 0;
  memset(v6, 0, sizeof(v6));
  id v3 = a2;
  TranslateGTMTLStitchedLibraryDescriptor(v3, v6, 0);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a1, (uint64_t)v6, 0x66u, 1u);
  TranslateGTMTLStitchedLibraryDescriptor(v3, v6, 1);

  return DescriptorWithCount;
}

uint64_t SaveMTLStitchedLibraryDescriptorSPI(uint64_t a1, void *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = 0;
  memset(v6, 0, sizeof(v6));
  id v3 = a2;
  TranslateGTMTLStitchedLibraryDescriptorSPI(v3, v6, 0);
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a1, (uint64_t)v6, 0x66u, 1u);
  TranslateGTMTLStitchedLibraryDescriptorSPI(v3, v6, 1);

  return DescriptorWithCount;
}

uint64_t SaveMTLFXSpatialScalerDescriptor(uint64_t a1, void *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v16 = 0;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v7 = 0u;
  memset(v6, 0, sizeof(v6));
  id v3 = a2;
  *(void *)&long long v7 = 40;
  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a1, (uint64_t)v6, 0x8Bu, 1u);
  TranslateGTMTLFXSpatialScalerDescriptor(v3, (uint64_t)v6, 1);

  return DescriptorWithCount;
}

uint64_t SaveMTLFXTemporalScalerDescriptor(uint64_t a1, void *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v17 = 0;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  uint64_t v7 = 0;
  memset(v6, 0, sizeof(v6));
  id v3 = a2;
  uint64_t v8 = 64;

  uint64_t DescriptorWithCount = AllocateDescriptorWithCount(a1, (uint64_t)v6, 0x8Cu, 1u);
  TranslateGTMTLFXTemporalScalerDescriptor(v3, (uint64_t)v6, 1);

  return DescriptorWithCount;
}

uint64_t GTResourceTrackerGetResourceType(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a1;
  entry = find_entry(a2, &v6, 8uLL, 0);
  if (!*entry) {
    return 0;
  }
  uint64_t v3 = *(void *)(*entry + 32);
  if (!v3) {
    return 0;
  }
  int v4 = *(_DWORD *)(*(void *)(v3 + 32) + 72);

  return GetFuncEnumConstructorType(v4);
}

uint64_t GTResourceTrackerUsingResource(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = a3;
  if (a3)
  {
    uint64_t v8 = (apr_pool_t **)result;
    __n128 result = (uint64_t)find_entry(result, &v17, 8uLL, 0);
    if (!*(void *)result || !*(void *)(*(void *)result + 32))
    {
      long long v9 = apr_palloc(*v8, 0x10uLL);
      *(void *)long long v9 = v17;
      apr_hash_set((apr_hash_t *)v8, v9, 8, v9);
      *(void *)&long long v18 = v17;
      uint64_t v10 = *find_entry(a4, &v18, 8uLL, 0);
      if (v10 && (uint64_t v11 = *(void *)(v10 + 32)) != 0)
      {
        uint64_t v12 = *(void *)(v11 + 32);
        if (v12) {
          uint64_t v13 = v12 + 64;
        }
        else {
          uint64_t v13 = 0;
        }
      }
      else
      {
        uint64_t v13 = 0;
      }
      __n128 result = GetFuncEnumConstructorType(*(_DWORD *)(v13 + 8));
      v9[2] = result;
      if (a2 != 16)
      {
        if (a2 != 80)
        {
          if (a2 != 22) {
            return result;
          }
          long long v18 = 0u;
          uint64_t v19 = 0;
          long long v25 = 0u;
          long long v27 = 0u;
          long long v28 = 0u;
          long long v24 = 0u;
          long long v21 = 0u;
          long long v22 = 0u;
          LODWORD(v18) = 22;
          uint64_t v20 = -1;
          WORD1(v25) = 2;
          long long v23 = 0xFFFFFFFFFFFFFFFFLL;
          long long v26 = 0xFFFFFFFFFFFFFFFFLL;
          GTMTLSMBuffer_processTraceFuncWithMap((char *)&v18, a5, (uint64_t *)v13);
          goto LABEL_14;
        }
        long long v18 = 0u;
        uint64_t v19 = 0;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v27 = 0u;
        long long v25 = 0u;
        long long v26 = 0u;
        long long v24 = 0u;
        long long v21 = 0u;
        long long v22 = 0u;
        LODWORD(v18) = 80;
        uint64_t v20 = -1;
        WORD1(v25) = 2;
        long long v23 = 0xFFFFFFFFFFFFFFFFLL;
        uint64_t v32 = 0xFFFFFFFFLL;
        GTMTLSMTexture_processTraceFuncWithMap((char *)&v18, a5, (uint64_t *)v13);
        uint64_t v14 = v28;
        if ((void)v28)
        {
          long long v15 = v8;
          uint64_t v16 = 80;
          return GTResourceTrackerUsingResource(v15, v16, v14, a4, a5);
        }
        uint64_t v14 = *((void *)&v27 + 1);
        if (!*((void *)&v27 + 1))
        {
LABEL_14:
          uint64_t v14 = v22;
          long long v15 = v8;
          uint64_t v16 = 50;
          return GTResourceTrackerUsingResource(v15, v16, v14, a4, a5);
        }
LABEL_22:
        long long v15 = v8;
        uint64_t v16 = 22;
        return GTResourceTrackerUsingResource(v15, v16, v14, a4, a5);
      }
      long long v18 = 0u;
      uint64_t v19 = 0;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v27 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      LODWORD(v18) = 16;
      uint64_t v20 = -1;
      WORD1(v25) = 2;
      long long v23 = 0xFFFFFFFFFFFFFFFFLL;
      __n128 result = (uint64_t)GTMTLSMAccelerationStructure_processTraceFuncWithMap((char *)&v18, a5, (uint64_t *)v13);
      if ((void)v22) {
        __n128 result = GTResourceTrackerUsingResource(v8, 50, v22, a4, a5);
      }
      uint64_t v14 = v28;
      if ((void)v28) {
        goto LABEL_22;
      }
    }
  }
  return result;
}

void *GTResourceTrackerResourceWrite(uint64_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  __n128 result = tracker_resource_get(a1, a2, a3, a4);
  if (result) {
    result[4] = a4;
  }
  return result;
}

void *tracker_resource_get(uint64_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3;
  uint64_t v23 = a3;
  GTResourceTrackerUsingResource(a1[2], a2, a3, *a1, a1[1]);
  uint64_t ParentResource = GetParentResource(*a1, v5, a1[1]);
  if (ParentResource != v5)
  {
    find_entry(*a1, &ParentResource, 8uLL, 0);
    uint64_t v5 = ParentResource;
    uint64_t v23 = ParentResource;
  }
  if (!v5) {
    return 0;
  }
  uint64_t v7 = (apr_hash_t *)a1[4];
  entry = find_entry((uint64_t)v7, &v23, 8uLL, 0);
  if (!*entry || (long long v9 = *(void **)(*entry + 32)) == 0)
  {
    uint64_t v10 = *(apr_pool_t **)v7;
    uint64_t v11 = *a1;
    uint64_t v12 = a1[1];
    uint64_t v24 = v23;
    uint64_t v13 = *find_entry(v11, &v24, 8uLL, 0);
    if (v13)
    {
      uint64_t v14 = *(void **)(v13 + 32);
      if (v14)
      {
        uint64_t v15 = v14[4];
        if (v15)
        {
          if ((*(unsigned char *)(v15 + 79) & 8) != 0)
          {
            uint64_t v16 = v15 + 64;
            goto LABEL_14;
          }
        }
      }
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v16 = 0;
LABEL_14:
    uint64_t v17 = apr_palloc(v10, 0x38uLL);
    long long v9 = v17;
    if (v17)
    {
      *((void *)v17 + 6) = 0;
      v17[1] = 0u;
      v17[2] = 0u;
      *uint64_t v17 = 0u;
    }
    *(void *)uint64_t v17 = v14[1];
    *((void *)v17 + 1) = v24;
    int FuncEnumConstructorType = GetFuncEnumConstructorType(*(_DWORD *)(v16 + 8));
    void v9[3] = -1;
    *((_DWORD *)v9 + 10) = FuncEnumConstructorType;
    v9[2] = a4;
    v9[4] = -1;
    if (FuncEnumConstructorType > 59)
    {
      if (FuncEnumConstructorType != 60)
      {
        if (FuncEnumConstructorType != 80)
        {
          if (FuncEnumConstructorType != 83) {
            goto LABEL_36;
          }
          goto LABEL_26;
        }
        long long v25 = 0u;
        uint64_t v26 = 0;
        long long v31 = 0u;
        long long v32 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        long long v29 = 0u;
        long long v28 = 0u;
        LODWORD(v25) = 80;
        uint64_t v27 = -1;
        WORD1(v32) = 2;
        long long v30 = 0xFFFFFFFFFFFFFFFFLL;
        uint64_t v39 = 0xFFFFFFFFLL;
        GTMTLSMTexture_processTraceFuncWithMap((char *)&v25, v12, (uint64_t *)v16);
        if (*((void *)&v32 + 1) && (*(_WORD *)(*((void *)&v32 + 1) + 36) & 0xF0) == 0x30) {
          void v9[3] = 0x7FFFFFFFFFFFFFFFLL;
        }
        if (IsFuncEnumSharedResourceConstructor(*(_DWORD *)(v16 + 8))) {
          LOBYTE(v20) = (*(unsigned char *)(v16 + 15) & 2) == 0;
        }
        else {
          LOBYTE(v20) = 0;
        }
LABEL_35:
        *((unsigned char *)v9 + 48) = v20;
        goto LABEL_36;
      }
      *long long v9 = v14[2];
LABEL_28:
      LOBYTE(v20) = 1;
      goto LABEL_35;
    }
    if (FuncEnumConstructorType == 16)
    {
LABEL_26:
      *long long v9 = v14[2];
      goto LABEL_36;
    }
    if (FuncEnumConstructorType == 22)
    {
      long long v25 = 0u;
      uint64_t v26 = 0;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v33 = 0u;
      long long v29 = 0u;
      long long v28 = 0u;
      LODWORD(v25) = 22;
      uint64_t v27 = -1;
      WORD1(v32) = 2;
      long long v30 = 0xFFFFFFFFFFFFFFFFLL;
      *(void *)&long long v33 = -1;
      GTMTLSMBuffer_processTraceFuncWithMap((char *)&v25, v12, (uint64_t *)v16);
      if (IsFuncEnumSharedResourceConstructor(*(_DWORD *)(v16 + 8))) {
        goto LABEL_28;
      }
      if ((v32 & 0xE0) == 0)
      {
        unsigned int v19 = atomic_load(v14 + 7);
        int v20 = (v19 >> 1) & 1;
        goto LABEL_35;
      }
    }
LABEL_36:
    apr_hash_set(v7, v9 + 1, 8, v9);
  }
  return v9;
}

uint64_t GetParentResource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v12 = a2;
  if (!a2) {
    return v12;
  }
  uint64_t v5 = *find_entry(a1, &v12, 8uLL, 0);
  if (v5 && (uint64_t v6 = *(void *)(v5 + 32)) != 0)
  {
    uint64_t v7 = *(void *)(v6 + 32);
    uint64_t v8 = v7 ? v7 + 64 : 0;
  }
  else
  {
    uint64_t v8 = 0;
  }
  int v9 = *(_DWORD *)(v8 + 8);
  if (IsFuncEnumSharedResourceConstructor(v9)) {
    return v12;
  }
  if (GetFuncEnumConstructorType(v9) != 80) {
    return v12;
  }
  long long v13 = 0u;
  uint64_t v14 = 0;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v22 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  LODWORD(v13) = 80;
  uint64_t v15 = -1;
  WORD1(v20) = 2;
  long long v18 = 0xFFFFFFFFFFFFFFFFLL;
  uint64_t v27 = 0xFFFFFFFFLL;
  GTMTLSMTexture_processTraceFuncWithMap((char *)&v13, a3, (uint64_t *)v8);
  uint64_t v10 = v23;
  if ((void)v23) {
    return GetParentResource(a1, v10, a3);
  }
  uint64_t v10 = *((void *)&v22 + 1);
  if (*((void *)&v22 + 1)) {
    return GetParentResource(a1, v10, a3);
  }
  else {
    return v12;
  }
}

void *GTResourceTrackerResourceRead(uint64_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = tracker_resource_get(a1, a2, a3, a4);
  int v9 = v8;
  if (v8)
  {
    uint64_t v10 = v8[3];
    if (v10 < 0) {
      uint64_t v10 = a4;
    }
    v8[3] = v10;
    if (*((unsigned char *)v8 + 48))
    {
      uint64_t v11 = tracker_resource_get(a1, a2, a3, a4);
      if (v11) {
        v11[4] = a4;
      }
    }
  }
  return v9;
}

void *GTResourceTrackerResourceForceDownload(uint64_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  __n128 result = tracker_resource_get(a1, a2, a3, a4);
  if (result) {
    *((unsigned char *)result + 48) = 1;
  }
  return result;
}

void *GTResourceTrackerResourceUsage(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 2) != 0)
  {
    uint64_t v11 = tracker_resource_get(a1, a2, a3, a4);
    uint64_t v10 = v11;
    if (v11) {
      v11[4] = a4;
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  if ((a5 & 5) != 0)
  {
    uint64_t v12 = GTResourceTrackerResourceRead(a1, a2, a3, a4);
    if (v12) {
      return v12;
    }
  }
  return v10;
}

uint64_t GTResourceTrackerUsingResourceArray(uint64_t result, int a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a4)
  {
    uint64_t v8 = a4;
    uint64_t v11 = result;
    do
    {
      uint64_t v12 = *a3;
      if (*a3)
      {
        if (a2)
        {
          int ResourceType = a2;
        }
        else
        {
          int ResourceType = GTResourceTrackerGetResourceType(*a3, a5);
          uint64_t v12 = *a3;
        }
        __n128 result = GTResourceTrackerUsingResource(v11, ResourceType, v12, a5, a6);
      }
      ++a3;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t *GTResourceTrackerResourceReadArray(uint64_t *result, int a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  if (a4)
  {
    uint64_t v6 = a4;
    int v9 = result;
    do
    {
      uint64_t v10 = *a3;
      if (*a3)
      {
        if (a2)
        {
          int ResourceType = a2;
        }
        else
        {
          int ResourceType = GTResourceTrackerGetResourceType(*a3, *v9);
          uint64_t v10 = *a3;
        }
        __n128 result = GTResourceTrackerResourceRead(v9, ResourceType, v10, a5);
      }
      ++a3;
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t *GTResourceTrackerResourceReadMTLArray(uint64_t *a1, int a2, uint64_t *a3, uint64_t a4)
{
  return GTResourceTrackerResourceReadArray(a1, a2, a3 + 1, *a3, a4);
}

uint64_t *GTResourceTrackerResourceWriteArray(uint64_t *result, int a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  if (a4)
  {
    uint64_t v6 = a4;
    int v9 = result;
    do
    {
      uint64_t v10 = *a3;
      if (*a3)
      {
        if (a2)
        {
          int ResourceType = a2;
        }
        else
        {
          int ResourceType = GTResourceTrackerGetResourceType(*a3, *v9);
          uint64_t v10 = *a3;
        }
        __n128 result = tracker_resource_get(v9, ResourceType, v10, a5);
        if (result) {
          result[4] = a5;
        }
      }
      ++a3;
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t *GTResourceTrackerResourceUsageArray(uint64_t *result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a3)
  {
    uint64_t v7 = a3;
    int v9 = result;
    do
    {
      __n128 result = (uint64_t *)*a2;
      if (*a2)
      {
        int ResourceType = GTResourceTrackerGetResourceType((uint64_t)result, *v9);
        __n128 result = GTResourceTrackerResourceUsage(v9, ResourceType, *a2, a4, a5);
      }
      ++a2;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t *GTResourceTrackerResourceWriteMTLArray(uint64_t *a1, int a2, uint64_t *a3, uint64_t a4)
{
  return GTResourceTrackerResourceWriteArray(a1, a2, a3 + 1, *a3, a4);
}

void GTResourceTrackerUsingResourceHeap(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a2;
  if (a2)
  {
    GTResourceTrackerUsingResource(a1[2], 50, a2, *a1, a1[1]);
    entry = find_entry(a1[3], &v7, 8uLL, 0);
    if (!*entry || !*(void *)(*entry + 32))
    {
      uint64_t v6 = apr_palloc(*(apr_pool_t **)a1[3], 0x10uLL);
      void *v6 = v7;
      v6[1] = a3;
      apr_hash_set((apr_hash_t *)a1[3], v6, 8, v6);
    }
  }
}

void ResourceTracker_postAccumulateHeapReads(uint64_t *a1)
{
  if (*(_DWORD *)(a1[3] + 48))
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (apr_hash_index_t *)(*a1 + 16);
    *(void *)(v2 + 24) = 0;
    *(void *)(v2 + 32) = 0;
    *(void *)(v2 + 16) = v2;
    *(_DWORD *)(v2 + 40) = 0;
    int v4 = apr_hash_next(v3);
    if (v4)
    {
      uint64_t v5 = v4;
      do
      {
        uint64_t v6 = *(void *)(*((void *)v5 + 1) + 32);
        if (!v6) {
          goto LABEL_26;
        }
        uint64_t v7 = *(void *)(v6 + 32);
        if (!v7 || (*(unsigned char *)(v7 + 79) & 8) == 0) {
          goto LABEL_26;
        }
        uint64_t v8 = (uint64_t *)(v7 + 64);
        int FuncEnumConstructorType = GetFuncEnumConstructorType(*(_DWORD *)(v7 + 72));
        switch(FuncEnumConstructorType)
        {
          case 16:
            long long v20 = 0u;
            uint64_t v21 = 0;
            long long v32 = 0u;
            long long v33 = 0u;
            long long v30 = 0u;
            long long v31 = 0u;
            long long v28 = 0u;
            long long v29 = 0u;
            long long v26 = 0u;
            long long v27 = 0u;
            long long v24 = 0u;
            long long v23 = 0u;
            LODWORD(v20) = 16;
            uint64_t v22 = -1;
            WORD1(v27) = 2;
            long long v25 = 0xFFFFFFFFFFFFFFFFLL;
            GTMTLSMAccelerationStructure_processTraceFuncWithMap((char *)&v20, a1[1], v8);
            if (!(void)v24) {
              goto LABEL_26;
            }
            uint64_t v18 = *find_entry(a1[3], &v24, 8uLL, 0);
            if (!v18) {
              goto LABEL_26;
            }
            uint64_t v19 = *(void *)(v18 + 32);
            if (!v19) {
              goto LABEL_26;
            }
            unint64_t v12 = *(void *)(v19 + 8);
            uint64_t v13 = *((void *)&v20 + 1);
            if (v12 > IsHeapResourceMadeAliasable(v2, *((uint64_t *)&v20 + 1), v12)) {
              goto LABEL_26;
            }
            uint64_t v14 = a1;
            int v15 = 16;
            break;
          case 80:
            long long v20 = 0u;
            uint64_t v21 = 0;
            long long v32 = 0u;
            long long v33 = 0u;
            long long v30 = 0u;
            long long v31 = 0u;
            long long v28 = 0u;
            long long v29 = 0u;
            long long v26 = 0u;
            long long v27 = 0u;
            long long v24 = 0u;
            long long v23 = 0u;
            LODWORD(v20) = 80;
            uint64_t v22 = -1;
            WORD1(v27) = 2;
            long long v25 = 0xFFFFFFFFFFFFFFFFLL;
            uint64_t v34 = 0xFFFFFFFFLL;
            GTMTLSMTexture_processTraceFuncWithMap((char *)&v20, a1[1], v8);
            if (!(void)v24) {
              goto LABEL_26;
            }
            uint64_t v16 = *find_entry(a1[3], &v24, 8uLL, 0);
            if (!v16) {
              goto LABEL_26;
            }
            uint64_t v17 = *(void *)(v16 + 32);
            if (!v17) {
              goto LABEL_26;
            }
            unint64_t v12 = *(void *)(v17 + 8);
            uint64_t v13 = *((void *)&v20 + 1);
            if (v12 > IsHeapResourceMadeAliasable(v2, *((uint64_t *)&v20 + 1), v12)) {
              goto LABEL_26;
            }
            uint64_t v14 = a1;
            int v15 = 80;
            break;
          case 22:
            long long v20 = 0u;
            uint64_t v21 = 0;
            long long v27 = 0u;
            long long v29 = 0u;
            long long v30 = 0u;
            long long v26 = 0u;
            long long v23 = 0u;
            long long v24 = 0u;
            LODWORD(v20) = 22;
            uint64_t v22 = -1;
            WORD1(v27) = 2;
            long long v25 = 0xFFFFFFFFFFFFFFFFLL;
            long long v28 = 0xFFFFFFFFFFFFFFFFLL;
            GTMTLSMBuffer_processTraceFuncWithMap((char *)&v20, a1[1], v8);
            if (!(void)v24) {
              goto LABEL_26;
            }
            uint64_t v10 = *find_entry(a1[3], &v24, 8uLL, 0);
            if (!v10) {
              goto LABEL_26;
            }
            uint64_t v11 = *(void *)(v10 + 32);
            if (!v11) {
              goto LABEL_26;
            }
            unint64_t v12 = *(void *)(v11 + 8);
            uint64_t v13 = *((void *)&v20 + 1);
            if (v12 > IsHeapResourceMadeAliasable(v2, *((uint64_t *)&v20 + 1), v12)) {
              goto LABEL_26;
            }
            uint64_t v14 = a1;
            int v15 = 22;
            break;
          default:
            goto LABEL_26;
        }
        GTResourceTrackerResourceRead(v14, v15, v13, v12);
LABEL_26:
        uint64_t v5 = apr_hash_next(v5);
      }
      while (v5);
    }
    apr_hash_clear((apr_hash_t *)a1[3]);
  }
}

uint64_t IsHeapResourceMadeAliasable(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v19 = a2;
  uint64_t v4 = *(void *)(*(void *)(*find_entry(a1, &v19, 8uLL, 0) + 32) + 32);
  if (v4)
  {
    unsigned int v5 = 0;
    while (1)
    {
      unsigned int v6 = atomic_load((unsigned int *)(v4 + 4));
      uint64_t v7 = v5 + (v6 >> 6) - 1;
      if ((int)v7 > 0) {
        break;
      }
      uint64_t v4 = *(void *)(v4 + 40);
      unsigned int v5 = v7;
      if (!v4)
      {
        unsigned int v5 = v7;
        goto LABEL_8;
      }
    }
  }
  else
  {
    unsigned int v5 = 0;
  }
  uint64_t v7 = 0;
LABEL_8:
  unint64_t v8 = v5 | (unint64_t)(v7 << 32);
LABEL_9:
  uint64_t v9 = v4 + 64;
  while (v4)
  {
    int v10 = HIDWORD(v8) - v8;
    if ((*(unsigned char *)(v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6) + 15) & 8) == 0) {
      break;
    }
    unint64_t v11 = *(void *)(v9 + ((uint64_t)v10 << 6));
    if (v11 > a3) {
      break;
    }
    int v12 = *(_DWORD *)(v9 + ((uint64_t)v10 << 6) + 8);
    BOOL v14 = v12 == -16122 || v12 == -16114 || v12 == -15651;
    if (v14 || (IsFuncEnumDestructor(v12) & 1) != 0) {
      return v11;
    }
    unsigned int v15 = atomic_load((unsigned int *)(v4 + 4));
    int v16 = v8 + (v15 >> 6);
    uint64_t v17 = (HIDWORD(v8) + 1);
    unint64_t v8 = (v17 << 32) | v8;
    if (v17 == v16 - 1)
    {
      unint64_t v8 = (v17 << 32) | v17;
      uint64_t v4 = *(void *)(v4 + 40);
      goto LABEL_9;
    }
  }
  return -1;
}

void GTResourceTrackerUsingResourceHeapArray(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v5 = a3;
    do
    {
      uint64_t v8 = *a2++;
      GTResourceTrackerUsingResourceHeap(a1, v8, a4);
      --v5;
    }
    while (v5);
  }
}

void *GTResourceTrackerMake(uint64_t a1, uint64_t a2, apr_pool_t *p)
{
  unsigned int v6 = apr_palloc(p, 0x30uLL);
  void *v6 = a1;
  v6[1] = a2;
  _OWORD v6[2] = apr_hash_make(p);
  v6[3] = apr_hash_make(p);
  v6[4] = apr_hash_make(p);
  v6[5] = apr_hash_make(p);
  return v6;
}

void GTResourceTrackerProcessFunction(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = __chkstk_darwin(a1, a2);
  uint64_t v4 = v3;
  uint64_t v5 = (uint64_t *)v2;
  int v6 = *(_DWORD *)(v3 + 8);
  int FuncEnumConstructorType = GetFuncEnumConstructorType(v6);
  if (IsCommandEncoder(FuncEnumConstructorType))
  {
    bzero(&v83, 0x2B90uLL);
    GTMTLSMCommandEncoder_processTraceFunc((uint64_t)&v83, (uint64_t *)v4, v5[1]);
    if (v83 <= 64)
    {
      if (v83 != 17 && v83 != 21)
      {
        if (v83 != 28) {
          return;
        }
        goto LABEL_38;
      }
    }
    else
    {
      if (v83 <= 73)
      {
        if (v83 != 65)
        {
          if (v83 != 70) {
            return;
          }
          uint64_t v8 = *v5;
          *(void *)&long long v93 = v84;
          uint64_t v9 = *find_entry(v8, &v93, 8uLL, 0);
          if (v9
            && (uint64_t v10 = *(void *)(v9 + 32)) != 0
            && (uint64_t v11 = *(void *)(v10 + 32)) != 0
            && (*(unsigned char *)(v11 + 79) & 8) != 0)
          {
            uint64_t v12 = v11 + 64;
          }
          else
          {
            uint64_t v12 = 0;
          }
          bzero(&v93, 0x2B90uLL);
          GTMTLSMCommandEncoder_processTraceFunc((uint64_t)&v93, (uint64_t *)v12, v5[1]);
          bzero(&v87, 0x2B90uLL);
          uint64_t v86 = 0;
          long long v85 = 0;
          if (*(_DWORD *)(v12 + 8) != -16286)
          {
            uint64_t v54 = (uint64_t *)*((void *)&v97 + 1);
            uint64_t v55 = renderCommandEncoder_processStreamWithDescriptor(v5, *((uint64_t *)&v97 + 1), (uint64_t)&v93);
            long long v85 = v105;
            LOWORD(v86) = v105[607];
            goto LABEL_113;
          }
          uint64_t v13 = *v5;
          v106[0] = *((void *)&v96 + 1);
          uint64_t v14 = *find_entry(v13, v106, 8uLL, 0);
          if (v14)
          {
            uint64_t v15 = *(void *)(v14 + 32);
            if (v15)
            {
              uint64_t v16 = *(void *)(v15 + 32);
              if (v16)
              {
                if ((*(unsigned char *)(v16 + 79) & 8) != 0)
                {
                  uint64_t v17 = (uint64_t *)(v16 + 64);
LABEL_97:
                  GTMTLSMCommandEncoder_processTraceFunc((uint64_t)&v87, v17, v5[1]);
                  uint64_t v72 = *(void *)(v15 + 32);
                  if (v72)
                  {
                    unsigned int v73 = 0;
                    while (1)
                    {
                      unsigned int v74 = atomic_load((unsigned int *)(v72 + 4));
                      uint64_t v75 = v73 + (v74 >> 6) - 1;
                      if ((int)v75 > 1) {
                        break;
                      }
                      uint64_t v72 = *(void *)(v72 + 40);
                      unsigned int v73 = v75;
                      if (!v72)
                      {
                        unsigned int v73 = v75;
                        goto LABEL_104;
                      }
                    }
                    uint64_t v75 = 1;
                  }
                  else
                  {
                    unsigned int v73 = 0;
                    uint64_t v75 = 0;
                  }
LABEL_104:
                  unint64_t v76 = v73 | (unint64_t)(v75 << 32);
LABEL_105:
                  uint64_t v77 = v72 + 64;
                  while (v72 && (*(unsigned char *)(v77 + ((uint64_t)(HIDWORD(v76) - (int)v76) << 6) + 15) & 8) != 0)
                  {
                    uint64_t v78 = v77 + ((uint64_t)(HIDWORD(v76) - (int)v76) << 6);
                    int v79 = GetFuncEnumConstructorType(*(_DWORD *)(v78 + 8));
                    if (!IsCommandEncoder(v79)) {
                      GTMTLSMCommandEncoder_processTraceFunc((uint64_t)&v87, (uint64_t *)v78, v5[1]);
                    }
                    unsigned int v80 = atomic_load((unsigned int *)(v72 + 4));
                    int v81 = v76 + (v80 >> 6);
                    uint64_t v82 = (HIDWORD(v76) + 1);
                    unint64_t v76 = (v82 << 32) | v76;
                    if (v82 == v81 - 1)
                    {
                      unint64_t v76 = (v82 << 32) | v82;
                      uint64_t v72 = *(void *)(v72 + 40);
                      goto LABEL_105;
                    }
                  }
                  uint64_t v54 = v91;
                  long long v85 = v92;
                  LOWORD(v86) = v92[64];
                  uint64_t v55 = renderCommandEncoder_processStreamWithDescriptor(v5, (uint64_t)v91, (uint64_t)&v93);
LABEL_113:
                  RenderEncoderWithDescriptor(v5, v54);
                  if (v93 == 70)
                  {
                    long long v69 = (long long **)&v85;
                    uint64_t v70 = v5;
                    uint64_t v71 = (uint64_t)v54;
                    uint64_t v68 = v55;
LABEL_115:
                    RenderEncoderEndEncoding(v70, v71, (uint64_t)v69, v68);
                  }
                  return;
                }
              }
            }
          }
          else
          {
            uint64_t v15 = 0;
          }
          uint64_t v17 = 0;
          goto LABEL_97;
        }
        uint64_t v35 = *v5;
        *(void *)&long long v93 = v84;
        uint64_t v36 = *find_entry(v35, &v93, 8uLL, 0);
        if (v36)
        {
          uint64_t v37 = *(void *)(v36 + 32);
          bzero(&v93, 0x2B90uLL);
          if (v37)
          {
            uint64_t v38 = *(void *)(v37 + 32);
            if (v38)
            {
              if ((*(unsigned char *)(v38 + 79) & 8) != 0)
              {
                uint64_t v39 = (uint64_t *)(v38 + 64);
LABEL_77:
                GTMTLSMCommandEncoder_processTraceFunc((uint64_t)&v93, v39, v5[1]);
                uint64_t v56 = *((void *)&v97 + 1);
                RenderEncoderWithDescriptor(v5, *((uint64_t **)&v97 + 1));
                uint64_t v57 = *(void *)(v37 + 32);
                if (v57)
                {
                  unsigned int v58 = 0;
                  while (1)
                  {
                    unsigned int v59 = atomic_load((unsigned int *)(v57 + 4));
                    uint64_t v60 = v58 + (v59 >> 6) - 1;
                    if ((int)v60 > 1) {
                      break;
                    }
                    uint64_t v57 = *(void *)(v57 + 40);
                    unsigned int v58 = v60;
                    if (!v57)
                    {
                      unsigned int v58 = v60;
                      goto LABEL_84;
                    }
                  }
                  uint64_t v60 = 1;
                }
                else
                {
                  unsigned int v58 = 0;
                  uint64_t v60 = 0;
                }
LABEL_84:
                unint64_t v61 = v58 | (unint64_t)(v60 << 32);
LABEL_85:
                uint64_t v62 = v57 + 64;
                while (v57 && (*(unsigned char *)(v62 + ((uint64_t)(HIDWORD(v61) - (int)v61) << 6) + 15) & 8) != 0)
                {
                  uint64_t v63 = v62 + ((uint64_t)(HIDWORD(v61) - (int)v61) << 6);
                  if (IsFuncEnumEndEncoding(*(_DWORD *)(v63 + 8)))
                  {
                    long long v87 = &v98;
                    __int16 v88 = v104;
                    int v89 = 0;
                    __int16 v90 = 0;
                    uint64_t v68 = *(void *)v63;
                    long long v69 = &v87;
                    uint64_t v70 = v5;
                    uint64_t v71 = v56;
                    goto LABEL_115;
                  }
                  GTResourceTrackerProcessResourceUse(v5, v63, *(void *)v63);
                  int v64 = GetFuncEnumConstructorType(*(_DWORD *)(v63 + 8));
                  if (IsCommandEncoder(v64))
                  {
                    bzero(&v87, 0x2B90uLL);
                    GTMTLSMCommandEncoder_processTraceFunc((uint64_t)&v87, (uint64_t *)v63, v5[1]);
                    renderCommandEncoder_processStreamWithDescriptor(v5, v56, (uint64_t)&v87);
                  }
                  else
                  {
                    GTMTLSMCommandEncoder_processTraceFunc((uint64_t)&v93, (uint64_t *)v63, v5[1]);
                  }
                  unsigned int v65 = atomic_load((unsigned int *)(v57 + 4));
                  int v66 = v61 + (v65 >> 6);
                  uint64_t v67 = (HIDWORD(v61) + 1);
                  unint64_t v61 = (v67 << 32) | v61;
                  if (v67 == v66 - 1)
                  {
                    unint64_t v61 = (v67 << 32) | v67;
                    uint64_t v57 = *(void *)(v57 + 40);
                    goto LABEL_85;
                  }
                }
                return;
              }
            }
          }
        }
        else
        {
          bzero(&v93, 0x2B90uLL);
          uint64_t v37 = 0;
        }
        uint64_t v39 = 0;
        goto LABEL_77;
      }
      if (v83 != 74)
      {
        if (v83 != 82) {
          return;
        }
LABEL_38:
        computeCommandEncoder_processStream((uint64_t)v5, v84);
        return;
      }
    }
    defaultCommandEncoder_processStream((uint64_t)v5, v84);
    return;
  }
  if (v6 == -20457 || v6 == -20474)
  {
    uint64_t v19 = GTTraceFunc_targetContext(v4, v5[1]);
    int FuncEnumReceiverType = GetFuncEnumReceiverType(*(_DWORD *)(v4 + 8));
    if (FuncEnumReceiverType == 40)
    {
      unint64_t v21 = *(void *)v4;
      uint64_t v29 = *v5;
      *(void *)&long long v93 = v19;
      uint64_t v30 = *(void *)(*find_entry(v29, &v93, 8uLL, 0) + 32);
      long long v93 = 0u;
      uint64_t v94 = 0;
      uint64_t v103 = 0;
      long long v102 = 0u;
      long long v101 = 0u;
      long long v100 = 0u;
      long long v99 = 0u;
      long long v98 = 0u;
      long long v97 = 0u;
      long long v96 = 0u;
      LODWORD(v93) = 40;
      uint64_t v95 = -1;
      uint64_t v31 = *(void *)(v30 + 32);
      if (v31)
      {
        unsigned int v32 = 0;
        while (1)
        {
          unsigned int v33 = atomic_load((unsigned int *)(v31 + 4));
          uint64_t v34 = v32 + (v33 >> 6) - 1;
          if ((int)v34 > 0) {
            break;
          }
          uint64_t v31 = *(void *)(v31 + 40);
          unsigned int v32 = v34;
          if (!v31)
          {
            unsigned int v32 = v34;
            goto LABEL_62;
          }
        }
      }
      else
      {
        unsigned int v32 = 0;
      }
      uint64_t v34 = 0;
LABEL_62:
      unint64_t v47 = v32 | (unint64_t)(v34 << 32);
LABEL_63:
      uint64_t v48 = v31 + 64;
      while (v31)
      {
        if ((*(unsigned char *)(v48 + ((uint64_t)(HIDWORD(v47) - (int)v47) << 6) + 15) & 8) == 0) {
          break;
        }
        id v49 = (uint64_t *)(v48 + ((uint64_t)(HIDWORD(v47) - (int)v47) << 6));
        if (*v49 > v21) {
          break;
        }
        GTMTLFXSMTemporalScaler_processTraceFuncWithMap((uint64_t)&v93, v5[1], v49);
        unsigned int v50 = atomic_load((unsigned int *)(v31 + 4));
        int v51 = v47 + (v50 >> 6);
        uint64_t v52 = (HIDWORD(v47) + 1);
        unint64_t v47 = (v52 << 32) | v47;
        if (v52 == v51 - 1)
        {
          unint64_t v47 = (v52 << 32) | v52;
          uint64_t v31 = *(void *)(v31 + 40);
          goto LABEL_63;
        }
      }
      GTResourceTrackerUsingResource(v5[2], 40, (uint64_t)v19, *v5, v5[1]);
      GTResourceTrackerResourceRead(v5, 80, v98, v21);
      GTResourceTrackerResourceRead(v5, 80, *((uint64_t *)&v98 + 1), v21);
      GTResourceTrackerResourceRead(v5, 80, v99, v21);
      GTResourceTrackerResourceRead(v5, 80, *((uint64_t *)&v99 + 1), v21);
      uint64_t v46 = v100;
    }
    else
    {
      if (FuncEnumReceiverType != 39) {
        return;
      }
      unint64_t v21 = *(void *)v4;
      uint64_t v22 = *v5;
      *(void *)&long long v93 = v19;
      uint64_t v23 = *(void *)(*find_entry(v22, &v93, 8uLL, 0) + 32);
      long long v93 = 0u;
      uint64_t v94 = 0;
      long long v99 = 0u;
      long long v98 = 0u;
      long long v97 = 0u;
      long long v96 = 0u;
      LODWORD(v93) = 39;
      uint64_t v95 = -1;
      uint64_t v24 = *(void *)(v23 + 32);
      if (v24)
      {
        unsigned int v25 = 0;
        while (1)
        {
          unsigned int v26 = atomic_load((unsigned int *)(v24 + 4));
          uint64_t v27 = v25 + (v26 >> 6) - 1;
          if ((int)v27 > 0) {
            break;
          }
          uint64_t v24 = *(void *)(v24 + 40);
          unsigned int v25 = v27;
          if (!v24)
          {
            unsigned int v25 = v27;
            goto LABEL_52;
          }
        }
      }
      else
      {
        unsigned int v25 = 0;
      }
      uint64_t v27 = 0;
LABEL_52:
      unint64_t v40 = v25 | (unint64_t)(v27 << 32);
LABEL_53:
      uint64_t v41 = v24 + 64;
      while (v24)
      {
        if ((*(unsigned char *)(v41 + ((uint64_t)(HIDWORD(v40) - (int)v40) << 6) + 15) & 8) == 0) {
          break;
        }
        id v42 = (uint64_t *)(v41 + ((uint64_t)(HIDWORD(v40) - (int)v40) << 6));
        if (*v42 > v21) {
          break;
        }
        GTMTLFXSMSpatialScaler_processTraceFuncWithMap((char *)&v93, v5[1], v42);
        unsigned int v43 = atomic_load((unsigned int *)(v24 + 4));
        int v44 = v40 + (v43 >> 6);
        uint64_t v45 = (HIDWORD(v40) + 1);
        unint64_t v40 = (v45 << 32) | v40;
        if (v45 == v44 - 1)
        {
          unint64_t v40 = (v45 << 32) | v45;
          uint64_t v24 = *(void *)(v24 + 40);
          goto LABEL_53;
        }
      }
      GTResourceTrackerUsingResource(v5[2], 39, (uint64_t)v19, *v5, v5[1]);
      GTResourceTrackerResourceRead(v5, 80, v98, v21);
      uint64_t v46 = *((void *)&v98 + 1);
    }
    id v53 = tracker_resource_get(v5, 80, v46, v21);
    if (v53) {
      v53[4] = v21;
    }
    GTResourceTrackerUsingResource(v5[2], 41, *((uint64_t *)&v97 + 1), *v5, v5[1]);
  }
  else
  {
    uint64_t v28 = *(void *)v4;
    GTResourceTrackerProcessResourceUse(v5, v4, v28);
  }
}

void defaultCommandEncoder_processStream(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = __chkstk_darwin(a1, a2);
  uint64_t v4 = v3;
  uint64_t v5 = (uint64_t *)v2;
  bzero(v26, 0x2B90uLL);
  uint64_t v6 = *v5;
  uint64_t v28 = v4;
  uint64_t v7 = *(void *)(*(void *)(*find_entry(v6, &v28, 8uLL, 0) + 32) + 32);
  if (v7)
  {
    unsigned int v8 = 0;
    while (1)
    {
      unsigned int v9 = atomic_load((unsigned int *)(v7 + 4));
      uint64_t v10 = v8 + (v9 >> 6) - 1;
      if ((int)v10 > 0) {
        break;
      }
      uint64_t v7 = *(void *)(v7 + 40);
      unsigned int v8 = v10;
      if (!v7)
      {
        unsigned int v8 = v10;
        goto LABEL_8;
      }
    }
  }
  else
  {
    unsigned int v8 = 0;
  }
  uint64_t v10 = 0;
LABEL_8:
  unint64_t v11 = v8 | (unint64_t)(v10 << 32);
LABEL_9:
  uint64_t v12 = v7 + 64;
  while (v7 && (*(unsigned char *)(v12 + ((uint64_t)(HIDWORD(v11) - (int)v11) << 6) + 15) & 8) != 0)
  {
    uint64_t v13 = (uint64_t *)(v12 + ((uint64_t)(HIDWORD(v11) - (int)v11) << 6));
    GTResourceTrackerProcessResourceUse(v5, (uint64_t)v13, *v13);
    GTMTLSMCommandEncoder_processTraceFunc((uint64_t)v26, v13, v5[1]);
    unsigned int v14 = atomic_load((unsigned int *)(v7 + 4));
    int v15 = v11 + (v14 >> 6);
    uint64_t v16 = (HIDWORD(v11) + 1);
    unint64_t v11 = (v16 << 32) | v11;
    if (v16 == v15 - 1)
    {
      unint64_t v11 = (v16 << 32) | v16;
      uint64_t v7 = *(void *)(v7 + 40);
      goto LABEL_9;
    }
  }
  switch(v26[0])
  {
    case 0x11:
      uint64_t v20 = v27;
      if (v27)
      {
        for (uint64_t i = 8; i != 104; i += 24)
        {
          uint64_t v22 = *(void *)(v20 + i);
          if (v22) {
            GTResourceTrackerUsingResource(v5[2], 31, v22, *v5, v5[1]);
          }
        }
      }
      break;
    case 0x15:
      uint64_t v23 = v27;
      if (v27)
      {
        for (uint64_t j = 8; j != 104; j += 24)
        {
          uint64_t v25 = *(void *)(v23 + j);
          if (v25) {
            GTResourceTrackerUsingResource(v5[2], 31, v25, *v5, v5[1]);
          }
        }
      }
      break;
    case 0x4A:
      uint64_t v17 = v27;
      if (v27)
      {
        for (uint64_t k = 8; k != 104; k += 24)
        {
          uint64_t v19 = *(void *)(v17 + k);
          if (v19) {
            GTResourceTrackerUsingResource(v5[2], 31, v19, *v5, v5[1]);
          }
        }
      }
      break;
  }
}

uint64_t computeCommandEncoder_processStream(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = __chkstk_darwin(a1, a2);
  uint64_t v4 = v3;
  uint64_t v5 = (uint64_t *)v2;
  bzero(v21, 0x2B90uLL);
  uint64_t v6 = *v5;
  uint64_t v23 = v4;
  uint64_t result = (uint64_t)find_entry(v6, &v23, 8uLL, 0);
  uint64_t v8 = *(void *)(*(void *)(*(void *)result + 32) + 32);
  if (v8)
  {
    unsigned int v9 = 0;
    while (1)
    {
      unsigned int v10 = atomic_load((unsigned int *)(v8 + 4));
      uint64_t v11 = v9 + (v10 >> 6) - 1;
      if ((int)v11 > 0) {
        break;
      }
      uint64_t v8 = *(void *)(v8 + 40);
      unsigned int v9 = v11;
      if (!v8)
      {
        unsigned int v9 = v11;
        goto LABEL_8;
      }
    }
  }
  else
  {
    unsigned int v9 = 0;
  }
  uint64_t v11 = 0;
LABEL_8:
  unint64_t v12 = v9 | (unint64_t)(v11 << 32);
LABEL_9:
  uint64_t v13 = v8 + 64;
  while (v8 && (*(unsigned char *)(v13 + ((uint64_t)(HIDWORD(v12) - (int)v12) << 6) + 15) & 8) != 0)
  {
    uint64_t v14 = v13 + ((uint64_t)(HIDWORD(v12) - (int)v12) << 6);
    GTResourceTrackerProcessResourceUse(v5, v14, *(void *)v14);
    GTMTLSMCommandEncoder_processTraceFunc((uint64_t)v21, (uint64_t *)v14, v5[1]);
    uint64_t result = (uint64_t)ResourceTracker_processCommandEncoder(v5, *(_DWORD *)(v14 + 8), (uint64_t)v21, *(void *)v14);
    unsigned int v15 = atomic_load((unsigned int *)(v8 + 4));
    int v16 = v12 + (v15 >> 6);
    uint64_t v17 = (HIDWORD(v12) + 1);
    unint64_t v12 = (v17 << 32) | v12;
    if (v17 == v16 - 1)
    {
      unint64_t v12 = (v17 << 32) | v17;
      uint64_t v8 = *(void *)(v8 + 40);
      goto LABEL_9;
    }
  }
  if (v21[0] == 28)
  {
    uint64_t v18 = v22;
    if (v22)
    {
      for (uint64_t i = 8; i != 104; i += 24)
      {
        uint64_t v20 = *(void *)(v18 + i);
        if (v20) {
          uint64_t result = GTResourceTrackerUsingResource(v5[2], 31, v20, *v5, v5[1]);
        }
      }
    }
  }
  return result;
}

uint64_t renderCommandEncoder_processStreamWithDescriptor(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v26 = *(void *)(a3 + 8);
  uint64_t v7 = *(void *)(*(void *)(*find_entry(v6, &v26, 8uLL, 0) + 32) + 32);
  if (v7)
  {
    unsigned int v8 = 0;
    while (1)
    {
      unsigned int v9 = atomic_load((unsigned int *)(v7 + 4));
      uint64_t v10 = v8 + (v9 >> 6) - 1;
      if ((int)v10 > 1) {
        break;
      }
      uint64_t v7 = *(void *)(v7 + 40);
      unsigned int v8 = v10;
      if (!v7)
      {
        unsigned int v8 = v10;
        goto LABEL_8;
      }
    }
    uint64_t v10 = 1;
  }
  else
  {
    unsigned int v8 = 0;
    uint64_t v10 = 0;
  }
LABEL_8:
  unint64_t v11 = v8 | (unint64_t)(v10 << 32);
LABEL_9:
  uint64_t v12 = v7 + 64;
  while (v7 && (*(unsigned char *)(v12 + ((uint64_t)(HIDWORD(v11) - (int)v11) << 6) + 15) & 8) != 0)
  {
    uint64_t v13 = v12 + ((uint64_t)(HIDWORD(v11) - (int)v11) << 6);
    uint64_t v14 = (int *)(v13 + 8);
    char v15 = IsFuncEnumEndEncoding(*(_DWORD *)(v13 + 8));
    uint64_t v16 = *(void *)v13;
    if (v15) {
      return v16;
    }
    GTResourceTrackerProcessResourceUse(a1, v13, v16);
    GTMTLSMCommandEncoder_processTraceFunc(a3, (uint64_t *)v13, a1[1]);
    ResourceTracker_processCommandEncoder(a1, *v14, a3, *(void *)v13);
    if (IsFuncEnumDrawCall(*v14))
    {
      if (*(_DWORD *)a3 == 70) {
        uint64_t v17 = *(unsigned __int8 *)(a3 + 11141);
      }
      else {
        uint64_t v17 = 0;
      }
      uint64_t v18 = 0;
      uint64_t v19 = *(void *)v13;
      do
      {
        RenderEncoderLoadAttachment(a1, a2 + v18, v19);
        v18 += 64;
      }
      while (v18 != 512);
      RenderEncoderLoadAttachment(a1, a2 + 672, v19);
      RenderEncoderLoadAttachment(a1, a2 + 720, v19);
      if (v17)
      {
        uint64_t v20 = *(void *)(a2 + 792);
        if (v20)
        {
          unint64_t v21 = tracker_resource_get(a1, 22, v20, v19);
          if (v21) {
            void v21[4] = v19;
          }
        }
      }
      GTResourceTrackerUsingResource(a1[2], 68, *(void *)(a2 + 784), *a1, a1[1]);
    }
    unsigned int v22 = atomic_load((unsigned int *)(v7 + 4));
    int v23 = v11 + (v22 >> 6);
    uint64_t v24 = (HIDWORD(v11) + 1);
    unint64_t v11 = (v24 << 32) | v11;
    if (v24 == v23 - 1)
    {
      unint64_t v11 = (v24 << 32) | v24;
      uint64_t v7 = *(void *)(v7 + 40);
      goto LABEL_9;
    }
  }
  return -1;
}

uint64_t RenderEncoderWithDescriptor(uint64_t *a1, uint64_t *a2)
{
  for (uint64_t i = 0; i != 64; i += 8)
  {
    GTResourceTrackerUsingResource(a1[2], 80, a2[i + 1], *a1, a1[1]);
    GTResourceTrackerUsingResource(a1[2], 80, a2[i], *a1, a1[1]);
  }
  GTResourceTrackerUsingResource(a1[2], 80, a2[85], *a1, a1[1]);
  GTResourceTrackerUsingResource(a1[2], 80, a2[84], *a1, a1[1]);
  GTResourceTrackerUsingResource(a1[2], 80, a2[91], *a1, a1[1]);
  GTResourceTrackerUsingResource(a1[2], 80, a2[90], *a1, a1[1]);
  GTResourceTrackerUsingResource(a1[2], 22, a2[99], *a1, a1[1]);
  uint64_t result = GTResourceTrackerUsingResource(a1[2], 68, a2[98], *a1, a1[1]);
  uint64_t v6 = 0;
  uint64_t v7 = a2 + 66;
  do
  {
    uint64_t v8 = v7[v6];
    if (v8) {
      uint64_t result = GTResourceTrackerUsingResource(a1[2], 31, v8, *a1, a1[1]);
    }
    v6 += 5;
  }
  while (v6 != 20);
  return result;
}

uint64_t *RenderEncoderEndEncoding(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = 0;
  uint64_t v9 = a2;
  do
  {
    uint64_t v10 = *(unsigned __int8 *)(v9 + 27);
    if (v10 == 4) {
      uint64_t v10 = *(void *)(*(void *)a3 + v8);
    }
    RenderEncoderStoreAttachment(a1, (uint64_t *)v9, v10, a4);
    v8 += 8;
    v9 += 64;
  }
  while (v8 != 64);
  unsigned int v11 = *(unsigned __int8 *)(a2 + 699);
  if (v11 == 4) {
    unsigned int v11 = *(unsigned __int8 *)(a3 + 8);
  }
  RenderEncoderStoreAttachment(a1, (uint64_t *)(a2 + 672), v11, a4);
  unsigned int v12 = *(unsigned __int8 *)(a2 + 747);
  if (v12 == 4) {
    unsigned int v12 = *(unsigned __int8 *)(a3 + 9);
  }

  return RenderEncoderStoreAttachment(a1, (uint64_t *)(a2 + 720), v12, a4);
}

uint64_t *RenderEncoderStoreAttachment(uint64_t *result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2[1];
  uint64_t v8 = result;
  switch(a3)
  {
    case 0:
    case 1:
    case 5:
      goto LABEL_5;
    case 2:
      goto LABEL_4;
    case 3:
      uint64_t v9 = tracker_resource_get(result, 80, v5, a4);
      if (v9) {
        v9[4] = a4;
      }
LABEL_4:
      uint64_t v5 = *a2;
LABEL_5:
      uint64_t result = tracker_resource_get(v8, 80, v5, a4);
      if (result) {
        result[4] = a4;
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t *ResourceTracker_processCommandEncoder(uint64_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = (uint64_t *)IsFuncEnumDrawCall(a2);
  if (result)
  {
    if (*(_DWORD *)a3 != 70) {
      return result;
    }
    uint64_t v9 = *a1;
    v23.i64[0] = *(void *)(a3 + 8600);
    entry = find_entry(v9, &v23, 8uLL, 0);
    if (*entry) {
      uint64_t v11 = *(void *)(*entry + 32);
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v38 = 0;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    int8x16_t v35 = 0u;
    long long v33 = 0u;
    long long v31 = 0u;
    memset(v32, 0, sizeof(v32));
    int8x16_t v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    memset(v26, 0, sizeof(v26));
    long long v24 = 0u;
    long long v25 = 0u;
    int8x16_t v23 = 0u;
    GTMTLSMRenderPipelineState_resourceAccess(v11, a1[1], &v23);
    int8x16_t v23 = vandq_s8(v23, (int8x16_t)vdupq_n_s64(~*(void *)(a3 + 64)));
    BufferAccess(a1, a3 + 80, &v23, a4);
    TextureAccess(a1, a3 + 824, (uint64_t)&v24, a4);
    *(int8x16_t *)((char *)v26 + 8) = vandq_s8(*(int8x16_t *)((char *)v26 + 8), (int8x16_t)vdupq_n_s64(~*(void *)(a3 + 1976)));
    BufferAccess(a1, a3 + 1984, &v26[0].i64[1], a4);
    TextureAccess(a1, a3 + 2480, (uint64_t)&v26[1].i64[1], a4);
    int8x16_t v29 = vandq_s8(v29, (int8x16_t)vdupq_n_s64(~*(void *)(a3 + 3632)));
    BufferAccess(a1, a3 + 3640, &v29, a4);
    TextureAccess(a1, a3 + 4136, (uint64_t)&v30, a4);
    *(int8x16_t *)((char *)v32 + 8) = vandq_s8(*(int8x16_t *)((char *)v32 + 8), (int8x16_t)vdupq_n_s64(~*(void *)(a3 + 5288)));
    BufferAccess(a1, a3 + 5296, &v32[0].i64[1], a4);
    uint64_t v19 = a3 + 5792;
    uint64_t v20 = &v32[1].i64[1];
    unint64_t v21 = a1;
    return TextureAccess(v21, v19, (uint64_t)v20, a4);
  }
  if (a2 <= -16080)
  {
    if (a2 != -16327 && a2 != -16220)
    {
      int v12 = -16137;
LABEL_12:
      if (a2 != v12) {
        return result;
      }
      goto LABEL_13;
    }
LABEL_15:
    uint64_t v16 = *a1;
    v23.i64[0] = *(void *)(a3 + 64);
    uint64_t v17 = find_entry(v16, &v23, 8uLL, 0);
    if (*v17) {
      uint64_t v18 = *(void *)(*v17 + 32);
    }
    else {
      uint64_t v18 = 0;
    }
    v26[0].i64[0] = 0;
    long long v24 = 0u;
    long long v25 = 0u;
    int8x16_t v23 = 0u;
    unsigned int v22 = (uint64_t *)&v24;
    GTMTLSMComputePipelineState_resourceAccess(v18, a1[1], (uint64_t)&v23);
    int8x16_t v23 = vandq_s8(v23, (int8x16_t)vdupq_n_s64(~*(void *)(a3 + 72)));
    BufferAccess(a1, a3 + 88, &v23, a4);
    uint64_t v19 = a3 + 832;
    goto LABEL_23;
  }
  if ((a2 + 16079) < 2) {
    goto LABEL_15;
  }
  if (a2 != -15297)
  {
    int v12 = -15486;
    goto LABEL_12;
  }
LABEL_13:
  uint64_t v13 = *a1;
  v23.i64[0] = *(void *)(a3 + 8600);
  uint64_t v14 = find_entry(v13, &v23, 8uLL, 0);
  if (*v14) {
    uint64_t v15 = *(void *)(*v14 + 32);
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v38 = 0;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  int8x16_t v35 = 0u;
  long long v33 = 0u;
  long long v31 = 0u;
  memset(v32, 0, sizeof(v32));
  int8x16_t v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  memset(v26, 0, sizeof(v26));
  long long v24 = 0u;
  long long v25 = 0u;
  int8x16_t v23 = 0u;
  unsigned int v22 = (uint64_t *)&v36;
  GTMTLSMRenderPipelineState_resourceAccess(v15, a1[1], &v23);
  int8x16_t v35 = vandq_s8(v35, (int8x16_t)vdupq_n_s64(~*(void *)(a3 + 6944)));
  BufferAccess(a1, a3 + 6952, &v35, a4);
  uint64_t v19 = a3 + 7448;
LABEL_23:
  unint64_t v21 = a1;
  uint64_t v20 = v22;
  return TextureAccess(v21, v19, (uint64_t)v20, a4);
}

uint64_t *RenderEncoderLoadAttachment(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (!v4) {
    return result;
  }
  uint64_t v6 = result;
  int v7 = *(unsigned __int8 *)(a2 + 25);
  if (v7 == 2) {
    goto LABEL_5;
  }
  if (v7 != 1)
  {
    if (*(unsigned char *)(a2 + 25)) {
      return result;
    }
LABEL_5:
    return GTResourceTrackerResourceRead(result, 80, v4, 0x7FFFFFFFFFFFFFFFLL);
  }
  GTResourceTrackerResourceRead(result, 80, v4, a3);
  uint64_t v8 = *v6;
  uint64_t v9 = *(void *)(a2 + 8);
  uint64_t result = find_entry(v8, &v9, 8uLL, 0);
  if (*(_DWORD *)(*(void *)(*(void *)(*result + 32) + 32) + 72) == -16294)
  {
    uint64_t result = tracker_resource_get(v6, 80, *(void *)(a2 + 8), a3);
    *((unsigned char *)result + 48) = 1;
  }
  return result;
}

uint64_t *BufferAccess(uint64_t *result, uint64_t a2, void *a3, uint64_t a4)
{
  int v7 = result;
  int v8 = 0;
  do
  {
    unint64_t v9 = *a3 >> v8;
    if (!v9) {
      break;
    }
    int v10 = v8 + __clz(__rbit64(v9));
    uint64_t result = GTResourceTrackerResourceRead(v7, 22, *(void *)(a2 + 8 * v10), a4);
    int v8 = v10 + 1;
  }
  while (v10 < 63);
  int v11 = 0;
  do
  {
    unint64_t v12 = a3[1] >> v11;
    if (!v12) {
      break;
    }
    int v13 = v11 + __clz(__rbit64(v12));
    uint64_t result = tracker_resource_get(v7, 22, *(void *)(a2 + 8 * v13), a4);
    if (result) {
      result[4] = a4;
    }
    int v11 = v13 + 1;
  }
  while (v13 < 63);
  return result;
}

uint64_t *TextureAccess(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7 = result;
  uint64_t v8 = 0;
  char v9 = 1;
  do
  {
    int v10 = 0;
    char v11 = v9;
    uint64_t v12 = v8 << 6;
    do
    {
      unint64_t v13 = *(void *)(a3 + 16 * v8) >> v10;
      if (!v13) {
        break;
      }
      int v14 = v10 + __clz(__rbit64(v13));
      uint64_t result = GTResourceTrackerResourceRead(v7, 80, *(void *)(a2 + 8 * (v12 + v14)), a4);
      int v10 = v14 + 1;
    }
    while (v14 < 63);
    int v15 = 0;
    uint64_t v16 = (void *)(a3 + 16 * v8 + 8);
    do
    {
      unint64_t v17 = *v16 >> v15;
      if (!v17) {
        break;
      }
      int v18 = v15 + __clz(__rbit64(v17));
      uint64_t result = tracker_resource_get(v7, 80, *(void *)(a2 + 8 * (v12 + v18)), a4);
      if (result) {
        result[4] = a4;
      }
      int v15 = v18 + 1;
    }
    while (v18 < 63);
    char v9 = 0;
    uint64_t v8 = 1;
  }
  while ((v11 & 1) != 0);
  return result;
}

void GTResourceTrackerProcessCommandEncoder(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v13 = a2;
  uint64_t v4 = *(void *)(*(void *)(*find_entry(v3, &v13, 8uLL, 0) + 32) + 32);
  if (v4)
  {
    unsigned int v5 = 0;
    while (1)
    {
      unsigned int v6 = atomic_load((unsigned int *)(v4 + 4));
      uint64_t v7 = v5 + (v6 >> 6) - 1;
      if ((int)v7 > 0) {
        break;
      }
      uint64_t v4 = *(void *)(v4 + 40);
      unsigned int v5 = v7;
      if (!v4)
      {
        unsigned int v5 = v7;
        goto LABEL_8;
      }
    }
  }
  else
  {
    unsigned int v5 = 0;
  }
  uint64_t v7 = 0;
LABEL_8:
  unint64_t v8 = v5 | (unint64_t)(v7 << 32);
LABEL_9:
  uint64_t v9 = v4 + 64;
  while (v4 && (*(unsigned char *)(v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6) + 15) & 8) != 0)
  {
    GTResourceTrackerProcessFunction((uint64_t)a1, v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6));
    unsigned int v10 = atomic_load((unsigned int *)(v4 + 4));
    int v11 = v8 + (v10 >> 6);
    uint64_t v12 = (HIDWORD(v8) + 1);
    unint64_t v8 = (v12 << 32) | v8;
    if (v12 == v11 - 1)
    {
      unint64_t v8 = (v12 << 32) | v12;
      uint64_t v4 = *(void *)(v4 + 40);
      goto LABEL_9;
    }
  }
}

void GTResourceTrackerProcessCommandBuffer(uint64_t *a1, uint64_t a2, char a3)
{
  uint64_t v5 = *a1;
  uint64_t v20 = a2;
  uint64_t v6 = *(void *)(*find_entry(v5, &v20, 8uLL, 0) + 32);
  uint64_t v7 = *(void *)(v6 + 32);
  if (v7)
  {
    unsigned int v8 = 0;
    while (1)
    {
      unsigned int v9 = atomic_load((unsigned int *)(v7 + 4));
      uint64_t v10 = v8 + (v9 >> 6) - 1;
      if ((int)v10 > 0) {
        break;
      }
      uint64_t v7 = *(void *)(v7 + 40);
      unsigned int v8 = v10;
      if (!v7)
      {
        unsigned int v8 = v10;
        goto LABEL_8;
      }
    }
  }
  else
  {
    unsigned int v8 = 0;
  }
  uint64_t v10 = 0;
LABEL_8:
  unint64_t v11 = v8 | (unint64_t)(v10 << 32);
LABEL_9:
  uint64_t v12 = v7 + 64;
  while (v7 && (*(unsigned char *)(v12 + ((uint64_t)(HIDWORD(v11) - (int)v11) << 6) + 15) & 8) != 0)
  {
    GTResourceTrackerProcessFunction((uint64_t)a1, v12 + ((uint64_t)(HIDWORD(v11) - (int)v11) << 6));
    unsigned int v13 = atomic_load((unsigned int *)(v7 + 4));
    int v14 = v11 + (v13 >> 6);
    uint64_t v15 = (HIDWORD(v11) + 1);
    unint64_t v11 = (v15 << 32) | v11;
    if (v15 == v14 - 1)
    {
      unint64_t v11 = (v15 << 32) | v15;
      uint64_t v7 = *(void *)(v7 + 40);
      goto LABEL_9;
    }
  }
  if (a3)
  {
    uint64_t v16 = *a1;
    uint64_t v20 = CommandBufferQueue(v6, a1[1]);
    uint64_t v17 = *find_entry(v16, &v20, 8uLL, 0);
    if (v17) {
      uint64_t v18 = *(void *)(v17 + 32);
    }
    else {
      uint64_t v18 = 0;
    }
    unint64_t v19 = CommandBufferCommitIndex(v6);
    ResourceTracker_processUsedResidencySets((uint64_t)a1, v19, v18, 0);
  }
}

void ResourceTracker_processUsedResidencySets(uint64_t a1, unint64_t a2, uint64_t a3, apr_pool_t *parent)
{
  if (a3)
  {
    pool = 0;
    apr_pool_create_ex(&pool, parent, 0, 0);
    unsigned int v8 = pool;
    unsigned int v9 = (apr_pool_t **)apr_hash_make(pool);
    GatherCommandQueueResidencySetsUpToIndexInternal(v9, a3, *(void *)(a1 + 8), a2, 0, 1);
    uint64_t v10 = apr_hash_first(v8, (apr_hash_t *)v9);
    if (v10)
    {
      unint64_t v11 = v10;
      do
      {
        GTResourceTrackerUsingResidencySet((uint64_t *)a1, **(void **)(*((void *)v11 + 1) + 16));
        unint64_t v11 = apr_hash_next(v11);
      }
      while (v11);
    }
    apr_pool_destroy(v8);
  }
  if (*(_DWORD *)(*(void *)(a1 + 40) + 48))
  {
    newpool = 0;
    apr_pool_create_ex(&newpool, parent, 0, 0);
    uint64_t v12 = newpool;
    int8x16_t v29 = apr_hash_make(newpool);
    pool = apr_hash_make(v12);
    unsigned int v13 = apr_hash_first(v12, *(apr_hash_t **)(a1 + 40));
    if (v13)
    {
      int v14 = v13;
      do
      {
        uint64_t v15 = *(void *)a1;
        uint64_t v31 = **(void **)(*((void *)v14 + 1) + 16);
        uint64_t v16 = *find_entry(v15, &v31, 8uLL, 0);
        if (v16) {
          uint64_t v17 = *(void *)(v16 + 32);
        }
        else {
          uint64_t v17 = 0;
        }
        char v18 = 1;
        GatherResidencySetAllocationsUpToIndexInternal((uint64_t)&pool, v17, *(void *)(a1 + 8), a2, 0, 1);
        unint64_t v19 = pool;
        uint64_t v20 = v29;
        do
        {
          char v21 = v18;
          if (v18) {
            unsigned int v22 = v20;
          }
          else {
            unsigned int v22 = v19;
          }
          for (uint64_t i = apr_hash_first(v12, v22); ; uint64_t i = apr_hash_next(v24))
          {
            long long v24 = i;
            if (!i) {
              break;
            }
            long long v25 = *(uint64_t **)(*((void *)i + 1) + 16);
            if (GTResourceTrackerGetResourceType(*v25, *(void *)a1) == 50)
            {
              GTResourceTrackerUsingResourceHeap((uint64_t *)a1, *v25, a2);
            }
            else
            {
              uint64_t v26 = *(void *)(a1 + 16);
              int ResourceType = GTResourceTrackerGetResourceType(*v25, *(void *)a1);
              GTResourceTrackerUsingResource(v26, ResourceType, *v25, *(void *)a1, *(void *)(a1 + 8));
            }
          }
          char v18 = 0;
        }
        while ((v21 & 1) != 0);
        apr_hash_clear(v20);
        apr_hash_clear(v19);
        int v14 = apr_hash_next(v14);
      }
      while (v14);
    }
    apr_pool_destroy(v12);
    apr_hash_clear(*(apr_hash_t **)(a1 + 40));
  }
}

void GTResourceTrackerUsingResidencySet(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = a2;
  GTResourceTrackerUsingResource(a1[2], 72, a2, *a1, a1[1]);
  entry = find_entry(a1[5], &v5, 8uLL, 0);
  if (!*entry || !*(void *)(*entry + 32))
  {
    uint64_t v4 = apr_palloc(*(apr_pool_t **)a1[5], 8uLL);
    *uint64_t v4 = v5;
    apr_hash_set((apr_hash_t *)a1[5], v4, 8, v4);
  }
}

void ResourceTracker_processAccelerationStructureReads(uint64_t a1)
{
  newpool = 0;
  apr_pool_create_ex(&newpool, **(apr_pool_t ***)(a1 + 32), 0, 0);
  uint64_t v2 = newpool;
  uint64_t v3 = apr_array_make(newpool, 16, 8);
  uint64_t v4 = *(void *)(a1 + 32);
  *(_DWORD *)(v4 + 40) = 0;
  *(void *)(v4 + 16) = v4;
  *(void *)(v4 + 24) = 0;
  *(void *)(v4 + 32) = 0;
  uint64_t v5 = apr_hash_next((apr_hash_index_t *)(v4 + 16));
  if (v5)
  {
    uint64_t v6 = v5;
    do
    {
      uint64_t v7 = *(void *)(*((void *)v6 + 1) + 32);
      if (*(_DWORD *)(v7 + 40) == 16) {
        *(void *)apr_array_push(v3) = v7;
      }
      uint64_t v6 = apr_hash_next(v6);
    }
    while (v6);
  }
  if (v3->nelts >= 1)
  {
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(void *)&v3->elts[8 * v8];
      long long v21 = 0u;
      uint64_t v22 = 0;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v24 = 0u;
      LODWORD(v21) = 16;
      uint64_t v23 = -1;
      WORD1(v28) = 2;
      long long v26 = 0xFFFFFFFFFFFFFFFFLL;
      uint64_t v10 = *(void *)(*(void *)(*find_entry(*(void *)a1, (unsigned char *)(v9 + 8), 8uLL, 0) + 32) + 32);
      if (v10)
      {
        unsigned int v11 = 0;
        while (1)
        {
          unsigned int v12 = atomic_load((unsigned int *)(v10 + 4));
          uint64_t v13 = v11 + (v12 >> 6) - 1;
          if ((int)v13 > 0) {
            break;
          }
          uint64_t v10 = *(void *)(v10 + 40);
          unsigned int v11 = v13;
          if (!v10)
          {
            unsigned int v11 = v13;
            goto LABEL_15;
          }
        }
      }
      else
      {
        unsigned int v11 = 0;
      }
      uint64_t v13 = 0;
LABEL_15:
      unint64_t v14 = v11 | (unint64_t)(v13 << 32);
LABEL_16:
      uint64_t v15 = v10 + 64;
      while (v10 && (*(unsigned char *)(v15 + ((uint64_t)(HIDWORD(v14) - (int)v14) << 6) + 15) & 8) != 0)
      {
        uint64_t v16 = v15 + ((uint64_t)(HIDWORD(v14) - (int)v14) << 6);
        GTMTLSMAccelerationStructure_processTraceFuncWithMap((char *)&v21, *(void *)(a1 + 8), (uint64_t *)v16);
        if (*(_DWORD *)(v16 + 8) == -15552 && (void)v29 != 0) {
          GTResourceTrackerUsingAccelerationStructureDescriptor((uint64_t *)a1, (uint64_t *)v29, *(void *)v16);
        }
        unsigned int v18 = atomic_load((unsigned int *)(v10 + 4));
        int v19 = v14 + (v18 >> 6);
        uint64_t v20 = (HIDWORD(v14) + 1);
        unint64_t v14 = (v20 << 32) | v14;
        if (v20 == v19 - 1)
        {
          unint64_t v14 = (v20 << 32) | v20;
          uint64_t v10 = *(void *)(v10 + 40);
          goto LABEL_16;
        }
      }
      ++v8;
    }
    while (v8 < v3->nelts);
    uint64_t v2 = newpool;
  }
  apr_pool_destroy(v2);
}

uint64_t *GTResourceTrackerUsingAccelerationStructureDescriptor(uint64_t *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = result;
  int v6 = *(unsigned __int8 *)a2;
  if (v6 == 3)
  {
    GTResourceTrackerResourceRead(result, 22, a2[1], a3);
    GTResourceTrackerResourceRead(v5, 22, a2[3], a3);
    GTResourceTrackerResourceRead(v5, 22, a2[5], a3);
    uint64_t v28 = a2[7];
    return GTResourceTrackerResourceRead(v5, 22, v28, a3);
  }
  else if (v6 == 2)
  {
    GTResourceTrackerResourceRead(result, 22, a2[2], a3);
    uint64_t result = GTResourceTrackerResourceRead(v5, 22, a2[3], a3);
    if (*((_DWORD *)a2 + 14))
    {
      unint64_t v29 = 0;
      do
        uint64_t result = GTResourceTrackerResourceRead(v5, 16, *(void *)(a2[1] + 8 * v29++), a3);
      while (v29 < *((unsigned int *)a2 + 14));
    }
  }
  else if (v6 == 1 && a2[2])
  {
    unint64_t v7 = 0;
    do
    {
      uint64_t v8 = a2[1];
      unint64_t v9 = v8 + 136 * v7;
      uint64_t result = GTResourceTrackerResourceRead(v5, 22, *(void *)(v9 + 8), a3);
      switch(*(unsigned char *)(v9 + 36))
      {
        case 1:
          uint64_t v10 = (uint64_t *)(v8 + 136 * v7);
          GTResourceTrackerResourceRead(v5, 22, v10[10], a3);
          GTResourceTrackerResourceRead(v5, 22, v10[5], a3);
          unsigned int v11 = v10 + 7;
          goto LABEL_25;
        case 2:
          unsigned int v11 = (uint64_t *)(v8 + 136 * v7 + 40);
          goto LABEL_25;
        case 3:
          unint64_t v12 = v8 + 136 * v7;
          uint64_t v13 = (uint64_t *)(v12 + 40);
          if (*(void *)(v12 + 88))
          {
            uint64_t v14 = 0;
            unint64_t v15 = 0;
            do
            {
              GTResourceTrackerResourceRead(v5, 22, *(void *)(v13[5] + v14), a3);
              ++v15;
              v14 += 16;
            }
            while (v13[6] > v15);
          }
          uint64_t v16 = *v13;
          unsigned int v11 = v13 + 2;
          GTResourceTrackerResourceRead(v5, 22, v16, a3);
          goto LABEL_25;
        case 4:
          unint64_t v17 = v8 + 136 * v7;
          if (*(void *)(v17 + 48))
          {
            uint64_t v18 = 0;
            unint64_t v19 = 0;
            uint64_t v20 = (void *)(v17 + 40);
            do
            {
              uint64_t result = GTResourceTrackerResourceRead(v5, 22, *(void *)(*v20 + v18), a3);
              ++v19;
              v18 += 16;
            }
            while (v20[1] > v19);
          }
          break;
        case 5:
          long long v21 = (uint64_t *)(v8 + 136 * v7);
          GTResourceTrackerResourceRead(v5, 22, v21[5], a3);
          GTResourceTrackerResourceRead(v5, 22, v21[11], a3);
          unsigned int v11 = v21 + 9;
          goto LABEL_25;
        case 6:
          unint64_t v22 = v8 + 136 * v7;
          uint64_t v23 = (void *)(v22 + 40);
          if (*(void *)(v22 + 48))
          {
            uint64_t v24 = 0;
            unint64_t v25 = 0;
            do
            {
              GTResourceTrackerResourceRead(v5, 22, *(void *)(*v23 + v24), a3);
              ++v25;
              v24 += 16;
            }
            while (v23[1] > v25);
          }
          if (v23[7])
          {
            uint64_t v26 = 0;
            unint64_t v27 = 0;
            do
            {
              GTResourceTrackerResourceRead(v5, 22, *(void *)(v23[6] + v26), a3);
              ++v27;
              v26 += 16;
            }
            while (v23[7] > v27);
          }
          unsigned int v11 = v23 + 4;
LABEL_25:
          uint64_t result = GTResourceTrackerResourceRead(v5, 22, *v11, a3);
          break;
        default:
          break;
      }
      ++v7;
    }
    while (a2[2] > v7);
  }
  return result;
}

void ResourceTracker_processUsedDrawables(uint64_t a1)
{
  newpool = 0;
  apr_pool_create_ex(&newpool, **(apr_pool_t ***)(a1 + 32), 0, 0);
  uint64_t v2 = newpool;
  uint64_t v3 = apr_array_make(newpool, 16, 16);
  uint64_t v4 = apr_hash_make(v2);
  uint64_t v5 = *(void *)(a1 + 16);
  *(_DWORD *)(v5 + 40) = 0;
  *(void *)(v5 + 16) = v5;
  *(void *)(v5 + 24) = 0;
  *(void *)(v5 + 32) = 0;
  int v6 = apr_hash_next((apr_hash_index_t *)(v5 + 16));
  if (v6)
  {
    unint64_t v7 = v6;
    ht = v4;
    do
    {
      uint64_t v8 = *(_DWORD **)(*((void *)v7 + 1) + 32);
      int v9 = v8[2];
      if (v9 == 2)
      {
        uint64_t v13 = *(void *)(*find_entry(*(void *)a1, *(unsigned char **)(*((void *)v7 + 1) + 32), 8uLL, 0) + 32);
        long long v56 = 0u;
        uint64_t v57 = 0;
        *(void *)&long long v60 = 0;
        long long v59 = 0u;
        LODWORD(v56) = 2;
        uint64_t v58 = -1;
        uint64_t v14 = *(void *)(v13 + 32);
        if (v14)
        {
          unsigned int v15 = 0;
          while (1)
          {
            unsigned int v16 = atomic_load((unsigned int *)(v14 + 4));
            uint64_t v17 = v15 + (v16 >> 6) - 1;
            if ((int)v17 > 0) {
              break;
            }
            uint64_t v14 = *(void *)(v14 + 40);
            unsigned int v15 = v17;
            if (!v14)
            {
              unsigned int v15 = v17;
              goto LABEL_18;
            }
          }
        }
        else
        {
          unsigned int v15 = 0;
        }
        uint64_t v17 = 0;
LABEL_18:
        unint64_t v18 = v15 | (unint64_t)(v17 << 32);
LABEL_19:
        uint64_t v19 = v14 + 64;
        while (v14)
        {
          if ((*(unsigned char *)(v19 + ((uint64_t)(HIDWORD(v18) - (int)v18) << 6) + 15) & 8) == 0) {
            break;
          }
          uint64_t v20 = v19 + ((uint64_t)(HIDWORD(v18) - (int)v18) << 6);
          GTMTLSMDrawable_processTraceFuncWithMap((char *)&v56, *(void *)(a1 + 8), (uint64_t *)v20);
          if (*(_DWORD *)(v20 + 8) == -7167) {
            break;
          }
          unsigned int v21 = atomic_load((unsigned int *)(v14 + 4));
          int v22 = v18 + (v21 >> 6);
          uint64_t v23 = (HIDWORD(v18) + 1);
          unint64_t v18 = (v23 << 32) | v18;
          if (v23 == v22 - 1)
          {
            unint64_t v18 = (v23 << 32) | v23;
            uint64_t v14 = *(void *)(v14 + 40);
            goto LABEL_19;
          }
        }
        uint64_t v2 = newpool;
        uint64_t v24 = apr_palloc(newpool, 8uLL);
        *uint64_t v24 = v60;
        uint64_t v4 = ht;
        apr_hash_set(ht, v24, 8, v8);
      }
      else if (v9 == 80)
      {
        uint64_t v10 = *find_entry(*(void *)a1, *(unsigned char **)(*((void *)v7 + 1) + 32), 8uLL, 0);
        if (v10)
        {
          uint64_t v11 = *(void *)(v10 + 32);
          if (v11)
          {
            uint64_t v12 = *(void *)(v11 + 32);
            if (v12)
            {
              if ((*(unsigned char *)(v12 + 79) & 8) != 0)
              {
                long long v56 = 0u;
                uint64_t v57 = 0;
                long long v68 = 0u;
                long long v69 = 0u;
                long long v66 = 0u;
                long long v67 = 0u;
                long long v64 = 0u;
                long long v65 = 0u;
                long long v63 = 0u;
                long long v62 = 0u;
                long long v59 = 0u;
                long long v60 = 0u;
                LODWORD(v56) = 80;
                uint64_t v58 = -1;
                WORD1(v63) = 2;
                long long v61 = 0xFFFFFFFFFFFFFFFFLL;
                uint64_t v70 = 0xFFFFFFFFLL;
                GTMTLSMTexture_processTraceFuncWithMap((char *)&v56, *(void *)(a1 + 8), (uint64_t *)(v12 + 64));
                if ((void)v69 || *((void *)&v63 + 1) && *(unsigned char *)(*((void *)&v63 + 1) + 44)) {
                  *(_OWORD *)apr_array_push(v3) = *(_OWORD *)v8;
                }
              }
            }
          }
        }
      }
      unint64_t v7 = apr_hash_next(v7);
    }
    while (v7);
  }
  int nelts = v3->nelts;
  if (nelts >= 1)
  {
    int v26 = 0;
    do
    {
      entry = find_entry((uint64_t)v4, &v3->elts[16 * v26], 8uLL, 0);
      if (*entry && *(void *)(*entry + 32))
      {
        uint64_t v28 = v3->nelts - 1;
        v3->int nelts = v28;
        uint64_t elts = v3->elts;
        long long v30 = *(_OWORD *)&elts[16 * v26];
        *(_OWORD *)&elts[16 * v26] = *(_OWORD *)&elts[16 * v28];
        *(_OWORD *)&v3->elts[16 * v28] = v30;
      }
      else
      {
        ++v26;
      }
      int nelts = v3->nelts;
    }
    while (v26 < nelts);
  }
  if (nelts)
  {
    uint64_t v31 = *(void *)a1;
    long long v32 = (apr_hash_index_t *)(*(void *)a1 + 16);
    *(void *)(v31 + 24) = 0;
    *(void *)(v31 + 32) = 0;
    *(void *)(v31 + 16) = v31;
    *(_DWORD *)(v31 + 40) = 0;
    long long v33 = apr_hash_next(v32);
    if (v33)
    {
      long long v34 = v33;
      do
      {
        uint64_t v35 = *(void *)(*((void *)v34 + 1) + 32);
        if (v35)
        {
          uint64_t v36 = *(void *)(v35 + 32);
          if (v36)
          {
            if ((*(unsigned char *)(v36 + 79) & 8) != 0 && GetFuncEnumConstructorType(*(_DWORD *)(v36 + 72)) == 2)
            {
              long long v56 = 0u;
              uint64_t v57 = 0;
              *(void *)&long long v60 = 0;
              long long v59 = 0u;
              LODWORD(v56) = 2;
              uint64_t v58 = -1;
              GTMTLSMDrawable_processTraceFuncWithMap((char *)&v56, *(void *)(a1 + 8), (uint64_t *)(v36 + 64));
              uint64_t v37 = *(void *)(v35 + 32);
              if (v37)
              {
                unsigned int v38 = 0;
                while (1)
                {
                  unsigned int v39 = atomic_load((unsigned int *)(v37 + 4));
                  uint64_t v40 = v38 + (v39 >> 6) - 1;
                  if ((int)v40 > 1) {
                    break;
                  }
                  uint64_t v37 = *(void *)(v37 + 40);
                  unsigned int v38 = v40;
                  if (!v37)
                  {
                    unsigned int v38 = v40;
                    goto LABEL_52;
                  }
                }
                uint64_t v40 = 1;
              }
              else
              {
                unsigned int v38 = 0;
                uint64_t v40 = 0;
              }
LABEL_52:
              unint64_t v41 = v38 | (unint64_t)(v40 << 32);
LABEL_53:
              uint64_t v42 = v37 + 64;
              while (v37)
              {
                if ((*(unsigned char *)(v42 + ((uint64_t)(HIDWORD(v41) - (int)v41) << 6) + 15) & 8) == 0) {
                  break;
                }
                uint64_t v43 = v42 + ((uint64_t)(HIDWORD(v41) - (int)v41) << 6);
                GTMTLSMDrawable_processTraceFuncWithMap((char *)&v56, *(void *)(a1 + 8), (uint64_t *)v43);
                if (*(_DWORD *)(v43 + 8) == -7167) {
                  break;
                }
                unsigned int v44 = atomic_load((unsigned int *)(v37 + 4));
                int v45 = v41 + (v44 >> 6);
                uint64_t v46 = (HIDWORD(v41) + 1);
                unint64_t v41 = (v46 << 32) | v41;
                if (v46 == v45 - 1)
                {
                  unint64_t v41 = (v46 << 32) | v46;
                  uint64_t v37 = *(void *)(v37 + 40);
                  goto LABEL_53;
                }
              }
              int v47 = v3->nelts;
              if (v47 >= 1)
              {
                int v48 = 0;
                uint64_t v49 = v60;
                uint64_t v50 = *((void *)&v56 + 1);
                do
                {
                  if (*(void *)&v3->elts[16 * v48] == v49)
                  {
                    GTResourceTrackerUsingResource(*(void *)(a1 + 16), 2, v50, *(void *)a1, *(void *)(a1 + 8));
                    uint64_t v51 = v3->nelts - 1;
                    v3->int nelts = v51;
                    uint64_t v52 = v3->elts;
                    long long v53 = *(_OWORD *)&v52[16 * v48];
                    *(_OWORD *)&v52[16 * v48] = *(_OWORD *)&v52[16 * v51];
                    *(_OWORD *)&v3->elts[16 * v51] = v53;
                    int v47 = v3->nelts;
                  }
                  else
                  {
                    ++v48;
                  }
                }
                while (v48 < v47);
              }
            }
          }
        }
        long long v34 = apr_hash_next(v34);
      }
      while (v34);
      uint64_t v2 = newpool;
    }
  }
  apr_pool_destroy(v2);
}

apr_array_header_t *ResourceTracker_harvestResources(uint64_t *a1, apr_pool_t *a2)
{
  ResourceTracker_postAccumulateHeapReads(a1);
  ResourceTracker_processAccelerationStructureReads((uint64_t)a1);
  apr_hash_make(a2);
  uint64_t v4 = a1[4];
  uint64_t v5 = apr_array_make(a2, *(_DWORD *)(v4 + 48), 56);
  *(void *)(v4 + 24) = 0;
  *(void *)(v4 + 32) = 0;
  *(void *)(v4 + 16) = v4;
  *(_DWORD *)(v4 + 40) = 0;
  int v6 = apr_hash_next((apr_hash_index_t *)(v4 + 16));
  if (v6)
  {
    unint64_t v7 = v6;
    do
    {
      uint64_t v8 = *(long long **)(*((void *)v7 + 1) + 32);
      long long v14 = v8[1];
      long long v15 = *v8;
      uint64_t v9 = *((void *)v8 + 4);
      char v10 = *((unsigned char *)v8 + 48);
      uint64_t v11 = *((void *)v8 + 5);
      uint64_t v12 = (char *)apr_array_push(v5);
      *(_OWORD *)uint64_t v12 = v15;
      *((_OWORD *)v12 + 1) = v14;
      *((void *)v12 + 4) = v9;
      *((void *)v12 + 5) = v11;
      v12[48] = v10;
      *(_DWORD *)(v12 + 49) = 0;
      *((_DWORD *)v12 + 13) = 0;
      unint64_t v7 = apr_hash_next(v7);
    }
    while (v7);
  }
  return v5;
}

uint64_t GTResourceTracker_resources(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

BOOL GTResourceTrackerResourceIsGPUOnly(uint64_t a1)
{
  return *(void *)(a1 + 24) == 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t ResourceTracker_addIndirectResources(uint64_t *a1, _DWORD **a2, unint64_t a3, apr_pool_t *p)
{
  unint64_t v7 = apr_array_make(p, 128, 8);
  v7->int nelts = 0;
  GTMTLSMContext_getObjects(a2[3], a3, v7);
  int nelts = v7->nelts;
  if (nelts >= 1)
  {
    for (uint64_t i = 0; i < nelts; ++i)
    {
      uint64_t v10 = *(void *)&v7->elts[8 * i];
      if (*(unsigned char *)(*(void *)(v10 + 48) + 62))
      {
        GTResourceTrackerUsingResource(a1[2], 75, *(void *)(v10 + 8), *a1, a1[1]);
        int nelts = v7->nelts;
      }
    }
  }
  v7->int nelts = 0;
  GTMTLSMContext_getObjects(a2[4], a3, v7);
  int v11 = v7->nelts;
  if (v11 >= 1)
  {
    for (uint64_t j = 0; j < v11; ++j)
    {
      uint64_t v13 = *(void *)&v7->elts[8 * j];
      if (GTMTLSMPipelineState_supportsIndirectCommandBuffers(v13))
      {
        GTResourceTrackerUsingResource(a1[2], 71, *(void *)(v13 + 8), *a1, a1[1]);
        int v11 = v7->nelts;
      }
    }
  }
  v7->int nelts = 0;
  uint64_t result = (uint64_t)GTMTLSMContext_getObjects(a2[5], a3, v7);
  int v15 = v7->nelts;
  if (v15 >= 1)
  {
    for (uint64_t k = 0; k < v15; ++k)
    {
      uint64_t v17 = *(void *)&v7->elts[8 * k];
      uint64_t v18 = *(void *)(v17 + 56);
      if (v18)
      {
        if (*(unsigned char *)(v18 + 956))
        {
          uint64_t result = GTResourceTrackerUsingResource(a1[2], 29, *(void *)(v17 + 8), *a1, a1[1]);
          int v15 = v7->nelts;
        }
      }
    }
  }
  return result;
}

void *ResourceTracker_addAccelerationStructures(uint64_t *a1, uint64_t a2, unint64_t a3, apr_pool_t *p)
{
  unint64_t v7 = apr_array_make(p, 128, 8);
  uint64_t result = GTMTLSMContext_getObjects(*(_DWORD **)(a2 + 72), a3, v7);
  int nelts = v7->nelts;
  if (nelts >= 1)
  {
    for (uint64_t i = 0; i < nelts; ++i)
    {
      int v11 = *(uint64_t **)(*(void *)&v7->elts[8 * i] + 112);
      if (v11)
      {
        uint64_t result = GTResourceTrackerUsingAccelerationStructureDescriptor(a1, v11, a3);
        int nelts = v7->nelts;
      }
    }
  }
  return result;
}

apr_hash_index_t *ResourceTracker_addChainedResources(uint64_t *a1, uint64_t *a2, unint64_t a3, apr_pool_t *pool)
{
  uint64_t v8 = apr_hash_make(pool);
  uint64_t v9 = a1[2];
  *(_DWORD *)(v9 + 40) = 0;
  *(void *)(v9 + 16) = v9;
  *(void *)(v9 + 24) = 0;
  *(void *)(v9 + 32) = 0;
  uint64_t v10 = apr_hash_next((apr_hash_index_t *)(v9 + 16));
  if (v10)
  {
    int v11 = v10;
    do
    {
      Object = GTMTLSMContext_getObject(a2, **(void **)(*((void *)v11 + 1) + 32), a3);
      if (Object)
      {
        BOOL v13 = (*(_DWORD *)Object - 22) > 0x3A
           || ((1 << (*(_DWORD *)Object - 22)) & 0x400000010000001) == 0;
        if (!v13 || *(_DWORD *)Object == 16)
        {
          RootResource = GTMTLSMContext_getRootResource(a2, Object, a3);
          apr_hash_set(v8, RootResource + 1, 8, RootResource);
        }
      }
      int v11 = apr_hash_next(v11);
    }
    while (v11);
  }
  unsigned int v16 = (apr_pool_t **)apr_hash_make(pool);
  GTMTLSMContext_buildResourceChildrenMap(a2, a3, v16);
  *((void *)v8 + 3) = 0;
  *((void *)v8 + 4) = 0;
  *((void *)v8 + 2) = v8;
  *((_DWORD *)v8 + 10) = 0;
  uint64_t result = apr_hash_next((apr_hash_t *)((char *)v8 + 16));
  if (result)
  {
    uint64_t v18 = result;
    do
    {
      AddChainedResourcesRecursive(a1, *(void *)(*((void *)v18 + 1) + 32), (uint64_t)v16);
      uint64_t result = apr_hash_next(v18);
      uint64_t v18 = result;
    }
    while (result);
  }
  return result;
}

void *AddChainedResourcesRecursive(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  GTResourceTrackerUsingResource(a1[2], *(_DWORD *)a2, *(void *)(a2 + 8), *a1, a1[1]);
  uint64_t result = find_entry(a3, (unsigned char *)(a2 + 8), 8uLL, 0);
  if (*result)
  {
    uint64_t v7 = *(void *)(*result + 32);
    if (v7)
    {
      if (*(int *)(v7 + 12) >= 1)
      {
        uint64_t v8 = 0;
        do
          uint64_t result = (void *)AddChainedResourcesRecursive(a1, *(void *)(*(void *)(v7 + 24) + 8 * v8++), a3);
        while (v8 < *(int *)(v7 + 12));
      }
    }
  }
  return result;
}

uint64_t ResourceTracker_addResourceGroups(uint64_t *a1, uint64_t a2, unint64_t a3, apr_pool_t *p)
{
  uint64_t v7 = apr_array_make(p, 128, 8);
  uint64_t result = (uint64_t)GTMTLSMContext_getObjects(*(_DWORD **)(a2 + 208), a3, v7);
  if (v7->nelts >= 1)
  {
    uint64_t v9 = 0;
    do
    {
      uint64_t v10 = *(void *)&v7->elts[8 * v9];
      uint64_t result = GTResourceTrackerUsingResource(a1[2], 73, *(void *)(v10 + 8), *a1, a1[1]);
      if (*(_DWORD *)(v10 + 56))
      {
        unint64_t v11 = 0;
        do
        {
          uint64_t v12 = a1[2];
          int ResourceType = GTResourceTrackerGetResourceType(*(void *)(*(void *)(v10 + 48) + 8 * v11), *a1);
          uint64_t result = GTResourceTrackerUsingResource(v12, ResourceType, *(void *)(*(void *)(v10 + 48) + 8 * v11++), *a1, a1[1]);
        }
        while (v11 < *(unsigned int *)(v10 + 56));
      }
      ++v9;
    }
    while (v9 < v7->nelts);
  }
  return result;
}

uint64_t ResourceTracker_addFunctionHandles(uint64_t *a1, uint64_t a2, unint64_t a3, apr_pool_t *p)
{
  uint64_t v7 = apr_array_make(p, 128, 8);
  uint64_t result = (uint64_t)GTMTLSMContext_getObjects(*(_DWORD **)(a2 + 256), a3, v7);
  if (v7->nelts >= 1)
  {
    uint64_t v9 = 0;
    while (1)
    {
      uint64_t v10 = *(void **)&v7->elts[8 * v9];
      uint64_t v11 = v10 ? v10[1] : 0;
      GTResourceTrackerUsingResource(a1[2], 44, v11, *a1, a1[1]);
      uint64_t result = GTMTLSMContext_lastObject((uint64_t *)a2, v10[5], a3);
      if (result)
      {
        uint64_t v12 = result;
        GTResourceTrackerUsingResource(a1[2], 43, *(void *)(result + 8), *a1, a1[1]);
        uint64_t result = ResourceTracker_addFunctionParent((uint64_t)a1, (uint64_t *)a2, v12, a3);
      }
      uint64_t v13 = v10[7];
      if (v13) {
        break;
      }
      uint64_t v13 = v10[6];
      if (v13)
      {
        uint64_t v15 = a1[1];
        uint64_t v14 = a1[2];
        uint64_t v16 = *a1;
        int v17 = 29;
        goto LABEL_12;
      }
LABEL_13:
      if (++v9 >= v7->nelts) {
        return result;
      }
    }
    uint64_t v15 = a1[1];
    uint64_t v14 = a1[2];
    uint64_t v16 = *a1;
    int v17 = 71;
LABEL_12:
    uint64_t result = GTResourceTrackerUsingResource(v14, v17, v13, v16, v15);
    goto LABEL_13;
  }
  return result;
}

uint64_t ResourceTracker_addFunctionParent(uint64_t result, uint64_t *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = (uint64_t *)result;
  if (*(unsigned char *)(a3 + 132))
  {
    if (!*(void *)(a3 + 104)) {
      return result;
    }
    uint64_t result = GTMTLSMContext_lastObject(a2, *(void *)(a3 + 40), a4);
    if (!result) {
      return result;
    }
    uint64_t v5 = result;
    uint64_t result = GTResourceTrackerUsingResource(v4[2], 43, *(void *)(result + 8), *v4, v4[1]);
    uint64_t v6 = *(void *)(v5 + 40);
    if (!v6) {
      return result;
    }
  }
  else
  {
    uint64_t v6 = *(void *)(a3 + 40);
  }

  return ResourceTracker_addLibrary(v4, v6);
}

uint64_t ResourceTracker_addLibrary(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  *(void *)&long long v40 = a2;
  entry = find_entry(v4, &v40, 8uLL, 0);
  if (*entry)
  {
    uint64_t v6 = *(void *)(*entry + 32);
    long long v40 = 0u;
    uint64_t v41 = 0;
    uint64_t v51 = 0;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    LODWORD(v40) = 62;
    uint64_t v42 = -1;
    uint64_t v8 = a1 + 1;
    uint64_t v7 = a1[1];
    if (v6 && (uint64_t v9 = *(void *)(v6 + 32)) != 0 && (*(unsigned char *)(v9 + 79) & 8) != 0) {
      uint64_t v10 = (uint64_t *)(v9 + 64);
    }
    else {
      uint64_t v10 = 0;
    }
  }
  else
  {
    uint64_t v10 = 0;
    long long v40 = 0u;
    uint64_t v41 = 0;
    uint64_t v51 = 0;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    LODWORD(v40) = 62;
    uint64_t v42 = -1;
    uint64_t v8 = a1 + 1;
    uint64_t v7 = a1[1];
  }
  GTMTLSMLibrary_processTraceFuncWithMap((uint64_t)&v40, v7, v10);
  if (DWORD2(v50))
  {
    unint64_t v11 = 0;
    do
    {
      uint64_t v12 = *(void *)(v44 + 8 * v11);
      uint64_t v13 = *a1;
      *(void *)&long long v30 = v12;
      uint64_t v14 = *find_entry(v13, &v30, 8uLL, 0);
      if (v14)
      {
        uint64_t v15 = *(void *)(v14 + 32);
        long long v30 = 0u;
        uint64_t v31 = 0;
        uint64_t v39 = 0;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        LODWORD(v30) = 43;
        uint64_t v32 = -1;
        uint64_t v16 = *v8;
        if (v15 && (uint64_t v17 = *(void *)(v15 + 32)) != 0 && (*(unsigned char *)(v17 + 79) & 8) != 0) {
          uint64_t v18 = (uint64_t *)(v17 + 64);
        }
        else {
          uint64_t v18 = 0;
        }
      }
      else
      {
        uint64_t v18 = 0;
        long long v30 = 0u;
        uint64_t v31 = 0;
        uint64_t v39 = 0;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        LODWORD(v30) = 43;
        uint64_t v32 = -1;
        uint64_t v16 = *v8;
      }
      GTMTLSMFunction_processTraceFuncWithMap((uint64_t)&v30, v16, v18);
      GTResourceTrackerUsingResource(a1[2], 43, v12, *a1, a1[1]);
      GTResourceTrackerUsingResource(a1[2], 62, *((uint64_t *)&v33 + 1), *a1, a1[1]);
      ++v11;
    }
    while (v11 < DWORD2(v50));
  }
  if (HIDWORD(v50))
  {
    unint64_t v19 = 0;
    do
    {
      uint64_t v20 = *(void *)(*((void *)&v46 + 1) + 8 * v19);
      uint64_t v21 = *a1;
      *(void *)&long long v30 = v20;
      uint64_t v22 = *find_entry(v21, &v30, 8uLL, 0);
      if (v22)
      {
        uint64_t v23 = *(void *)(v22 + 32);
        long long v30 = 0u;
        uint64_t v31 = 0;
        uint64_t v39 = 0;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        LODWORD(v30) = 43;
        uint64_t v32 = -1;
        uint64_t v24 = *v8;
        if (v23 && (uint64_t v25 = *(void *)(v23 + 32)) != 0 && (*(unsigned char *)(v25 + 79) & 8) != 0) {
          int v26 = (uint64_t *)(v25 + 64);
        }
        else {
          int v26 = 0;
        }
      }
      else
      {
        int v26 = 0;
        long long v30 = 0u;
        uint64_t v31 = 0;
        uint64_t v39 = 0;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        LODWORD(v30) = 43;
        uint64_t v32 = -1;
        uint64_t v24 = *v8;
      }
      GTMTLSMFunction_processTraceFuncWithMap((uint64_t)&v30, v24, v26);
      GTResourceTrackerUsingResource(a1[2], 43, v20, *a1, a1[1]);
      GTResourceTrackerUsingResource(a1[2], 62, *((uint64_t *)&v33 + 1), *a1, a1[1]);
      ++v19;
    }
    while (v19 < HIDWORD(v50));
  }
  if (*((void *)&v47 + 1) && (int)*(void *)(*((void *)&v47 + 1) + 40) >= 1)
  {
    uint64_t v27 = 0;
    uint64_t v28 = 8 * *(void *)(*((void *)&v47 + 1) + 40);
    do
    {
      ResourceTracker_addDynamicLibrary(a1, *(void *)(*(void *)(*((void *)&v47 + 1) + 32) + v27));
      v27 += 8;
    }
    while (v28 != v27);
  }
  return GTResourceTrackerUsingResource(a1[2], 62, a2, *a1, a1[1]);
}

uint64_t ResourceTracker_addDynamicLibrary(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  *(void *)&long long v11 = a2;
  entry = find_entry(v4, &v11, 8uLL, 0);
  if (*entry)
  {
    uint64_t v6 = *(void *)(*entry + 32);
    long long v11 = 0u;
    uint64_t v12 = 0;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v14 = 0u;
    LODWORD(v11) = 37;
    uint64_t v13 = -1;
    uint64_t v7 = a1[1];
    if (v6 && (uint64_t v8 = *(void *)(v6 + 32)) != 0 && (*(unsigned char *)(v8 + 79) & 8) != 0) {
      uint64_t v9 = (uint64_t *)(v8 + 64);
    }
    else {
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v9 = 0;
    long long v11 = 0u;
    uint64_t v12 = 0;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v14 = 0u;
    LODWORD(v11) = 37;
    uint64_t v13 = -1;
    uint64_t v7 = a1[1];
  }
  GTMTLSMDynamicLibrary_processTraceFuncWithMap((char *)&v11, v7, v9);
  GTResourceTrackerUsingResource(a1[2], 37, a2, *a1, a1[1]);
  if ((void)v15) {
    ResourceTracker_addLibrary(a1);
  }
  return GTResourceTrackerUsingResource(a1[2], 37, a2, *a1, a1[1]);
}

uint64_t ResourceTracker_addLibraries(uint64_t *a1, uint64_t a2, unint64_t a3, apr_pool_t *p)
{
  uint64_t v8 = apr_array_make(p, 128, 8);
  GTMTLSMContext_getObjects(*(_DWORD **)(a2 + 32), a3, v8);
  if (v8->nelts >= 1)
  {
    uint64_t v9 = 0;
    while (1)
    {
      uint64_t v10 = *(void **)&v8->elts[8 * v9];
      uint64_t v11 = v10 ? v10[1] : 0;
      v74[0] = v11;
      entry = find_entry(a1[2], v74, 8uLL, 0);
      if (*entry)
      {
        if (*(void *)(*entry + 32)) {
          break;
        }
      }
LABEL_40:
      if (++v9 >= v8->nelts) {
        goto LABEL_41;
      }
    }
    if (v10[11]) {
      GTResourceTrackerUsingResource(a1[2], 67, v10[5], *a1, a1[1]);
    }
    int v13 = GTMTLSMRenderPipelineState_renderPipelineDescriptorType((uint64_t *)a2, v10);
    switch(v13)
    {
      case 3:
        memset(__dst, 0, 512);
        uint64_t v32 = (const void *)v10[9];
        if (v32)
        {
          memcpy(__dst, v32, 0x200uLL);
          uint64_t v34 = *((void *)&__dst[22] + 1);
          uint64_t v33 = *(void *)&__dst[23];
          uint64_t v35 = *((void *)&__dst[21] + 1);
        }
        else
        {
          uint64_t v35 = 0;
          uint64_t v34 = 0;
          uint64_t v33 = 0;
        }
        ResourceTracker_addFunction(a1, (uint64_t *)a2, v33, a3);
        ResourceTracker_addFunction(a1, (uint64_t *)a2, v34, a3);
        ResourceTracker_addFunction(a1, (uint64_t *)a2, v35, a3);
        ResourceTracker_addLinkedFunctions((uint64_t)a1, (uint64_t *)a2, &__dst[16], a3);
        ResourceTracker_addLinkedFunctions((uint64_t)a1, (uint64_t *)a2, &__dst[12], a3);
        uint64_t v26 = (uint64_t)a1;
        uint64_t v27 = (uint64_t *)a2;
        uint64_t v28 = (uint64_t *)&__dst[8];
        break;
      case 2:
        memset(__dst, 0, 176);
        GTMTLSMRenderPipelineState_tilePipelineDescriptor((uint64_t *)a2, v10, (uint64_t **)__dst, p);
        ResourceTracker_addFunction(a1, (uint64_t *)a2, *((uint64_t *)&__dst[7] + 1), a3);
        uint64_t v29 = LOWORD(__dst[7]);
        if (LOWORD(__dst[7]))
        {
          long long v30 = (uint64_t *)*((void *)&__dst[6] + 1);
          do
          {
            uint64_t v31 = *v30++;
            ResourceTracker_addDynamicLibrary(a1, v31);
            --v29;
          }
          while (v29);
        }
        uint64_t v28 = (uint64_t *)__dst;
        uint64_t v26 = (uint64_t)a1;
        uint64_t v27 = (uint64_t *)a2;
        break;
      case 1:
        memset(__dst, 0, 512);
        GTMTLSMRenderPipelineState_renderPipelineDescriptor((uint64_t *)a2, v10, (uint64_t)__dst, p);
        ResourceTracker_addFunction(a1, (uint64_t *)a2, v71, a3);
        ResourceTracker_addFunction(a1, (uint64_t *)a2, v62[14], a3);
        ResourceTracker_addFunction(a1, (uint64_t *)a2, v67, a3);
        ResourceTracker_addFunction(a1, (uint64_t *)a2, v64, a3);
        uint64_t v14 = v73;
        if (v73)
        {
          long long v15 = v72;
          do
          {
            uint64_t v16 = *v15++;
            ResourceTracker_addDynamicLibrary(a1, v16);
            --v14;
          }
          while (v14);
        }
        uint64_t v17 = v63;
        if (v63)
        {
          long long v18 = (uint64_t *)v62[15];
          do
          {
            uint64_t v19 = *v18++;
            ResourceTracker_addDynamicLibrary(a1, v19);
            --v17;
          }
          while (v17);
        }
        uint64_t v20 = v69;
        if (v69)
        {
          uint64_t v21 = v68;
          do
          {
            uint64_t v22 = *v21++;
            ResourceTracker_addDynamicLibrary(a1, v22);
            --v20;
          }
          while (v20);
        }
        uint64_t v23 = v66;
        if (v66)
        {
          uint64_t v24 = v65;
          do
          {
            uint64_t v25 = *v24++;
            ResourceTracker_addDynamicLibrary(a1, v25);
            --v23;
          }
          while (v23);
        }
        GTResourceTrackerUsingResource(a1[2], 67, v70, *a1, a1[1]);
        ResourceTracker_addLinkedFunctions((uint64_t)a1, (uint64_t *)a2, v62, a3);
        ResourceTracker_addLinkedFunctions((uint64_t)a1, (uint64_t *)a2, v58, a3);
        ResourceTracker_addLinkedFunctions((uint64_t)a1, (uint64_t *)a2, v61, a3);
        uint64_t v26 = (uint64_t)a1;
        uint64_t v27 = (uint64_t *)a2;
        uint64_t v28 = &v60;
        break;
      default:
LABEL_35:
        if (v10[10])
        {
          Object = GTMTLSMContext_getObject((uint64_t *)a2, v10[5], v10[2]);
          if (Object)
          {
            long long v37 = Object;
            do
            {
              if (*(_DWORD *)v37 != 71) {
                break;
              }
              GTResourceTrackerUsingResource(a1[2], 71, v37[1], *a1, a1[1]);
              long long v37 = GTMTLSMContext_getObject((uint64_t *)a2, v37[5], v37[2]);
            }
            while (v37);
          }
        }
        goto LABEL_40;
    }
    ResourceTracker_addLinkedFunctions(v26, v27, v28, a3);
    goto LABEL_35;
  }
LABEL_41:
  v8->int nelts = 0;
  uint64_t result = (uint64_t)GTMTLSMContext_getObjects(*(_DWORD **)(a2 + 40), a3, v8);
  if (v8->nelts >= 1)
  {
    uint64_t v39 = 0;
    do
    {
      long long v40 = *(void **)&v8->elts[8 * v39];
      if (v40) {
        uint64_t v41 = v40[1];
      }
      else {
        uint64_t v41 = 0;
      }
      v74[0] = v41;
      uint64_t result = (uint64_t)find_entry(a1[2], v74, 8uLL, 0);
      if (*(void *)result && *(void *)(*(void *)result + 32))
      {
        if (v40[11]) {
          uint64_t result = GTResourceTrackerUsingResource(a1[2], 67, v40[5], *a1, a1[1]);
        }
        uint64_t v42 = (uint64_t *)v40[9];
        if (v42)
        {
          uint64_t v45 = *v42;
          long long v44 = v42 + 1;
          unsigned int v43 = v45;
          if ((int)v45 >= 1)
          {
            uint64_t v46 = v43;
            do
            {
              uint64_t v47 = *v44++;
              uint64_t result = ResourceTracker_addFunction(a1, (uint64_t *)a2, v47, a3);
              --v46;
            }
            while (v46);
          }
        }
        else
        {
          memset(__dst, 0, 512);
          GTMTLSMComputePipelineState_computePipelineDescriptor((uint64_t *)a2, (uint64_t)v40, __dst, p);
          GTResourceTrackerUsingResource(a1[2], 67, v58[1], *a1, a1[1]);
          ResourceTracker_addFunction(a1, (uint64_t *)a2, v56[12], a3);
          uint64_t v48 = v57;
          if (v57)
          {
            long long v49 = (uint64_t *)v56[13];
            do
            {
              uint64_t v50 = *v49++;
              ResourceTracker_addFunction(a1, (uint64_t *)a2, v50, a3);
              --v48;
            }
            while (v48);
          }
          uint64_t v51 = v59;
          if (v59)
          {
            uint64_t v52 = (uint64_t *)v58[2];
            do
            {
              uint64_t v53 = *v52++;
              ResourceTracker_addDynamicLibrary(a1, v53);
              --v51;
            }
            while (v51);
          }
          uint64_t result = ResourceTracker_addLinkedFunctions((uint64_t)a1, (uint64_t *)a2, v56, a3);
          if (v40[23])
          {
            uint64_t result = (uint64_t)GTMTLSMContext_getObject((uint64_t *)a2, v40[5], v40[2]);
            if (result)
            {
              uint64_t v54 = result;
              do
              {
                if (*(_DWORD *)v54 != 29) {
                  break;
                }
                GTResourceTrackerUsingResource(a1[2], 29, *(void *)(v54 + 8), *a1, a1[1]);
                uint64_t result = (uint64_t)GTMTLSMContext_getObject((uint64_t *)a2, *(void *)(v54 + 40), *(void *)(v54 + 16));
                uint64_t v54 = result;
              }
              while (result);
            }
          }
        }
      }
      ++v39;
    }
    while (v39 < v8->nelts);
  }
  return result;
}

uint64_t ResourceTracker_addFunction(uint64_t *a1, uint64_t *a2, uint64_t a3, unint64_t a4)
{
  uint64_t result = GTMTLSMContext_lastObject(a2, a3, a4);
  if (result)
  {
    uint64_t v8 = result;
    GTResourceTrackerUsingResource(a1[2], 43, *(void *)(result + 8), *a1, a1[1]);
    GTResourceTrackerUsingResource(a1[2], 67, *(void *)(v8 + 48), *a1, a1[1]);
    uint64_t result = ResourceTracker_addFunctionParent((uint64_t)a1, a2, v8, a4);
    uint64_t v9 = *(void *)(v8 + 112);
    if (v9)
    {
      if (*(void *)(v9 + 24))
      {
        unint64_t v10 = 0;
        do
        {
          uint64_t result = ResourceTracker_addFunction(a1, a2, *(void *)(*(void *)(v9 + 16) + 8 * v10++), a4);
          uint64_t v9 = *(void *)(v8 + 112);
        }
        while (*(void *)(v9 + 24) > v10);
      }
    }
  }
  return result;
}

uint64_t ResourceTracker_addLinkedFunctions(uint64_t result, uint64_t *a2, void *a3, unint64_t a4)
{
  uint64_t v7 = (uint64_t *)result;
  if (a3[3])
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t Object = GTMTLSMContext_lastObject(a2, *(void *)(a3[2] + 8 * v8), a4);
      uint64_t v10 = Object;
      if (Object) {
        uint64_t v11 = *(void *)(Object + 8);
      }
      else {
        uint64_t v11 = 0;
      }
      GTResourceTrackerUsingResource(v7[2], 43, v11, *v7, v7[1]);
      uint64_t result = ResourceTracker_addFunctionParent((uint64_t)v7, a2, v10, a4);
      ++v8;
    }
    while (a3[3] > v8);
  }
  if (a3[7])
  {
    unint64_t v12 = 0;
    do
    {
      uint64_t v13 = GTMTLSMContext_lastObject(a2, *(void *)(a3[6] + 8 * v12), a4);
      uint64_t v14 = v13;
      if (v13) {
        uint64_t v15 = *(void *)(v13 + 8);
      }
      else {
        uint64_t v15 = 0;
      }
      GTResourceTrackerUsingResource(v7[2], 43, v15, *v7, v7[1]);
      uint64_t result = ResourceTracker_addFunctionParent((uint64_t)v7, a2, v14, a4);
      ++v12;
    }
    while (a3[7] > v12);
  }
  if (a3[1])
  {
    unint64_t v16 = 0;
    do
    {
      uint64_t v17 = GTMTLSMContext_lastObject(a2, *(void *)(*a3 + 8 * v16), a4);
      uint64_t v18 = v17;
      if (v17) {
        uint64_t v19 = *(void *)(v17 + 8);
      }
      else {
        uint64_t v19 = 0;
      }
      GTResourceTrackerUsingResource(v7[2], 43, v19, *v7, v7[1]);
      uint64_t result = ResourceTracker_addFunctionParent((uint64_t)v7, a2, v18, a4);
      ++v16;
    }
    while (a3[1] > v16);
  }
  unint64_t v20 = a3[5];
  if (v20)
  {
    for (unint64_t i = 0; i < v20; ++i)
    {
      uint64_t v22 = a3[4];
      uint64_t v23 = v22 + 24 * i;
      int v25 = *(_DWORD *)(v23 + 16);
      uint64_t v24 = (unsigned int *)(v23 + 16);
      if (v25)
      {
        unint64_t v26 = 0;
        uint64_t v27 = (void *)(v22 + 24 * i + 8);
        do
        {
          uint64_t v28 = GTMTLSMContext_lastObject(a2, *(void *)(*v27 + 8 * v26), a4);
          uint64_t v29 = v28;
          if (v28) {
            uint64_t v30 = *(void *)(v28 + 8);
          }
          else {
            uint64_t v30 = 0;
          }
          GTResourceTrackerUsingResource(v7[2], 43, v30, *v7, v7[1]);
          uint64_t result = ResourceTracker_addFunctionParent((uint64_t)v7, a2, v29, a4);
          ++v26;
        }
        while (v26 < *v24);
        unint64_t v20 = a3[5];
      }
    }
  }
  return result;
}

void GTResourceTrackerUsingResidencySetArray(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = a3;
    do
    {
      uint64_t v7 = *a2++;
      uint64_t v6 = v7;
      if (v7) {
        GTResourceTrackerUsingResidencySet(a1, v6);
      }
      --v3;
    }
    while (v3);
  }
}

void GTCaptureBoundaryTracker_init(uint64_t a1)
{
  newpool = 0;
  apr_pool_create_ex(&newpool, 0, 0, 0);
  uint64_t v2 = newpool;
  uint64_t v3 = (char *)apr_palloc(newpool, 0x68uLL);
  uint64_t v4 = (uint64_t)v3;
  if (v3)
  {
    *((_DWORD *)v3 + 25) = 0;
    *(_OWORD *)(v3 + 84) = 0u;
    *(_OWORD *)(v3 + 68) = 0u;
    *(_OWORD *)(v3 + 52) = 0u;
    *(_OWORD *)(v3 + 36) = 0u;
    *(_OWORD *)(v3 + 20) = 0u;
  }
  *(void *)uint64_t v3 = a1;
  *((void *)v3 + 1) = v2;
  *((_DWORD *)v3 + 4) = 0;
  *((void *)v3 + 3) = dispatch_queue_create("com.apple.dt.GPUTools.GTCaptureBoundaryTracker", 0);
  for (uint64_t i = 32; i != 72; i += 8)
  {
    uint64_t v6 = apr_palloc(v2, 0x10uLL);
    void *v6 = v2;
    v6[1] = apr_array_make(v2, 0, 64);
    *(void *)(v4 + i) = v6;
  }
  boundaryTrackerInstance = v4;

  GTCaptureBoundaryTracker_reset();
}

void GTCaptureBoundaryTracker_reset()
{
  uint64_t v0 = boundaryTrackerInstance;
  id v1 = (os_unfair_lock_s *)(boundaryTrackerInstance + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(boundaryTrackerInstance + 16));
  atomic_store(0, (unsigned int *)(v0 + 20));
  for (uint64_t i = 32; i != 72; i += 8)
    *(_DWORD *)(*(void *)(*(void *)(v0 + i) + 8) + 12) = 0;
  uint64_t v3 = (char *)apr_array_push(*(apr_array_header_t **)(*(void *)(v0 + 32) + 8));
  *(void *)uint64_t v3 = 0x700000001;
  *(_OWORD *)(v3 + 8) = 0u;
  *(_OWORD *)(v3 + 24) = 0u;
  *(_OWORD *)(v3 + 40) = 0u;
  *((void *)v3 + 7) = 1;
  *(_DWORD *)(v0 + 88) = 1;
  *(_WORD *)(v0 + 96) = 0;
  *(void *)(v0 + 72) = 0;
  *(void *)(v0 + 80) = 0;
  atomic_store(0, (unsigned __int8 *)(*(void *)v0 + 120));

  os_unfair_lock_unlock(v1);
}

void GTCaptureBoundaryTracker_destroy()
{
  boundaryTrackerInstance = 0;
}

void GTCaptureBoundaryTracker_handleTrigger(long long *a1)
{
  uint64_t v2 = (void *)boundaryTrackerInstance;
  if (!*((void *)a1 + 2))
  {
    unint64_t v3 = atomic_load((unint64_t *)(*(void *)boundaryTrackerInstance + 72));
    if (v3 <= 1) {
      unint64_t v3 = 1;
    }
    *((void *)a1 + 2) = v3 - 1;
  }
  uint64_t v25 = 0;
  unint64_t v26 = &v25;
  uint64_t v27 = 0x2000000000;
  char v28 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = &v21;
  uint64_t v23 = 0x2000000000;
  char v24 = 0;
  uint64_t v4 = v2[3];
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  long long v5 = *a1;
  long long v16 = a1[1];
  long long v15 = v5;
  long long v19 = a1[4];
  long long v6 = a1[2];
  long long v18 = a1[3];
  block[2] = __GTCaptureBoundaryTracker_handleTrigger_block_invoke;
  block[3] = &unk_221AE8;
  block[5] = &v21;
  block[6] = v2;
  uint64_t v20 = *((void *)a1 + 10);
  long long v17 = v6;
  void block[4] = &v25;
  dispatch_sync(v4, block);
  if (*((unsigned char *)v26 + 24))
  {
    v2[10] = *((void *)a1 + 2) - v2[9] + 1;
    if (*((unsigned char *)v22 + 24))
    {
      if (s_logUsingOsLog)
      {
        uint64_t v7 = gt_tagged_log(0);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&def_CFBEC, v7, OS_LOG_TYPE_INFO, "🔥 Aborting capture", buf, 2u);
        }
      }
      else
      {
        fwrite("🔥 Aborting capture\n", 0x16uLL, 1uLL, __stdoutp);
      }
      GTMTLCaptureManager_abortActiveCapture(v2[9], v2[10]);
    }
    else
    {
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 0x40000000;
      uint64_t v10 = __GTCaptureBoundaryTracker_handleTrigger_block_invoke_2;
      uint64_t v11 = &__block_descriptor_tmp_5;
      unint64_t v12 = v2;
      if ((int)atomic_fetch_or((atomic_uint *volatile)(boundaryTrackerInstance + 92), 0) < 1)
      {
        v10((uint64_t)v9);
      }
      else
      {
        global_queue = dispatch_get_global_queue(2, 0);
        dispatch_async(global_queue, v9);
      }
    }
  }
  _Block_object_dispose(&v21, 8);
  _Block_object_dispose(&v25, 8);
}

const char *GTCaptureObjectTypeAsString(int a1)
{
  if ((a1 - 1) > 0xB) {
    return "None";
  }
  else {
    return (&off_221B28)[a1 - 1];
  }
}

void GTCaptureBoundaryTracker_commandBufferHandlerBegin()
{
}

void GTCaptureBoundaryTracker_commandBufferHandlerEnd()
{
}

BOOL GTCaptureBoundaryTracker_isCaptureActive()
{
  return *(_DWORD *)(boundaryTrackerInstance + 20) != 0;
}

BOOL GTCaptureBoundaryTracker_isCaptureRecordingData()
{
  return (*(_DWORD *)(boundaryTrackerInstance + 20) & 0xFFFFFFFE) == 2;
}

const char *GTCaptureTriggerTypeAsString(int a1)
{
  if ((a1 - 1) > 8) {
    return "Instant";
  }
  else {
    return (&off_221BB0)[a1 - 1];
  }
}

BOOL GTEventTracker_isBlocked(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  entry = find_entry(*(void *)(a1 + 56), &v5, 8uLL, 0);
  return *entry && (uint64_t v3 = *(void *)(*entry + 32)) != 0 && *(_DWORD *)(v3 + 12) != 0;
}

uint64_t EventValueCompare(void *a1, void *a2)
{
  if (*a1 < *a2) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *a1 > *a2;
  }
}

void *GTEventTracker_make(uint64_t a1, uint64_t a2, uint64_t a3, apr_pool_t *p)
{
  unint64_t v8 = apr_palloc(p, 0x50uLL);
  uint64_t v9 = v8;
  if (v8)
  {
    v8[3] = 0u;
    _OWORD v8[4] = 0u;
    v8[1] = 0u;
    v8[2] = 0u;
    _OWORD *v8 = 0u;
  }
  *(void *)unint64_t v8 = apr_hash_make(p);
  v9[1] = apr_hash_make(p);
  void v9[3] = apr_hash_make(p);
  void v9[2] = apr_hash_make(p);
  v9[4] = a1;
  v9[5] = a2;
  v9[6] = apr_hash_make(p);
  v9[7] = apr_hash_make(p);
  v9[8] = a3;
  v9[9] = p;
  return v9;
}

_OWORD *GTEventTracker_makeFrom(uint64_t a1)
{
  uint64_t v2 = *(apr_pool_t **)(a1 + 72);
  uint64_t v3 = apr_palloc(v2, 0x50uLL);
  uint64_t v4 = v3;
  if (v3)
  {
    v3[3] = 0u;
    v3[4] = 0u;
    v3[1] = 0u;
    v3[2] = 0u;
    *uint64_t v3 = 0u;
  }
  *((void *)v3 + 1) = apr_hash_make(v2);
  *((void *)v4 + 7) = apr_hash_make(v2);
  *(void *)uint64_t v4 = *(void *)a1;
  v4[1] = *(_OWORD *)(a1 + 16);
  v4[2] = *(_OWORD *)(a1 + 32);
  *((void *)v4 + 6) = *(void *)(a1 + 48);
  *((void *)v4 + 8) = *(void *)(a1 + 64);
  *((void *)v4 + 9) = v2;
  return v4;
}

void GTEventTracker_processFunction(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 8);
  if (v4 > -15491)
  {
    if (v4 > -15334)
    {
      if (v4 <= -15309)
      {
        if (v4 != -15333)
        {
          int v5 = -15309;
LABEL_10:
          if (v4 != v5) {
            return;
          }
          goto LABEL_19;
        }
        goto LABEL_23;
      }
      if (v4 != -15308)
      {
        int v6 = -12544;
LABEL_22:
        if (v4 != v6) {
          return;
        }
        goto LABEL_23;
      }
LABEL_26:
      uint64_t v13 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), *(void *)(a1 + 40));
      uint64_t v14 = *((void *)v13 + 1);
      unint64_t v15 = *(void *)a2;
      unint64_t v16 = *((void *)v13 + 2);
      uint64_t v36 = *(void *)v13;
      long long v17 = (uint64_t *)apr_palloc(*(apr_pool_t **)(a1 + 72), 8uLL);
      *long long v17 = (uint64_t)GTEventTracker_eventKey(*(uint64_t **)(a1 + 64), v14, v15);
      long long v18 = apr_palloc(*(apr_pool_t **)(a1 + 72), 8uLL);
      *long long v18 = v14;
      apr_hash_set(*(apr_hash_t **)a1, v18, 8, v17);
      uint64_t v19 = *find_entry(*(void *)(a1 + 24), v17, 8uLL, 0);
      if (!v19 || (uint64_t v20 = *(unint64_t **)(v19 + 32)) == 0)
      {
        uint64_t v20 = (unint64_t *)apr_palloc(*(apr_pool_t **)(a1 + 72), 8uLL);
        *uint64_t v20 = -1;
        apr_hash_set(*(apr_hash_t **)(a1 + 24), v17, 8, v20);
      }
      if (*v20 > v16) {
        *uint64_t v20 = v16;
      }
      uint64_t v21 = *find_entry(*(void *)(a1 + 48), &v36, 8uLL, 0);
      if (v21)
      {
        uint64_t v22 = *(unsigned char **)(v21 + 32);
        if (v22)
        {
          uint64_t v23 = *find_entry(*(void *)(a1 + 8), v17, 8uLL, 0);
          char v24 = v23 ? *(unint64_t **)(v23 + 32) : 0;
          entry = find_entry(*(void *)(a1 + 16), v17, 8uLL, 0);
          if (*entry)
          {
            uint64_t v27 = *(void *)(*entry + 32);
            if (v27)
            {
              if (*(int *)(v27 + 12) >= 1)
              {
                unint64_t v28 = **(void **)(v27 + 24);
                BOOL v29 = v28 == *v20;
                if (v28 >= *v20) {
                  unint64_t v30 = *v20;
                }
                else {
                  unint64_t v30 = v28 - 1;
                }
                if (v29) {
                  unint64_t v30 = *v20 - 1;
                }
                if (v30 < v16 && (!v24 || *v24 < v16))
                {
                  uint64_t v31 = *find_entry(*(void *)(a1 + 56), v22, 8uLL, 0);
                  if (!v31 || (uint64_t v32 = *(apr_array_header_t **)(v31 + 32)) == 0)
                  {
                    uint64_t v32 = apr_array_make(*(apr_pool_t **)(a1 + 72), 4, 24);
                    apr_hash_set(*(apr_hash_t **)(a1 + 56), v22, 8, v32);
                  }
                  uint64_t v33 = *(void *)v22;
                  uint64_t v34 = *v17;
                  uint64_t v35 = apr_array_push(v32);
                  void *v35 = v33;
                  v35[1] = v34;
                  v35[2] = v16;
                }
              }
            }
          }
        }
      }
      return;
    }
    if (v4 != -15490)
    {
      if (v4 == -15340)
      {
LABEL_19:
        uint64_t v7 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), *(void *)(a1 + 40));
        unint64_t v8 = *(void *)a2;
        uint64_t v9 = *((void *)v7 + 1);
        unint64_t v10 = *((void *)v7 + 2);
LABEL_36:
        GTEventTracker_processSignal(a1, v9, v8, v10);
        return;
      }
      if (v4 != -15339) {
        return;
      }
      goto LABEL_26;
    }
LABEL_35:
    uint64_t v25 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), *(void *)(a1 + 40));
    unint64_t v8 = *(void *)a2;
    uint64_t v9 = *v25;
    unint64_t v10 = v25[1];
    goto LABEL_36;
  }
  if (v4 > -15976)
  {
    if (v4 != -15975)
    {
      if (v4 != -15749)
      {
        int v6 = -15701;
        goto LABEL_22;
      }
      goto LABEL_26;
    }
    goto LABEL_35;
  }
  if ((v4 + 16343) >= 2)
  {
    if (v4 != -15991)
    {
      int v5 = -15990;
      goto LABEL_10;
    }
    goto LABEL_26;
  }
LABEL_23:
  uint64_t v11 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), *(void *)(a1 + 40));
  unint64_t v12 = *(apr_hash_t **)(a1 + 48);

  apr_hash_set(v12, v11 + 8, 8, v11);
}

apr_hash_index_t *GTEventTracker_processSignal(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4;
  unint64_t v31 = a4;
  unint64_t v8 = apr_palloc(*(apr_pool_t **)(a1 + 72), 8uLL);
  void *v8 = GTEventTracker_eventKey(*(uint64_t **)(a1 + 64), a2, a3);
  uint64_t v9 = apr_palloc(*(apr_pool_t **)(a1 + 72), 8uLL);
  *uint64_t v9 = a2;
  apr_hash_set(*(apr_hash_t **)a1, v9, 8, v8);
  uint64_t v10 = *find_entry(*(void *)(a1 + 8), v8, 8uLL, 0);
  if (v10) {
    uint64_t v11 = *(unint64_t **)(v10 + 32);
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *find_entry(*(void *)(a1 + 16), v8, 8uLL, 0);
  if (v12)
  {
    uint64_t v13 = *(apr_array_header_t **)(v12 + 32);
    if (v11) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v13 = 0;
  if (!v11)
  {
LABEL_6:
    uint64_t v11 = (unint64_t *)apr_palloc(*(apr_pool_t **)(a1 + 72), 8uLL);
    *uint64_t v11 = 0;
    apr_hash_set(*(apr_hash_t **)(a1 + 8), v8, 8, v11);
  }
LABEL_7:
  if (!v13)
  {
    uint64_t v13 = apr_array_make(*(apr_pool_t **)(a1 + 72), 4, 8);
    apr_hash_set(*(apr_hash_t **)(a1 + 16), v8, 8, v13);
  }
  if (*v11 < v4) {
    *uint64_t v11 = v4;
  }
  int nelts = v13->nelts;
  if (!nelts)
  {
    uint64_t v19 = apr_array_push(v13);
    goto LABEL_24;
  }
  uint64_t elts = v13->elts;
  unint64_t v30 = elts;
  if (nelts >= 1)
  {
    uint64_t elt_size = v13->elt_size;
    unsigned int v17 = v13->nelts;
    do
    {
      if ((int)EventValueCompare(&elts[(int)(elt_size * (v17 >> 1))], &v31) >= 0)
      {
        v17 >>= 1;
      }
      else
      {
        elts += (int)(elt_size * (v17 >> 1)) + elt_size;
        v17 += ~(v17 >> 1);
      }
    }
    while ((int)v17 > 0);
  }
  unint64_t v4 = v31;
  unint64_t v18 = (unint64_t)(elts - v30) >> 3;
  if (nelts <= (int)v18 || *(void *)elts > v31)
  {
    uint64_t v19 = (void *)GTInsert(v13, v18);
LABEL_24:
    *uint64_t v19 = v4;
  }
  uint64_t v20 = *(void *)(a1 + 56);
  *(void *)(v20 + 24) = 0;
  *(void *)(v20 + 32) = 0;
  *(void *)(v20 + 16) = v20;
  *(_DWORD *)(v20 + 40) = 0;
  for (uint64_t result = apr_hash_next((apr_hash_index_t *)(v20 + 16)); result; uint64_t result = apr_hash_next(result))
  {
    uint64_t v22 = *(void *)(*((void *)result + 1) + 32);
    if (v22)
    {
      int v23 = *(_DWORD *)(v22 + 12);
      if (v23 >= 1)
      {
        uint64_t v24 = 0;
        for (uint64_t i = 0; i < v23; ++i)
        {
          uint64_t v26 = *(void *)(v22 + 24);
          uint64_t v27 = v26 + v24;
          if (*(void *)(v26 + v24 + 8) == *v8 && *(void *)(v27 + 16) <= v4)
          {
            unint64_t v28 = (long long *)(v26 + 24 * (v23 - 1));
            long long v29 = *v28;
            *(void *)(v27 + 16) = *((void *)v28 + 2);
            *(_OWORD *)uint64_t v27 = v29;
            int v23 = *(_DWORD *)(v22 + 12);
            if (v23) {
              *(_DWORD *)(v22 + 12) = --v23;
            }
          }
          v24 += 24;
        }
      }
    }
  }
  return result;
}

void *GTEventTracker_eventKey(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t result = GTMTLSMContext_getObject(a1, a2, a3);
  if (result)
  {
    int v4 = *(_DWORD *)result;
    if (*(_DWORD *)result == 76 || v4 == 61)
    {
      return (void *)(*((unsigned int *)result + 18) | 0x8000000000000000);
    }
    else if (v4 == 38)
    {
      return (void *)(result[1] & 0x7FFFFFFFFFFFFFFFLL);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL GTEventTracker_wasWaitSignaled(uint64_t a1, uint64_t a2)
{
  BOOL result = 0;
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5 > -15340)
  {
    BOOL v6 = v5 == -15308;
    int v7 = -15339;
  }
  else
  {
    BOOL v6 = v5 == -15991;
    int v7 = -15749;
  }
  if (v6 || v5 == v7)
  {
    uint64_t v9 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), *(void *)(a1 + 40));
    uint64_t v12 = GTEventTracker_eventKey(*(uint64_t **)(a1 + 64), *((void *)v9 + 1), *(void *)a2);
    entry = find_entry(*(void *)(a1 + 8), &v12, 8uLL, 0);
    return *entry && (uint64_t v11 = *(void **)(*entry + 32)) != 0 && *v11 >= *((void *)v9 + 2);
  }
  return result;
}

uint64_t GTEventTracker_isValueSignaled(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = a3;
  uint64_t v9 = a2;
  uint64_t v4 = *find_entry(*a1, &v9, 8uLL, 0);
  if (!v4) {
    return 0;
  }
  int v5 = *(unsigned char **)(v4 + 32);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = *find_entry(a1[2], v5, 8uLL, 0);
  if (!v6) {
    return 0;
  }
  uint64_t result = *(void *)(v6 + 32);
  if (result) {
    return GTBinarySearch(result, (uint64_t)&v8, (uint64_t (*)(uint64_t, uint64_t))EventValueCompare) != 0;
  }
  return result;
}

unint64_t CopyResourcesToBuffer(void *a1, void *a2, unint64_t a3, void *a4, uint64_t a5, int a6)
{
  id v39 = a1;
  id v11 = a2;
  id v12 = a4;
  id v13 = v11;
  uint64_t v14 = (char *)[v13 contents];
  if (a6 >= 1)
  {
    unint64_t v15 = v14;
    uint64_t v16 = 0;
    uint64_t v17 = 56 * a6;
    while (1)
    {
      uint64_t v18 = a5 + v16;
      uint64_t v19 = &v15[a3];
      long long v20 = *(_OWORD *)(a5 + v16);
      long long v21 = *(_OWORD *)(a5 + v16 + 16);
      long long v22 = *(_OWORD *)(a5 + v16 + 32);
      *((void *)v19 + 6) = *(void *)(a5 + v16 + 48);
      *((_OWORD *)v19 + 1) = v21;
      *((_OWORD *)v19 + 2) = v22;
      *(_OWORD *)uint64_t v19 = v20;
      uint64_t v23 = (*(unsigned __int16 *)(a5 + v16 + 18) + a3 + 55) & -(uint64_t)*(unsigned __int16 *)(a5 + v16 + 18);
      int v24 = *(unsigned __int16 *)(a5 + v16 + 16);
      if (v24 == 2) {
        break;
      }
      if (v24 == 1)
      {
        uint64_t v25 = +[NSNumber numberWithUnsignedLongLong:*(void *)(a5 + v16 + 8)];
        uint64_t v26 = [v12 objectForKeyedSubscript:v25];

        [v39 copyFromBuffer:v26 sourceOffset:*(unsigned int *)(a5 + v16 + 24) toBuffer:v13 destinationOffset:v23 size:*(unsigned int *)(a5 + v16 + 20)];
LABEL_7:
      }
      a3 = (v23 + *(unsigned int *)(a5 + v16 + 20) + 7) & 0xFFFFFFFFFFFFFFF8;
      v16 += 56;
      if (v17 == v16) {
        goto LABEL_9;
      }
    }
    uint64_t v27 = +[NSNumber numberWithUnsignedLongLong:*(void *)(v18 + 8)];
    uint64_t v26 = [v12 objectForKeyedSubscript:v27];

    uint64_t v28 = *(unsigned __int16 *)(v18 + 36);
    uint64_t v29 = *(unsigned __int16 *)(v18 + 38);
    uint64_t v30 = *(unsigned int *)(v18 + 40);
    uint64_t v31 = *(unsigned __int16 *)(v18 + 44);
    uint64_t v32 = *(unsigned __int16 *)(v18 + 46);
    uint64_t v33 = *(unsigned __int16 *)(v18 + 24);
    uint64_t v34 = *(unsigned __int8 *)(v18 + 26);
    uint64_t v35 = *(unsigned int *)(v18 + 48);
    uint64_t v36 = *(unsigned int *)(v18 + 52);
    uint64_t v37 = *(unsigned __int8 *)(v18 + 27);
    v41[0] = *(unsigned int *)(v18 + 32);
    v41[1] = v28;
    void v41[2] = v29;
    v40[0] = v30;
    v40[1] = v31;
    v40[2] = v32;
    [v39 copyFromTexture:v26 sourceSlice:v33 sourceLevel:v34 sourceOrigin:v41 sourceSize:v40 toBuffer:v13 destinationOffset:v23 destinationBytesPerRow:v35 destinationBytesPerImage:v36 options:v37];
    goto LABEL_7;
  }
LABEL_9:

  return a3;
}

id CreateBuffer(void *a1, NSUInteger a2, char *a3)
{
  id v5 = a1;
  NSUInteger v6 = NSRoundUpToMultipleOfPageSize(a2);
  LODWORD(a3) = mkstemp(a3);
  ftruncate((int)a3, v6);
  int v7 = mmap(0, v6, 2, 1, (int)a3, 0);
  close((int)a3);
  id v8 = [v5 newBufferWithBytesNoCopy:v7 length:v6 options:262401 deallocator:&__block_literal_global_3665];

  return v8;
}

void DownloadNewArchiveRequests(void *a1, uint64_t a2, uint64_t a3)
{
  id v56 = a1;
  id v4 = [objc_alloc((Class)NSMutableDictionary) initWithCapacity:*(int *)(a2 + 12)];
  newpool = 0;
  apr_pool_create_ex(&newpool, 0, 0, 0);
  uint64_t v55 = newpool;
  id v5 = apr_array_make(newpool, *(_DWORD *)(a2 + 12), 56);
  id v6 = v4;
  int v7 = v6;
  if (*(int *)(a2 + 12) >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = NSComparisonPredicate_ptr;
    uint64_t v58 = v5;
    id v59 = v6;
    uint64_t v57 = a2;
    while (1)
    {
      uint64_t v10 = *(void *)(a2 + 24);
      uint64_t v11 = v10 + 88 * v8;
      id v12 = *(id *)v11;
      long long v62 = (int8x16_t *)(v11 + 8);
      id v13 = [v9[18] numberWithUnsignedLongLong:*(void *)(v11 + 8)];
      [v7 setObject:v12 forKeyedSubscript:v13];

      unsigned int v14 = *(unsigned __int8 *)(v11 + 46);
      if (v14 <= 0x4F)
      {
        if (v14 == 22)
        {
          uint64_t v23 = (char *)apr_array_push(v5);
          uint64_t v24 = *(void *)(v10 + 88 * v8 + 48);
          uint64_t v25 = *(void *)(v10 + 88 * v8 + 56);
          *(int8x16_t *)uint64_t v23 = vextq_s8(*v62, *v62, 8uLL);
          *((_DWORD *)v23 + 4) = 262145;
          *((_DWORD *)v23 + 5) = v25;
          *((_DWORD *)v23 + 6) = v24;
          *(void *)(v23 + 28) = 0;
          *(void *)(v23 + 44) = 0;
          *(void *)(v23 + 36) = 0;
          *((_DWORD *)v23 + 13) = 0;
        }
        else if (v14 == 57)
        {
          id v15 = v12;
          unsigned int v16 = [v15 size];
          long long v75 = 0u;
          long long v73 = 0u;
          int64x2_t v74 = 0u;
          long long v71 = 0u;
          long long v72 = 0u;
          long long v69 = 0u;
          long long v70 = 0u;
          id v17 = v12;
          uint64_t v18 = v10 + 88 * v8;
          GTMTLCreateIndirectCommandEncoder((uint64_t)&v69, v18 + 48);
          uint64_t v19 = (char *)apr_array_push(v5);
          int v20 = DWORD2(v75) * v16;
          uint64_t v9 = NSComparisonPredicate_ptr;
          long long v67 = *(_OWORD *)(v18 + 48);
          long long v21 = v67;
          uint64_t v22 = *(void *)(v18 + 64);
          id v12 = v17;
          uint64_t v68 = v22;
          *(int8x16_t *)uint64_t v19 = vextq_s8(*v62, *v62, 8uLL);
          *((_DWORD *)v19 + 4) = 524291;
          *((_DWORD *)v19 + 5) = v20;
          *((void *)v19 + 5) = v22;
          *(_OWORD *)(v19 + 24) = v21;
        }
        goto LABEL_23;
      }
      if (v14 != 80)
      {
        if (v14 == 86) {
          ProcessIOSurfaceTextureRequest(v5, v12, v10 + 88 * v8);
        }
        goto LABEL_23;
      }
      uint64_t v26 = v7;
      uint64_t v27 = v5;
      id v28 = v12;
      unsigned int v64 = [v28 isShareable];
      if (![v28 iosurface] || objc_msgSend(v28, "isDrawable")) {
        break;
      }
      unsigned int v65 = [v28 isFramebufferOnly] | v64;

      if (v65) {
        goto LABEL_14;
      }
      ProcessIOSurfaceTextureRequest(v27, v28, v10 + 88 * v8);
LABEL_22:

      id v5 = v27;
      int v7 = v26;
LABEL_23:

      if (++v8 >= *(int *)(a2 + 12)) {
        goto LABEL_27;
      }
    }

LABEL_14:
    id v29 = v28;
    uint64_t v30 = [v29 device];
    id v31 = [v29 pixelFormat];
    int8x16_t v76 = 0uLL;
    *(void *)&long long v72 = 0;
    long long v70 = 0u;
    long long v71 = 0u;
    long long v69 = 0u;
    GTMTLPixelFormatGetInfoForDevice((uint64_t)v31, (uint64_t)&v69);
    unint64_t v32 = 0;
    if ((WORD4(v69) & 0x2000) != 0)
    {
      v76.i64[0] = 4;
      unint64_t v32 = 4;
    }
    uint64_t v61 = v8;
    uint64_t v60 = (void *)v30;
    if ((~DWORD2(v69) & 0x60) != 0)
    {
      uint64_t v33 = 1;
    }
    else
    {
      int8x16_t v76 = vorrq_s8((int8x16_t)vdupq_n_s64(v32), (int8x16_t)xmmword_1DA260);
      uint64_t v33 = 2;
    }
    [v29 width];
    [v29 height];
    [v29 depth];
    id v63 = [v29 sampleCount];
    uint64_t v34 = 0;
    uint64_t v35 = (__int16 *)(v10 + 88 * v61 + 48);
    __int16 v36 = *(_WORD *)(v11 + 50);
    do
    {
      *(void *)&long long v75 = 0;
      long long v73 = 0u;
      int64x2_t v74 = 0u;
      long long v71 = 0u;
      long long v72 = 0u;
      long long v69 = 0u;
      long long v70 = 0u;
      uint64_t v37 = v76.i64[v34];
      GTMTLGetTextureLevelInfoForDeviceWithOptions((uint64_t)v31, (uint64_t)v63, (uint64_t)&v69);
      __int16 v38 = *v35;
      id v39 = (int8x16_t *)apr_array_push(v58);
      __int32 v40 = v75;
      long long v41 = v69;
      __int16 v42 = WORD4(v73);
      __int16 v43 = v70;
      *id v39 = vextq_s8(*v62, *v62, 8uLL);
      v39[1].i16[0] = 2;
      v39[1].i16[1] = v42;
      v39[1].i32[1] = v40;
      int32x2_t v44 = vmovn_s64(v74);
      v39[1].i16[4] = v38;
      v39[1].i8[10] = v36;
      v39[1].i8[11] = v37;
      v39[1].i8[12] = v34;
      v39[1].i8[13] = 0;
      v39[1].i16[7] = 0;
      v39[2].i64[0] = 0;
      v39[2].i32[2] = v41;
      v39[2].i16[6] = WORD4(v41);
      v39[2].i16[7] = v43;
      *(int32x2_t *)v39[3].i8 = v44;
      ++v34;
    }
    while (v33 != v34);

    uint64_t v26 = v59;
    uint64_t v27 = v58;
    a2 = v57;
    uint64_t v8 = v61;
    uint64_t v9 = NSComparisonPredicate_ptr;
    goto LABEL_22;
  }
LABEL_27:

  qsort(v5->elts, v5->nelts, v5->elt_size, (int (__cdecl *)(const void *, const void *))CompareRequestsByDescendingSize);
  uint64_t nelts = v5->nelts;
  if ((int)nelts < 1)
  {
    NSUInteger v46 = 0;
  }
  else
  {
    NSUInteger v46 = 0;
    uint64_t v47 = (unsigned int *)(v5->elts + 20);
    do
    {
      uint64_t v48 = (*((unsigned __int16 *)v47 - 1) + v46 + 55) & -(uint64_t)*((unsigned __int16 *)v47 - 1);
      unsigned int v49 = *v47;
      v47 += 14;
      NSUInteger v46 = (v49 + v48 + 7) & 0xFFFFFFFFFFFFFFF8;
      --nelts;
    }
    while (nelts);
  }
  uint64_t v50 = gt_filepath_merge(*(const char **)(a3 + 64), "gttrace-downloadXXXXXX", v55);
  uint64_t v51 = [v56 device];
  uint64_t v52 = CreateBuffer(v51, v46, v50);

  uint64_t v53 = [v56 blitCommandEncoder];
  CopyResourcesToBuffer(v53, v52, 0, v7, (uint64_t)v5->elts, v5->nelts);
  [v53 endEncoding];
  apr_pool_destroy(v55);
}

size_t ProcessIOSurfaceTextureRequest(apr_array_header_t *a1, void *a2, uint64_t a3)
{
  id v4 = (__IOSurface *)[a2 iosurface];
  size_t PlaneCount = IOSurfaceGetPlaneCount(v4);
  size_t v6 = 0;
  if (PlaneCount <= 1) {
    uint64_t v7 = 1;
  }
  else {
    uint64_t v7 = PlaneCount;
  }
  do
  {
    int HeightOfPlane = IOSurfaceGetHeightOfPlane(v4, v6);
    int BytesPerRowOfPlane = IOSurfaceGetBytesPerRowOfPlane(v4, v6);
    uint64_t v10 = apr_array_push(a1);
    uint64_t v11 = *(void *)(a3 + 8);
    uint64_t v12 = *(void *)(a3 + 16);
    size_t result = IOSurfaceGetWidthOfPlane(v4, v6);
    *uint64_t v10 = v12;
    v10[1] = v11;
    *((_DWORD *)v10 + 4) = 262146;
    *((_DWORD *)v10 + 5) = BytesPerRowOfPlane * HeightOfPlane;
    *((_DWORD *)v10 + 6) = 0;
    *((unsigned char *)v10 + 28) = v6;
    *((unsigned char *)v10 + 29) = 0;
    *((_WORD *)v10 + 15) = 0;
    v10[4] = 0;
    *((_DWORD *)v10 + 10) = result;
    *((_WORD *)v10 + 22) = HeightOfPlane;
    *((_WORD *)v10 + 23) = 1;
    ++v6;
    *((_DWORD *)v10 + 12) = BytesPerRowOfPlane;
    *((_DWORD *)v10 + 13) = BytesPerRowOfPlane * HeightOfPlane;
  }
  while (v7 != v6);
  return result;
}

uint64_t CompareRequestsByDescendingSize(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 20);
  unsigned int v3 = *(_DWORD *)(a2 + 20);
  BOOL v4 = v2 > v3;
  LODWORD(v5) = v2 != v3;
  if (v4) {
    uint64_t v5 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v5 = v5;
  }
  if (!v5)
  {
    unsigned int v6 = *(unsigned __int16 *)(a1 + 18);
    unsigned int v7 = *(unsigned __int16 *)(a2 + 18);
    BOOL v4 = v6 > v7;
    LODWORD(v5) = v6 != v7;
    if (v4) {
      return 0xFFFFFFFFLL;
    }
    else {
      return v5;
    }
  }
  return v5;
}

void GTResourceTrackerProcessResourceUse(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(_DWORD *)(a2 + 8);
  if (v6 > -15757)
  {
    if (v6 <= -15367)
    {
      if (v6 <= -15525)
      {
        if (v6 > -15599)
        {
          switch(v6)
          {
            case -15598:
              long long v105 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              uint64_t v18 = a1[1];
              uint64_t v19 = *((void *)v105 + 1);
              uint64_t v20 = *a1;
              uint64_t v21 = a1[2];
              int v22 = 44;
              goto LABEL_427;
            case -15597:
              id v106 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              uint64_t v107 = a1[2];
              long long v108 = GTTraceFunc_argumentBytesWithMap((void *)a2, v106[24], a1[1]);
              uint64_t v109 = *((void *)v106 + 2);
              if (v109)
              {
                long long v110 = (uint64_t *)v108;
                uint64_t v112 = *a1;
                uint64_t v111 = a1[1];
                do
                {
                  uint64_t v114 = *v110++;
                  uint64_t v113 = v114;
                  if (v114) {
                    GTResourceTrackerUsingResource(v107, 44, v113, v112, v111);
                  }
                  --v109;
                }
                while (v109);
              }
              break;
            case -15592:
            case -15591:
LABEL_47:
              uint64_t v35 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              uint64_t v36 = v35[1];
              uint64_t v37 = a1;
              int v38 = 22;
LABEL_224:
              GTResourceTrackerResourceRead(v37, v38, v36, a3);
              uint64_t v26 = v35[3];
              goto LABEL_247;
            case -15588:
              goto LABEL_246;
            case -15583:
LABEL_97:
              long long v67 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              uint64_t v18 = a1[1];
              uint64_t v19 = *((void *)v67 + 1);
              uint64_t v20 = *a1;
              uint64_t v21 = a1[2];
              int v22 = 60;
              goto LABEL_427;
            case -15582:
              id v115 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              uint64_t v116 = a1[2];
              long long v117 = GTTraceFunc_argumentBytesWithMap((void *)a2, v115[24], a1[1]);
              uint64_t v118 = *((void *)v115 + 2);
              if (v118)
              {
                long long v119 = (uint64_t *)v117;
                uint64_t v121 = *a1;
                uint64_t v120 = a1[1];
                do
                {
                  uint64_t v123 = *v119++;
                  uint64_t v122 = v123;
                  if (v123) {
                    GTResourceTrackerUsingResource(v116, 60, v122, v121, v120);
                  }
                  --v118;
                }
                while (v118);
              }
              break;
            case -15581:
LABEL_98:
              uint64_t v68 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              uint64_t v18 = a1[1];
              uint64_t v19 = *((void *)v68 + 1);
              uint64_t v20 = *a1;
              uint64_t v21 = a1[2];
              int v22 = 83;
              goto LABEL_427;
            case -15580:
              long long v124 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              uint64_t v125 = a1[2];
              long long v126 = GTTraceFunc_argumentBytesWithMap((void *)a2, v124[24], a1[1]);
              uint64_t v127 = *((void *)v124 + 2);
              if (v127)
              {
                uint64_t v128 = (uint64_t *)v126;
                uint64_t v130 = *a1;
                uint64_t v129 = a1[1];
                do
                {
                  uint64_t v132 = *v128++;
                  uint64_t v131 = v132;
                  if (v132) {
                    GTResourceTrackerUsingResource(v125, 83, v131, v130, v129);
                  }
                  --v127;
                }
                while (v127);
              }
              break;
            default:
              return;
          }
        }
        else
        {
          switch(v6)
          {
            case -15647:
              uint64_t v95 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              long long v96 = tracker_resource_get(a1, 16, *((void *)v95 + 1), a3);
              if (v96) {
                v96[4] = a3;
              }
              GTResourceTrackerUsingResource(a1[2], 22, *((void *)v95 + 2), *a1, a1[1]);
              unsigned int v89 = v95[32];
              goto LABEL_142;
            case -15646:
            case -15645:
              uint64_t v25 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              GTResourceTrackerResourceRead(a1, 16, *((void *)v25 + 1), a3);
              uint64_t v26 = *((void *)v25 + 2);
              uint64_t v27 = a1;
              int v28 = 16;
              goto LABEL_248;
            case -15644:
            case -15643:
            case -15642:
            case -15641:
            case -15640:
            case -15639:
            case -15636:
            case -15628:
            case -15627:
            case -15626:
            case -15625:
            case -15624:
              return;
            case -15638:
              long long v97 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              GTResourceTrackerResourceRead(a1, 16, *((void *)v97 + 1), a3);
              long long v98 = tracker_resource_get(a1, 16, *((void *)v97 + 2), a3);
              if (v98) {
                v98[4] = a3;
              }
              GTResourceTrackerUsingResource(a1[2], 22, *((void *)v97 + 3), *a1, a1[1]);
              unsigned int v89 = v97[40];
              goto LABEL_142;
            case -15637:
LABEL_49:
              id v39 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              uint64_t v18 = a1[1];
              uint64_t v19 = *((void *)v39 + 1);
              uint64_t v20 = *a1;
              uint64_t v21 = a1[2];
              int v22 = 31;
              goto LABEL_427;
            case -15635:
            case -15630:
LABEL_59:
              long long v41 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              uint64_t v18 = a1[1];
              uint64_t v19 = *((void *)v41 + 1);
              uint64_t v20 = *a1;
              uint64_t v21 = a1[2];
              int v22 = 41;
              goto LABEL_427;
            case -15634:
LABEL_90:
              uint64_t v62 = *((void *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]) + 1);
              GTResourceTrackerUsingResourceHeap(a1, v62, a3);
              break;
            case -15633:
              long long v100 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              long long v101 = GTTraceFunc_argumentBytesWithMap((void *)a2, v100[16], a1[1]);
              uint64_t v102 = *((void *)v100 + 1);
              if (v102)
              {
                uint64_t v103 = (uint64_t *)v101;
                do
                {
                  uint64_t v104 = *v103++;
                  GTResourceTrackerUsingResourceHeap(a1, v104, a3);
                  --v102;
                }
                while (v102);
              }
              break;
            case -15632:
LABEL_93:
              id v63 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              int ResourceType = GTResourceTrackerGetResourceType(*((void *)v63 + 1), *a1);
              uint64_t v65 = *((void *)v63 + 1);
              int v66 = *((_DWORD *)v63 + 4);
              GTResourceTrackerResourceUsage(a1, ResourceType, v65, a3, v66);
              break;
            case -15631:
LABEL_43:
              id v31 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              unsigned int v32 = v31[24];
LABEL_256:
              uint64_t v234 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, v32, a1[1]);
              uint64_t v235 = *((void *)v31 + 1);
              int v236 = *((_DWORD *)v31 + 4);
              GTResourceTrackerResourceUsageArray(a1, v234, v235, a3, v236);
              break;
            case -15629:
              goto LABEL_246;
            case -15623:
LABEL_96:
              uint64_t v7 = *((void *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]) + 1);
              uint64_t v8 = a1;
              int v9 = 16;
              goto LABEL_484;
            default:
              switch(v6)
              {
                case -15756:
                  uint64_t v30 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
                  GTResourceTrackerUsingResource(a1[2], 31, *((void *)v30 + 1), *a1, a1[1]);
LABEL_169:
                  uint64_t v26 = *((void *)v30 + 4);
                  goto LABEL_247;
                case -15755:
                case -15754:
                case -15750:
                  goto LABEL_49;
                case -15753:
                case -15752:
                case -15751:
                  return;
                case -15749:
                  goto LABEL_135;
                default:
                  switch(v6)
                  {
                    case -15728:
                    case -15726:
                    case -15723:
                    case -15722:
LABEL_72:
                      uint64_t v7 = *((void *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1])+ 1);
                      goto LABEL_73;
                    default:
                      return;
                  }
              }
          }
        }
      }
      else
      {
        switch(v6)
        {
          case -15474:
LABEL_99:
            uint64_t v26 = *((void *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]) + 1);
            goto LABEL_247;
          case -15473:
          case -15472:
          case -15471:
          case -15470:
          case -15469:
LABEL_56:
            uint64_t v26 = *((void *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]) + 1);
            goto LABEL_57;
          case -15468:
          case -15467:
          case -15464:
          case -15463:
          case -15462:
          case -15461:
          case -15460:
          case -15444:
          case -15443:
          case -15442:
          case -15441:
          case -15440:
          case -15439:
          case -15438:
          case -15437:
          case -15436:
          case -15435:
          case -15434:
          case -15433:
          case -15432:
          case -15431:
          case -15430:
          case -15429:
          case -15428:
          case -15427:
          case -15426:
          case -15425:
          case -15424:
          case -15423:
          case -15422:
          case -15421:
          case -15420:
          case -15419:
          case -15418:
          case -15417:
          case -15416:
          case -15414:
          case -15413:
          case -15412:
          case -15411:
          case -15410:
          case -15409:
          case -15408:
          case -15407:
          case -15406:
          case -15405:
          case -15404:
          case -15403:
          case -15402:
          case -15400:
          case -15398:
          case -15390:
          case -15388:
            return;
          case -15466:
            uint64_t v10 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            uint64_t v11 = tracker_resource_get(a1, 16, *((void *)v10 + 1), a3);
            if (v11) {
              v11[4] = a3;
            }
            uint64_t v12 = GTTraceFunc_argumentBytesWithMap((void *)a2, v10[32], a1[1]);
            id v13 = (uint64_t *)(v12 + 8);
            for (uint64_t i = *(void *)v12; i; --i)
            {
              uint64_t v16 = *v13++;
              uint64_t v15 = v16;
              if (v16) {
                GTResourceTrackerResourceRead(a1, 16, v15, a3);
              }
            }
LABEL_81:
            uint64_t v7 = *((void *)v10 + 2);
            goto LABEL_483;
          case -15465:
LABEL_128:
            int8x16_t v76 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            __int16 v90 = tracker_resource_get(a1, 16, *((void *)v76 + 1), a3);
            if (v90) {
              v90[4] = a3;
            }
LABEL_130:
            uint64_t v7 = *((void *)v76 + 2);
            goto LABEL_483;
          case -15459:
          case -15454:
          case -15449:
            goto LABEL_96;
          case -15458:
          case -15453:
          case -15448:
            goto LABEL_97;
          case -15457:
            uint64_t v299 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            uint64_t v300 = a1[2];
            v301 = GTTraceFunc_argumentBytesWithMap((void *)a2, v299[24], a1[1]);
            uint64_t v302 = *((void *)v299 + 2);
            if (v302)
            {
              uint64_t v303 = (uint64_t *)v301;
              uint64_t v305 = *a1;
              uint64_t v304 = a1[1];
              do
              {
                uint64_t v307 = *v303++;
                uint64_t v306 = v307;
                if (v307) {
                  GTResourceTrackerUsingResource(v300, 60, v306, v305, v304);
                }
                --v302;
              }
              while (v302);
            }
            break;
          case -15456:
          case -15451:
          case -15446:
            goto LABEL_98;
          case -15455:
            uint64_t v308 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            uint64_t v309 = a1[2];
            v310 = GTTraceFunc_argumentBytesWithMap((void *)a2, v308[24], a1[1]);
            uint64_t v311 = *((void *)v308 + 2);
            if (v311)
            {
              v312 = (uint64_t *)v310;
              uint64_t v314 = *a1;
              uint64_t v313 = a1[1];
              do
              {
                uint64_t v316 = *v312++;
                uint64_t v315 = v316;
                if (v316) {
                  GTResourceTrackerUsingResource(v309, 83, v315, v314, v313);
                }
                --v311;
              }
              while (v311);
            }
            break;
          case -15452:
            v317 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            uint64_t v318 = a1[2];
            v319 = GTTraceFunc_argumentBytesWithMap((void *)a2, v317[24], a1[1]);
            uint64_t v320 = *((void *)v317 + 2);
            if (v320)
            {
              v321 = (uint64_t *)v319;
              uint64_t v323 = *a1;
              uint64_t v322 = a1[1];
              do
              {
                uint64_t v325 = *v321++;
                uint64_t v324 = v325;
                if (v325) {
                  GTResourceTrackerUsingResource(v318, 60, v324, v323, v322);
                }
                --v320;
              }
              while (v320);
            }
            break;
          case -15450:
            v326 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            uint64_t v327 = a1[2];
            v328 = GTTraceFunc_argumentBytesWithMap((void *)a2, v326[24], a1[1]);
            uint64_t v329 = *((void *)v326 + 2);
            if (v329)
            {
              v330 = (uint64_t *)v328;
              uint64_t v332 = *a1;
              uint64_t v331 = a1[1];
              do
              {
                uint64_t v334 = *v330++;
                uint64_t v333 = v334;
                if (v334) {
                  GTResourceTrackerUsingResource(v327, 83, v333, v332, v331);
                }
                --v329;
              }
              while (v329);
            }
            break;
          case -15447:
            long long v335 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            uint64_t v336 = a1[2];
            long long v337 = GTTraceFunc_argumentBytesWithMap((void *)a2, v335[24], a1[1]);
            uint64_t v338 = *((void *)v335 + 2);
            if (v338)
            {
              v339 = (uint64_t *)v337;
              uint64_t v341 = *a1;
              uint64_t v340 = a1[1];
              do
              {
                uint64_t v343 = *v339++;
                uint64_t v342 = v343;
                if (v343) {
                  GTResourceTrackerUsingResource(v336, 60, v342, v341, v340);
                }
                --v338;
              }
              while (v338);
            }
            break;
          case -15445:
            v344 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            uint64_t v345 = a1[2];
            v346 = GTTraceFunc_argumentBytesWithMap((void *)a2, v344[24], a1[1]);
            uint64_t v347 = *((void *)v344 + 2);
            if (v347)
            {
              v348 = (uint64_t *)v346;
              uint64_t v350 = *a1;
              uint64_t v349 = a1[1];
              do
              {
                uint64_t v352 = *v348++;
                uint64_t v351 = v352;
                if (v352) {
                  GTResourceTrackerUsingResource(v345, 83, v351, v350, v349);
                }
                --v347;
              }
              while (v347);
            }
            break;
          case -15415:
LABEL_226:
            uint64_t v7 = *((void *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]) + 1);
            goto LABEL_483;
          case -15401:
          case -15391:
            goto LABEL_110;
          case -15399:
            v353 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            uint64_t v354 = a1[2];
            v355 = GTTraceFunc_argumentBytesWithMap((void *)a2, v353[24], a1[1]);
            uint64_t v356 = *((void *)v353 + 2);
            if (v356)
            {
              v357 = (uint64_t *)v355;
              uint64_t v359 = *a1;
              uint64_t v358 = a1[1];
              do
              {
                uint64_t v361 = *v357++;
                uint64_t v360 = v361;
                if (v361) {
                  GTResourceTrackerUsingResource(v354, 22, v360, v359, v358);
                }
                --v356;
              }
              while (v356);
            }
            break;
          case -15397:
          case -15396:
          case -15387:
          case -15386:
LABEL_61:
            __int16 v42 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            uint64_t v18 = a1[1];
            uint64_t v19 = *((void *)v42 + 1);
            uint64_t v20 = *a1;
            uint64_t v21 = a1[2];
LABEL_62:
            int v22 = 75;
            goto LABEL_427;
          case -15395:
            v362 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            uint64_t v363 = a1[2];
            v364 = GTTraceFunc_argumentBytesWithMap((void *)a2, v362[24], a1[1]);
            uint64_t v365 = *((void *)v362 + 2);
            if (v365)
            {
              v366 = (uint64_t *)v364;
              uint64_t v368 = *a1;
              uint64_t v367 = a1[1];
              do
              {
                uint64_t v370 = *v366++;
                uint64_t v369 = v370;
                if (v370) {
                  GTResourceTrackerUsingResource(v363, 75, v369, v368, v367);
                }
                --v365;
              }
              while (v365);
            }
            break;
          case -15394:
            v371 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            uint64_t v372 = a1[2];
            v373 = GTTraceFunc_argumentBytesWithMap((void *)a2, v371[24], a1[1]);
            uint64_t v374 = *((void *)v371 + 2);
            if (v374)
            {
              v375 = (uint64_t *)v373;
              uint64_t v377 = *a1;
              uint64_t v376 = a1[1];
              do
              {
                uint64_t v379 = *v375++;
                uint64_t v378 = v379;
                if (v379) {
                  GTResourceTrackerUsingResource(v372, 75, v378, v377, v376);
                }
                --v374;
              }
              while (v374);
            }
            break;
          case -15393:
          case -15383:
LABEL_70:
            uint64_t v52 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            uint64_t v18 = a1[1];
            uint64_t v19 = *((void *)v52 + 1);
            uint64_t v20 = *a1;
            uint64_t v21 = a1[2];
            int v22 = 80;
            goto LABEL_427;
          case -15392:
            v380 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            uint64_t v381 = a1[2];
            v382 = GTTraceFunc_argumentBytesWithMap((void *)a2, v380[24], a1[1]);
            uint64_t v383 = *((void *)v380 + 2);
            if (v383)
            {
              v384 = (uint64_t *)v382;
              uint64_t v386 = *a1;
              uint64_t v385 = a1[1];
              do
              {
                uint64_t v388 = *v384++;
                uint64_t v387 = v388;
                if (v388) {
                  GTResourceTrackerUsingResource(v381, 80, v387, v386, v385);
                }
                --v383;
              }
              while (v383);
            }
            break;
          case -15389:
            v389 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            uint64_t v390 = a1[2];
            v391 = GTTraceFunc_argumentBytesWithMap((void *)a2, v389[24], a1[1]);
            uint64_t v392 = *((void *)v389 + 2);
            if (v392)
            {
              v393 = (uint64_t *)v391;
              uint64_t v395 = *a1;
              uint64_t v394 = a1[1];
              do
              {
                uint64_t v397 = *v393++;
                uint64_t v396 = v397;
                if (v397) {
                  GTResourceTrackerUsingResource(v390, 22, v396, v395, v394);
                }
                --v392;
              }
              while (v392);
            }
            break;
          case -15385:
            v398 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            uint64_t v399 = a1[2];
            v400 = GTTraceFunc_argumentBytesWithMap((void *)a2, v398[24], a1[1]);
            uint64_t v401 = *((void *)v398 + 2);
            if (v401)
            {
              v402 = (uint64_t *)v400;
              uint64_t v404 = *a1;
              uint64_t v403 = a1[1];
              do
              {
                uint64_t v406 = *v402++;
                uint64_t v405 = v406;
                if (v406) {
                  GTResourceTrackerUsingResource(v399, 75, v405, v404, v403);
                }
                --v401;
              }
              while (v401);
            }
            break;
          case -15384:
            v407 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            uint64_t v408 = a1[2];
            v409 = GTTraceFunc_argumentBytesWithMap((void *)a2, v407[24], a1[1]);
            uint64_t v410 = *((void *)v407 + 2);
            if (v410)
            {
              v411 = (uint64_t *)v409;
              uint64_t v413 = *a1;
              uint64_t v412 = a1[1];
              do
              {
                uint64_t v415 = *v411++;
                uint64_t v414 = v415;
                if (v415) {
                  GTResourceTrackerUsingResource(v408, 75, v414, v413, v412);
                }
                --v410;
              }
              while (v410);
            }
            break;
          case -15382:
            v416 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            uint64_t v417 = a1[2];
            v418 = GTTraceFunc_argumentBytesWithMap((void *)a2, v416[24], a1[1]);
            uint64_t v419 = *((void *)v416 + 2);
            if (v419)
            {
              v420 = (uint64_t *)v418;
              uint64_t v422 = *a1;
              uint64_t v421 = a1[1];
              do
              {
                uint64_t v424 = *v420++;
                uint64_t v423 = v424;
                if (v424) {
                  GTResourceTrackerUsingResource(v417, 80, v423, v422, v421);
                }
                --v419;
              }
              while (v419);
            }
            break;
          default:
            switch(v6)
            {
              case -15524:
                uint64_t v10 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
                uint64_t v53 = tracker_resource_get(a1, 16, *((void *)v10 + 1), a3);
                if (v53) {
                  v53[4] = a3;
                }
                uint64_t v54 = GTTraceFunc_argumentBytesWithMap((void *)a2, v10[32], a1[1]);
                uint64_t v55 = (uint64_t *)(v54 + 8);
                for (uint64_t j = *(void *)v54; j; --j)
                {
                  uint64_t v58 = *v55++;
                  uint64_t v57 = v58;
                  if (v58) {
                    GTResourceTrackerResourceRead(a1, 16, v57, a3);
                  }
                }
                goto LABEL_81;
              case -15523:
                goto LABEL_128;
              case -15522:
                v425 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
                GTResourceTrackerResourceRead(a1, 16, *((void *)v425 + 1), a3);
                v426 = GTTraceFunc_argumentBytesWithMap((void *)a2, v425[32], a1[1]);
                v427 = (uint64_t *)(v426 + 8);
                for (uint64_t k = *(void *)v426; k; --k)
                {
                  uint64_t v430 = *v427++;
                  uint64_t v429 = v430;
                  if (v430) {
                    GTResourceTrackerResourceRead(a1, 16, v429, a3);
                  }
                }
                uint64_t v26 = *((void *)v425 + 2);
                goto LABEL_247;
              case -15521:
                goto LABEL_246;
              default:
                if (v6 == -15502) {
                  goto LABEL_246;
                }
                break;
            }
            break;
        }
      }
      return;
    }
    if (v6 > -7158)
    {
      switch(v6)
      {
        case -6142:
          uint64_t v238 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerUsingResource(a1[2], 7, *(void *)v238, *a1, a1[1]);
          uint64_t v239 = GTTraceFunc_argumentBytesWithMap((void *)a2, v238[40], a1[1]);
          uint64_t v240 = *((void *)v238 + 6);
          if (v240)
          {
            uint64_t v241 = (uint64_t *)v239;
            do
            {
              uint64_t v243 = *v241++;
              uint64_t v242 = v243;
              if (v243) {
                GTResourceTrackerResourceRead(a1, 80, v242, a3);
              }
              --v240;
            }
            while (v240);
          }
          uint64_t v244 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, v238[64], a1[1]);
          GTResourceTrackerResourceWriteArray(a1, 80, v244, *((void *)v238 + 9), a3);
          uint64_t v7 = *((void *)v238 + 13);
          goto LABEL_483;
        case -6141:
        case -6139:
        case -6138:
        case -6134:
        case -6133:
        case -6131:
        case -6129:
        case -6128:
        case -6127:
        case -6124:
        case -6123:
        case -6122:
        case -6120:
        case -6119:
        case -6116:
        case -6111:
        case -6110:
        case -6109:
          return;
        case -6140:
          v245 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerUsingResource(a1[2], 11, *v245, *a1, a1[1]);
          GTResourceTrackerResourceRead(a1, 22, v245[6], a3);
          GTResourceTrackerResourceRead(a1, 22, v245[11], a3);
          v246 = tracker_resource_get(a1, 22, v245[15], a3);
          if (v246) {
            v246[4] = a3;
          }
          uint64_t v7 = v245[19];
          goto LABEL_483;
        case -6137:
          uint64_t v247 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerUsingResource(a1[2], 11, *v247, *a1, a1[1]);
          GTResourceTrackerResourceRead(a1, 22, v247[6], a3);
          GTResourceTrackerResourceRead(a1, 22, v247[11], a3);
          uint64_t v26 = v247[15];
          goto LABEL_247;
        case -6136:
          uint64_t v248 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerUsingResource(a1[2], 5, *v248, *a1, a1[1]);
          GTResourceTrackerResourceRead(a1, 22, v248[3], a3);
          uint64_t v249 = v248[4];
          goto LABEL_481;
        case -6135:
          int v250 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v252 = a1[1];
          uint64_t v251 = a1[2];
          uint64_t v253 = *v250;
          uint64_t v254 = *a1;
          int v255 = 8;
          goto LABEL_275;
        case -6132:
          v256 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerUsingResource(a1[2], 10, *v256, *a1, a1[1]);
          GTResourceTrackerResourceRead(a1, 22, v256[11], a3);
          GTResourceTrackerResourceRead(a1, 22, v256[16], a3);
          uint64_t v26 = v256[21];
          goto LABEL_247;
        case -6130:
          v257 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerUsingResource(a1[2], 10, *v257, *a1, a1[1]);
          GTResourceTrackerResourceRead(a1, 22, v257[6], a3);
          GTResourceTrackerResourceRead(a1, 22, v257[11], a3);
          uint64_t v26 = v257[16];
          goto LABEL_247;
        case -6126:
          int v250 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v252 = a1[1];
          uint64_t v251 = a1[2];
          uint64_t v253 = *v250;
          uint64_t v254 = *a1;
          int v255 = 7;
LABEL_275:
          GTResourceTrackerUsingResource(v251, v255, v253, v254, v252);
          GTResourceTrackerResourceRead(a1, 80, v250[5], a3);
          uint64_t v26 = v250[7];
          goto LABEL_57;
        case -6125:
          uint64_t v33 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerUsingResource(a1[2], 4, *v33, *a1, a1[1]);
          GTResourceTrackerResourceRead(a1, 80, v33[6], a3);
          uint64_t v34 = v33[8];
LABEL_277:
          GTResourceTrackerResourceRead(a1, 80, v34, a3);
          uint64_t v26 = v33[10];
          goto LABEL_57;
        case -6121:
          unint64_t v258 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerUsingResource(a1[2], 7, *v258, *a1, a1[1]);
          GTResourceTrackerResourceRead(a1, 80, v258[5], a3);
          uint64_t v7 = v258[7];
LABEL_73:
          uint64_t v8 = a1;
          int v9 = 80;
          goto LABEL_484;
        case -6118:
          uint64_t v259 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerUsingResource(a1[2], 4, *(void *)v259, *a1, a1[1]);
          v260 = GTTraceFunc_argumentBytesWithMap((void *)a2, v259[48], a1[1]);
          uint64_t v261 = *((void *)v259 + 7);
          if (v261)
          {
            v262 = (uint64_t *)v260;
            do
            {
              uint64_t v264 = *v262++;
              uint64_t v263 = v264;
              if (v264) {
                GTResourceTrackerResourceRead(a1, 80, v263, a3);
              }
              --v261;
            }
            while (v261);
          }
          v265 = GTTraceFunc_argumentBytesWithMap((void *)a2, v259[72], a1[1]);
          uint64_t v266 = *((void *)v259 + 10);
          if (v266)
          {
            uint64_t v267 = (uint64_t *)v265;
            do
            {
              uint64_t v269 = *v267++;
              uint64_t v268 = v269;
              if (v269) {
                GTResourceTrackerResourceRead(a1, 80, v268, a3);
              }
              --v266;
            }
            while (v266);
          }
          v270 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, v259[96], a1[1]);
          GTResourceTrackerResourceWriteArray(a1, 80, v270, *((void *)v259 + 13), a3);
          goto LABEL_312;
        case -6117:
          long long v69 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerUsingResource(a1[2], 8, *v69, *a1, a1[1]);
          uint64_t v70 = v69[6];
          long long v71 = a1;
          int v72 = 80;
LABEL_291:
          GTResourceTrackerResourceRead(v71, v72, v70, a3);
          uint64_t v26 = v69[8];
          goto LABEL_57;
        case -6115:
          uint64_t v271 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerUsingResource(a1[2], 8, *(void *)v271, *a1, a1[1]);
          int v272 = GTTraceFunc_argumentBytesWithMap((void *)a2, v271[48], a1[1]);
          uint64_t v273 = *((void *)v271 + 7);
          if (v273)
          {
            int v274 = (uint64_t *)v272;
            do
            {
              uint64_t v276 = *v274++;
              uint64_t v275 = v276;
              if (v276) {
                GTResourceTrackerResourceRead(a1, 80, v275, a3);
              }
              --v273;
            }
            while (v273);
          }
          uint64_t v277 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, v271[72], a1[1]);
          GTResourceTrackerResourceWriteArray(a1, 80, v277, *((void *)v271 + 10), a3);
          uint64_t v7 = *((void *)v271 + 12);
          goto LABEL_483;
        case -6114:
          uint64_t v259 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerUsingResource(a1[2], 6, *(void *)v259, *a1, a1[1]);
          uint64_t v278 = GTTraceFunc_argumentBytesWithMap((void *)a2, v259[48], a1[1]);
          uint64_t v279 = *((void *)v259 + 7);
          if (v279)
          {
            v280 = (uint64_t *)v278;
            do
            {
              uint64_t v282 = *v280++;
              uint64_t v281 = v282;
              if (v282) {
                GTResourceTrackerResourceRead(a1, 80, v281, a3);
              }
              --v279;
            }
            while (v279);
          }
          uint64_t v283 = GTTraceFunc_argumentBytesWithMap((void *)a2, v259[72], a1[1]);
          uint64_t v284 = *((void *)v259 + 10);
          if (v284)
          {
            uint64_t v285 = (uint64_t *)v283;
            do
            {
              uint64_t v287 = *v285++;
              uint64_t v286 = v287;
              if (v287) {
                GTResourceTrackerResourceRead(a1, 80, v286, a3);
              }
              --v284;
            }
            while (v284);
          }
          GTResourceTrackerResourceRead(a1, 22, *((void *)v259 + 12), a3);
          int v288 = tracker_resource_get(a1, 22, *((void *)v259 + 12), a3);
          if (v288) {
            v288[4] = a3;
          }
          GTResourceTrackerResourceRead(a1, 22, *((void *)v259 + 13), a3);
          v289 = tracker_resource_get(a1, 22, *((void *)v259 + 13), a3);
          if (v289) {
            v289[4] = a3;
          }
LABEL_312:
          uint64_t v7 = *((void *)v259 + 15);
          goto LABEL_483;
        case -6113:
          long long v159 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerUsingResource(a1[2], 6, *v159, *a1, a1[1]);
          uint64_t v160 = v159[3];
LABEL_314:
          GTResourceTrackerResourceRead(a1, 22, v160, a3);
          uint64_t v7 = v159[4];
          goto LABEL_483;
        case -6112:
          uint64_t v248 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerUsingResource(a1[2], 5, *v248, *a1, a1[1]);
          v290 = tracker_resource_get(a1, 22, v248[3], a3);
          if (v290) {
            v290[4] = a3;
          }
          uint64_t v291 = tracker_resource_get(a1, 22, v248[4], a3);
          if (v291) {
            v291[4] = a3;
          }
          goto LABEL_482;
        case -6108:
          uint64_t v161 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerUsingResource(a1[2], 5, *v161, *a1, a1[1]);
          GTResourceTrackerResourceRead(a1, 22, v161[3], a3);
          uint64_t v162 = v161[5];
LABEL_320:
          GTResourceTrackerResourceRead(a1, 22, v162, a3);
          goto LABEL_321;
        case -6107:
          uint64_t v248 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerUsingResource(a1[2], 6, *v248, *a1, a1[1]);
          uint64_t v249 = v248[3];
LABEL_481:
          GTResourceTrackerResourceRead(a1, 22, v249, a3);
LABEL_482:
          uint64_t v7 = v248[5];
          goto LABEL_483;
        case -6106:
          uint64_t v161 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerUsingResource(a1[2], 5, *v161, *a1, a1[1]);
          uint64_t v292 = tracker_resource_get(a1, 22, v161[3], a3);
          if (v292) {
            v292[4] = a3;
          }
          uint64_t v293 = tracker_resource_get(a1, 22, v161[5], a3);
          if (v293) {
            v293[4] = a3;
          }
LABEL_321:
          uint64_t v7 = v161[6];
          goto LABEL_483;
        case -6105:
        case -6101:
          uint64_t v23 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerUsingResource(a1[2], 10, *v23, *a1, a1[1]);
          GTResourceTrackerResourceRead(a1, 22, v23[11], a3);
          GTResourceTrackerResourceRead(a1, 22, v23[16], a3);
          uint64_t v24 = tracker_resource_get(a1, 22, v23[21], a3);
          if (v24) {
            v24[4] = a3;
          }
          uint64_t v7 = v23[26];
          goto LABEL_483;
        case -6104:
          v294 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerUsingResource(a1[2], 9, *v294, *a1, a1[1]);
          GTResourceTrackerResourceRead(a1, 22, v294[6], a3);
          GTResourceTrackerResourceRead(a1, 22, v294[11], a3);
          GTResourceTrackerResourceRead(a1, 22, v294[16], a3);
          uint64_t v26 = v294[20];
          goto LABEL_247;
        case -6103:
          v295 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerUsingResource(a1[2], 9, *v295, *a1, a1[1]);
          GTResourceTrackerResourceRead(a1, 22, v295[6], a3);
          GTResourceTrackerResourceRead(a1, 22, v295[11], a3);
          GTResourceTrackerResourceRead(a1, 22, v295[16], a3);
          v296 = tracker_resource_get(a1, 22, v295[20], a3);
          if (v296) {
            v296[4] = a3;
          }
          uint64_t v7 = v295[33];
          goto LABEL_483;
        case -6102:
        case -6100:
          unsigned int v80 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v82 = a1[1];
          uint64_t v81 = a1[2];
          uint64_t v83 = *v80;
          uint64_t v84 = *a1;
          int v85 = 14;
          goto LABEL_122;
        case -6099:
        case -6098:
          unsigned int v80 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v82 = a1[1];
          uint64_t v81 = a1[2];
          uint64_t v83 = *v80;
          uint64_t v84 = *a1;
          int v85 = 13;
LABEL_122:
          GTResourceTrackerUsingResource(v81, v85, v83, v84, v82);
          GTResourceTrackerResourceRead(a1, 22, v80[6], a3);
          GTResourceTrackerResourceRead(a1, 22, v80[8], a3);
          GTResourceTrackerResourceRead(a1, 22, v80[10], a3);
          uint64_t v86 = tracker_resource_get(a1, 22, v80[12], a3);
          if (v86) {
            v86[4] = a3;
          }
          uint64_t v7 = v80[15];
          goto LABEL_483;
        case -6097:
          uint64_t v297 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerUsingResource(a1[2], 12, *v297, *a1, a1[1]);
          GTResourceTrackerResourceRead(a1, 22, v297[6], a3);
          GTResourceTrackerResourceRead(a1, 22, v297[8], a3);
          v298 = tracker_resource_get(a1, 22, v297[10], a3);
          if (v298) {
            v298[4] = a3;
          }
          uint64_t v7 = v297[12];
LABEL_483:
          uint64_t v8 = a1;
          int v9 = 22;
LABEL_484:
          GTResourceTrackerResourceRead(v8, v9, v7, a3);
          return;
        default:
          if (v6 == -7157) {
            goto LABEL_119;
          }
          int v40 = -7156;
          goto LABEL_118;
      }
    }
    if (v6 <= -15288)
    {
      if (v6 > -15341)
      {
        switch(v6)
        {
          case -15311:
            goto LABEL_83;
          case -15310:
            v543 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            v544 = tracker_resource_get(a1, 80, *((void *)v543 + 1), a3);
            if (v544) {
              *((unsigned char *)v544 + 48) = 1;
            }
            uint64_t v26 = *((void *)v543 + 1);
            goto LABEL_57;
          case -15309:
          case -15308:
            goto LABEL_135;
          default:
            if (v6 == -15340 || v6 == -15339) {
              goto LABEL_135;
            }
            break;
        }
        return;
      }
      if (v6 == -15366)
      {
        long long v87 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
        GTResourceTrackerResourceRead(a1, 16, *((void *)v87 + 1), a3);
        __int16 v88 = tracker_resource_get(a1, 16, *((void *)v87 + 2), a3);
        if (v88) {
          v88[4] = a3;
        }
        GTResourceTrackerUsingResource(a1[2], 22, *((void *)v87 + 3), *a1, a1[1]);
        unsigned int v89 = v87[48];
LABEL_142:
        long long v99 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, v89, a1[1]);
        GTResourceTrackerUsingAccelerationStructureDescriptor(a1, v99, a3);
        return;
      }
      if (v6 != -15365)
      {
        if (v6 != -15342) {
          return;
        }
LABEL_83:
        id v59 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
        uint64_t v60 = tracker_resource_get(a1, 22, *((void *)v59 + 1), a3);
        if (v60) {
          *((unsigned char *)v60 + 48) = 1;
        }
        uint64_t v26 = *((void *)v59 + 1);
        goto LABEL_247;
      }
LABEL_246:
      float64x2x3_t v227 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
      GTResourceTrackerResourceRead(a1, 16, *((void *)v227 + 1), a3);
      uint64_t v26 = *((void *)v227 + 2);
LABEL_247:
      uint64_t v27 = a1;
      int v28 = 22;
      goto LABEL_248;
    }
    if (v6 <= -15274)
    {
      if (v6 > -15283)
      {
        if (v6 == -15282)
        {
          long long v148 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v149 = a1[2];
          long long v150 = GTTraceFunc_argumentBytesWithMap((void *)a2, v148[24], a1[1]);
          uint64_t v151 = *((void *)v148 + 2);
          if (v151)
          {
            long long v152 = (uint64_t *)v150;
            uint64_t v154 = *a1;
            uint64_t v153 = a1[1];
            do
            {
              uint64_t v156 = *v152++;
              uint64_t v155 = v156;
              if (v156) {
                GTResourceTrackerUsingResource(v149, 22, v155, v154, v153);
              }
              --v151;
            }
            while (v151);
          }
          return;
        }
        int v61 = -15275;
      }
      else
      {
        if (v6 == -15287) {
          goto LABEL_246;
        }
        int v61 = -15284;
      }
      if (v6 != v61) {
        return;
      }
LABEL_110:
      long long v75 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
      uint64_t v18 = a1[1];
      uint64_t v19 = *((void *)v75 + 1);
      uint64_t v20 = *a1;
      uint64_t v21 = a1[2];
      int v22 = 22;
    }
    else
    {
      if (v6 <= -15254)
      {
        if (v6 == -15273)
        {
          unint64_t v139 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v140 = a1[2];
          long long v141 = GTTraceFunc_argumentBytesWithMap((void *)a2, v139[24], a1[1]);
          uint64_t v142 = *((void *)v139 + 2);
          if (v142)
          {
            long long v143 = (uint64_t *)v141;
            uint64_t v145 = *a1;
            uint64_t v144 = a1[1];
            do
            {
              uint64_t v147 = *v143++;
              uint64_t v146 = v147;
              if (v147) {
                GTResourceTrackerUsingResource(v140, 22, v146, v145, v144);
              }
              --v142;
            }
            while (v142);
          }
        }
        else if (v6 == -15254)
        {
          uint64_t v74 = *((void *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]) + 1);
          GTResourceTrackerUsingResidencySet(a1, v74);
        }
        return;
      }
      if (v6 == -15253)
      {
        long long v133 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
        long long v134 = GTTraceFunc_argumentBytesWithMap((void *)a2, v133[16], a1[1]);
        uint64_t v135 = *((void *)v133 + 1);
        if (v135)
        {
          id v136 = (uint64_t *)v134;
          do
          {
            uint64_t v138 = *v136++;
            uint64_t v137 = v138;
            if (v138) {
              GTResourceTrackerUsingResidencySet(a1, v137);
            }
            --v135;
          }
          while (v135);
        }
        return;
      }
      if (v6 == -15217)
      {
LABEL_135:
        long long v93 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
        uint64_t v94 = a1[2];
        int v22 = GTResourceTrackerGetResourceType(*((void *)v93 + 1), *a1);
        uint64_t v19 = *((void *)v93 + 1);
        uint64_t v20 = *a1;
        uint64_t v18 = a1[1];
        uint64_t v21 = v94;
      }
      else
      {
        int v40 = -7158;
LABEL_118:
        if (v6 != v40) {
          return;
        }
LABEL_119:
        uint64_t v78 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
        uint64_t v79 = a1[2];
        uint64_t v19 = *(void *)v78;
LABEL_426:
        uint64_t v20 = *a1;
        uint64_t v18 = a1[1];
        uint64_t v21 = v79;
        int v22 = 2;
      }
    }
LABEL_427:
    GTResourceTrackerUsingResource(v21, v22, v19, v20, v18);
    return;
  }
  if (v6 <= -16157)
  {
    if (v6 <= -16359)
    {
      switch(v6)
      {
        case -20480:
        case -20473:
        case -20471:
        case -20470:
        case -20464:
        case -20456:
          goto LABEL_72;
        case -20479:
        case -20469:
          goto LABEL_59;
        case -20478:
        case -20477:
        case -20475:
        case -20472:
        case -20468:
        case -20467:
        case -20466:
        case -20465:
        case -20463:
        case -20462:
        case -20460:
        case -20459:
        case -20458:
          return;
        case -20476:
        case -20461:
          goto LABEL_56;
        case -20474:
          id v29 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v18 = a1[1];
          uint64_t v19 = *(void *)v29;
          uint64_t v20 = *a1;
          uint64_t v21 = a1[2];
          int v22 = 39;
          goto LABEL_427;
        case -20457:
          long long v92 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v18 = a1[1];
          uint64_t v19 = *(void *)v92;
          uint64_t v20 = *a1;
          uint64_t v21 = a1[2];
          int v22 = 40;
          goto LABEL_427;
        default:
          switch(v6)
          {
            case -16382:
LABEL_45:
              uint64_t v33 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              uint64_t v34 = v33[1];
              goto LABEL_277;
            case -16381:
LABEL_100:
              long long v69 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              uint64_t v70 = v69[1];
              long long v71 = a1;
              int v72 = 22;
              goto LABEL_291;
            case -16380:
LABEL_101:
              long long v73 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              GTResourceTrackerResourceRead(a1, 80, *((void *)v73 + 1), a3);
LABEL_190:
              uint64_t v26 = *((void *)v73 + 10);
              goto LABEL_247;
            case -16379:
              goto LABEL_56;
            case -16378:
              goto LABEL_99;
            case -16377:
              goto LABEL_47;
            default:
              int v91 = -16359;
LABEL_424:
              if (v6 != v91) {
                return;
              }
LABEL_425:
              v431 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              uint64_t v79 = a1[2];
              uint64_t v19 = *((void *)v431 + 1);
              break;
          }
          goto LABEL_426;
      }
    }
    else
    {
      switch(v6)
      {
        case -16279:
          id v17 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v18 = a1[1];
          uint64_t v19 = *((void *)v17 + 1);
          uint64_t v20 = *a1;
          uint64_t v21 = a1[2];
          int v22 = 71;
          goto LABEL_427;
        case -16278:
        case -16263:
          goto LABEL_110;
        case -16277:
          v432 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v433 = a1[2];
          v434 = GTTraceFunc_argumentBytesWithMap((void *)a2, v432[24], a1[1]);
          uint64_t v435 = *((void *)v432 + 2);
          if (v435)
          {
            v436 = (uint64_t *)v434;
            uint64_t v438 = *a1;
            uint64_t v437 = a1[1];
            do
            {
              uint64_t v440 = *v436++;
              uint64_t v439 = v440;
              if (v440) {
                GTResourceTrackerUsingResource(v433, 22, v439, v438, v437);
              }
              --v435;
            }
            while (v435);
          }
          break;
        case -16276:
        case -16261:
          goto LABEL_70;
        case -16275:
          v441 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v442 = a1[2];
          v443 = GTTraceFunc_argumentBytesWithMap((void *)a2, v441[24], a1[1]);
          uint64_t v444 = *((void *)v441 + 2);
          if (v444)
          {
            v445 = (uint64_t *)v443;
            uint64_t v447 = *a1;
            uint64_t v446 = a1[1];
            do
            {
              uint64_t v449 = *v445++;
              uint64_t v448 = v449;
              if (v449) {
                GTResourceTrackerUsingResource(v442, 80, v448, v447, v446);
              }
              --v444;
            }
            while (v444);
          }
          break;
        case -16274:
        case -16272:
        case -16259:
        case -16257:
          goto LABEL_61;
        case -16273:
          v450 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v451 = a1[2];
          v452 = GTTraceFunc_argumentBytesWithMap((void *)a2, v450[24], a1[1]);
          uint64_t v453 = *((void *)v450 + 2);
          if (v453)
          {
            v454 = (uint64_t *)v452;
            uint64_t v456 = *a1;
            uint64_t v455 = a1[1];
            do
            {
              uint64_t v458 = *v454++;
              uint64_t v457 = v458;
              if (v458) {
                GTResourceTrackerUsingResource(v451, 75, v457, v456, v455);
              }
              --v453;
            }
            while (v453);
          }
          break;
        case -16271:
          v459 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v460 = a1[2];
          v461 = GTTraceFunc_argumentBytesWithMap((void *)a2, v459[24], a1[1]);
          uint64_t v462 = *((void *)v459 + 2);
          if (v462)
          {
            v463 = (uint64_t *)v461;
            uint64_t v465 = *a1;
            uint64_t v464 = a1[1];
            do
            {
              uint64_t v467 = *v463++;
              uint64_t v466 = v467;
              if (v467) {
                GTResourceTrackerUsingResource(v460, 75, v466, v465, v464);
              }
              --v462;
            }
            while (v462);
          }
          break;
        case -16270:
        case -16269:
        case -16268:
        case -16267:
        case -16266:
        case -16265:
        case -16264:
        case -16255:
        case -16253:
        case -16252:
        case -16251:
        case -16250:
        case -16247:
        case -16246:
        case -16245:
        case -16244:
        case -16243:
        case -16242:
        case -16241:
        case -16240:
        case -16239:
        case -16238:
        case -16237:
        case -16236:
        case -16235:
        case -16234:
        case -16233:
        case -16232:
        case -16231:
        case -16230:
        case -16229:
        case -16228:
        case -16227:
        case -16226:
        case -16225:
        case -16224:
        case -16223:
        case -16222:
        case -16221:
        case -16219:
        case -16218:
          return;
        case -16262:
          v468 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v469 = a1[2];
          v470 = GTTraceFunc_argumentBytesWithMap((void *)a2, v468[24], a1[1]);
          uint64_t v471 = *((void *)v468 + 2);
          if (v471)
          {
            v472 = (uint64_t *)v470;
            uint64_t v474 = *a1;
            uint64_t v473 = a1[1];
            do
            {
              uint64_t v476 = *v472++;
              uint64_t v475 = v476;
              if (v476) {
                GTResourceTrackerUsingResource(v469, 22, v475, v474, v473);
              }
              --v471;
            }
            while (v471);
          }
          break;
        case -16260:
          v477 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v478 = a1[2];
          v479 = GTTraceFunc_argumentBytesWithMap((void *)a2, v477[24], a1[1]);
          uint64_t v480 = *((void *)v477 + 2);
          if (v480)
          {
            v481 = (uint64_t *)v479;
            uint64_t v483 = *a1;
            uint64_t v482 = a1[1];
            do
            {
              uint64_t v485 = *v481++;
              uint64_t v484 = v485;
              if (v485) {
                GTResourceTrackerUsingResource(v478, 80, v484, v483, v482);
              }
              --v480;
            }
            while (v480);
          }
          break;
        case -16258:
          v486 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v487 = a1[2];
          v488 = GTTraceFunc_argumentBytesWithMap((void *)a2, v486[24], a1[1]);
          uint64_t v489 = *((void *)v486 + 2);
          if (v489)
          {
            v490 = (uint64_t *)v488;
            uint64_t v492 = *a1;
            uint64_t v491 = a1[1];
            do
            {
              uint64_t v494 = *v490++;
              uint64_t v493 = v494;
              if (v494) {
                GTResourceTrackerUsingResource(v487, 75, v493, v492, v491);
              }
              --v489;
            }
            while (v489);
          }
          break;
        case -16256:
          v495 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v496 = a1[2];
          v497 = GTTraceFunc_argumentBytesWithMap((void *)a2, v495[24], a1[1]);
          uint64_t v498 = *((void *)v495 + 2);
          if (v498)
          {
            v499 = (uint64_t *)v497;
            uint64_t v501 = *a1;
            uint64_t v500 = a1[1];
            do
            {
              uint64_t v503 = *v499++;
              uint64_t v502 = v503;
              if (v503) {
                GTResourceTrackerUsingResource(v496, 75, v502, v501, v500);
              }
              --v498;
            }
            while (v498);
          }
          break;
        case -16254:
          v504 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v18 = a1[1];
          uint64_t v19 = *((void *)v504 + 1);
          uint64_t v20 = *a1;
          uint64_t v21 = a1[2];
          int v22 = 34;
          goto LABEL_427;
        case -16249:
        case -16248:
        case -16217:
LABEL_30:
          uint64_t v7 = *((void *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]) + 4);
          goto LABEL_483;
        case -16220:
          goto LABEL_226;
        case -16216:
          uint64_t v7 = *((void *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]) + 2);
          goto LABEL_483;
        case -16215:
          uint64_t v248 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v249 = v248[3];
          goto LABEL_481;
        case -16214:
          v505 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerUsingResource(a1[2], 80, *((void *)v505 + 1), *a1, a1[1]);
          uint64_t v18 = a1[1];
          uint64_t v21 = a1[2];
          uint64_t v19 = *((void *)v505 + 3);
          uint64_t v20 = *a1;
          goto LABEL_62;
        case -16213:
          goto LABEL_135;
        case -16212:
          goto LABEL_56;
        case -16211:
          goto LABEL_45;
        case -16210:
          goto LABEL_100;
        case -16209:
          goto LABEL_101;
        default:
          switch(v6)
          {
            case -16337:
              v506 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              uint64_t v18 = a1[1];
              uint64_t v19 = *((void *)v506 + 1);
              uint64_t v20 = *a1;
              uint64_t v21 = a1[2];
              int v22 = 29;
              goto LABEL_427;
            case -16336:
              goto LABEL_110;
            case -16335:
              v507 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              uint64_t v508 = a1[2];
              v509 = GTTraceFunc_argumentBytesWithMap((void *)a2, v507[24], a1[1]);
              uint64_t v510 = *((void *)v507 + 2);
              if (v510)
              {
                v511 = (uint64_t *)v509;
                uint64_t v513 = *a1;
                uint64_t v512 = a1[1];
                do
                {
                  uint64_t v515 = *v511++;
                  uint64_t v514 = v515;
                  if (v515) {
                    GTResourceTrackerUsingResource(v508, 22, v514, v513, v512);
                  }
                  --v510;
                }
                while (v510);
              }
              break;
            case -16334:
              goto LABEL_70;
            case -16333:
              v516 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              uint64_t v517 = a1[2];
              v518 = GTTraceFunc_argumentBytesWithMap((void *)a2, v516[24], a1[1]);
              uint64_t v519 = *((void *)v516 + 2);
              if (v519)
              {
                v520 = (uint64_t *)v518;
                uint64_t v522 = *a1;
                uint64_t v521 = a1[1];
                do
                {
                  uint64_t v524 = *v520++;
                  uint64_t v523 = v524;
                  if (v524) {
                    GTResourceTrackerUsingResource(v517, 80, v523, v522, v521);
                  }
                  --v519;
                }
                while (v519);
              }
              break;
            case -16332:
            case -16330:
              goto LABEL_61;
            case -16331:
              v525 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              uint64_t v526 = a1[2];
              v527 = GTTraceFunc_argumentBytesWithMap((void *)a2, v525[24], a1[1]);
              uint64_t v528 = *((void *)v525 + 2);
              if (v528)
              {
                v529 = (uint64_t *)v527;
                uint64_t v531 = *a1;
                uint64_t v530 = a1[1];
                do
                {
                  uint64_t v533 = *v529++;
                  uint64_t v532 = v533;
                  if (v533) {
                    GTResourceTrackerUsingResource(v526, 75, v532, v531, v530);
                  }
                  --v528;
                }
                while (v528);
              }
              break;
            case -16329:
              v534 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              uint64_t v535 = a1[2];
              v536 = GTTraceFunc_argumentBytesWithMap((void *)a2, v534[24], a1[1]);
              uint64_t v537 = *((void *)v534 + 2);
              if (v537)
              {
                v538 = (uint64_t *)v536;
                uint64_t v540 = *a1;
                uint64_t v539 = a1[1];
                do
                {
                  uint64_t v542 = *v538++;
                  uint64_t v541 = v542;
                  if (v542) {
                    GTResourceTrackerUsingResource(v535, 75, v541, v540, v539);
                  }
                  --v537;
                }
                while (v537);
              }
              break;
            default:
              int v91 = -16358;
              goto LABEL_424;
          }
          break;
      }
    }
  }
  else
  {
    if (v6 > -16009)
    {
      if (v6 <= -15899)
      {
        switch(v6)
        {
          case -15977:
            long long v73 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            long long v157 = tracker_resource_get(a1, 80, *((void *)v73 + 1), a3);
            if (v157) {
              v157[4] = a3;
            }
            goto LABEL_190;
          case -15976:
            goto LABEL_56;
          case -15975:
          case -15974:
          case -15973:
          case -15972:
          case -15971:
          case -15970:
          case -15969:
          case -15968:
          case -15965:
            return;
          case -15967:
            goto LABEL_135;
          case -15966:
            goto LABEL_90;
          case -15964:
          case -15962:
            uint64_t v7 = *((void *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]) + 1);
            uint64_t v8 = a1;
            int v9 = 57;
            goto LABEL_484;
          case -15963:
          case -15961:
            int8x16_t v76 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            GTResourceTrackerResourceRead(a1, 57, *((void *)v76 + 1), a3);
            goto LABEL_130;
          case -15960:
          case -15958:
            uint64_t v26 = *((void *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]) + 1);
            goto LABEL_192;
          case -15959:
            uint64_t v158 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            GTResourceTrackerResourceRead(a1, 57, *((void *)v158 + 1), a3);
            uint64_t v26 = *((void *)v158 + 4);
LABEL_192:
            uint64_t v27 = a1;
            int v28 = 57;
            goto LABEL_248;
          default:
            switch(v6)
            {
              case -16008:
                long long v174 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
                unsigned int v175 = v174[16];
                goto LABEL_207;
              case -16003:
                long long v174 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
                unsigned int v175 = v174[32];
LABEL_207:
                uint64_t v176 = a1[2];
                int v177 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, v175, a1[1]);
                uint64_t v178 = *((void *)v174 + 1);
                uint64_t v179 = *a1;
                uint64_t v180 = a1[1];
                GTResourceTrackerUsingResourceArray(v176, 0, v177, v178, v179, v180);
                break;
              case -15995:
              case -15994:
              case -15993:
              case -15992:
                goto LABEL_56;
              case -15991:
              case -15990:
                goto LABEL_135;
              default:
                return;
            }
            return;
        }
      }
      if (v6 > -15822)
      {
        switch(v6)
        {
          case -15792:
            uint64_t v30 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            GTResourceTrackerResourceRead(a1, 80, *((void *)v30 + 1), a3);
            goto LABEL_169;
          case -15791:
          case -15790:
          case -15789:
          case -15788:
          case -15787:
          case -15786:
            return;
          case -15785:
          case -15781:
            goto LABEL_59;
          case -15784:
            uint64_t v163 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            GTResourceTrackerResourceRead(a1, 80, *((void *)v163 + 1), a3);
            uint64_t v7 = *((void *)v163 + 3);
            goto LABEL_483;
          case -15783:
          case -15782:
            goto LABEL_72;
          default:
            switch(v6)
            {
              case -15821:
                goto LABEL_90;
              case -15820:
                v229 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
                unsigned int v230 = GTTraceFunc_argumentBytesWithMap((void *)a2, v229[24], a1[1]);
                uint64_t v231 = *((void *)v229 + 1);
                if (v231)
                {
                  uint64_t v232 = (uint64_t *)v230;
                  do
                  {
                    uint64_t v233 = *v232++;
                    GTResourceTrackerUsingResourceHeap(a1, v233, a3);
                    --v231;
                  }
                  while (v231);
                }
                break;
              case -15819:
                goto LABEL_93;
              case -15818:
                id v31 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
                unsigned int v32 = v31[32];
                goto LABEL_256;
              default:
                return;
            }
            break;
        }
        return;
      }
      switch(v6)
      {
        case -15898:
          unint64_t v181 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v182 = a1[2];
          double v183 = GTTraceFunc_argumentBytesWithMap((void *)a2, v181[16], a1[1]);
          uint64_t v184 = *((void *)v181 + 1);
          if (v184)
          {
            v185 = (uint64_t *)v183;
            uint64_t v187 = *a1;
            uint64_t v186 = a1[1];
            do
            {
              uint64_t v189 = *v185++;
              uint64_t v188 = v189;
              if (v189) {
                GTResourceTrackerUsingResource(v182, 73, v188, v187, v186);
              }
              --v184;
            }
            while (v184);
          }
          return;
        case -15897:
          v190 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v191 = a1[2];
          __int16 v192 = GTTraceFunc_argumentBytesWithMap((void *)a2, v190[16], a1[1]);
          uint64_t v193 = *((void *)v190 + 1);
          if (v193)
          {
            v194 = (uint64_t *)v192;
            uint64_t v196 = *a1;
            uint64_t v195 = a1[1];
            do
            {
              uint64_t v198 = *v194++;
              uint64_t v197 = v198;
              if (v198) {
                GTResourceTrackerUsingResource(v191, 73, v197, v196, v195);
              }
              --v193;
            }
            while (v193);
          }
          return;
        case -15896:
        case -15895:
        case -15894:
        case -15893:
        case -15892:
        case -15891:
        case -15890:
        case -15889:
          return;
        case -15888:
          long long v199 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v18 = a1[1];
          uint64_t v19 = *((void *)v199 + 1);
          uint64_t v20 = *a1;
          uint64_t v21 = a1[2];
          int v22 = 64;
          goto LABEL_427;
        case -15887:
          uint64_t v35 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerResourceRead(a1, 80, v35[1], a3);
          uint64_t v36 = v35[2];
          uint64_t v37 = a1;
          int v38 = 80;
          goto LABEL_224;
        case -15886:
        case -15885:
          goto LABEL_59;
        default:
          if (v6 == -15878)
          {
            unsigned int v237 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            GTResourceTrackerResourceRead(a1, 80, *((void *)v237 + 1), a3);
            uint64_t v26 = *((void *)v237 + 4);
          }
          else
          {
            if (v6 != -15877) {
              return;
            }
            uint64_t v77 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
            GTResourceTrackerResourceRead(a1, 80, *((void *)v77 + 1), a3);
            uint64_t v26 = *((void *)v77 + 2);
          }
          break;
      }
LABEL_57:
      uint64_t v27 = a1;
      int v28 = 80;
LABEL_248:
      v228 = tracker_resource_get(v27, v28, v26, a3);
      if (v228) {
        v228[4] = a3;
      }
      return;
    }
    if (v6 > -16088)
    {
      switch(v6)
      {
        case -16047:
        case -16043:
          goto LABEL_93;
        case -16046:
        case -16042:
          goto LABEL_43;
        case -16045:
        case -16041:
          goto LABEL_90;
        case -16044:
          int64x2_t v164 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v165 = GTTraceFunc_argumentBytesWithMap((void *)a2, v164[16], a1[1]);
          uint64_t v166 = *((void *)v164 + 1);
          if (v166)
          {
            v167 = (uint64_t *)v165;
            do
            {
              uint64_t v168 = *v167++;
              GTResourceTrackerUsingResourceHeap(a1, v168, a3);
              --v166;
            }
            while (v166);
          }
          break;
        case -16040:
          BOOL v169 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          BOOL v170 = GTTraceFunc_argumentBytesWithMap((void *)a2, v169[16], a1[1]);
          uint64_t v171 = *((void *)v169 + 1);
          if (v171)
          {
            long long v172 = (uint64_t *)v170;
            do
            {
              uint64_t v173 = *v172++;
              GTResourceTrackerUsingResourceHeap(a1, v173, a3);
              --v171;
            }
            while (v171);
          }
          break;
        default:
          switch(v6)
          {
            case -16087:
              __int16 v43 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              uint64_t v44 = a1[2];
              uint64_t v45 = GTTraceFunc_argumentBytesWithMap((void *)a2, v43[24], a1[1]);
              uint64_t v46 = *((void *)v43 + 2);
              if (v46)
              {
                uint64_t v47 = (uint64_t *)v45;
                uint64_t v49 = *a1;
                uint64_t v48 = a1[1];
                do
                {
                  uint64_t v51 = *v47++;
                  uint64_t v50 = v51;
                  if (v51) {
                    GTResourceTrackerUsingResource(v44, 22, v50, v49, v48);
                  }
                  --v46;
                }
                while (v46);
              }
              break;
            case -16086:
              long long v200 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              uint64_t v201 = a1[2];
              long long v202 = GTTraceFunc_argumentBytesWithMap((void *)a2, v200[24], a1[1]);
              uint64_t v203 = *((void *)v200 + 2);
              if (v203)
              {
                long long v204 = (uint64_t *)v202;
                uint64_t v206 = *a1;
                uint64_t v205 = a1[1];
                do
                {
                  uint64_t v208 = *v204++;
                  uint64_t v207 = v208;
                  if (v208) {
                    GTResourceTrackerUsingResource(v201, 80, v207, v206, v205);
                  }
                  --v203;
                }
                while (v203);
              }
              break;
            case -16085:
              long long v209 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              uint64_t v210 = a1[2];
              long long v211 = GTTraceFunc_argumentBytesWithMap((void *)a2, v209[24], a1[1]);
              uint64_t v212 = *((void *)v209 + 2);
              if (v212)
              {
                long long v213 = (uint64_t *)v211;
                uint64_t v215 = *a1;
                uint64_t v214 = a1[1];
                do
                {
                  uint64_t v217 = *v213++;
                  uint64_t v216 = v217;
                  if (v217) {
                    GTResourceTrackerUsingResource(v210, 75, v216, v215, v214);
                  }
                  --v212;
                }
                while (v212);
              }
              break;
            case -16084:
              long long v218 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
              uint64_t v219 = a1[2];
              long long v220 = GTTraceFunc_argumentBytesWithMap((void *)a2, v218[24], a1[1]);
              uint64_t v221 = *((void *)v218 + 2);
              if (v221)
              {
                long long v222 = (uint64_t *)v220;
                uint64_t v224 = *a1;
                uint64_t v223 = a1[1];
                do
                {
                  uint64_t v226 = *v222++;
                  uint64_t v225 = v226;
                  if (v226) {
                    GTResourceTrackerUsingResource(v219, 75, v225, v224, v223);
                  }
                  --v221;
                }
                while (v221);
              }
              break;
            case -16083:
            case -16082:
            case -16081:
            case -16080:
              return;
            case -16079:
              goto LABEL_226;
            default:
              if (v6 == -16017) {
                goto LABEL_226;
              }
              break;
          }
          break;
      }
    }
    else
    {
      switch(v6)
      {
        case -16156:
        case -16155:
          goto LABEL_72;
        case -16148:
          goto LABEL_226;
        case -16147:
          goto LABEL_30;
        case -16146:
          long long v159 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v160 = v159[2];
          goto LABEL_314;
        case -16145:
          uint64_t v161 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          uint64_t v162 = v161[4];
          goto LABEL_320;
        case -16144:
          uint64_t v161 = (uint64_t *)GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), a1[1]);
          GTResourceTrackerResourceRead(a1, 22, v161[2], a3);
          uint64_t v162 = v161[4];
          goto LABEL_320;
        case -16142:
          goto LABEL_110;
        case -16140:
          goto LABEL_70;
        case -16139:
        case -16138:
          goto LABEL_61;
        case -16133:
          goto LABEL_425;
        case -16131:
        case -16130:
        case -16129:
        case -16126:
        case -16125:
        case -16124:
          goto LABEL_59;
        default:
          return;
      }
    }
  }
}

uint64_t *GTResourceTrackerProcessIndirectCommandResourceUse(uint64_t *result, uint64_t a2)
{
  unsigned int v2 = result;
  int v3 = *(_DWORD *)(a2 + 8);
  if (v3 <= -15935)
  {
    switch(v3)
    {
      case -15956:
        BOOL v4 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), result[1]);
        size_t result = find_entry(v2[2], v4, 8uLL, 0);
        if (!*result || !*(void *)(*result + 32)) {
          return result;
        }
        uint64_t v6 = v2[1];
        uint64_t v5 = v2[2];
        uint64_t v7 = *((void *)v4 + 1);
        uint64_t v8 = *v2;
        int v9 = 71;
        goto LABEL_27;
      case -15955:
      case -15954:
        goto LABEL_9;
      case -15952:
        uint64_t v12 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), result[1]);
        size_t result = find_entry(v2[2], v12, 8uLL, 0);
        if (!*result || !*(void *)(*result + 32)) {
          return result;
        }
        GTResourceTrackerUsingResource(v2[2], 22, *((void *)v12 + 4), *v2, v2[1]);
        uint64_t v5 = v2[2];
        uint64_t v7 = *((void *)v12 + 8);
        goto LABEL_26;
      case -15950:
        id v13 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), result[1]);
        size_t result = find_entry(v2[2], v13, 8uLL, 0);
        if (!*result || !*(void *)(*result + 32)) {
          return result;
        }
        GTResourceTrackerUsingResource(v2[2], 22, *((void *)v13 + 4), *v2, v2[1]);
        GTResourceTrackerUsingResource(v2[2], 22, *((void *)v13 + 6), *v2, v2[1]);
        uint64_t v5 = v2[2];
        uint64_t v7 = *((void *)v13 + 10);
        goto LABEL_26;
      case -15948:
        unsigned int v14 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), result[1]);
        size_t result = find_entry(v2[2], v14, 8uLL, 0);
        if (!*result || !*(void *)(*result + 32)) {
          return result;
        }
        uint64_t v5 = v2[2];
        uint64_t v7 = *((void *)v14 + 4);
        goto LABEL_26;
      default:
        return result;
    }
  }
  if (v3 > -15923)
  {
    if (v3 == -15922)
    {
      uint64_t v16 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), result[1]);
      size_t result = find_entry(v2[2], v16, 8uLL, 0);
      if (!*result || !*(void *)(*result + 32)) {
        return result;
      }
      uint64_t v6 = v2[1];
      uint64_t v5 = v2[2];
      uint64_t v7 = *((void *)v16 + 1);
      uint64_t v8 = *v2;
      int v9 = 59;
    }
    else
    {
      if (v3 != -15921) {
        return result;
      }
      uint64_t v11 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), result[1]);
      size_t result = find_entry(v2[2], v11, 8uLL, 0);
      if (!*result || !*(void *)(*result + 32)) {
        return result;
      }
      uint64_t v6 = v2[1];
      uint64_t v5 = v2[2];
      uint64_t v7 = *((void *)v11 + 1);
      uint64_t v8 = *v2;
      int v9 = 58;
    }
    goto LABEL_27;
  }
  if (v3 == -15934)
  {
    uint64_t v15 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), result[1]);
    size_t result = find_entry(v2[2], v15, 8uLL, 0);
    if (!*result || !*(void *)(*result + 32)) {
      return result;
    }
    uint64_t v6 = v2[1];
    uint64_t v5 = v2[2];
    uint64_t v7 = *((void *)v15 + 1);
    uint64_t v8 = *v2;
    int v9 = 29;
    goto LABEL_27;
  }
  if (v3 != -15933) {
    return result;
  }
LABEL_9:
  uint64_t v10 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), result[1]);
  size_t result = find_entry(v2[2], v10, 8uLL, 0);
  if (*result && *(void *)(*result + 32))
  {
    uint64_t v5 = v2[2];
    uint64_t v7 = *((void *)v10 + 1);
LABEL_26:
    uint64_t v8 = *v2;
    uint64_t v6 = v2[1];
    int v9 = 22;
LABEL_27:
    return (uint64_t *)GTResourceTrackerUsingResource(v5, v9, v7, v8, v6);
  }
  return result;
}

uint64_t catch_mach_exception_raise(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5 = *(void *)(a5 + 8);
  pthread_mutex_lock(&tracingMutex);
  uint64_t v6 = *(int *)(tracingRegions + 12);
  if (v6)
  {
    uint64_t v7 = 0;
    uint64_t v8 = (void *)(*(void *)(tracingRegions + 24) + 8);
    while (1)
    {
      unint64_t v9 = *(v8 - 1);
      if (v9 <= v5 && *v8 + v9 > v5) {
        break;
      }
      ++v7;
      v8 += 3;
      if (v6 == v7) {
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  if (v7 == v6)
  {
LABEL_9:
    pthread_mutex_unlock(&tracingMutex);
    if (!oldArraySize) {
      return 5;
    }
    task_set_exception_ports(mach_task_self_, oldExcMasks, oldExcPorts, oldBehaviors, oldFlavors);
  }
  else
  {
    uint64_t v10 = *(void *)(tracingRegions + 24) + 24 * v7;
    long long v19 = *(_OWORD *)v10;
    uint64_t v20 = *(void *)(v10 + 16);
    if ((qword_2501C8 & 0x2000) != 0)
    {
      vm_size_t v11 = (v5 - (unint64_t)v19) / vm_page_size;
      uint64_t v13 = *(void *)(*find_entry(tracedChunks, &v20, 8uLL, 0) + 32) + 8 * (v11 >> 6);
      *(void *)(v13 + 8) |= 1 << v11;
    }
    else
    {
      vm_size_t v11 = 0;
    }
    if (v20)
    {
      unsigned int v14 = (atomic_ullong *)(v20 + 56);
      unint64_t v15 = atomic_load((unint64_t *)(v20 + 56));
      unint64_t v16 = v15;
      do
      {
        atomic_compare_exchange_strong(v14, &v16, v15 | 8);
        BOOL v17 = v16 == v15;
        unint64_t v15 = v16;
      }
      while (!v17);
    }
    if ((qword_2501C8 & 0x2000) != 0) {
      vm_size_t v18 = vm_page_size;
    }
    else {
      vm_size_t v18 = *((void *)&v19 + 1);
    }
    mprotect((void *)(v19 + vm_page_size * v11), v18, 3);
    pthread_mutex_unlock(&tracingMutex);
  }
  return 0;
}

uint64_t catch_mach_exception_raise_state()
{
  return 46;
}

uint64_t catch_mach_exception_raise_state_identity()
{
  return 46;
}

BOOL ChangeProtection(void *a1, size_t a2, int a3)
{
  return mprotect(a1, a2, a3) != -1;
}

unint64_t GTMemoryGuard_registerRegion(unint64_t result, vm_size_t a2, uint64_t a3, int a4)
{
  unint64_t v5 = result;
  uint64_t v27 = a3;
  if (a3)
  {
    char v6 = atomic_load((unint64_t *)(a3 + 56));
    if ((v6 & 8) != 0) {
      return result;
    }
  }
  if (a4)
  {
    pthread_mutex_lock(&tracingMutex);
    if (!tracingPool)
    {
      return pthread_mutex_unlock(&tracingMutex);
    }
    uint64_t v7 = *find_entry(tracedChunks, &v27, 8uLL, 0);
    if (!v7) {
      return pthread_mutex_unlock(&tracingMutex);
    }
    uint64_t v8 = *(void *)(v7 + 32);
    size_t result = pthread_mutex_unlock(&tracingMutex);
    if (!v8) {
      return result;
    }
  }
  if ((vm_page_mask & v5) == 0 && vm_page_size <= a2)
  {
    pthread_once(&GTMemoryGuard_initialize_onceGuard, (void (*)(void))InitializeMemoryGuardOnce);
    pthread_mutex_lock(&tracingMutex);
    uint64_t v14 = *(int *)(tracingRegions + 12);
    if (v14)
    {
      unint64_t v15 = (void *)(*(void *)(tracingRegions + 24) + 16);
      while (*v15 != v27)
      {
        v15 += 3;
        if (!--v14) {
          goto LABEL_21;
        }
      }
      goto LABEL_31;
    }
LABEL_21:
    unint64_t v16 = apr_array_push((apr_array_header_t *)tracingRegions);
    uint64_t v17 = v27;
    void *v16 = v5;
    v16[1] = a2;
    v16[2] = v17;
    uint64_t v18 = tracedChunks;
    if ((qword_2501C8 & 0x2000) != 0)
    {
      entry = find_entry(tracedChunks, &v27, 8uLL, 0);
      if (*entry)
      {
        uint64_t v23 = *(void **)(*entry + 32);
        if (v23)
        {
          bzero(v23 + 1, 8 * *v23);
LABEL_31:
          mprotect((void *)v5, a2, 1);
          return pthread_mutex_unlock(&tracingMutex);
        }
      }
      vm_size_t v24 = (a2 + (vm_page_size << 6) - 1) / (vm_page_size << 6);
      uint64_t v25 = malloc_type_calloc(1uLL, 8 * v24 + 8, 0x50AD1218uLL);
      *uint64_t v25 = v24;
      uint64_t v26 = tracedChunks;
      long long v19 = apr_palloc((apr_pool_t *)tracingPool, 8uLL);
      *long long v19 = v27;
      uint64_t v20 = (apr_hash_t *)v26;
      uint64_t v21 = v25;
    }
    else
    {
      long long v19 = apr_palloc((apr_pool_t *)tracingPool, 8uLL);
      *long long v19 = v27;
      uint64_t v20 = (apr_hash_t *)v18;
      uint64_t v21 = &dword_8;
    }
    apr_hash_set(v20, v19, 8, v21);
    goto LABEL_31;
  }
  if (v27)
  {
    uint64_t v10 = (atomic_ullong *)(v27 + 56);
    unint64_t v11 = atomic_load((unint64_t *)(v27 + 56));
    unint64_t v12 = v11;
    do
    {
      atomic_compare_exchange_strong(v10, &v12, v11 | 8);
      BOOL v13 = v12 == v11;
      unint64_t v11 = v12;
    }
    while (!v13);
  }
  return result;
}

apr_hash_t *InitializeMemoryGuardOnce()
{
  mach_port_t v0 = mach_task_self_;
  mach_port_allocate(mach_task_self_, 1u, (mach_port_name_t *)&exceptionPort);
  mach_port_insert_right(v0, exceptionPort, exceptionPort, 0x14u);
  task_swap_exception_ports(v0, 2u, exceptionPort, -2147483647, 6, (exception_mask_array_t)&oldExcMasks, (mach_msg_type_number_t *)&oldArraySize, (exception_handler_array_t)&oldExcPorts, &oldBehaviors, &oldFlavors);
  pthread_t v2 = 0;
  pthread_create(&v2, 0, (void *(__cdecl *)(void *))MachServer, 0);
  pthread_detach(v2);
  apr_pool_create_ex((apr_pool_t **)&tracingPool, 0, 0, 0);
  tracingRegions = (uint64_t)apr_array_make((apr_pool_t *)tracingPool, 1024, 24);
  size_t result = apr_hash_make((apr_pool_t *)tracingPool);
  tracedChunks = (uint64_t)result;
  return result;
}

uint64_t MachServer()
{
  return 0;
}

uint64_t GTMemoryGuard_unregisterRegion(uint64_t a1)
{
  uint64_t key = a1;
  pthread_mutex_lock(&tracingMutex);
  uint64_t v2 = tracingRegions;
  if (tracingRegions)
  {
    int v3 = *(_DWORD *)(tracingRegions + 12);
    unint64_t v4 = 0;
    if (v3)
    {
      unint64_t v5 = (void *)(*(void *)(tracingRegions + 24) + 16);
      while (*v5 != a1)
      {
        ++v4;
        v5 += 3;
        if (v3 == v4) {
          goto LABEL_14;
        }
      }
    }
    if (v4 != v3)
    {
      if (v4 < v3 - 1)
      {
        uint64_t v6 = 24 * v4;
        do
        {
          uint64_t v7 = *(void *)(v2 + 24) + v6;
          ++v4;
          *(_OWORD *)uint64_t v7 = *(_OWORD *)(v7 + 24);
          *(void *)(v7 + 16) = *(void *)(v7 + 40);
          v6 += 24;
        }
        while (v4 < *(int *)(v2 + 12) - 1);
        int v3 = *(_DWORD *)(v2 + 12);
      }
      if (v3) {
        *(_DWORD *)(v2 + 12) = v3 - 1;
      }
    }
LABEL_14:
    if ((qword_2501C8 & 0x2000) != 0)
    {
      uint64_t v8 = *find_entry(tracedChunks, &key, 8uLL, 0);
      if (v8) {
        unint64_t v9 = *(void **)(v8 + 32);
      }
      else {
        unint64_t v9 = 0;
      }
      free(v9);
    }
    apr_hash_set((apr_hash_t *)tracedChunks, &key, 8, 0);
    return pthread_mutex_unlock(&tracingMutex);
  }
  else
  {
    return pthread_mutex_unlock(&tracingMutex);
  }
}

uint64_t GTMemoryGuard_copyTracedChunks(void **a1, uint64_t a2)
{
  uint64_t v9 = a2;
  if ((qword_2501C8 & 0x2000) == 0) {
    return 0;
  }
  pthread_mutex_lock(&tracingMutex);
  if (!tracingRegions || (uint64_t v3 = *find_entry(tracedChunks, &v9, 8uLL, 0)) == 0 || (v4 = *(uint64_t **)(v3 + 32)) == 0)
  {
    pthread_mutex_unlock(&tracingMutex);
    return 0;
  }
  uint64_t v5 = *v4;
  size_t v6 = 8 * *v4;
  uint64_t v7 = malloc_type_realloc(*a1, v6, 0x100004000313F17uLL);
  *a1 = v7;
  memcpy(v7, v4 + 1, v6);
  pthread_mutex_unlock(&tracingMutex);
  return v5;
}

id CreateIndirectRenderCommandBufferSnapshot(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a2;
  id v9 = a1;
  uint64_t v10 = [v9 device];
  unint64_t v11 = DEVICEOBJECT(v8);

  unint64_t v12 = [v11 device];
  id v13 = [v11 size];
  id v14 = [v12 newIndirectCommandBufferWithDescriptor:v7 maxCommandCount:v13 options:0x800000];

  unint64_t v15 = [v10 renderFunctionCopyIndirectCommandBuffer];
  id v16 = [v15 newArgumentEncoderWithBufferIndex:0];

  id v17 = objc_msgSend(v12, "newBufferWithLength:options:", objc_msgSend(v16, "encodedLength"), 0);
  [v16 setArgumentBuffer:v17 offset:0];
  [v16 setIndirectCommandBuffer:v14 atIndex:0];
  [v16 setIndirectCommandBuffer:v11 atIndex:1];
  uint64_t v18 = DEVICEOBJECT(v9);

  [v18 useResource:v11 usage:1 stages:1];
  [v18 useResource:v14 usage:2 stages:1];
  [v18 setVertexBuffer:v17 offset:0 atIndex:0];
  long long v19 = [v10 renderPipelineCopyIndirectCommandBuffer];
  [v18 setRenderPipelineState:v19];

  [v18 drawPrimitives:0 vertexStart:0 vertexCount:v13];
  LOBYTE(v13) = [v12 supportsRenderMemoryBarrier];
  unsigned int v20 = [v12 supportsPartialRenderMemoryBarrier];
  if ((v13 & 1) != 0 || v20)
  {
    uint64_t v23 = v11;
    [v18 memoryBarrierWithResources:&v23 count:1 afterStages:1 beforeStages:1];
  }
  id v21 = v17;
  *a4 = v21;

  return v14;
}

void RestoreRenderCommandEncoder(uint64_t a1, uint64_t a2)
{
  id v2 = (id)__chkstk_darwin(a1, a2);
  id v3 = [v2 traceContext];
  unint64_t v4 = [v2 traceStream];
  newpool = 0;
  apr_pool_create_ex(&newpool, 0, 0, 0);
  uint64_t v5 = newpool;
  size_t v6 = apr_hash_make(newpool);
  GTTraceMemPool_buildMemoryMap(v4[3], v6);
  id v7 = GTTraceContext_copyStreamMap((uint64_t)v3, v5);
  bzero(v30, 0x2B90uLL);
  uint64_t v8 = v4[4];
  if (v8)
  {
    unsigned int v9 = 0;
    while (1)
    {
      unsigned int v10 = atomic_load((unsigned int *)(v8 + 4));
      uint64_t v11 = v9 + (v10 >> 6) - 1;
      if ((int)v11 > 0) {
        break;
      }
      uint64_t v8 = *(void *)(v8 + 40);
      unsigned int v9 = v11;
      if (!v8)
      {
        unsigned int v9 = v11;
        goto LABEL_8;
      }
    }
  }
  else
  {
    unsigned int v9 = 0;
  }
  uint64_t v11 = 0;
LABEL_8:
  unint64_t v12 = v9 | (unint64_t)(v11 << 32);
LABEL_9:
  uint64_t v13 = v8 + 64;
  while (v8 && (*(unsigned char *)(v13 + ((uint64_t)(HIDWORD(v12) - (int)v12) << 6) + 15) & 8) != 0)
  {
    GTMTLSMCommandEncoder_processTraceFunc((uint64_t)v30, (uint64_t *)(v13 + ((uint64_t)(HIDWORD(v12) - (int)v12) << 6)), (uint64_t)v6);
    unsigned int v14 = atomic_load((unsigned int *)(v8 + 4));
    int v15 = v12 + (v14 >> 6);
    uint64_t v16 = (HIDWORD(v12) + 1);
    unint64_t v12 = (v16 << 32) | v12;
    if (v16 == v15 - 1)
    {
      unint64_t v12 = (v16 << 32) | v16;
      uint64_t v8 = *(void *)(v8 + 40);
      goto LABEL_9;
    }
  }
  id v29 = v2;
  id v17 = DEVICEOBJECT(v2);
  uint64_t v18 = 0;
  char v19 = 1;
  do
  {
    char v20 = v19;
    uint64_t v21 = 1 << v18;
    uint64_t v22 = v32[v18];
    if ((v30[8] & (1 << v18)) != 0)
    {
      if (v22) {
        uint64_t v23 = v22 + 16;
      }
      else {
        uint64_t v23 = 0;
      }
      vm_size_t v24 = &v30[v18];
      uint64_t v25 = v24[41];
      if ((v31 & v21) != 0) {
        [v17 setVertexBytes:v23 length:v25 attributeStride:v24[72] atIndex:v18];
      }
      else {
        [v17 setVertexBytes:v23 length:v25 atIndex:v18];
      }
    }
    else
    {
      v35[0] = v32[v18];
      id v26 = *(id *)(*(void *)(*find_entry((uint64_t)v7, v35, 8uLL, 0) + 32) + 8);
      if (objc_msgSend(v26, "conformsToProtocol:", &OBJC_PROTOCOL___MTLBuffer, v29))
      {
        uint64_t v27 = &v30[v18];
        uint64_t v28 = v27[41];
        if ((v31 & v21) != 0) {
          [v17 setVertexBuffer:v26 offset:v28 attributeStride:v27[72] atIndex:v18];
        }
        else {
          [v17 setVertexBuffer:v26 offset:v28 atIndex:v18];
        }
      }
      else if ([v26 conformsToProtocol:&OBJC_PROTOCOL___MTLAccelerationStructure])
      {
        [v17 setVertexAccelerationStructure:v26 atBufferIndex:v18];
      }
      else if ([v26 conformsToProtocol:&OBJC_PROTOCOL___MTLIntersectionFunctionTable])
      {
        [v17 setVertexIntersectionFunctionTable:v26 atBufferIndex:v18];
      }
      else if ([v26 conformsToProtocol:&OBJC_PROTOCOL___MTLVisibleFunctionTable])
      {
        [v17 setVertexVisibleFunctionTable:v26 atBufferIndex:v18];
      }
    }
    char v19 = 0;
    uint64_t v18 = 1;
  }
  while ((v20 & 1) != 0);
  if (v33)
  {
    v35[0] = v33;
    objc_msgSend(v17, "setRenderPipelineState:", *(void *)(*(void *)(*find_entry((uint64_t)v7, v35, 8uLL, 0) + 32) + 8));
  }
  apr_pool_destroy(newpool);
}

pthread_mutex_t *GTMTLCaptureState_createLocalCapture(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = GTMTLCaptureState_create();
  uint64_t v6 = +[NSString stringWithUTF8String:*(void *)(a1 + 64)];
  id v7 = *(void **)&v4[6].__opaque[32];
  *(void *)&v4[6].__opaque[32] = v6;

  v4[7].__opaque[0] = 0;
  long long v8 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&v4->__sig = *(_OWORD *)a1;
  *(_OWORD *)&v4->__opaque[8] = v8;
  long long v9 = *(_OWORD *)(a1 + 32);
  long long v10 = *(_OWORD *)(a1 + 48);
  long long v11 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)&v4[1].__sig = *(_OWORD *)(a1 + 64);
  *(_OWORD *)&v4[1].__opaque[8] = v11;
  *(_OWORD *)&v4->__opaque[24] = v9;
  *(_OWORD *)&v4->__opaque[40] = v10;
  id v12 = objc_retainBlock(*(id *)(a1 + 96));
  uint64_t v13 = *(void **)&v4[1].__opaque[24];
  *(void *)&v4[1].__opaque[24] = v12;

  v4[1].__opaque[21] = GetEnvDefault_4948() != 0;
  v4[1].__sig = (uint64_t)[*(id *)&v4[6].__opaque[32] UTF8String];
  *(void *)&v4[3].__opaque[24] = apr_array_make(*(apr_pool_t **)&v4[1].__opaque[48], 128, 32);
  id v14 = [*(id *)&v4[6].__opaque[32] stringByAppendingPathComponent:@"store0"];
  int v15 = open((const char *)[v14 UTF8String], 514, 438);
  *(_DWORD *)&v4[6].__opaque[24] = v15;
  if (v15 < 0)
  {
    if (s_logUsingOsLog)
    {
      uint64_t v16 = gt_default_log();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        uint64_t v22 = __error();
        uint64_t v23 = strerror(*v22);
        *(_DWORD *)buf = 136315138;
        uint64_t v25 = v23;
        _os_log_error_impl(&def_CFBEC, v16, OS_LOG_TYPE_ERROR, "warning: failed to create store0 (%s)", buf, 0xCu);
      }
    }
    else
    {
      id v17 = __stderrp;
      uint64_t v18 = __error();
      id v19 = +[NSString stringWithFormat:@"warning: failed to create store0 (%s)", strerror(*v18)];
      fprintf(v17, "%s\n", (const char *)[v19 UTF8String]);
    }
  }
  pthread_mutex_init((pthread_mutex_t *)((char *)v4 + 232), 0);
  if (a2) {
    char v20 = *(void **)(a2 + 8);
  }
  else {
    char v20 = 0;
  }
  objc_storeStrong((id *)&v4[1].__opaque[40], v20);
  deflateInit_((z_streamp)&v4[4].__opaque[32], -1, "1.2.12", 112);
  *(void *)&v4[6].__opaque[16] = apr_palloc(*(apr_pool_t **)&v4[1].__opaque[48], 0x1000uLL);

  return v4;
}

pthread_mutex_t *GTMTLCaptureState_create()
{
  newpool = 0;
  apr_pool_create_ex(&newpool, 0, 0, 0);
  mach_port_t v0 = newpool;
  id v1 = (mach_timebase_info *)apr_palloc(newpool, 0x1D0uLL);
  id v2 = (pthread_mutex_t *)v1;
  if (v1)
  {
    *(_OWORD *)&v1[54].numer = 0u;
    *(_OWORD *)&v1[56].numer = 0u;
    *(_OWORD *)&v1[50].numer = 0u;
    *(_OWORD *)&v1[52].numer = 0u;
    *(_OWORD *)&v1[46].numer = 0u;
    *(_OWORD *)&v1[48].numer = 0u;
    *(_OWORD *)&v1[42].numer = 0u;
    *(_OWORD *)&v1[44].numer = 0u;
    *(_OWORD *)&v1[38].numer = 0u;
    *(_OWORD *)&v1[40].numer = 0u;
    *(_OWORD *)&v1[34].numer = 0u;
    *(_OWORD *)&v1[36].numer = 0u;
    *(_OWORD *)&v1[30].numer = 0u;
    *(_OWORD *)&v1[32].numer = 0u;
    *(_OWORD *)&v1[26].numer = 0u;
    *(_OWORD *)&v1[28].numer = 0u;
    *(_OWORD *)&v1[22].numer = 0u;
    *(_OWORD *)&v1[24].numer = 0u;
    *(_OWORD *)&v1[18].numer = 0u;
    *(_OWORD *)&v1[20].numer = 0u;
    *(_OWORD *)&v1[14].numer = 0u;
    *(_OWORD *)&v1[16].numer = 0u;
    *(_OWORD *)&v1[10].numer = 0u;
    *(_OWORD *)&v1[12].numer = 0u;
    *(_OWORD *)&v1[6].numer = 0u;
    *(_OWORD *)&v1[8].numer = 0u;
    *(_OWORD *)&v1[2].numer = 0u;
    *(_OWORD *)&v1[4].numer = 0u;
    *(_OWORD *)&v1->numer = 0u;
  }
  v1[15] = (mach_timebase_info)v0;
  mach_timebase_info(v1 + 56);
  pthread_mutex_init(v2 + 2, 0);
  v2[3].__sig = (uint64_t)apr_array_make(v0, 0, 88);
  *(void *)v2[3].__opaque = apr_hash_make(v0);
  *(void *)&v2[3].__opaque[8] = apr_hash_make(v0);
  *(void *)&v2[3].__opaque[16] = apr_hash_make(v0);
  return v2;
}

char *GetEnvDefault_4948()
{
  size_t result = getenv("MTLCAPTURE_NEW_ARCHIVE_FORMAT");
  if (result)
  {
    return (char *)strtol(result, 0, 0);
  }
  return result;
}

pthread_mutex_t *GTMTLCaptureState_createRemoteCapture(uint64_t a1, id *a2)
{
  unint64_t v4 = GTMTLCaptureState_create();
  objc_storeStrong((id *)&v4[1].__opaque[32], *a2);
  long long v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&v4->__sig = *(_OWORD *)a1;
  *(_OWORD *)&v4->__opaque[8] = v5;
  long long v6 = *(_OWORD *)(a1 + 32);
  long long v7 = *(_OWORD *)(a1 + 48);
  long long v8 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)&v4[1].__sig = *(_OWORD *)(a1 + 64);
  *(_OWORD *)&v4[1].__opaque[8] = v8;
  *(_OWORD *)&v4->__opaque[24] = v6;
  *(_OWORD *)&v4->__opaque[40] = v7;
  id v9 = objc_retainBlock(*(id *)(a1 + 96));
  long long v10 = *(void **)&v4[1].__opaque[24];
  *(void *)&v4[1].__opaque[24] = v9;

  v4[1].__sig = 0;
  v4[1].__opaque[21] = GetEnvDefault_4948() != 0;
  return v4;
}

void GTMTLCaptureState_close(uint64_t a1)
{
  if (*(void *)(a1 + 64))
  {
    pthread_mutex_destroy((pthread_mutex_t *)(a1 + 232));
    close(*(_DWORD *)(a1 + 416));
    qsort(*(void **)(*(void *)(a1 + 224) + 24), *(int *)(*(void *)(a1 + 224) + 12), *(int *)(*(void *)(a1 + 224) + 8), (int (__cdecl *)(const void *, const void *))GTCaptureFileIndex_compareByName);
    id v3 = [*(id *)(a1 + 424) stringByAppendingPathComponent:@"index"];
    uint64_t v4 = *(void *)(a1 + 224);
    id v5 = v3;
    GTCaptureFileIndex_save(v4, (const char *)[v5 UTF8String]);
    deflateEnd((z_streamp)(a1 + 296));
  }
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 128));
  long long v6 = *(void **)(a1 + 424);
  *(void *)(a1 + 424) = 0;

  long long v7 = *(void **)(a1 + 104);
  *(void *)(a1 + 104) = 0;

  if (*(uint64_t *)(a1 + 56) >= 1) {
    sandbox_extension_release();
  }
  long long v8 = *(void **)(a1 + 112);
  *(void *)(a1 + 112) = 0;

  id v9 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = 0;

  long long v10 = *(apr_pool_t **)(a1 + 120);

  apr_pool_destroy(v10);
}

uint64_t GTMTLCaptureState_localFilePathURL(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t GTMTLCaptureState_appendDownloadRequests(uint64_t a1, const apr_array_header_t *a2)
{
  uint64_t v4 = (pthread_mutex_t *)(a1 + 128);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 128));
  apr_array_cat(*(apr_array_header_t **)(a1 + 192), a2);

  return pthread_mutex_unlock(v4);
}

uint64_t GTMTLCaptureState_downloadRequests(uint64_t a1)
{
  return *(void *)(a1 + 192);
}

void GTMTLCaptureState_storeData(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1[8])
  {
    _storeDataLocal((uint64_t)a1, v5, v6);
  }
  else
  {
    v11[1] = @"capture serial";
    v12[0] = v5;
    v11[0] = @"buffer name";
    long long v7 = +[NSNumber numberWithUnsignedLongLong:a1[4]];
    v12[1] = v7;
    long long v8 = +[NSDictionary dictionaryWithObjects:v12 forKeys:v11 count:2];

    id v9 = (void *)a1[13];
    long long v10 = +[GTTransportMessage_capture messageWithKind:258 attributes:v8 payload:v6];
    [v9 send:v10 error:0];
  }
}

void _storeDataLocal(uint64_t a1, void *a2, void *a3)
{
  id v40 = a2;
  id v5 = a3;
  unint64_t v6 = (unint64_t)[v5 length];
  long long v7 = *(apr_array_header_t **)(a1 + 224);
  if (v6 >> 15)
  {
    id v26 = [*(id *)(a1 + 424) stringByAppendingPathComponent:v40];
    uint64_t v27 = +[NSURL fileURLWithPath:v26];
    uint64_t v28 = +[NSFileManager defaultManager];
    id v29 = [v27 URLByDeletingLastPathComponent];
    [v28 createDirectoryAtURL:v29 withIntermediateDirectories:1 attributes:0 error:0];

    [v5 writeToFile:v26 atomically:0];
    uint64_t v30 = (pthread_mutex_t *)(a1 + 128);
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 128));
    uint64_t v31 = apr_array_push(v7);
    unsigned int v32 = apr_pstrdup(v7->pool, (const char *)[v40 UTF8String]);
    *(void *)uint64_t v31 = v32;
    v31[2] = v6;
    v31[6] = 2;
    if ((qword_2501C8 & 0x20) != 0)
    {
      uint64_t v33 = v32;
      uint64_t v34 = v7->nelts - 1;
      uint64_t v35 = *(apr_hash_t **)(a1 + 216);
      uint64_t v36 = apr_palloc(v7->pool, 8uLL);
      *uint64_t v36 = v34;
      apr_hash_set(v35, v33, -1, v36);
    }
    pthread_mutex_unlock(v30);
  }
  else
  {
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 232));
    deflateReset((z_streamp)(a1 + 296));
    id v39 = v5;
    *(void *)(a1 + 296) = [v5 bytes];
    int v38 = v6;
    *(_DWORD *)(a1 + 304) = v6;
    off_t v37 = lseek(*(_DWORD *)(a1 + 416), 0, 1);
    uint64_t v8 = *(void *)(a1 + 408);
    do
    {
      *(void *)(a1 + 32mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v8;
      *(_DWORD *)(a1 + 328) = 4096;
      int v9 = deflate((z_streamp)(a1 + 296), 4);
      uint64_t v10 = 0;
      int v11 = *(_DWORD *)(a1 + 416);
      uint64_t v12 = *(void *)(a1 + 320) - v8;
      do
      {
        if ((unint64_t)(v12 - v10) >= 0x100000) {
          size_t v13 = 0x100000;
        }
        else {
          size_t v13 = v12 - v10;
        }
        ssize_t v14 = write(v11, (const void *)(v8 + v10), v13);
        if (v14 == -1) {
          ssize_t v15 = 0;
        }
        else {
          ssize_t v15 = v14;
        }
        v10 += v15;
      }
      while (v14 != -1 && v10 != v12);
    }
    while (!v9);
    uint64_t v17 = *(void *)(a1 + 336);
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 232));
    uint64_t v18 = (pthread_mutex_t *)(a1 + 128);
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 128));
    id v19 = apr_array_push(v7);
    char v20 = apr_pstrdup(v7->pool, (const char *)[v40 UTF8String]);
    *id v19 = v20;
    v19[2] = v37;
    *((_DWORD *)v19 + 2) = v38;
    *((_DWORD *)v19 + 3) = v17;
    *((_DWORD *)v19 + 6) = 1;
    if ((qword_2501C8 & 0x20) != 0)
    {
      uint64_t v21 = v20;
      uint64_t v22 = v7->nelts - 1;
      uint64_t v23 = *(apr_hash_t **)(a1 + 216);
      vm_size_t v24 = apr_palloc(v7->pool, 8uLL);
      *vm_size_t v24 = v22;
      apr_hash_set(v23, v21, -1, v24);
    }
    pthread_mutex_unlock(v18);
    id v5 = v39;
  }
}

uint64_t GTMTLCaptureState_getFileSize(uint64_t a1, char *__s)
{
  size_t v4 = strlen(__s);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 128));
  uint64_t v5 = *find_entry(*(void *)(a1 + 200), __s, v4, 0);
  if (v5) {
    uint64_t v6 = *(void *)(v5 + 32);
  }
  else {
    uint64_t v6 = 0;
  }
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 128));
  return v6;
}

void GTMTLCaptureState_storePointer(uint64_t a1, char *__s, uint64_t *a3, const void *a4)
{
  if (a1 && a4)
  {
    size_t v8 = strlen(__s);
    int v9 = (pthread_mutex_t *)(a1 + 128);
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 128));
    uint64_t v10 = *find_entry(*(void *)(a1 + 200), __s, v8, 0);
    if (v10 && *(void *)(v10 + 32))
    {
      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 128));
    }
    else
    {
      if (__s)
      {
        int v11 = apr_palloc(**(apr_pool_t ***)(a1 + 200), v8 + 1);
        memcpy(v11, __s, v8);
        *((unsigned char *)v11 + v8) = 0;
      }
      else
      {
        int v11 = 0;
      }
      apr_hash_set(*(apr_hash_t **)(a1 + 200), v11, v8, a4);
      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 128));
      if ((qword_2501C8 & 0x20) != 0 && *(void *)(a1 + 64))
      {
        HashBytes(a3, (unint64_t)a4, __sa);
        pthread_mutex_lock((pthread_mutex_t *)(a1 + 128));
        uint64_t v12 = *find_entry(*(void *)(a1 + 208), __sa, 0xFFFFFFFFFFFFFFFFLL, 0);
        if (v12 && (size_t v13 = *(char **)(v12 + 32)) != 0)
        {
          pthread_mutex_unlock((pthread_mutex_t *)(a1 + 128));
          if (*(void *)(a1 + 64) && strcmp(v13, (const char *)v11))
          {
            pthread_mutex_lock((pthread_mutex_t *)(a1 + 128));
            ssize_t v14 = *(apr_array_header_t **)(a1 + 224);
            size_t v15 = strlen(v13);
            uint64_t v16 = *find_entry(*(void *)(a1 + 216), v13, v15, 0);
            if (v16
              && (uint64_t v17 = *(void **)(v16 + 32)) != 0
              && (uint64_t v18 = (uint64_t)&v14->elts[32 * *v17], !strcmp(*(const char **)v18, v13)))
            {
              uint64_t v31 = apr_array_push(v14);
              long long v32 = *(_OWORD *)(v18 + 16);
              *uint64_t v31 = *(_OWORD *)v18;
              v31[1] = v32;
              *(void *)uint64_t v31 = apr_pstrdup(v14->pool, (const char *)v11);
              if ((*((unsigned char *)v31 + 24) & 2) != 0)
              {
                uint64_t v33 = *(void **)(a1 + 424);
                uint64_t v34 = +[NSString stringWithUTF8String:v11];
                uint64_t v35 = [v33 stringByAppendingPathComponent:v34];

                uint64_t v36 = +[NSURL fileURLWithPath:v35];
                off_t v37 = +[NSString stringWithUTF8String:v13];
                int v38 = +[NSURL fileURLWithPath:v37];

                id v39 = v35;
                symlink(v13, (const char *)[v39 UTF8String]);
              }
              pthread_mutex_unlock(v9);
            }
            else
            {
              pthread_mutex_unlock((pthread_mutex_t *)(a1 + 128));
              if (s_logUsingOsLog)
              {
                id v19 = gt_default_log();
                if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315138;
                  __int16 v42 = v13;
                  _os_log_error_impl(&def_CFBEC, v19, OS_LOG_TYPE_ERROR, "warning: File %s not found\n", buf, 0xCu);
                }
              }
              else
              {
                id v29 = __stderrp;
                id v30 = +[NSString stringWithFormat:@"warning: File %s not found\n", v13];
                fprintf(v29, "%s\n", (const char *)[v30 UTF8String]);
              }
            }
          }
        }
        else
        {
          apr_size_t v23 = strlen(__sa) + 1;
          vm_size_t v24 = apr_palloc(**(apr_pool_t ***)(a1 + 208), v23);
          memcpy(v24, __sa, v23);
          uint64_t v25 = apr_pstrdup(**(apr_pool_t ***)(a1 + 208), (const char *)v11);
          apr_hash_set(*(apr_hash_t **)(a1 + 208), v24, -1, v25);
          pthread_mutex_unlock((pthread_mutex_t *)(a1 + 128));
          uint64_t v27 = +[NSString stringWithUTF8String:v11];
          uint64_t v28 = +[NSData dataWithBytesNoCopy:a3 length:a4 freeWhenDone:0];
          GTMTLCaptureState_storeData((void *)a1, v27, v28);
        }
      }
      else
      {
        uint64_t v21 = +[NSString stringWithUTF8String:v11];
        uint64_t v22 = +[NSData dataWithBytesNoCopy:a3 length:a4 freeWhenDone:0];
        GTMTLCaptureState_storeData((void *)a1, v21, v22);
      }
    }
  }
}

void GTMTLCaptureState_notifyCommandBufferCaptured(uint64_t a1)
{
  unint64_t v3 = atomic_fetch_add((atomic_ullong *volatile)(a1 + 432), 1uLL) + 1;
  size_t v4 = *(void **)(a1 + 104);
  uint64_t v5 = +[NSNumber numberWithUnsignedLongLong:v3];
  uint64_t v6 = +[GTTransportMessage_capture messageWithKind:1548 objectPayload:v5];
  [v4 send:v6 error:0];
}

uint64_t GTMTLCaptureState_getStartAbsoluteTime(uint64_t a1)
{
  return *(void *)(a1 + 440);
}

unint64_t GTMTLCaptureState_nanoSecondsElapsed(uint64_t a1, uint64_t a2)
{
  return (unint64_t)*(unsigned int *)(a1 + 448) * a2 / *(unsigned int *)(a1 + 452);
}

uint64_t GTMTLCaptureState_setStartAbsoluteTime(uint64_t result, uint64_t a2, void *a3)
{
  *(void *)(result + 44mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = a2;
  *(void *)(result + 448) = *a3;
  return result;
}

void GTMTLCaptureState_copyDeviceFilesLocal(uint64_t a1, const char **a2, apr_pool_t **a3)
{
  uint64_t v6 = *a3;
  Data = GTCaptureArchive_readData(a2, a3, "(device info)", *a3, 0);
  int v9 = +[NSData dataWithBytesNoCopy:Data length:v8 freeWhenDone:0];
  _storeDataLocal(a1, @"(device info)", v9);

  uint64_t v10 = GTCaptureArchive_readData(a2, a3, "(control device info)", v6, 0);
  uint64_t v12 = +[NSData dataWithBytesNoCopy:v10 length:v11 freeWhenDone:0];
  _storeDataLocal(a1, @"(control device info)", v12);

  size_t v13 = GTCaptureArchive_readData(a2, a3, "(device profile)", v6, 0);
  size_t v15 = +[NSData dataWithBytesNoCopy:v13 length:v14 freeWhenDone:0];
  _storeDataLocal(a1, @"(device profile)", v15);

  uint64_t v16 = +[NSString stringWithUTF8String:*a2];
  uint64_t v17 = +[NSFileManager defaultManager];
  uint64_t v18 = [v16 stringByAppendingPathComponent:@"metadata"];
  id v19 = [*(id *)(a1 + 424) stringByAppendingPathComponent:@"metadata"];
  uint64_t v20 = 0;
  [v17 copyItemAtPath:v18 toPath:v19 error:&v20];
}

void GTMTLCaptureState_notifyUsedDataSentWithDictionary(uint64_t a1, uint64_t a2, void *a3)
{
  v36[0] = &off_226D28;
  v35[0] = @"DYCaptureSession.deviceId";
  v35[1] = @"DYCaptureSession.unusedBufferCount";
  id v30 = +[NSNumber numberWithUnsignedLong:*a3];
  v36[1] = v30;
  void v35[2] = @"DYCaptureSession.unusedTextureCount";
  id v29 = +[NSNumber numberWithUnsignedLong:a3[1]];
  v36[2] = v29;
  void v35[3] = @"DYCaptureSession.unusedLibraryCount";
  uint64_t v28 = +[NSNumber numberWithUnsignedLong:a3[16]];
  v36[3] = v28;
  v35[4] = @"DYCaptureSession.unusedFunctionCount";
  uint64_t v27 = +[NSNumber numberWithUnsignedLong:a3[15]];
  v36[4] = v27;
  v35[5] = @"DYCaptureSession.unusedRenderPipelineStateCount";
  id v26 = +[NSNumber numberWithUnsignedLong:a3[4]];
  v36[5] = v26;
  v35[6] = @"DYCaptureSession.unusedComputePipelineStateCount";
  uint64_t v25 = +[NSNumber numberWithUnsignedLong:a3[5]];
  v36[6] = v25;
  v35[7] = @"DYCaptureSession.unusedDepthStencilStateCount";
  vm_size_t v24 = +[NSNumber numberWithUnsignedLong:a3[3]];
  v36[7] = v24;
  v35[8] = @"DYCaptureSession.unusedSamplerStateCount";
  apr_size_t v23 = +[NSNumber numberWithUnsignedLong:a3[2]];
  v36[8] = v23;
  v35[9] = @"DYCaptureSession.unusedCommandQueueCount";
  uint64_t v22 = +[NSNumber numberWithUnsignedLong:a3[12]];
  v36[9] = v22;
  v35[10] = @"DYCaptureSession.unusedIOCommandQueueCount";
  uint64_t v21 = +[NSNumber numberWithUnsignedLong:a3[13]];
  v36[10] = v21;
  v35[11] = @"DYCaptureSession.unusedHeapCount";
  uint64_t v20 = +[NSNumber numberWithUnsignedLong:a3[9]];
  v36[11] = v20;
  v35[12] = @"DYCaptureSession.unusedFenceCount";
  id v19 = +[NSNumber numberWithUnsignedLong:a3[11]];
  v36[12] = v19;
  v35[13] = @"DYCaptureSession.unusedTextureLayoutCount";
  uint64_t v5 = +[NSNumber numberWithUnsignedLong:a3[14]];
  v36[13] = v5;
  v35[14] = @"DYCaptureSession.unusedEventCount";
  uint64_t v6 = +[NSNumber numberWithUnsignedLong:a3[10]];
  v36[14] = v6;
  v35[15] = @"DYCaptureSession.unusedIndirectCommandBufferCount";
  long long v7 = +[NSNumber numberWithUnsignedLong:a3[7]];
  v36[15] = v7;
  v35[16] = @"DYCaptureSession.unusedAccelerationStructureCount";
  uint64_t v8 = +[NSNumber numberWithUnsignedLong:a3[8]];
  v36[16] = v8;
  v36[17] = &off_226D28;
  v35[17] = @"DYCaptureSession.unusedInternalBufferCount";
  v35[18] = @"DYCaptureSession.unusedInternalTextureCount";
  v36[18] = &off_226D28;
  v36[19] = &off_226D28;
  v35[19] = @"DYCaptureSession.unusedInternalLibraryCount";
  v35[20] = @"DYCaptureSession.unusedInternalFunctionCount";
  v36[20] = &off_226D28;
  v36[21] = &off_226D28;
  v35[21] = @"DYCaptureSession.unusedInternalRenderPipelineStateCount";
  v35[22] = @"DYCaptureSession.unusedInternalComputePipelineStateCount";
  v36[22] = &off_226D28;
  v36[23] = &off_226D28;
  v35[23] = @"DYCaptureSession.unusedInternalDepthStencilStateCount";
  v35[24] = @"DYCaptureSession.unusedInternalSamplerStateCount";
  v36[24] = &off_226D28;
  v36[25] = &off_226D28;
  v35[25] = @"DYCaptureSession.unusedInternalCommandQueueCount";
  v35[26] = @"DYCaptureSession.unusedInternalHeapCount";
  v36[26] = &off_226D28;
  v36[27] = &off_226D28;
  v35[27] = @"DYCaptureSession.unusedInternalFenceCount";
  v35[28] = @"DYCaptureSession.unusedInternalTextureLayoutCount";
  v36[28] = &off_226D28;
  v36[29] = &off_226D28;
  v35[29] = @"DYCaptureSession.unusedInternalEventCount";
  v35[30] = @"DYCaptureSession.unusedInternalIndirectCommandBufferCount";
  v36[30] = &off_226D28;
  v36[31] = &off_226D28;
  v35[31] = @"DYCaptureSession.unusedInternalAccelerationStructureCount";
  v35[32] = @"captured frames counter";
  int v9 = +[NSNumber numberWithUnsignedInteger:a2];
  v36[32] = v9;
  v35[33] = @"library link-time versions";
  uint64_t v10 = _buildLibraryLinkTimeVersionsDictionary();
  v36[33] = v10;
  v35[34] = @"queue/thread labels";
  uint64_t v11 = _buildQueueThreadLabelsDictionary();
  v36[34] = v11;
  v35[35] = @"device profile";
  uint64_t v12 = GTMTLGuestAppClient_copyDeviceProfiles(g_guestAppClientMTL);
  v36[35] = v12;
  size_t v13 = +[NSDictionary dictionaryWithObjects:v36 forKeys:v35 count:36];

  uint64_t v14 = g_signpostLog;
  if (os_signpost_enabled((os_log_t)g_signpostLog))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&def_CFBEC, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CaptureSentUsedData", (const char *)&unk_21C232, buf, 2u);
  }
  CFStringRef v33 = @"capture serial";
  size_t v15 = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 32)];
  uint64_t v34 = v15;
  uint64_t v16 = +[NSDictionary dictionaryWithObjects:&v34 forKeys:&v33 count:1];

  uint64_t v17 = *(void **)(a1 + 104);
  uint64_t v18 = +[GTTransportMessage_capture messageWithKind:266 attributes:v16 objectPayload:v13];
  [v17 send:v18 error:0];
}

id _buildLibraryLinkTimeVersionsDictionary()
{
  mach_port_t v0 = +[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", [&off_226F48 count]);
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v1 = [&off_226F48 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v1)
  {
    id v2 = v1;
    uint64_t v3 = *(void *)v10;
    do
    {
      for (uint64_t i = 0; i != v2; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v10 != v3) {
          objc_enumerationMutation(&off_226F48);
        }
        id v5 = *(id *)(*((void *)&v9 + 1) + 8 * i);
        uint64_t v6 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", NSVersionOfLinkTimeLibrary((const char *)[v5 UTF8String]));
        [v0 setObject:v6 forKeyedSubscript:v5];
      }
      id v2 = [&off_226F48 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v2);
  }
  id v7 = [v0 copy];

  return v7;
}

id _buildQueueThreadLabelsDictionary()
{
  v2[0] = @"queues";
  v2[1] = @"threads";
  v3[0] = &__NSDictionary0__struct;
  v3[1] = &__NSDictionary0__struct;
  mach_port_t v0 = +[NSDictionary dictionaryWithObjects:v3 forKeys:v2 count:2];

  return v0;
}

void GTMTLCaptureState_notifyAllCaptureDataSent(uint64_t a1, uint64_t a2)
{
  v17[0] = @"captured frames counter";
  uint64_t v3 = +[NSNumber numberWithUnsignedInteger:a2];
  v18[0] = v3;
  v17[1] = @"library link-time versions";
  size_t v4 = _buildLibraryLinkTimeVersionsDictionary();
  v18[1] = v4;
  v17[2] = @"queue/thread labels";
  id v5 = _buildQueueThreadLabelsDictionary();
  v18[2] = v5;
  v17[3] = @"device profile";
  uint64_t v6 = GTMTLGuestAppClient_copyDeviceProfiles(g_guestAppClientMTL);
  v18[3] = v6;
  v17[4] = @"LinkedOnApexOrLater";
  id v7 = +[NSNumber numberWithUnsignedChar:_CFExecutableLinkedOnOrAfter()];
  v18[4] = v7;
  uint64_t v8 = +[NSDictionary dictionaryWithObjects:v18 forKeys:v17 count:5];

  CFStringRef v15 = @"capture serial";
  long long v9 = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 32)];
  uint64_t v16 = v9;
  long long v10 = +[NSDictionary dictionaryWithObjects:&v16 forKeys:&v15 count:1];

  long long v11 = g_signpostLog;
  if (os_signpost_enabled((os_log_t)g_signpostLog))
  {
    *(_WORD *)uint64_t v14 = 0;
    _os_signpost_emit_with_name_impl(&def_CFBEC, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CaptureSentAllData", (const char *)&unk_21C232, v14, 2u);
  }
  long long v12 = *(void **)(a1 + 104);
  size_t v13 = +[GTTransportMessage_capture messageWithKind:263 attributes:v10 objectPayload:v8];
  [v12 send:v13 error:0];
}

void GTMTLCaptureState_dumpDeviceFilesLocal(uint64_t a1, uint64_t a2)
{
  id v5 = newDYDeviceInfo();
  uint64_t v6 = GTMTLGuestAppClient_copyDeviceProfiles(g_guestAppClientMTL);
  [v5 setProfiles:v6];

  id v7 = [objc_alloc((Class)NSKeyedArchiver) initRequiringSecureCoding:1];
  [v7 encodeObject:v5 forKey:NSKeyedArchiveRootObjectKey];
  uint64_t v8 = [v7 encodedData];
  _storeDataLocal(a1, @"(device info)", v8);
  _storeDataLocal(a1, @"(control device info)", v8);

  id v9 = [objc_alloc((Class)NSKeyedArchiver) initRequiringSecureCoding:1];
  long long v10 = [v5 profiles];
  [v9 encodeObject:v10 forKey:NSKeyedArchiveRootObjectKey];

  long long v11 = [v9 encodedData];
  _storeDataLocal(a1, @"(device profile)", v11);

  id v12 = objc_alloc_init((Class)NSUUID);
  v22[0] = @"(uuid)";
  size_t v13 = [v12 UUIDString];
  v23[0] = v13;
  v23[1] = &off_226D28;
  v22[1] = @"DYCaptureSession.capture_version";
  v22[2] = @"DYCaptureSession.interpose_feature_version";
  v23[2] = &off_226D40;
  v23[3] = @"0";
  v22[3] = @"DYCaptureSession.interpose_patch_version";
  v22[4] = @"DYCaptureSession.nativePointerSize";
  v23[4] = &off_226D58;
  v22[5] = @"DYCaptureSession.boundaryLess";
  uint64_t v14 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 86)];
  v23[5] = v14;
  v23[6] = &off_226D70;
  v22[6] = @"DYCaptureSession.graphics_api";
  v22[7] = @"DYCaptureSession.library_link_time_versions";
  CFStringRef v15 = _buildLibraryLinkTimeVersionsDictionary();
  v23[7] = v15;
  v23[8] = &off_226D70;
  v22[8] = @"DYCaptureEngine.captured_frames_count";
  v22[9] = @"DYCaptureEngine.launch_dictionary";
  v23[9] = &__NSDictionary0__struct;
  v22[10] = @"DYCaptureEngine.linked_on_apex_or_later";
  uint64_t v16 = +[NSNumber numberWithUnsignedChar:_CFExecutableLinkedOnOrAfter()];
  v23[10] = v16;
  v22[11] = @"DYCaptureSession.deviceId";
  uint64_t v17 = +[NSNumber numberWithUnsignedLong:a2];
  v23[11] = v17;
  v23[12] = &off_226D28;
  v22[12] = @"DYCaptureSession.unusedBufferCount";
  v22[13] = @"DYCaptureSession.unusedTextureCount";
  v23[13] = &off_226D28;
  v23[14] = &off_226D28;
  v22[14] = @"DYCaptureSession.unusedLibraryCount";
  v22[15] = @"DYCaptureSession.unusedFunctionCount";
  v22[16] = @"DYCaptureSession.unusedRenderPipelineStateCount";
  v22[17] = @"DYCaptureSession.unusedComputePipelineStateCount";
  v23[15] = &off_226D28;
  v23[16] = &off_226D28;
  v22[18] = @"DYCaptureSession.unusedDepthStencilStateCount";
  v22[19] = @"DYCaptureSession.unusedSamplerStateCount";
  v23[17] = &off_226D28;
  v23[18] = &off_226D28;
  v22[20] = @"DYCaptureSession.unusedCommandQueueCount";
  v23[19] = &off_226D28;
  v23[20] = &off_226D28;
  uint64_t v18 = +[NSDictionary dictionaryWithObjects:v23 forKeys:v22 count:21];

  uint64_t v21 = 0;
  id v19 = +[NSPropertyListSerialization dataWithPropertyList:v18 format:200 options:0 error:&v21];
  uint64_t v20 = [*(id *)(a1 + 424) stringByAppendingPathComponent:@"metadata"];
  [v19 writeToFile:v20 atomically:0];
}

const char *GTMTLCaptureModeAsString(int a1)
{
  if ((a1 - 1) > 5) {
    return "DeviceManual";
  }
  else {
    return (&off_221C18)[a1 - 1];
  }
}

id FindMetalLayerWithAddress(void *a1)
{
  os_unfair_lock_lock(&s_layerMapLock);
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v2 = objc_msgSend((id)s_layerStreamMap, "keyEnumerator", 0);
  id v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v11;
    while (2)
    {
      for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(void **)(*((void *)&v10 + 1) + 8 * i);
        if (v7 == a1)
        {
          id v8 = v7;
          goto LABEL_11;
        }
      }
      id v4 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }
  id v8 = 0;
LABEL_11:

  os_unfair_lock_unlock(&s_layerMapLock);

  return v8;
}

id AllMetalLayers()
{
  os_unfair_lock_lock(&s_layerMapLock);
  mach_port_t v0 = [(id)s_layerStreamMap keyEnumerator];
  id v1 = MakeLayerInfos(v0);

  os_unfair_lock_unlock(&s_layerMapLock);

  return v1;
}

id MakeLayerInfos(void *a1)
{
  id v1 = a1;
  id v2 = objc_alloc_init((Class)NSMutableArray);
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v3 = v1;
  id v4 = [v3 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v17;
    do
    {
      for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v17 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v16 + 1) + 8 * i);
        id v9 = objc_alloc_init((Class)DYGTCAMetalLayerInfo);
        long long v10 = objc_msgSend(v8, "device", (void)v16);
        [v9 setDeviceAddress:v10];

        long long v11 = [v8 device];
        long long v12 = (uint64_t *)[v11 traceStream];
        if (v12) {
          uint64_t v13 = *v12;
        }
        else {
          uint64_t v13 = 0;
        }
        [v9 setDeviceStreamRef:v13];

        [v9 setLayerAddress:v8];
        objc_msgSend(v9, "setLayerStreamRef:", objc_msgSend(v8, "streamReference"));
        [v8 frame];
        objc_msgSend(v9, "setFrame:");
        uint64_t v14 = [v8 name];
        [v9 setName:v14];

        [v2 addObject:v9];
      }
      id v5 = [v3 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }
    while (v5);
  }

  return v2;
}

uint64_t CaptureCA()
{
  id v0 = [objc_alloc((Class)NSMapTable) initWithKeyOptions:2 valueOptions:0 capacity:8];
  id v1 = (void *)s_layerStreamMap;
  s_layerStreamMap = (uint64_t)v0;

  return _objc_addWillInitializeClassFunc();
}

Class WrapCA(uint64_t a1, objc_class *a2)
{
  Class result = NSClassFromString(@"CAMetalLayer");
  if (result == a2)
  {
    id v4 = (objc_class *)objc_opt_class();
    id v5 = NSSelectorFromString(@"init");
    InstanceMethod = class_getInstanceMethod(v4, v5);
    CAMetalLayer_initIMP = (uint64_t (*)(void))method_setImplementation(InstanceMethod, (IMP)CAMetalLayer_init);
    id v7 = (objc_class *)objc_opt_class();
    id v8 = NSSelectorFromString(@"shimDrawable:");
    Method v9 = class_getInstanceMethod(v7, v8);
    long long v10 = (objc_class *)objc_opt_class();
    if (v9)
    {
      long long v11 = NSSelectorFromString(@"shimDrawable:");
      long long v12 = &CAMetalLayer_shimDrawableIMP;
      uint64_t v13 = (void (*)(void))CAMetalLayer_shimDrawable;
    }
    else
    {
      long long v11 = "nextDrawable";
      long long v12 = (uint64_t *)&CAMetalLayer_nextDrawableIMP;
      uint64_t v13 = (void (*)(void))CAMetalLayer_nextDrawable;
    }
    uint64_t v14 = v13;
    CFStringRef v15 = class_getInstanceMethod(v10, v11);
    *long long v12 = (uint64_t)method_setImplementation(v15, v14);
    long long v16 = (objc_class *)objc_opt_class();
    long long v17 = NSSelectorFromString(@"dealloc");
    long long v18 = class_getInstanceMethod(v16, v17);
    CAMetalLayer_deallocIMP = method_setImplementation(v18, (IMP)CAMetalLayer_dealloc);
    long long v19 = (objc_class *)objc_opt_class();
    class_addMethod(v19, "traceContext", (IMP)traceContextIMP, "^{GTTraceContext}@:");
    uint64_t v20 = (objc_class *)objc_opt_class();
    class_addMethod(v20, "traceStream", (IMP)traceStreamIMP, "^{GTTraceStream}@:");
    uint64_t v21 = (objc_class *)objc_opt_class();
    class_addMethod(v21, "streamReference", (IMP)streamReferenceIMP, "Q@:");
    uint64_t v22 = (objc_class *)objc_opt_class();
    class_addMethod(v22, "baseObject", (IMP)baseObjectIMP, "@@:");
    apr_size_t v23 = (objc_class *)objc_opt_class();
    class_addMethod(v23, "touch", (IMP)touchIMP, "v@:");
    vm_size_t v24 = (objc_class *)objc_opt_class();
    return (Class)class_addProtocol(v24, (Protocol *)&OBJC_PROTOCOL___CaptureMTLObject);
  }
  return result;
}

uint64_t touchIMP(void *a1)
{
  id v1 = (unint64_t *)StreamForLayer(a1);
  uint64_t result = mach_absolute_time();
  if (v1)
  {
    unint64_t v3 = atomic_load(v1 + 7);
    unint64_t v4 = v3;
    do
    {
      atomic_compare_exchange_strong((atomic_ullong *volatile)v1 + 7, &v4, v3 & 0x1F | result & 0xFFFFFFFFFFFFFFE0);
      BOOL v5 = v4 == v3;
      unint64_t v3 = v4;
    }
    while (!v5);
  }
  return result;
}

id StreamForLayer(void *a1)
{
  id v1 = a1;
  BOOL v2 = os_unfair_lock_trylock(&s_layerMapLock);
  unint64_t v3 = [(id)s_layerStreamMap objectForKey:v1];

  if (v2) {
    os_unfair_lock_unlock(&s_layerMapLock);
  }
  if (v3) {
    id v4 = [v3 pointerValue];
  }
  else {
    id v4 = 0;
  }

  return v4;
}

id baseObjectIMP(void *a1)
{
  id v1 = a1;

  return v1;
}

id streamReferenceIMP(void *a1)
{
  id result = StreamForLayer(a1);
  if (result) {
    return *(id *)result;
  }
  return result;
}

uint64_t traceContextIMP()
{
  return g_ctx;
}

uint64_t CAMetalLayer_dealloc(void *a1, uint64_t a2)
{
  id v3 = a1;
  id v4 = StreamForLayer(v3);
  if (v4)
  {
    BOOL v5 = v4;
    os_unfair_lock_lock(&s_layerMapLock);
    [(id)s_layerStreamMap removeObjectForKey:v3];
    uint64_t v6 = [(id)s_layerStreamMap keyEnumerator];
    id v7 = MakeLayerInfos(v6);

    os_unfair_lock_unlock(&s_layerMapLock);
    GTMTLGuestAppClientUpdateCAMetalLayerInfo(g_guestAppClientMTL, v7);
    GTTelemetry_removeStreamRef((uint64_t)[v3 streamReference]);
    GTTraceContext_closeStream(g_ctx, v5);
  }
  id v8 = (uint64_t (*)(id, uint64_t))CAMetalLayer_deallocIMP;

  return v8(v3, a2);
}

CaptureMTLDrawable *CAMetalLayer_nextDrawable(void *a1, uint64_t a2)
{
  id v4 = OpenLayerStream(a1);
  uint64_t v5 = g_ctx;
  if (v4) {
    uint64_t v6 = *v4;
  }
  else {
    uint64_t v6 = 0;
  }
  long long v24 = 0u;
  long long v21 = (unint64_t)g_ctx;
  uint64_t v22 = 0;
  uint64_t add = atomic_fetch_add((atomic_ullong *volatile)(g_ctx + 72), 1uLL);
  s();
  id v8 = v7;
  uint64_t v9 = *v7;
  *id v7 = v10;
  *(void *)&long long v24 = v9;
  BYTE8(v24) = *((unsigned char *)v7 + 8);
  *(_WORD *)((char *)&v24 + 9) = 16400;
  *(_DWORD *)((char *)&v24 + 11) = 0;
  HIBYTE(v24) = 0;
  *((unsigned char *)v7 + 8) = BYTE8(v24) | 3;
  long long v11 = CAMetalLayer_nextDrawableIMP(a1, a2);
  if (v11) {
    long long v12 = [[CaptureMTLDrawable alloc] initWithBaseObject:v11 captureContext:v5];
  }
  else {
    long long v12 = 0;
  }
  GTTraceEncoder_setStream((uint64_t *)&v21, (uint64_t)[(CaptureMTLDrawable *)v12 traceStream]);
  uint64_t v13 = v22;
  *(_DWORD *)(v22 + 8) = -7166;
  char v14 = BYTE9(v24);
  if (BYTE9(v24) > 0x30uLL)
  {
    uint64_t v16 = *(void *)(*((void *)&v21 + 1) + 24);
    uint64_t v17 = BYTE10(v24);
    ++BYTE10(v24);
    CFStringRef v15 = GTTraceMemPool_allocateBytes(v16, add, v17 | 0x1000000000) + 16;
    char v14 = v17;
  }
  else
  {
    CFStringRef v15 = (char *)(v13 + BYTE9(v24));
    BYTE9(v24) += 16;
  }
  *(unsigned char *)(v13 + 13) = v14;
  long long v18 = [(CaptureMTLDrawable *)v12 traceStream];
  if (v18) {
    unint64_t var0 = v18->var0;
  }
  else {
    unint64_t var0 = 0;
  }
  *(void *)CFStringRef v15 = v6;
  *((void *)v15 + 1) = var0;
  uint64_t *v8 = v24;
  *((unsigned char *)v8 + 8) = BYTE8(v24);
  *(unsigned char *)(v22 + 15) |= 8u;

  return v12;
}

uint64_t *OpenLayerStream(void *a1)
{
  id v1 = a1;
  BOOL v2 = (uint64_t *)StreamForLayer(v1);
  if (!v2)
  {
    BOOL v2 = (uint64_t *)GTTraceContext_openStream(g_ctx, (unint64_t)v1, (unint64_t)v1);
    os_unfair_lock_lock(&s_layerMapLock);
    id v3 = (void *)s_layerStreamMap;
    id v4 = +[NSValue valueWithPointer:v2];
    [v3 setObject:v4 forKey:v1];

    uint64_t v5 = [(id)s_layerStreamMap keyEnumerator];
    uint64_t v6 = MakeLayerInfos(v5);

    os_unfair_lock_unlock(&s_layerMapLock);
    GTMTLGuestAppClientUpdateCAMetalLayerInfo(g_guestAppClientMTL, v6);
    GTTelemetry_addStreamRef((uint64_t)[v1 streamReference]);
    id v7 = MTLCreateSystemDefaultDevice();
    uint64_t v8 = g_ctx;
    id v9 = v7;
    if (v2) {
      uint64_t v10 = *v2;
    }
    else {
      uint64_t v10 = 0;
    }
    long long v24 = 0u;
    long long v25 = 0u;
    long long v23 = 0u;
    GTTraceContext_pushEncoderWithStream(v8, (uint64_t)&v23);
    uint64_t v11 = v24;
    *(_DWORD *)(v24 + 8) = -7163;
    char v12 = BYTE9(v25);
    if (BYTE9(v25) > 0x28uLL)
    {
      uint64_t v14 = *(void *)(*((void *)&v23 + 1) + 24);
      uint64_t v15 = BYTE10(v25);
      ++BYTE10(v25);
      uint64_t v13 = GTTraceMemPool_allocateBytes(v14, *((uint64_t *)&v24 + 1), v15 | 0x1800000000) + 16;
      char v12 = v15;
    }
    else
    {
      uint64_t v13 = (char *)(v11 + BYTE9(v25));
      BYTE9(v25) += 24;
    }
    *(unsigned char *)(v11 + 13) = v12;
    uint64_t v16 = (uint64_t *)[v9 traceStream];
    if (v16) {
      uint64_t v17 = *v16;
    }
    else {
      uint64_t v17 = 0;
    }
    long long v18 = [v9 baseObject];

    char v19 = SaveMTLDeviceDescriptor((uint64_t)&v23, v18);
    *(void *)uint64_t v13 = v10;
    *((void *)v13 + 1) = v17;
    v13[16] = v19;
    *(_DWORD *)(v13 + 17) = 0;
    *((_DWORD *)v13 + 5) = 0;

    s();
    *(void *)uint64_t v20 = v21;
    *(unsigned char *)(v20 + 8) = BYTE8(v25);
    *(unsigned char *)(v24 + 15) |= 8u;
  }
  return v2;
}

CaptureMTLDrawable *CAMetalLayer_shimDrawable(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = OpenLayerStream(a1);
  uint64_t v6 = g_ctx;
  if (v5) {
    uint64_t v7 = *v5;
  }
  else {
    uint64_t v7 = 0;
  }
  long long v24 = 0u;
  long long v21 = (unint64_t)g_ctx;
  uint64_t v22 = 0;
  uint64_t add = atomic_fetch_add((atomic_ullong *volatile)(g_ctx + 72), 1uLL);
  s();
  id v9 = v8;
  uint64_t v10 = *v8;
  uint64_t *v8 = v11;
  *(void *)&long long v24 = v10;
  BYTE8(v24) = *((unsigned char *)v8 + 8);
  *(_WORD *)((char *)&v24 + 9) = 16400;
  *(_DWORD *)((char *)&v24 + 11) = 0;
  HIBYTE(v24) = 0;
  *((unsigned char *)v8 + 8) = BYTE8(v24) | 3;
  if (v4) {
    char v12 = [[CaptureMTLDrawable alloc] initWithBaseObject:v4 captureContext:v6];
  }
  else {
    char v12 = 0;
  }
  GTTraceEncoder_setStream((uint64_t *)&v21, (uint64_t)[(CaptureMTLDrawable *)v12 traceStream]);
  uint64_t v13 = v22;
  *(_DWORD *)(v22 + 8) = -7166;
  char v14 = BYTE9(v24);
  if (BYTE9(v24) > 0x30uLL)
  {
    uint64_t v16 = *(void *)(*((void *)&v21 + 1) + 24);
    uint64_t v17 = BYTE10(v24);
    ++BYTE10(v24);
    uint64_t v15 = GTTraceMemPool_allocateBytes(v16, add, v17 | 0x1000000000) + 16;
    char v14 = v17;
  }
  else
  {
    uint64_t v15 = (char *)(v13 + BYTE9(v24));
    BYTE9(v24) += 16;
  }
  *(unsigned char *)(v13 + 13) = v14;
  long long v18 = [(CaptureMTLDrawable *)v12 traceStream];
  if (v18) {
    unint64_t var0 = v18->var0;
  }
  else {
    unint64_t var0 = 0;
  }
  *(void *)uint64_t v15 = v7;
  *((void *)v15 + 1) = var0;
  *id v9 = v24;
  *((unsigned char *)v9 + 8) = BYTE8(v24);
  *(unsigned char *)(v22 + 15) |= 8u;

  return v12;
}

id CAMetalLayer_init()
{
  id v0 = CAMetalLayer_initIMP();
  OpenLayerStream(v0);

  return v0;
}

id ColorSpaceData(CGColorSpace *a1)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  if (a1)
  {
    id v3 = (void *)CGColorSpaceCopyPropertyList(a1);
    if (v3)
    {
      id v4 = +[NSPropertyListSerialization dataWithPropertyList:format:options:error:](NSPropertyListSerialization, "dataWithPropertyList:format:options:error:", v3, 200, 0, 0, v7, v8);
      HIDWORD(v8) = [v4 length];
      uint64_t v5 = +[NSMutableData dataWithBytes:&v7 length:16];
      [v5 appendData:v4];
    }
    else
    {
      uint64_t v5 = 0;
    }
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

void GTEncodeMetalLayers(uint64_t a1, uint64_t a2)
{
  BOOL v2 = +[CADisplay mainDisplay];
  id v3 = [v2 currentOrientation];
  if ([v3 isEqualToString:@"rot0"])
  {
    int v4 = 1;
  }
  else if ([v3 isEqualToString:@"rot90"])
  {
    int v4 = 4;
  }
  else if ([v3 isEqualToString:@"rot180"])
  {
    int v4 = 2;
  }
  else if ([v3 isEqualToString:@"rot270"])
  {
    int v4 = 3;
  }
  else
  {
    int v4 = 1;
  }

  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(v5 + 8) = 0;
  *(void *)(v5 + 16) = 0;
  *(void *)(v5 + 24) = 0;
  *(void *)(v5 + 32) = 0x694300000000;
  *(void *)uint64_t v5 = 0xFFFFE40D00000028;
  *(void *)(v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0;
  *(_DWORD *)(v5 + 48) = v4;
  *(_DWORD *)uint64_t v5 = 52;
  uint64_t v6 = *(unsigned int **)(a1 + 8);
  unsigned int v7 = v6[8];
  _OWORD v6[8] = v7 | 0x10004;
  uint64_t v8 = *v6;
  if ((v7 & 0x1000) != 0)
  {
    uint64_t v10 = v6;
    unint64_t v9 = *v6;
    do
    {
      uint64_t v10 = (unsigned int *)((char *)v10 + v8);
      uint64_t v8 = *v10;
      v9 += v8;
    }
    while ((*((unsigned char *)v10 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v9 = *v6;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v6, v9);
  os_unfair_lock_lock(&s_layerMapLock);
  id v11 = objc_alloc((Class)NSMutableArray);
  id v12 = objc_msgSend(v11, "initWithCapacity:", objc_msgSend((id)s_layerStreamMap, "count"));
  memset(&v98, 0, 64);
  id v13 = (id)s_layerStreamMap;
  id v14 = [v13 countByEnumeratingWithState:&v98 objects:v99 count:16];
  if (v14)
  {
    id v15 = v14;
    uint64_t v16 = **(void **)&v98.m13;
    do
    {
      for (uint64_t i = 0; i != v15; uint64_t i = (char *)i + 1)
      {
        if (**(void **)&v98.m13 != v16) {
          objc_enumerationMutation(v13);
        }
        [v12 addObject:*(void *)(*(void *)&v98.m12 + 8 * i)];
      }
      id v15 = [v13 countByEnumeratingWithState:&v98 objects:v99 count:16];
    }
    while (v15);
  }

  os_unfair_lock_unlock(&s_layerMapLock);
  long long v87 = 0u;
  long long v88 = 0u;
  long long v89 = 0u;
  long long v90 = 0u;
  id obj = v12;
  uint64_t v18 = a2;
  uint64_t v19 = a1;
  id v86 = [obj countByEnumeratingWithState:&v87 objects:v109 count:16];
  if (v86)
  {
    uint64_t v85 = *(void *)v88;
    double height = CGSizeZero.height;
    do
    {
      long long v21 = 0;
      do
      {
        if (*(void *)v88 != v85) {
          objc_enumerationMutation(obj);
        }
        uint64_t v22 = *(void **)(*((void *)&v87 + 1) + 8 * (void)v21);
        long long v24 = ColorSpaceData((CGColorSpace *)[v22 colorspace]);
        id v25 = v22;
        memset(v99, 0, sizeof(v99));
        long long v100 = 0u;
        memset(&v101, 0, sizeof(v101));
        long long v102 = 0u;
        long long v103 = 0u;
        long long v104 = 0u;
        long long v105 = 0u;
        long long v106 = 0u;
        long long v107 = 0u;
        uint64_t v108 = 0;
        id v26 = [v25 device];
        if (!v26) {
          id v26 = MTLCreateSystemDefaultDevice();
        }
        id v27 = [v26 streamReference];
        *((void *)&v100 + 1) = v27;
        BYTE2(v108) = [v25 framebufferOnly];
        LOWORD(v108) = (unsigned __int16)[v25 pixelFormat];
        [v25 drawableSize];
        double v30 = v29;
        double width = CGSizeZero.width;
        if (CGSizeZero.width == v30 && height == v28)
        {
          objc_msgSend(v25, "bounds", CGSizeZero.width);
          double v34 = v33;
          [v25 contentsScale];
          double v30 = v35 * v34;
          [v25 bounds];
          double v37 = v36;
          [v25 contentsScale];
          double v28 = width * v37;
        }
        *(double *)&long long v102 = v30;
        *((double *)&v102 + 1) = v28;
        objc_msgSend(v25, "bounds", width);
        double v39 = v38;
        double v41 = v40;
        *((void *)&v104 + 1) = v42;
        *(void *)&long long v105 = v43;
        *((double *)&v105 + 1) = v38;
        *(double *)&long long v106 = v40;
        [v25 contentsScale];
        *(void *)&long long v104 = v44;
        if (os_variant_has_internal_content() && IsCompositorProcess_onceToken != -1) {
          dispatch_once(&IsCompositorProcess_onceToken, &__block_literal_global_5128);
        }
        if (IsCompositorProcess_isCompositorProcess || (Class v47 = NSClassFromString(@"UIScreen")) == 0)
        {
          double m14 = 240.0;
          double m13 = 320.0;
        }
        else
        {
          Class v48 = v47;
          uint64_t v49 = [(objc_class *)v47 performSelector:sel_getUid("mainScreen")];
          SEL v50 = NSSelectorFromString(@"bounds");
          uint64_t v51 = [(objc_class *)v48 instanceMethodSignatureForSelector:v50];
          uint64_t v52 = +[NSInvocation invocationWithMethodSignature:v51];

          [v52 setSelector:v50];
          [v52 invokeWithTarget:v49];
          memset(&v98, 0, 32);
          [v52 getReturnValue:&v98];
          if (v98.m13 >= v98.m14) {
            double m13 = v98.m13;
          }
          else {
            double m13 = v98.m14;
          }
          if (v98.m13 >= v98.m14) {
            double m14 = v98.m14;
          }
          else {
            double m14 = v98.m13;
          }

          uint64_t v19 = a1;
          uint64_t v18 = a2;
        }
        id v53 = v25;
        memset(&v98, 0, sizeof(v98));
        [v53 position];
        CGFloat v55 = v54;
        [v53 position];
        CGFloat v57 = v56;
        [v53 zPosition];
        CATransform3DMakeTranslation(&v98, v55, v57, v58);
        memset(&v91, 0, sizeof(v91));
        if (v53) {
          [v53 transform];
        }
        else {
          memset(&a, 0, sizeof(a));
        }
        CATransform3D b = v98;
        CATransform3DConcat(&v91, &a, &b);
        uint64_t v59 = [v53 superlayer];
        if (v59)
        {
          uint64_t v60 = (void *)v59;
          do
          {
            [v60 anchorPoint];
            double v62 = v61;
            [v60 bounds];
            double v64 = v63;
            [v60 anchorPoint];
            double v66 = v65;
            [v60 bounds];
            CGFloat v67 = -(v62 * v64);
            CGFloat v69 = -(v66 * v68);
            [v60 anchorPointZ];
            CATransform3DMakeTranslation(&b, v67, v69, -v70);
            CATransform3D v98 = b;
            CATransform3D v95 = v91;
            CATransform3D v94 = b;
            CATransform3DConcat(&b, &v95, &v94);
            CATransform3D v91 = b;
            [v60 transform];
            CATransform3D v95 = v91;
            CATransform3DConcat(&b, &v95, &v93);
            CATransform3D v91 = b;
            [v60 sublayerTransform];
            CATransform3D v95 = v91;
            CATransform3DConcat(&b, &v95, &v92);
            CATransform3D v91 = b;
            [v60 position];
            CGFloat v72 = v71;
            [v60 position];
            CGFloat v74 = v73;
            [v60 zPosition];
            CATransform3DMakeTranslation(&b, v72, v74, v75);
            CATransform3D v98 = b;
            CATransform3D v95 = v91;
            CATransform3D v94 = b;
            CATransform3DConcat(&b, &v95, &v94);
            CATransform3D v91 = b;
            uint64_t v76 = [v60 superlayer];

            uint64_t v60 = (void *)v76;
          }
          while (v76);
        }
        if (v39 >= v41) {
          double v77 = v41;
        }
        else {
          double v77 = v39;
        }
        if (v39 < v41) {
          double v39 = v41;
        }

        CATransform3D v101 = v91;
        *((double *)&v106 + 1) = m13 / v39;
        *(double *)&long long v107 = m14 / v77;
        [v53 anchorPoint];
        *(void *)&long long v103 = v78;
        *((void *)&v103 + 1) = v79;

        id v80 = v24;
        *((void *)&v107 + 1) = [v80 bytes];
        if (v27 == *(id *)(v18 + 56))
        {
          long long v81 = *(_OWORD *)(v19 + 16);
          *(_OWORD *)&v98.m11 = *(_OWORD *)v19;
          *(_OWORD *)&v98.double m13 = v81;
          *(_OWORD *)&v98.m21 = *(_OWORD *)(v19 + 32);
          v98.m23 = *(CGFloat *)(v19 + 48);
          *(void *)&v98.m11 = v53;
          WriteGTMTLSMLayer((uint64_t)&v98, v18, (uint64_t)v99);
        }

        long long v21 = (char *)v21 + 1;
      }
      while (v21 != v86);
      id v86 = [obj countByEnumeratingWithState:&v87 objects:v109 count:16];
    }
    while (v86);
  }
}

void *GTMTLDescriptorAllocator_copyPropertyList(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (!a2) {
    return 0;
  }
  CFErrorRef error = 0;
  CFDataRef v6 = (const __CFData *)[objc_alloc((Class)NSData) initWithBytesNoCopy:a2 length:a3 freeWhenDone:0];
  unsigned int v7 = (void *)CFPropertyListCreateWithData(0, v6, 0, 0, &error);
  if (error)
  {
    CFStringRef v8 = CFErrorCopyDescription(error);
    CFStringRef v9 = v8;
    if (s_logUsingOsLog)
    {
      uint64_t v10 = gt_default_log();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        CStringPtr = CFStringGetCStringPtr(v9, 0x8000100u);
        *(_DWORD *)buf = 136315138;
        long long v21 = CStringPtr;
        _os_log_error_impl(&def_CFBEC, v10, OS_LOG_TYPE_ERROR, "warning: %s", buf, 0xCu);
      }
    }
    else
    {
      id v12 = __stderrp;
      uint64_t v10 = +[NSString stringWithFormat:@"warning: %s", CFStringGetCStringPtr(v8, 0x8000100u)];
      fprintf(v12, "%s\n", (const char *)[v10 UTF8String]);
    }

    CFRelease(v9);
    CFRelease(error);
  }

  if (!v7) {
    return 0;
  }
  id v14 = +[NSKeyedArchiver archivedDataWithRootObject:v7 requiringSecureCoding:1 error:0];
  id v15 = [v14 bytes];
  size_t v16 = (size_t)[v14 length];
  if (v16) {
    uint64_t v17 = *(void **)(a1 + 416);
  }
  else {
    uint64_t v17 = 0;
  }
  *(void *)(a1 + 416) += v16;
  if (a4) {
    memcpy(v17, v15, v16);
  }

  return v17;
}

uint64_t GTAccelerationStructureDescriptorDownloader_needsDownloader(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    unsigned int v2 = 0;
    while (1)
    {
      unsigned int v3 = atomic_load((unsigned int *)(v1 + 4));
      uint64_t v4 = v2 + (v3 >> 6) - 1;
      if ((int)v4 > 0) {
        break;
      }
      uint64_t v1 = *(void *)(v1 + 40);
      unsigned int v2 = v4;
      if (!v1)
      {
        unsigned int v2 = v4;
        goto LABEL_8;
      }
    }
  }
  else
  {
    unsigned int v2 = 0;
  }
  uint64_t v4 = 0;
LABEL_8:
  unint64_t v5 = v2 | (unint64_t)(v4 << 32);
LABEL_9:
  uint64_t v6 = v1 + 64;
  while (v1 && (*(unsigned char *)(v6 + ((uint64_t)(HIDWORD(v5) - (int)v5) << 6) + 15) & 8) != 0)
  {
    int v7 = *(_DWORD *)(v6 + ((uint64_t)(HIDWORD(v5) - (int)v5) << 6) + 8);
    uint64_t result = 1;
    if ((v7 + 15647) <= 9 && ((1 << (v7 + 31)) & 0x207) != 0) {
      return result;
    }
    BOOL v10 = (v7 + 15524) > 0x3B || ((1 << (v7 - 92)) & 0xC00000000000003) == 0;
    if (!v10 || v7 == -15366) {
      return result;
    }
    unsigned int v12 = atomic_load((unsigned int *)(v1 + 4));
    uint64_t v13 = (HIDWORD(v5) + 1);
    int v14 = v5 + (v12 >> 6) - 1;
    unint64_t v5 = (v13 << 32) | v5;
    if (v13 == v14)
    {
      unint64_t v5 = (v13 << 32) | v13;
      uint64_t v1 = *(void *)(v1 + 40);
      goto LABEL_9;
    }
  }
  return 0;
}

apr_pool_t **GTAccelerationStructureDescriptorDownloader_make(void *a1, void *a2, apr_pool_t *a3, apr_pool_t *a4, apr_pool_t *a5)
{
  id v10 = a2;
  id v11 = DEVICEOBJECT(a1);
  unsigned int v12 = apr_palloc(a5, 0x28uLL);
  uint64_t v13 = (apr_pool_t **)v12;
  if (v12)
  {
    *((void *)v12 + 4) = 0;
    *(_OWORD *)unsigned int v12 = 0u;
    *((_OWORD *)v12 + 1) = 0u;
  }
  objc_storeStrong((id *)v12 + 4, a2);
  *uint64_t v13 = a5;
  v13[1] = a3;
  v13[2] = a4;
  int v14 = (apr_pool_t *)objc_alloc_init((Class)NSMutableSet);
  id v15 = v13[3];
  v13[3] = v14;

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = __GTAccelerationStructureDescriptorDownloader_make_block_invoke;
  block[3] = &unk_222120;
  id v20 = v11;
  uint64_t v16 = s_accelerationStructureDescriptorDownloaderPipelinesToken;
  id v17 = v11;
  if (v16 != -1) {
    dispatch_once(&s_accelerationStructureDescriptorDownloaderPipelinesToken, block);
  }

  return v13;
}

void BuildPipelines(void *a1)
{
  id v1 = a1;
  id v2 = objc_alloc_init((Class)MTLCompileOptions);
  unsigned int v3 = +[NSBundle bundleForClass:objc_opt_class()];
  uint64_t v4 = v3;
  if (v3)
  {
    unint64_t v5 = [v3 URLForResource:@"default" withExtension:@"metallib"];
    if (v5)
    {
      id v34 = 0;
      id v6 = [v1 newLibraryWithURL:v5 error:&v34];
      id v7 = v34;
      if (v6)
      {
        id v8 = [v6 newFunctionWithName:@"CopyAccelerationStructureState"];
        id v33 = v7;
        id v9 = [v1 newComputePipelineStateWithFunction:v8 error:&v33];
        id v10 = v33;

        if (v9)
        {
          id v32 = v10;
          id v28 = [v6 newFunctionWithName:@"ClearAccelerationStructureChildren"];
          id v11 = objc_msgSend(v1, "newComputePipelineStateWithFunction:error:");
          id v12 = v32;

          if (v11)
          {
            id obj = v11;
            id v31 = v12;
            id v26 = [v6 newFunctionWithName:@"FillInstanceHeader"];
            id v13 = objc_msgSend(v1, "newComputePipelineStateWithFunction:error:");
            id v14 = v31;

            if (v13)
            {
              id v15 = [v6 newFunctionWithName:@"GetAccelerationStructureChildren"];
              if (v15)
              {
                id v24 = v8;
                id v30 = v14;
                id v16 = [v1 newComputePipelineStateWithFunction:v15 error:&v30];
                id v25 = v30;

                id v17 = v16;
                if (v16)
                {
                  id v18 = [v6 newFunctionWithName:@"MarkAccelerationStructureChildren"];
                  uint64_t v19 = v18;
                  if (v18)
                  {
                    id v22 = v18;
                    id v23 = v15;
                    id v29 = v25;
                    id v20 = [v1 newComputePipelineStateWithFunction:v18 error:&v29];
                    id v21 = v29;

                    id v8 = v24;
                    if (v20)
                    {
                      objc_storeStrong((id *)&s_downloaderPipelines_0, v13);
                      objc_storeStrong((id *)&s_downloaderPipelines_1, v9);
                      objc_storeStrong((id *)&s_downloaderPipelines_2, obj);
                      objc_storeStrong((id *)&s_downloaderPipelines_3, v17);
                      objc_storeStrong((id *)&s_downloaderPipelines_4, v20);
                    }

                    id v25 = v21;
                    uint64_t v19 = v22;
                    id v15 = v23;
                  }
                  else
                  {
                    id v8 = v24;
                  }
                }
                else
                {
                  id v8 = v24;
                }

                id v14 = v25;
              }
            }
            id v12 = v14;
            id v11 = obj;
          }

          id v10 = v12;
        }

        id v7 = v10;
      }
    }
  }
}

void GTAccelerationStructureDescriptorDownloader_preProcessFunc(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  int v4 = *(_DWORD *)(a2 + 8);
  if (v4 > -15524)
  {
    if (v4 != -15523 && v4 != -15466)
    {
      int v5 = -15465;
LABEL_8:
      if (v4 != v5) {
        return;
      }
    }
  }
  else
  {
    if ((v4 + 15646) < 2)
    {
      id v6 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), v3) + 16;
      goto LABEL_11;
    }
    if (v4 != -15647)
    {
      int v5 = -15524;
      goto LABEL_8;
    }
  }
  id v6 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), v3) + 8;
LABEL_11:
  AccelerationStructureByStreamRef(a1, *(void *)v6);
  id v7 = (id)objc_claimAutoreleasedReturnValue();
  [*(id *)(a1 + 24) addObject:v7];
}

id AccelerationStructureByStreamRef(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v2 = *(void **)(a1 + 32);
    uint64_t v3 = +[NSNumber numberWithUnsignedLongLong:a2];
    int v4 = [v2 objectForKey:v3];
  }
  else
  {
    int v4 = 0;
  }

  return v4;
}

void GTAccelerationStructureDescriptorDownloader_allocateStateBuffers(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v4 = *(id *)(a1 + 24);
  id v5 = [v4 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v15;
    do
    {
      for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v15 != v7) {
          objc_enumerationMutation(v4);
        }
        id v9 = *(void **)(*((void *)&v14 + 1) + 8 * i);
        if (v9)
        {
          id v10 = objc_msgSend(*(id *)(*((void *)&v14 + 1) + 8 * i), "stateBuffer", (void)v14);
          if (!v10)
          {
            id v11 = [v3 newBufferWithLength:16 options:0];
            id v12 = [v11 contents];
            unsigned int v13 = v12[1] & 0xFFFFFFF0;
            *id v12 = 0;
            v12[1] = v13;
            [v9 setStateBuffer:v11];
          }
        }
      }
      id v6 = [v4 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v6);
  }
}

void GTAccelerationStructureDescriptorDownloader_processFunc(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  newpool = 0;
  uint64_t v6 = *(void *)(a1 + 8);
  apr_pool_create_ex(&newpool, *(apr_pool_t **)a1, 0, 0);
  int v7 = *(_DWORD *)(a2 + 8);
  if (v7 > -15524)
  {
    switch(v7)
    {
      case -15523:
        id v27 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), v6);
        id v28 = AccelerationStructureByStreamRef(a1, *((void *)v27 + 1));
        id v29 = [v28 captureDescriptor];
        unint64_t v30 = ((unint64_t)[v29 usage] >> 2) & 1;

        ClearAccelerationStructureChildren(v5, v28, v30);
        break;
      case -15466:
LABEL_26:
        id v31 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), v6);
        id v9 = AccelerationStructureByStreamRef(a1, *((void *)v31 + 1));
        id v32 = [v9 captureDescriptor];
        unint64_t v33 = (unint64_t)[v32 usage];

        id v34 = (int *)GTTraceFunc_argumentBytesWithMap((void *)a2, v31[32], v6);
        FillInstanceAccelerationStructureHeader(v5, v9, *v34, (v33 >> 2) & 1);
        goto LABEL_27;
      case -15465:
        id v8 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), v6);
        id v9 = AccelerationStructureByStreamRef(a1, *((void *)v8 + 1));
        id v10 = GTTraceFunc_argumentBytesWithMap((void *)a2, v8[32], v6);
        ClearAccelerationStructureChildren(v5, v9, (v10[1] >> 2) & 1);
LABEL_27:

        break;
    }
  }
  else
  {
    if ((v7 + 15646) < 2)
    {
      id v11 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), v6);
      id v9 = AccelerationStructureByStreamRef(a1, *((void *)v11 + 1));
      uint64_t v12 = AccelerationStructureByStreamRef(a1, *((void *)v11 + 2));
      unsigned int v13 = (void *)v12;
      if (v9) {
        BOOL v14 = v12 == 0;
      }
      else {
        BOOL v14 = 1;
      }
      if (!v14)
      {
        long long v15 = [v9 stateBuffer];
        if (v15)
        {
          long long v16 = [v13 stateBuffer];

          if (v16)
          {
            int v44 = *(_DWORD *)(a2 + 8) == -15645;
            [v5 insertDebugSignpost:@"CopyAccelerationStructureState"];
            [v5 setComputePipelineState:s_downloaderPipelines_1];
            long long v17 = [v9 stateBuffer];
            [v5 setBuffer:v17 offset:0 atIndex:0];

            id v18 = [v13 stateBuffer];
            [v5 setBuffer:v18 offset:0 atIndex:1];

            [v5 setBytes:&v44 length:4 atIndex:6];
            int64x2_t v38 = vdupq_n_s64(1uLL);
            uint64_t v39 = 1;
            int64x2_t v36 = v38;
            uint64_t v37 = 1;
            [v5 dispatchThreads:&v38 threadsPerThreadgroup:&v36];
          }
        }
      }

      goto LABEL_27;
    }
    if (v7 == -15647)
    {
      uint64_t v19 = GTTraceFunc_argumentBytesWithMap((void *)a2, *(unsigned __int8 *)(a2 + 13), v6);
      id v9 = AccelerationStructureByStreamRef(a1, *((void *)v19 + 1));
      if (v9)
      {
        id v20 = GTTraceFunc_argumentBytesWithMap((void *)a2, v19[32], v6);
        int v44 = (v20[1] >> 2) & 1;
        [v5 setBytes:&v44 length:4 atIndex:7];
        int v21 = *v20;
        switch(v21)
        {
          case 1:
            ClearAccelerationStructureChildren(v5, v9, v44 != 0);
            break;
          case 2:
            double v35 = [v9 stateBuffer];

            if (v35) {
              FillInstanceAccelerationStructureHeader(v5, v9, *((_DWORD *)v20 + 16), v44 != 0);
            }
            break;
          case 3:
            id v22 = [v9 stateBuffer];

            if (v22)
            {
              id v23 = AccelerationStructureByStreamRef(a1, *((void *)v20 + 3));
              id v24 = v23;
              if (v23)
              {
                id v25 = DEVICEOBJECT(v23);

                [v5 insertDebugSignpost:@"BuildInstanceIndirect"];
                [v5 setBuffer:v25 offset:*((void *)v20 + 4) atIndex:4];
                id v26 = [v9 stateBuffer];
                [v5 setBuffer:v26 offset:0 atIndex:1];

                [v5 setBytes:&v44 length:4 atIndex:7];
                [v5 setComputePipelineState:s_downloaderPipelines_0];
                int64x2_t v42 = vdupq_n_s64(1uLL);
                uint64_t v43 = 1;
                int64x2_t v40 = v42;
                uint64_t v41 = 1;
                [v5 dispatchThreads:&v42 threadsPerThreadgroup:&v40];
              }
            }
            break;
        }
      }
      goto LABEL_27;
    }
    if (v7 == -15524) {
      goto LABEL_26;
    }
  }
  apr_pool_destroy(newpool);
}

void sub_7976C(_Unwind_Exception *a1)
{
  apr_pool_destroy(*(apr_pool_t **)(v1 - 72));
  _Unwind_Resume(a1);
}

void ClearAccelerationStructureChildren(void *a1, void *a2, int a3)
{
  id v5 = a1;
  id v6 = a2;
  int v7 = [v6 stateBuffer];

  if (v7)
  {
    int v13 = a3;
    int v14 = 1;
    [v5 insertDebugSignpost:@"ClearPrimitiveAccelerationStructureChildren"];
    [v5 setComputePipelineState:s_downloaderPipelines_2];
    id v8 = [v6 stateBuffer];
    [v5 setBuffer:v8 offset:0 atIndex:1];

    [v5 setBytes:&v14 length:4 atIndex:5];
    [v5 setBytes:&v13 length:4 atIndex:7];
    int64x2_t v11 = vdupq_n_s64(1uLL);
    uint64_t v12 = 1;
    int64x2_t v9 = v11;
    uint64_t v10 = 1;
    [v5 dispatchThreads:&v11 threadsPerThreadgroup:&v9];
  }
}

void FillInstanceAccelerationStructureHeader(void *a1, void *a2, int a3, int a4)
{
  int v12 = a4;
  int v13 = a3;
  id v5 = a2;
  id v6 = a1;
  [v6 insertDebugSignpost:@"FillInstanceAccelerationStructureHeader"];
  [v6 setComputePipelineState:s_downloaderPipelines_0];
  [v6 setBytes:&v13 length:4 atIndex:4];
  int v7 = [v5 stateBuffer];

  [v6 setBuffer:v7 offset:0 atIndex:1];
  [v6 setBytes:&v12 length:4 atIndex:7];
  int64x2_t v10 = vdupq_n_s64(1uLL);
  uint64_t v11 = 1;
  int64x2_t v8 = v10;
  uint64_t v9 = 1;
  [v6 dispatchThreads:&v10 threadsPerThreadgroup:&v8];
}

void GTAccelerationStructureDescriptorDownloader_postProcess(uint64_t a1, void *a2, void *a3, uint64_t a4, char a5, void *a6, uint64_t a7)
{
  id v13 = a2;
  id v14 = a3;
  id v15 = a6;
  if (a5)
  {
    id v16 = [*(id *)(a1 + 24) copy];
    if ([v16 count])
    {
      long long v17 = g_signpostLog;
      if (os_signpost_enabled((os_log_t)g_signpostLog))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&def_CFBEC, v17, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "GTAccelerationStructureDescriptorDownloader_postProcess", (const char *)&unk_21C232, buf, 2u);
      }
      unint64_t v18 = (int)[v16 count];
      unint64_t add = atomic_fetch_add((atomic_ullong *volatile)(a7 + 72), v18);
      id v20 = [v15 device];
      int v21 = [v20 dispatchGroup];
      dispatch_group_enter(v21);

      id v22 = g_signpostLog;
      if (os_signpost_enabled((os_log_t)g_signpostLog))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&def_CFBEC, v22, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "GTAccelerationStructureDescriptorDownloader_postProcess", (const char *)&unk_21C232, buf, 2u);
      }
      v24[0] = _NSConcreteStackBlock;
      v24[1] = 3221225472;
      v24[2] = __GTAccelerationStructureDescriptorDownloader_postProcess_block_invoke;
      v24[3] = &unk_221C98;
      unint64_t v28 = add;
      unint64_t v29 = v18;
      id v25 = v16;
      uint64_t v30 = a7;
      id v26 = v15;
      id v27 = v20;
      id v23 = v20;
      [v13 notifyListener:v14 atValue:a4 block:v24];
    }
    else
    {
      [v13 setSignaledValue:a4 + 1];
    }
  }
  else
  {
    [v13 setSignaledValue:a4 + 1];
  }
}

id GTAccelerationStructureDescriptorDownloader_children(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  LODWORD(a3) = GTAccelerationStructureDescriptorDownloader_childrenCount(v6);
  int64x2_t v8 = [v7 objectAtIndexedSubscript:0];
  unint64_t v9 = 12 * [v8 count];
  id v10 = v6;
  id v11 = v7;
  int v12 = [v5 commandBuffer];
  [v12 setLabel:@"com.apple.internal.gputools.DownloadAccelerationStructure"];
  id v13 = [v12 device];
  uint64_t v83 = v10;
  unsigned int v14 = GTAccelerationStructureDescriptorDownloader_childrenCount(v10);
  id v15 = [v11 objectAtIndexedSubscript:0];
  id v16 = [v11 objectAtIndexedSubscript:1];
  long long v81 = v15;
  id v80 = [v15 allValues];
  uint64_t v82 = v12;
  uint64_t v17 = [v12 computeCommandEncoder];
  CGFloat v75 = v11;
  uint64_t v76 = v8;
  uint64_t v78 = v13;
  uint64_t v79 = (void *)v17;
  if (v9 >= 8 * (unint64_t)a3)
  {
    uint64_t v52 = (void *)v17;
    unsigned int v53 = v14;
    if (v14) {
      id v54 = [v13 newBufferWithLength:8 * v14 options:0];
    }
    else {
      id v54 = 0;
    }
    uint64_t v49 = v16;
    SEL v50 = v5;
    id v55 = v52;
    id v56 = v80;
    id v57 = v83;
    v95[0] = v53;
    id v58 = v54;
    if (v53)
    {
      unsigned int v59 = v53;
      blocuint64_t k = _NSConcreteStackBlock;
      uint64_t v91 = 3221225472;
      CATransform3D v92 = __GTAccelerationStructureDescriptorDownloader_fillChildrenBuffer_block_invoke;
      CATransform3D v93 = &unk_222120;
      id v60 = v55;
      id v94 = v60;
      if (s_accelerationStructureDescriptorDownloaderPipelinesToken != -1) {
        dispatch_once(&s_accelerationStructureDescriptorDownloaderPipelinesToken, &block);
      }
      id v61 = [(id)s_downloaderPipelines_3 threadExecutionWidth];
      [v60 setComputePipelineState:s_downloaderPipelines_3];
      double v62 = DEVICEOBJECT(v57);
      [v60 setAccelerationStructure:v62 atBufferIndex:8];

      [v60 setBytes:v95 length:4 atIndex:4];
      [v60 setBuffer:v58 offset:0 atIndex:9];
      uint64_t v88 = v95[0];
      int64x2_t v89 = vdupq_n_s64(1uLL);
      id v86 = v61;
      int64x2_t v87 = v89;
      [v60 dispatchThreads:&v88 threadsPerThreadgroup:&v86];

      unsigned int v53 = v59;
    }

    [v55 endEncoding];
    [v82 commit];
    [v82 waitUntilCompleted];
    id v63 = v81;
    id v39 = v49;
    id v48 = v58;
    if ((unint64_t)[v48 length] < 8 * (unint64_t)v53)
    {
      id v47 = 0;
      uint64_t v51 = v48;
      goto LABEL_38;
    }
    double v64 = [v48 contents];
    uint64_t v84 = v63;
    id v36 = objc_msgSend(objc_alloc((Class)NSMutableSet), "initWithCapacity:", objc_msgSend(v63, "count"));
    if (v53)
    {
      uint64_t v65 = v53;
      do
      {
        if (*v64++)
        {
          CGFloat v67 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:");
          double v68 = [v39 objectForKeyedSubscript:v67];

          if (v68)
          {
            CGFloat v69 = [v84 objectForKeyedSubscript:v68];
            if (v69) {
              [v36 addObject:v69];
            }
          }
        }
        --v65;
      }
      while (v65);
    }
    id v47 = [v36 allObjects];
    uint64_t v51 = v48;
  }
  else
  {
    unsigned int v18 = v14;
    id v73 = v5;
    CGFloat v74 = v16;
    CGFloat v72 = [v16 allKeys];
    uint64_t v19 = [v72 sortedArrayUsingSelector:"compare:"];
    uint64_t v20 = [v19 count];
    id v21 = [v13 newBufferWithLength:8 * v20 options:0];
    id v22 = [v21 contents];
    if (v20)
    {
      id v23 = v22;
      for (uint64_t i = 0; i != v20; ++i)
      {
        id v25 = [v19 objectAtIndexedSubscript:i];
        v23[i] = [v25 longLongValue];
      }
    }
    id v26 = [v13 newBufferWithLength:4 * v20 options:0];
    id v27 = v79;
    id v28 = v19;
    id v29 = v83;
    unsigned int v30 = v18;
    v95[0] = v18;
    id v31 = v21;
    id v32 = v26;
    if (v30)
    {
      blocuint64_t k = _NSConcreteStackBlock;
      uint64_t v91 = 3221225472;
      CATransform3D v92 = __GTAccelerationStructureDescriptorDownloader_markChildren_block_invoke;
      CATransform3D v93 = &unk_222120;
      id v33 = v27;
      id v94 = v33;
      if (s_accelerationStructureDescriptorDownloaderPipelinesToken != -1) {
        dispatch_once(&s_accelerationStructureDescriptorDownloaderPipelinesToken, &block);
      }
      id v34 = [(id)s_downloaderPipelines_4 threadExecutionWidth];
      unsigned int v85 = [v28 count];
      [v33 setComputePipelineState:s_downloaderPipelines_4];
      double v35 = DEVICEOBJECT(v29);
      [v33 setAccelerationStructure:v35 atBufferIndex:8];

      [v33 setBytes:v95 length:4 atIndex:4];
      [v33 setBytes:&v85 length:4 atIndex:12];
      [v33 setBuffer:v31 offset:0 atIndex:10];
      [v33 setBuffer:v32 offset:0 atIndex:11];
      uint64_t v88 = v95[0];
      int64x2_t v89 = vdupq_n_s64(1uLL);
      id v86 = v34;
      int64x2_t v87 = v89;
      [v33 dispatchThreads:&v88 threadsPerThreadgroup:&v86];
    }
    uint64_t v84 = v28;

    [v27 endEncoding];
    [v82 commit];
    [v82 waitUntilCompleted];
    id v36 = v81;
    id v37 = v74;
    id v38 = v32;
    id v39 = v31;
    int64x2_t v40 = [v39 contents];
    id v71 = v38;
    uint64_t v41 = [v71 contents];
    for (id j = [objc_alloc((Class)NSMutableArray) initWithCapacity:v20]; v20; --v20)
    {
      if (*v41++)
      {
        int v44 = +[NSNumber numberWithUnsignedLongLong:*v40];
        uint64_t v45 = [v37 objectForKeyedSubscript:v44];

        if (v45)
        {
          uint64_t v46 = [v36 objectForKeyedSubscript:v45];
          if (v46) {
            [j addObject:v46];
          }
        }
      }
      ++v40;
    }
    id v47 = [j copy];

    id v48 = v71;
    SEL v50 = v73;
    uint64_t v49 = v74;
    uint64_t v51 = v72;
  }

  id v63 = v84;
LABEL_38:

  return v47;
}

uint64_t GTAccelerationStructureDescriptorDownloader_childrenCount(void *a1)
{
  uint64_t v1 = [a1 stateBuffer];
  id v2 = v1;
  if (v1
    && (unint64_t)[v1 length] >= 0x10
    && (id v3 = (unsigned int *)[v2 contents], (v3[1] & 2) != 0))
  {
    uint64_t v4 = *v3;
  }
  else
  {
    uint64_t v4 = 0;
  }

  return v4;
}

void GTAccelerationStructureDescriptorDownloader_destroy(uint64_t a1)
{
  id v2 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = 0;

  id v3 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
}

void RegisterAccelerationStructure(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = s_accelerationStructuresToken;
  id v6 = a1;
  if (v5 != -1) {
    dispatch_once(&s_accelerationStructuresToken, &__block_literal_global_5631);
  }
  id v8 = +[NSNumber numberWithUnsignedLongLong:a2];
  id v7 = +[NSNumber numberWithUnsignedLongLong:a3];
  os_unfair_lock_lock((os_unfair_lock_t)&s_accelerationStructuresLock);
  [(id)s_accelerationStructuresByStreamRef setObject:v6 forKey:v8];

  [(id)s_accelerationStructureGPUResourceIDToStreamRef setObject:v8 forKey:v7];
  os_unfair_lock_unlock((os_unfair_lock_t)&s_accelerationStructuresLock);
}

id CaptureAccelerationStructures()
{
  if (s_accelerationStructuresToken != -1) {
    dispatch_once(&s_accelerationStructuresToken, &__block_literal_global_5631);
  }
  os_unfair_lock_lock((os_unfair_lock_t)&s_accelerationStructuresLock);
  id v0 = objc_alloc((Class)NSMutableDictionary);
  id v1 = objc_msgSend(v0, "initWithCapacity:", objc_msgSend((id)s_accelerationStructuresByStreamRef, "count"));
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v2 = (id)s_accelerationStructuresByStreamRef;
  id v3 = [v2 countByEnumeratingWithState:&v13 objects:v18 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v14;
    do
    {
      for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v14 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void *)(*((void *)&v13 + 1) + 8 * i);
        id v8 = objc_msgSend((id)s_accelerationStructuresByStreamRef, "objectForKey:", v7, (void)v13);
        if (v8) {
          [v1 setObject:v8 forKeyedSubscript:v7];
        }
      }
      id v4 = [v2 countByEnumeratingWithState:&v13 objects:v18 count:16];
    }
    while (v4);
  }

  id v9 = [(id)s_accelerationStructureGPUResourceIDToStreamRef copy];
  os_unfair_lock_unlock((os_unfair_lock_t)&s_accelerationStructuresLock);
  id v10 = [v1 copy];
  v17[0] = v10;
  v17[1] = v9;
  id v11 = +[NSArray arrayWithObjects:v17 count:2];

  return v11;
}

id CreateIndirectComputeCommandBufferSnapshot(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a2;
  id v9 = a1;
  id v10 = [v9 device];
  id v11 = DEVICEOBJECT(v8);

  int v12 = [v11 device];
  id v13 = [v11 size];
  id v14 = [v12 newIndirectCommandBufferWithDescriptor:v7 maxCommandCount:v13 options:0];

  long long v15 = [v10 computeFunctionCopyIndirectCommandBuffer];
  id v16 = [v15 newArgumentEncoderWithBufferIndex:0];

  id v17 = objc_msgSend(v12, "newBufferWithLength:options:", objc_msgSend(v16, "encodedLength"), 0);
  [v16 setArgumentBuffer:v17 offset:0];
  [v16 setIndirectCommandBuffer:v14 atIndex:0];
  [v16 setIndirectCommandBuffer:v11 atIndex:1];
  unsigned int v18 = DEVICEOBJECT(v9);

  [v18 useResource:v11 usage:1];
  [v18 useResource:v14 usage:2];
  [v18 setBuffer:v17 offset:0 atIndex:0];
  uint64_t v19 = [v10 computePipelineCopyIndirectCommandBuffer];
  [v18 setComputePipelineState:v19];
  if ([v12 supportsNonUniformThreadgroupSize])
  {
    id v28 = v13;
    int64x2_t v29 = vdupq_n_s64(1uLL);
    id v26 = [v19 threadExecutionWidth];
    int64x2_t v27 = v29;
    [v18 dispatchThreads:&v28 threadsPerThreadgroup:&v26];
  }
  else
  {
    int64x2_t v25 = vdupq_n_s64(1uLL);
    int64x2_t v22 = v25;
    uint64_t v23 = 1;
    id v24 = v13;
    [v18 dispatchThreadgroups:&v24 threadsPerThreadgroup:&v22];
  }
  if ([v12 supportsComputeMemoryBarrier])
  {
    unsigned int v30 = v11;
    [v18 memoryBarrierWithResources:&v30 count:1];
  }
  id v20 = v17;
  *a4 = v20;

  return v14;
}

void RestoreComputeCommandEncoder(uint64_t a1, uint64_t a2)
{
  id v2 = (id)__chkstk_darwin(a1, a2);
  id v3 = [v2 traceContext];
  id v4 = [v2 traceStream];
  newpool = 0;
  apr_pool_create_ex(&newpool, 0, 0, 0);
  uint64_t v5 = newpool;
  id v6 = apr_hash_make(newpool);
  GTTraceMemPool_buildMemoryMap(v4[3], v6);
  id v7 = GTTraceContext_copyStreamMap((uint64_t)v3, v5);
  bzero(v28, 0x2B90uLL);
  uint64_t v8 = v4[4];
  if (v8)
  {
    unsigned int v9 = 0;
    while (1)
    {
      unsigned int v10 = atomic_load((unsigned int *)(v8 + 4));
      uint64_t v11 = v9 + (v10 >> 6) - 1;
      if ((int)v11 > 0) {
        break;
      }
      uint64_t v8 = *(void *)(v8 + 40);
      unsigned int v9 = v11;
      if (!v8)
      {
        unsigned int v9 = v11;
        goto LABEL_8;
      }
    }
  }
  else
  {
    unsigned int v9 = 0;
  }
  uint64_t v11 = 0;
LABEL_8:
  unint64_t v12 = v9 | (unint64_t)(v11 << 32);
LABEL_9:
  uint64_t v13 = v8 + 64;
  while (v8 && (*(unsigned char *)(v13 + ((uint64_t)(HIDWORD(v12) - (int)v12) << 6) + 15) & 8) != 0)
  {
    GTMTLSMCommandEncoder_processTraceFunc((uint64_t)v28, (uint64_t *)(v13 + ((uint64_t)(HIDWORD(v12) - (int)v12) << 6)), (uint64_t)v6);
    unsigned int v14 = atomic_load((unsigned int *)(v8 + 4));
    int v15 = v12 + (v14 >> 6);
    uint64_t v16 = (HIDWORD(v12) + 1);
    unint64_t v12 = (v16 << 32) | v12;
    if (v16 == v15 - 1)
    {
      unint64_t v12 = (v16 << 32) | v16;
      uint64_t v8 = *(void *)(v8 + 40);
      goto LABEL_9;
    }
  }
  int64x2_t v27 = v2;
  id v17 = DEVICEOBJECT(v2);
  uint64_t v18 = 0;
  char v19 = 1;
  do
  {
    char v20 = v19;
    uint64_t v21 = 1 << v18;
    uint64_t v22 = v32[v18];
    if ((v30 & (1 << v18)) != 0)
    {
      if (v22) {
        uint64_t v23 = v22 + 16;
      }
      else {
        uint64_t v23 = 0;
      }
      uint64_t v24 = v32[v18 + 31];
      if ((v31 & v21) != 0) {
        [v17 setBytes:v23 length:v24 attributeStride:v32[v18 + 62] atIndex:v18];
      }
      else {
        [v17 setBytes:v23 length:v24 atIndex:v18];
      }
    }
    else
    {
      v34[0] = v32[v18];
      id v25 = *(id *)(*(void *)(*find_entry((uint64_t)v7, v34, 8uLL, 0) + 32) + 8);
      if (objc_msgSend(v25, "conformsToProtocol:", &OBJC_PROTOCOL___MTLBuffer, v27))
      {
        uint64_t v26 = v32[v18 + 31];
        if ((v31 & v21) != 0) {
          [v17 setBuffer:v25 offset:v26 attributeStride:v32[v18 + 62] atIndex:v18];
        }
        else {
          [v17 setBuffer:v25 offset:v26 atIndex:v18];
        }
      }
      else if ([v25 conformsToProtocol:&OBJC_PROTOCOL___MTLAccelerationStructure])
      {
        [v17 setAccelerationStructure:v25 atBufferIndex:v18];
      }
      else if ([v25 conformsToProtocol:&OBJC_PROTOCOL___MTLVisibleFunctionTable])
      {
        [v17 setVisibleFunctionTable:v25 atBufferIndex:v18];
      }
      else if ([v25 conformsToProtocol:&OBJC_PROTOCOL___MTLIntersectionFunctionTable])
      {
        [v17 setIntersectionFunctionTable:v25 atBufferIndex:v18];
      }
    }
    char v19 = 0;
    uint64_t v18 = 1;
  }
  while ((v20 & 1) != 0);
  if (v29)
  {
    v34[0] = v29;
    objc_msgSend(v17, "setComputePipelineState:", *(void *)(*(void *)(*find_entry((uint64_t)v7, v34, 8uLL, 0) + 32) + 8));
  }
  apr_pool_destroy(newpool);
}

BOOL GTMTLGuestAppClient_initGlobalTransportWithHostURL(uint64_t a1)
{
  GTMTLGuestAppClient_initTransportWithHostURL(g_guestAppClientMTL, a1);
  if (*(void *)g_guestAppClientMTL)
  {
    GTMTLGuestAppClient_sendInferiorLaunchedMessage((void **)g_guestAppClientMTL);
    GTMTLGuestAppClientUpdateMTLDeviceInfo(g_guestAppClientMTL);
    GTMTLGuestAppClientUpdateMTLCommandQueueInfo(g_guestAppClientMTL);
    uint64_t v1 = g_guestAppClientMTL;
    id v2 = AllMetalLayers();
    GTMTLGuestAppClientUpdateCAMetalLayerInfo(v1, v2);
    +[GTMTLCaptureScopeInfo updateAll];
    os_unfair_lock_lock((os_unfair_lock_t)(g_guestAppClientMTL + 32));
    uint64_t v3 = *(void *)(g_guestAppClientMTL + 72);
    os_unfair_lock_unlock((os_unfair_lock_t)(g_guestAppClientMTL + 32));
    if (v3)
    {
      id UnsupportedFenumInfo = GTMTLGuestAppClient_getUnsupportedFenumInfo();
      GTMTLGuestAppClient_notifyUnsupportedFenum(UnsupportedFenumInfo);
    }
  }
  return *(void *)g_guestAppClientMTL != 0;
}

void GTMTLGuestAppClient_initTransportWithHostURL(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v3 = DYCreateTransportC(a2);
    *(void *)a1 = v3;
    [v3 setSynchronous:1];
    id v4 = objc_msgSend(*(id *)a1, "newSourceWithQueue:", dispatch_queue_create("gputools.global_sync", 0));
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v10 = 3221225472;
    uint64_t v11 = ___ZL24InitTransportWithHostURLP19GTMTLGuestAppClientPKc_block_invoke;
    unint64_t v12 = &__block_descriptor_40_e36_v16__0__GTTransportMessage_capture_8l;
    uint64_t v13 = a1;
    [v4 setMessageHandler:&block];
    uint64_t v5 = dispatch_semaphore_create(0);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = ___ZL24InitTransportWithHostURLP19GTMTLGuestAppClientPKc_block_invoke_2;
    v8[3] = &unk_222120;
    _OWORD v8[4] = v5;
    [v4 setRegistrationHandler:v8];
    [v4 resume];
    dispatch_semaphore_wait(v5, 0xFFFFFFFFFFFFFFFFLL);
    dispatch_release(v5);
    objc_msgSend(objc_msgSend(*(id *)a1, "connect"), "BOOLResult");
  }
  else
  {
    *(unsigned char *)(a1 + 129) = 1;
    id v6 = dispatch_group_create();
    *(void *)(a1 + 24) = v6;
    dispatch_group_enter(v6);
    global_queue = dispatch_get_global_queue(0, 0);
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v10 = 3221225472;
    uint64_t v11 = ___ZL16InitNewTransportP19GTMTLGuestAppClient_block_invoke;
    unint64_t v12 = &__block_descriptor_40_e5_v8__0l;
    uint64_t v13 = a1;
    dispatch_async(global_queue, &block);
  }
}

void ___ZL24InitTransportWithHostURLP19GTMTLGuestAppClientPKc_block_invoke(uint64_t a1, void *a2)
{
}

intptr_t ___ZL24InitTransportWithHostURLP19GTMTLGuestAppClientPKc_block_invoke_2(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void ___ZL16InitNewTransportP19GTMTLGuestAppClient_block_invoke(uint64_t a1)
{
  id v2 = dispatch_queue_create("com.apple.gputools.capture", 0);
  dispatch_suspend(v2);
  id v3 = (void *)GTTransportServiceDaemonConnectionNew();
  id v4 = [objc_alloc((Class)GTServiceProperties) initWithProtocol:&OBJC_PROTOCOL___GTMTLCaptureService];
  uint64_t v5 = [[GTMTLCaptureService alloc] initWithGuestApp:*(void *)(a1 + 32)];
  id v6 = [objc_alloc((Class)GTMTLCaptureServiceXPCDispatcher) initWithService:v5 properties:v4 notifyConnection:v3];
  [v4 setVersion:3];
  [v3 connection];
  if (registerService())
  {
    *(void *)(*(void *)(a1 + 32) + 8) = v5;
    objc_msgSend(v3, "registerDispatcher:forPort:", v6, objc_msgSend(v4, "servicePort"));
  }

  id v7 = [objc_alloc((Class)GTServiceProperties) initWithProtocol:&OBJC_PROTOCOL___GTMTLTelemetryService];
  uint64_t v8 = [[GTMTLTelemetryService alloc] initWithGuestApp:*(void *)(a1 + 32)];
  id v9 = [objc_alloc((Class)GTMTLTelemetryServiceXPCDispatcher) initWithService:v8 properties:v7 notifyConnection:v3];
  [v3 connection];
  if (registerService())
  {
    *(void *)(*(void *)(a1 + 32) + 16) = v8;
    objc_msgSend(v3, "registerDispatcher:forPort:", v9, objc_msgSend(v7, "servicePort"));
  }

  objc_initWeak(&location, v3);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = ___ZL16InitNewTransportP19GTMTLGuestAppClient_block_invoke_2;
  v10[3] = &unk_221D50;
  objc_copyWeak(&v11, &location);
  [v3 activateWithMessageHandler:v10 andErrorHandler:&__block_literal_global_6036];
  dispatch_resume(v2);
  dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 32) + 24));
  objc_destroyWeak(&v11);
  objc_destroyWeak(&location);
}

void sub_82234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id ___ZL16InitNewTransportP19GTMTLGuestAppClient_block_invoke_2(uint64_t a1, uint64_t a2)
{
  id result = objc_loadWeak((id *)(a1 + 32));
  if (result)
  {
    return [result dispatchMessage:a2 replyConnection:result];
  }
  return result;
}

vm_address_t GTMTLGuestAppClient_initPlatform()
{
  id v0 = getenv("GT_HOST_URL_MTL");
  vm_address_t v1 = GTCoreAlloc((uint64_t)v0, 0x88uLL);
  *(unsigned char *)(v1 + 129) = 0;
  GTMTLGuestAppClient_initTransportWithHostURL(v1, (uint64_t)v0);
  CFDictionaryRef v2 = IOServiceMatching("IOAccelerator");
  io_service_t MatchingService = IOServiceGetMatchingService(kIOMasterPortDefault, v2);
  if (!MatchingService)
  {
    CFDictionaryRef v4 = IOServiceMatching("IOAcceleratorES");
    io_service_t MatchingService = IOServiceGetMatchingService(kIOMasterPortDefault, v4);
  }
  *(_DWORD *)(v1 + 36) = MatchingService;
  *(void *)(v1 + 8mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = objc_alloc_init((Class)NSMutableArray);
  *(void *)(v1 + 88) = objc_alloc_init((Class)NSMutableArray);
  *(void *)(v1 + 96) = objc_alloc_init((Class)NSMutableArray);
  *(void *)(v1 + 56) = 1000000000;
  *(void *)(v1 + 72) = 0;
  *(unsigned char *)(v1 + 128) = 0;
  return v1;
}

uint64_t GTMTLGuestAppClient_release(vm_address_t a1)
{
  IOObjectRelease(*(_DWORD *)(a1 + 36));
  vm_map_t v2 = mach_task_self_;

  return vm_deallocate(v2, a1, 0x88uLL);
}

void TranslateGTMTLRenderPassAttachmentDescriptor(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  id v8 = a1;
  if (a4)
  {
    id v6 = [v8 texture];
    *(void *)(a2 + 8) = [v6 streamReference];

    *(unsigned char *)(a2 + 24) = [v8 level];
    *(_WORD *)(a2 + 22) = (unsigned __int16)[v8 slice];
    *(_WORD *)(a2 + 16) = (unsigned __int16)[v8 depthPlane];
    id v7 = [v8 resolveTexture];
    *(void *)a2 = [v7 streamReference];

    *(unsigned char *)(a2 + 26) = [v8 resolveLevel];
    *(_WORD *)(a2 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = (unsigned __int16)[v8 resolveSlice];
    *(_WORD *)(a2 + 18) = (unsigned __int16)[v8 resolveDepthPlane];
    *(unsigned char *)(a2 + 25) = [v8 loadAction];
    *(unsigned char *)(a2 + 27) = [v8 storeAction];
    *(unsigned char *)(a2 + 28) = [v8 storeActionOptions];
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(a2 + 29) = [v8 yInvert];
    }
  }
}

id MakeMTLRenderPassAttachmentDescriptor(void *a1, uint64_t a2, void *a3)
{
  id v5 = a1;
  uint64_t v6 = *(void *)(a2 + 8);
  id v7 = a3;
  id v8 = +[NSNumber numberWithUnsignedLongLong:v6];
  id v9 = [v7 objectForKeyedSubscript:v8];
  [v5 setTexture:v9];

  [v5 setLevel:*(unsigned __int8 *)(a2 + 24)];
  [v5 setSlice:*(unsigned __int16 *)(a2 + 22)];
  [v5 setDepthPlane:*(unsigned __int16 *)(a2 + 16)];
  uint64_t v10 = +[NSNumber numberWithUnsignedLongLong:*(void *)a2];
  id v11 = [v7 objectForKeyedSubscript:v10];

  [v5 setResolveTexture:v11];
  [v5 setResolveLevel:*(unsigned __int8 *)(a2 + 26)];
  [v5 setResolveSlice:*(unsigned __int16 *)(a2 + 20)];
  [v5 setResolveDepthPlane:*(unsigned __int16 *)(a2 + 18)];
  [v5 setLoadAction:*(unsigned __int8 *)(a2 + 25)];
  [v5 setStoreAction:*(unsigned __int8 *)(a2 + 27)];
  [v5 setStoreActionOptions:*(unsigned __int8 *)(a2 + 28)];
  if (objc_opt_respondsToSelector()) {
    [v5 setYInvert:*(unsigned char *)(a2 + 29) != 0];
  }

  return v5;
}

void TranslateGTMTLRenderPassColorAttachmentDescriptor(void *a1, void *a2, uint64_t a3, int a4)
{
  id v11 = a1;
  TranslateGTMTLRenderPassAttachmentDescriptor(v11, (uint64_t)a2, v6, a4);
  if (a4)
  {
    [v11 clearColor];
    a2[4] = v7;
    a2[5] = v8;
    a2[6] = v9;
    a2[7] = v10;
  }
}

id MakeMTLRenderPassColorAttachmentDescriptor(void *a1, double *a2, void *a3)
{
  id v5 = a1;
  objc_msgSend(MakeMTLRenderPassAttachmentDescriptor(v5, (uint64_t)a2, a3), "setClearColor:", a2[4], a2[5], a2[6], a2[7]);

  return v5;
}

void TranslateGTMTLRenderPassDepthAttachmentDescriptor(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  id v8 = a1;
  TranslateGTMTLRenderPassAttachmentDescriptor(v8, a2, v6, a4);
  if (a4)
  {
    [v8 clearDepth];
    *(void *)(a2 + 32) = v7;
    *(unsigned char *)(a2 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = [v8 depthResolveFilter];
  }
}

id MakeMTLRenderPassDepthAttachmentDescriptor(void *a1, uint64_t a2, void *a3)
{
  id v5 = a1;
  objc_msgSend(MakeMTLRenderPassAttachmentDescriptor(v5, a2, a3), "setClearDepth:", *(double *)(a2 + 32));
  [v5 setDepthResolveFilter:*(unsigned __int8 *)(a2 + 40)];

  return v5;
}

void TranslateGTMTLRenderPassStencilAttachmentDescriptor(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  id v7 = a1;
  TranslateGTMTLRenderPassAttachmentDescriptor(v7, a2, v6, a4);
  if (a4)
  {
    *(_DWORD *)(a2 + 32) = [v7 clearStencil];
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(a2 + 36) = [v7 stencilResolveFilter];
    }
  }
}

id MakeMTLRenderPassStencilAttachmentDescriptor(void *a1, uint64_t a2, void *a3)
{
  id v5 = a1;
  objc_msgSend(MakeMTLRenderPassAttachmentDescriptor(v5, a2, a3), "setClearStencil:", *(unsigned int *)(a2 + 32));
  if (objc_opt_respondsToSelector()) {
    [v5 setStencilResolveFilter:*(unsigned __int8 *)(a2 + 36)];
  }

  return v5;
}

void TranslateGTMTLRenderPassSampleBufferAttachmentDescriptor(void *a1, void *a2, uint64_t a3, int a4)
{
  if (a4)
  {
    id v5 = a1;
    uint64_t v6 = [v5 sampleBuffer];
    a2[2] = [v6 streamReference];

    a2[4] = [v5 startOfVertexSampleIndex];
    a2[1] = [v5 endOfVertexSampleIndex];
    a2[3] = [v5 startOfFragmentSampleIndex];
    id v7 = [v5 endOfFragmentSampleIndex];

    *a2 = v7;
  }
}

id MakeMTLRenderPassSampleBufferAttachmentDescriptor(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  uint64_t v6 = a2[2];
  id v7 = a3;
  id v8 = +[NSNumber numberWithUnsignedLongLong:v6];
  uint64_t v9 = [v7 objectForKeyedSubscript:v8];

  [v5 setSampleBuffer:v9];
  [v5 setStartOfVertexSampleIndex:a2[4]];
  [v5 setEndOfVertexSampleIndex:a2[1]];
  [v5 setStartOfFragmentSampleIndex:a2[3]];
  [v5 setEndOfFragmentSampleIndex:*a2];

  return v5;
}

void TranslateGTMTLRenderPassDescriptorAuto(void *a1, uint64_t a2, int a3)
{
  id v5 = a1;
  uint64_t v6 = *(void *)(a2 + 240);
  *(void *)(a2 + 24mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v6 + 824;
  if (a3) {
    memcpy((void *)v6, &GTMTLRenderPassDescriptorDefaults, 0x338uLL);
  }
  id v7 = v5;
  uint64_t v8 = 0;
  uint64_t v9 = (void *)v6;
  id v31 = v7;
  do
  {
    uint64_t v10 = [v7 colorAttachments];
    id v11 = [v10 objectAtIndexedSubscript:v8];
    unint64_t v12 = [v11 texture];

    if (v12)
    {
      uint64_t v13 = [v31 colorAttachments];
      unsigned int v14 = [v13 objectAtIndexedSubscript:v8];
      TranslateGTMTLRenderPassColorAttachmentDescriptor(v14, v9, v15, a3);
    }
    ++v8;
    v9 += 8;
    id v7 = v31;
  }
  while (v8 != 8);
  uint64_t v16 = [v31 depthAttachment];
  TranslateGTMTLRenderPassDepthAttachmentDescriptor(v16, v6 + 672, v17, a3);

  uint64_t v18 = [v31 stencilAttachment];
  TranslateGTMTLRenderPassStencilAttachmentDescriptor(v18, v6 + 720, v19, a3);

  char v20 = v31;
  uint64_t v21 = 0;
  uint64_t v22 = (void *)(v6 + 512);
  do
  {
    uint64_t v23 = [v20 sampleBufferAttachments];
    uint64_t v24 = [v23 objectAtIndexedSubscript:v21];
    id v25 = [v24 sampleBuffer];

    if (v25)
    {
      uint64_t v26 = [v31 sampleBufferAttachments];
      int64x2_t v27 = [v26 objectAtIndexedSubscript:v21];
      TranslateGTMTLRenderPassSampleBufferAttachmentDescriptor(v27, v22, v28, a3);
    }
    ++v21;
    v22 += 5;
    char v20 = v31;
  }
  while (v21 != 4);
  if (a3)
  {
    uint64_t v29 = [v31 visibilityResultBuffer];
    *(void *)(v6 + 792) = [v29 streamReference];

    *(_WORD *)(v6 + 806) = (unsigned __int16)[v31 renderTargetArrayLength];
    if (objc_opt_respondsToSelector()) {
      *(_WORD *)(v6 + 804) = (unsigned __int16)[v31 imageblockSampleLength];
    }
    if (objc_opt_respondsToSelector()) {
      *(_DWORD *)(v6 + 80mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = [v31 threadgroupMemoryLength];
    }
    if (objc_opt_respondsToSelector()) {
      *(_WORD *)(v6 + 814) = (unsigned __int16)[v31 tileWidth];
    }
    if (objc_opt_respondsToSelector()) {
      *(_WORD *)(v6 + 812) = (unsigned __int16)[v31 tileHeight];
    }
    if (objc_opt_respondsToSelector()) {
      *(_WORD *)(v6 + 81mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = (unsigned __int16)[v31 renderTargetWidth];
    }
    if (objc_opt_respondsToSelector()) {
      *(_WORD *)(v6 + 808) = (unsigned __int16)[v31 renderTargetHeight];
    }
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(v6 + 816) = [v31 defaultRasterSampleCount];
    }
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(v6 + 818) = [v31 openGLModeEnabled];
    }
    if (objc_opt_respondsToSelector())
    {
      uint64_t v30 = [v31 rasterizationRateMap];
      *(void *)(v6 + 784) = [v30 streamReference];
    }
    if (objc_opt_respondsToSelector()) {
      *(void *)(v6 + 776) = [v31 defaultColorSampleCount];
    }
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(v6 + 819) = [v31 pointCoordYFlipEnabled];
    }
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(v6 + 82mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = [v31 skipEmptyTilesOnClearEnabled];
    }
  }
}

id MakeMTLRenderPassDescriptorAuto(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)MTLRenderPassDescriptor);
  id v5 = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 792)];
  uint64_t v6 = [v3 objectForKeyedSubscript:v5];
  [v4 setVisibilityResultBuffer:v6];

  uint64_t v7 = 0;
  uint64_t v8 = a1;
  do
  {
    if (*(void *)(v8 + 8))
    {
      uint64_t v9 = [v4 colorAttachments];
      uint64_t v10 = [v9 objectAtIndexedSubscript:v7];
    }
    ++v7;
    v8 += 64;
  }
  while (v7 != 8);
  id v11 = [v4 depthAttachment];

  unint64_t v12 = [v4 stencilAttachment];

  [v4 setRenderTargetArrayLength:*(unsigned __int16 *)(a1 + 806)];
  if (objc_opt_respondsToSelector()) {
    [v4 setImageblockSampleLength:*(unsigned __int16 *)(a1 + 804)];
  }
  if (objc_opt_respondsToSelector()) {
    [v4 setThreadgroupMemoryLength:*(unsigned int *)(a1 + 800)];
  }
  if (objc_opt_respondsToSelector()) {
    [v4 setTileWidth:*(unsigned __int16 *)(a1 + 814)];
  }
  if (objc_opt_respondsToSelector()) {
    [v4 setTileHeight:*(unsigned __int16 *)(a1 + 812)];
  }
  if (objc_opt_respondsToSelector()) {
    [v4 setRenderTargetWidth:*(unsigned __int16 *)(a1 + 810)];
  }
  if (objc_opt_respondsToSelector()) {
    [v4 setRenderTargetHeight:*(unsigned __int16 *)(a1 + 808)];
  }
  if (objc_opt_respondsToSelector()) {
    [v4 setDefaultRasterSampleCount:*(unsigned __int8 *)(a1 + 816)];
  }
  if (objc_opt_respondsToSelector()) {
    [v4 setOpenGLModeEnabled:*(unsigned char *)(a1 + 818) != 0];
  }
  uint64_t v13 = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 784)];
  unsigned int v14 = [v3 objectForKeyedSubscript:v13];
  [v4 setRasterizationRateMap:v14];

  if (objc_opt_respondsToSelector()) {
    [v4 setDitherEnabled:*(unsigned char *)(a1 + 817) != 0];
  }
  if (objc_opt_respondsToSelector()) {
    [v4 setDefaultColorSampleCount:*(void *)(a1 + 776)];
  }
  if (objc_opt_respondsToSelector()) {
    [v4 setPointCoordYFlipEnabled:*(unsigned char *)(a1 + 819) != 0];
  }
  uint64_t v15 = 0;
  uint64_t v16 = (void *)(a1 + 512);
  do
  {
    if (v16[2])
    {
      uint64_t v17 = [v4 sampleBufferAttachments];
      uint64_t v18 = [v17 objectAtIndexedSubscript:v15];
    }
    ++v15;
    v16 += 5;
  }
  while (v15 != 4);
  if (objc_opt_respondsToSelector()) {
    [v4 setSkipEmptyTilesOnClearEnabled:*(unsigned char *)(a1 + 820) != 0];
  }

  return v4;
}

void TranslateGTMTLTextureDescriptor(void *a1, uint64_t a2, int a3)
{
  id v5 = a1;
  uint64_t v6 = *(void *)(a2 + 232);
  *(void *)(a2 + 232) = v6 + 56;
  id v9 = v5;
  if (a3)
  {
    *(_OWORD *)uint64_t v6 = GTMTLTextureDescriptorDefaults;
    *(_OWORD *)(v6 + 16) = unk_1DEC10;
    *(_OWORD *)(v6 + 32) = xmmword_1DEC20;
    *(void *)(v6 + 48) = 512;
    id v7 = v5;
    *(unsigned char *)(v6 + 49) = [v7 textureType];
    *(_WORD *)(v6 + 34) = (unsigned __int16)[v7 pixelFormat];
    *(_DWORD *)(v6 + 24) = [v7 width];
    *(_WORD *)(v6 + 32) = (unsigned __int16)[v7 height];
    *(_WORD *)(v6 + 3mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = (unsigned __int16)[v7 depth];
    *(unsigned char *)(v6 + 45) = [v7 mipmapLevelCount];
    *(unsigned char *)(v6 + 47) = [v7 sampleCount];
    *(_WORD *)(v6 + 28) = (unsigned __int16)[v7 arrayLength];
    *(unsigned char *)(v6 + 43) = [v7 framebufferOnly];
    *(unsigned char *)(v6 + 44) = [v7 isDrawable];
    *(_DWORD *)(v6 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = [v7 usage];
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(v6 + 46) = [v7 rotation];
    }
    *(_WORD *)(v6 + 36) = (unsigned __int16)[v7 resourceOptions];
    *(unsigned char *)(v6 + 38) = [v7 allowGPUOptimizedContents];
    if (objc_opt_respondsToSelector()) {
      *(void *)(v6 + 8) = [v7 resourceIndex];
    }
    *(unsigned char *)(v6 + 42) = [v7 forceResourceIndex];
    if (objc_opt_respondsToSelector()) {
      *(_DWORD *)(v6 + 16) = [v7 swizzleKey];
    }
    *(void *)uint64_t v6 = [v7 protectionOptions];
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(v6 + 48) = [v7 sparseSurfaceDefaultValue];
    }
    *(unsigned char *)(v6 + 5mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = [v7 writeSwizzleEnabled];
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(v6 + 41) = [v7 compressionType];
    }
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(v6 + 39) = [v7 compressionFootprint];
    }
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(v6 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = [v7 compressionMode];
    }
  }
  else
  {
    id v8 = v5;
  }
}

id MakeMTLTextureDescriptorWithoutResourceIndex(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)MTLTextureDescriptor);
  [v2 setTextureType:*(unsigned __int8 *)(a1 + 49)];
  [v2 setPixelFormat:*(unsigned __int16 *)(a1 + 34)];
  [v2 setWidth:*(unsigned int *)(a1 + 24)];
  [v2 setHeight:*(unsigned __int16 *)(a1 + 32)];
  [v2 setDepth:*(unsigned __int16 *)(a1 + 30)];
  [v2 setMipmapLevelCount:*(unsigned __int8 *)(a1 + 45)];
  [v2 setSampleCount:*(unsigned __int8 *)(a1 + 47)];
  [v2 setArrayLength:*(unsigned __int16 *)(a1 + 28)];
  [v2 setFramebufferOnly:*(unsigned char *)(a1 + 43) != 0];
  [v2 setIsDrawable:*(unsigned char *)(a1 + 44) != 0];
  [v2 setUsage:*(unsigned int *)(a1 + 20)];
  if (objc_opt_respondsToSelector()) {
    [v2 setRotation:*(unsigned __int8 *)(a1 + 46)];
  }
  [v2 setResourceOptions:*(unsigned __int16 *)(a1 + 36)];
  [v2 setAllowGPUOptimizedContents:*(unsigned char *)(a1 + 38) != 0];
  if (objc_opt_respondsToSelector()) {
    [v2 setSwizzleKey:*(unsigned int *)(a1 + 16)];
  }
  if (objc_opt_respondsToSelector()) {
    [v2 setSparseSurfaceDefaultValue:*(unsigned __int8 *)(a1 + 48)];
  }
  [v2 setWriteSwizzleEnabled:*(unsigned char *)(a1 + 50) != 0];
  if (objc_opt_respondsToSelector()) {
    [v2 setCompressionType:*(unsigned __int8 *)(a1 + 41)];
  }
  if (objc_opt_respondsToSelector()) {
    [v2 setCompressionFootprint:*(unsigned __int8 *)(a1 + 39)];
  }
  if (objc_opt_respondsToSelector()) {
    [v2 setCompressionMode:*(unsigned __int8 *)(a1 + 40)];
  }

  return v2;
}

id MakeMTLTextureDescriptorWithResourceIndex(uint64_t a1)
{
  id v2 = MakeMTLTextureDescriptorWithoutResourceIndex(a1);
  [v2 setForceResourceIndex:*(void *)(a1 + 8) != 0];
  [v2 setResourceIndex:*(void *)(a1 + 8)];

  return v2;
}

void TranslateGTMTLBufferDescriptor(void *a1, uint64_t a2, int a3)
{
  id v5 = a1;
  uint64_t v6 = *(void *)(a2 + 224);
  *(void *)(a2 + 224) = v6 + 40;
  if (a3)
  {
    *(void *)(v6 + 32) = 0;
    *(_OWORD *)uint64_t v6 = 0u;
    *(_OWORD *)(v6 + 16) = 0u;
    id v7 = v5;
    *(void *)uint64_t v6 = [v5 length];
    *(_WORD *)(v6 + 32) = (unsigned __int16)[v7 resourceOptions];
    *(unsigned char *)(v6 + 34) = [v7 noCopy];
    *(void *)(v6 + 24) = [v7 pinnedGPUAddress];
    *(void *)(v6 + 8) = [v7 parentGPUAddress];
    *(void *)(v6 + 16) = [v7 parentGPUSize];
    id v5 = v7;
  }
}

id MakeMTLBufferDescriptor(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)MTLBufferDescriptor);
  [v2 setLength:*(void *)a1];
  [v2 setResourceOptions:*(unsigned __int16 *)(a1 + 32)];
  [v2 setNoCopy:*(unsigned char *)(a1 + 34) != 0];

  return v2;
}

id MakeMTLBufferDescriptorWithBufferPinning(void *a1)
{
  id v2 = MakeMTLBufferDescriptor((uint64_t)a1);
  [v2 setPinnedGPUAddress:a1[3]];
  [v2 setParentGPUAddress:a1[1]];
  [v2 setParentGPUSize:a1[2]];

  return v2;
}

void TranslateGTMTLVertexBufferLayoutDescriptor(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4)
  {
    id v5 = a1;
    *(void *)a2 = [v5 stride];
    *(_WORD *)(a2 + 8) = (unsigned __int16)[v5 stepRate];
    unsigned __int8 v6 = [v5 stepFunction];

    *(unsigned char *)(a2 + 1mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v6;
  }
}

id MakeMTLVertexBufferLayoutDescriptor(void *a1, uint64_t a2)
{
  id v3 = a1;
  [v3 setStride:*(void *)a2];
  [v3 setStepRate:*(unsigned __int16 *)(a2 + 8)];
  [v3 setStepFunction:*(unsigned __int8 *)(a2 + 10)];

  return v3;
}

void TranslateGTMTLVertexAttributeDescriptor(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4)
  {
    id v5 = a1;
    *(unsigned char *)(a2 + 5) = [v5 format];
    *(_DWORD *)a2 = [v5 offset];
    unsigned __int8 v6 = [v5 bufferIndex];

    *(unsigned char *)(a2 + 4) = v6;
  }
}

id MakeMTLVertexAttributeDescriptor(void *a1, unsigned int *a2)
{
  id v3 = a1;
  [v3 setFormat:*((unsigned __int8 *)a2 + 5)];
  [v3 setOffset:*a2];
  [v3 setBufferIndex:*((unsigned __int8 *)a2 + 4)];

  return v3;
}

void TranslateGTMTLVertexDescriptor(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6 = 0;
  uint64_t v7 = a2;
  id v16 = a1;
  do
  {
    id v8 = [v16 layouts];
    id v9 = [v8 objectAtIndexedSubscript:v6];
    TranslateGTMTLVertexBufferLayoutDescriptor(v9, v7, v10, a4);

    ++v6;
    v7 += 16;
  }
  while (v6 != 31);
  uint64_t v11 = 0;
  uint64_t v12 = a2 + 496;
  do
  {
    uint64_t v13 = [v16 attributes];
    unsigned int v14 = [v13 objectAtIndexedSubscript:v11];
    TranslateGTMTLVertexAttributeDescriptor(v14, v12, v15, a4);

    ++v11;
    v12 += 8;
  }
  while (v11 != 31);
}

id MakeMTLVertexDescriptor(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v4 = 0;
  uint64_t v5 = a2;
  do
  {
    uint64_t v6 = [v3 layouts];
    uint64_t v7 = [v6 objectAtIndexedSubscript:v4];

    ++v4;
    v5 += 16;
  }
  while (v4 != 31);
  uint64_t v8 = 0;
  id v9 = (unsigned int *)(a2 + 496);
  do
  {
    uint64_t v10 = [v3 attributes];
    uint64_t v11 = [v10 objectAtIndexedSubscript:v8];

    ++v8;
    v9 += 2;
  }
  while (v8 != 31);

  return v3;
}

void TranslateGTMTLRenderPipelineColorAttachmentDescriptor(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4)
  {
    id v5 = a1;
    *(unsigned char *)(a2 + 3) = [v5 isBlendingEnabled];
    *(unsigned char *)(a2 + 8) = [v5 sourceRGBBlendFactor];
    *(unsigned char *)(a2 + 5) = [v5 destinationRGBBlendFactor];
    *(unsigned char *)(a2 + 6) = [v5 rgbBlendOperation];
    *(unsigned char *)(a2 + 7) = [v5 sourceAlphaBlendFactor];
    *(unsigned char *)(a2 + 4) = [v5 destinationAlphaBlendFactor];
    *(unsigned char *)(a2 + 2) = [v5 alphaBlendOperation];
    *(unsigned char *)(a2 + 9) = [v5 writeMask];
    unsigned __int16 v6 = (unsigned __int16)[v5 pixelFormat];

    *(_WORD *)a2 = v6;
  }
}

id MakeMTLRenderPipelineColorAttachmentDescriptor(void *a1, unsigned __int16 *a2)
{
  id v3 = a1;
  [v3 setBlendingEnabled:*((unsigned char *)a2 + 3) != 0];
  [v3 setSourceRGBBlendFactor:*((unsigned __int8 *)a2 + 8)];
  [v3 setDestinationRGBBlendFactor:*((unsigned __int8 *)a2 + 5)];
  [v3 setRgbBlendOperation:*((unsigned __int8 *)a2 + 6)];
  [v3 setSourceAlphaBlendFactor:*((unsigned __int8 *)a2 + 7)];
  [v3 setDestinationAlphaBlendFactor:*((unsigned __int8 *)a2 + 4)];
  [v3 setAlphaBlendOperation:*((unsigned __int8 *)a2 + 2)];
  [v3 setWriteMask:*((unsigned __int8 *)a2 + 9)];
  [v3 setPixelFormat:*a2];

  return v3;
}

void TranslateGTMTLLinkedFunctionsAuto(void *a1, uint64_t *a2, uint64_t a3, int a4)
{
  id v19 = a1;
  uint64_t v7 = [v19 functions];
  uint64_t v8 = TranslateNSArray(v7, a3, a4);

  id v9 = [v19 binaryFunctions];
  uint64_t v10 = TranslateNSArray(v9, a3, a4);

  uint64_t v11 = [v19 privateFunctions];
  uint64_t v12 = TranslateNSArray(v11, a3, a4);

  if (a4)
  {
    uint64_t v13 = [v19 functions];
    a2[3] = (uint64_t)[v13 count];

    if (a2[3]) {
      uint64_t v14 = v8;
    }
    else {
      uint64_t v14 = 0;
    }
    a2[2] = v14;
    uint64_t v15 = [v19 binaryFunctions];
    a2[1] = (uint64_t)[v15 count];

    if (a2[1]) {
      uint64_t v16 = v10;
    }
    else {
      uint64_t v16 = 0;
    }
    *a2 = v16;
    uint64_t v17 = [v19 privateFunctions];
    a2[7] = (uint64_t)[v17 count];

    if (a2[7]) {
      uint64_t v18 = v12;
    }
    else {
      uint64_t v18 = 0;
    }
    a2[6] = v18;
  }
}

uint64_t TranslateNSArray(void *a1, uint64_t a2, char a3)
{
  id v5 = a1;
  uint64_t v6 = *(void *)(a2 + 400);
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v7 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v15;
    do
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v15 != v9) {
          objc_enumerationMutation(v5);
        }
        if (a3)
        {
          unsigned int v11 = [*(id *)(*((void *)&v14 + 1) + 8 * (void)v10) streamReference];
          uint64_t v12 = *(void **)(a2 + 400);
          *uint64_t v12 = v11;
        }
        else
        {
          uint64_t v12 = *(void **)(a2 + 400);
        }
        *(void *)(a2 + 40mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v12 + 1;
        uint64_t v10 = (char *)v10 + 1;
      }
      while (v8 != v10);
      id v8 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v8);
  }

  return v6;
}

id MakeMTLLinkedFunctionsAuto(void *a1, uint64_t a2, void *a3)
{
  id v5 = a1;
  id v6 = a3;
  uint64_t v7 = *(void *)(a2 + 24);
  if (v7)
  {
    id v8 = CreateObjectArrayWithMap(*(uint64_t **)(a2 + 16), v7, v6);
    [v5 setFunctions:v8];
  }
  uint64_t v9 = *(void *)(a2 + 8);
  if (v9)
  {
    uint64_t v10 = CreateObjectArrayWithMap(*(uint64_t **)a2, v9, v6);
    [v5 setBinaryFunctions:v10];
  }
  uint64_t v11 = *(void *)(a2 + 56);
  if (v11)
  {
    uint64_t v12 = CreateObjectArrayWithMap(*(uint64_t **)(a2 + 48), v11, v6);
    [v5 setPrivateFunctions:v12];
  }

  return v5;
}

id CreateObjectArrayWithMap(uint64_t *a1, int a2, void *a3)
{
  id v5 = a3;
  id v6 = [objc_alloc((Class)NSMutableArray) initWithCapacity:a2];
  if (a2 >= 1)
  {
    uint64_t v7 = a2;
    do
    {
      uint64_t v8 = *a1++;
      uint64_t v9 = +[NSNumber numberWithUnsignedLongLong:v8];
      uint64_t v10 = [v5 objectForKeyedSubscript:v9];

      if (v10) {
        [v6 addObject:v10];
      }

      --v7;
    }
    while (v7);
  }
  id v11 = [v6 copy];

  return v11;
}

id TranslateGTMTLPipelineBufferDescriptor(id result, unsigned char *a2, uint64_t a3, int a4)
{
  if (a4)
  {
    id result = [result mutability];
    *a2 = (_BYTE)result;
  }
  return result;
}

id MakeMTLPipelineBufferDescriptor(void *a1, unsigned __int8 *a2)
{
  id v3 = a1;
  [v3 setMutability:*a2];

  return v3;
}

void TranslateGTMTLRenderPipelineDescriptor(void *a1, void *a2, int a3)
{
  id v5 = a1;
  uint64_t v6 = a2[27];
  a2[27] = v6 + 1512;
  if (a3) {
    memcpy((void *)v6, &GTMTLRenderPipelineDescriptorDefaults, 0x5E8uLL);
  }
  id v75 = v5;
  uint64_t v7 = [v75 vertexDescriptor];
  TranslateGTMTLVertexDescriptor(v7, v6, v8, a3);

  uint64_t v9 = 0;
  uint64_t v10 = v6 + 744;
  do
  {
    id v11 = [v75 colorAttachments];
    uint64_t v12 = [v11 objectAtIndexedSubscript:v9];
    TranslateGTMTLRenderPipelineColorAttachmentDescriptor(v12, v10, v13, a3);

    ++v9;
    v10 += 16;
  }
  while (v9 != 8);
  id v14 = [v75 label];
  long long v15 = (const char *)[v14 UTF8String];
  long long v16 = v15;
  if (v15)
  {
    size_t v17 = strlen(v15);
    uint64_t v18 = a2 + 52;
    uint64_t v19 = a2[52];
    size_t v20 = v17 + 1;
    if (v17 != -1)
    {
      uint64_t v21 = (void *)a2[52];
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v18 = a2 + 52;
    uint64_t v19 = a2[52];
  }
  size_t v20 = 0;
  uint64_t v21 = 0;
LABEL_10:
  *uint64_t v18 = v19 + v20;
  if (a3) {
    memcpy(v21, v16, v20);
  }

  for (uint64_t i = 0; i != 31; ++i)
  {
    uint64_t v23 = [v75 vertexBuffers];
    uint64_t v24 = [v23 objectAtIndexedSubscript:i];
    id v25 = v24;
    if (a3) {
      *(unsigned char *)(v6 + 1447 + i) = [v24 mutability];
    }
  }
  uint64_t v26 = 0;
  int64x2_t v27 = v75;
  do
  {
    uint64_t v28 = [v27 fragmentBuffers];
    uint64_t v29 = [v28 objectAtIndexedSubscript:v26];
    uint64_t v30 = v29;
    if (a3) {
      *(unsigned char *)(v6 + 1354 + v26) = [v29 mutability];
    }

    ++v26;
    int64x2_t v27 = v75;
  }
  while (v26 != 31);
  id v31 = [v75 pluginData];
  id v32 = GTMTLDescriptorAllocator_copyDictionary((uint64_t)a2, v31, a3);
  uint64_t v73 = v33;
  CGFloat v74 = v32;

  id v34 = [v75 driverCompilerOptions];
  double v35 = GTMTLDescriptorAllocator_copyDictionary((uint64_t)a2, v34, a3);
  uint64_t v37 = v36;

  id v38 = [v75 vertexPreloadedLibraries];
  uint64_t v71 = TranslateNSArray(v38, (uint64_t)a2, a3);

  id v39 = [v75 fragmentPreloadedLibraries];
  uint64_t v72 = TranslateNSArray(v39, (uint64_t)a2, a3);

  int64x2_t v40 = [v75 vertexLinkedFunctions];
  TranslateGTMTLLinkedFunctions(v40, (uint64_t *)(v6 + 1064), a2, a3);

  uint64_t v41 = [v75 fragmentLinkedFunctions];
  TranslateGTMTLLinkedFunctions(v41, (uint64_t *)(v6 + 872), a2, a3);

  for (uint64_t j = 0; j != 31; ++j)
  {
    uint64_t v43 = [v75 objectBuffers];
    int v44 = [v43 objectAtIndexedSubscript:j];
    uint64_t v45 = v44;
    if (a3) {
      *(unsigned char *)(v6 + 1416 + j) = [v44 mutability];
    }
  }
  uint64_t v46 = 0;
  id v47 = v75;
  do
  {
    id v48 = [v47 meshBuffers];
    uint64_t v49 = [v48 objectAtIndexedSubscript:v46];
    SEL v50 = v49;
    if (a3) {
      *(unsigned char *)(v6 + 1385 + v46) = [v49 mutability];
    }

    ++v46;
    id v47 = v75;
  }
  while (v46 != 31);
  uint64_t v51 = [v75 objectPreloadedLibraries];
  uint64_t v52 = TranslateNSArray(v51, (uint64_t)a2, a3);

  unsigned int v53 = [v75 meshPreloadedLibraries];
  uint64_t v54 = TranslateNSArray(v53, (uint64_t)a2, a3);

  id v55 = [v75 objectLinkedFunctions];
  TranslateGTMTLLinkedFunctions(v55, (uint64_t *)(v6 + 1000), a2, a3);

  id v56 = [v75 meshLinkedFunctions];
  TranslateGTMTLLinkedFunctions(v56, (uint64_t *)(v6 + 936), a2, a3);

  if (a3)
  {
    id v57 = [v75 vertexFunction];
    *(void *)(v6 + 1296) = [v57 streamReference];

    id v58 = [v75 fragmentFunction];
    *(void *)(v6 + 1176) = [v58 streamReference];

    *(void *)(v6 + 1272) = [v75 rasterSampleCount];
    *(void *)(v6 + 1288) = [v75 sampleMask];
    [v75 sampleCoverage];
    *(_DWORD *)(v6 + 1332) = v59;
    *(unsigned char *)(v6 + 148mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = [v75 isAlphaToCoverageEnabled];
    *(unsigned char *)(v6 + 1481) = [v75 isAlphaToOneEnabled];
    *(unsigned char *)(v6 + 1493) = [v75 isRasterizationEnabled];
    *(_WORD *)(v6 + 134mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = (unsigned __int16)[v75 depthAttachmentPixelFormat];
    *(_WORD *)(v6 + 1352) = (unsigned __int16)[v75 stencilAttachmentPixelFormat];
    *(void *)(v6 + 120mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v21;
    *(unsigned char *)(v6 + 1485) = [v75 inputPrimitiveTopology];
    *(unsigned char *)(v6 + 1505) = [v75 tessellationPartitionMode];
    *(void *)(v6 + 1208) = [v75 maxTessellationFactor];
    *(unsigned char *)(v6 + 1502) = [v75 isTessellationFactorScaleEnabled];
    *(unsigned char *)(v6 + 1501) = [v75 tessellationFactorFormat];
    *(unsigned char *)(v6 + 150mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = [v75 tessellationControlPointIndexType];
    *(unsigned char *)(v6 + 1503) = [v75 tessellationFactorStepFunction];
    *(unsigned char *)(v6 + 1504) = [v75 tessellationOutputWindingOrder];
    *(unsigned char *)(v6 + 1499) = [v75 supportIndirectCommandBuffers];
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(v6 + 1507) = [v75 vertexAmplificationMode];
    }
    if (objc_opt_respondsToSelector()) {
      *(_DWORD *)(v6 + 1328) = [v75 maxVertexAmplificationCount];
    }
    if (objc_opt_respondsToSelector())
    {
      id v60 = [v75 pipelineLibrary];
      *(void *)(v6 + 1264) = [v60 streamReference];
    }
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(v6 + 1486) = [v75 logicOperation];
    }
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(v6 + 1479) = [v75 alphaTestFunction];
    }
    if (objc_opt_respondsToSelector()) {
      *(_DWORD *)(v6 + 1336) = [v75 vertexDepthCompareClampMask];
    }
    if (objc_opt_respondsToSelector()) {
      *(_DWORD *)(v6 + 1324) = [v75 fragmentDepthCompareClampMask];
    }
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(v6 + 1487) = [v75 isLogicOperationEnabled];
    }
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(v6 + 1489) = [v75 openGLModeEnabled];
    }
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(v6 + 149mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = [v75 isPointCoordLowerLeft];
    }
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(v6 + 1491) = [v75 isPointSizeOutputVS];
    }
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(v6 + 1506) = [v75 isTwoSideEnabled];
    }
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(v6 + 1478) = [v75 isAlphaTestEnabled];
    }
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(v6 + 1492) = [v75 isPointSmoothEnabled];
    }
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(v6 + 1482) = [v75 clipDistanceEnableMask];
    }
    if (objc_opt_respondsToSelector()) {
      *(void *)(v6 + 128mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = [v75 resourceIndex];
    }
    if (objc_opt_respondsToSelector()) {
      *(void *)(v6 + 116mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = [v75 colorSampleCount];
    }
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(v6 + 1494) = [v75 sampleCoverageInvert];
    }
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(v6 + 1488) = [v75 needsCustomBorderColorSamplers];
    }
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(v6 + 1483) = [v75 isDepthStencilWriteDisabled];
    }
    *(unsigned char *)(v6 + 1484) = [v75 forceSoftwareVertexFetch];
    *(void *)(v6 + 1144) = v74;
    *(void *)(v6 + 1152) = v73;
    *(void *)(v6 + 1128) = v35;
    *(void *)(v6 + 1136) = v37;
    id v61 = [v75 vertexPreloadedLibraries];
    *(void *)(v6 + 1312) = [v61 count];

    uint64_t v62 = v71;
    if (!*(void *)(v6 + 1312)) {
      uint64_t v62 = 0;
    }
    *(void *)(v6 + 1304) = v62;
    id v63 = [v75 fragmentPreloadedLibraries];
    *(void *)(v6 + 1192) = [v63 count];

    uint64_t v64 = v72;
    if (!*(void *)(v6 + 1192)) {
      uint64_t v64 = 0;
    }
    *(void *)(v6 + 1184) = v64;
    if (objc_opt_respondsToSelector())
    {
      uint64_t v65 = [v75 objectFunction];
      *(void *)(v6 + 124mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = [v65 streamReference];
    }
    if (objc_opt_respondsToSelector())
    {
      double v66 = [v75 meshFunction];
      *(void *)(v6 + 1216) = [v66 streamReference];
    }
    CGFloat v67 = [v75 objectPreloadedLibraries];
    *(void *)(v6 + 1256) = [v67 count];

    if (*(void *)(v6 + 1256)) {
      uint64_t v68 = v52;
    }
    else {
      uint64_t v68 = 0;
    }
    *(void *)(v6 + 1248) = v68;
    CGFloat v69 = [v75 meshPreloadedLibraries];
    *(void *)(v6 + 1232) = [v69 count];

    if (*(void *)(v6 + 1232)) {
      uint64_t v70 = v54;
    }
    else {
      uint64_t v70 = 0;
    }
    *(void *)(v6 + 1224) = v70;
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(v6 + 1498) = [v75 supportAddingVertexBinaryFunctions];
    }
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(v6 + 1495) = [v75 supportAddingFragmentBinaryFunctions];
    }
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(v6 + 1497) = [v75 supportAddingObjectBinaryFunctions];
    }
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(v6 + 1496) = [v75 supportAddingMeshBinaryFunctions];
    }
    if (objc_opt_respondsToSelector()) {
      *(_DWORD *)(v6 + 132mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = [v75 explicitVisibilityGroupID];
    }
    if (objc_opt_respondsToSelector()) {
      *(_WORD *)(v6 + 135mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = (unsigned __int16)[v75 maxVertexCallStackDepth];
    }
    if (objc_opt_respondsToSelector()) {
      *(_WORD *)(v6 + 1344) = (unsigned __int16)[v75 maxFragmentCallStackDepth];
    }
    if (objc_opt_respondsToSelector()) {
      *(_WORD *)(v6 + 1348) = (unsigned __int16)[v75 maxObjectCallStackDepth];
    }
    if (objc_opt_respondsToSelector()) {
      *(_WORD *)(v6 + 1346) = (unsigned __int16)[v75 maxMeshCallStackDepth];
    }
    if (objc_opt_respondsToSelector()) {
      *(_WORD *)(v6 + 1342) = (unsigned __int16)[v75 maxAccelerationStructureTraversalDepth];
    }
  }
}

void *GTMTLDescriptorAllocator_copyDictionary(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  if (v5)
  {
    id v14 = 0;
    uint64_t v7 = +[NSKeyedArchiver archivedDataWithRootObject:v5 requiringSecureCoding:1 error:&v14];
    id v8 = v14;
    id v9 = v7;
    id v10 = [v9 bytes];
    size_t v11 = (size_t)[v9 length];

    if (v11) {
      uint64_t v12 = *(void **)(a1 + 416);
    }
    else {
      uint64_t v12 = 0;
    }
    *(void *)(a1 + 416) += v11;
    if (a3) {
      memcpy(v12, v10, v11);
    }
  }
  else
  {
    uint64_t v12 = 0;
  }

  return v12;
}

void TranslateGTMTLLinkedFunctions(void *a1, uint64_t *a2, void *a3, int a4)
{
  id v7 = a1;
  int64x2_t v27 = a2;
  TranslateGTMTLLinkedFunctionsAuto(v7, a2, (uint64_t)a3, a4);
  uint64_t v26 = a3[42];
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  id obj = [v7 groups];
  id v8 = [obj countByEnumeratingWithState:&v29 objects:v33 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v30;
    do
    {
      for (uint64_t i = 0; i != v9; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v30 != v10) {
          objc_enumerationMutation(obj);
        }
        id v12 = *(id *)(*((void *)&v29 + 1) + 8 * i);
        uint64_t v13 = (const char *)[v12 UTF8String];
        id v14 = v13;
        if (v13)
        {
          size_t v15 = strlen(v13);
          uint64_t v16 = a3[52];
          size_t v17 = v15 + 1;
          if (v15 != -1)
          {
            uint64_t v18 = (void *)a3[52];
            goto LABEL_11;
          }
        }
        else
        {
          uint64_t v16 = a3[52];
        }
        size_t v17 = 0;
        uint64_t v18 = 0;
LABEL_11:
        a3[52] = v16 + v17;
        if (a4) {
          memcpy(v18, v14, v17);
        }
        uint64_t v19 = [v7 groups];
        size_t v20 = [v19 objectForKeyedSubscript:v12];
        uint64_t v21 = TranslateNSArray(v20, (uint64_t)a3, a4);

        uint64_t v22 = a3[42];
        a3[42] = v22 + 24;
        if (a4)
        {
          unint64_t v23 = (unint64_t)(a3[50] - v21) >> 3;
          *(_DWORD *)(v22 + 16) = v23;
          if (v23) {
            uint64_t v24 = v21;
          }
          else {
            uint64_t v24 = 0;
          }
          *(void *)uint64_t v22 = v18;
          *(void *)(v22 + 8) = v24;
        }
      }
      id v9 = [obj countByEnumeratingWithState:&v29 objects:v33 count:16];
    }
    while (v9);
  }

  if (a4)
  {
    unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((a3[42] - v26) >> 3);
    v27[4] = v26;
    v27[5] = v25;
  }
}

id MakeMTLRenderPipelineDescriptorWithoutResourceIndex(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)MTLRenderPipelineDescriptor);
  id v5 = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 1296)];
  uint64_t v6 = [v3 objectForKeyedSubscript:v5];
  [v4 setVertexFunction:v6];

  id v7 = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 1176)];
  id v8 = [v3 objectForKeyedSubscript:v7];
  [v4 setFragmentFunction:v8];

  id v9 = [v4 vertexDescriptor];

  [v4 setRasterSampleCount:*(void *)(a1 + 1272)];
  [v4 setSampleMask:*(void *)(a1 + 1288)];
  LODWORD(v1mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *(_DWORD *)(a1 + 1332);
  [v4 setSampleCoverage:v10];
  [v4 setAlphaToCoverageEnabled:*(unsigned char *)(a1 + 1480) != 0];
  [v4 setAlphaToOneEnabled:*(unsigned char *)(a1 + 1481) != 0];
  [v4 setRasterizationEnabled:*(unsigned char *)(a1 + 1493) != 0];
  [v4 setDepthAttachmentPixelFormat:*(unsigned __int16 *)(a1 + 1340)];
  [v4 setStencilAttachmentPixelFormat:*(unsigned __int16 *)(a1 + 1352)];
  uint64_t v11 = 0;
  id v12 = (unsigned __int16 *)(a1 + 744);
  do
  {
    uint64_t v13 = [v4 colorAttachments];
    id v14 = [v13 objectAtIndexedSubscript:v11];

    ++v11;
    v12 += 8;
  }
  while (v11 != 8);
  if (*(void *)(a1 + 1200))
  {
    size_t v15 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:");
    [v4 setLabel:v15];
  }
  [v4 setInputPrimitiveTopology:*(unsigned __int8 *)(a1 + 1485)];
  [v4 setTessellationPartitionMode:*(unsigned __int8 *)(a1 + 1505)];
  [v4 setMaxTessellationFactor:*(void *)(a1 + 1208)];
  [v4 setTessellationFactorScaleEnabled:*(unsigned char *)(a1 + 1502) != 0];
  [v4 setTessellationFactorFormat:*(unsigned __int8 *)(a1 + 1501)];
  [v4 setTessellationControlPointIndexType:*(unsigned __int8 *)(a1 + 1500)];
  [v4 setTessellationFactorStepFunction:*(unsigned __int8 *)(a1 + 1503)];
  [v4 setTessellationOutputWindingOrder:*(unsigned __int8 *)(a1 + 1504)];
  for (uint64_t i = 0; i != 31; ++i)
  {
    size_t v17 = [v4 vertexBuffers];
    id v18 = [v17 objectAtIndexedSubscript:i];
    [v18 setMutability:*(unsigned __int8 *)(a1 + 1447 + i)];
  }
  for (uint64_t j = 0; j != 31; ++j)
  {
    size_t v20 = [v4 fragmentBuffers];
    id v21 = [v20 objectAtIndexedSubscript:j];
    [v21 setMutability:*(unsigned __int8 *)(a1 + 1354 + j)];
  }
  [v4 setSupportIndirectCommandBuffers:*(unsigned char *)(a1 + 1499) != 0];
  if (objc_opt_respondsToSelector()) {
    [v4 setVertexAmplificationMode:*(unsigned __int8 *)(a1 + 1507)];
  }
  if (objc_opt_respondsToSelector()) {
    [v4 setMaxVertexAmplificationCount:*(unsigned int *)(a1 + 1328)];
  }
  uint64_t v22 = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 1264)];
  unint64_t v23 = [v3 objectForKeyedSubscript:v22];
  [v4 setPipelineLibrary:v23];

  if (objc_opt_respondsToSelector()) {
    [v4 setLogicOperation:*(unsigned __int8 *)(a1 + 1486)];
  }
  if (objc_opt_respondsToSelector()) {
    [v4 setAlphaTestFunction:*(unsigned __int8 *)(a1 + 1479)];
  }
  if (objc_opt_respondsToSelector()) {
    [v4 setVertexDepthCompareClampMask:*(unsigned int *)(a1 + 1336)];
  }
  if (objc_opt_respondsToSelector()) {
    [v4 setFragmentDepthCompareClampMask:*(unsigned int *)(a1 + 1324)];
  }
  if (objc_opt_respondsToSelector()) {
    [v4 setLogicOperationEnabled:*(unsigned char *)(a1 + 1487) != 0];
  }
  if (objc_opt_respondsToSelector()) {
    [v4 setOpenGLModeEnabled:*(unsigned char *)(a1 + 1489) != 0];
  }
  if (objc_opt_respondsToSelector()) {
    [v4 setPointCoordLowerLeft:*(unsigned char *)(a1 + 1490) != 0];
  }
  if (objc_opt_respondsToSelector()) {
    [v4 setPointSizeOutputVS:*(unsigned char *)(a1 + 1491) != 0];
  }
  if (objc_opt_respondsToSelector()) {
    [v4 setTwoSideEnabled:*(unsigned char *)(a1 + 1506) != 0];
  }
  if (objc_opt_respondsToSelector()) {
    [v4 setAlphaTestEnabled:*(unsigned char *)(a1 + 1478) != 0];
  }
  if (objc_opt_respondsToSelector()) {
    [v4 setPointSmoothEnabled:*(unsigned char *)(a1 + 1492) != 0];
  }
  if (objc_opt_respondsToSelector()) {
    [v4 setClipDistanceEnableMask:*(unsigned __int8 *)(a1 + 1482)];
  }
  if (objc_opt_respondsToSelector()) {
    [v4 setColorSampleCount:*(void *)(a1 + 1160)];
  }
  if (objc_opt_respondsToSelector()) {
    [v4 setSampleCoverageInvert:*(unsigned char *)(a1 + 1494) != 0];
  }
  if (objc_opt_respondsToSelector()) {
    [v4 setNeedsCustomBorderColorSamplers:*(unsigned char *)(a1 + 1488) != 0];
  }
  if (objc_opt_respondsToSelector()) {
    [v4 setDepthStencilWriteDisabled:*(unsigned char *)(a1 + 1483) != 0];
  }
  [v4 setForceSoftwareVertexFetch:*(unsigned char *)(a1 + 1484) != 0];
  uint64_t v24 = GTData_MakeDictionary(*(void *)(a1 + 1144), *(void *)(a1 + 1152));
  [v4 setPluginData:v24];

  unint64_t v25 = GTData_MakeDictionary(*(void *)(a1 + 1128), *(void *)(a1 + 1136));
  [v4 setDriverCompilerOptions:v25];

  uint64_t v26 = *(void *)(a1 + 1312);
  if (v26)
  {
    int64x2_t v27 = CreateObjectArrayWithMap(*(uint64_t **)(a1 + 1304), v26, v3);
    [v4 setVertexPreloadedLibraries:v27];
  }
  uint64_t v28 = *(void *)(a1 + 1192);
  if (v28)
  {
    long long v29 = CreateObjectArrayWithMap(*(uint64_t **)(a1 + 1184), v28, v3);
    [v4 setFragmentPreloadedLibraries:v29];
  }
  long long v30 = [v4 vertexLinkedFunctions];
  MakeMTLLinkedFunctions(v30, (void *)(a1 + 1064), v3);

  long long v31 = [v4 fragmentLinkedFunctions];
  MakeMTLLinkedFunctions(v31, (void *)(a1 + 872), v3);

  long long v32 = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 1240)];
  uint64_t v33 = [v3 objectForKeyedSubscript:v32];
  [v4 setObjectFunction:v33];

  id v34 = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 1216)];
  double v35 = [v3 objectForKeyedSubscript:v34];
  [v4 setMeshFunction:v35];

  for (uint64_t k = 0; k != 31; ++k)
  {
    uint64_t v37 = [v4 objectBuffers];
    id v38 = [v37 objectAtIndexedSubscript:k];
    [v38 setMutability:*(unsigned __int8 *)(a1 + 1416 + k)];
  }
  for (uint64_t m = 0; m != 31; ++m)
  {
    int64x2_t v40 = [v4 meshBuffers];
    id v41 = [v40 objectAtIndexedSubscript:m];
    [v41 setMutability:*(unsigned __int8 *)(a1 + 1385 + m)];
  }
  uint64_t v42 = *(void *)(a1 + 1256);
  if (v42)
  {
    uint64_t v43 = CreateObjectArrayWithMap(*(uint64_t **)(a1 + 1248), v42, v3);
    [v4 setObjectPreloadedLibraries:v43];
  }
  uint64_t v44 = *(void *)(a1 + 1232);
  if (v44)
  {
    uint64_t v45 = CreateObjectArrayWithMap(*(uint64_t **)(a1 + 1224), v44, v3);
    [v4 setMeshPreloadedLibraries:v45];
  }
  uint64_t v46 = [v4 objectLinkedFunctions];
  MakeMTLLinkedFunctions(v46, (void *)(a1 + 1000), v3);

  id v47 = [v4 meshLinkedFunctions];
  MakeMTLLinkedFunctions(v47, (void *)(a1 + 936), v3);

  if (objc_opt_respondsToSelector()) {
    [v4 setSupportAddingVertexBinaryFunctions:*(unsigned char *)(a1 + 1498) != 0];
  }
  if (objc_opt_respondsToSelector()) {
    [v4 setSupportAddingFragmentBinaryFunctions:*(unsigned char *)(a1 + 1495) != 0];
  }
  if (objc_opt_respondsToSelector()) {
    [v4 setSupportAddingObjectBinaryFunctions:*(unsigned char *)(a1 + 1497) != 0];
  }
  if (objc_opt_respondsToSelector()) {
    [v4 setSupportAddingMeshBinaryFunctions:*(unsigned char *)(a1 + 1496) != 0];
  }
  if (objc_opt_respondsToSelector()) {
    [v4 setExplicitVisibilityGroupID:*(unsigned int *)(a1 + 1320)];
  }
  if (objc_opt_respondsToSelector()) {
    [v4 setMaxVertexCallStackDepth:*(unsigned __int16 *)(a1 + 1350)];
  }
  if (objc_opt_respondsToSelector()) {
    [v4 setMaxFragmentCallStackDepth:*(unsigned __int16 *)(a1 + 1344)];
  }
  if (objc_opt_respondsToSelector()) {
    [v4 setMaxObjectCallStackDepth:*(unsigned __int16 *)(a1 + 1348)];
  }
  if (objc_opt_respondsToSelector()) {
    [v4 setMaxMeshCallStackDepth:*(unsigned __int16 *)(a1 + 1346)];
  }
  if (objc_opt_respondsToSelector()) {
    [v4 setMaxAccelerationStructureTraversalDepth:*(unsigned __int16 *)(a1 + 1342)];
  }
  id v48 = v4;

  return v48;
}

id GTData_MakeDictionary(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v4 = objc_opt_class();
    uint64_t v5 = objc_opt_class();
    uint64_t v6 = objc_opt_class();
    uint64_t v7 = objc_opt_class();
    id v8 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v4, v5, v6, v7, objc_opt_class(), 0);
    id v9 = +[NSData dataWithBytesNoCopy:a1 length:a2 freeWhenDone:0];
    id v18 = 0;
    double v10 = +[NSKeyedUnarchiver unarchivedObjectOfClasses:v8 fromData:v9 error:&v18];
    id v11 = v18;

    if (v11)
    {
      if (s_logUsingOsLog)
      {
        id v12 = gt_default_log();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          id v13 = [v11 localizedDescription];
          id v14 = [v13 UTF8String];
          *(_DWORD *)buf = 136315138;
          id v20 = v14;
          _os_log_error_impl(&def_CFBEC, v12, OS_LOG_TYPE_ERROR, "warning: %s", buf, 0xCu);
        }
      }
      else
      {
        size_t v15 = __stderrp;
        id v12 = [v11 localizedDescription];
        id v16 = +[NSString stringWithFormat:@"warning: %s", [v12 UTF8String]];
        fprintf(v15, "%s\n", (const char *)[v16 UTF8String]);
      }
    }
  }
  else
  {
    double v10 = 0;
  }

  return v10;
}

void MakeMTLLinkedFunctions(void *a1, void *a2, void *a3)
{
  id v13 = a1;
  id v5 = a3;
  if (a2[7] + a2[3] + a2[1] + a2[5])
  {
    id v6 = MakeMTLLinkedFunctionsAuto(v13, (uint64_t)a2, v5);
    if (a2[5])
    {
      id v7 = [objc_alloc((Class)NSMutableDictionary) initWithCapacity:a2[5]];
      if (a2[5])
      {
        uint64_t v8 = 0;
        unint64_t v9 = 0;
        do
        {
          double v10 = +[NSString stringWithUTF8String:*(void *)(a2[4] + v8)];
          id v11 = CreateObjectArrayWithMap(*(uint64_t **)(a2[4] + v8 + 8), *(_DWORD *)(a2[4] + v8 + 16), v5);
          [v7 setObject:v11 forKeyedSubscript:v10];

          ++v9;
          v8 += 24;
        }
        while (a2[5] > v9);
      }
      id v12 = [v7 copy];
      [v13 setGroups:v12];
    }
  }
}

id MakeMTLRenderPipelineDescriptorWithResourceIndex(uint64_t a1, void *a2)
{
  id v3 = MakeMTLRenderPipelineDescriptorWithoutResourceIndex(a1, a2);
  uint64_t v4 = v3;
  if (*(unsigned char *)(a1 + 1499)) {
    [v3 setResourceIndex:*(void *)(a1 + 1280)];
  }

  return v4;
}

void TranslateGTMTLMeshRenderPipelineDescriptor(void *a1, void *a2, int a3)
{
  id v5 = a1;
  uint64_t v6 = a2[26];
  a2[26] = v6 + 512;
  if (a3) {
    memcpy((void *)v6, &GTMTLMeshRenderPipelineDescriptorDefaults, 0x200uLL);
  }
  id v7 = v5;
  id v8 = [v7 label];
  unint64_t v9 = (const char *)[v8 UTF8String];
  double v10 = v9;
  if (v9)
  {
    size_t v11 = strlen(v9);
    id v12 = a2 + 52;
    uint64_t v13 = a2[52];
    size_t v14 = v11 + 1;
    if (v11 != -1)
    {
      size_t v15 = (void *)a2[52];
      goto LABEL_8;
    }
  }
  else
  {
    id v12 = a2 + 52;
    uint64_t v13 = a2[52];
  }
  size_t v14 = 0;
  size_t v15 = 0;
LABEL_8:
  *id v12 = v13 + v14;
  if (a3) {
    memcpy(v15, v10, v14);
  }

  for (uint64_t i = 0; i != 31; ++i)
  {
    size_t v17 = [v7 objectBuffers];
    id v18 = [v17 objectAtIndexedSubscript:i];
    uint64_t v19 = v18;
    if (a3) {
      *(unsigned char *)(v6 + 472 + i) = [v18 mutability];
    }
  }
  for (uint64_t j = 0; j != 31; ++j)
  {
    id v21 = [v7 meshBuffers];
    uint64_t v22 = [v21 objectAtIndexedSubscript:j];
    unint64_t v23 = v22;
    if (a3) {
      *(unsigned char *)(v6 + 441 + j) = [v22 mutability];
    }
  }
  for (uint64_t k = 0; k != 31; ++k)
  {
    unint64_t v25 = [v7 fragmentBuffers];
    uint64_t v26 = [v25 objectAtIndexedSubscript:k];
    int64x2_t v27 = v26;
    if (a3) {
      *(unsigned char *)(v6 + 410 + k) = [v26 mutability];
    }
  }
  uint64_t v28 = 0;
  uint64_t v29 = v6;
  do
  {
    long long v30 = [v7 colorAttachments];
    long long v31 = [v30 objectAtIndexedSubscript:v28];
    TranslateGTMTLRenderPipelineColorAttachmentDescriptor(v31, v29, v32, a3);

    ++v28;
    v29 += 16;
  }
  while (v28 != 8);
  uint64_t v33 = [v7 objectLinkedFunctions];
  TranslateGTMTLLinkedFunctions(v33, (uint64_t *)(v6 + 256), a2, a3);

  id v34 = [v7 meshLinkedFunctions];
  TranslateGTMTLLinkedFunctions(v34, (uint64_t *)(v6 + 192), a2, a3);

  double v35 = [v7 fragmentLinkedFunctions];
  TranslateGTMTLLinkedFunctions(v35, (uint64_t *)(v6 + 128), a2, a3);

  if (a3)
  {
    *(void *)(v6 + 352) = v15;
    uint64_t v36 = [v7 objectFunction];
    *(void *)(v6 + 368) = [v36 streamReference];

    uint64_t v37 = [v7 meshFunction];
    *(void *)(v6 + 36mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = [v37 streamReference];

    id v38 = [v7 fragmentFunction];
    *(void *)(v6 + 344) = [v38 streamReference];

    if (objc_opt_respondsToSelector()) {
      *(_WORD *)(v6 + 406) = (unsigned __int16)[v7 maxTotalThreadsPerObjectThreadgroup];
    }
    if (objc_opt_respondsToSelector()) {
      *(_WORD *)(v6 + 404) = (unsigned __int16)[v7 maxTotalThreadsPerMeshThreadgroup];
    }
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(v6 + 507) = [v7 objectThreadgroupSizeIsMultipleOfThreadExecutionWidth];
    }
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(v6 + 506) = [v7 meshThreadgroupSizeIsMultipleOfThreadExecutionWidth];
    }
    *(void *)(v6 + 376) = [v7 payloadMemoryLength];
    if (v7)
    {
      [v7 maxThreadgroupsPerMeshGrid];
      long long v39 = v41;
      uint64_t v40 = v42;
    }
    else
    {
      uint64_t v40 = 0;
      uint64_t v42 = 0;
      long long v39 = 0uLL;
      long long v41 = 0u;
    }
    *(_OWORD *)(v6 + 32mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v39;
    *(void *)(v6 + 336) = v40;
    *(unsigned char *)(v6 + 508) = objc_msgSend(v7, "rasterSampleCount", v41, v42);
    *(unsigned char *)(v6 + 503) = [v7 isAlphaToCoverageEnabled];
    *(unsigned char *)(v6 + 504) = [v7 isAlphaToOneEnabled];
    *(unsigned char *)(v6 + 509) = [v7 isRasterizationEnabled];
    if (objc_opt_respondsToSelector()) {
      *(_DWORD *)(v6 + 396) = [v7 maxVertexAmplificationCount];
    }
    *(_WORD *)(v6 + 40mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = (unsigned __int16)[v7 depthAttachmentPixelFormat];
    *(_WORD *)(v6 + 408) = (unsigned __int16)[v7 stencilAttachmentPixelFormat];
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(v6 + 51mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = [v7 supportIndirectCommandBuffers];
    }
    if (objc_opt_respondsToSelector()) {
      *(_DWORD *)(v6 + 392) = [v7 explicitVisibilityGroupID];
    }
    if (objc_opt_respondsToSelector()) {
      *(_WORD *)(v6 + 402) = (unsigned __int16)[v7 maxAccelerationStructureTraversalDepth];
    }
    *(void *)(v6 + 384) = [v7 resourceIndex];
  }
}

id MakeMTLMeshRenderPipelineDescriptorWithoutResourceIndex(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)MTLMeshRenderPipelineDescriptor);
  if (*(void *)(a1 + 352))
  {
    id v5 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:");
    [v4 setLabel:v5];
  }
  uint64_t v6 = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 368)];
  id v7 = [v3 objectForKeyedSubscript:v6];
  [v4 setObjectFunction:v7];

  id v8 = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 360)];
  unint64_t v9 = [v3 objectForKeyedSubscript:v8];
  [v4 setMeshFunction:v9];

  double v10 = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 344)];
  size_t v11 = [v3 objectForKeyedSubscript:v10];
  [v4 setFragmentFunction:v11];

  if (objc_opt_respondsToSelector()) {
    [v4 setMaxTotalThreadsPerObjectThreadgroup:*(unsigned __int16 *)(a1 + 406)];
  }
  if (objc_opt_respondsToSelector()) {
    [v4 setMaxTotalThreadsPerMeshThreadgroup:*(unsigned __int16 *)(a1 + 404)];
  }
  if (objc_opt_respondsToSelector()) {
    [v4 setObjectThreadgroupSizeIsMultipleOfThreadExecutionWidth:*(unsigned char *)(a1 + 507) != 0];
  }
  if (objc_opt_respondsToSelector()) {
    [v4 setMeshThreadgroupSizeIsMultipleOfThreadExecutionWidth:*(unsigned char *)(a1 + 506) != 0];
  }
  [v4 setPayloadMemoryLength:*(void *)(a1 + 376)];
  uint64_t v12 = *(void *)(a1 + 336);
  long long v30 = *(_OWORD *)(a1 + 320);
  uint64_t v31 = v12;
  [v4 setMaxThreadgroupsPerMeshGrid:&v30];
  for (uint64_t i = 0; i != 31; ++i)
  {
    size_t v14 = [v4 objectBuffers];
    size_t v15 = [v14 objectAtIndexedSubscript:i];
    [v15 setMutability:*(unsigned __int8 *)(a1 + 472 + i)];
  }
  for (uint64_t j = 0; j != 31; ++j)
  {
    size_t v17 = [v4 meshBuffers];
    id v18 = [v17 objectAtIndexedSubscript:j];
    [v18 setMutability:*(unsigned __int8 *)(a1 + 441 + j)];
  }
  for (uint64_t k = 0; k != 31; ++k)
  {
    id v20 = [v4 fragmentBuffers];
    id v21 = [v20 objectAtIndexedSubscript:k];
    [v21 setMutability:*(unsigned __int8 *)(a1 + 410 + k)];
  }
  [v4 setRasterSampleCount:*(unsigned __int8 *)(a1 + 508)];
  [v4 setAlphaToCoverageEnabled:*(unsigned char *)(a1 + 503) != 0];
  [v4 setAlphaToOneEnabled:*(unsigned char *)(a1 + 504) != 0];
  [v4 setRasterizationEnabled:*(unsigned char *)(a1 + 509) != 0];
  if (objc_opt_respondsToSelector()) {
    [v4 setMaxVertexAmplificationCount:*(unsigned int *)(a1 + 396)];
  }
  uint64_t v22 = 0;
  unint64_t v23 = (unsigned __int16 *)a1;
  do
  {
    uint64_t v24 = [v4 colorAttachments];
    unint64_t v25 = [v24 objectAtIndexedSubscript:v22];

    ++v22;
    v23 += 8;
  }
  while (v22 != 8);
  [v4 setDepthAttachmentPixelFormat:*(unsigned __int16 *)(a1 + 400)];
  [v4 setStencilAttachmentPixelFormat:*(unsigned __int16 *)(a1 + 408)];
  if (objc_opt_respondsToSelector()) {
    [v4 setSupportIndirectCommandBuffers:*(unsigned char *)(a1 + 510) != 0];
  }
  if (objc_opt_respondsToSelector()) {
    [v4 setExplicitVisibilityGroupID:*(unsigned int *)(a1 + 392)];
  }
  uint64_t v26 = [v4 objectLinkedFunctions];
  MakeMTLLinkedFunctions(v26, (void *)(a1 + 256), v3);

  int64x2_t v27 = [v4 meshLinkedFunctions];
  MakeMTLLinkedFunctions(v27, (void *)(a1 + 192), v3);

  uint64_t v28 = [v4 fragmentLinkedFunctions];
  MakeMTLLinkedFunctions(v28, (void *)(a1 + 128), v3);

  if (objc_opt_respondsToSelector()) {
    [v4 setMaxAccelerationStructureTraversalDepth:*(unsigned __int16 *)(a1 + 402)];
  }

  return v4;
}

id MakeMTLMeshRenderPipelineDescriptorWithResourceIndex(uint64_t a1, void *a2)
{
  id v3 = MakeMTLMeshRenderPipelineDescriptorWithoutResourceIndex(a1, a2);
  id v4 = v3;
  if (*(unsigned char *)(a1 + 510)) {
    [v3 setResourceIndex:*(void *)(a1 + 384)];
  }

  return v4;
}

void TranslateGTMTLStencilDescriptor(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4)
  {
    id v5 = a1;
    *(unsigned char *)(a2 + 1mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = [v5 stencilCompareFunction];
    *(unsigned char *)(a2 + 11) = [v5 stencilFailureOperation];
    *(unsigned char *)(a2 + 8) = [v5 depthFailureOperation];
    *(unsigned char *)(a2 + 9) = [v5 depthStencilPassOperation];
    *(_DWORD *)a2 = [v5 readMask];
    unsigned int v6 = [v5 writeMask];

    *(_DWORD *)(a2 + 4) = v6;
  }
}

id MakeMTLStencilDescriptor(void *a1, unsigned int *a2)
{
  id v3 = a1;
  [v3 setStencilCompareFunction:*((unsigned __int8 *)a2 + 10)];
  [v3 setStencilFailureOperation:*((unsigned __int8 *)a2 + 11)];
  [v3 setDepthFailureOperation:*((unsigned __int8 *)a2 + 8)];
  [v3 setDepthStencilPassOperation:*((unsigned __int8 *)a2 + 9)];
  [v3 setReadMask:*a2];
  [v3 setWriteMask:a2[1]];

  return v3;
}

void TranslateGTMTLDepthStencilDescriptor(void *a1, uint64_t a2, int a3)
{
  id v5 = a1;
  uint64_t v6 = *(void *)(a2 + 200);
  *(void *)(a2 + 20mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v6 + 48;
  if (a3)
  {
    *(_OWORD *)uint64_t v6 = GTMTLDepthStencilDescriptorDefaults;
    *(_OWORD *)(v6 + 16) = unk_1DF458;
    *(_OWORD *)(v6 + 32) = xmmword_1DF468;
  }
  id v24 = v5;
  id v7 = [v5 label];
  id v8 = (const char *)[v7 UTF8String];
  unint64_t v9 = v8;
  if (v8)
  {
    size_t v10 = strlen(v8);
    size_t v11 = (void *)(a2 + 416);
    uint64_t v12 = *(void *)(a2 + 416);
    size_t v13 = v10 + 1;
    if (v10 != -1)
    {
      size_t v14 = *(void **)(a2 + 416);
      goto LABEL_8;
    }
  }
  else
  {
    size_t v11 = (void *)(a2 + 416);
    uint64_t v12 = *(void *)(a2 + 416);
  }
  size_t v13 = 0;
  size_t v14 = 0;
LABEL_8:
  *size_t v11 = v12 + v13;
  if (a3)
  {
    memcpy(v14, v9, v13);

    size_t v15 = [v24 frontFaceStencil];
    TranslateGTMTLStencilDescriptor(v15, v6 + 16, v16, a3);

    size_t v17 = [v24 backFaceStencil];
    TranslateGTMTLStencilDescriptor(v17, v6, v18, a3);

    *(unsigned char *)(v6 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = [v24 depthCompareFunction];
    *(unsigned char *)(v6 + 41) = [v24 isDepthWriteEnabled];
    uint64_t v19 = v24;
    *(void *)(v6 + 32) = v14;
  }
  else
  {

    id v20 = [v24 frontFaceStencil];
    TranslateGTMTLStencilDescriptor(v20, v6 + 16, v21, 0);

    uint64_t v22 = [v24 backFaceStencil];
    TranslateGTMTLStencilDescriptor(v22, v6, v23, 0);

    uint64_t v19 = v24;
  }
}

id MakeMTLDepthStencilDescriptor(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)MTLDepthStencilDescriptor);
  [v2 setDepthCompareFunction:*(unsigned __int8 *)(a1 + 40)];
  [v2 setDepthWriteEnabled:*(unsigned char *)(a1 + 41) != 0];
  if (*(void *)(a1 + 32))
  {
    id v3 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:");
    [v2 setLabel:v3];
  }
  id v4 = [v2 frontFaceStencil];

  id v5 = [v2 backFaceStencil];

  return v2;
}

void TranslateGTMTLSamplerDescriptor(void *a1, uint64_t a2, int a3)
{
  id v5 = a1;
  uint64_t v6 = *(void *)(a2 + 192);
  *(void *)(a2 + 192) = v6 + 64;
  if (a3)
  {
    *(_OWORD *)uint64_t v6 = GTMTLSamplerDescriptorDefaults;
    *(_OWORD *)(v6 + 16) = unk_1DF488;
    *(_OWORD *)(v6 + 32) = xmmword_1DF498;
    *(_OWORD *)(v6 + 48) = unk_1DF4A8;
  }
  id v17 = v5;
  id v7 = [v17 label];
  id v8 = (const char *)[v7 UTF8String];
  unint64_t v9 = v8;
  if (v8)
  {
    size_t v10 = strlen(v8);
    size_t v11 = (void *)(a2 + 416);
    uint64_t v12 = *(void *)(a2 + 416);
    size_t v13 = v10 + 1;
    if (v10 != -1)
    {
      size_t v14 = *(void **)(a2 + 416);
      goto LABEL_8;
    }
  }
  else
  {
    size_t v11 = (void *)(a2 + 416);
    uint64_t v12 = *(void *)(a2 + 416);
  }
  size_t v13 = 0;
  size_t v14 = 0;
LABEL_8:
  *size_t v11 = v12 + v13;
  if (a3)
  {
    memcpy(v14, v9, v13);

    *(unsigned char *)(v6 + 56) = [v17 minFilter];
    *(unsigned char *)(v6 + 55) = [v17 magFilter];
    *(unsigned char *)(v6 + 57) = [v17 mipFilter];
    *(void *)(v6 + 8) = [v17 maxAnisotropy];
    *(unsigned char *)(v6 + 61) = [v17 sAddressMode];
    *(unsigned char *)(v6 + 63) = [v17 tAddressMode];
    *(unsigned char *)(v6 + 59) = [v17 rAddressMode];
    *(unsigned char *)(v6 + 58) = [v17 normalizedCoordinates];
    [v17 lodMinClamp];
    *(_DWORD *)(v6 + 44) = v15;
    [v17 lodMaxClamp];
    *(_DWORD *)(v6 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v16;
    *(void *)uint64_t v6 = v14;
    *(unsigned char *)(v6 + 54) = [v17 lodAverage];
    *(unsigned char *)(v6 + 51) = [v17 compareFunction];
    *(unsigned char *)(v6 + 5mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = [v17 borderColor];
    *(unsigned char *)(v6 + 62) = [v17 supportArgumentBuffers];
    if (objc_opt_respondsToSelector()) {
      *(void *)(v6 + 16) = [v17 resourceIndex];
    }
    *(unsigned char *)(v6 + 52) = [v17 forceResourceIndex];
    if (objc_opt_respondsToSelector()) {
      *(_DWORD *)(v6 + 24) = [v17 customBorderColorValue];
    }
    if (objc_opt_respondsToSelector()) {
      *(_DWORD *)(v6 + 28) = [v17 customBorderColorValue];
    }
    if (objc_opt_respondsToSelector()) {
      *(_DWORD *)(v6 + 32) = [v17 customBorderColorValue];
    }
    if (objc_opt_respondsToSelector()) {
      *(_DWORD *)(v6 + 36) = [v17 customBorderColorValue];
    }
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(v6 + 53) = [v17 forceSeamsOnCubemapFiltering];
    }
    if (objc_opt_respondsToSelector()) {
      *(_WORD *)(v6 + 48) = (unsigned __int16)[v17 pixelFormat];
    }
  }
  else
  {
  }
}

id MakeMTLSamplerDescriptorWithoutResourceIndex(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)MTLSamplerDescriptor);
  [v2 setMinFilter:*(unsigned __int8 *)(a1 + 56)];
  [v2 setMagFilter:*(unsigned __int8 *)(a1 + 55)];
  [v2 setMipFilter:*(unsigned __int8 *)(a1 + 57)];
  [v2 setMaxAnisotropy:*(void *)(a1 + 8)];
  [v2 setSAddressMode:*(unsigned __int8 *)(a1 + 61)];
  [v2 setTAddressMode:*(unsigned __int8 *)(a1 + 63)];
  [v2 setRAddressMode:*(unsigned __int8 *)(a1 + 59)];
  [v2 setNormalizedCoordinates:*(unsigned char *)(a1 + 58) != 0];
  LODWORD(v3) = *(_DWORD *)(a1 + 44);
  [v2 setLodMinClamp:v3];
  LODWORD(v4) = *(_DWORD *)(a1 + 40);
  [v2 setLodMaxClamp:v4];
  if (*(void *)a1)
  {
    id v5 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:");
    [v2 setLabel:v5];
  }
  [v2 setLodAverage:*(unsigned char *)(a1 + 54) != 0];
  [v2 setCompareFunction:*(unsigned __int8 *)(a1 + 51)];
  [v2 setBorderColor:*(unsigned __int8 *)(a1 + 50)];
  [v2 setSupportArgumentBuffers:*(unsigned char *)(a1 + 62) != 0];
  if (objc_opt_respondsToSelector()) {
    objc_msgSend(v2, "setCustomBorderColorValue_0:", *(unsigned int *)(a1 + 24));
  }
  if (objc_opt_respondsToSelector()) {
    objc_msgSend(v2, "setCustomBorderColorValue_1:", *(unsigned int *)(a1 + 28));
  }
  if (objc_opt_respondsToSelector()) {
    objc_msgSend(v2, "setCustomBorderColorValue_2:", *(unsigned int *)(a1 + 32));
  }
  if (objc_opt_respondsToSelector()) {
    objc_msgSend(v2, "setCustomBorderColorValue_3:", *(unsigned int *)(a1 + 36));
  }
  if (objc_opt_respondsToSelector()) {
    [v2 setForceSeamsOnCubemapFiltering:*(unsigned char *)(a1 + 53) != 0];
  }
  if (objc_opt_respondsToSelector()) {
    [v2 setPixelFormat:*(unsigned __int16 *)(a1 + 48)];
  }

  return v2;
}

id MakeMTLSamplerDescriptorWithResourceIndex(uint64_t a1)
{
  id v2 = MakeMTLSamplerDescriptorWithoutResourceIndex(a1);
  [v2 setForceResourceIndex:*(void *)(a1 + 16) != 0];
  [v2 setResourceIndex:*(void *)(a1 + 16)];

  return v2;
}

void TranslateGTMTLHeapDescriptor(void *a1, uint64_t a2, int a3)
{
  id v5 = a1;
  uint64_t v6 = *(void *)(a2 + 184);
  *(void *)(a2 + 184) = v6 + 24;
  id v9 = v5;
  if (a3)
  {
    *(_OWORD *)uint64_t v6 = GTMTLHeapDescriptorDefaults;
    *(void *)(v6 + 16) = 32;
    id v7 = v5;
    *(void *)(v6 + 8) = [v7 size];
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(v6 + 19) = [v7 type];
    }
    if (objc_opt_respondsToSelector()) {
      *(_WORD *)(v6 + 16) = (unsigned __int16)[v7 resourceOptions];
    }
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(v6 + 18) = [v7 sparsePageSize];
    }
    if (objc_opt_respondsToSelector()) {
      *(void *)uint64_t v6 = [v7 pinnedGPUAddress];
    }
  }
  else
  {
    id v8 = v5;
  }
}

id MakeMTLHeapDescriptor(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)MTLHeapDescriptor);
  [v2 setSize:*(void *)(a1 + 8)];
  if (objc_opt_respondsToSelector()) {
    [v2 setType:*(unsigned __int8 *)(a1 + 19)];
  }
  if (objc_opt_respondsToSelector()) {
    [v2 setResourceOptions:*(unsigned __int16 *)(a1 + 16)];
  }
  if (objc_opt_respondsToSelector()) {
    [v2 setSparsePageSize:*(unsigned __int8 *)(a1 + 18)];
  }

  return v2;
}

id MakeMTLHeapDescriptorWithBufferPinning(void *a1)
{
  id v2 = MakeMTLHeapDescriptor((uint64_t)a1);
  [v2 setPinnedGPUAddress:*a1];

  return v2;
}

void TranslateGTMTLIndirectCommandBufferDescriptorAuto(void *a1, uint64_t a2, int a3)
{
  id v5 = a1;
  uint64_t v6 = *(void *)(a2 + 176);
  *(void *)(a2 + 176) = v6 + 24;
  id v9 = v5;
  if (a3)
  {
    *(void *)uint64_t v6 = 0;
    *(void *)(v6 + 8) = 0;
    *(void *)(v6 + 16) = 0;
    id v7 = v5;
    *(_WORD *)(v6 + 8) = (unsigned __int16)[v7 commandTypes];
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(v6 + 11) = [v7 inheritPipelineState];
    }
    *(unsigned char *)(v6 + 1mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = [v7 inheritBuffers];
    *(unsigned char *)(v6 + 18) = [v7 maxVertexBufferBindCount];
    *(unsigned char *)(v6 + 12) = [v7 maxFragmentBufferBindCount];
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(v6 + 13) = [v7 maxKernelBufferBindCount];
    }
    *(void *)uint64_t v6 = [v7 resourceIndex];
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(v6 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = [v7 supportRayTracing];
    }
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(v6 + 16) = [v7 maxObjectBufferBindCount];
    }
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(v6 + 15) = [v7 maxMeshBufferBindCount];
    }
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(v6 + 17) = [v7 maxObjectThreadgroupMemoryBindCount];
    }
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(v6 + 19) = [v7 supportDynamicAttributeStride];
    }
  }
  else
  {
    id v8 = v5;
  }
}

id MakeMTLIndirectCommandBufferDescriptorWithoutResourceIndex(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)MTLIndirectCommandBufferDescriptor);
  [v2 setCommandTypes:*(unsigned __int16 *)(a1 + 8)];
  if (objc_opt_respondsToSelector()) {
    [v2 setInheritPipelineState:*(unsigned char *)(a1 + 11) != 0];
  }
  [v2 setInheritBuffers:*(unsigned char *)(a1 + 10) != 0];
  [v2 setMaxVertexBufferBindCount:*(unsigned __int8 *)(a1 + 18)];
  [v2 setMaxFragmentBufferBindCount:*(unsigned __int8 *)(a1 + 12)];
  if (objc_opt_respondsToSelector()) {
    [v2 setMaxKernelBufferBindCount:*(unsigned __int8 *)(a1 + 13)];
  }
  if (objc_opt_respondsToSelector()) {
    [v2 setMaxKernelThreadgroupMemoryBindCount:*(unsigned __int8 *)(a1 + 14)];
  }
  if (objc_opt_respondsToSelector()) {
    [v2 setSupportRayTracing:*(unsigned char *)(a1 + 20) != 0];
  }
  if (objc_opt_respondsToSelector()) {
    [v2 setMaxObjectBufferBindCount:*(unsigned __int8 *)(a1 + 16)];
  }
  if (objc_opt_respondsToSelector()) {
    [v2 setMaxMeshBufferBindCount:*(unsigned __int8 *)(a1 + 15)];
  }
  if (objc_opt_respondsToSelector()) {
    [v2 setMaxObjectThreadgroupMemoryBindCount:*(unsigned __int8 *)(a1 + 17)];
  }
  if (objc_opt_respondsToSelector()) {
    [v2 setSupportDynamicAttributeStride:*(unsigned char *)(a1 + 19) != 0];
  }

  return v2;
}

id MakeMTLIndirectCommandBufferDescriptorWithResourceIndex(void *a1)
{
  id v2 = MakeMTLIndirectCommandBufferDescriptorWithoutResourceIndex((uint64_t)a1);
  [v2 setResourceIndex:*a1];

  return v2;
}

void TranslateGTMTLAttributeDescriptor(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4)
  {
    id v5 = a1;
    *(unsigned char *)(a2 + 5) = [v5 format];
    *(_DWORD *)a2 = [v5 offset];
    unsigned __int8 v6 = [v5 bufferIndex];

    *(unsigned char *)(a2 + 4) = v6;
  }
}

id MakeMTLAttributeDescriptor(void *a1, unsigned int *a2)
{
  id v3 = a1;
  [v3 setFormat:*((unsigned __int8 *)a2 + 5)];
  [v3 setOffset:*a2];
  [v3 setBufferIndex:*((unsigned __int8 *)a2 + 4)];

  return v3;
}

void TranslateGTMTLBufferLayoutDescriptor(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4)
  {
    id v5 = a1;
    *(void *)a2 = [v5 stride];
    *(_WORD *)(a2 + 8) = (unsigned __int16)[v5 stepRate];
    unsigned __int8 v6 = [v5 stepFunction];

    *(unsigned char *)(a2 + 1mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v6;
  }
}

id MakeMTLBufferLayoutDescriptor(void *a1, uint64_t a2)
{
  id v3 = a1;
  [v3 setStride:*(void *)a2];
  [v3 setStepRate:*(unsigned __int16 *)(a2 + 8)];
  [v3 setStepFunction:*(unsigned __int8 *)(a2 + 10)];

  return v3;
}

void TranslateGTMTLStageInputOutputDescriptor(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6 = 0;
  uint64_t v7 = a2;
  id v17 = a1;
  do
  {
    id v8 = [v17 layouts];
    id v9 = [v8 objectAtIndexedSubscript:v6];
    TranslateGTMTLBufferLayoutDescriptor(v9, v7, v10, a4);

    ++v6;
    v7 += 16;
  }
  while (v6 != 31);
  uint64_t v11 = 0;
  uint64_t v12 = a2 + 496;
  do
  {
    size_t v13 = [v17 attributes];
    size_t v14 = [v13 objectAtIndexedSubscript:v11];
    TranslateGTMTLAttributeDescriptor(v14, v12, v15, a4);

    int v16 = v17;
    ++v11;
    v12 += 8;
  }
  while (v11 != 31);
  if (a4)
  {
    *(unsigned char *)(a2 + 745) = [v17 indexType];
    *(unsigned char *)(a2 + 744) = [v17 indexBufferIndex];
    int v16 = v17;
  }
}

id MakeMTLStageInputOutputDescriptor(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v4 = 0;
  uint64_t v5 = a2;
  do
  {
    uint64_t v6 = [v3 layouts];
    uint64_t v7 = [v6 objectAtIndexedSubscript:v4];

    ++v4;
    v5 += 16;
  }
  while (v4 != 31);
  uint64_t v8 = 0;
  id v9 = (unsigned int *)(a2 + 496);
  do
  {
    uint64_t v10 = [v3 attributes];
    uint64_t v11 = [v10 objectAtIndexedSubscript:v8];

    ++v8;
    v9 += 2;
  }
  while (v8 != 31);
  [v3 setIndexType:*(unsigned __int8 *)(a2 + 745)];
  [v3 setIndexBufferIndex:*(unsigned __int8 *)(a2 + 744)];

  return v3;
}

void TranslateGTMTLComputePipelineDescriptorAuto(void *a1, void *a2, int a3)
{
  id v5 = a1;
  uint64_t v6 = a2[21];
  a2[21] = v6 + 960;
  if (a3) {
    memcpy((void *)v6, &GTMTLComputePipelineDescriptorDefaults, 0x3C0uLL);
  }
  id v40 = v5;
  id v7 = [v40 label];
  uint64_t v8 = (const char *)[v7 UTF8String];
  id v9 = v8;
  if (v8)
  {
    size_t v10 = strlen(v8);
    uint64_t v11 = a2 + 52;
    uint64_t v12 = a2[52];
    size_t v13 = v10 + 1;
    if (v10 != -1)
    {
      size_t v14 = (void *)a2[52];
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v11 = a2 + 52;
    uint64_t v12 = a2[52];
  }
  size_t v13 = 0;
  size_t v14 = 0;
LABEL_8:
  *uint64_t v11 = v12 + v13;
  if (a3) {
    memcpy(v14, v9, v13);
  }

  uint64_t v15 = [v40 stageInputDescriptor];
  TranslateGTMTLStageInputOutputDescriptor(v15, v6, v16, a3);

  for (uint64_t i = 0; i != 31; ++i)
  {
    uint64_t v18 = [v40 buffers];
    uint64_t v19 = [v18 objectAtIndexedSubscript:i];
    id v20 = v19;
    if (a3) {
      *(unsigned char *)(v6 + 920 + i) = [v19 mutability];
    }
  }
  uint64_t v21 = [v40 functionPointers];
  uint64_t v22 = TranslateNSArray(v21, (uint64_t)a2, a3);

  uint64_t v23 = [v40 pluginData];
  id v24 = GTMTLDescriptorAllocator_copyDictionary((uint64_t)a2, v23, a3);
  uint64_t v26 = v25;

  int64x2_t v27 = [v40 driverCompilerOptions];
  uint64_t v28 = GTMTLDescriptorAllocator_copyDictionary((uint64_t)a2, v27, a3);
  uint64_t v30 = v29;

  uint64_t v31 = [v40 linkedFunctions];
  TranslateGTMTLLinkedFunctions(v31, (uint64_t *)(v6 + 752), a2, a3);

  uint64_t v32 = [v40 preloadedLibraries];
  uint64_t v33 = TranslateNSArray(v32, (uint64_t)a2, a3);

  if (a3)
  {
    id v34 = [v40 computeFunction];
    *(void *)(v6 + 848) = [v34 streamReference];

    *(unsigned char *)(v6 + 958) = [v40 threadGroupSizeIsMultipleOfThreadExecutionWidth];
    *(void *)(v6 + 872) = v14;
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(v6 + 956) = [v40 supportIndirectCommandBuffers];
    }
    *(_WORD *)(v6 + 918) = (unsigned __int16)[v40 maxTotalThreadsPerThreadgroup];
    if (objc_opt_respondsToSelector())
    {
      double v35 = [v40 pipelineLibrary];
      *(void *)(v6 + 88mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = [v35 streamReference];
    }
    uint64_t v36 = [v40 functionPointers];
    *(void *)(v6 + 864) = [v36 count];

    if (*(void *)(v6 + 864)) {
      uint64_t v37 = v22;
    }
    else {
      uint64_t v37 = 0;
    }
    *(void *)(v6 + 856) = v37;
    if (objc_opt_respondsToSelector()) {
      *(void *)(v6 + 904) = [v40 resourceIndex];
    }
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(v6 + 957) = [v40 textureWriteRoundingMode];
    }
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(v6 + 954) = [v40 openGLModeEnabled];
    }
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(v6 + 953) = [v40 openCLModeEnabled];
    }
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(v6 + 952) = [v40 needsCustomBorderColorSamplers];
    }
    *(void *)(v6 + 832) = v24;
    *(void *)(v6 + 84mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v26;
    *(void *)(v6 + 816) = v28;
    *(void *)(v6 + 824) = v30;
    if (objc_opt_respondsToSelector()) {
      *(_WORD *)(v6 + 916) = (unsigned __int16)[v40 maxCallStackDepth];
    }
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(v6 + 955) = [v40 supportAddingBinaryFunctions];
    }
    id v38 = [v40 preloadedLibraries];
    *(void *)(v6 + 896) = [v38 count];

    if (*(void *)(v6 + 896)) {
      uint64_t v39 = v33;
    }
    else {
      uint64_t v39 = 0;
    }
    *(void *)(v6 + 888) = v39;
    if (objc_opt_respondsToSelector()) {
      *(_WORD *)(v6 + 914) = (unsigned __int16)[v40 maxAccelerationStructureTraversalDepth];
    }
  }
}

id MakeMTLComputePipelineDescriptorWithoutResourceIndex(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)MTLComputePipelineDescriptor);
  id v5 = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 848)];
  uint64_t v6 = [v3 objectForKeyedSubscript:v5];
  [v4 setComputeFunction:v6];

  [v4 setThreadGroupSizeIsMultipleOfThreadExecutionWidth:*(unsigned char *)(a1 + 958) != 0];
  if (*(void *)(a1 + 872))
  {
    id v7 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:");
    [v4 setLabel:v7];
  }
  uint64_t v8 = [v4 stageInputDescriptor];

  for (uint64_t i = 0; i != 31; ++i)
  {
    size_t v10 = [v4 buffers];
    uint64_t v11 = [v10 objectAtIndexedSubscript:i];
    [v11 setMutability:*(unsigned __int8 *)(a1 + 920 + i)];
  }
  if (objc_opt_respondsToSelector()) {
    [v4 setSupportIndirectCommandBuffers:*(unsigned char *)(a1 + 956) != 0];
  }
  [v4 setMaxTotalThreadsPerThreadgroup:*(unsigned __int16 *)(a1 + 918)];
  uint64_t v12 = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 880)];
  size_t v13 = [v3 objectForKeyedSubscript:v12];
  [v4 setPipelineLibrary:v13];

  uint64_t v14 = *(void *)(a1 + 864);
  if (v14)
  {
    uint64_t v15 = CreateObjectArrayWithMap(*(uint64_t **)(a1 + 856), v14, v3);
    [v4 setFunctionPointers:v15];
  }
  if (objc_opt_respondsToSelector()) {
    [v4 setTextureWriteRoundingMode:*(unsigned __int8 *)(a1 + 957)];
  }
  if (objc_opt_respondsToSelector()) {
    [v4 setOpenGLModeEnabled:*(unsigned char *)(a1 + 954) != 0];
  }
  if (objc_opt_respondsToSelector()) {
    [v4 setOpenCLModeEnabled:*(unsigned char *)(a1 + 953) != 0];
  }
  if (objc_opt_respondsToSelector()) {
    [v4 setNeedsCustomBorderColorSamplers:*(unsigned char *)(a1 + 952) != 0];
  }
  uint64_t v16 = GTData_MakeDictionary(*(void *)(a1 + 832), *(void *)(a1 + 840));
  [v4 setPluginData:v16];

  id v17 = GTData_MakeDictionary(*(void *)(a1 + 816), *(void *)(a1 + 824));
  [v4 setDriverCompilerOptions:v17];

  if (objc_opt_respondsToSelector()) {
    [v4 setMaxCallStackDepth:*(unsigned __int16 *)(a1 + 916)];
  }
  if (objc_opt_respondsToSelector()) {
    [v4 setSupportAddingBinaryFunctions:*(unsigned char *)(a1 + 955) != 0];
  }
  uint64_t v18 = [v4 linkedFunctions];
  MakeMTLLinkedFunctions(v18, (void *)(a1 + 752), v3);

  uint64_t v19 = *(void *)(a1 + 896);
  if (v19)
  {
    id v20 = CreateObjectArrayWithMap(*(uint64_t **)(a1 + 888), v19, v3);
    [v4 setPreloadedLibraries:v20];
  }
  if (objc_opt_respondsToSelector()) {
    [v4 setMaxAccelerationStructureTraversalDepth:*(unsigned __int16 *)(a1 + 914)];
  }

  return v4;
}

id MakeMTLComputePipelineDescriptorWithResourceIndex(uint64_t a1, void *a2)
{
  id v3 = MakeMTLComputePipelineDescriptorWithoutResourceIndex(a1, a2);
  id v4 = v3;
  if (*(unsigned char *)(a1 + 956)) {
    [v3 setResourceIndex:*(void *)(a1 + 904)];
  }

  return v4;
}

id TranslateGTMTLTileRenderPipelineColorAttachmentDescriptor(id result, _WORD *a2, uint64_t a3, int a4)
{
  if (a4)
  {
    id result = [result pixelFormat];
    *a2 = (_WORD)result;
  }
  return result;
}

id MakeMTLTileRenderPipelineColorAttachmentDescriptor(void *a1, unsigned __int16 *a2)
{
  id v3 = a1;
  [v3 setPixelFormat:*a2];

  return v3;
}

void TranslateGTMTLTileRenderPipelineDescriptor(void *a1, void *a2, int a3)
{
  id v5 = a1;
  uint64_t v6 = a2[20];
  a2[20] = v6 + 176;
  if (a3)
  {
    *(_OWORD *)(v6 + 128) = xmmword_1DF928;
    *(_OWORD *)(v6 + 144) = unk_1DF938;
    *(_OWORD *)(v6 + 16mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = xmmword_1DF948;
    *(_OWORD *)(v6 + 64) = xmmword_1DF8E8;
    *(_OWORD *)(v6 + 8mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = unk_1DF8F8;
    *(_OWORD *)(v6 + 96) = xmmword_1DF908;
    *(_OWORD *)(v6 + 112) = unk_1DF918;
    *(_OWORD *)uint64_t v6 = GTMTLTileRenderPipelineDescriptorDefaults;
    *(_OWORD *)(v6 + 16) = unk_1DF8B8;
    *(_OWORD *)(v6 + 32) = xmmword_1DF8C8;
    *(_OWORD *)(v6 + 48) = unk_1DF8D8;
  }
  id v34 = v5;
  id v7 = [v34 label];
  uint64_t v8 = (const char *)[v7 UTF8String];
  id v9 = v8;
  if (v8)
  {
    size_t v10 = strlen(v8);
    uint64_t v11 = a2 + 52;
    uint64_t v12 = a2[52];
    size_t v13 = v10 + 1;
    if (v10 != -1)
    {
      uint64_t v14 = (void *)a2[52];
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v11 = a2 + 52;
    uint64_t v12 = a2[52];
  }
  size_t v13 = 0;
  uint64_t v14 = 0;
LABEL_8:
  *uint64_t v11 = v12 + v13;
  if (a3) {
    memcpy(v14, v9, v13);
  }

  for (uint64_t i = 0; i != 8; ++i)
  {
    uint64_t v16 = [v34 colorAttachments];
    id v17 = [v16 objectAtIndexedSubscript:i];
    uint64_t v18 = v17;
    if (a3) {
      *(_WORD *)(v6 + 2 * i + 64) = (unsigned __int16)[v17 pixelFormat];
    }
  }
  uint64_t v19 = 0;
  id v20 = v34;
  do
  {
    uint64_t v21 = [v20 tileBuffers];
    uint64_t v22 = [v21 objectAtIndexedSubscript:v19];
    uint64_t v23 = v22;
    if (a3) {
      *(unsigned char *)(v6 + v19 + 136) = [v22 mutability];
    }

    ++v19;
    id v20 = v34;
  }
  while (v19 != 31);
  id v24 = [v34 pluginData];
  uint64_t v25 = GTMTLDescriptorAllocator_copyDictionary((uint64_t)a2, v24, a3);
  uint64_t v27 = v26;

  uint64_t v28 = [v34 preloadedLibraries];
  uint64_t v29 = TranslateNSArray(v28, (uint64_t)a2, a3);

  uint64_t v30 = [v34 linkedFunctions];
  TranslateGTMTLLinkedFunctions(v30, (uint64_t *)v6, a2, a3);

  if (a3)
  {
    *(void *)(v6 + 96) = v14;
    uint64_t v31 = [v34 tileFunction];
    *(void *)(v6 + 12mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = [v31 streamReference];

    *(_WORD *)(v6 + 134) = (unsigned __int16)[v34 rasterSampleCount];
    *(unsigned char *)(v6 + 169) = [v34 threadgroupSizeMatchesTileSize];
    *(void *)(v6 + 8mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v25;
    *(void *)(v6 + 88) = v27;
    uint64_t v32 = [v34 preloadedLibraries];
    *(void *)(v6 + 112) = [v32 count];

    if (*(void *)(v6 + 112)) {
      uint64_t v33 = v29;
    }
    else {
      uint64_t v33 = 0;
    }
    *(void *)(v6 + 104) = v33;
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(v6 + 168) = [v34 supportAddingBinaryFunctions];
    }
    if (objc_opt_respondsToSelector()) {
      *(_WORD *)(v6 + 13mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = (unsigned __int16)[v34 maxCallStackDepth];
    }
    if (objc_opt_respondsToSelector()) {
      *(_WORD *)(v6 + 128) = (unsigned __int16)[v34 maxAccelerationStructureTraversalDepth];
    }
    if (objc_opt_respondsToSelector()) {
      *(_WORD *)(v6 + 132) = (unsigned __int16)[v34 maxTotalThreadsPerThreadgroup];
    }
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(v6 + 167) = [v34 colorSampleCount];
    }
  }
}

id MakeMTLTileRenderPipelineDescriptor(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)MTLTileRenderPipelineDescriptor);
  if (*(void *)(a1 + 96))
  {
    id v5 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:");
    [v4 setLabel:v5];
  }
  uint64_t v6 = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 120)];
  id v7 = [v3 objectForKeyedSubscript:v6];
  [v4 setTileFunction:v7];

  [v4 setRasterSampleCount:*(unsigned __int16 *)(a1 + 134)];
  for (uint64_t i = 0; i != 8; ++i)
  {
    id v9 = [v4 colorAttachments];
    size_t v10 = [v9 objectAtIndexedSubscript:i];
    [v10 setPixelFormat:*(unsigned __int16 *)(a1 + 2 * i + 64)];
  }
  [v4 setThreadgroupSizeMatchesTileSize:*(unsigned char *)(a1 + 169) != 0];
  for (uint64_t j = 0; j != 31; ++j)
  {
    uint64_t v12 = [v4 tileBuffers];
    size_t v13 = [v12 objectAtIndexedSubscript:j];
    [v13 setMutability:*(unsigned __int8 *)(a1 + j + 136)];
  }
  uint64_t v14 = GTData_MakeDictionary(*(void *)(a1 + 80), *(void *)(a1 + 88));
  [v4 setPluginData:v14];

  uint64_t v15 = *(void *)(a1 + 112);
  if (v15)
  {
    uint64_t v16 = CreateObjectArrayWithMap(*(uint64_t **)(a1 + 104), v15, v3);
    [v4 setPreloadedLibraries:v16];
  }
  id v17 = [v4 linkedFunctions];
  MakeMTLLinkedFunctions(v17, (void *)a1, v3);

  if (objc_opt_respondsToSelector()) {
    [v4 setSupportAddingBinaryFunctions:*(unsigned char *)(a1 + 168) != 0];
  }
  if (objc_opt_respondsToSelector()) {
    [v4 setMaxCallStackDepth:*(unsigned __int16 *)(a1 + 130)];
  }
  if (objc_opt_respondsToSelector()) {
    [v4 setMaxAccelerationStructureTraversalDepth:*(unsigned __int16 *)(a1 + 128)];
  }
  if (objc_opt_respondsToSelector()) {
    [v4 setMaxTotalThreadsPerThreadgroup:*(unsigned __int16 *)(a1 + 132)];
  }
  if (objc_opt_respondsToSelector()) {
    [v4 setColorSampleCount:*(unsigned __int8 *)(a1 + 167)];
  }

  return v4;
}

void TranslateGTMTLCommandQueueDescriptor(void *a1, uint64_t a2, int a3)
{
  id v5 = a1;
  uint64_t v6 = *(void *)(a2 + 144);
  *(void *)(a2 + 144) = v6 + 16;
  id v9 = v5;
  if (a3)
  {
    *(_OWORD *)uint64_t v6 = GTMTLCommandQueueDescriptorDefaults;
    id v7 = v5;
    *(_DWORD *)uint64_t v6 = [v7 maxCommandBufferCount];
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(v6 + 8) = [v7 qosLevel];
    }
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(v6 + 4) = [v7 commitSynchronously];
    }
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(v6 + 7) = [v7 isOpenGLQueue];
    }
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(v6 + 6) = [v7 disableCrossQueueHazardTracking];
    }
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(v6 + 5) = [v7 commitsWithQoS];
    }
  }
  else
  {
    id v8 = v5;
  }
}

id MakeMTLCommandQueueDescriptor(unsigned int *a1)
{
  id v2 = objc_alloc_init((Class)MTLCommandQueueDescriptor);
  [v2 setMaxCommandBufferCount:*a1];
  if (objc_opt_respondsToSelector()) {
    [v2 setQosLevel:*((unsigned __int8 *)a1 + 8)];
  }
  if (objc_opt_respondsToSelector()) {
    [v2 setCommitSynchronously:*((unsigned char *)a1 + 4) != 0];
  }
  if (objc_opt_respondsToSelector()) {
    [v2 setIsOpenGLQueue:*((unsigned char *)a1 + 7) != 0];
  }
  if (objc_opt_respondsToSelector()) {
    [v2 setDisableCrossQueueHazardTracking:*((unsigned char *)a1 + 6) != 0];
  }
  if (objc_opt_respondsToSelector()) {
    [v2 setCommitsWithQoS:*((unsigned char *)a1 + 5) != 0];
  }

  return v2;
}

void TranslateGTMTLIOCommandQueueDescriptor(void *a1, uint64_t a2, int a3)
{
  id v5 = a1;
  uint64_t v6 = *(void *)(a2 + 136);
  *(void *)(a2 + 136) = v6 + 8;
  if (a3)
  {
    *(void *)uint64_t v6 = 64;
    id v7 = v5;
    *(_DWORD *)uint64_t v6 = [v5 maxCommandBufferCount];
    *(unsigned char *)(v6 + 4) = [v7 priority];
    *(unsigned char *)(v6 + 5) = [v7 type];
    id v5 = v7;
  }
}

id MakeMTLIOCommandQueueDescriptor(unsigned int *a1)
{
  id v2 = objc_alloc_init((Class)MTLIOCommandQueueDescriptor);
  [v2 setMaxCommandBufferCount:*a1];
  [v2 setPriority:*((unsigned __int8 *)a1 + 4)];
  [v2 setType:*((unsigned __int8 *)a1 + 5)];

  return v2;
}

uint64_t TranslateGTMTLCommandBufferDescriptor(void *a1, uint64_t a2, int a3)
{
  uint64_t v5 = a1;
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(a2 + 128);
  *(void *)(a2 + 128) = v7 + 16;
  if (a3)
  {
    *(_OWORD *)uint64_t v7 = GTMTLCommandBufferDescriptorDefaults;
    size_t v10 = (void *)v5;
    *(unsigned char *)(v7 + 8) = [(id)v5 errorOptions];
    *(unsigned char *)(v7 + 9) = [v10 retainedReferences];
    uint64_t v5 = objc_opt_respondsToSelector();
    uint64_t v6 = (uint64_t)v10;
    if (v5)
    {
      id v8 = [v10 deadlineProfile];
      *(void *)uint64_t v7 = [v8 streamReference];

      uint64_t v6 = (uint64_t)v10;
    }
  }

  return _objc_release_x1(v5, v6);
}

void TranslateGTMTLVisibleFunctionTableDescriptor(void *a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(void *)(a2 + 112);
  *(void *)(a2 + 112) = v3 + 24;
  if (a3)
  {
    id v4 = a1;
    *(void *)uint64_t v3 = [v4 functionCount];
    *(void *)(v3 + 8) = [v4 resourceIndex];
    unsigned __int8 v5 = [v4 forceResourceIndex];

    *(unsigned char *)(v3 + 16) = v5;
  }
}

id MakeMTLVisibleFunctionTableDescriptorWithoutResourceIndex(void *a1)
{
  id v2 = objc_alloc_init((Class)MTLVisibleFunctionTableDescriptor);
  [v2 setFunctionCount:*a1];

  return v2;
}

id MakeMTLVisibleFunctionTableDescriptorWithResourceIndex(void *a1)
{
  id v2 = objc_alloc_init((Class)MTLVisibleFunctionTableDescriptor);
  [v2 setFunctionCount:*a1];
  [v2 setForceResourceIndex:a1[1] != 0];
  [v2 setResourceIndex:a1[1]];

  return v2;
}

void TranslateGTMTLCompileOptions(void *a1, uint64_t a2, int a3)
{
  id v5 = a1;
  uint64_t v6 = *(void *)(a2 + 88);
  *(void *)(a2 + 88) = v6 + 64;
  if (a3)
  {
    *(_OWORD *)(v6 + 32) = 0u;
    *(_OWORD *)(v6 + 48) = 0u;
    *(_OWORD *)uint64_t v6 = 0u;
    *(_OWORD *)(v6 + 16) = 0u;
  }
  id v31 = v5;
  uint64_t v7 = [v31 preprocessorMacros];
  id v8 = GTMTLDescriptorAllocator_copyDictionary(a2, v7, a3);
  uint64_t v10 = v9;

  id v11 = [v31 additionalCompilerArguments];
  uint64_t v12 = (const char *)[v11 UTF8String];
  size_t v13 = v12;
  if (v12)
  {
    size_t v14 = strlen(v12);
    uint64_t v15 = (void *)(a2 + 416);
    uint64_t v16 = *(void *)(a2 + 416);
    size_t v17 = v14 + 1;
    if (v14 != -1)
    {
      uint64_t v18 = *(void **)(a2 + 416);
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v15 = (void *)(a2 + 416);
    uint64_t v16 = *(void *)(a2 + 416);
  }
  size_t v17 = 0;
  uint64_t v18 = 0;
LABEL_8:
  *uint64_t v15 = v16 + v17;
  if (a3) {
    memcpy(v18, v13, v17);
  }

  id v19 = [v31 installName];
  id v20 = (const char *)[v19 UTF8String];
  uint64_t v21 = v20;
  if (v20)
  {
    size_t v22 = strlen(v20);
    uint64_t v23 = (void *)(a2 + 416);
    uint64_t v24 = *(void *)(a2 + 416);
    size_t v25 = v22 + 1;
    if (v22 != -1)
    {
      uint64_t v26 = *(void **)(a2 + 416);
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v23 = (void *)(a2 + 416);
    uint64_t v24 = *(void *)(a2 + 416);
  }
  size_t v25 = 0;
  uint64_t v26 = 0;
LABEL_15:
  void *v23 = v24 + v25;
  if (a3) {
    memcpy(v26, v21, v25);
  }

  uint64_t v27 = [v31 libraries];
  uint64_t v28 = TranslateNSArray(v27, a2, a3);

  if (a3)
  {
    *(void *)uint64_t v6 = v8;
    *(void *)(v6 + 8) = v10;
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(v6 + 57) = [v31 fastMathEnabled];
    }
    *(unsigned char *)(v6 + 56) = [v31 debuggingEnabled];
    *(_DWORD *)(v6 + 48) = [v31 languageVersion];
    *(void *)(v6 + 16) = v18;
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(v6 + 62) = [v31 preserveInvariance];
    }
    *(void *)(v6 + 24) = v26;
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(v6 + 58) = [v31 libraryType];
    }
    uint64_t v29 = [v31 libraries];
    *(void *)(v6 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = [v29 count];

    if (*(void *)(v6 + 40)) {
      uint64_t v30 = v28;
    }
    else {
      uint64_t v30 = 0;
    }
    *(void *)(v6 + 32) = v30;
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(v6 + 63) = [v31 sourceLanguage];
    }
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(v6 + 61) = [v31 optimizationLevel];
    }
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(v6 + 55) = [v31 compileSymbolVisibility];
    }
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(v6 + 54) = [v31 allowReferencingUndefinedSymbols];
    }
    if (objc_opt_respondsToSelector()) {
      *(_WORD *)(v6 + 52) = (unsigned __int16)[v31 maxTotalThreadsPerThreadgroup];
    }
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(v6 + 59) = [v31 mathFloatingPointFunctions];
    }
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(v6 + 6mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = [v31 mathMode];
    }
  }
}

id MakeMTLCompileOptionsAuto(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)MTLCompileOptions);
  id v5 = GTData_MakeDictionary(*(void *)a1, *(void *)(a1 + 8));
  [v4 setPreprocessorMacros:v5];

  [v4 setDebuggingEnabled:*(unsigned char *)(a1 + 56) != 0];
  [v4 setLanguageVersion:*(unsigned int *)(a1 + 48)];
  if (*(void *)(a1 + 16))
  {
    uint64_t v6 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:");
    [v4 setAdditionalCompilerArguments:v6];
  }
  if (objc_opt_respondsToSelector()) {
    [v4 setPreserveInvariance:*(unsigned char *)(a1 + 62) != 0];
  }
  if (*(void *)(a1 + 24))
  {
    uint64_t v7 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:");
    [v4 setInstallName:v7];
  }
  if (objc_opt_respondsToSelector()) {
    [v4 setLibraryType:*(unsigned __int8 *)(a1 + 58)];
  }
  uint64_t v8 = *(void *)(a1 + 40);
  if (v8)
  {
    uint64_t v9 = CreateObjectArrayWithMap(*(uint64_t **)(a1 + 32), v8, v3);
    [v4 setLibraries:v9];
  }
  if (objc_opt_respondsToSelector()) {
    [v4 setSourceLanguage:*(unsigned __int8 *)(a1 + 63)];
  }
  if (objc_opt_respondsToSelector()) {
    [v4 setOptimizationLevel:*(unsigned __int8 *)(a1 + 61)];
  }
  if (objc_opt_respondsToSelector()) {
    [v4 setCompileSymbolVisibility:*(unsigned __int8 *)(a1 + 55)];
  }
  if (objc_opt_respondsToSelector()) {
    [v4 setAllowReferencingUndefinedSymbols:*(unsigned char *)(a1 + 54) != 0];
  }
  if (objc_opt_respondsToSelector()) {
    [v4 setMaxTotalThreadsPerThreadgroup:*(unsigned __int16 *)(a1 + 52)];
  }
  if (objc_opt_respondsToSelector()) {
    [v4 setMathFloatingPointFunctions:*(unsigned __int8 *)(a1 + 59)];
  }
  if (objc_opt_respondsToSelector()) {
    [v4 setMathMode:*(unsigned __int8 *)(a1 + 60)];
  }

  return v4;
}

void TranslateGTMTLCaptureDescriptor(void *a1, uint64_t a2, int a3)
{
  id v5 = a1;
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a2 + 72) = v6 + 24;
  if (a3)
  {
    *(_OWORD *)uint64_t v6 = GTMTLCaptureDescriptorDefaults;
    *(void *)(v6 + 16) = 1;
  }
  id v17 = v5;
  id v7 = [v5 outputURL];
  uint64_t v8 = (const char *)[v7 fileSystemRepresentation];
  uint64_t v9 = v8;
  if (v8)
  {
    size_t v10 = strlen(v8);
    id v11 = (void *)(a2 + 416);
    uint64_t v12 = *(void *)(a2 + 416);
    size_t v13 = v10 + 1;
    if (v10 != -1)
    {
      size_t v14 = *(void **)(a2 + 416);
      goto LABEL_8;
    }
  }
  else
  {
    id v11 = (void *)(a2 + 416);
    uint64_t v12 = *(void *)(a2 + 416);
  }
  size_t v13 = 0;
  size_t v14 = 0;
LABEL_8:
  *id v11 = v12 + v13;
  if (a3)
  {
    memcpy(v14, v9, v13);

    uint64_t v15 = [v17 captureObject];
    *(void *)uint64_t v6 = [v15 streamReference];

    *(unsigned char *)(v6 + 16) = [v17 destination];
    uint64_t v16 = v17;
    *(void *)(v6 + 8) = v14;
  }
  else
  {

    uint64_t v16 = v17;
  }
}

void TranslateGTMTLBlitPassSampleBufferAttachmentDescriptor(void *a1, void *a2, uint64_t a3, int a4)
{
  if (a4)
  {
    id v5 = a1;
    uint64_t v6 = [v5 sampleBuffer];
    a2[1] = [v6 streamReference];

    a2[2] = [v5 startOfEncoderSampleIndex];
    id v7 = [v5 endOfEncoderSampleIndex];

    *a2 = v7;
  }
}

id MakeMTLBlitPassSampleBufferAttachmentDescriptor(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  uint64_t v6 = a2[1];
  id v7 = a3;
  uint64_t v8 = +[NSNumber numberWithUnsignedLongLong:v6];
  uint64_t v9 = [v7 objectForKeyedSubscript:v8];

  [v5 setSampleBuffer:v9];
  [v5 setStartOfEncoderSampleIndex:a2[2]];
  [v5 setEndOfEncoderSampleIndex:*a2];

  return v5;
}

void TranslateGTMTLBlitPassDescriptor(void *a1, uint64_t a2, int a3)
{
  id v5 = a1;
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = v6 + 96;
  if (a3)
  {
    *(_OWORD *)(v6 + 64) = 0u;
    *(_OWORD *)(v6 + 8mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
    *(_OWORD *)(v6 + 32) = 0u;
    *(_OWORD *)(v6 + 48) = 0u;
    *(_OWORD *)uint64_t v6 = 0u;
    *(_OWORD *)(v6 + 16) = 0u;
  }
  uint64_t v7 = 0;
  id v14 = v5;
  do
  {
    uint64_t v8 = [v5 sampleBufferAttachments];
    uint64_t v9 = [v8 objectAtIndexedSubscript:v7];
    size_t v10 = [v9 sampleBuffer];

    if (v10)
    {
      id v11 = [v14 sampleBufferAttachments];
      uint64_t v12 = [v11 objectAtIndexedSubscript:v7];
      TranslateGTMTLBlitPassSampleBufferAttachmentDescriptor(v12, (void *)v6, v13, a3);
    }
    ++v7;
    v6 += 24;
    id v5 = v14;
  }
  while (v7 != 4);
}

id MakeMTLBlitPassDescriptor(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)MTLBlitPassDescriptor);
  for (uint64_t i = 0; i != 4; ++i)
  {
    if (a1[1])
    {
      uint64_t v6 = [v4 sampleBufferAttachments];
      uint64_t v7 = [v6 objectAtIndexedSubscript:i];
    }
    a1 += 3;
  }

  return v4;
}

void TranslateGTMTLComputePassSampleBufferAttachmentDescriptor(void *a1, void *a2, uint64_t a3, int a4)
{
  if (a4)
  {
    id v5 = a1;
    uint64_t v6 = [v5 sampleBuffer];
    a2[1] = [v6 streamReference];

    a2[2] = [v5 startOfEncoderSampleIndex];
    id v7 = [v5 endOfEncoderSampleIndex];

    *a2 = v7;
  }
}

id MakeMTLComputePassSampleBufferAttachmentDescriptor(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  uint64_t v6 = a2[1];
  id v7 = a3;
  uint64_t v8 = +[NSNumber numberWithUnsignedLongLong:v6];
  uint64_t v9 = [v7 objectForKeyedSubscript:v8];

  [v5 setSampleBuffer:v9];
  [v5 setStartOfEncoderSampleIndex:a2[2]];
  [v5 setEndOfEncoderSampleIndex:*a2];

  return v5;
}

void TranslateGTMTLComputePassDescriptor(void *a1, uint64_t a2, int a3)
{
  id v5 = a1;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = v6 + 104;
  if (a3)
  {
    *(void *)(v6 + 96) = 0;
    *(_OWORD *)(v6 + 64) = 0u;
    *(_OWORD *)(v6 + 8mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
    *(_OWORD *)(v6 + 32) = 0u;
    *(_OWORD *)(v6 + 48) = 0u;
    *(_OWORD *)uint64_t v6 = 0u;
    *(_OWORD *)(v6 + 16) = 0u;
  }
  id v7 = v5;
  uint64_t v8 = 0;
  uint64_t v9 = (void *)v6;
  id v16 = v7;
  do
  {
    size_t v10 = [v7 sampleBufferAttachments];
    id v11 = [v10 objectAtIndexedSubscript:v8];
    uint64_t v12 = [v11 sampleBuffer];

    if (v12)
    {
      uint64_t v13 = [v16 sampleBufferAttachments];
      id v14 = [v13 objectAtIndexedSubscript:v8];
      TranslateGTMTLComputePassSampleBufferAttachmentDescriptor(v14, v9, v15, a3);
    }
    ++v8;
    v9 += 3;
    id v7 = v16;
  }
  while (v8 != 4);
  if (a3) {
    *(unsigned char *)(v6 + 96) = [v16 dispatchType];
  }
}

id MakeMTLComputePassDescriptor(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)MTLComputePassDescriptor);
  [v4 setDispatchType:*(unsigned __int8 *)(a1 + 96)];
  for (uint64_t i = 0; i != 4; ++i)
  {
    if (*(void *)(a1 + 8))
    {
      uint64_t v6 = [v4 sampleBufferAttachments];
      id v7 = [v6 objectAtIndexedSubscript:i];
    }
    a1 += 24;
  }

  return v4;
}

void TranslateGTMTLResourceStatePassSampleBufferAttachmentDescriptor(void *a1, void *a2, uint64_t a3, int a4)
{
  if (a4)
  {
    id v5 = a1;
    uint64_t v6 = [v5 sampleBuffer];
    a2[1] = [v6 streamReference];

    a2[2] = [v5 startOfEncoderSampleIndex];
    id v7 = [v5 endOfEncoderSampleIndex];

    *a2 = v7;
  }
}

id MakeMTLResourceStatePassSampleBufferAttachmentDescriptor(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  uint64_t v6 = a2[1];
  id v7 = a3;
  uint64_t v8 = +[NSNumber numberWithUnsignedLongLong:v6];
  uint64_t v9 = [v7 objectForKeyedSubscript:v8];

  [v5 setSampleBuffer:v9];
  [v5 setStartOfEncoderSampleIndex:a2[2]];
  [v5 setEndOfEncoderSampleIndex:*a2];

  return v5;
}

void TranslateGTMTLResourceStatePassDescriptor(void *a1, uint64_t a2, int a3)
{
  id v5 = a1;
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = v6 + 96;
  if (a3)
  {
    *(_OWORD *)(v6 + 64) = 0u;
    *(_OWORD *)(v6 + 8mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
    *(_OWORD *)(v6 + 32) = 0u;
    *(_OWORD *)(v6 + 48) = 0u;
    *(_OWORD *)uint64_t v6 = 0u;
    *(_OWORD *)(v6 + 16) = 0u;
  }
  uint64_t v7 = 0;
  id v14 = v5;
  do
  {
    uint64_t v8 = [v5 sampleBufferAttachments];
    uint64_t v9 = [v8 objectAtIndexedSubscript:v7];
    size_t v10 = [v9 sampleBuffer];

    if (v10)
    {
      id v11 = [v14 sampleBufferAttachments];
      uint64_t v12 = [v11 objectAtIndexedSubscript:v7];
      TranslateGTMTLResourceStatePassSampleBufferAttachmentDescriptor(v12, (void *)v6, v13, a3);
    }
    ++v7;
    v6 += 24;
    id v5 = v14;
  }
  while (v7 != 4);
}

id MakeMTLResourceStatePassDescriptor(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)MTLResourceStatePassDescriptor);
  for (uint64_t i = 0; i != 4; ++i)
  {
    if (a1[1])
    {
      uint64_t v6 = [v4 sampleBufferAttachments];
      uint64_t v7 = [v6 objectAtIndexedSubscript:i];
    }
    a1 += 3;
  }

  return v4;
}

void TranslateGTMTLAccelerationStructurePassSampleBufferAttachmentDescriptor(void *a1, void *a2, uint64_t a3, int a4)
{
  if (a4)
  {
    id v5 = a1;
    uint64_t v6 = [v5 sampleBuffer];
    a2[1] = [v6 streamReference];

    a2[2] = [v5 startOfEncoderSampleIndex];
    id v7 = [v5 endOfEncoderSampleIndex];

    *a2 = v7;
  }
}

id MakeMTLAccelerationStructurePassSampleBufferAttachmentDescriptor(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  uint64_t v6 = a2[1];
  id v7 = a3;
  uint64_t v8 = +[NSNumber numberWithUnsignedLongLong:v6];
  uint64_t v9 = [v7 objectForKeyedSubscript:v8];

  [v5 setSampleBuffer:v9];
  [v5 setStartOfEncoderSampleIndex:a2[2]];
  [v5 setEndOfEncoderSampleIndex:*a2];

  return v5;
}

void TranslateGTMTLAccelerationStructurePassDescriptor(void *a1, uint64_t a2, int a3)
{
  id v5 = a1;
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a2 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v6 + 96;
  if (a3)
  {
    *(_OWORD *)(v6 + 64) = 0u;
    *(_OWORD *)(v6 + 8mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
    *(_OWORD *)(v6 + 32) = 0u;
    *(_OWORD *)(v6 + 48) = 0u;
    *(_OWORD *)uint64_t v6 = 0u;
    *(_OWORD *)(v6 + 16) = 0u;
  }
  uint64_t v7 = 0;
  id v14 = v5;
  do
  {
    uint64_t v8 = [v5 sampleBufferAttachments];
    uint64_t v9 = [v8 objectAtIndexedSubscript:v7];
    size_t v10 = [v9 sampleBuffer];

    if (v10)
    {
      id v11 = [v14 sampleBufferAttachments];
      uint64_t v12 = [v11 objectAtIndexedSubscript:v7];
      TranslateGTMTLAccelerationStructurePassSampleBufferAttachmentDescriptor(v12, (void *)v6, v13, a3);
    }
    ++v7;
    v6 += 24;
    id v5 = v14;
  }
  while (v7 != 4);
}

id MakeMTLAccelerationStructurePassDescriptor(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)MTLAccelerationStructurePassDescriptor);
  for (uint64_t i = 0; i != 4; ++i)
  {
    if (a1[1])
    {
      uint64_t v6 = [v4 sampleBufferAttachments];
      uint64_t v7 = [v6 objectAtIndexedSubscript:i];
    }
    a1 += 3;
  }

  return v4;
}

void TranslateGTMTLIntersectionFunctionTableDescriptor(void *a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = v3 + 16;
  if (a3)
  {
    id v4 = a1;
    *(_DWORD *)(v3 + 8) = [v4 functionCount];
    *(void *)uint64_t v3 = [v4 resourceIndex];
    unsigned __int8 v5 = [v4 forceResourceIndex];

    *(unsigned char *)(v3 + 12) = v5;
  }
}

id MakeMTLIntersectionFunctionTableDescriptorWithoutResourceIndex(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)MTLIntersectionFunctionTableDescriptor);
  [v2 setFunctionCount:*(unsigned int *)(a1 + 8)];

  return v2;
}

id MakeMTLIntersectionFunctionTableDescriptorWithResourceIndex(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)MTLIntersectionFunctionTableDescriptor);
  [v2 setFunctionCount:*(unsigned int *)(a1 + 8)];
  [v2 setForceResourceIndex:*(void *)a1 != 0];
  [v2 setResourceIndex:*(void *)a1];

  return v2;
}

void TranslateGTMTLRenderPipelineFunctionsDescriptor(void *a1, uint64_t a2, int a3)
{
  id v26 = a1;
  unsigned __int8 v5 = *(uint64_t **)(a2 + 24);
  *(void *)(a2 + 24) = v5 + 10;
  uint64_t v6 = [v26 vertexAdditionalBinaryFunctions];
  uint64_t v7 = TranslateNSArray(v6, a2, a3);

  uint64_t v8 = [v26 fragmentAdditionalBinaryFunctions];
  uint64_t v9 = TranslateNSArray(v8, a2, a3);

  size_t v10 = [v26 tileAdditionalBinaryFunctions];
  uint64_t v11 = TranslateNSArray(v10, a2, a3);

  uint64_t v12 = [v26 meshAdditionalBinaryFunctions];
  uint64_t v13 = TranslateNSArray(v12, a2, a3);

  id v14 = [v26 objectAdditionalBinaryFunctions];
  uint64_t v15 = TranslateNSArray(v14, a2, a3);

  if (a3)
  {
    id v16 = [v26 vertexAdditionalBinaryFunctions];
    v5[9] = (uint64_t)[v16 count];

    if (v5[9]) {
      uint64_t v17 = v7;
    }
    else {
      uint64_t v17 = 0;
    }
    v5[8] = v17;
    uint64_t v18 = [v26 fragmentAdditionalBinaryFunctions];
    v5[1] = (uint64_t)[v18 count];

    if (v5[1]) {
      uint64_t v19 = v9;
    }
    else {
      uint64_t v19 = 0;
    }
    uint64_t *v5 = v19;
    id v20 = [v26 tileAdditionalBinaryFunctions];
    v5[7] = (uint64_t)[v20 count];

    if (v5[7]) {
      uint64_t v21 = v11;
    }
    else {
      uint64_t v21 = 0;
    }
    v5[6] = v21;
    size_t v22 = [v26 meshAdditionalBinaryFunctions];
    v5[3] = (uint64_t)[v22 count];

    if (v5[3]) {
      uint64_t v23 = v13;
    }
    else {
      uint64_t v23 = 0;
    }
    v5[2] = v23;
    uint64_t v24 = [v26 objectAdditionalBinaryFunctions];
    v5[5] = (uint64_t)[v24 count];

    if (v5[5]) {
      uint64_t v25 = v15;
    }
    else {
      uint64_t v25 = 0;
    }
    v5[4] = v25;
  }
}

id MakeMTLRenderPipelineFunctionsDescriptor(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)MTLRenderPipelineFunctionsDescriptor);
  uint64_t v5 = *(void *)(a1 + 72);
  if (v5)
  {
    uint64_t v6 = CreateObjectArrayWithMap(*(uint64_t **)(a1 + 64), v5, v3);
    [v4 setVertexAdditionalBinaryFunctions:v6];
  }
  uint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint64_t v8 = CreateObjectArrayWithMap(*(uint64_t **)a1, v7, v3);
    [v4 setFragmentAdditionalBinaryFunctions:v8];
  }
  uint64_t v9 = *(void *)(a1 + 56);
  if (v9)
  {
    size_t v10 = CreateObjectArrayWithMap(*(uint64_t **)(a1 + 48), v9, v3);
    [v4 setTileAdditionalBinaryFunctions:v10];
  }
  uint64_t v11 = *(void *)(a1 + 24);
  if (v11)
  {
    uint64_t v12 = CreateObjectArrayWithMap(*(uint64_t **)(a1 + 16), v11, v3);
    [v4 setMeshAdditionalBinaryFunctions:v12];
  }
  uint64_t v13 = *(void *)(a1 + 40);
  if (v13)
  {
    id v14 = CreateObjectArrayWithMap(*(uint64_t **)(a1 + 32), v13, v3);
    [v4 setObjectAdditionalBinaryFunctions:v14];
  }

  return v4;
}

void TranslateGTMTLAccelerationStructureAllocationDescriptor(void *a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = v3 + 16;
  if (a3)
  {
    id v4 = a1;
    *(unsigned char *)(v3 + 9) = [v4 storageMode];
    *(unsigned char *)(v3 + 8) = [v4 forceResourceIndex];
    id v5 = [v4 resourceIndex];

    *(void *)uint64_t v3 = v5;
  }
}

id MakeMTLAccelerationStructureAllocationDescriptorWithoutResourceIndex(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)MTLAccelerationStructureAllocationDescriptor);
  [v2 setStorageMode:*(unsigned __int8 *)(a1 + 9)];

  return v2;
}

id MakeMTLAccelerationStructureAllocationDescriptorWithResourceIndex(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)MTLAccelerationStructureAllocationDescriptor);
  [v2 setStorageMode:*(unsigned __int8 *)(a1 + 9)];
  [v2 setForceResourceIndex:*(void *)a1 != 0];
  [v2 setResourceIndex:*(void *)a1];

  return v2;
}

void TranslateGTMTLResidencySetDescriptor(void *a1, uint64_t *a2, char a3)
{
  id v5 = a1;
  uint64_t v6 = *a2;
  *a2 += 24;
  id v15 = v5;
  id v7 = [v15 label];
  uint64_t v8 = (const char *)[v7 UTF8String];
  uint64_t v9 = v8;
  if (v8)
  {
    size_t v10 = strlen(v8);
    uint64_t v11 = a2 + 52;
    uint64_t v12 = a2[52];
    size_t v13 = v10 + 1;
    if (v10 != -1)
    {
      id v14 = (void *)a2[52];
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v11 = a2 + 52;
    uint64_t v12 = a2[52];
  }
  size_t v13 = 0;
  id v14 = 0;
LABEL_6:
  *uint64_t v11 = v12 + v13;
  if (a3)
  {
    memcpy(v14, v9, v13);

    *(unsigned char *)(v6 + 16) = [v15 evictsImmediately];
    if (objc_opt_respondsToSelector()) {
      *(void *)uint64_t v6 = [v15 initialCapacity];
    }
    *(void *)(v6 + 8) = v14;
  }
  else
  {
  }
}

id MakeMTLResidencySetDescriptor(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)MTLResidencySetDescriptor);
  [v2 setEvictsImmediately:*(unsigned char *)(a1 + 16) != 0];
  if (objc_opt_respondsToSelector()) {
    [v2 setInitialCapacity:*(void *)a1];
  }
  if (*(void *)(a1 + 8))
  {
    uint64_t v3 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:");
    [v2 setLabel:v3];
  }

  return v2;
}

void MakeGTMTLTextureDescriptor(uint64_t a1, void *a2)
{
  uint64_t v16 = 0;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  uint64_t v3 = 0;
  long long v5 = 0u;
  memset(v2, 0, sizeof(v2));
  uint64_t v4 = a1;
  TranslateGTMTLTextureDescriptor(a2, (uint64_t)v2, 1);
}

id MakeMTLTextureDescriptorFromTextureWithResourceIndex(void *a1)
{
  id v1 = a1;
  id v2 = MakeMTLTextureDescriptorFromTextureWithoutResourceIndex(v1);
  uint64_t v3 = DEVICEOBJECT(v1);
  char v4 = objc_opt_respondsToSelector();

  if (v4)
  {
    id v5 = [v1 resourceIndex];
    [v2 setResourceIndex:v5];
    [v2 setForceResourceIndex:v5 != (id)_MTLInvalidResourceIndex];
  }

  return v2;
}

id MakeMTLTextureDescriptorFromTextureWithoutResourceIndex(void *a1)
{
  id v1 = a1;
  id v2 = objc_alloc_init((Class)MTLTextureDescriptor);
  objc_msgSend(v2, "setTextureType:", objc_msgSend(v1, "textureType"));
  objc_msgSend(v2, "setPixelFormat:", objc_msgSend(v1, "pixelFormat"));
  objc_msgSend(v2, "setUsage:", objc_msgSend(v1, "usage"));
  objc_msgSend(v2, "setWidth:", objc_msgSend(v1, "width"));
  objc_msgSend(v2, "setHeight:", objc_msgSend(v1, "height"));
  objc_msgSend(v2, "setDepth:", objc_msgSend(v1, "depth"));
  objc_msgSend(v2, "setArrayLength:", objc_msgSend(v1, "arrayLength"));
  objc_msgSend(v2, "setStorageMode:", objc_msgSend(v1, "storageMode"));
  objc_msgSend(v2, "setSampleCount:", objc_msgSend(v1, "sampleCount"));
  objc_msgSend(v2, "setCpuCacheMode:", objc_msgSend(v1, "cpuCacheMode"));
  objc_msgSend(v2, "setMipmapLevelCount:", objc_msgSend(v1, "mipmapLevelCount"));
  if (objc_opt_respondsToSelector()) {
    objc_msgSend(v2, "setHazardTrackingMode:", objc_msgSend(v1, "hazardTrackingMode"));
  }
  if (objc_opt_respondsToSelector()) {
    objc_msgSend(v2, "setAllowGPUOptimizedContents:", objc_msgSend(v1, "allowGPUOptimizedContents"));
  }
  if (objc_opt_respondsToSelector()) {
    objc_msgSend(v2, "setSwizzle:", objc_msgSend(v1, "swizzle"));
  }
  if (objc_opt_respondsToSelector() & 1) != 0 && (objc_opt_respondsToSelector()) {
    objc_msgSend(v2, "setSwizzleKey:", objc_msgSend(v1, "swizzleKey"));
  }
  if (objc_opt_respondsToSelector() & 1) != 0 && (objc_opt_respondsToSelector()) {
    objc_msgSend(v2, "setRotation:", objc_msgSend(v1, "rotation"));
  }
  if (objc_opt_respondsToSelector() & 1) != 0 && (objc_opt_respondsToSelector()) {
    objc_msgSend(v2, "setSparseSurfaceDefaultValue:", objc_msgSend(v1, "sparseSurfaceDefaultValue"));
  }
  if (objc_opt_respondsToSelector() & 1) != 0 && (objc_opt_respondsToSelector()) {
    objc_msgSend(v2, "setCompressionType:", objc_msgSend(v1, "compressionType"));
  }
  if (objc_opt_respondsToSelector() & 1) != 0 && (objc_opt_respondsToSelector()) {
    objc_msgSend(v2, "setCompressionFootprint:", objc_msgSend(v1, "compressionFootprint"));
  }

  return v2;
}

void MakeGTMTLSamplerDescriptor(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 label];
  id v5 = (const char *)[v4 UTF8String];

  if (v5)
  {
    size_t v6 = strlen(v5);
    size_t v7 = v6 + 1;
  }
  else
  {
    size_t v7 = 0;
  }
  long long v27 = 0u;
  long long v28 = 0u;
  memset(v26, 0, sizeof(v26));
  long long v25 = 0u;
  long long v23 = 0u;
  memset(v24, 0, sizeof(v24));
  memset(v22, 0, sizeof(v22));
  long long v21 = 0u;
  long long v19 = 0u;
  memset(v20, 0, sizeof(v20));
  memset(v18, 0, sizeof(v18));
  long long v17 = 0u;
  long long v15 = 0u;
  memset(v16, 0, sizeof(v16));
  memset(v14, 0, sizeof(v14));
  long long v13 = 0u;
  memset(v12, 0, sizeof(v12));
  *(void *)&long long v19 = a1;
  __chkstk_darwin(v6, v7);
  long long v9 = (char *)v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v9, v8);
  uint64_t v29 = v9;
  TranslateGTMTLSamplerDescriptor(v3, (uint64_t)v12, 1);
  objc_msgSend(v3, "label", v12[0], *(void *)&v12[1], *(_OWORD *)((char *)&v12[1] + 8), *((void *)&v12[2] + 1), v13, *(void *)&v14[0], *(_OWORD *)((char *)v14 + 8), *((void *)&v14[1] + 1), v15, *(void *)&v16[0], *(_OWORD *)((char *)v16 + 8), *((void *)&v16[1] + 1), v17, *(void *)&v18[0], *(_OWORD *)((char *)v18 + 8), *((void *)&v18[1] + 1), v19,
    *(void *)&v20[0],
    *(_OWORD *)((char *)v20 + 8),
    *((void *)&v20[1] + 1),
    v21,
    *(void *)&v22[0],
    *(_OWORD *)((char *)v22 + 8),
    *((void *)&v22[1] + 1),
    v23,
    *(void *)&v24[0],
    *(_OWORD *)((char *)v24 + 8),
    *((void *)&v24[1] + 1),
    v25,
    *(void *)&v26[0],
    *(_OWORD *)((char *)v26 + 8),
    *((void *)&v26[1] + 1),
    v27,
  long long v10 = v28);

  id v11 = v10;
  *a1 = [v11 UTF8String];
}

void MakeGTMTLIndirectCommandBufferDescriptorFromIndirectCommandBuffer(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v21 = 0;
  [v3 getHeader:&v21 headerSize:0];
  id v4 = DEVICEOBJECT(v3);
  char v5 = objc_opt_respondsToSelector();

  id v6 = 0;
  if (v5) {
    id v6 = [v3 resourceIndex];
  }
  int v7 = *(_DWORD *)(v21 + 8);
  char v8 = *(unsigned char *)(v21 + 13);
  char v9 = *(unsigned char *)(v21 + 12);
  __int16 v10 = *(_WORD *)(v21 + 15);
  char v19 = *(unsigned char *)(v21 + 18);
  char v20 = *(unsigned char *)(v21 + 21);
  char v17 = *(unsigned char *)(v21 + 22);
  char v18 = *(unsigned char *)(v21 + 17);
  char v15 = *(unsigned char *)(v21 + 20);
  char v16 = *(unsigned char *)(v21 + 14);
  char v14 = *(unsigned char *)(v21 + 19);
  id v11 = [v3 device];
  long long v12 = DEVICEOBJECT(v11);
  unsigned __int8 v13 = [v12 supportsMeshShadersInICB];

  *(void *)a1 = v6;
  *(_WORD *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 1mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v8;
  *(unsigned char *)(a1 + 11) = v9;
  *(_WORD *)(a1 + 12) = v10;
  *(unsigned char *)(a1 + 14) = v20;
  *(unsigned char *)(a1 + 15) = v19;
  *(unsigned char *)(a1 + 16) = v18;
  *(unsigned char *)(a1 + 17) = v17;
  *(unsigned char *)(a1 + 18) = v16;
  *(unsigned char *)(a1 + 19) = v15;
  *(unsigned char *)(a1 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v14;
  *(unsigned char *)(a1 + 21) = v13;
  *(_WORD *)(a1 + 22) = 0;
}

void TranslateGTMTLIndirectCommandBufferDescriptorWithDevice(void *a1, void *a2, uint64_t a3, int a4)
{
  id v12 = a1;
  id v7 = a2;
  uint64_t v8 = *(void *)(a3 + 176);
  TranslateGTMTLIndirectCommandBufferDescriptorAuto(v12, a3, a4);
  if (a4)
  {
    char v9 = DEVICEOBJECT(v7);
    *(unsigned char *)(v8 + 21) = [v9 supportsMeshShadersInICB];

    __int16 v10 = *(_WORD *)(v8 + 8);
    if (objc_opt_respondsToSelector())
    {
      unsigned __int8 v11 = [v12 maxKernelThreadgroupMemoryBindCount];
    }
    else if ((v10 & 0x60) != 0)
    {
      unsigned __int8 v11 = 31;
    }
    else
    {
      unsigned __int8 v11 = 0;
    }
    *(unsigned char *)(v8 + 14) = v11;
  }
}

id MakeMTLIndirectCommandBufferDescriptorFromIndirectCommandBuffer(void *a1)
{
  memset(v3, 0, sizeof(v3));
  MakeGTMTLIndirectCommandBufferDescriptorFromIndirectCommandBuffer((uint64_t)v3, a1);
  id v1 = MakeMTLIndirectCommandBufferDescriptorWithoutResourceIndex((uint64_t)v3);

  return v1;
}

void TranslateGTMTLRenderPassDescriptor(void *a1, uint64_t a2, int a3)
{
  id v13 = a1;
  uint64_t v5 = *(void *)(a2 + 240);
  TranslateGTMTLRenderPassDescriptorAuto(v13, a2, a3);
  id v6 = [v13 getSamplePositions:0 count:0];
  id v7 = v13;
  uint64_t v8 = *(void *)(a2 + 408);
  *(void *)(a2 + 408) = v8 + 8 * (void)v6;
  if (a3)
  {
    *(void *)(v5 + 768) = v6;
    *(void *)(v5 + 76mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v8;
    objc_msgSend(v13, "getSamplePositions:count:");
    id v9 = v13;
    SEL v10 = NSSelectorFromString(@"isDitherEnabled");
    if (objc_opt_respondsToSelector()) {
      unsigned __int8 v11 = ((uint64_t (*)(id, SEL))[v9 methodForSelector:v10])(v9, v10);
    }
    else {
      unsigned __int8 v11 = [v9 ditherEnabled];
    }
    unsigned __int8 v12 = v11;

    *(unsigned char *)(v5 + 817) = v12;
    id v7 = v13;
  }
}

id MakeMTLRenderPassDescriptor(uint64_t a1, void *a2)
{
  id v3 = MakeMTLRenderPassDescriptorAuto(a1, a2);
  [v3 setSamplePositions:*(void *)(a1 + 760) count:*(void *)(a1 + 768)];

  return v3;
}

void TranslateGTMTLComputePipelineDescriptor(void *a1, void *a2, int a3)
{
  uint64_t v4 = a2[21];
  TranslateGTMTLComputePipelineDescriptorAuto(a1, a2, a3);
  if (a3) {
    *(unsigned char *)(v4 + 951) = -1;
  }
}

void TranslateGTMTLDeviceDescriptor(void *a1, uint64_t a2, char a3)
{
  id v5 = a1;
  uint64_t v6 = *(void *)(a2 + 312);
  *(void *)(a2 + 312) = v6 + 112;
  id v7 = [v5 name];
  uint64_t v8 = (const char *)[v7 UTF8String];
  id v9 = v8;
  if (v8)
  {
    size_t v10 = strlen(v8);
    unsigned __int8 v11 = (void *)(a2 + 416);
    uint64_t v12 = *(void *)(a2 + 416);
    size_t v13 = v10 + 1;
    if (v10 != -1)
    {
      char v14 = *(void **)(a2 + 416);
      goto LABEL_6;
    }
  }
  else
  {
    unsigned __int8 v11 = (void *)(a2 + 416);
    uint64_t v12 = *(void *)(a2 + 416);
  }
  size_t v13 = 0;
  char v14 = 0;
LABEL_6:
  *unsigned __int8 v11 = v12 + v13;
  if (a3)
  {
    memcpy(v14, v9, v13);

    *(_OWORD *)(v6 + 8mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
    *(_OWORD *)(v6 + 96) = 0u;
    *(_OWORD *)(v6 + 48) = 0u;
    *(_OWORD *)(v6 + 64) = 0u;
    *(_OWORD *)(v6 + 16) = 0u;
    *(_OWORD *)(v6 + 32) = 0u;
    *(_OWORD *)uint64_t v6 = 0u;
    *(unsigned char *)(v6 + 102) = 1;
    *(void *)(v6 + 64) = v14;
    if (v5)
    {
      [v5 maxThreadsPerThreadgroup];
      *(_WORD *)(v6 + 96) = v22;
      [v5 maxThreadsPerThreadgroup];
      *(_WORD *)(v6 + 98) = v21;
      [v5 maxThreadsPerThreadgroup];
      __int16 v15 = v20;
    }
    else
    {
      __int16 v15 = 0;
      *(_DWORD *)(v6 + 96) = 0;
    }
    *(_WORD *)(v6 + 10mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v15;
    *(void *)uint64_t v6 = [v5 sharedMemorySize];
    *(void *)(v6 + 8) = [v5 dedicatedMemorySize];
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(v6 + 109) = [v5 isPlacementHeapSupported];
    }
    if (objc_opt_respondsToSelector()) {
      *(void *)(v6 + 16) = [v5 deviceCreationFlags];
    }
    char v16 = DEVICEOBJECT(v5);
    if (objc_opt_respondsToSelector())
    {
      uint64_t v17 = 0;
      int64x2_t v19 = (int64x2_t)xmmword_1DA290;
      do
      {
        id v18 = objc_msgSend(v16, "resourcePatchingTypeForResourceType:", v17, *(_OWORD *)&v19);
        *(int8x16_t *)(v6 + 24) = vorrq_s8(vandq_s8((int8x16_t)vdupq_n_s64((1 << v17++)), (int8x16_t)vceqq_s64(vdupq_n_s64((unint64_t)v18), v19)), *(int8x16_t *)(v6 + 24));
      }
      while (v17 != 9);
      *(unsigned char *)(v6 + 11mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 9;
    }
  }
  else
  {
  }
}

void TranslateGTIOSurface(__IOSurface *a1, uint64_t a2, int a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = *(void *)(a2 + 384);
  *(void *)(a2 + 384) = v6 + 120;
  CFDictionaryRef v7 = IOSurfaceCopyAllValues(a1);
  uint64_t v8 = kIOSurfaceCreationProperties;
  id v9 = [(__CFDictionary *)v7 objectForKeyedSubscript:kIOSurfaceCreationProperties];
  if ((unint64_t)[v9 count] <= 1)
  {
    size_t PlaneCount = IOSurfaceGetPlaneCount(a1);
    if (PlaneCount)
    {
      size_t v11 = PlaneCount;
      uint64_t v12 = 0;
      while (!IOSurfaceGetCompressionTypeOfPlane())
      {
        if (v11 == ++v12) {
          goto LABEL_10;
        }
      }
      uint64_t v39 = v9;
      uint64_t v40 = v8;
      uint64_t v41 = v4;
      int v42 = a3;
      CFDictionaryRef v43 = v7;
      uint64_t v44 = v6;
      BaseAddress = IOSurfaceGetBaseAddress(a1);
      id v59 = [objc_alloc((Class)NSMutableArray) initWithCapacity:v11];
      size_t v13 = 0;
      uint64_t v56 = kIOSurfacePlaneCompressionType;
      uint64_t v55 = kIOSurfacePlaneCompressionFootprint;
      uint64_t v54 = kIOSurfacePlaneCompressedTileWidth;
      uint64_t v53 = kIOSurfacePlaneCompressedTileHeight;
      uint64_t v52 = kIOSurfacePlaneBytesPerTileData;
      uint64_t v51 = kIOSurfacePlaneBytesPerCompressedTileHeader;
      uint64_t v50 = kIOSurfacePlaneWidthInCompressedTiles;
      uint64_t v49 = kIOSurfacePlaneHeightInCompressedTiles;
      uint64_t v48 = kIOSurfacePlaneBytesPerRowOfTileData;
      uint64_t v47 = kIOSurfacePlaneCompressedTileHeaderRegionOffset;
      uint64_t v46 = kIOSurfacePlaneCompressedTileDataRegionOffset;
      uint64_t v45 = kIOSurfaceAddressFormat;
      size_t v58 = v11;
      do
      {
        BaseAddressOfPlane = IOSurfaceGetBaseAddressOfPlane(a1, v13);
        uint64_t BaseAddressOfCompressedTileHeaderRegionOfPlane = IOSurfaceGetBaseAddressOfCompressedTileHeaderRegionOfPlane();
        uint64_t BaseAddressOfCompressedTileDataRegionOfPlane = IOSurfaceGetBaseAddressOfCompressedTileDataRegionOfPlane();
        v77[0] = IOSurfacePropertyKeyPlaneBytesPerElement;
        CGFloat v74 = +[NSNumber numberWithUnsignedLong:IOSurfaceGetBytesPerElementOfPlane(a1, v13)];
        v78[0] = v74;
        v77[1] = IOSurfacePropertyKeyPlaneBytesPerRow;
        uint64_t v73 = +[NSNumber numberWithUnsignedLong:IOSurfaceGetBytesPerRowOfPlane(a1, v13)];
        v78[1] = v73;
        v77[2] = IOSurfacePropertyKeyPlaneElementHeight;
        uint64_t v72 = +[NSNumber numberWithUnsignedLong:IOSurfaceGetElementHeightOfPlane(a1, v13)];
        v78[2] = v72;
        v77[3] = IOSurfacePropertyKeyPlaneElementWidth;
        uint64_t v71 = +[NSNumber numberWithUnsignedLong:IOSurfaceGetElementWidthOfPlane(a1, v13)];
        v78[3] = v71;
        v77[4] = IOSurfacePropertyKeyPlaneHeight;
        uint64_t v70 = +[NSNumber numberWithUnsignedLong:IOSurfaceGetHeightOfPlane(a1, v13)];
        v78[4] = v70;
        v77[5] = IOSurfacePropertyKeyPlaneWidth;
        CGFloat v69 = +[NSNumber numberWithUnsignedLong:IOSurfaceGetWidthOfPlane(a1, v13)];
        v78[5] = v69;
        v77[6] = IOSurfacePropertyKeyPlaneOffset;
        double v66 = +[NSNumber numberWithLong:BaseAddressOfPlane - BaseAddress];
        v78[6] = v66;
        v77[7] = IOSurfacePropertyKeyPlaneSize;
        uint64_t v65 = +[NSNumber numberWithUnsignedLong:IOSurfaceGetSizeOfPlane()];
        v78[7] = v65;
        v77[8] = v56;
        uint64_t v64 = +[NSNumber numberWithUnsignedInt:IOSurfaceGetCompressionTypeOfPlane()];
        v78[8] = v64;
        v77[9] = v55;
        id v63 = +[NSNumber numberWithUnsignedInt:IOSurfaceGetCompressionFootprintOfPlane()];
        v78[9] = v63;
        v77[10] = v54;
        uint64_t v62 = +[NSNumber numberWithUnsignedLong:IOSurfaceGetCompressedTileWidthOfPlane()];
        v78[10] = v62;
        v77[11] = v53;
        id v61 = +[NSNumber numberWithUnsignedLong:IOSurfaceGetCompressedTileHeightOfPlane()];
        v78[11] = v61;
        v77[12] = v52;
        id v60 = +[NSNumber numberWithUnsignedLong:IOSurfaceGetBytesPerTileDataOfPlane()];
        v78[12] = v60;
        v77[13] = v51;
        __int16 v15 = +[NSNumber numberWithUnsignedLong:IOSurfaceGetBytesPerCompressedTileHeaderOfPlane()];
        v78[13] = v15;
        v77[14] = v50;
        char v16 = +[NSNumber numberWithUnsignedLong:IOSurfaceGetWidthInCompressedTilesOfPlane()];
        v78[14] = v16;
        v77[15] = v49;
        uint64_t v17 = +[NSNumber numberWithUnsignedLong:IOSurfaceGetHeightInCompressedTilesOfPlane()];
        v78[15] = v17;
        v77[16] = v48;
        id v18 = +[NSNumber numberWithUnsignedLong:IOSurfaceGetBytesPerRowOfTileDataOfPlane()];
        v78[16] = v18;
        v77[17] = v47;
        int64x2_t v19 = +[NSNumber numberWithLong:BaseAddressOfCompressedTileHeaderRegionOfPlane - (void)BaseAddress];
        v78[17] = v19;
        v77[18] = v46;
        __int16 v20 = +[NSNumber numberWithLong:BaseAddressOfCompressedTileDataRegionOfPlane - (void)BaseAddress];
        v78[18] = v20;
        v77[19] = v45;
        __int16 v21 = +[NSNumber numberWithUnsignedChar:IOSurfaceGetAddressFormatOfPlane()];
        v78[19] = v21;
        __int16 v22 = +[NSDictionary dictionaryWithObjects:v78 forKeys:v77 count:20];
        [v59 addObject:v22];

        ++v13;
      }
      while (v58 != v13);
      v75[0] = IOSurfacePropertyKeyAllocSize;
      long long v23 = +[NSNumber numberWithUnsignedLong:IOSurfaceGetAllocSize(a1)];
      v76[0] = v23;
      v75[1] = IOSurfacePropertyKeyWidth;
      uint64_t v24 = +[NSNumber numberWithUnsignedLong:IOSurfaceGetWidth(a1)];
      v76[1] = v24;
      v75[2] = IOSurfacePropertyKeyHeight;
      long long v25 = +[NSNumber numberWithUnsignedLong:IOSurfaceGetHeight(a1)];
      v76[2] = v25;
      v75[3] = IOSurfacePropertyKeyPixelFormat;
      id v26 = +[NSNumber numberWithUnsignedInt:IOSurfaceGetPixelFormat(a1)];
      v76[3] = v26;
      v75[4] = IOSurfacePropertyKeyPlaneInfo;
      id v27 = [v59 copy];
      v76[4] = v27;
      v75[5] = IOSurfacePropertyKeyPixelSizeCastingAllowed;
      long long v28 = +[NSNumber numberWithUnsignedChar:IOSurfaceAllowsPixelSizeCasting(a1)];
      v76[5] = v28;
      v75[6] = IOSurfacePropertyKeyCacheMode;
      uint64_t v29 = +[NSNumber numberWithUnsignedInt:IOSurfaceGetCacheMode()];
      v76[6] = v29;
      uint64_t v30 = +[NSDictionary dictionaryWithObjects:v76 forKeys:v75 count:7];

      id v31 = [(__CFDictionary *)v43 mutableCopy];
      [v31 setObject:v30 forKeyedSubscript:v40];
      CFDictionaryRef v7 = (CFDictionaryRef)[v31 copy];

      id v9 = (void *)v30;
      uint64_t v6 = v44;
      a3 = v42;
      uint64_t v4 = v41;
    }
  }
LABEL_10:

  uint64_t v32 = GTMTLDescriptorAllocator_copyDictionary(v4, v7, a3);
  if (a3)
  {
    id v34 = v32;
    uint64_t v35 = v33;
    *(_OWORD *)(v6 + 104) = 0u;
    *(_OWORD *)(v6 + 88) = 0u;
    *(_OWORD *)(v6 + 72) = 0u;
    *(_OWORD *)(v6 + 56) = 0u;
    *(_OWORD *)(v6 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
    *(_OWORD *)(v6 + 24) = 0u;
    *(_OWORD *)(v6 + 8) = 0u;
    *(void *)uint64_t v6 = a1;
    *(void *)(v6 + 8) = IOSurfaceGetAllocSize(a1);
    *(_WORD *)(v6 + 92) = IOSurfaceGetWidth(a1);
    *(_WORD *)(v6 + 94) = IOSurfaceGetHeight(a1);
    *(_WORD *)(v6 + 96) = IOSurfaceGetBytesPerElement(a1);
    *(_DWORD *)(v6 + 8mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = IOSurfaceGetBytesPerRow(a1);
    *(_WORD *)(v6 + 98) = IOSurfaceGetElementWidth(a1);
    *(_WORD *)(v6 + 10mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = IOSurfaceGetElementHeight(a1);
    *(_DWORD *)(v6 + 84) = IOSurfaceGetPixelFormat(a1);
    LODWORD(v78[0]) = 2;
    IOSurfaceGetYCbCrMatrix();
    *(_DWORD *)(v6 + 88) = v78[0];
    char v36 = IOSurfaceGetPlaneCount(a1);
    *(unsigned char *)(v6 + 102) = v36;
    if (v36)
    {
      size_t v37 = 0;
      id v38 = (_WORD *)(v6 + 28);
      do
      {
        *(v38 - 4) = IOSurfaceGetWidthOfPlane(a1, v37);
        *(v38 - 3) = IOSurfaceGetHeightOfPlane(a1, v37);
        *(v38 - 2) = IOSurfaceGetBytesPerElementOfPlane(a1, v37);
        *((_DWORD *)v38 - 3) = IOSurfaceGetBytesPerRowOfPlane(a1, v37);
        *(v38 - 1) = IOSurfaceGetElementWidthOfPlane(a1, v37);
        _WORD *v38 = IOSurfaceGetElementHeightOfPlane(a1, v37);
        v38 += 8;
        ++v37;
      }
      while (v37 < *(unsigned __int8 *)(v6 + 102));
    }
    *(void *)(v6 + 104) = v34;
    *(void *)(v6 + 112) = v35;
  }
}

id MakeIOSurface(uint64_t a1)
{
  uint64_t v1 = a1;
  id v2 = NSComparisonPredicate_ptr;
  if (*(void *)(a1 + 104))
  {
    id v3 = [objc_alloc((Class)NSData) initWithBytesNoCopy:*(void *)(a1 + 104) length:*(void *)(a1 + 112) freeWhenDone:0];
    uint64_t v4 = objc_opt_class();
    uint64_t v5 = objc_opt_class();
    uint64_t v6 = objc_opt_class();
    uint64_t v55 = objc_opt_class();
    id v2 = NSComparisonPredicate_ptr;
    CFDictionaryRef v7 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v4, v5, v6, v55, objc_opt_class(), 0);
    uint64_t v8 = +[NSKeyedUnarchiver unarchivedObjectOfClasses:v7 fromData:v3 error:0];
    id v57 = [v8 objectForKeyedSubscript:kIOSurfaceCreationProperties];

    uint64_t v1 = a1;
  }
  else
  {
    id v57 = 0;
  }
  id v9 = objc_alloc_init((Class)NSMutableDictionary);
  size_t v10 = [v2[18] numberWithUnsignedLongLong:*(void *)v1];
  [v9 setObject:v10 forKeyedSubscript:@"address"];

  size_t v11 = [v2[18] numberWithUnsignedShort:*(unsigned __int16 *)(v1 + 92)];
  [v9 setObject:v11 forKeyedSubscript:IOSurfacePropertyKeyWidth];

  uint64_t v12 = [v2[18] numberWithUnsignedShort:*(unsigned __int16 *)(v1 + 94)];
  [v9 setObject:v12 forKeyedSubscript:IOSurfacePropertyKeyHeight];

  size_t v13 = [v2[18] numberWithUnsignedInt:*(unsigned int *)(v1 + 84)];
  [v9 setObject:v13 forKeyedSubscript:IOSurfacePropertyKeyPixelFormat];

  if (!*(unsigned char *)(v1 + 102))
  {
    char v14 = [v2[18] numberWithUnsignedShort:*(unsigned __int16 *)(v1 + 96)];
    [v9 setObject:v14 forKeyedSubscript:IOSurfacePropertyKeyBytesPerElement];

    __int16 v15 = [v2[18] numberWithUnsignedInt:*(unsigned int *)(v1 + 80)];
    [v9 setObject:v15 forKeyedSubscript:IOSurfacePropertyKeyBytesPerRow];

    char v16 = [v2[18] numberWithUnsignedShort:*(unsigned __int16 *)(v1 + 98)];
    [v9 setObject:v16 forKeyedSubscript:IOSurfacePropertyKeyElementWidth];

    uint64_t v17 = [v2[18] numberWithUnsignedShort:*(unsigned __int16 *)(v1 + 100)];
    [v9 setObject:v17 forKeyedSubscript:IOSurfacePropertyKeyElementHeight];
  }
  id v18 = [v2[18] numberWithUnsignedLongLong:*(void *)(v1 + 8)];
  id v56 = v9;
  [v9 setObject:v18 forKeyedSubscript:IOSurfacePropertyKeyAllocSize];

  if (v57)
  {
    v74[0] = IOSurfacePropertyKeyAllocSize;
    v74[1] = IOSurfacePropertyKeyWidth;
    void v74[2] = IOSurfacePropertyKeyHeight;
    v74[3] = IOSurfacePropertyKeyBytesPerElement;
    void v74[4] = IOSurfacePropertyKeyBytesPerRow;
    v74[5] = IOSurfacePropertyKeyElementWidth;
    v74[6] = IOSurfacePropertyKeyElementHeight;
    v74[7] = IOSurfacePropertyKeyPixelFormat;
    v74[8] = @"IOSurfaceAddress";
    v74[9] = @"IOSurfaceProtectionOptions";
    int64x2_t v19 = +[NSArray arrayWithObjects:v74 count:10];
    long long v67 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    id v20 = v57;
    id v21 = [v20 countByEnumeratingWithState:&v67 objects:v73 count:16];
    if (v21)
    {
      id v22 = v21;
      uint64_t v23 = *(void *)v68;
      do
      {
        for (uint64_t i = 0; i != v22; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v68 != v23) {
            objc_enumerationMutation(v20);
          }
          uint64_t v25 = *(void *)(*((void *)&v67 + 1) + 8 * i);
          if (([v19 containsObject:v25] & 1) == 0)
          {
            id v26 = [v20 objectForKeyedSubscript:v25];
            [v56 setObject:v26 forKeyedSubscript:v25];
          }
        }
        id v22 = [v20 countByEnumeratingWithState:&v67 objects:v73 count:16];
      }
      while (v22);
    }
  }
  uint64_t v27 = a1;
  if (*(unsigned char *)(a1 + 102))
  {
    v72[0] = IOSurfacePropertyKeyPlaneWidth;
    v72[1] = IOSurfacePropertyKeyPlaneHeight;
    v72[2] = IOSurfacePropertyKeyPlaneBytesPerElement;
    _OWORD v72[3] = IOSurfacePropertyKeyPlaneBytesPerRow;
    v72[4] = IOSurfacePropertyKeyPlaneElementWidth;
    v72[5] = IOSurfacePropertyKeyPlaneElementHeight;
    long long v28 = +[NSArray arrayWithObjects:v72 count:6];
    id v59 = [objc_alloc((Class)NSMutableArray) initWithCapacity:*(unsigned __int8 *)(a1 + 102)];
    uint64_t v62 = [v57 objectForKeyedSubscript:IOSurfacePropertyKeyPlaneInfo];
    uint64_t v29 = NSComparisonPredicate_ptr;
    if (*(unsigned char *)(a1 + 102))
    {
      unint64_t v30 = 0;
      uint64_t v61 = 0;
      do
      {
        uint64_t v31 = v27 + 16 * v30;
        int v32 = *(unsigned __int16 *)(v31 + 22);
        int v33 = *(_DWORD *)(v31 + 16);
        id v34 = objc_alloc_init((Class)NSMutableDictionary);
        uint64_t v35 = [v29[18] numberWithUnsignedShort:*(unsigned __int16 *)(v31 + 20)];
        [v34 setObject:v35 forKeyedSubscript:IOSurfacePropertyKeyPlaneWidth];

        char v36 = [v29[18] numberWithUnsignedShort:*(unsigned __int16 *)(v31 + 22)];
        [v34 setObject:v36 forKeyedSubscript:IOSurfacePropertyKeyPlaneHeight];

        size_t v37 = [v29[18] numberWithUnsignedShort:*(unsigned __int16 *)(v31 + 24)];
        [v34 setObject:v37 forKeyedSubscript:IOSurfacePropertyKeyPlaneBytesPerElement];

        id v38 = [v29[18] numberWithUnsignedInt:*(unsigned int *)(v31 + 16)];
        [v34 setObject:v38 forKeyedSubscript:IOSurfacePropertyKeyPlaneBytesPerRow];

        if (*(_WORD *)(v31 + 26))
        {
          uint64_t v39 = objc_msgSend(v29[18], "numberWithUnsignedShort:");
          [v34 setObject:v39 forKeyedSubscript:IOSurfacePropertyKeyPlaneElementWidth];
        }
        if (*(_WORD *)(v31 + 28))
        {
          uint64_t v40 = objc_msgSend(v29[18], "numberWithUnsignedShort:");
          [v34 setObject:v40 forKeyedSubscript:IOSurfacePropertyKeyPlaneElementHeight];
        }
        uint64_t v41 = (v33 * v32);
        int v42 = [v29[18] numberWithUnsignedInteger:v61];
        [v34 setObject:v42 forKeyedSubscript:IOSurfacePropertyKeyPlaneOffset];

        CFDictionaryRef v43 = [v29[18] numberWithUnsignedInteger:v41];
        [v34 setObject:v43 forKeyedSubscript:IOSurfacePropertyKeyPlaneSize];

        if (v62)
        {
          uint64_t v60 = v41;
          long long v65 = 0u;
          long long v66 = 0u;
          long long v63 = 0u;
          long long v64 = 0u;
          uint64_t v44 = [v62 objectAtIndexedSubscript:v30];
          id v45 = [v44 countByEnumeratingWithState:&v63 objects:v71 count:16];
          if (v45)
          {
            id v46 = v45;
            uint64_t v47 = *(void *)v64;
            do
            {
              for (uint64_t j = 0; j != v46; uint64_t j = (char *)j + 1)
              {
                if (*(void *)v64 != v47) {
                  objc_enumerationMutation(v44);
                }
                uint64_t v49 = *(void *)(*((void *)&v63 + 1) + 8 * (void)j);
                if (([v28 containsObject:v49] & 1) == 0)
                {
                  uint64_t v50 = [v62 objectAtIndexedSubscript:v30];
                  uint64_t v51 = [v50 objectForKeyedSubscript:v49];
                  [v34 setObject:v51 forKeyedSubscript:v49];
                }
              }
              id v46 = [v44 countByEnumeratingWithState:&v63 objects:v71 count:16];
            }
            while (v46);
          }

          uint64_t v27 = a1;
          uint64_t v29 = NSComparisonPredicate_ptr;
          uint64_t v41 = v60;
        }
        id v52 = [v34 copy];
        [v59 addObject:v52];

        v61 += v41;
        ++v30;
      }
      while (v30 < *(unsigned __int8 *)(v27 + 102));
    }
    id v53 = [v59 copy];
    [v56 setObject:v53 forKeyedSubscript:IOSurfacePropertyKeyPlaneInfo];
  }

  return v56;
}

void TranslateGTMTLRasterizationRateMapDescriptor(void *a1, void *a2, int a3)
{
  id v5 = a1;
  uint64_t v6 = a2[13];
  a2[13] = v6 + 40;
  id v7 = [v5 label];
  uint64_t v8 = (const char *)[v7 UTF8String];
  id v9 = v8;
  if (v8)
  {
    size_t v10 = strlen(v8);
    size_t v11 = a2 + 52;
    uint64_t v12 = a2[52];
    size_t v13 = v10 + 1;
    if (v10 != -1)
    {
      char v14 = (void *)a2[52];
      goto LABEL_6;
    }
  }
  else
  {
    size_t v11 = a2 + 52;
    uint64_t v12 = a2[52];
  }
  size_t v13 = 0;
  char v14 = 0;
LABEL_6:
  *size_t v11 = v12 + v13;
  if (a3) {
    memcpy(v14, v9, v13);
  }
  id v26 = v14;

  uint64_t v25 = a2[36];
  __int16 v15 = (char *)[v5 layerCount];
  if (v15)
  {
    char v16 = v15;
    for (uint64_t i = 0; i != v16; ++i)
    {
      uint64_t v18 = a2[36];
      a2[36] = v18 + 24;
      int64x2_t v19 = [v5 layers];
      id v20 = [v19 objectAtIndexedSubscript:i];

      if (v20) {
        [v20 sampleCount];
      }
      uint64_t v21 = a2[51];
      a2[51] = v21;
      if (a3)
      {
        *(void *)uint64_t v18 = v21;
        *(void *)(v18 + 8) = v21;
        *(_WORD *)(v18 + 16) = 0;
        *(_WORD *)(v18 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0;
        *(_WORD *)(v18 + 18) = 0;
      }
    }
  }
  if (a3)
  {
    *(void *)(v6 + 32) = 0x20000;
    *(_OWORD *)uint64_t v6 = GTMTLRasterizationRateMapDescriptorDefaults;
    *(_OWORD *)(v6 + 16) = unk_1DF998;
    *(void *)uint64_t v6 = v26;
    unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((a2[36] - v25) >> 3);
    if (a2[36] == v25) {
      uint64_t v23 = 0;
    }
    else {
      uint64_t v23 = v25;
    }
    *(void *)(v6 + 8) = v23;
    *(void *)(v6 + 16) = v22;
    if (v5) {
      [v5 screenSize];
    }
    *(_WORD *)(v6 + 32) = 0;
    *(_WORD *)(v6 + 3mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0;
    *(_WORD *)(v6 + 28) = 0;
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(v6 + 34) = [v5 mutability];
    }
    if (objc_opt_respondsToSelector())
    {
      [v5 minFactor];
      *(_DWORD *)(v6 + 24) = v24;
    }
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(v6 + 35) = [v5 skipSampleValidationAndApplySampleAtTileGranularity];
    }
  }
}

id MakeMTLRasterizationRateMapDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = 8 * v3;
  __chkstk_darwin(a1, a2);
  id v5 = (char *)v23 - ((8 * v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v5, 8 * v3);
  if (*(void *)(a1 + 16))
  {
    v23[1] = v23;
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      uint64_t v8 = (unsigned __int16 *)(*(void *)(a1 + 8) + v6);
      uint64_t v9 = v8[8];
      uint64_t v10 = v8[10];
      uint64_t v11 = v8[9];
      id v12 = objc_alloc((Class)MTLRasterizationRateLayerDescriptor);
      uint64_t v24 = v9;
      uint64_t v25 = v10;
      uint64_t v26 = v11;
      id v13 = [v12 initWithSampleCount:&v24];
      char v14 = *(void **)&v5[8 * v7];
      *(void *)&v5[8 * v7] = v13;

      memcpy([v13 horizontalSampleStorage], *(const void **)(*(void *)(a1 + 8) + v6), 4 * v9);
      memcpy([v13 verticalSampleStorage], *(const void **)(*(void *)(a1 + 8) + v6 + 8), 4 * v10);
      ++v7;
      unint64_t v15 = *(void *)(a1 + 16);
      v6 += 24;
    }
    while (v7 < v15);
  }
  else
  {
    unint64_t v15 = 0;
  }
  uint64_t v16 = *(unsigned __int16 *)(a1 + 30);
  uint64_t v17 = *(unsigned __int16 *)(a1 + 28);
  uint64_t v24 = *(unsigned __int16 *)(a1 + 32);
  uint64_t v25 = v16;
  uint64_t v26 = v17;
  uint64_t v18 = +[MTLRasterizationRateMapDescriptor rasterizationRateMapDescriptorWithScreenSize:&v24 layerCount:v15 layers:(char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (*(void *)a1)
  {
    int64x2_t v19 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:");
    [v18 setLabel:v19];
  }
  if (objc_opt_respondsToSelector()) {
    [v18 setMutability:*(unsigned __int8 *)(a1 + 34)];
  }
  if (objc_opt_respondsToSelector())
  {
    LODWORD(v2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *(_DWORD *)(a1 + 24);
    [v18 setMinFactor:v20];
  }
  if (objc_opt_respondsToSelector()) {
    [v18 setSkipSampleValidationAndApplySampleAtTileGranularity:*(unsigned char *)(a1 + 35) != 0];
  }
  if (v3)
  {
    uint64_t v21 = v5 - 8;
    do
    {

      v4 -= 8;
    }
    while (v4);
  }

  return v18;
}

void TranslateGTMTLCounterSampleBufferDescriptor(void *a1, void *a2, int a3)
{
  id v5 = a1;
  uint64_t v59 = a2[38];
  a2[38] = v59 + 48;
  id v61 = v5;
  id v6 = [v5 label];
  unint64_t v7 = (const char *)[v6 UTF8String];
  uint64_t v8 = v7;
  if (v7)
  {
    size_t v9 = strlen(v7);
    uint64_t v10 = a2 + 52;
    uint64_t v11 = a2[52];
    size_t v12 = v9 + 1;
    if (v9 != -1)
    {
      id v13 = (void *)a2[52];
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v10 = a2 + 52;
    uint64_t v11 = a2[52];
  }
  size_t v12 = 0;
  id v13 = 0;
LABEL_6:
  *uint64_t v10 = v11 + v12;
  if (a3) {
    memcpy(v13, v8, v12);
  }
  size_t v58 = v13;

  char v14 = [v61 counterSet];
  id v15 = [v14 name];
  uint64_t v16 = (const char *)[v15 UTF8String];
  uint64_t v17 = v16;
  if (v16)
  {
    size_t v18 = strlen(v16);
    int64x2_t v19 = a2 + 52;
    uint64_t v20 = a2[52];
    size_t v21 = v18 + 1;
    if (v18 != -1)
    {
      __dst = (void *)a2[52];
      goto LABEL_13;
    }
  }
  else
  {
    int64x2_t v19 = a2 + 52;
    uint64_t v20 = a2[52];
  }
  size_t v21 = 0;
  __dst = 0;
LABEL_13:
  *int64x2_t v19 = v20 + v21;
  if (a3) {
    memcpy(__dst, v17, v21);
  }

  unint64_t v22 = [v61 counterSet];
  id v23 = [v22 description];
  uint64_t v24 = (const char *)[v23 UTF8String];
  uint64_t v25 = v24;
  if (v24)
  {
    size_t v26 = strlen(v24);
    uint64_t v27 = a2 + 52;
    uint64_t v28 = a2[52];
    size_t v29 = v26 + 1;
    if (v26 != -1)
    {
      unint64_t v30 = (void *)a2[52];
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v27 = a2 + 52;
    uint64_t v28 = a2[52];
  }
  size_t v29 = 0;
  unint64_t v30 = 0;
LABEL_20:
  *uint64_t v27 = v28 + v29;
  if (a3) {
    memcpy(v30, v25, v29);
  }
  id v57 = v30;

  uint64_t v56 = a2[49];
  uint64_t v31 = [v61 counterSet];
  int v32 = [v31 counters];
  unsigned int v33 = [v32 count];

  uint64_t v34 = v33;
  if (v33)
  {
    for (uint64_t i = 0; v34 != i; ++i)
    {
      char v36 = (void *)a2[49];
      a2[49] = v36 + 2;
      size_t v37 = [v61 counterSet];
      id v38 = [v37 counters];
      uint64_t v39 = [v38 objectAtIndexedSubscript:i];

      id v40 = [v39 name];
      uint64_t v41 = (const char *)[v40 UTF8String];
      int v42 = v41;
      if (v41)
      {
        size_t v43 = strlen(v41);
        uint64_t v44 = a2[52];
        size_t v45 = v43 + 1;
        if (v43 != -1)
        {
          id v46 = (void *)a2[52];
          goto LABEL_29;
        }
      }
      else
      {
        uint64_t v44 = a2[52];
      }
      size_t v45 = 0;
      id v46 = 0;
LABEL_29:
      a2[52] = v44 + v45;
      if (a3) {
        memcpy(v46, v42, v45);
      }

      id v47 = [v39 description];
      uint64_t v48 = (const char *)[v47 UTF8String];
      uint64_t v49 = v48;
      if (!v48)
      {
        uint64_t v51 = a2[52];
LABEL_35:
        size_t v52 = 0;
        id v53 = 0;
        goto LABEL_36;
      }
      size_t v50 = strlen(v48);
      uint64_t v51 = a2[52];
      size_t v52 = v50 + 1;
      if (v50 == -1) {
        goto LABEL_35;
      }
      id v53 = (void *)a2[52];
LABEL_36:
      a2[52] = v51 + v52;
      if (a3)
      {
        memcpy(v53, v49, v52);

        *char v36 = v46;
        v36[1] = v53;
      }
      else
      {
      }
    }
  }
  if (a3)
  {
    *(void *)(v59 + 32) = 0;
    *(void *)(v59 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0;
    *(void *)uint64_t v59 = v58;
    *(void *)(v59 + 8) = __dst;
    *(void *)(v59 + 16) = v57;
    *(void *)(v59 + 24) = 0;
    unint64_t v54 = (unint64_t)(a2[49] - v56) >> 4;
    *(_DWORD *)(v59 + 32) = v54;
    if (v54) {
      uint64_t v55 = v56;
    }
    else {
      uint64_t v55 = 0;
    }
    *(void *)(v59 + 24) = v55;
    *(_DWORD *)(v59 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = [v61 sampleCount];
    *(unsigned char *)(v59 + 44) = [v61 storageMode];
  }
}

id MakeMTLCounterSampleBufferDescriptor(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)MTLCounterSampleBufferDescriptor);
  id v5 = +[NSString stringWithUTF8String:*(void *)(a1 + 8)];
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  uint64_t v16 = v3;
  id v6 = [v3 counterSets];
  id v7 = [v6 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v18;
    while (2)
    {
      for (uint64_t i = 0; i != v8; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v18 != v9) {
          objc_enumerationMutation(v6);
        }
        uint64_t v11 = *(void **)(*((void *)&v17 + 1) + 8 * i);
        size_t v12 = [v11 name];
        unsigned int v13 = [v5 isEqualToString:v12];

        if (v13)
        {
          [v4 setCounterSet:v11];
          goto LABEL_11;
        }
      }
      id v8 = [v6 countByEnumeratingWithState:&v17 objects:v21 count:16];
      if (v8) {
        continue;
      }
      break;
    }
  }
LABEL_11:

  if (*(void *)a1)
  {
    char v14 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:");
    [v4 setLabel:v14];
  }
  [v4 setStorageMode:*(unsigned __int8 *)(a1 + 44)];
  [v4 setSampleCount:*(unsigned int *)(a1 + 40)];

  return v4;
}

char *TranslateGTMTLImageFilterFunctionInfo(char *result, int a2, uint64_t a3, char a4)
{
  if (a2 >= 1)
  {
    uint64_t v6 = a2;
    id v7 = (const void **)(result + 8);
    do
    {
      uint64_t v8 = *(void *)(a3 + 256);
      *(void *)(a3 + 256) = v8 + 24;
      if (a4)
      {
        uint64_t v9 = *(void **)(a3 + 328);
        id result = (char *)memcpy(v9, v7[1], 24 * (void)*v7);
        *(unsigned char *)uint64_t v8 = *((unsigned char *)v7 - 8);
        uint64_t v10 = *v7;
        if (*v7) {
          uint64_t v11 = v9;
        }
        else {
          uint64_t v11 = 0;
        }
        *(void *)(v8 + 8) = v10;
        *(void *)(v8 + 16) = v11;
      }
      else
      {
        uint64_t v10 = *v7;
      }
      *(void *)(a3 + 328) += 24 * (void)v10;
      v7 += 3;
      --v6;
    }
    while (v6);
  }
  return result;
}

void TranslateGTMTLFunctionConstantValues(void *a1, void *a2, void *a3, int a4)
{
  id v7 = a1;
  id v8 = a2;
  uint64_t v27 = (void *)a3[15];
  a3[15] = v27 + 2;
  uint64_t v26 = a3[40];
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  id obj = v7;
  id v29 = [v7 countByEnumeratingWithState:&v31 objects:v35 count:16];
  if (v29)
  {
    uint64_t v28 = *(void *)v32;
    do
    {
      for (uint64_t i = 0; i != v29; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v32 != v28) {
          objc_enumerationMutation(obj);
        }
        uint64_t v10 = [obj objectForKeyedSubscript:*(void *)(*((void *)&v31 + 1) + 8 * i)];
        uint64_t v11 = a3[40];
        a3[40] = v11 + 32;
        id v12 = [v10 name];
        unsigned int v13 = (const char *)[v12 UTF8String];
        char v14 = v13;
        if (v13)
        {
          size_t v15 = strlen(v13);
          uint64_t v16 = a3[52];
          size_t v17 = v15 + 1;
          if (v15 != -1)
          {
            long long v18 = (void *)a3[52];
            goto LABEL_11;
          }
        }
        else
        {
          uint64_t v16 = a3[52];
        }
        size_t v17 = 0;
        long long v18 = 0;
LABEL_11:
        a3[52] = v16 + v17;
        if (a4) {
          memcpy(v18, v14, v17);
        }

        if (v8 && (id v19 = [v8 constantValueWithFunctionConstant:v10]) != 0)
        {
          long long v20 = v19;
          [v10 type];
          size_t v21 = _MTLConstantDataSize();
          unint64_t v22 = (char *)a3[52];
          id v23 = v22;
          if (v21) {
            goto LABEL_19;
          }
        }
        else
        {
          size_t v21 = 0;
          long long v20 = 0;
          unint64_t v22 = (char *)a3[52];
        }
        id v23 = 0;
LABEL_19:
        a3[52] = &v22[v21];
        if (a4)
        {
          memcpy(v23, v20, v21);
          *(_WORD *)(v11 + 24) = (unsigned __int16)[v10 index];
          *(void *)(v11 + 16) = v18;
          *(unsigned char *)(v11 + 27) = [v10 type];
          *(unsigned char *)(v11 + 26) = [v10 required];
          *(void *)uint64_t v11 = v23;
          *(void *)(v11 + 8) = v21;
        }
      }
      id v29 = [obj countByEnumeratingWithState:&v31 objects:v35 count:16];
    }
    while (v29);
  }
  if (a4)
  {
    uint64_t v24 = v26;
    uint64_t v25 = (a3[40] - v26) >> 5;
    if (a3[40] == v26) {
      uint64_t v24 = 0;
    }
    *uint64_t v27 = v24;
    v27[1] = v25;
  }
}

id MakeMTLFunctionConstantValues(void *a1)
{
  id v2 = objc_alloc_init((Class)MTLFunctionConstantValues);
  unint64_t v3 = a1[1];
  if (v3)
  {
    uint64_t v4 = 0;
    for (unint64_t i = 0; i < v3; ++i)
    {
      uint64_t v6 = *(void *)(*a1 + v4);
      if (v6)
      {
        [v2 setConstantValue:v6 type:*(unsigned __int8 *)(*a1 + v4 + 27) atIndex:*(unsigned __int16 *)(*a1 + v4 + 24)];
        unint64_t v3 = a1[1];
      }
      v4 += 32;
    }
  }

  return v2;
}

void TranslateGTMTLFunctionDescriptor(void *a1, void *a2, void *a3, int a4)
{
  id v32 = a1;
  id v7 = a2;
  uint64_t v8 = a3[12];
  a3[12] = v8 + 48;
  id v9 = [v32 name];
  uint64_t v10 = (const char *)[v9 UTF8String];
  uint64_t v11 = v10;
  if (v10)
  {
    size_t v12 = strlen(v10);
    unsigned int v13 = a3 + 52;
    uint64_t v14 = a3[52];
    size_t v15 = v12 + 1;
    if (v12 != -1)
    {
      uint64_t v16 = (void *)a3[52];
      goto LABEL_6;
    }
  }
  else
  {
    unsigned int v13 = a3 + 52;
    uint64_t v14 = a3[52];
  }
  size_t v15 = 0;
  uint64_t v16 = 0;
LABEL_6:
  *unsigned int v13 = v14 + v15;
  if (a4) {
    memcpy(v16, v11, v15);
  }

  id v17 = [v32 specializedName];
  long long v18 = (const char *)[v17 UTF8String];
  id v19 = v18;
  if (v18)
  {
    size_t v20 = strlen(v18);
    size_t v21 = a3 + 52;
    uint64_t v22 = a3[52];
    size_t v23 = v20 + 1;
    if (v20 != -1)
    {
      uint64_t v24 = (void *)a3[52];
      goto LABEL_13;
    }
  }
  else
  {
    size_t v21 = a3 + 52;
    uint64_t v22 = a3[52];
  }
  size_t v23 = 0;
  uint64_t v24 = 0;
LABEL_13:
  *size_t v21 = v22 + v23;
  if (a4) {
    memcpy(v24, v19, v23);
  }

  uint64_t v25 = [v32 constantValues];

  if (v25)
  {
    uint64_t v26 = a3[15];
    uint64_t v27 = [v32 constantValues];
    TranslateGTMTLFunctionConstantValues(v7, v27, a3, a4);
  }
  else
  {
    uint64_t v26 = 0;
  }
  if (objc_opt_respondsToSelector())
  {
    uint64_t v28 = [v32 privateFunctions];
    uint64_t v29 = TranslateNSArray(v28, (uint64_t)a3, a4);
    unsigned __int16 v30 = (unsigned __int16)[v28 count];

    uint64_t v31 = v30;
    if (!a4) {
      goto LABEL_25;
    }
  }
  else
  {
    uint64_t v29 = 0;
    uint64_t v31 = 0;
    if (!a4) {
      goto LABEL_25;
    }
  }
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)uint64_t v8 = 0u;
  if (objc_opt_respondsToSelector()) {
    *(unsigned char *)(v8 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = [v32 options];
  }
  *(void *)(v8 + 24) = v31;
  *(void *)(v8 + 32) = v24;
  *(void *)uint64_t v8 = v26;
  *(void *)(v8 + 8) = v16;
  *(void *)(v8 + 16) = v29;
LABEL_25:
}

id MakeMTLFunctionDescriptor(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)MTLFunctionDescriptor);
  [v4 setOptions:*(unsigned __int8 *)(a1 + 40)];
  if (*(void *)(a1 + 8))
  {
    id v5 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:");
    [v4 setName:v5];
  }
  if (*(void *)(a1 + 32))
  {
    uint64_t v6 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:");
    [v4 setSpecializedName:v6];
  }
  if (*(void *)a1)
  {
    id v7 = MakeMTLFunctionConstantValues(*(void **)a1);
    [v4 setConstantValues:v7];
  }
  if (*(void *)(a1 + 24) && (objc_opt_respondsToSelector() & 1) != 0)
  {
    uint64_t v8 = CreateObjectArrayWithMap(*(uint64_t **)(a1 + 16), *(_DWORD *)(a1 + 24), v3);
    [v4 setPrivateFunctions:v8];
  }

  return v4;
}

void TranslateGTMTLAccelerationStructureDescriptor(void *a1, void *a2, int a3)
{
  id v149 = a1;
  uint64_t v5 = a2[10];
  a2[10] = v5 + 96;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v144 = v5;
    id v6 = v149;
    uint64_t v148 = a2[37];
    id v7 = [v6 geometryDescriptors];
    a2[37] += 136 * (void)[v7 count];

    uint64_t v8 = [v6 geometryDescriptors];
    id v9 = [v8 count];

    if (v9)
    {
      unint64_t v10 = 0;
      uint64_t v151 = v6;
      int v150 = a3;
      long long v152 = a2;
      do
      {
        uint64_t v11 = objc_msgSend(v6, "geometryDescriptors", v141);
        id v12 = [v11 objectAtIndexedSubscript:v10];
        unsigned int v13 = [v12 intersectionFunctionTableOffset];
        unsigned __int8 v14 = [v12 opaque];
        unsigned __int8 v15 = [v12 allowDuplicateIntersectionFunctionInvocation];
        id v16 = [v12 label];
        id v17 = (const char *)[v16 UTF8String];
        long long v18 = v17;
        if (v17)
        {
          size_t v19 = strlen(v17);
          uint64_t v20 = a2[52];
          size_t v21 = v19 + 1;
          if (v19 != -1)
          {
            BOOL v169 = (void *)a2[52];
            goto LABEL_9;
          }
        }
        else
        {
          uint64_t v20 = a2[52];
        }
        size_t v21 = 0;
        BOOL v169 = 0;
LABEL_9:
        a2[52] = v20 + v21;
        if (a3) {
          memcpy(v169, v18, v21);
        }

        if (objc_opt_respondsToSelector())
        {
          uint64_t v22 = [v12 primitiveDataBuffer];
          uint64_t v23 = [v22 streamReference];

          id v24 = [v12 primitiveDataBufferOffset];
          unsigned int v163 = [v12 primitiveDataStride];
          unsigned int v162 = [v12 primitiveDataElementSize];
        }
        else
        {
          unsigned int v162 = 0;
          unsigned int v163 = 0;
          id v24 = 0;
          uint64_t v23 = 0;
        }
        objc_opt_class();
        BOOL v170 = v11;
        unsigned int v168 = v13;
        unsigned __int8 v166 = v15;
        unsigned __int8 v167 = v14;
        id v164 = v24;
        uint64_t v165 = v23;
        if (objc_opt_isKindOfClass())
        {
          id v25 = v12;
          uint64_t v26 = [v25 vertexBuffer];
          unsigned int v27 = [v26 streamReference];

          uint64_t v160 = (uint64_t)[v25 vertexBufferOffset];
          id v153 = [v25 vertexStride];
          uint64_t v28 = [v25 indexBuffer];
          unsigned int v29 = [v28 streamReference];

          unsigned __int16 v30 = (char *)[v25 indexBufferOffset];
          unsigned __int8 v31 = [v25 indexType];
          unint64_t v32 = (unint64_t)[v25 triangleCount];
          unint64_t v33 = v10;
          if (objc_opt_respondsToSelector()) {
            unsigned __int8 v34 = [v25 vertexFormat];
          }
          else {
            unsigned __int8 v34 = 0;
          }
          uint64_t v171 = v30;
          if (objc_opt_respondsToSelector())
          {
            id v47 = [v25 transformationMatrixBuffer];
            unint64_t v159 = [v47 streamReference];

            id v158 = [v25 transformationMatrixBufferOffset];
          }
          else
          {
            id v158 = 0;
            unint64_t v159 = 0;
          }
          if (objc_opt_respondsToSelector()) {
            unsigned __int8 v40 = [v25 transformationMatrixLayout];
          }
          else {
            unsigned __int8 v40 = 0;
          }
          unsigned __int8 v39 = v31;
          id v37 = (id)v27;
          uint64_t v161 = v29;

          unint64_t v42 = 0;
          id v43 = 0;
          id v44 = 0;
          unint64_t v45 = 0;
          char v46 = 1;
          id v38 = v153;
          int v64 = v150;
LABEL_58:
          unsigned __int8 v41 = v34;
          unint64_t v10 = v33;
          a3 = v64;
          goto LABEL_59;
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              id v65 = v12;
              long long v66 = [v65 boundingBoxBuffers];
              unsigned int v67 = [v66 count];

              uint64_t v68 = a2[43];
              a2[43] = v68 + 16 * v67;
              if (v67) {
                uint64_t v69 = v68;
              }
              else {
                uint64_t v69 = 0;
              }
              uint64_t v171 = (char *)v67;
              if (v67 && a3)
              {
                long long v70 = 0;
                uint64_t v71 = (void *)(v68 + 8);
                do
                {
                  uint64_t v72 = [v65 boundingBoxBuffers];
                  uint64_t v73 = [v72 objectAtIndexedSubscript:v70];
                  CGFloat v74 = [v73 buffer];
                  *(v71 - 1) = [v74 streamReference];

                  id v75 = [v65 boundingBoxBuffers];
                  uint64_t v76 = [v75 objectAtIndexedSubscript:v70];
                  *uint64_t v71 = [v76 offset];
                  v71 += 2;

                  ++v70;
                }
                while (v171 != v70);
                uint64_t v69 = v68;
              }
              uint64_t v161 = v69;
              id v158 = [v65 boundingBoxStride];
              unint64_t v159 = (unint64_t)[v65 boundingBoxCount];

              unint64_t v32 = 0;
              id v37 = 0;
              uint64_t v160 = 0;
              id v38 = 0;
              unsigned __int8 v39 = 0;
              unsigned __int8 v40 = 0;
              unsigned __int8 v41 = 0;
              unint64_t v42 = 0;
              id v43 = 0;
              id v44 = 0;
              unint64_t v45 = 0;
              char v46 = 4;
            }
            else
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                id v78 = v12;
                uint64_t v79 = [v78 controlPointBuffer];
                uint64_t v161 = [v79 streamReference];

                uint64_t v171 = (char *)[v78 controlPointBufferOffset];
                id v80 = [v78 radiusBuffer];
                uint64_t v160 = [v80 streamReference];

                id v155 = [v78 radiusBufferOffset];
                unint64_t v159 = (unint64_t)[v78 controlPointCount];
                id v158 = [v78 controlPointStride];
                unint64_t v81 = (unint64_t)[v78 radiusStride];
                unsigned __int8 v39 = v81;
                unint64_t v142 = v81 >> 8;
                unint64_t v146 = v10;
                unint64_t v82 = v81 >> 16;
                unint64_t v83 = v81 & 0xFFFFFFFFFF000000;
                uint64_t v84 = [v78 indexBuffer];
                unint64_t v32 = [v84 streamReference];

                id v37 = [v78 indexBufferOffset];
                id v44 = [v78 segmentCount];
                id v43 = [v78 segmentControlPointCount];
                uint64_t v85 = [v78 controlPointFormat];
                unint64_t v86 = v85 & 0xFFFF00FFFFFFFFFFLL | ((unint64_t)[v78 radiusFormat] << 40);
                unint64_t v87 = v86 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)[v78 indexType] << 32);
                unint64_t v88 = v87 & 0xFFFFFFFFFF00FFFFLL | ((unint64_t)[v78 curveType] << 16);
                unint64_t v89 = v88 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)[v78 curveBasis] << 8);
                id v141 = [v78 endCaps];

                unint64_t v42 = v83;
                unsigned __int8 v40 = v142;
                unsigned __int8 v41 = v82;
                unint64_t v10 = v146;
                id v38 = v155;
                unint64_t v45 = v89 | (v141 << 24);
                a3 = v150;
                char v46 = 5;
              }
              else
              {
                objc_opt_class();
                if (objc_opt_isKindOfClass())
                {
                  unint64_t v147 = v10;
                  id v93 = v12;
                  id v94 = [v93 controlPointBuffers];
                  unsigned int v95 = [v94 count];

                  long long v96 = [v93 radiusBuffers];
                  unsigned int v97 = [v96 count];

                  if (v95) {
                    uint64_t v98 = a2[43];
                  }
                  else {
                    uint64_t v98 = 0;
                  }
                  uint64_t v171 = (char *)v95;
                  int v99 = a3;
                  long long v100 = (void *)v97;
                  if (v97) {
                    uint64_t v101 = a2[43] + 16 * v95;
                  }
                  else {
                    uint64_t v101 = 0;
                  }
                  a2[43] += 16 * v95 + 16 * v97;
                  if (v99)
                  {
                    uint64_t v156 = (void *)v97;
                    if (v95)
                    {
                      long long v102 = 0;
                      long long v103 = (void *)(v98 + 8);
                      do
                      {
                        long long v104 = [v93 controlPointBuffers];
                        long long v105 = [v104 objectAtIndexedSubscript:v102];
                        long long v106 = [v105 buffer];
                        *(v103 - 1) = [v106 streamReference];

                        long long v107 = [v93 controlPointBuffers];
                        uint64_t v108 = [v107 objectAtIndexedSubscript:v102];
                        void *v103 = [v108 offset];
                        v103 += 2;

                        ++v102;
                      }
                      while (v171 != v102);
                    }
                    long long v100 = v156;
                    if (v156)
                    {
                      uint64_t v109 = 0;
                      long long v110 = (void *)(v101 + 8);
                      do
                      {
                        uint64_t v111 = [v93 radiusBuffers];
                        uint64_t v112 = [v111 objectAtIndexedSubscript:v109];
                        uint64_t v113 = [v112 buffer];
                        *(v110 - 1) = [v113 streamReference];

                        uint64_t v114 = [v93 radiusBuffers];
                        id v115 = [v114 objectAtIndexedSubscript:v109];
                        void *v110 = [v115 offset];
                        v110 += 2;

                        ++v109;
                      }
                      while (v156 != (void *)v109);
                    }
                  }
                  uint64_t v160 = v101;
                  uint64_t v161 = v98;
                  unint64_t v159 = (unint64_t)[v93 controlPointCount];
                  id v158 = [v93 controlPointStride];
                  unint64_t v116 = (unint64_t)[v93 radiusStride];
                  unsigned __int8 v39 = v116;
                  unint64_t v143 = v116 >> 8;
                  unint64_t v157 = v116 >> 16;
                  unint64_t v117 = v116 & 0xFFFFFFFFFF000000;
                  uint64_t v118 = [v93 indexBuffer];
                  unint64_t v32 = [v118 streamReference];

                  id v37 = [v93 indexBufferOffset];
                  id v44 = [v93 segmentCount];
                  uint64_t v119 = [v93 controlPointFormat];
                  unint64_t v120 = v119 & 0xFFFF00FFFFFFFFFFLL | ((unint64_t)[v93 radiusFormat] << 40);
                  unint64_t v121 = v120 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)[v93 indexType] << 32);
                  id v43 = [v93 segmentControlPointCount];
                  unint64_t v122 = v121 & 0xFFFFFFFFFF00FFFFLL | ((unint64_t)[v93 curveType] << 16);
                  unint64_t v123 = v122 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)[v93 curveBasis] << 8);
                  unint64_t v45 = v123 | ([v93 endCaps] << 24);

                  unint64_t v42 = v117;
                  unsigned __int8 v40 = v143;
                  unsigned __int8 v41 = v157;
                  char v46 = 6;
                  id v38 = v100;
                  a3 = v150;
                  unint64_t v10 = v147;
                }
                else
                {
                  char v46 = 0;
                  uint64_t v161 = 0;
                  uint64_t v171 = 0;
                  id v158 = 0;
                  unint64_t v159 = 0;
                  unint64_t v32 = 0;
                  id v37 = 0;
                  uint64_t v160 = 0;
                  id v38 = 0;
                  unsigned __int8 v39 = 0;
                  unsigned __int8 v40 = 0;
                  unsigned __int8 v41 = 0;
                  unint64_t v42 = 0;
                  id v43 = 0;
                  id v44 = 0;
                  unint64_t v45 = 0;
                }
              }
            }
            goto LABEL_59;
          }
          id v48 = v12;
          uint64_t v49 = [v48 vertexBuffers];
          unsigned int v50 = [v49 count];

          uint64_t v51 = (char *)v50;
          size_t v52 = (void *)a2[43];
          a2[43] = &v52[2 * v50];
          if (v50) {
            id v37 = v52;
          }
          else {
            id v37 = 0;
          }
          if (v50 && v150)
          {
            id v53 = 0;
            unint64_t v54 = v52 + 1;
            do
            {
              uint64_t v55 = [v48 vertexBuffers];
              uint64_t v56 = [v55 objectAtIndexedSubscript:v53];
              id v57 = [v56 buffer];
              *(v54 - 1) = [v57 streamReference];

              size_t v58 = [v48 vertexBuffers];
              uint64_t v59 = [v58 objectAtIndexedSubscript:v53];
              *unint64_t v54 = [v59 offset];
              v54 += 2;

              ++v53;
            }
            while (v51 != v53);
            id v37 = v52;
          }
          uint64_t v160 = (uint64_t)v51;
          id v154 = [v48 vertexStride];
          uint64_t v60 = [v48 indexBuffer];
          unsigned int v61 = [v60 streamReference];

          uint64_t v62 = (char *)[v48 indexBufferOffset];
          unsigned __int8 v63 = [v48 indexType];
          unint64_t v32 = (unint64_t)[v48 triangleCount];
          unsigned __int8 v145 = v63;
          unint64_t v33 = v10;
          if (objc_opt_respondsToSelector()) {
            unsigned __int8 v34 = [v48 vertexFormat];
          }
          else {
            unsigned __int8 v34 = 0;
          }
          uint64_t v171 = v62;
          if (objc_opt_respondsToSelector())
          {
            double v77 = [v48 transformationMatrixBuffer];
            unint64_t v159 = [v77 streamReference];

            id v158 = [v48 transformationMatrixBufferOffset];
          }
          else
          {
            id v158 = 0;
            unint64_t v159 = 0;
          }
          if (objc_opt_respondsToSelector()) {
            unsigned __int8 v40 = [v48 transformationMatrixLayout];
          }
          else {
            unsigned __int8 v40 = 0;
          }
          uint64_t v161 = v61;

          unint64_t v42 = 0;
          id v43 = 0;
          id v44 = 0;
          unint64_t v45 = 0;
          char v46 = 3;
          id v38 = v154;
          int v64 = v150;
          unsigned __int8 v39 = v145;
          goto LABEL_58;
        }
        id v35 = v12;
        char v36 = [v35 boundingBoxBuffer];
        uint64_t v161 = [v36 streamReference];

        uint64_t v171 = (char *)[v35 boundingBoxBufferOffset];
        id v158 = [v35 boundingBoxStride];
        unint64_t v159 = (unint64_t)[v35 boundingBoxCount];

        unint64_t v32 = 0;
        id v37 = 0;
        uint64_t v160 = 0;
        id v38 = 0;
        unsigned __int8 v39 = 0;
        unsigned __int8 v40 = 0;
        unsigned __int8 v41 = 0;
        unint64_t v42 = 0;
        id v43 = 0;
        id v44 = 0;
        unint64_t v45 = 0;
        char v46 = 2;
LABEL_59:
        if (a3)
        {
          uint64_t v90 = v148 + 136 * v10;
          *(void *)uint64_t v90 = v169;
          *(void *)(v90 + 8) = v165;
          *(void *)(v90 + 16) = v164;
          *(_DWORD *)(v90 + 24) = v163;
          *(_DWORD *)(v90 + 28) = v162;
          *(_DWORD *)(v90 + 32) = v168;
          *(unsigned char *)(v90 + 36) = v46;
          *(unsigned char *)(v90 + 37) = v167;
          *(unsigned char *)(v90 + 38) = v166;
          *(unsigned char *)(v90 + 39) = 0;
          *(void *)(v90 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v161;
          *(void *)(v90 + 48) = v171;
          *(void *)(v90 + 56) = v159;
          *(void *)(v90 + 64) = v158;
          *(void *)(v90 + 72) = v32;
          *(void *)(v90 + 8mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v37;
          *(void *)(v90 + 88) = v160;
          *(void *)(v90 + 96) = v38;
          *(void *)(v90 + 104) = v42 | v39 | ((unint64_t)v40 << 8) | ((unint64_t)v41 << 16);
          *(void *)(v90 + 112) = v43;
          *(void *)(v90 + 12mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v44;
          *(void *)(v90 + 128) = v45;
        }

        ++v10;
        id v6 = v151;
        uint64_t v91 = [v151 geometryDescriptors];
        id v92 = [v91 count];

        a2 = v152;
      }
      while ((unint64_t)v92 > v10);
    }
    if ((a3 & 1) == 0)
    {
      char v130 = 1;
      uint64_t v140 = v149;
      uint64_t v5 = v144;
LABEL_101:

      if (!a3) {
        goto LABEL_103;
      }
      goto LABEL_102;
    }
    uint64_t v131 = [v6 geometryDescriptors];
    uint64_t v5 = v144;
    *(void *)(v144 + 16) = [v131 count];

    *(void *)(v144 + 8) = v148;
    [v6 motionStartTime];
    *(_DWORD *)(v144 + 32) = v132;
    [v6 motionEndTime];
    *(_DWORD *)(v144 + 24) = v133;
    *(unsigned char *)(v144 + 37) = [v6 motionStartBorderMode];
    *(unsigned char *)(v144 + 36) = [v6 motionEndBorderMode];
    *(_DWORD *)(v144 + 28) = [v6 motionKeyframeCount];
    char v130 = 1;
LABEL_99:
    uint64_t v140 = v149;
    goto LABEL_101;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v124 = v149;
    uint64_t v125 = [v124 instancedAccelerationStructures];
    uint64_t v126 = TranslateNSArray(v125, (uint64_t)a2, a3);

    if (a3)
    {
      uint64_t v127 = [v124 instanceDescriptorBuffer];
      *(void *)(v5 + 16) = [v127 streamReference];

      *(void *)(v5 + 32) = [v124 instanceDescriptorBufferOffset];
      *(_DWORD *)(v5 + 6mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = [v124 instanceDescriptorStride];
      *(_DWORD *)(v5 + 64) = [v124 instanceCount];
      uint64_t v128 = [v124 instancedAccelerationStructures];
      *(_DWORD *)(v5 + 56) = [v128 count];

      *(void *)(v5 + 8) = v126;
      *(unsigned char *)(v5 + 72) = [v124 instanceDescriptorType];
      uint64_t v129 = [v124 motionTransformBuffer];
      *(void *)(v5 + 24) = [v129 streamReference];

      *(void *)(v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = [v124 motionTransformBufferOffset];
      *(_DWORD *)(v5 + 68) = [v124 motionTransformCount];
      if (objc_opt_respondsToSelector()) {
        *(void *)(v5 + 48) = [v124 motionTransformStride];
      }
      if (objc_opt_respondsToSelector()) {
        *(unsigned char *)(v5 + 73) = [v124 motionTransformType];
      }
      if (objc_opt_respondsToSelector()) {
        *(unsigned char *)(v5 + 74) = [v124 instanceTransformationMatrixLayout];
      }
    }
    char v130 = 2;
    goto LABEL_99;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v134 = v149;
    if (a3)
    {
      uint64_t v135 = v134;
      id v136 = [v134 instanceDescriptorBuffer];
      *(void *)(v5 + 8) = [v136 streamReference];

      *(void *)(v5 + 16) = [v135 instanceDescriptorBufferOffset];
      uint64_t v137 = [v135 instanceCountBuffer];
      *(void *)(v5 + 24) = [v137 streamReference];

      *(void *)(v5 + 32) = [v135 instanceCountBufferOffset];
      uint64_t v138 = [v135 motionTransformBuffer];
      *(void *)(v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = [v138 streamReference];

      *(void *)(v5 + 48) = [v135 motionTransformBufferOffset];
      unint64_t v139 = [v135 motionTransformCountBuffer];
      *(void *)(v5 + 56) = [v139 streamReference];

      *(void *)(v5 + 64) = [v135 motionTransformCountBufferOffset];
      *(_DWORD *)(v5 + 8mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = [v135 maxInstanceCount];
      *(_DWORD *)(v5 + 84) = [v135 instanceDescriptorStride];
      *(_DWORD *)(v5 + 88) = [v135 maxMotionTransformCount];
      *(unsigned char *)(v5 + 92) = [v135 instanceDescriptorType];
      if (objc_opt_respondsToSelector()) {
        *(void *)(v5 + 72) = [v135 motionTransformStride];
      }
      if (objc_opt_respondsToSelector()) {
        *(unsigned char *)(v5 + 93) = [v135 motionTransformType];
      }
      if (objc_opt_respondsToSelector()) {
        *(unsigned char *)(v5 + 94) = [v135 instanceTransformationMatrixLayout];
      }
    }
    char v130 = 3;
    goto LABEL_99;
  }
  char v130 = 0;
  if (a3)
  {
LABEL_102:
    *(unsigned char *)uint64_t v5 = v130;
    *(unsigned char *)(v5 + 1) = objc_msgSend(v149, "usage", v141);
  }
LABEL_103:
}

void TranslateGTMTLIntersectionFunctionDescriptor(void *a1, void *a2, void *a3, int a4)
{
  id v28 = a1;
  id v7 = a2;
  uint64_t v8 = a3[1];
  a3[1] = v8 + 48;
  id v9 = [v28 name];
  unint64_t v10 = (const char *)[v9 UTF8String];
  uint64_t v11 = v10;
  if (v10)
  {
    size_t v12 = strlen(v10);
    unsigned int v13 = a3 + 52;
    uint64_t v14 = a3[52];
    size_t v15 = v12 + 1;
    if (v12 != -1)
    {
      id v16 = (void *)a3[52];
      goto LABEL_6;
    }
  }
  else
  {
    unsigned int v13 = a3 + 52;
    uint64_t v14 = a3[52];
  }
  size_t v15 = 0;
  id v16 = 0;
LABEL_6:
  *unsigned int v13 = v14 + v15;
  if (a4) {
    memcpy(v16, v11, v15);
  }

  id v17 = [v28 specializedName];
  long long v18 = (const char *)[v17 UTF8String];
  size_t v19 = v18;
  if (v18)
  {
    size_t v20 = strlen(v18);
    size_t v21 = a3 + 52;
    uint64_t v22 = a3[52];
    size_t v23 = v20 + 1;
    if (v20 != -1)
    {
      id v24 = (void *)a3[52];
      goto LABEL_13;
    }
  }
  else
  {
    size_t v21 = a3 + 52;
    uint64_t v22 = a3[52];
  }
  size_t v23 = 0;
  id v24 = 0;
LABEL_13:
  *size_t v21 = v22 + v23;
  if (a4) {
    memcpy(v24, v19, v23);
  }

  id v25 = [v28 constantValues];

  if (v25)
  {
    uint64_t v26 = a3[15];
    unsigned int v27 = [v28 constantValues];
    TranslateGTMTLFunctionConstantValues(v7, v27, a3, a4);

    if (!a4) {
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v26 = 0;
    if (!a4) {
      goto LABEL_22;
    }
  }
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)uint64_t v8 = 0u;
  if (objc_opt_respondsToSelector()) {
    *(unsigned char *)(v8 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = [v28 options];
  }
  *(void *)(v8 + 32) = v24;
  *(void *)uint64_t v8 = v26;
  *(void *)(v8 + 8) = v16;
LABEL_22:
}

id MakeMTLAccelerationStructureDescriptor(unsigned __int8 *a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  int v5 = *a1;
  switch(v5)
  {
    case 3:
      id v112 = objc_alloc_init((Class)MTLIndirectInstanceAccelerationStructureDescriptor);
      uint64_t v113 = +[NSNumber numberWithUnsignedLongLong:*((void *)a1 + 1)];
      uint64_t v114 = [v4 objectForKeyedSubscript:v113];
      [v112 setInstanceDescriptorBuffer:v114];

      [v112 setInstanceDescriptorBufferOffset:*((void *)a1 + 2)];
      id v115 = +[NSNumber numberWithUnsignedLongLong:*((void *)a1 + 3)];
      unint64_t v116 = [v4 objectForKeyedSubscript:v115];
      [v112 setInstanceCountBuffer:v116];

      [v112 setInstanceCountBufferOffset:*((void *)a1 + 4)];
      unint64_t v117 = +[NSNumber numberWithUnsignedLongLong:*((void *)a1 + 5)];
      uint64_t v118 = [v4 objectForKeyedSubscript:v117];
      [v112 setMotionTransformBuffer:v118];

      [v112 setMotionTransformBufferOffset:*((void *)a1 + 6)];
      uint64_t v119 = +[NSNumber numberWithUnsignedLongLong:*((void *)a1 + 7)];
      unint64_t v120 = [v4 objectForKeyedSubscript:v119];
      [v112 setMotionTransformCountBuffer:v120];

      unsigned int v97 = v112;
      [v112 setMotionTransformCountBufferOffset:*((void *)a1 + 8)];
      [v112 setMaxInstanceCount:*((unsigned int *)a1 + 20)];
      [v112 setInstanceDescriptorStride:*((unsigned int *)a1 + 21)];
      [v112 setMaxMotionTransformCount:*((unsigned int *)a1 + 22)];
      [v112 setInstanceDescriptorType:a1[92]];
      if (objc_opt_respondsToSelector()) {
        [v112 setMotionTransformStride:*((void *)a1 + 9)];
      }
      if (objc_opt_respondsToSelector()) {
        [v112 setMotionTransformType:a1[93]];
      }
      if (objc_opt_respondsToSelector()) {
        [v112 setInstanceTransformationMatrixLayout:a1[94]];
      }
      break;
    case 2:
      uint64_t v100 = a1[1];
      id v101 = objc_alloc_init((Class)MTLInstanceAccelerationStructureDescriptor);
      [v101 setUsage:v100];
      long long v102 = +[NSNumber numberWithUnsignedLongLong:*((void *)a1 + 2)];
      long long v103 = [v4 objectForKeyedSubscript:v102];
      [v101 setInstanceDescriptorBuffer:v103];

      [v101 setInstanceDescriptorBufferOffset:*((void *)a1 + 4)];
      [v101 setInstanceDescriptorStride:*((unsigned int *)a1 + 15)];
      long long v104 = v101;
      [v101 setInstanceCount:*((unsigned int *)a1 + 16)];
      id v105 = [objc_alloc((Class)NSMutableArray) initWithCapacity:*((unsigned int *)a1 + 14)];
      if (*((_DWORD *)a1 + 14))
      {
        unint64_t v106 = 0;
        do
        {
          long long v107 = +[NSNumber numberWithUnsignedLongLong:*(void *)(*((void *)a1 + 1) + 8 * v106)];
          uint64_t v108 = [v4 objectForKeyedSubscript:v107];
          [v105 addObject:v108];

          ++v106;
        }
        while (v106 < *((unsigned int *)a1 + 14));
      }
      if ([v105 count]) {
        id v109 = v105;
      }
      else {
        id v109 = 0;
      }
      [v104 setInstancedAccelerationStructures:v109];
      [v104 setInstanceDescriptorType:a1[72]];
      long long v110 = +[NSNumber numberWithUnsignedLongLong:*((void *)a1 + 3)];
      uint64_t v111 = [v4 objectForKeyedSubscript:v110];
      [v104 setMotionTransformBuffer:v111];

      unsigned int v97 = v104;
      [v104 setMotionTransformBufferOffset:*((void *)a1 + 5)];
      [v104 setMotionTransformCount:*((unsigned int *)a1 + 17)];
      if (objc_opt_respondsToSelector()) {
        [v104 setMotionTransformStride:*((void *)a1 + 6)];
      }
      if (objc_opt_respondsToSelector()) {
        [v104 setMotionTransformType:a1[73]];
      }
      if (objc_opt_respondsToSelector()) {
        [v104 setInstanceTransformationMatrixLayout:a1[74]];
      }

      break;
    case 1:
      uint64_t v6 = a1[1];
      id v131 = v3;
      id v122 = objc_alloc_init((Class)MTLPrimitiveAccelerationStructureDescriptor);
      [v122 setUsage:v6];
      id v130 = [objc_alloc((Class)NSMutableArray) initWithCapacity:*((void *)a1 + 2)];
      if (*((void *)a1 + 2))
      {
        unint64_t v7 = 0;
        uint64_t v8 = NSComparisonPredicate_ptr;
        uint64_t v129 = a1;
        id v9 = &CACurrentMediaTime_ptr;
        uint64_t v125 = v4;
        do
        {
          uint64_t v10 = *((void *)a1 + 1);
          uint64_t v11 = (void *)(v10 + 136 * v7);
          id v12 = v131;
          unsigned int v13 = v12;
          switch(*((unsigned char *)v11 + 36))
          {
            case 1:
              unint64_t v14 = v7;
              uint64_t v15 = v10 + 136 * v7;
              id v16 = v12;
              id v17 = objc_alloc_init((Class)MTLAccelerationStructureTriangleGeometryDescriptor);
              long long v18 = [v8[18] numberWithUnsignedLongLong:*(void *)(v15 + 80)];
              [v16 objectForKeyedSubscript:v18];
              size_t v19 = v132 = v11;
              [v17 setVertexBuffer:v19];

              [v17 setVertexBufferOffset:*(void *)(v15 + 88)];
              [v17 setVertexStride:*(void *)(v15 + 96)];
              size_t v20 = [v8[18] numberWithUnsignedLongLong:*(void *)(v15 + 40)];
              size_t v21 = [v16 objectForKeyedSubscript:v20];
              [v17 setIndexBuffer:v21];

              uint64_t v11 = v132;
              [v17 setIndexBufferOffset:*(void *)(v15 + 48)];
              [v17 setIndexType:*(unsigned __int8 *)(v15 + 104)];
              [v17 setTriangleCount:*(void *)(v15 + 72)];
              if (objc_opt_respondsToSelector()) {
                [v17 setVertexFormat:*((unsigned __int8 *)v132 + 106)];
              }
              unint64_t v7 = v14;
              if (objc_opt_respondsToSelector())
              {
                uint64_t v22 = v10 + 136 * v14;
                size_t v23 = +[NSNumber numberWithUnsignedLongLong:*(void *)(v22 + 56)];
                id v24 = [v16 objectForKeyedSubscript:v23];
                [v17 setTransformationMatrixBuffer:v24];

                uint64_t v11 = v132;
                [v17 setTransformationMatrixBufferOffset:*(void *)(v22 + 64)];
              }
              if (objc_opt_respondsToSelector()) {
                [v17 setTransformationMatrixLayout:*((unsigned __int8 *)v11 + 105)];
              }

              uint64_t v8 = NSComparisonPredicate_ptr;
              id v9 = &CACurrentMediaTime_ptr;
              break;
            case 2:
              id v25 = (void *)(v10 + 136 * v7);
              id v17 = objc_alloc_init((Class)MTLAccelerationStructureBoundingBoxGeometryDescriptor);
              uint64_t v26 = [v8[18] numberWithUnsignedLongLong:v25[5]];
              unsigned int v27 = [v13 objectForKeyedSubscript:v26];
              [v17 setBoundingBoxBuffer:v27];

              id v9 = &CACurrentMediaTime_ptr;
              uint64_t v11 = v25;
              id v4 = v125;
              [v17 setBoundingBoxBufferOffset:v25[6]];
              [v17 setBoundingBoxStride:v25[8]];
              [v17 setBoundingBoxCount:v25[7]];
              break;
            case 3:
              uint64_t v133 = v10 + 136 * v7;
              unint64_t v135 = v7;
              uint64_t v137 = v10;
              id v123 = v12;
              id v28 = v12;
              id v126 = objc_alloc_init((Class)MTLAccelerationStructureMotionTriangleGeometryDescriptor);
              id v29 = [objc_alloc((Class)NSMutableArray) initWithCapacity:*(void *)(v133 + 88)];
              if (*(void *)(v133 + 88))
              {
                uint64_t v30 = 0;
                unint64_t v31 = 0;
                unint64_t v32 = (void *)(v137 + 136 * v7 + 80);
                do
                {
                  id v33 = objc_alloc_init((Class)v9[493]);
                  unsigned __int8 v34 = [v8[18] numberWithUnsignedLongLong:*(void *)(*v32 + v30)];
                  id v35 = [v28 objectForKeyedSubscript:v34];
                  [v33 setBuffer:v35];

                  uint64_t v8 = NSComparisonPredicate_ptr;
                  [v33 setOffset:*(void *)(*v32 + v30 + 8)];
                  [v29 addObject:v33];

                  ++v31;
                  v30 += 16;
                }
                while (*(void *)(v133 + 88) > v31);
              }
              id v36 = [v29 copy];
              [v126 setVertexBuffers:v36];

              uint64_t v37 = v137 + 136 * v7;
              [v126 setVertexStride:*(void *)(v37 + 96)];
              id v38 = [v8[18] numberWithUnsignedLongLong:*(void *)(v133 + 40)];
              unsigned __int8 v39 = [v28 objectForKeyedSubscript:v38];
              [v126 setIndexBuffer:v39];

              id v17 = v126;
              [v126 setIndexBufferOffset:*(void *)(v37 + 48)];
              [v126 setIndexType:*(unsigned __int8 *)(v37 + 104)];
              [v126 setTriangleCount:*(void *)(v37 + 72)];
              uint64_t v11 = (void *)v133;
              if (objc_opt_respondsToSelector()) {
                [v126 setVertexFormat:*(unsigned __int8 *)(v133 + 106)];
              }
              unint64_t v7 = v135;
              if (objc_opt_respondsToSelector())
              {
                uint64_t v40 = v137 + 136 * v135;
                unsigned __int8 v41 = [v8[18] numberWithUnsignedLongLong:*(void *)(v40 + 56)];
                unint64_t v42 = [v28 objectForKeyedSubscript:v41];
                [v126 setTransformationMatrixBuffer:v42];

                uint64_t v8 = NSComparisonPredicate_ptr;
                uint64_t v11 = (void *)v133;
                [v126 setTransformationMatrixBufferOffset:*(void *)(v40 + 64)];
              }
              id v4 = v125;
              unsigned int v13 = v123;
              if (objc_opt_respondsToSelector()) {
                [v126 setTransformationMatrixLayout:*((unsigned __int8 *)v11 + 105)];
              }

              id v9 = &CACurrentMediaTime_ptr;
              uint64_t v10 = v137;
              break;
            case 4:
              id v134 = (void *)(v10 + 136 * v7);
              uint64_t v138 = v10;
              id v127 = objc_alloc_init((Class)MTLAccelerationStructureMotionBoundingBoxGeometryDescriptor);
              id v43 = v13;
              id v44 = v9;
              id v45 = [objc_alloc((Class)NSMutableArray) initWithCapacity:v134[6]];
              if (v134[6])
              {
                uint64_t v46 = 0;
                unint64_t v47 = 0;
                id v48 = v134 + 5;
                do
                {
                  id v49 = objc_alloc_init((Class)v44[493]);
                  unsigned int v50 = [v8[18] numberWithUnsignedLongLong:*(void *)(*v48 + v46)];
                  uint64_t v51 = [v43 objectForKeyedSubscript:v50];
                  [v49 setBuffer:v51];

                  uint64_t v8 = NSComparisonPredicate_ptr;
                  [v49 setOffset:*(void *)(*v48 + v46 + 8)];
                  [v45 addObject:v49];

                  ++v47;
                  v46 += 16;
                }
                while (v134[6] > v47);
              }
              id v52 = [v45 copy];
              id v17 = v127;
              [v127 setBoundingBoxBuffers:v52];

              uint64_t v53 = v138 + 136 * v7;
              [v127 setBoundingBoxStride:*(void *)(v53 + 64)];
              [v127 setBoundingBoxCount:*(void *)(v53 + 56)];

              id v4 = v125;
              id v9 = v44;
              unsigned int v13 = v43;
              uint64_t v10 = v138;
              goto LABEL_38;
            case 5:
              uint64_t v54 = v10 + 136 * v7;
              id v17 = objc_alloc_init((Class)MTLAccelerationStructureCurveGeometryDescriptor);
              uint64_t v55 = [v8[18] numberWithUnsignedLongLong:*(void *)(v54 + 40)];
              uint64_t v56 = [v13 objectForKeyedSubscript:v55];
              [v17 setControlPointBuffer:v56];

              [v17 setControlPointBufferOffset:*(void *)(v54 + 48)];
              id v57 = +[NSNumber numberWithUnsignedLongLong:*(void *)(v54 + 88)];
              size_t v58 = [v13 objectForKeyedSubscript:v57];
              [v17 setRadiusBuffer:v58];

              [v17 setRadiusBufferOffset:*(void *)(v54 + 96)];
              [v17 setControlPointCount:*(void *)(v54 + 56)];
              [v17 setControlPointStride:*(void *)(v54 + 64)];
              [v17 setRadiusStride:*(void *)(v54 + 104)];
              uint64_t v59 = +[NSNumber numberWithUnsignedLongLong:*(void *)(v54 + 72)];
              uint64_t v60 = [v13 objectForKeyedSubscript:v59];
              [v17 setIndexBuffer:v60];

              uint64_t v8 = NSComparisonPredicate_ptr;
              uint64_t v11 = (void *)v54;
              [v17 setIndexBufferOffset:*(void *)(v54 + 80)];
              [v17 setSegmentCount:*(void *)(v54 + 120)];
              [v17 setSegmentControlPointCount:*(void *)(v54 + 112)];
              [v17 setControlPointFormat:*(unsigned __int8 *)(v54 + 128)];
              [v17 setRadiusFormat:*(unsigned __int8 *)(v54 + 133)];
              [v17 setIndexType:*(unsigned __int8 *)(v54 + 132)];
              [v17 setCurveType:*(unsigned __int8 *)(v54 + 130)];
              [v17 setCurveBasis:*(unsigned __int8 *)(v54 + 129)];
              uint64_t v61 = *(unsigned __int8 *)(v54 + 131);
              id v9 = &CACurrentMediaTime_ptr;
              [v17 setEndCaps:v61];
              break;
            case 6:
              id v134 = (void *)(v10 + 136 * v7);
              unint64_t v136 = v7;
              uint64_t v62 = v10;
              unsigned __int8 v63 = v12;
              uint64_t v139 = v62;
              uint64_t v64 = v62 + 136 * v7;
              id v128 = objc_alloc_init((Class)MTLAccelerationStructureMotionCurveGeometryDescriptor);
              id v65 = objc_alloc((Class)NSMutableArray);
              uint64_t v67 = *(void *)(v64 + 48);
              long long v66 = (unint64_t *)(v64 + 48);
              id v68 = [v65 initWithCapacity:v67];
              if (*v66)
              {
                uint64_t v69 = 0;
                unint64_t v70 = 0;
                uint64_t v71 = v66 - 1;
                do
                {
                  id v72 = objc_alloc_init((Class)v9[493]);
                  uint64_t v73 = [v8[18] numberWithUnsignedLongLong:*(void *)(*v71 + v69)];
                  CGFloat v74 = [v63 objectForKeyedSubscript:v73];
                  [v72 setBuffer:v74];

                  uint64_t v8 = NSComparisonPredicate_ptr;
                  [v72 setOffset:*(void *)(*v71 + v69 + 8)];
                  [v68 addObject:v72];

                  ++v70;
                  v69 += 16;
                }
                while (*v66 > v70);
              }
              id v124 = v68;
              id v75 = objc_alloc((Class)NSMutableArray);
              uint64_t v76 = v139 + 136 * v136;
              uint64_t v78 = *(void *)(v76 + 96);
              double v77 = (unint64_t *)(v76 + 96);
              id v79 = [v75 initWithCapacity:v78];
              if (*v77)
              {
                uint64_t v80 = 0;
                unint64_t v81 = 0;
                unint64_t v82 = (void *)(v139 + 136 * v136 + 88);
                do
                {
                  id v83 = objc_alloc_init((Class)v9[493]);
                  uint64_t v84 = [v8[18] numberWithUnsignedLongLong:*(void *)(*v82 + v80)];
                  uint64_t v85 = [v63 objectForKeyedSubscript:v84];
                  [v83 setBuffer:v85];

                  uint64_t v8 = NSComparisonPredicate_ptr;
                  [v83 setOffset:*(void *)(*v82 + v80 + 8)];
                  [v79 addObject:v83];

                  ++v81;
                  v80 += 16;
                }
                while (*v77 > v81);
              }
              id v86 = [v124 copy];
              id v17 = v128;
              [v128 setControlPointBuffers:v86];

              id v87 = [v79 copy];
              [v128 setRadiusBuffers:v87];

              uint64_t v88 = v139 + 136 * v136;
              [v128 setControlPointCount:*(void *)(v88 + 56)];
              [v128 setControlPointStride:*(void *)(v88 + 64)];
              [v128 setRadiusStride:*(void *)(v88 + 104)];
              unint64_t v89 = [v8[18] numberWithUnsignedLongLong:*(void *)(v88 + 72)];
              uint64_t v90 = [v63 objectForKeyedSubscript:v89];
              [v128 setIndexBuffer:v90];

              uint64_t v8 = NSComparisonPredicate_ptr;
              [v128 setIndexBufferOffset:*(void *)(v88 + 80)];
              [v128 setSegmentCount:*(void *)(v88 + 120)];
              [v128 setControlPointFormat:*(unsigned __int8 *)(v88 + 128)];
              [v128 setRadiusFormat:*(unsigned __int8 *)(v88 + 133)];
              [v128 setIndexType:*(unsigned __int8 *)(v88 + 132)];
              [v128 setSegmentControlPointCount:*(void *)(v88 + 112)];
              [v128 setCurveType:*(unsigned __int8 *)(v88 + 130)];
              [v128 setCurveBasis:*(unsigned __int8 *)(v88 + 129)];
              uint64_t v91 = *(unsigned __int8 *)(v88 + 131);
              unint64_t v7 = v136;
              [v128 setEndCaps:v91];

              id v4 = v125;
              unsigned int v13 = v63;
              uint64_t v10 = v139;
LABEL_38:
              uint64_t v11 = v134;
              break;
            default:
              id v17 = 0;
              break;
          }
          uint64_t v92 = v10 + 136 * v7;
          [v17 setIntersectionFunctionTableOffset:*(unsigned int *)(v92 + 32)];
          [v17 setOpaque:*(unsigned char *)(v92 + 37) != 0];
          [v17 setAllowDuplicateIntersectionFunctionInvocation:*(unsigned char *)(v92 + 38) != 0];
          if (*v11)
          {
            id v93 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:");
            [v17 setLabel:v93];
          }
          if (objc_opt_respondsToSelector())
          {
            uint64_t v94 = v10 + 136 * v7;
            unsigned int v95 = [v8[18] numberWithUnsignedLongLong:*(void *)(v94 + 8)];
            long long v96 = [v13 objectForKeyedSubscript:v95];
            [v17 setPrimitiveDataBuffer:v96];

            uint64_t v8 = NSComparisonPredicate_ptr;
            [v17 setPrimitiveDataBufferOffset:*(void *)(v94 + 16)];
            [v17 setPrimitiveDataStride:*(unsigned int *)(v94 + 24)];
            [v17 setPrimitiveDataElementSize:*(unsigned int *)(v94 + 28)];
          }

          [v130 addObject:v17];
          ++v7;
          a1 = v129;
        }
        while (*((void *)v129 + 2) > v7);
      }
      unsigned int v97 = v122;
      [v122 setGeometryDescriptors:v130];
      LODWORD(v98) = *((_DWORD *)a1 + 8);
      [v122 setMotionStartTime:v98];
      LODWORD(v99) = *((_DWORD *)a1 + 6);
      [v122 setMotionEndTime:v99];
      [v122 setMotionKeyframeCount:*((unsigned int *)a1 + 7)];
      [v122 setMotionStartBorderMode:a1[37]];
      [v122 setMotionEndBorderMode:a1[36]];

      break;
    default:
      unsigned int v97 = 0;
      break;
  }

  return v97;
}

id MakeMTLIntersectionFunctionDescriptor(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)MTLIntersectionFunctionDescriptor);
  [v4 setOptions:*(unsigned __int8 *)(a1 + 40)];
  if (*(void *)(a1 + 8))
  {
    int v5 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:");
    [v4 setName:v5];
  }
  if (*(void *)(a1 + 32))
  {
    uint64_t v6 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:");
    [v4 setSpecializedName:v6];
  }
  if (*(void *)a1)
  {
    unint64_t v7 = MakeMTLFunctionConstantValues(*(void **)a1);
    [v4 setConstantValues:v7];
  }
  if (*(void *)(a1 + 24) && (objc_opt_respondsToSelector() & 1) != 0)
  {
    uint64_t v8 = CreateObjectArrayWithMap(*(uint64_t **)(a1 + 16), *(_DWORD *)(a1 + 24), v3);
    [v4 setPrivateFunctions:v8];
  }

  return v4;
}

void TranslateGTMTLStitchedLibraryDescriptor(void *a1, void *a2, uint64_t a3)
{
  id v17 = a1;
  unsigned __int8 v5 = [v17 options];
  uint64_t v6 = [v17 functionGraphs];
  unsigned __int16 v7 = (unsigned __int16)[v6 count];

  if (v7) {
    uint64_t v8 = a2[45];
  }
  else {
    uint64_t v8 = 0;
  }
  newpool = 0;
  apr_pool_create_ex(&newpool, 0, 0, 0);
  id v9 = newpool;
  uint64_t v10 = (apr_pool_t **)apr_hash_make(newpool);
  uint64_t v18 = 1;
  uint64_t v11 = [v17 functionGraphs];
  CopyFunctionStitchingGraph(v11, v10, (const void **)&v18, a2, a3);

  id v12 = [v17 functions];
  unsigned __int16 v13 = (unsigned __int16)[v12 count];

  if (v13)
  {
    unint64_t v14 = [v17 functions];
    uint64_t v15 = TranslateNSArray(v14, (uint64_t)a2, a3);

    if (!a3) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v15 = 0;
  if (a3)
  {
LABEL_6:
    uint64_t v16 = a2[33];
    *(void *)uint64_t v16 = v8;
    *(void *)(v16 + 8) = v15;
    *(_WORD *)(v16 + 16) = v7;
    *(_WORD *)(v16 + 18) = v13;
    *(unsigned char *)(v16 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v5;
    *(_WORD *)(v16 + 21) = 0;
    *(unsigned char *)(v16 + 23) = 0;
  }
LABEL_7:
  a2[33] += 24;
  apr_pool_destroy(v9);
}

void sub_8F798(_Unwind_Exception *a1)
{
  apr_pool_destroy(v1);
  _Unwind_Resume(a1);
}

void CopyFunctionStitchingGraph(void *a1, apr_pool_t **a2, const void **a3, void *a4, uint64_t a5)
{
  long long v58 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  id obj = a1;
  id v40 = [obj countByEnumeratingWithState:&v58 objects:v63 count:16];
  if (v40)
  {
    uint64_t v37 = *(void *)v59;
    id v38 = a2;
    unsigned __int8 v39 = a3;
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v59 != v37) {
          objc_enumerationMutation(obj);
        }
        uint64_t v10 = *(void **)(*((void *)&v58 + 1) + 8 * v9);
        char v57 = 0;
        __int16 v56 = 0;
        id v11 = v10;
        uint64_t v48 = v9;
        if ([v11 isMemberOfClass:objc_opt_class()]) {
          unsigned __int8 v46 = 2;
        }
        else {
          unsigned __int8 v46 = [v11 isMemberOfClass:objc_opt_class()];
        }

        id v12 = [v11 functionName];
        unsigned __int16 v13 = (const char *)[v12 UTF8String];
        unint64_t v14 = v13;
        if (v13)
        {
          size_t v15 = strlen(v13);
          uint64_t v16 = a4[52];
          size_t v17 = v15 + 1;
          if (v15 != -1)
          {
            __dst = (void *)a4[52];
            goto LABEL_14;
          }
        }
        else
        {
          uint64_t v16 = a4[52];
        }
        size_t v17 = 0;
        __dst = 0;
LABEL_14:
        a4[52] = v16 + v17;
        if (a5) {
          memcpy(__dst, v14, v17);
        }

        uint64_t v18 = [v11 nodes];
        unsigned __int16 v19 = (unsigned __int16)[v18 count];

        size_t v20 = [v11 nodes];
        uint64_t v44 = CopyFunctionStitchingFunctionNodeArray(v20, a2, a3, (uint64_t)a4, a5);

        size_t v21 = [v11 outputNode];

        if (v21)
        {
          long long v54 = 0u;
          long long v55 = 0u;
          long long v53 = 0u;
          uint64_t v22 = [v11 outputNode];
          CopyFunctionStitchingFunctionNode((uint64_t)&v53, v22, a2, a3, (uint64_t)a4, a5);

          if (a5)
          {
            size_t v23 = (_OWORD *)a4[46];
            long long v24 = v54;
            _OWORD *v23 = v53;
            v23[1] = v24;
            void v23[2] = v55;
          }
          uint64_t v43 = a4[46];
          a4[46] = v43 + 48;
        }
        else
        {
          uint64_t v43 = 0;
        }
        id v25 = [v11 attributes];
        unsigned __int16 v26 = (unsigned __int16)[v25 count];

        unsigned __int16 v45 = v19;
        unsigned __int16 v42 = v26;
        if (v26) {
          uint64_t v41 = a4[47];
        }
        else {
          uint64_t v41 = 0;
        }
        long long v51 = 0u;
        long long v52 = 0u;
        long long v49 = 0u;
        long long v50 = 0u;
        unsigned int v27 = [v11 attributes];
        id v28 = [v27 countByEnumeratingWithState:&v49 objects:v62 count:16];
        if (v28)
        {
          id v29 = v28;
          uint64_t v30 = *(void *)v50;
          do
          {
            for (unint64_t i = 0; i != v29; unint64_t i = (char *)i + 1)
            {
              if (*(void *)v50 != v30) {
                objc_enumerationMutation(v27);
              }
              if (a5)
              {
                id v32 = *(id *)(*((void *)&v49 + 1) + 8 * i);
                if ([v32 isMemberOfClass:objc_opt_class()])
                {
                  char v33 = 1;
                }
                else if ([v32 isMemberOfClass:objc_opt_class()])
                {
                  char v33 = 2;
                }
                else
                {
                  char v33 = 0;
                }

                unsigned __int8 v34 = (unsigned char *)a4[47];
                *v34 += v33;
              }
              else
              {
                unsigned __int8 v34 = (unsigned char *)a4[47];
              }
              a4[47] = v34 + 8;
            }
            id v29 = [v27 countByEnumeratingWithState:&v49 objects:v62 count:16];
          }
          while (v29);
        }

        if (a5)
        {
          uint64_t v35 = a4[45];
          *(void *)uint64_t v35 = __dst;
          *(void *)(v35 + 8) = v44;
          *(void *)(v35 + 16) = v43;
          *(void *)(v35 + 24) = v41;
          *(_WORD *)(v35 + 32) = v45;
          *(_WORD *)(v35 + 34) = v42;
          *(unsigned char *)(v35 + 36) = v46;
          *(_WORD *)(v35 + 37) = v56;
          *(unsigned char *)(v35 + 39) = v57;
        }
        a4[45] += 40;
        uint64_t v9 = v48 + 1;
        a3 = v39;
        a2 = v38;
      }
      while ((id)(v48 + 1) != v40);
      id v40 = [obj countByEnumeratingWithState:&v58 objects:v63 count:16];
    }
    while (v40);
  }
}

uint64_t CopyFunctionStitchingFunctionNodeArray(void *a1, apr_pool_t **a2, const void **a3, uint64_t a4, uint64_t a5)
{
  id v9 = a1;
  id v10 = [v9 count];
  if (v10) {
    uint64_t v11 = *(void *)(a4 + 368);
  }
  else {
    uint64_t v11 = 0;
  }
  *(void *)(a4 + 368) += 48 * (void)v10;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  id v12 = v9;
  id v13 = [v12 countByEnumeratingWithState:&v25 objects:v29 count:16];
  if (v13)
  {
    id v14 = v13;
    int v15 = 0;
    uint64_t v16 = *(void *)v26;
    do
    {
      for (unint64_t i = 0; i != v14; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v26 != v16) {
          objc_enumerationMutation(v12);
        }
        uint64_t v18 = *(void **)(*((void *)&v25 + 1) + 8 * i);
        long long v23 = 0u;
        long long v24 = 0u;
        long long v22 = 0u;
        CopyFunctionStitchingFunctionNode((uint64_t)&v22, v18, a2, a3, a4, a5);
        if (a5)
        {
          unsigned __int16 v19 = (_OWORD *)(v11 + 48 * v15++);
          long long v20 = v23;
          *unsigned __int16 v19 = v22;
          v19[1] = v20;
          v19[2] = v24;
        }
      }
      id v14 = [v12 countByEnumeratingWithState:&v25 objects:v29 count:16];
    }
    while (v14);
  }

  return v11;
}

void CopyFunctionStitchingFunctionNode(uint64_t a1, void *a2, apr_pool_t **a3, const void **a4, uint64_t a5, uint64_t a6)
{
  id v9 = a2;
  id v56 = v9;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  unsigned __int8 MTLFunctionStitchingNodeType = GetMTLFunctionStitchingNodeType(v9);
  *(unsigned char *)a1 = MTLFunctionStitchingNodeType;
  id v10 = [v9 name];
  uint64_t v11 = (const char *)[v10 UTF8String];
  id v12 = v11;
  if (v11)
  {
    size_t v13 = strlen(v11);
    id v14 = (void *)(a5 + 416);
    uint64_t v15 = *(void *)(a5 + 416);
    size_t v16 = v13 + 1;
    if (v13 != -1)
    {
      size_t v17 = *(void **)(a5 + 416);
      goto LABEL_6;
    }
  }
  else
  {
    id v14 = (void *)(a5 + 416);
    uint64_t v15 = *(void *)(a5 + 416);
  }
  size_t v16 = 0;
  size_t v17 = 0;
LABEL_6:
  void *v14 = v15 + v16;
  if (a6) {
    memcpy(v17, v12, v16);
  }
  uint64_t v50 = a1;
  *(void *)(a1 + 8) = v17;

  long long v49 = v9;
  id v18 = [v9 arguments];
  id v19 = [v18 count];
  if (v19) {
    uint64_t v20 = *(void *)(a5 + 368);
  }
  else {
    uint64_t v20 = 0;
  }
  uint64_t v54 = v20;
  uint64_t v52 = a5;
  *(void *)(a5 + 368) += 48 * (void)v19;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  id obj = v18;
  id v21 = [obj countByEnumeratingWithState:&v67 objects:v71 count:16];
  long long v22 = a4;
  if (v21)
  {
    id v23 = v21;
    int v24 = 0;
    uint64_t v25 = *(void *)v68;
    do
    {
      long long v26 = 0;
      do
      {
        if (*(void *)v68 != v25) {
          objc_enumerationMutation(obj);
        }
        long long v27 = *(void **)(*((void *)&v67 + 1) + 8 * (void)v26);
        v66[0] = 0;
        *(_DWORD *)((char *)v66 + 3) = 0;
        long long v64 = 0u;
        long long v65 = 0u;
        unsigned int v28 = GetMTLFunctionStitchingNodeType(v27);
        char v29 = v28;
        char v30 = 0;
        unsigned int v31 = v28 - 1;
        unsigned __int8 v32 = 0;
        unsigned __int16 v33 = 0;
        unsigned int v34 = 0;
        switch(v31)
        {
          case 0u:
          case 1u:
          case 0xBu:
            CopyFunctionStitchingFunctionNode(&v57, v27, a3, v22, v52, a6);
            char v29 = v57;
            v66[0] = *(_DWORD *)v58;
            *(_DWORD *)((char *)v66 + 3) = *(_DWORD *)&v58[3];
            unsigned int v34 = *(_DWORD *)&v58[7];
            unsigned __int16 v33 = v59;
            unsigned __int8 v32 = v60;
            char v30 = v61;
            long long v64 = v62;
            long long v65 = v63;
            if (a6) {
              goto LABEL_23;
            }
            break;
          case 2u:
            unsigned __int16 v33 = (unsigned __int16)[v27 argumentIndex];
            char v30 = 0;
            unsigned __int8 v32 = 0;
            unsigned int v34 = 0;
            char v29 = 3;
            if (a6) {
              goto LABEL_23;
            }
            break;
          case 3u:
          case 5u:
          case 6u:
          case 7u:
          case 8u:
            unsigned __int16 v33 = (unsigned __int16)[v27 bindIndex];
            char v30 = 0;
            unsigned __int8 v32 = 0;
            unsigned int v34 = 0;
            if (a6) {
              goto LABEL_23;
            }
            break;
          case 4u:
            id v35 = v27;
            unsigned int v34 = [v35 byteOffset];
            unsigned __int16 v36 = (unsigned __int16)[v35 bindIndex];
            unsigned __int8 v32 = [v35 dereference];

            char v30 = 0;
            char v29 = 5;
            unsigned __int16 v33 = v36;
            long long v22 = a4;
            goto LABEL_22;
          default:
LABEL_22:
            if (a6)
            {
LABEL_23:
              uint64_t v37 = v54 + 48 * v24;
              *(unsigned char *)uint64_t v37 = v29;
              ++v24;
              *(_DWORD *)(v37 + 1) = v66[0];
              *(_DWORD *)(v37 + 4) = *(_DWORD *)((char *)v66 + 3);
              *(_DWORD *)(v37 + 8) = v34;
              *(_WORD *)(v37 + 12) = v33;
              *(unsigned char *)(v37 + 14) = v32;
              *(unsigned char *)(v37 + 15) = v30;
              long long v38 = v65;
              *(_OWORD *)(v37 + 16) = v64;
              *(_OWORD *)(v37 + 32) = v38;
            }
            break;
        }
        long long v26 = (char *)v26 + 1;
      }
      while (v23 != v26);
      id v39 = [obj countByEnumeratingWithState:&v67 objects:v71 count:16];
      id v23 = v39;
    }
    while (v39);
  }

  *(void *)(v50 + 16) = v54;
  id v40 = [v49 arguments];
  *(_WORD *)(v50 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = (unsigned __int16)[v40 count];

  uint64_t v41 = [v49 controlDependencies];
  *(void *)(v50 + 24) = CopyFunctionStitchingFunctionNodeArray(v41, a3, v22, v52, a6);

  unsigned __int16 v42 = [v49 controlDependencies];
  *(_WORD *)(v50 + 42) = (unsigned __int16)[v42 count];

  entry = find_entry((uint64_t)a3, &v56, 8uLL, 0);
  if (*entry)
  {
    uint64_t v44 = *(const void **)(*entry + 32);
    unsigned __int16 v45 = (const void **)(v50 + 32);
    if (v44)
    {
      *unsigned __int16 v45 = v44;
      goto LABEL_34;
    }
  }
  else
  {
    unsigned __int16 v45 = (const void **)(v50 + 32);
  }
  unsigned __int8 v46 = *a4;
  *unsigned __int16 v45 = *a4;
  unint64_t v47 = apr_palloc(*a3, 8uLL);
  *unint64_t v47 = v56;
  apr_hash_set((apr_hash_t *)a3, v47, 8, v46);
  *a4 = (char *)*a4 + 1;
LABEL_34:
  if (MTLFunctionStitchingNodeType == 2) {
    *(unsigned char *)(v50 + 44) = [v49 isEarlyReturn];
  }
}

id GetMTLFunctionStitchingNodeType(void *a1)
{
  id v1 = a1;
  if ([v1 isMemberOfClass:objc_opt_class()])
  {
    id v2 = &dword_8 + 3;
  }
  else if ([v1 isMemberOfClass:objc_opt_class()])
  {
    id v2 = &dword_8 + 2;
  }
  else if ([v1 isMemberOfClass:objc_opt_class()])
  {
    id v2 = &dword_8 + 1;
  }
  else if ([v1 isMemberOfClass:objc_opt_class()])
  {
    id v2 = &dword_8;
  }
  else if ([v1 isMemberOfClass:objc_opt_class()])
  {
    id v2 = &dword_4 + 3;
  }
  else if ([v1 isMemberOfClass:objc_opt_class()])
  {
    id v2 = &dword_4 + 2;
  }
  else if ([v1 isMemberOfClass:objc_opt_class()])
  {
    id v2 = &dword_4 + 1;
  }
  else if ([v1 isMemberOfClass:objc_opt_class()])
  {
    id v2 = &dword_4;
  }
  else if ([v1 isMemberOfClass:objc_opt_class()])
  {
    id v2 = &def_CFBEC + 3;
  }
  else if ([v1 isMemberOfClass:objc_opt_class()])
  {
    id v2 = &def_CFBEC + 2;
  }
  else if ([v1 isMemberOfClass:objc_opt_class()])
  {
    id v2 = &dword_C;
  }
  else
  {
    id v2 = [v1 isMemberOfClass:objc_opt_class()];
  }

  return v2;
}

void TranslateGTMTLStitchedLibraryDescriptorSPI(void *a1, void *a2, uint64_t a3)
{
  id v17 = a1;
  unsigned __int8 v5 = [v17 options];
  uint64_t v6 = [v17 functionGraphs];
  unsigned __int16 v7 = (unsigned __int16)[v6 count];

  if (v7) {
    uint64_t v8 = a2[45];
  }
  else {
    uint64_t v8 = 0;
  }
  newpool = 0;
  apr_pool_create_ex(&newpool, 0, 0, 0);
  id v9 = newpool;
  id v10 = (apr_pool_t **)apr_hash_make(newpool);
  uint64_t v18 = 1;
  uint64_t v11 = [v17 functionGraphs];
  CopyFunctionStitchingGraph(v11, v10, (const void **)&v18, a2, a3);

  id v12 = [v17 functions];
  unsigned __int16 v13 = (unsigned __int16)[v12 count];

  if (v13)
  {
    id v14 = [v17 functions];
    uint64_t v15 = TranslateNSArray(v14, (uint64_t)a2, a3);

    if (!a3) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v15 = 0;
  if (a3)
  {
LABEL_6:
    uint64_t v16 = a2[33];
    *(void *)uint64_t v16 = v8;
    *(void *)(v16 + 8) = v15;
    *(_WORD *)(v16 + 16) = v7;
    *(_WORD *)(v16 + 18) = v13;
    *(unsigned char *)(v16 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v5;
    *(_WORD *)(v16 + 21) = 0;
    *(unsigned char *)(v16 + 23) = 0;
  }
LABEL_7:
  a2[33] += 24;
  apr_pool_destroy(v9);
}

void sub_90560(_Unwind_Exception *a1)
{
  apr_pool_destroy(v1);
  _Unwind_Resume(a1);
}

id MakeMTLStitchedLibraryDescriptor(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)MTLStitchedLibraryDescriptor);
  [v4 setOptions:*(unsigned __int8 *)(a1 + 20)];
  unsigned __int8 v5 = MakeMTLFunctionStitchingGraphArray(*(void *)a1, *(unsigned __int16 *)(a1 + 16));
  [v4 setFunctionGraphs:v5];

  uint64_t v6 = CreateObjectArrayWithMap(*(uint64_t **)(a1 + 8), *(unsigned __int16 *)(a1 + 18), v3);

  [v4 setFunctions:v6];

  return v4;
}

id MakeMTLFunctionStitchingGraphArray(uint64_t a1, int a2)
{
  uint64_t v30 = a2;
  id v28 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:");
  id v31 = objc_alloc_init((Class)NSMutableDictionary);
  if (a2 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v29 = a1;
    while (1)
    {
      uint64_t v5 = a1 + 40 * v4;
      uint64_t v6 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", *(void *)v5, v28);
      uint64_t v7 = MakeMTLFunctionStitchingFunctionNodeArray(*(unsigned __int8 **)(v5 + 8), *(unsigned __int16 *)(v5 + 32), v31);
      uint64_t v8 = (void *)v7;
      id v9 = &__NSArray0__struct;
      if (v7) {
        id v9 = (void *)v7;
      }
      id v10 = v9;

      uint64_t v11 = MakeMTLFunctionStitchingFunctionNode(*(unsigned __int8 **)(v5 + 16), v31);
      uint64_t v12 = *(unsigned __int16 *)(v5 + 34);
      if (*(_WORD *)(v5 + 34))
      {
        unsigned __int16 v13 = *(unsigned __int8 **)(v5 + 24);
        id v14 = [objc_alloc((Class)NSMutableArray) initWithCapacity:v12];
        while (1)
        {
          int v16 = *v13;
          v13 += 8;
          int v15 = v16;
          if (v16 == 1) {
            break;
          }
          if (v15 == 2)
          {
            id v17 = (Class *)MTLFunctionStitchingAttributeKernel_ptr;
LABEL_11:
            id v18 = objc_alloc_init(*v17);
            [v14 addObject:v18];
          }
          if (!--v12)
          {
            id v19 = [v14 copy];

            goto LABEL_15;
          }
        }
        id v17 = (Class *)MTLFunctionStitchingAttributeAlwaysInline_ptr;
        goto LABEL_11;
      }
      id v19 = 0;
LABEL_15:
      a1 = v29;
      uint64_t v20 = &__NSArray0__struct;
      if (v19) {
        uint64_t v20 = v19;
      }
      id v21 = v20;

      int v22 = *(unsigned __int8 *)(v29 + 40 * v4 + 36);
      if (v22 == 2) {
        break;
      }
      if (v22 == 1)
      {
        id v23 = (Class *)MTLFunctionStitchingGraph_ptr;
LABEL_21:
        id v24 = [objc_alloc(*v23) initWithFunctionName:v6 nodes:v10 outputNode:v11 attributes:v21];
        [v28 addObject:v24];
      }
      if (++v4 == v30) {
        goto LABEL_23;
      }
    }
    id v23 = (Class *)MTLFunctionStitchingGraphSPI_ptr;
    goto LABEL_21;
  }
LABEL_23:
  uint64_t v25 = v28;
  id v26 = objc_msgSend(v28, "copy", v28);

  return v26;
}

id MakeMTLFunctionStitchingFunctionNodeArray(unsigned __int8 *a1, unsigned int a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    uint64_t v6 = a2;
    id v7 = [objc_alloc((Class)NSMutableArray) initWithCapacity:a2];
    do
    {
      uint64_t v8 = MakeMTLFunctionStitchingFunctionNode(a1, v5);
      [v7 addObject:v8];

      a1 += 48;
      --v6;
    }
    while (v6);
    id v9 = [v7 copy];
  }
  else
  {
    id v9 = 0;
  }

  return v9;
}

id MakeMTLFunctionStitchingFunctionNode(unsigned __int8 *a1, void *a2)
{
  id v3 = a2;
  if (!a1)
  {
    uint64_t v6 = 0;
    goto LABEL_40;
  }
  uint64_t v4 = *((void *)a1 + 4);
  if (!v4
    || (+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *((void *)a1 + 4)), id v5 = objc_claimAutoreleasedReturnValue(), [v3 objectForKeyedSubscript:v5], v6 = objc_claimAutoreleasedReturnValue(), v5, !v6))
  {
    id v7 = +[NSString stringWithUTF8String:*((void *)a1 + 1)];
    uint64_t v8 = *((void *)a1 + 2);
    id v9 = (char *)*((unsigned __int16 *)a1 + 20);
    id v10 = v3;
    if (v9)
    {
      id v11 = [objc_alloc((Class)NSMutableArray) initWithCapacity:v9];
      do
      {
        switch(*(unsigned char *)v8)
        {
          case 1:
          case 2:
          case 0xC:
            MakeMTLFunctionStitchingFunctionNode(v8, v10);
            id v12 = (id)objc_claimAutoreleasedReturnValue();
            goto LABEL_19;
          case 3:
            id v12 = [objc_alloc((Class)MTLFunctionStitchingInputNode) initWithArgumentIndex:*(unsigned __int16 *)(v8 + 12)];
            goto LABEL_19;
          case 4:
            unsigned __int16 v13 = (objc_class *)MTLFunctionStitchingInputBuffer;
            goto LABEL_15;
          case 5:
            id v12 = [objc_alloc((Class)MTLFunctionStitchingInputBufferAddress) initWithBindIndex:*(unsigned __int16 *)(v8 + 12) byteOffset:*(unsigned int *)(v8 + 8) dereference:*(unsigned char *)(v8 + 14) != 0];
            goto LABEL_19;
          case 6:
            unsigned __int16 v13 = (objc_class *)MTLFunctionStitchingInputTexture;
            goto LABEL_15;
          case 7:
            unsigned __int16 v13 = (objc_class *)MTLFunctionStitchingInputSampler;
            goto LABEL_15;
          case 8:
            unsigned __int16 v13 = (objc_class *)MTLFunctionStitchingInputThreadgroup;
            goto LABEL_15;
          case 9:
            unsigned __int16 v13 = (objc_class *)MTLFunctionStitchingInputImageblock;
LABEL_15:
            id v12 = [[v13 alloc] initWithBindIndex:*(unsigned __int16 *)(v8 + 12)];
            goto LABEL_19;
          case 0xA:
            id v14 = (objc_class *)MTLFunctionStitchingBuiltinThreadPositionInGrid;
            goto LABEL_18;
          case 0xB:
            id v14 = (objc_class *)MTLFunctionStitchingBuiltinThreadPositionInThreadgroup;
LABEL_18:
            id v12 = objc_alloc_init(v14);
LABEL_19:
            int v15 = v12;
            [v11 addObject:v12];

            break;
          default:
            break;
        }
        v8 += 48;
        --v9;
      }
      while (v9);
      id v9 = (char *)[v11 copy];
    }
    if (v9) {
      int v16 = v9;
    }
    else {
      int v16 = (char *)&__NSArray0__struct;
    }
    id v17 = v16;

    uint64_t v18 = MakeMTLFunctionStitchingFunctionNodeArray(*((void *)a1 + 3), *((unsigned __int16 *)a1 + 21), v10);
    id v19 = (void *)v18;
    if (v18) {
      uint64_t v20 = (void *)v18;
    }
    else {
      uint64_t v20 = &__NSArray0__struct;
    }
    id v21 = v20;

    int v22 = *a1;
    switch(v22)
    {
      case 1:
        id v24 = (objc_class *)MTLFunctionStitchingFunctionNode;
        break;
      case 12:
        id v24 = (objc_class *)MTLFunctionStitchingEarlyReturnNode;
        break;
      case 2:
        id v23 = [objc_alloc((Class)MTLFunctionStitchingFunctionNodeSPI) initWithName:v7 arguments:v17 controlDependencies:v21 isEarlyReturn:a1[44] != 0];
LABEL_36:
        uint64_t v6 = v23;
        if (v4)
        {
          uint64_t v25 = +[NSNumber numberWithUnsignedLongLong:v4];
          [v10 setObject:v6 forKeyedSubscript:v25];
        }
        goto LABEL_39;
      default:
        uint64_t v6 = 0;
LABEL_39:

        goto LABEL_40;
    }
    id v23 = [[v24 alloc] initWithName:v7 arguments:v17 controlDependencies:v21];
    goto LABEL_36;
  }
LABEL_40:

  return v6;
}

id MakeMTLStitchedLibraryDescriptorSPI(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)MTLStitchedLibraryDescriptorSPI);
  [v4 setOptions:*(unsigned __int8 *)(a1 + 20)];
  id v5 = MakeMTLFunctionStitchingGraphArray(*(void *)a1, *(unsigned __int16 *)(a1 + 16));
  [v4 setFunctionGraphs:v5];

  uint64_t v6 = CreateObjectArrayWithMap(*(uint64_t **)(a1 + 8), *(unsigned __int16 *)(a1 + 18), v3);

  [v4 setFunctions:v6];

  return v4;
}

void TranslateGTMTLFXSpatialScalerDescriptor(void *a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(void *)(a2 + 272);
  *(void *)(a2 + 272) = v3 + 40;
  if (a3)
  {
    id v4 = a1;
    *(void *)uint64_t v3 = [v4 inputWidth];
    *(void *)(v3 + 8) = [v4 inputHeight];
    *(void *)(v3 + 16) = [v4 outputWidth];
    *(void *)(v3 + 24) = [v4 outputHeight];
    *(_WORD *)(v3 + 32) = (unsigned __int16)[v4 colorTextureFormat];
    *(_WORD *)(v3 + 34) = (unsigned __int16)[v4 outputTextureFormat];
    unsigned __int8 v5 = [v4 colorProcessingMode];

    *(unsigned char *)(v3 + 36) = v5;
  }
}

id MakeMTLFXSpatialScalerDescriptor(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)MTLFXSpatialScalerDescriptor);
  [v2 setInputWidth:*(void *)a1];
  [v2 setInputHeight:*(void *)(a1 + 8)];
  [v2 setOutputWidth:*(void *)(a1 + 16)];
  [v2 setOutputHeight:*(void *)(a1 + 24)];
  [v2 setColorTextureFormat:*(unsigned __int16 *)(a1 + 32)];
  [v2 setOutputTextureFormat:*(unsigned __int16 *)(a1 + 34)];
  [v2 setColorProcessingMode:*(unsigned __int8 *)(a1 + 36)];

  return v2;
}

void TranslateGTMTLFXTemporalScalerDescriptor(void *a1, uint64_t a2, int a3)
{
  id v8 = a1;
  uint64_t v5 = *(void *)(a2 + 280);
  *(void *)(a2 + 28mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v5 + 64;
  if (a3)
  {
    *(_WORD *)uint64_t v5 = (unsigned __int16)[v8 colorTextureFormat];
    *(_WORD *)(v5 + 2) = (unsigned __int16)[v8 depthTextureFormat];
    *(_WORD *)(v5 + 4) = (unsigned __int16)[v8 motionTextureFormat];
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(v5 + 58) = [v8 isReactiveMaskTextureEnabled];
    }
    if (objc_opt_respondsToSelector()) {
      *(_WORD *)(v5 + 8) = (unsigned __int16)[v8 reactiveMaskTextureFormat];
    }
    *(_WORD *)(v5 + 6) = (unsigned __int16)[v8 outputTextureFormat];
    *(void *)(v5 + 16) = [v8 inputWidth];
    *(void *)(v5 + 24) = [v8 inputHeight];
    *(void *)(v5 + 32) = [v8 outputWidth];
    *(void *)(v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = [v8 outputHeight];
    [v8 inputContentMinScale];
    *(_DWORD *)(v5 + 48) = v6;
    [v8 inputContentMaxScale];
    *(_DWORD *)(v5 + 52) = v7;
    *(unsigned char *)(v5 + 56) = [v8 isAutoExposureEnabled];
    *(unsigned char *)(v5 + 57) = [v8 isInputContentPropertiesEnabled];
    if (objc_opt_respondsToSelector()) {
      *(unsigned char *)(v5 + 59) = [v8 requiresSynchronousInitialization];
    }
  }
}

id MakeMTLFXTemporalScalerDescriptor(unsigned __int16 *a1)
{
  id v2 = objc_alloc_init((Class)MTLFXTemporalScalerDescriptor);
  [v2 setColorTextureFormat:*a1];
  [v2 setDepthTextureFormat:a1[1]];
  [v2 setMotionTextureFormat:a1[2]];
  if (objc_opt_respondsToSelector()) {
    [v2 setReactiveMaskTextureEnabled:*((unsigned char *)a1 + 58) != 0];
  }
  if (objc_opt_respondsToSelector()) {
    [v2 setReactiveMaskTextureFormat:a1[4]];
  }
  [v2 setOutputTextureFormat:a1[3]];
  [v2 setInputWidth:*((void *)a1 + 2)];
  [v2 setInputHeight:*((void *)a1 + 3)];
  [v2 setOutputWidth:*((void *)a1 + 4)];
  [v2 setOutputHeight:*((void *)a1 + 5)];
  LODWORD(v3) = *((_DWORD *)a1 + 12);
  [v2 setInputContentMinScale:v3];
  LODWORD(v4) = *((_DWORD *)a1 + 13);
  [v2 setInputContentMaxScale:v4];
  [v2 setAutoExposureEnabled:*((unsigned char *)a1 + 56) != 0];
  [v2 setInputContentPropertiesEnabled:*((unsigned char *)a1 + 57) != 0];
  if (objc_opt_respondsToSelector()) {
    [v2 setRequiresSynchronousInitialization:*((unsigned char *)a1 + 59) != 0];
  }

  return v2;
}

id newDYDeviceInfo()
{
  id v0 = objc_alloc_init((Class)DYGTDeviceInfo);
  [v0 setPlatform:2];
  [v0 setRuntimeIdentifier:3735928559];
  if (gethostname(v38, 0x400uLL))
  {
    id v1 = 0;
  }
  else
  {
    id v1 = +[NSString stringWithUTF8String:v38];
  }
  [v0 setName:v1];

  id v2 = (void *)MGCopyAnswer();
  [v0 setProductType:v2];

  double v3 = GSSystemRootDirectory();
  double v4 = [v3 stringByAppendingPathComponent:@"/System/Library/CoreServices/SystemVersion.plist"];
  id v5 = [objc_alloc((Class)NSDictionary) initWithContentsOfFile:v4];
  int v6 = [v5 objectForKey:@"ProductVersion"];
  [v0 setVersion:v6];

  int v7 = [v5 objectForKey:@"ProductBuildVersion"];
  [v0 setBuild:v7];

  id v8 = +[NSBundle bundleWithIdentifier:@"com.apple.Metal"];
  id v9 = v8;
  if (v8)
  {
    id v10 = [v8 objectForInfoDictionaryKey:kCFBundleVersionKey];
    [v0 setMetalVersion:v10];
  }
  else
  {
    [v0 setMetalVersion:&stru_223D10];
  }

  [v0 setNativePointerSize:8];
  id v11 = objc_alloc_init((Class)DYGTGPUToolsVersionInfo);
  id v12 = +[NSBundle bundleWithIdentifier:@"com.apple.GPUTools"];
  unsigned __int16 v13 = [v12 infoDictionary];
  id v14 = NewPlistByAnonymizingPlist(v13);
  [v11 setInfoPlist:v14];

  int v15 = [v12 URLForResource:@"version" withExtension:@"plist"];
  if (v15)
  {
    int v16 = +[NSDictionary dictionaryWithContentsOfURL:v15];
    id v17 = NewPlistByAnonymizingPlist(v16);
    [v11 setVersionPlist:v17];
  }
  else
  {
    [v11 setVersionPlist:0];
  }
  [v11 setInterposeVersionGL:1572864];
  [v11 setInterposeVersionMetal:0];

  [v0 setGputoolsVersionInfo:v11];
  *(void *)long long v38 = 0;
  uint64_t v39 = 0;
  v37.tv_sec = 0;
  v37.tv_nsec = 0;
  if (gethostuuid((unsigned __int8 *)v38, &v37))
  {
    [v0 setPermanentIdentifier:0];
  }
  else
  {
    id v18 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:v38];
    id v19 = [v18 UUIDString];
    [v0 setPermanentIdentifier:v19];
  }
  if (MGIsQuestionValid())
  {
    uint64_t v20 = (void *)MGCopyAnswer();
    unsigned int v21 = [v20 unsignedIntValue];
  }
  else
  {
    unsigned int v21 = 0;
  }
  if (MGIsQuestionValid())
  {
    int v22 = (void *)MGCopyAnswer();
    unsigned int v23 = [v22 unsignedIntValue];
  }
  else
  {
    unsigned int v23 = 0;
  }
  if (MGIsQuestionValid())
  {
    id v24 = (void *)MGCopyAnswer();
    unsigned int v25 = [v24 unsignedIntValue];
  }
  else
  {
    unsigned int v25 = 0;
  }
  uint64_t v26 = 0;
  if (MGIsQuestionValid())
  {
    long long v27 = (void *)MGCopyAnswer();
    [v27 doubleValue];
    uint64_t v26 = v28;
  }
  if (MGIsQuestionValid())
  {
    uint64_t v29 = (void *)MGCopyAnswer();
    unsigned int v30 = [v29 unsignedIntValue];
  }
  else
  {
    unsigned int v30 = 0;
  }
  uint64_t v32 = v26;
  unsigned int v33 = v21;
  unsigned int v34 = v23;
  unsigned int v35 = v25;
  unsigned int v36 = v30;
  [v0 setMainScreenDescriptor:&v32];

  return v0;
}

id NewPlistByAnonymizingPlist(void *a1)
{
  id v1 = [a1 mutableCopy];
  [v1 removeObjectForKey:@"CFBundleInfoPlistURL"];
  [v1 removeObjectForKey:@"NSBundleInitialPath"];
  [v1 removeObjectForKey:@"NSBundleResolvedPath"];
  id v2 = [v1 copy];

  return v2;
}

id newProfileWithMTLDevice(void *a1)
{
  id v1 = a1;
  id v2 = objc_alloc_init((Class)DYGTMTLDeviceProfile);
  double v3 = [v1 name];
  [v2 setName:v3];

  double v4 = +[NSMutableArray arrayWithCapacity:17];
  for (uint64_t i = 0; i != 17; ++i)
  {
    uint64_t v6 = newProfileWithMTLDevice_availableFeatures[i];
    if ([v1 supportsFeatureSet:v6])
    {
      int v7 = +[NSNumber numberWithUnsignedInteger:v6];
      [v4 addObject:v7];
    }
  }
  id v8 = [v4 copy];
  unsigned int v25 = v2;
  [v2 setSupportedFeatureSets:v8];

  id v9 = +[NSMutableDictionary dictionary];
  if ([v1 areProgrammableSamplePositionsSupported]
    && [v1 maxCustomSamplePositions])
  {
    size_t v10 = 1;
    do
    {
      if ([v1 supportsTextureSampleCount:v10])
      {
        id v11 = (char *)malloc_type_calloc(v10, 8uLL, 0x100004000313F17uLL);
        [v1 getDefaultSamplePositions:v11 count:v10];
        id v12 = objc_alloc_init((Class)NSMutableArray);
        uint64_t v13 = 0;
        do
        {
          id v14 = +[NSValue valueWithPoint:vcvtq_f64_f32(*(float32x2_t *)&v11[8 * v13])];
          [v12 addObject:v14];

          ++v13;
        }
        while (v10 != v13);
        free(v11);
        int v15 = +[NSArray arrayWithArray:v12];
        int v16 = +[NSNumber numberWithInt:v10];
        [v9 setObject:v15 forKey:v16];
      }
    }
    while ((unint64_t)[v1 maxCustomSamplePositions] > v10++);
  }
  id v18 = +[NSDictionary dictionaryWithDictionary:v9];
  [v25 setDefaultSamplePositions:v18];

  if (objc_opt_respondsToSelector())
  {
    id v19 = +[NSMutableArray arrayWithCapacity:12];
    for (uint64_t j = 0; j != 12; ++j)
    {
      uint64_t v21 = newProfileWithMTLDevice_availableGPUFamilies[j];
      if ([v1 supportsFamily:v21])
      {
        int v22 = +[NSNumber numberWithInteger:v21];
        [v19 addObject:v22];
      }
    }
    id v23 = [v19 copy];
    [v25 setSupportedGPUFamilies:v23];
  }

  return v25;
}

id DaemonDeviceCapabilities(void *a1)
{
  id v1 = a1;
  id v2 = MTLCreateSystemDefaultDevice();
  double v3 = newProfileWithMTLDevice(v2);

  double v4 = [v1 stringByAppendingPathComponent:@"/System/Library/Frameworks/Metal.framework"];

  id v5 = +[NSBundle bundleWithPath:v4];

  if (v5)
  {
    uint64_t v6 = [v5 objectForInfoDictionaryKey:kCFBundleVersionKey];
  }
  else
  {
    uint64_t v6 = &stru_223D10;
  }

  *(_OWORD *)values = *(_OWORD *)off_221DB0;
  long long v16 = *(_OWORD *)off_221DC0;
  CFStringRef v17 = @"main-screen-scale";
  CFArrayRef v7 = CFArrayCreate(0, (const void **)values, 5, &kCFTypeArrayCallBacks);
  id v8 = (void *)MGCopyMultipleAnswers();
  CFRelease(v7);
  id v12 = v3;
  v13[0] = @"gputools.contexts-info";
  id v9 = +[NSArray arrayWithObjects:&v12 count:1];
  v14[0] = v9;
  v14[1] = v8;
  v13[1] = @"screen-dimensions";
  v13[2] = @"metal_version";
  v13[3] = @"nativePointerSize";
  _OWORD v14[2] = v6;
  v14[3] = &off_226D88;
  size_t v10 = +[NSDictionary dictionaryWithObjects:v14 forKeys:v13 count:4];

  return v10;
}

_UNKNOWN **GPUToolsVersionQuery()
{
  return &off_226F20;
}

id isDesktopReplayer(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"com.apple.MTLReplayer"]) {
    id v2 = &def_CFBEC + 1;
  }
  else {
    id v2 = [v1 isEqualToString:@"com.apple.DesktopReplayer"];
  }

  return v2;
}

id isMobileReplayer(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"com.apple.MTLReplayer"]) {
    id v2 = &def_CFBEC + 1;
  }
  else {
    id v2 = [v1 isEqualToString:@"com.apple.MobileReplayer"];
  }

  return v2;
}

id modifyReplayerEnvironment(void *a1)
{
  id v1 = [a1 mutableCopy];
  [v1 removeObjectsForKeys:&off_226F60];
  [v1 removeObjectForKey:@"METAL_DEVICE_WRAPPER_TYPE"];
  id v2 = +[NSUserDefaults standardUserDefaults];
  double v3 = [v2 dictionaryForKey:@"GPUDebugger.ReplayerEnvironment"];

  if (v3) {
    [v1 addEntriesFromDictionary:v3];
  }
  id v4 = [v1 copy];

  return v4;
}

id FindDesktopReplayerPath(void *a1)
{
  id v1 = a1;
  id v2 = +[NSFileManager defaultManager];
  bzero(buf, 0x400uLL);
  uint32_t bufsize = 1024;
  if (_NSGetExecutablePath(buf, &bufsize))
  {
    double v3 = 0;
  }
  else
  {
    id v4 = +[NSString stringWithUTF8String:buf];
    id v5 = [v4 stringByDeletingLastPathComponent];

    double v3 = [v5 stringByReplacingOccurrencesOfString:@"GPUToolsTransportAgents.framework/Versions/A/XPCServices/GPUToolsAgentService.xpc/Contents/MacOS" withString:&stru_223D10];
  }
  uint64_t v6 = [v3 stringByAppendingPathComponent:v1];

  if ([v2 fileExistsAtPath:v6])
  {
    id v7 = v6;
  }
  else
  {
    id v8 = [@"/System/Library/CoreServices/" stringByAppendingPathComponent:v1];
    if ([v2 fileExistsAtPath:v8])
    {
      id v7 = v8;
    }
    else
    {
      id v9 = +[NSBundle mainBundle];
      size_t v10 = [v9 bundlePath];
      id v11 = [v10 componentsSeparatedByString:@"/"];

      id v12 = objc_msgSend(v11, "subarrayWithRange:", 0, (char *)objc_msgSend(v11, "count") - 3);
      uint64_t v13 = +[NSString pathWithComponents:v12];
      id v14 = [v13 stringByAppendingPathComponent:v1];

      uint64_t v26 = v12;
      int v15 = [v12 objectAtIndexedSubscript:0];
      LODWORD(v12) = [v15 isEqualToString:&stru_223D10];

      if (v12)
      {
        uint64_t v16 = +[NSString stringWithFormat:@"/%@", v14];

        id v14 = (void *)v16;
      }
      if (([v2 fileExistsAtPath:v14] & 1) == 0)
      {
        unsigned int v25 = v9;
        CFStringRef v17 = objc_msgSend(v11, "subarrayWithRange:", 0, (char *)objc_msgSend(v11, "count") - 4);
        id v18 = +[NSString pathWithComponents:v17];
        id v19 = [v18 stringByAppendingPathComponent:@"Developer/Applications"];

        id v14 = [v19 stringByAppendingPathComponent:v1];

        uint64_t v20 = [v17 objectAtIndexedSubscript:0];
        LODWORD(v18) = [v20 isEqualToString:&stru_223D10];

        if (v18)
        {
          uint64_t v21 = +[NSString stringWithFormat:@"/%@", v14];

          id v14 = (void *)v21;
        }

        id v9 = v25;
      }
      if (([v2 fileExistsAtPath:v14] & 1) == 0)
      {
        int v22 = [@"/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/Library/GPUToolsPlatform/" stringByAppendingPathComponent:v1];

        if ([v2 fileExistsAtPath:v22])
        {
          id v14 = v22;
        }
        else
        {
          id v14 = [@"/Applications/Xcode.app/Contents/Developer/Applications/" stringByAppendingPathComponent:v1];
        }
      }
      if ([v2 fileExistsAtPath:v14]) {
        id v23 = v14;
      }
      else {
        id v23 = 0;
      }
      id v7 = v23;
    }
  }

  return v7;
}

id DaemonCreateGuestAppTransport(void *a1)
{
  id v1 = a1;
  id v2 = v1;
  if (!v1) {
    goto LABEL_29;
  }
  double v3 = [v1 objectForKeyedSubscript:@"environment"];
  if (v3)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
LABEL_28:

LABEL_29:
      uint64_t v16 = 0;
      goto LABEL_30;
    }
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    id v4 = v3;
    id v5 = [v4 countByEnumeratingWithState:&v44 objects:v48 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v45;
LABEL_6:
      uint64_t v8 = 0;
      while (1)
      {
        if (*(void *)v45 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void *)(*((void *)&v44 + 1) + 8 * v8);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0) {
          goto LABEL_27;
        }
        size_t v10 = [v4 objectForKeyedSubscript:v9];
        objc_opt_class();
        char isKindOfClass = objc_opt_isKindOfClass();

        if ((isKindOfClass & 1) == 0) {
          goto LABEL_27;
        }
        if (v6 == (id)++v8)
        {
          id v6 = [v4 countByEnumeratingWithState:&v44 objects:v48 count:16];
          if (v6) {
            goto LABEL_6;
          }
          break;
        }
      }
    }
  }
  id v4 = [v2 objectForKeyedSubscript:@"platformPrefix"];
  if (v4)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
LABEL_27:

      goto LABEL_28;
    }
  }
  id v12 = [v2 objectForKeyedSubscript:@"shouldLoadCapture"];
  if (v12)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
LABEL_26:

      goto LABEL_27;
    }
  }
  uint64_t v13 = [v2 objectForKeyedSubscript:@"shouldLoadReplayer"];
  if (v13)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
LABEL_25:

      goto LABEL_26;
    }
  }
  id v14 = [v2 objectForKeyedSubscript:@"shouldLoadDiagnostics"];
  if (v14)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {

      goto LABEL_25;
    }
  }

  int v15 = [v2 objectForKeyedSubscript:@"environment"];
  uint64_t v16 = v15;
  if (v15) {
    id v17 = [v15 mutableCopy];
  }
  else {
    id v17 = [objc_alloc((Class)NSMutableDictionary) initWithCapacity:2];
  }
  id v19 = v17;
  uint64_t v20 = [v16 objectForKeyedSubscript:@"DYLD_INSERT_LIBRARIES"];
  uint64_t v21 = [v20 componentsSeparatedByString:@":"];
  int v22 = v21;
  if (v21) {
    id v23 = [v21 mutableCopy];
  }
  else {
    id v23 = [objc_alloc((Class)NSMutableArray) initWithCapacity:2];
  }
  id v24 = v23;
  unsigned int v25 = [v2 objectForKeyedSubscript:@"platformPrefix"];
  uint64_t v26 = [v16 objectForKeyedSubscript:@"GPUTOOLS_EXTRA_PLUGIN_PATHS"];
  uint64_t v27 = [v2 objectForKeyedSubscript:@"shouldLoadReplayer"];
  if (!v27) {
    goto LABEL_39;
  }
  uint64_t v28 = (void *)v27;
  [v2 objectForKeyedSubscript:@"shouldLoadCapture"];
  uint64_t v43 = v24;
  uint64_t v29 = v22;
  unsigned int v30 = v19;
  id v31 = v20;
  uint64_t v32 = v26;
  v34 = unsigned int v33 = v25;
  unsigned int v35 = [v34 BOOLValue];

  unsigned int v25 = v33;
  uint64_t v26 = v32;
  uint64_t v20 = v31;
  id v19 = v30;
  int v22 = v29;
  id v24 = v43;

  if (v35)
  {
LABEL_39:
    unsigned int v36 = [@"/System/Library/PrivateFrameworks/" stringByAppendingPathComponent:@"GPUToolsCapture.framework/GPUToolsCapture"];
    if (([v24 containsObject:v36] & 1) == 0) {
      [v24 addObject:v36];
    }
    [v19 setObject:v36 forKeyedSubscript:@"DYMTL_TOOLS_DYLIB_PATH"];
  }
  timespec v37 = [v2 objectForKeyedSubscript:@"shouldLoadDiagnostics"];
  unsigned int v38 = [v37 BOOLValue];

  if (v38)
  {
    uint64_t v39 = [@"/System/Library/PrivateFrameworks/" stringByAppendingPathComponent:@"GPUToolsDiagnostics.framework/GPUToolsDiagnostics"];
    if (([v24 containsObject:v39] & 1) == 0) {
      [v24 addObject:v39];
    }
  }
  id v40 = [v22 count];
  if (v40 != [v24 count])
  {
    uint64_t v41 = [v24 componentsJoinedByString:@":"];
    [v19 setObject:v41 forKeyedSubscript:@"DYLD_INSERT_LIBRARIES"];

    id v42 = [v19 copy];
    uint64_t v16 = v42;
  }

LABEL_30:

  return v16;
}

void PresentTelemetry(void *a1)
{
  id v1 = a1;
  if ([v1 conformsToProtocol:&OBJC_PROTOCOL___CAMetalDrawable]) {
    GTTelemetry_trackPresent(v1);
  }
}

void PresentTrigger(void *a1, uint64_t a2)
{
  id v3 = a1;
  id v4 = v3;
  if (*(_DWORD *)(boundaryTrackerInstance + 20) & 0xFFFFFFFE) == 2 && (qword_2501C8)
  {
    id v5 = v3;
    newpool = 0;
    apr_pool_create_ex(&newpool, 0, 0, 0);
    id v6 = [v5 traceContext];
    uint64_t v7 = newpool;
    GTTraceContext_copyStreamMap((uint64_t)v6, newpool);
    p = v7;
    uint64_t v8 = apr_hash_make(v7);
    GTTraceMemPool_buildMemoryMap(*((void *)[v5 traceStream] + 3), v8);
    long long v47 = [v5 layer];
    uint64_t v9 = (uint64_t *)[v47 traceStream];
    if (v9) {
      uint64_t v10 = *v9;
    }
    else {
      uint64_t v10 = 0;
    }
    id v11 = [v5 texture];
    id v12 = [v11 device];
    uint64_t v13 = apr_array_make(p, 1, 56);
    uint64_t v14 = *((void *)[v11 traceStream] + 1);
    long long v46 = v11;
    int v15 = (uint64_t *)[v11 traceStream];
    if (v15) {
      uint64_t v16 = *v15;
    }
    else {
      uint64_t v16 = 0;
    }
    uint64_t v17 = *(void *)(a2 + 24);
    id v18 = (char *)apr_array_push(v13);
    *(void *)id v18 = v14;
    *((void *)v18 + 1) = v16;
    *((void *)v18 + 2) = v17;
    *((void *)v18 + 3) = v17;
    *((void *)v18 + 4) = v17;
    *((void *)v18 + 5) = 80;
    v18[48] = 1;
    *(_DWORD *)(v18 + 49) = 0;
    *((_DWORD *)v18 + 13) = 0;
    uint64_t v48 = v5;
    DownloadRequests = GTResourceHarvesterGetDownloadRequests((pthread_mutex_t *)[v12 harvester], (uint64_t)objc_msgSend(v5, "streamReference"), (uint64_t)v13);
    uint64_t v20 = GTResourceDownloaderProcessRequest(p, (uint64_t)DownloadRequests);
    uint64_t v21 = v20;
    if (v20->nelts >= 1)
    {
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      do
      {
        uint64_t v24 = *(void *)(a2 + 24);
        unsigned int v25 = &v20->elts[v22];
        v25[47] |= 4u;
        *((void *)v25 + 3) = v10;
        *((void *)v25 + 4) = v24;
        ++v23;
        v22 += 88;
      }
      while (v23 < v20->nelts);
    }
    GTMTLCaptureState_appendDownloadRequests(_sharedCaptureManager, v20);
    uint64_t v26 = objc_alloc_init(GTDownloadPoint);
    uint64_t v27 = DEVICEOBJECT(v12);
    id v28 = [v27 newCommandQueue];
    id v29 = [v27 newSharedEvent];
    [(GTDownloadPoint *)v26 setDownloadQueue:v28];
    [(GTDownloadPoint *)v26 setWaitEvent:v29];
    [(GTDownloadPoint *)v26 setWaitValue:1];
    [(GTDownloadPoint *)v26 setDownloadEvent:v29];
    [(GTDownloadPoint *)v26 setDownloadValue:(char *)[(GTDownloadPoint *)v26 waitValue] + 1];
    objc_msgSend(v29, "setSignaledValue:", -[GTDownloadPoint waitValue](v26, "waitValue"));
    unsigned int v30 = [v12 dispatchGroup];
    dispatch_group_enter(v30);

    id v31 = [v12 captureEventListener];
    id v32 = [(GTDownloadPoint *)v26 downloadValue];
    *(void *)&long long v50 = _NSConcreteStackBlock;
    *((void *)&v50 + 1) = 3221225472;
    long long v51 = __DownloadDrawable_block_invoke;
    uint64_t v52 = &unk_221DE0;
    id v53 = v12;
    id v33 = v12;
    [v29 notifyListener:v31 atValue:v32 block:&v50];

    unsigned int v34 = [v33 downloader];
    [v34 downloadRequest:v21 atPoint:v26];

    apr_pool_destroy(p);
  }
  unsigned int v35 = (uint64_t *)[v4 traceStream];
  if (v35) {
    uint64_t v36 = *v35;
  }
  else {
    uint64_t v36 = 0;
  }
  timespec v37 = *(void (**)(uint64_t))(a2 + 24);
  unsigned int v38 = *(void **)(a2 + 32);
  uint64_t v39 = [v4 layer];
  id v40 = [v39 device];
  uint64_t v41 = (uint64_t *)[v40 traceStream];
  if (v41) {
    uint64_t v42 = *v41;
  }
  else {
    uint64_t v42 = 0;
  }
  uint64_t v43 = [v4 layer];
  long long v44 = (uint64_t *)[v43 traceStream];
  if (v44) {
    uint64_t v45 = *v44;
  }
  else {
    uint64_t v45 = 0;
  }

  *(void *)&long long v50 = 0x300000003;
  *((void *)&v50 + 1) = v36;
  long long v51 = v37;
  uint64_t v52 = v38;
  id v53 = 0;
  uint64_t v54 = v42;
  uint64_t v55 = v45;
  long long v56 = 0u;
  long long v57 = 0u;
  GTCaptureBoundaryTracker_handleTrigger(&v50);
}

void __DownloadDrawable_block_invoke(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) dispatchGroup];
  dispatch_group_leave(v1);
}

id NumberToInt(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v2 = [v1 unsignedLongLongValue];
  }
  else {
    id v2 = 0;
  }

  return v2;
}

void RetainObjectForDescriptorDownloader(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  id v5 = (uint64_t *)[v4 traceStream];
  if (v5) {
    uint64_t v6 = *v5;
  }
  else {
    uint64_t v6 = 0;
  }
  id v7 = +[NSNumber numberWithUnsignedLongLong:v6];
  [v3 setObject:v4 forKeyedSubscript:v7];
}

void SetCaptureDescriptor(void *a1, void *a2, int a3, void *a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = a4;
  if (v7)
  {
    [v7 setCaptureDescriptor:v9];
    if (a3)
    {
      long long v34 = 0uLL;
      long long v35 = 0uLL;
      *((void *)&v33 + 1) = 0;
      id v10 = objc_msgSend(v8, "traceContext", 0);
      [v8 traceStream];
      GTTraceContext_pushEncoderWithStream((uint64_t)v10, (uint64_t)&v33);
      uint64_t v11 = v34;
      *(_DWORD *)(v34 + 8) = -10154;
      char v12 = BYTE9(v35);
      if (BYTE9(v35) > 0x28uLL)
      {
        uint64_t v18 = *(void *)(*((void *)&v33 + 1) + 24);
        uint64_t v19 = BYTE10(v35);
        ++BYTE10(v35);
        uint64_t v13 = GTTraceMemPool_allocateBytes(v18, *((uint64_t *)&v34 + 1), v19 | 0x1800000000) + 16;
        char v12 = v19;
      }
      else
      {
        uint64_t v13 = (char *)(v11 + BYTE9(v35));
        BYTE9(v35) += 24;
      }
      *(unsigned char *)(v11 + 13) = v12;
      uint64_t v20 = (uint64_t *)[v8 traceStream];
      if (v20) {
        uint64_t v21 = *v20;
      }
      else {
        uint64_t v21 = 0;
      }
      uint64_t v26 = (uint64_t *)[v7 traceStream];
      if (v26) {
        uint64_t v27 = *v26;
      }
      else {
        uint64_t v27 = 0;
      }
      char v30 = SaveMTLAccelerationStructureDescriptor((uint64_t)&v33, v9);
      *(void *)uint64_t v13 = v21;
      *((void *)v13 + 1) = v27;
      v13[16] = v30;
      *(_DWORD *)(v13 + 17) = 0;
      *((_DWORD *)v13 + 5) = 0;
      id v29 = v8;
    }
    else
    {
      long long v34 = 0uLL;
      long long v35 = 0uLL;
      *((void *)&v33 + 1) = 0;
      id v14 = objc_msgSend(v7, "traceContext", 0);
      [v7 traceStream];
      GTTraceContext_pushEncoderWithStream((uint64_t)v14, (uint64_t)&v33);
      uint64_t v15 = v34;
      *(_DWORD *)(v34 + 8) = -15552;
      char v16 = BYTE9(v35);
      if (BYTE9(v35) > 0x30uLL)
      {
        uint64_t v22 = *(void *)(*((void *)&v33 + 1) + 24);
        uint64_t v23 = BYTE10(v35);
        ++BYTE10(v35);
        uint64_t v17 = GTTraceMemPool_allocateBytes(v22, *((uint64_t *)&v34 + 1), v23 | 0x1000000000) + 16;
        char v16 = v23;
      }
      else
      {
        uint64_t v17 = (char *)(v15 + BYTE9(v35));
        BYTE9(v35) += 16;
      }
      *(unsigned char *)(v15 + 13) = v16;
      uint64_t v24 = (uint64_t *)[v7 traceStream];
      if (v24) {
        uint64_t v25 = *v24;
      }
      else {
        uint64_t v25 = 0;
      }
      char v28 = SaveMTLAccelerationStructureDescriptor((uint64_t)&v33, v9);
      *(void *)uint64_t v17 = v25;
      v17[8] = v28;
      *(_DWORD *)(v17 + 9) = 0;
      *((_DWORD *)v17 + 3) = 0;
      id v29 = v7;
    }
    [v29 traceContext];
    s();
    *(void *)uint64_t v31 = v32;
    *(unsigned char *)(v31 + 8) = BYTE8(v35);
    *(unsigned char *)(v34 + 15) |= 8u;
  }
}

void RetainAccelerationStructureDescriptorObjects(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v8 = v7;
    id v9 = [v8 instanceDescriptorBuffer];
    [v9 touch];

    id v10 = [v8 instanceDescriptorBuffer];

    if (v5 && v10)
    {
      uint64_t v11 = [v8 instanceDescriptorBuffer];
      [v5 addObject:v11];
    }
    char v12 = [v8 instanceDescriptorBuffer];
    RetainObjectForDescriptorDownloader(v12, v6);

    long long v138 = 0u;
    long long v139 = 0u;
    long long v136 = 0u;
    long long v137 = 0u;
    uint64_t v13 = [v8 instancedAccelerationStructures];
    id v14 = [v13 countByEnumeratingWithState:&v136 objects:v145 count:16];
    if (v14)
    {
      id v15 = v14;
      uint64_t v16 = *(void *)v137;
      do
      {
        for (uint64_t i = 0; i != v15; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v137 != v16) {
            objc_enumerationMutation(v13);
          }
          RetainObjectForDescriptorDownloader(*(void **)(*((void *)&v136 + 1) + 8 * i), v6);
        }
        id v15 = [v13 countByEnumeratingWithState:&v136 objects:v145 count:16];
      }
      while (v15);
    }

    uint64_t v18 = [v8 motionTransformBuffer];
    [v18 touch];

    uint64_t v19 = [v8 motionTransformBuffer];

    if (v5 && v19)
    {
      uint64_t v20 = [v8 motionTransformBuffer];
      [v5 addObject:v20];
    }
    uint64_t v21 = [v8 instancedAccelerationStructures];
    RetainNSArray(v5, v21);
    goto LABEL_125;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0) {
      goto LABEL_126;
    }
    id v8 = v7;
    unsigned int v97 = [v8 instanceDescriptorBuffer];
    [v97 touch];

    double v98 = [v8 instanceDescriptorBuffer];

    if (v5 && v98)
    {
      double v99 = [v8 instanceDescriptorBuffer];
      [v5 addObject:v99];
    }
    uint64_t v100 = [v8 motionTransformBuffer];
    [v100 touch];

    id v101 = [v8 motionTransformBuffer];

    if (v5 && v101)
    {
      long long v102 = [v8 motionTransformBuffer];
      [v5 addObject:v102];
    }
    long long v103 = [v8 motionTransformCountBuffer];
    [v103 touch];

    long long v104 = [v8 motionTransformCountBuffer];

    if (v5 && v104)
    {
      id v105 = [v8 motionTransformCountBuffer];
      [v5 addObject:v105];
    }
    unint64_t v106 = [v8 instanceCountBuffer];
    [v106 touch];

    long long v107 = [v8 instanceCountBuffer];

    if (v5 && v107)
    {
      uint64_t v108 = [v8 instanceCountBuffer];
      [v5 addObject:v108];
    }
    id v109 = [v8 instanceDescriptorBuffer];
    RetainObjectForDescriptorDownloader(v109, v6);

    uint64_t v21 = [v8 instanceCountBuffer];
    RetainObjectForDescriptorDownloader(v21, v6);
LABEL_125:

    goto LABEL_126;
  }
  id v110 = v7;
  id v111 = v6;
  long long v134 = 0u;
  long long v135 = 0u;
  long long v132 = 0u;
  long long v133 = 0u;
  uint64_t v22 = [v7 geometryDescriptors];
  id v23 = [v22 countByEnumeratingWithState:&v132 objects:v144 count:16];
  if (!v23) {
    goto LABEL_110;
  }
  id v24 = v23;
  uint64_t v115 = *(void *)v133;
  uint64_t v113 = v22;
  do
  {
    uint64_t v25 = 0;
    id v114 = v24;
    do
    {
      if (*(void *)v133 != v115) {
        objc_enumerationMutation(v22);
      }
      uint64_t v26 = *(void **)(*((void *)&v132 + 1) + 8 * (void)v25);
      if (objc_opt_respondsToSelector())
      {
        uint64_t v27 = [v26 primitiveDataBuffer];
        [v27 touch];

        char v28 = [v26 primitiveDataBuffer];

        if (v5)
        {
          if (v28)
          {
            id v29 = [v26 primitiveDataBuffer];
            [v5 addObject:v29];
          }
        }
      }
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        id v30 = v26;
        uint64_t v31 = [v30 vertexBuffer];
        [v31 touch];

        uint64_t v32 = [v30 vertexBuffer];

        if (v5 && v32)
        {
          long long v33 = [v30 vertexBuffer];
          [v5 addObject:v33];
        }
        long long v34 = [v30 indexBuffer];
        [v34 touch];

        long long v35 = [v30 indexBuffer];

        if (v5 && v35)
        {
          uint64_t v36 = [v30 indexBuffer];
          [v5 addObject:v36];
        }
        if ((objc_opt_respondsToSelector() & 1) == 0) {
          goto LABEL_59;
        }
LABEL_54:
        id v53 = [v30 transformationMatrixBuffer];
        [v53 touch];

        uint64_t v54 = [v30 transformationMatrixBuffer];

        if (v5 && v54)
        {
          uint64_t v40 = [v30 transformationMatrixBuffer];
          goto LABEL_57;
        }
LABEL_59:

        goto LABEL_60;
      }
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        id v37 = v26;
        unsigned int v38 = [v37 boundingBoxBuffer];
        [v38 touch];

        uint64_t v39 = [v37 boundingBoxBuffer];

        if (v5 && v39)
        {
          uint64_t v40 = [v37 boundingBoxBuffer];
          goto LABEL_57;
        }
        goto LABEL_59;
      }
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        id v30 = v26;
        long long v128 = 0u;
        long long v129 = 0u;
        long long v130 = 0u;
        long long v131 = 0u;
        uint64_t v41 = [v30 vertexBuffers];
        id v42 = [v41 countByEnumeratingWithState:&v128 objects:v143 count:16];
        if (v42)
        {
          id v43 = v42;
          uint64_t v44 = *(void *)v129;
          do
          {
            for (uint64_t j = 0; j != v43; uint64_t j = (char *)j + 1)
            {
              if (*(void *)v129 != v44) {
                objc_enumerationMutation(v41);
              }
              long long v46 = *(void **)(*((void *)&v128 + 1) + 8 * (void)j);
              long long v47 = [v46 buffer];
              [v47 touch];

              uint64_t v48 = [v46 buffer];

              if (v5 && v48)
              {
                long long v49 = [v46 buffer];
                [v5 addObject:v49];
              }
            }
            id v43 = [v41 countByEnumeratingWithState:&v128 objects:v143 count:16];
          }
          while (v43);
        }

        long long v50 = [v30 indexBuffer];
        [v50 touch];

        long long v51 = [v30 indexBuffer];

        if (v5 && v51)
        {
          uint64_t v52 = [v30 indexBuffer];
          [v5 addObject:v52];
        }
        uint64_t v22 = v113;
        id v24 = v114;
        if ((objc_opt_respondsToSelector() & 1) == 0) {
          goto LABEL_59;
        }
        goto LABEL_54;
      }
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        id v56 = v26;
        long long v124 = 0u;
        long long v125 = 0u;
        long long v126 = 0u;
        long long v127 = 0u;
        uint64_t v55 = [v56 boundingBoxBuffers];
        id v57 = [v55 countByEnumeratingWithState:&v124 objects:v142 count:16];
        if (v57)
        {
          id v58 = v57;
          uint64_t v59 = *(void *)v125;
          do
          {
            for (uint64_t k = 0; k != v58; uint64_t k = (char *)k + 1)
            {
              if (*(void *)v125 != v59) {
                objc_enumerationMutation(v55);
              }
              char v61 = *(void **)(*((void *)&v124 + 1) + 8 * (void)k);
              long long v62 = [v61 buffer];
              [v62 touch];

              long long v63 = [v61 buffer];

              if (v5 && v63)
              {
                long long v64 = [v61 buffer];
                [v5 addObject:v64];
              }
            }
            id v58 = [v55 countByEnumeratingWithState:&v124 objects:v142 count:16];
          }
          while (v58);
          uint64_t v22 = v113;
          id v24 = v114;
        }
        goto LABEL_58;
      }
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        id v65 = v26;
        long long v66 = [v65 controlPointBuffer];
        [v66 touch];

        long long v67 = [v65 controlPointBuffer];

        if (v5 && v67)
        {
          long long v68 = [v65 controlPointBuffer];
          [v5 addObject:v68];
        }
        long long v69 = [v65 radiusBuffer];
        [v69 touch];

        long long v70 = [v65 radiusBuffer];

        if (v5 && v70)
        {
          uint64_t v71 = [v65 radiusBuffer];
          [v5 addObject:v71];
        }
        id v72 = [v65 indexBuffer];
        [v72 touch];

        uint64_t v73 = [v65 indexBuffer];

        if (v5 && v73)
        {
          CGFloat v74 = v65;
          goto LABEL_108;
        }
        goto LABEL_59;
      }
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        id v75 = v26;
        long long v120 = 0u;
        long long v121 = 0u;
        long long v122 = 0u;
        long long v123 = 0u;
        id v112 = v75;
        uint64_t v76 = [v75 controlPointBuffers];
        id v77 = [v76 countByEnumeratingWithState:&v120 objects:v141 count:16];
        if (v77)
        {
          id v78 = v77;
          uint64_t v79 = *(void *)v121;
          do
          {
            for (uint64_t m = 0; m != v78; uint64_t m = (char *)m + 1)
            {
              if (*(void *)v121 != v79) {
                objc_enumerationMutation(v76);
              }
              unint64_t v81 = *(void **)(*((void *)&v120 + 1) + 8 * (void)m);
              unint64_t v82 = [v81 buffer];
              [v82 touch];

              id v83 = [v81 buffer];

              if (v5 && v83)
              {
                uint64_t v84 = [v81 buffer];
                [v5 addObject:v84];
              }
            }
            id v78 = [v76 countByEnumeratingWithState:&v120 objects:v141 count:16];
          }
          while (v78);
        }

        long long v118 = 0u;
        long long v119 = 0u;
        long long v116 = 0u;
        long long v117 = 0u;
        uint64_t v85 = [v112 radiusBuffers];
        id v86 = [v85 countByEnumeratingWithState:&v116 objects:v140 count:16];
        if (v86)
        {
          id v87 = v86;
          uint64_t v88 = *(void *)v117;
          do
          {
            for (uint64_t n = 0; n != v87; uint64_t n = (char *)n + 1)
            {
              if (*(void *)v117 != v88) {
                objc_enumerationMutation(v85);
              }
              uint64_t v90 = *(void **)(*((void *)&v116 + 1) + 8 * (void)n);
              uint64_t v91 = [v90 buffer];
              [v91 touch];

              uint64_t v92 = [v90 buffer];

              if (v5 && v92)
              {
                id v93 = [v90 buffer];
                [v5 addObject:v93];
              }
            }
            id v87 = [v85 countByEnumeratingWithState:&v116 objects:v140 count:16];
          }
          while (v87);
        }

        uint64_t v94 = [v112 indexBuffer];
        [v94 touch];

        unsigned int v95 = [v112 indexBuffer];

        uint64_t v22 = v113;
        id v24 = v114;
        if (v5 && v95)
        {
          CGFloat v74 = v112;
LABEL_108:
          uint64_t v40 = [v74 indexBuffer];
LABEL_57:
          uint64_t v55 = (void *)v40;
          [v5 addObject:v40];
LABEL_58:
        }
        goto LABEL_59;
      }
LABEL_60:
      uint64_t v25 = (char *)v25 + 1;
    }
    while (v25 != v24);
    id v96 = [v22 countByEnumeratingWithState:&v132 objects:v144 count:16];
    id v24 = v96;
  }
  while (v96);
LABEL_110:

  id v7 = v110;
  id v6 = v111;
LABEL_126:
}

id copyCaptureDescriptor(id *a1, int a2, int a3, void *a4, void *a5, void *a6, void *a7)
{
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  id v16 = a7;
  id v17 = *a1;
  if (a3)
  {
    if (a2)
    {
      id v18 = [v17 copy];
      *a1 = v18;
      id v19 = v18;
    }
    else
    {
      copyAndPatchExtraBuffersInDescriptor(v17, v13, v14);
      id v20 = (id)objc_claimAutoreleasedReturnValue();
      *a1 = v20;
      RetainAccelerationStructureDescriptorObjects(v15, v16, v20);
      id v19 = *a1;
    }
  }
  else
  {
    copyAndNullifyReferencesInDescriptor(v17);
    id v19 = (id)objc_claimAutoreleasedReturnValue();
  }
  uint64_t v21 = v19;

  return v21;
}

id copyAndPatchExtraBuffersInDescriptor(void *a1, void *a2, void *a3)
{
  id v239 = a2;
  id v5 = a3;
  id v6 = [a1 copy];
  objc_opt_class();
  id v225 = v6;
  uint64_t v238 = v5;
  if (objc_opt_isKindOfClass())
  {
    long long v258 = 0u;
    long long v259 = 0u;
    long long v256 = 0u;
    long long v257 = 0u;
    id obj = [v6 geometryDescriptors];
    id v233 = [obj countByEnumeratingWithState:&v256 objects:v306 count:16];
    if (v233)
    {
      uint64_t v232 = *(void *)v257;
      while (1)
      {
        id v7 = 0;
        do
        {
          if (*(void *)v257 != v232) {
            objc_enumerationMutation(obj);
          }
          id v8 = *(void **)(*((void *)&v256 + 1) + 8 * (void)v7);
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            if (objc_opt_respondsToSelector())
            {
              id v9 = [v8 primitiveDataBuffer];

              if (v9)
              {
                id v10 = [v8 primitiveDataBuffer];
                uint64_t v11 = [v10 length];
                int64_t v12 = v11 - (unsigned char *)[v8 primitiveDataBufferOffset];

                id v13 = [v239 newBufferWithLength:v12 options:0];
                [v13 setLabel:@"gputools.ADSPrimitiveDataBuffer"];
                v304[0] = @"srcBuffer";
                id v14 = [v8 primitiveDataBuffer];
                v305[0] = v14;
                v304[1] = @"srcOffset";
                id v15 = v8;
                id v16 = v7;
                id v17 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v15 primitiveDataBufferOffset]);
                v305[1] = v17;
                v305[2] = v13;
                v304[2] = @"dstBuffer";
                v304[3] = @"length";
                id v18 = +[NSNumber numberWithUnsignedLong:v12];
                v305[3] = v18;
                id v19 = +[NSDictionary dictionaryWithObjects:v305 forKeys:v304 count:4];

                id v7 = v16;
                id v8 = v15;

                [v5 addObject:v19];
                [v15 setPrimitiveDataBuffer:v13];
                [v15 setPrimitiveDataBufferOffset:0];
              }
            }
            id v20 = v8;
            uint64_t v21 = [v20 vertexBuffer];

            uint64_t v234 = v8;
            if (v21)
            {
              uint64_t v22 = [v20 vertexBuffer];
              id v23 = [v22 length];
              int64_t v24 = v23 - (unsigned char *)[v20 vertexBufferOffset];

              id v25 = [v239 newBufferWithLength:v24 options:0];
              [v25 setLabel:@"gputools.ADSVertexBuffer"];
              v302[0] = @"srcBuffer";
              [v20 vertexBuffer];
              uint64_t v27 = v26 = v7;
              v303[0] = v27;
              v302[1] = @"srcOffset";
              char v28 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v20 vertexBufferOffset]);
              v303[1] = v28;
              v303[2] = v25;
              v302[2] = @"dstBuffer";
              v302[3] = @"length";
              id v29 = +[NSNumber numberWithUnsignedLong:v24];
              v303[3] = v29;
              id v30 = +[NSDictionary dictionaryWithObjects:v303 forKeys:v302 count:4];

              id v7 = v26;
              id v8 = v234;
              [v5 addObject:v30];
              [v20 setVertexBuffer:v25];
              [v20 setVertexBufferOffset:0];
            }
            uint64_t v31 = [v20 indexBuffer];

            if (v31)
            {
              uint64_t v32 = 3 * (void)[v20 triangleCount];
              id v33 = [v20 indexType];
              char v34 = 1;
              if (v33) {
                char v34 = 2;
              }
              uint64_t v35 = v32 << v34;
              if ((unint64_t)(v32 << v34) <= 1) {
                uint64_t v36 = 1;
              }
              else {
                uint64_t v36 = v32 << v34;
              }
              id v37 = [v239 newBufferWithLength:v36 options:0];
              [v37 setLabel:@"gputools.ADSIndexBuffer"];
              v300[0] = @"srcBuffer";
              unsigned int v38 = [v20 indexBuffer];
              v301[0] = v38;
              v300[1] = @"srcOffset";
              uint64_t v39 = v7;
              uint64_t v40 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v20 indexBufferOffset]);
              v301[1] = v40;
              v301[2] = v37;
              v300[2] = @"dstBuffer";
              v300[3] = @"length";
              uint64_t v41 = +[NSNumber numberWithUnsignedLong:v35];
              v301[3] = v41;
              id v42 = +[NSDictionary dictionaryWithObjects:v301 forKeys:v300 count:4];

              id v7 = v39;
              id v8 = v234;

              [v5 addObject:v42];
              [v20 setIndexBuffer:v37];
              [v20 setIndexBufferOffset:0];
            }
            if ((objc_opt_respondsToSelector() & 1) == 0) {
              goto LABEL_50;
            }
            id v43 = [v20 transformationMatrixBuffer];

            if (!v43) {
              goto LABEL_50;
            }
            id v44 = [v239 newBufferWithLength:48 options:0];
            [v44 setLabel:@"gputools.ADSTransformationMatrixBuffer"];
            v298[0] = @"srcBuffer";
            uint64_t v45 = [v20 transformationMatrixBuffer];
            v299[0] = v45;
            v298[1] = @"srcOffset";
            long long v46 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v20 transformationMatrixBufferOffset]);
            v299[1] = v46;
            v299[2] = v44;
            v298[2] = @"dstBuffer";
            v298[3] = @"length";
            long long v47 = +[NSNumber numberWithUnsignedLong:48];
            v299[3] = v47;
            uint64_t v48 = +[NSDictionary dictionaryWithObjects:v299 forKeys:v298 count:4];

            [v5 addObject:v48];
            long long v49 = v20;
            long long v50 = v44;
            id v51 = v44;
LABEL_47:
            [v49 setTransformationMatrixBuffer:v51];
            [v20 setTransformationMatrixBufferOffset:0];
            goto LABEL_48;
          }
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            id v52 = v8;
            id v53 = [v52 boundingBoxBuffer];

            if (v53)
            {
              id v54 = [v52 boundingBoxCount];
              unint64_t v55 = (void)[v52 boundingBoxStride] * (void)v54;
              if (v55 <= 1) {
                uint64_t v56 = 1;
              }
              else {
                uint64_t v56 = v55;
              }
              id v57 = [v239 newBufferWithLength:v56 options:0];
              [v57 setLabel:@"gputools.ADSBBoxBuffer"];
              v296[0] = @"srcBuffer";
              id v58 = [v52 boundingBoxBuffer];
              v297[0] = v58;
              v296[1] = @"srcOffset";
              uint64_t v59 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v52 boundingBoxBufferOffset]);
              v297[1] = v59;
              v297[2] = v57;
              v296[2] = @"dstBuffer";
              v296[3] = @"length";
              unsigned __int8 v60 = +[NSNumber numberWithUnsignedLong:v55];
              v297[3] = v60;
              uint64_t v48 = +[NSDictionary dictionaryWithObjects:v297 forKeys:v296 count:4];

              [v5 addObject:v48];
              long long v50 = v57;
              [v52 setBoundingBoxBuffer:v57];
              [v52 setBoundingBoxBufferOffset:0];
              goto LABEL_48;
            }
            goto LABEL_50;
          }
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            v228 = v7;
            uint64_t v235 = v8;
            id v61 = v8;
            long long v252 = 0u;
            long long v253 = 0u;
            long long v254 = 0u;
            long long v255 = 0u;
            id v226 = v61;
            long long v62 = [v61 vertexBuffers];
            id v63 = [v62 countByEnumeratingWithState:&v252 objects:v295 count:16];
            if (v63)
            {
              id v64 = v63;
              uint64_t v65 = *(void *)v253;
              do
              {
                for (uint64_t i = 0; i != v64; uint64_t i = (char *)i + 1)
                {
                  if (*(void *)v253 != v65) {
                    objc_enumerationMutation(v62);
                  }
                  long long v67 = *(void **)(*((void *)&v252 + 1) + 8 * i);
                  long long v68 = [v67 buffer];
                  long long v69 = [v68 length];
                  int64_t v70 = v69 - (unsigned char *)[v67 offset];

                  id v71 = [v239 newBufferWithLength:v70 options:0];
                  [v71 setLabel:@"gputools.ADSMotionVertexBuffer"];
                  v293[0] = @"srcBuffer";
                  id v72 = [v67 buffer];
                  v294[0] = v72;
                  v293[1] = @"srcOffset";
                  uint64_t v73 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v67 offset]);
                  v294[1] = v73;
                  v294[2] = v71;
                  v293[2] = @"dstBuffer";
                  v293[3] = @"length";
                  CGFloat v74 = +[NSNumber numberWithUnsignedLong:v70];
                  v294[3] = v74;
                  id v75 = +[NSDictionary dictionaryWithObjects:v294 forKeys:v293 count:4];

                  id v5 = v238;
                  [v238 addObject:v75];
                  [v67 setBuffer:v71];
                  [v67 setOffset:0];
                }
                id v64 = [v62 countByEnumeratingWithState:&v252 objects:v295 count:16];
              }
              while (v64);
            }

            id v20 = v226;
            uint64_t v76 = [v226 indexBuffer];

            if (v76)
            {
              uint64_t v77 = 3 * (void)[v226 triangleCount];
              id v78 = [v226 indexType];
              char v79 = 1;
              if (v78) {
                char v79 = 2;
              }
              uint64_t v80 = v77 << v79;
              if ((unint64_t)(v77 << v79) <= 1) {
                uint64_t v81 = 1;
              }
              else {
                uint64_t v81 = v77 << v79;
              }
              id v82 = [v239 newBufferWithLength:v81 options:0];
              [v82 setLabel:@"gputools.ADSMotionIndexBuffer"];
              v291[0] = @"srcBuffer";
              id v83 = [v226 indexBuffer];
              v292[0] = v83;
              v291[1] = @"srcOffset";
              uint64_t v84 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v226 indexBufferOffset]);
              v292[1] = v84;
              v292[2] = v82;
              v291[2] = @"dstBuffer";
              v291[3] = @"length";
              uint64_t v85 = +[NSNumber numberWithUnsignedLong:v80];
              v292[3] = v85;
              id v86 = +[NSDictionary dictionaryWithObjects:v292 forKeys:v291 count:4];

              id v5 = v238;
              [v238 addObject:v86];
              [v226 setIndexBuffer:v82];
              [v226 setIndexBufferOffset:0];
            }
            id v7 = v228;
            id v8 = v235;
            if ((objc_opt_respondsToSelector() & 1) == 0) {
              goto LABEL_50;
            }
            id v87 = [v226 transformationMatrixBuffer];

            if (!v87) {
              goto LABEL_50;
            }
            id v88 = [v239 newBufferWithLength:48 options:0];
            [v88 setLabel:@"gputools.ADSMotionTransformationMatrixBuffer"];
            v289[0] = @"srcBuffer";
            unint64_t v89 = [v226 transformationMatrixBuffer];
            v290[0] = v89;
            v289[1] = @"srcOffset";
            uint64_t v90 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v226 transformationMatrixBufferOffset]);
            v290[1] = v90;
            v290[2] = v88;
            v289[2] = @"dstBuffer";
            v289[3] = @"length";
            uint64_t v91 = +[NSNumber numberWithUnsignedLong:48];
            v290[3] = v91;
            uint64_t v48 = +[NSDictionary dictionaryWithObjects:v290 forKeys:v289 count:4];

            id v5 = v238;
            [v238 addObject:v48];
            long long v49 = v226;
            long long v50 = v88;
            id v51 = v88;
            goto LABEL_47;
          }
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            id v92 = v8;
            long long v248 = 0u;
            long long v249 = 0u;
            long long v250 = 0u;
            long long v251 = 0u;
            long long v50 = [v92 boundingBoxBuffers];
            id v93 = [v50 countByEnumeratingWithState:&v248 objects:v288 count:16];
            if (v93)
            {
              id v94 = v93;
              int v236 = v8;
              v229 = v7;
              uint64_t v95 = *(void *)v249;
              do
              {
                for (uint64_t j = 0; j != v94; uint64_t j = (char *)j + 1)
                {
                  if (*(void *)v249 != v95) {
                    objc_enumerationMutation(v50);
                  }
                  unsigned int v97 = *(void **)(*((void *)&v248 + 1) + 8 * (void)j);
                  double v98 = [v97 buffer];

                  if (v98)
                  {
                    double v99 = [v97 buffer];
                    uint64_t v100 = [v99 length];
                    int64_t v101 = v100 - (unsigned char *)[v97 offset];

                    id v102 = [v239 newBufferWithLength:v101 options:0];
                    [v102 setLabel:@"gputools.ADSMotionBBoxBuffer"];
                    v286[0] = @"srcBuffer";
                    long long v103 = [v97 buffer];
                    v287[0] = v103;
                    v286[1] = @"srcOffset";
                    long long v104 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v97 offset]);
                    v287[1] = v104;
                    v287[2] = v102;
                    v286[2] = @"dstBuffer";
                    v286[3] = @"length";
                    id v105 = +[NSNumber numberWithUnsignedLong:v101];
                    v287[3] = v105;
                    unint64_t v106 = +[NSDictionary dictionaryWithObjects:v287 forKeys:v286 count:4];

                    id v5 = v238;
                    [v238 addObject:v106];
                    [v97 setBuffer:v102];
                    [v97 setOffset:0];
                  }
                }
                id v94 = [v50 countByEnumeratingWithState:&v248 objects:v288 count:16];
              }
              while (v94);
              id v7 = v229;
              id v8 = v236;
            }
            goto LABEL_49;
          }
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            id v107 = v8;
            uint64_t v108 = [v107 controlPointBuffer];

            if (v108)
            {
              id v109 = [v107 controlPointBuffer];
              id v110 = [v109 length];
              int64_t v111 = v110 - (unsigned char *)[v107 controlPointBufferOffset];

              id v112 = [v239 newBufferWithLength:v111 options:0];
              [v112 setLabel:@"gputools.ADSCurveControlPointBuffer"];
              v284[0] = @"srcBuffer";
              uint64_t v113 = [v107 controlPointBuffer];
              v285[0] = v113;
              v284[1] = @"srcOffset";
              id v114 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v107 controlPointBufferOffset]);
              v285[1] = v114;
              v285[2] = v112;
              v284[2] = @"dstBuffer";
              v284[3] = @"length";
              uint64_t v115 = +[NSNumber numberWithUnsignedLong:v111];
              v285[3] = v115;
              long long v116 = +[NSDictionary dictionaryWithObjects:v285 forKeys:v284 count:4];

              id v5 = v238;
              [v238 addObject:v116];
              [v107 setControlPointBuffer:v112];
              [v107 setControlPointBufferOffset:0];
            }
            long long v117 = [v107 radiusBuffer];

            if (v117)
            {
              long long v118 = [v107 radiusBuffer];
              long long v119 = [v118 length];
              int64_t v120 = v119 - (unsigned char *)[v107 radiusBufferOffset];

              id v121 = [v239 newBufferWithLength:v120 options:0];
              [v121 setLabel:@"gputools.ADSCurveRadiusBuffer"];
              v282[0] = @"srcBuffer";
              long long v122 = [v107 radiusBuffer];
              v283[0] = v122;
              v282[1] = @"srcOffset";
              long long v123 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v107 radiusBufferOffset]);
              v283[1] = v123;
              v283[2] = v121;
              v282[2] = @"dstBuffer";
              v282[3] = @"length";
              long long v124 = +[NSNumber numberWithUnsignedLong:v120];
              v283[3] = v124;
              long long v125 = +[NSDictionary dictionaryWithObjects:v283 forKeys:v282 count:4];

              id v5 = v238;
              [v238 addObject:v125];
              [v107 setRadiusBuffer:v121];
              [v107 setRadiusBufferOffset:0];
            }
            long long v126 = [v107 indexBuffer];

            if (v126)
            {
              long long v127 = [v107 indexBuffer];
              long long v128 = [v127 length];
              int64_t v129 = v128 - (unsigned char *)[v107 indexBufferOffset];

              id v130 = [v239 newBufferWithLength:v129 options:0];
              [v130 setLabel:@"gputools.ADSCurveIndexBuffer"];
              v280[0] = @"srcBuffer";
              long long v131 = [v107 indexBuffer];
              v281[0] = v131;
              v280[1] = @"srcOffset";
              long long v132 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v107 indexBufferOffset]);
              v281[1] = v132;
              v281[2] = v130;
              v280[2] = @"dstBuffer";
              v280[3] = @"length";
              long long v133 = +[NSNumber numberWithUnsignedLong:v129];
              v281[3] = v133;
              uint64_t v48 = +[NSDictionary dictionaryWithObjects:v281 forKeys:v280 count:4];

              id v5 = v238;
              [v238 addObject:v48];
              long long v50 = v130;
              [v107 setIndexBuffer:v130];
              long long v134 = v107;
              goto LABEL_92;
            }
            goto LABEL_50;
          }
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            unsigned int v230 = v7;
            unsigned int v237 = v8;
            id v135 = v8;
            long long v244 = 0u;
            long long v245 = 0u;
            long long v246 = 0u;
            long long v247 = 0u;
            id v227 = v135;
            long long v136 = [v135 controlPointBuffers];
            id v137 = [v136 countByEnumeratingWithState:&v244 objects:v279 count:16];
            if (v137)
            {
              id v138 = v137;
              uint64_t v139 = *(void *)v245;
              do
              {
                for (uint64_t k = 0; k != v138; uint64_t k = (char *)k + 1)
                {
                  if (*(void *)v245 != v139) {
                    objc_enumerationMutation(v136);
                  }
                  id v141 = *(void **)(*((void *)&v244 + 1) + 8 * (void)k);
                  unint64_t v142 = [v141 buffer];

                  if (v142)
                  {
                    unint64_t v143 = [v141 buffer];
                    uint64_t v144 = [v143 length];
                    int64_t v145 = v144 - (unsigned char *)[v141 offset];

                    id v146 = [v239 newBufferWithLength:v145 options:0];
                    [v146 setLabel:@"gputools.ADSMotionCurveControlPointBuffer"];
                    v277[0] = @"srcBuffer";
                    unint64_t v147 = [v141 buffer];
                    v278[0] = v147;
                    v277[1] = @"srcOffset";
                    uint64_t v148 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v141 offset]);
                    v278[1] = v148;
                    v278[2] = v146;
                    v277[2] = @"dstBuffer";
                    v277[3] = @"length";
                    id v149 = +[NSNumber numberWithUnsignedLong:v145];
                    v278[3] = v149;
                    int v150 = +[NSDictionary dictionaryWithObjects:v278 forKeys:v277 count:4];

                    id v5 = v238;
                    [v238 addObject:v150];
                    [v141 setBuffer:v146];
                    [v141 setOffset:0];
                  }
                }
                id v138 = [v136 countByEnumeratingWithState:&v244 objects:v279 count:16];
              }
              while (v138);
            }

            long long v242 = 0u;
            long long v243 = 0u;
            long long v240 = 0u;
            long long v241 = 0u;
            uint64_t v151 = [v227 radiusBuffers];
            id v152 = [v151 countByEnumeratingWithState:&v240 objects:v276 count:16];
            if (v152)
            {
              id v153 = v152;
              uint64_t v154 = *(void *)v241;
              do
              {
                for (uint64_t m = 0; m != v153; uint64_t m = (char *)m + 1)
                {
                  if (*(void *)v241 != v154) {
                    objc_enumerationMutation(v151);
                  }
                  uint64_t v156 = *(void **)(*((void *)&v240 + 1) + 8 * (void)m);
                  unint64_t v157 = [v156 buffer];

                  if (v157)
                  {
                    id v158 = [v156 buffer];
                    unint64_t v159 = [v158 length];
                    int64_t v160 = v159 - (unsigned char *)[v156 offset];

                    id v161 = [v239 newBufferWithLength:v160 options:0];
                    [v161 setLabel:@"gputools.ADSMotionCurveRadiusBuffer"];
                    v274[0] = @"srcBuffer";
                    unsigned int v162 = [v156 buffer];
                    v275[0] = v162;
                    v274[1] = @"srcOffset";
                    unsigned int v163 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v156 offset]);
                    v275[1] = v163;
                    v275[2] = v161;
                    v274[2] = @"dstBuffer";
                    v274[3] = @"length";
                    id v164 = +[NSNumber numberWithUnsignedLong:v160];
                    v275[3] = v164;
                    uint64_t v165 = +[NSDictionary dictionaryWithObjects:v275 forKeys:v274 count:4];

                    id v5 = v238;
                    [v238 addObject:v165];
                    [v156 setBuffer:v161];
                    [v156 setOffset:0];
                  }
                }
                id v153 = [v151 countByEnumeratingWithState:&v240 objects:v276 count:16];
              }
              while (v153);
            }

            unsigned __int8 v166 = [v227 indexBuffer];

            id v7 = v230;
            id v8 = v237;
            if (v166)
            {
              unsigned __int8 v167 = [v227 indexBuffer];
              unsigned int v168 = [v167 length];
              int64_t v169 = v168 - (unsigned char *)[v227 indexBufferOffset];

              id v170 = [v239 newBufferWithLength:v169 options:0];
              [v170 setLabel:@"gputools.ADSMotionCurveRadiusBuffer"];
              v272[0] = @"srcBuffer";
              uint64_t v171 = [v227 indexBuffer];
              v273[0] = v171;
              v272[1] = @"srcOffset";
              long long v172 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v227 indexBufferOffset]);
              v273[1] = v172;
              v273[2] = v170;
              v272[2] = @"dstBuffer";
              v272[3] = @"length";
              uint64_t v173 = +[NSNumber numberWithUnsignedLong:v169];
              v273[3] = v173;
              uint64_t v48 = +[NSDictionary dictionaryWithObjects:v273 forKeys:v272 count:4];

              id v5 = v238;
              [v238 addObject:v48];
              long long v50 = v170;
              [v227 setIndexBuffer:v170];
              long long v134 = v227;
LABEL_92:
              [v134 setIndexBufferOffset:0];
LABEL_48:

LABEL_49:
            }
LABEL_50:
          }
          id v7 = (char *)v7 + 1;
        }
        while (v7 != v233);
        id v174 = [obj countByEnumeratingWithState:&v256 objects:v306 count:16];
        id v233 = v174;
        if (!v174)
        {
          id v175 = obj;
          goto LABEL_104;
        }
      }
    }
    id v175 = obj;
    goto LABEL_123;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0) {
      goto LABEL_124;
    }
    id v194 = v6;
    uint64_t v195 = [v194 instanceDescriptorBuffer];

    if (v195)
    {
      id v196 = [v194 maxInstanceCount];
      id v197 = [v194 instanceDescriptorStride];
      uint64_t v198 = (void)v197 * (void)v196;
      if ((void)v197 * (void)v196 <= 1uLL) {
        uint64_t v199 = 1;
      }
      else {
        uint64_t v199 = (void)v197 * (void)v196;
      }
      id v200 = [v239 newBufferWithLength:v199 options:0];
      [v200 setLabel:@"gputools.ADSInstanceDescriptorBuffer"];
      v266[0] = @"srcBuffer";
      uint64_t v201 = [v194 instanceDescriptorBuffer];
      v267[0] = v201;
      v266[1] = @"srcOffset";
      long long v202 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v194 instanceDescriptorBufferOffset]);
      v267[1] = v202;
      v267[2] = v200;
      v266[2] = @"dstBuffer";
      v266[3] = @"length";
      uint64_t v203 = +[NSNumber numberWithUnsignedLong:v198];
      v267[3] = v203;
      long long v204 = +[NSDictionary dictionaryWithObjects:v267 forKeys:v266 count:4];

      id v5 = v238;
      [v238 addObject:v204];
      [v194 setInstanceDescriptorBuffer:v200];
      [v194 setInstanceDescriptorBufferOffset:0];
    }
    uint64_t v205 = [v194 instanceCountBuffer];

    if (v205)
    {
      id v206 = [v239 newBufferWithLength:4 options:0];
      [v206 setLabel:@"gputools.ADSInstanceCountBuffer"];
      v264[0] = @"srcBuffer";
      uint64_t v207 = [v194 instanceCountBuffer];
      v265[0] = v207;
      v264[1] = @"srcOffset";
      uint64_t v208 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v194 instanceCountBufferOffset]);
      v265[1] = v208;
      v265[2] = v206;
      v264[2] = @"dstBuffer";
      v264[3] = @"length";
      long long v209 = +[NSNumber numberWithUnsignedLong:4];
      v265[3] = v209;
      uint64_t v210 = +[NSDictionary dictionaryWithObjects:v265 forKeys:v264 count:4];

      id v5 = v238;
      [v238 addObject:v210];
      [v194 setInstanceCountBuffer:v206];
      [v194 setInstanceCountBufferOffset:0];
    }
    long long v211 = [v194 motionTransformBuffer];

    if (v211)
    {
      id v212 = [v194 maxMotionTransformCount];
      uint64_t v213 = 48 * (void)v212;
      if ((unint64_t)(48 * (void)v212) <= 1) {
        uint64_t v214 = 1;
      }
      else {
        uint64_t v214 = 48 * (void)v212;
      }
      id v215 = [v239 newBufferWithLength:v214 options:0];
      [v215 setLabel:@"gputools.ADSMotionTransformBuffer"];
      v262[0] = @"srcBuffer";
      uint64_t v216 = [v194 motionTransformBuffer];
      v263[0] = v216;
      v262[1] = @"srcOffset";
      uint64_t v217 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v194 motionTransformBufferOffset]);
      v263[1] = v217;
      v263[2] = v215;
      v262[2] = @"dstBuffer";
      v262[3] = @"length";
      long long v218 = +[NSNumber numberWithUnsignedLong:v213];
      v263[3] = v218;
      uint64_t v219 = +[NSDictionary dictionaryWithObjects:v263 forKeys:v262 count:4];

      id v5 = v238;
      [v238 addObject:v219];
      [v194 setMotionTransformBuffer:v215];
      [v194 setMotionTransformBufferOffset:0];
    }
    long long v220 = [v194 motionTransformCountBuffer];

    if (!v220)
    {
      id v175 = v194;
      goto LABEL_123;
    }
    id v189 = [v239 newBufferWithLength:4 options:0];
    [v189 setLabel:@"gputools.ADSMotionTransformCountBuffer"];
    v260[0] = @"srcBuffer";
    uint64_t v221 = [v194 motionTransformCountBuffer];
    v261[0] = v221;
    v260[1] = @"srcOffset";
    long long v222 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v194 motionTransformCountBufferOffset]);
    v261[1] = v222;
    v261[2] = v189;
    v260[2] = @"dstBuffer";
    v260[3] = @"length";
    uint64_t v223 = +[NSNumber numberWithUnsignedLong:4];
    v261[3] = v223;
    uint64_t v193 = +[NSDictionary dictionaryWithObjects:v261 forKeys:v260 count:4];

    id v5 = v238;
    [v238 addObject:v193];
    [v194 setMotionTransformCountBuffer:v189];
    [v194 setMotionTransformCountBufferOffset:0];
    goto LABEL_120;
  }
  id v175 = v6;
  id v176 = [v175 instanceDescriptorStride];
  id v177 = [v175 instanceCount];
  uint64_t v178 = (void)v177 * (void)v176;
  if ((void)v177 * (void)v176 <= 1uLL) {
    uint64_t v179 = 1;
  }
  else {
    uint64_t v179 = (void)v177 * (void)v176;
  }
  id v180 = [v239 newBufferWithLength:v179 options:0];
  [v180 setLabel:@"gputools.ADSInstanceDescriptorBuffer"];
  v270[0] = @"srcBuffer";
  unint64_t v181 = [v175 instanceDescriptorBuffer];
  v271[0] = v181;
  v270[1] = @"srcOffset";
  uint64_t v182 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v175 instanceDescriptorBufferOffset]);
  v271[1] = v182;
  v271[2] = v180;
  v270[2] = @"dstBuffer";
  v270[3] = @"length";
  double v183 = +[NSNumber numberWithUnsignedLong:v178];
  v271[3] = v183;
  uint64_t v184 = +[NSDictionary dictionaryWithObjects:v271 forKeys:v270 count:4];

  id v5 = v238;
  [v238 addObject:v184];
  [v175 setInstanceDescriptorBuffer:v180];
  [v175 setInstanceDescriptorBufferOffset:0];

  v185 = [v175 motionTransformBuffer];

  if (v185)
  {
    id v186 = [v175 motionTransformCount];
    uint64_t v187 = 48 * (void)v186;
    if ((unint64_t)(48 * (void)v186) <= 1) {
      uint64_t v188 = 1;
    }
    else {
      uint64_t v188 = 48 * (void)v186;
    }
    id v189 = [v239 newBufferWithLength:v188 options:0];
    [v189 setLabel:@"gputools.ADSMotionTransformBuffer"];
    v268[0] = @"srcBuffer";
    v190 = [v175 motionTransformBuffer];
    v269[0] = v190;
    v268[1] = @"srcOffset";
    uint64_t v191 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v175 motionTransformBufferOffset]);
    v269[1] = v191;
    v269[2] = v189;
    v268[2] = @"dstBuffer";
    v268[3] = @"length";
    __int16 v192 = +[NSNumber numberWithUnsignedLong:v187];
    v269[3] = v192;
    uint64_t v193 = +[NSDictionary dictionaryWithObjects:v269 forKeys:v268 count:4];

    id v5 = v238;
    [v238 addObject:v193];
    [v175 setMotionTransformBuffer:v189];
    [v175 setMotionTransformBufferOffset:0];
LABEL_120:

    id v175 = v6;
    goto LABEL_123;
  }
LABEL_104:
  id v6 = v225;
LABEL_123:

LABEL_124:

  return v6;
}

id copyAndNullifyReferencesInDescriptor(void *a1)
{
  id v1 = [a1 copy];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    long long v64 = 0u;
    long long v65 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    id v42 = v1;
    id v2 = [v1 geometryDescriptors];
    id v3 = [v2 countByEnumeratingWithState:&v62 objects:v70 count:16];
    if (!v3) {
      goto LABEL_55;
    }
    id v4 = v3;
    id v5 = &CACurrentMediaTime_ptr;
    uint64_t v6 = *(void *)v63;
    uint64_t v45 = *(void *)v63;
    while (1)
    {
      id v7 = 0;
      id v44 = v4;
      do
      {
        if (*(void *)v63 != v6) {
          objc_enumerationMutation(v2);
        }
        id v8 = *(void **)(*((void *)&v62 + 1) + 8 * (void)v7);
        if (objc_opt_respondsToSelector())
        {
          [v8 setPrimitiveDataBuffer:0];
          [v8 setPrimitiveDataBufferOffset:0];
          [v8 setPrimitiveDataStride:0];
          [v8 setPrimitiveDataElementSize:0];
        }
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          id v9 = v8;
          [v9 setVertexBuffer:0];
          [v9 setVertexBufferOffset:0];
          [v9 setIndexBuffer:0];
          [v9 setIndexBufferOffset:0];
          if ((objc_opt_respondsToSelector() & 1) == 0) {
            goto LABEL_52;
          }
          goto LABEL_23;
        }
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          id v10 = v8;
          [v10 setBoundingBoxBuffer:0];
          [v10 setBoundingBoxBufferOffset:0];
        }
        else
        {
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            uint64_t v11 = v5;
            int64_t v12 = v2;
            id v9 = v8;
            long long v58 = 0u;
            long long v59 = 0u;
            long long v60 = 0u;
            long long v61 = 0u;
            id v13 = [v9 vertexBuffers];
            id v14 = [v13 countByEnumeratingWithState:&v58 objects:v69 count:16];
            if (v14)
            {
              id v15 = v14;
              uint64_t v16 = *(void *)v59;
              do
              {
                for (uint64_t i = 0; i != v15; uint64_t i = (char *)i + 1)
                {
                  if (*(void *)v59 != v16) {
                    objc_enumerationMutation(v13);
                  }
                  id v18 = *(void **)(*((void *)&v58 + 1) + 8 * i);
                  [v18 setBuffer:0];
                  [v18 setOffset:0];
                }
                id v15 = [v13 countByEnumeratingWithState:&v58 objects:v69 count:16];
              }
              while (v15);
            }

            [v9 setIndexBuffer:0];
            [v9 setIndexBufferOffset:0];
            id v2 = v12;
            id v5 = v11;
            id v4 = v44;
            uint64_t v6 = v45;
            if ((objc_opt_respondsToSelector() & 1) == 0) {
              goto LABEL_52;
            }
LABEL_23:
            [v9 setTransformationMatrixBuffer:0];
            [v9 setTransformationMatrixBufferOffset:0];
            goto LABEL_52;
          }
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            id v19 = v8;
            long long v54 = 0u;
            long long v55 = 0u;
            long long v56 = 0u;
            long long v57 = 0u;
            id v20 = [v19 boundingBoxBuffers];
            id v21 = [v20 countByEnumeratingWithState:&v54 objects:v68 count:16];
            if (v21)
            {
              id v22 = v21;
              uint64_t v23 = *(void *)v55;
              do
              {
                for (uint64_t j = 0; j != v22; uint64_t j = (char *)j + 1)
                {
                  if (*(void *)v55 != v23) {
                    objc_enumerationMutation(v20);
                  }
                  id v25 = *(void **)(*((void *)&v54 + 1) + 8 * (void)j);
                  [v25 setBuffer:0];
                  [v25 setOffset:0];
                }
                id v22 = [v20 countByEnumeratingWithState:&v54 objects:v68 count:16];
              }
              while (v22);
            }

LABEL_51:
            uint64_t v6 = v45;
            goto LABEL_52;
          }
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0) {
              goto LABEL_53;
            }
            id v27 = v8;
            long long v50 = 0u;
            long long v51 = 0u;
            long long v52 = 0u;
            long long v53 = 0u;
            id v43 = v27;
            char v28 = [v27 controlPointBuffers];
            id v29 = [v28 countByEnumeratingWithState:&v50 objects:v67 count:16];
            if (v29)
            {
              id v30 = v29;
              uint64_t v31 = *(void *)v51;
              do
              {
                for (uint64_t k = 0; k != v30; uint64_t k = (char *)k + 1)
                {
                  if (*(void *)v51 != v31) {
                    objc_enumerationMutation(v28);
                  }
                  id v33 = *(void **)(*((void *)&v50 + 1) + 8 * (void)k);
                  [v33 setBuffer:0];
                  [v33 setOffset:0];
                }
                id v30 = [v28 countByEnumeratingWithState:&v50 objects:v67 count:16];
              }
              while (v30);
            }

            long long v48 = 0u;
            long long v49 = 0u;
            long long v46 = 0u;
            long long v47 = 0u;
            char v34 = [v43 radiusBuffers];
            id v35 = [v34 countByEnumeratingWithState:&v46 objects:v66 count:16];
            if (v35)
            {
              id v36 = v35;
              uint64_t v37 = *(void *)v47;
              do
              {
                for (uint64_t m = 0; m != v36; uint64_t m = (char *)m + 1)
                {
                  if (*(void *)v47 != v37) {
                    objc_enumerationMutation(v34);
                  }
                  uint64_t v39 = *(void **)(*((void *)&v46 + 1) + 8 * (void)m);
                  [v39 setBuffer:0];
                  [v39 setOffset:0];
                }
                id v36 = [v34 countByEnumeratingWithState:&v46 objects:v66 count:16];
              }
              while (v36);
            }

            [v43 setIndexBuffer:0];
            [v43 setIndexBufferOffset:0];
            goto LABEL_51;
          }
          id v26 = v8;
          [v26 setControlPointBuffer:0];
          [v26 setControlPointBufferOffset:0];
          [v26 setRadiusBuffer:0];
          [v26 setRadiusBufferOffset:0];
          [v26 setIndexBuffer:0];
          [v26 setIndexBufferOffset:0];
        }
LABEL_52:

LABEL_53:
        id v7 = (char *)v7 + 1;
      }
      while (v7 != v4);
      id v4 = [v2 countByEnumeratingWithState:&v62 objects:v70 count:16];
      if (!v4)
      {
LABEL_55:

        id v1 = v42;
        goto LABEL_61;
      }
    }
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v40 = v1;
    [v40 setInstanceDescriptorBuffer:0];
    [v40 setInstanceDescriptorBufferOffset:0];
    [v40 setMotionTransformBuffer:0];
    [v40 setMotionTransformBufferOffset:0];
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0) {
      goto LABEL_61;
    }
    id v40 = v1;
    [v40 setInstanceDescriptorBuffer:0];
    [v40 setInstanceDescriptorBufferOffset:0];
    [v40 setMotionTransformBuffer:0];
    [v40 setMotionTransformBufferOffset:0];
    [v40 setMotionTransformCountBuffer:0];
    [v40 setMotionTransformCountBufferOffset:0];
    [v40 setInstanceCountBuffer:0];
    [v40 setInstanceCountBufferOffset:0];
  }

LABEL_61:

  return v1;
}

void DownloadHeap(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = (id)*a3;
  id v8 = [v7 backbuffer];
  id v9 = DEVICEOBJECT(v8);

  uint64_t v11 = a3[6];
  uint64_t v10 = a3[7];
  id v12 = [v9 protectionOptions];
  id v13 = [v5 getGPUBuffer:v10 context:v6];
  if (!v12)
  {
    id v14 = [v6 blitCommandEncoder];
    +[NSString stringWithFormat:@"DownloadHeap[name=%lu, ref=%llu]", *a3, a3[1]];

    id v15 = [v6 blitCommandEncoder];
    uint64_t v16 = [v13 buffer];
    objc_msgSend(v15, "copyFromBuffer:sourceOffset:toBuffer:destinationOffset:size:", v9, v11, v16, objc_msgSend(v13, "offset"), v10);
  }
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  *(_OWORD *)__str = 0u;
  long long v23 = 0u;
  GTResourceDownloaderGetResourceFilename((uint64_t)a3, 0, __str, 0x80uLL);
  id v17 = [v13 buffer];
  id v18 = +[NSData dataWithBytesNoCopy:length:freeWhenDone:](NSData, "dataWithBytesNoCopy:length:freeWhenDone:", (char *)[v13 offset] + (void)objc_msgSend(v17, "contents"), objc_msgSend(v13, "size"), 0);

  id v19 = [v6 objects];
  id v20 = +[NSString stringWithUTF8String:__str];
  [v19 addObject:v20];

  id v21 = [v6 objects];
  [v21 addObject:v18];

  atomic_fetch_add((atomic_ullong *volatile)&g_GPUDataSize, (unint64_t)[v13 size]);
}

void DownloadBuffer(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = (id)*a3;
  uint64_t v9 = a3[6];
  uint64_t v8 = a3[7];
  id v10 = [v7 protectionOptions];
  uint64_t v11 = [v5 getGPUBuffer:v8 context:v6];
  if (!v10)
  {
    id v12 = [v6 blitCommandEncoder];
    +[NSString stringWithFormat:@"DownloadBuffer[name=%lu, ref=%llu]", *a3, a3[1]];

    id v13 = [v6 blitCommandEncoder];
    id v14 = [v11 buffer];
    objc_msgSend(v13, "copyFromBuffer:sourceOffset:toBuffer:destinationOffset:size:", v7, v9, v14, objc_msgSend(v11, "offset"), v8);
  }
  GTResourceDownloaderGetResourceFilename((uint64_t)a3, 0, __str, 0x80uLL);
  id v15 = [v11 buffer];
  uint64_t v16 = +[NSData dataWithBytesNoCopy:length:freeWhenDone:](NSData, "dataWithBytesNoCopy:length:freeWhenDone:", (char *)[v11 offset] + (void)objc_msgSend(v15, "contents"), objc_msgSend(v11, "size"), 0);

  id v17 = [v6 objects];
  id v18 = +[NSString stringWithUTF8String:__str];
  [v17 addObject:v18];

  id v19 = [v6 objects];
  [v19 addObject:v16];

  atomic_fetch_add((atomic_ullong *volatile)&g_GPUDataSize, (unint64_t)[v16 length]);
}

void DownloadIOSurface(void *a1, void *a2, id *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = *a3;
  if ([v7 conformsToProtocol:&OBJC_PROTOCOL___MTLTexture])
  {
    uint64_t v29 = (uint64_t)a3;
    id v30 = v7;
    uint64_t v31 = v6;
    id v32 = v5;
    id v35 = v7;
    uint64_t v8 = (__IOSurface *)[v35 iosurface];
    size_t PlaneCount = IOSurfaceGetPlaneCount(v8);
    if (PlaneCount <= 1) {
      uint64_t v10 = 1;
    }
    else {
      uint64_t v10 = PlaneCount;
    }
    uint64_t v34 = v10;
    size_t v11 = (48 * v10 + 279) & 0xFFFFFFFFFFFFFF00;
    size_t AllocSize = IOSurfaceGetAllocSize(v8);
    size_t v28 = AllocSize + v11;
    id v13 = (void *)GTCoreAlloc(AllocSize, AllocSize + v11);
    bzero(v13, v11);
    *id v13 = 0x63617074757265;
    *((_DWORD *)v13 + 2) = 65538;
    *((_DWORD *)v13 + 3) = v11;
    size_t v33 = v11;
    char ProtectionOptions = IOSurfaceGetProtectionOptions();
    size_t v15 = 0;
    uint64_t v16 = 0;
    do
    {
      size_t HeightOfPlane = IOSurfaceGetHeightOfPlane(v8, v15);
      size_t WidthOfPlane = IOSurfaceGetWidthOfPlane(v8, v15);
      size_t BytesPerRowOfPlane = IOSurfaceGetBytesPerRowOfPlane(v8, v15);
      size_t SizeOfPlane = IOSurfaceGetSizeOfPlane();
      id v21 = [v35 pixelFormat];
      id v22 = &v13[6 * v13[2] + 3];
      *id v22 = v21;
      v22[1] = WidthOfPlane;
      _OWORD v22[2] = HeightOfPlane;
      v22[3] = 1;
      v22[4] = BytesPerRowOfPlane;
      v22[5] = SizeOfPlane;
      ++v13[2];
      if ((ProtectionOptions & 1) == 0)
      {
        IOSurfaceLock(v8, 1u, 0);
        BaseAddressOfPlane = IOSurfaceGetBaseAddressOfPlane(v8, v15);
        memcpy((char *)v13 + v16 + v33, BaseAddressOfPlane, SizeOfPlane);
        IOSurfaceUnlock(v8, 1u, 0);
      }
      v16 += SizeOfPlane;
      ++v15;
    }
    while (v34 != v15);
    GTResourceDownloaderGetResourceFilename(v29, *(_DWORD *)(v29 + 56), __str, 0x80uLL);
    id v24 = [objc_alloc((Class)NSData) initWithBytesNoCopy:v13 length:v28 deallocator:&__block_literal_global_7750];
    id v6 = v31;
    long long v25 = [v31 objects];
    long long v26 = +[NSString stringWithUTF8String:__str];
    [v25 addObject:v26];

    long long v27 = [v31 objects];
    [v27 addObject:v24];

    atomic_fetch_add((atomic_ullong *volatile)&g_GPUDataSize, (unint64_t)[v24 length]);
    id v5 = v32;
    id v7 = v30;
  }
}

void DownloadTexture(void *a1, void *a2, id *a3, int a4)
{
  id v101 = a1;
  id v100 = a2;
  id v7 = *a3;
  double v99 = DEVICEOBJECT(v7);

  if (a4 >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v98 = a4;
    uint64_t v107 = (uint64_t)a3;
    do
    {
      uint64_t v9 = &a3[11 * v8];
      id v10 = v101;
      id v11 = v100;
      id v139 = v99;
      id v12 = v139;
      id v140 = v12;
      id v13 = [v12 device];
      id v14 = [v12 pixelFormat];
      id v15 = [v12 sampleCount];
      long long v123 = (char *)[v12 storageMode];
      unsigned int v110 = [v12 isFramebufferOnly];
      id v16 = [v12 protectionOptions];
      uint64_t v17 = *((unsigned int *)v9 + 15);
      uint64_t v18 = *((unsigned __int16 *)v9 + 32);
      uint64_t v19 = *((unsigned __int16 *)v9 + 33);
      uint64_t v116 = *((unsigned int *)v9 + 13);
      uint64_t v115 = *((unsigned __int16 *)v9 + 28);
      uint64_t v114 = *((unsigned __int16 *)v9 + 29);
      long long v137 = 0u;
      memset(v138, 0, sizeof(v138));
      *(_OWORD *)__str = 0u;
      long long v136 = 0u;
      uint64_t v127 = v18;
      uint64_t v128 = v17;
      uint64_t v132 = v17;
      uint64_t v133 = v18;
      unint64_t v125 = (unint64_t)v14;
      uint64_t v126 = v19;
      uint64_t v134 = v19;
      MTLTextureInfo(v13, (uint64_t)v14, &v132, (uint64_t)v15, (uint64_t)__str);
      uint64_t v120 = *(void *)__str;
      uint64_t v20 = v8;
      size_t v21 = (48 * *(void *)__str + 279) & 0xFFFFFFFFFFFFFF00;
      id v109 = v10;
      long long v118 = v11;
      id v22 = [v10 getGPUBuffer:*((unsigned int *)v9 + 19) context:v11];
      id v23 = [v22 buffer];
      id v24 = [v23 contents];
      long long v117 = v22;
      long long v25 = (char *)[v22 offset] + (void)v24;

      bzero(v25, v21);
      *(void *)long long v25 = 0x63617074757265;
      id v26 = v12;
      v25[2] = 65538;
      v25[3] = v21;
      long long v124 = v25;
      size_t v102 = v21;
      uint64_t v27 = v20;
      long long v119 = v9;
      if (v16)
      {
        id v28 = v12;
        id v29 = [v28 pixelFormat];
        id v30 = [v28 width];
        id v31 = [v28 height];
        id v32 = v30;
        uint64_t v9 = v119;
        size_t v33 = +[MTLTextureDescriptor texture2DDescriptorWithPixelFormat:v29 width:v32 height:v31 mipmapped:0];
        id v34 = [v13 newTextureWithDescriptor:v33];
        +[NSString stringWithFormat:@"DownloadSubTexture_copyTexture[name=%lu, ref=%llu]", *v119, *(void *)(v107 + 88 * v20 + 8)];

        id v26 = v34;
        id v139 = v26;

        id v140 = v26;
      }
      long long v103 = v12;
      if (v110)
      {
        id v35 = v26;
        int64_t v111 = +[MTLTextureDescriptor texture2DDescriptorWithPixelFormat:width:height:mipmapped:](MTLTextureDescriptor, "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", [v35 pixelFormat], objc_msgSend(v35, "width"), objc_msgSend(v35, "height"), 0);
        [v111 setStorageMode:2];
        id v26 = [v13 newTextureWithDescriptor:v111];
        uint64_t v36 = v107 + 88 * v20;
        +[NSString stringWithFormat:@"DownloadSubTexture_framebufferOnly_copyTexture[name=%lu, ref=%llu]", *v9, *(void *)(v36 + 8)];

        uint64_t v37 = +[MTLRenderPassDescriptor renderPassDescriptor];
        unsigned int v38 = [v37 colorAttachments];
        uint64_t v39 = [v38 objectAtIndexedSubscript:0];
        [v39 setTexture:v26];

        id v40 = [v37 colorAttachments];
        uint64_t v41 = [v40 objectAtIndexedSubscript:0];
        [v41 setStoreAction:1];

        id v42 = [v118 newCommandBuffer];
        id v43 = [v42 renderCommandEncoderWithDescriptor:v37];
        +[NSString stringWithFormat:@"DownloadSubTexture_framebufferOnly_draw[name=%lu, ref=%llu]", *v119, *(void *)(v36 + 8)];

        id v44 = objc_msgSend(v109, "getFramebufferPipeline:", objc_msgSend(v35, "pixelFormat"));
        [v43 setRenderPipelineState:v44];
        [v43 setFragmentTexture:v35 atIndex:0];
        [v43 drawPrimitives:3 vertexStart:0 vertexCount:3];
        [v43 endEncoding];
        [v42 commit];
        id v139 = v26;

        uint64_t v9 = v119;
      }
      uint64_t v45 = v120;
      uint64_t v108 = v13;
      if ((v125 & 0xFFFFFFFFFFFFFFFELL) == 0x226)
      {
        uint64_t v46 = 94;
        if (v125 == 551) {
          uint64_t v46 = 555;
        }
        uint64_t v47 = v27;
        if (v125 == 550) {
          uint64_t v48 = 554;
        }
        else {
          uint64_t v48 = v46;
        }
        id v49 = v26;
        long long v50 = +[MTLTextureDescriptor texture2DDescriptorWithPixelFormat:width:height:mipmapped:](MTLTextureDescriptor, "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", v48, [v49 width], objc_msgSend(v49, "height"), 0);
        [v50 setStorageMode:2];
        [v50 setUsage:5];
        id v51 = [v13 newTextureWithDescriptor:v50];
        id v52 = v139;
        id v139 = v51;

        +[NSString stringWithFormat:@"DownloadSubTexture_RGB10A8_2P_copyTexture_0[name=%lu, ref=%llu]", *v9, *(void *)(v107 + 88 * v47 + 8)];
        long long v53 = +[MTLTextureDescriptor texture2DDescriptorWithPixelFormat:width:height:mipmapped:](MTLTextureDescriptor, "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", 10, [v49 width], objc_msgSend(v49, "height"), 0);
        [v53 setStorageMode:2];
        [v53 setUsage:5];
        id v112 = [v13 newTextureWithDescriptor:v53];
        long long v54 = v140;
        id v140 = v112;

        uint64_t v55 = v107 + 88 * v47;
        +[NSString stringWithFormat:@"DownloadSubTexture_RGB10A8_2P_copyTexture_1[name=%lu, ref=%llu]", *v9, *(void *)(v55 + 8)];

        id v131 = 0;
        id v56 = objc_msgSend(v108, "newLibraryWithSource:options:error:", @"#include <metal_stdlib>\nusing namespace metal\n;struct VOut { float4 pos [[position]]; float2 uv; };\nvertex VOut Vertex(uint vid [[ vertex_id ]]) {VOut out; out.uv = float2((vid << 1) & 2, vid & 2); out.pos = float4(out.uv * 2.0f + -1.0f, 0.0f, 1.0f); return out; }\nstruct FOut { float4 rt0 [[color(0)]]; float rt1 [[color(1)]]; };\nfragment FOut Fragment(VOut in [[stage_in]], texture2d<float> tex) { FOut out;\nfloat4 texel = tex.read(uint2(tex.get_width() * (in.uv.x), tex.get_height() * (in.uv.y)));out.rt0 = float4(texel.rgb, 0.0);\nout.rt1 = texel.a;\nreturn out; }\n",
                0,
                &v131);
        id v57 = v131;
        id v121 = [v56 newFunctionWithName:@"Vertex"];
        id v105 = [v56 newFunctionWithName:@"Fragment"];
        long long v58 = objc_opt_new();
        [v58 setVertexFunction:v121];
        [v58 setFragmentFunction:v105];
        long long v59 = [v58 colorAttachments];
        long long v60 = [v59 objectAtIndexedSubscript:0];
        uint64_t v61 = v48;
        uint64_t v27 = v47;
        [v60 setPixelFormat:v61];

        long long v62 = [v58 colorAttachments];
        long long v63 = [v62 objectAtIndexedSubscript:1];
        [v63 setPixelFormat:10];

        id v130 = v57;
        id v64 = [v108 newRenderPipelineStateWithDescriptor:v58 error:&v130];
        id v97 = v130;

        long long v65 = +[MTLRenderPassDescriptor renderPassDescriptor];
        id v66 = v139;
        long long v67 = [v65 colorAttachments];
        long long v68 = [v67 objectAtIndexedSubscript:0];
        [v68 setTexture:v66];

        long long v69 = [v65 colorAttachments];
        int64_t v70 = [v69 objectAtIndexedSubscript:0];
        [v70 setStoreAction:1];

        id v71 = [v65 colorAttachments];
        id v72 = [v71 objectAtIndexedSubscript:1];
        [v72 setTexture:v112];

        uint64_t v73 = [v65 colorAttachments];
        CGFloat v74 = [v73 objectAtIndexedSubscript:1];
        [v74 setStoreAction:1];

        id v75 = [v118 newCommandBuffer];
        uint64_t v76 = [v75 renderCommandEncoderWithDescriptor:v65];
        +[NSString stringWithFormat:@"DownloadSubTexture_RGB10A8_2P_draw[name=%lu, ref=%llu]", *v119, *(void *)(v55 + 8)];

        [v76 setRenderPipelineState:v64];
        [v76 setFragmentTexture:v49 atIndex:0];

        [v76 drawPrimitives:3 vertexStart:0 vertexCount:3];
        [v76 endEncoding];
        [v75 commit];

        uint64_t v9 = v119;
        uint64_t v45 = *(void *)__str;
      }
      uint64_t v106 = v27;
      uint64_t v77 = (char *)[v117 offset];
      if (v45)
      {
        uint64_t v78 = 0;
        uint64_t v113 = (unsigned __int16 *)(v9 + 6);
        char v79 = &v77[v102];
        uint64_t v80 = (void *)v138 + 1;
        do
        {
          long long v81 = *((_OWORD *)v80 - 1);
          uint64_t v82 = (uint64_t)&v124[12 * *((void *)v124 + 2) + 6];
          *(void *)uint64_t v82 = v125;
          *(void *)(v82 + 8) = v128;
          *(void *)(v82 + 16) = v127;
          *(void *)(v82 + 24) = v126;
          *(_OWORD *)(v82 + 32) = v81;
          ++*((void *)v124 + 2);
          if (v123 != (unsigned char *)&def_CFBEC + 3)
          {
            long long v122 = v81;
            [v118 blitCommandEncoder];
            v84 = uint64_t v83 = v45;
            +[NSString stringWithFormat:@"DownloadSubTexture[plane=%d]", v78];

            uint64_t v85 = [v118 blitCommandEncoder];
            uint64_t v86 = (uint64_t)*(&v139 + v78);
            uint64_t v87 = *v113;
            uint64_t v88 = *((unsigned __int16 *)v9 + 25);
            unint64_t v89 = [v117 buffer];
            uint64_t v90 = *v80;
            uint64_t v132 = v116;
            uint64_t v133 = v115;
            uint64_t v134 = v114;
            v129[0] = v128;
            v129[1] = v127;
            v129[2] = v126;
            objc_msgSend(v85, "copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toBuffer:destinationOffset:destinationBytesPerRow:destinationBytesPerImage:options:", v86, v87, v88, &v132, v129, v89, v79, v122, v90);

            uint64_t v9 = v119;
            uint64_t v45 = v83;
          }
          v79 += *(v80 - 3);
          ++v78;
          v80 += 4;
        }
        while (v45 != v78);
      }

      for (uint64_t i = 8; i != -8; i -= 8)
      a3 = (id *)v107;
      GTResourceDownloaderGetResourceFilename(v107, v106, __str, 0x80uLL);
      id v92 = [v117 buffer];
      id v93 = +[NSData dataWithBytesNoCopy:length:freeWhenDone:](NSData, "dataWithBytesNoCopy:length:freeWhenDone:", (char *)[v117 offset] + (void)objc_msgSend(v92, "contents"), objc_msgSend(v117, "size"), 0);

      id v94 = [v118 objects];
      uint64_t v95 = +[NSString stringWithUTF8String:__str];
      [v94 addObject:v95];

      id v96 = [v118 objects];
      [v96 addObject:v93];

      atomic_fetch_add((atomic_ullong *volatile)&g_GPUDataSize, (unint64_t)[v93 length]);
      uint64_t v8 = v106 + 1;
    }
    while (v106 + 1 != v98);
  }
}

void DownloadAccelerationStructure(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  if (DownloadAccelerationStructure_onceToken != -1) {
    dispatch_once(&DownloadAccelerationStructure_onceToken, &__block_literal_global_197);
  }
  id v7 = (id)*a3;
  uint64_t v8 = [v7 device];
  uint64_t v9 = DEVICEOBJECT(v8);

  id v10 = [v9 newCommandQueue];
  +[NSString stringWithFormat:@"com.apple.gputools.DownloadAccelerationStructure[name=%lu, ref=%llu]", *a3, a3[1]];

  id v11 = [v5 getGPUBuffer:24 context:v6];
  id v12 = [v10 commandBufferWithDescriptor:DownloadAccelerationStructure_commandBufferDescriptor];
  uint64_t v87 = v10;
  [v10 label];

  id v13 = [v12 accelerationStructureCommandEncoder];
  [v12 label];

  id v14 = DEVICEOBJECT(v7);
  id v15 = [v11 buffer];
  objc_msgSend(v13, "writeAccelerationStructureSerializationData:toBuffer:offset:", v14, v15, objc_msgSend(v11, "offset"));

  [v13 endEncoding];
  [v12 commit];
  [v12 waitUntilCompleted];

  id v16 = [v11 buffer];
  id v17 = [v16 contents];
  uint64_t v18 = (char *)[v11 offset];
  uint64_t v20 = *(void *)&v18[(void)v17];
  unint64_t v19 = *(void *)&v18[(void)v17 + 8];

  if (v19 >= 0x19 && [v9 isCompatibleWithAccelerationStructure:v20])
  {
    uint64_t v84 = v9;
    id v85 = v5;
    size_t v21 = [v5 getGPUBuffer:v19 context:v6];
    uint64_t v22 = [v7 stateBuffer];
    uint64_t v86 = v21;
    if (!v22) {
      goto LABEL_8;
    }
    id v23 = (void *)v22;
    id v24 = [v7 stateBuffer];
    id v25 = [v24 length];

    if ((unint64_t)v25 < 0x10) {
      goto LABEL_8;
    }
    id v26 = [v7 stateBuffer];
    int v27 = *((_DWORD *)[v26 contents] + 1);

    if (v27)
    {
      long long v69 = [v6 captureAccelerationStructures];
      int64_t v70 = GTAccelerationStructureDescriptorDownloader_children(v87, v7, v69);

      id v71 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(v70, "count"));
      long long v88 = 0u;
      long long v89 = 0u;
      long long v90 = 0u;
      long long v91 = 0u;
      id v32 = v70;
      id v72 = [v32 countByEnumeratingWithState:&v88 objects:v101 count:16];
      if (v72)
      {
        id v73 = v72;
        uint64_t v74 = *(void *)v89;
        do
        {
          for (uint64_t i = 0; i != v73; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v89 != v74) {
              objc_enumerationMutation(v32);
            }
            uint64_t v76 = DEVICEOBJECT(*(id *)(*((void *)&v88 + 1) + 8 * i));
            [v71 addObject:v76];
          }
          id v73 = [v32 countByEnumeratingWithState:&v88 objects:v101 count:16];
        }
        while (v73);
      }

      uint64_t v77 = [v6 accelerationStructureCommandEncoder];
      +[NSString stringWithFormat:@"DownloadAccelerationStructure_serializeInstanceAccelerationStructure[name=%lu, ref=%llu]", *a3, a3[1]];

      uint64_t v83 = [v6 accelerationStructureCommandEncoder];
      uint64_t v78 = DEVICEOBJECT(v7);
      char v79 = [v86 buffer];
      objc_msgSend(v83, "serializeInstanceAccelerationStructure:primitiveAccelerationStructures:toBuffer:serializedBufferOffset:", v78, v71, v79, objc_msgSend(v86, "offset"));

      size_t v21 = v86;
    }
    else
    {
LABEL_8:
      id v28 = [v6 accelerationStructureCommandEncoder];
      +[NSString stringWithFormat:@"DownloadAccelerationStructure_serializePrimitiveAccelerationStructure[name=%lu, ref=%llu]", *a3, a3[1]];

      id v29 = [v6 accelerationStructureCommandEncoder];
      id v30 = DEVICEOBJECT(v7);
      id v31 = [v21 buffer];
      objc_msgSend(v29, "serializePrimitiveAccelerationStructure:toBuffer:serializedBufferOffset:", v30, v31, objc_msgSend(v21, "offset"));

      id v32 = 0;
    }
    GTResourceDownloaderGetResourceFilename((uint64_t)a3, 0, __str, 0x80uLL);
    id v33 = [v21 buffer];
    id v34 = +[NSData dataWithBytesNoCopy:length:freeWhenDone:](NSData, "dataWithBytesNoCopy:length:freeWhenDone:", (char *)[v21 offset] + (void)objc_msgSend(v33, "contents"), objc_msgSend(v21, "size"), 0);

    id v35 = [v6 objects];
    uint64_t v36 = +[NSString stringWithUTF8String:__str];
    [v35 addObject:v36];

    uint64_t v37 = [v6 objects];
    [v37 addObject:v34];

    atomic_fetch_add((atomic_ullong *volatile)&g_GPUDataSize, (unint64_t)[v34 length]);
    id v38 = [v7 traceContext];
    uint64_t v39 = a3[6];
    *(void *)__str = v38;
    uint64_t v93 = 0;
    uint64_t v94 = 0;
    uint64_t v95 = v39;
    s();
    uint64_t v41 = v40;
    uint64_t v42 = *v40;
    *id v40 = v43;
    uint64_t v96 = v42;
    char v97 = *((unsigned char *)v40 + 8);
    __int16 v98 = 16400;
    int v99 = 0;
    char v100 = 0;
    id v44 = [v7 stateBuffer];
    uint64_t v45 = v44;
    if (v44)
    {
      unsigned int v46 = *((_DWORD *)[v44 contents] + 1);
      int8x8_t v82 = vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v46), (uint32x2_t)0xFFFFFFFEFFFFFFFFLL), (int8x8_t)0x100000001);
      int v47 = (v46 >> 3) & 1;
      int v81 = v46 & 1;
    }
    else
    {
      int v81 = 0;
      int v47 = 0;
      int8x8_t v82 = 0;
    }
    GTTraceEncoder_setStream((uint64_t *)__str, (uint64_t)[v7 traceStream]);
    uint64_t v48 = v94;
    *(_DWORD *)(v94 + 8) = -10159;
    char v49 = v98;
    if (v98 > 0x28uLL)
    {
      uint64_t v51 = *(void *)(v93 + 24);
      id v80 = v7;
      id v52 = v45;
      long long v53 = a3;
      id v54 = v6;
      int v55 = v47;
      uint64_t v56 = HIBYTE(v98);
      ++HIBYTE(v98);
      long long v50 = GTTraceMemPool_allocateBytes(v51, v95, v56 | 0x1800000000) + 16;
      char v49 = v56;
      int v47 = v55;
      id v6 = v54;
      a3 = v53;
      uint64_t v45 = v52;
      id v7 = v80;
    }
    else
    {
      long long v50 = (char *)(v48 + v98);
      LOBYTE(v98) = v98 + 24;
    }
    *(unsigned char *)(v48 + 13) = v49;
    id v57 = (uint64_t *)[v7 traceStream];
    if (v57) {
      uint64_t v58 = *v57;
    }
    else {
      uint64_t v58 = 0;
    }
    *(void *)long long v50 = v58;
    *((_DWORD *)v50 + 2) = v81;
    *(int8x8_t *)(v50 + 12) = v82;
    *((_DWORD *)v50 + 5) = v47;
    [v7 traceContext];
    *uint64_t v41 = v96;
    *((unsigned char *)v41 + 8) = v97;
    *(unsigned char *)(v94 + 15) |= 8u;

    if (v32)
    {
      id v59 = [v32 count];
      id v60 = [objc_alloc((Class)NSMutableData) initWithLength:8 * (void)v59];
      uint64_t v61 = [v60 mutableBytes];
      if (v59)
      {
        long long v62 = v61;
        for (uint64_t j = 0; j != v59; ++j)
        {
          id v64 = [v32 objectAtIndexedSubscript:j];
          long long v65 = DEVICEOBJECT(v64);
          v62[(void)j] = v65;
        }
      }
      GTResourceDownloaderGetResourceFilename((uint64_t)a3, 1, __str, 0x80uLL);
      id v66 = [v6 objects];
      long long v67 = +[NSString stringWithUTF8String:__str];
      [v66 addObject:v67];

      long long v68 = [v6 objects];
      [v68 addObject:v60];

      atomic_fetch_add((atomic_ullong *volatile)&g_GPUDataSize, (unint64_t)[v60 length]);
    }

    uint64_t v9 = v84;
    id v5 = v85;
  }
}

uint64_t GTResourceDownloaderRequest_compareType(uint64_t a1, uint64_t a2)
{
  int v3 = ResourceTypeSortOrder(*(unsigned __int8 *)(a2 + 46));
  return v3 - ResourceTypeSortOrder(*(unsigned __int8 *)(a1 + 46));
}

uint64_t ResourceTypeSortOrder(int a1)
{
  if (a1 > 59)
  {
    if (a1 > 82)
    {
      if (a1 == 86) {
        return 4;
      }
      if (a1 == 83) {
        return 2;
      }
    }
    else
    {
      if (a1 == 60) {
        return 1;
      }
      if (a1 == 80) {
        return 5;
      }
    }
    return 0;
  }
  if (a1 == 16) {
    return 6;
  }
  if (a1 != 22)
  {
    if (a1 == 57) {
      return 7;
    }
    return 0;
  }
  return 3;
}

uint64_t GTResourceDownloaderRequest_markTextureAsDrawable(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)(result + 47) |= 4u;
  *(void *)(result + 24) = a2;
  *(void *)(result + 32) = a3;
  return result;
}

apr_array_header_t *GTResourceDownloaderProcessRequest(apr_pool_t *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  arr = apr_array_make(a1, *(_DWORD *)(a2 + 12), 88);
  if (*(int *)(v2 + 12) >= 1)
  {
    uint64_t v3 = 0;
    int64x2_t v139 = vdupq_n_s64(0x20uLL);
    uint64_t v136 = v2;
    do
    {
      uint64_t v5 = *(void *)(v2 + 24);
      id v6 = (void *)(v5 + 88 * v3);
      id v7 = v6 + 1;
      Streauint64_t m = GTTraceContext_getStream(g_ctx, v6[1]);
      uint64_t Func = GTTraceStream_lastFunc(Stream);
      if ((IsFuncEnumDestructor(*(_DWORD *)(Func + 8)) & 1) == 0)
      {
        uint64_t v10 = v5 + 88 * v3;
        unsigned int v11 = *(unsigned __int8 *)(v10 + 46);
        uint64_t v178 = (char *)(v10 + 46);
        if (v11 <= 0x38)
        {
          switch(v11)
          {
            case 0x10u:
              id v17 = (id)*v6;
              id v38 = apr_array_push(arr);
              v38[46] = *v178;
              *(_OWORD *)id v38 = *(_OWORD *)v6;
              uint64_t v39 = v5 + 88 * v3;
              *((void *)v38 + 2) = *(void *)(v39 + 16);
              *((_DWORD *)v38 + 1mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *(_DWORD *)(v39 + 40);
              *((void *)v38 + 6) = atomic_fetch_add((atomic_ullong *volatile)[v17 traceContext] + 9, 1uLL);
              goto LABEL_20;
            case 0x16u:
              id v17 = (id)*v6;
              size_t v21 = DEVICEOBJECT(v17);
              ProcessDeviceBuffer(arr, v5 + 88 * v3, v21);
              goto LABEL_19;
            case 0x32u:
              id v17 = (id)*v6;
              size_t v21 = [v17 backbuffer];
              uint64_t v22 = DEVICEOBJECT(v21);
              ProcessDeviceBuffer(arr, v5 + 88 * v3, v22);

LABEL_19:
              goto LABEL_20;
          }
        }
        else
        {
          long long v137 = v4;
          uint64_t v138 = v3;
          if (*(unsigned __int8 *)(v10 + 46) > 0x4Fu)
          {
            if (v11 == 80)
            {
              id v40 = (id)*v6;
              uint64_t v41 = DEVICEOBJECT(v40);

              long long v172 = (uint64_t *)(v5 + 88 * v3);
              id v135 = v41;
              if ((objc_opt_respondsToSelector() & 1) != 0 && [v41 isSparse])
              {
                id v175 = v6 + 1;
                uint64_t v169 = v5;
                id v142 = v41;
                id v42 = (id)*v6;
                uint64_t v43 = DEVICEOBJECT(v42);

                if ([v43 isSparse])
                {
                  id v44 = [v43 device];
                  id v45 = [v44 newCommandQueue];
                  +[NSString stringWithFormat:@"com.apple.gputools.GTResourceDownloader.DownloadSparseTextureMappingBuffer[name=%lu, ref=%llu]", *v6, *v175];

                  unsigned int v46 = [0 commanndBufferDescriptor];
                  int v47 = [v45 commandBufferWithDescriptor:v46];

                  unsigned int v163 = v45;
                  [v45 label];

                  unint64_t v159 = GetSparseTextureMappingKernelFunction(v43, v44);
                  id v48 = objc_msgSend(v44, "newComputePipelineStateWithFunction:error:");
                  char v49 = [v47 computeCommandEncoder];
                  id v161 = v47;
                  [v47 label];

                  unint64_t v157 = v48;
                  [v49 setComputePipelineState:v48];
                  [v49 setTexture:v43 atIndex:0];
                  long long v50 = GetSparseTextureMappingBuffer(v43, v44);
                  long long v187 = 0u;
                  long long v188 = 0u;
                  memset(v186, 0, sizeof(v186));
                  int64x2_t v197 = 0uLL;
                  unint64_t v198 = 0;
                  id v51 = [v43 textureType];
                  id v52 = [v43 pixelFormat];
                  id v53 = [v43 sampleCount];
                  unsigned __int8 v166 = v44;
                  if (v44)
                  {
                    [v44 sparseTileSizeWithTextureType:v51 pixelFormat:v52 sampleCount:v53];
                  }
                  else
                  {
                    int64x2_t v197 = 0uLL;
                    unint64_t v198 = 0;
                  }
                  if ([v43 arrayLength])
                  {
                    uint64_t v85 = 0;
                    unint64_t v86 = 0;
                    while (![v43 mipmapLevelCount])
                    {
LABEL_77:
                      if (++v86 >= (unint64_t)[v43 arrayLength]) {
                        goto LABEL_78;
                      }
                    }
                    unint64_t v87 = 0;
                    while (2)
                    {
                      unint64_t v88 = (unint64_t)[v43 width] >> v87;
                      if (v88 <= 1) {
                        LODWORD(v88) = 1;
                      }
                      LODWORD(v186[0]) = v88;
                      unint64_t v89 = (unint64_t)[v43 height] >> v87;
                      if (v89 <= 1) {
                        LODWORD(v89) = 1;
                      }
                      DWORD1(v186[0]) = v89;
                      unint64_t v90 = (unint64_t)[v43 depth];
                      LODWORD(v92) = DWORD1(v186[0]);
                      LODWORD(v91) = v186[0];
                      double v93 = (double)v91 / (double)v197.u32[0];
                      unint64_t v94 = v90 >> v87;
                      if (v90 >> v87 <= 1) {
                        LODWORD(v94) = 1;
                      }
                      DWORD2(v186[0]) = v94;
                      *(void *)&v186[1] = __PAIR64__(v197.u32[2], v197.u32[0]);
                      DWORD2(v186[1]) = v198;
                      unsigned int v95 = vcvtpd_u64_f64(v93);
                      unsigned int v96 = vcvtpd_u64_f64((double)v92 / (double)v197.u32[2]);
                      *(void *)&long long v187 = __PAIR64__(v96, v95);
                      unsigned int v97 = vcvtpd_u64_f64((double)v94 / (double)v198);
                      DWORD2(v187) = v97;
                      if ([v43 textureType] == (char *)&dword_4 + 1)
                      {
                        LODWORD(v188) = v86;
                        DWORD2(v188) = v87;
                        goto LABEL_71;
                      }
                      __int16 v98 = (char *)[v43 textureType];
                      LODWORD(v188) = v86;
                      DWORD2(v188) = v87;
                      if (v98 == (unsigned char *)&dword_4 + 2) {
LABEL_71:
                      }
                        unint64_t v99 = v86 % 6;
                      else {
                        LODWORD(v99) = 0;
                      }
                      unsigned int v100 = v95 * v97 * v96;
                      DWORD1(v188) = v99;
                      HIDWORD(v188) = v100;
                      +[NSString stringWithFormat:@"DownloadSparseTextureMappingBuffer[slice = %lu, level = %lu]", v86, v87];

                      [v49 setBuffer:v50 offset:v85 atIndex:0];
                      [v49 setBytes:v186 length:64 atIndex:1];
                      if (v87 >= (unint64_t)[v43 firstMipmapInTail])
                      {
                        int64x2_t v195 = vdupq_n_s64(1uLL);
                        uint64_t v196 = 1;
                        int64x2_t v184 = v195;
                        uint64_t v185 = 1;
                        size_t v102 = &v195;
                        long long v103 = &v184;
                      }
                      else
                      {
                        *(void *)&long long v101 = v187;
                        *((void *)&v101 + 1) = DWORD1(v187);
                        long long v182 = v101;
                        uint64_t v183 = DWORD2(v187);
                        int64x2_t v180 = v139;
                        uint64_t v181 = 1;
                        size_t v102 = (int64x2_t *)&v182;
                        long long v103 = &v180;
                      }
                      [v49 dispatchThreads:v102 threadsPerThreadgroup:v103];
                      v85 += v100;
                      if (++v87 >= (unint64_t)[v43 mipmapLevelCount]) {
                        goto LABEL_77;
                      }
                      continue;
                    }
                  }
LABEL_78:
                  [v49 endEncoding];
                  [v161 commit];
                  [v161 waitUntilCompleted];

                  id v4 = v137;
                  uint64_t v3 = v138;
                }
                else
                {
                  long long v50 = 0;
                }

                id v54 = v142;
                long long v104 = [v142 device];
                id v156 = [v142 pixelFormat];
                id v155 = [v142 sampleCount];
                id v105 = v50;
                id v141 = (char *)[v105 contents];
                unint64_t v106 = -1;
                do
                  ++v106;
                while (v106 < (unint64_t)[v105 length]);
                id v134 = v105;
                uint64_t v153 = *v175;
                uint64_t v154 = *v172;
                uint64_t v107 = v169 + 88 * v3;
                uint64_t v152 = *(void *)(v107 + 16);
                char v150 = *v178;
                int v151 = *(_DWORD *)(v107 + 40);
                id v140 = [v142 firstMipmapInTail];
                int64x2_t v197 = 0uLL;
                unint64_t v198 = 0;
                id v108 = [v142 textureType];
                id v109 = [v142 pixelFormat];
                id v110 = [v142 sampleCount];
                if (v104)
                {
                  [v104 sparseTileSizeWithTextureType:v108 pixelFormat:v109 sampleCount:v110];
                }
                else
                {
                  int64x2_t v197 = 0uLL;
                  unint64_t v198 = 0;
                }
                if ([v142 arrayLength])
                {
                  unint64_t v158 = 0;
                  int v111 = 0;
                  unsigned int v112 = 1;
                  do
                  {
                    if ([v54 mipmapLevelCount])
                    {
                      unint64_t v113 = 0;
                      do
                      {
                        unint64_t v114 = (unint64_t)[v54 width];
                        if (v114 >> v113 <= 1) {
                          LODWORD(v115) = 1;
                        }
                        else {
                          unint64_t v115 = v114 >> v113;
                        }
                        unint64_t v116 = (unint64_t)[v54 height];
                        if (v116 >> v113 <= 1) {
                          LODWORD(v117) = 1;
                        }
                        else {
                          unint64_t v117 = v116 >> v113;
                        }
                        unint64_t v118 = (unint64_t)[v54 depth] >> v113;
                        LODWORD(v4) = vcvtpd_u64_f64((double)v115 / (double)v197.u32[0]);
                        if (v118 <= 1) {
                          LODWORD(v118) = 1;
                        }
                        unsigned int v148 = vcvtpd_u64_f64((double)v117 / (double)v197.u32[2]);
                        unsigned int v145 = vcvtpd_u64_f64((double)v118 / (double)v198);
                        int v143 = v111;
                        unint64_t v177 = v113;
                        if (v145)
                        {
                          int v146 = 0;
                          __int16 v147 = v197.i16[4];
                          long long v119 = &v141[v111];
                          int v171 = 2 * ((unint64_t)v140 < v113);
                          __int32 v173 = v197.i32[0];
                          if (v197.i32[0] >= v115) {
                            uint64_t v120 = v115;
                          }
                          else {
                            uint64_t v120 = v197.u32[0];
                          }
                          if (v197.i32[2] >= v117) {
                            unsigned __int16 v121 = v117;
                          }
                          else {
                            unsigned __int16 v121 = v197.u16[4];
                          }
                          __int16 v144 = v198;
                          if (v198 < v118) {
                            LOWORD(v118) = v198;
                          }
                          unsigned __int16 v168 = v121;
                          __int16 v165 = v118;
                          uint64_t v160 = (unsigned __int16)v118;
                          uint64_t v162 = v121;
                          long long v122 = 0uLL;
                          do
                          {
                            if (v148)
                            {
                              int v123 = 0;
                              do
                              {
                                int v149 = v123;
                                if (v4)
                                {
                                  long long v124 = 0;
                                  int v125 = v123 * v4;
                                  __int16 v126 = v123 * v147;
                                  do
                                  {
                                    if (v119[v125 + v124])
                                    {
                                      long long v193 = v122;
                                      long long v194 = v122;
                                      long long v191 = v122;
                                      long long v192 = v122;
                                      long long v189 = v122;
                                      long long v190 = v122;
                                      long long v187 = v122;
                                      long long v188 = v122;
                                      v186[0] = v122;
                                      v186[1] = v122;
                                      v195.i64[0] = v120;
                                      v195.i64[1] = v162;
                                      uint64_t v196 = v160;
                                      MTLTextureInfo(v104, (uint64_t)v156, v195.i64, (uint64_t)v155, (uint64_t)v186);
                                      uint64_t v127 = *(void *)&v186[0];
                                      unsigned int v128 = (48 * LODWORD(v186[0]) + 279) & 0xFFFFFF00;
                                      for (uint64_t i = (uint64_t *)&v187; v127; --v127)
                                      {
                                        uint64_t v130 = *i;
                                        i += 4;
                                        v128 += v130;
                                      }
                                      unsigned int v112 = v112 & 0xFFFFFFFD | v171;
                                      int32x2_t v131 = vmovn_s64(*(int64x2_t *)((char *)v186 + 8));
                                      uint64_t v132 = (char *)apr_array_push(arr);
                                      *(void *)uint64_t v132 = v154;
                                      *((void *)v132 + 1) = v153;
                                      *((void *)v132 + 3) = 0;
                                      *((void *)v132 + 4) = 0;
                                      *((void *)v132 + 2) = v152;
                                      *((_DWORD *)v132 + 1mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v151;
                                      *((_WORD *)v132 + 22) = 0;
                                      v132[46] = v150;
                                      v132[47] = v112;
                                      *((_WORD *)v132 + 24) = v158;
                                      *((_WORD *)v132 + 25) = v177;
                                      *((_DWORD *)v132 + 13) = v124 * v173;
                                      *((_WORD *)v132 + 28) = v126;
                                      *((_WORD *)v132 + 29) = v146 * v144;
                                      *((_DWORD *)v132 + 15) = v120;
                                      *((_WORD *)v132 + 32) = v168;
                                      *((_WORD *)v132 + 33) = v165;
                                      *(int32x2_t *)(v132 + 68) = v131;
                                      *((_DWORD *)v132 + 19) = v128;
                                      *((void *)v132 + 1mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0;
                                      long long v122 = 0uLL;
                                    }
                                    long long v124 = (char *)v124 + 1;
                                  }
                                  while (v124 != v4);
                                }
                                int v123 = v149 + 1;
                              }
                              while (v149 + 1 != v148);
                            }
                            ++v146;
                          }
                          while (v146 != v145);
                        }
                        int v111 = v148 * v4 * v145 + v143;
                        unint64_t v113 = v177 + 1;
                        id v54 = v142;
                      }
                      while (v177 + 1 < (unint64_t)[v142 mipmapLevelCount]);
                    }
                    ++v158;
                    id v4 = v137;
                    uint64_t v3 = v138;
                  }
                  while (v158 < (unint64_t)[v54 arrayLength]);
                }

                uint64_t v2 = v136;
                long long v63 = v134;
LABEL_120:
              }
              else if (CanHarvestTextureAsIOSurfaceUsingCPU(v41))
              {
                id v54 = (id)*v6;
                if ([v54 conformsToProtocol:&OBJC_PROTOCOL___MTLTexture])
                {
                  id v54 = v54;
                  size_t PlaneCount = IOSurfaceGetPlaneCount((IOSurfaceRef)[v54 iosurface]);
                  uint64_t v56 = 0;
                  uint64_t v57 = 0;
                  if (PlaneCount <= 1) {
                    uint64_t v58 = 1;
                  }
                  else {
                    uint64_t v58 = PlaneCount;
                  }
                  do
                  {
                    v56 += IOSurfaceGetSizeOfPlane();
                    ++v57;
                  }
                  while (v58 != v57);
                  id v59 = (char *)apr_array_push(arr);
                  id v60 = (id)*v6;
                  int v61 = *(_DWORD *)(v5 + 88 * v3 + 40);
                  long long v179 = *(_OWORD *)(v6 + 1);
                  id v62 = [v54 iosurfacePlane];
                  *(void *)id v59 = v60;
                  *(_OWORD *)(v59 + 8) = v179;
                  *((void *)v59 + 3) = 0;
                  *((void *)v59 + 4) = 0;
                  *((_DWORD *)v59 + 1mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v61;
                  *((_DWORD *)v59 + 11) = 5636096;
                  long long v63 = v54;
                  *((void *)v59 + 6) = v56;
                  *((void *)v59 + 7) = v62;
                  uint64_t v2 = v136;
                  goto LABEL_120;
                }
              }
              else
              {
                id v54 = v41;
                id v64 = (char *)[v54 mipmapLevelCount];
                id v65 = [v54 arrayLength];
                BOOL IsCube = MTLTextureIsCube(v54);
                uint64_t v67 = 6;
                if (!IsCube) {
                  uint64_t v67 = 1;
                }
                id v164 = v64;
                if (v64)
                {
                  long long v68 = 0;
                  uint64_t v176 = v67 * (void)v65;
                  uint64_t v69 = v5 + 88 * v3;
                  unsigned __int8 v167 = (_DWORD *)(v69 + 40);
                  id v170 = (void *)(v69 + 16);
                  do
                  {
                    if ((unint64_t)[v54 width] >> (char)v68) {
                      unint64_t v70 = (unint64_t)[v54 width] >> (char)v68;
                    }
                    else {
                      unint64_t v70 = 1;
                    }
                    if ((unint64_t)[v54 height] >> (char)v68) {
                      unint64_t v71 = (unint64_t)[v54 height] >> (char)v68;
                    }
                    else {
                      unint64_t v71 = 1;
                    }
                    if ((unint64_t)[v54 depth] >> (char)v68) {
                      unint64_t v72 = (unint64_t)[v54 depth] >> (char)v68;
                    }
                    else {
                      unint64_t v72 = 1;
                    }
                    if (v176)
                    {
                      for (uint64_t j = 0; j != v176; ++j)
                      {
                        uint64_t v74 = (char *)apr_array_push(arr);
                        id v75 = v54;
                        id v76 = v54;
                        uint64_t v77 = [v76 device];
                        id v78 = [v76 pixelFormat];
                        id v79 = [v76 sampleCount];
                        long long v193 = 0u;
                        long long v194 = 0u;
                        long long v191 = 0u;
                        long long v192 = 0u;
                        long long v189 = 0u;
                        long long v190 = 0u;
                        long long v187 = 0u;
                        long long v188 = 0u;
                        memset(v186, 0, sizeof(v186));
                        v197.i64[0] = v70;
                        v197.i64[1] = v71;
                        unint64_t v198 = v72;
                        MTLTextureInfo(v77, (uint64_t)v78, v197.i64, (uint64_t)v79, (uint64_t)v186);
                        uint64_t v80 = *(void *)&v186[0];
                        unsigned int v81 = (48 * LODWORD(v186[0]) + 279) & 0xFFFFFF00;
                        if (*(void *)&v186[0])
                        {
                          int8x8_t v82 = (int *)&v187;
                          do
                          {
                            int v83 = *v82;
                            v82 += 8;
                            v81 += v83;
                            --v80;
                          }
                          while (v80);
                        }
                        int32x2_t v84 = vmovn_s64(*(int64x2_t *)((char *)v186 + 8));

                        *((_OWORD *)v74 + 1) = 0u;
                        *((_OWORD *)v74 + 2) = 0u;
                        *(_OWORD *)uint64_t v74 = 0u;
                        *((_WORD *)v74 + 24) = j;
                        *((_WORD *)v74 + 25) = (_WORD)v68;
                        *(void *)(v74 + 52) = 0;
                        *((_DWORD *)v74 + 15) = v70;
                        *((_WORD *)v74 + 32) = v71;
                        *((_WORD *)v74 + 33) = v72;
                        *(int32x2_t *)(v74 + 68) = v84;
                        *((_DWORD *)v74 + 19) = v81;
                        *((void *)v74 + 1mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0;
                        v74[46] = *v178;
                        *(_OWORD *)uint64_t v74 = *(_OWORD *)v172;
                        *((void *)v74 + 2) = *v170;
                        *((_DWORD *)v74 + 1mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *v167;
                        id v54 = v75;
                      }
                    }
                    ++v68;
                    id v4 = v137;
                    uint64_t v3 = v138;
                  }
                  while (v68 != v164);
                  uint64_t v2 = v136;
                }
              }

              goto LABEL_21;
            }
            if (v11 == 83)
            {
              id v23 = (id)*v6;
              uint64_t v24 = *v7;
              uint64_t v25 = v5 + 88 * v3;
              uint64_t v26 = *(void *)(v25 + 16);
              int v27 = *(_DWORD *)(v25 + 40);
              id v17 = (id)*v6;
              id v28 = [v17 functionArray];
              id v29 = [v28 count];

              id v30 = (char *)apr_array_push(arr);
              *(void *)id v30 = v23;
              *((void *)v30 + 1) = v24;
              *((void *)v30 + 3) = 0;
              *((void *)v30 + 4) = 0;
              *((void *)v30 + 2) = v26;
              *((_DWORD *)v30 + 1mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v27;
              uint64_t v2 = v136;
              id v4 = v137;
              uint64_t v3 = v138;
              *((_DWORD *)v30 + 11) = 5439488;
              *((void *)v30 + 6) = v29;
              *(_OWORD *)(v30 + 56) = 0u;
              *(_OWORD *)(v30 + 72) = 0u;
              goto LABEL_20;
            }
          }
          else
          {
            if (v11 == 57)
            {
              id v31 = (id)*v6;
              int64x2_t v197 = 0uLL;
              unint64_t v198 = 0;
              id v17 = v31;
              id v32 = DEVICEOBJECT(v17);
              MakeGTMTLIndirectCommandBufferDescriptorFromIndirectCommandBuffer((uint64_t)&v197, v32);

              GTMTLCreateIndirectCommandEncoder((uint64_t)v186, (uint64_t)&v197);
              id v33 = (int64x2_t *)apr_array_push(arr);
              uint64_t v34 = v5 + 88 * v3;
              uint64_t v35 = *(void *)(v34 + 16);
              LODWORD(v34) = *(_DWORD *)(v34 + 40);
              unsigned __int8 v36 = *v178;
              int64x2_t v37 = *(int64x2_t *)v6;
              int64x2_t v195 = v197;
              uint64_t v196 = v198;
              *id v33 = v37;
              v33[1].i64[1] = 0;
              v33[2].i64[0] = 0;
              v33[1].i64[0] = v35;
              v33[2].i32[2] = v34;
              v33[2].i16[6] = 0;
              v33[2].i16[7] = v36;
              v33[3] = v195;
              v33[4].i64[0] = v196;
              goto LABEL_20;
            }
            if (v11 == 60)
            {
              id v12 = (id)*v6;
              uint64_t v13 = *v7;
              uint64_t v14 = v5 + 88 * v3;
              uint64_t v15 = *(void *)(v14 + 16);
              int v16 = *(_DWORD *)(v14 + 40);
              id v17 = (id)*v6;
              uint64_t v18 = [v17 functionArray];
              id v19 = [v18 count];

              uint64_t v20 = apr_array_push(arr);
              *uint64_t v20 = v12;
              v20[1] = v13;
              v20[3] = 0;
              void v20[4] = 0;
              _OWORD v20[2] = v15;
              *((_DWORD *)v20 + 1mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v16;
              uint64_t v2 = v136;
              id v4 = v137;
              uint64_t v3 = v138;
              *((_DWORD *)v20 + 11) = 3932160;
              v20[6] = v19;
              v20[7] = 31;
              v20[9] = 0;
              v20[10] = 0;
              v20[8] = 0;
LABEL_20:
            }
          }
        }
      }
LABEL_21:
      ++v3;
    }
    while (v3 < *(int *)(v2 + 12));
  }
  return arr;
}

void ProcessDeviceBuffer(apr_array_header_t *a1, uint64_t a2, void *a3)
{
  id v34 = a3;
  vm_size_t v5 = (vm_size_t)[v34 length];
  if ((qword_2501C8 & 0x1000) == 0)
  {
    id v6 = apr_array_push(a1);
    v6[46] = *(unsigned char *)(a2 + 46);
    *(_OWORD *)id v6 = *(_OWORD *)a2;
    *((void *)v6 + 2) = *(void *)(a2 + 16);
    id v7 = (_DWORD *)(a2 + 40);
LABEL_17:
    *((_DWORD *)v6 + 1mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *v7;
    *((void *)v6 + 6) = 0;
    *((void *)v6 + 7) = v5;
    goto LABEL_18;
  }
  Streauint64_t m = GTTraceContext_getStream(g_ctx, *(void *)(a2 + 8));
  uint64_t v9 = Stream;
  id v7 = (_DWORD *)(a2 + 40);
  if (*(_DWORD *)(a2 + 40))
  {
    if (!Stream) {
      goto LABEL_18;
    }
    char v10 = atomic_load((unint64_t *)(Stream + 56));
    if ((v10 & 8) == 0) {
      goto LABEL_18;
    }
  }
  else if (!Stream)
  {
    goto LABEL_11;
  }
  unint64_t v11 = atomic_load((unint64_t *)(Stream + 56));
  unint64_t v12 = v11;
  do
  {
    atomic_compare_exchange_strong((atomic_ullong *volatile)(Stream + 56), &v12, v11 & 0xFFFFFFFFFFFFFFF7);
    BOOL v16 = v12 == v11;
    unint64_t v11 = v12;
  }
  while (!v16);
LABEL_11:
  tempAlloc();
  uint64_t v14 = v13;
  uint64_t v15 = GTMemoryGuard_copyTracedChunks(v13, v9);
  CaptureMTLBuffer_registerBaseBufferForTracing(v34, v9, 1);
  if (*v7) {
    BOOL v16 = v15 == 0;
  }
  else {
    BOOL v16 = 1;
  }
  if (v16)
  {
    id v6 = apr_array_push(a1);
    v6[46] = *(unsigned char *)(a2 + 46);
    *(_OWORD *)id v6 = *(_OWORD *)a2;
    *((void *)v6 + 2) = *(void *)(a2 + 16);
    goto LABEL_17;
  }
  if (!__CFADD__(v5 - 1, vm_page_size))
  {
    unint64_t v17 = 0;
    unint64_t v18 = v15 << 6;
    unint64_t v19 = v15 - 1;
    vm_size_t v20 = (v5 - 1 + vm_page_size) / vm_page_size;
    do
    {
      size_t v21 = *v14;
      unint64_t v22 = v17 >> 6;
      unint64_t v23 = *((void *)*v14 + (v17 >> 6)) & (-1 << v17);
      BOOL v24 = v23 == 0;
      if (v17 >> 6 < v19 && !v23)
      {
        do
        {
          unint64_t v23 = v21[++v22];
          BOOL v24 = v23 == 0;
        }
        while (v22 < v19 && !v23);
      }
      unint64_t v17 = v18;
      vm_size_t v25 = v18;
      if (!v24)
      {
        unint64_t v26 = __clz(__rbit64(v23));
        uint64_t v27 = v23 | ~(-1 << v26);
        BOOL v28 = v27 == -1;
        unint64_t v29 = v22;
        if (v22 < v19 && v27 == -1)
        {
          id v30 = v21 + 1;
          unint64_t v29 = v22;
          do
          {
            uint64_t v27 = v30[v29++];
            BOOL v28 = v27 == -1;
          }
          while (v29 < v19 && v27 == -1);
        }
        vm_size_t v25 = v26 | (v22 << 6);
        if (v28) {
          unint64_t v17 = v18;
        }
        else {
          unint64_t v17 = __clz(__rbit64(~v27)) + (v29 << 6);
        }
      }
      if (v25 >= v20) {
        break;
      }
      unsigned int v31 = vm_page_size * v25;
      int v32 = vm_page_size * v17 >= v5 ? v5 : (int)vm_page_size * (int)v17;
      id v33 = apr_array_push(a1);
      v33[46] = *(unsigned char *)(a2 + 46);
      *(_OWORD *)id v33 = *(_OWORD *)a2;
      *((void *)v33 + 2) = *(void *)(a2 + 16);
      *((_DWORD *)v33 + 1mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *(_DWORD *)(a2 + 40);
      *((void *)v33 + 6) = v31;
      *((void *)v33 + 7) = v32 - v31;
    }
    while (v17 < v20);
  }
LABEL_18:
}

uint64_t MTLIndirectCommandBuffer_descriptor(uint64_t a1)
{
  long long v4 = 0u;
  uint64_t v5 = 0;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v7 = 0u;
  LODWORD(v4) = 57;
  uint64_t v6 = -1;
  WORD1(v11) = 2;
  long long v9 = 0xFFFFFFFFFFFFFFFFLL;
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1 && (*(unsigned char *)(v1 + 79) & 8) != 0) {
    uint64_t v2 = v1 + 64;
  }
  else {
    uint64_t v2 = 0;
  }
  GTMTLSMIndirectCommandBuffer_processTraceFuncWithPool((char *)&v4, *(void *)(a1 + 24), v2);
  return *((void *)&v11 + 1);
}

char *AllocateSnapshotMemory(uint64_t a1, uint64_t a2, int a3)
{
  long long v11 = 0u;
  memset(v10, 0, sizeof(v10));
  GTMTLCreateIndirectCommandEncoder((uint64_t)v10, a2);
  uint64_t v5 = (DWORD2(v11) * a3);
  uint64_t v6 = *(void *)(*(void *)(a1 + 8) + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 42);
  *(unsigned char *)(a1 + 42) = v8 + 1;

  return GTTraceMemPool_allocateBytes(v6, v7, v8 | (v5 << 32) | 0x100);
}

char *AllocateRangeSnapshotMemory(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 24);
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 42);
  *(unsigned char *)(a1 + 42) = v3 + 1;
  return GTTraceMemPool_allocateBytes(v1, v2, v3 | 0x1000000100);
}

void *UnwrapArray(void *a1, void **a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = a3;
    uint64_t v6 = a1;
    do
    {
      uint64_t v7 = *a2++;
      *v6++ = [v7 baseObject];
      --v4;
    }
    while (v4);
  }
  return a1;
}

uint64_t StreamArray(uint64_t a1, void *__src, id *a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v8 = __src;
    uint64_t v9 = a4;
    do
    {
      long long v10 = (uint64_t *)[*a3 traceStream];
      if (v10) {
        uint64_t v11 = *v10;
      }
      else {
        uint64_t v11 = 0;
      }
      *v8++ = v11;
      ++a3;
      --v9;
    }
    while (v9);
  }

  return GTTraceEncoder_storeBytes(a1, __src, 8 * a4);
}

uint64_t StreamArrayURL(uint64_t a1, void *a2, id *a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v8 = a2;
    uint64_t v9 = a4;
    do
    {
      long long v10 = (uint64_t *)[*a3 traceStream];
      if (v10) {
        uint64_t v11 = *v10;
      }
      else {
        uint64_t v11 = 0;
      }
      *v8++ = v11;
      ++a3;
      --v9;
    }
    while (v9);
  }

  return GTTraceEncoder_storeBlob(a1, a2, 8 * a4);
}

uint64_t StreamNSArray(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = [v5 count];
  if (v6)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = [v5 objectAtIndexedSubscript:v7];
      uint64_t v9 = (uint64_t *)[v8 traceStream];
      if (v9) {
        uint64_t v10 = *v9;
      }
      else {
        uint64_t v10 = 0;
      }
      a2[(void)v7] = v10;

      uint64_t v7 = (char *)v7 + 1;
    }
    while (v6 != v7);
  }
  uint64_t v11 = GTTraceEncoder_storeBytes(a1, a2, 8 * (void)v6);

  return v11;
}

uint64_t StreamMTLNameArray(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 count];
  size_t v5 = 8 * (void)v4 + 8;
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (unint64_t *)((char *)&v16 - v7);
  bzero((char *)&v16 - v7, v5);
  id v9 = [v3 count];
  unint64_t *v8 = (unint64_t)v9;
  if (v9)
  {
    unint64_t v10 = 0;
    do
    {
      uint64_t v11 = [v3 objectAtIndexedSubscript:v10];
      long long v12 = (uint64_t *)[v11 traceStream];
      if (v12) {
        uint64_t v13 = *v12;
      }
      else {
        uint64_t v13 = 0;
      }
      v8[v10 + 1] = v13;

      ++v10;
    }
    while (v10 < *v8);
  }
  uint64_t v14 = GTTraceEncoder_storeBytes(a1, v8, v5);

  return v14;
}

void RetainArray(void *a1, id *a2, uint64_t a3)
{
  for (id i = a1; a3; --a3)
  {
    if (*a2)
    {
      objc_msgSend(i, "addObject:");
      [*a2 touch];
    }
    ++a2;
  }
}

void RetainNSArray(void *a1, void *a2)
{
  id v8 = a1;
  id v3 = a2;
  if ([v3 count])
  {
    unint64_t v4 = 0;
    do
    {
      size_t v5 = [v3 objectAtIndexedSubscript:v4];

      if (v5)
      {
        uint64_t v6 = [v3 objectAtIndexedSubscript:v4];
        [v8 addObject:v6];

        uint64_t v7 = [v3 objectAtIndexedSubscript:v4];
        [v7 touch];
      }
      ++v4;
    }
    while ((unint64_t)[v3 count] > v4);
  }
}

id unwrapNSArray(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", [v1 count]);
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    id v4 = v2;
    id v5 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v13;
      do
      {
        for (id i = 0; i != v6; id i = (char *)i + 1)
        {
          if (*(void *)v13 != v7) {
            objc_enumerationMutation(v4);
          }
          id v9 = objc_msgSend(*(id *)(*((void *)&v12 + 1) + 8 * i), "baseObject", (void)v12);
          [v3 addObject:v9];
        }
        id v6 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
      }
      while (v6);
    }

    id v10 = [v3 copy];
  }
  else
  {
    id v10 = 0;
  }

  return v10;
}

id deviceNSArray(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", [v1 count]);
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    id v4 = v2;
    id v5 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v13;
      do
      {
        for (id i = 0; i != v6; id i = (char *)i + 1)
        {
          if (*(void *)v13 != v7) {
            objc_enumerationMutation(v4);
          }
          id v9 = DEVICEOBJECT(*(id *)(*((void *)&v12 + 1) + 8 * i));
          objc_msgSend(v3, "addObject:", v9, (void)v12);
        }
        id v6 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
      }
      while (v6);
    }

    id v10 = [v3 copy];
  }
  else
  {
    id v10 = 0;
  }

  return v10;
}

id unwrapMTLLinkedFunctions(void *a1)
{
  id v1 = a1;
  id v2 = [v1 copy];
  id v3 = [v1 functions];
  id v4 = unwrapNSArray(v3);
  [v2 setFunctions:v4];

  id v5 = [v1 binaryFunctions];
  id v6 = unwrapNSArray(v5);
  [v2 setBinaryFunctions:v6];

  if (objc_opt_respondsToSelector())
  {
    uint64_t v7 = [v1 privateFunctions];
    id v8 = unwrapNSArray(v7);
    [v2 setPrivateFunctions:v8];
  }
  id v9 = [v1 groups];

  if (v9)
  {
    size_t v21 = v2;
    id v10 = objc_opt_new();
    long long v22 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    uint64_t v11 = [v1 groups];
    id v12 = [v11 countByEnumeratingWithState:&v22 objects:v26 count:16];
    if (v12)
    {
      id v13 = v12;
      uint64_t v14 = *(void *)v23;
      do
      {
        for (id i = 0; i != v13; id i = (char *)i + 1)
        {
          if (*(void *)v23 != v14) {
            objc_enumerationMutation(v11);
          }
          uint64_t v16 = *(void *)(*((void *)&v22 + 1) + 8 * i);
          unint64_t v17 = [v1 groups];
          unint64_t v18 = [v17 objectForKeyedSubscript:v16];
          unint64_t v19 = unwrapNSArray(v18);
          [v10 setObject:v19 forKey:v16];
        }
        id v13 = [v11 countByEnumeratingWithState:&v22 objects:v26 count:16];
      }
      while (v13);
    }

    id v2 = v21;
    [v21 setGroups:v10];
  }

  return v2;
}

id deviceMTLLinkedFunctions(void *a1)
{
  id v1 = a1;
  id v2 = [v1 copy];
  id v3 = [v1 functions];
  id v4 = deviceNSArray(v3);
  [v2 setFunctions:v4];

  id v5 = [v1 binaryFunctions];
  id v6 = deviceNSArray(v5);
  [v2 setBinaryFunctions:v6];

  if (objc_opt_respondsToSelector())
  {
    uint64_t v7 = [v1 privateFunctions];
    id v8 = deviceNSArray(v7);
    [v2 setPrivateFunctions:v8];
  }
  id v9 = [v1 groups];

  if (v9)
  {
    size_t v21 = v2;
    id v10 = objc_opt_new();
    long long v22 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    uint64_t v11 = [v1 groups];
    id v12 = [v11 countByEnumeratingWithState:&v22 objects:v26 count:16];
    if (v12)
    {
      id v13 = v12;
      uint64_t v14 = *(void *)v23;
      do
      {
        for (id i = 0; i != v13; id i = (char *)i + 1)
        {
          if (*(void *)v23 != v14) {
            objc_enumerationMutation(v11);
          }
          uint64_t v16 = *(void *)(*((void *)&v22 + 1) + 8 * i);
          unint64_t v17 = [v1 groups];
          unint64_t v18 = [v17 objectForKeyedSubscript:v16];
          unint64_t v19 = deviceNSArray(v18);
          [v10 setObject:v19 forKey:v16];
        }
        id v13 = [v11 countByEnumeratingWithState:&v22 objects:v26 count:16];
      }
      while (v13);
    }

    id v2 = v21;
    [v21 setGroups:v10];
  }

  return v2;
}

id unwrapMTLComputePipelineDescriptor(void *a1)
{
  id v1 = a1;
  id v2 = [v1 copy];
  id v3 = [v1 computeFunction];
  id v4 = [v3 baseObject];
  [v2 setComputeFunction:v4];

  if (objc_opt_respondsToSelector())
  {
    id v5 = [v1 pipelineLibrary];
    id v6 = [v5 baseObject];
    [v2 setPipelineLibrary:v6];
  }
  if (objc_opt_respondsToSelector())
  {
    uint64_t v7 = [v1 functionPointers];
    id v8 = unwrapNSArray(v7);
    [v2 setFunctionPointers:v8];
  }
  if (objc_opt_respondsToSelector())
  {
    id v9 = [v1 preloadedLibraries];
    id v10 = unwrapNSArray(v9);
    [v2 setPreloadedLibraries:v10];
  }
  if (objc_opt_respondsToSelector())
  {
    uint64_t v11 = [v1 binaryArchives];
    id v12 = unwrapNSArray(v11);
    [v2 setBinaryArchives:v12];
  }
  if (objc_opt_respondsToSelector())
  {
    id v13 = [v1 linkedFunctions];
    uint64_t v14 = unwrapMTLLinkedFunctions(v13);
    [v2 setLinkedFunctions:v14];
  }

  return v2;
}

id deviceMTLComputePipelineDescriptor(void *a1)
{
  id v1 = a1;
  id v2 = [v1 copy];
  id v3 = [v1 computeFunction];
  id v4 = DEVICEOBJECT(v3);
  [v2 setComputeFunction:v4];

  if (objc_opt_respondsToSelector())
  {
    id v5 = [v1 pipelineLibrary];
    id v6 = DEVICEOBJECT(v5);
    [v2 setPipelineLibrary:v6];
  }
  if (objc_opt_respondsToSelector())
  {
    uint64_t v7 = [v1 functionPointers];
    id v8 = deviceNSArray(v7);
    [v2 setFunctionPointers:v8];
  }
  if (objc_opt_respondsToSelector())
  {
    id v9 = [v1 preloadedLibraries];
    id v10 = deviceNSArray(v9);
    [v2 setPreloadedLibraries:v10];
  }
  if (objc_opt_respondsToSelector())
  {
    uint64_t v11 = [v1 binaryArchives];
    id v12 = deviceNSArray(v11);
    [v2 setBinaryArchives:v12];
  }
  if (objc_opt_respondsToSelector())
  {
    id v13 = [v1 linkedFunctions];
    uint64_t v14 = deviceMTLLinkedFunctions(v13);
    [v2 setLinkedFunctions:v14];
  }

  return v2;
}

id deviceMTLComputePipelineDescriptorWithoutResourceIndex(void *a1)
{
  id v1 = deviceMTLComputePipelineDescriptor(a1);
  [v1 setForceResourceIndex:0];
  [v1 setResourceIndex:_MTLInvalidResourceIndex];

  return v1;
}

id unwrapMTLRenderPipelineDescriptor(void *a1)
{
  id v1 = a1;
  id v2 = [v1 copy];
  id v3 = [v1 vertexFunction];
  id v4 = [v3 baseObject];
  [v2 setVertexFunction:v4];

  id v5 = [v1 fragmentFunction];
  id v6 = [v5 baseObject];
  [v2 setFragmentFunction:v6];

  if (objc_opt_respondsToSelector())
  {
    uint64_t v7 = [v1 objectFunction];
    id v8 = [v7 baseObject];
    [v2 setObjectFunction:v8];
  }
  if (objc_opt_respondsToSelector())
  {
    id v9 = [v1 meshFunction];
    id v10 = [v9 baseObject];
    [v2 setMeshFunction:v10];
  }
  if (objc_opt_respondsToSelector())
  {
    uint64_t v11 = [v1 pipelineLibrary];
    id v12 = [v11 baseObject];
    [v2 setPipelineLibrary:v12];
  }
  if (objc_opt_respondsToSelector())
  {
    id v13 = [v1 vertexPreloadedLibraries];
    uint64_t v14 = unwrapNSArray(v13);
    [v2 setVertexPreloadedLibraries:v14];
  }
  if (objc_opt_respondsToSelector())
  {
    long long v15 = [v1 fragmentPreloadedLibraries];
    uint64_t v16 = unwrapNSArray(v15);
    [v2 setFragmentPreloadedLibraries:v16];
  }
  if (objc_opt_respondsToSelector())
  {
    unint64_t v17 = [v1 objectPreloadedLibraries];
    unint64_t v18 = unwrapNSArray(v17);
    [v2 setObjectPreloadedLibraries:v18];
  }
  if (objc_opt_respondsToSelector())
  {
    unint64_t v19 = [v1 meshPreloadedLibraries];
    vm_size_t v20 = unwrapNSArray(v19);
    [v2 setMeshPreloadedLibraries:v20];
  }
  if (objc_opt_respondsToSelector())
  {
    size_t v21 = [v1 vertexLinkedFunctions];
    long long v22 = unwrapMTLLinkedFunctions(v21);
    [v2 setVertexLinkedFunctions:v22];
  }
  if (objc_opt_respondsToSelector())
  {
    long long v23 = [v1 fragmentLinkedFunctions];
    long long v24 = unwrapMTLLinkedFunctions(v23);
    [v2 setFragmentLinkedFunctions:v24];
  }
  if (objc_opt_respondsToSelector())
  {
    long long v25 = [v1 objectLinkedFunctions];
    unint64_t v26 = unwrapMTLLinkedFunctions(v25);
    [v2 setObjectLinkedFunctions:v26];
  }
  if (objc_opt_respondsToSelector())
  {
    uint64_t v27 = [v1 meshLinkedFunctions];
    BOOL v28 = unwrapMTLLinkedFunctions(v27);
    [v2 setMeshLinkedFunctions:v28];
  }
  if (objc_opt_respondsToSelector())
  {
    unint64_t v29 = [v1 binaryArchives];
    id v30 = unwrapNSArray(v29);
    [v2 setBinaryArchives:v30];
  }

  return v2;
}

id deviceMTLRenderPipelineDescriptor(void *a1)
{
  id v1 = a1;
  id v2 = [v1 copy];
  id v3 = [v1 vertexFunction];
  id v4 = DEVICEOBJECT(v3);
  [v2 setVertexFunction:v4];

  id v5 = [v1 fragmentFunction];
  id v6 = DEVICEOBJECT(v5);
  [v2 setFragmentFunction:v6];

  if (objc_opt_respondsToSelector())
  {
    uint64_t v7 = [v1 objectFunction];
    id v8 = DEVICEOBJECT(v7);
    [v2 setObjectFunction:v8];
  }
  if (objc_opt_respondsToSelector())
  {
    id v9 = [v1 meshFunction];
    id v10 = DEVICEOBJECT(v9);
    [v2 setMeshFunction:v10];
  }
  if (objc_opt_respondsToSelector())
  {
    uint64_t v11 = [v1 pipelineLibrary];
    id v12 = DEVICEOBJECT(v11);
    [v2 setPipelineLibrary:v12];
  }
  if (objc_opt_respondsToSelector())
  {
    id v13 = [v1 vertexPreloadedLibraries];
    uint64_t v14 = deviceNSArray(v13);
    [v2 setVertexPreloadedLibraries:v14];
  }
  if (objc_opt_respondsToSelector())
  {
    long long v15 = [v1 fragmentPreloadedLibraries];
    uint64_t v16 = deviceNSArray(v15);
    [v2 setFragmentPreloadedLibraries:v16];
  }
  if (objc_opt_respondsToSelector())
  {
    unint64_t v17 = [v1 objectPreloadedLibraries];
    unint64_t v18 = deviceNSArray(v17);
    [v2 setObjectPreloadedLibraries:v18];
  }
  if (objc_opt_respondsToSelector())
  {
    unint64_t v19 = [v1 meshPreloadedLibraries];
    vm_size_t v20 = deviceNSArray(v19);
    [v2 setMeshPreloadedLibraries:v20];
  }
  if (objc_opt_respondsToSelector())
  {
    size_t v21 = [v1 vertexLinkedFunctions];
    long long v22 = deviceMTLLinkedFunctions(v21);
    [v2 setVertexLinkedFunctions:v22];
  }
  if (objc_opt_respondsToSelector())
  {
    long long v23 = [v1 fragmentLinkedFunctions];
    long long v24 = deviceMTLLinkedFunctions(v23);
    [v2 setFragmentLinkedFunctions:v24];
  }
  if (objc_opt_respondsToSelector())
  {
    long long v25 = [v1 objectLinkedFunctions];
    unint64_t v26 = deviceMTLLinkedFunctions(v25);
    [v2 setObjectLinkedFunctions:v26];
  }
  if (objc_opt_respondsToSelector())
  {
    uint64_t v27 = [v1 meshLinkedFunctions];
    BOOL v28 = deviceMTLLinkedFunctions(v27);
    [v2 setMeshLinkedFunctions:v28];
  }
  if (objc_opt_respondsToSelector())
  {
    unint64_t v29 = [v1 binaryArchives];
    id v30 = deviceNSArray(v29);
    [v2 setBinaryArchives:v30];
  }

  return v2;
}

id deviceMTLRenderPipelineDescriptorWithoutResourceIndex(void *a1)
{
  id v1 = deviceMTLRenderPipelineDescriptor(a1);
  [v1 setForceResourceIndex:0];
  [v1 setResourceIndex:_MTLInvalidResourceIndex];

  return v1;
}

id unwrapMTLCommandQueueDescriptor(void *a1)
{
  id v1 = a1;
  id v2 = [v1 copy];
  id v3 = v1;
  if (v2)
  {
    if (objc_opt_respondsToSelector())
    {
      id v4 = [v1 logState];
      id v5 = [v4 baseObject];
      [v2 setLogState:v5];
    }
    [v2 setEnableLowLatencyWaitSharedEvent:0];
    [v2 setEnableLowLatencySignalSharedEvent:0];
    id v3 = v2;
  }
  id v6 = v3;

  return v6;
}

id unwrapMTLCommandBufferDescriptor(void *a1)
{
  id v1 = a1;
  id v2 = [v1 copy];
  if (objc_opt_respondsToSelector())
  {
    id v3 = [v1 logState];
    id v4 = [v3 baseObject];
    [v2 setLogState:v4];
  }
  if (objc_opt_respondsToSelector())
  {
    id v5 = [v1 deadlineProfile];
    id v6 = [v5 baseObject];
    [v2 setDeadlineProfile:v6];
  }

  return v2;
}

id unwrapMTLRenderPassDescriptor_(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = [v3 copy];
  id v6 = [v3 visibilityResultBuffer];
  uint64_t v7 = [v6 baseObject];
  [v5 setVisibilityResultBuffer:v7];

  id v8 = [v3 visibilityResultBuffer];
  [v8 touch];

  id v9 = [v3 visibilityResultBuffer];

  if (v4 && v9)
  {
    id v10 = [v3 visibilityResultBuffer];
    [v4 addObject:v10];
  }
  id v11 = *(id *)[v3 _descriptorPrivate];
  for (uint64_t i = 0; i != 8; ++i)
  {
    id v13 = [v11 _descriptorAtIndex:i];
    uint64_t v14 = v13;
    if (v13)
    {
      long long v15 = [v13 texture];
      uint64_t v16 = [v15 baseObject];
      unint64_t v17 = [v5 colorAttachments];
      unint64_t v18 = [v17 objectAtIndexedSubscript:i];
      [v18 setTexture:v16];

      unint64_t v19 = [v14 resolveTexture];
      vm_size_t v20 = [v19 baseObject];
      size_t v21 = [v5 colorAttachments];
      long long v22 = [v21 objectAtIndexedSubscript:i];
      [v22 setResolveTexture:v20];

      long long v23 = [v14 texture];
      [v23 touch];

      long long v24 = [v14 texture];

      if (v4 && v24)
      {
        long long v25 = [v14 texture];
        [v4 addObject:v25];
      }
      unint64_t v26 = [v14 resolveTexture];
      [v26 touch];

      uint64_t v27 = [v14 resolveTexture];

      if (v4 && v27)
      {
        BOOL v28 = [v14 resolveTexture];
        [v4 addObject:v28];
      }
    }
  }
  unint64_t v29 = [v11 _descriptorAtIndex:8];
  id v30 = v29;
  if (v29)
  {
    unsigned int v31 = [v29 texture];
    int v32 = [v31 baseObject];
    id v33 = [v5 depthAttachment];
    [v33 setTexture:v32];

    id v34 = [v30 resolveTexture];
    uint64_t v35 = [v34 baseObject];
    unsigned __int8 v36 = [v5 depthAttachment];
    [v36 setResolveTexture:v35];

    int64x2_t v37 = [v30 texture];
    [v37 touch];

    id v38 = [v30 texture];

    if (v4 && v38)
    {
      uint64_t v39 = [v30 texture];
      [v4 addObject:v39];
    }
    id v40 = [v30 resolveTexture];
    [v40 touch];

    uint64_t v41 = [v30 resolveTexture];

    if (v4 && v41)
    {
      id v42 = [v30 resolveTexture];
      [v4 addObject:v42];
    }
  }
  uint64_t v43 = [v11 _descriptorAtIndex:9];

  if (v43)
  {
    id v44 = [v43 texture];
    id v45 = [v44 baseObject];
    unsigned int v46 = [v5 stencilAttachment];
    [v46 setTexture:v45];

    int v47 = [v43 resolveTexture];
    id v48 = [v47 baseObject];
    char v49 = [v5 stencilAttachment];
    [v49 setResolveTexture:v48];

    long long v50 = [v43 texture];
    [v50 touch];

    id v51 = [v43 texture];

    if (v4 && v51)
    {
      id v52 = [v43 texture];
      [v4 addObject:v52];
    }
    id v53 = [v43 resolveTexture];
    [v53 touch];

    id v54 = [v43 resolveTexture];

    if (v4 && v54)
    {
      int v55 = [v43 resolveTexture];
      [v4 addObject:v55];
    }
  }

  if (objc_opt_respondsToSelector())
  {
    uint64_t v56 = [v3 rasterizationRateMap];
    uint64_t v57 = [v56 baseObject];
    [v5 setRasterizationRateMap:v57];

    uint64_t v58 = [v3 rasterizationRateMap];
    [v58 touch];

    id v59 = [v3 rasterizationRateMap];

    if (v4)
    {
      if (v59)
      {
        id v60 = [v3 rasterizationRateMap];
        [v4 addObject:v60];
      }
    }
  }
  int v61 = [v3 sampleBufferAttachments];
  for (uint64_t j = 0; j != 4; ++j)
  {
    long long v63 = [v61 _descriptorAtIndex:j];
    id v64 = v63;
    if (v63)
    {
      id v65 = [v63 sampleBuffer];
      id v66 = [v65 baseObject];
      uint64_t v67 = [v5 sampleBufferAttachments];
      long long v68 = [v67 objectAtIndexedSubscript:j];
      [v68 setSampleBuffer:v66];

      uint64_t v69 = [v64 sampleBuffer];
      [v69 touch];

      unint64_t v70 = [v64 sampleBuffer];

      if (v4)
      {
        if (v70)
        {
          unint64_t v71 = [v64 sampleBuffer];
          [v4 addObject:v71];
        }
      }
    }
  }

  return v5;
}

id unwrapMTLBlitPassDescriptor_(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = [v3 copy];
  uint64_t v6 = 0;
  uint64_t v7 = *(void **)[v3 _descriptorPrivate];
  do
  {
    id v8 = [v7 _descriptorAtIndex:v6];
    id v9 = v8;
    if (v8)
    {
      id v10 = [v8 sampleBuffer];
      id v11 = [v10 baseObject];
      id v12 = [v5 sampleBufferAttachments];
      id v13 = [v12 objectAtIndexedSubscript:v6];
      [v13 setSampleBuffer:v11];

      uint64_t v14 = [v9 sampleBuffer];
      [v14 touch];

      long long v15 = [v9 sampleBuffer];

      if (v4)
      {
        if (v15)
        {
          uint64_t v16 = [v9 sampleBuffer];
          [v4 addObject:v16];
        }
      }
    }

    ++v6;
  }
  while (v6 != 4);

  return v5;
}

id unwrapMTLComputePassDescriptor_(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = [v3 copy];
  uint64_t v6 = 0;
  uint64_t v7 = (void *)*((void *)[v3 _descriptorPrivate] + 1);
  do
  {
    id v8 = [v7 _descriptorAtIndex:v6];
    id v9 = v8;
    if (v8)
    {
      id v10 = [v8 sampleBuffer];
      id v11 = [v10 baseObject];
      id v12 = [v5 sampleBufferAttachments];
      id v13 = [v12 objectAtIndexedSubscript:v6];
      [v13 setSampleBuffer:v11];

      uint64_t v14 = [v9 sampleBuffer];
      [v14 touch];

      long long v15 = [v9 sampleBuffer];

      if (v4)
      {
        if (v15)
        {
          uint64_t v16 = [v9 sampleBuffer];
          [v4 addObject:v16];
        }
      }
    }

    ++v6;
  }
  while (v6 != 4);

  return v5;
}

id unwrapMTLResourceStatePassDescriptor_(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = [v3 copy];
  uint64_t v6 = 0;
  uint64_t v7 = *(void **)[v3 _descriptorPrivate];
  do
  {
    id v8 = [v7 _descriptorAtIndex:v6];
    id v9 = v8;
    if (v8)
    {
      id v10 = [v8 sampleBuffer];
      id v11 = [v10 baseObject];
      id v12 = [v5 sampleBufferAttachments];
      id v13 = [v12 objectAtIndexedSubscript:v6];
      [v13 setSampleBuffer:v11];

      uint64_t v14 = [v9 sampleBuffer];
      [v14 touch];

      long long v15 = [v9 sampleBuffer];

      if (v4)
      {
        if (v15)
        {
          uint64_t v16 = [v9 sampleBuffer];
          [v4 addObject:v16];
        }
      }
    }

    ++v6;
  }
  while (v6 != 4);

  return v5;
}

id unwrapMTLStitchedLibraryDescriptor(void *a1)
{
  id v1 = a1;
  id v2 = [v1 copy];
  id v3 = [v1 functions];
  id v4 = unwrapNSArray(v3);
  [v2 setFunctions:v4];

  if (objc_opt_respondsToSelector())
  {
    id v5 = [v1 binaryArchives];
    uint64_t v6 = unwrapNSArray(v5);
    [v2 setBinaryArchives:v6];
  }

  return v2;
}

id unwrapMTLStitchedLibraryDescriptorSPI(void *a1)
{
  id v1 = a1;
  id v2 = [v1 copy];
  id v3 = [v1 functions];
  id v4 = unwrapNSArray(v3);
  [v2 setFunctions:v4];

  if (objc_opt_respondsToSelector())
  {
    id v5 = [v1 binaryArchives];
    uint64_t v6 = unwrapNSArray(v5);
    [v2 setBinaryArchives:v6];
  }

  return v2;
}

id unwrapMTLAccelerationStructureDescriptor(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        id v3 = [v1 copy];
        uint64_t v80 = [v3 instanceDescriptorBuffer];
        unsigned int v81 = [v80 baseObject];
        [v3 setInstanceDescriptorBuffer:v81];

        int8x8_t v82 = [v3 instanceCountBuffer];
        int v83 = [v82 baseObject];
        [v3 setInstanceCountBuffer:v83];

        int32x2_t v84 = [v3 motionTransformBuffer];
        uint64_t v85 = [v84 baseObject];
        [v3 setMotionTransformBuffer:v85];

        unint64_t v86 = [v3 motionTransformCountBuffer];
        unint64_t v87 = [v86 baseObject];
        [v3 setMotionTransformCountBuffer:v87];
      }
      else
      {
        id v3 = v1;
      }
      goto LABEL_70;
    }
    id v89 = v1;
    id v3 = [v1 copy];
    id v11 = [v3 geometryDescriptors];
    id v12 = [v11 mutableCopy];

    id v13 = [v3 geometryDescriptors];
    id v14 = [v13 count];

    if (!v14)
    {
LABEL_68:
      [v3 setGeometryDescriptors:v12];

      id v1 = v89;
      goto LABEL_70;
    }
    unint64_t v15 = 0;
    id v90 = v12;
    id v91 = v3;
    while (1)
    {
      uint64_t v16 = [v3 geometryDescriptors];
      id v17 = [v16 objectAtIndexedSubscript:v15];
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        id v18 = [v17 copy];
        unint64_t v19 = [v18 vertexBuffer];
        vm_size_t v20 = [v19 baseObject];
        [v18 setVertexBuffer:v20];

        size_t v21 = [v18 indexBuffer];
        long long v22 = [v21 baseObject];
        [v18 setIndexBuffer:v22];

        if (objc_opt_respondsToSelector())
        {
          long long v23 = [v18 transformationMatrixBuffer];
          long long v24 = [v23 baseObject];
          [v18 setTransformationMatrixBuffer:v24];
          goto LABEL_13;
        }
        goto LABEL_14;
      }
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        id v18 = [v17 copy];
        long long v23 = [v18 boundingBoxBuffer];
        long long v24 = [v23 baseObject];
        [v18 setBoundingBoxBuffer:v24];
LABEL_13:

LABEL_14:
        if (objc_opt_respondsToSelector())
        {
          long long v25 = [v18 primitiveDataBuffer];
          unint64_t v26 = [v25 baseObject];
          [v18 setPrimitiveDataBuffer:v26];
        }
        goto LABEL_63;
      }
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        unint64_t v92 = v16;
        id v18 = [v17 copy];
        uint64_t v27 = [v18 indexBuffer];
        BOOL v28 = [v27 baseObject];
        [v18 setIndexBuffer:v28];

        long long v103 = 0u;
        long long v104 = 0u;
        long long v101 = 0u;
        long long v102 = 0u;
        unint64_t v29 = [v18 vertexBuffers];
        id v30 = [v29 countByEnumeratingWithState:&v101 objects:v105 count:16];
        if (v30)
        {
          id v31 = v30;
          uint64_t v32 = *(void *)v102;
          do
          {
            for (uint64_t i = 0; i != v31; uint64_t i = (char *)i + 1)
            {
              if (*(void *)v102 != v32) {
                objc_enumerationMutation(v29);
              }
              id v34 = *(void **)(*((void *)&v101 + 1) + 8 * i);
              uint64_t v35 = [v34 buffer];
              unsigned __int8 v36 = [v35 baseObject];
              [v34 setBuffer:v36];
            }
            id v31 = [v29 countByEnumeratingWithState:&v101 objects:v105 count:16];
          }
          while (v31);
        }

        if (objc_opt_respondsToSelector())
        {
          int64x2_t v37 = [v18 transformationMatrixBuffer];
          id v38 = [v37 baseObject];
          [v18 setTransformationMatrixBuffer:v38];
        }
        id v12 = v90;
        id v3 = v91;
        if (objc_opt_respondsToSelector())
        {
          uint64_t v39 = [v18 primitiveDataBuffer];
          id v40 = [v39 baseObject];
          [v18 setPrimitiveDataBuffer:v40];
        }
        goto LABEL_62;
      }
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        unint64_t v92 = v16;
        id v18 = [v17 copy];
        long long v101 = 0u;
        long long v102 = 0u;
        long long v103 = 0u;
        long long v104 = 0u;
        uint64_t v41 = [v18 boundingBoxBuffers];
        id v42 = [v41 countByEnumeratingWithState:&v101 objects:v105 count:16];
        if (v42)
        {
          id v43 = v42;
          uint64_t v44 = *(void *)v102;
          do
          {
            for (uint64_t j = 0; j != v43; uint64_t j = (char *)j + 1)
            {
              if (*(void *)v102 != v44) {
                objc_enumerationMutation(v41);
              }
              unsigned int v46 = *(void **)(*((void *)&v101 + 1) + 8 * (void)j);
              int v47 = [v46 buffer];
              id v48 = [v47 baseObject];
              [v46 setBuffer:v48];
            }
            id v43 = [v41 countByEnumeratingWithState:&v101 objects:v105 count:16];
          }
          while (v43);
        }

        if ((objc_opt_respondsToSelector() & 1) == 0) {
          goto LABEL_61;
        }
        char v49 = [v18 primitiveDataBuffer];
        long long v50 = [v49 baseObject];
        [v18 setPrimitiveDataBuffer:v50];
      }
      else
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          id v51 = v16;
          id v18 = [v17 copy];
          id v52 = [v18 controlPointBuffer];
          id v53 = [v52 baseObject];
          [v18 setControlPointBuffer:v53];

          id v54 = [v18 radiusBuffer];
          int v55 = [v54 baseObject];
          [v18 setRadiusBuffer:v55];

          uint64_t v56 = [v18 indexBuffer];
          uint64_t v57 = [v56 baseObject];
          [v18 setIndexBuffer:v57];

          if (objc_opt_respondsToSelector())
          {
            uint64_t v58 = [v18 primitiveDataBuffer];
            id v59 = [v58 baseObject];
            [v18 setPrimitiveDataBuffer:v59];
          }
          uint64_t v16 = v51;
          goto LABEL_63;
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          id v18 = v17;
          goto LABEL_63;
        }
        unint64_t v92 = v16;
        id v18 = [v17 copy];
        long long v97 = 0u;
        long long v98 = 0u;
        long long v99 = 0u;
        long long v100 = 0u;
        id v60 = [v18 controlPointBuffers];
        id v61 = [v60 countByEnumeratingWithState:&v97 objects:v105 count:16];
        if (v61)
        {
          id v62 = v61;
          uint64_t v63 = *(void *)v98;
          do
          {
            for (uint64_t k = 0; k != v62; uint64_t k = (char *)k + 1)
            {
              if (*(void *)v98 != v63) {
                objc_enumerationMutation(v60);
              }
              id v65 = *(void **)(*((void *)&v97 + 1) + 8 * (void)k);
              id v66 = [v65 buffer];
              uint64_t v67 = [v66 baseObject];
              [v65 setBuffer:v67];
            }
            id v62 = [v60 countByEnumeratingWithState:&v97 objects:v105 count:16];
          }
          while (v62);
        }

        long long v95 = 0u;
        long long v96 = 0u;
        long long v93 = 0u;
        long long v94 = 0u;
        long long v68 = [v18 radiusBuffers];
        id v69 = [v68 countByEnumeratingWithState:&v93 objects:&v101 count:16];
        if (v69)
        {
          id v70 = v69;
          uint64_t v71 = *(void *)v94;
          do
          {
            for (uint64_t m = 0; m != v70; uint64_t m = (char *)m + 1)
            {
              if (*(void *)v94 != v71) {
                objc_enumerationMutation(v68);
              }
              id v73 = *(void **)(*((void *)&v93 + 1) + 8 * (void)m);
              uint64_t v74 = [v73 buffer];
              id v75 = [v74 baseObject];
              [v73 setBuffer:v75];
            }
            id v70 = [v68 countByEnumeratingWithState:&v93 objects:&v101 count:16];
          }
          while (v70);
        }

        if (objc_opt_respondsToSelector())
        {
          id v76 = [v18 primitiveDataBuffer];
          uint64_t v77 = [v76 baseObject];
          [v18 setPrimitiveDataBuffer:v77];
        }
        char v49 = [v18 indexBuffer];
        long long v50 = [v49 baseObject];
        [v18 setIndexBuffer:v50];
      }

LABEL_61:
      id v12 = v90;
      id v3 = v91;
LABEL_62:
      uint64_t v16 = v92;
LABEL_63:

      [v12 setObject:v18 atIndexedSubscript:v15];
      ++v15;
      id v78 = [v3 geometryDescriptors];
      id v79 = [v78 count];

      if ((unint64_t)v79 <= v15) {
        goto LABEL_68;
      }
    }
  }
  id v2 = v1;
  id v3 = [v2 copy];
  id v4 = [v2 instancedAccelerationStructures];

  if (!v4) {
    [v3 setInstancedAccelerationStructures:0];
  }
  id v5 = [v3 instanceDescriptorBuffer];
  uint64_t v6 = [v5 baseObject];
  [v3 setInstanceDescriptorBuffer:v6];

  uint64_t v7 = [v3 instancedAccelerationStructures];
  id v8 = unwrapNSArray(v7);
  [v3 setInstancedAccelerationStructures:v8];

  id v9 = [v3 motionTransformBuffer];
  id v10 = [v9 baseObject];
  [v3 setMotionTransformBuffer:v10];

LABEL_70:

  return v3;
}

id unwrapMTLFunctionDescriptor(void *a1)
{
  id v1 = a1;
  id v2 = [v1 copy];
  if (objc_opt_respondsToSelector())
  {
    id v3 = [v1 binaryArchives];
    id v4 = unwrapNSArray(v3);
    [v2 setBinaryArchives:v4];
  }
  if (objc_opt_respondsToSelector())
  {
    id v5 = [v1 privateFunctions];
    uint64_t v6 = unwrapNSArray(v5);
    [v2 setPrivateFunctions:v6];
  }

  return v2;
}

id unwrapMTLVisibleFunctionTableDescriptor(void *a1)
{
  id v1 = [a1 copy];

  return v1;
}

id unwrapMTLIntersectionFunctionTableDescriptor(void *a1)
{
  id v1 = [a1 copy];

  return v1;
}

id unwrapMTLTileRenderPipelineDescriptor(void *a1)
{
  id v1 = a1;
  id v2 = [v1 copy];
  id v3 = [v1 tileFunction];
  id v4 = [v3 baseObject];
  [v2 setTileFunction:v4];

  if (objc_opt_respondsToSelector())
  {
    id v5 = [v1 preloadedLibraries];
    uint64_t v6 = unwrapNSArray(v5);
    [v2 setPreloadedLibraries:v6];
  }
  if (objc_opt_respondsToSelector())
  {
    uint64_t v7 = [v1 linkedFunctions];
    id v8 = unwrapMTLLinkedFunctions(v7);
    [v2 setLinkedFunctions:v8];
  }
  if (objc_opt_respondsToSelector())
  {
    id v9 = [v1 binaryArchives];
    id v10 = unwrapNSArray(v9);
    [v2 setBinaryArchives:v10];
  }

  return v2;
}

id deviceMTLTileRenderPipelineDescriptor(void *a1)
{
  id v1 = a1;
  id v2 = [v1 copy];
  id v3 = [v1 tileFunction];
  id v4 = DEVICEOBJECT(v3);
  [v2 setTileFunction:v4];

  if (objc_opt_respondsToSelector())
  {
    id v5 = [v1 preloadedLibraries];
    uint64_t v6 = deviceNSArray(v5);
    [v2 setPreloadedLibraries:v6];
  }
  if (objc_opt_respondsToSelector())
  {
    uint64_t v7 = [v1 linkedFunctions];
    id v8 = deviceMTLLinkedFunctions(v7);
    [v2 setLinkedFunctions:v8];
  }
  if (objc_opt_respondsToSelector())
  {
    id v9 = [v1 binaryArchives];
    id v10 = deviceNSArray(v9);
    [v2 setBinaryArchives:v10];
  }

  return v2;
}

id unwrapMTLCompileOptions(void *a1)
{
  id v1 = a1;
  id v2 = [v1 copy];
  id v3 = [v1 libraries];
  id v4 = [v3 count];

  if (v4)
  {
    id v5 = objc_alloc((Class)NSMutableArray);
    uint64_t v6 = [v1 libraries];
    id v7 = objc_msgSend(v5, "initWithCapacity:", objc_msgSend(v6, "count"));

    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    id v8 = objc_msgSend(v1, "libraries", 0);
    id v9 = [v8 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v16;
      do
      {
        for (uint64_t i = 0; i != v10; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v16 != v11) {
            objc_enumerationMutation(v8);
          }
          id v13 = [*(id *)(*((void *)&v15 + 1) + 8 * i) baseObject];
          [v7 addObject:v13];
        }
        id v10 = [v8 countByEnumeratingWithState:&v15 objects:v19 count:16];
      }
      while (v10);
    }

    [v2 setLibraries:v7];
  }

  return v2;
}

id unwrapMTLRenderPipelineFunctionsDescriptor(void *a1)
{
  id v1 = a1;
  id v2 = [v1 copy];
  id v3 = [v1 vertexAdditionalBinaryFunctions];
  id v4 = unwrapNSArray(v3);
  [v2 setVertexAdditionalBinaryFunctions:v4];

  id v5 = [v1 fragmentAdditionalBinaryFunctions];
  uint64_t v6 = unwrapNSArray(v5);
  [v2 setFragmentAdditionalBinaryFunctions:v6];

  id v7 = [v1 tileAdditionalBinaryFunctions];
  id v8 = unwrapNSArray(v7);
  [v2 setTileAdditionalBinaryFunctions:v8];

  id v9 = [v1 objectAdditionalBinaryFunctions];
  id v10 = unwrapNSArray(v9);
  [v2 setObjectAdditionalBinaryFunctions:v10];

  uint64_t v11 = [v1 meshAdditionalBinaryFunctions];

  id v12 = unwrapNSArray(v11);
  [v2 setMeshAdditionalBinaryFunctions:v12];

  return v2;
}

id deviceMTLMeshRenderPipelineDescriptor(void *a1)
{
  id v1 = a1;
  id v2 = [v1 copy];
  id v3 = [v1 objectFunction];
  id v4 = DEVICEOBJECT(v3);
  [v2 setObjectFunction:v4];

  id v5 = [v1 meshFunction];
  uint64_t v6 = DEVICEOBJECT(v5);
  [v2 setMeshFunction:v6];

  id v7 = [v1 fragmentFunction];
  id v8 = DEVICEOBJECT(v7);
  [v2 setFragmentFunction:v8];

  id v9 = [v1 binaryArchives];

  id v10 = deviceNSArray(v9);
  [v2 setBinaryArchives:v10];

  uint64_t v11 = [v2 objectLinkedFunctions];
  id v12 = deviceMTLLinkedFunctions(v11);
  [v2 setObjectLinkedFunctions:v12];

  id v13 = [v2 meshLinkedFunctions];
  id v14 = deviceMTLLinkedFunctions(v13);
  [v2 setMeshLinkedFunctions:v14];

  long long v15 = [v2 fragmentLinkedFunctions];
  long long v16 = deviceMTLLinkedFunctions(v15);
  [v2 setFragmentLinkedFunctions:v16];

  return v2;
}

id unwrapMTLMeshRenderPipelineDescriptor(void *a1)
{
  id v1 = a1;
  id v2 = [v1 copy];
  id v3 = [v1 objectFunction];
  id v4 = [v3 baseObject];
  [v2 setObjectFunction:v4];

  id v5 = [v1 meshFunction];
  uint64_t v6 = [v5 baseObject];
  [v2 setMeshFunction:v6];

  id v7 = [v1 fragmentFunction];
  id v8 = [v7 baseObject];
  [v2 setFragmentFunction:v8];

  id v9 = [v1 binaryArchives];

  id v10 = unwrapNSArray(v9);
  [v2 setBinaryArchives:v10];

  uint64_t v11 = [v2 objectLinkedFunctions];
  id v12 = unwrapMTLLinkedFunctions(v11);
  [v2 setObjectLinkedFunctions:v12];

  id v13 = [v2 meshLinkedFunctions];
  id v14 = unwrapMTLLinkedFunctions(v13);
  [v2 setMeshLinkedFunctions:v14];

  long long v15 = [v2 fragmentLinkedFunctions];
  long long v16 = unwrapMTLLinkedFunctions(v15);
  [v2 setFragmentLinkedFunctions:v16];

  return v2;
}

id deviceMTLMeshRenderPipelineDescriptorWithoutResourceIndex(void *a1)
{
  id v1 = deviceMTLMeshRenderPipelineDescriptor(a1);
  [v1 setForceResourceIndex:0];
  [v1 setResourceIndex:_MTLInvalidResourceIndex];

  return v1;
}

id unwrapMTLAccelerationStructurePassDescriptor_(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = [v3 copy];
  uint64_t v6 = [v3 sampleBufferAttachments];
  for (uint64_t i = 0; i != 4; ++i)
  {
    id v8 = [v6 objectAtIndexedSubscript:i];
    id v9 = v8;
    if (v8)
    {
      id v10 = [v8 sampleBuffer];
      uint64_t v11 = [v10 baseObject];
      id v12 = [v5 sampleBufferAttachments];
      id v13 = [v12 objectAtIndexedSubscript:i];
      [v13 setSampleBuffer:v11];

      id v14 = [v9 sampleBuffer];
      [v14 touch];

      long long v15 = [v9 sampleBuffer];

      if (v4)
      {
        if (v15)
        {
          long long v16 = [v9 sampleBuffer];
          [v4 addObject:v16];
        }
      }
    }
  }

  return v5;
}

id unwrapMTLGenericBVHBuffersSPI(void *a1)
{
  id v1 = [a1 copy];
  id v2 = [v1 headerBuffer];
  id v3 = [v2 baseObject];
  [v1 setHeaderBuffer:v3];

  id v4 = [v1 innerNodeBuffer];
  id v5 = [v4 baseObject];
  [v1 setInnerNodeBuffer:v5];

  uint64_t v6 = [v1 leafNodeBuffer];
  id v7 = [v6 baseObject];
  [v1 setLeafNodeBuffer:v7];

  id v8 = [v1 primitiveBuffer];
  id v9 = [v8 baseObject];
  [v1 setPrimitiveBuffer:v9];

  id v10 = [v1 geometryBuffer];
  uint64_t v11 = [v10 baseObject];
  [v1 setGeometryBuffer:v11];

  id v12 = [v1 instanceTransformBuffer];
  id v13 = [v12 baseObject];
  [v1 setInstanceTransformBuffer:v13];

  id v14 = [v1 perPrimitiveDataBuffer];
  long long v15 = [v14 baseObject];
  [v1 setPerPrimitiveDataBuffer:v15];

  return v1;
}

void CaptureMTLDeviceStoreMetadata(uint64_t a1, void *a2)
{
  if (a2)
  {
    id v3 = a2;
    id v4 = (uint64_t *)[v3 traceStream];
    if (v4) {
      uint64_t v5 = *v4;
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t v6 = DEVICEOBJECT(v3);

    long long v16 = 0u;
    long long v17 = 0u;
    long long v15 = 0u;
    GTTraceContext_pushEncoderWithStream(a1, (uint64_t)&v15);
    uint64_t v7 = v16;
    *(_DWORD *)(v16 + 8) = -10239;
    char v8 = BYTE9(v17);
    if (BYTE9(v17) > 0x30uLL)
    {
      uint64_t v10 = *(void *)(*((void *)&v15 + 1) + 24);
      uint64_t v11 = BYTE10(v17);
      ++BYTE10(v17);
      id v9 = GTTraceMemPool_allocateBytes(v10, *((uint64_t *)&v16 + 1), v11 | 0x1000000000) + 16;
      char v8 = v11;
    }
    else
    {
      id v9 = (char *)(v7 + BYTE9(v17));
      BYTE9(v17) += 16;
    }
    *(unsigned char *)(v7 + 13) = v8;
    char v12 = SaveMTLDeviceDescriptor((uint64_t)&v15, v6);
    *(void *)id v9 = v5;
    v9[8] = v12;
    *(_DWORD *)(v9 + 9) = 0;
    *((_DWORD *)v9 + 3) = 0;
    s();
    *(void *)uint64_t v13 = v14;
    *(unsigned char *)(v13 + 8) = BYTE8(v17);
    *(unsigned char *)(v16 + 15) |= 8u;
  }
}

uint64_t CaptureRespondsToSelector(uint64_t a1, const char *a2)
{
  char v3 = objc_opt_respondsToSelector();
  if ((v3 & 1) == 0
    && (sel_getUid("baseObject") == a2
     || sel_getUid("streamReference") == a2
     || sel_getUid("traceStream") == a2
     || sel_getUid("traceContext") == a2
     || sel_getUid("touch") == a2))
  {
    char v3 = 1;
  }
  return v3 & 1;
}

uint64_t CaptureConformsToProtocol(void *a1, void *a2)
{
  char v3 = a2;
  unsigned int v4 = [a1 conformsToProtocol:v3];

  if (&OBJC_PROTOCOL___CaptureMTLObject == v3) {
    return 1;
  }
  else {
    return v4;
  }
}

uint64_t CaptureFindFuncSnapshot(void *a1, uint64_t a2)
{
  id v5 = [a1 streamReference];
  entry = find_entry(a2, &v5, 8uLL, 0);
  if (*entry) {
    return *(void *)(*entry + 32);
  }
  else {
    return 0;
  }
}

void *CaptureCreateFuncSnapshot(void *a1, apr_hash_t *a2, apr_pool_t *a3)
{
  id v5 = [a1 streamReference];
  uint64_t v6 = apr_palloc(a3, 0x18uLL);
  void *v6 = v5;
  apr_hash_set(a2, v6, 8, v6);
  return v6;
}

void CaptureRemoveFuncSnapshot(void *a1, apr_hash_t *a2)
{
  id key = [a1 streamReference];
  entry = find_entry((uint64_t)a2, &key, 8uLL, 0);
  if (*entry)
  {
    if (*(void *)(*entry + 32)) {
      apr_hash_set(a2, &key, 8, 0);
    }
  }
}

apr_hash_index_t *CaptureClearFuncSnapshot(apr_hash_index_t *result, uint64_t a2)
{
  if (result == (apr_hash_index_t *)((char *)&def_CFBEC + 1))
  {
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 16) = a2;
    *(_DWORD *)(a2 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0;
    id result = apr_hash_next((apr_hash_index_t *)(a2 + 16));
    if (result)
    {
      char v3 = result;
      do
      {
        apr_hash_set((apr_hash_t *)a2, *(const void **)(*((void *)v3 + 1) + 16), 8, 0);
        id result = apr_hash_next(v3);
        char v3 = result;
      }
      while (result);
    }
  }
  return result;
}

CaptureMTLDevice *DYMTLWrapDeviceWithDebugLayer(void *a1)
{
  id v1 = a1;
  if (CaptureInterposerInit_onceToken != -1) {
    dispatch_once(&CaptureInterposerInit_onceToken, &__block_literal_global_56);
  }
  if (DYMTLWrapDeviceWithDebugLayer_onceToken != -1) {
    dispatch_once(&DYMTLWrapDeviceWithDebugLayer_onceToken, &__block_literal_global_8254);
  }
  if (isDebugDevice && isShaderValDevice)
  {
    id v2 = WrapGPUDebugDevice(v1);
    char v3 = WrapDebugDevice(v2);
  }
  else
  {
    if (isDebugDevice)
    {
      uint64_t v4 = WrapDebugDevice(v1);
    }
    else
    {
      char v3 = v1;
      if (!isShaderValDevice) {
        goto LABEL_15;
      }
      uint64_t v4 = WrapGPUDebugDevice(v1);
    }
    char v3 = (void *)v4;
    id v2 = v1;
  }

  if (isShaderValDevice) {
    GTMTLCaptureManager_notifyUnsupportedFenumWithMsg(0, (uint64_t)"Metal Shader Validation", 0, (uint64_t)"To enable capturing, disable Metal Shader Validation and relaunch your application.");
  }
LABEL_15:
  id v5 = [CaptureMTLDevice alloc];
  uint64_t v6 = [(CaptureMTLDevice *)v5 initWithBaseObject:v3 captureContext:g_ctx];
  CaptureMTLDeviceStoreMetadata(g_ctx, v6);
  if ((qword_2501C8 & 0x40) != 0) {
    dispatch_semaphore_wait((dispatch_semaphore_t)qword_2500B0, 0xFFFFFFFFFFFFFFFFLL);
  }

  return v6;
}

id WrapGPUDebugDevice(void *a1)
{
  id v1 = a1;
  unsigned __int8 v2 = [v1 supportsFamily:1006];
  id v3 = v1;
  if ((v2 & 1) == 0 && (uint64_t v4 = NSClassFromString(@"MTLLegacySVDevice")) != 0
    || (uint64_t v4 = NSClassFromString(@"MTLGPUDebugDevice"), v5 = v3, v4))
  {
    id v5 = [[v4 alloc] initWithBaseObject:v3 parent:0];
  }

  return v5;
}

id WrapDebugDevice(void *a1)
{
  id v1 = a1;
  id v2 = [objc_alloc((Class)MTLDebugDevice) initWithBaseObject:v1 parent:0];

  return v2;
}

IMP CaptureMTLInit()
{
  id v0 = (objc_class *)objc_opt_class();
  ClassMethod = class_getClassMethod(v0, "sharedCaptureManager");
  IMP result = method_setImplementation(ClassMethod, (IMP)MTLCaptureManager_sharedCaptureManager);
  MTLCaptureManager_sharedCaptureManagerIMP = (uint64_t)result;
  return result;
}

id MTLCaptureManager_sharedCaptureManager()
{
  if (MTLCaptureManager_sharedCaptureManager_onceToken != -1) {
    dispatch_once(&MTLCaptureManager_sharedCaptureManager_onceToken, &__block_literal_global_115);
  }
  id v0 = (void *)MTLCaptureManager_sharedCaptureManager_sharedCaptureManager;

  return v0;
}

void MTLTextureInfo(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  id v9 = a1;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 8mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 128) = 0u;
  *(_OWORD *)(a5 + 144) = 0u;
  if ((unint64_t)(a2 - 250) <= 0xB && ((1 << (a2 + 6)) & 0xC0D) != 0)
  {
    *(void *)&long long v39 = 0;
    long long v37 = 0uLL;
    long long v38 = 0uLL;
    long long v36 = 0uLL;
    GTMTLPixelFormatGetInfoForDevice(a2, (uint64_t)&v36);
    LODWORD(v1mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = (DWORD2(v36) >> 3) & 4;
    if (a2 == 250) {
      uint64_t v10 = 2;
    }
    else {
      uint64_t v10 = v10;
    }
    int v11 = BYTE8(v36) & 0x40;
    unint64_t v12 = ((unint64_t)DWORD2(v36) >> 6) & 1;
    uint64_t v13 = a3[1];
    uint64_t v14 = *a3 * a4;
    uint64_t v15 = (v10 | v12) * v14;
    *(void *)(a5 + 8) = v15;
    *(void *)(a5 + 16) = v13 * (unint64_t)v15;
    if (v10)
    {
      uint64_t v16 = v14 * v10 * v13;
      *(void *)(a5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v14 * v10;
      *(void *)(a5 + 48) = v16;
      uint64_t v17 = a3[2] * v16;
      *(void *)(a5 + 56) = v12;
      *(void *)(a5 + 24) = v17;
      *(void *)(a5 + 32) = v17;
      uint64_t v18 = 1;
      *(void *)a5 = 1;
      if (!v11) {
        goto LABEL_17;
      }
      goto LABEL_12;
    }
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    if (v11)
    {
LABEL_12:
      BOOL v27 = v10 == 0;
      BOOL v28 = (void *)(a5 + 32 * v18);
      uint64_t v29 = v13 * v14;
      uint64_t v30 = a3[2] * v13 * v14;
      v28[4] = v30;
      v28[5] = v14;
      unsigned int v31 = !v27;
      v28[6] = v29;
      v28[7] = 2 * v31;
      *(void *)(a5 + 24) = v17 + v30;
      uint64_t v26 = v18 + 1;
      goto LABEL_16;
    }
  }
  else
  {
    if ((unint64_t)(a2 - 550) < 2)
    {
      uint64_t v19 = *a3;
      uint64_t v20 = a3[1];
      uint64_t v21 = 4 * *a3;
      *(void *)(a5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v21;
      *(void *)(a5 + 48) = v20 * v21;
      uint64_t v22 = a3[2];
      uint64_t v23 = v22 * v20 * v21;
      uint64_t v24 = v20 * v19;
      *(void *)(a5 + 72) = v19;
      *(void *)(a5 + 8mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v24;
      uint64_t v25 = v22 * v24;
      *(void *)(a5 + 64) = v25;
      *(void *)(a5 + 8) = 0;
      *(void *)(a5 + 16) = 0;
      *(void *)(a5 + 24) = v23 + v25;
      *(void *)(a5 + 32) = v23;
      uint64_t v26 = 2;
LABEL_16:
      *(void *)a5 = v26;
      goto LABEL_17;
    }
    uint64_t v46 = 0;
    long long v44 = 0uLL;
    long long v45 = 0uLL;
    long long v43 = 0uLL;
    GTMTLPixelFormatGetInfoForDevice(a2, (uint64_t)&v43);
    if ((WORD4(v43) & 0x400) != 0)
    {
      unint64_t v32 = ((uint64_t)v45 + *a3 - 1) / (unint64_t)v45 * *((void *)&v44 + 1);
      unint64_t v33 = (unint64_t)(*((void *)&v45 + 1) + a3[1] - 1) / *((void *)&v45 + 1) * v32;
      unint64_t v34 = a3[2] * v33;
      *(void *)(a5 + 56) = ((unint64_t)DWORD2(v43) >> 11) & 4;
      unint64_t v35 = v33;
    }
    else
    {
      uint64_t v42 = 0;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      GTMTLGetTextureLevelInfoForDeviceWithOptions(a2, a4, (uint64_t)&v36);
      unint64_t v32 = v41;
      unint64_t v33 = a3[1] * v41;
      unint64_t v34 = a3[2] * v33;
      unint64_t v35 = a3[1] * (void)v41;
    }
    *(void *)(a5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v32;
    *(void *)(a5 + 48) = v33;
    *(void *)(a5 + 24) = v34;
    *(void *)(a5 + 32) = v34;
    *(void *)(a5 + 8) = v32;
    *(void *)(a5 + 16) = v35;
    *(void *)a5 = 1;
  }
LABEL_17:
}

BOOL MTLTextureIsCube(void *a1)
{
  id v1 = a1;
  id v2 = (char *)[v1 textureType];
  id v3 = (char *)[v1 textureType];

  return v2 == (unsigned char *)&dword_4 + 1 || v3 == (unsigned char *)&dword_4 + 2;
}

int64x2_t MTLTextureMipmapSize@<Q0>(uint64x2_t *a1@<X0>, unint64_t a2@<X1>, int64x2_t *a3@<X8>)
{
  unint64_t v3 = (unint64_t)a1[1].i64[0] >> a2;
  if (v3 <= 1) {
    unint64_t v3 = 1;
  }
  int8x16_t v4 = (int8x16_t)vshlq_u64(*a1, (uint64x2_t)vnegq_s64(vdupq_n_s64(a2)));
  int8x16_t v5 = (int8x16_t)vcgtq_u64((uint64x2_t)v4, (uint64x2_t)vdupq_n_s64(1uLL));
  int64x2_t result = vsubq_s64((int64x2_t)vandq_s8(v4, v5), (int64x2_t)vmvnq_s8(v5));
  *a3 = result;
  a3[1].i64[0] = v3;
  return result;
}

id GetSparseTextureMappingKernelFunction(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v20 = 0;
  memset(v19, 0, sizeof(v19));
  id v4 = a1;
  GTMTLPixelFormatGetInfoForDevice((uint64_t)[v4 pixelFormat], (uint64_t)v19);
  id v5 = [v4 textureType];

  int v6 = DWORD2(v19[0]);
  if ((unint64_t)v5 > 7)
  {
    char v8 = 0;
  }
  else
  {
    if ((BYTE8(v19[0]) & 0x20) != 0) {
      CFStringRef v7 = @"depth";
    }
    else {
      CFStringRef v7 = @"texture";
    }
    char v8 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", *((void *)&off_221FC8 + (void)v5), v7);
    int v6 = DWORD2(v19[0]);
  }
  CFStringRef v9 = @"uint";
  if ((v6 & 0x280000) == 0) {
    CFStringRef v9 = 0;
  }
  CFStringRef v10 = @"int";
  if ((v6 & 0x140000) == 0) {
    CFStringRef v10 = v9;
  }
  BOOL v11 = (v6 & 0x30000) == 0;
  unint64_t v12 = @"float";
  if (v11) {
    unint64_t v12 = (__CFString *)v10;
  }
  uint64_t v18 = 0;
  uint64_t v13 = v12;
  id v14 = objc_msgSend(v3, "newLibraryWithSource:options:error:", @"#include <metal_stdlib>\nusing namespace metal;\n\nstruct inputData\n{\n    uint3 textureSize;\n    uint3 tileSize;\n    uint3 textureSizeInTiles;\n\n    uint slice;\n    uint face;\n    uint mipmap;\n    uint maxTileNumber;\n};\ntemplate<typename T> uint3 createSampleCoord(T value) { return uint3(value.x,value.y,value.z); }\ntemplate<> uint3 createSampleCoord(uint value){ return uint3(value,0,0); }\ntemplate<> uint3 createSampleCoord(uint2 value) { return uint3(value.x,value.y,0); }\n\n#define KERNEL_COPY_MAPPING_STATE_READ(TEXTURE_TYPE, RETURN_TYPE, TEXTURE_DIM, GID_TYPE, ...) \\\nkernel void kernel_copy_mapping_state_read_##TEXTURE_TYPE##_##RETURN_TYPE(TEXTURE_TYPE<RETURN_TYPE, access::read> sparse [[texture(0)]],\\\n                                                                           device uint8_t* outputBuffer [[buffer(0)]],\\\n                                                                           constant inputData *metadata [[buffer(1)]],\\\n                                                                           GID_TYPE gid [[thread_position_in_grid]])\\\n{\\\n   uint3 tid = createSampleCoord(gid);\\\n   uint3 sampleLoc = tid * metadata->tileSize;\\\n   uint outputBufferLoc = tid.x + tid.y*(metadata->textureSizeInTiles.x) + tid.z*(metadata->textureSizeInTiles.x * metadata->textureSizeInTiles.y);\\\n   if (outputBufferLoc < metadata->maxTileNumber)\\\n   {\\\n       if (sparse.sparse_read(sampleLoc.TEXTURE_DIM,##__VA_ARGS__).resident())\\\n       {\\\n           outputBuffer[outputBufferLoc] = 1;\\\n       }\\\n   }\\\n}\\\n\n#define KERNEL_COPY_MAPPING(RETURN_TYPE) \\\nKERNEL_COPY_MAPPING_STATE_READ(texture2d,         RETURN_TYPE, xy, uint2, metadata->mipmap); \\\nKERNEL_COPY_MAPPING_STATE_READ(texture2d_array,   RETURN_TYPE, xy, uint2,metadata->slice,metadata->mipmap); \\\nKERNEL_COPY_MAPPING_STATE_READ(texture3d,         RETURN_TYPE, xyz, uint3,metadata->mipmap); \\\nKERNEL_COPY_MAPPING_STATE_READ(texturecube,       RETURN_TYPE, xy, uint2,metadata->face,metadata->mipmap); \\\nKERNEL_COPY_MAPPING_STATE_READ(texturecube_array, RETURN_TYPE, xy, uint2,metadata->face,metadata->slice,metadata->mipmap); \\\nKERNEL_COPY_MAPPING_STATE_READ(texture2d_ms,      RETURN_TYPE, xy, uint2,metadata->mipmap); \\\n\n#define KERNEL_COPY_MAPPING_DEPTH()\\\nKERNEL_COPY_MAPPING_STATE_READ(depth2d,         float, xy, uint2,metadata->mipmap); \\\nKERNEL_COPY_MAPPING_STATE_READ(depthcube,       float, xy, uint2,metadata->face,metadata->mipmap); \\\nKERNEL_COPY_MAPPING_STATE_READ(depthcube_array, float, xy, uint2,metadata->face,metadata->slice,metadata->mipmap); \\\nKERNEL_COPY_MAPPING_STATE_READ(depth2d_ms,      float, xy, uint2,metadata->mipmap); \\\nKERNEL_COPY_MAPPING_STATE_READ(depth2d_array,        float, xy, uint2,metadata->slice,metadata->mipmap); \\\n\n//Generate functions for all of the Metal texture data types.\nKERNEL_COPY_MAPPING(half)\nKERNEL_COPY_MAPPING(float)\nKERNEL_COPY_MAPPING(short)\nKERNEL_COPY_MAPPING(ushort)\nKERNEL_COPY_MAPPING(int)\nKERNEL_COPY_MAPPING(uint)\nKERNEL_COPY_MAPPING_DEPTH()\n",
          0,
          &v18);
  uint64_t v15 = +[NSString stringWithFormat:@"kernel_copy_mapping_state_read_%@_%@", v8, v13];

  id v16 = [v14 newFunctionWithName:v15];

  return v16;
}

id GetSparseTextureMappingBuffer(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = 0;
  if ([v3 arrayLength])
  {
    unint64_t v6 = 0;
    do
    {
      if ([v3 mipmapLevelCount])
      {
        unint64_t v7 = 0;
        do
        {
          unint64_t v8 = (unint64_t)[v3 width];
          if (v8 >> v7 <= 1) {
            LODWORD(v9) = 1;
          }
          else {
            unint64_t v9 = v8 >> v7;
          }
          unint64_t v10 = (unint64_t)[v3 height];
          if (v10 >> v7 <= 1) {
            LODWORD(v11) = 1;
          }
          else {
            unint64_t v11 = v10 >> v7;
          }
          unint64_t v12 = (unint64_t)[v3 depth];
          if (v12 >> v7 <= 1) {
            LODWORD(v13) = 1;
          }
          else {
            unint64_t v13 = v12 >> v7;
          }
          id v14 = [v3 textureType];
          id v15 = [v3 pixelFormat];
          id v16 = [v3 sampleCount];
          if (v4) {
            [v4 sparseTileSizeWithTextureType:v14 pixelFormat:v15 sampleCount:v16];
          }
          v5 += vcvtpd_u64_f64((double)v11 / (double)0)
              * vcvtpd_u64_f64((double)v9 / (double)0)
              * vcvtpd_u64_f64((double)v13 / (double)0);
          ++v7;
        }
        while (v7 < (unint64_t)[v3 mipmapLevelCount]);
      }
      ++v6;
    }
    while (v6 < (unint64_t)[v3 arrayLength]);
  }
  id v17 = [v4 newBufferWithLength:v5 options:0];

  return v17;
}

uint64_t _Xmach_exception_raise_state_identity(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0)
  {
LABEL_2:
    int v2 = -304;
    goto LABEL_3;
  }
  int v2 = -304;
  if (*(_DWORD *)(result + 24) == 2)
  {
    unsigned int v3 = *(_DWORD *)(result + 4);
    if (v3 >= 0x4C && v3 <= 0x149C)
    {
      if (*(unsigned __int16 *)(result + 38) << 16 != 1114112 || *(unsigned __int16 *)(result + 50) << 16 != 1114112)
      {
        int v2 = -300;
        goto LABEL_3;
      }
      unsigned int v5 = *(_DWORD *)(result + 64);
      if (v5 > 2) {
        goto LABEL_2;
      }
      int v2 = -304;
      if (v5 <= (v3 - 76) >> 3)
      {
        unsigned int v6 = 8 * v5;
        if (v3 >= 8 * v5 + 76)
        {
          unsigned int v7 = *(_DWORD *)(result + v6 + 72);
          if (v7 <= 0x510)
          {
            unsigned int v8 = v3 - v6;
            if (v7 <= (v8 - 76) >> 2 && v8 == 4 * v7 + 76)
            {
              *(_DWORD *)(a2 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 1296;
              int v2 = 46;
              goto LABEL_3;
            }
          }
          goto LABEL_2;
        }
      }
    }
  }
LABEL_3:
  *(_DWORD *)(a2 + 32) = v2;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

_DWORD *_Xmach_exception_raise_state(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0) {
    goto LABEL_17;
  }
  unsigned int v2 = result[1];
  BOOL v3 = v2 < 0x30 || v2 > 0x1480;
  if (v3) {
    goto LABEL_17;
  }
  unsigned int v4 = result[9];
  if (v4 > 2) {
    goto LABEL_17;
  }
  unsigned int v5 = 2 * v4;
  BOOL v6 = v4 <= (v2 - 48) >> 3 && v2 >= 8 * v4 + 48;
  if (v6
    && (unsigned int v7 = result[v5 + 11], v7 <= 0x510)
    && ((v8 = v2 - v5 * 4, BOOL v3 = v7 > (v8 - 48) >> 2, v9 = 4 * v7 + 48, !v3) ? (v10 = v8 == v9) : (v10 = 0), v10))
  {
    *(_DWORD *)(a2 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 1296;
    int v11 = 46;
  }
  else
  {
LABEL_17:
    int v11 = -304;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t _Xmach_exception_raise(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((*(_DWORD *)a1 & 0x80000000) != 0)
  {
    int v7 = *(_DWORD *)(a1 + 24);
    uint64_t result = 4294966992;
    if (v7 == 2)
    {
      unsigned int v8 = *(_DWORD *)(a1 + 4);
      if (v8 >= 0x44 && v8 <= 0x54)
      {
        if (*(unsigned __int16 *)(a1 + 38) << 16 == 1114112 && *(unsigned __int16 *)(a1 + 50) << 16 == 1114112)
        {
          unsigned int v9 = *(_DWORD *)(a1 + 64);
          if (v9 <= 2 && v9 <= (v8 - 68) >> 3 && v8 == 8 * v9 + 68) {
            uint64_t result = catch_mach_exception_raise(4294966992, a2, a3, a4, a1 + 68);
          }
        }
        else
        {
          uint64_t result = 4294966996;
        }
      }
    }
  }
  else
  {
    uint64_t result = 4294966992;
  }
  *(_DWORD *)(a2 + 32) = result;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t mach_exc_server_routine(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 20);
  if ((v1 - 2410) >= 0xFFFFFFFB) {
    return (uint64_t)*(&catch_mach_exc_subsystem + 5 * (v1 - 2405) + 5);
  }
  else {
    return 0;
  }
}

uint64_t mach_exc_server(_DWORD *a1, uint64_t a2)
{
  int v2 = a1[2];
  *(_DWORD *)a2 = *a1 & 0x1F;
  *(_DWORD *)(a2 + 4) = 36;
  int v3 = a1[5] + 100;
  *(_DWORD *)(a2 + 8) = v2;
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v3;
  int v4 = a1[5];
  if ((v4 - 2410) >= 0xFFFFFFFB
    && (unsigned int v5 = (void (*)(void))*(&catch_mach_exc_subsystem + 5 * (v4 - 2405) + 5)) != 0)
  {
    v5();
    return 1;
  }
  else
  {
    uint64_t result = 0;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 32) = -303;
  }
  return result;
}

double GTResourceTrackerBuildArgumentBuffers(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = __chkstk_darwin(a1, a2);
  int v4 = v3;
  unint64_t v6 = v5;
  unsigned int v8 = v7;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v13 = v2;
  p = 0;
  apr_pool_create_ex(&p, v3, 0, 0);
  uint64_t v64 = 0;
  memset(v63, 0, sizeof(v63));
  uint64_t v58 = v13;
  uint64_t v59 = v12;
  pool = 0;
  *(void *)&long long v61 = apr_array_make(v4, 128, 40);
  *((void *)&v61 + 1) = apr_array_make(v4, 32, 16);
  id v62 = apr_array_make(v4, 32, 8);
  id v14 = p;
  GTMTLSMContext_indirectCommandBufferResources(p, v8, v6, (uint64_t)v63);
  apr_pool_create_ex(&pool, v14, 0, 0);
  v66[0] = v10;
  uint64_t v15 = *(void *)(*(void *)(*find_entry(v13, v66, 8uLL, 0) + 32) + 32);
  unsigned int v16 = 0;
  if (v15)
  {
    while (1)
    {
      unsigned int v17 = atomic_load((unsigned int *)(v15 + 4));
      uint64_t v18 = v16 + (v17 >> 6) - 1;
      if ((int)v18 > 0) {
        break;
      }
      uint64_t v15 = *(void *)(v15 + 40);
      unsigned int v16 = v18;
      if (!v15)
      {
        unsigned int v16 = v18;
        goto LABEL_6;
      }
    }
  }
  uint64_t v18 = 0;
LABEL_6:
  unint64_t v19 = v16 | (unint64_t)(v18 << 32);
  uint64_t v55 = v12;
LABEL_7:
  uint64_t v20 = v15 + 64;
  while (v15 && (*(unsigned char *)(v20 + ((uint64_t)(HIDWORD(v19) - (int)v19) << 6) + 15) & 8) != 0)
  {
    uint64_t v21 = v20 + ((uint64_t)(HIDWORD(v19) - (int)v19) << 6);
    int FuncEnumConstructorType = GetFuncEnumConstructorType(*(_DWORD *)(v21 + 8));
    if (IsCommandEncoder(FuncEnumConstructorType))
    {
      bzero(&v56, 0x2B90uLL);
      GTMTLSMCommandEncoder_processTraceFunc((uint64_t)&v56, (uint64_t *)v21, v12);
      if (v56 <= 64)
      {
        if (v56 != 21 && v56 != 28) {
          goto LABEL_34;
        }
LABEL_17:
        uint64_t v23 = v57;
        uint64_t v24 = v61;
        uint64_t v25 = v62;
        uint64_t v26 = *(int *)(v61 + 12);
        BOOL v27 = apr_hash_make(v62->pool);
        *(void *)apr_array_push(v25) = v27;
        commandEncoder_processStream_((uint64_t)&v58, v23);
        BOOL v28 = pool;
        uint64_t v29 = FilterArgumentBufferAccess(v24, v26, *(int *)(v24 + 12) - v26, pool);
        apr_pool_clear(v28);
        *(_DWORD *)(v24 + 12) = v26 + v29;
        uint64_t v30 = apr_array_push(*((apr_array_header_t **)&v61 + 1));
        *uint64_t v30 = v26;
LABEL_33:
        v30[1] = v29;
        goto LABEL_34;
      }
      if (v56 == 65)
      {
        uint64_t v31 = v57;
        uint64_t v32 = v58;
        uint64_t v33 = *(int *)(v61 + 12);
        unint64_t v34 = v62;
        unint64_t v35 = apr_hash_make(v62->pool);
        *(void *)apr_array_push(v34) = v35;
        v66[0] = v31;
        uint64_t v36 = *(void *)(*(void *)(*find_entry(v32, v66, 8uLL, 0) + 32) + 32);
        unsigned int v37 = 0;
        if (v36)
        {
          while (1)
          {
            unsigned int v38 = atomic_load((unsigned int *)(v36 + 4));
            uint64_t v39 = v37 + (v38 >> 6) - 1;
            if ((int)v39 > 1) {
              break;
            }
            uint64_t v36 = *(void *)(v36 + 40);
            unsigned int v37 = v39;
            if (!v36)
            {
              unsigned int v37 = v39;
              goto LABEL_24;
            }
          }
          uint64_t v39 = 1;
        }
        else
        {
          uint64_t v39 = 0;
        }
LABEL_24:
        uint64_t v40 = 0;
        unint64_t v41 = v37 | (unint64_t)(v39 << 32);
LABEL_25:
        uint64_t v42 = v36 + 64;
        while (v36 && (*(unsigned char *)(v42 + ((uint64_t)(HIDWORD(v41) - (int)v41) << 6) + 15) & 8) != 0)
        {
          uint64_t v43 = v42 + ((uint64_t)(HIDWORD(v41) - (int)v41) << 6);
          int v44 = GetFuncEnumConstructorType(*(_DWORD *)(v43 + 8));
          if (IsCommandEncoder(v44))
          {
            bzero(v66, 0x2B90uLL);
            GTMTLSMCommandEncoder_processTraceFunc((uint64_t)v66, (uint64_t *)v43, v59);
            v40 += commandEncoder_processStream_((uint64_t)&v58, v66[1]);
          }
          unsigned int v45 = atomic_load((unsigned int *)(v36 + 4));
          int v46 = v41 + (v45 >> 6);
          uint64_t v47 = (HIDWORD(v41) + 1);
          unint64_t v41 = (v47 << 32) | v41;
          if (v47 == v46 - 1)
          {
            unint64_t v41 = (v47 << 32) | v47;
            uint64_t v36 = *(void *)(v36 + 40);
            goto LABEL_25;
          }
        }
        uint64_t v48 = v61;
        char v49 = pool;
        uint64_t v29 = FilterArgumentBufferAccess(v61, v33, *(int *)(v61 + 12) - v33, pool);
        apr_pool_clear(v49);
        *(_DWORD *)(v48 + 12) = v33 + v29;
        uint64_t v30 = apr_array_push(*((apr_array_header_t **)&v61 + 1));
        *uint64_t v30 = v33;
        uint64_t v12 = v55;
        goto LABEL_33;
      }
      if (v56 == 70) {
        goto LABEL_17;
      }
    }
LABEL_34:
    unsigned int v50 = atomic_load((unsigned int *)(v15 + 4));
    int v51 = v19 + (v50 >> 6);
    uint64_t v52 = (HIDWORD(v19) + 1);
    unint64_t v19 = (v52 << 32) | v19;
    if (v52 == v51 - 1)
    {
      unint64_t v19 = (v52 << 32) | v52;
      uint64_t v15 = *(void *)(v15 + 40);
      goto LABEL_7;
    }
  }
  apr_pool_destroy(p);
  id v53 = apr_palloc(v4, 0x18uLL);
  v53[2] = v62;
  double result = *(double *)&v61;
  *(_OWORD *)id v53 = v61;
  return result;
}

uint64_t commandEncoder_processStream_(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = __chkstk_darwin(a1, a2);
  uint64_t v67 = v3;
  uint64_t v4 = v2;
  uint64_t v69 = v5;
  bzero(__src, 0x2B90uLL);
  uint64_t v6 = *(void *)(*(void *)(*find_entry(*(void *)v4, &v69, 8uLL, 0) + 32) + 32);
  if (v6)
  {
    unsigned int v7 = 0;
    while (1)
    {
      unsigned int v8 = atomic_load((unsigned int *)(v6 + 4));
      uint64_t v9 = v7 + (v8 >> 6) - 1;
      if ((int)v9 > 0) {
        break;
      }
      uint64_t v6 = *(void *)(v6 + 40);
      unsigned int v7 = v9;
      if (!v6)
      {
        unsigned int v7 = v9;
        goto LABEL_8;
      }
    }
  }
  else
  {
    unsigned int v7 = 0;
  }
  uint64_t v9 = 0;
LABEL_8:
  uint64_t v10 = 0;
  unint64_t v11 = v7 | (unint64_t)(v9 << 32);
  uint64_t v66 = v4 + 48;
LABEL_9:
  uint64_t v12 = v6 + 64;
  while (v6)
  {
    int v13 = HIDWORD(v11) - v11;
    if ((*(unsigned char *)(v12 + ((uint64_t)(HIDWORD(v11) - (int)v11) << 6) + 15) & 8) == 0) {
      break;
    }
    uint64_t v14 = v13;
    uint64_t v15 = v12 + ((uint64_t)v13 << 6);
    GTMTLSMCommandEncoder_processTraceFunc((uint64_t)__src, (uint64_t *)v15, *(void *)(v4 + 8));
    uint64_t v16 = v10 + v67;
    int v17 = *(_DWORD *)(v15 + 8);
    if (v17 == -16377)
    {
      uint64_t v18 = GTTraceFunc_argumentBytesWithMap((void *)v15, *(unsigned __int8 *)(v15 + 13), *(void *)(v4 + 8));
      uint64_t v19 = *(void *)(v4 + 40);
      uint64_t v20 = *((void *)v18 + 3);
      *(void *)&v86[0] = *((void *)v18 + 1);
      *((void *)&v86[0] + 1) = v20;
      uint64_t v21 = *(apr_hash_t **)(*(void *)(v19 + 24) + 8 * *(int *)(v19 + 12) - 8);
      uint64_t v22 = v86;
      uint64_t v23 = &xmmword_1DA260;
LABEL_14:
      MTLHarvesterMarkMutableAncestors(v21, (uint64_t)v22, v23, v16);
      LODWORD(v24) = 1;
      goto LABEL_33;
    }
    if (IsFuncEnumDrawCall(*(_DWORD *)(v15 + 8)))
    {
      unsigned int v25 = Draw(v4, __src, v16);
LABEL_32:
      LODWORD(v24) = v25;
      goto LABEL_33;
    }
    if (v17 <= -16080)
    {
      if (v17 == -16327 || v17 == -16220)
      {
LABEL_31:
        unsigned int v25 = Dispatch(v4, (uint64_t)__src, v16);
        goto LABEL_32;
      }
      if (v17 == -16137)
      {
LABEL_24:
        uint64_t v27 = *(void *)v4;
        *(void *)&v86[0] = __src[1075];
        entry = find_entry(v27, v86, 8uLL, 0);
        if (*entry) {
          uint64_t v29 = *(void *)(*entry + 32);
        }
        else {
          uint64_t v29 = 0;
        }
        uint64_t v85 = 0;
        long long v83 = 0u;
        memset(v84, 0, sizeof(v84));
        long long v81 = 0u;
        long long v82 = 0u;
        long long v79 = 0u;
        long long v80 = 0u;
        long long v77 = 0u;
        long long v78 = 0u;
        long long v75 = 0u;
        long long v76 = 0u;
        long long v73 = 0u;
        long long v74 = 0u;
        long long v71 = 0u;
        long long v72 = 0u;
        long long v70 = 0u;
        GTMTLSMRenderPipelineState_resourceAccess(v29, *(void *)(v4 + 8), &v70);
        uint64_t v39 = *(void *)(v4 + 8);
        memset(v86, 0, 416);
        GTMTLRenderPipelineState_rootPipeline((uint64_t)v86, v29, v27, v39);
        uint64_t v40 = *(apr_hash_t **)(*(void *)(*(void *)(v4 + 40) + 24) + 8 * *(int *)(*(void *)(v4 + 40) + 12) - 8);
        ArgumentBufferAccess(*(apr_array_header_t **)(v4 + 24), (uint64_t)&__src[869], (uint64_t)&__src[900], (uint64_t)&__src[868], &v85, *(char **)(*(void *)&v86[4] + 120), v16);
        v84[0] = vandq_s8(v84[0], (int8x16_t)vdupq_n_s64(~__src[868]));
        uint64_t v21 = v40;
        uint64_t v22 = &__src[869];
        uint64_t v23 = (long long *)v84;
        goto LABEL_14;
      }
    }
    else
    {
      if ((v17 + 16079) < 2) {
        goto LABEL_31;
      }
      if (v17 == -15297 || v17 == -15486) {
        goto LABEL_24;
      }
    }
    if (v17 >> 2 != 1073737833) {
      goto LABEL_70;
    }
    int v34 = v17 + 15964;
    uint64_t v35 = *(void *)v4;
    switch(v34)
    {
      case 0:
      case 2:
        uint64_t v36 = GTTraceFunc_argumentBytesWithMap((void *)v15, *(unsigned __int8 *)(v12 + (v14 << 6) + 13), *(void *)(v4 + 8));
        *(void *)&v86[0] = *((void *)v36 + 1);
        uint64_t v37 = *find_entry(v35, v86, 8uLL, 0);
        if (v37) {
          uint64_t v38 = *(void *)(v37 + 32);
        }
        else {
          uint64_t v38 = 0;
        }
        uint64_t v44 = GTTraceMemoryMap_argumentBlobAtIndex(v36[40], *(void *)(v4 + 8), *((void *)v36 + 4));
        uint64_t v45 = v44 + 16;
        if (!v44) {
          uint64_t v45 = 0;
        }
        uint64_t v65 = v45;
        int v46 = v36 + 16;
        uint64_t v47 = (uint64_t *)(v36 + 24);
        goto LABEL_53;
      case 1:
      case 3:
        unint64_t v41 = GTTraceFunc_argumentBytesWithMap((void *)v15, *(unsigned __int8 *)(v12 + (v14 << 6) + 13), *(void *)(v4 + 8));
        *(void *)&v86[0] = *((void *)v41 + 1);
        uint64_t v42 = *find_entry(v35, v86, 8uLL, 0);
        if (v42) {
          uint64_t v38 = *(void *)(v42 + 32);
        }
        else {
          uint64_t v38 = 0;
        }
        uint64_t v48 = GTTraceMemoryMap_argumentBlobAtIndex(v41[40], *(void *)(v4 + 8), *((void *)v41 + 4));
        uint64_t v49 = v48 + 16;
        if (!v48) {
          uint64_t v49 = 0;
        }
        uint64_t v65 = v49;
        int v46 = GTTraceFunc_argumentBytesWithMap((void *)v15, v41[41], *(void *)(v4 + 8));
        uint64_t v47 = (uint64_t *)(v46 + 8);
LABEL_53:
        uint64_t v43 = *(void *)v46;
        uint64_t v24 = *v47;
        break;
      default:
        uint64_t v38 = 0;
        uint64_t v65 = 0;
        uint64_t v24 = 0;
        uint64_t v43 = 0;
        break;
    }
    memset(v86, 0, 24);
    memset(&v86[5], 0, 64);
    memset(&v86[2], 0, 32);
    LODWORD(v86[0]) = 57;
    WORD1(v86[6]) = 2;
    *((void *)&v86[1] + 1) = -1;
    v86[4] = 0xFFFFFFFFFFFFFFFFLL;
    if (v38 && (uint64_t v50 = *(void *)(v38 + 32)) != 0 && (*(unsigned char *)(v50 + 79) & 8) != 0) {
      int v51 = (uint64_t *)(v50 + 64);
    }
    else {
      int v51 = 0;
    }
    GTMTLSMIndirectCommandBuffer_processTraceFuncWithMap((char *)v86, *(void *)(v4 + 8), v51);
    long long v75 = 0u;
    long long v76 = 0u;
    long long v73 = 0u;
    long long v74 = 0u;
    long long v71 = 0u;
    long long v72 = 0u;
    long long v70 = 0u;
    GTMTLCreateIndirectCommandEncoder((uint64_t)&v70, *((uint64_t *)&v86[6] + 1));
    if (LODWORD(__src[0]) == 70)
    {
      memcpy(v86, __src, sizeof(v86));
      if (!*(unsigned char *)(v70 + 10))
      {
        unsigned int v56 = *(unsigned __int8 *)(v70 + 18);
        if (v56 >= 0x40) {
          LOBYTE(v56) = 64;
        }
        *(void *)&v86[4] &= -1 << v56;
        unsigned int v57 = *(unsigned __int8 *)(v70 + 12);
        if (v57 >= 0x40) {
          LOBYTE(v57) = 64;
        }
        *((void *)&v86[123] + 1) &= -1 << v57;
        unsigned int v58 = *(unsigned __int8 *)(v70 + 16);
        if (v58 >= 0x40) {
          LOBYTE(v58) = 64;
        }
        *(void *)&v86[227] &= -1 << v58;
        unsigned int v59 = *(unsigned __int8 *)(v70 + 15);
        if (v59 >= 0x40) {
          LOBYTE(v59) = 64;
        }
        *((void *)&v86[330] + 1) &= -1 << v59;
      }
      if (v24)
      {
        uint64_t v60 = v43;
        uint64_t v61 = *((void *)&v76 + 1);
        uint64_t v62 = v65 + v60 * *((void *)&v76 + 1);
        uint64_t v63 = v24;
        do
        {
          if (GTMTLSMRenderCommandEncoder_loadIndirectCommand((uint64_t)&v86[3] + 8, &v70, v62, v66)) {
            Draw(v4, v86, v16);
          }
          ++v16;
          v62 += v61;
          --v63;
        }
        while (v63);
      }
      goto LABEL_33;
    }
    if (LODWORD(__src[0]) == 28)
    {
      memcpy(v86, __src, sizeof(v86));
      if (!*(unsigned char *)(v70 + 10))
      {
        unsigned int v52 = *(unsigned __int8 *)(v70 + 13);
        if (v52 >= 0x40) {
          LOBYTE(v52) = 64;
        }
        *((void *)&v86[4] + 1) &= -1 << v52;
      }
      if (v24)
      {
        uint64_t v53 = *((void *)&v76 + 1);
        uint64_t v54 = v65 + v43 * *((void *)&v76 + 1);
        uint64_t v55 = v24;
        do
        {
          if (GTMTLSMComputeCommandEncoder_loadIndirectCommand((uint64_t)&v86[3] + 8, &v70, v54, v66)) {
            Dispatch(v4, (uint64_t)v86, v16);
          }
          ++v16;
          v54 += v53;
          --v55;
        }
        while (v55);
      }
    }
    else
    {
LABEL_70:
      LODWORD(v24) = 0;
    }
LABEL_33:
    v10 += (int)v24;
    unsigned int v31 = atomic_load((unsigned int *)(v6 + 4));
    int v32 = v11 + (v31 >> 6);
    uint64_t v33 = (HIDWORD(v11) + 1);
    unint64_t v11 = (v33 << 32) | v11;
    uint64_t v12 = v6 + 64;
    if (v33 == v32 - 1)
    {
      unint64_t v11 = (v33 << 32) | v33;
      uint64_t v6 = *(void *)(v6 + 40);
      goto LABEL_9;
    }
  }
  return v10;
}

uint64_t FilterArgumentBufferAccess(uint64_t a1, uint64_t a2, uint64_t a3, apr_pool_t *pool)
{
  unsigned int v8 = apr_hash_make(pool);
  if ((int)a3 >= 1)
  {
    uint64_t v9 = v8;
    uint64_t v10 = (int)a2 + (int)a3;
    uint64_t v11 = 40 * v10;
    do
    {
      uint64_t v12 = *(void *)(a1 + 24);
      *(void *)&v23[16] = 0;
      long long v22 = 0u;
      *(_OWORD *)uint64_t v23 = 0u;
      uint64_t v13 = v12 + v11 - 40;
      long long v22 = *(_OWORD *)v13;
      *(_OWORD *)&v23[8] = *(_OWORD *)(v12 + v11 - 16);
      uint64_t v14 = *find_entry((uint64_t)v9, &v22, 0x28uLL, 0);
      if (v14 && *(void *)(v14 + 32))
      {
        uint64_t v15 = *(void *)(a1 + 24) + 40 * (--a3 + a2);
        long long v16 = *(_OWORD *)v15;
        long long v17 = *(_OWORD *)(v15 + 16);
        *(void *)(v13 + 32) = *(void *)(v15 + 32);
        *(_OWORD *)uint64_t v13 = v16;
        *(_OWORD *)(v13 + 16) = v17;
      }
      else
      {
        uint64_t v18 = apr_palloc(pool, 0x28uLL);
        uint64_t v19 = *(void *)&v23[16];
        long long v20 = *(_OWORD *)v23;
        *uint64_t v18 = v22;
        v18[1] = v20;
        *((void *)v18 + 4) = v19;
        apr_hash_set(v9, v18, 40, v18);
      }
      --v10;
      v11 -= 40;
    }
    while (v10 > (int)a2);
  }
  return a3;
}

void MTLHarvesterMarkMutableAncestors(apr_hash_t *a1, uint64_t a2, void *a3, uint64_t a4)
{
  int v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = *(apr_pool_t **)a1;
  do
  {
    unint64_t v11 = a3[1] >> v8;
    if (!v11) {
      break;
    }
    int v12 = v8 + __clz(__rbit64(v11));
    uint64_t v22 = *(void *)(a2 + 8 * v12);
    uint64_t v13 = *find_entry((uint64_t)a1, &v22, 8uLL, 0);
    if (v13)
    {
      uint64_t v14 = *(apr_hash_t **)(v13 + 32);
      if (v14) {
        continue;
      }
    }
    uint64_t v14 = apr_hash_make(v10);
    uint64_t v15 = apr_palloc(v10, 8uLL);
    *uint64_t v15 = v22;
    apr_hash_set(a1, v15, 8, v14);
    int v16 = 0;
    do
    {
      unint64_t v17 = *a3 >> v16;
      if (!v17) {
        break;
      }
      int v18 = v16 + __clz(__rbit64(v17));
      uint64_t v21 = *(void *)(a2 + 8 * v18);
      uint64_t v19 = *find_entry((uint64_t)v14, &v21, 8uLL, 0);
      if (!v19 || !*(void *)(v19 + 32))
      {
        if (!v9)
        {
          uint64_t v9 = apr_palloc(v10, 8uLL);
          *uint64_t v9 = a4;
        }
        long long v20 = apr_palloc(v10, 8uLL);
        *long long v20 = v21;
        apr_hash_set(v14, v20, 8, v9);
      }
      int v16 = v18 + 1;
    }
    while (v18 < 63);
    int v8 = v12 + 1;
  }
  while (v12 < 63);
}

uint64_t Draw(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a1;
  *(void *)&long long v26 = a2[1075];
  entry = find_entry(v6, &v26, 8uLL, 0);
  if (*entry) {
    uint64_t v8 = *(void *)(*entry + 32);
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v25 = 0;
  memset(v24, 0, sizeof(v24));
  memset(v23, 0, sizeof(v23));
  long long v22 = 0u;
  memset(v21, 0, sizeof(v21));
  memset(v20, 0, sizeof(v20));
  GTMTLSMRenderPipelineState_resourceAccess(v8, *(void *)(a1 + 8), v20);
  uint64_t v9 = *(apr_hash_t **)(*(void *)(*(void *)(a1 + 40) + 24) + 8 * *(int *)(*(void *)(a1 + 40) + 12) - 8);
  int v10 = GTMTLRenderPipelineState_descriptorType(v8, v6, *(void *)(a1 + 8));
  if (v10 == 3)
  {
    uint64_t v16 = *(void *)(a1 + 8);
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    GTMTLRenderPipelineState_rootPipeline((uint64_t)&v26, v8, v6, v16);
    uint64_t v17 = *((void *)&v30 + 1);
    ArgumentBufferAccess(*(apr_array_header_t **)(a1 + 24), (uint64_t)(a2 + 455), (uint64_t)(a2 + 486), (uint64_t)(a2 + 454), v24, *(char **)(*((void *)&v30 + 1) + 368), a3);
    v23[0] = vandq_s8(v23[0], (int8x16_t)vdupq_n_s64(~a2[454]));
    MTLHarvesterMarkMutableAncestors(v9, (uint64_t)(a2 + 455), v23, a3);
    ArgumentBufferAccess(*(apr_array_header_t **)(a1 + 24), (uint64_t)(a2 + 662), (uint64_t)(a2 + 693), (uint64_t)(a2 + 661), &v24[3].i64[1], *(char **)(v17 + 360), a3);
    *(int8x16_t *)((char *)v24 + 8) = vandq_s8(*(int8x16_t *)((char *)v24 + 8), (int8x16_t)vdupq_n_s64(~a2[661]));
    MTLHarvesterMarkMutableAncestors(v9, (uint64_t)(a2 + 662), &v24[0].i64[1], a3);
    int v18 = *(apr_array_header_t **)(a1 + 24);
    uint64_t v14 = (uint64_t)(a2 + 248);
    uint64_t v15 = &v21[0].i64[1];
    ArgumentBufferAccess(v18, (uint64_t)(a2 + 248), (uint64_t)(a2 + 279), (uint64_t)(a2 + 247), (void *)&v22 + 1, *(char **)(v17 + 344), a3);
    *(int8x16_t *)((char *)v21 + 8) = vandq_s8(*(int8x16_t *)((char *)v21 + 8), (int8x16_t)vdupq_n_s64(~a2[247]));
    goto LABEL_8;
  }
  if (v10 == 1)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    GTMTLRenderPipelineState_rootPipeline((uint64_t)&v26, v8, v6, v11);
    int v12 = (char **)v29;
    ArgumentBufferAccess(*(apr_array_header_t **)(a1 + 24), (uint64_t)(a2 + 10), (uint64_t)(a2 + 41), (uint64_t)(a2 + 8), v21, *(char **)(v29 + 1296), a3);
    v20[0] = vandq_s8(v20[0], (int8x16_t)vdupq_n_s64(~a2[8]));
    MTLHarvesterMarkMutableAncestors(v9, (uint64_t)(a2 + 10), v20, a3);
    ArgumentBufferAccess(*(apr_array_header_t **)(a1 + 24), (uint64_t)(a2 + 248), (uint64_t)(a2 + 279), (uint64_t)(a2 + 247), (void *)&v22 + 1, v12[147], a3);
    *(int8x16_t *)((char *)v21 + 8) = vandq_s8(*(int8x16_t *)((char *)v21 + 8), (int8x16_t)vdupq_n_s64(~a2[247]));
    MTLHarvesterMarkMutableAncestors(v9, (uint64_t)(a2 + 248), &v21[0].i64[1], a3);
    ArgumentBufferAccess(*(apr_array_header_t **)(a1 + 24), (uint64_t)(a2 + 455), (uint64_t)(a2 + 486), (uint64_t)(a2 + 454), v24, v12[155], a3);
    v23[0] = vandq_s8(v23[0], (int8x16_t)vdupq_n_s64(~a2[454]));
    MTLHarvesterMarkMutableAncestors(v9, (uint64_t)(a2 + 455), v23, a3);
    uint64_t v13 = *(apr_array_header_t **)(a1 + 24);
    uint64_t v14 = (uint64_t)(a2 + 662);
    uint64_t v15 = &v24[0].i64[1];
    ArgumentBufferAccess(v13, (uint64_t)(a2 + 662), (uint64_t)(a2 + 693), (uint64_t)(a2 + 661), &v24[3].i64[1], v12[152], a3);
    *(int8x16_t *)((char *)v24 + 8) = vandq_s8(*(int8x16_t *)((char *)v24 + 8), (int8x16_t)vdupq_n_s64(~a2[661]));
LABEL_8:
    MTLHarvesterMarkMutableAncestors(v9, v14, v15, a3);
    return 1;
  }
  return 0;
}

apr_array_header_t *ArgumentBufferAccess(apr_array_header_t *arr, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, char *a6, uint64_t a7)
{
  uint64_t v13 = arr;
  int v14 = 0;
  do
  {
    unint64_t v15 = *a5 >> v14;
    if (!v15) {
      break;
    }
    int v16 = __clz(__rbit64(v15));
    int v18 = v14 + v16;
    char v17 = (v14 + v16 < 0) ^ __OFADD__(v14, v16);
    int v19 = v14 + v16 + 63;
    if (!v17) {
      int v19 = v18;
    }
    if (((*(void *)(a4 + 8 * (v19 >> 6)) >> (v18 - (v19 & 0xC0u))) & 1) == 0)
    {
      arr = (apr_array_header_t *)apr_array_push(v13);
      arr->pool = *(apr_pool_t **)(a2 + 8 * v18);
      *(void *)&arr->uint64_t elt_size = *(void *)(a3 + 8 * v18);
      *(void *)&arr->nalloc = a7;
      arr->uint64_t elts = a6;
      arr[1].pool = (apr_pool_t *)v18;
    }
    int v14 = v18 + 1;
  }
  while (v18 < 63);
  return arr;
}

char *Dispatch(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a1;
  v11[0].i64[0] = *(void *)(a2 + 64);
  entry = find_entry(v6, v11, 8uLL, 0);
  if (*entry) {
    uint64_t v8 = *(void *)(*entry + 32);
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v12 = 0;
  memset(v11, 0, sizeof(v11));
  GTMTLSMComputePipelineState_resourceAccess(v8, *(void *)(a1 + 8), (uint64_t)v11);
  double result = (char *)GTMTLComputePipelineState_computeFunction(v8, v6, *(void *)(a1 + 8));
  if (result)
  {
    int v10 = *(apr_hash_t **)(*(void *)(*(void *)(a1 + 40) + 24) + 8 * *(int *)(*(void *)(a1 + 40) + 12) - 8);
    ArgumentBufferAccess(*(apr_array_header_t **)(a1 + 24), a2 + 88, a2 + 336, a2 + 72, &v12, result, a3);
    v11[0] = vandq_s8(v11[0], (int8x16_t)vdupq_n_s64(~*(void *)(a2 + 72)));
    MTLHarvesterMarkMutableAncestors(v10, a2 + 88, v11, a3);
    return (unsigned char *)(&def_CFBEC + 1);
  }
  return result;
}

void CreateCommandBufferEpilogue(void *a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = __CreateCommandBufferEpilogue_block_invoke;
  block[3] = &unk_222120;
  id v4 = a1;
  uint64_t v1 = CreateCommandBufferEpilogue_onceToken;
  id v2 = v4;
  if (v1 != -1) {
    dispatch_once(&CreateCommandBufferEpilogue_onceToken, block);
  }
}

uint64_t __CreateCommandBufferEpilogue_block_invoke()
{
  uint64_t result = objc_opt_respondsToSelector();
  if (result)
  {
    uint64_t v1 = (objc_class *)objc_opt_class();
    InstanceMethod = class_getInstanceMethod(v1, "encodeWaitForEvent:value:");
    return (uint64_t)method_setImplementation(InstanceMethod, (IMP)MTLCommandBuffer_encodeWaitForEventWithValue);
  }
  return result;
}

id MTLCommandBuffer_encodeWaitForEventWithValue(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return [a1 encodeWaitForEvent:a3 value:a4 timeout:(GT_ENV + 5)];
}

void CommandQueueTakeSnapshot(void *a1)
{
  id v1 = a1;
  id v2 = v1;
  char v3 = *((unsigned char *)v1 + 88);
  if ((*(_DWORD *)(boundaryTrackerInstance + 20) & 0xFFFFFFFE) != 2)
  {
    if (*((unsigned char *)v1 + 88))
    {
      uint64_t v9 = [*((id *)v1 + 9) allObjects];
      id v10 = [v9 copy];
      uint64_t v11 = (void *)*((void *)v2 + 10);
      *((void *)v2 + 1mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v10;

      char v3 = 0;
    }
    goto LABEL_22;
  }
  if (!*((unsigned char *)v1 + 88))
  {
    if ([*((id *)v1 + 9) count])
    {
      s();
      uint64_t v5 = v4;
      *(unsigned char *)(v4 + 8) |= 0x80u;
      if (*((void *)v2 + 10))
      {
        long long v39 = 0u;
        long long v40 = 0u;
        long long v38 = 0u;
        GTTraceContext_pushEncoderWithStream(*((void *)v2 + 3), (uint64_t)&v38);
        uint64_t v6 = v39;
        *(_DWORD *)(v39 + 8) = -15249;
        char v7 = BYTE9(v40);
        if (BYTE9(v40) > 0x28uLL)
        {
          uint64_t v12 = *(void *)(*((void *)&v38 + 1) + 24);
          uint64_t v13 = BYTE10(v40);
          ++BYTE10(v40);
          uint64_t v8 = GTTraceMemPool_allocateBytes(v12, *((uint64_t *)&v39 + 1), v13 | 0x1800000000) + 16;
          char v7 = v13;
        }
        else
        {
          uint64_t v8 = (char *)(v6 + BYTE9(v40));
          BYTE9(v40) += 24;
        }
        *(unsigned char *)(v6 + 13) = v7;
        int v14 = (uint64_t *)[v2 traceStream];
        if (v14) {
          uint64_t v15 = *v14;
        }
        else {
          uint64_t v15 = 0;
        }
        id v16 = [*((id *)v2 + 10) count];
        id v17 = [*((id *)v2 + 10) count];
        __chkstk_darwin(v17, 8 * (void)v17);
        int v19 = (void *)((char *)&v38 - v18);
        bzero((char *)&v38 - v18, v20);
        char v21 = StreamNSArray((uint64_t)&v38, v19, *((void **)v2 + 10));
        *(void *)uint64_t v8 = v15;
        *((void *)v8 + 1) = v16;
        v8[16] = v21;
        *(_DWORD *)(v8 + 17) = 0;
        *((_DWORD *)v8 + 5) = 0;
        *(void *)uint64_t v5 = v40;
        *(unsigned char *)(v5 + 8) = BYTE8(v40);
        *(unsigned char *)(v39 + 15) |= 8u;
      }
      long long v39 = 0u;
      long long v40 = 0u;
      long long v38 = 0u;
      GTTraceContext_pushEncoderWithStream(*((void *)v2 + 3), (uint64_t)&v38);
      uint64_t v22 = v39;
      *(_DWORD *)(v39 + 8) = -15251;
      char v23 = BYTE9(v40);
      if (BYTE9(v40) > 0x28uLL)
      {
        uint64_t v25 = *(void *)(*((void *)&v38 + 1) + 24);
        uint64_t v26 = BYTE10(v40);
        ++BYTE10(v40);
        uint64_t v24 = GTTraceMemPool_allocateBytes(v25, *((uint64_t *)&v39 + 1), v26 | 0x1800000000) + 16;
        char v23 = v26;
      }
      else
      {
        uint64_t v24 = (char *)(v22 + BYTE9(v40));
        BYTE9(v40) += 24;
      }
      *(unsigned char *)(v22 + 13) = v23;
      long long v27 = (uint64_t *)[v2 traceStream];
      if (v27) {
        uint64_t v28 = *v27;
      }
      else {
        uint64_t v28 = 0;
      }
      id v29 = [*((id *)v2 + 9) count];
      long long v30 = [*((id *)v2 + 9) allObjects];
      id v31 = [v30 count];
      __chkstk_darwin(v31, 8 * (void)v31);
      long long v33 = (void *)((char *)&v38 - v32);
      bzero((char *)&v38 - v32, v34);
      long long v35 = [*((id *)v2 + 9) allObjects];
      char v36 = StreamNSArray((uint64_t)&v38, v33, v35);
      *(void *)uint64_t v24 = v28;
      *((void *)v24 + 1) = v29;
      v24[16] = v36;
      *(_DWORD *)(v24 + 17) = 0;
      *((_DWORD *)v24 + 5) = 0;

      *(void *)uint64_t v5 = v40;
      char v37 = BYTE8(v40);
      *(unsigned char *)(v39 + 15) |= 8u;
      *(unsigned char *)(v5 + 8) = v37 & 0x7F;
    }
    char v3 = 1;
LABEL_22:
    *((unsigned char *)v2 + 88) = v3;
  }
}

void AddResidencySet(void *a1, void *a2)
{
  uint64_t v4 = a1;
  id v3 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    [v4[9] addObject:v3];
    ResidencySetTakeSnapshotInternal(v3, 0);
  }
}

uint64_t __Block_byref_object_copy__8841(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__8842(uint64_t a1)
{
}

void CommandQueueCaptureResidencySetSnapshots(void *a1)
{
  id v1 = a1;
  CommandQueueTakeSnapshot(v1);
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  id v2 = v1[9];
  id v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        ResidencySetTakeSnapshotInternal(*(void **)(*((void *)&v7 + 1) + 8 * (void)v6), 0);
        uint64_t v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }
    while (v4);
  }
}

apr_array_header_t *CaptureMTLCommandQueue_enqueuedCommandBufferRefs(void *a1, id a2, apr_pool_t *a3)
{
  id v5 = a1;
  uint64_t v6 = [v5 enqueuedCommandBuffers];
  if ([v6 count])
  {
    long long v7 = apr_array_make(a3, (int)[v6 count], 8);
    if ([v6 count])
    {
      unint64_t v8 = 0;
      do
      {
        long long v9 = [v6 objectAtIndexedSubscript:v8];
        if ([v9 streamReference] != a2 && (objc_msgSend(v9, "isCommited") & 1) == 0)
        {
          id v10 = [v9 streamReference];
          *(void *)apr_array_push(v7) = v10;
        }

        ++v8;
      }
      while ((unint64_t)[v6 count] > v8);
    }
  }
  else
  {
    long long v7 = 0;
  }

  return v7;
}

void sub_B59D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void ReportError(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v5 = +[NSError errorWithDomain:a2 code:a3 userInfo:a4];
  uint64_t v6 = v5;
  if ((qword_2501C8 & 2) != 0)
  {
    if (s_logUsingOsLog)
    {
      long long v7 = gt_default_log();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      {
        id v8 = [v6 code];
        id v9 = [v6 localizedDescription];
        id v10 = (const char *)[v9 UTF8String];
        if (v10) {
          uint64_t v11 = v10;
        }
        else {
          uint64_t v11 = "(unknown)";
        }
        id v12 = [v6 localizedFailureReason];
        uint64_t v13 = (const char *)[v12 UTF8String];
        if (v13) {
          int v14 = v13;
        }
        else {
          int v14 = "";
        }
        id v15 = [v6 localizedRecoverySuggestion];
        id v16 = (const char *)[v15 UTF8String];
        *(_DWORD *)buf = 134218754;
        id v17 = "none";
        id v30 = v8;
        if (v16) {
          id v17 = v16;
        }
        __int16 v31 = 2080;
        uint64_t v32 = v11;
        __int16 v33 = 2080;
        size_t v34 = v14;
        __int16 v35 = 2080;
        char v36 = v17;
        _os_log_fault_impl(&def_CFBEC, v7, OS_LOG_TYPE_FAULT, "fail: error (%ld): %s %s [recommendation: %s]", buf, 0x2Au);
      }
    }
    else
    {
      uint64_t v18 = __stderrp;
      id v19 = [v5 code];
      long long v7 = [v6 localizedDescription];
      size_t v20 = (const char *)[v7 UTF8String];
      if (v20) {
        char v21 = v20;
      }
      else {
        char v21 = "(unknown)";
      }
      id v22 = [v6 localizedFailureReason];
      char v23 = (const char *)[v22 UTF8String];
      if (v23) {
        uint64_t v24 = v23;
      }
      else {
        uint64_t v24 = "";
      }
      id v25 = [v6 localizedRecoverySuggestion];
      uint64_t v26 = (const char *)[v25 UTF8String];
      long long v27 = "none";
      if (v26) {
        long long v27 = v26;
      }
      id v28 = +[NSString stringWithFormat:@"fail: error (%ld): %s %s [recommendation: %s]", v19, v21, v24, v27];
      fprintf(v18, "%s\n", (const char *)[v28 UTF8String]);
    }
  }
  if (a1) {
    *a1 = v6;
  }
}

void FillMissingCaptureObjectError(void *a1)
{
  v3[0] = NSLocalizedDescriptionKey;
  v3[1] = NSLocalizedRecoverySuggestionErrorKey;
  v4[0] = @"Capture Object property is not set.";
  v4[1] = @"Specify an object to be captured like MTLDevice.";
  id v2 = +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:2];
  ReportError(a1, (uint64_t)MTLCaptureErrorDomain, 3, (uint64_t)v2);
}

void FinishCapture()
{
  id v0 = +[CaptureMTLCaptureManager sharedCaptureManager];
  unsigned int v1 = [v0 isCapturing];

  if (v1)
  {
    id v2 = +[CaptureMTLCaptureManager sharedCaptureManager];
    [v2 stopCapture];
  }
  id v3 = +[CaptureMTLCaptureManager toolsCaptureManager];
  unsigned int v4 = [v3 isCapturing];

  if (v4)
  {
    id v5 = +[CaptureMTLCaptureManager toolsCaptureManager];
    [v5 stopCapture];
  }
}

uint64_t GTMTLCaptureManager_init()
{
  dispatch_semaphore_t v0 = dispatch_semaphore_create(0);
  unsigned int v1 = (void *)qword_2500A8;
  qword_2500A8 = (uint64_t)v0;

  qword_2500B0 = (uint64_t)dispatch_semaphore_create(0);

  return _objc_release_x1();
}

uint64_t GTMTLCaptureManager_activeCaptureState()
{
  return _sharedCaptureManager;
}

intptr_t GTMTLCaptureManager_signalCaptureTrigger()
{
  return dispatch_semaphore_signal((dispatch_semaphore_t)qword_2500B0);
}

intptr_t GTMTLCaptureManager_waitForCaptureTrigger()
{
  if ((qword_2501C8 & 0x40) != 0) {
    return dispatch_semaphore_wait((dispatch_semaphore_t)qword_2500B0, 0xFFFFFFFFFFFFFFFFLL);
  }
  return result;
}

id GTMTLCaptureManager_supportsRemoteCapture()
{
  if (*(void *)g_guestAppClientMTL || (qword_2501C8 & 0x800) != 0) {
    return &def_CFBEC + 1;
  }
  else {
    return [*(id *)(g_guestAppClientMTL + 8) hasObservers];
  }
}

void GTMTLCaptureManager_startCapture()
{
  uint64_t v1 = _sharedCaptureManager;
  *(void *)(v1 + 44mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = mach_absolute_time();
  GTMTLCaptureStatistics_begin(v1);
  id v2 = (void **)g_guestAppClientMTL;
  v11[0] = @"capture serial";
  id v3 = +[NSNumber numberWithUnsignedLongLong:*(void *)(v1 + 32)];
  v12[0] = v3;
  v12[1] = &off_226DD0;
  v11[1] = @"version";
  void v11[2] = @"nativePointerSize";
  void v12[2] = &off_226DE8;
  int8x16_t v11[3] = @"BoundaryLess";
  unsigned int v4 = +[NSNumber numberWithBool:*(unsigned __int8 *)(v1 + 86)];
  _OWORD v12[3] = v4;
  v12[4] = &off_226E00;
  v11[4] = @"interpose-feature-version";
  v11[5] = @"interpose-patch-version";
  v12[5] = @"0";
  id v5 = +[NSDictionary dictionaryWithObjects:v12 forKeys:v11 count:6];

  uint64_t v6 = *v2;
  long long v7 = +[GTTransportMessage_capture messageWithKind:257 attributes:v5];
  [v6 send:v7 error:0];

  id v8 = objc_opt_new();
  [v8 setCaptureState:3];
  if (*(unsigned char *)(g_guestAppClientMTL + 129)) {
    [*(id *)(g_guestAppClientMTL + 8) notifyCaptureProgress:v8];
  }
  id v9 = g_signpostLog;
  if (os_signpost_enabled((os_log_t)g_signpostLog))
  {
    *(_WORD *)id v10 = 0;
    _os_signpost_emit_with_name_impl(&def_CFBEC, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "StartCapture", (const char *)&unk_21C232, v10, 2u);
  }
}

unint64_t GTMTLCaptureManager_stopActiveCapture(unint64_t a1, uint64_t a2)
{
  GTTraceStoreDebugDescription();
  uint64_t v4 = _sharedCaptureManager;
  id v5 = g_signpostLog;
  if (os_signpost_enabled((os_log_t)g_signpostLog))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&def_CFBEC, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "StopActiveCapture", (const char *)&unk_21C232, buf, 2u);
  }
  int v6 = *(unsigned __int8 *)(v4 + 91);
  if (*(void *)v4) {
    WaitForDevice(g_ctx, *(void *)v4);
  }
  long long v7 = g_signpostLog;
  if (os_signpost_enabled((os_log_t)g_signpostLog))
  {
    *(_DWORD *)buf = 134217984;
    *(void *)&uint8_t buf[4] = a1 + a2;
    _os_signpost_emit_with_name_impl(&def_CFBEC, v7, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "Capture-StopActiveCaptureDumpContext", "Index: %llu", buf, 0xCu);
  }
  uint64_t started = GTTraceDump_startContext(g_ctx, (void *)v4, a1, a2);
  if (*(unsigned char *)(v4 + 93))
  {
    info[0] = 0;
    mach_timebase_info(info);
    uint64_t v9 = *(void *)(v4 + 440);
    uint64_t v10 = *(void *)(v4 + 16);
    if (!v10)
    {
      uint64_t v10 = *(void *)(v4 + 8);
      if (!v10) {
        uint64_t v10 = *(void *)v4;
      }
    }
    uint64_t v11 = *(void *)(started + 16);
    id v12 = *(const char **)(v4 + 64);
    *(void *)buf = a1;
    *(void *)&buf[8] = a2;
    *(void *)&long long v66 = v9;
    *((mach_timebase_info *)&v66 + 1) = info[0];
    *(void *)&long long v67 = v10;
    GTTraceDump_writeNewArchive(v11, buf, v12);
  }
  if (*(int *)(*(void *)(started + 552) + 12) < 1)
  {
    GTTraceContextDumpEmptyCapture(started);
    uint64_t v73 = 0;
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    long long v67 = 0u;
    long long v68 = 0u;
    *(_OWORD *)buf = 0u;
    long long v66 = 0u;
    goto LABEL_26;
  }
  GTTraceDump_writeStartup0(started, *(apr_pool_t **)(started + 32), *(apr_pool_t **)started);
  uint64_t v13 = *(apr_pool_t **)(started + 32);
  int v14 = *(apr_pool_t **)started;
  uint64_t v15 = *(void *)(started + 16);
  id v16 = apr_palloc(*(apr_pool_t **)started, 0x100000uLL);
  *(void *)buf = *(void *)(started + 56);
  *(void *)buf = *(void *)(*(void *)(*find_entry(v15, buf, 8uLL, 0) + 32) + 8);
  *(void *)&buf[8] = v16;
  *(void *)&long long v66 = 0x100000;
  id v17 = fbstream_open(v13, (uint64_t)"startup-1-platform", v14);
  *((void *)&v66 + 1) = v17;
  long long v67 = (unint64_t)v13;
  LOBYTE(v68) = *(unsigned char *)(started + 488);
  *(_DWORD *)((char *)&v68 + 1) = 0;
  DWORD1(v68) = 0;
  GTEncodeMetalLayers((uint64_t)buf, started);
  apr_pool_cleanup_kill(*v17, v17, (apr_status_t (__cdecl *)(void *))fbstream_cleanup);
  fbstream_cleanup((uint64_t)v17);
  GTTraceDump_writeDeviceResources(started, *(apr_pool_t **)(started + 32), *(apr_pool_t **)started);
  GTTraceDump_writeDelta(started, *(apr_pool_t **)(started + 32), *(apr_pool_t **)started);
  strcpy((char *)buf, "temporary data");
  GTMTLCaptureState_storePointer(*(void *)(started + 32), "gttrace-dump", (uint64_t *)buf, (char *)&dword_C + 3);
  strcpy((char *)buf, "dummy data");
  int v64 = 0;
  info[0] = (mach_timebase_info)4;
  if (!sysctlbyname("sysctl.proc_translated", &v64, (size_t *)info, 0, 0) && v64) {
    GTMTLCaptureState_storePointer(*(void *)(started + 32), "is_rosetta", (uint64_t *)buf, (char *)&dword_8 + 3);
  }
  if (os_variant_has_internal_content()) {
    GTMTLCaptureState_storePointer(*(void *)(started + 32), "is_internal", (uint64_t *)buf, (char *)&dword_8 + 3);
  }
  if (GTCorePlatform_isAlmond())
  {
    uint64_t v18 = "is_almond";
  }
  else
  {
    if (!GTCorePlatform_isCatalyst()) {
      goto LABEL_24;
    }
    uint64_t v18 = "is_catalyst";
  }
  GTMTLCaptureState_storePointer(*(void *)(started + 32), v18, (uint64_t *)buf, (char *)&dword_8 + 3);
LABEL_24:
  WaitForDevice(*(void *)(started + 8), *(void *)(started + 56));
  GTTraceDump_writeCapture(started, *(apr_pool_t **)(started + 32), *(apr_pool_t **)started);
  GTTraceDump_writeUnsortedCapture(started, *(apr_pool_t **)(started + 32), *(apr_pool_t **)started);
  uint64_t v73 = 0;
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  *(_OWORD *)buf = 0u;
  long long v66 = 0u;
  if (!v6)
  {
    UnusedDownloadRequest = GTTraceContextDumpGetUnusedDownloadRequest(started);
    size_t v20 = GTResourceDownloaderProcessRequest(*(apr_pool_t **)started, (uint64_t)UnusedDownloadRequest);
    DownloadFromDevice(*(void *)(started + 16), *(void *)(started + 56), (uint64_t)v20);
    apr_hash_clear(*(apr_hash_t **)(started + 496));
    DownloadsByResource((uint64_t)v20, *(apr_hash_t **)(started + 496));
    GTTraceDump_writeUnusedDeviceResources(started, *(apr_pool_t **)(started + 32), *(apr_pool_t **)started);
    GTTraceContextDumpUnusedCount(started, (uint64_t)buf);
  }
LABEL_26:
  uint64_t v21 = *(void *)(v4 + 48);
  long long v61 = v71;
  long long v62 = v72;
  uint64_t v63 = v73;
  long long v57 = v67;
  long long v58 = v68;
  long long v59 = v69;
  long long v60 = v70;
  *(_OWORD *)&info[0].numer = *(_OWORD *)buf;
  long long v56 = v66;
  GTMTLCaptureState_notifyUsedDataSentWithDictionary(v4, v21, info);
  id v22 = g_signpostLog;
  if (os_signpost_enabled((os_log_t)g_signpostLog))
  {
    LOWORD(info[0].numer) = 0;
    _os_signpost_emit_with_name_impl(&def_CFBEC, v22, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CaptureSentAllMetadata", (const char *)&unk_21C232, (uint8_t *)info, 2u);
  }
  char v23 = *(void **)(v4 + 104);
  uint64_t v24 = +[GTTransportMessage_capture messageWithKind:267];
  [v23 send:v24 error:0];

  GTTraceStoreDebugDescription();
  GTTraceContextDumpEnd(started);
  id v25 = g_signpostLog;
  if (os_signpost_enabled((os_log_t)g_signpostLog))
  {
    LOWORD(info[0].numer) = 0;
    _os_signpost_emit_with_name_impl(&def_CFBEC, v25, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "Capture-StopActiveCaptureDumpContext", (const char *)&unk_21C232, (uint8_t *)info, 2u);
  }
  WaitForHarvesting();
  GTMTLCaptureState_notifyAllCaptureDataSent(v4, *(void *)(v4 + 48));
  info[0] = 0;
  mach_timebase_info(info);
  mach_absolute_time();
  if (*(unsigned char *)(v4 + 84))
  {
    unint64_t v26 = atomic_load((unint64_t *)(v4 + 432));
    BOOL v53 = v26 != 0;
  }
  else
  {
    BOOL v53 = 0;
  }
  long long v27 = (void (**)(id, id))objc_retainBlock(*(id *)(v4 + 96));
  id v28 = *(id *)(v4 + 424);
  atomic_load((unint64_t *)(v4 + 432));
  GTMTLCaptureState_close(_sharedCaptureManager);
  _sharedCaptureManager = 0;
  GTCaptureBoundaryTracker_reset();
  if (v27) {
    v27[2](v27, [v28 UTF8String]);
  }
  g_targetRef = 0;
  unint64_t v29 = atomic_load(&g_frameCount);
  unint64_t v30 = atomic_load(&g_frameOther);
  unint64_t v31 = atomic_load(&g_commitCount);
  unint64_t v32 = atomic_load(&g_commitOther);
  unint64_t v33 = atomic_load(&g_resourceCount);
  unint64_t v34 = atomic_load(&g_resourceDownloaded);
  unint64_t v35 = atomic_load(&g_GPUDataSize);
  unint64_t v50 = v34;
  unint64_t v51 = v35;
  unint64_t v36 = atomic_load(&g_GPUDataDownloaded);
  unint64_t v52 = v36;
  char v37 = objc_opt_new();
  long long v38 = +[NSURL URLWithString:v28];
  [v37 setArchiveURL:v38];

  long long v39 = objc_opt_new();
  [v39 setCaptureState:2];
  [v39 setCompletionState:v37];
  long long v40 = objc_opt_new();
  [v39 setStats:v40];

  long long v41 = [v39 stats];
  [v41 setFrameCount:v29];

  long long v42 = [v39 stats];
  [v42 setFrameOther:v30];

  long long v43 = [v39 stats];
  [v43 setCommitCount:v31];

  long long v44 = [v39 stats];
  [v44 setCommitOther:v32];

  long long v45 = [v39 stats];
  [v45 setResourceCount:v33];

  long long v46 = [v39 stats];
  [v46 setResourceDownloaded:v50];

  long long v47 = [v39 stats];
  [v47 setGPUDataSize:v51];

  long long v48 = [v39 stats];
  [v48 setGPUDataDownloaded:v52];

  if (*(unsigned char *)(g_guestAppClientMTL + 129)) {
    [*(id *)(g_guestAppClientMTL + 8) notifyCaptureProgress:v39];
  }

  unint64_t result = GTTraceStoreDebugDescription();
  if (v53) {
    return task_suspend(mach_task_self_);
  }
  return result;
}

void GTTraceContextDumpEnd(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(v2 + 64)) {
    GTMTLCaptureState_dumpDeviceFilesLocal(v2, *(void *)(a1 + 56));
  }

  GTTraceDump_endContext(a1);
}

void WaitForHarvesting()
{
  dispatch_semaphore_t v0 = GTMTLGuestAppClient_copyCaptureDevices(g_guestAppClientMTL);
  uint64_t v1 = g_signpostLog;
  if (os_signpost_enabled((os_log_t)g_signpostLog))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&def_CFBEC, v1, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "Capture-StopActiveCaptureHarvesterWait", (const char *)&unk_21C232, buf, 2u);
  }
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v2 = v0;
  id v3 = [v2 countByEnumeratingWithState:&v10 objects:v15 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v11;
    do
    {
      for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        long long v7 = *(void **)(*((void *)&v10 + 1) + 8 * i);
        id v8 = objc_msgSend(v7, "dispatchGroup", (void)v10);
        dispatch_group_wait(v8, 0xFFFFFFFFFFFFFFFFLL);

        [v7 invalidateHarvester];
      }
      id v4 = [v2 countByEnumeratingWithState:&v10 objects:v15 count:16];
    }
    while (v4);
  }

  uint64_t v9 = g_signpostLog;
  if (os_signpost_enabled((os_log_t)g_signpostLog))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&def_CFBEC, v9, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "Capture-StopActiveCaptureHarvesterWait", (const char *)&unk_21C232, buf, 2u);
  }
}

void GTMTLCaptureManager_abortActiveCapture(unint64_t a1, uint64_t a2)
{
  id v4 = &s_accelerationStructuresByStreamRef;
  uint64_t v5 = _sharedCaptureManager;
  long long v7 = GTMTLGuestAppClient_getUnsupportedFenumInfo();
  id v8 = v7;
  p_prots = &OBJC_PROTOCOL___MTLDrawable.prots;
  if (v7)
  {
    long long v10 = [v7 asError];
    long long v11 = v10;
    if (s_logUsingOsLog)
    {
      long long v12 = gt_default_log();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
      {
        id v55 = [v11 code];
        long long v57 = [v11 localizedDescription];
        id v53 = [(FILE *)v57 UTF8String];
        id v44 = [v11 localizedFailureReason];
        long long v45 = (const char *)[v44 UTF8String];
        if (v45) {
          long long v46 = v45;
        }
        else {
          long long v46 = "";
        }
        [v11 localizedRecoverySuggestion];
        long long v47 = v6;
        id v48 = objc_claimAutoreleasedReturnValue();
        long long v49 = (const char *)[v48 UTF8String];
        *(_DWORD *)buf = 134218754;
        unint64_t v50 = "none";
        *(void *)&uint8_t buf[4] = v55;
        if (v49) {
          unint64_t v50 = v49;
        }
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = v53;
        *(_WORD *)&buf[22] = 2080;
        *(void *)&unsigned char buf[24] = v46;
        LOWORD(v6mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 2080;
        *(void *)((char *)&v60 + 2) = v50;
        _os_log_fault_impl(&def_CFBEC, v12, OS_LOG_TYPE_FAULT, "fail: Capture aborted (%ld): %s %s [recommendation: %s]", buf, 0x2Au);

        int v6 = v47;
        p_prots = (__objc2_prot_list **)(&OBJC_PROTOCOL___MTLDrawable + 16);

        id v4 = &s_accelerationStructuresByStreamRef;
      }
    }
    else
    {
      long long v56 = __stderrp;
      id v52 = [v10 code];
      id v54 = [v11 localizedDescription];
      long long v13 = v6;
      id v14 = [v54 UTF8String];
      id v15 = [v11 localizedFailureReason];
      id v16 = (const char *)[v15 UTF8String];
      if (v16) {
        id v17 = v16;
      }
      else {
        id v17 = "";
      }
      id v18 = [v11 localizedRecoverySuggestion];
      id v19 = (const char *)[v18 UTF8String];
      size_t v20 = "none";
      if (v19) {
        size_t v20 = v19;
      }
      id v51 = v14;
      int v6 = v13;
      id v21 = +[NSString stringWithFormat:@"fail: Capture aborted (%ld): %s %s [recommendation: %s]", v52, v51, v17, v20];
      fprintf(v56, "%s\n", (const char *)[v21 UTF8String]);

      id v4 = &s_accelerationStructuresByStreamRef;
      p_prots = &OBJC_PROTOCOL___MTLDrawable.prots;
    }
  }
  uint64_t started = GTTraceDump_startContext(g_ctx, (void *)v5, a1, a2);
  GTTraceContextDumpEmptyCapture(started);
  uint64_t v23 = *(void *)(v5 + 48);
  uint64_t v66 = 0;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  memset(buf, 0, sizeof(buf));
  GTMTLCaptureState_notifyUsedDataSentWithDictionary(v5, v23, buf);
  uint64_t v24 = g_signpostLog;
  if (os_signpost_enabled((os_log_t)g_signpostLog))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&def_CFBEC, v24, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CaptureSentAllMetadata", (const char *)&unk_21C232, buf, 2u);
  }
  id v25 = *(void **)(v5 + 104);
  unint64_t v26 = +[GTTransportMessage_capture messageWithKind:267];
  [v25 send:v26 error:0];

  GTTraceContextDumpEnd(started);
  WaitForHarvesting();
  GTMTLCaptureState_notifyAllCaptureDataSent(v5, *(void *)(v5 + 48));

  long long v27 = (void (**)(id, void))objc_retainBlock(*(id *)(v5 + 96));
  id v28 = *(id *)(v5 + 424);
  GTMTLCaptureState_close(v4[20]);
  if (v28)
  {
    if (*((unsigned char *)p_prots + 3552))
    {
      unint64_t v29 = gt_default_log();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
      {
        id v30 = [v28 UTF8String];
        *(_DWORD *)buf = 136315138;
        *(void *)&uint8_t buf[4] = v30;
        _os_log_impl(&def_CFBEC, v29, OS_LOG_TYPE_INFO, "Capture aborted, removing archive: %s", buf, 0xCu);
      }
    }
    else
    {
      unint64_t v31 = __stdoutp;
      +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"Capture aborted, removing archive: %s", [v28 UTF8String]);
      unint64_t v29 = objc_claimAutoreleasedReturnValue();
      fprintf(v31, "%s\n", (const char *)[v29 UTF8String]);
    }

    unint64_t v32 = +[NSFileManager defaultManager];
    id v58 = 0;
    unsigned __int8 v33 = [v32 removeItemAtPath:v28 error:&v58];
    id v34 = v58;

    if (v33) {
      goto LABEL_26;
    }
    if (*((unsigned char *)p_prots + 3552))
    {
      unint64_t v35 = gt_default_log();
      if (!os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
      {
LABEL_25:

LABEL_26:
        goto LABEL_27;
      }
      id v36 = [v28 UTF8String];
      id v37 = [v34 localizedDescription];
      id v38 = [v37 UTF8String];
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = v36;
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = v38;
      _os_log_impl(&def_CFBEC, v35, OS_LOG_TYPE_INFO, "Remove archive %s failed: %s", buf, 0x16u);
    }
    else
    {
      long long v39 = __stdoutp;
      id v40 = [v28 UTF8String];
      unint64_t v35 = [v34 localizedDescription];
      id v37 = +[NSString stringWithFormat:@"Remove archive %s failed: %s", v40, [v35 UTF8String]];
      fprintf(v39, "%s\n", (const char *)[v37 UTF8String]);
    }

    goto LABEL_25;
  }
LABEL_27:
  v4[20] = 0;
  GTCaptureBoundaryTracker_reset();
  long long v41 = objc_opt_new();
  [v41 setCaptureState:2];
  long long v42 = objc_opt_new();
  [v41 setCompletionState:v42];

  long long v43 = objc_opt_new();
  [v41 setStats:v43];

  if (*(unsigned char *)(g_guestAppClientMTL + 129)) {
    [*(id *)(g_guestAppClientMTL + 8) notifyCaptureProgress:v41];
  }
  if (v27) {
    v27[2](v27, 0);
  }
}

void GTMTLCaptureManager_activateCaptureWithDescriptor(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 89))
  {
    if (*(void *)(a1 + 64))
    {
      _sharedCaptureManager = (uint64_t)GTMTLCaptureState_createLocalCapture(a1, g_guestAppClientMTL);
    }
    else
    {
      long long v10 = (id *)g_guestAppClientMTL;
      long long v11 = *(_OWORD *)(a1 + 48);
      long long v24 = *(_OWORD *)(a1 + 32);
      long long v25 = v11;
      long long v12 = *(_OWORD *)(a1 + 80);
      long long v26 = *(_OWORD *)(a1 + 64);
      long long v27 = v12;
      long long v13 = *(_OWORD *)(a1 + 16);
      long long v22 = *(_OWORD *)a1;
      long long v23 = v13;
      id v28 = objc_retainBlock(*(id *)(a1 + 96));
      unint64_t v14 = atomic_fetch_add(&qword_2500B8, 1uLL) + 1;
      *(void *)&long long v24 = v14;
      _sharedCaptureManager = (uint64_t)GTMTLCaptureState_createRemoteCapture((uint64_t)&v22, v10);
      if (*v10)
      {
        id v15 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v14, v22, v23);
        v32[0] = v15;
        v31[0] = @"Serial";
        v31[1] = @"TriggerFrame";
        id v16 = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 40)];
        v32[1] = v16;
        int8x16_t v32[2] = &off_226DD0;
        v31[2] = @"FrameLimit";
        v31[3] = @"TriggerOnNextGLCommand";
        v32[3] = &__kCFBooleanTrue;
        v32[4] = &__kCFBooleanTrue;
        v31[4] = @"LockOpenGLAfterCompletion";
        v31[5] = @"SuspendAfterCompletion";
        id v17 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 84)];
        v32[5] = v17;
        id v18 = +[NSDictionary dictionaryWithObjects:v32 forKeys:v31 count:6];

        CFStringRef v29 = @"capture serial";
        id v30 = v15;
        id v19 = +[NSDictionary dictionaryWithObjects:&v30 forKeys:&v29 count:1];
        id v20 = *v10;
        id v21 = +[GTTransportMessage_capture messageWithKind:264 attributes:v19 plistPayload:v18];
        [v20 send:v21 error:0];

        dispatch_semaphore_wait((dispatch_semaphore_t)qword_2500A8, 0xFFFFFFFFFFFFFFFFLL);
      }
    }
  }
  else
  {
    RemoteCapture = GTMTLCaptureState_createRemoteCapture(a1, (id *)g_guestAppClientMTL);
    _sharedCaptureManager = (uint64_t)RemoteCapture;
    uint64_t v3 = +[NSString stringWithUTF8String:*(void *)(a1 + 64)];
    id v4 = *(void **)&RemoteCapture[6].__opaque[32];
    *(void *)&RemoteCapture[6].__opaque[32] = v3;

    RemoteCapture[7].__opaque[0] = strcmp(*(const char **)(a1 + 64), *(const char **)(a1 + 72)) == 0;
    uint64_t v5 = _sharedCaptureManager;
    unint64_t v6 = atomic_load((unint64_t *)&qword_2500B8);
    do
    {
      unint64_t v7 = *(void *)(v5 + 32);
      if (v6 >= v7) {
        break;
      }
      unint64_t v8 = v6;
      atomic_compare_exchange_strong(&qword_2500B8, &v8, v7);
      BOOL v9 = v8 == v6;
      unint64_t v6 = v8;
    }
    while (!v9);
  }
}

void sub_BBB28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  _Unwind_Resume(a1);
}

intptr_t GTMTLCaptureManager_updateCaptureDescriptorFromHost(intptr_t result)
{
  uint64_t v1 = _sharedCaptureManager;
  if (*(void *)(result + 32) == *(void *)(_sharedCaptureManager + 32))
  {
    intptr_t v2 = result;
    *(_WORD *)(_sharedCaptureManager + 84) = *(_WORD *)(result + 84);
    *(unsigned char *)(v1 + 87) = *(unsigned char *)(result + 87);
    uint64_t v3 = +[NSString stringWithUTF8String:*(void *)(result + 64)];
    id v4 = *(void **)(v1 + 424);
    *(void *)(v1 + 424) = v3;

    uint64_t v5 = *(const char **)(v2 + 64);
    *(void *)(v1 + 56) = *(void *)(v2 + 56);
    *(unsigned char *)(v1 + 456) = strcmp(v5, *(const char **)(v2 + 72)) == 0;
    unint64_t result = dispatch_semaphore_signal((dispatch_semaphore_t)qword_2500A8);
    uint64_t v1 = _sharedCaptureManager;
  }
  unint64_t v6 = atomic_load((unint64_t *)&qword_2500B8);
  do
  {
    unint64_t v7 = *(void *)(v1 + 32);
    if (v6 >= v7) {
      break;
    }
    unint64_t v8 = v6;
    atomic_compare_exchange_strong(&qword_2500B8, &v8, v7);
    BOOL v9 = v8 == v6;
    unint64_t v6 = v8;
  }
  while (!v9);
  return result;
}

void GTMTLCaptureManager_advanceToNextFrame()
{
  uint64_t v0 = g_guestAppClientMTL;
  uint64_t add = atomic_fetch_add((atomic_ullong *volatile)(g_guestAppClientMTL + 64), 1uLL);
  if (*(unsigned char *)(v0 + 48)) {
    GTMTLGuestAppClient_collectFrameProfilingData(v0, add);
  }
}

void GTMTLCaptureManager_notifyUnsupportedFenumWithMsg(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v8 = objc_alloc((Class)GTUnsupportedFenumInfo);
  if (a1)
  {
    BOOL v9 = +[NSString stringWithUTF8String:a1];
    if (a2) {
      goto LABEL_3;
    }
  }
  else
  {
    BOOL v9 = 0;
    if (a2)
    {
LABEL_3:
      long long v10 = +[NSString stringWithUTF8String:a2];
      if (a3) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  long long v10 = 0;
  if (a3)
  {
LABEL_4:
    long long v11 = +[NSString stringWithUTF8String:a3];
    if (a4) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  long long v11 = 0;
  if (a4)
  {
LABEL_5:
    long long v12 = +[NSString stringWithUTF8String:a4];
    id v13 = [v8 initWithFenum:v9 category:v10 customMessage:v11 customRecoverySuggestion:v12];

    if (!a3) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_17:
  id v13 = [v8 initWithFenum:v9 category:v10 customMessage:v11 customRecoverySuggestion:0];
  if (a3) {
LABEL_6:
  }

LABEL_7:
  if (a2) {

  }
  if (a1) {
  GTMTLGuestAppClient_notifyUnsupportedFenum(v13);
  }
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v15 = 0u;
  uint64_t v14 = 0x900000000;
  GTCaptureBoundaryTracker_handleTrigger((long long *)&v14);
}

void GTMTLCaptureManager_notifyUnsupportedFenum(uint64_t a1, uint64_t a2)
{
}

uint64_t GetClientMemorySize(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v6 = a1;
  id v7 = [v6 pixelFormat];
  uint64_t v16 = 0;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v8 = objc_msgSend(v6, "device", 0, 0, 0, 0);
  GTMTLGetTextureLevelInfoForDeviceWithOptions((uint64_t)v7, (uint64_t)[v6 sampleCount], (uint64_t)&v11);

  BOOL v9 = (char *)[v6 textureType];
  if ((unint64_t)v9 < 2) {
    goto LABEL_5;
  }
  if (v9 != (unsigned char *)&dword_4 + 3 || !a4)
  {
    if (a3)
    {
LABEL_6:
      a4 = v12 * a3;
      return *((void *)&v12 + 1) * a4;
    }
LABEL_5:
    a3 = v15;
    goto LABEL_6;
  }
  return *((void *)&v12 + 1) * a4;
}

id unwrapSpatialScalerDescriptor(void *a1)
{
  id v1 = a1;
  id v2 = objc_alloc_init((Class)MTLFXSpatialScalerDescriptor);
  objc_msgSend(v2, "setInputWidth:", objc_msgSend(v1, "inputWidth"));
  objc_msgSend(v2, "setInputHeight:", objc_msgSend(v1, "inputHeight"));
  objc_msgSend(v2, "setOutputWidth:", objc_msgSend(v1, "outputWidth"));
  objc_msgSend(v2, "setOutputHeight:", objc_msgSend(v1, "outputHeight"));
  objc_msgSend(v2, "setColorTextureFormat:", objc_msgSend(v1, "colorTextureFormat"));
  objc_msgSend(v2, "setOutputTextureFormat:", objc_msgSend(v1, "outputTextureFormat"));
  id v3 = [v1 colorProcessingMode];

  [v2 setColorProcessingMode:v3];

  return v2;
}

id unwrapTemporalScalerDescriptor(void *a1)
{
  id v1 = a1;
  id v2 = objc_alloc_init((Class)MTLFXTemporalScalerDescriptor);
  objc_msgSend(v2, "setColorTextureFormat:", objc_msgSend(v1, "colorTextureFormat"));
  objc_msgSend(v2, "setDepthTextureFormat:", objc_msgSend(v1, "depthTextureFormat"));
  objc_msgSend(v2, "setMotionTextureFormat:", objc_msgSend(v1, "motionTextureFormat"));
  objc_msgSend(v2, "setOutputTextureFormat:", objc_msgSend(v1, "outputTextureFormat"));
  if (objc_opt_respondsToSelector()) {
    objc_msgSend(v2, "setReactiveMaskTextureEnabled:", objc_msgSend(v1, "isReactiveMaskTextureEnabled"));
  }
  if (objc_opt_respondsToSelector()) {
    objc_msgSend(v2, "setReactiveMaskTextureFormat:", objc_msgSend(v1, "reactiveMaskTextureFormat"));
  }
  objc_msgSend(v2, "setInputWidth:", objc_msgSend(v1, "inputWidth"));
  objc_msgSend(v2, "setInputHeight:", objc_msgSend(v1, "inputHeight"));
  objc_msgSend(v2, "setOutputWidth:", objc_msgSend(v1, "outputWidth"));
  objc_msgSend(v2, "setOutputHeight:", objc_msgSend(v1, "outputHeight"));
  [v1 inputContentMinScale];
  objc_msgSend(v2, "setInputContentMinScale:");
  [v1 inputContentMaxScale];
  objc_msgSend(v2, "setInputContentMaxScale:");
  objc_msgSend(v2, "setAutoExposureEnabled:", objc_msgSend(v1, "isAutoExposureEnabled"));
  objc_msgSend(v2, "setInputContentPropertiesEnabled:", objc_msgSend(v1, "isInputContentPropertiesEnabled"));

  return v2;
}

uint64_t CaptureMTLFX()
{
  return _objc_addWillInitializeClassFunc();
}

Class WrapMTLFX(uint64_t a1, objc_class *a2)
{
  if (NSClassFromString(@"MTLFXSpatialScalerDescriptor") == a2)
  {
    id v4 = (void (*)(void))MTLFXSpatialScalerDescriptor_newSpatialScalerWithDevice;
    uint64_t v5 = (Class *)&MTLFXSpatialScalerDescriptor_newSpatialScalerWithDeviceIMP;
    id v6 = &selRef_newSpatialScalerWithDevice_;
  }
  else
  {
    Class result = NSClassFromString(@"MTLFXTemporalScalerDescriptor");
    if (result != a2) {
      return result;
    }
    id v4 = (void (*)(void))MTLFXTemporalScalerDescriptor_newTemporalScalerWithDevice;
    uint64_t v5 = (Class *)&MTLFXTemporalScalerDescriptor_newTemporalScalerWithDeviceIMP;
    id v6 = &selRef_newTemporalScalerWithDevice_;
  }
  id v7 = (objc_class *)objc_opt_class();
  InstanceMethod = class_getInstanceMethod(v7, *v6);
  Class result = (Class)method_setImplementation(InstanceMethod, v4);
  Class *v5 = result;
  return result;
}

CaptureMTLFXTemporalScaler *MTLFXTemporalScalerDescriptor_newTemporalScalerWithDevice(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if ((qword_2501C8 & 0x100) != 0)
  {
    uint64_t v16 = (CaptureMTLFXTemporalScaler *)MTLFXTemporalScalerDescriptor_newTemporalScalerWithDeviceIMP(a1, a2, v5);
  }
  else
  {
    id v6 = unwrapTemporalScalerDescriptor(a1);
    id v7 = v5;
    id v8 = (atomic_ullong *)objc_msgSend(v7, "traceContext", 0, 0, 0, 0, 0, 0);
    long long v28 = (unint64_t)v8;
    uint64_t v29 = 0;
    uint64_t add = atomic_fetch_add(v8 + 9, 1uLL);
    s();
    long long v10 = v9;
    uint64_t v11 = *v9;
    *BOOL v9 = v12;
    uint64_t v31 = v11;
    char v32 = *((unsigned char *)v9 + 8);
    __int16 v33 = 16400;
    int v34 = 0;
    char v35 = 0;
    long long v13 = (uint64_t (*)(void *, uint64_t, void *))MTLFXTemporalScalerDescriptor_newTemporalScalerWithDeviceIMP;
    long long v14 = [v7 baseObject];
    long long v15 = (void *)v13(a1, a2, v14);

    if (v15) {
      uint64_t v16 = [[CaptureMTLFXTemporalScaler alloc] initWithBaseObject:v15 captureDevice:v7];
    }
    else {
      uint64_t v16 = 0;
    }
    GTTraceEncoder_setStream((uint64_t *)&v28, (uint64_t)[(CaptureMTLFXTemporalScaler *)v16 traceStream]);
    uint64_t v17 = v29;
    *(_DWORD *)(v29 + 8) = -18431;
    char v18 = v33;
    if (v33 > 0x28uLL)
    {
      uint64_t v20 = *(void *)(*((void *)&v28 + 1) + 24);
      uint64_t v21 = HIBYTE(v33);
      ++HIBYTE(v33);
      long long v19 = GTTraceMemPool_allocateBytes(v20, add, v21 | 0x1800000000) + 16;
      char v18 = v21;
    }
    else
    {
      long long v19 = (char *)(v17 + v33);
      LOBYTE(v33) = v33 + 24;
    }
    *(unsigned char *)(v17 + 13) = v18;
    long long v22 = (uint64_t *)[v7 traceStream];
    if (v22) {
      uint64_t v23 = *v22;
    }
    else {
      uint64_t v23 = 0;
    }
    long long v24 = [(CaptureMTLFXTemporalScaler *)v16 traceStream];
    if (v24) {
      unint64_t var0 = v24->var0;
    }
    else {
      unint64_t var0 = 0;
    }
    char v26 = SaveMTLFXTemporalScalerDescriptor((uint64_t)&v28, v6);
    *(void *)long long v19 = v23;
    *((void *)v19 + 1) = var0;
    v19[16] = v26;
    *(_DWORD *)(v19 + 17) = 0;
    *((_DWORD *)v19 + 5) = 0;
    [v7 traceContext];
    *long long v10 = v31;
    *((unsigned char *)v10 + 8) = v32;
    *(unsigned char *)(v29 + 15) |= 8u;
  }
  return v16;
}

CaptureMTLFXSpatialScaler *MTLFXSpatialScalerDescriptor_newSpatialScalerWithDevice(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if ((qword_2501C8 & 0x100) != 0)
  {
    uint64_t v16 = (CaptureMTLFXSpatialScaler *)MTLFXSpatialScalerDescriptor_newSpatialScalerWithDeviceIMP(a1, a2, v5);
  }
  else
  {
    id v6 = unwrapSpatialScalerDescriptor(a1);
    id v7 = v5;
    id v8 = (atomic_ullong *)objc_msgSend(v7, "traceContext", 0, 0, 0, 0, 0, 0);
    long long v28 = (unint64_t)v8;
    uint64_t v29 = 0;
    uint64_t add = atomic_fetch_add(v8 + 9, 1uLL);
    s();
    long long v10 = v9;
    uint64_t v11 = *v9;
    *BOOL v9 = v12;
    uint64_t v31 = v11;
    char v32 = *((unsigned char *)v9 + 8);
    __int16 v33 = 16400;
    int v34 = 0;
    char v35 = 0;
    long long v13 = (uint64_t (*)(void *, uint64_t, void *))MTLFXSpatialScalerDescriptor_newSpatialScalerWithDeviceIMP;
    long long v14 = [v7 baseObject];
    long long v15 = (void *)v13(a1, a2, v14);

    if (v15) {
      uint64_t v16 = [[CaptureMTLFXSpatialScaler alloc] initWithBaseObject:v15 captureDevice:v7];
    }
    else {
      uint64_t v16 = 0;
    }
    GTTraceEncoder_setStream((uint64_t *)&v28, (uint64_t)[(CaptureMTLFXSpatialScaler *)v16 traceStream]);
    uint64_t v17 = v29;
    *(_DWORD *)(v29 + 8) = -18432;
    char v18 = v33;
    if (v33 > 0x28uLL)
    {
      uint64_t v20 = *(void *)(*((void *)&v28 + 1) + 24);
      uint64_t v21 = HIBYTE(v33);
      ++HIBYTE(v33);
      long long v19 = GTTraceMemPool_allocateBytes(v20, add, v21 | 0x1800000000) + 16;
      char v18 = v21;
    }
    else
    {
      long long v19 = (char *)(v17 + v33);
      LOBYTE(v33) = v33 + 24;
    }
    *(unsigned char *)(v17 + 13) = v18;
    long long v22 = (uint64_t *)[v7 traceStream];
    if (v22) {
      uint64_t v23 = *v22;
    }
    else {
      uint64_t v23 = 0;
    }
    long long v24 = [(CaptureMTLFXSpatialScaler *)v16 traceStream];
    if (v24) {
      unint64_t var0 = v24->var0;
    }
    else {
      unint64_t var0 = 0;
    }
    char v26 = SaveMTLFXSpatialScalerDescriptor((uint64_t)&v28, v6);
    *(void *)long long v19 = v23;
    *((void *)v19 + 1) = var0;
    v19[16] = v26;
    *(_DWORD *)(v19 + 17) = 0;
    *((_DWORD *)v19 + 5) = 0;
    [v7 traceContext];
    *long long v10 = v31;
    *((unsigned char *)v10 + 8) = v32;
    *(unsigned char *)(v29 + 15) |= 8u;
  }
  return v16;
}

uint64_t mach_exception_raise(mach_port_t a1, int a2, int a3, int a4, uint64_t a5, unsigned int a6)
{
  long long v16 = 0u;
  int v21 = 0;
  long long v20 = 0u;
  memset(&rcv_name, 0, sizeof(rcv_name));
  int v14 = 2;
  int v15 = a2;
  DWORD1(v16) = 1245184;
  DWORD2(v16) = a3;
  int v17 = 1245184;
  NDR_record_t v18 = NDR_record;
  int v19 = a4;
  if (a6 > 2) {
    return 4294966989;
  }
  int v9 = 8 * a6;
  __memcpy_chk();
  LODWORD(v2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = a6;
  mach_port_t reply_port = mig_get_reply_port();
  rcv_name.msgh_remote_port = a1;
  rcv_name.msgh_local_port = reply_port;
  rcv_name.msgh_bits = -2147478253;
  *(void *)&rcv_name.msgh_voucher_port = 0x96500000000;
  if (&_voucher_mach_msg_set)
  {
    voucher_mach_msg_set(&rcv_name);
    mach_port_t reply_port = rcv_name.msgh_local_port;
  }
  uint64_t v11 = mach_msg(&rcv_name, 3, v9 + 68, 0x2Cu, reply_port, 0, 0);
  uint64_t v6 = v11;
  if ((v11 - 268435458) <= 0xE && ((1 << (v11 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(rcv_name.msgh_local_port);
    return v6;
  }
  if (v11)
  {
    mig_dealloc_reply_port(rcv_name.msgh_local_port);
    return v6;
  }
  if (rcv_name.msgh_id == 71)
  {
    uint64_t v6 = 4294966988;
LABEL_19:
    mach_msg_destroy(&rcv_name);
    return v6;
  }
  if (rcv_name.msgh_id != 2505)
  {
    uint64_t v6 = 4294966995;
    goto LABEL_19;
  }
  uint64_t v6 = 4294966996;
  if ((rcv_name.msgh_bits & 0x80000000) != 0) {
    goto LABEL_19;
  }
  if (rcv_name.msgh_size != 36) {
    goto LABEL_19;
  }
  if (rcv_name.msgh_remote_port) {
    goto LABEL_19;
  }
  uint64_t v6 = v16;
  if (v16) {
    goto LABEL_19;
  }
  return v6;
}

uint64_t mach_exception_raise_state(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9)
{
  mach_port_t v9 = __chkstk_darwin(a1, a2);
  memset(v36, 0, 480);
  memset(&rcv_name, 0, sizeof(rcv_name));
  NDR_record_t v35 = NDR_record;
  LODWORD(v36[0]) = v15;
  if (v10 <= 2)
  {
    long long v16 = v14;
    unsigned int v17 = v13;
    NDR_record_t v18 = v12;
    int v19 = v11;
    unsigned int v20 = v10;
    mach_port_t v21 = v9;
    uint64_t v22 = 8 * v10;
    __memcpy_chk();
    DWORD1(v36[0]) = v20;
    uint64_t v23 = (char *)&rcv_name + v22;
    *(_DWORD *)((char *)&rcv_name + v22 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *v19;
    if (v17 <= 0x510)
    {
      char v26 = v23 - 16;
      int v27 = v22 + 4 * v17;
      memcpy(v23 + 48, v18, 4 * v17);
      *((_DWORD *)v26 + 15) = v17;
      mach_port_t reply_port = mig_get_reply_port();
      rcv_name.msgh_remote_port = v21;
      rcv_name.msgh_local_port = reply_port;
      rcv_name.msgh_bits = 5395;
      *(void *)&rcv_name.msgh_voucher_port = 0x96600000000;
      if (&_voucher_mach_msg_set)
      {
        voucher_mach_msg_set(&rcv_name);
        mach_port_t reply_port = rcv_name.msgh_local_port;
      }
      uint64_t v29 = mach_msg(&rcv_name, 3, v27 + 48, 0x1474u, reply_port, 0, 0);
      uint64_t v24 = v29;
      if ((v29 - 268435458) <= 0xE && ((1 << (v29 - 2)) & 0x4003) != 0)
      {
        mig_put_reply_port(rcv_name.msgh_local_port);
        return v24;
      }
      if (v29)
      {
        mig_dealloc_reply_port(rcv_name.msgh_local_port);
        return v24;
      }
      if (rcv_name.msgh_id == 71)
      {
        uint64_t v24 = 4294966988;
      }
      else if (rcv_name.msgh_id == 2506)
      {
        if ((rcv_name.msgh_bits & 0x80000000) == 0)
        {
          if (rcv_name.msgh_size - 5229 <= 0xFFFFEBBE)
          {
            if (rcv_name.msgh_remote_port) {
              BOOL v30 = 1;
            }
            else {
              BOOL v30 = LODWORD(v36[0]) == 0;
            }
            if (!v30 && rcv_name.msgh_size == 36) {
              uint64_t v24 = LODWORD(v36[0]);
            }
            else {
              uint64_t v24 = 4294966996;
            }
            goto LABEL_29;
          }
          if (!rcv_name.msgh_remote_port)
          {
            uint64_t v24 = LODWORD(v36[0]);
            if (LODWORD(v36[0])) {
              goto LABEL_29;
            }
            int v32 = DWORD2(v36[0]);
            if (DWORD2(v36[0]) <= 0x510 && DWORD2(v36[0]) <= (rcv_name.msgh_size - 44) >> 2)
            {
              size_t v33 = 4 * DWORD2(v36[0]);
              if (rcv_name.msgh_size == 4 * DWORD2(v36[0]) + 44)
              {
                *int v19 = DWORD1(v36[0]);
                memcpy(v16, (char *)v36 + 12, v33);
                uint64_t v24 = 0;
                *a9 = v32;
                return v24;
              }
            }
          }
        }
        uint64_t v24 = 4294966996;
      }
      else
      {
        uint64_t v24 = 4294966995;
      }
LABEL_29:
      mach_msg_destroy(&rcv_name);
      return v24;
    }
  }
  return 4294966989;
}

uint64_t mach_exception_raise_state_identity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, void *a10, _DWORD *a11)
{
  mach_port_t v11 = __chkstk_darwin(a1, a2);
  long long v67 = 0u;
  long long v68 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v37 = 0u;
  memset(&rcv_name, 0, sizeof(rcv_name));
  int v35 = 2;
  int v36 = v15;
  DWORD1(v37) = 1245184;
  DWORD2(v37) = v16;
  int v38 = 1245184;
  NDR_record_t v39 = NDR_record;
  int v40 = v17;
  if (v12 <= 2)
  {
    NDR_record_t v18 = v14;
    int v19 = v13;
    unsigned int v20 = v12;
    mach_port_t v21 = v11;
    uint64_t v22 = 8 * v12;
    __memcpy_chk();
    LODWORD(v41) = v20;
    uint64_t v23 = (char *)&rcv_name + v22;
    *(_DWORD *)((char *)&rcv_name + v22 + 68) = *v19;
    if (a9 <= 0x510)
    {
      char v26 = v23 - 16;
      int v27 = v22 + 4 * a9;
      memcpy(v23 + 76, v18, 4 * a9);
      *((_DWORD *)v26 + 22) = a9;
      mach_port_t reply_port = mig_get_reply_port();
      rcv_name.msgh_remote_port = v21;
      rcv_name.msgh_local_port = reply_port;
      rcv_name.msgh_bits = -2147478253;
      *(void *)&rcv_name.msgh_voucher_port = 0x96700000000;
      if (&_voucher_mach_msg_set)
      {
        voucher_mach_msg_set(&rcv_name);
        mach_port_t reply_port = rcv_name.msgh_local_port;
      }
      uint64_t v29 = mach_msg(&rcv_name, 3, v27 + 76, 0x1474u, reply_port, 0, 0);
      uint64_t v24 = v29;
      if ((v29 - 268435458) <= 0xE && ((1 << (v29 - 2)) & 0x4003) != 0)
      {
        mig_put_reply_port(rcv_name.msgh_local_port);
        return v24;
      }
      if (v29)
      {
        mig_dealloc_reply_port(rcv_name.msgh_local_port);
        return v24;
      }
      if (rcv_name.msgh_id == 71)
      {
        uint64_t v24 = 4294966988;
      }
      else if (rcv_name.msgh_id == 2507)
      {
        if ((rcv_name.msgh_bits & 0x80000000) == 0)
        {
          if (rcv_name.msgh_size - 5229 <= 0xFFFFEBBE)
          {
            if (rcv_name.msgh_remote_port) {
              BOOL v30 = 1;
            }
            else {
              BOOL v30 = v37 == 0;
            }
            if (!v30 && rcv_name.msgh_size == 36) {
              uint64_t v24 = v37;
            }
            else {
              uint64_t v24 = 4294966996;
            }
            goto LABEL_29;
          }
          if (!rcv_name.msgh_remote_port)
          {
            uint64_t v24 = v37;
            if (v37) {
              goto LABEL_29;
            }
            int v32 = DWORD2(v37);
            if (DWORD2(v37) <= 0x510 && DWORD2(v37) <= (rcv_name.msgh_size - 44) >> 2)
            {
              size_t v33 = 4 * DWORD2(v37);
              if (rcv_name.msgh_size == 4 * DWORD2(v37) + 44)
              {
                *int v19 = DWORD1(v37);
                memcpy(a10, (char *)&v37 + 12, v33);
                uint64_t v24 = 0;
                *a11 = v32;
                return v24;
              }
            }
          }
        }
        uint64_t v24 = 4294966996;
      }
      else
      {
        uint64_t v24 = 4294966995;
      }
LABEL_29:
      mach_msg_destroy(&rcv_name);
      return v24;
    }
  }
  return 4294966989;
}

void GTMTLTelemetryEnvironment_init()
{
  uint64_t v0 = getenv("MTLTELEMETRY_REPORT_FREQUENCY");
  if (v0) {
    float v1 = strtof(v0, 0);
  }
  else {
    float v1 = 0.2;
  }
  GT_TELEMETRY_ENV = LODWORD(v1);
}

void GTTelemetry_init()
{
  if (GTTelemetry_init::onceToken != -1) {
    dispatch_once(&GTTelemetry_init::onceToken, &__block_literal_global_10928);
  }
}

void GTTelemetry_addLayer(void *a1)
{
  id v1 = [a1 streamReference];

  GTTelemetry_addStreamRef((uint64_t)v1);
}

void GTTelemetry_addStreamRef(uint64_t a1)
{
  id v2 = (std::mutex *)(telemetry + 8);
  std::mutex::lock((std::mutex *)(telemetry + 8));
  id v3 = (void *)telemetry;
  id v5 = *(void **)(telemetry + 208);
  unint64_t v4 = *(void *)(telemetry + 216);
  if ((unint64_t)v5 >= v4)
  {
    id v7 = *(void **)(telemetry + 200);
    unint64_t v8 = 0xF0B7672A07A44C6BLL * (v5 - v7) + 1;
    if (v8 > 0x7A44C6AFC2DD9CLL) {
      abort();
    }
    unint64_t v9 = 0xF0B7672A07A44C6BLL * ((uint64_t)(v4 - (void)v7) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3D226357E16ECELL) {
      unint64_t v10 = 0x7A44C6AFC2DD9CLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0x7A44C6AFC2DD9CLL) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      mach_port_t v11 = (char *)operator new(536 * v10);
    }
    else
    {
      mach_port_t v11 = 0;
    }
    unsigned int v12 = &v11[8 * (v5 - v7)];
    unsigned int v13 = &v11[536 * v10];
    uint64_t v6 = v12 + 536;
    *(void *)unsigned int v12 = a1;
    bzero(v12 + 8, 0x210uLL);
    if (v5 != v7)
    {
      do
      {
        v5 -= 67;
        v12 -= 536;
        memcpy(v12, v5, 0x218uLL);
      }
      while (v5 != v7);
      id v5 = (void *)v3[25];
    }
    v3[25] = v12;
    v3[26] = v6;
    v3[27] = v13;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    void *v5 = a1;
    uint64_t v6 = v5 + 67;
    bzero(v5 + 1, 0x210uLL);
  }
  v3[26] = v6;

  std::mutex::unlock(v2);
}

void GTTelemetry_addDevice(void *a1)
{
  id v14 = a1;
  id v1 = [v14 streamReference];
  id v2 = (std::mutex *)(telemetry + 136);
  std::mutex::lock((std::mutex *)(telemetry + 136));
  id v3 = (void *)telemetry;
  id v5 = *(char **)(telemetry + 256);
  unint64_t v4 = *(void *)(telemetry + 264);
  if ((unint64_t)v5 >= v4)
  {
    id v7 = *(char **)(telemetry + 248);
    unint64_t v8 = 0xF83E0F83E0F83E1 * ((v5 - v7) >> 4) + 1;
    if (v8 > 0x7C1F07C1F07C1FLL) {
      abort();
    }
    unint64_t v9 = 0xF83E0F83E0F83E1 * ((uint64_t)(v4 - (void)v7) >> 4);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3E0F83E0F83E0FLL) {
      unint64_t v10 = 0x7C1F07C1F07C1FLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0x7C1F07C1F07C1FLL) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      mach_port_t v11 = (char *)operator new(528 * v10);
    }
    else
    {
      mach_port_t v11 = 0;
    }
    unsigned int v12 = &v11[16 * ((v5 - v7) >> 4)];
    unsigned int v13 = &v11[528 * v10];
    uint64_t v6 = v12 + 528;
    *(void *)unsigned int v12 = v1;
    bzero(v12 + 8, 0x208uLL);
    if (v5 != v7)
    {
      do
      {
        v5 -= 528;
        v12 -= 528;
        memcpy(v12, v5, 0x210uLL);
      }
      while (v5 != v7);
      id v5 = (char *)v3[31];
    }
    v3[31] = v12;
    v3[32] = v6;
    v3[33] = v13;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)id v5 = v1;
    uint64_t v6 = v5 + 528;
    bzero(v5 + 8, 0x208uLL);
  }
  v3[32] = v6;
  std::mutex::unlock(v2);
}

void GTTelemetry_addCommandQueue(void *a1)
{
  id v14 = a1;
  id v1 = [v14 streamReference];
  id v2 = (std::mutex *)(telemetry + 72);
  std::mutex::lock((std::mutex *)(telemetry + 72));
  id v3 = (void *)telemetry;
  id v5 = *(char **)(telemetry + 232);
  unint64_t v4 = *(void *)(telemetry + 240);
  if ((unint64_t)v5 >= v4)
  {
    id v7 = *(char **)(telemetry + 224);
    unint64_t v8 = 0xF83E0F83E0F83E1 * ((v5 - v7) >> 4) + 1;
    if (v8 > 0x7C1F07C1F07C1FLL) {
      abort();
    }
    unint64_t v9 = 0xF83E0F83E0F83E1 * ((uint64_t)(v4 - (void)v7) >> 4);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3E0F83E0F83E0FLL) {
      unint64_t v10 = 0x7C1F07C1F07C1FLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0x7C1F07C1F07C1FLL) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      mach_port_t v11 = (char *)operator new(528 * v10);
    }
    else
    {
      mach_port_t v11 = 0;
    }
    unsigned int v12 = &v11[16 * ((v5 - v7) >> 4)];
    unsigned int v13 = &v11[528 * v10];
    uint64_t v6 = v12 + 528;
    *(void *)unsigned int v12 = v1;
    bzero(v12 + 8, 0x208uLL);
    if (v5 != v7)
    {
      do
      {
        v5 -= 528;
        v12 -= 528;
        memcpy(v12, v5, 0x210uLL);
      }
      while (v5 != v7);
      id v5 = (char *)v3[28];
    }
    v3[28] = v12;
    v3[29] = v6;
    v3[30] = v13;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)id v5 = v1;
    uint64_t v6 = v5 + 528;
    bzero(v5 + 8, 0x208uLL);
  }
  v3[29] = v6;
  std::mutex::unlock(v2);
}

void GTTelemetry_removeLayer(void *a1)
{
  id v1 = [a1 streamReference];

  GTTelemetry_removeStreamRef((uint64_t)v1);
}

void GTTelemetry_removeStreamRef(uint64_t a1)
{
  id v2 = (std::mutex *)(telemetry + 8);
  std::mutex::lock((std::mutex *)(telemetry + 8));
  uint64_t v3 = telemetry;
  unint64_t v4 = *(char **)(telemetry + 200);
  id v5 = *(char **)(telemetry + 208);
  if (v5 != v4)
  {
    unint64_t v6 = (v5 - v4) / 536;
    if (v6 <= 1) {
      unint64_t v6 = 1;
    }
    while (*(void *)v4 != a1)
    {
      v4 += 536;
      if (!--v6) {
        goto LABEL_8;
      }
    }
    memcpy(v4, v5 - 536, 0x218uLL);
    *(void *)(v3 + 208) -= 536;
  }
LABEL_8:

  std::mutex::unlock(v2);
}

void GTTelemetry_removeCommandQueue(void *a1)
{
  id v1 = [a1 streamReference];
  id v2 = (std::mutex *)(telemetry + 72);
  std::mutex::lock((std::mutex *)(telemetry + 72));
  uint64_t v3 = telemetry;
  unint64_t v4 = *(id **)(telemetry + 224);
  id v5 = *(char **)(telemetry + 232);
  if (v5 != (char *)v4)
  {
    unint64_t v6 = (v5 - (char *)v4) / 528;
    if (v6 <= 1) {
      unint64_t v6 = 1;
    }
    while (*v4 != v1)
    {
      v4 += 66;
      if (!--v6) {
        goto LABEL_8;
      }
    }
    memcpy(v4, v5 - 528, 0x210uLL);
    *(void *)(v3 + 232) -= 528;
  }
LABEL_8:

  std::mutex::unlock(v2);
}

void GTTelemetry_trackPresent(void *a1)
{
  id v1 = a1;
  id v2 = [v1 layer];
  id v3 = [v2 streamReference];

  if (objc_opt_respondsToSelector())
  {
    unint64_t v4 = DEVICEOBJECT(v1);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = __GTTelemetry_trackPresent_block_invoke;
    v5[3] = &__block_descriptor_40_e23_v16__0___MTLDrawable__8l;
    v5[4] = v3;
    [v4 addPresentedHandler:v5];
  }
}

void GTTelemetry_trackStreamRefPresent(uint64_t a1, CFTimeInterval a2)
{
  unint64_t v4 = (std::mutex *)(telemetry + 8);
  std::mutex::lock((std::mutex *)(telemetry + 8));
  for (uint64_t i = *(void *)(telemetry + 200); i != *(void *)(telemetry + 208); i += 536)
  {
    if (*(void *)i == a1)
    {
      uint64_t v6 = *(void *)(i + 8);
      *(void *)(i + 8) = v6 + 1;
      if (a2 <= 0.0) {
        a2 = CACurrentMediaTime();
      }
      float v7 = (a2 - *(double *)(i + 24)) * 1000.0;
      CHistoryRecord::Add(i + 32, v6, v7);
      *(CFTimeInterval *)(i + 24) = a2;
      break;
    }
  }

  std::mutex::unlock(v4);
}

uint64_t CHistoryRecord::Add(uint64_t this, unsigned int a2, float a3)
{
  int v3 = 0;
  unsigned int v4 = a2 % 0x78;
  float v5 = 999.99;
  float v6 = 0.0;
  if (a3 > 999.99 || a3 < 0.0) {
    a3 = 0.0;
  }
  *(_DWORD *)this = v4;
  uint64_t v8 = this + 4 * v4;
  float v9 = *(float *)(this + 8) + (float)(a3 - *(float *)(v8 + 16));
  *(float *)(this + 4) = a3;
  *(float *)(this + 8) = v9;
  *(float *)(v8 + 16) = a3;
  *(float *)(this + 12) = v9 / 120.0;
  for (uint64_t i = 16; i != 496; i += 4)
  {
    float v11 = *(float *)(this + i);
    float v12 = fminf(v5, v11);
    float v13 = fmaxf(v6, v11);
    if (v11 > 0.0)
    {
      float v5 = v12;
      float v6 = v13;
      ++v3;
    }
  }
  float v14 = 0.0;
  if (v3) {
    float v14 = v5;
  }
  else {
    float v6 = 0.0;
  }
  *(float *)(this + 50mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v6;
  *(float *)(this + 496) = v14;
  return this;
}

void GTTelemetry_trackCommit(void *a1)
{
  id v1 = a1;
  id v2 = [v1 device];
  id v3 = [v2 streamReference];

  unsigned int v4 = [v1 commandQueue];
  id v5 = [v4 streamReference];

  float v6 = DEVICEOBJECT(v1);

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _OWORD v7[2] = __GTTelemetry_trackCommit_block_invoke;
  v7[3] = &__block_descriptor_48_e28_v16__0___MTLCommandBuffer__8l;
  _OWORD v7[4] = v3;
  _OWORD v7[5] = v5;
  [v6 addCompletedHandler:v7];
}

void GTTelemetry_stats(char *a1@<X8>)
{
  bzero(a1, 0x4880uLL);
  id v2 = (std::mutex *)(telemetry + 8);
  std::mutex::lock((std::mutex *)(telemetry + 8));
  uint64_t v3 = *(void *)(telemetry + 200);
  unint64_t v4 = 64;
  if (0xF0B7672A07A44C6BLL * ((*(void *)(telemetry + 208) - v3) >> 3) < 0x40) {
    unint64_t v4 = 0xF0B7672A07A44C6BLL * ((*(void *)(telemetry + 208) - v3) >> 3);
  }
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 32 * v4;
    do
    {
      float v7 = &a1[v5];
      uint64_t v8 = *(void *)(v3 + 8);
      *(void *)float v7 = *(void *)v3;
      *((void *)v7 + 3) = v8;
      *((_DWORD *)v7 + 5) = v8 - *(_DWORD *)(v3 + 16);
      *((_DWORD *)v7 + 2) = *(_DWORD *)(v3 + 44);
      *(void *)(v7 + 12) = *(void *)(v3 + 528);
      *(void *)(v3 + 16) = v8;
      v5 += 32;
      v3 += 536;
    }
    while (v6 != v5);
  }
  std::mutex::unlock(v2);
  float v9 = (std::mutex *)(telemetry + 72);
  std::mutex::lock((std::mutex *)(telemetry + 72));
  uint64_t v10 = *(void *)(telemetry + 224);
  uint64_t v11 = 512;
  if ((unint64_t)(0xF83E0F83E0F83E1 * ((*(void *)(telemetry + 232) - v10) >> 4)) < 0x200) {
    uint64_t v11 = 0xF83E0F83E0F83E1 * ((*(void *)(telemetry + 232) - v10) >> 4);
  }
  if (v11)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 32 * v11;
    do
    {
      float v14 = &a1[v12];
      uint64_t v15 = *(void *)(v10 + 8);
      *((void *)v14 + 256) = *(void *)v10;
      *((void *)v14 + 259) = v15;
      *((_DWORD *)v14 + 517) = v15 - *(_DWORD *)(v10 + 16);
      *((_DWORD *)v14 + 514) = *(_DWORD *)(v10 + 36);
      *(void *)&a1[v12 + 2060] = *(void *)(v10 + 520);
      *(void *)(v10 + 16) = v15;
      v12 += 32;
      v10 += 528;
    }
    while (v13 != v12);
  }
  std::mutex::unlock(v9);
  int v16 = (std::mutex *)(telemetry + 136);
  std::mutex::lock((std::mutex *)(telemetry + 136));
  uint64_t v17 = *(void *)(telemetry + 248);
  uint64_t v18 = 4;
  if ((unint64_t)(0xF83E0F83E0F83E1 * ((*(void *)(telemetry + 256) - v17) >> 4)) < 4) {
    uint64_t v18 = 0xF83E0F83E0F83E1 * ((*(void *)(telemetry + 256) - v17) >> 4);
  }
  if (v18)
  {
    uint64_t v19 = 0;
    uint64_t v20 = 32 * v18;
    do
    {
      mach_port_t v21 = &a1[v19];
      uint64_t v22 = *(void *)(v17 + 8);
      *((void *)v21 + 2304) = *(void *)v17;
      *((void *)v21 + 2307) = v22;
      *(_DWORD *)&a1[v19 + 18452] = v22 - *(_DWORD *)(v17 + 16);
      *(_DWORD *)&a1[v19 + 18440] = *(_DWORD *)(v17 + 36);
      *(void *)&a1[v19 + 18444] = *(void *)(v17 + 520);
      *(void *)(v17 + 16) = v22;
      v19 += 32;
      v17 += 528;
    }
    while (v20 != v19);
  }
  std::mutex::unlock(v16);
  ++*(void *)telemetry;
}

void *GTMTLSMContext_getObject(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v8 = a2;
  entry = find_entry(*a1, &v8, 8uLL, 0);
  if (!*entry) {
    return 0;
  }
  uint64_t v5 = *(void **)(*entry + 32);
  if (!v5) {
    return 0;
  }
  Class result = 0;
  do
  {
    if (v5[2] > a3 || (float v7 = v5, v5[3] <= a3))
    {
      if (result) {
        return result;
      }
      float v7 = 0;
    }
    uint64_t v5 = (void *)v5[4];
    Class result = v7;
  }
  while (v5);
  return result;
}

uint64_t GTMTLSMContext_lastObject(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = a2;
  entry = find_entry(*a1, &v6, 8uLL, 0);
  if (!*entry) {
    return 0;
  }
  for (uint64_t result = *(void *)(*entry + 32); result; uint64_t result = *(void *)(result + 32))
  {
    if (*(void *)(result + 16) <= a3) {
      break;
    }
  }
  return result;
}

uint64_t GTMTLSMContext_getDrawableTexture(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v9 = *(void *)(a2 + 48);
  entry = find_entry(*a1, &v9, 8uLL, 0);
  if (!*entry) {
    return 0;
  }
  uint64_t v6 = *(void *)(*entry + 32);
  if (!v6) {
    return 0;
  }
  uint64_t result = 0;
  do
  {
    if (*(void *)(a2 + 16) > a3 || (uint64_t v8 = v6, *(void *)(v6 + 24) <= a3))
    {
      if (result) {
        return result;
      }
      uint64_t v8 = 0;
    }
    uint64_t v6 = *(void *)(v6 + 32);
    uint64_t result = v8;
  }
  while (v6);
  return result;
}

uint64_t GTMTLSMContext_getObjectTypeArray(uint64_t a1, int a2)
{
  if ((a2 - 2) > 0x51 || byte_1DA584[a2 - 2] < 0) {
    return 0;
  }
  else {
    return *(void *)(a1 + 8 * byte_1DA584[a2 - 2] + 8);
  }
}

_DWORD *GTMTLSMContext_getObjects(_DWORD *result, unint64_t a2, apr_array_header_t *arr)
{
  int v3 = result[3];
  if (v3 >= 1)
  {
    uint64_t v6 = result;
    for (uint64_t i = 0; i < v3; ++i)
    {
      uint64_t v8 = *(void **)(*((void *)v6 + 3) + 8 * i);
      if (v8[2] > a2) {
        break;
      }
      if (v8[3] > a2)
      {
        uint64_t v9 = 0;
        do
        {
          if (v8[2] > a2 || (uint64_t v10 = v8, v8[3] <= a2))
          {
            if (v9) {
              break;
            }
            uint64_t v10 = 0;
          }
          uint64_t v8 = (void *)v8[4];
          uint64_t v9 = v10;
        }
        while (v8);
        uint64_t result = apr_array_push(arr);
        *(void *)uint64_t result = v9;
        int v3 = *((_DWORD *)v6 + 3);
      }
    }
  }
  return result;
}

_DWORD *GTMTLSMContext_getBuffers(uint64_t a1, unint64_t a2, apr_array_header_t *a3)
{
  return GTMTLSMContext_getObjects(*(_DWORD **)(a1 + 8), a2, a3);
}

_DWORD *GTMTLSMContext_getComputePipelineStates(uint64_t a1, unint64_t a2, apr_array_header_t *a3)
{
  return GTMTLSMContext_getObjects(*(_DWORD **)(a1 + 40), a2, a3);
}

_DWORD *GTMTLSMContext_getDepthStencilStates(uint64_t a1, unint64_t a2, apr_array_header_t *a3)
{
  return GTMTLSMContext_getObjects(*(_DWORD **)(a1 + 152), a2, a3);
}

_DWORD *GTMTLSMContext_getDrawables(uint64_t a1, unint64_t a2, apr_array_header_t *a3)
{
  return GTMTLSMContext_getObjects(*(_DWORD **)(a1 + 240), a2, a3);
}

_DWORD *GTMTLSMContext_getEvents(uint64_t a1, unint64_t a2, apr_array_header_t *a3)
{
  return GTMTLSMContext_getObjects(*(_DWORD **)(a1 + 120), a2, a3);
}

_DWORD *GTMTLSMContext_getLateEvalEvents(uint64_t a1, unint64_t a2, apr_array_header_t *a3)
{
  return GTMTLSMContext_getObjects(*(_DWORD **)(a1 + 136), a2, a3);
}

_DWORD *GTMTLSMContext_getSharedEvents(uint64_t a1, unint64_t a2, apr_array_header_t *a3)
{
  return GTMTLSMContext_getObjects(*(_DWORD **)(a1 + 128), a2, a3);
}

_DWORD *GTMTLSMContext_getFences(uint64_t a1, unint64_t a2, apr_array_header_t *a3)
{
  return GTMTLSMContext_getObjects(*(_DWORD **)(a1 + 112), a2, a3);
}

_DWORD *GTMTLSMContext_getFunctions(uint64_t a1, unint64_t a2, apr_array_header_t *a3)
{
  return GTMTLSMContext_getObjects(*(_DWORD **)(a1 + 224), a2, a3);
}

_DWORD *GTMTLSMContext_getHeaps(uint64_t a1, unint64_t a2, apr_array_header_t *a3)
{
  return GTMTLSMContext_getObjects(*(_DWORD **)(a1 + 80), a2, a3);
}

_DWORD *GTMTLSMContext_getIndirectCommandBuffers(uint64_t a1, unint64_t a2, apr_array_header_t *a3)
{
  return GTMTLSMContext_getObjects(*(_DWORD **)(a1 + 48), a2, a3);
}

_DWORD *GTMTLSMContext_getIndirectRenderCommands(uint64_t a1, unint64_t a2, apr_array_header_t *a3)
{
  return GTMTLSMContext_getObjects(*(_DWORD **)(a1 + 168), a2, a3);
}

_DWORD *GTMTLSMContext_getIndirectComputeCommands(uint64_t a1, unint64_t a2, apr_array_header_t *a3)
{
  return GTMTLSMContext_getObjects(*(_DWORD **)(a1 + 176), a2, a3);
}

_DWORD *GTMTLSMContext_getLibraries(uint64_t a1, unint64_t a2, apr_array_header_t *a3)
{
  return GTMTLSMContext_getObjects(*(_DWORD **)(a1 + 88), a2, a3);
}

void *GTMTLSMContext_lastLibraries(void *result, unint64_t a2, apr_array_header_t *arr)
{
  uint64_t v3 = result[11];
  if (*(int *)(v3 + 12) >= 1)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = *(void *)(*(void *)(v3 + 24) + 8 * v6);
      if (*(void *)(v7 + 16) > a2) {
        break;
      }
      uint64_t result = apr_array_push(arr);
      void *result = v7;
      ++v6;
    }
    while (v6 < *(int *)(v3 + 12));
  }
  return result;
}

_DWORD *GTMTLSMContext_getDynamicLibraries(uint64_t a1, unint64_t a2, apr_array_header_t *a3)
{
  return GTMTLSMContext_getObjects(*(_DWORD **)(a1 + 96), a2, a3);
}

_DWORD *GTMTLSMContext_getPipelineLibraries(uint64_t a1, unint64_t a2, apr_array_header_t *a3)
{
  return GTMTLSMContext_getObjects(*(_DWORD **)(a1 + 104), a2, a3);
}

_DWORD *GTMTLSMContext_getRenderPipelineStates(uint64_t a1, unint64_t a2, apr_array_header_t *a3)
{
  return GTMTLSMContext_getObjects(*(_DWORD **)(a1 + 32), a2, a3);
}

_DWORD *GTMTLSMContext_getSamplerStates(uint64_t a1, unint64_t a2, apr_array_header_t *a3)
{
  return GTMTLSMContext_getObjects(*(_DWORD **)(a1 + 24), a2, a3);
}

_DWORD *GTMTLSMContext_getTextures(uint64_t a1, unint64_t a2, apr_array_header_t *a3)
{
  return GTMTLSMContext_getObjects(*(_DWORD **)(a1 + 16), a2, a3);
}

_DWORD *GTMTLSMContext_getIOCommandQueues(uint64_t a1, unint64_t a2, apr_array_header_t *a3)
{
  return GTMTLSMContext_getObjects(*(_DWORD **)(a1 + 192), a2, a3);
}

_DWORD *GTMTLSMContext_getCommandQueues(uint64_t a1, unint64_t a2, apr_array_header_t *a3)
{
  return GTMTLSMContext_getObjects(*(_DWORD **)(a1 + 184), a2, a3);
}

_DWORD *GTMTLSMContext_getRasterizationRateMaps(uint64_t a1, unint64_t a2, apr_array_header_t *a3)
{
  return GTMTLSMContext_getObjects(*(_DWORD **)(a1 + 200), a2, a3);
}

_DWORD *GTMTLSMContext_getCounterSampleBuffers(uint64_t a1, unint64_t a2, apr_array_header_t *a3)
{
  return GTMTLSMContext_getObjects(*(_DWORD **)(a1 + 160), a2, a3);
}

_DWORD *GTMTLSMContext_getFilters(uint64_t a1, unint64_t a2, apr_array_header_t *a3)
{
  return GTMTLSMContext_getObjects(*(_DWORD **)(a1 + 216), a2, a3);
}

_DWORD *GTMTLSMContext_getResourceGroups(uint64_t a1, unint64_t a2, apr_array_header_t *a3)
{
  return GTMTLSMContext_getObjects(*(_DWORD **)(a1 + 208), a2, a3);
}

_DWORD *GTMTLSMContext_getMotionPipelineStates(uint64_t a1, unint64_t a2, apr_array_header_t *a3)
{
  return GTMTLSMContext_getObjects(*(_DWORD **)(a1 + 144), a2, a3);
}

_DWORD *GTMTLSMContext_getAccelerationStructures(uint64_t a1, unint64_t a2, apr_array_header_t *a3)
{
  return GTMTLSMContext_getObjects(*(_DWORD **)(a1 + 72), a2, a3);
}

_DWORD *GTMTLSMContext_getIntersectionFunctionTables(uint64_t a1, unint64_t a2, apr_array_header_t *a3)
{
  return GTMTLSMContext_getObjects(*(_DWORD **)(a1 + 64), a2, a3);
}

_DWORD *GTMTLSMContext_getVisibleFunctionTables(uint64_t a1, unint64_t a2, apr_array_header_t *a3)
{
  return GTMTLSMContext_getObjects(*(_DWORD **)(a1 + 56), a2, a3);
}

_DWORD *GTMTLSMContext_getResidencySets(uint64_t a1, unint64_t a2, apr_array_header_t *a3)
{
  return GTMTLSMContext_getObjects(*(_DWORD **)(a1 + 280), a2, a3);
}

_DWORD *GTMTLSMContext_getFunctionHandles(uint64_t a1, unint64_t a2, apr_array_header_t *a3)
{
  return GTMTLSMContext_getObjects(*(_DWORD **)(a1 + 256), a2, a3);
}

_DWORD *GTMTLSMContext_getSpatialScalers(uint64_t a1, unint64_t a2, apr_array_header_t *a3)
{
  return GTMTLSMContext_getObjects(*(_DWORD **)(a1 + 264), a2, a3);
}

_DWORD *GTMTLSMContext_getTemporalScalers(uint64_t a1, unint64_t a2, apr_array_header_t *a3)
{
  return GTMTLSMContext_getObjects(*(_DWORD **)(a1 + 272), a2, a3);
}

void *GTMTLSMContext_getRootResource(uint64_t *a1, void *Object, unint64_t a3)
{
  while (1)
  {
    int v6 = *(_DWORD *)Object;
    if (*(_DWORD *)Object == 16) {
      break;
    }
    if (v6 == 80)
    {
      uint64_t v7 = Object[17];
      if (v7) {
        goto LABEL_11;
      }
      uint64_t v7 = Object[18];
      if (v7) {
        goto LABEL_11;
      }
    }
    else if (v6 != 22)
    {
      return Object;
    }
    uint64_t v7 = Object[6];
    if (!v7) {
      return Object;
    }
LABEL_11:
    uint64_t Object = GTMTLSMContext_getObject(a1, v7, a3);
  }
  uint64_t v7 = Object[6];
  if (v7) {
    goto LABEL_11;
  }
  uint64_t v7 = Object[18];
  if (v7) {
    goto LABEL_11;
  }
  return Object;
}

apr_hash_index_t *GTMTLSMContext_removeDuplicatesFromChildrenMap(uint64_t a1)
{
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = a1;
  *(_DWORD *)(a1 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0;
  uint64_t result = apr_hash_next((apr_hash_index_t *)(a1 + 16));
  if (result)
  {
    id v2 = result;
    do
    {
      uint64_t v3 = *(void *)(*((void *)v2 + 1) + 32);
      size_t v4 = *(unsigned int *)(v3 + 12);
      if ((int)v4 >= 2)
      {
        qsort(*(void **)(v3 + 24), v4, *(int *)(v3 + 8), (int (__cdecl *)(const void *, const void *))GTMTLSMObjectPtr_compare);
        uint64_t v5 = *(unsigned int *)(v3 + 12);
        if ((int)v5 < 2)
        {
          int v10 = 1;
        }
        else
        {
          int v6 = *(uint64_t **)(v3 + 24);
          uint64_t v7 = v6 + 1;
          uint64_t v8 = *v6;
          uint64_t v9 = v5 - 1;
          int v10 = 1;
          do
          {
            uint64_t v11 = v8;
            uint64_t v8 = *v7;
            if (*v7 != v11)
            {
              uint64_t v12 = v6[v10];
              v6[v10++] = v8;
              *uint64_t v7 = v12;
            }
            ++v7;
            --v9;
          }
          while (v9);
        }
        *(_DWORD *)(v3 + 12) = v10;
      }
      uint64_t result = apr_hash_next(v2);
      id v2 = result;
    }
    while (result);
  }
  return result;
}

uint64_t GTMTLSMObjectPtr_compare(void *a1, void *a2)
{
  if (*a1 < *a2) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *a1 != *a2;
  }
}

void GTMTLSMContext_buildResourceChildrenMap2(uint64_t *a1, uint64_t a2, unint64_t a3, apr_hash_t *a4)
{
  int v6 = *(apr_pool_t **)a4;
  uint64_t v7 = apr_array_make(*(apr_pool_t **)a2, 4, 8);
  if (*(int *)(a2 + 12) >= 1)
  {
    uint64_t v8 = v7;
    uint64_t v9 = 0;
    do
    {
      uint64_t v10 = *(void *)(*(void *)(a2 + 24) + 8 * v9);
      uint64_t v11 = *find_entry((uint64_t)a4, (unsigned char *)(v10 + 8), 8uLL, 0);
      if (!v11 || !*(void *)(v11 + 32))
      {
        v8->uint64_t nelts = 0;
        AddObjectAncestors(a1, (void *)v10, a3, v8);
        if (v8->nelts >= 2)
        {
          uint64_t v12 = 1;
          while (1)
          {
            uint64_t v13 = *(void *)&v8->elts[8 * v12];
            uint64_t v14 = *find_entry((uint64_t)a4, (unsigned char *)(v13 + 8), 8uLL, 0);
            if (v14)
            {
              uint64_t v15 = *(apr_array_header_t **)(v14 + 32);
              if (v15) {
                break;
              }
            }
            int v16 = apr_array_make(v6, 1, 8);
            *(void *)apr_array_push(v16) = v10;
            apr_hash_set(a4, (const void *)(v13 + 8), 8, v16);
            ++v12;
            uint64_t v10 = v13;
            if (v12 >= v8->nelts) {
              goto LABEL_12;
            }
          }
          *(void *)apr_array_push(v15) = v10;
        }
      }
LABEL_12:
      ++v9;
    }
    while (v9 < *(int *)(a2 + 12));
  }
}

void *AddObjectAncestors(uint64_t *a1, void *a2, unint64_t a3, apr_array_header_t *a4)
{
  while (1)
  {
    uint64_t result = apr_array_push(a4);
    void *result = a2;
    int v9 = *(_DWORD *)a2;
    if (*(_DWORD *)a2 == 16)
    {
      uint64_t v10 = a2[18];
      if (v10)
      {
        uint64_t Object = GTMTLSMContext_getObject(a1, v10, a3);
        uint64_t result = (void *)AddObjectAncestors(a1, Object, a3, a4);
      }
      goto LABEL_7;
    }
    if (v9 != 80) {
      break;
    }
    uint64_t v12 = a2[17];
    if (!v12)
    {
      uint64_t v12 = a2[18];
      if (!v12) {
        goto LABEL_7;
      }
    }
LABEL_11:
    a2 = GTMTLSMContext_getObject(a1, v12, a3);
  }
  if (v9 != 22) {
    return result;
  }
LABEL_7:
  uint64_t v12 = a2[6];
  if (v12) {
    goto LABEL_11;
  }
  return result;
}

apr_hash_index_t *GTMTLSMContext_buildResourceChildrenMap(uint64_t *a1, unint64_t a2, apr_pool_t **a3)
{
  newpool = 0;
  apr_pool_create_ex(&newpool, *a3, 0, 0);
  int v6 = newpool;
  int v7 = *(_DWORD *)(a1[1] + 12);
  if (v7 <= *(_DWORD *)(a1[2] + 12)) {
    int v7 = *(_DWORD *)(a1[2] + 12);
  }
  if (v7 <= *(_DWORD *)(a1[9] + 12)) {
    int v8 = *(_DWORD *)(a1[9] + 12);
  }
  else {
    int v8 = v7;
  }
  int v9 = apr_array_make(newpool, v8, 8);
  GTMTLSMContext_getObjects((_DWORD *)a1[1], a2, v9);
  GTMTLSMContext_buildResourceChildrenMap2(a1, (uint64_t)v9, a2, (apr_hash_t *)a3);
  v9->uint64_t nelts = 0;
  GTMTLSMContext_getObjects((_DWORD *)a1[2], a2, v9);
  GTMTLSMContext_buildResourceChildrenMap2(a1, (uint64_t)v9, a2, (apr_hash_t *)a3);
  v9->uint64_t nelts = 0;
  GTMTLSMContext_getObjects((_DWORD *)a1[9], a2, v9);
  GTMTLSMContext_buildResourceChildrenMap2(a1, (uint64_t)v9, a2, (apr_hash_t *)a3);
  apr_pool_destroy(v6);

  return GTMTLSMContext_removeDuplicatesFromChildrenMap((uint64_t)a3);
}

void *GTMTLSMContext_buildLibraryFunctionsMap(uint64_t a1, unint64_t a2, apr_pool_t **a3)
{
  newpool = 0;
  int v6 = *a3;
  apr_pool_create_ex(&newpool, *a3, 0, 0);
  int v7 = apr_array_make(newpool, *(_DWORD *)(*(void *)(a1 + 224) + 12), 8);
  uint64_t result = GTMTLSMContext_getObjects(*(_DWORD **)(a1 + 224), a2, v7);
  if (v7->nelts >= 1)
  {
    uint64_t v9 = 0;
    do
    {
      uint64_t v10 = *(void *)&v7->elts[8 * v9];
      uint64_t v11 = *find_entry((uint64_t)a3, (unsigned char *)(v10 + 40), 8uLL, 0);
      if (!v11 || (uint64_t v12 = *(apr_array_header_t **)(v11 + 32)) == 0)
      {
        uint64_t v12 = apr_array_make(v6, 1, 8);
        apr_hash_set((apr_hash_t *)a3, (const void *)(v10 + 40), 8, v12);
      }
      uint64_t result = apr_array_push(v12);
      void *result = v10;
      ++v9;
    }
    while (v9 < v7->nelts);
  }
  return result;
}

uint64_t GTMTLSMContext_maxCommandBufferCount(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 184);
  uint64_t v2 = *(unsigned int *)(v1 + 12);
  if ((int)v2 < 1) {
    return 64;
  }
  uint64_t v3 = *(uint64_t **)(v1 + 24);
  uint64_t result = 64;
  do
  {
    uint64_t v5 = *v3++;
    result += *(unsigned int *)(v5 + 64);
    --v2;
  }
  while (v2);
  return result;
}

void GTMTLSMContext_getTextureDescriptor(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, int *a5)
{
  *(void *)(a4 + 48) = 0;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)a4 = 0u;
  uint64_t Object = GTMTLSMContext_getObject(a1, a2, a3);
  if (!Object)
  {
    if (!a5) {
      return;
    }
    int v16 = *a5;
    long long v32 = 0u;
    long long v33 = 0u;
    int v29 = v16;
    int v30 = 500;
    uint64_t v17 = "texture != ((void *)0)";
    goto LABEL_14;
  }
  uint64_t v10 = Object;
  unint64_t v11 = Object[18];
  if (!v11)
  {
    unint64_t v18 = Object[13];
    if (v18)
    {
      long long v19 = *(_OWORD *)v18;
      long long v20 = *(_OWORD *)(v18 + 16);
      long long v21 = *(_OWORD *)(v18 + 32);
      *(void *)(a4 + 48) = *(void *)(v18 + 48);
      *(_OWORD *)(a4 + 16) = v20;
      *(_OWORD *)(a4 + 32) = v21;
      *(_OWORD *)a4 = v19;
      return;
    }
    uint64_t v22 = Object[24];
    if (v22)
    {
      *(unsigned char *)(a4 + 49) = 2;
      *(unsigned char *)(a4 + 47) = 1;
      *(_DWORD *)(a4 + 28) = 65537;
      *(_WORD *)(a4 + 44) = 257;
      *(_DWORD *)(a4 + 16) = 84148994;
      uint64_t v23 = GTMTLSMContext_getObject(a1, v22, Object[2]);
      if (a5)
      {
        if (!v23)
        {
          int v28 = *a5;
          long long v32 = 0u;
          long long v33 = 0u;
          int v29 = v28;
          int v30 = 500;
          uint64_t v17 = "drawable != ((void *)0)";
          goto LABEL_14;
        }
        uint64_t v24 = GTMTLSMContext_getObject(a1, v23[5], v23[2]);
        if (!v24)
        {
          int v25 = *a5;
          long long v32 = 0u;
          long long v33 = 0u;
          int v29 = v25;
          int v30 = 500;
          uint64_t v17 = "layer != ((void *)0)";
          goto LABEL_14;
        }
      }
      else
      {
        if (!v23) {
          return;
        }
        uint64_t v24 = GTMTLSMContext_getObject(a1, v23[5], v23[2]);
        if (!v24) {
          return;
        }
      }
      *(_WORD *)(a4 + 34) = *((_WORD *)v24 + 136);
      *(_DWORD *)(a4 + 24) = (unint64_t)*((double *)v24 + 22);
      *(_WORD *)(a4 + 32) = (unint64_t)*((double *)v24 + 23);
      BOOL v27 = *((unsigned char *)v24 + 274) != 0;
      *(unsigned char *)(a4 + 43) = *((unsigned char *)v24 + 274);
      *(_DWORD *)(a4 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 4 * v27;
      return;
    }
    if (!a5) {
      return;
    }
    int v26 = *a5;
    long long v32 = 0u;
    long long v33 = 0u;
    int v29 = v26;
    int v30 = 500;
    uint64_t v17 = "0";
LABEL_14:
    uint64_t v31 = v17;
    GTError_addError(a5, (uint64_t)&v29);
    return;
  }
  GTMTLSMContext_getTextureDescriptor(a1, v11, a3, a4, a5);
  *(_WORD *)(a4 + 34) = *((_WORD *)v10 + 76);
  int v12 = *((unsigned __int8 *)v10 + 158);
  *(unsigned char *)(a4 + 49) = v12;
  if (*((unsigned char *)v10 + 160)) {
    *(unsigned char *)(a4 + 45) = *((unsigned char *)v10 + 160);
  }
  int v13 = *((_DWORD *)v10 + 52);
  if (v13 != -1) {
    *(_DWORD *)(a4 + 16) = v13;
  }
  unsigned int v14 = *((unsigned __int16 *)v10 + 78);
  if (*((_WORD *)v10 + 78))
  {
    if ((v12 - 5) > 1)
    {
      *(_WORD *)(a4 + 28) = v14;
    }
    else
    {
      int v15 = *((unsigned __int16 *)v10 + 78) / 6;
      if (v14 < 6) {
        LOWORD(v15) = 1;
      }
      *(_WORD *)(a4 + 28) = v15;
    }
  }
}

void *GTMTLSMContext_getTextureInfo(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  while (1)
  {
    uint64_t result = GTMTLSMContext_getObject(a1, a2, a3);
    if (!result) {
      break;
    }
    int v6 = result;
    uint64_t result = (void *)result[16];
    if (result) {
      break;
    }
    a2 = v6[18];
    if (!a2) {
      return 0;
    }
  }
  return result;
}

void *GTMTLSMContext_resourcesAllocated(void *result, unint64_t a2, uint64_t a3, apr_array_header_t *arr)
{
  int v6 = result;
  uint64_t v7 = 0;
  unint64_t v8 = a2 + a3;
  do
  {
    uint64_t v9 = v6[v7 + 1];
    int v10 = *(_DWORD *)(v9 + 12);
    if (v10 >= 1)
    {
      for (uint64_t i = 0; i < v10; ++i)
      {
        uint64_t v12 = *(void *)(*(void *)(v9 + 24) + 8 * i);
        unint64_t v13 = *(void *)(v12 + 16);
        if (a2 <= v13 && v8 > v13)
        {
          uint64_t result = apr_array_push(arr);
          void *result = v12;
          int v10 = *(_DWORD *)(v9 + 12);
        }
      }
    }
    ++v7;
  }
  while (v7 != 35);
  return result;
}

void *GTMTLSMContext_resourcesDeallocated(void *result, unint64_t a2, uint64_t a3, apr_array_header_t *arr)
{
  int v6 = result;
  uint64_t v7 = 0;
  unint64_t v8 = a2 + a3;
  do
  {
    uint64_t v9 = v6[v7 + 1];
    int v10 = *(_DWORD *)(v9 + 12);
    if (v10 >= 1)
    {
      for (uint64_t i = 0; i < v10; ++i)
      {
        uint64_t v12 = *(void *)(*(void *)(v9 + 24) + 8 * i);
        unint64_t v13 = *(void *)(v12 + 16);
        if (a2 > v13 || v8 <= v13)
        {
          unint64_t v15 = *(void *)(v12 + 24);
          if (a2 <= v15 && v8 > v15)
          {
            uint64_t result = apr_array_push(arr);
            void *result = v12;
            int v10 = *(_DWORD *)(v9 + 12);
          }
        }
      }
    }
    ++v7;
  }
  while (v7 != 35);
  return result;
}

uint64_t *GTMTLSMComputePipelineState_computePipelineDescriptor(uint64_t *result, uint64_t a2, void *a3, apr_pool_t *a4)
{
  int v6 = *(const void **)(a2 + 56);
  if (!v6)
  {
    if (*(void *)(a2 + 48))
    {
      uint64_t result = (uint64_t *)memcpy(a3, &GTMTLComputePipelineDescriptorDefaults, 0x3C0uLL);
      a3[106] = *(void *)(a2 + 48);
    }
    else
    {
      uint64_t v7 = *(void *)(a2 + 40);
      if (v7 && *(void *)(a2 + 184))
      {
        uint64_t v9 = result;
        uint64_t Object = GTMTLSMContext_getObject(result, v7, *(void *)(a2 + 16));
        uint64_t result = (uint64_t *)GTMTLSMComputePipelineState_computePipelineDescriptor(v9, Object, a3, a4);
        uint64_t v11 = **(void **)(a2 + 184);
        if (v11)
        {
          uint64_t v12 = a3[95] + v11;
          uint64_t result = (uint64_t *)apr_palloc(a4, 8 * v12);
          if (a3[95])
          {
            unint64_t v13 = 0;
            uint64_t v14 = a3[94];
            do
            {
              result[v13] = *(void *)(v14 + 8 * v13);
              ++v13;
            }
            while (a3[95] > v13);
          }
          unint64_t v15 = *(unint64_t **)(a2 + 184);
          if (*v15)
          {
            unint64_t v16 = 0;
            do
            {
              result[v16 + a3[95]] = v15[v16 + 1];
              ++v16;
            }
            while (*v15 > v16);
          }
          a3[94] = result;
          a3[95] = v12;
        }
      }
      else
      {
        if (*(_DWORD *)(a2 + 4) != -16101) {
          return result;
        }
        uint64_t result = (uint64_t *)memcpy(a3, &GTMTLComputePipelineDescriptorDefaults, 0x3C0uLL);
      }
    }
    a3[113] = *(void *)(a2 + 104);
    return result;
  }

  return (uint64_t *)memcpy(a3, v6, 0x3C0uLL);
}

uint64_t GTMTLSMRenderPipelineState_renderPipelineDescriptorType(uint64_t *a1, void *a2)
{
  uint64_t v2 = a2;
  if (a1)
  {
    uint64_t v4 = a2[5];
    for (unint64_t i = v2[2]; ; unint64_t i = Object[2])
    {
      uint64_t Object = GTMTLSMContext_getObject(a1, v4, i);
      if (!Object || *(_DWORD *)Object != 71) {
        break;
      }
      uint64_t v2 = Object;
      uint64_t v4 = Object[5];
    }
  }
  if (v2[6]) {
    return 1;
  }
  if (v2[8]) {
    return 2;
  }
  if (v2[9]) {
    return 3;
  }
  return 0;
}

uint64_t *GTMTLSMRenderPipelineState_anyRenderPipelineDescriptor(uint64_t *a1, void *a2, _DWORD *a3, apr_pool_t *a4)
{
  uint64_t result = (uint64_t *)GTMTLSMRenderPipelineState_renderPipelineDescriptorType(a1, a2);
  *a3 = result;
  switch(result)
  {
    case 3:
      uint64_t v9 = (const void *)a2[9];
      if (v9)
      {
        return (uint64_t *)memcpy(a3 + 2, v9, 0x200uLL);
      }
      break;
    case 2:
      return GTMTLSMRenderPipelineState_tilePipelineDescriptor(a1, a2, (uint64_t **)a3 + 1, a4);
    case 1:
      return (uint64_t *)GTMTLSMRenderPipelineState_renderPipelineDescriptor(a1, a2, (uint64_t)(a3 + 2), a4);
  }
  return result;
}

_DWORD *GTMTLSMRenderPipelineState_renderPipelineDescriptor(uint64_t *a1, void *a2, uint64_t a3, apr_pool_t *a4)
{
  int v6 = (const void *)a2[6];
  if (v6)
  {
    return memcpy((void *)a3, v6, 0x5E8uLL);
  }
  else
  {
    uint64_t result = GTMTLSMContext_getObject(a1, a2[5], a2[2]);
    if (result && *result == 71)
    {
      uint64_t result = (_DWORD *)GTMTLSMRenderPipelineState_renderPipelineDescriptor(a1, result, a3, a4);
      int v10 = (void *)a2[10];
      uint64_t v11 = v10[9];
      if (v11)
      {
        uint64_t v12 = (unsigned __int16)(*(_WORD *)(a3 + 1072) + v11);
        uint64_t result = apr_palloc(a4, 8 * v12);
        if (*(void *)(a3 + 1072))
        {
          unint64_t v13 = 0;
          uint64_t v14 = *(void *)(a3 + 1064);
          do
          {
            *(void *)&result[2 * v13] = *(void *)(v14 + 8 * v13);
            ++v13;
          }
          while (*(void *)(a3 + 1072) > v13);
        }
        int v10 = (void *)a2[10];
        if (v10[9])
        {
          unint64_t v15 = 0;
          uint64_t v16 = v10[8];
          do
          {
            *(void *)&result[2 * v15 + 2 * *(void *)(a3 + 1072)] = *(void *)(v16 + 8 * v15);
            ++v15;
          }
          while (v10[9] > v15);
        }
        *(void *)(a3 + 1064) = result;
        *(void *)(a3 + 1072) = v12;
      }
      uint64_t v17 = v10[1];
      if (v17)
      {
        uint64_t v18 = (unsigned __int16)(*(_DWORD *)(a3 + 880) + v17);
        uint64_t result = apr_palloc(a4, 8 * v18);
        if (*(void *)(a3 + 880))
        {
          unint64_t v19 = 0;
          uint64_t v20 = *(void *)(a3 + 872);
          do
          {
            *(void *)&result[2 * v19] = *(void *)(v20 + 8 * v19);
            ++v19;
          }
          while (*(void *)(a3 + 880) > v19);
        }
        long long v21 = (uint64_t *)a2[10];
        if (v21[1])
        {
          unint64_t v22 = 0;
          uint64_t v23 = *v21;
          do
          {
            *(void *)&result[2 * v22 + 2 * *(void *)(a3 + 880)] = *(void *)(v23 + 8 * v22);
            ++v22;
          }
          while (v21[1] > v22);
        }
        *(void *)(a3 + 872) = result;
        *(void *)(a3 + 88mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v18;
      }
      *(void *)(a3 + 128mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = a2[13];
    }
  }
  return result;
}

uint64_t *GTMTLSMRenderPipelineState_tilePipelineDescriptor(uint64_t *result, void *a2, uint64_t **a3, apr_pool_t *a4)
{
  uint64_t v5 = (long long *)a2[8];
  if (v5)
  {
    long long v6 = *v5;
    long long v7 = v5[2];
    *((_OWORD *)a3 + 1) = v5[1];
    *((_OWORD *)a3 + 2) = v7;
    *(_OWORD *)a3 = v6;
    long long v8 = v5[3];
    long long v9 = v5[4];
    long long v10 = v5[6];
    *((_OWORD *)a3 + 5) = v5[5];
    *((_OWORD *)a3 + 6) = v10;
    *((_OWORD *)a3 + 3) = v8;
    *((_OWORD *)a3 + 4) = v9;
    long long v11 = v5[7];
    long long v12 = v5[8];
    long long v13 = v5[10];
    *((_OWORD *)a3 + 9) = v5[9];
    *((_OWORD *)a3 + 1mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v13;
    *((_OWORD *)a3 + 7) = v11;
    *((_OWORD *)a3 + 8) = v12;
  }
  else
  {
    uint64_t v16 = result;
    uint64_t result = GTMTLSMContext_getObject(result, a2[5], a2[2]);
    if (result && *(_DWORD *)result == 71)
    {
      GTMTLSMRenderPipelineState_tilePipelineDescriptor(v16, result, a3, a4);
      uint64_t v17 = (uint64_t *)(unsigned __int16)(*(_DWORD *)(a2[10] + 56) + *((_WORD *)a3 + 4));
      uint64_t result = (uint64_t *)apr_palloc(a4, 8 * (void)v17);
      if (a3[1])
      {
        unint64_t v18 = 0;
        unint64_t v19 = *a3;
        do
        {
          result[v18] = v19[v18];
          ++v18;
        }
        while ((unint64_t)a3[1] > v18);
      }
      uint64_t v20 = a2[10];
      if (*(void *)(v20 + 56))
      {
        unint64_t v21 = 0;
        uint64_t v22 = *(void *)(v20 + 48);
        do
        {
          result[(void)a3[1] + v21] = *(void *)(v22 + 8 * v21);
          ++v21;
        }
        while (*(void *)(v20 + 56) > v21);
      }
      *a3 = result;
      a3[1] = v17;
    }
  }
  return result;
}

void *GTMTLSMRenderPipelineState_meshPipelineDescriptor(int a1, uint64_t a2, void *__dst)
{
  uint64_t v3 = *(const void **)(a2 + 72);
  if (v3) {
    return memcpy(__dst, v3, 0x200uLL);
  }
  return result;
}

uint64_t GTMTLSMRenderPipelineState_fragmentFunction(uint64_t *a1, void *a2)
{
  if (a2[11]) {
    return 0;
  }
  uint64_t Object = a2;
  while (1)
  {
    uint64_t v5 = Object[6];
    if (v5)
    {
      uint64_t v7 = v5 + 1176;
      return *(void *)v7;
    }
    uint64_t v6 = Object[9];
    if (v6) {
      break;
    }
    uint64_t Object = GTMTLSMContext_getObject(a1, Object[5], Object[2]);
    if (Object[11]) {
      return 0;
    }
  }
  uint64_t v7 = v6 + 344;
  return *(void *)v7;
}

uint64_t GTMTLSMComputePipelineState_computeFunction(uint64_t *a1, void *a2)
{
  uint64_t result = a2[6];
  if (!result)
  {
    uint64_t Object = a2;
    while (1)
    {
      uint64_t v5 = Object[7];
      if (v5) {
        break;
      }
      uint64_t Object = GTMTLSMContext_getObject(a1, Object[5], Object[2]);
      uint64_t result = Object[6];
      if (result) {
        return result;
      }
    }
    return *(void *)(v5 + 848);
  }
  return result;
}

void *GTMTLSMPipelineState_isVisibleFunctionTableCompatible(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a2[1];
  if (*(void *)(a3 + 128) != v3)
  {
    uint64_t v6 = a2;
    while (*(void *)(a3 + 120) != v3)
    {
      if (*(_DWORD *)v6 == 29)
      {
        uint64_t result = GTMTLSMContext_getObject(a1, v6[5], v6[2]);
        if (!result) {
          return result;
        }
        uint64_t v6 = result;
        if (*(_DWORD *)result != 29) {
          return 0;
        }
      }
      else
      {
        if (*(_DWORD *)v6 != 71) {
          return 0;
        }
        uint64_t result = GTMTLSMContext_getObject(a1, v6[5], v6[2]);
        if (!result) {
          return result;
        }
        uint64_t v6 = result;
        if (*(_DWORD *)result != 71) {
          return 0;
        }
      }
      uint64_t v3 = v6[1];
      if (*(void *)(a3 + 128) == v3) {
        return (void *)(&def_CFBEC + 1);
      }
    }
  }
  return (void *)(&def_CFBEC + 1);
}

void *GTMTLSMPipelineState_isIntersectionFunctionTableCompatible(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a2[1];
  if (*(void *)(a3 + 128) != v3)
  {
    uint64_t v6 = a2;
    while (*(void *)(a3 + 120) != v3)
    {
      if (*(_DWORD *)v6 == 29)
      {
        uint64_t result = GTMTLSMContext_getObject(a1, v6[5], v6[2]);
        if (!result) {
          return result;
        }
        uint64_t v6 = result;
        if (*(_DWORD *)result != 29) {
          return 0;
        }
      }
      else
      {
        if (*(_DWORD *)v6 != 71) {
          return 0;
        }
        uint64_t result = GTMTLSMContext_getObject(a1, v6[5], v6[2]);
        if (!result) {
          return result;
        }
        uint64_t v6 = result;
        if (*(_DWORD *)result != 71) {
          return 0;
        }
      }
      uint64_t v3 = v6[1];
      if (*(void *)(a3 + 128) == v3) {
        return (void *)(&def_CFBEC + 1);
      }
    }
  }
  return (void *)(&def_CFBEC + 1);
}

BOOL GTMTLSMPipelineState_supportsIndirectCommandBuffers(uint64_t a1)
{
  if (*(_DWORD *)a1 == 29)
  {
    uint64_t v3 = *(void *)(a1 + 56);
    if (v3)
    {
      int v2 = *(unsigned __int8 *)(v3 + 956);
      return v2 != 0;
    }
  }
  else if (*(_DWORD *)a1 == 71)
  {
    uint64_t v1 = *(void *)(a1 + 48);
    if (v1)
    {
      int v2 = *(unsigned __int8 *)(v1 + 1499);
      return v2 != 0;
    }
    uint64_t v4 = *(void *)(a1 + 72);
    if (v4)
    {
      int v2 = *(unsigned __int8 *)(v4 + 510);
      return v2 != 0;
    }
  }
  return 0;
}

uint64_t GTMTLSMObject_sortUsedResources(uint64_t *a1, int a2, uint64_t a3)
{
  if (a2 < 1) {
    return 0;
  }
  uint64_t v5 = 0;
  uint64_t v6 = a2;
  uint64_t v7 = a1;
  do
  {
    uint64_t v8 = *v7;
    if (*v7) {
      uint64_t v8 = *(void *)(v8 + 8);
    }
    uint64_t v12 = v8;
    entry = find_entry(a3, &v12, 8uLL, 0);
    if (*entry && *(void *)(*entry + 32))
    {
      uint64_t v10 = *v7;
      *uint64_t v7 = a1[(int)v5];
      a1[(int)v5] = v10;
      uint64_t v5 = (v5 + 1);
    }
    ++v7;
    --v6;
  }
  while (v6);
  return v5;
}

uint64_t GTMTLSMSamplerState_sortIndirectResources(uint64_t *a1, int a2)
{
  if (a2 < 1) {
    return 0;
  }
  uint64_t v2 = 0;
  uint64_t v3 = a2;
  uint64_t v4 = a1;
  do
  {
    uint64_t v5 = *v4;
    if (*(unsigned char *)(*(void *)(*v4 + 48) + 62))
    {
      *uint64_t v4 = a1[(int)v2];
      a1[(int)v2] = v5;
      uint64_t v2 = (v2 + 1);
    }
    ++v4;
    --v3;
  }
  while (v3);
  return v2;
}

uint64_t GTMTLSMPipelineState_sortIndirectResources(uint64_t *a1, int a2)
{
  if (a2 < 1) {
    return 0;
  }
  uint64_t v3 = 0;
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  do
  {
    uint64_t v6 = *v5;
    if (GTMTLSMPipelineState_supportsIndirectCommandBuffers(*v5))
    {
      uint64_t *v5 = a1[(int)v3];
      a1[(int)v3] = v6;
      uint64_t v3 = (v3 + 1);
    }
    ++v5;
    --v4;
  }
  while (v4);
  return v3;
}

apr_array_header_t *GTMTLSMBuffer_gpuAddressArray(uint64_t *a1, int a2, apr_pool_t *p)
{
  LODWORD(v3) = a2;
  uint64_t v5 = apr_array_make(p, a2, 24);
  if ((int)v3 >= 1)
  {
    uint64_t v3 = v3;
    do
    {
      uint64_t v6 = *a1++;
      uint64_t v7 = (int8x16_t *)apr_array_push(v5);
      *uint64_t v7 = vextq_s8(*(int8x16_t *)(v6 + 104), *(int8x16_t *)(v6 + 104), 8uLL);
      v7[1].i64[0] = *(void *)(v6 + 8);
      --v3;
    }
    while (v3);
  }
  qsort(v5->elts, v5->nelts, v5->elt_size, (int (__cdecl *)(const void *, const void *))GTMTLGPUAddressResource_compare);
  return v5;
}

apr_array_header_t *GTMTLSMTexture_uniqueIdentifierArray(void *a1, int a2, apr_pool_t *p)
{
  LODWORD(v3) = a2;
  uint64_t v5 = apr_array_make(p, a2, 32);
  if ((int)v3 >= 1)
  {
    uint64_t v3 = v3;
    do
    {
      uint64_t v6 = (void *)*a1++;
      uint64_t v7 = apr_array_push(v5);
      uint64_t v8 = v6[1];
      *uint64_t v7 = v6[21];
      v7[1] = v8;
      _OWORD v7[2] = v6[25];
      --v3;
    }
    while (v3);
  }
  return v5;
}

apr_array_header_t *GTMTLSMSamplerState_uniqueIdentifierArray(void *a1, int a2, apr_pool_t *p)
{
  LODWORD(v3) = a2;
  uint64_t v5 = apr_array_make(p, a2, 32);
  if ((int)v3 >= 1)
  {
    uint64_t v3 = v3;
    do
    {
      uint64_t v6 = (void *)*a1++;
      uint64_t v7 = apr_array_push(v5);
      uint64_t v8 = v6[1];
      uint64_t v9 = v6[9];
      *uint64_t v7 = v6[8];
      v7[1] = v8;
      _OWORD v7[2] = v9;
      --v3;
    }
    while (v3);
  }
  return v5;
}

apr_array_header_t *GTMTLSMRenderPipelineState_uniqueIdentifierArray(void *a1, int a2, apr_pool_t *p)
{
  LODWORD(v3) = a2;
  uint64_t v5 = apr_array_make(p, a2, 32);
  if ((int)v3 >= 1)
  {
    uint64_t v3 = v3;
    do
    {
      uint64_t v6 = (void *)*a1++;
      uint64_t v7 = apr_array_push(v5);
      uint64_t v8 = v6[1];
      *uint64_t v7 = v6[12];
      v7[1] = v8;
      _OWORD v7[2] = v6[14];
      --v3;
    }
    while (v3);
  }
  return v5;
}

apr_array_header_t *GTMTLSMComputePipelineState_uniqueIdentifierArray(void *a1, int a2, apr_pool_t *p)
{
  LODWORD(v3) = a2;
  uint64_t v5 = apr_array_make(p, a2, 32);
  if ((int)v3 >= 1)
  {
    uint64_t v3 = v3;
    do
    {
      uint64_t v6 = (void *)*a1++;
      uint64_t v7 = apr_array_push(v5);
      uint64_t v8 = v6[1];
      *uint64_t v7 = v6[12];
      v7[1] = v8;
      _OWORD v7[2] = v6[14];
      --v3;
    }
    while (v3);
  }
  return v5;
}

apr_array_header_t *GTMTLSMIndirectCommandBuffer_uniqueIdentifierArray(void *a1, int a2, apr_pool_t *p)
{
  LODWORD(v3) = a2;
  uint64_t v5 = apr_array_make(p, a2, 32);
  if ((int)v3 >= 1)
  {
    uint64_t v3 = v3;
    do
    {
      uint64_t v6 = (void *)*a1++;
      uint64_t v7 = apr_array_push(v5);
      uint64_t v8 = v6[1];
      uint64_t v9 = v6[16];
      *uint64_t v7 = v6[15];
      v7[1] = v8;
      _OWORD v7[2] = v9;
      --v3;
    }
    while (v3);
  }
  return v5;
}

void GTMTLSMContext_indirectCommandBufferResources(apr_pool_t *p@<X2>, _DWORD **a2@<X0>, unint64_t a3@<X1>, uint64_t a4@<X8>)
{
  uint64_t v8 = apr_array_make(p, 128, 8);
  GTMTLSMContext_getObjects(a2[1], a3, v8);
  uint64_t v9 = GTMTLSMBuffer_gpuAddressArray((uint64_t *)v8->elts, v8->nelts, p);
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = v9;
  uint64_t v10 = apr_hash_make(p);
  *(void *)(a4 + 24) = v10;
  long long v11 = apr_hash_make(p);
  *(void *)(a4 + 32) = v11;
  *(_OWORD *)(a4 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_OWORD *)(a4 + 72) = 0u;
  v8->uint64_t nelts = 0;
  GTMTLSMContext_getObjects(a2[4], a3, v8);
  uint64_t elts = (uint64_t *)v8->elts;
  int v13 = GTMTLSMPipelineState_sortIndirectResources(elts, v8->nelts);
  v8->uint64_t nelts = v13;
  uint64_t v14 = GTMTLSMRenderPipelineState_uniqueIdentifierArray(elts, v13, p);
  uint64_t nelts = v14->nelts;
  if ((int)nelts >= 1)
  {
    uint64_t v16 = v14->elts;
    do
    {
      apr_hash_set(v10, v16, 8, v16);
      v16 += 32;
      --nelts;
    }
    while (nelts);
  }
  v8->uint64_t nelts = 0;
  GTMTLSMContext_getObjects(a2[5], a3, v8);
  uint64_t v17 = (uint64_t *)v8->elts;
  int v18 = GTMTLSMPipelineState_sortIndirectResources(v17, v8->nelts);
  v8->uint64_t nelts = v18;
  unint64_t v19 = GTMTLSMComputePipelineState_uniqueIdentifierArray(v17, v18, p);
  uint64_t v20 = v19->nelts;
  if ((int)v20 >= 1)
  {
    unint64_t v21 = v19->elts;
    do
    {
      apr_hash_set(v11, v21, 8, v21);
      v21 += 32;
      --v20;
    }
    while (v20);
  }
}

apr_array_header_t *GTMTLSMContext_intersectionFunctionTableBufferResources(uint64_t *a1, int a2, uint64_t *a3, int a4, apr_pool_t *p)
{
  LODWORD(v5) = a4;
  LODWORD(v7) = a2;
  uint64_t v9 = apr_array_make(p, a4 + a2, 24);
  if ((int)v7 >= 1)
  {
    uint64_t v7 = v7;
    do
    {
      uint64_t v10 = *a1++;
      long long v11 = (int8x16_t *)apr_array_push(v9);
      *long long v11 = vextq_s8(*(int8x16_t *)(v10 + 104), *(int8x16_t *)(v10 + 104), 8uLL);
      v11[1].i64[0] = *(void *)(v10 + 8);
      --v7;
    }
    while (v7);
  }
  if ((int)v5 >= 1)
  {
    uint64_t v5 = v5;
    do
    {
      uint64_t v12 = *a3++;
      int v13 = apr_array_push(v9);
      *int v13 = *(void *)(v12 + 160);
      v13[1] = 8;
      v13[2] = *(void *)(v12 + 8);
      --v5;
    }
    while (v5);
  }
  return v9;
}

void GTMTLSMContext_getHeapResourcesWithType(uint64_t a1, uint64_t a2, unint64_t a3, int a4, apr_array_header_t *a5, apr_pool_t *parent)
{
  if (a4 == 16 || a4 == 80 || a4 == 22)
  {
    newpool = 0;
    apr_pool_create_ex(&newpool, parent, 0, 0);
    long long v11 = 0;
    if ((a4 - 2) <= 0x51)
    {
      if (byte_1DA584[a4 - 2] < 0) {
        long long v11 = 0;
      }
      else {
        long long v11 = *(_DWORD **)(a1 + 8 * byte_1DA584[a4 - 2] + 8);
      }
    }
    uint64_t v12 = newpool;
    int v13 = apr_array_make(newpool, 128, 8);
    GTMTLSMContext_getObjects(v11, a3, v13);
    int nelts = v13->nelts;
    if (nelts)
    {
      for (unint64_t i = 0; i < nelts; ++i)
      {
        uint64_t v16 = *(void *)&v13->elts[8 * i];
        if (*(void *)(v16 + 48) == a2)
        {
          *(void *)apr_array_push(a5) = v16;
          int nelts = v13->nelts;
        }
      }
    }
    apr_pool_destroy(v12);
  }
}

void GTMTLSMContext_getHeapTextures(uint64_t a1, uint64_t a2, unint64_t a3, apr_array_header_t *a4, apr_pool_t *parent)
{
}

void GTMTLSMContext_getHeapBuffers(uint64_t a1, uint64_t a2, unint64_t a3, apr_array_header_t *a4, apr_pool_t *parent)
{
}

void GTMTLSMContext_getHeapAccelerationStructures(uint64_t a1, uint64_t a2, unint64_t a3, apr_array_header_t *a4, apr_pool_t *parent)
{
}

BOOL GTMTLSMContext_hasArgumentBuffers(void *a1, uint64_t a2)
{
  if (*(int *)(a1[9] + 12) > 0) {
    return 1;
  }
  uint64_t v4 = a1[4];
  uint64_t v5 = *(unsigned int *)(v4 + 12);
  if ((int)v5 >= 1)
  {
    uint64_t v6 = *(void *)(v4 + 24);
    do
    {
      uint64_t v7 = *(void **)v6;
      if (*(void *)(*(void *)v6 + 168) || v7[28] || v7[35] || v7[42] || v7[49]) {
        return 1;
      }
      v6 += 8;
    }
    while (--v5);
  }
  uint64_t v8 = a1[5];
  uint64_t v9 = *(unsigned int *)(v8 + 12);
  if ((int)v9 >= 1)
  {
    uint64_t v10 = *(void *)(v8 + 24);
    while (!*(void *)(*(void *)v10 + 168))
    {
      v10 += 8;
      if (!--v9) {
        goto LABEL_15;
      }
    }
    return 1;
  }
LABEL_15:
  uint64_t v11 = *(int *)(a2 + 12);
  if ((int)v11 >= 1)
  {
    uint64_t v12 = (int *)(*(void *)(a2 + 24) + 8);
    do
    {
      int v13 = *v12;
      v12 += 16;
      if (IsFuncEnumUseResourceCall(v13)) {
        return 1;
      }
    }
    while (--v11);
  }
  uint64_t v14 = a1[2];
  uint64_t v15 = *(unsigned int *)(v14 + 12);
  if ((int)v15 < 1) {
    return 0;
  }
  uint64_t v16 = *(uint64_t **)(v14 + 24);
  uint64_t v17 = v15 - 1;
  do
  {
    uint64_t v18 = *v16++;
    unsigned int v19 = *(_DWORD *)(v18 + 4) + 15690;
    BOOL result = v19 < 3;
  }
  while (v19 >= 3 && v17-- != 0);
  return result;
}

uint64_t DumpResourceToStateMirrorType(int a1)
{
  if ((a1 + 1) > 0x24) {
    return 2;
  }
  else {
    return dword_1DA4F0[a1 + 1];
  }
}

uint64_t StateMirrorToDumpResourceType(int a1)
{
  if ((a1 - 2) > 0x51) {
    return -1;
  }
  else {
    return byte_1DA584[a1 - 2];
  }
}

char *GTMTLSMIOCommandBuffer_processTraceFunc(char *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = result;
  int v5 = *((_DWORD *)a2 + 2);
  switch(v5)
  {
    case -15343:
      *((void *)result + 3) = *a2;
      break;
    case -15313:
      uint64_t v9 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
      BOOL result = GTTraceFunc_argumentBytesWithMap(a2, v9[8], a3);
      *((void *)v4 + 7) = result;
      break;
    case -15333:
      BOOL result = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
      *(_OWORD *)uint64_t v4 = 0u;
      *((_OWORD *)v4 + 1) = 0u;
      *((_OWORD *)v4 + 2) = 0u;
      *((_OWORD *)v4 + 3) = 0u;
      *((_OWORD *)v4 + 4) = 0u;
      uint64_t v7 = *((void *)result + 1);
      if (v7)
      {
        *(_DWORD *)uint64_t v4 = 51;
        uint64_t v8 = *a2;
        *((void *)v4 + 1) = v7;
        *((void *)v4 + 2) = v8;
        *((void *)v4 + 3) = -1;
        v4[73] = 1;
        *((void *)v4 + 6) = *(void *)result;
      }
      break;
  }
  return result;
}

char *GTMTLSMCommandBuffer_processTraceFunc(char *result, uint64_t *a2, uint64_t a3)
{
  int v5 = result;
  int v6 = *((_DWORD *)a2 + 2);
  if (v6 > -16203)
  {
    if (v6 <= -15702)
    {
      BOOL v9 = v6 == -16202;
      int v10 = -15908;
    }
    else
    {
      if (v6 == -15701)
      {
        BOOL result = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
        *(_OWORD *)int v5 = 0u;
        *((_OWORD *)v5 + 1) = 0u;
        *((_OWORD *)v5 + 2) = 0u;
        *((_OWORD *)v5 + 3) = 0u;
        *((_OWORD *)v5 + 4) = 0u;
        uint64_t v14 = *((void *)result + 1);
        if (v14)
        {
          *(_DWORD *)int v5 = 25;
          uint64_t v15 = *a2;
          *((void *)v5 + 1) = v14;
          *((void *)v5 + 2) = v15;
          *((void *)v5 + 3) = -1;
          *((void *)v5 + 6) = *(void *)result;
          BOOL result = GTTraceFunc_argumentBytesWithMap(a2, result[16], a3);
          *((void *)v5 + 8) = result;
          if (result) {
            v5[73] = result[9];
          }
        }
        return result;
      }
      BOOL v9 = v6 == -15318;
      int v10 = -15316;
    }
    if (!v9 && v6 != v10) {
      return result;
    }
LABEL_20:
    *((void *)result + 3) = *a2;
    return result;
  }
  if (v6 <= -16362)
  {
    if (v6 == -16365)
    {
      uint64_t v16 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
      BOOL result = GTTraceFunc_argumentBytesWithMap(a2, v16[8], a3);
      *((void *)v5 + 7) = result;
    }
    else if (v6 == -16364)
    {
      BOOL result = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
      v5[72] = *((_DWORD *)result + 2);
    }
    return result;
  }
  switch(v6)
  {
    case -16361:
      goto LABEL_20;
    case -16343:
      BOOL result = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
      *(_OWORD *)int v5 = 0u;
      *((_OWORD *)v5 + 1) = 0u;
      *((_OWORD *)v5 + 2) = 0u;
      *((_OWORD *)v5 + 3) = 0u;
      *((_OWORD *)v5 + 4) = 0u;
      uint64_t v12 = *((void *)result + 1);
      if (v12)
      {
        *(_DWORD *)int v5 = 25;
        uint64_t v13 = *a2;
        *((void *)v5 + 1) = v12;
        *((void *)v5 + 2) = v13;
        *((void *)v5 + 3) = -1;
        v5[73] = 1;
        goto LABEL_24;
      }
      break;
    case -16342:
      BOOL result = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
      *(_OWORD *)int v5 = 0u;
      *((_OWORD *)v5 + 1) = 0u;
      *((_OWORD *)v5 + 2) = 0u;
      *((_OWORD *)v5 + 3) = 0u;
      *((_OWORD *)v5 + 4) = 0u;
      uint64_t v7 = *((void *)result + 1);
      if (v7)
      {
        *(_DWORD *)int v5 = 25;
        uint64_t v8 = *a2;
        *((void *)v5 + 1) = v7;
        *((void *)v5 + 2) = v8;
        *((void *)v5 + 3) = -1;
LABEL_24:
        *((void *)v5 + 6) = *(void *)result;
      }
      break;
  }
  return result;
}

void GTMTLSMCommandEncoder_processTraceFunc(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = a1 + 8616;
  int v7 = *((_DWORD *)a2 + 2);
  if (v7 <= -16088)
  {
    if (v7 <= -16163)
    {
      switch(v7)
      {
        case -16354:
          uint64_t v12 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          bzero((void *)a1, 0x2B90uLL);
          uint64_t v13 = *((void *)v12 + 1);
          if (!v13) {
            return;
          }
          int v14 = 21;
          goto LABEL_435;
        case -16353:
          id v239 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          bzero((void *)a1, 0x2B90uLL);
          uint64_t v240 = *((void *)v239 + 1);
          if (!v240) {
            return;
          }
          *(_DWORD *)a1 = 70;
          uint64_t v241 = *a2;
          *(void *)(a1 + 8) = v240;
          *(void *)(a1 + 16) = v241;
          *(void *)(a1 + 24) = -1;
          *(void *)(a1 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *(void *)v239;
          long long v242 = GTTraceFunc_argumentBytesWithMap(a2, v239[16], a3);
          uint64_t v243 = a1 + 56;
          goto LABEL_276;
        case -16352:
          long long v244 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          bzero((void *)a1, 0x2B90uLL);
          uint64_t v245 = *((void *)v244 + 1);
          if (v245)
          {
            *(_DWORD *)a1 = 28;
            uint64_t v246 = *a2;
            *(void *)(a1 + 8) = v245;
            *(void *)(a1 + 16) = v246;
            *(void *)(a1 + 24) = -1;
            *(void *)(a1 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *(void *)v244;
            bzero((void *)(a1 + 56), 0x888uLL);
            memset_pattern16((void *)(a1 + 2240), &unk_1DA2C0, 0x100uLL);
            *(void *)(a1 + 824) = -1;
            *(void *)&long long v247 = -1;
            *((void *)&v247 + 1) = -1;
            *(_OWORD *)(a1 + 792) = v247;
            *(_OWORD *)(a1 + 808) = v247;
            *(_OWORD *)(a1 + 76mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v247;
            *(_OWORD *)(a1 + 776) = v247;
            *(_OWORD *)(a1 + 728) = v247;
            *(_OWORD *)(a1 + 744) = v247;
            *(_OWORD *)(a1 + 696) = v247;
            *(_OWORD *)(a1 + 712) = v247;
            *(_OWORD *)(a1 + 664) = v247;
            *(_OWORD *)(a1 + 68mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v247;
            *(_OWORD *)(a1 + 632) = v247;
            *(_OWORD *)(a1 + 648) = v247;
            *(_OWORD *)(a1 + 60mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v247;
            *(_OWORD *)(a1 + 616) = v247;
            *(_OWORD *)(a1 + 584) = v247;
            *(unsigned char *)(a1 + 2304) = -1;
          }
          return;
        case -16351:
          long long v248 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          bzero((void *)a1, 0x2B90uLL);
          uint64_t v249 = *((void *)v248 + 1);
          if (v249)
          {
            *(_DWORD *)a1 = 65;
            uint64_t v250 = *a2;
            *(void *)(a1 + 8) = v249;
            *(void *)(a1 + 16) = v250;
            *(void *)(a1 + 24) = -1;
            *(void *)(a1 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *(void *)v248;
            long long v251 = GTTraceFunc_argumentBytesWithMap(a2, v248[16], a3);
            *(_OWORD *)(a1 + 128) = 0u;
            *(_OWORD *)(a1 + 144) = 0u;
            *(_OWORD *)(a1 + 16mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
            *(_OWORD *)(a1 + 176) = 0u;
            *(void *)(a1 + 192) = 0;
            *(void *)(a1 + 56) = v251;
            memset_pattern16((void *)(a1 + 64), &unk_1DA2D0, 0x40uLL);
            *(_WORD *)(a1 + 192) = 1028;
          }
          return;
        case -16350:
        case -16349:
        case -16348:
        case -16347:
        case -16346:
        case -16345:
        case -16344:
        case -16343:
        case -16342:
        case -16341:
        case -16340:
        case -16338:
        case -16327:
        case -16326:
        case -16324:
        case -16323:
        case -16322:
        case -16321:
        case -16320:
        case -16319:
        case -16318:
        case -16317:
        case -16316:
        case -16315:
        case -16314:
        case -16313:
        case -16312:
        case -16311:
        case -16310:
        case -16309:
        case -16308:
        case -16307:
        case -16306:
        case -16305:
        case -16304:
        case -16303:
        case -16302:
        case -16301:
        case -16300:
        case -16299:
        case -16298:
        case -16297:
        case -16296:
        case -16295:
        case -16294:
        case -16293:
        case -16292:
        case -16291:
        case -16290:
        case -16289:
        case -16287:
        case -16284:
        case -16283:
        case -16282:
        case -16280:
        case -16251:
        case -16250:
        case -16249:
        case -16248:
        case -16245:
        case -16244:
        case -16243:
        case -16242:
        case -16241:
        case -16240:
        case -16239:
        case -16238:
        case -16237:
        case -16236:
        case -16235:
        case -16234:
        case -16233:
        case -16232:
        case -16231:
        case -16230:
        case -16229:
        case -16228:
        case -16221:
        case -16220:
        case -16218:
        case -16217:
        case -16216:
        case -16215:
          return;
        case -16339:
        case -16288:
        case -16281:
          goto LABEL_54;
        case -16337:
          *(void *)(a1 + 64) = *((void *)GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3) + 1);
          return;
        case -16336:
          long long v252 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          unint64_t v253 = *((void *)v252 + 3);
          uint64_t v254 = 1 << v253;
          uint64_t v255 = a1 + 8 * (int)(v253 >> 6);
          *(void *)(v255 + 72) &= ~v254;
          *(void *)(a1 + 80 + 8 * *((void *)v252 + 3) + 8) = *((void *)v252 + 1);
          *(void *)(a1 + 80 + 8 * (int)(*((void *)v252 + 3) >> 6)) &= ~(1 << *((void *)v252 + 3));
          *(void *)(a1 + 80 + 8 * *((void *)v252 + 3) + 256) = *((void *)v252 + 2);
          return;
        case -16335:
          long long v256 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          BOOL v27 = v256;
          unint64_t v257 = *((void *)v256 + 1);
          unint64_t v258 = *((void *)v256 + 2) + v257;
          unint64_t v259 = 64;
          if (v258 >= 0x40) {
            unint64_t v258 = 64;
          }
          char v260 = v258 - v257;
          if (v258 < v257) {
            char v260 = 0;
          }
          uint64_t v261 = ~(-1 << v260);
          if (v257 <= v258) {
            char v262 = v257 & 0x3F;
          }
          else {
            char v262 = 0;
          }
          uint64_t v264 = (uint64_t *)(a1 + 80);
          uint64_t v263 = *(void *)(a1 + 80);
          *(void *)(a1 + 72) &= ~(v261 << v262);
          unint64_t v265 = *((void *)v256 + 1);
          if (*((void *)v256 + 2) + v265 < 0x40) {
            unint64_t v259 = *((void *)v256 + 2) + v265;
          }
          char v266 = v259 - v265;
          if (v259 < v265) {
            char v266 = 0;
          }
          uint64_t v267 = ~(-1 << v266);
          if (v265 <= v259) {
            char v268 = v265 & 0x3F;
          }
          else {
            char v268 = 0;
          }
          *uint64_t v264 = v263 & ~(v267 << v268);
          uint64_t v269 = *((void *)v256 + 1);
          v270 = GTTraceFunc_argumentBytesWithMap(a2, v256[24], a3);
          if ((int)*((void *)v27 + 2) >= 1)
          {
            uint64_t v271 = &v264[v269 + 1];
            uint64_t v272 = *((void *)v27 + 2);
            do
            {
              uint64_t v273 = *(void *)v270;
              v270 += 8;
              *v271++ = v273;
              --v272;
            }
            while (v272);
          }
          uint64_t v162 = a1 + 8 * *((void *)v27 + 1) + 336;
          goto LABEL_354;
        case -16334:
          int v274 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 8 * *((void *)v274 + 2) + 832) = *((void *)v274 + 1);
          return;
        case -16333:
          uint64_t v275 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          uint64_t v276 = v275;
          unint64_t v277 = *((void *)v275 + 1);
          unint64_t v278 = *((void *)v275 + 2) + v277;
          if (v278 >= 0x40) {
            unint64_t v278 = 64;
          }
          char v279 = v278 - v277;
          if (v278 < v277) {
            char v279 = 0;
          }
          uint64_t v280 = ~(-1 << v279);
          if (v277 <= v278) {
            char v281 = v277 & 0x3F;
          }
          else {
            char v281 = 0;
          }
          *(void *)(a1 + 80) &= ~(v280 << v281);
          uint64_t v282 = *((void *)v275 + 1);
          uint64_t v283 = GTTraceFunc_argumentBytesWithMap(a2, v275[24], a3);
          if ((int)*((void *)v276 + 2) >= 1)
          {
            uint64_t v284 = (void *)(a1 + 8 * v282 + 832);
            uint64_t v285 = *((void *)v276 + 2);
            do
            {
              uint64_t v286 = *(void *)v283;
              v283 += 8;
              *v284++ = v286;
              --v285;
            }
            while (v285);
          }
          return;
        case -16332:
          uint64_t v287 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 8 * *((void *)v287 + 2) + 1856) = *((void *)v287 + 1);
          return;
        case -16331:
          int v288 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          v289 = v288;
          unint64_t v290 = *((void *)v288 + 1);
          unint64_t v291 = *((void *)v288 + 2) + v290;
          if (v291 >= 0x40) {
            unint64_t v291 = 64;
          }
          char v292 = v291 - v290;
          if (v291 < v290) {
            char v292 = 0;
          }
          uint64_t v293 = ~(-1 << v292);
          if (v290 <= v291) {
            char v294 = v290 & 0x3F;
          }
          else {
            char v294 = 0;
          }
          *(void *)(a1 + 80) &= ~(v293 << v294);
          uint64_t v295 = *((void *)v288 + 1);
          v296 = GTTraceFunc_argumentBytesWithMap(a2, v288[24], a3);
          if ((int)*((void *)v289 + 2) >= 1)
          {
            uint64_t v297 = (void *)(a1 + 8 * v295 + 1856);
            uint64_t v298 = *((void *)v289 + 2);
            do
            {
              uint64_t v299 = *(void *)v296;
              v296 += 8;
              *v297++ = v299;
              --v298;
            }
            while (v298);
          }
          return;
        case -16330:
          uint64_t v300 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 8 * *((void *)v300 + 2) + 1856) = *((void *)v300 + 1);
          *(_DWORD *)(a1 + 1984 + 4 * *((void *)v300 + 2) + 192) = *((_DWORD *)v300 + 6);
          *(_DWORD *)(a1 + 1984 + 4 * *((void *)v300 + 2) + 256) = *((_DWORD *)v300 + 7);
          return;
        case -16329:
          v301 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          int v171 = v301;
          unint64_t v302 = *((void *)v301 + 1);
          unint64_t v303 = *((void *)v301 + 2) + v302;
          if (v303 >= 0x40) {
            unint64_t v303 = 64;
          }
          char v304 = v303 - v302;
          if (v303 < v302) {
            char v304 = 0;
          }
          uint64_t v305 = ~(-1 << v304);
          if (v302 <= v303) {
            char v306 = v302 & 0x3F;
          }
          else {
            char v306 = 0;
          }
          *(void *)(a1 + 80) &= ~(v305 << v306);
          uint64_t v307 = *((void *)v301 + 1);
          uint64_t v308 = GTTraceFunc_argumentBytesWithMap(a2, v301[24], a3);
          if ((int)*((void *)v171 + 2) >= 1)
          {
            uint64_t v309 = (void *)(a1 + 8 * v307 + 1856);
            uint64_t v310 = *((void *)v171 + 2);
            do
            {
              uint64_t v311 = *(void *)v308;
              v308 += 8;
              *v309++ = v311;
              --v310;
            }
            while (v310);
          }
          uint64_t v312 = a1 + 1984;
          uint64_t v313 = (void *)(a1 + 1984 + 4 * *((void *)v171 + 1) + 192);
          uint64_t v314 = GTTraceFunc_argumentBytesWithMap(a2, v171[25], a3);
          memcpy(v313, v314, 4 * *((void *)v171 + 2));
          uint64_t v162 = v312 + 4 * *((void *)v171 + 1) + 256;
          goto LABEL_514;
        case -16328:
          uint64_t v315 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(_DWORD *)(a1 + 4 * *((void *)v315 + 2) + 204mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *((void *)v315 + 1);
          return;
        case -16325:
        case -16285:
        case -16246:
          goto LABEL_65;
        case -16286:
          uint64_t v316 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          bzero((void *)a1, 0x2B90uLL);
          uint64_t v317 = *((void *)v316 + 1);
          if (!v317) {
            return;
          }
          *(_DWORD *)a1 = 70;
          uint64_t v318 = *a2;
          *(void *)(a1 + 8) = v317;
          *(void *)(a1 + 16) = v318;
          *(void *)(a1 + 24) = -1;
          *(void *)(a1 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *(void *)v316;
          uint64_t v243 = a1 + 56;
          long long v242 = 0;
LABEL_276:
          GTMTLSMRenderCommandEncoder_init(v243, (uint64_t)v242);
          return;
        case -16279:
          *(void *)(a1 + 860mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *((void *)GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3)
                                   + 1);
          return;
        case -16278:
          v319 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          unint64_t v320 = *((void *)v319 + 3);
          uint64_t v321 = 1 << v320;
          uint64_t v322 = a1 + 56 + 8 * (int)(v320 >> 6);
          *(void *)(v322 + 8) &= ~v321;
          *(void *)(a1 + 80 + 8 * *((void *)v319 + 3)) = *((void *)v319 + 1);
          unint64_t v323 = *((void *)v319 + 3);
          uint64_t v324 = 1 << v323;
          uint64_t v325 = a1 + 56 + 8 * (int)(v323 >> 6);
          *(void *)(v325 + 16) &= ~v324;
          uint64_t v326 = *((void *)v319 + 2);
          uint64_t v327 = a1 + 80 + 8 * *((void *)v319 + 3);
          goto LABEL_450;
        case -16277:
          v328 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          BOOL v27 = v328;
          unint64_t v329 = *((void *)v328 + 1);
          unint64_t v330 = *((void *)v328 + 2) + v329;
          if (v330 >= 0x40) {
            unint64_t v330 = 64;
          }
          char v331 = v330 - v329;
          if (v330 < v329) {
            char v331 = 0;
          }
          uint64_t v332 = ~(-1 << v331);
          if (v329 <= v330) {
            char v333 = v329 & 0x3F;
          }
          else {
            char v333 = 0;
          }
          uint64_t v334 = *(void *)(a1 + 72);
          *(void *)(a1 + 64) &= ~(v332 << v333);
          unint64_t v335 = *((void *)v328 + 1);
          unint64_t v336 = *((void *)v328 + 2) + v335;
          if (v336 >= 0x40) {
            unint64_t v336 = 64;
          }
          char v337 = v336 - v335;
          if (v336 < v335) {
            char v337 = 0;
          }
          uint64_t v338 = ~(-1 << v337);
          if (v335 <= v336) {
            char v339 = v335 & 0x3F;
          }
          else {
            char v339 = 0;
          }
          *(void *)(a1 + 72) = v334 & ~(v338 << v339);
          uint64_t v340 = *((void *)v328 + 1);
          uint64_t v341 = GTTraceFunc_argumentBytesWithMap(a2, v328[24], a3);
          if ((int)*((void *)v27 + 2) >= 1)
          {
            uint64_t v342 = (void *)(a1 + 8 * v340 + 80);
            uint64_t v343 = *((void *)v27 + 2);
            do
            {
              uint64_t v344 = *(void *)v341;
              v341 += 8;
              *v342++ = v344;
              --v343;
            }
            while (v343);
          }
          uint64_t v162 = a1 + 8 * *((void *)v27 + 1) + 328;
          goto LABEL_354;
        case -16276:
          uint64_t v345 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 8 * *((void *)v345 + 2) + 824) = *((void *)v345 + 1);
          return;
        case -16275:
          v346 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          uint64_t v347 = v346;
          unint64_t v348 = *((void *)v346 + 1);
          unint64_t v349 = *((void *)v346 + 2) + v348;
          if (v349 >= 0x40) {
            unint64_t v349 = 64;
          }
          char v350 = v349 - v348;
          if (v349 < v348) {
            char v350 = 0;
          }
          uint64_t v351 = ~(-1 << v350);
          if (v348 <= v349) {
            char v352 = v348 & 0x3F;
          }
          else {
            char v352 = 0;
          }
          *(void *)(a1 + 72) &= ~(v351 << v352);
          uint64_t v353 = *((void *)v346 + 1);
          uint64_t v354 = GTTraceFunc_argumentBytesWithMap(a2, v346[24], a3);
          if ((int)*((void *)v347 + 2) >= 1)
          {
            v355 = (void *)(a1 + 8 * v353 + 824);
            uint64_t v356 = *((void *)v347 + 2);
            do
            {
              uint64_t v357 = *(void *)v354;
              v354 += 8;
              *v355++ = v357;
              --v356;
            }
            while (v356);
          }
          return;
        case -16274:
          uint64_t v358 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 8 * *((void *)v358 + 2) + 1848) = *((void *)v358 + 1);
          return;
        case -16273:
          uint64_t v359 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          uint64_t v360 = v359;
          unint64_t v361 = *((void *)v359 + 1);
          unint64_t v362 = *((void *)v359 + 2) + v361;
          if (v362 >= 0x40) {
            unint64_t v362 = 64;
          }
          char v363 = v362 - v361;
          if (v362 < v361) {
            char v363 = 0;
          }
          uint64_t v364 = ~(-1 << v363);
          if (v361 <= v362) {
            char v365 = v361 & 0x3F;
          }
          else {
            char v365 = 0;
          }
          *(void *)(a1 + 72) &= ~(v364 << v365);
          uint64_t v366 = *((void *)v359 + 1);
          uint64_t v367 = GTTraceFunc_argumentBytesWithMap(a2, v359[24], a3);
          if ((int)*((void *)v360 + 2) >= 1)
          {
            uint64_t v368 = (void *)(a1 + 8 * v366 + 1848);
            uint64_t v369 = *((void *)v360 + 2);
            do
            {
              uint64_t v370 = *(void *)v367;
              v367 += 8;
              *v368++ = v370;
              --v369;
            }
            while (v369);
          }
          return;
        case -16272:
          v371 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 56 + 8 * *((void *)v371 + 2) + 1792) = *((void *)v371 + 1);
          *(_DWORD *)(a1 + 56 + 4 * *((void *)v371 + 2) + 10036) = *((_DWORD *)v371 + 6);
          *(_DWORD *)(a1 + 56 + 4 * *((void *)v371 + 2) + 1010mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *((_DWORD *)v371 + 7);
          return;
        case -16271:
          uint64_t v372 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          int v171 = v372;
          unint64_t v373 = *((void *)v372 + 1);
          unint64_t v374 = *((void *)v372 + 2) + v373;
          if (v374 >= 0x40) {
            unint64_t v374 = 64;
          }
          char v375 = v374 - v373;
          if (v374 < v373) {
            char v375 = 0;
          }
          uint64_t v376 = ~(-1 << v375);
          if (v373 <= v374) {
            char v377 = v373 & 0x3F;
          }
          else {
            char v377 = 0;
          }
          *(void *)(a1 + 72) &= ~(v376 << v377);
          uint64_t v378 = *((void *)v372 + 1);
          uint64_t v379 = GTTraceFunc_argumentBytesWithMap(a2, v372[24], a3);
          if ((int)*((void *)v171 + 2) >= 1)
          {
            v380 = (void *)(a1 + 8 * v378 + 1848);
            uint64_t v381 = *((void *)v171 + 2);
            do
            {
              uint64_t v382 = *(void *)v379;
              v379 += 8;
              *v380++ = v382;
              --v381;
            }
            while (v381);
          }
          uint64_t v383 = a1 + 56;
          v384 = (void *)(a1 + 56 + 4 * *((void *)v171 + 1) + 10036);
          uint64_t v385 = GTTraceFunc_argumentBytesWithMap(a2, v171[25], a3);
          memcpy(v384, v385, 4 * *((void *)v171 + 2));
          uint64_t v180 = v383 + 4 * *((void *)v171 + 1);
          uint64_t v181 = 10100;
          goto LABEL_513;
        case -16270:
          uint64_t v386 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 8608) = 1;
          long long v387 = *(_OWORD *)(v386 + 24);
          long long v388 = *(_OWORD *)(v386 + 40);
          *(_OWORD *)uint64_t v6 = *(_OWORD *)(v386 + 8);
          *(_OWORD *)(v6 + 16) = v387;
          *(_OWORD *)(v6 + 32) = v388;
          return;
        case -16269:
          *(unsigned char *)(a1 + 11138) = *((void *)GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3)
                                   + 1);
          return;
        case -16268:
          *(unsigned char *)(a1 + 11136) = *((void *)GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3)
                                   + 1);
          return;
        case -16267:
          *(unsigned char *)(a1 + 11137) = *((void *)GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3)
                                   + 1);
          return;
        case -16266:
          v389 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(_DWORD *)(a1 + 10056) = *((_DWORD *)v389 + 2);
          *(_DWORD *)(a1 + 1006mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *((_DWORD *)v389 + 3);
          *(_DWORD *)(a1 + 10064) = *((_DWORD *)v389 + 4);
          return;
        case -16265:
          uint64_t v390 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 9384) = 1;
          long long v391 = *(_OWORD *)(v390 + 24);
          *(_OWORD *)(a1 + 9392) = *(_OWORD *)(v390 + 8);
          *(_OWORD *)(a1 + 9408) = v391;
          return;
        case -16264:
          *(unsigned char *)(a1 + 11139) = *((void *)GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3)
                                   + 1);
          return;
        case -16263:
          __int16 v144 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          unint64_t v392 = *((void *)v144 + 3);
          uint64_t v393 = 1 << v392;
          uint64_t v394 = a1 + 8 * (int)(v392 >> 6);
          *(void *)(v394 + 1976) &= ~v393;
          uint64_t v148 = *((void *)v144 + 1);
          uint64_t v198 = a1 + 1984;
          goto LABEL_449;
        case -16262:
          uint64_t v395 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          BOOL v27 = v395;
          unint64_t v396 = *((void *)v395 + 1);
          unint64_t v397 = *((void *)v395 + 2) + v396;
          if (v397 >= 0x40) {
            unint64_t v397 = 64;
          }
          char v398 = v397 - v396;
          if (v397 < v396) {
            char v398 = 0;
          }
          uint64_t v399 = ~(-1 << v398);
          if (v396 <= v397) {
            char v400 = v396 & 0x3F;
          }
          else {
            char v400 = 0;
          }
          *(void *)(a1 + 1976) &= ~(v399 << v400);
          uint64_t v401 = *((void *)v395 + 1);
          v402 = GTTraceFunc_argumentBytesWithMap(a2, v395[24], a3);
          if ((int)*((void *)v27 + 2) >= 1)
          {
            uint64_t v403 = (void *)(a1 + 8 * v401 + 1984);
            uint64_t v404 = *((void *)v27 + 2);
            do
            {
              uint64_t v405 = *(void *)v402;
              v402 += 8;
              *v403++ = v405;
              --v404;
            }
            while (v404);
          }
          uint64_t v162 = a1 + 8 * *((void *)v27 + 1) + 2232;
LABEL_354:
          unsigned int v406 = v27[25];
LABEL_498:
          v572 = GTTraceFunc_argumentBytesWithMap(a2, v406, a3);
          size_t v573 = 8 * *((void *)v27 + 2);
          goto LABEL_515;
        case -16261:
          v407 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 8 * *((void *)v407 + 2) + 248mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *((void *)v407 + 1);
          return;
        case -16260:
          uint64_t v408 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          uint64_t v409 = *((void *)v408 + 1);
          uint64_t v410 = GTTraceFunc_argumentBytesWithMap(a2, v408[24], a3);
          if ((int)*((void *)v408 + 2) >= 1)
          {
            v411 = (void *)(a1 + 8 * v409 + 2480);
            uint64_t v412 = *((void *)v408 + 2);
            do
            {
              uint64_t v413 = *(void *)v410;
              v410 += 8;
              *v411++ = v413;
              --v412;
            }
            while (v412);
          }
          return;
        case -16259:
          uint64_t v414 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 8 * *((void *)v414 + 2) + 3504) = *((void *)v414 + 1);
          return;
        case -16258:
          uint64_t v415 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          uint64_t v416 = *((void *)v415 + 1);
          uint64_t v417 = GTTraceFunc_argumentBytesWithMap(a2, v415[24], a3);
          if ((int)*((void *)v415 + 2) >= 1)
          {
            v418 = (void *)(a1 + 8 * v416 + 3504);
            uint64_t v419 = *((void *)v415 + 2);
            do
            {
              uint64_t v420 = *(void *)v417;
              v417 += 8;
              *v418++ = v420;
              --v419;
            }
            while (v419);
          }
          return;
        case -16257:
          uint64_t v421 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 56 + 8 * *((void *)v421 + 2) + 3448) = *((void *)v421 + 1);
          *(_DWORD *)(a1 + 56 + 4 * *((void *)v421 + 2) + 10164) = *((_DWORD *)v421 + 6);
          *(_DWORD *)(a1 + 56 + 4 * *((void *)v421 + 2) + 10228) = *((_DWORD *)v421 + 7);
          return;
        case -16256:
          int v171 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          uint64_t v422 = *((void *)v171 + 1);
          uint64_t v423 = GTTraceFunc_argumentBytesWithMap(a2, v171[24], a3);
          if ((int)*((void *)v171 + 2) >= 1)
          {
            uint64_t v424 = (void *)(a1 + 8 * v422 + 3504);
            uint64_t v425 = *((void *)v171 + 2);
            do
            {
              uint64_t v426 = *(void *)v423;
              v423 += 8;
              *v424++ = v426;
              --v425;
            }
            while (v425);
          }
          uint64_t v427 = a1 + 56;
          v428 = (void *)(a1 + 56 + 4 * *((void *)v171 + 1) + 10164);
          uint64_t v429 = GTTraceFunc_argumentBytesWithMap(a2, v171[25], a3);
          memcpy(v428, v429, 4 * *((void *)v171 + 2));
          uint64_t v180 = v427 + 4 * *((void *)v171 + 1);
          uint64_t v181 = 10228;
LABEL_513:
          uint64_t v162 = v180 + v181;
LABEL_514:
          v572 = GTTraceFunc_argumentBytesWithMap(a2, v171[26], a3);
          size_t v573 = 4 * *((void *)v171 + 2);
LABEL_515:
          v601 = (void *)v162;
LABEL_516:
          memcpy(v601, v572, v573);
          return;
        case -16255:
          uint64_t v430 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(_DWORD *)(a1 + 10068) = *((_DWORD *)v430 + 2);
          *(_DWORD *)(a1 + 10072) = *((_DWORD *)v430 + 3);
          *(_DWORD *)(a1 + 10076) = *((_DWORD *)v430 + 4);
          *(_DWORD *)(a1 + 1008mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *((_DWORD *)v430 + 5);
          return;
        case -16254:
          *(void *)(a1 + 9904) = *((void *)GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3)
                                   + 1);
          return;
        case -16253:
          int v431 = *((_DWORD *)GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3) + 2);
          *(_DWORD *)(a1 + 10088) = v431;
          *(_DWORD *)(a1 + 10084) = v431;
          return;
        case -16252:
          v432 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(unsigned char *)(v6 + 2525) = *((void *)v432 + 1);
          *(_DWORD *)(a1 + 11132) = *((void *)v432 + 2);
          return;
        case -16247:
          *(_DWORD *)(a1 + 10736) = *((_DWORD *)GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3)
                                    + 2);
          return;
        case -16227:
          uint64_t v433 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          unint64_t v434 = *((void *)v433 + 2);
          uint64_t v435 = 1 << v434;
          uint64_t v436 = a1 + 8 * (int)(v434 >> 6);
          *(void *)(v436 + 72) |= v435;
          *(void *)(a1 + 80 + 8 * *((void *)v433 + 2) + 8) = GTTraceFunc_argumentBytesWithMap(a2, v433[24], a3);
          *(void *)(a1 + 80 + 8 * (int)(*((void *)v433 + 2) >> 6)) &= ~(1 << *((void *)v433 + 2));
          *(void *)(a1 + 80 + 8 * *((void *)v433 + 2) + 256) = *((void *)v433 + 1);
          return;
        case -16226:
          uint64_t v437 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 8 * *((void *)v437 + 2) + 336) = *((void *)v437 + 1);
          return;
        case -16225:
          unsigned int v163 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          unint64_t v438 = *((void *)v163 + 2);
          uint64_t v439 = 1 << v438;
          uint64_t v440 = a1 + 56 + 8 * (int)(v438 >> 6);
          *(void *)(v440 + 8) |= v439;
          v441 = GTTraceFunc_argumentBytesWithMap(a2, v163[24], a3);
          uint64_t v214 = a1 + 80;
          *(void *)(a1 + 80 + 8 * *((void *)v163 + 2)) = v441;
          unint64_t v442 = *((void *)v163 + 2);
          uint64_t v443 = 1 << v442;
          uint64_t v444 = a1 + 56 + 8 * (int)(v442 >> 6);
          *(void *)(v444 + 16) &= ~v443;
          goto LABEL_446;
        case -16224:
          v445 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 8 * *((void *)v445 + 2) + 328) = *((void *)v445 + 1);
          return;
        case -16223:
          unsigned int v163 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          unint64_t v446 = *((void *)v163 + 2);
          uint64_t v447 = 1 << v446;
          uint64_t v448 = a1 + 8 * (int)(v446 >> 6);
          *(void *)(v448 + 1976) |= v447;
          unsigned __int8 v167 = GTTraceFunc_argumentBytesWithMap(a2, v163[24], a3);
          uint64_t v214 = a1 + 1984;
          goto LABEL_445;
        case -16222:
          uint64_t v449 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 8 * *((void *)v449 + 2) + 2232) = *((void *)v449 + 1);
          return;
        case -16219:
          v450 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(_DWORD *)(a1 + 10084) = *((_DWORD *)v450 + 2);
          *(_DWORD *)(a1 + 10088) = *((_DWORD *)v450 + 3);
          return;
        case -16214:
          uint64_t v451 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 56 + 8 * *((void *)v451 + 2) + 2424) = *((void *)v451 + 1);
          *(void *)(a1 + 56 + 8 * *((void *)v451 + 4) + 3448) = *((void *)v451 + 3);
          return;
        default:
          if (v7 == -16384) {
            goto LABEL_54;
          }
          if (v7 != -16376) {
            return;
          }
          goto LABEL_65;
      }
    }
    switch(v7)
    {
      case -16162:
        unsigned int v19 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
        *(void *)(a1 + 8 * *((void *)v19 + 2) + 64) = *((void *)v19 + 1);
        break;
      case -16161:
        *(unsigned char *)(a1 + 192) = *((void *)GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3) + 1);
        break;
      case -16160:
        *(unsigned char *)(a1 + 193) = *((void *)GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3) + 1);
        break;
      case -16159:
        uint64_t v503 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
        *(void *)(a1 + 8 * *((void *)v503 + 2) + 9928) = *((void *)v503 + 1);
        break;
      case -16158:
        *(unsigned char *)(a1 + 11142) = *((void *)GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3) + 1);
        break;
      case -16157:
        *(unsigned char *)(a1 + 11143) = *((void *)GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3) + 1);
        break;
      case -16156:
      case -16155:
      case -16154:
      case -16153:
      case -16152:
      case -16151:
      case -16150:
      case -16147:
      case -16146:
      case -16145:
      case -16144:
      case -16137:
      case -16136:
      case -16135:
      case -16134:
      case -16133:
        return;
      case -16149:
        v504 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
        *(_DWORD *)(a1 + 2164) = *((void *)v504 + 1);
        *(_DWORD *)(a1 + 2168) = *((void *)v504 + 2);
        break;
      case -16148:
        v505 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
        *(void *)(a1 + 992mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *((void *)v505 + 1);
        *(_DWORD *)(a1 + 10744) = *((void *)v505 + 2);
        *(_DWORD *)(a1 + 10748) = *((void *)v505 + 3);
        break;
      case -16143:
        unsigned int v163 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
        unint64_t v506 = *((void *)v163 + 2);
        uint64_t v507 = 1 << v506;
        uint64_t v508 = a1 + 8 * (int)(v506 >> 6);
        *(void *)(v508 + 6944) |= v507;
        unsigned __int8 v167 = GTTraceFunc_argumentBytesWithMap(a2, v163[24], a3);
        uint64_t v168 = 6952;
LABEL_444:
        uint64_t v214 = a1 + v168;
LABEL_445:
        *(void *)(v214 + 8 * *((void *)v163 + 2)) = v167;
LABEL_446:
        *(void *)(v214 + 8 * *((void *)v163 + 2) + 248) = *((void *)v163 + 1);
        break;
      case -16142:
        __int16 v144 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
        unint64_t v509 = *((void *)v144 + 3);
        uint64_t v510 = 1 << v509;
        uint64_t v511 = a1 + 8 * (int)(v509 >> 6);
        *(void *)(v511 + 6944) &= ~v510;
        uint64_t v148 = *((void *)v144 + 1);
        uint64_t v149 = 6952;
LABEL_448:
        uint64_t v198 = a1 + v149;
LABEL_449:
        *(void *)(v198 + 8 * *((void *)v144 + 3)) = v148;
        uint64_t v326 = *((void *)v144 + 2);
        uint64_t v327 = v198 + 8 * *((void *)v144 + 3);
LABEL_450:
        *(void *)(v327 + 248) = v326;
        break;
      case -16141:
        uint64_t v512 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
        *(void *)(a1 + 8 * *((void *)v512 + 2) + 720mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *((void *)v512 + 1);
        break;
      case -16140:
        uint64_t v513 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
        *(void *)(a1 + 8 * *((void *)v513 + 2) + 7448) = *((void *)v513 + 1);
        break;
      case -16139:
        uint64_t v514 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
        *(void *)(a1 + 8 * *((void *)v514 + 2) + 8472) = *((void *)v514 + 1);
        break;
      case -16138:
        uint64_t v515 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
        *(void *)(a1 + 56 + 8 * *((void *)v515 + 2) + 8416) = *((void *)v515 + 1);
        *(_DWORD *)(a1 + 56 + 4 * *((void *)v515 + 2) + 10548) = *((_DWORD *)v515 + 6);
        *(_DWORD *)(a1 + 56 + 4 * *((void *)v515 + 2) + 10612) = *((_DWORD *)v515 + 7);
        break;
      case -16132:
        *(_DWORD *)(a1 + 10732) = *((_DWORD *)GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3) + 2);
        break;
      default:
        if (v7 == -16100)
        {
          long long v57 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          uint64_t v58 = *((void *)v57 + 3);
          *(_OWORD *)(a1 + 1984) = *(_OWORD *)(v57 + 8);
          *(void *)(a1 + 200mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v58;
          uint64_t v59 = *((void *)v57 + 6);
          *(_OWORD *)(a1 + 2008) = *((_OWORD *)v57 + 2);
          *(void *)(a1 + 2024) = v59;
        }
        break;
    }
  }
  else
  {
    if (v7 > -15460)
    {
      switch(v7)
      {
        case -15459:
        case -15458:
        case -15456:
          uint64_t v8 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          unint64_t v9 = *((void *)v8 + 2);
          uint64_t v10 = 1 << v9;
          uint64_t v11 = a1 + 56 + 8 * (int)(v9 >> 6);
          *(void *)(v11 + 1920) &= ~v10;
          *(void *)(a1 + 56 + 8 * *((void *)v8 + 2) + 1928) = *((void *)v8 + 1);
          break;
        case -15457:
          long long v60 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          long long v61 = v60;
          unint64_t v62 = *((void *)v60 + 1);
          unint64_t v63 = *((void *)v60 + 2) + v62;
          if (v63 >= 0x40) {
            unint64_t v63 = 64;
          }
          char v64 = v63 - v62;
          if (v63 < v62) {
            char v64 = 0;
          }
          uint64_t v65 = ~(-1 << v64);
          if (v62 <= v63) {
            char v66 = v62 & 0x3F;
          }
          else {
            char v66 = 0;
          }
          *(void *)(a1 + 1976) &= ~(v65 << v66);
          uint64_t v67 = *((void *)v60 + 1);
          long long v68 = GTTraceFunc_argumentBytesWithMap(a2, v60[24], a3);
          if ((int)*((void *)v61 + 2) >= 1)
          {
            long long v69 = (void *)(a1 + 8 * v67 + 1984);
            uint64_t v70 = *((void *)v61 + 2);
            do
            {
              uint64_t v71 = *(void *)v68;
              v68 += 8;
              *v69++ = v71;
              --v70;
            }
            while (v70);
          }
          break;
        case -15455:
          long long v72 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          uint64_t v73 = v72;
          unint64_t v74 = *((void *)v72 + 1);
          unint64_t v75 = *((void *)v72 + 2) + v74;
          if (v75 >= 0x40) {
            unint64_t v75 = 64;
          }
          char v76 = v75 - v74;
          if (v75 < v74) {
            char v76 = 0;
          }
          uint64_t v77 = ~(-1 << v76);
          if (v74 <= v75) {
            char v78 = v74 & 0x3F;
          }
          else {
            char v78 = 0;
          }
          *(void *)(a1 + 1976) &= ~(v77 << v78);
          uint64_t v79 = *((void *)v72 + 1);
          long long v80 = GTTraceFunc_argumentBytesWithMap(a2, v72[24], a3);
          if ((int)*((void *)v73 + 2) >= 1)
          {
            long long v81 = (void *)(a1 + 8 * v79 + 1984);
            uint64_t v82 = *((void *)v73 + 2);
            do
            {
              uint64_t v83 = *(void *)v80;
              v80 += 8;
              *v81++ = v83;
              --v82;
            }
            while (v82);
          }
          break;
        case -15454:
        case -15453:
        case -15451:
          int v40 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          unint64_t v41 = *((void *)v40 + 2);
          uint64_t v42 = 1 << v41;
          uint64_t v43 = a1 + 56 + 8 * (int)(v41 >> 6);
          *(void *)(v43 + 6888) &= ~v42;
          *(void *)(a1 + 56 + 8 * *((void *)v40 + 2) + 6896) = *((void *)v40 + 1);
          break;
        case -15452:
          int32x2_t v84 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          uint64_t v85 = v84;
          unint64_t v86 = *((void *)v84 + 1);
          unint64_t v87 = *((void *)v84 + 2) + v86;
          if (v87 >= 0x40) {
            unint64_t v87 = 64;
          }
          char v88 = v87 - v86;
          if (v87 < v86) {
            char v88 = 0;
          }
          uint64_t v89 = ~(-1 << v88);
          if (v86 <= v87) {
            char v90 = v86 & 0x3F;
          }
          else {
            char v90 = 0;
          }
          *(void *)(a1 + 6944) &= ~(v89 << v90);
          uint64_t v91 = *((void *)v84 + 1);
          unint64_t v92 = GTTraceFunc_argumentBytesWithMap(a2, v84[24], a3);
          if ((int)*((void *)v85 + 2) >= 1)
          {
            long long v93 = (void *)(a1 + 8 * v91 + 6952);
            uint64_t v94 = *((void *)v85 + 2);
            do
            {
              uint64_t v95 = *(void *)v92;
              v92 += 8;
              *v93++ = v95;
              --v94;
            }
            while (v94);
          }
          break;
        case -15450:
          long long v96 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          long long v97 = v96;
          unint64_t v98 = *((void *)v96 + 1);
          unint64_t v99 = *((void *)v96 + 2) + v98;
          if (v99 >= 0x40) {
            unint64_t v99 = 64;
          }
          char v100 = v99 - v98;
          if (v99 < v98) {
            char v100 = 0;
          }
          uint64_t v101 = ~(-1 << v100);
          if (v98 <= v99) {
            char v102 = v98 & 0x3F;
          }
          else {
            char v102 = 0;
          }
          *(void *)(a1 + 6944) &= ~(v101 << v102);
          uint64_t v103 = *((void *)v96 + 1);
          long long v104 = GTTraceFunc_argumentBytesWithMap(a2, v96[24], a3);
          if ((int)*((void *)v97 + 2) >= 1)
          {
            id v105 = (void *)(a1 + 8 * v103 + 6952);
            uint64_t v106 = *((void *)v97 + 2);
            do
            {
              uint64_t v107 = *(void *)v104;
              v104 += 8;
              *v105++ = v107;
              --v106;
            }
            while (v106);
          }
          break;
        case -15449:
        case -15448:
        case -15446:
          long long v44 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          unint64_t v45 = *((void *)v44 + 2);
          uint64_t v46 = 1 << v45;
          uint64_t v47 = a1 + 56 + 8 * (int)(v45 >> 6);
          *(void *)(v47 + 8) &= ~v46;
          *(void *)(a1 + 56 + 8 * *((void *)v44 + 2) + 24) = *((void *)v44 + 1);
          unint64_t v48 = *((void *)v44 + 2);
          uint64_t v49 = 1 << v48;
          uint64_t v50 = a1 + 56 + 8 * (int)(v48 >> 6);
          *(void *)(v50 + 16) &= ~v49;
          break;
        case -15447:
          id v108 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          id v109 = v108;
          unint64_t v110 = *((void *)v108 + 1);
          unint64_t v111 = *((void *)v108 + 2) + v110;
          if (v111 >= 0x40) {
            unint64_t v111 = 64;
          }
          char v112 = v111 - v110;
          if (v111 < v110) {
            char v112 = 0;
          }
          uint64_t v113 = ~(-1 << v112);
          if (v110 <= v111) {
            char v114 = v110 & 0x3F;
          }
          else {
            char v114 = 0;
          }
          uint64_t v115 = *(void *)(a1 + 72);
          *(void *)(a1 + 64) &= ~(v113 << v114);
          unint64_t v116 = *((void *)v108 + 1);
          unint64_t v117 = *((void *)v108 + 2) + v116;
          if (v117 >= 0x40) {
            unint64_t v117 = 64;
          }
          char v118 = v117 - v116;
          if (v117 < v116) {
            char v118 = 0;
          }
          uint64_t v119 = ~(-1 << v118);
          if (v116 <= v117) {
            char v120 = v116 & 0x3F;
          }
          else {
            char v120 = 0;
          }
          *(void *)(a1 + 72) = v115 & ~(v119 << v120);
          uint64_t v121 = *((void *)v108 + 1);
          long long v122 = GTTraceFunc_argumentBytesWithMap(a2, v108[24], a3);
          if ((int)*((void *)v109 + 2) >= 1)
          {
            int v123 = (void *)(a1 + 8 * v121 + 80);
            uint64_t v124 = *((void *)v109 + 2);
            do
            {
              uint64_t v125 = *(void *)v122;
              v122 += 8;
              *v123++ = v125;
              --v124;
            }
            while (v124);
          }
          break;
        case -15445:
          __int16 v126 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          uint64_t v127 = v126;
          unint64_t v128 = *((void *)v126 + 1);
          unint64_t v129 = *((void *)v126 + 2) + v128;
          if (v129 >= 0x40) {
            unint64_t v129 = 64;
          }
          char v130 = v129 - v128;
          if (v129 < v128) {
            char v130 = 0;
          }
          uint64_t v131 = ~(-1 << v130);
          if (v128 <= v129) {
            char v132 = v128 & 0x3F;
          }
          else {
            char v132 = 0;
          }
          uint64_t v133 = *(void *)(a1 + 72);
          *(void *)(a1 + 64) &= ~(v131 << v132);
          unint64_t v134 = *((void *)v126 + 1);
          unint64_t v135 = *((void *)v126 + 2) + v134;
          if (v135 >= 0x40) {
            unint64_t v135 = 64;
          }
          char v136 = v135 - v134;
          if (v135 < v134) {
            char v136 = 0;
          }
          uint64_t v137 = ~(-1 << v136);
          if (v134 <= v135) {
            char v138 = v134 & 0x3F;
          }
          else {
            char v138 = 0;
          }
          *(void *)(a1 + 72) = v133 & ~(v137 << v138);
          uint64_t v139 = *((void *)v126 + 1);
          id v140 = GTTraceFunc_argumentBytesWithMap(a2, v126[24], a3);
          if ((int)*((void *)v127 + 2) >= 1)
          {
            id v141 = (void *)(a1 + 8 * v139 + 80);
            uint64_t v142 = *((void *)v127 + 2);
            do
            {
              uint64_t v143 = *(void *)v140;
              v140 += 8;
              *v141++ = v143;
              --v142;
            }
            while (v142);
          }
          break;
        case -15444:
        case -15443:
        case -15442:
        case -15441:
        case -15440:
        case -15439:
        case -15438:
        case -15437:
        case -15436:
        case -15435:
        case -15434:
        case -15433:
        case -15432:
        case -15431:
        case -15430:
        case -15429:
        case -15428:
        case -15427:
        case -15426:
        case -15425:
        case -15424:
        case -15423:
        case -15422:
        case -15421:
        case -15420:
        case -15419:
        case -15418:
        case -15417:
        case -15416:
        case -15415:
        case -15414:
        case -15413:
        case -15412:
        case -15411:
        case -15410:
        case -15409:
        case -15408:
        case -15407:
        case -15406:
        case -15405:
        case -15404:
        case -15403:
        case -15402:
          return;
        case -15401:
          __int16 v144 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          unint64_t v145 = *((void *)v144 + 3);
          uint64_t v146 = 1 << v145;
          uint64_t v147 = a1 + 8 * (int)(v145 >> 6);
          *(void *)(v147 + 5288) &= ~v146;
          uint64_t v148 = *((void *)v144 + 1);
          uint64_t v149 = 5296;
          goto LABEL_448;
        case -15400:
          char v150 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 8 * *((void *)v150 + 2) + 5544) = *((void *)v150 + 1);
          break;
        case -15399:
          int v151 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          BOOL v27 = v151;
          unint64_t v152 = *((void *)v151 + 1);
          unint64_t v153 = *((void *)v151 + 2) + v152;
          if (v153 >= 0x40) {
            unint64_t v153 = 64;
          }
          char v154 = v153 - v152;
          if (v153 < v152) {
            char v154 = 0;
          }
          uint64_t v155 = ~(-1 << v154);
          if (v152 <= v153) {
            char v156 = v152 & 0x3F;
          }
          else {
            char v156 = 0;
          }
          *(void *)(a1 + 5288) &= ~(v155 << v156);
          uint64_t v157 = *((void *)v151 + 1);
          unint64_t v158 = GTTraceFunc_argumentBytesWithMap(a2, v151[24], a3);
          if ((int)*((void *)v27 + 2) >= 1)
          {
            unint64_t v159 = (void *)(a1 + 8 * v157 + 5296);
            uint64_t v160 = *((void *)v27 + 2);
            do
            {
              uint64_t v161 = *(void *)v158;
              v158 += 8;
              *v159++ = v161;
              --v160;
            }
            while (v160);
          }
          uint64_t v38 = a1 + 8 * *((void *)v27 + 1);
          uint64_t v39 = 5544;
          goto LABEL_164;
        case -15398:
          unsigned int v163 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          unint64_t v164 = *((void *)v163 + 2);
          uint64_t v165 = 1 << v164;
          uint64_t v166 = a1 + 8 * (int)(v164 >> 6);
          *(void *)(v166 + 5288) |= v165;
          unsigned __int8 v167 = GTTraceFunc_argumentBytesWithMap(a2, v163[24], a3);
          uint64_t v168 = 5296;
          goto LABEL_444;
        case -15397:
          uint64_t v169 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 8 * *((void *)v169 + 2) + 6816) = *((void *)v169 + 1);
          break;
        case -15396:
          id v170 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 56 + 8 * *((void *)v170 + 2) + 676mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *((void *)v170 + 1);
          *(_DWORD *)(a1 + 56 + 4 * *((void *)v170 + 2) + 1042mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *((_DWORD *)v170 + 6);
          *(_DWORD *)(a1 + 56 + 4 * *((void *)v170 + 2) + 10484) = *((_DWORD *)v170 + 7);
          break;
        case -15395:
          int v171 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          uint64_t v172 = *((void *)v171 + 1);
          __int32 v173 = GTTraceFunc_argumentBytesWithMap(a2, v171[24], a3);
          if ((int)*((void *)v171 + 2) >= 1)
          {
            id v174 = (void *)(a1 + 8 * v172 + 6816);
            uint64_t v175 = *((void *)v171 + 2);
            do
            {
              uint64_t v176 = *(void *)v173;
              v173 += 8;
              *v174++ = v176;
              --v175;
            }
            while (v175);
          }
          uint64_t v177 = a1 + 56;
          uint64_t v178 = (void *)(a1 + 56 + 4 * *((void *)v171 + 1) + 10420);
          long long v179 = GTTraceFunc_argumentBytesWithMap(a2, v171[25], a3);
          memcpy(v178, v179, 4 * *((void *)v171 + 2));
          uint64_t v180 = v177 + 4 * *((void *)v171 + 1);
          uint64_t v181 = 10484;
          goto LABEL_513;
        case -15394:
          long long v182 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          uint64_t v183 = *((void *)v182 + 1);
          int64x2_t v184 = GTTraceFunc_argumentBytesWithMap(a2, v182[24], a3);
          if ((int)*((void *)v182 + 2) >= 1)
          {
            uint64_t v185 = (void *)(a1 + 8 * v183 + 6816);
            uint64_t v186 = *((void *)v182 + 2);
            do
            {
              uint64_t v187 = *(void *)v184;
              v184 += 8;
              *v185++ = v187;
              --v186;
            }
            while (v186);
          }
          break;
        case -15393:
          long long v188 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 8 * *((void *)v188 + 2) + 5792) = *((void *)v188 + 1);
          break;
        case -15392:
          long long v189 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          uint64_t v190 = *((void *)v189 + 1);
          long long v191 = GTTraceFunc_argumentBytesWithMap(a2, v189[24], a3);
          if ((int)*((void *)v189 + 2) >= 1)
          {
            long long v192 = (void *)(a1 + 8 * v190 + 5792);
            uint64_t v193 = *((void *)v189 + 2);
            do
            {
              uint64_t v194 = *(void *)v191;
              v191 += 8;
              *v192++ = v194;
              --v193;
            }
            while (v193);
          }
          break;
        case -15391:
          __int16 v144 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          unint64_t v195 = *((void *)v144 + 3);
          uint64_t v196 = 1 << v195;
          uint64_t v197 = a1 + 8 * (int)(v195 >> 6);
          *(void *)(v197 + 3632) &= ~v196;
          uint64_t v148 = *((void *)v144 + 1);
          uint64_t v198 = a1 + 3640;
          goto LABEL_449;
        case -15390:
          uint64_t v199 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 8 * *((void *)v199 + 2) + 3888) = *((void *)v199 + 1);
          break;
        case -15389:
          id v200 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          BOOL v27 = v200;
          unint64_t v201 = *((void *)v200 + 1);
          unint64_t v202 = *((void *)v200 + 2) + v201;
          if (v202 >= 0x40) {
            unint64_t v202 = 64;
          }
          char v203 = v202 - v201;
          if (v202 < v201) {
            char v203 = 0;
          }
          uint64_t v204 = ~(-1 << v203);
          if (v201 <= v202) {
            char v205 = v201 & 0x3F;
          }
          else {
            char v205 = 0;
          }
          *(void *)(a1 + 3632) &= ~(v204 << v205);
          uint64_t v206 = *((void *)v200 + 1);
          uint64_t v207 = GTTraceFunc_argumentBytesWithMap(a2, v200[24], a3);
          if ((int)*((void *)v27 + 2) >= 1)
          {
            uint64_t v208 = (void *)(a1 + 8 * v206 + 3640);
            uint64_t v209 = *((void *)v27 + 2);
            do
            {
              uint64_t v210 = *(void *)v207;
              v207 += 8;
              *v208++ = v210;
              --v209;
            }
            while (v209);
          }
          uint64_t v162 = a1 + 8 * *((void *)v27 + 1) + 3888;
          goto LABEL_354;
        case -15388:
          unsigned int v163 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          unint64_t v211 = *((void *)v163 + 2);
          uint64_t v212 = 1 << v211;
          uint64_t v213 = a1 + 8 * (int)(v211 >> 6);
          *(void *)(v213 + 3632) |= v212;
          unsigned __int8 v167 = GTTraceFunc_argumentBytesWithMap(a2, v163[24], a3);
          uint64_t v214 = a1 + 3640;
          goto LABEL_445;
        case -15387:
          id v215 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 8 * *((void *)v215 + 2) + 516mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *((void *)v215 + 1);
          break;
        case -15386:
          uint64_t v216 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 56 + 8 * *((void *)v216 + 2) + 5104) = *((void *)v216 + 1);
          *(_DWORD *)(a1 + 56 + 4 * *((void *)v216 + 2) + 10292) = *((_DWORD *)v216 + 6);
          *(_DWORD *)(a1 + 56 + 4 * *((void *)v216 + 2) + 10356) = *((_DWORD *)v216 + 7);
          break;
        case -15385:
          int v171 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          uint64_t v217 = *((void *)v171 + 1);
          long long v218 = GTTraceFunc_argumentBytesWithMap(a2, v171[24], a3);
          if ((int)*((void *)v171 + 2) >= 1)
          {
            uint64_t v219 = (void *)(a1 + 8 * v217 + 5160);
            uint64_t v220 = *((void *)v171 + 2);
            do
            {
              uint64_t v221 = *(void *)v218;
              v218 += 8;
              *v219++ = v221;
              --v220;
            }
            while (v220);
          }
          uint64_t v222 = a1 + 56;
          uint64_t v223 = (void *)(a1 + 56 + 4 * *((void *)v171 + 1) + 10292);
          uint64_t v224 = GTTraceFunc_argumentBytesWithMap(a2, v171[25], a3);
          memcpy(v223, v224, 4 * *((void *)v171 + 2));
          uint64_t v180 = v222 + 4 * *((void *)v171 + 1);
          uint64_t v181 = 10356;
          goto LABEL_513;
        case -15384:
          id v225 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          uint64_t v226 = *((void *)v225 + 1);
          id v227 = GTTraceFunc_argumentBytesWithMap(a2, v225[24], a3);
          if ((int)*((void *)v225 + 2) >= 1)
          {
            v228 = (void *)(a1 + 8 * v226 + 5160);
            uint64_t v229 = *((void *)v225 + 2);
            do
            {
              uint64_t v230 = *(void *)v227;
              v227 += 8;
              *v228++ = v230;
              --v229;
            }
            while (v229);
          }
          break;
        case -15383:
          uint64_t v231 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(void *)(a1 + 8 * *((void *)v231 + 2) + 4136) = *((void *)v231 + 1);
          break;
        case -15382:
          uint64_t v232 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          uint64_t v233 = *((void *)v232 + 1);
          uint64_t v234 = GTTraceFunc_argumentBytesWithMap(a2, v232[24], a3);
          if ((int)*((void *)v232 + 2) >= 1)
          {
            uint64_t v235 = (void *)(a1 + 8 * v233 + 4136);
            uint64_t v236 = *((void *)v232 + 2);
            do
            {
              uint64_t v237 = *(void *)v234;
              v234 += 8;
              *v235++ = v237;
              --v236;
            }
            while (v236);
          }
          break;
        case -15381:
          uint64_t v238 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(_DWORD *)(a1 + 4 * *((void *)v238 + 2) + 1100mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *((void *)v238 + 1);
          break;
        default:
          switch(v7)
          {
            case -15284:
              uint64_t v20 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
              unint64_t v21 = *((void *)v20 + 4);
              uint64_t v22 = 1 << v21;
              uint64_t v23 = a1 + 56 + 8 * (int)(v21 >> 6);
              *(void *)(v23 + 16) &= ~v22;
              *(void *)(a1 + 80 + 8 * *((void *)v20 + 4) + 8) = *((void *)v20 + 1);
              *(void *)(a1 + 80 + 8 * (int)(*((void *)v20 + 4) >> 6)) |= 1 << *((void *)v20 + 4);
              *(void *)(a1 + 80 + 8 * *((void *)v20 + 4) + 256) = *((void *)v20 + 2);
              uint64_t v24 = *((void *)v20 + 3);
              uint64_t v25 = a1 + 56 + 8 * *((void *)v20 + 4);
              goto LABEL_476;
            case -15283:
              v516 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
              *(void *)(a1 + 56 + 8 * *((void *)v516 + 3) + 28mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *((void *)v516 + 1);
              uint64_t v24 = *((void *)v516 + 2);
              uint64_t v25 = a1 + 56 + 8 * *((void *)v516 + 3);
              goto LABEL_476;
            case -15282:
              uint64_t v517 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
              BOOL v27 = v517;
              unint64_t v518 = *((void *)v517 + 1);
              unint64_t v519 = *((void *)v517 + 2) + v518;
              unint64_t v520 = 64;
              if (v519 >= 0x40) {
                unint64_t v519 = 64;
              }
              char v521 = v519 - v518;
              if (v519 < v518) {
                char v521 = 0;
              }
              uint64_t v522 = ~(-1 << v521);
              if (v518 <= v519) {
                char v523 = v518 & 0x3F;
              }
              else {
                char v523 = 0;
              }
              v525 = (uint64_t *)(a1 + 80);
              uint64_t v524 = *(void *)(a1 + 80);
              *(void *)(a1 + 72) &= ~(v522 << v523);
              unint64_t v526 = *((void *)v517 + 1);
              if (*((void *)v517 + 2) + v526 < 0x40) {
                unint64_t v520 = *((void *)v517 + 2) + v526;
              }
              char v527 = v520 - v526;
              if (v520 < v526) {
                char v527 = 0;
              }
              uint64_t v528 = ~(-1 << v527);
              if (v526 <= v520) {
                char v529 = v526 & 0x3F;
              }
              else {
                char v529 = 0;
              }
              uint64_t *v525 = (v528 << v529) | v524;
              uint64_t v530 = *((void *)v517 + 1);
              uint64_t v531 = GTTraceFunc_argumentBytesWithMap(a2, v517[24], a3);
              if ((int)*((void *)v27 + 2) >= 1)
              {
                uint64_t v532 = &v525[v530 + 1];
                uint64_t v533 = *((void *)v27 + 2);
                do
                {
                  uint64_t v534 = *(void *)v531;
                  v531 += 8;
                  *v532++ = v534;
                  --v533;
                }
                while (v533);
              }
              uint64_t v535 = a1 + 56;
              v536 = (void *)(a1 + 56 + 8 * *((void *)v27 + 1) + 280);
              uint64_t v537 = GTTraceFunc_argumentBytesWithMap(a2, v27[25], a3);
              memcpy(v536, v537, 8 * *((void *)v27 + 2));
              uint64_t v162 = v535 + 8 * *((void *)v27 + 1) + 528;
              goto LABEL_497;
            case -15281:
              v538 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
              unint64_t v539 = *((void *)v538 + 3);
              uint64_t v540 = 1 << v539;
              uint64_t v541 = a1 + 56 + 8 * (int)(v539 >> 6);
              *(void *)(v541 + 16) |= v540;
              *(void *)(a1 + 80 + 8 * *((void *)v538 + 3) + 8) = GTTraceFunc_argumentBytesWithMap(a2, v538[32], a3);
              *(void *)(a1 + 80 + 8 * (int)(*((void *)v538 + 3) >> 6)) |= 1 << *((void *)v538 + 3);
              *(void *)(a1 + 80 + 8 * *((void *)v538 + 3) + 256) = *((void *)v538 + 1);
              uint64_t v24 = *((void *)v538 + 2);
              uint64_t v25 = a1 + 56 + 8 * *((void *)v538 + 3);
LABEL_476:
              *(void *)(v25 + 528) = v24;
              return;
            case -15280:
            case -15279:
            case -15278:
            case -15277:
            case -15276:
              return;
            case -15275:
              uint64_t v542 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
              unint64_t v543 = *((void *)v542 + 4);
              uint64_t v544 = 1 << v543;
              uint64_t v545 = a1 + 56 + 8 * (int)(v543 >> 6);
              *(void *)(v545 + 8) &= ~v544;
              *(void *)(a1 + 80 + 8 * *((void *)v542 + 4)) = *((void *)v542 + 1);
              unint64_t v546 = *((void *)v542 + 4);
              uint64_t v547 = 1 << v546;
              uint64_t v548 = a1 + 56 + 8 * (int)(v546 >> 6);
              *(void *)(v548 + 16) |= v547;
              *(void *)(a1 + 80 + 8 * *((void *)v542 + 4) + 248) = *((void *)v542 + 2);
              uint64_t v549 = *((void *)v542 + 3);
              uint64_t v550 = a1 + 56 + 8 * *((void *)v542 + 4);
              goto LABEL_500;
            case -15274:
              v551 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
              *(void *)(a1 + 56 + 8 * *((void *)v551 + 3) + 272) = *((void *)v551 + 1);
              uint64_t v549 = *((void *)v551 + 2);
              uint64_t v550 = a1 + 56 + 8 * *((void *)v551 + 3);
              goto LABEL_500;
            case -15273:
              v552 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
              BOOL v27 = v552;
              unint64_t v553 = *((void *)v552 + 1);
              unint64_t v554 = *((void *)v552 + 2) + v553;
              if (v554 >= 0x40) {
                unint64_t v554 = 64;
              }
              char v555 = v554 - v553;
              if (v554 < v553) {
                char v555 = 0;
              }
              uint64_t v556 = ~(-1 << v555);
              if (v553 <= v554) {
                char v557 = v553 & 0x3F;
              }
              else {
                char v557 = 0;
              }
              uint64_t v558 = *(void *)(a1 + 72);
              *(void *)(a1 + 64) &= ~(v556 << v557);
              unint64_t v559 = *((void *)v552 + 1);
              unint64_t v560 = *((void *)v552 + 2) + v559;
              if (v560 >= 0x40) {
                unint64_t v560 = 64;
              }
              char v561 = v560 - v559;
              if (v560 < v559) {
                char v561 = 0;
              }
              uint64_t v562 = ~(-1 << v561);
              if (v559 <= v560) {
                char v563 = v559 & 0x3F;
              }
              else {
                char v563 = 0;
              }
              *(void *)(a1 + 72) = (v562 << v563) | v558;
              uint64_t v564 = *((void *)v552 + 1);
              v565 = GTTraceFunc_argumentBytesWithMap(a2, v552[24], a3);
              if ((int)*((void *)v27 + 2) >= 1)
              {
                v566 = (void *)(a1 + 8 * v564 + 80);
                uint64_t v567 = *((void *)v27 + 2);
                do
                {
                  uint64_t v568 = *(void *)v565;
                  v565 += 8;
                  *v566++ = v568;
                  --v567;
                }
                while (v567);
              }
              uint64_t v569 = a1 + 56;
              v570 = (void *)(a1 + 56 + 8 * *((void *)v27 + 1) + 272);
              v571 = GTTraceFunc_argumentBytesWithMap(a2, v27[25], a3);
              memcpy(v570, v571, 8 * *((void *)v27 + 2));
              uint64_t v162 = v569 + 8 * *((void *)v27 + 1) + 520;
LABEL_497:
              unsigned int v406 = v27[26];
              goto LABEL_498;
            case -15272:
              v574 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
              unint64_t v575 = *((void *)v574 + 3);
              uint64_t v576 = 1 << v575;
              uint64_t v577 = a1 + 56 + 8 * (int)(v575 >> 6);
              *(void *)(v577 + 8) |= v576;
              *(void *)(a1 + 80 + 8 * *((void *)v574 + 3)) = GTTraceFunc_argumentBytesWithMap(a2, v574[32], a3);
              unint64_t v578 = *((void *)v574 + 3);
              uint64_t v579 = 1 << v578;
              uint64_t v580 = a1 + 56 + 8 * (int)(v578 >> 6);
              *(void *)(v580 + 16) |= v579;
              *(void *)(a1 + 80 + 8 * *((void *)v574 + 3) + 248) = *((void *)v574 + 1);
              uint64_t v549 = *((void *)v574 + 2);
              uint64_t v550 = a1 + 56 + 8 * *((void *)v574 + 3);
LABEL_500:
              *(void *)(v550 + 52mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v549;
              return;
            default:
              if (v7 != -15364) {
                return;
              }
              uint64_t v15 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
              bzero((void *)a1, 0x2B90uLL);
              uint64_t v16 = *((void *)v15 + 1);
              if (!v16) {
                return;
              }
              int v17 = 17;
              break;
          }
          goto LABEL_387;
      }
      return;
    }
    if (v7 <= -15891)
    {
      if (v7 <= -16029)
      {
        switch(v7)
        {
          case -16087:
            int v26 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
            BOOL v27 = v26;
            unint64_t v28 = *((void *)v26 + 1);
            unint64_t v29 = *((void *)v26 + 2) + v28;
            if (v29 >= 0x40) {
              unint64_t v29 = 64;
            }
            char v30 = v29 - v28;
            if (v29 < v28) {
              char v30 = 0;
            }
            uint64_t v31 = ~(-1 << v30);
            if (v28 <= v29) {
              char v32 = v28 & 0x3F;
            }
            else {
              char v32 = 0;
            }
            *(void *)(a1 + 6944) &= ~(v31 << v32);
            uint64_t v33 = *((void *)v26 + 1);
            int v34 = GTTraceFunc_argumentBytesWithMap(a2, v26[24], a3);
            if ((int)*((void *)v27 + 2) >= 1)
            {
              int v35 = (void *)(a1 + 8 * v33 + 6952);
              uint64_t v36 = *((void *)v27 + 2);
              do
              {
                uint64_t v37 = *(void *)v34;
                v34 += 8;
                *v35++ = v37;
                --v36;
              }
              while (v36);
            }
            uint64_t v38 = a1 + 8 * *((void *)v27 + 1);
            uint64_t v39 = 7200;
LABEL_164:
            uint64_t v162 = v38 + v39;
            goto LABEL_354;
          case -16086:
            v581 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
            uint64_t v582 = *((void *)v581 + 1);
            v583 = GTTraceFunc_argumentBytesWithMap(a2, v581[24], a3);
            if ((int)*((void *)v581 + 2) >= 1)
            {
              v584 = (void *)(a1 + 8 * v582 + 7448);
              uint64_t v585 = *((void *)v581 + 2);
              do
              {
                uint64_t v586 = *(void *)v583;
                v583 += 8;
                *v584++ = v586;
                --v585;
              }
              while (v585);
            }
            break;
          case -16085:
            v587 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
            uint64_t v588 = *((void *)v587 + 1);
            v589 = GTTraceFunc_argumentBytesWithMap(a2, v587[24], a3);
            if ((int)*((void *)v587 + 2) >= 1)
            {
              v590 = (void *)(a1 + 8 * v588 + 8472);
              uint64_t v591 = *((void *)v587 + 2);
              do
              {
                uint64_t v592 = *(void *)v589;
                v589 += 8;
                *v590++ = v592;
                --v591;
              }
              while (v591);
            }
            break;
          case -16084:
            int v171 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
            uint64_t v593 = *((void *)v171 + 1);
            v594 = GTTraceFunc_argumentBytesWithMap(a2, v171[24], a3);
            if ((int)*((void *)v171 + 2) >= 1)
            {
              v595 = (void *)(a1 + 8 * v593 + 8472);
              uint64_t v596 = *((void *)v171 + 2);
              do
              {
                uint64_t v597 = *(void *)v594;
                v594 += 8;
                *v595++ = v597;
                --v596;
              }
              while (v596);
            }
            uint64_t v598 = a1 + 56;
            v599 = (void *)(a1 + 56 + 4 * *((void *)v171 + 1) + 10548);
            v600 = GTTraceFunc_argumentBytesWithMap(a2, v171[25], a3);
            memcpy(v599, v600, 4 * *((void *)v171 + 2));
            uint64_t v180 = v598 + 4 * *((void *)v171 + 1);
            uint64_t v181 = 10612;
            goto LABEL_513;
          case -16077:
            v602 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
            *(void *)(a1 + 8608) = *((void *)v602 + 1);
            v572 = GTTraceFunc_argumentBytesWithMap(a2, v602[16], a3);
            v601 = (void *)(a1 + 8616);
            size_t v573 = 48 * *((void *)v602 + 1);
            goto LABEL_516;
          case -16076:
            v603 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
            *(void *)(a1 + 9384) = *((void *)v603 + 1);
            v572 = GTTraceFunc_argumentBytesWithMap(a2, v603[16], a3);
            v601 = (void *)(a1 + 9392);
            size_t v573 = 32 * *((void *)v603 + 1);
            goto LABEL_516;
          case -16074:
            v604 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
            *(_DWORD *)(a1 + 56 + 4 * *((void *)v604 + 3) + 10696) = *((void *)v604 + 1);
            *(_DWORD *)(a1 + 56 + 4 * *((void *)v604 + 3) + 1082mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *((void *)v604 + 2);
            break;
          default:
            return;
        }
      }
      else
      {
        switch(v7)
        {
          case -16028:
            uint64_t v18 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
            *(void *)(a1 + 8 * *((void *)v18 + 2) + 128) = *((void *)v18 + 1);
            break;
          case -16027:
            *(unsigned char *)(a1 + 194) = *((void *)GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3)
                                   + 1);
            break;
          case -16026:
            *(unsigned char *)(a1 + 195) = *((void *)GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3)
                                   + 1);
            break;
          case -16025:
          case -16024:
          case -16023:
          case -16019:
          case -16018:
          case -16016:
          case -16015:
            return;
          case -16022:
            uint64_t v496 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
            *(void *)(a1 + 8 * *((void *)v496 + 2) + 9992) = *((void *)v496 + 1);
            break;
          case -16021:
            *(unsigned char *)(a1 + 11144) = *((void *)GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3)
                                     + 1);
            break;
          case -16020:
            *(unsigned char *)(a1 + 11145) = *((void *)GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3)
                                     + 1);
            break;
          case -16017:
            v497 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
            *(void *)(a1 + 2032) = *((void *)v497 + 1);
            *(_DWORD *)(a1 + 2172) = *((void *)v497 + 2);
            break;
          case -16014:
            uint64_t v498 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
            bzero((void *)a1, 0x2B90uLL);
            uint64_t v499 = *((void *)v498 + 1);
            if (v499)
            {
              *(_DWORD *)a1 = 28;
              uint64_t v500 = *a2;
              *(void *)(a1 + 8) = v499;
              *(void *)(a1 + 16) = v500;
              *(void *)(a1 + 24) = -1;
              *(void *)(a1 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *(void *)v498;
              bzero((void *)(a1 + 56), 0x888uLL);
              memset_pattern16((void *)(a1 + 2240), &unk_1DA2C0, 0x100uLL);
              *(void *)(a1 + 824) = -1;
              *(void *)&long long v501 = -1;
              *((void *)&v501 + 1) = -1;
              *(_OWORD *)(a1 + 792) = v501;
              *(_OWORD *)(a1 + 808) = v501;
              *(_OWORD *)(a1 + 76mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v501;
              *(_OWORD *)(a1 + 776) = v501;
              *(_OWORD *)(a1 + 728) = v501;
              *(_OWORD *)(a1 + 744) = v501;
              *(_OWORD *)(a1 + 696) = v501;
              *(_OWORD *)(a1 + 712) = v501;
              *(_OWORD *)(a1 + 664) = v501;
              *(_OWORD *)(a1 + 68mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v501;
              *(_OWORD *)(a1 + 632) = v501;
              *(_OWORD *)(a1 + 648) = v501;
              *(_OWORD *)(a1 + 60mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v501;
              *(_OWORD *)(a1 + 616) = v501;
              *(_OWORD *)(a1 + 584) = v501;
              *(unsigned char *)(a1 + 2304) = *((void *)v498 + 2);
            }
            break;
          case -16013:
            uint64_t v12 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
            bzero((void *)a1, 0x2B90uLL);
            uint64_t v13 = *((void *)v12 + 1);
            if (v13)
            {
              int v14 = 82;
              goto LABEL_435;
            }
            break;
          default:
            if (v7 == -15984)
            {
              v605 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
              *(unsigned char *)(v6 + 253mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *((_DWORD *)v605 + 4);
              *(_DWORD *)(a1 + 1074mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *((void *)v605 + 1);
            }
            else if (v7 == -15970)
            {
              *(unsigned char *)(a1 + 11146) = *((_DWORD *)GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3)+ 2);
            }
            break;
        }
      }
    }
    else
    {
      if (v7 > -15649)
      {
        if (v7 > -15588)
        {
          switch(v7)
          {
            case -15587:
              uint64_t v15 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
              bzero((void *)a1, 0x2B90uLL);
              uint64_t v16 = *((void *)v15 + 1);
              if (!v16) {
                return;
              }
              int v17 = 21;
              goto LABEL_387;
            case -15586:
              uint64_t v15 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
              bzero((void *)a1, 0x2B90uLL);
              uint64_t v452 = *((void *)v15 + 1);
              if (!v452) {
                return;
              }
              *(_DWORD *)a1 = 28;
              uint64_t v453 = *a2;
              *(void *)(a1 + 8) = v452;
              *(void *)(a1 + 16) = v453;
              *(void *)(a1 + 24) = -1;
              *(void *)(a1 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *(void *)v15;
              bzero((void *)(a1 + 56), 0x888uLL);
              memset_pattern16((void *)(a1 + 2240), &unk_1DA2C0, 0x100uLL);
              *(void *)(a1 + 824) = -1;
              *(void *)&long long v454 = -1;
              *((void *)&v454 + 1) = -1;
              *(_OWORD *)(a1 + 792) = v454;
              *(_OWORD *)(a1 + 808) = v454;
              *(_OWORD *)(a1 + 76mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v454;
              *(_OWORD *)(a1 + 776) = v454;
              *(_OWORD *)(a1 + 728) = v454;
              *(_OWORD *)(a1 + 744) = v454;
              *(_OWORD *)(a1 + 696) = v454;
              *(_OWORD *)(a1 + 712) = v454;
              *(_OWORD *)(a1 + 664) = v454;
              *(_OWORD *)(a1 + 68mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v454;
              *(_OWORD *)(a1 + 632) = v454;
              *(_OWORD *)(a1 + 648) = v454;
              *(_OWORD *)(a1 + 60mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v454;
              *(_OWORD *)(a1 + 616) = v454;
              *(_OWORD *)(a1 + 584) = v454;
              *(unsigned char *)(a1 + 2304) = -1;
              goto LABEL_388;
            case -15585:
              uint64_t v15 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
              bzero((void *)a1, 0x2B90uLL);
              uint64_t v16 = *((void *)v15 + 1);
              if (!v16) {
                return;
              }
              int v17 = 74;
LABEL_387:
              *(_DWORD *)a1 = v17;
              uint64_t v455 = *a2;
              *(void *)(a1 + 8) = v16;
              *(void *)(a1 + 16) = v455;
              *(void *)(a1 + 24) = -1;
              *(void *)(a1 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *(void *)v15;
LABEL_388:
              *(void *)(a1 + 56) = GTTraceFunc_argumentBytesWithMap(a2, v15[16], a3);
              break;
            case -15583:
            case -15581:
              goto LABEL_50;
            case -15582:
              uint64_t v456 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
              uint64_t v457 = v456;
              unint64_t v458 = *((void *)v456 + 1);
              unint64_t v459 = *((void *)v456 + 2) + v458;
              unint64_t v460 = 64;
              if (v459 >= 0x40) {
                unint64_t v459 = 64;
              }
              char v461 = v459 - v458;
              if (v459 < v458) {
                char v461 = 0;
              }
              uint64_t v462 = ~(-1 << v461);
              if (v458 <= v459) {
                char v463 = v458 & 0x3F;
              }
              else {
                char v463 = 0;
              }
              uint64_t v466 = *(void *)(a1 + 80);
              uint64_t v465 = (uint64_t *)(a1 + 80);
              uint64_t v464 = v466;
              *(v465 - 1) &= ~(v462 << v463);
              unint64_t v467 = *((void *)v456 + 1);
              if (*((void *)v456 + 2) + v467 < 0x40) {
                unint64_t v460 = *((void *)v456 + 2) + v467;
              }
              char v468 = v460 - v467;
              if (v460 < v467) {
                char v468 = 0;
              }
              uint64_t v469 = ~(-1 << v468);
              if (v467 <= v460) {
                char v470 = v467 & 0x3F;
              }
              else {
                char v470 = 0;
              }
              *uint64_t v465 = v464 & ~(v469 << v470);
              uint64_t v471 = *((void *)v456 + 1);
              v472 = GTTraceFunc_argumentBytesWithMap(a2, v456[24], a3);
              if ((int)*((void *)v457 + 2) >= 1)
              {
                uint64_t v473 = &v465[v471 + 1];
                uint64_t v474 = *((void *)v457 + 2);
                do
                {
                  uint64_t v475 = *(void *)v472;
                  v472 += 8;
                  *v473++ = v475;
                  --v474;
                }
                while (v474);
              }
              return;
            case -15580:
              uint64_t v476 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
              v477 = v476;
              unint64_t v478 = *((void *)v476 + 1);
              unint64_t v479 = *((void *)v476 + 2) + v478;
              unint64_t v480 = 64;
              if (v479 >= 0x40) {
                unint64_t v479 = 64;
              }
              char v481 = v479 - v478;
              if (v479 < v478) {
                char v481 = 0;
              }
              uint64_t v482 = ~(-1 << v481);
              if (v478 <= v479) {
                char v483 = v478 & 0x3F;
              }
              else {
                char v483 = 0;
              }
              uint64_t v486 = *(void *)(a1 + 80);
              uint64_t v485 = (uint64_t *)(a1 + 80);
              uint64_t v484 = v486;
              *(v485 - 1) &= ~(v482 << v483);
              unint64_t v487 = *((void *)v476 + 1);
              if (*((void *)v476 + 2) + v487 < 0x40) {
                unint64_t v480 = *((void *)v476 + 2) + v487;
              }
              char v488 = v480 - v487;
              if (v480 < v487) {
                char v488 = 0;
              }
              uint64_t v489 = ~(-1 << v488);
              if (v487 <= v480) {
                char v490 = v487 & 0x3F;
              }
              else {
                char v490 = 0;
              }
              *uint64_t v485 = v484 & ~(v489 << v490);
              uint64_t v491 = *((void *)v476 + 1);
              uint64_t v492 = GTTraceFunc_argumentBytesWithMap(a2, v476[24], a3);
              if ((int)*((void *)v477 + 2) >= 1)
              {
                uint64_t v493 = &v485[v491 + 1];
                uint64_t v494 = *((void *)v477 + 2);
                do
                {
                  uint64_t v495 = *(void *)v492;
                  v492 += 8;
                  *v493++ = v495;
                  --v494;
                }
                while (v494);
              }
              return;
            default:
              return;
          }
          return;
        }
        if (v7 != -15648)
        {
          if (v7 != -15642)
          {
            if (v7 == -15623)
            {
LABEL_50:
              long long v51 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
              unint64_t v52 = *((void *)v51 + 2);
              uint64_t v53 = 1 << v52;
              uint64_t v54 = a1 + 8 * (int)(v52 >> 6);
              *(void *)(v54 + 72) &= ~v53;
              *(void *)(a1 + 80 + 8 * *((void *)v51 + 2) + 8) = *((void *)v51 + 1);
              *(void *)(a1 + 80 + 8 * (int)(*((void *)v51 + 2) >> 6)) &= ~(1 << *((void *)v51 + 2));
            }
            return;
          }
LABEL_65:
          *(void *)(a1 + 24) = *a2;
          return;
        }
LABEL_54:
        long long v55 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
        *(void *)(a1 + 48) = GTTraceFunc_argumentBytesWithMap(a2, v55[8], a3);
        return;
      }
      if (v7 <= -15823)
      {
        if (v7 > -15885)
        {
          if (v7 == -15884) {
            goto LABEL_65;
          }
          if (v7 != -15870) {
            return;
          }
          uint64_t v12 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          bzero((void *)a1, 0x2B90uLL);
          uint64_t v13 = *((void *)v12 + 1);
          if (!v13) {
            return;
          }
          int v14 = 74;
          goto LABEL_435;
        }
        if (v7 == -15890) {
          goto LABEL_54;
        }
        if (v7 == -15888) {
          *(void *)(a1 + 56) = *((void *)GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3) + 1);
        }
      }
      else
      {
        if (v7 > -15795)
        {
          if (v7 == -15794) {
            goto LABEL_54;
          }
          if (v7 == -15789) {
            goto LABEL_65;
          }
          if (v7 != -15673) {
            return;
          }
          uint64_t v12 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          bzero((void *)a1, 0x2B90uLL);
          uint64_t v13 = *((void *)v12 + 1);
          if (!v13) {
            return;
          }
          int v14 = 17;
LABEL_435:
          *(_DWORD *)a1 = v14;
          uint64_t v502 = *a2;
          *(void *)(a1 + 8) = v13;
          *(void *)(a1 + 16) = v502;
          *(void *)(a1 + 24) = -1;
          *(void *)(a1 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *(void *)v12;
          return;
        }
        if (v7 == -15822)
        {
          v606 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(_DWORD *)(a1 + 11128) = *((void *)v606 + 1);
          *(void *)(a1 + 9912) = GTTraceFunc_argumentBytesWithMap(a2, v606[16], a3);
        }
        else if (v7 == -15812)
        {
          long long v56 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(unsigned char *)(v6 + 2524) = *((void *)v56 + 1);
          *(_DWORD *)(a1 + 11124) = *((void *)v56 + 2);
        }
      }
    }
  }
}

void *GTMTLSMBuilder_commitObject(uint64_t a1, void *a2)
{
  uint64_t v4 = a2 + 1;
  uint64_t v5 = *find_entry(*(void *)(a1 + 32), (unsigned char *)a2 + 8, 8uLL, 0);
  if (v5) {
    uint64_t v5 = *(void *)(v5 + 32);
  }
  a2[4] = v5;
  apr_hash_set(*(apr_hash_t **)(a1 + 32), v4, 8, a2);
  return a2;
}

BOOL GTMTLSMBuilder_streamIntersectionRange(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    return 0;
  }
  uint64_t v5 = *(void *)(a3 + 32);
  if (v5 && (*(unsigned char *)(v5 + 79) & 8) != 0) {
    uint64_t v6 = (void *)(v5 + 64);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t Func = GTTraceStream_lastFunc(a3);
  if (*v6 >= a1 + a2) {
    return 0;
  }
  unint64_t v9 = (unint64_t *)Func;
  return !IsFuncEnumDestructor(*(_DWORD *)(Func + 8)) || a1 <= *v9;
}

uint64_t GTMTLSMBuilder_getStreamObjectType(uint64_t a1)
{
  if (a1 && (uint64_t v1 = *(void *)(a1 + 32)) != 0 && (*(unsigned char *)(v1 + 79) & 8) != 0) {
    return GetFuncEnumConstructorType(*(_DWORD *)(v1 + 72));
  }
  else {
    return 0;
  }
}

void GTMTLSMBuilder_buffer(uint64_t a1, uint64_t a2)
{
  if (!GTMTLSMBuilder_streamIntersectionRange(*(void *)(a1 + 8), *(void *)(a1 + 16), a2)) {
    return;
  }
  long long v46 = 0u;
  *(void *)&long long v47 = 0;
  long long v52 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v51 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  LODWORD(v46) = 22;
  *((void *)&v47 + 1) = -1;
  WORD1(v52) = 2;
  long long v50 = 0xFFFFFFFFFFFFFFFFLL;
  long long v53 = 0xFFFFFFFFFFFFFFFFLL;
  *((void *)&v48 + 1) = *(void *)a1;
  ++*(_DWORD *)(a1 + 48);
  if (a2 && (uint64_t v4 = *(void *)(a2 + 32)) != 0 && (*(unsigned char *)(v4 + 79) & 8) != 0) {
    uint64_t v5 = (uint64_t *)(v4 + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  GTMTLSMBuffer_processTraceFuncWithMap((char *)&v46, *(void *)(a1 + 40), v5);
  uint64_t v6 = *(void *)(a2 + 32);
  if (v6)
  {
    unsigned int v7 = 0;
    while (1)
    {
      unsigned int v8 = atomic_load((unsigned int *)(v6 + 4));
      uint64_t v9 = v7 + (v8 >> 6) - 1;
      if ((int)v9 > 1) {
        break;
      }
      uint64_t v6 = *(void *)(v6 + 40);
      unsigned int v7 = v9;
      if (!v6)
      {
        unsigned int v7 = v9;
        goto LABEL_13;
      }
    }
    uint64_t v9 = 1;
  }
  else
  {
    unsigned int v7 = 0;
    uint64_t v9 = 0;
  }
LABEL_13:
  unint64_t v10 = v7 | (unint64_t)(v9 << 32);
LABEL_14:
  uint64_t v11 = v6 + 64;
  while (1)
  {
    if (!v6
      || (*(unsigned char *)(v11 + ((uint64_t)(HIDWORD(v10) - (int)v10) << 6) + 15) & 8) == 0
      || (uint64_t v12 = v11 + ((uint64_t)(HIDWORD(v10) - (int)v10) << 6),
          unint64_t v13 = *(void *)(a1 + 8),
          unint64_t v14 = *(void *)v12,
          *(void *)v12 >= *(void *)(a1 + 16) + v13))
    {
      unint64_t v29 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0xA0uLL);
      long long v30 = v47;
      *unint64_t v29 = v46;
      v29[1] = v30;
      long long v31 = v51;
      long long v33 = v48;
      long long v32 = v49;
      v29[4] = v50;
      v29[5] = v31;
      v29[2] = v33;
      v29[3] = v32;
      long long v34 = v55;
      long long v36 = v52;
      long long v35 = v53;
      v29[8] = v54;
      v29[9] = v34;
      v29[6] = v36;
      v29[7] = v35;
      uint64_t v37 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v29 + 8, 8uLL, 0);
      if (v37) {
        uint64_t v37 = *(void *)(v37 + 32);
      }
      *((void *)v29 + 4) = v37;
      apr_hash_set(*(apr_hash_t **)(a1 + 32), (char *)v29 + 8, 8, v29);
      unint64_t v14 = -1;
      goto LABEL_35;
    }
    int v15 = *(_DWORD *)(v12 + 8);
    if (v15 > -16368)
    {
      if (v15 == -16122 || v15 == -16367)
      {
LABEL_25:
        if (v13 <= v14)
        {
          int v17 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0xA0uLL);
          long long v18 = v47;
          *(_OWORD *)int v17 = v46;
          *((_OWORD *)v17 + 1) = v18;
          long long v19 = v51;
          long long v21 = v48;
          long long v20 = v49;
          *((_OWORD *)v17 + 4) = v50;
          *((_OWORD *)v17 + 5) = v19;
          *((_OWORD *)v17 + 2) = v21;
          *((_OWORD *)v17 + 3) = v20;
          long long v22 = v55;
          long long v24 = v52;
          long long v23 = v53;
          *((_OWORD *)v17 + 8) = v54;
          *((_OWORD *)v17 + 9) = v22;
          *((_OWORD *)v17 + 6) = v24;
          *((_OWORD *)v17 + 7) = v23;
          uint64_t v25 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v17 + 8, 8uLL, 0);
          if (v25) {
            uint64_t v25 = *(void *)(v25 + 32);
          }
          v17[4] = v25;
          apr_hash_set(*(apr_hash_t **)(a1 + 32), v17 + 1, 8, v17);
          v17[3] = v14;
        }
        goto LABEL_30;
      }
      goto LABEL_30;
    }
    if (v15 == -16372) {
      goto LABEL_25;
    }
    if (v15 == -16370) {
      break;
    }
LABEL_30:
    GTMTLSMBuffer_processTraceFuncWithMap((char *)&v46, *(void *)(a1 + 40), (uint64_t *)v12);
    unsigned int v26 = atomic_load((unsigned int *)(v6 + 4));
    int v27 = v10 + (v26 >> 6);
    uint64_t v28 = (HIDWORD(v10) + 1);
    unint64_t v10 = (v28 << 32) | v10;
    if (v28 == v27 - 1)
    {
      unint64_t v10 = (v28 << 32) | v28;
      uint64_t v6 = *(void *)(v6 + 40);
      goto LABEL_14;
    }
  }
  if (v13 <= v14)
  {
    unint64_t v29 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0xA0uLL);
    long long v38 = v47;
    *unint64_t v29 = v46;
    v29[1] = v38;
    long long v39 = v51;
    long long v41 = v48;
    long long v40 = v49;
    v29[4] = v50;
    v29[5] = v39;
    v29[2] = v41;
    v29[3] = v40;
    long long v42 = v55;
    long long v44 = v52;
    long long v43 = v53;
    v29[8] = v54;
    v29[9] = v42;
    v29[6] = v44;
    v29[7] = v43;
    uint64_t v45 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v29 + 8, 8uLL, 0);
    if (v45) {
      uint64_t v45 = *(void *)(v45 + 32);
    }
    *((void *)v29 + 4) = v45;
    apr_hash_set(*(apr_hash_t **)(a1 + 32), (char *)v29 + 8, 8, v29);
LABEL_35:
    *((void *)v29 + 3) = v14;
  }
}

void GTMTLSMBuilder_texture(uint64_t a1, uint64_t a2)
{
  if (!GTMTLSMBuilder_streamIntersectionRange(*(void *)(a1 + 8), *(void *)(a1 + 16), a2)) {
    return;
  }
  long long v55 = 0u;
  *(void *)&long long v56 = 0;
  long long v66 = 0u;
  long long v67 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v58 = 0u;
  long long v57 = 0u;
  LODWORD(v55) = 80;
  *((void *)&v56 + 1) = -1;
  WORD1(v61) = 2;
  long long v59 = 0xFFFFFFFFFFFFFFFFLL;
  uint64_t v68 = 0xFFFFFFFFLL;
  *((void *)&v57 + 1) = *(void *)a1;
  ++*(_DWORD *)(a1 + 52);
  if (a2 && (uint64_t v4 = *(void *)(a2 + 32)) != 0 && (*(unsigned char *)(v4 + 79) & 8) != 0) {
    uint64_t v5 = (uint64_t *)(v4 + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  GTMTLSMTexture_processTraceFuncWithMap((char *)&v55, *(void *)(a1 + 40), v5);
  uint64_t v6 = *(void *)(a2 + 32);
  if (v6)
  {
    unsigned int v7 = 0;
    while (1)
    {
      unsigned int v8 = atomic_load((unsigned int *)(v6 + 4));
      uint64_t v9 = v7 + (v8 >> 6) - 1;
      if ((int)v9 > 1) {
        break;
      }
      uint64_t v6 = *(void *)(v6 + 40);
      unsigned int v7 = v9;
      if (!v6)
      {
        unsigned int v7 = v9;
        goto LABEL_13;
      }
    }
    uint64_t v9 = 1;
  }
  else
  {
    unsigned int v7 = 0;
    uint64_t v9 = 0;
  }
LABEL_13:
  unint64_t v10 = v7 | (unint64_t)(v9 << 32);
LABEL_14:
  uint64_t v11 = v6 + 64;
  while (1)
  {
    if (!v6
      || (*(unsigned char *)(v11 + ((uint64_t)(HIDWORD(v10) - (int)v10) << 6) + 15) & 8) == 0
      || (uint64_t v12 = v11 + ((uint64_t)(HIDWORD(v10) - (int)v10) << 6),
          unint64_t v13 = *(void *)(a1 + 8),
          unint64_t v14 = *(void *)v12,
          *(void *)v12 >= *(void *)(a1 + 16) + v13))
    {
      long long v32 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0xD8uLL);
      long long v33 = v56;
      *long long v32 = v55;
      v32[1] = v33;
      long long v34 = v60;
      long long v36 = v57;
      long long v35 = v58;
      v32[4] = v59;
      v32[5] = v34;
      int8x16_t v32[2] = v36;
      v32[3] = v35;
      long long v37 = v64;
      long long v39 = v61;
      long long v38 = v62;
      v32[8] = v63;
      v32[9] = v37;
      void v32[6] = v39;
      v32[7] = v38;
      long long v41 = v66;
      long long v40 = v67;
      long long v42 = v65;
      *((void *)v32 + 26) = v68;
      v32[11] = v41;
      v32[12] = v40;
      v32[10] = v42;
      uint64_t v43 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v32 + 8, 8uLL, 0);
      if (v43) {
        uint64_t v43 = *(void *)(v43 + 32);
      }
      *((void *)v32 + 4) = v43;
      apr_hash_set(*(apr_hash_t **)(a1 + 32), (char *)v32 + 8, 8, v32);
      unint64_t v14 = -1;
      goto LABEL_35;
    }
    int v15 = *(_DWORD *)(v12 + 8);
    if (v15 > -16233)
    {
      if (v15 == -16232 || v15 == -16114)
      {
LABEL_25:
        if (v13 <= v14)
        {
          int v17 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0xD8uLL);
          long long v18 = v56;
          *(_OWORD *)int v17 = v55;
          *((_OWORD *)v17 + 1) = v18;
          long long v19 = v60;
          long long v21 = v57;
          long long v20 = v58;
          *((_OWORD *)v17 + 4) = v59;
          *((_OWORD *)v17 + 5) = v19;
          *((_OWORD *)v17 + 2) = v21;
          *((_OWORD *)v17 + 3) = v20;
          long long v22 = v64;
          long long v24 = v61;
          long long v23 = v62;
          *((_OWORD *)v17 + 8) = v63;
          *((_OWORD *)v17 + 9) = v22;
          *((_OWORD *)v17 + 6) = v24;
          *((_OWORD *)v17 + 7) = v23;
          long long v26 = v66;
          long long v25 = v67;
          long long v27 = v65;
          v17[26] = v68;
          *((_OWORD *)v17 + 11) = v26;
          *((_OWORD *)v17 + 12) = v25;
          *((_OWORD *)v17 + 1mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v27;
          uint64_t v28 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v17 + 8, 8uLL, 0);
          if (v28) {
            uint64_t v28 = *(void *)(v28 + 32);
          }
          v17[4] = v28;
          apr_hash_set(*(apr_hash_t **)(a1 + 32), v17 + 1, 8, v17);
          v17[3] = v14;
        }
        goto LABEL_30;
      }
      goto LABEL_30;
    }
    if (v15 == -16240) {
      goto LABEL_25;
    }
    if (v15 == -16238) {
      break;
    }
LABEL_30:
    GTMTLSMTexture_processTraceFuncWithMap((char *)&v55, *(void *)(a1 + 40), (uint64_t *)v12);
    unsigned int v29 = atomic_load((unsigned int *)(v6 + 4));
    int v30 = v10 + (v29 >> 6);
    uint64_t v31 = (HIDWORD(v10) + 1);
    unint64_t v10 = (v31 << 32) | v10;
    if (v31 == v30 - 1)
    {
      unint64_t v10 = (v31 << 32) | v31;
      uint64_t v6 = *(void *)(v6 + 40);
      goto LABEL_14;
    }
  }
  if (v13 <= v14)
  {
    long long v32 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0xD8uLL);
    long long v44 = v56;
    *long long v32 = v55;
    v32[1] = v44;
    long long v45 = v60;
    long long v47 = v57;
    long long v46 = v58;
    v32[4] = v59;
    v32[5] = v45;
    int8x16_t v32[2] = v47;
    v32[3] = v46;
    long long v48 = v64;
    long long v50 = v61;
    long long v49 = v62;
    v32[8] = v63;
    v32[9] = v48;
    void v32[6] = v50;
    v32[7] = v49;
    long long v52 = v66;
    long long v51 = v67;
    long long v53 = v65;
    *((void *)v32 + 26) = v68;
    v32[11] = v52;
    v32[12] = v51;
    v32[10] = v53;
    uint64_t v54 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v32 + 8, 8uLL, 0);
    if (v54) {
      uint64_t v54 = *(void *)(v54 + 32);
    }
    *((void *)v32 + 4) = v54;
    apr_hash_set(*(apr_hash_t **)(a1 + 32), (char *)v32 + 8, 8, v32);
LABEL_35:
    *((void *)v32 + 3) = v14;
  }
}

void GTMTLSMBuilder_counterSampleBuffer(uint64_t a1, uint64_t a2)
{
  if (GTMTLSMBuilder_streamIntersectionRange(*(void *)(a1 + 8), *(void *)(a1 + 16), a2))
  {
    long long v21 = 0u;
    *(void *)&long long v22 = 0;
    long long v23 = 0u;
    LODWORD(v21) = 31;
    *((void *)&v22 + 1) = -1;
    *((void *)&v23 + 1) = *(void *)a1;
    uint64_t v24 = 0;
    ++*(_DWORD *)(a1 + 124);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unsigned int v5 = 0;
      while (1)
      {
        unsigned int v6 = atomic_load((unsigned int *)(v4 + 4));
        uint64_t v7 = v5 + (v6 >> 6) - 1;
        if ((int)v7 > 0) {
          break;
        }
        uint64_t v4 = *(void *)(v4 + 40);
        unsigned int v5 = v7;
        if (!v4)
        {
          unsigned int v5 = v7;
          goto LABEL_9;
        }
      }
    }
    else
    {
      unsigned int v5 = 0;
    }
    uint64_t v7 = 0;
LABEL_9:
    unint64_t v8 = v5 | (unint64_t)(v7 << 32);
LABEL_10:
    uint64_t v9 = v4 + 64;
    while (1)
    {
      if (!v4
        || (*(unsigned char *)(v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6) + 15) & 8) == 0
        || (uint64_t v10 = v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6),
            unint64_t v11 = *(void *)(a1 + 8),
            unint64_t v12 = *(void *)v10,
            *(void *)v10 >= *(void *)(a1 + 16) + v11))
      {
        uint64_t v16 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0x38uLL);
        long long v17 = v22;
        _OWORD *v16 = v21;
        v16[1] = v17;
        _OWORD v16[2] = v23;
        *((void *)v16 + 6) = v24;
        uint64_t v18 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v16 + 8, 8uLL, 0);
        if (v18) {
          uint64_t v18 = *(void *)(v18 + 32);
        }
        *((void *)v16 + 4) = v18;
        apr_hash_set(*(apr_hash_t **)(a1 + 32), (char *)v16 + 8, 8, v16);
        unint64_t v12 = -1;
        goto LABEL_20;
      }
      if (*(_DWORD *)(v10 + 8) == -15867) {
        break;
      }
      GTMTLSMCounterSampleBuffer_processTraceFuncWithMap((char *)&v21, *(void *)(a1 + 40), (uint64_t *)v10);
      unsigned int v13 = atomic_load((unsigned int *)(v4 + 4));
      int v14 = v8 + (v13 >> 6);
      uint64_t v15 = (HIDWORD(v8) + 1);
      unint64_t v8 = (v15 << 32) | v8;
      if (v15 == v14 - 1)
      {
        unint64_t v8 = (v15 << 32) | v15;
        uint64_t v4 = *(void *)(v4 + 40);
        goto LABEL_10;
      }
    }
    if (v11 <= v12)
    {
      uint64_t v16 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0x38uLL);
      long long v19 = v22;
      _OWORD *v16 = v21;
      v16[1] = v19;
      _OWORD v16[2] = v23;
      *((void *)v16 + 6) = v24;
      uint64_t v20 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v16 + 8, 8uLL, 0);
      if (v20) {
        uint64_t v20 = *(void *)(v20 + 32);
      }
      *((void *)v16 + 4) = v20;
      apr_hash_set(*(apr_hash_t **)(a1 + 32), (char *)v16 + 8, 8, v16);
LABEL_20:
      *((void *)v16 + 3) = v12;
    }
  }
}

void GTMTLSMBuilder_indirectCommandBuffer(uint64_t a1, uint64_t a2)
{
  if (!GTMTLSMBuilder_streamIntersectionRange(*(void *)(a1 + 8), *(void *)(a1 + 16), a2)) {
    return;
  }
  long long v35 = 0u;
  *(void *)&long long v36 = 0;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v37 = 0u;
  LODWORD(v35) = 57;
  *((void *)&v36 + 1) = -1;
  WORD1(v41) = 2;
  long long v39 = 0xFFFFFFFFFFFFFFFFLL;
  ++*(_DWORD *)(a1 + 68);
  uint64_t v4 = *(void *)(a2 + 32);
  if (v4)
  {
    unsigned int v5 = 0;
    while (1)
    {
      unsigned int v6 = atomic_load((unsigned int *)(v4 + 4));
      uint64_t v7 = v5 + (v6 >> 6) - 1;
      if ((int)v7 > 0) {
        break;
      }
      uint64_t v4 = *(void *)(v4 + 40);
      unsigned int v5 = v7;
      if (!v4)
      {
        unsigned int v5 = v7;
        goto LABEL_9;
      }
    }
  }
  else
  {
    unsigned int v5 = 0;
  }
  uint64_t v7 = 0;
LABEL_9:
  unint64_t v8 = v5 | (unint64_t)(v7 << 32);
LABEL_10:
  uint64_t v9 = v4 + 64;
  while (1)
  {
    if (!v4
      || (*(unsigned char *)(v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6) + 15) & 8) == 0
      || (uint64_t v10 = v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6),
          unint64_t v11 = *(void *)(a1 + 8),
          unint64_t v12 = *(void *)v10,
          *(void *)v10 >= *(void *)(a1 + 16) + v11))
    {
      uint64_t v24 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0x90uLL);
      long long v25 = v42;
      v24[6] = v41;
      int8x16_t v24[7] = v25;
      v24[8] = v43;
      long long v26 = v38;
      _OWORD v24[2] = v37;
      v24[3] = v26;
      long long v27 = v40;
      void v24[4] = v39;
      v24[5] = v27;
      long long v28 = v36;
      *uint64_t v24 = v35;
      v24[1] = v28;
      uint64_t v29 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v24 + 8, 8uLL, 0);
      if (v29) {
        uint64_t v29 = *(void *)(v29 + 32);
      }
      *((void *)v24 + 4) = v29;
      apr_hash_set(*(apr_hash_t **)(a1 + 32), (char *)v24 + 8, 8, v24);
      unint64_t v12 = -1;
      goto LABEL_29;
    }
    int v13 = *(_DWORD *)(v10 + 8);
    if (v13 == -15925 || v13 == -15919)
    {
      if (v11 <= v12)
      {
        uint64_t v15 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0x90uLL);
        long long v16 = v42;
        *((_OWORD *)v15 + 6) = v41;
        *((_OWORD *)v15 + 7) = v16;
        *((_OWORD *)v15 + 8) = v43;
        long long v17 = v38;
        *((_OWORD *)v15 + 2) = v37;
        *((_OWORD *)v15 + 3) = v17;
        long long v18 = v40;
        *((_OWORD *)v15 + 4) = v39;
        *((_OWORD *)v15 + 5) = v18;
        long long v19 = v36;
        *(_OWORD *)uint64_t v15 = v35;
        *((_OWORD *)v15 + 1) = v19;
        uint64_t v20 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v15 + 8, 8uLL, 0);
        if (v20) {
          uint64_t v20 = *(void *)(v20 + 32);
        }
        void v15[4] = v20;
        apr_hash_set(*(apr_hash_t **)(a1 + 32), v15 + 1, 8, v15);
        v15[3] = v12;
      }
      goto LABEL_24;
    }
    if (v13 == -15923) {
      break;
    }
LABEL_24:
    GTMTLSMIndirectCommandBuffer_processTraceFuncWithMap((char *)&v35, *(void *)(a1 + 40), (uint64_t *)v10);
    unsigned int v21 = atomic_load((unsigned int *)(v4 + 4));
    int v22 = v8 + (v21 >> 6);
    uint64_t v23 = (HIDWORD(v8) + 1);
    unint64_t v8 = (v23 << 32) | v8;
    if (v23 == v22 - 1)
    {
      unint64_t v8 = (v23 << 32) | v23;
      uint64_t v4 = *(void *)(v4 + 40);
      goto LABEL_10;
    }
  }
  if (v11 <= v12)
  {
    uint64_t v24 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0x90uLL);
    long long v30 = v42;
    v24[6] = v41;
    int8x16_t v24[7] = v30;
    v24[8] = v43;
    long long v31 = v38;
    _OWORD v24[2] = v37;
    v24[3] = v31;
    long long v32 = v40;
    void v24[4] = v39;
    v24[5] = v32;
    long long v33 = v36;
    *uint64_t v24 = v35;
    v24[1] = v33;
    uint64_t v34 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v24 + 8, 8uLL, 0);
    if (v34) {
      uint64_t v34 = *(void *)(v34 + 32);
    }
    *((void *)v24 + 4) = v34;
    apr_hash_set(*(apr_hash_t **)(a1 + 32), (char *)v24 + 8, 8, v24);
LABEL_29:
    *((void *)v24 + 3) = v12;
  }
}

void GTMTLSMBuilder_heap(uint64_t a1, uint64_t a2)
{
  if (!GTMTLSMBuilder_streamIntersectionRange(*(void *)(a1 + 8), *(void *)(a1 + 16), a2)) {
    return;
  }
  long long v29 = 0u;
  *(void *)&long long v30 = 0;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v31 = 0u;
  LODWORD(v29) = 50;
  *((void *)&v30 + 1) = -1;
  uint64_t v34 = 2;
  ++*(_DWORD *)(a1 + 84);
  uint64_t v4 = *(void *)(a2 + 32);
  if (v4)
  {
    unsigned int v5 = 0;
    while (1)
    {
      unsigned int v6 = atomic_load((unsigned int *)(v4 + 4));
      uint64_t v7 = v5 + (v6 >> 6) - 1;
      if ((int)v7 > 0) {
        break;
      }
      uint64_t v4 = *(void *)(v4 + 40);
      unsigned int v5 = v7;
      if (!v4)
      {
        unsigned int v5 = v7;
        goto LABEL_9;
      }
    }
  }
  else
  {
    unsigned int v5 = 0;
  }
  uint64_t v7 = 0;
LABEL_9:
  unint64_t v8 = v5 | (unint64_t)(v7 << 32);
LABEL_10:
  uint64_t v9 = v4 + 64;
  while (1)
  {
    if (!v4
      || (*(unsigned char *)(v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6) + 15) & 8) == 0
      || (uint64_t v10 = v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6),
          unint64_t v11 = *(void *)(a1 + 8),
          unint64_t v12 = *(void *)v10,
          *(void *)v10 >= *(void *)(a1 + 16) + v11))
    {
      int v22 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0x58uLL);
      long long v23 = v32;
      _OWORD v22[2] = v31;
      v22[3] = v23;
      v22[4] = v33;
      *((void *)v22 + 1mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v34;
      long long v24 = v30;
      *int v22 = v29;
      v22[1] = v24;
      uint64_t v25 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v22 + 8, 8uLL, 0);
      if (v25) {
        uint64_t v25 = *(void *)(v25 + 32);
      }
      *((void *)v22 + 4) = v25;
      apr_hash_set(*(apr_hash_t **)(a1 + 32), (char *)v22 + 8, 8, v22);
      unint64_t v12 = -1;
      goto LABEL_31;
    }
    int v13 = *(_DWORD *)(v10 + 8);
    if (v13 > -10209)
    {
      if ((v13 + 10208) < 2) {
        goto LABEL_22;
      }
      goto LABEL_26;
    }
    if (v13 == -16119 || v13 == -16115)
    {
LABEL_22:
      if (v11 <= v12)
      {
        uint64_t v15 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0x58uLL);
        long long v16 = v32;
        *((_OWORD *)v15 + 2) = v31;
        *((_OWORD *)v15 + 3) = v16;
        *((_OWORD *)v15 + 4) = v33;
        v15[10] = v34;
        long long v17 = v30;
        *(_OWORD *)uint64_t v15 = v29;
        *((_OWORD *)v15 + 1) = v17;
        uint64_t v18 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v15 + 8, 8uLL, 0);
        if (v18) {
          uint64_t v18 = *(void *)(v18 + 32);
        }
        void v15[4] = v18;
        apr_hash_set(*(apr_hash_t **)(a1 + 32), v15 + 1, 8, v15);
        v15[3] = v12;
      }
      goto LABEL_26;
    }
    if (v13 == -16118) {
      break;
    }
LABEL_26:
    GTMTLSMHeap_processTraceFuncWithMap((char *)&v29, *(void *)(a1 + 40), (uint64_t *)v10);
    unsigned int v19 = atomic_load((unsigned int *)(v4 + 4));
    int v20 = v8 + (v19 >> 6);
    uint64_t v21 = (HIDWORD(v8) + 1);
    unint64_t v8 = (v21 << 32) | v8;
    if (v21 == v20 - 1)
    {
      unint64_t v8 = (v21 << 32) | v21;
      uint64_t v4 = *(void *)(v4 + 40);
      goto LABEL_10;
    }
  }
  if (v11 <= v12)
  {
    int v22 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0x58uLL);
    long long v26 = v32;
    _OWORD v22[2] = v31;
    v22[3] = v26;
    v22[4] = v33;
    *((void *)v22 + 1mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v34;
    long long v27 = v30;
    *int v22 = v29;
    v22[1] = v27;
    uint64_t v28 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v22 + 8, 8uLL, 0);
    if (v28) {
      uint64_t v28 = *(void *)(v28 + 32);
    }
    *((void *)v22 + 4) = v28;
    apr_hash_set(*(apr_hash_t **)(a1 + 32), (char *)v22 + 8, 8, v22);
LABEL_31:
    *((void *)v22 + 3) = v12;
  }
}

void GTMTLSMBuilder_depthStencilState(uint64_t a1, uint64_t a2)
{
  if (GTMTLSMBuilder_streamIntersectionRange(*(void *)(a1 + 8), *(void *)(a1 + 16), a2))
  {
    long long v21 = 0u;
    *(void *)&long long v22 = 0;
    uint64_t v24 = 0;
    long long v23 = 0u;
    LODWORD(v21) = 34;
    *((void *)&v22 + 1) = -1;
    ++*(_DWORD *)(a1 + 120);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unsigned int v5 = 0;
      while (1)
      {
        unsigned int v6 = atomic_load((unsigned int *)(v4 + 4));
        uint64_t v7 = v5 + (v6 >> 6) - 1;
        if ((int)v7 > 0) {
          break;
        }
        uint64_t v4 = *(void *)(v4 + 40);
        unsigned int v5 = v7;
        if (!v4)
        {
          unsigned int v5 = v7;
          goto LABEL_9;
        }
      }
    }
    else
    {
      unsigned int v5 = 0;
    }
    uint64_t v7 = 0;
LABEL_9:
    unint64_t v8 = v5 | (unint64_t)(v7 << 32);
LABEL_10:
    uint64_t v9 = v4 + 64;
    while (1)
    {
      if (!v4
        || (*(unsigned char *)(v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6) + 15) & 8) == 0
        || (uint64_t v10 = v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6),
            unint64_t v11 = *(void *)(a1 + 8),
            unint64_t v12 = *(void *)v10,
            *(void *)v10 >= *(void *)(a1 + 16) + v11))
      {
        long long v16 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0x38uLL);
        long long v17 = v22;
        _OWORD *v16 = v21;
        v16[1] = v17;
        _OWORD v16[2] = v23;
        *((void *)v16 + 6) = v24;
        uint64_t v18 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v16 + 8, 8uLL, 0);
        if (v18) {
          uint64_t v18 = *(void *)(v18 + 32);
        }
        *((void *)v16 + 4) = v18;
        apr_hash_set(*(apr_hash_t **)(a1 + 32), (char *)v16 + 8, 8, v16);
        unint64_t v12 = -1;
        goto LABEL_20;
      }
      if (*(_DWORD *)(v10 + 8) == -16320) {
        break;
      }
      GTMTLSMDepthStencilState_processTraceFuncWithMap((char *)&v21, *(void *)(a1 + 40), (uint64_t *)v10);
      unsigned int v13 = atomic_load((unsigned int *)(v4 + 4));
      int v14 = v8 + (v13 >> 6);
      uint64_t v15 = (HIDWORD(v8) + 1);
      unint64_t v8 = (v15 << 32) | v8;
      if (v15 == v14 - 1)
      {
        unint64_t v8 = (v15 << 32) | v15;
        uint64_t v4 = *(void *)(v4 + 40);
        goto LABEL_10;
      }
    }
    if (v11 <= v12)
    {
      long long v16 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0x38uLL);
      long long v19 = v22;
      _OWORD *v16 = v21;
      v16[1] = v19;
      _OWORD v16[2] = v23;
      *((void *)v16 + 6) = v24;
      uint64_t v20 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v16 + 8, 8uLL, 0);
      if (v20) {
        uint64_t v20 = *(void *)(v20 + 32);
      }
      *((void *)v16 + 4) = v20;
      apr_hash_set(*(apr_hash_t **)(a1 + 32), (char *)v16 + 8, 8, v16);
LABEL_20:
      *((void *)v16 + 3) = v12;
    }
  }
}

void GTMTLSMBuilder_samplerState(uint64_t a1, uint64_t a2)
{
  if (GTMTLSMBuilder_streamIntersectionRange(*(void *)(a1 + 8), *(void *)(a1 + 16), a2))
  {
    long long v23 = 0u;
    *(void *)&long long v24 = 0;
    long long v26 = 0u;
    long long v25 = 0u;
    LODWORD(v23) = 75;
    *((void *)&v24 + 1) = -1;
    uint64_t v28 = 0;
    long long v27 = 0xFFFFFFFFFFFFFFFFLL;
    ++*(_DWORD *)(a1 + 56);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unsigned int v5 = 0;
      while (1)
      {
        unsigned int v6 = atomic_load((unsigned int *)(v4 + 4));
        uint64_t v7 = v5 + (v6 >> 6) - 1;
        if ((int)v7 > 0) {
          break;
        }
        uint64_t v4 = *(void *)(v4 + 40);
        unsigned int v5 = v7;
        if (!v4)
        {
          unsigned int v5 = v7;
          goto LABEL_9;
        }
      }
    }
    else
    {
      unsigned int v5 = 0;
    }
    uint64_t v7 = 0;
LABEL_9:
    unint64_t v8 = v5 | (unint64_t)(v7 << 32);
LABEL_10:
    uint64_t v9 = v4 + 64;
    while (1)
    {
      if (!v4
        || (*(unsigned char *)(v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6) + 15) & 8) == 0
        || (uint64_t v10 = v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6),
            unint64_t v11 = *(void *)(a1 + 8),
            unint64_t v12 = *(void *)v10,
            *(void *)v10 >= *(void *)(a1 + 16) + v11))
      {
        long long v16 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0x58uLL);
        long long v17 = v26;
        _OWORD v16[2] = v25;
        v16[3] = v17;
        void v16[4] = v27;
        *((void *)v16 + 1mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v28;
        long long v18 = v24;
        _OWORD *v16 = v23;
        v16[1] = v18;
        uint64_t v19 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v16 + 8, 8uLL, 0);
        if (v19) {
          uint64_t v19 = *(void *)(v19 + 32);
        }
        *((void *)v16 + 4) = v19;
        apr_hash_set(*(apr_hash_t **)(a1 + 32), (char *)v16 + 8, 8, v16);
        unint64_t v12 = -1;
        goto LABEL_20;
      }
      if (*(_DWORD *)(v10 + 8) == -16241) {
        break;
      }
      GTMTLSMSamplerState_processTraceFuncWithMap((char *)&v23, *(void *)(a1 + 40), (uint64_t *)v10);
      unsigned int v13 = atomic_load((unsigned int *)(v4 + 4));
      int v14 = v8 + (v13 >> 6);
      uint64_t v15 = (HIDWORD(v8) + 1);
      unint64_t v8 = (v15 << 32) | v8;
      if (v15 == v14 - 1)
      {
        unint64_t v8 = (v15 << 32) | v15;
        uint64_t v4 = *(void *)(v4 + 40);
        goto LABEL_10;
      }
    }
    if (v11 <= v12)
    {
      long long v16 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0x58uLL);
      long long v20 = v26;
      _OWORD v16[2] = v25;
      v16[3] = v20;
      void v16[4] = v27;
      *((void *)v16 + 1mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v28;
      long long v21 = v24;
      _OWORD *v16 = v23;
      v16[1] = v21;
      uint64_t v22 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v16 + 8, 8uLL, 0);
      if (v22) {
        uint64_t v22 = *(void *)(v22 + 32);
      }
      *((void *)v16 + 4) = v22;
      apr_hash_set(*(apr_hash_t **)(a1 + 32), (char *)v16 + 8, 8, v16);
LABEL_20:
      *((void *)v16 + 3) = v12;
    }
  }
}

void GTMTLSMBuilder_event(uint64_t a1, uint64_t a2)
{
  if (!GTMTLSMBuilder_streamIntersectionRange(*(void *)(a1 + 8), *(void *)(a1 + 16), a2)) {
    return;
  }
  long long v25 = 0u;
  *(void *)&long long v26 = 0;
  uint64_t v28 = 0;
  long long v27 = 0u;
  LODWORD(v25) = 38;
  *((void *)&v26 + 1) = -1;
  ++*(_DWORD *)(a1 + 104);
  uint64_t v4 = *(void *)(a2 + 32);
  if (v4)
  {
    unsigned int v5 = 0;
    while (1)
    {
      unsigned int v6 = atomic_load((unsigned int *)(v4 + 4));
      uint64_t v7 = v5 + (v6 >> 6) - 1;
      if ((int)v7 > 0) {
        break;
      }
      uint64_t v4 = *(void *)(v4 + 40);
      unsigned int v5 = v7;
      if (!v4)
      {
        unsigned int v5 = v7;
        goto LABEL_9;
      }
    }
  }
  else
  {
    unsigned int v5 = 0;
  }
  uint64_t v7 = 0;
LABEL_9:
  unint64_t v8 = v5 | (unint64_t)(v7 << 32);
LABEL_10:
  uint64_t v9 = v4 + 64;
  while (1)
  {
    if (!v4
      || (*(unsigned char *)(v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6) + 15) & 8) == 0
      || (uint64_t v10 = v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6),
          unint64_t v11 = *(void *)(a1 + 8),
          unint64_t v12 = *(void *)v10,
          *(void *)v10 >= *(void *)(a1 + 16) + v11))
    {
      long long v20 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0x38uLL);
      long long v21 = v26;
      *long long v20 = v25;
      v20[1] = v21;
      _OWORD v20[2] = v27;
      *((void *)v20 + 6) = v28;
      uint64_t v22 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v20 + 8, 8uLL, 0);
      if (v22) {
        uint64_t v22 = *(void *)(v22 + 32);
      }
      *((void *)v20 + 4) = v22;
      apr_hash_set(*(apr_hash_t **)(a1 + 32), (char *)v20 + 8, 8, v20);
      unint64_t v12 = -1;
      goto LABEL_26;
    }
    int v13 = *(_DWORD *)(v10 + 8);
    if (v13 == -15880)
    {
      if (v11 <= v12)
      {
        int v14 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0x38uLL);
        long long v15 = v26;
        *(_OWORD *)int v14 = v25;
        *((_OWORD *)v14 + 1) = v15;
        *((_OWORD *)v14 + 2) = v27;
        v14[6] = v28;
        uint64_t v16 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v14 + 8, 8uLL, 0);
        if (v16) {
          uint64_t v16 = *(void *)(v16 + 32);
        }
        void v14[4] = v16;
        apr_hash_set(*(apr_hash_t **)(a1 + 32), v14 + 1, 8, v14);
        v14[3] = v12;
      }
      goto LABEL_21;
    }
    if (v13 == -15879) {
      break;
    }
LABEL_21:
    GTMTLSMEvent_processTraceFuncWithMap((char *)&v25, *(void *)(a1 + 40), (uint64_t *)v10);
    unsigned int v17 = atomic_load((unsigned int *)(v4 + 4));
    int v18 = v8 + (v17 >> 6);
    uint64_t v19 = (HIDWORD(v8) + 1);
    unint64_t v8 = (v19 << 32) | v8;
    if (v19 == v18 - 1)
    {
      unint64_t v8 = (v19 << 32) | v19;
      uint64_t v4 = *(void *)(v4 + 40);
      goto LABEL_10;
    }
  }
  if (v11 <= v12)
  {
    long long v20 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0x38uLL);
    long long v23 = v26;
    *long long v20 = v25;
    v20[1] = v23;
    _OWORD v20[2] = v27;
    *((void *)v20 + 6) = v28;
    uint64_t v24 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v20 + 8, 8uLL, 0);
    if (v24) {
      uint64_t v24 = *(void *)(v24 + 32);
    }
    *((void *)v20 + 4) = v24;
    apr_hash_set(*(apr_hash_t **)(a1 + 32), (char *)v20 + 8, 8, v20);
LABEL_26:
    *((void *)v20 + 3) = v12;
  }
}

void GTMTLSMBuilder_sharedEvent(uint64_t a1, uint64_t a2)
{
  if (!GTMTLSMBuilder_streamIntersectionRange(*(void *)(a1 + 8), *(void *)(a1 + 16), a2)) {
    return;
  }
  long long v28 = 0u;
  *(void *)&long long v29 = 0;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v30 = 0u;
  LODWORD(v28) = 76;
  *((void *)&v29 + 1) = -1;
  ++*(_DWORD *)(a1 + 108);
  uint64_t v4 = *(void *)(a2 + 32);
  if (v4)
  {
    unsigned int v5 = 0;
    while (1)
    {
      unsigned int v6 = atomic_load((unsigned int *)(v4 + 4));
      uint64_t v7 = v5 + (v6 >> 6) - 1;
      if ((int)v7 > 0) {
        break;
      }
      uint64_t v4 = *(void *)(v4 + 40);
      unsigned int v5 = v7;
      if (!v4)
      {
        unsigned int v5 = v7;
        goto LABEL_9;
      }
    }
  }
  else
  {
    unsigned int v5 = 0;
  }
  uint64_t v7 = 0;
LABEL_9:
  unint64_t v8 = v5 | (unint64_t)(v7 << 32);
LABEL_10:
  uint64_t v9 = v4 + 64;
  while (1)
  {
    if (!v4
      || (*(unsigned char *)(v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6) + 15) & 8) == 0
      || (uint64_t v10 = v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6),
          unint64_t v11 = *(void *)(a1 + 8),
          unint64_t v12 = *(void *)v10,
          *(void *)v10 >= *(void *)(a1 + 16) + v11))
    {
      long long v21 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0x50uLL);
      long long v22 = v31;
      v21[2] = v30;
      int8x16_t v21[3] = v22;
      void v21[4] = v32;
      long long v23 = v29;
      *long long v21 = v28;
      v21[1] = v23;
      uint64_t v24 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v21 + 8, 8uLL, 0);
      if (v24) {
        uint64_t v24 = *(void *)(v24 + 32);
      }
      *((void *)v21 + 4) = v24;
      apr_hash_set(*(apr_hash_t **)(a1 + 32), (char *)v21 + 8, 8, v21);
      unint64_t v12 = -1;
      goto LABEL_25;
    }
    int v13 = *(_DWORD *)(v10 + 8);
    if ((v13 + 15975) < 2)
    {
      if (v11 <= v12)
      {
        int v14 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0x50uLL);
        long long v15 = v31;
        *((_OWORD *)v14 + 2) = v30;
        *((_OWORD *)v14 + 3) = v15;
        *((_OWORD *)v14 + 4) = v32;
        long long v16 = v29;
        *(_OWORD *)int v14 = v28;
        *((_OWORD *)v14 + 1) = v16;
        uint64_t v17 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v14 + 8, 8uLL, 0);
        if (v17) {
          uint64_t v17 = *(void *)(v17 + 32);
        }
        void v14[4] = v17;
        apr_hash_set(*(apr_hash_t **)(a1 + 32), v14 + 1, 8, v14);
        v14[3] = v12;
      }
      goto LABEL_20;
    }
    if (v13 == -15973) {
      break;
    }
LABEL_20:
    GTMTLSMSharedEvent_processTraceFuncWithMap((char *)&v28, *(void *)(a1 + 40), (uint64_t *)v10);
    unsigned int v18 = atomic_load((unsigned int *)(v4 + 4));
    int v19 = v8 + (v18 >> 6);
    uint64_t v20 = (HIDWORD(v8) + 1);
    unint64_t v8 = (v20 << 32) | v8;
    if (v20 == v19 - 1)
    {
      unint64_t v8 = (v20 << 32) | v20;
      uint64_t v4 = *(void *)(v4 + 40);
      goto LABEL_10;
    }
  }
  if (v11 <= v12)
  {
    long long v21 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0x50uLL);
    long long v25 = v31;
    v21[2] = v30;
    int8x16_t v21[3] = v25;
    void v21[4] = v32;
    long long v26 = v29;
    *long long v21 = v28;
    v21[1] = v26;
    uint64_t v27 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v21 + 8, 8uLL, 0);
    if (v27) {
      uint64_t v27 = *(void *)(v27 + 32);
    }
    *((void *)v21 + 4) = v27;
    apr_hash_set(*(apr_hash_t **)(a1 + 32), (char *)v21 + 8, 8, v21);
LABEL_25:
    *((void *)v21 + 3) = v12;
  }
}

void GTMTLSMBuilder_lateEvalEvent(uint64_t a1, uint64_t a2)
{
  if (!GTMTLSMBuilder_streamIntersectionRange(*(void *)(a1 + 8), *(void *)(a1 + 16), a2)) {
    return;
  }
  long long v28 = 0u;
  *(void *)&long long v29 = 0;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v30 = 0u;
  LODWORD(v28) = 61;
  *((void *)&v29 + 1) = -1;
  ++*(_DWORD *)(a1 + 112);
  uint64_t v4 = *(void *)(a2 + 32);
  if (v4)
  {
    unsigned int v5 = 0;
    while (1)
    {
      unsigned int v6 = atomic_load((unsigned int *)(v4 + 4));
      uint64_t v7 = v5 + (v6 >> 6) - 1;
      if ((int)v7 > 0) {
        break;
      }
      uint64_t v4 = *(void *)(v4 + 40);
      unsigned int v5 = v7;
      if (!v4)
      {
        unsigned int v5 = v7;
        goto LABEL_9;
      }
    }
  }
  else
  {
    unsigned int v5 = 0;
  }
  uint64_t v7 = 0;
LABEL_9:
  unint64_t v8 = v5 | (unint64_t)(v7 << 32);
LABEL_10:
  uint64_t v9 = v4 + 64;
  while (1)
  {
    if (!v4
      || (*(unsigned char *)(v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6) + 15) & 8) == 0
      || (uint64_t v10 = v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6),
          unint64_t v11 = *(void *)(a1 + 8),
          unint64_t v12 = *(void *)v10,
          *(void *)v10 >= *(void *)(a1 + 16) + v11))
    {
      long long v21 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0x50uLL);
      long long v22 = v31;
      v21[2] = v30;
      int8x16_t v21[3] = v22;
      void v21[4] = v32;
      long long v23 = v29;
      *long long v21 = v28;
      v21[1] = v23;
      uint64_t v24 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v21 + 8, 8uLL, 0);
      if (v24) {
        uint64_t v24 = *(void *)(v24 + 32);
      }
      *((void *)v21 + 4) = v24;
      apr_hash_set(*(apr_hash_t **)(a1 + 32), (char *)v21 + 8, 8, v21);
      unint64_t v12 = -1;
      goto LABEL_25;
    }
    int v13 = *(_DWORD *)(v10 + 8);
    if ((v13 + 15491) < 2)
    {
      if (v11 <= v12)
      {
        int v14 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0x50uLL);
        long long v15 = v31;
        *((_OWORD *)v14 + 2) = v30;
        *((_OWORD *)v14 + 3) = v15;
        *((_OWORD *)v14 + 4) = v32;
        long long v16 = v29;
        *(_OWORD *)int v14 = v28;
        *((_OWORD *)v14 + 1) = v16;
        uint64_t v17 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v14 + 8, 8uLL, 0);
        if (v17) {
          uint64_t v17 = *(void *)(v17 + 32);
        }
        void v14[4] = v17;
        apr_hash_set(*(apr_hash_t **)(a1 + 32), v14 + 1, 8, v14);
        v14[3] = v12;
      }
      goto LABEL_20;
    }
    if (v13 == -15489) {
      break;
    }
LABEL_20:
    GTMTLSMLateEvalEvent_processTraceFuncWithMap((char *)&v28, *(void *)(a1 + 40), (uint64_t *)v10);
    unsigned int v18 = atomic_load((unsigned int *)(v4 + 4));
    int v19 = v8 + (v18 >> 6);
    uint64_t v20 = (HIDWORD(v8) + 1);
    unint64_t v8 = (v20 << 32) | v8;
    if (v20 == v19 - 1)
    {
      unint64_t v8 = (v20 << 32) | v20;
      uint64_t v4 = *(void *)(v4 + 40);
      goto LABEL_10;
    }
  }
  if (v11 <= v12)
  {
    long long v21 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0x50uLL);
    long long v25 = v31;
    v21[2] = v30;
    int8x16_t v21[3] = v25;
    void v21[4] = v32;
    long long v26 = v29;
    *long long v21 = v28;
    v21[1] = v26;
    uint64_t v27 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v21 + 8, 8uLL, 0);
    if (v27) {
      uint64_t v27 = *(void *)(v27 + 32);
    }
    *((void *)v21 + 4) = v27;
    apr_hash_set(*(apr_hash_t **)(a1 + 32), (char *)v21 + 8, 8, v21);
LABEL_25:
    *((void *)v21 + 3) = v12;
  }
}

void GTMTLSMBuilder_fence(uint64_t a1, uint64_t a2)
{
  if (GTMTLSMBuilder_streamIntersectionRange(*(void *)(a1 + 8), *(void *)(a1 + 16), a2))
  {
    long long v21 = 0u;
    *(void *)&long long v22 = 0;
    uint64_t v24 = 0;
    long long v23 = 0u;
    LODWORD(v21) = 41;
    *((void *)&v22 + 1) = -1;
    ++*(_DWORD *)(a1 + 100);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unsigned int v5 = 0;
      while (1)
      {
        unsigned int v6 = atomic_load((unsigned int *)(v4 + 4));
        uint64_t v7 = v5 + (v6 >> 6) - 1;
        if ((int)v7 > 0) {
          break;
        }
        uint64_t v4 = *(void *)(v4 + 40);
        unsigned int v5 = v7;
        if (!v4)
        {
          unsigned int v5 = v7;
          goto LABEL_9;
        }
      }
    }
    else
    {
      unsigned int v5 = 0;
    }
    uint64_t v7 = 0;
LABEL_9:
    unint64_t v8 = v5 | (unint64_t)(v7 << 32);
LABEL_10:
    uint64_t v9 = v4 + 64;
    while (1)
    {
      if (!v4
        || (*(unsigned char *)(v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6) + 15) & 8) == 0
        || (uint64_t v10 = v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6),
            unint64_t v11 = *(void *)(a1 + 8),
            unint64_t v12 = *(void *)v10,
            *(void *)v10 >= *(void *)(a1 + 16) + v11))
      {
        long long v16 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0x38uLL);
        long long v17 = v22;
        _OWORD *v16 = v21;
        v16[1] = v17;
        _OWORD v16[2] = v23;
        *((void *)v16 + 6) = v24;
        uint64_t v18 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v16 + 8, 8uLL, 0);
        if (v18) {
          uint64_t v18 = *(void *)(v18 + 32);
        }
        *((void *)v16 + 4) = v18;
        apr_hash_set(*(apr_hash_t **)(a1 + 32), (char *)v16 + 8, 8, v16);
        unint64_t v12 = -1;
        goto LABEL_20;
      }
      if (*(_DWORD *)(v10 + 8) == -16127) {
        break;
      }
      GTMTLSMFence_processTraceFuncWithMap((char *)&v21, *(void *)(a1 + 40), (uint64_t *)v10);
      unsigned int v13 = atomic_load((unsigned int *)(v4 + 4));
      int v14 = v8 + (v13 >> 6);
      uint64_t v15 = (HIDWORD(v8) + 1);
      unint64_t v8 = (v15 << 32) | v8;
      if (v15 == v14 - 1)
      {
        unint64_t v8 = (v15 << 32) | v15;
        uint64_t v4 = *(void *)(v4 + 40);
        goto LABEL_10;
      }
    }
    if (v11 <= v12)
    {
      long long v16 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0x38uLL);
      long long v19 = v22;
      _OWORD *v16 = v21;
      v16[1] = v19;
      _OWORD v16[2] = v23;
      *((void *)v16 + 6) = v24;
      uint64_t v20 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v16 + 8, 8uLL, 0);
      if (v20) {
        uint64_t v20 = *(void *)(v20 + 32);
      }
      *((void *)v16 + 4) = v20;
      apr_hash_set(*(apr_hash_t **)(a1 + 32), (char *)v16 + 8, 8, v16);
LABEL_20:
      *((void *)v16 + 3) = v12;
    }
  }
}

void GTMTLSMBuilder_renderPipelineState(uint64_t a1, uint64_t a2)
{
  if (GTMTLSMBuilder_streamIntersectionRange(*(void *)(a1 + 8), *(void *)(a1 + 16), a2))
  {
    memset(&v19[7], 0, 304);
    memset(&v19[2], 0, 64);
    memset(v19, 0, 24);
    LODWORD(v19[0]) = 71;
    *((void *)&v19[1] + 1) = -1;
    v19[6] = 0xFFFFFFFFFFFFFFFFLL;
    ++*(_DWORD *)(a1 + 60);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unsigned int v5 = 0;
      while (1)
      {
        unsigned int v6 = atomic_load((unsigned int *)(v4 + 4));
        uint64_t v7 = v5 + (v6 >> 6) - 1;
        if ((int)v7 > 0) {
          break;
        }
        uint64_t v4 = *(void *)(v4 + 40);
        unsigned int v5 = v7;
        if (!v4)
        {
          unsigned int v5 = v7;
          goto LABEL_9;
        }
      }
    }
    else
    {
      unsigned int v5 = 0;
    }
    uint64_t v7 = 0;
LABEL_9:
    unint64_t v8 = v5 | (unint64_t)(v7 << 32);
LABEL_10:
    uint64_t v9 = v4 + 64;
    while (1)
    {
      if (!v4
        || (*(unsigned char *)(v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6) + 15) & 8) == 0
        || (uint64_t v10 = v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6),
            unint64_t v11 = *(void *)(a1 + 8),
            unint64_t v12 = *(void *)v10,
            *(void *)v10 >= *(void *)(a1 + 16) + v11))
      {
        long long v16 = (char *)apr_palloc(*(apr_pool_t **)(a1 + 24), 0x1A0uLL);
        memcpy(v16, v19, 0x1A0uLL);
        uint64_t v17 = *find_entry(*(void *)(a1 + 32), v16 + 8, 8uLL, 0);
        if (v17) {
          uint64_t v17 = *(void *)(v17 + 32);
        }
        *((void *)v16 + 4) = v17;
        apr_hash_set(*(apr_hash_t **)(a1 + 32), v16 + 8, 8, v16);
        unint64_t v12 = -1;
        goto LABEL_20;
      }
      if (*(_DWORD *)(v10 + 8) == -16242) {
        break;
      }
      GTMTLSMRenderPipelineState_processTraceFuncWithMap((char *)v19, *(void *)(a1 + 40), (uint64_t *)v10);
      unsigned int v13 = atomic_load((unsigned int *)(v4 + 4));
      int v14 = v8 + (v13 >> 6);
      uint64_t v15 = (HIDWORD(v8) + 1);
      unint64_t v8 = (v15 << 32) | v8;
      if (v15 == v14 - 1)
      {
        unint64_t v8 = (v15 << 32) | v15;
        uint64_t v4 = *(void *)(v4 + 40);
        goto LABEL_10;
      }
    }
    if (v11 <= v12)
    {
      long long v16 = (char *)apr_palloc(*(apr_pool_t **)(a1 + 24), 0x1A0uLL);
      memcpy(v16, v19, 0x1A0uLL);
      uint64_t v18 = *find_entry(*(void *)(a1 + 32), v16 + 8, 8uLL, 0);
      if (v18) {
        uint64_t v18 = *(void *)(v18 + 32);
      }
      *((void *)v16 + 4) = v18;
      apr_hash_set(*(apr_hash_t **)(a1 + 32), v16 + 8, 8, v16);
LABEL_20:
      *((void *)v16 + 3) = v12;
    }
  }
}

void GTMTLSMBuilder_computePipelineState(uint64_t a1, uint64_t a2)
{
  if (GTMTLSMBuilder_streamIntersectionRange(*(void *)(a1 + 8), *(void *)(a1 + 16), a2))
  {
    long long v37 = 0u;
    *(void *)&long long v38 = 0;
    uint64_t v49 = 0;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    LODWORD(v37) = 29;
    *((void *)&v38 + 1) = -1;
    long long v43 = 0xFFFFFFFFFFFFFFFFLL;
    ++*(_DWORD *)(a1 + 64);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unsigned int v5 = 0;
      while (1)
      {
        unsigned int v6 = atomic_load((unsigned int *)(v4 + 4));
        uint64_t v7 = v5 + (v6 >> 6) - 1;
        if ((int)v7 > 0) {
          break;
        }
        uint64_t v4 = *(void *)(v4 + 40);
        unsigned int v5 = v7;
        if (!v4)
        {
          unsigned int v5 = v7;
          goto LABEL_9;
        }
      }
    }
    else
    {
      unsigned int v5 = 0;
    }
    uint64_t v7 = 0;
LABEL_9:
    unint64_t v8 = v5 | (unint64_t)(v7 << 32);
LABEL_10:
    uint64_t v9 = v4 + 64;
    while (1)
    {
      if (!v4
        || (*(unsigned char *)(v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6) + 15) & 8) == 0
        || (uint64_t v10 = v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6),
            unint64_t v11 = *(void *)(a1 + 8),
            unint64_t v12 = *(void *)v10,
            *(void *)v10 >= *(void *)(a1 + 16) + v11))
      {
        long long v16 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0xC8uLL);
        _OWORD *v16 = v37;
        long long v17 = v41;
        long long v19 = v38;
        long long v18 = v39;
        v16[3] = v40;
        void v16[4] = v17;
        v16[1] = v19;
        _OWORD v16[2] = v18;
        long long v20 = v45;
        long long v22 = v42;
        long long v21 = v43;
        v16[7] = v44;
        v16[8] = v20;
        v16[5] = v22;
        v16[6] = v21;
        long long v24 = v47;
        long long v23 = v48;
        long long v25 = v46;
        *((void *)v16 + 24) = v49;
        v16[10] = v24;
        v16[11] = v23;
        v16[9] = v25;
        uint64_t v26 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v16 + 8, 8uLL, 0);
        if (v26) {
          uint64_t v26 = *(void *)(v26 + 32);
        }
        *((void *)v16 + 4) = v26;
        apr_hash_set(*(apr_hash_t **)(a1 + 32), (char *)v16 + 8, 8, v16);
        unint64_t v12 = -1;
        goto LABEL_20;
      }
      if (*(_DWORD *)(v10 + 8) == -16321) {
        break;
      }
      GTMTLSMComputePipelineState_processTraceFuncWithMap((char *)&v37, *(void *)(a1 + 40), (uint64_t *)v10);
      unsigned int v13 = atomic_load((unsigned int *)(v4 + 4));
      int v14 = v8 + (v13 >> 6);
      uint64_t v15 = (HIDWORD(v8) + 1);
      unint64_t v8 = (v15 << 32) | v8;
      if (v15 == v14 - 1)
      {
        unint64_t v8 = (v15 << 32) | v15;
        uint64_t v4 = *(void *)(v4 + 40);
        goto LABEL_10;
      }
    }
    if (v11 <= v12)
    {
      long long v16 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0xC8uLL);
      _OWORD *v16 = v37;
      long long v27 = v41;
      long long v29 = v38;
      long long v28 = v39;
      v16[3] = v40;
      void v16[4] = v27;
      v16[1] = v29;
      _OWORD v16[2] = v28;
      long long v30 = v45;
      long long v32 = v42;
      long long v31 = v43;
      v16[7] = v44;
      v16[8] = v30;
      v16[5] = v32;
      v16[6] = v31;
      long long v34 = v47;
      long long v33 = v48;
      long long v35 = v46;
      *((void *)v16 + 24) = v49;
      v16[10] = v34;
      v16[11] = v33;
      v16[9] = v35;
      uint64_t v36 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v16 + 8, 8uLL, 0);
      if (v36) {
        uint64_t v36 = *(void *)(v36 + 32);
      }
      *((void *)v16 + 4) = v36;
      apr_hash_set(*(apr_hash_t **)(a1 + 32), (char *)v16 + 8, 8, v16);
LABEL_20:
      *((void *)v16 + 3) = v12;
    }
  }
}

void GTMTLSMBuilder_function(uint64_t a1, uint64_t a2)
{
  if (GTMTLSMBuilder_streamIntersectionRange(*(void *)(a1 + 8), *(void *)(a1 + 16), a2))
  {
    long long v41 = 0u;
    *(void *)&long long v42 = 0;
    uint64_t v49 = 0;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    LODWORD(v41) = 43;
    *((void *)&v42 + 1) = -1;
    ++*(_DWORD *)(a1 + 156);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unsigned int v5 = 0;
      while (1)
      {
        unsigned int v6 = atomic_load((unsigned int *)(v4 + 4));
        uint64_t v7 = v5 + (v6 >> 6) - 1;
        if ((int)v7 > 0) {
          break;
        }
        uint64_t v4 = *(void *)(v4 + 40);
        unsigned int v5 = v7;
        if (!v4)
        {
          unsigned int v5 = v7;
          goto LABEL_9;
        }
      }
    }
    else
    {
      unsigned int v5 = 0;
    }
    uint64_t v7 = 0;
LABEL_9:
    unint64_t v8 = v5 | (unint64_t)(v7 << 32);
LABEL_10:
    uint64_t v9 = v4 + 64;
    while (v4)
    {
      if ((*(unsigned char *)(v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6) + 15) & 8) == 0) {
        break;
      }
      uint64_t v10 = v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6);
      unint64_t v11 = *(void *)(a1 + 8);
      unint64_t v12 = *(void *)v10;
      if (*(void *)v10 >= *(void *)(a1 + 16) + v11) {
        break;
      }
      int v13 = *(_DWORD *)(v10 + 8);
      if (v13 == -16123 || v13 == -10157)
      {
        if (v11 <= v12)
        {
          uint64_t v15 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0x88uLL);
          *(_OWORD *)uint64_t v15 = v41;
          long long v16 = v45;
          long long v18 = v42;
          long long v17 = v43;
          *((_OWORD *)v15 + 3) = v44;
          *((_OWORD *)v15 + 4) = v16;
          *((_OWORD *)v15 + 1) = v18;
          *((_OWORD *)v15 + 2) = v17;
          long long v20 = v47;
          long long v19 = v48;
          long long v21 = v46;
          v15[16] = v49;
          *((_OWORD *)v15 + 6) = v20;
          *((_OWORD *)v15 + 7) = v19;
          *((_OWORD *)v15 + 5) = v21;
          uint64_t v22 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v15 + 8, 8uLL, 0);
          if (v22) {
            uint64_t v22 = *(void *)(v22 + 32);
          }
          void v15[4] = v22;
          apr_hash_set(*(apr_hash_t **)(a1 + 32), v15 + 1, 8, v15);
          v15[3] = v12;
        }
      }
      else if (v13 == -16293)
      {
        uint64_t v26 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0x88uLL);
        _OWORD *v26 = v41;
        long long v34 = v45;
        long long v36 = v42;
        long long v35 = v43;
        v26[3] = v44;
        v26[4] = v34;
        v26[1] = v36;
        _OWORD v26[2] = v35;
        long long v38 = v47;
        long long v37 = v48;
        long long v39 = v46;
        *((void *)v26 + 16) = v49;
        v26[6] = v38;
        v26[7] = v37;
        v26[5] = v39;
        uint64_t v40 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v26 + 8, 8uLL, 0);
        if (v40) {
          uint64_t v40 = *(void *)(v40 + 32);
        }
        *((void *)v26 + 4) = v40;
        apr_hash_set(*(apr_hash_t **)(a1 + 32), (char *)v26 + 8, 8, v26);
        goto LABEL_29;
      }
      GTMTLSMFunction_processTraceFuncWithMap((uint64_t)&v41, *(void *)(a1 + 40), (uint64_t *)v10);
      unsigned int v23 = atomic_load((unsigned int *)(v4 + 4));
      int v24 = v8 + (v23 >> 6);
      uint64_t v25 = (HIDWORD(v8) + 1);
      unint64_t v8 = (v25 << 32) | v8;
      if (v25 == v24 - 1)
      {
        unint64_t v8 = (v25 << 32) | v25;
        uint64_t v4 = *(void *)(v4 + 40);
        goto LABEL_10;
      }
    }
    uint64_t v26 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0x88uLL);
    _OWORD *v26 = v41;
    long long v27 = v45;
    long long v29 = v42;
    long long v28 = v43;
    v26[3] = v44;
    v26[4] = v27;
    v26[1] = v29;
    _OWORD v26[2] = v28;
    long long v31 = v47;
    long long v30 = v48;
    long long v32 = v46;
    *((void *)v26 + 16) = v49;
    v26[6] = v31;
    v26[7] = v30;
    v26[5] = v32;
    uint64_t v33 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v26 + 8, 8uLL, 0);
    if (v33) {
      uint64_t v33 = *(void *)(v33 + 32);
    }
    *((void *)v26 + 4) = v33;
    apr_hash_set(*(apr_hash_t **)(a1 + 32), (char *)v26 + 8, 8, v26);
    unint64_t v12 = -1;
LABEL_29:
    *((void *)v26 + 3) = v12;
  }
}

void GTMTLSMBuilder_library(uint64_t a1, uint64_t a2)
{
  if (GTMTLSMBuilder_streamIntersectionRange(*(void *)(a1 + 8), *(void *)(a1 + 16), a2))
  {
    long long v47 = 0u;
    *(void *)&long long v48 = 0;
    uint64_t v57 = 0;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    LODWORD(v47) = 62;
    *((void *)&v48 + 1) = -1;
    ++*(_DWORD *)(a1 + 88);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unsigned int v5 = 0;
      while (1)
      {
        unsigned int v6 = atomic_load((unsigned int *)(v4 + 4));
        uint64_t v7 = v5 + (v6 >> 6) - 1;
        if ((int)v7 > 0) {
          break;
        }
        uint64_t v4 = *(void *)(v4 + 40);
        unsigned int v5 = v7;
        if (!v4)
        {
          unsigned int v5 = v7;
          goto LABEL_9;
        }
      }
    }
    else
    {
      unsigned int v5 = 0;
    }
    uint64_t v7 = 0;
LABEL_9:
    unint64_t v8 = v5 | (unint64_t)(v7 << 32);
LABEL_10:
    uint64_t v9 = v4 + 64;
    while (v4)
    {
      if ((*(unsigned char *)(v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6) + 15) & 8) == 0) {
        break;
      }
      uint64_t v10 = v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6);
      unint64_t v11 = *(void *)(a1 + 8);
      unint64_t v12 = *(void *)v10;
      if (*(void *)v10 >= *(void *)(a1 + 16) + v11) {
        break;
      }
      int v13 = *(_DWORD *)(v10 + 8);
      if (v13 == -16292)
      {
        if (v11 <= v12)
        {
          int v14 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0xA8uLL);
          long long v16 = v48;
          long long v15 = v49;
          *(_OWORD *)int v14 = v47;
          *((_OWORD *)v14 + 1) = v16;
          *((_OWORD *)v14 + 2) = v15;
          long long v17 = v53;
          long long v19 = v50;
          long long v18 = v51;
          *((_OWORD *)v14 + 5) = v52;
          *((_OWORD *)v14 + 6) = v17;
          *((_OWORD *)v14 + 3) = v19;
          *((_OWORD *)v14 + 4) = v18;
          long long v21 = v55;
          long long v20 = v56;
          long long v22 = v54;
          v14[20] = v57;
          *((_OWORD *)v14 + 8) = v21;
          *((_OWORD *)v14 + 9) = v20;
          *((_OWORD *)v14 + 7) = v22;
          uint64_t v23 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v14 + 8, 8uLL, 0);
          if (v23) {
            uint64_t v23 = *(void *)(v23 + 32);
          }
          void v14[4] = v23;
          apr_hash_set(*(apr_hash_t **)(a1 + 32), v14 + 1, 8, v14);
          v14[3] = v12;
        }
      }
      else if (v13 == -16291)
      {
        long long v36 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0xA8uLL);
        long long v38 = v48;
        long long v37 = v49;
        *long long v36 = v47;
        v36[1] = v38;
        v36[2] = v37;
        long long v39 = v53;
        long long v41 = v50;
        long long v40 = v51;
        v36[5] = v52;
        v36[6] = v39;
        v36[3] = v41;
        v36[4] = v40;
        long long v43 = v55;
        long long v42 = v56;
        long long v44 = v54;
        *((void *)v36 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v57;
        v36[8] = v43;
        v36[9] = v42;
        v36[7] = v44;
        entry = find_entry(*(void *)(a1 + 32), (unsigned char *)v36 + 8, 8uLL, 0);
        uint64_t v46 = *entry;
        if (*entry) {
          uint64_t v46 = *(void *)(v46 + 32);
        }
        *((void *)v36 + 4) = v46;
        apr_hash_set(*(apr_hash_t **)(a1 + 32), (char *)v36 + 8, 8, v36);
        goto LABEL_26;
      }
      GTMTLSMLibrary_processTraceFuncWithMap((uint64_t)&v47, *(void *)(a1 + 40), (uint64_t *)v10);
      unsigned int v24 = atomic_load((unsigned int *)(v4 + 4));
      int v25 = v8 + (v24 >> 6);
      uint64_t v26 = (HIDWORD(v8) + 1);
      unint64_t v8 = (v26 << 32) | v8;
      if (v26 == v25 - 1)
      {
        unint64_t v8 = (v26 << 32) | v26;
        uint64_t v4 = *(void *)(v4 + 40);
        goto LABEL_10;
      }
    }
    long long v36 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0xA8uLL);
    long long v28 = v48;
    long long v27 = v49;
    *long long v36 = v47;
    v36[1] = v28;
    v36[2] = v27;
    long long v29 = v53;
    long long v31 = v50;
    long long v30 = v51;
    v36[5] = v52;
    v36[6] = v29;
    v36[3] = v31;
    v36[4] = v30;
    long long v33 = v55;
    long long v32 = v56;
    long long v34 = v54;
    *((void *)v36 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v57;
    v36[8] = v33;
    v36[9] = v32;
    v36[7] = v34;
    uint64_t v35 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v36 + 8, 8uLL, 0);
    if (v35) {
      uint64_t v35 = *(void *)(v35 + 32);
    }
    *((void *)v36 + 4) = v35;
    apr_hash_set(*(apr_hash_t **)(a1 + 32), (char *)v36 + 8, 8, v36);
    unint64_t v12 = -1;
LABEL_26:
    *((void *)v36 + 3) = v12;
  }
}

void GTMTLSMBuilder_dynamicLibrary(uint64_t a1, uint64_t a2)
{
  if (GTMTLSMBuilder_streamIntersectionRange(*(void *)(a1 + 8), *(void *)(a1 + 16), a2))
  {
    long long v32 = 0u;
    *(void *)&long long v33 = 0;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v34 = 0u;
    LODWORD(v32) = 37;
    *((void *)&v33 + 1) = -1;
    ++*(_DWORD *)(a1 + 92);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unsigned int v5 = 0;
      while (1)
      {
        unsigned int v6 = atomic_load((unsigned int *)(v4 + 4));
        uint64_t v7 = v5 + (v6 >> 6) - 1;
        if ((int)v7 > 0) {
          break;
        }
        uint64_t v4 = *(void *)(v4 + 40);
        unsigned int v5 = v7;
        if (!v4)
        {
          unsigned int v5 = v7;
          goto LABEL_9;
        }
      }
    }
    else
    {
      unsigned int v5 = 0;
    }
    uint64_t v7 = 0;
LABEL_9:
    unint64_t v8 = v5 | (unint64_t)(v7 << 32);
LABEL_10:
    uint64_t v9 = v4 + 64;
    while (v4)
    {
      if ((*(unsigned char *)(v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6) + 15) & 8) == 0) {
        break;
      }
      uint64_t v10 = v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6);
      unint64_t v11 = *(void *)(a1 + 8);
      unint64_t v12 = *(void *)v10;
      if (*(void *)v10 >= *(void *)(a1 + 16) + v11) {
        break;
      }
      int v13 = *(_DWORD *)(v10 + 8);
      if (v13 == -15676)
      {
        if (v11 <= v12)
        {
          int v14 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0x70uLL);
          long long v15 = v37;
          *((_OWORD *)v14 + 4) = v36;
          *((_OWORD *)v14 + 5) = v15;
          *((_OWORD *)v14 + 6) = v38;
          long long v16 = v33;
          *(_OWORD *)int v14 = v32;
          *((_OWORD *)v14 + 1) = v16;
          long long v17 = v35;
          *((_OWORD *)v14 + 2) = v34;
          *((_OWORD *)v14 + 3) = v17;
          uint64_t v18 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v14 + 8, 8uLL, 0);
          if (v18) {
            uint64_t v18 = *(void *)(v18 + 32);
          }
          void v14[4] = v18;
          apr_hash_set(*(apr_hash_t **)(a1 + 32), v14 + 1, 8, v14);
          v14[3] = v12;
        }
      }
      else if (v13 == -15675)
      {
        uint64_t v26 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0x70uLL);
        long long v27 = v37;
        v26[4] = v36;
        v26[5] = v27;
        v26[6] = v38;
        long long v28 = v33;
        _OWORD *v26 = v32;
        v26[1] = v28;
        long long v29 = v35;
        _OWORD v26[2] = v34;
        v26[3] = v29;
        entry = find_entry(*(void *)(a1 + 32), (unsigned char *)v26 + 8, 8uLL, 0);
        uint64_t v31 = *entry;
        if (*entry) {
          uint64_t v31 = *(void *)(v31 + 32);
        }
        *((void *)v26 + 4) = v31;
        apr_hash_set(*(apr_hash_t **)(a1 + 32), (char *)v26 + 8, 8, v26);
        goto LABEL_26;
      }
      GTMTLSMDynamicLibrary_processTraceFuncWithMap((char *)&v32, *(void *)(a1 + 40), (uint64_t *)v10);
      unsigned int v19 = atomic_load((unsigned int *)(v4 + 4));
      int v20 = v8 + (v19 >> 6);
      uint64_t v21 = (HIDWORD(v8) + 1);
      unint64_t v8 = (v21 << 32) | v8;
      if (v21 == v20 - 1)
      {
        unint64_t v8 = (v21 << 32) | v21;
        uint64_t v4 = *(void *)(v4 + 40);
        goto LABEL_10;
      }
    }
    uint64_t v26 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0x70uLL);
    long long v22 = v37;
    v26[4] = v36;
    v26[5] = v22;
    v26[6] = v38;
    long long v23 = v33;
    _OWORD *v26 = v32;
    v26[1] = v23;
    long long v24 = v35;
    _OWORD v26[2] = v34;
    v26[3] = v24;
    uint64_t v25 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v26 + 8, 8uLL, 0);
    if (v25) {
      uint64_t v25 = *(void *)(v25 + 32);
    }
    *((void *)v26 + 4) = v25;
    apr_hash_set(*(apr_hash_t **)(a1 + 32), (char *)v26 + 8, 8, v26);
    unint64_t v12 = -1;
LABEL_26:
    *((void *)v26 + 3) = v12;
  }
}

void GTMTLSMBuilder_pipelineLibrary(uint64_t a1, uint64_t a2)
{
  if (!GTMTLSMBuilder_streamIntersectionRange(*(void *)(a1 + 8), *(void *)(a1 + 16), a2)) {
    return;
  }
  long long v28 = 0u;
  *(void *)&long long v29 = 0;
  uint64_t v33 = 0;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v30 = 0u;
  LODWORD(v28) = 67;
  *((void *)&v29 + 1) = -1;
  ++*(_DWORD *)(a1 + 96);
  uint64_t v4 = *(void *)(a2 + 32);
  if (v4)
  {
    unsigned int v5 = 0;
    while (1)
    {
      unsigned int v6 = atomic_load((unsigned int *)(v4 + 4));
      uint64_t v7 = v5 + (v6 >> 6) - 1;
      if ((int)v7 > 0) {
        break;
      }
      uint64_t v4 = *(void *)(v4 + 40);
      unsigned int v5 = v7;
      if (!v4)
      {
        unsigned int v5 = v7;
        goto LABEL_9;
      }
    }
  }
  else
  {
    unsigned int v5 = 0;
  }
  uint64_t v7 = 0;
LABEL_9:
  unint64_t v8 = v5 | (unint64_t)(v7 << 32);
LABEL_10:
  uint64_t v9 = v4 + 64;
  while (1)
  {
    if (!v4
      || (*(unsigned char *)(v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6) + 15) & 8) == 0
      || (uint64_t v10 = v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6),
          unint64_t v11 = *(void *)(a1 + 8),
          unint64_t v12 = *(void *)v10,
          *(void *)v10 >= *(void *)(a1 + 16) + v11))
    {
      uint64_t v21 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0x58uLL);
      long long v22 = v31;
      v21[2] = v30;
      int8x16_t v21[3] = v22;
      void v21[4] = v32;
      *((void *)v21 + 1mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v33;
      long long v23 = v29;
      *uint64_t v21 = v28;
      v21[1] = v23;
      uint64_t v24 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v21 + 8, 8uLL, 0);
      if (v24) {
        uint64_t v24 = *(void *)(v24 + 32);
      }
      *((void *)v21 + 4) = v24;
      apr_hash_set(*(apr_hash_t **)(a1 + 32), (char *)v21 + 8, 8, v21);
      unint64_t v12 = -1;
      goto LABEL_26;
    }
    int v13 = *(_DWORD *)(v10 + 8);
    if (v13 == -15743)
    {
      if (v11 <= v12)
      {
        int v14 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0x58uLL);
        long long v15 = v31;
        *((_OWORD *)v14 + 2) = v30;
        *((_OWORD *)v14 + 3) = v15;
        *((_OWORD *)v14 + 4) = v32;
        v14[10] = v33;
        long long v16 = v29;
        *(_OWORD *)int v14 = v28;
        *((_OWORD *)v14 + 1) = v16;
        uint64_t v17 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v14 + 8, 8uLL, 0);
        if (v17) {
          uint64_t v17 = *(void *)(v17 + 32);
        }
        void v14[4] = v17;
        apr_hash_set(*(apr_hash_t **)(a1 + 32), v14 + 1, 8, v14);
        v14[3] = v12;
      }
      goto LABEL_21;
    }
    if (v13 == -15742) {
      break;
    }
LABEL_21:
    GTMTLSMPipelineLibrary_processTraceFuncWithMap((char *)&v28, *(void *)(a1 + 40), (uint64_t *)v10);
    unsigned int v18 = atomic_load((unsigned int *)(v4 + 4));
    int v19 = v8 + (v18 >> 6);
    uint64_t v20 = (HIDWORD(v8) + 1);
    unint64_t v8 = (v20 << 32) | v8;
    if (v20 == v19 - 1)
    {
      unint64_t v8 = (v20 << 32) | v20;
      uint64_t v4 = *(void *)(v4 + 40);
      goto LABEL_10;
    }
  }
  if (v11 <= v12)
  {
    uint64_t v21 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0x58uLL);
    long long v25 = v31;
    v21[2] = v30;
    int8x16_t v21[3] = v25;
    void v21[4] = v32;
    *((void *)v21 + 1mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v33;
    long long v26 = v29;
    *uint64_t v21 = v28;
    v21[1] = v26;
    uint64_t v27 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v21 + 8, 8uLL, 0);
    if (v27) {
      uint64_t v27 = *(void *)(v27 + 32);
    }
    *((void *)v21 + 4) = v27;
    apr_hash_set(*(apr_hash_t **)(a1 + 32), (char *)v21 + 8, 8, v21);
LABEL_26:
    *((void *)v21 + 3) = v12;
  }
}

void GTMTLSMBuilder_ioCommandQueue(uint64_t a1, uint64_t a2)
{
  if (GTMTLSMBuilder_streamIntersectionRange(*(void *)(a1 + 8), *(void *)(a1 + 16), a2))
  {
    long long v23 = 0u;
    *(void *)&long long v24 = 0;
    long long v25 = 0u;
    long long v26 = 0u;
    LODWORD(v23) = 52;
    *((void *)&v24 + 1) = -1;
    ++*(_DWORD *)(a1 + 140);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unsigned int v5 = 0;
      while (1)
      {
        unsigned int v6 = atomic_load((unsigned int *)(v4 + 4));
        uint64_t v7 = v5 + (v6 >> 6) - 1;
        if ((int)v7 > 0) {
          break;
        }
        uint64_t v4 = *(void *)(v4 + 40);
        unsigned int v5 = v7;
        if (!v4)
        {
          unsigned int v5 = v7;
          goto LABEL_9;
        }
      }
    }
    else
    {
      unsigned int v5 = 0;
    }
    uint64_t v7 = 0;
LABEL_9:
    unint64_t v8 = v5 | (unint64_t)(v7 << 32);
LABEL_10:
    uint64_t v9 = v4 + 64;
    while (1)
    {
      if (!v4
        || (*(unsigned char *)(v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6) + 15) & 8) == 0
        || (uint64_t v10 = v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6),
            unint64_t v11 = *(void *)(a1 + 8),
            unint64_t v12 = *(void *)v10,
            *(void *)v10 >= *(void *)(a1 + 16) + v11))
      {
        long long v16 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0x40uLL);
        long long v17 = v24;
        _OWORD *v16 = v23;
        v16[1] = v17;
        long long v18 = v26;
        _OWORD v16[2] = v25;
        v16[3] = v18;
        uint64_t v19 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v16 + 8, 8uLL, 0);
        if (v19) {
          uint64_t v19 = *(void *)(v19 + 32);
        }
        *((void *)v16 + 4) = v19;
        apr_hash_set(*(apr_hash_t **)(a1 + 32), (char *)v16 + 8, 8, v16);
        unint64_t v12 = -1;
        goto LABEL_20;
      }
      if (*(_DWORD *)(v10 + 8) == -15332) {
        break;
      }
      GTMTLSMIOCommandQueue_processTraceFuncWithMap((char *)&v23, *(void *)(a1 + 40), (uint64_t *)v10);
      unsigned int v13 = atomic_load((unsigned int *)(v4 + 4));
      int v14 = v8 + (v13 >> 6);
      uint64_t v15 = (HIDWORD(v8) + 1);
      unint64_t v8 = (v15 << 32) | v8;
      if (v15 == v14 - 1)
      {
        unint64_t v8 = (v15 << 32) | v15;
        uint64_t v4 = *(void *)(v4 + 40);
        goto LABEL_10;
      }
    }
    if (v11 <= v12)
    {
      long long v16 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0x40uLL);
      long long v20 = v24;
      _OWORD *v16 = v23;
      v16[1] = v20;
      long long v21 = v26;
      _OWORD v16[2] = v25;
      v16[3] = v21;
      uint64_t v22 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v16 + 8, 8uLL, 0);
      if (v22) {
        uint64_t v22 = *(void *)(v22 + 32);
      }
      *((void *)v16 + 4) = v22;
      apr_hash_set(*(apr_hash_t **)(a1 + 32), (char *)v16 + 8, 8, v16);
LABEL_20:
      *((void *)v16 + 3) = v12;
    }
  }
}

void GTMTLSMBuilder_commandQueue(uint64_t a1, uint64_t a2)
{
  if (!GTMTLSMBuilder_streamIntersectionRange(*(void *)(a1 + 8), *(void *)(a1 + 16), a2)) {
    return;
  }
  long long v28 = 0u;
  *(void *)&long long v29 = 0;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v30 = 0u;
  LODWORD(v28) = 27;
  *((void *)&v29 + 1) = -1;
  BYTE12(v32) = 1;
  WORD4(v32) = 769;
  ++*(_DWORD *)(a1 + 136);
  uint64_t v4 = *(void *)(a2 + 32);
  if (v4)
  {
    unsigned int v5 = 0;
    while (1)
    {
      unsigned int v6 = atomic_load((unsigned int *)(v4 + 4));
      uint64_t v7 = v5 + (v6 >> 6) - 1;
      if ((int)v7 > 0) {
        break;
      }
      uint64_t v4 = *(void *)(v4 + 40);
      unsigned int v5 = v7;
      if (!v4)
      {
        unsigned int v5 = v7;
        goto LABEL_9;
      }
    }
  }
  else
  {
    unsigned int v5 = 0;
  }
  uint64_t v7 = 0;
LABEL_9:
  unint64_t v8 = v5 | (unint64_t)(v7 << 32);
LABEL_10:
  uint64_t v9 = v4 + 64;
  while (1)
  {
    if (!v4
      || (*(unsigned char *)(v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6) + 15) & 8) == 0
      || (uint64_t v10 = v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6),
          unint64_t v11 = *(void *)(a1 + 8),
          unint64_t v12 = *(void *)v10,
          *(void *)v10 >= *(void *)(a1 + 16) + v11))
    {
      long long v21 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0x50uLL);
      long long v22 = v31;
      v21[2] = v30;
      int8x16_t v21[3] = v22;
      void v21[4] = v32;
      long long v23 = v29;
      *long long v21 = v28;
      v21[1] = v23;
      uint64_t v24 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v21 + 8, 8uLL, 0);
      if (v24) {
        uint64_t v24 = *(void *)(v24 + 32);
      }
      *((void *)v21 + 4) = v24;
      apr_hash_set(*(apr_hash_t **)(a1 + 32), (char *)v21 + 8, 8, v21);
      unint64_t v12 = -1;
      goto LABEL_25;
    }
    int v13 = *(_DWORD *)(v10 + 8);
    if ((v13 + 16349) < 5)
    {
      if (v11 <= v12)
      {
        int v14 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0x50uLL);
        long long v15 = v31;
        *((_OWORD *)v14 + 2) = v30;
        *((_OWORD *)v14 + 3) = v15;
        *((_OWORD *)v14 + 4) = v32;
        long long v16 = v29;
        *(_OWORD *)int v14 = v28;
        *((_OWORD *)v14 + 1) = v16;
        uint64_t v17 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v14 + 8, 8uLL, 0);
        if (v17) {
          uint64_t v17 = *(void *)(v17 + 32);
        }
        void v14[4] = v17;
        apr_hash_set(*(apr_hash_t **)(a1 + 32), v14 + 1, 8, v14);
        v14[3] = v12;
      }
      goto LABEL_20;
    }
    if (v13 == -16344) {
      break;
    }
LABEL_20:
    GTMTLSMCommandQueue_processTraceFuncWithMap((char *)&v28, *(void *)(a1 + 40), (uint64_t *)v10);
    unsigned int v18 = atomic_load((unsigned int *)(v4 + 4));
    int v19 = v8 + (v18 >> 6);
    uint64_t v20 = (HIDWORD(v8) + 1);
    unint64_t v8 = (v20 << 32) | v8;
    if (v20 == v19 - 1)
    {
      unint64_t v8 = (v20 << 32) | v20;
      uint64_t v4 = *(void *)(v4 + 40);
      goto LABEL_10;
    }
  }
  if (v11 <= v12)
  {
    long long v21 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0x50uLL);
    long long v25 = v31;
    v21[2] = v30;
    int8x16_t v21[3] = v25;
    void v21[4] = v32;
    long long v26 = v29;
    *long long v21 = v28;
    v21[1] = v26;
    uint64_t v27 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v21 + 8, 8uLL, 0);
    if (v27) {
      uint64_t v27 = *(void *)(v27 + 32);
    }
    *((void *)v21 + 4) = v27;
    apr_hash_set(*(apr_hash_t **)(a1 + 32), (char *)v21 + 8, 8, v21);
LABEL_25:
    *((void *)v21 + 3) = v12;
  }
}

void GTMTLSMBuilder_rasterizationRateMap(uint64_t a1, uint64_t a2)
{
  if (!GTMTLSMBuilder_streamIntersectionRange(*(void *)(a1 + 8), *(void *)(a1 + 16), a2)) {
    return;
  }
  long long v28 = 0u;
  *(void *)&long long v29 = 0;
  long long v30 = 0u;
  long long v31 = 0u;
  LODWORD(v28) = 68;
  *((void *)&v29 + 1) = -1;
  ++*(_DWORD *)(a1 + 144);
  uint64_t v4 = *(void *)(a2 + 32);
  if (v4)
  {
    unsigned int v5 = 0;
    while (1)
    {
      unsigned int v6 = atomic_load((unsigned int *)(v4 + 4));
      uint64_t v7 = v5 + (v6 >> 6) - 1;
      if ((int)v7 > 0) {
        break;
      }
      uint64_t v4 = *(void *)(v4 + 40);
      unsigned int v5 = v7;
      if (!v4)
      {
        unsigned int v5 = v7;
        goto LABEL_9;
      }
    }
  }
  else
  {
    unsigned int v5 = 0;
  }
  uint64_t v7 = 0;
LABEL_9:
  unint64_t v8 = v5 | (unint64_t)(v7 << 32);
LABEL_10:
  uint64_t v9 = v4 + 64;
  while (1)
  {
    if (!v4
      || (*(unsigned char *)(v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6) + 15) & 8) == 0
      || (uint64_t v10 = v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6),
          unint64_t v11 = *(void *)(a1 + 8),
          unint64_t v12 = *(void *)v10,
          *(void *)v10 >= *(void *)(a1 + 16) + v11))
    {
      long long v21 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0x40uLL);
      long long v22 = v29;
      *long long v21 = v28;
      v21[1] = v22;
      long long v23 = v31;
      v21[2] = v30;
      int8x16_t v21[3] = v23;
      uint64_t v24 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v21 + 8, 8uLL, 0);
      if (v24) {
        uint64_t v24 = *(void *)(v24 + 32);
      }
      *((void *)v21 + 4) = v24;
      apr_hash_set(*(apr_hash_t **)(a1 + 32), (char *)v21 + 8, 8, v21);
      unint64_t v12 = -1;
      goto LABEL_26;
    }
    int v13 = *(_DWORD *)(v10 + 8);
    if (v13 == -15411)
    {
      if (v11 <= v12)
      {
        int v14 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0x40uLL);
        long long v15 = v29;
        *(_OWORD *)int v14 = v28;
        *((_OWORD *)v14 + 1) = v15;
        long long v16 = v31;
        *((_OWORD *)v14 + 2) = v30;
        *((_OWORD *)v14 + 3) = v16;
        uint64_t v17 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v14 + 8, 8uLL, 0);
        if (v17) {
          uint64_t v17 = *(void *)(v17 + 32);
        }
        void v14[4] = v17;
        apr_hash_set(*(apr_hash_t **)(a1 + 32), v14 + 1, 8, v14);
        v14[3] = v12;
      }
      goto LABEL_21;
    }
    if (v13 == -15801) {
      break;
    }
LABEL_21:
    GTMTLSMRasterizationRateMap_processTraceFuncWithMap((char *)&v28, *(void *)(a1 + 40), (uint64_t *)v10);
    unsigned int v18 = atomic_load((unsigned int *)(v4 + 4));
    int v19 = v8 + (v18 >> 6);
    uint64_t v20 = (HIDWORD(v8) + 1);
    unint64_t v8 = (v20 << 32) | v8;
    if (v20 == v19 - 1)
    {
      unint64_t v8 = (v20 << 32) | v20;
      uint64_t v4 = *(void *)(v4 + 40);
      goto LABEL_10;
    }
  }
  if (v11 <= v12)
  {
    long long v21 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0x40uLL);
    long long v25 = v29;
    *long long v21 = v28;
    v21[1] = v25;
    long long v26 = v31;
    v21[2] = v30;
    int8x16_t v21[3] = v26;
    uint64_t v27 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v21 + 8, 8uLL, 0);
    if (v27) {
      uint64_t v27 = *(void *)(v27 + 32);
    }
    *((void *)v21 + 4) = v27;
    apr_hash_set(*(apr_hash_t **)(a1 + 32), (char *)v21 + 8, 8, v21);
LABEL_26:
    *((void *)v21 + 3) = v12;
  }
}

void GTMTLSMBuilder_resourceGroup(uint64_t a1, uint64_t a2)
{
  if (GTMTLSMBuilder_streamIntersectionRange(*(void *)(a1 + 8), *(void *)(a1 + 16), a2))
  {
    long long v23 = 0u;
    *(void *)&long long v24 = 0;
    long long v25 = 0u;
    long long v26 = 0u;
    LODWORD(v23) = 73;
    *((void *)&v24 + 1) = -1;
    ++*(_DWORD *)(a1 + 148);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unsigned int v5 = 0;
      while (1)
      {
        unsigned int v6 = atomic_load((unsigned int *)(v4 + 4));
        uint64_t v7 = v5 + (v6 >> 6) - 1;
        if ((int)v7 > 0) {
          break;
        }
        uint64_t v4 = *(void *)(v4 + 40);
        unsigned int v5 = v7;
        if (!v4)
        {
          unsigned int v5 = v7;
          goto LABEL_9;
        }
      }
    }
    else
    {
      unsigned int v5 = 0;
    }
    uint64_t v7 = 0;
LABEL_9:
    unint64_t v8 = v5 | (unint64_t)(v7 << 32);
LABEL_10:
    uint64_t v9 = v4 + 64;
    while (1)
    {
      if (!v4
        || (*(unsigned char *)(v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6) + 15) & 8) == 0
        || (uint64_t v10 = v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6),
            unint64_t v11 = *(void *)(a1 + 8),
            unint64_t v12 = *(void *)v10,
            *(void *)v10 >= *(void *)(a1 + 16) + v11))
      {
        long long v16 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0x40uLL);
        long long v17 = v24;
        _OWORD *v16 = v23;
        v16[1] = v17;
        long long v18 = v26;
        _OWORD v16[2] = v25;
        v16[3] = v18;
        uint64_t v19 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v16 + 8, 8uLL, 0);
        if (v19) {
          uint64_t v19 = *(void *)(v19 + 32);
        }
        *((void *)v16 + 4) = v19;
        apr_hash_set(*(apr_hash_t **)(a1 + 32), (char *)v16 + 8, 8, v16);
        unint64_t v12 = -1;
        goto LABEL_20;
      }
      if (*(_DWORD *)(v10 + 8) == -15769) {
        break;
      }
      GTMTLSMResourceGroup_processTraceFuncWithMap((char *)&v23, *(void *)(a1 + 40), (uint64_t *)v10);
      unsigned int v13 = atomic_load((unsigned int *)(v4 + 4));
      int v14 = v8 + (v13 >> 6);
      uint64_t v15 = (HIDWORD(v8) + 1);
      unint64_t v8 = (v15 << 32) | v8;
      if (v15 == v14 - 1)
      {
        unint64_t v8 = (v15 << 32) | v15;
        uint64_t v4 = *(void *)(v4 + 40);
        goto LABEL_10;
      }
    }
    if (v11 <= v12)
    {
      long long v16 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0x40uLL);
      long long v20 = v24;
      _OWORD *v16 = v23;
      v16[1] = v20;
      long long v21 = v26;
      _OWORD v16[2] = v25;
      v16[3] = v21;
      uint64_t v22 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v16 + 8, 8uLL, 0);
      if (v22) {
        uint64_t v22 = *(void *)(v22 + 32);
      }
      *((void *)v16 + 4) = v22;
      apr_hash_set(*(apr_hash_t **)(a1 + 32), (char *)v16 + 8, 8, v16);
LABEL_20:
      *((void *)v16 + 3) = v12;
    }
  }
}

void GTMTLSMBuilder_filter(uint64_t a1, uint64_t a2)
{
  if (GTMTLSMBuilder_streamIntersectionRange(*(void *)(a1 + 8), *(void *)(a1 + 16), a2))
  {
    long long v29 = 0u;
    *(void *)&long long v30 = 0;
    uint64_t v35 = 0;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    LODWORD(v29) = 15;
    *((void *)&v30 + 1) = -1;
    ++*(_DWORD *)(a1 + 152);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unsigned int v5 = 0;
      while (1)
      {
        unsigned int v6 = atomic_load((unsigned int *)(v4 + 4));
        uint64_t v7 = v5 + (v6 >> 6) - 1;
        if ((int)v7 > 0) {
          break;
        }
        uint64_t v4 = *(void *)(v4 + 40);
        unsigned int v5 = v7;
        if (!v4)
        {
          unsigned int v5 = v7;
          goto LABEL_9;
        }
      }
    }
    else
    {
      unsigned int v5 = 0;
    }
    uint64_t v7 = 0;
LABEL_9:
    unint64_t v8 = v5 | (unint64_t)(v7 << 32);
LABEL_10:
    uint64_t v9 = v4 + 64;
    while (1)
    {
      if (!v4
        || (*(unsigned char *)(v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6) + 15) & 8) == 0
        || (uint64_t v10 = v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6),
            unint64_t v11 = *(void *)(a1 + 8),
            unint64_t v12 = *(void *)v10,
            *(void *)v10 >= *(void *)(a1 + 16) + v11))
      {
        long long v16 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0x68uLL);
        long long v18 = v30;
        long long v17 = v31;
        _OWORD *v16 = v29;
        v16[1] = v18;
        _OWORD v16[2] = v17;
        long long v20 = v33;
        long long v19 = v34;
        long long v21 = v32;
        *((void *)v16 + 12) = v35;
        void v16[4] = v20;
        v16[5] = v19;
        v16[3] = v21;
        uint64_t v22 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v16 + 8, 8uLL, 0);
        if (v22) {
          uint64_t v22 = *(void *)(v22 + 32);
        }
        *((void *)v16 + 4) = v22;
        apr_hash_set(*(apr_hash_t **)(a1 + 32), (char *)v16 + 8, 8, v16);
        unint64_t v12 = -1;
        goto LABEL_20;
      }
      if (*(_DWORD *)(v10 + 8) == -6139) {
        break;
      }
      GTMTLSMFilter_processTraceFuncWithMap((uint64_t)&v29, *(void *)(a1 + 40), (uint64_t *)v10);
      unsigned int v13 = atomic_load((unsigned int *)(v4 + 4));
      int v14 = v8 + (v13 >> 6);
      uint64_t v15 = (HIDWORD(v8) + 1);
      unint64_t v8 = (v15 << 32) | v8;
      if (v15 == v14 - 1)
      {
        unint64_t v8 = (v15 << 32) | v15;
        uint64_t v4 = *(void *)(v4 + 40);
        goto LABEL_10;
      }
    }
    if (v11 <= v12)
    {
      long long v16 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0x68uLL);
      long long v24 = v30;
      long long v23 = v31;
      _OWORD *v16 = v29;
      v16[1] = v24;
      _OWORD v16[2] = v23;
      long long v26 = v33;
      long long v25 = v34;
      long long v27 = v32;
      *((void *)v16 + 12) = v35;
      void v16[4] = v26;
      v16[5] = v25;
      v16[3] = v27;
      uint64_t v28 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v16 + 8, 8uLL, 0);
      if (v28) {
        uint64_t v28 = *(void *)(v28 + 32);
      }
      *((void *)v16 + 4) = v28;
      apr_hash_set(*(apr_hash_t **)(a1 + 32), (char *)v16 + 8, 8, v16);
LABEL_20:
      *((void *)v16 + 3) = v12;
    }
  }
}

void GTMTLSMBuilder_indirectComputeCommand(uint64_t a1, uint64_t a2)
{
  if (GTMTLSMBuilder_streamIntersectionRange(*(void *)(a1 + 8), *(void *)(a1 + 16), a2))
  {
    long long v21 = 0u;
    *(void *)&long long v22 = 0;
    uint64_t v24 = 0;
    long long v23 = 0u;
    LODWORD(v21) = 58;
    *((void *)&v22 + 1) = -1;
    ++*(_DWORD *)(a1 + 132);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unsigned int v5 = 0;
      while (1)
      {
        unsigned int v6 = atomic_load((unsigned int *)(v4 + 4));
        uint64_t v7 = v5 + (v6 >> 6) - 1;
        if ((int)v7 > 0) {
          break;
        }
        uint64_t v4 = *(void *)(v4 + 40);
        unsigned int v5 = v7;
        if (!v4)
        {
          unsigned int v5 = v7;
          goto LABEL_9;
        }
      }
    }
    else
    {
      unsigned int v5 = 0;
    }
    uint64_t v7 = 0;
LABEL_9:
    unint64_t v8 = v5 | (unint64_t)(v7 << 32);
LABEL_10:
    uint64_t v9 = v4 + 64;
    while (1)
    {
      if (!v4
        || (*(unsigned char *)(v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6) + 15) & 8) == 0
        || (uint64_t v10 = v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6),
            unint64_t v11 = *(void *)(a1 + 8),
            unint64_t v12 = *(void *)v10,
            *(void *)v10 >= *(void *)(a1 + 16) + v11))
      {
        long long v16 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0x38uLL);
        long long v17 = v22;
        _OWORD *v16 = v21;
        v16[1] = v17;
        _OWORD v16[2] = v23;
        *((void *)v16 + 6) = v24;
        uint64_t v18 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v16 + 8, 8uLL, 0);
        if (v18) {
          uint64_t v18 = *(void *)(v18 + 32);
        }
        *((void *)v16 + 4) = v18;
        apr_hash_set(*(apr_hash_t **)(a1 + 32), (char *)v16 + 8, 8, v16);
        unint64_t v12 = -1;
        goto LABEL_20;
      }
      if (*(_DWORD *)(v10 + 8) == -15935) {
        break;
      }
      GTMTLSMIndirectComputeCommand_processTraceFuncWithMap((char *)&v21, *(void *)(a1 + 40), (uint64_t *)v10);
      unsigned int v13 = atomic_load((unsigned int *)(v4 + 4));
      int v14 = v8 + (v13 >> 6);
      uint64_t v15 = (HIDWORD(v8) + 1);
      unint64_t v8 = (v15 << 32) | v8;
      if (v15 == v14 - 1)
      {
        unint64_t v8 = (v15 << 32) | v15;
        uint64_t v4 = *(void *)(v4 + 40);
        goto LABEL_10;
      }
    }
    if (v11 <= v12)
    {
      long long v16 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0x38uLL);
      long long v19 = v22;
      _OWORD *v16 = v21;
      v16[1] = v19;
      _OWORD v16[2] = v23;
      *((void *)v16 + 6) = v24;
      uint64_t v20 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v16 + 8, 8uLL, 0);
      if (v20) {
        uint64_t v20 = *(void *)(v20 + 32);
      }
      *((void *)v16 + 4) = v20;
      apr_hash_set(*(apr_hash_t **)(a1 + 32), (char *)v16 + 8, 8, v16);
LABEL_20:
      *((void *)v16 + 3) = v12;
    }
  }
}

void GTMTLSMBuilder_indirectRenderCommand(uint64_t a1, uint64_t a2)
{
  if (GTMTLSMBuilder_streamIntersectionRange(*(void *)(a1 + 8), *(void *)(a1 + 16), a2))
  {
    long long v21 = 0u;
    *(void *)&long long v22 = 0;
    uint64_t v24 = 0;
    long long v23 = 0u;
    LODWORD(v21) = 59;
    *((void *)&v22 + 1) = -1;
    ++*(_DWORD *)(a1 + 128);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unsigned int v5 = 0;
      while (1)
      {
        unsigned int v6 = atomic_load((unsigned int *)(v4 + 4));
        uint64_t v7 = v5 + (v6 >> 6) - 1;
        if ((int)v7 > 0) {
          break;
        }
        uint64_t v4 = *(void *)(v4 + 40);
        unsigned int v5 = v7;
        if (!v4)
        {
          unsigned int v5 = v7;
          goto LABEL_9;
        }
      }
    }
    else
    {
      unsigned int v5 = 0;
    }
    uint64_t v7 = 0;
LABEL_9:
    unint64_t v8 = v5 | (unint64_t)(v7 << 32);
LABEL_10:
    uint64_t v9 = v4 + 64;
    while (1)
    {
      if (!v4
        || (*(unsigned char *)(v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6) + 15) & 8) == 0
        || (uint64_t v10 = v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6),
            unint64_t v11 = *(void *)(a1 + 8),
            unint64_t v12 = *(void *)v10,
            *(void *)v10 >= *(void *)(a1 + 16) + v11))
      {
        long long v16 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0x38uLL);
        long long v17 = v22;
        _OWORD *v16 = v21;
        v16[1] = v17;
        _OWORD v16[2] = v23;
        *((void *)v16 + 6) = v24;
        uint64_t v18 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v16 + 8, 8uLL, 0);
        if (v18) {
          uint64_t v18 = *(void *)(v18 + 32);
        }
        *((void *)v16 + 4) = v18;
        apr_hash_set(*(apr_hash_t **)(a1 + 32), (char *)v16 + 8, 8, v16);
        unint64_t v12 = -1;
        goto LABEL_20;
      }
      if (*(_DWORD *)(v10 + 8) == -15957) {
        break;
      }
      GTMTLSMIndirectRenderCommand_processTraceFuncWithMap((char *)&v21, *(void *)(a1 + 40), (uint64_t *)v10);
      unsigned int v13 = atomic_load((unsigned int *)(v4 + 4));
      int v14 = v8 + (v13 >> 6);
      uint64_t v15 = (HIDWORD(v8) + 1);
      unint64_t v8 = (v15 << 32) | v8;
      if (v15 == v14 - 1)
      {
        unint64_t v8 = (v15 << 32) | v15;
        uint64_t v4 = *(void *)(v4 + 40);
        goto LABEL_10;
      }
    }
    if (v11 <= v12)
    {
      long long v16 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0x38uLL);
      long long v19 = v22;
      _OWORD *v16 = v21;
      v16[1] = v19;
      _OWORD v16[2] = v23;
      *((void *)v16 + 6) = v24;
      uint64_t v20 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v16 + 8, 8uLL, 0);
      if (v20) {
        uint64_t v20 = *(void *)(v20 + 32);
      }
      *((void *)v16 + 4) = v20;
      apr_hash_set(*(apr_hash_t **)(a1 + 32), (char *)v16 + 8, 8, v16);
LABEL_20:
      *((void *)v16 + 3) = v12;
    }
  }
}

void GTMTLSMBuilder_drawable(uint64_t a1, uint64_t a2)
{
  if (GTMTLSMBuilder_streamIntersectionRange(*(void *)(a1 + 8), *(void *)(a1 + 16), a2))
  {
    long long v21 = 0u;
    *(void *)&long long v22 = 0;
    uint64_t v24 = 0;
    long long v23 = 0u;
    LODWORD(v21) = 2;
    *((void *)&v22 + 1) = -1;
    ++*(_DWORD *)(a1 + 164);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unsigned int v5 = 0;
      while (1)
      {
        unsigned int v6 = atomic_load((unsigned int *)(v4 + 4));
        uint64_t v7 = v5 + (v6 >> 6) - 1;
        if ((int)v7 > 0) {
          break;
        }
        uint64_t v4 = *(void *)(v4 + 40);
        unsigned int v5 = v7;
        if (!v4)
        {
          unsigned int v5 = v7;
          goto LABEL_9;
        }
      }
    }
    else
    {
      unsigned int v5 = 0;
    }
    uint64_t v7 = 0;
LABEL_9:
    unint64_t v8 = v5 | (unint64_t)(v7 << 32);
LABEL_10:
    uint64_t v9 = v4 + 64;
    while (1)
    {
      if (!v4
        || (*(unsigned char *)(v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6) + 15) & 8) == 0
        || (uint64_t v10 = v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6),
            unint64_t v11 = *(void *)(a1 + 8),
            unint64_t v12 = *(void *)v10,
            *(void *)v10 >= *(void *)(a1 + 16) + v11))
      {
        long long v16 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0x38uLL);
        long long v17 = v22;
        _OWORD *v16 = v21;
        v16[1] = v17;
        _OWORD v16[2] = v23;
        *((void *)v16 + 6) = v24;
        uint64_t v18 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v16 + 8, 8uLL, 0);
        if (v18) {
          uint64_t v18 = *(void *)(v18 + 32);
        }
        *((void *)v16 + 4) = v18;
        apr_hash_set(*(apr_hash_t **)(a1 + 32), (char *)v16 + 8, 8, v16);
        unint64_t v12 = -1;
        goto LABEL_20;
      }
      if (*(_DWORD *)(v10 + 8) == -7161) {
        break;
      }
      GTMTLSMDrawable_processTraceFuncWithMap((char *)&v21, *(void *)(a1 + 40), (uint64_t *)v10);
      unsigned int v13 = atomic_load((unsigned int *)(v4 + 4));
      int v14 = v8 + (v13 >> 6);
      uint64_t v15 = (HIDWORD(v8) + 1);
      unint64_t v8 = (v15 << 32) | v8;
      if (v15 == v14 - 1)
      {
        unint64_t v8 = (v15 << 32) | v15;
        uint64_t v4 = *(void *)(v4 + 40);
        goto LABEL_10;
      }
    }
    if (v11 <= v12)
    {
      long long v16 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0x38uLL);
      long long v19 = v22;
      _OWORD *v16 = v21;
      v16[1] = v19;
      _OWORD v16[2] = v23;
      *((void *)v16 + 6) = v24;
      uint64_t v20 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v16 + 8, 8uLL, 0);
      if (v20) {
        uint64_t v20 = *(void *)(v20 + 32);
      }
      *((void *)v16 + 4) = v20;
      apr_hash_set(*(apr_hash_t **)(a1 + 32), (char *)v16 + 8, 8, v16);
LABEL_20:
      *((void *)v16 + 3) = v12;
    }
  }
}

void GTMTLSMBuilder_layer(uint64_t a1, uint64_t a2)
{
  if (!GTMTLSMBuilder_streamIntersectionRange(*(void *)(a1 + 8), *(void *)(a1 + 16), a2)) {
    return;
  }
  memset(&v23[2], 0, 248);
  memset(v23, 0, 24);
  LODWORD(v23[0]) = 3;
  *((void *)&v23[1] + 1) = -1;
  ++*(_DWORD *)(a1 + 168);
  uint64_t v4 = *(void *)(a2 + 32);
  if (v4)
  {
    unsigned int v5 = 0;
    while (1)
    {
      unsigned int v6 = atomic_load((unsigned int *)(v4 + 4));
      uint64_t v7 = v5 + (v6 >> 6) - 1;
      if ((int)v7 > 0) {
        break;
      }
      uint64_t v4 = *(void *)(v4 + 40);
      unsigned int v5 = v7;
      if (!v4)
      {
        unsigned int v5 = v7;
        goto LABEL_9;
      }
    }
  }
  else
  {
    unsigned int v5 = 0;
  }
  uint64_t v7 = 0;
LABEL_9:
  unint64_t v8 = v5 | (unint64_t)(v7 << 32);
LABEL_10:
  uint64_t v9 = v4 + 64;
  while (v4)
  {
    if ((*(unsigned char *)(v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6) + 15) & 8) == 0) {
      break;
    }
    uint64_t v10 = v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6);
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v12 = *(void *)v10;
    if (*(void *)v10 >= *(void *)(a1 + 16) + v11) {
      break;
    }
    int v13 = *(_DWORD *)(v10 + 8);
    if ((v13 + 7165) <= 0xB)
    {
      if (((1 << (v13 - 3)) & 0x86B) != 0) {
        goto LABEL_28;
      }
      if (v13 == -7163)
      {
        if (v11 > v12 || *((void *)&v23[0] + 1) == 0) {
          goto LABEL_32;
        }
LABEL_29:
        long long v16 = (char *)apr_palloc(*(apr_pool_t **)(a1 + 24), 0x118uLL);
        memcpy(v16, v23, 0x118uLL);
        uint64_t v17 = *find_entry(*(void *)(a1 + 32), v16 + 8, 8uLL, 0);
        if (v17) {
          uint64_t v17 = *(void *)(v17 + 32);
        }
        *((void *)v16 + 4) = v17;
        apr_hash_set(*(apr_hash_t **)(a1 + 32), v16 + 8, 8, v16);
        *((void *)v16 + 3) = v12;
        goto LABEL_32;
      }
    }
    if (v13 != -8183 && v13 != -8181) {
      goto LABEL_32;
    }
LABEL_28:
    if (v11 <= v12) {
      goto LABEL_29;
    }
LABEL_32:
    GTMTLSMLayer_processTraceFuncWithMap((uint64_t)v23, *(void *)(a1 + 40), (uint64_t *)v10);
    unsigned int v18 = atomic_load((unsigned int *)(v4 + 4));
    int v19 = v8 + (v18 >> 6);
    uint64_t v20 = (HIDWORD(v8) + 1);
    unint64_t v8 = (v20 << 32) | v8;
    if (v20 == v19 - 1)
    {
      unint64_t v8 = (v20 << 32) | v20;
      uint64_t v4 = *(void *)(v4 + 40);
      goto LABEL_10;
    }
  }
  long long v21 = (char *)apr_palloc(*(apr_pool_t **)(a1 + 24), 0x118uLL);
  memcpy(v21, v23, 0x118uLL);
  uint64_t v22 = *find_entry(*(void *)(a1 + 32), v21 + 8, 8uLL, 0);
  if (v22) {
    uint64_t v22 = *(void *)(v22 + 32);
  }
  *((void *)v21 + 4) = v22;
  apr_hash_set(*(apr_hash_t **)(a1 + 32), v21 + 8, 8, v21);
  *((void *)v21 + 3) = -1;
}

void GTMTLSMBuilder_motionEstimationPipeline(uint64_t a1, uint64_t a2)
{
  if (GTMTLSMBuilder_streamIntersectionRange(*(void *)(a1 + 8), *(void *)(a1 + 16), a2))
  {
    long long v21 = 0u;
    *(void *)&long long v22 = 0;
    uint64_t v24 = 0;
    long long v23 = 0u;
    LODWORD(v21) = 64;
    *((void *)&v22 + 1) = -1;
    ++*(_DWORD *)(a1 + 116);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unsigned int v5 = 0;
      while (1)
      {
        unsigned int v6 = atomic_load((unsigned int *)(v4 + 4));
        uint64_t v7 = v5 + (v6 >> 6) - 1;
        if ((int)v7 > 0) {
          break;
        }
        uint64_t v4 = *(void *)(v4 + 40);
        unsigned int v5 = v7;
        if (!v4)
        {
          unsigned int v5 = v7;
          goto LABEL_9;
        }
      }
    }
    else
    {
      unsigned int v5 = 0;
    }
    uint64_t v7 = 0;
LABEL_9:
    unint64_t v8 = v5 | (unint64_t)(v7 << 32);
LABEL_10:
    uint64_t v9 = v4 + 64;
    while (1)
    {
      if (!v4
        || (*(unsigned char *)(v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6) + 15) & 8) == 0
        || (uint64_t v10 = v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6),
            unint64_t v11 = *(void *)(a1 + 8),
            unint64_t v12 = *(void *)v10,
            *(void *)v10 >= *(void *)(a1 + 16) + v11))
      {
        long long v16 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0x38uLL);
        long long v17 = v22;
        _OWORD *v16 = v21;
        v16[1] = v17;
        _OWORD v16[2] = v23;
        *((void *)v16 + 6) = v24;
        uint64_t v18 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v16 + 8, 8uLL, 0);
        if (v18) {
          uint64_t v18 = *(void *)(v18 + 32);
        }
        *((void *)v16 + 4) = v18;
        apr_hash_set(*(apr_hash_t **)(a1 + 32), (char *)v16 + 8, 8, v16);
        unint64_t v12 = -1;
        goto LABEL_20;
      }
      if (*(_DWORD *)(v10 + 8) == -15893) {
        break;
      }
      GTMTLSMMotionEstimationPipelineState_processTraceFuncWithMap((char *)&v21, *(void *)(a1 + 40), (uint64_t *)v10);
      unsigned int v13 = atomic_load((unsigned int *)(v4 + 4));
      int v14 = v8 + (v13 >> 6);
      uint64_t v15 = (HIDWORD(v8) + 1);
      unint64_t v8 = (v15 << 32) | v8;
      if (v15 == v14 - 1)
      {
        unint64_t v8 = (v15 << 32) | v15;
        uint64_t v4 = *(void *)(v4 + 40);
        goto LABEL_10;
      }
    }
    if (v11 <= v12)
    {
      long long v16 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0x38uLL);
      long long v19 = v22;
      _OWORD *v16 = v21;
      v16[1] = v19;
      _OWORD v16[2] = v23;
      *((void *)v16 + 6) = v24;
      uint64_t v20 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v16 + 8, 8uLL, 0);
      if (v20) {
        uint64_t v20 = *(void *)(v20 + 32);
      }
      *((void *)v16 + 4) = v20;
      apr_hash_set(*(apr_hash_t **)(a1 + 32), (char *)v16 + 8, 8, v16);
LABEL_20:
      *((void *)v16 + 3) = v12;
    }
  }
}

void GTMTLSMBuilder_accelerationStructure(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!GTMTLSMBuilder_streamIntersectionRange(*(void *)(a1 + 8), *(void *)(a1 + 16), a2)) {
    return;
  }
  long long v60 = 0u;
  *(void *)&long long v61 = 0;
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  long long v63 = 0u;
  long long v62 = 0u;
  LODWORD(v6mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 16;
  *((void *)&v61 + 1) = -1;
  WORD1(v66) = 2;
  long long v64 = 0xFFFFFFFFFFFFFFFFLL;
  ++*(_DWORD *)(a1 + 80);
  if (a2 && (uint64_t v6 = *(void *)(a2 + 32)) != 0 && (*(unsigned char *)(v6 + 79) & 8) != 0) {
    uint64_t v7 = (uint64_t *)(v6 + 64);
  }
  else {
    uint64_t v7 = 0;
  }
  GTMTLSMAccelerationStructure_processTraceFuncWithMap((char *)&v60, *(void *)(a1 + 40), v7);
  unint64_t v8 = *(void **)(a3 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  if (v9)
  {
    unsigned int v10 = 0;
    while (1)
    {
      unsigned int v11 = atomic_load((unsigned int *)(v9 + 4));
      uint64_t v12 = v10 + (v11 >> 6) - 1;
      if ((int)v12 > 1) {
        break;
      }
      uint64_t v9 = *(void *)(v9 + 40);
      unsigned int v10 = v12;
      if (!v9)
      {
        unsigned int v10 = v12;
        goto LABEL_13;
      }
    }
    uint64_t v12 = 1;
  }
  else
  {
    unsigned int v10 = 0;
    uint64_t v12 = 0;
  }
LABEL_13:
  unsigned int v13 = &v8[8 * (uint64_t)*(int *)(a3 + 12)];
  unint64_t v14 = v10 | (unint64_t)(v12 << 32);
  while (1)
  {
    do
    {
      if (v9 && (uint64_t v15 = v9 + ((uint64_t)(0xFFFFFFFF00000001 * v14) >> 32 << 6), (*(unsigned char *)(v15 + 79) & 8) != 0)) {
        uint64_t v16 = v15 + 64;
      }
      else {
        uint64_t v16 = 0;
      }
      if (v8 >= v13)
      {
        if (!v16) {
          goto LABEL_53;
        }
        unint64_t v17 = HIDWORD(v14);
        if (v9 && (uint64_t v18 = v9 + ((uint64_t)(HIDWORD(v14) - (int)v14) << 6), (*(unsigned char *)(v18 + 79) & 8) != 0)) {
          uint64_t v16 = v18 + 64;
        }
        else {
          uint64_t v16 = 0;
        }
        unsigned int v21 = atomic_load((unsigned int *)(v9 + 4));
        int v20 = v14 + (v21 >> 6);
      }
      else
      {
        if (!v16) {
          goto LABEL_27;
        }
        if (*v8 == *(void *)v16)
        {
          v8 += 8;
        }
        else if (*v8 < *(void *)v16)
        {
LABEL_27:
          uint64_t v16 = (uint64_t)v8;
          v8 += 8;
          goto LABEL_34;
        }
        unsigned int v19 = atomic_load((unsigned int *)(v9 + 4));
        int v20 = v14 + (v19 >> 6);
        unint64_t v17 = HIDWORD(v14);
      }
      uint64_t v22 = (v17 + 1);
      if (v22 == v20 - 1)
      {
        unint64_t v14 = (v22 << 32) | v22;
        uint64_t v9 = *(void *)(v9 + 40);
      }
      else
      {
        unint64_t v14 = (v22 << 32) | v14;
      }
LABEL_34:
      if (*(void *)v16 >= *(void *)(a1 + 16) + *(void *)(a1 + 8))
      {
LABEL_53:
        long long v38 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0xD0uLL);
        _OWORD *v38 = v60;
        long long v39 = v64;
        long long v41 = v61;
        long long v40 = v62;
        v38[3] = v63;
        v38[4] = v39;
        v38[1] = v41;
        v38[2] = v40;
        long long v42 = v68;
        long long v44 = v65;
        long long v43 = v66;
        v38[7] = v67;
        char v38[8] = v42;
        v38[5] = v44;
        v38[6] = v43;
        long long v45 = v72;
        long long v47 = v69;
        long long v46 = v70;
        v38[11] = v71;
        v38[12] = v45;
        v38[9] = v47;
        v38[10] = v46;
        uint64_t v48 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v38 + 8, 8uLL, 0);
        if (v48) {
          uint64_t v48 = *(void *)(v48 + 32);
        }
        *((void *)v38 + 4) = v48;
        apr_hash_set(*(apr_hash_t **)(a1 + 32), (char *)v38 + 8, 8, v38);
        uint64_t v49 = -1;
        goto LABEL_56;
      }
      int v23 = *(_DWORD *)(v16 + 8);
      if (v23 == -10154 || v23 == -10158) {
        uint64_t v24 = (char *)*((void *)GTTraceFunc_argumentBytesWithMap((void *)v16, *(unsigned __int8 *)(v16 + 13), *(void *)(a1 + 40))+ 1);
      }
      else {
        uint64_t v24 = GTTraceFunc_targetContext(v16, *(void *)(a1 + 40));
      }
    }
    while (v24 != *((char **)&v60 + 1));
    int v25 = *(_DWORD *)(v16 + 8);
    if (v25 > -15553)
    {
      if (v25 != -15552 && v25 != -10154 && v25 != -10158) {
        goto LABEL_52;
      }
      goto LABEL_48;
    }
    if ((v25 + 15651) >= 2 && v25 != -15661) {
      break;
    }
LABEL_48:
    uint64_t v26 = *(void *)v16;
    if (*(void *)(a1 + 8) <= *(void *)v16)
    {
      long long v27 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0xD0uLL);
      *(_OWORD *)long long v27 = v60;
      long long v28 = v64;
      long long v30 = v61;
      long long v29 = v62;
      *((_OWORD *)v27 + 3) = v63;
      *((_OWORD *)v27 + 4) = v28;
      *((_OWORD *)v27 + 1) = v30;
      *((_OWORD *)v27 + 2) = v29;
      long long v31 = v68;
      long long v33 = v65;
      long long v32 = v66;
      *((_OWORD *)v27 + 7) = v67;
      *((_OWORD *)v27 + 8) = v31;
      *((_OWORD *)v27 + 5) = v33;
      *((_OWORD *)v27 + 6) = v32;
      long long v34 = v72;
      long long v36 = v69;
      long long v35 = v70;
      *((_OWORD *)v27 + 11) = v71;
      *((_OWORD *)v27 + 12) = v34;
      *((_OWORD *)v27 + 9) = v36;
      *((_OWORD *)v27 + 1mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v35;
      uint64_t v37 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v27 + 8, 8uLL, 0);
      if (v37) {
        uint64_t v37 = *(void *)(v37 + 32);
      }
      v27[4] = v37;
      apr_hash_set(*(apr_hash_t **)(a1 + 32), v27 + 1, 8, v27);
      v27[3] = v26;
    }
LABEL_52:
    GTMTLSMAccelerationStructure_processTraceFuncWithMap((char *)&v60, *(void *)(a1 + 40), (uint64_t *)v16);
  }
  if (v25 != -15659) {
    goto LABEL_52;
  }
  uint64_t v49 = *(void *)v16;
  if (*(void *)(a1 + 8) <= *(void *)v16)
  {
    long long v38 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0xD0uLL);
    _OWORD *v38 = v60;
    long long v50 = v64;
    long long v52 = v61;
    long long v51 = v62;
    v38[3] = v63;
    v38[4] = v50;
    v38[1] = v52;
    v38[2] = v51;
    long long v53 = v68;
    long long v55 = v65;
    long long v54 = v66;
    v38[7] = v67;
    char v38[8] = v53;
    v38[5] = v55;
    v38[6] = v54;
    long long v56 = v72;
    long long v58 = v69;
    long long v57 = v70;
    v38[11] = v71;
    v38[12] = v56;
    v38[9] = v58;
    v38[10] = v57;
    uint64_t v59 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v38 + 8, 8uLL, 0);
    if (v59) {
      uint64_t v59 = *(void *)(v59 + 32);
    }
    *((void *)v38 + 4) = v59;
    apr_hash_set(*(apr_hash_t **)(a1 + 32), (char *)v38 + 8, 8, v38);
LABEL_56:
    *((void *)v38 + 3) = v49;
  }
}

void GTMTLSMBuilder_intersectionFunctionTable(uint64_t a1, uint64_t a2)
{
  if (!GTMTLSMBuilder_streamIntersectionRange(*(void *)(a1 + 8), *(void *)(a1 + 16), a2)) {
    return;
  }
  long long v49 = 0u;
  *(void *)&long long v50 = 0;
  uint64_t v59 = 0;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v54 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  LODWORD(v49) = 60;
  *((void *)&v50 + 1) = -1;
  WORD1(v55) = 2;
  long long v53 = 0xFFFFFFFFFFFFFFFFLL;
  ++*(_DWORD *)(a1 + 76);
  if (a2 && (uint64_t v4 = *(void *)(a2 + 32)) != 0 && (*(unsigned char *)(v4 + 79) & 8) != 0) {
    unsigned int v5 = (uint64_t *)(v4 + 64);
  }
  else {
    unsigned int v5 = 0;
  }
  GTMTLSMIntersectionFunctionTable_processTraceFuncWithMap((char *)&v49, *(void *)(a1 + 40), v5);
  uint64_t v6 = *(void *)(a2 + 32);
  if (v6)
  {
    unsigned int v7 = 0;
    while (1)
    {
      unsigned int v8 = atomic_load((unsigned int *)(v6 + 4));
      uint64_t v9 = v7 + (v8 >> 6) - 1;
      if ((int)v9 > 1) {
        break;
      }
      uint64_t v6 = *(void *)(v6 + 40);
      unsigned int v7 = v9;
      if (!v6)
      {
        unsigned int v7 = v9;
        goto LABEL_13;
      }
    }
    uint64_t v9 = 1;
  }
  else
  {
    unsigned int v7 = 0;
    uint64_t v9 = 0;
  }
LABEL_13:
  unint64_t v10 = v7 | (unint64_t)(v9 << 32);
LABEL_14:
  uint64_t v11 = v6 + 64;
  while (1)
  {
    if (!v6
      || (*(unsigned char *)(v11 + ((uint64_t)(HIDWORD(v10) - (int)v10) << 6) + 15) & 8) == 0
      || (uint64_t v12 = v11 + ((uint64_t)(HIDWORD(v10) - (int)v10) << 6),
          unint64_t v13 = *(void *)(a1 + 8),
          unint64_t v14 = *(void *)v12,
          *(void *)v12 >= *(void *)(a1 + 16) + v13))
    {
      long long v30 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0xA8uLL);
      long long v32 = v50;
      long long v31 = v51;
      *long long v30 = v49;
      v30[1] = v32;
      v30[2] = v31;
      long long v33 = v55;
      long long v35 = v52;
      long long v34 = v53;
      v30[5] = v54;
      v30[6] = v33;
      v30[3] = v35;
      v30[4] = v34;
      long long v37 = v57;
      long long v36 = v58;
      long long v38 = v56;
      *((void *)v30 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v59;
      v30[8] = v37;
      void v30[9] = v36;
      v30[7] = v38;
      uint64_t v39 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v30 + 8, 8uLL, 0);
      if (v39) {
        uint64_t v39 = *(void *)(v39 + 32);
      }
      *((void *)v30 + 4) = v39;
      apr_hash_set(*(apr_hash_t **)(a1 + 32), (char *)v30 + 8, 8, v30);
      unint64_t v14 = -1;
      goto LABEL_35;
    }
    int v15 = *(_DWORD *)(v12 + 8);
    if (v15 > -15561)
    {
      if (v15 == -15557 || v15 == -15560)
      {
LABEL_25:
        if (v13 <= v14)
        {
          unint64_t v17 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0xA8uLL);
          long long v19 = v50;
          long long v18 = v51;
          *(_OWORD *)unint64_t v17 = v49;
          *((_OWORD *)v17 + 1) = v19;
          *((_OWORD *)v17 + 2) = v18;
          long long v20 = v55;
          long long v22 = v52;
          long long v21 = v53;
          *((_OWORD *)v17 + 5) = v54;
          *((_OWORD *)v17 + 6) = v20;
          *((_OWORD *)v17 + 3) = v22;
          *((_OWORD *)v17 + 4) = v21;
          long long v24 = v57;
          long long v23 = v58;
          long long v25 = v56;
          v17[20] = v59;
          *((_OWORD *)v17 + 8) = v24;
          *((_OWORD *)v17 + 9) = v23;
          *((_OWORD *)v17 + 7) = v25;
          uint64_t v26 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v17 + 8, 8uLL, 0);
          if (v26) {
            uint64_t v26 = *(void *)(v26 + 32);
          }
          v17[4] = v26;
          apr_hash_set(*(apr_hash_t **)(a1 + 32), v17 + 1, 8, v17);
          v17[3] = v14;
        }
        goto LABEL_30;
      }
      goto LABEL_30;
    }
    if (v15 == -15570) {
      goto LABEL_25;
    }
    if (v15 == -15568) {
      break;
    }
LABEL_30:
    GTMTLSMIntersectionFunctionTable_processTraceFuncWithMap((char *)&v49, *(void *)(a1 + 40), (uint64_t *)v12);
    unsigned int v27 = atomic_load((unsigned int *)(v6 + 4));
    int v28 = v10 + (v27 >> 6);
    uint64_t v29 = (HIDWORD(v10) + 1);
    unint64_t v10 = (v29 << 32) | v10;
    if (v29 == v28 - 1)
    {
      unint64_t v10 = (v29 << 32) | v29;
      uint64_t v6 = *(void *)(v6 + 40);
      goto LABEL_14;
    }
  }
  if (v13 <= v14)
  {
    long long v30 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0xA8uLL);
    long long v41 = v50;
    long long v40 = v51;
    *long long v30 = v49;
    v30[1] = v41;
    v30[2] = v40;
    long long v42 = v55;
    long long v44 = v52;
    long long v43 = v53;
    v30[5] = v54;
    v30[6] = v42;
    v30[3] = v44;
    v30[4] = v43;
    long long v46 = v57;
    long long v45 = v58;
    long long v47 = v56;
    *((void *)v30 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v59;
    v30[8] = v46;
    void v30[9] = v45;
    v30[7] = v47;
    uint64_t v48 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v30 + 8, 8uLL, 0);
    if (v48) {
      uint64_t v48 = *(void *)(v48 + 32);
    }
    *((void *)v30 + 4) = v48;
    apr_hash_set(*(apr_hash_t **)(a1 + 32), (char *)v30 + 8, 8, v30);
LABEL_35:
    *((void *)v30 + 3) = v14;
  }
}

void GTMTLSMBuilder_functionHandle(uint64_t a1, uint64_t a2)
{
  if (GTMTLSMBuilder_streamIntersectionRange(*(void *)(a1 + 8), *(void *)(a1 + 16), a2))
  {
    long long v22 = 0u;
    *(void *)&long long v23 = 0;
    uint64_t v26 = 0;
    long long v24 = 0u;
    long long v25 = 0u;
    LODWORD(v22) = 44;
    *((void *)&v23 + 1) = -1;
    ++*(_DWORD *)(a1 + 172);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unsigned int v5 = 0;
      while (1)
      {
        unsigned int v6 = atomic_load((unsigned int *)(v4 + 4));
        uint64_t v7 = v5 + (v6 >> 6) - 1;
        if ((int)v7 > 0) {
          break;
        }
        uint64_t v4 = *(void *)(v4 + 40);
        unsigned int v5 = v7;
        if (!v4)
        {
          unsigned int v5 = v7;
          goto LABEL_9;
        }
      }
    }
    else
    {
      unsigned int v5 = 0;
    }
    uint64_t v7 = 0;
LABEL_9:
    unint64_t v8 = v5 | (unint64_t)(v7 << 32);
LABEL_10:
    uint64_t v9 = v4 + 64;
    while (v4)
    {
      if ((*(unsigned char *)(v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6) + 15) & 8) == 0) {
        break;
      }
      uint64_t v10 = v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6);
      uint64_t v11 = *(void *)v10;
      if (*(void *)v10 >= *(void *)(a1 + 16) + *(void *)(a1 + 8)) {
        break;
      }
      if (*(_DWORD *)(v10 + 8) == -15610)
      {
        int v15 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0x48uLL);
        long long v19 = v25;
        v15[2] = v24;
        v15[3] = v19;
        *((void *)v15 + 8) = v26;
        long long v20 = v23;
        *int v15 = v22;
        v15[1] = v20;
        uint64_t v21 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v15 + 8, 8uLL, 0);
        if (v21) {
          uint64_t v21 = *(void *)(v21 + 32);
        }
        *((void *)v15 + 4) = v21;
        apr_hash_set(*(apr_hash_t **)(a1 + 32), (char *)v15 + 8, 8, v15);
        goto LABEL_23;
      }
      GTMTLSMFunctionHandle_processTraceFuncWithMap((char *)&v22, *(void *)(a1 + 40), (uint64_t *)v10);
      unsigned int v12 = atomic_load((unsigned int *)(v4 + 4));
      int v13 = v8 + (v12 >> 6);
      uint64_t v14 = (HIDWORD(v8) + 1);
      unint64_t v8 = (v14 << 32) | v8;
      if (v14 == v13 - 1)
      {
        unint64_t v8 = (v14 << 32) | v14;
        uint64_t v4 = *(void *)(v4 + 40);
        goto LABEL_10;
      }
    }
    int v15 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0x48uLL);
    long long v16 = v25;
    v15[2] = v24;
    v15[3] = v16;
    *((void *)v15 + 8) = v26;
    long long v17 = v23;
    *int v15 = v22;
    v15[1] = v17;
    uint64_t v18 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v15 + 8, 8uLL, 0);
    if (v18) {
      uint64_t v18 = *(void *)(v18 + 32);
    }
    *((void *)v15 + 4) = v18;
    apr_hash_set(*(apr_hash_t **)(a1 + 32), (char *)v15 + 8, 8, v15);
    uint64_t v11 = -1;
LABEL_23:
    *((void *)v15 + 3) = v11;
  }
}

void GTMTLSMBuilder_visibleFunctionTable(uint64_t a1, uint64_t a2)
{
  if (!GTMTLSMBuilder_streamIntersectionRange(*(void *)(a1 + 8), *(void *)(a1 + 16), a2)) {
    return;
  }
  ++*(_DWORD *)(a1 + 72);
  long long v47 = 0u;
  *(void *)&long long v48 = 0;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v49 = 0u;
  LODWORD(v47) = 83;
  *((void *)&v48 + 1) = -1;
  uint64_t v4 = *(void *)(a2 + 32);
  if (v4)
  {
    unsigned int v5 = 0;
    while (1)
    {
      unsigned int v6 = atomic_load((unsigned int *)(v4 + 4));
      uint64_t v7 = v5 + (v6 >> 6) - 1;
      if ((int)v7 > 0) {
        break;
      }
      uint64_t v4 = *(void *)(v4 + 40);
      unsigned int v5 = v7;
      if (!v4)
      {
        unsigned int v5 = v7;
        goto LABEL_9;
      }
    }
  }
  else
  {
    unsigned int v5 = 0;
  }
  uint64_t v7 = 0;
LABEL_9:
  unint64_t v8 = v5 | (unint64_t)(v7 << 32);
LABEL_10:
  uint64_t v9 = v4 + 64;
  while (v4)
  {
    if ((*(unsigned char *)(v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6) + 15) & 8) == 0) {
      break;
    }
    uint64_t v10 = v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6);
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v12 = *(void *)v10;
    if (*(void *)v10 >= *(void *)(a1 + 16) + v11) {
      break;
    }
    int v13 = *(_DWORD *)(v10 + 8);
    if (v13 <= -15600)
    {
      if (v13 == -15607) {
        goto LABEL_21;
      }
      if (v13 == -15605)
      {
        int v28 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0xB0uLL);
        long long v39 = v48;
        long long v38 = v49;
        *int v28 = v47;
        v28[1] = v39;
        v28[2] = v38;
        long long v40 = v53;
        long long v42 = v50;
        long long v41 = v51;
        v28[5] = v52;
        v28[6] = v40;
        v28[3] = v42;
        v28[4] = v41;
        long long v43 = v57;
        long long v45 = v54;
        long long v44 = v55;
        v28[9] = v56;
        v28[10] = v43;
        v28[7] = v45;
        v28[8] = v44;
        uint64_t v46 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v28 + 8, 8uLL, 0);
        if (v46) {
          uint64_t v46 = *(void *)(v46 + 32);
        }
        *((void *)v28 + 4) = v46;
        apr_hash_set(*(apr_hash_t **)(a1 + 32), (char *)v28 + 8, 8, v28);
        goto LABEL_31;
      }
    }
    else if (v13 == -15596 || v13 == -15599)
    {
LABEL_21:
      if (v11 <= v12)
      {
        int v15 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0xB0uLL);
        long long v17 = v48;
        long long v16 = v49;
        *(_OWORD *)int v15 = v47;
        *((_OWORD *)v15 + 1) = v17;
        *((_OWORD *)v15 + 2) = v16;
        long long v18 = v53;
        long long v20 = v50;
        long long v19 = v51;
        *((_OWORD *)v15 + 5) = v52;
        *((_OWORD *)v15 + 6) = v18;
        *((_OWORD *)v15 + 3) = v20;
        *((_OWORD *)v15 + 4) = v19;
        long long v21 = v57;
        long long v23 = v54;
        long long v22 = v55;
        *((_OWORD *)v15 + 9) = v56;
        *((_OWORD *)v15 + 1mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v21;
        *((_OWORD *)v15 + 7) = v23;
        *((_OWORD *)v15 + 8) = v22;
        uint64_t v24 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v15 + 8, 8uLL, 0);
        if (v24) {
          uint64_t v24 = *(void *)(v24 + 32);
        }
        void v15[4] = v24;
        apr_hash_set(*(apr_hash_t **)(a1 + 32), v15 + 1, 8, v15);
        v15[3] = v12;
      }
    }
    GTMTLSMVisibleFunctionTable_processTraceFuncWithMap((char *)&v47, *(void *)(a1 + 40), (uint64_t *)v10);
    unsigned int v25 = atomic_load((unsigned int *)(v4 + 4));
    int v26 = v8 + (v25 >> 6);
    uint64_t v27 = (HIDWORD(v8) + 1);
    unint64_t v8 = (v27 << 32) | v8;
    if (v27 == v26 - 1)
    {
      unint64_t v8 = (v27 << 32) | v27;
      uint64_t v4 = *(void *)(v4 + 40);
      goto LABEL_10;
    }
  }
  int v28 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0xB0uLL);
  long long v30 = v48;
  long long v29 = v49;
  *int v28 = v47;
  v28[1] = v30;
  v28[2] = v29;
  long long v31 = v53;
  long long v33 = v50;
  long long v32 = v51;
  v28[5] = v52;
  v28[6] = v31;
  v28[3] = v33;
  v28[4] = v32;
  long long v34 = v57;
  long long v36 = v54;
  long long v35 = v55;
  v28[9] = v56;
  v28[10] = v34;
  v28[7] = v36;
  v28[8] = v35;
  uint64_t v37 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v28 + 8, 8uLL, 0);
  if (v37) {
    uint64_t v37 = *(void *)(v37 + 32);
  }
  *((void *)v28 + 4) = v37;
  apr_hash_set(*(apr_hash_t **)(a1 + 32), (char *)v28 + 8, 8, v28);
  unint64_t v12 = -1;
LABEL_31:
  *((void *)v28 + 3) = v12;
}

void GTMTLSMBuilder_device(uint64_t a1, uint64_t a2)
{
  if (GTMTLSMBuilder_streamIntersectionRange(*(void *)(a1 + 8), *(void *)(a1 + 16), a2))
  {
    long long v21 = 0u;
    *(void *)&long long v22 = 0;
    long long v23 = 0u;
    LODWORD(v21) = 36;
    *((void *)&v22 + 1) = -1;
    ++*(_DWORD *)(a1 + 160);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unsigned int v5 = 0;
      while (1)
      {
        unsigned int v6 = atomic_load((unsigned int *)(v4 + 4));
        uint64_t v7 = v5 + (v6 >> 6) - 1;
        if ((int)v7 > 0) {
          break;
        }
        uint64_t v4 = *(void *)(v4 + 40);
        unsigned int v5 = v7;
        if (!v4)
        {
          unsigned int v5 = v7;
          goto LABEL_9;
        }
      }
    }
    else
    {
      unsigned int v5 = 0;
    }
    uint64_t v7 = 0;
LABEL_9:
    unint64_t v8 = v5 | (unint64_t)(v7 << 32);
LABEL_10:
    uint64_t v9 = v4 + 64;
    while (1)
    {
      if (!v4
        || (*(unsigned char *)(v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6) + 15) & 8) == 0
        || (uint64_t v10 = v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6),
            unint64_t v11 = *(void *)(a1 + 8),
            unint64_t v12 = *(void *)v10,
            *(void *)v10 >= *(void *)(a1 + 16) + v11))
      {
        long long v16 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0x30uLL);
        long long v17 = v22;
        _OWORD *v16 = v21;
        v16[1] = v17;
        _OWORD v16[2] = v23;
        uint64_t v18 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v16 + 8, 8uLL, 0);
        if (v18) {
          uint64_t v18 = *(void *)(v18 + 32);
        }
        *((void *)v16 + 4) = v18;
        apr_hash_set(*(apr_hash_t **)(a1 + 32), (char *)v16 + 8, 8, v16);
        unint64_t v12 = -1;
        goto LABEL_20;
      }
      if (*(_DWORD *)(v10 + 8) == -16317) {
        break;
      }
      GTMTLSMDevice_processTraceFuncWithMap((char *)&v21, *(void *)(a1 + 40), v10);
      unsigned int v13 = atomic_load((unsigned int *)(v4 + 4));
      int v14 = v8 + (v13 >> 6);
      uint64_t v15 = (HIDWORD(v8) + 1);
      unint64_t v8 = (v15 << 32) | v8;
      if (v15 == v14 - 1)
      {
        unint64_t v8 = (v15 << 32) | v15;
        uint64_t v4 = *(void *)(v4 + 40);
        goto LABEL_10;
      }
    }
    if (v11 <= v12)
    {
      long long v16 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0x30uLL);
      long long v19 = v22;
      _OWORD *v16 = v21;
      v16[1] = v19;
      _OWORD v16[2] = v23;
      uint64_t v20 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v16 + 8, 8uLL, 0);
      if (v20) {
        uint64_t v20 = *(void *)(v20 + 32);
      }
      *((void *)v16 + 4) = v20;
      apr_hash_set(*(apr_hash_t **)(a1 + 32), (char *)v16 + 8, 8, v16);
LABEL_20:
      *((void *)v16 + 3) = v12;
    }
  }
}

void GTMTLSMBuilder_spatialScaler(uint64_t a1, uint64_t a2)
{
  if (GTMTLSMBuilder_streamIntersectionRange(*(void *)(a1 + 8), *(void *)(a1 + 16), a2))
  {
    ++*(_DWORD *)(a1 + 176);
    long long v31 = 0u;
    *(void *)&long long v32 = 0;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    LODWORD(v31) = 39;
    *((void *)&v32 + 1) = -1;
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unsigned int v5 = 0;
      while (1)
      {
        unsigned int v6 = atomic_load((unsigned int *)(v4 + 4));
        uint64_t v7 = v5 + (v6 >> 6) - 1;
        if ((int)v7 > 0) {
          break;
        }
        uint64_t v4 = *(void *)(v4 + 40);
        unsigned int v5 = v7;
        if (!v4)
        {
          unsigned int v5 = v7;
          goto LABEL_9;
        }
      }
    }
    else
    {
      unsigned int v5 = 0;
    }
    uint64_t v7 = 0;
LABEL_9:
    unint64_t v8 = v5 | (unint64_t)(v7 << 32);
LABEL_10:
    uint64_t v9 = v4 + 64;
    while (v4)
    {
      if ((*(unsigned char *)(v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6) + 15) & 8) == 0) {
        break;
      }
      uint64_t v10 = v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6);
      unint64_t v11 = *(void *)(a1 + 8);
      unint64_t v12 = *(void *)v10;
      if (*(void *)v10 >= *(void *)(a1 + 16) + v11) {
        break;
      }
      int v13 = *(_DWORD *)(v10 + 8);
      if ((v13 + 20480) >= 5)
      {
        if (v13 == -20475)
        {
          long long v22 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0x60uLL);
          long long v27 = v34;
          _OWORD v22[2] = v33;
          v22[3] = v27;
          long long v28 = v36;
          v22[4] = v35;
          v22[5] = v28;
          long long v29 = v32;
          *long long v22 = v31;
          v22[1] = v29;
          uint64_t v30 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v22 + 8, 8uLL, 0);
          if (v30) {
            uint64_t v30 = *(void *)(v30 + 32);
          }
          *((void *)v22 + 4) = v30;
          apr_hash_set(*(apr_hash_t **)(a1 + 32), (char *)v22 + 8, 8, v22);
          goto LABEL_25;
        }
      }
      else if (v11 <= v12)
      {
        int v14 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0x60uLL);
        long long v15 = v34;
        *((_OWORD *)v14 + 2) = v33;
        *((_OWORD *)v14 + 3) = v15;
        long long v16 = v36;
        *((_OWORD *)v14 + 4) = v35;
        *((_OWORD *)v14 + 5) = v16;
        long long v17 = v32;
        *(_OWORD *)int v14 = v31;
        *((_OWORD *)v14 + 1) = v17;
        uint64_t v18 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v14 + 8, 8uLL, 0);
        if (v18) {
          uint64_t v18 = *(void *)(v18 + 32);
        }
        void v14[4] = v18;
        apr_hash_set(*(apr_hash_t **)(a1 + 32), v14 + 1, 8, v14);
        v14[3] = v12;
      }
      GTMTLFXSMSpatialScaler_processTraceFuncWithMap((char *)&v31, *(void *)(a1 + 40), (uint64_t *)v10);
      unsigned int v19 = atomic_load((unsigned int *)(v4 + 4));
      int v20 = v8 + (v19 >> 6);
      uint64_t v21 = (HIDWORD(v8) + 1);
      unint64_t v8 = (v21 << 32) | v8;
      if (v21 == v20 - 1)
      {
        unint64_t v8 = (v21 << 32) | v21;
        uint64_t v4 = *(void *)(v4 + 40);
        goto LABEL_10;
      }
    }
    long long v22 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0x60uLL);
    long long v23 = v34;
    _OWORD v22[2] = v33;
    v22[3] = v23;
    long long v24 = v36;
    v22[4] = v35;
    v22[5] = v24;
    long long v25 = v32;
    *long long v22 = v31;
    v22[1] = v25;
    uint64_t v26 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v22 + 8, 8uLL, 0);
    if (v26) {
      uint64_t v26 = *(void *)(v26 + 32);
    }
    *((void *)v22 + 4) = v26;
    apr_hash_set(*(apr_hash_t **)(a1 + 32), (char *)v22 + 8, 8, v22);
    unint64_t v12 = -1;
LABEL_25:
    *((void *)v22 + 3) = v12;
  }
}

void GTMTLSMBuilder_temporalScaler(uint64_t a1, uint64_t a2)
{
  if (!GTMTLSMBuilder_streamIntersectionRange(*(void *)(a1 + 8), *(void *)(a1 + 16), a2)) {
    return;
  }
  ++*(_DWORD *)(a1 + 180);
  long long v36 = 0u;
  *(void *)&long long v37 = 0;
  uint64_t v45 = 0;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v38 = 0u;
  LODWORD(v36) = 40;
  *((void *)&v37 + 1) = -1;
  uint64_t v4 = *(void *)(a2 + 32);
  if (v4)
  {
    unsigned int v5 = 0;
    while (1)
    {
      unsigned int v6 = atomic_load((unsigned int *)(v4 + 4));
      uint64_t v7 = v5 + (v6 >> 6) - 1;
      if ((int)v7 > 0) {
        break;
      }
      uint64_t v4 = *(void *)(v4 + 40);
      unsigned int v5 = v7;
      if (!v4)
      {
        unsigned int v5 = v7;
        goto LABEL_9;
      }
    }
  }
  else
  {
    unsigned int v5 = 0;
  }
  uint64_t v7 = 0;
LABEL_9:
  unint64_t v8 = v5 | (unint64_t)(v7 << 32);
LABEL_10:
  uint64_t v9 = v4 + 64;
  while (v4)
  {
    if ((*(unsigned char *)(v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6) + 15) & 8) == 0) {
      break;
    }
    uint64_t v10 = v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6);
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v12 = *(void *)v10;
    if (*(void *)v10 >= *(void *)(a1 + 16) + v11) {
      break;
    }
    int v13 = *(_DWORD *)(v10 + 8);
    if ((v13 + 20471) < 0xD) {
      goto LABEL_15;
    }
    if (v13 <= -20458)
    {
      if (v13 == -20473) {
        goto LABEL_15;
      }
      if (v13 == -20475)
      {
        long long v29 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0x98uLL);
        long long v30 = v43;
        v29[6] = v42;
        v29[7] = v30;
        v29[8] = v44;
        *((void *)v29 + 18) = v45;
        long long v31 = v39;
        v29[2] = v38;
        v29[3] = v31;
        long long v32 = v41;
        v29[4] = v40;
        v29[5] = v32;
        long long v33 = v37;
        *long long v29 = v36;
        v29[1] = v33;
        entry = find_entry(*(void *)(a1 + 32), (unsigned char *)v29 + 8, 8uLL, 0);
        uint64_t v35 = *entry;
        if (*entry) {
          uint64_t v35 = *(void *)(v35 + 32);
        }
        *((void *)v29 + 4) = v35;
        apr_hash_set(*(apr_hash_t **)(a1 + 32), (char *)v29 + 8, 8, v29);
        goto LABEL_33;
      }
    }
    else if ((v13 + 20457) < 2 || v13 == -18430)
    {
LABEL_15:
      if (v11 <= v12)
      {
        int v14 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0x98uLL);
        long long v15 = v43;
        *((_OWORD *)v14 + 6) = v42;
        *((_OWORD *)v14 + 7) = v15;
        *((_OWORD *)v14 + 8) = v44;
        v14[18] = v45;
        long long v16 = v39;
        *((_OWORD *)v14 + 2) = v38;
        *((_OWORD *)v14 + 3) = v16;
        long long v17 = v41;
        *((_OWORD *)v14 + 4) = v40;
        *((_OWORD *)v14 + 5) = v17;
        long long v18 = v37;
        *(_OWORD *)int v14 = v36;
        *((_OWORD *)v14 + 1) = v18;
        uint64_t v19 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v14 + 8, 8uLL, 0);
        if (v19) {
          uint64_t v19 = *(void *)(v19 + 32);
        }
        void v14[4] = v19;
        apr_hash_set(*(apr_hash_t **)(a1 + 32), v14 + 1, 8, v14);
        v14[3] = v12;
      }
    }
    GTMTLFXSMTemporalScaler_processTraceFuncWithMap((uint64_t)&v36, *(void *)(a1 + 40), (uint64_t *)v10);
    unsigned int v20 = atomic_load((unsigned int *)(v4 + 4));
    int v21 = v8 + (v20 >> 6);
    uint64_t v22 = (HIDWORD(v8) + 1);
    unint64_t v8 = (v22 << 32) | v8;
    if (v22 == v21 - 1)
    {
      unint64_t v8 = (v22 << 32) | v22;
      uint64_t v4 = *(void *)(v4 + 40);
      goto LABEL_10;
    }
  }
  long long v29 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0x98uLL);
  long long v24 = v43;
  v29[6] = v42;
  v29[7] = v24;
  v29[8] = v44;
  *((void *)v29 + 18) = v45;
  long long v25 = v39;
  v29[2] = v38;
  v29[3] = v25;
  long long v26 = v41;
  v29[4] = v40;
  v29[5] = v26;
  long long v27 = v37;
  *long long v29 = v36;
  v29[1] = v27;
  uint64_t v28 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v29 + 8, 8uLL, 0);
  if (v28) {
    uint64_t v28 = *(void *)(v28 + 32);
  }
  *((void *)v29 + 4) = v28;
  apr_hash_set(*(apr_hash_t **)(a1 + 32), (char *)v29 + 8, 8, v29);
  unint64_t v12 = -1;
LABEL_33:
  *((void *)v29 + 3) = v12;
}

void GTMTLSMBuilder_residencySet(uint64_t a1, uint64_t a2)
{
  if (GTMTLSMBuilder_streamIntersectionRange(*(void *)(a1 + 8), *(void *)(a1 + 16), a2))
  {
    ++*(_DWORD *)(a1 + 184);
    long long v20 = 0u;
    *(void *)&long long v21 = 0;
    uint64_t v23 = 0;
    long long v22 = 0u;
    LODWORD(v2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 72;
    *((void *)&v21 + 1) = -1;
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unsigned int v5 = 0;
      while (1)
      {
        unsigned int v6 = atomic_load((unsigned int *)(v4 + 4));
        uint64_t v7 = v5 + (v6 >> 6) - 1;
        if ((int)v7 > 0) {
          break;
        }
        uint64_t v4 = *(void *)(v4 + 40);
        unsigned int v5 = v7;
        if (!v4)
        {
          unsigned int v5 = v7;
          goto LABEL_9;
        }
      }
    }
    else
    {
      unsigned int v5 = 0;
    }
    uint64_t v7 = 0;
LABEL_9:
    unint64_t v8 = v5 | (unint64_t)(v7 << 32);
LABEL_10:
    uint64_t v9 = v4 + 64;
    while (v4)
    {
      if ((*(unsigned char *)(v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6) + 15) & 8) == 0) {
        break;
      }
      uint64_t v10 = v9 + ((uint64_t)(HIDWORD(v8) - (int)v8) << 6);
      uint64_t v11 = *(void *)v10;
      if (*(void *)v10 >= *(void *)(a1 + 16) + *(void *)(a1 + 8)) {
        break;
      }
      if (*(_DWORD *)(v10 + 8) == -15231)
      {
        long long v15 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0x38uLL);
        long long v18 = v21;
        *long long v15 = v20;
        v15[1] = v18;
        v15[2] = v22;
        *((void *)v15 + 6) = v23;
        uint64_t v19 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v15 + 8, 8uLL, 0);
        if (v19) {
          uint64_t v19 = *(void *)(v19 + 32);
        }
        *((void *)v15 + 4) = v19;
        apr_hash_set(*(apr_hash_t **)(a1 + 32), (char *)v15 + 8, 8, v15);
        goto LABEL_23;
      }
      GTMTLSMResidencySet_processTraceFuncWithMap((char *)&v20, *(void *)(a1 + 40), (uint64_t *)v10);
      unsigned int v12 = atomic_load((unsigned int *)(v4 + 4));
      int v13 = v8 + (v12 >> 6);
      uint64_t v14 = (HIDWORD(v8) + 1);
      unint64_t v8 = (v14 << 32) | v8;
      if (v14 == v13 - 1)
      {
        unint64_t v8 = (v14 << 32) | v14;
        uint64_t v4 = *(void *)(v4 + 40);
        goto LABEL_10;
      }
    }
    long long v15 = apr_palloc(*(apr_pool_t **)(a1 + 24), 0x38uLL);
    long long v16 = v21;
    *long long v15 = v20;
    v15[1] = v16;
    v15[2] = v22;
    *((void *)v15 + 6) = v23;
    uint64_t v17 = *find_entry(*(void *)(a1 + 32), (unsigned char *)v15 + 8, 8uLL, 0);
    if (v17) {
      uint64_t v17 = *(void *)(v17 + 32);
    }
    *((void *)v15 + 4) = v17;
    apr_hash_set(*(apr_hash_t **)(a1 + 32), (char *)v15 + 8, 8, v15);
    uint64_t v11 = -1;
LABEL_23:
    *((void *)v15 + 3) = v11;
  }
}

uint64_t GTMTLSMBuilder_compareStreams(void **a1, void **a2)
{
  uint64_t v2 = *a1;
  if (*a1) {
    uint64_t v2 = (void *)*v2;
  }
  uint64_t v3 = *a2;
  if (*a2) {
    uint64_t v3 = (void *)*v3;
  }
  BOOL v4 = v2 >= v3;
  BOOL v5 = v2 != v3;
  if (v4) {
    return v5;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t *GTMTLSMContext_buildDeviceMirrorWithIgnoreFlags(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, apr_pool_t *pool, int a8, int *a9)
{
  memset(v68, 0, 144);
  v65[0] = a4;
  v65[1] = a5;
  v65[2] = a6;
  v65[3] = pool;
  long long v66 = apr_hash_make(pool);
  uint64_t v67 = a2;
  uint64_t v14 = apr_array_make(pool, *(_DWORD *)(a1 + 48), 8);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = a1;
  *(_DWORD *)(a1 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0;
  long long v15 = apr_hash_next((apr_hash_index_t *)(a1 + 16));
  if (v15)
  {
    long long v16 = v15;
    do
    {
      uint64_t v17 = *(void *)(*((void *)v16 + 1) + 32);
      *(void *)apr_array_push(v14) = v17;
      long long v16 = apr_hash_next(v16);
    }
    while (v16);
  }
  qsort(v14->elts, v14->nelts, v14->elt_size, (int (__cdecl *)(const void *, const void *))GTMTLSMBuilder_compareStreams);
  uint64_t v64 = 0;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v61 = 0u;
  __id key = &v60;
  uint64_t v60 = a4;
  long long v18 = (uint64_t *)bsearch(&__key, v14->elts, v14->nelts, v14->elt_size, (int (__cdecl *)(const void *, const void *))GTMTLSMBuilder_compareStreams);
  if (v18)
  {
    uint64_t v19 = v18 + 1;
    int v20 = *(_DWORD *)(*(void *)(*v18 + 32) + 72);
    if (a9)
    {
      if (v20 != -10239)
      {
        unsigned int v21 = *a9;
        long long v57 = 0u;
        long long v58 = 0u;
        uint64_t v55 = v21 | 0x1F400000000;
        long long v56 = "func->fenum == kDYFEMTLDevice_deviceReference";
        GTError_addError(a9, (uint64_t)&v55);
        return 0;
      }
    }
    else if (v20 != -10239)
    {
      return 0;
    }
    uint64_t v22 = (uint64_t)&v14->elts[8 * v14->nelts];
    GTMTLSMBuilder_device((uint64_t)v65, *v18);
    if (v19 != (uint64_t *)v22)
    {
      int v54 = a8;
      do
      {
        uint64_t v23 = *v19;
        if (*v19)
        {
          uint64_t v24 = *(void *)(v23 + 32);
          if (v24)
          {
            int v25 = *(unsigned __int8 *)(v24 + 79);
            if ((v25 & 8) != 0 && (v25 & a8) == 0)
            {
              int v26 = *(_DWORD *)(v24 + 72);
              if (v26 == -7163)
              {
                uint64_t v55 = 0;
                int v27 = 30;
                uint64_t v28 = GTTraceFunc_argumentBytesWithPool((uint64_t *)(v24 + 64), *(unsigned __int8 *)(v24 + 77), *(void *)(v23 + 24))+ 8;
              }
              else
              {
                unsigned int v29 = GetFuncEnumConstructorType(*(_DWORD *)(v24 + 72)) - 2;
                if (v29 > 0x51) {
                  int v27 = 255;
                }
                else {
                  int v27 = byte_1DA584[v29];
                }
                uint64_t v55 = 0;
                uint64_t v30 = *(void *)(v23 + 24);
                if (v26 == -15913 || v26 == -15914) {
                  uint64_t v28 = GTTraceFunc_argumentBytesWithPool((uint64_t *)(v24 + 64), *(unsigned __int8 *)(v24 + 77), v30)
                }
                      + 16;
                else {
                  uint64_t v28 = GTTraceFunc_argumentBytesWithPool((uint64_t *)(v24 + 64), *(unsigned __int8 *)(v24 + 77), v30);
                }
              }
              uint64_t v31 = *(void *)v28;
              uint64_t v55 = *(void *)v28;
              if (v27 == 29
                || v31 == a4
                || (uint64_t v32 = *find_entry((uint64_t)v66, &v55, 8uLL, 0)) != 0 && *(void *)(v32 + 32))
              {
                switch((char)v27)
                {
                  case 0:
                    GTMTLSMBuilder_buffer((uint64_t)v65, v23);
                    break;
                  case 1:
                    GTMTLSMBuilder_texture((uint64_t)v65, v23);
                    break;
                  case 2:
                    GTMTLSMBuilder_samplerState((uint64_t)v65, v23);
                    break;
                  case 3:
                    GTMTLSMBuilder_renderPipelineState((uint64_t)v65, v23);
                    break;
                  case 4:
                    GTMTLSMBuilder_computePipelineState((uint64_t)v65, v23);
                    break;
                  case 5:
                    GTMTLSMBuilder_indirectCommandBuffer((uint64_t)v65, v23);
                    break;
                  case 6:
                    GTMTLSMBuilder_visibleFunctionTable((uint64_t)v65, v23);
                    break;
                  case 7:
                    GTMTLSMBuilder_intersectionFunctionTable((uint64_t)v65, v23);
                    break;
                  case 8:
                    GTMTLSMBuilder_accelerationStructure((uint64_t)v65, v23, a3);
                    break;
                  case 9:
                    GTMTLSMBuilder_heap((uint64_t)v65, v23);
                    break;
                  case 10:
                    GTMTLSMBuilder_library((uint64_t)v65, v23);
                    break;
                  case 11:
                    GTMTLSMBuilder_dynamicLibrary((uint64_t)v65, v23);
                    break;
                  case 12:
                    GTMTLSMBuilder_pipelineLibrary((uint64_t)v65, v23);
                    break;
                  case 13:
                    GTMTLSMBuilder_fence((uint64_t)v65, v23);
                    break;
                  case 14:
                    GTMTLSMBuilder_event((uint64_t)v65, v23);
                    break;
                  case 15:
                    GTMTLSMBuilder_sharedEvent((uint64_t)v65, v23);
                    break;
                  case 16:
                    GTMTLSMBuilder_lateEvalEvent((uint64_t)v65, v23);
                    break;
                  case 17:
                    GTMTLSMBuilder_motionEstimationPipeline((uint64_t)v65, v23);
                    break;
                  case 18:
                    GTMTLSMBuilder_depthStencilState((uint64_t)v65, v23);
                    break;
                  case 19:
                    GTMTLSMBuilder_counterSampleBuffer((uint64_t)v65, v23);
                    break;
                  case 20:
                    GTMTLSMBuilder_indirectRenderCommand((uint64_t)v65, v23);
                    break;
                  case 21:
                    GTMTLSMBuilder_indirectComputeCommand((uint64_t)v65, v23);
                    break;
                  case 22:
                    GTMTLSMBuilder_commandQueue((uint64_t)v65, v23);
                    break;
                  case 23:
                    GTMTLSMBuilder_ioCommandQueue((uint64_t)v65, v23);
                    break;
                  case 24:
                    GTMTLSMBuilder_rasterizationRateMap((uint64_t)v65, v23);
                    break;
                  case 25:
                    GTMTLSMBuilder_resourceGroup((uint64_t)v65, v23);
                    break;
                  case 26:
                    GTMTLSMBuilder_filter((uint64_t)v65, v23);
                    break;
                  case 27:
                    GTMTLSMBuilder_function((uint64_t)v65, v23);
                    break;
                  case 29:
                    GTMTLSMBuilder_drawable((uint64_t)v65, v23);
                    break;
                  case 30:
                    GTMTLSMBuilder_layer((uint64_t)v65, v23);
                    break;
                  case 31:
                    GTMTLSMBuilder_functionHandle((uint64_t)v65, v23);
                    break;
                  case 32:
                    GTMTLSMBuilder_spatialScaler((uint64_t)v65, v23);
                    break;
                  case 33:
                    GTMTLSMBuilder_temporalScaler((uint64_t)v65, v23);
                    break;
                  case 34:
                    GTMTLSMBuilder_residencySet((uint64_t)v65, v23);
                    break;
                  default:
                    break;
                }
              }
              a8 = v54;
            }
          }
        }
        ++v19;
      }
      while (v19 != (uint64_t *)v22);
    }
  }
  long long v33 = (char *)apr_palloc(pool, 0x120uLL);
  long long v34 = (uint64_t *)v33;
  if (v33)
  {
    *(_OWORD *)(v33 + 8) = 0u;
    *((void *)v33 + 35) = 0;
    *(_OWORD *)(v33 + 248) = 0u;
    *(_OWORD *)(v33 + 264) = 0u;
    *(_OWORD *)(v33 + 216) = 0u;
    *(_OWORD *)(v33 + 232) = 0u;
    *(_OWORD *)(v33 + 184) = 0u;
    *(_OWORD *)(v33 + 20mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
    *(_OWORD *)(v33 + 152) = 0u;
    *(_OWORD *)(v33 + 168) = 0u;
    *(_OWORD *)(v33 + 12mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
    *(_OWORD *)(v33 + 136) = 0u;
    *(_OWORD *)(v33 + 88) = 0u;
    *(_OWORD *)(v33 + 104) = 0u;
    *(_OWORD *)(v33 + 56) = 0u;
    *(_OWORD *)(v33 + 72) = 0u;
    *(_OWORD *)(v33 + 24) = 0u;
    *(_OWORD *)(v33 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  }
  uint64_t v35 = 0;
  *(void *)long long v33 = v66;
  do
  {
    v34[v35 + 1] = (uint64_t)apr_array_make(pool, v68[v35], 8);
    ++v35;
  }
  while (v35 != 35);
  uint64_t v36 = *v34;
  long long v37 = (apr_hash_index_t *)(*v34 + 16);
  *(void *)(v36 + 24) = 0;
  *(void *)(v36 + 32) = 0;
  *(void *)(v36 + 16) = v36;
  *(_DWORD *)(v36 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0;
  long long v38 = apr_hash_next(v37);
  if (v38)
  {
    long long v39 = v38;
    do
    {
      long long v40 = *(_DWORD **)(*((void *)v39 + 1) + 32);
      unsigned int v41 = *v40 - 2;
      if (v41 <= 0x51)
      {
        uint64_t v42 = byte_1DA584[v41];
        if (v42 != -1) {
          *(void *)apr_array_push((apr_array_header_t *)v34[v42 + 1]) = v40;
        }
      }
      long long v39 = apr_hash_next(v39);
    }
    while (v39);
  }
  uint64_t v43 = v34[30];
  uint64_t v44 = *(unsigned int *)(v43 + 12);
  if ((int)v44 >= 1)
  {
    unint64_t v45 = v44 + 1;
    do
    {
      uint64_t v46 = (v45 - 2);
      long long v47 = *(void **)(*(void *)(v43 + 24) + 8 * v46);
      if (a9 && !v47[5])
      {
        unsigned int v48 = *a9;
        long long v57 = 0uLL;
        long long v58 = 0uLL;
        uint64_t v55 = v48 | 0x1F400000000;
        long long v56 = "smDrawable->layer";
        GTError_addError(a9, (uint64_t)&v55);
      }
      uint64_t v55 = v47[6];
      uint64_t v49 = *find_entry(*v34, &v55, 8uLL, 0);
      if (!v49 || !*(void *)(v49 + 32))
      {
        apr_hash_set((apr_hash_t *)*v34, v47 + 1, 8, 0);
        int v50 = *(_DWORD *)(v43 + 12);
        *(void *)(*(void *)(v43 + 24) + 8 * v46) = *(void *)(*(void *)(v43 + 24) + 8 * (v50 - 1));
        if (v50) {
          *(_DWORD *)(v43 + 12) = v50 - 1;
        }
      }
      --v45;
    }
    while (v45 > 1);
  }
  for (uint64_t i = 1; i != 36; ++i)
    qsort(*(void **)(v34[i] + 24), *(int *)(v34[i] + 12), *(int *)(v34[i] + 8), (int (__cdecl *)(const void *, const void *))GTMTLSMObject_compare);
  return v34;
}

uint64_t GTMTLSMObject_compare(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)a1 + 16);
  unint64_t v3 = *(void *)(*(void *)a2 + 16);
  BOOL v4 = v2 >= v3;
  BOOL v5 = v2 != v3;
  if (v4) {
    return v5;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

double GTMTLSMBuffer_init(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 116) = 0u;
  *(_OWORD *)(a1 + 10mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 132) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 4) = 0u;
  *(_DWORD *)a1 = 22;
  *(void *)(a1 + 24) = -1;
  *(_WORD *)(a1 + 98) = 2;
  *(void *)(a1 + 64) = -1;
  *(void *)(a1 + 112) = -1;
  return result;
}

double GTMTLSMTexture_init(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 196) = 0u;
  *(_OWORD *)(a1 + 18mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *(_OWORD *)(a1 + 164) = 0u;
  *(_OWORD *)(a1 + 148) = 0u;
  *(_OWORD *)(a1 + 132) = 0u;
  *(_OWORD *)(a1 + 116) = 0u;
  *(_OWORD *)(a1 + 10mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 4) = 0u;
  *(_DWORD *)a1 = 80;
  *(void *)(a1 + 24) = -1;
  *(_WORD *)(a1 + 98) = 2;
  *(void *)(a1 + 64) = -1;
  *(void *)(a1 + 208) = 0xFFFFFFFFLL;
  return result;
}

double GTMTLSMCounterSampleBuffer_init(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *(_DWORD *)(a1 + 52) = 0;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 4) = 0u;
  *(_DWORD *)a1 = 31;
  *(void *)(a1 + 24) = -1;
  return result;
}

double GTMTLSMDrawable_init(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *(_DWORD *)(a1 + 52) = 0;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 4) = 0u;
  *(_DWORD *)a1 = 2;
  *(void *)(a1 + 24) = -1;
  return result;
}

double GTMTLSMLayer_init(uint64_t a1)
{
  *(_DWORD *)(a1 + 276) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 244) = 0u;
  *(_OWORD *)(a1 + 228) = 0u;
  *(_OWORD *)(a1 + 212) = 0u;
  *(_OWORD *)(a1 + 196) = 0u;
  *(_OWORD *)(a1 + 18mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *(_OWORD *)(a1 + 164) = 0u;
  *(_OWORD *)(a1 + 148) = 0u;
  *(_OWORD *)(a1 + 132) = 0u;
  *(_OWORD *)(a1 + 116) = 0u;
  *(_OWORD *)(a1 + 10mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 4) = 0u;
  *(_OWORD *)(a1 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *(_OWORD *)(a1 + 26mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *(_DWORD *)a1 = 3;
  *(void *)(a1 + 24) = -1;
  return result;
}

double GTMTLSMIndirectCommandBuffer_init(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 116) = 0u;
  *(_OWORD *)(a1 + 10mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 4) = 0u;
  *(_DWORD *)a1 = 57;
  *(void *)(a1 + 24) = -1;
  *(_WORD *)(a1 + 98) = 2;
  *(void *)(a1 + 64) = -1;
  return result;
}

double GTMTLSMHeap_init(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_DWORD *)(a1 + 84) = 0;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 4) = 0u;
  *(_DWORD *)a1 = 50;
  *(void *)(a1 + 24) = -1;
  *(_WORD *)(a1 + 8mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 2;
  return result;
}

double GTMTLSMDepthStencilState_init(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *(_DWORD *)(a1 + 52) = 0;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 4) = 0u;
  *(_DWORD *)a1 = 34;
  *(void *)(a1 + 24) = -1;
  return result;
}

double GTMTLSMSamplerState_init(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_DWORD *)(a1 + 84) = 0;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 4) = 0u;
  *(_DWORD *)a1 = 75;
  *(void *)(a1 + 24) = -1;
  *(void *)(a1 + 64) = -1;
  return result;
}

double GTMTLSMEvent_init(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *(_DWORD *)(a1 + 52) = 0;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 4) = 0u;
  *(_DWORD *)a1 = 38;
  *(void *)(a1 + 24) = -1;
  return result;
}

double GTMTLSMSharedEvent_init(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 4) = 0u;
  *(_DWORD *)a1 = 76;
  *(void *)(a1 + 24) = -1;
  return result;
}

double GTMTLSMLateEvalEvent_init(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 4) = 0u;
  *(_DWORD *)a1 = 61;
  *(void *)(a1 + 24) = -1;
  return result;
}

double GTMTLSMFence_init(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *(_DWORD *)(a1 + 52) = 0;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 4) = 0u;
  *(_DWORD *)a1 = 41;
  *(void *)(a1 + 24) = -1;
  return result;
}

double GTMTLSMRenderPipelineState_init(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 40mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *(_OWORD *)(a1 + 244) = 0u;
  *(_OWORD *)(a1 + 228) = 0u;
  *(_OWORD *)(a1 + 212) = 0u;
  *(_OWORD *)(a1 + 196) = 0u;
  *(_OWORD *)(a1 + 18mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *(_OWORD *)(a1 + 164) = 0u;
  *(_OWORD *)(a1 + 148) = 0u;
  *(_OWORD *)(a1 + 132) = 0u;
  *(_OWORD *)(a1 + 116) = 0u;
  *(_OWORD *)(a1 + 10mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *(_OWORD *)(a1 + 4) = 0u;
  *(_OWORD *)(a1 + 372) = 0u;
  *(_OWORD *)(a1 + 388) = 0u;
  *(_OWORD *)(a1 + 34mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *(_OWORD *)(a1 + 356) = 0u;
  *(_OWORD *)(a1 + 308) = 0u;
  *(_OWORD *)(a1 + 324) = 0u;
  *(_OWORD *)(a1 + 276) = 0u;
  *(_OWORD *)(a1 + 292) = 0u;
  *(_OWORD *)(a1 + 26mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *(_DWORD *)a1 = 71;
  *(void *)(a1 + 24) = -1;
  *(void *)(a1 + 96) = -1;
  return result;
}

double GTMTLSMComputePipelineState_init(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *(_OWORD *)(a1 + 10mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 196) = 0;
  *(_OWORD *)(a1 + 18mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *(_OWORD *)(a1 + 164) = 0u;
  *(_OWORD *)(a1 + 148) = 0u;
  *(_OWORD *)(a1 + 132) = 0u;
  *(_OWORD *)(a1 + 116) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 4) = 0u;
  *(_DWORD *)a1 = 29;
  *(void *)(a1 + 24) = -1;
  *(void *)(a1 + 96) = -1;
  return result;
}

double GTMTLSMMotionEstimationPipelineState_init(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *(_DWORD *)(a1 + 52) = 0;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 4) = 0u;
  *(_DWORD *)a1 = 64;
  *(void *)(a1 + 24) = -1;
  return result;
}

double GTMTLSMFunction_init(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *(_DWORD *)(a1 + 132) = 0;
  *(_OWORD *)(a1 + 116) = 0u;
  *(_OWORD *)(a1 + 10mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 4) = 0u;
  *(_DWORD *)a1 = 43;
  *(void *)(a1 + 24) = -1;
  return result;
}

double GTMTLSMLibrary_init(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *(_DWORD *)(a1 + 164) = 0;
  *(_OWORD *)(a1 + 148) = 0u;
  *(_OWORD *)(a1 + 132) = 0u;
  *(_OWORD *)(a1 + 116) = 0u;
  *(_OWORD *)(a1 + 10mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 4) = 0u;
  *(_DWORD *)a1 = 62;
  *(void *)(a1 + 24) = -1;
  return result;
}

double GTMTLSMDynamicLibrary_init(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 4) = 0u;
  *(_DWORD *)a1 = 37;
  *(void *)(a1 + 24) = -1;
  return result;
}

double GTMTLSMPipelineLibrary_init(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *(_DWORD *)(a1 + 84) = 0;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 4) = 0u;
  *(_DWORD *)a1 = 67;
  *(void *)(a1 + 24) = -1;
  return result;
}

double GTMTLSMCommandQueue_init(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 4) = 0u;
  *(_DWORD *)a1 = 27;
  *(void *)(a1 + 24) = -1;
  *(unsigned char *)(a1 + 76) = 1;
  *(_WORD *)(a1 + 72) = 769;
  return result;
}

double GTMTLSMIOCommandQueue_init(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 4) = 0u;
  *(_DWORD *)a1 = 52;
  *(void *)(a1 + 24) = -1;
  return result;
}

double GTMTLSMDevice_init(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 4) = 0u;
  *(_DWORD *)a1 = 36;
  *(void *)(a1 + 24) = -1;
  return result;
}

double GTMTLSMIndirectComputeCommand_init(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *(_DWORD *)(a1 + 52) = 0;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 4) = 0u;
  *(_DWORD *)a1 = 58;
  *(void *)(a1 + 24) = -1;
  return result;
}

double GTMTLSMIndirectRenderCommand_init(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *(_DWORD *)(a1 + 52) = 0;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 4) = 0u;
  *(_DWORD *)a1 = 59;
  *(void *)(a1 + 24) = -1;
  return result;
}

double GTMTLSMRasterizationRateMap_init(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 4) = 0u;
  *(_DWORD *)a1 = 68;
  *(void *)(a1 + 24) = -1;
  return result;
}

double GTMTLSMResourceGroup_init(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 4) = 0u;
  *(_DWORD *)a1 = 73;
  *(void *)(a1 + 24) = -1;
  return result;
}

double GTMTLSMAccelerationStructure_init(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 18mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *(_OWORD *)(a1 + 164) = 0u;
  *(_OWORD *)(a1 + 148) = 0u;
  *(_OWORD *)(a1 + 132) = 0u;
  *(_OWORD *)(a1 + 116) = 0u;
  *(_OWORD *)(a1 + 10mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 4) = 0u;
  *(_DWORD *)a1 = 16;
  *(void *)(a1 + 24) = -1;
  *(_WORD *)(a1 + 98) = 2;
  *(void *)(a1 + 64) = -1;
  return result;
}

double GTMTLSMIntersectionFunctionTable_init(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_DWORD *)(a1 + 164) = 0;
  *(_OWORD *)(a1 + 148) = 0u;
  *(_OWORD *)(a1 + 132) = 0u;
  *(_OWORD *)(a1 + 116) = 0u;
  *(_OWORD *)(a1 + 10mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 4) = 0u;
  *(_DWORD *)a1 = 60;
  *(void *)(a1 + 24) = -1;
  *(_WORD *)(a1 + 98) = 2;
  *(void *)(a1 + 64) = -1;
  return result;
}

void GTMTLSMIntersectionFunctionTableStateful_init(uint64_t a1)
{
  *(_DWORD *)a1 = 60;
  *(void *)(a1 + 24) = -1;
  *(_WORD *)(a1 + 98) = 2;
  *(void *)(a1 + 64) = -1;
}

double GTMTLSMFilter_init(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *(_DWORD *)(a1 + 10mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 4) = 0u;
  *(_DWORD *)a1 = 15;
  *(void *)(a1 + 24) = -1;
  return result;
}

double GTMTLSMFunctionHandle_init(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *(_DWORD *)(a1 + 68) = 0;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 4) = 0u;
  *(_DWORD *)a1 = 44;
  *(void *)(a1 + 24) = -1;
  return result;
}

double GTMTLSMVisibleFunctionTable_init(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *(_OWORD *)(a1 + 16mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *(_OWORD *)(a1 + 148) = 0u;
  *(_OWORD *)(a1 + 132) = 0u;
  *(_OWORD *)(a1 + 116) = 0u;
  *(_OWORD *)(a1 + 10mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 4) = 0u;
  *(_DWORD *)a1 = 83;
  *(void *)(a1 + 24) = -1;
  return result;
}

double GTMTLSMVisibleFunctionTableStateful_init(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 164) = 0u;
  *(_OWORD *)(a1 + 148) = 0u;
  *(_OWORD *)(a1 + 132) = 0u;
  *(_OWORD *)(a1 + 116) = 0u;
  *(_OWORD *)(a1 + 10mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 4) = 0u;
  *(_DWORD *)a1 = 83;
  *(void *)(a1 + 24) = -1;
  *(_WORD *)(a1 + 98) = 2;
  *(void *)(a1 + 64) = -1;
  return result;
}

double GTMTLFXSMSpatialScaler_init(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *(_OWORD *)(a1 + 8mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 4) = 0u;
  *(_DWORD *)a1 = 39;
  *(void *)(a1 + 24) = -1;
  return result;
}

double GTMTLFXSMTemporalScaler_init(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *(_DWORD *)(a1 + 148) = 0;
  *(_OWORD *)(a1 + 132) = 0u;
  *(_OWORD *)(a1 + 116) = 0u;
  *(_OWORD *)(a1 + 10mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 4) = 0u;
  *(_DWORD *)a1 = 40;
  *(void *)(a1 + 24) = -1;
  return result;
}

double GTMTLSMResidencySet_init(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *(_DWORD *)(a1 + 52) = 0;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 4) = 0u;
  *(_DWORD *)a1 = 72;
  *(void *)(a1 + 24) = -1;
  return result;
}

apr_hash_t *GTMTLSMResidencySetAllocations_init(apr_hash_t **a1, apr_pool_t *pool)
{
  a1[1] = apr_hash_make(pool);
  double result = apr_hash_make(pool);
  *a1 = result;
  return result;
}

void GTMTLSMResidencySetAllocations_reset(apr_hash_t **a1)
{
  apr_hash_clear(a1[1]);
  unint64_t v2 = *a1;

  apr_hash_clear(v2);
}

double GTMTLSMIOCommandBuffer_init(_OWORD *a1)
{
  double result = 0.0;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

double GTMTLSMCommandBuffer_init(_OWORD *a1)
{
  double result = 0.0;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

void GTMTLSMCommandEncoder_init(void *a1)
{
}

BOOL GTMTLSMCommandEncoder_hasEnded(uint64_t a1, unint64_t a2)
{
  return *(void *)(a1 + 24) <= a2;
}

__n128 GTMTLSMRenderCommandEncoder_init(uint64_t a1, uint64_t a2)
{
  bzero((void *)(a1 + 8), 0x2B50uLL);
  *(void *)a1 = a2;
  memset_pattern16((void *)(a1 + 10100), &unk_1DA2C0, 0x40uLL);
  memset_pattern16((void *)(a1 + 10228), &unk_1DA2C0, 0x40uLL);
  memset_pattern16((void *)(a1 + 10612), &unk_1DA2C0, 0x40uLL);
  *(void *)(a1 + 10676) = 0x3F8000003F800000;
  *(void *)(a1 + 11068) = 0x100000001;
  memset_pattern16((void *)(a1 + 9872), &unk_1DA2D0, 0x40uLL);
  *(void *)(a1 + 76mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = -1;
  result.n128_u64[0] = -1;
  result.n128_u64[1] = -1;
  *(__n128 *)(a1 + 728) = result;
  *(__n128 *)(a1 + 744) = result;
  *(__n128 *)(a1 + 696) = result;
  *(__n128 *)(a1 + 712) = result;
  *(__n128 *)(a1 + 664) = result;
  *(__n128 *)(a1 + 68mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = result;
  *(__n128 *)(a1 + 632) = result;
  *(__n128 *)(a1 + 648) = result;
  *(__n128 *)(a1 + 60mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = result;
  *(__n128 *)(a1 + 616) = result;
  *(__n128 *)(a1 + 568) = result;
  *(__n128 *)(a1 + 584) = result;
  *(__n128 *)(a1 + 536) = result;
  *(__n128 *)(a1 + 552) = result;
  *(__n128 *)(a1 + 52mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = result;
  *(_WORD *)(a1 + 11086) = 1028;
  return result;
}

__n128 GTMTLSMComputeCommandEncoder_init(__n128 *a1)
{
  bzero(a1, 0x888uLL);
  memset_pattern16(&a1[136].n128_i8[8], &unk_1DA2C0, 0x100uLL);
  a1[48].n128_u64[0] = -1;
  result.n128_u64[0] = -1;
  result.n128_u64[1] = -1;
  a1[46] = result;
  a1[47] = result;
  a1[44] = result;
  a1[45] = result;
  a1[42] = result;
  a1[43] = result;
  a1[40] = result;
  a1[41] = result;
  a1[38] = result;
  a1[39] = result;
  a1[36] = result;
  a1[37] = result;
  a1[34] = result;
  a1[35] = result;
  a1[33] = result;
  a1[140].n128_u8[8] = -1;
  return result;
}

void GTMTLSMParallelCommandEncoder_init(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 12mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)a1 = a2;
  memset_pattern16((void *)(a1 + 8), &unk_1DA2D0, 0x40uLL);
  *(_WORD *)(a1 + 136) = 1028;
}

double GTMTLSMCommandEncoder_renderCommandEncoder(uint64_t a1, unint64_t a2, unint64_t a3)
{
  *(void *)(a1 + 8552) = 1;
  *(double *)(a1 + 8576) = (double)a2;
  double result = (double)a3;
  *(double *)(a1 + 8584) = (double)a3;
  *(void *)(a1 + 860mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0x3FF0000000000000;
  *(void *)(a1 + 9328) = 1;
  *(void *)(a1 + 9352) = a2;
  *(void *)(a1 + 936mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = a3;
  return result;
}

uint64_t GTMTLSMCommandEncoder_renderPassDescriptor(uint64_t a1)
{
  if (*(_DWORD *)a1 == 70 || *(_DWORD *)a1 == 65) {
    return *(void *)(a1 + 56);
  }
  else {
    return 0;
  }
}

uint64_t GTMTLSMRenderCommandEncoder_loadIndirectCommand(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a3 + a2[1]);
  if (!v4) {
    return 0;
  }
  uint64_t v9 = (unsigned char *)*a2;
  if (*(unsigned char *)(*a2 + 11)
    || (uint64_t result = GTMTLIndirectResources_renderPipelineIdForUniqueIdentifier(a4, *(void *)(a3 + a2[2])),
        (*(void *)(a1 + 8544) = result) != 0))
  {
    if (!v9[10])
    {
      unsigned int v11 = v9[18];
      if (v11 >= 0x40) {
        char v12 = 64;
      }
      else {
        char v12 = v9[18];
      }
      *(void *)(a1 + 8) &= -1 << v12;
      if (v11)
      {
        unint64_t v13 = 0;
        uint64_t v14 = a3 + a2[3];
        do
        {
          unint64_t v15 = *(void *)(v14 + 8 * v13);
          long long v16 = GTMTLGPUAddressResource_resourceForGPUAddress(*(void **)(*(void *)a4 + 24), *(int *)(*(void *)a4 + 12), v15);
          if (v16)
          {
            unint64_t v17 = v15 - *v16;
            uint64_t v18 = v16[2];
          }
          else
          {
            unint64_t v17 = 0;
            uint64_t v18 = 0;
          }
          uint64_t v19 = a1 + 8 * v13;
          *(void *)(v19 + 24) = v18;
          *(void *)(v19 + 272) = v17;
          ++v13;
        }
        while (v13 < v9[18]);
      }
      unsigned int v20 = v9[12];
      if (v20 >= 0x40) {
        char v21 = 64;
      }
      else {
        char v21 = v9[12];
      }
      *(void *)(a1 + 1920) &= -1 << v21;
      if (v20)
      {
        unint64_t v22 = 0;
        uint64_t v23 = a3 + a2[4];
        do
        {
          unint64_t v24 = *(void *)(v23 + 8 * v22);
          int v25 = GTMTLGPUAddressResource_resourceForGPUAddress(*(void **)(*(void *)a4 + 24), *(int *)(*(void *)a4 + 12), v24);
          if (v25)
          {
            unint64_t v26 = v24 - *v25;
            uint64_t v27 = v25[2];
          }
          else
          {
            unint64_t v26 = 0;
            uint64_t v27 = 0;
          }
          uint64_t v28 = a1 + 8 * v22;
          *(void *)(v28 + 1928) = v27;
          *(void *)(v28 + 2176) = v26;
          ++v22;
        }
        while (v22 < v9[12]);
      }
      unsigned int v29 = v9[16];
      if (v29 >= 0x40) {
        char v30 = 64;
      }
      else {
        char v30 = v9[16];
      }
      *(void *)(a1 + 3576) &= -1 << v30;
      if (v29)
      {
        unint64_t v31 = 0;
        uint64_t v32 = a3 + a2[5];
        do
        {
          unint64_t v33 = *(void *)(v32 + 8 * v31);
          long long v34 = GTMTLGPUAddressResource_resourceForGPUAddress(*(void **)(*(void *)a4 + 24), *(int *)(*(void *)a4 + 12), v33);
          if (v34)
          {
            unint64_t v35 = v33 - *v34;
            uint64_t v36 = v34[2];
          }
          else
          {
            unint64_t v35 = 0;
            uint64_t v36 = 0;
          }
          uint64_t v37 = a1 + 8 * v31;
          *(void *)(v37 + 3584) = v36;
          *(void *)(v37 + 3832) = v35;
          ++v31;
        }
        while (v31 < v9[16]);
      }
      unsigned int v38 = v9[15];
      if (v38 >= 0x40) {
        char v39 = 64;
      }
      else {
        char v39 = v9[15];
      }
      *(void *)(a1 + 5232) &= -1 << v39;
      if (v38)
      {
        long long v40 = (unint64_t *)(a3 + a2[6]);
        unsigned int v41 = (unint64_t *)(a1 + 5488);
        uint64_t v42 = 655;
        do
        {
          unint64_t v44 = *v40++;
          unint64_t v43 = v44;
          unint64_t v45 = GTMTLGPUAddressResource_resourceForGPUAddress(*(void **)(*(void *)a4 + 24), *(int *)(*(void *)a4 + 12), v44);
          if (v45)
          {
            unint64_t v46 = v43 - *v45;
            unint64_t v47 = v45[2];
          }
          else
          {
            unint64_t v46 = 0;
            unint64_t v47 = 0;
          }
          *(v41 - 31) = v47;
          *v41++ = v46;
          unint64_t v48 = v42 - 654;
          ++v42;
        }
        while (v48 < v9[15]);
      }
    }
    uint64_t v49 = v9[17];
    if (v9[17])
    {
      int v50 = (uint64_t *)(a3 + a2[8]);
      long long v51 = (_DWORD *)(a1 + 10944);
      do
      {
        uint64_t v52 = *v50++;
        *v51++ = v52;
        --v49;
      }
      while (v49);
    }
    if (v9[19])
    {
      uint64_t v53 = v9[18];
      char v54 = v53 >= 0x40 ? 64 : v9[18];
      *(void *)(a1 + 16) |= ~(-1 << v54);
      if (v53)
      {
        uint64_t v55 = (uint64_t *)(a3 + a2[10]);
        long long v56 = (void *)(a1 + 520);
        do
        {
          uint64_t v57 = *v55++;
          *v56++ = v57;
          --v53;
        }
        while (v53);
      }
    }
    if (v4 == 8 || v4 == 4)
    {
      uint64_t v58 = a3 + a2[12];
      uint64_t v59 = *(void **)(*(void *)a4 + 24);
      unint64_t v60 = *(int *)(*(void *)a4 + 12);
      unint64_t v61 = *(void *)v58;
      long long v62 = GTMTLGPUAddressResource_resourceForGPUAddress(v59, v60, *(void *)v58);
      if (v62)
      {
        int v63 = v61 - *(_DWORD *)v62;
        uint64_t v64 = v62[2];
      }
      else
      {
        int v63 = 0;
        uint64_t v64 = 0;
      }
      *(void *)(a1 + 9864) = v64;
      *(_DWORD *)(a1 + 10688) = v63;
      *(_DWORD *)(a1 + 10692) = *(void *)(v58 + 8);
      *(_DWORD *)(a1 + 10676) = *(_DWORD *)(v58 + 16);
      return v4 != 8 || v64 != 0;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t GTMTLSMComputeCommandEncoder_loadIndirectCommand(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a3 + a2[1]);
  if (!v4) {
    return 0;
  }
  uint64_t v9 = (unsigned char *)*a2;
  if (*(unsigned char *)(*a2 + 11)
    || (uint64_t result = GTMTLIndirectResources_computePipelineIdForUniqueIdentifier(a4, *(void *)(a3 + a2[2])),
        (*(void *)(a1 + 8) = result) != 0))
  {
    if (!v9[10])
    {
      unsigned int v11 = v9[13];
      char v12 = v11 >= 0x40 ? 64 : v9[13];
      *(void *)(a1 + 16) &= -1 << v12;
      if (v11)
      {
        unint64_t v13 = 0;
        uint64_t v14 = a3 + a2[7];
        do
        {
          unint64_t v15 = *(void *)(v14 + 8 * v13);
          long long v16 = GTMTLGPUAddressResource_resourceForGPUAddress(*(void **)(*(void *)a4 + 24), *(int *)(*(void *)a4 + 12), v15);
          if (v16)
          {
            unint64_t v17 = v15 - *v16;
            uint64_t v18 = v16[2];
          }
          else
          {
            unint64_t v17 = 0;
            uint64_t v18 = 0;
          }
          uint64_t v19 = a1 + 8 * v13;
          *(void *)(v19 + 32) = v18;
          *(void *)(v19 + 28mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v17;
          ++v13;
        }
        while (v13 < v9[13]);
      }
    }
    if (v9[19])
    {
      uint64_t v20 = v9[13];
      char v21 = v20 >= 0x40 ? 64 : v9[13];
      *(void *)(a1 + 24) |= ~(-1 << v21);
      if (v20)
      {
        unint64_t v22 = (uint64_t *)(a3 + a2[10]);
        uint64_t v23 = (void *)(a1 + 528);
        do
        {
          uint64_t v24 = *v22++;
          *v23++ = v24;
          --v20;
        }
        while (v20);
      }
    }
    uint64_t v25 = v9[14];
    if (v9[14])
    {
      unint64_t v26 = (uint64_t *)(a3 + a2[9]);
      uint64_t v27 = (_DWORD *)(a1 + 1984);
      do
      {
        uint64_t v28 = *v26++;
        *v27++ = v28;
        --v25;
      }
      while (v25);
    }
    if (v4 == 32 || v4 == 64)
    {
      unsigned int v29 = (long long *)(a3 + a2[12]);
      long long v30 = *v29;
      *(void *)(a1 + 1944) = *((void *)v29 + 2);
      *(_OWORD *)(a1 + 1928) = v30;
      long long v31 = *(long long *)((char *)v29 + 24);
      *(void *)(a1 + 1968) = *((void *)v29 + 5);
      *(_OWORD *)(a1 + 1952) = v31;
    }
    return 1;
  }
  return result;
}

char *GTMTLSMBuffer_processTraceFuncWithMap(char *result, uint64_t a2, uint64_t *a3)
{
  BOOL v5 = result;
  int v6 = *((_DWORD *)a3 + 2);
  if (v6 <= -15779)
  {
    if (v6 <= -16313)
    {
      switch(v6)
      {
        case -16372:
          uint64_t v7 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v7[8], a2);
          *((void *)v5 + 9) = result;
          break;
        case -16371:
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          *((_DWORD *)v5 + 22) = *((_DWORD *)result + 2);
          break;
        case -16370:
          *((void *)result + 3) = *a3;
          break;
        case -16369:
        case -16368:
          return result;
        case -16367:
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t v28 = *((void *)result + 2);
          if (v28 != 1) {
            *((_WORD *)v5 + 49) = v28;
          }
          break;
        default:
          if (v6 == -16314 || v6 == -16313) {
            goto LABEL_35;
          }
          break;
      }
      return result;
    }
    if (v6 > -16123)
    {
      switch(v6)
      {
        case -16122:
          result[100] = 1;
          break;
        case -16117:
          unsigned int v29 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t v30 = *a3;
          uint64_t v31 = *((void *)v29 + 2);
          *((void *)v5 + 1) = *((void *)v29 + 1);
          *((void *)v5 + 2) = v30;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          *((_WORD *)v5 + 48) = *((void *)v29 + 3);
          *((void *)v5 + 13) = v31;
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((void *)v5 + 19) = result;
          if (result)
          {
            uint64_t v32 = *((void *)result + 1);
            *((void *)v5 + 7) = *(void *)result;
            int v33 = *((_DWORD *)result + 4);
            *((_DWORD *)v5 + 21) = v32;
            *((_DWORD *)v5 + 22) = v33;
            *((void *)v5 + 14) = *((void *)result + 3);
            *((_OWORD *)v5 + 8) = *((_OWORD *)result + 2);
          }
          *((void *)v5 + 6) = *(void *)v29;
          break;
        case -15914:
          unint64_t v8 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t v9 = *a3;
          uint64_t v10 = *(void *)v8;
          *((void *)v5 + 1) = *((void *)v8 + 1);
          *((void *)v5 + 2) = v9;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          *((void *)v5 + 5) = *((void *)v8 + 2);
          *((void *)v5 + 15) = v10;
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          uint64_t v11 = *((void *)result + 3);
          *((void *)v5 + 13) = *((void *)result + 2);
          *((_WORD *)v5 + 48) = v11;
          break;
      }
      return result;
    }
    if (v6 != -16312)
    {
      if (v6 != -16163) {
        return result;
      }
      uint64_t v18 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      uint64_t v19 = *a3;
      *((void *)v5 + 1) = *((void *)v18 + 1);
      *((void *)v5 + 2) = v19;
      *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
      uint64_t v20 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
      *((void *)v5 + 19) = v20;
      if (v20)
      {
        uint64_t v21 = *((void *)v20 + 1);
        *((void *)v5 + 7) = *(void *)v20;
        int v22 = *((_DWORD *)v20 + 4);
        *((_DWORD *)v5 + 21) = v21;
        *((_DWORD *)v5 + 22) = v22;
        *((void *)v5 + 14) = *((void *)v20 + 3);
        *((_OWORD *)v5 + 8) = *((_OWORD *)v20 + 2);
      }
      uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v18[16], a2);
      *((void *)v5 + 18) = result;
      if (result) {
        uint64_t v23 = *((void *)result + 1);
      }
      else {
        uint64_t v23 = 0;
      }
      *((void *)v5 + 13) = v23;
      goto LABEL_58;
    }
LABEL_35:
    uint64_t v18 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
    uint64_t v24 = *a3;
    uint64_t v25 = *((void *)v18 + 2);
    *((void *)v5 + 1) = *((void *)v18 + 1);
    *((void *)v5 + 2) = v24;
    *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
    *((_WORD *)v5 + 48) = *((void *)v18 + 3);
    *((void *)v5 + 13) = v25;
    uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
    *((void *)v5 + 19) = result;
    if (result)
    {
      uint64_t v26 = *((void *)result + 1);
      *((void *)v5 + 7) = *(void *)result;
      int v27 = *((_DWORD *)result + 4);
      *((_DWORD *)v5 + 21) = v26;
      *((_DWORD *)v5 + 22) = v27;
      *((void *)v5 + 14) = *((void *)result + 3);
      *((_OWORD *)v5 + 8) = *((_OWORD *)result + 2);
    }
LABEL_58:
    *((void *)v5 + 5) = *(void *)v18;
    return result;
  }
  if (v6 > -10224)
  {
    if (v6 <= -10204)
    {
      if (v6 == -10223)
      {
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        *((_DWORD *)v5 + 21) = *((void *)result + 1);
      }
      else if (v6 == -10210)
      {
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        *((void *)v5 + 8) = *((void *)result + 1);
      }
      return result;
    }
    if (v6 == -10203)
    {
      uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      *((void *)v5 + 7) = *((void *)result + 1);
      return result;
    }
    if (v6 != -10187)
    {
      if (v6 != -10186) {
        return result;
      }
      uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      long long v12 = *(_OWORD *)(result + 8);
      goto LABEL_28;
    }
    uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
    uint64_t v34 = *((void *)result + 1);
LABEL_54:
    *((_DWORD *)v5 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v34;
    return result;
  }
  if (v6 <= -10238)
  {
    if (v6 != -15778)
    {
      if (v6 != -15509) {
        return result;
      }
      unint64_t v13 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      uint64_t v14 = *a3;
      *((void *)v5 + 1) = *((void *)v13 + 1);
      *((void *)v5 + 2) = v14;
      *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
      unint64_t v15 = GTTraceFunc_argumentBytesWithMap(a3, v13[16], a2);
      *((_WORD *)v5 + 48) = *((_WORD *)v15 + 16);
      *((void *)v5 + 13) = *(void *)v15;
      uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
      *((void *)v5 + 19) = result;
      if (!result) {
        return result;
      }
      uint64_t v16 = *((void *)result + 1);
      *((void *)v5 + 7) = *(void *)result;
      int v17 = *((_DWORD *)result + 4);
      *((_DWORD *)v5 + 21) = v16;
      *((_DWORD *)v5 + 22) = v17;
      *((void *)v5 + 14) = *((void *)result + 3);
      long long v12 = *((_OWORD *)result + 2);
LABEL_28:
      *((_OWORD *)v5 + 8) = v12;
      return result;
    }
    unint64_t v35 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
    uint64_t v36 = *a3;
    uint64_t v37 = *((void *)v35 + 2);
    *((void *)v5 + 1) = *((void *)v35 + 1);
    *((void *)v5 + 2) = v36;
    *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
    *((_WORD *)v5 + 48) = *((void *)v35 + 3);
    *((void *)v5 + 13) = v37;
    uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
    *((void *)v5 + 19) = result;
    if (result)
    {
      uint64_t v38 = *((void *)result + 1);
      *((void *)v5 + 7) = *(void *)result;
      int v39 = *((_DWORD *)result + 4);
      *((_DWORD *)v5 + 21) = v38;
      *((_DWORD *)v5 + 22) = v39;
      *((void *)v5 + 14) = *((void *)result + 3);
      *((_OWORD *)v5 + 8) = *((_OWORD *)result + 2);
    }
    *((void *)v5 + 6) = *(void *)v35;
    uint64_t v34 = *((void *)v35 + 4);
    goto LABEL_54;
  }
  switch(v6)
  {
    case -10237:
      goto LABEL_35;
    case -10235:
      uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      *((_DWORD *)v5 + 23) = *((_DWORD *)result + 2);
      break;
    case -10228:
      uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      *((void *)v5 + 14) = *((void *)result + 1);
      break;
  }
  return result;
}

char *GTMTLSMTexture_processTraceFuncWithMap(char *result, uint64_t a2, uint64_t *a3)
{
  BOOL v5 = result;
  int v6 = *((_DWORD *)a3 + 2);
  if (v6 > -15914)
  {
    if (v6 <= -10228)
    {
      if (v6 > -15690)
      {
        if (v6 > -10235)
        {
          if (v6 == -10234)
          {
            uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
            *((_DWORD *)v5 + 23) = *((_DWORD *)result + 2);
          }
          else if (v6 == -10231)
          {
            long long v69 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
            uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v69[8], a2);
            *((void *)v5 + 14) = result;
          }
          return result;
        }
        if (v6 == -15689)
        {
          uint64_t v36 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t v103 = *a3;
          *((void *)v5 + 1) = *((void *)v36 + 1);
          *((void *)v5 + 2) = v103;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((void *)v5 + 16) = result;
          if (result)
          {
            uint64_t v104 = *((void *)result + 1);
            *((void *)v5 + 7) = *(void *)result;
            int v105 = *((_DWORD *)result + 4);
            *((_DWORD *)v5 + 21) = v104;
            *((_DWORD *)v5 + 22) = v105;
            uint64_t v107 = *((void *)result + 6);
            uint64_t v106 = *((void *)result + 7);
            *((void *)v5 + 21) = *((void *)result + 5);
            *((void *)v5 + 22) = v106;
            *((_WORD *)v5 + 106) = *((_WORD *)result + 40);
            *((void *)v5 + 14) = result + 24;
            *((void *)v5 + 25) = v107;
          }
          *((_WORD *)v5 + 76) = *((void *)v36 + 2);
          v5[158] = *((void *)v36 + 3);
          v5[159] = *((void *)v36 + 4);
          v5[160] = *((void *)v36 + 5);
          *((_WORD *)v5 + 77) = *((void *)v36 + 6);
          *((_WORD *)v5 + 78) = *((void *)v36 + 7);
        }
        else
        {
          if (v6 != -15688) {
            return result;
          }
          uint64_t v36 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t v37 = *a3;
          *((void *)v5 + 1) = *((void *)v36 + 1);
          *((void *)v5 + 2) = v37;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((void *)v5 + 16) = result;
          if (result)
          {
            uint64_t v38 = *((void *)result + 1);
            *((void *)v5 + 7) = *(void *)result;
            int v39 = *((_DWORD *)result + 4);
            *((_DWORD *)v5 + 21) = v38;
            *((_DWORD *)v5 + 22) = v39;
            uint64_t v41 = *((void *)result + 6);
            uint64_t v40 = *((void *)result + 7);
            *((void *)v5 + 21) = *((void *)result + 5);
            *((void *)v5 + 22) = v40;
            *((_WORD *)v5 + 106) = *((_WORD *)result + 40);
            *((void *)v5 + 14) = result + 24;
            *((void *)v5 + 25) = v41;
          }
          *((_WORD *)v5 + 76) = *((void *)v36 + 2);
          v5[158] = *((void *)v36 + 3);
          v5[159] = *((void *)v36 + 4);
          v5[160] = *((void *)v36 + 5);
          *((_WORD *)v5 + 77) = *((void *)v36 + 6);
          *((_WORD *)v5 + 78) = *((void *)v36 + 7);
          *((_DWORD *)v5 + 52) = *((_DWORD *)v36 + 18);
        }
        *((void *)v5 + 18) = *(void *)v36;
        uint64_t v56 = *((void *)v36 + 8);
      }
      else
      {
        if (v6 <= -15776)
        {
          if (v6 == -15913)
          {
            char v90 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
            uint64_t v91 = *a3;
            *((void *)v5 + 1) = *((void *)v90 + 1);
            *((void *)v5 + 2) = v91;
            *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
            unint64_t v92 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
            *((void *)v5 + 16) = v92;
            if (v92)
            {
              uint64_t v93 = *((void *)v92 + 1);
              *((void *)v5 + 7) = *(void *)v92;
              int v94 = *((_DWORD *)v92 + 4);
              *((_DWORD *)v5 + 21) = v93;
              *((_DWORD *)v5 + 22) = v94;
              uint64_t v96 = *((void *)v92 + 6);
              uint64_t v95 = *((void *)v92 + 7);
              *((void *)v5 + 21) = *((void *)v92 + 5);
              *((void *)v5 + 22) = v95;
              *((_WORD *)v5 + 106) = *((_WORD *)v92 + 40);
              *((void *)v5 + 14) = v92 + 24;
              *((void *)v5 + 25) = v96;
            }
            *((void *)v5 + 5) = *((void *)v90 + 2);
            *((void *)v5 + 23) = *(void *)v90;
            long long v97 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
            uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v97[24], a2);
            *((void *)v5 + 13) = result;
            return result;
          }
          if (v6 != -15777) {
            return result;
          }
          uint64_t v21 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t v22 = *a3;
          *((void *)v5 + 1) = *((void *)v21 + 1);
          *((void *)v5 + 2) = v22;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          uint64_t v23 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((void *)v5 + 16) = v23;
          if (v23)
          {
            uint64_t v24 = *((void *)v23 + 1);
            *((void *)v5 + 7) = *(void *)v23;
            int v25 = *((_DWORD *)v23 + 4);
            *((_DWORD *)v5 + 21) = v24;
            *((_DWORD *)v5 + 22) = v25;
            uint64_t v27 = *((void *)v23 + 6);
            uint64_t v26 = *((void *)v23 + 7);
            *((void *)v5 + 21) = *((void *)v23 + 5);
            *((void *)v5 + 22) = v26;
            *((_WORD *)v5 + 106) = *((_WORD *)v23 + 40);
            *((void *)v5 + 14) = v23 + 24;
            *((void *)v5 + 25) = v27;
          }
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v21[24], a2);
          *((void *)v5 + 13) = result;
          *((void *)v5 + 6) = *(void *)v21;
          uint64_t v28 = *((void *)v21 + 2);
LABEL_91:
          *((_DWORD *)v5 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v28;
          return result;
        }
        if (v6 == -15775)
        {
          long long v70 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t v121 = *a3;
          *((void *)v5 + 1) = *((void *)v70 + 1);
          *((void *)v5 + 2) = v121;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((void *)v5 + 16) = result;
          if (result)
          {
            uint64_t v122 = *((void *)result + 1);
            *((void *)v5 + 7) = *(void *)result;
            int v123 = *((_DWORD *)result + 4);
            *((_DWORD *)v5 + 21) = v122;
            *((_DWORD *)v5 + 22) = v123;
            uint64_t v125 = *((void *)result + 6);
            uint64_t v124 = *((void *)result + 7);
            *((void *)v5 + 21) = *((void *)result + 5);
            *((void *)v5 + 22) = v124;
            *((_WORD *)v5 + 106) = *((_WORD *)result + 40);
            *((void *)v5 + 14) = result + 24;
            *((void *)v5 + 25) = v125;
          }
          *((_WORD *)v5 + 76) = *((void *)v70 + 2);
          v5[158] = *((void *)v70 + 3);
          v5[159] = *((void *)v70 + 4);
          v5[160] = *((void *)v70 + 5);
          *((_WORD *)v5 + 77) = *((void *)v70 + 6);
          *((_WORD *)v5 + 78) = *((void *)v70 + 7);
          *((_DWORD *)v5 + 52) = *((_DWORD *)v70 + 16);
          goto LABEL_117;
        }
        if (v6 != -15690) {
          return result;
        }
        uint64_t v57 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        uint64_t v58 = *a3;
        *((void *)v5 + 1) = *((void *)v57 + 1);
        *((void *)v5 + 2) = v58;
        *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
        *((void *)v5 + 16) = result;
        if (result)
        {
          uint64_t v59 = *((void *)result + 1);
          *((void *)v5 + 7) = *(void *)result;
          int v60 = *((_DWORD *)result + 4);
          *((_DWORD *)v5 + 21) = v59;
          *((_DWORD *)v5 + 22) = v60;
          uint64_t v61 = *((void *)result + 6);
          *((void *)v5 + 21) = *((void *)result + 5);
          *((_WORD *)v5 + 106) = *((_WORD *)result + 40);
          *((void *)v5 + 14) = result + 24;
          *((void *)v5 + 25) = v61;
        }
        *((_WORD *)v5 + 76) = *((void *)v57 + 2);
        *((void *)v5 + 18) = *(void *)v57;
        uint64_t v56 = *((void *)v57 + 3);
      }
    }
    else
    {
      if (v6 <= -10205)
      {
        if (v6 > -10213)
        {
          if (v6 == -10212)
          {
            uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
            *((void *)v5 + 8) = *((void *)result + 1);
          }
          else if (v6 == -10205)
          {
            uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
            *((_WORD *)v5 + 106) = *((_DWORD *)result + 2);
          }
        }
        else if (v6 == -10227)
        {
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          *((void *)v5 + 21) = *((void *)result + 1);
        }
        else if (v6 == -10222)
        {
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          *((_DWORD *)v5 + 21) = *((_DWORD *)result + 2);
        }
        return result;
      }
      if (v6 > -10186)
      {
        if (v6 != -10185)
        {
          if (v6 == -10164)
          {
            uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
            *((void *)v5 + 25) = *((void *)result + 1);
          }
          else if (v6 == -7167)
          {
            uint64_t v14 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
            uint64_t v15 = *a3;
            *((void *)v5 + 1) = *((void *)v14 + 1);
            *((void *)v5 + 2) = v15;
            *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
            uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
            *((void *)v5 + 16) = result;
            if (result)
            {
              uint64_t v16 = *((void *)result + 1);
              *((void *)v5 + 7) = *(void *)result;
              int v17 = *((_DWORD *)result + 4);
              *((_DWORD *)v5 + 21) = v16;
              *((_DWORD *)v5 + 22) = v17;
              uint64_t v19 = *((void *)result + 6);
              uint64_t v18 = *((void *)result + 7);
              *((void *)v5 + 21) = *((void *)result + 5);
              *((void *)v5 + 22) = v18;
              *((_WORD *)v5 + 106) = *((_WORD *)result + 40);
              *((void *)v5 + 14) = result + 24;
              *((void *)v5 + 25) = v19;
            }
            *((void *)v5 + 24) = *(void *)v14;
          }
          return result;
        }
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        uint64_t v28 = *((void *)result + 1);
        goto LABEL_91;
      }
      if (v6 == -10204)
      {
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        *((void *)v5 + 7) = *((void *)result + 1);
        return result;
      }
      if (v6 != -10198) {
        return result;
      }
      uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      uint64_t v56 = *((void *)result + 1);
    }
    *((void *)v5 + 22) = v56;
    return result;
  }
  if (v6 <= -16197)
  {
    if (v6 > -16241)
    {
      switch(v6)
      {
        case -16240:
          uint64_t v20 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v20[8], a2);
          *((void *)v5 + 9) = result;
          break;
        case -16239:
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          *((_DWORD *)v5 + 22) = *((_DWORD *)result + 2);
          break;
        case -16238:
          *((void *)result + 3) = *a3;
          break;
        case -16233:
          long long v70 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t v71 = *a3;
          *((void *)v5 + 1) = *((void *)v70 + 1);
          *((void *)v5 + 2) = v71;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((void *)v5 + 16) = result;
          if (result)
          {
            uint64_t v72 = *((void *)result + 1);
            *((void *)v5 + 7) = *(void *)result;
            int v73 = *((_DWORD *)result + 4);
            *((_DWORD *)v5 + 21) = v72;
            *((_DWORD *)v5 + 22) = v73;
            uint64_t v75 = *((void *)result + 6);
            uint64_t v74 = *((void *)result + 7);
            *((void *)v5 + 21) = *((void *)result + 5);
            *((void *)v5 + 22) = v74;
            *((_WORD *)v5 + 106) = *((_WORD *)result + 40);
            *((void *)v5 + 14) = result + 24;
            *((void *)v5 + 25) = v75;
          }
          *((_WORD *)v5 + 76) = *((void *)v70 + 2);
          goto LABEL_117;
        case -16232:
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t v76 = *((void *)result + 2);
          if (v76 != 1) {
            *((_WORD *)v5 + 49) = v76;
          }
          break;
        default:
          return result;
      }
      return result;
    }
    if (v6 != -16368)
    {
      if (v6 != -16310)
      {
        if (v6 != -16294) {
          return result;
        }
        uint64_t v42 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        uint64_t v43 = *a3;
        *((void *)v5 + 1) = *((void *)v42 + 1);
        *((void *)v5 + 2) = v43;
        *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
        unint64_t v44 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
        *((void *)v5 + 16) = v44;
        if (v44)
        {
          uint64_t v45 = *((void *)v44 + 1);
          *((void *)v5 + 7) = *(void *)v44;
          int v46 = *((_DWORD *)v44 + 4);
          *((_DWORD *)v5 + 21) = v45;
          *((_DWORD *)v5 + 22) = v46;
          uint64_t v48 = *((void *)v44 + 6);
          uint64_t v47 = *((void *)v44 + 7);
          *((void *)v5 + 21) = *((void *)v44 + 5);
          *((void *)v5 + 22) = v47;
          *((_WORD *)v5 + 106) = *((_WORD *)v44 + 40);
          *((void *)v5 + 14) = v44 + 24;
          *((void *)v5 + 25) = v48;
        }
        *((void *)v5 + 13) = GTTraceFunc_argumentBytesWithMap(a3, v42[24], a2);
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v42[25], a2);
        *((void *)v5 + 15) = result;
        *((void *)v5 + 19) = *((void *)v42 + 2);
        goto LABEL_109;
      }
      uint64_t v42 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      uint64_t v108 = *a3;
      *((void *)v5 + 1) = *((void *)v42 + 1);
      *((void *)v5 + 2) = v108;
      *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
      id v109 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
      *((void *)v5 + 16) = v109;
      if (v109)
      {
        uint64_t v110 = *((void *)v109 + 1);
        *((void *)v5 + 7) = *(void *)v109;
        int v111 = *((_DWORD *)v109 + 4);
        *((_DWORD *)v5 + 21) = v110;
        *((_DWORD *)v5 + 22) = v111;
        uint64_t v113 = *((void *)v109 + 6);
        uint64_t v112 = *((void *)v109 + 7);
        *((void *)v5 + 21) = *((void *)v109 + 5);
        *((void *)v5 + 22) = v112;
        *((_WORD *)v5 + 106) = *((_WORD *)v109 + 40);
        *((void *)v5 + 14) = v109 + 24;
        *((void *)v5 + 25) = v113;
      }
      unsigned int v55 = v42[24];
      goto LABEL_108;
    }
    goto LABEL_67;
  }
  if (v6 <= -16099)
  {
    if (v6 <= -16115)
    {
      if (v6 != -16196)
      {
        if (v6 == -16116)
        {
          unsigned int v29 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t v30 = *a3;
          *((void *)v5 + 1) = *((void *)v29 + 1);
          *((void *)v5 + 2) = v30;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          uint64_t v31 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((void *)v5 + 16) = v31;
          if (v31)
          {
            uint64_t v32 = *((void *)v31 + 1);
            *((void *)v5 + 7) = *(void *)v31;
            int v33 = *((_DWORD *)v31 + 4);
            *((_DWORD *)v5 + 21) = v32;
            *((_DWORD *)v5 + 22) = v33;
            uint64_t v35 = *((void *)v31 + 6);
            uint64_t v34 = *((void *)v31 + 7);
            *((void *)v5 + 21) = *((void *)v31 + 5);
            *((void *)v5 + 22) = v34;
            *((_WORD *)v5 + 106) = *((_WORD *)v31 + 40);
            *((void *)v5 + 14) = v31 + 24;
            *((void *)v5 + 25) = v35;
          }
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v29[16], a2);
          *((void *)v5 + 13) = result;
          *((void *)v5 + 6) = *(void *)v29;
        }
        return result;
      }
      long long v70 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      uint64_t v98 = *a3;
      *((void *)v5 + 1) = *((void *)v70 + 1);
      *((void *)v5 + 2) = v98;
      *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
      uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
      *((void *)v5 + 16) = result;
      if (result)
      {
        uint64_t v99 = *((void *)result + 1);
        *((void *)v5 + 7) = *(void *)result;
        int v100 = *((_DWORD *)result + 4);
        *((_DWORD *)v5 + 21) = v99;
        *((_DWORD *)v5 + 22) = v100;
        uint64_t v102 = *((void *)result + 6);
        uint64_t v101 = *((void *)result + 7);
        *((void *)v5 + 21) = *((void *)result + 5);
        *((void *)v5 + 22) = v101;
        *((_WORD *)v5 + 106) = *((_WORD *)result + 40);
        *((void *)v5 + 14) = result + 24;
        *((void *)v5 + 25) = v102;
      }
      *((_WORD *)v5 + 76) = *((void *)v70 + 2);
      v5[158] = *((void *)v70 + 3);
      v5[159] = *((void *)v70 + 4);
      v5[160] = *((void *)v70 + 5);
      *((_WORD *)v5 + 77) = *((void *)v70 + 6);
      *((_WORD *)v5 + 78) = *((void *)v70 + 7);
LABEL_117:
      *((void *)v5 + 18) = *(void *)v70;
      return result;
    }
    if (v6 == -16114)
    {
      result[100] = 1;
      return result;
    }
    if (v6 != -16104) {
      return result;
    }
LABEL_67:
    long long v62 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
    uint64_t v63 = *a3;
    *((void *)v5 + 1) = *((void *)v62 + 1);
    *((void *)v5 + 2) = v63;
    *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
    uint64_t v64 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
    *((void *)v5 + 16) = v64;
    if (v64)
    {
      uint64_t v65 = *((void *)v64 + 1);
      *((void *)v5 + 7) = *(void *)v64;
      int v66 = *((_DWORD *)v64 + 4);
      *((_DWORD *)v5 + 21) = v65;
      *((_DWORD *)v5 + 22) = v66;
      uint64_t v68 = *((void *)v64 + 6);
      uint64_t v67 = *((void *)v64 + 7);
      *((void *)v5 + 21) = *((void *)v64 + 5);
      *((void *)v5 + 22) = v67;
      *((_WORD *)v5 + 106) = *((_WORD *)v64 + 40);
      *((void *)v5 + 14) = v64 + 24;
      *((void *)v5 + 25) = v68;
    }
    uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v62[32], a2);
    *((void *)v5 + 13) = result;
    *((void *)v5 + 17) = *(void *)v62;
    *((_DWORD *)v5 + 38) = *((void *)v62 + 2);
    *((_DWORD *)v5 + 39) = *((void *)v62 + 3);
    return result;
  }
  if (v6 > -16032)
  {
    if (v6 == -16031)
    {
      uint64_t v42 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      uint64_t v77 = *a3;
      *((void *)v5 + 1) = *((void *)v42 + 1);
      *((void *)v5 + 2) = v77;
      *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
      char v78 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
      *((void *)v5 + 16) = v78;
      if (v78)
      {
        uint64_t v79 = *((void *)v78 + 1);
        *((void *)v5 + 7) = *(void *)v78;
        int v80 = *((_DWORD *)v78 + 4);
        *((_DWORD *)v5 + 21) = v79;
        *((_DWORD *)v5 + 22) = v80;
        uint64_t v82 = *((void *)v78 + 6);
        uint64_t v81 = *((void *)v78 + 7);
        *((void *)v5 + 21) = *((void *)v78 + 5);
        *((void *)v5 + 22) = v81;
        *((_WORD *)v5 + 106) = *((_WORD *)v78 + 40);
        *((void *)v5 + 14) = v78 + 24;
        *((void *)v5 + 25) = v82;
      }
      uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v42[41], a2);
      *((void *)v5 + 13) = result;
      *((_DWORD *)v5 + 38) = *((void *)v42 + 3);
      uint64_t v83 = *((void *)v42 + 4);
    }
    else
    {
      if (v6 != -16030)
      {
        if (v6 == -15980)
        {
          uint64_t v7 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t v8 = *a3;
          *((void *)v5 + 1) = *((void *)v7 + 1);
          *((void *)v5 + 2) = v8;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          uint64_t v9 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((void *)v5 + 16) = v9;
          if (v9)
          {
            uint64_t v10 = *((void *)v9 + 1);
            *((void *)v5 + 7) = *(void *)v9;
            int v11 = *((_DWORD *)v9 + 4);
            *((_DWORD *)v5 + 21) = v10;
            *((_DWORD *)v5 + 22) = v11;
            uint64_t v13 = *((void *)v9 + 6);
            uint64_t v12 = *((void *)v9 + 7);
            *((void *)v5 + 21) = *((void *)v9 + 5);
            *((void *)v5 + 22) = v12;
            *((_WORD *)v5 + 106) = *((_WORD *)v9 + 40);
            *((void *)v5 + 14) = v9 + 24;
            *((void *)v5 + 25) = v13;
          }
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v7[24], a2);
          *((void *)v5 + 13) = result;
          *((void *)v5 + 5) = *(void *)v7;
          v5[214] = 1;
        }
        return result;
      }
      uint64_t v42 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      uint64_t v84 = *a3;
      *((void *)v5 + 1) = *((void *)v42 + 1);
      *((void *)v5 + 2) = v84;
      *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
      uint64_t v85 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
      *((void *)v5 + 16) = v85;
      if (v85)
      {
        uint64_t v86 = *((void *)v85 + 1);
        *((void *)v5 + 7) = *(void *)v85;
        int v87 = *((_DWORD *)v85 + 4);
        *((_DWORD *)v5 + 21) = v86;
        *((_DWORD *)v5 + 22) = v87;
        uint64_t v89 = *((void *)v85 + 6);
        uint64_t v88 = *((void *)v85 + 7);
        *((void *)v5 + 21) = *((void *)v85 + 5);
        *((void *)v5 + 22) = v88;
        *((_WORD *)v5 + 106) = *((_WORD *)v85 + 40);
        *((void *)v5 + 14) = v85 + 24;
        *((void *)v5 + 25) = v89;
      }
      uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v42[49], a2);
      *((void *)v5 + 13) = result;
      *((_DWORD *)v5 + 38) = *((void *)v42 + 4);
      uint64_t v83 = *((void *)v42 + 5);
    }
    *((_DWORD *)v5 + 39) = v83;
LABEL_109:
    *((void *)v5 + 5) = *(void *)v42;
    return result;
  }
  if (v6 != -16098)
  {
    if (v6 != -16096) {
      return result;
    }
    uint64_t v42 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
    uint64_t v49 = *a3;
    *((void *)v5 + 1) = *((void *)v42 + 1);
    *((void *)v5 + 2) = v49;
    *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
    int v50 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
    *((void *)v5 + 16) = v50;
    if (v50)
    {
      uint64_t v51 = *((void *)v50 + 1);
      *((void *)v5 + 7) = *(void *)v50;
      int v52 = *((_DWORD *)v50 + 4);
      *((_DWORD *)v5 + 21) = v51;
      *((_DWORD *)v5 + 22) = v52;
      uint64_t v54 = *((void *)v50 + 6);
      uint64_t v53 = *((void *)v50 + 7);
      *((void *)v5 + 21) = *((void *)v50 + 5);
      *((void *)v5 + 22) = v53;
      *((_WORD *)v5 + 106) = *((_WORD *)v50 + 40);
      *((void *)v5 + 14) = v50 + 24;
      *((void *)v5 + 25) = v54;
    }
    unsigned int v55 = v42[33];
LABEL_108:
    uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v55, a2);
    *((void *)v5 + 13) = result;
    goto LABEL_109;
  }
  char v114 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
  uint64_t v115 = *a3;
  *((void *)v5 + 1) = *((void *)v114 + 1);
  *((void *)v5 + 2) = v115;
  *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
  unint64_t v116 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
  *((void *)v5 + 16) = v116;
  if (v116)
  {
    uint64_t v117 = *((void *)v116 + 1);
    *((void *)v5 + 7) = *(void *)v116;
    int v118 = *((_DWORD *)v116 + 4);
    *((_DWORD *)v5 + 21) = v117;
    *((_DWORD *)v5 + 22) = v118;
    uint64_t v120 = *((void *)v116 + 6);
    uint64_t v119 = *((void *)v116 + 7);
    *((void *)v5 + 21) = *((void *)v116 + 5);
    *((void *)v5 + 22) = v119;
    *((_WORD *)v5 + 106) = *((_WORD *)v116 + 40);
    *((void *)v5 + 14) = v116 + 24;
    *((void *)v5 + 25) = v120;
  }
  uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v114[40], a2);
  *((void *)v5 + 13) = result;
  *((void *)v5 + 17) = *(void *)v114;
  *((_DWORD *)v5 + 38) = *((void *)v114 + 2);
  *((_DWORD *)v5 + 39) = *((void *)v114 + 3);
  *((_DWORD *)v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *((void *)v114 + 4);
  return result;
}

char *GTMTLSMIndirectCommandBuffer_processTraceFuncWithMap(char *result, uint64_t a2, uint64_t *a3)
{
  BOOL v5 = result;
  int v6 = *((_DWORD *)a3 + 2);
  if (v6 > -10219)
  {
    if (v6 <= -10210)
    {
      if (v6 == -10218)
      {
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        *((void *)v5 + 15) = *((void *)result + 1);
      }
      else if (v6 == -10215)
      {
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        *((_DWORD *)v5 + 21) = *((void *)result + 1);
      }
    }
    else
    {
      switch(v6)
      {
        case -10209:
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          *((void *)v5 + 8) = *((void *)result + 1);
          break;
        case -10202:
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          *((void *)v5 + 7) = *((void *)result + 1);
          break;
        case -10166:
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          *((void *)v5 + 16) = *((void *)result + 1);
          break;
      }
    }
  }
  else
  {
    switch(v6)
    {
      case -15925:
        uint64_t v7 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v7[8], a2);
        *((void *)v5 + 9) = result;
        break;
      case -15924:
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        *((_DWORD *)v5 + 22) = *((_DWORD *)result + 2);
        break;
      case -15923:
        *((void *)result + 3) = *a3;
        break;
      case -15922:
      case -15921:
        return result;
      case -15920:
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        uint64_t v15 = *((void *)result + 2);
        if (v15 != 1) {
          *((_WORD *)v5 + 49) = v15;
        }
        break;
      case -15919:
        result[100] = 1;
        break;
      default:
        if (v6 == -15972 || v6 == -15969)
        {
          uint64_t v8 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t v9 = *a3;
          uint64_t v10 = *(void *)v8;
          *((void *)v5 + 1) = *((void *)v8 + 1);
          *((void *)v5 + 2) = v9;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          *((void *)v5 + 5) = v10;
          *((void *)v5 + 13) = GTTraceFunc_argumentBytesWithMap(a3, v8[32], a2);
          uint64_t v11 = *((void *)v8 + 3);
          *((_DWORD *)v5 + 34) = *((void *)v8 + 2);
          *((_WORD *)v5 + 48) = v11;
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((void *)v5 + 14) = result;
          if (result)
          {
            uint64_t v12 = *((void *)result + 1);
            *((void *)v5 + 7) = *(void *)result;
            int v13 = *((_DWORD *)result + 4);
            *((_DWORD *)v5 + 21) = v12;
            *((_DWORD *)v5 + 22) = v13;
            uint64_t v14 = *((void *)result + 6);
            *((void *)v5 + 15) = *((void *)result + 3);
            *((void *)v5 + 16) = v14;
          }
        }
        break;
    }
  }
  return result;
}

char *GTMTLSMHeap_processTraceFuncWithMap(char *result, uint64_t a2, uint64_t *a3)
{
  BOOL v5 = result;
  int v6 = *((_DWORD *)a3 + 2);
  if (v6 > -10212)
  {
    switch(v6)
    {
      case -10211:
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        *((void *)v5 + 8) = *((void *)result + 1);
        break;
      case -10208:
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        *((_DWORD *)v5 + 18) = *((void *)result + 1);
        break;
      case -10207:
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        *((_DWORD *)v5 + 19) = *((void *)result + 1);
        break;
    }
  }
  else
  {
    switch(v6)
    {
      case -16120:
        uint64_t v7 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        uint64_t v8 = *a3;
        uint64_t v9 = *(void *)v7;
        *((void *)v5 + 1) = *((void *)v7 + 1);
        *((void *)v5 + 2) = v8;
        *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
        *((void *)v5 + 5) = v9;
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v7[16], a2);
        *((void *)v5 + 6) = result;
        break;
      case -16119:
        uint64_t v10 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v10[8], a2);
        *((void *)v5 + 7) = result;
        break;
      case -16118:
        *((void *)result + 3) = *a3;
        break;
      case -16115:
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        uint64_t v11 = *((void *)result + 2);
        if (v11 != 1) {
          *((_WORD *)v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v11;
        }
        break;
      default:
        return result;
    }
  }
  return result;
}

char *GTMTLSMDepthStencilState_processTraceFuncWithMap(char *result, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = result;
  int v5 = *((_DWORD *)a3 + 2);
  if (v5 == -16320)
  {
    *((void *)result + 3) = *a3;
  }
  else if (v5 == -16311)
  {
    uint64_t v7 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
    uint64_t v8 = *a3;
    uint64_t v9 = *(void *)v7;
    *((void *)v4 + 1) = *((void *)v7 + 1);
    *((void *)v4 + 2) = v8;
    *((_DWORD *)v4 + 1) = *((_DWORD *)a3 + 2);
    *((void *)v4 + 5) = v9;
    uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v7[16], a2);
    *((void *)v4 + 6) = result;
  }
  return result;
}

char *GTMTLSMSamplerState_processTraceFuncWithMap(char *result, uint64_t a2, uint64_t *a3)
{
  int v5 = result;
  int v6 = *((_DWORD *)a3 + 2);
  if (v6 > -10227)
  {
    if (v6 == -10226)
    {
      uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      *((void *)v5 + 8) = *((void *)result + 1);
    }
    else if (v6 == -10163)
    {
      uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      *((void *)v5 + 9) = *((void *)result + 1);
    }
  }
  else if (v6 == -16309)
  {
    uint64_t v7 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
    uint64_t v8 = *a3;
    *((void *)v5 + 1) = *((void *)v7 + 1);
    *((void *)v5 + 2) = v8;
    *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
    uint64_t v9 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
    *((void *)v5 + 7) = v9;
    if (v9)
    {
      *((void *)v5 + 1mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *((void *)v9 + 2);
      *((_OWORD *)v5 + 4) = *(_OWORD *)v9;
    }
    *((void *)v5 + 5) = *(void *)v7;
    uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v7[16], a2);
    *((void *)v5 + 6) = result;
  }
  else if (v6 == -16241)
  {
    *((void *)result + 3) = *a3;
  }
  return result;
}

char *GTMTLSMEvent_processTraceFuncWithMap(char *result, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = result;
  int v5 = *((_DWORD *)a3 + 2);
  switch(v5)
  {
    case -15879:
      *((void *)result + 3) = *a3;
      break;
    case -15880:
      uint64_t v9 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v9[8], a2);
      *((void *)v4 + 6) = result;
      break;
    case -15997:
      uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      uint64_t v7 = *a3;
      uint64_t v8 = *(void *)result;
      *((void *)v4 + 1) = *((void *)result + 1);
      *((void *)v4 + 2) = v7;
      *((_DWORD *)v4 + 1) = *((_DWORD *)a3 + 2);
      *((void *)v4 + 5) = v8;
      break;
  }
  return result;
}

char *GTMTLSMSharedEvent_processTraceFuncWithMap(char *result, uint64_t a2, uint64_t *a3)
{
  int v5 = result;
  int v6 = *((_DWORD *)a3 + 2);
  if (v6 <= -15974)
  {
    switch(v6)
    {
      case -15996:
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        uint64_t v11 = *a3;
        uint64_t v12 = *(void *)result;
        *((void *)v5 + 1) = *((void *)result + 1);
        *((void *)v5 + 2) = v11;
        *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
        *((void *)v5 + 5) = v12;
        uint64_t v13 = *((void *)result + 2);
        *((_DWORD *)v5 + 18) = *((_DWORD *)result + 6);
        *((void *)v5 + 7) = v13;
        *((void *)v5 + 8) = 0;
        return result;
      case -15975:
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        uint64_t v9 = *((void *)result + 1);
LABEL_17:
        *((void *)v5 + 8) = v9;
        return result;
      case -15974:
        uint64_t v10 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v10[8], a2);
        *((void *)v5 + 6) = result;
        break;
    }
  }
  else
  {
    if (v6 <= -15910)
    {
      if (v6 == -15973)
      {
        *((void *)result + 3) = *a3;
        return result;
      }
      if (v6 != -15912) {
        return result;
      }
      uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      uint64_t v7 = *a3;
      uint64_t v8 = *(void *)result;
      *((void *)v5 + 1) = *((void *)result + 1);
      *((void *)v5 + 2) = v7;
      *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
      *((void *)v5 + 5) = v8;
      *((_DWORD *)v5 + 18) = *((_DWORD *)result + 6);
      uint64_t v9 = *((void *)result + 2);
      goto LABEL_17;
    }
    if (v6 == -15909)
    {
      uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      uint64_t v14 = *a3;
      uint64_t v15 = *(void *)result;
      *((void *)v5 + 1) = *((void *)result + 1);
      *((void *)v5 + 2) = v14;
      *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
      *((void *)v5 + 5) = v15;
      *((_DWORD *)v5 + 18) = *((_DWORD *)result + 8);
      *(_OWORD *)(v5 + 56) = *((_OWORD *)result + 1);
    }
    else if (v6 == -15907)
    {
      uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      *((void *)v5 + 7) = *((void *)result + 1);
    }
  }
  return result;
}

char *GTMTLSMLateEvalEvent_processTraceFuncWithMap(char *result, uint64_t a2, uint64_t *a3)
{
  int v5 = result;
  switch(*((_DWORD *)a3 + 2))
  {
    case 0xFFFFC378:
      uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      uint64_t v6 = *a3;
      uint64_t v7 = *(void *)result;
      *((void *)v5 + 1) = *((void *)result + 1);
      *((void *)v5 + 2) = v6;
      *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
      *((void *)v5 + 5) = v7;
      *((void *)v5 + 8) = 0;
      break;
    case 0xFFFFC37D:
      uint64_t v8 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v8[8], a2);
      *((void *)v5 + 6) = result;
      break;
    case 0xFFFFC37E:
      uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      *((void *)v5 + 8) = *((void *)result + 1);
      break;
    case 0xFFFFC37F:
      *((void *)result + 3) = *a3;
      break;
    default:
      return result;
  }
  return result;
}

char *GTMTLSMFence_processTraceFuncWithMap(char *result, uint64_t a2, uint64_t *a3)
{
  int v5 = result;
  int v6 = *((_DWORD *)a3 + 2);
  switch(v6)
  {
    case -16136:
      uint64_t v9 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v9[8], a2);
      *((void *)v5 + 6) = result;
      break;
    case -16127:
      *((void *)result + 3) = *a3;
      break;
    case -16128:
      uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      uint64_t v7 = *a3;
      uint64_t v8 = *(void *)result;
      *((void *)v5 + 1) = *((void *)result + 1);
      *((void *)v5 + 2) = v7;
      *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
      *((void *)v5 + 5) = v8;
      break;
  }
  return result;
}

char *GTMTLSMCounterSampleBuffer_processTraceFuncWithMap(char *result, uint64_t a2, uint64_t *a3)
{
  if (*((_DWORD *)a3 + 2) == -15848)
  {
    int v5 = result;
    int v6 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
    uint64_t v7 = *a3;
    uint64_t v8 = *(void *)v6;
    *((void *)v5 + 1) = *((void *)v6 + 1);
    *((void *)v5 + 2) = v7;
    *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
    *((void *)v5 + 5) = v8;
    uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v6[24], a2);
    *((void *)v5 + 6) = result;
  }
  return result;
}

char *GTMTLSMRenderPipelineState_processTraceFuncWithMap(char *result, uint64_t a2, uint64_t *a3)
{
  int v5 = result;
  int v6 = *((_DWORD *)a3 + 2);
  if (v6 > -15462)
  {
    if (v6 > -10221)
    {
      if (v6 <= -10185)
      {
        if (v6 == -10220)
        {
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          *((void *)v5 + 12) = *((void *)result + 1);
        }
        else if (v6 == -10192)
        {
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          *((_DWORD *)v5 + 102) = *((_DWORD *)result + 2);
        }
      }
      else
      {
        switch(v6)
        {
          case -10184:
            uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
            *((_DWORD *)v5 + 103) = *((void *)result + 1);
            break;
          case -10172:
            uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
            *((void *)v5 + 5mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *((void *)result + 1);
            break;
          case -10165:
            uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
            *((void *)v5 + 14) = *((void *)result + 1);
            break;
        }
      }
    }
    else
    {
      switch(v6)
      {
        case -15406:
        case -15405:
          uint64_t v13 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t v14 = *a3;
          uint64_t v15 = *(void *)v13;
          *((void *)v5 + 1) = *((void *)v13 + 1);
          *((void *)v5 + 2) = v14;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          *((void *)v5 + 5) = v15;
          uint64_t v16 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((void *)v5 + 7) = v16;
          if (v16)
          {
            int v17 = v16;
            memcpy(v5 + 120, v16 + 216, 0x118uLL);
            *((_OWORD *)v5 + 6) = *(_OWORD *)v17;
            *((_DWORD *)v5 + 102) = *((_DWORD *)v17 + 48);
            *((_DWORD *)v5 + 103) = *((unsigned __int16 *)v17 + 98);
            *((void *)v5 + 14) = *((void *)v17 + 2);
          }
          unsigned int v18 = v13[24];
          goto LABEL_31;
        case -15404:
        case -15403:
          uint64_t v30 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t v31 = *a3;
          uint64_t v32 = *(void *)v30;
          *((void *)v5 + 1) = *((void *)v30 + 1);
          *((void *)v5 + 2) = v31;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          *((void *)v5 + 5) = v32;
          int v33 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((void *)v5 + 7) = v33;
          if (v33)
          {
            uint64_t v34 = v33;
            memcpy(v5 + 120, v33 + 216, 0x118uLL);
            *((_OWORD *)v5 + 6) = *(_OWORD *)v34;
            *((_DWORD *)v5 + 102) = *((_DWORD *)v34 + 48);
            *((_DWORD *)v5 + 103) = *((unsigned __int16 *)v34 + 98);
            *((void *)v5 + 14) = *((void *)v34 + 2);
          }
          unsigned int v18 = v30[32];
LABEL_31:
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v18, a2);
          *((void *)v5 + 9) = result;
          break;
        default:
          if (v6 == -15461)
          {
            uint64_t v40 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
            uint64_t v41 = *a3;
            uint64_t v42 = *(void *)v40;
            *((void *)v5 + 1) = *((void *)v40 + 1);
            *((void *)v5 + 2) = v41;
            *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
            *((void *)v5 + 5) = v42;
            uint64_t v43 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
            *((void *)v5 + 7) = v43;
            if (v43)
            {
              unint64_t v44 = v43;
              memcpy(v5 + 120, v43 + 216, 0x118uLL);
              *((_OWORD *)v5 + 6) = *(_OWORD *)v44;
              *((_DWORD *)v5 + 102) = *((_DWORD *)v44 + 48);
              *((_DWORD *)v5 + 103) = *((unsigned __int16 *)v44 + 98);
              *((void *)v5 + 14) = *((void *)v44 + 2);
            }
            uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v40[24], a2);
            *((void *)v5 + 1mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = result;
          }
          break;
      }
    }
  }
  else if (v6 > -16092)
  {
    switch(v6)
    {
      case -16091:
      case -16089:
        uint64_t v19 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        uint64_t v20 = *a3;
        uint64_t v21 = *(void *)v19;
        *((void *)v5 + 1) = *((void *)v19 + 1);
        *((void *)v5 + 2) = v20;
        *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
        *((void *)v5 + 5) = v21;
        uint64_t v22 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
        *((void *)v5 + 7) = v22;
        if (v22)
        {
          uint64_t v23 = v22;
          memcpy(v5 + 120, v22 + 216, 0x118uLL);
          *((_OWORD *)v5 + 6) = *(_OWORD *)v23;
          *((_DWORD *)v5 + 102) = *((_DWORD *)v23 + 48);
          *((_DWORD *)v5 + 103) = *((unsigned __int16 *)v23 + 98);
          *((void *)v5 + 14) = *((void *)v23 + 2);
        }
        unsigned int v24 = v19[24];
        goto LABEL_35;
      case -16090:
      case -16088:
        uint64_t v35 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        uint64_t v36 = *a3;
        uint64_t v37 = *(void *)v35;
        *((void *)v5 + 1) = *((void *)v35 + 1);
        *((void *)v5 + 2) = v36;
        *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
        *((void *)v5 + 5) = v37;
        uint64_t v38 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
        *((void *)v5 + 7) = v38;
        if (v38)
        {
          int v39 = v38;
          memcpy(v5 + 120, v38 + 216, 0x118uLL);
          *((_OWORD *)v5 + 6) = *(_OWORD *)v39;
          *((_DWORD *)v5 + 102) = *((_DWORD *)v39 + 48);
          *((_DWORD *)v5 + 103) = *((unsigned __int16 *)v39 + 98);
          *((void *)v5 + 14) = *((void *)v39 + 2);
        }
        unsigned int v24 = v35[32];
LABEL_35:
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v24, a2);
        *((void *)v5 + 8) = result;
        break;
      default:
        if (v6 == -15738)
        {
          uint64_t v45 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t v46 = *a3;
          uint64_t v47 = *(void *)v45;
          *((void *)v5 + 1) = *((void *)v45 + 1);
          *((void *)v5 + 2) = v46;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          *((void *)v5 + 5) = v47;
          uint64_t v48 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((void *)v5 + 7) = v48;
          if (v48)
          {
            uint64_t v49 = v48;
            memcpy(v5 + 120, v48 + 216, 0x118uLL);
            *((_OWORD *)v5 + 6) = *(_OWORD *)v49;
            *((_DWORD *)v5 + 102) = *((_DWORD *)v49 + 48);
            *((_DWORD *)v5 + 103) = *((unsigned __int16 *)v49 + 98);
            *((void *)v5 + 14) = *((void *)v49 + 2);
          }
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v45[32], a2);
          *((void *)v5 + 11) = result;
        }
        break;
    }
  }
  else
  {
    switch(v6)
    {
      case -16303:
      case -16301:
        uint64_t v7 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        uint64_t v8 = *a3;
        uint64_t v9 = *(void *)v7;
        *((void *)v5 + 1) = *((void *)v7 + 1);
        *((void *)v5 + 2) = v8;
        *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
        *((void *)v5 + 5) = v9;
        uint64_t v10 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
        *((void *)v5 + 7) = v10;
        if (v10)
        {
          uint64_t v11 = v10;
          memcpy(v5 + 120, v10 + 216, 0x118uLL);
          *((_OWORD *)v5 + 6) = *(_OWORD *)v11;
          *((_DWORD *)v5 + 102) = *((_DWORD *)v11 + 48);
          *((_DWORD *)v5 + 103) = *((unsigned __int16 *)v11 + 98);
          *((void *)v5 + 14) = *((void *)v11 + 2);
        }
        unsigned int v12 = v7[24];
        goto LABEL_27;
      case -16302:
      case -16300:
        int v25 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        uint64_t v26 = *a3;
        uint64_t v27 = *(void *)v25;
        *((void *)v5 + 1) = *((void *)v25 + 1);
        *((void *)v5 + 2) = v26;
        *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
        *((void *)v5 + 5) = v27;
        uint64_t v28 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
        *((void *)v5 + 7) = v28;
        if (v28)
        {
          unsigned int v29 = v28;
          memcpy(v5 + 120, v28 + 216, 0x118uLL);
          *((_OWORD *)v5 + 6) = *(_OWORD *)v29;
          *((_DWORD *)v5 + 102) = *((_DWORD *)v29 + 48);
          *((_DWORD *)v5 + 103) = *((unsigned __int16 *)v29 + 98);
          *((void *)v5 + 14) = *((void *)v29 + 2);
        }
        unsigned int v12 = v25[32];
LABEL_27:
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v12, a2);
        *((void *)v5 + 6) = result;
        break;
      default:
        if (v6 == -16242) {
          *((void *)result + 3) = *a3;
        }
        break;
    }
  }
  return result;
}

char *GTMTLSMComputePipelineState_processTraceFuncWithMap(char *result, uint64_t a2, uint64_t *a3)
{
  int v5 = result;
  int v6 = *((_DWORD *)a3 + 2);
  if (v6 <= -16102)
  {
    switch(v6)
    {
      case -16299:
      case -16298:
      case -16297:
      case -16296:
        uint64_t v7 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        uint64_t v8 = *a3;
        uint64_t v9 = *(void *)v7;
        *((void *)v5 + 1) = *((void *)v7 + 1);
        *((void *)v5 + 2) = v8;
        *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
        *((void *)v5 + 5) = v9;
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
        *((void *)v5 + 8) = result;
        if (result)
        {
          long long v10 = *(_OWORD *)(result + 104);
          long long v11 = *(_OWORD *)(result + 120);
          long long v12 = *(_OWORD *)(result + 136);
          *((void *)v5 + 21) = *((void *)result + 19);
          *(_OWORD *)(v5 + 152) = v12;
          *(_OWORD *)(v5 + 136) = v11;
          *(_OWORD *)(v5 + 12mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v10;
          *((_OWORD *)v5 + 6) = *(_OWORD *)result;
          *((_DWORD *)v5 + 48) = *((_DWORD *)result + 22);
          *((void *)v5 + 14) = *((void *)result + 2);
        }
        *((void *)v5 + 6) = *((void *)v7 + 2);
        break;
      default:
        JUMPOUT(0);
    }
  }
  else if (v6 > -10215)
  {
    if (v6 > -10172)
    {
      if (v6 == -10171)
      {
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        *((void *)v5 + 22) = *((void *)result + 1);
      }
      else if (v6 == -10162)
      {
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        *((void *)v5 + 14) = *((void *)result + 1);
      }
    }
    else if (v6 == -10214)
    {
      uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      *((void *)v5 + 12) = *((void *)result + 1);
    }
    else if (v6 == -10191)
    {
      uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      *((_DWORD *)v5 + 48) = *((_DWORD *)result + 2);
    }
  }
  else if (v6 > -15741)
  {
    if (v6 == -15740)
    {
      uint64_t v27 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      uint64_t v28 = *a3;
      uint64_t v29 = *(void *)v27;
      *((void *)v5 + 1) = *((void *)v27 + 1);
      *((void *)v5 + 2) = v28;
      *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
      *((void *)v5 + 5) = v29;
      uint64_t v30 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
      *((void *)v5 + 8) = v30;
      if (v30)
      {
        long long v31 = *(_OWORD *)(v30 + 104);
        long long v32 = *(_OWORD *)(v30 + 120);
        long long v33 = *(_OWORD *)(v30 + 136);
        *((void *)v5 + 21) = *((void *)v30 + 19);
        *(_OWORD *)(v5 + 152) = v33;
        *(_OWORD *)(v5 + 136) = v32;
        *(_OWORD *)(v5 + 12mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v31;
        *((_OWORD *)v5 + 6) = *(_OWORD *)v30;
        *((_DWORD *)v5 + 48) = *((_DWORD *)v30 + 22);
        *((void *)v5 + 14) = *((void *)v30 + 2);
      }
      uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v27[32], a2);
      *((void *)v5 + 11) = result;
    }
    else if (v6 == -15541)
    {
      uint64_t v13 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      uint64_t v14 = *a3;
      uint64_t v15 = *(void *)v13;
      *((void *)v5 + 1) = *((void *)v13 + 1);
      *((void *)v5 + 2) = v14;
      *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
      *((void *)v5 + 5) = v15;
      uint64_t v16 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
      *((void *)v5 + 8) = v16;
      if (v16)
      {
        long long v17 = *(_OWORD *)(v16 + 104);
        long long v18 = *(_OWORD *)(v16 + 120);
        long long v19 = *(_OWORD *)(v16 + 136);
        *((void *)v5 + 21) = *((void *)v16 + 19);
        *(_OWORD *)(v5 + 152) = v19;
        *(_OWORD *)(v5 + 136) = v18;
        *(_OWORD *)(v5 + 12mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v17;
        *((_OWORD *)v5 + 6) = *(_OWORD *)v16;
        *((_DWORD *)v5 + 48) = *((_DWORD *)v16 + 22);
        *((void *)v5 + 14) = *((void *)v16 + 2);
      }
      uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v13[24], a2);
      *((void *)v5 + 23) = result;
    }
  }
  else if (v6 == -16101)
  {
    uint64_t v20 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
    uint64_t v21 = *a3;
    uint64_t v22 = *(void *)v20;
    *((void *)v5 + 1) = *((void *)v20 + 1);
    *((void *)v5 + 2) = v21;
    *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
    *((void *)v5 + 5) = v22;
    uint64_t v23 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
    *((void *)v5 + 8) = v23;
    if (v23)
    {
      long long v24 = *(_OWORD *)(v23 + 104);
      long long v25 = *(_OWORD *)(v23 + 120);
      long long v26 = *(_OWORD *)(v23 + 136);
      *((void *)v5 + 21) = *((void *)v23 + 19);
      *(_OWORD *)(v5 + 152) = v26;
      *(_OWORD *)(v5 + 136) = v25;
      *(_OWORD *)(v5 + 12mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v24;
      *((_OWORD *)v5 + 6) = *(_OWORD *)v23;
      *((_DWORD *)v5 + 48) = *((_DWORD *)v23 + 22);
      *((void *)v5 + 14) = *((void *)v23 + 2);
    }
    *((void *)v5 + 9) = GTTraceFunc_argumentBytesWithMap(a3, v20[24], a2);
    uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v20[25], a2);
    *((void *)v5 + 1mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = result;
  }
  else if (v6 == -15989)
  {
    uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
    *((void *)v5 + 13) = *((void *)result + 1);
  }
  return result;
}

char *GTMTLSMMotionEstimationPipelineState_processTraceFuncWithMap(char *result, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = result;
  int v5 = *((_DWORD *)a3 + 2);
  if (v5 == -15893)
  {
    *((void *)result + 3) = *a3;
  }
  else if (v5 == -15891)
  {
    uint64_t v7 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
    uint64_t v8 = *a3;
    uint64_t v9 = *(void *)v7;
    *((void *)v4 + 1) = *((void *)v7 + 1);
    *((void *)v4 + 2) = v8;
    *((_DWORD *)v4 + 1) = *((_DWORD *)a3 + 2);
    *((void *)v4 + 5) = v9;
    uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v7[16], a2);
    *((void *)v4 + 6) = result;
  }
  return result;
}

uint64_t GTMTLSMFunction_processTraceFuncWithMap(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = result;
  int v6 = *((_DWORD *)a3 + 2);
  if (v6 > -15731)
  {
    if (v6 > -15551)
    {
      switch(v6)
      {
        case -15430:
        case -15428:
          goto LABEL_20;
        case -15429:
        case -15427:
          goto LABEL_22;
        default:
          if (v6 == -15550)
          {
            uint64_t v57 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
            uint64_t v58 = *a3;
            uint64_t v59 = *(void *)v57;
            *(void *)(v5 + 8) = *((void *)v57 + 1);
            *(void *)(v5 + 16) = v58;
            *(_DWORD *)(v5 + 4) = *((_DWORD *)a3 + 2);
            *(void *)(v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v59;
            int v60 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
            *(void *)(v5 + 8mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v60;
            if (v60) {
              uint64_t v61 = *(void *)v60;
            }
            else {
              uint64_t v61 = 0;
            }
            *(void *)(v5 + 64) = v61;
            unsigned int v62 = v57[24];
            goto LABEL_83;
          }
          if (v6 != -10157) {
            return result;
          }
          unsigned int v41 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2)[16];
          break;
      }
    }
    else
    {
      if (v6 > -15609)
      {
        if (v6 != -15608)
        {
          if (v6 == -15551)
          {
            uint64_t v21 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
            uint64_t v22 = *a3;
            uint64_t v23 = *(void *)v21;
            *(void *)(v5 + 8) = *((void *)v21 + 1);
            *(void *)(v5 + 16) = v22;
            *(_DWORD *)(v5 + 4) = *((_DWORD *)a3 + 2);
            *(void *)(v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v23;
            long long v24 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
            *(void *)(v5 + 8mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v24;
            if (v24) {
              uint64_t v25 = *(void *)v24;
            }
            else {
              uint64_t v25 = 0;
            }
            *(void *)(v5 + 64) = v25;
            unsigned int v62 = v21[32];
LABEL_83:
            uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithMap(a3, v62, a2);
            *(void *)(v5 + 12mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = result;
          }
          return result;
        }
      }
      else
      {
        if (v6 == -15730)
        {
LABEL_22:
          long long v12 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t v17 = *a3;
          uint64_t v18 = *(void *)v12;
          *(void *)(v5 + 8) = *((void *)v12 + 1);
          *(void *)(v5 + 16) = v17;
          *(_DWORD *)(v5 + 4) = *((_DWORD *)a3 + 2);
          *(void *)(v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v18;
          long long v19 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *(void *)(v5 + 8mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v19;
          if (v19) {
            uint64_t v20 = *(void *)v19;
          }
          else {
            uint64_t v20 = 0;
          }
          *(void *)(v5 + 64) = v20;
          *(unsigned char *)(v5 + 132) = 1;
          unsigned int v42 = v12[24];
          if (g_loadURLAsMemHeader) {
            uint64_t v43 = GTTraceFunc_argumentBlobWithMap(a3, v42, a2);
          }
          else {
            uint64_t v43 = (uint64_t)GTTraceFunc_argumentBytesWithMap(a3, v42, a2);
          }
          *(void *)(v5 + 88) = v43;
          unsigned int v44 = v12[25];
          if (g_loadURLAsMemHeader) {
            uint64_t result = GTTraceFunc_argumentBlobWithMap(a3, v44, a2);
          }
          else {
            uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithMap(a3, v44, a2);
          }
          *(void *)(v5 + 96) = result;
          goto LABEL_60;
        }
        if (v6 != -15609) {
          return result;
        }
      }
      long long v26 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      uint64_t v27 = *a3;
      uint64_t v28 = *(void *)v26;
      *(void *)(v5 + 8) = *((void *)v26 + 1);
      *(void *)(v5 + 16) = v27;
      *(_DWORD *)(v5 + 4) = *((_DWORD *)a3 + 2);
      *(void *)(v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v28;
      uint64_t v29 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
      *(void *)(v5 + 8mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v29;
      if (v29) {
        uint64_t v30 = *(void *)v29;
      }
      else {
        uint64_t v30 = 0;
      }
      *(void *)(v5 + 64) = v30;
      unsigned int v41 = v26[24];
    }
    uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithMap(a3, v41, a2);
    *(void *)(v5 + 112) = result;
    return result;
  }
  if (v6 <= -16083)
  {
    if (v6 <= -16124)
    {
      if (v6 == -16293)
      {
        *(void *)(result + 24) = *a3;
      }
      else if (v6 == -16290)
      {
        long long v31 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        uint64_t v32 = *a3;
        uint64_t v33 = *(void *)v31;
        *(void *)(v5 + 8) = *((void *)v31 + 1);
        *(void *)(v5 + 16) = v32;
        *(_DWORD *)(v5 + 4) = *((_DWORD *)a3 + 2);
        *(void *)(v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v33;
        uint64_t v34 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
        *(void *)(v5 + 8mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v34;
        if (v34) {
          uint64_t v35 = *(void *)v34;
        }
        else {
          uint64_t v35 = 0;
        }
        *(void *)(v5 + 64) = v35;
        uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithMap(a3, v31[16], a2);
        *(void *)(v5 + 56) = result;
      }
    }
    else if (v6 == -16123)
    {
      uint64_t v45 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithMap(a3, v45[8], a2);
      *(void *)(v5 + 64) = result;
    }
    else if (v6 == -16107 || v6 == -16106)
    {
      uint64_t v7 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      uint64_t v8 = *a3;
      uint64_t v9 = *(void *)v7;
      *(void *)(v5 + 8) = *((void *)v7 + 1);
      *(void *)(v5 + 16) = v8;
      *(_DWORD *)(v5 + 4) = *((_DWORD *)a3 + 2);
      *(void *)(v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v9;
      long long v10 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
      *(void *)(v5 + 8mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v10;
      if (v10) {
        uint64_t v11 = *(void *)v10;
      }
      else {
        uint64_t v11 = 0;
      }
      *(void *)(v5 + 64) = v11;
      *(void *)(v5 + 56) = GTTraceFunc_argumentBytesWithMap(a3, v7[24], a2);
      uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithMap(a3, v7[25], a2);
      *(void *)(v5 + 72) = result;
    }
    return result;
  }
  if (v6 > -16039)
  {
    if (v6 == -16038)
    {
      uint64_t v46 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      uint64_t v47 = *a3;
      uint64_t v48 = *(void *)v46;
      *(void *)(v5 + 8) = *((void *)v46 + 1);
      *(void *)(v5 + 16) = v47;
      *(_DWORD *)(v5 + 4) = *((_DWORD *)a3 + 2);
      *(void *)(v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v48;
      uint64_t v49 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
      *(void *)(v5 + 8mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v49;
      if (v49) {
        uint64_t v50 = *(void *)v49;
      }
      else {
        uint64_t v50 = 0;
      }
      *(void *)(v5 + 64) = v50;
      uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithMap(a3, v46[16], a2);
      *(void *)(v5 + 56) = result;
      *(unsigned char *)(v5 + 131) = 1;
      return result;
    }
    if (v6 == -15830)
    {
      uint64_t v51 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      uint64_t v52 = *a3;
      uint64_t v53 = *(void *)v51;
      *(void *)(v5 + 8) = *((void *)v51 + 1);
      *(void *)(v5 + 16) = v52;
      *(_DWORD *)(v5 + 4) = *((_DWORD *)a3 + 2);
      *(void *)(v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v53;
      uint64_t v54 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
      *(void *)(v5 + 8mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v54;
      if (v54) {
        uint64_t v55 = *(void *)v54;
      }
      else {
        uint64_t v55 = 0;
      }
      *(void *)(v5 + 64) = v55;
      *(void *)(v5 + 56) = GTTraceFunc_argumentBytesWithMap(a3, v51[18], a2);
      *(unsigned char *)(v5 + 132) = 1;
      unsigned int v63 = v51[16];
      if (g_loadURLAsMemHeader) {
        uint64_t result = GTTraceFunc_argumentBlobWithMap(a3, v63, a2);
      }
      else {
        uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithMap(a3, v63, a2);
      }
      *(void *)(v5 + 104) = result;
      *(unsigned char *)(v5 + 13mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v51[17];
      return result;
    }
    if (v6 != -15731) {
      return result;
    }
LABEL_20:
    long long v12 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
    uint64_t v13 = *a3;
    uint64_t v14 = *(void *)v12;
    *(void *)(v5 + 8) = *((void *)v12 + 1);
    *(void *)(v5 + 16) = v13;
    *(_DWORD *)(v5 + 4) = *((_DWORD *)a3 + 2);
    *(void *)(v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v14;
    uint64_t v15 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
    *(void *)(v5 + 8mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v15;
    if (v15) {
      uint64_t v16 = *(void *)v15;
    }
    else {
      uint64_t v16 = 0;
    }
    *(void *)(v5 + 64) = v16;
    *(unsigned char *)(v5 + 132) = 1;
    unsigned int v56 = v12[24];
    if (g_loadURLAsMemHeader) {
      uint64_t result = GTTraceFunc_argumentBlobWithMap(a3, v56, a2);
    }
    else {
      uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithMap(a3, v56, a2);
    }
    *(void *)(v5 + 88) = result;
LABEL_60:
    *(_WORD *)(v5 + 128) = *((void *)v12 + 2);
    return result;
  }
  if (v6 == -16082 || v6 == -16081)
  {
    uint64_t v36 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
    uint64_t v37 = *a3;
    uint64_t v38 = *(void *)v36;
    *(void *)(v5 + 8) = *((void *)v36 + 1);
    *(void *)(v5 + 16) = v37;
    *(_DWORD *)(v5 + 4) = *((_DWORD *)a3 + 2);
    *(void *)(v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v38;
    int v39 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
    *(void *)(v5 + 8mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v39;
    if (v39) {
      uint64_t v40 = *(void *)v39;
    }
    else {
      uint64_t v40 = 0;
    }
    *(void *)(v5 + 64) = v40;
    *(void *)(v5 + 56) = GTTraceFunc_argumentBytesWithMap(a3, v36[32], a2);
    uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithMap(a3, v36[33], a2);
    *(void *)(v5 + 72) = result;
    *(void *)(v5 + 48) = *((void *)v36 + 2);
  }
  return result;
}

char *GTMTLSMIndirectComputeCommand_processTraceFuncWithMap(char *result, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = result;
  int v5 = *((_DWORD *)a3 + 2);
  if (v5 == -15935)
  {
    *((void *)result + 3) = *a3;
  }
  else if (v5 == -15921)
  {
    uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
    uint64_t v6 = *a3;
    uint64_t v7 = *(void *)result;
    *((void *)v4 + 1) = *((void *)result + 1);
    *((void *)v4 + 2) = v6;
    *((_DWORD *)v4 + 1) = *((_DWORD *)a3 + 2);
    uint64_t v8 = *((void *)result + 2);
    *((void *)v4 + 5) = v7;
    *((void *)v4 + 6) = v8;
  }
  return result;
}

char *GTMTLSMIndirectRenderCommand_processTraceFuncWithMap(char *result, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = result;
  int v5 = *((_DWORD *)a3 + 2);
  if (v5 == -15957)
  {
    *((void *)result + 3) = *a3;
  }
  else if (v5 == -15922)
  {
    uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
    uint64_t v6 = *a3;
    uint64_t v7 = *(void *)result;
    *((void *)v4 + 1) = *((void *)result + 1);
    *((void *)v4 + 2) = v6;
    *((_DWORD *)v4 + 1) = *((_DWORD *)a3 + 2);
    uint64_t v8 = *((void *)result + 2);
    *((void *)v4 + 5) = v7;
    *((void *)v4 + 6) = v8;
  }
  return result;
}

uint64_t GTMTLSMLibrary_processTraceFuncWithMap(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = result;
  int v6 = *((_DWORD *)a3 + 2);
  if (v6 <= -16030)
  {
    if (v6 > -16293)
    {
      if (v6 <= -16096)
      {
        if (v6 == -16292)
        {
          uint64_t v57 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithMap(a3, v57[8], a2);
          *(void *)(v5 + 112) = result;
        }
        else if (v6 == -16291)
        {
          *(void *)(result + 24) = *a3;
        }
      }
      else
      {
        switch(v6)
        {
          case -16095:
            uint64_t v50 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
            uint64_t v51 = *a3;
            uint64_t v52 = *(void *)v50;
            *(void *)(v5 + 8) = *((void *)v50 + 1);
            *(void *)(v5 + 16) = v51;
            *(_DWORD *)(v5 + 4) = *((_DWORD *)a3 + 2);
            *(void *)(v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v52;
            uint64_t v53 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
            *(void *)(v5 + 64) = v53;
            if (v53)
            {
              *(void *)(v5 + 128) = *((void *)v53 + 1);
              *(unsigned char *)(v5 + 16mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v53[16];
            }
            *(unsigned char *)(v5 + 161) = 0;
            unsigned int v34 = v50[24];
LABEL_63:
            uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithMap(a3, v34, a2);
            *(void *)(v5 + 96) = result;
            uint64_t v54 = *(void **)(v5 + 64);
            if (v54) {
              uint64_t v54 = (void *)*v54;
            }
            *(void *)(v5 + 144) = v54;
            break;
          case -16083:
            uint64_t v55 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
            uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithMap(a3, v55[8], a2);
            *(void *)(v5 + 12mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = result;
            break;
          case -16039:
LABEL_23:
            uint64_t v14 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
            uint64_t v15 = *a3;
            uint64_t v16 = *(void *)v14;
            *(void *)(v5 + 8) = *((void *)v14 + 1);
            *(void *)(v5 + 16) = v15;
            *(_DWORD *)(v5 + 4) = *((_DWORD *)a3 + 2);
            *(void *)(v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v16;
            uint64_t v17 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
            *(void *)(v5 + 64) = v17;
            if (v17)
            {
              *(void *)(v5 + 128) = *((void *)v17 + 1);
              *(unsigned char *)(v5 + 16mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v17[16];
            }
            *(unsigned char *)(v5 + 161) = 1;
            uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithMap(a3, v14[24], a2);
            *(void *)(v5 + 96) = result;
            uint64_t v18 = *(void **)(v5 + 64);
            if (v18) {
              uint64_t v18 = (void *)*v18;
            }
            *(void *)(v5 + 136) = v18;
            break;
        }
      }
    }
    else
    {
      switch(v6)
      {
        case -16308:
          uint64_t v30 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t v31 = *a3;
          uint64_t v32 = *(void *)v30;
          *(void *)(v5 + 8) = *((void *)v30 + 1);
          *(void *)(v5 + 16) = v31;
          *(_DWORD *)(v5 + 4) = *((_DWORD *)a3 + 2);
          *(void *)(v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v32;
          uint64_t v33 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *(void *)(v5 + 64) = v33;
          if (v33)
          {
            *(void *)(v5 + 128) = *((void *)v33 + 1);
            *(unsigned char *)(v5 + 16mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v33[16];
          }
          *(unsigned char *)(v5 + 161) = 0;
          unsigned int v34 = v30[16];
          goto LABEL_63;
        case -16307:
          goto LABEL_23;
        case -16306:
          uint64_t v35 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t v36 = *a3;
          uint64_t v37 = *(void *)v35;
          *(void *)(v5 + 8) = *((void *)v35 + 1);
          *(void *)(v5 + 16) = v36;
          *(_DWORD *)(v5 + 4) = *((_DWORD *)a3 + 2);
          *(void *)(v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v37;
          uint64_t v38 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *(void *)(v5 + 64) = v38;
          if (v38)
          {
            *(void *)(v5 + 128) = *((void *)v38 + 1);
            *(unsigned char *)(v5 + 16mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v38[16];
          }
          *(unsigned char *)(v5 + 161) = 3;
          unsigned int v39 = v35[24];
          if (g_loadURLAsMemHeader) {
            uint64_t result = GTTraceFunc_argumentBlobWithMap(a3, v39, a2);
          }
          else {
            uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithMap(a3, v39, a2);
          }
          *(void *)(v5 + 96) = result;
          break;
        case -16305:
        case -16304:
          uint64_t v8 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t v9 = *a3;
          uint64_t v10 = *(void *)v8;
          *(void *)(v5 + 8) = *((void *)v8 + 1);
          *(void *)(v5 + 16) = v9;
          *(_DWORD *)(v5 + 4) = *((_DWORD *)a3 + 2);
          *(void *)(v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v10;
          uint64_t v11 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *(void *)(v5 + 64) = v11;
          if (v11)
          {
            *(void *)(v5 + 128) = *((void *)v11 + 1);
            *(unsigned char *)(v5 + 16mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v11[16];
          }
          *(unsigned char *)(v5 + 161) = 2;
          unsigned int v12 = v8[24];
          if (g_loadURLAsMemHeader) {
            uint64_t v13 = GTTraceFunc_argumentBlobWithMap(a3, v12, a2);
          }
          else {
            uint64_t v13 = (uint64_t)GTTraceFunc_argumentBytesWithMap(a3, v12, a2);
          }
          *(void *)(v5 + 96) = v13;
          uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithMap(a3, v8[25], a2);
          *(void *)(v5 + 104) = result;
          break;
        default:
          return result;
      }
    }
  }
  else
  {
    if (v6 <= -15435)
    {
      if (v6 <= -15848)
      {
        if (v6 != -16029 && v6 != -16018) {
          return result;
        }
        uint64_t v23 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        uint64_t v24 = *a3;
        uint64_t v25 = *(void *)v23;
        *(void *)(v5 + 8) = *((void *)v23 + 1);
        *(void *)(v5 + 16) = v24;
        *(_DWORD *)(v5 + 4) = *((_DWORD *)a3 + 2);
        *(void *)(v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v25;
        long long v26 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
        *(void *)(v5 + 64) = v26;
        if (v26)
        {
          *(void *)(v5 + 128) = *((void *)v26 + 1);
          *(unsigned char *)(v5 + 16mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v26[16];
        }
        *(unsigned char *)(v5 + 161) = 4;
        uint64_t v27 = GTTraceFunc_argumentBytesWithMap(a3, v23[24], a2);
        if (v27)
        {
          uint64_t v28 = *(void *)v27;
          *(void *)(v5 + 48) = v27 + 8;
          *(_DWORD *)(v5 + 152) = v28;
        }
        unsigned int v29 = v23[25];
      }
      else
      {
        if (v6 != -15847)
        {
          if (v6 == -15693)
          {
            unsigned int v44 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
            uint64_t v45 = *a3;
            uint64_t v46 = *(void *)v44;
            *(void *)(v5 + 8) = *((void *)v44 + 1);
            *(void *)(v5 + 16) = v45;
            *(_DWORD *)(v5 + 4) = *((_DWORD *)a3 + 2);
            *(void *)(v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v46;
            uint64_t v47 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
            *(void *)(v5 + 64) = v47;
            if (v47)
            {
              *(void *)(v5 + 128) = *((void *)v47 + 1);
              *(unsigned char *)(v5 + 16mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v47[16];
            }
            *(void *)(v5 + 8mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = GTTraceFunc_argumentBytesWithMap(a3, v44[24], a2);
            uint64_t v48 = GTTraceFunc_argumentBytesWithMap(a3, v44[25], a2);
            uint64_t v49 = *(void *)v48;
            uint64_t result = (uint64_t)(v48 + 8);
            *(void *)(v5 + 88) = result;
            *(_DWORD *)(v5 + 156) = v49;
            goto LABEL_35;
          }
          int v7 = -15435;
          goto LABEL_17;
        }
        uint64_t v40 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        uint64_t v41 = *a3;
        uint64_t v42 = *(void *)v40;
        *(void *)(v5 + 8) = *((void *)v40 + 1);
        *(void *)(v5 + 16) = v41;
        *(_DWORD *)(v5 + 4) = *((_DWORD *)a3 + 2);
        *(void *)(v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v42;
        uint64_t v43 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
        *(void *)(v5 + 64) = v43;
        if (v43)
        {
          *(void *)(v5 + 128) = *((void *)v43 + 1);
          *(unsigned char *)(v5 + 16mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v43[16];
        }
        *(unsigned char *)(v5 + 161) = 5;
        *(void *)(v5 + 48) = GTTraceFunc_argumentBytesWithMap(a3, v40[32], a2);
        *(_DWORD *)(v5 + 152) = *((void *)v40 + 2);
        unsigned int v29 = v40[33];
      }
      uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithMap(a3, v29, a2);
      *(void *)(v5 + 56) = result;
      return result;
    }
    if (v6 <= -15420)
    {
      if (v6 != -15434 && v6 != -15421)
      {
        int v7 = -15420;
LABEL_17:
        if (v6 != v7) {
          return result;
        }
      }
LABEL_32:
      long long v19 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      uint64_t v20 = *a3;
      uint64_t v21 = *(void *)v19;
      *(void *)(v5 + 8) = *((void *)v19 + 1);
      *(void *)(v5 + 16) = v20;
      *(_DWORD *)(v5 + 4) = *((_DWORD *)a3 + 2);
      *(void *)(v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v21;
      uint64_t v22 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
      *(void *)(v5 + 64) = v22;
      if (v22)
      {
        *(void *)(v5 + 128) = *((void *)v22 + 1);
        *(unsigned char *)(v5 + 16mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v22[16];
      }
      uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithMap(a3, v19[24], a2);
      *(void *)(v5 + 72) = result;
      *(void *)(v5 + 88) = *(void *)(result + 8);
      *(_DWORD *)(v5 + 156) = *(unsigned __int16 *)(result + 18);
LABEL_35:
      *(unsigned char *)(v5 + 161) = 6;
      return result;
    }
    switch(v6)
    {
      case -15419:
        goto LABEL_32;
      case -10188:
        unsigned int v56 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithMap(a3, v56[8], a2);
        *(void *)(v5 + 128) = result;
        break;
      case -10183:
        uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        *(unsigned char *)(v5 + 16mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *(void *)(result + 8);
        break;
    }
  }
  return result;
}

char *GTMTLSMDynamicLibrary_processTraceFuncWithMap(char *result, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = result;
  int v6 = *((_DWORD *)a3 + 2);
  if (v6 > -15676)
  {
    if (v6 == -15675)
    {
      *((void *)result + 3) = *a3;
    }
    else if (v6 == -15613)
    {
      uint64_t v8 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      uint64_t v9 = *a3;
      uint64_t v10 = *(void *)v8;
      *((void *)v5 + 1) = *((void *)v8 + 1);
      *((void *)v5 + 2) = v9;
      *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
      *((void *)v5 + 5) = v10;
      uint64_t v11 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
      if (v11)
      {
        *((void *)v5 + 9) = *(void *)v11;
        *(_OWORD *)(v5 + 88) = *(_OWORD *)(v11 + 8);
        *((_WORD *)v5 + 52) = *((_WORD *)v11 + 12);
      }
      uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v8[24], a2);
      *((void *)v5 + 1mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = result;
    }
  }
  else if (v6 == -15695)
  {
    unsigned int v12 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
    uint64_t v13 = *a3;
    uint64_t v14 = *(void *)v12;
    *((void *)v5 + 1) = *((void *)v12 + 1);
    *((void *)v5 + 2) = v13;
    *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
    *((void *)v5 + 5) = v14;
    uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
    if (result)
    {
      *((void *)v5 + 9) = *(void *)result;
      *(_OWORD *)(v5 + 88) = *(_OWORD *)(result + 8);
      *((_WORD *)v5 + 52) = *((_WORD *)result + 12);
    }
    *((void *)v5 + 6) = *((void *)v12 + 2);
  }
  else if (v6 == -15676)
  {
    int v7 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
    uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v7[8], a2);
    *((void *)v5 + 8) = result;
  }
  return result;
}

char *GTMTLSMPipelineLibrary_processTraceFuncWithMap(char *result, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = result;
  int v6 = *((_DWORD *)a3 + 2);
  if (v6 > -15745)
  {
    if (v6 == -15744)
    {
      uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      v5[82] = *((_DWORD *)result + 2);
    }
    else if (v6 == -15743)
    {
      uint64_t v10 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v10[8], a2);
      *((void *)v5 + 7) = result;
    }
  }
  else if (v6 == -16291)
  {
    *((void *)result + 3) = *a3;
  }
  else if (v6 == -16075)
  {
    int v7 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
    uint64_t v8 = *a3;
    uint64_t v9 = *(void *)v7;
    *((void *)v5 + 1) = *((void *)v7 + 1);
    *((void *)v5 + 2) = v8;
    *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
    *((void *)v5 + 5) = v9;
    *((void *)v5 + 6) = GTTraceFunc_argumentBytesWithMap(a3, v7[24], a2);
    uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
    if (result)
    {
      *((_WORD *)v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *((_WORD *)result + 12);
      *((_OWORD *)v5 + 4) = *(_OWORD *)(result + 8);
    }
  }
  return result;
}

char *GTMTLSMIOCommandQueue_processTraceFuncWithMap(char *result, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = result;
  int v5 = *((_DWORD *)a3 + 2);
  if (v5 == -15332)
  {
    *((void *)result + 3) = *a3;
  }
  else if (v5 == -15350)
  {
    int v7 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
    uint64_t v8 = *a3;
    uint64_t v9 = *(void *)v7;
    *((void *)v4 + 1) = *((void *)v7 + 1);
    *((void *)v4 + 2) = v8;
    *((_DWORD *)v4 + 1) = *((_DWORD *)a3 + 2);
    *((void *)v4 + 5) = v9;
    uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v7[24], a2);
    *((void *)v4 + 7) = result;
  }
  return result;
}

char *GTMTLSMCommandQueue_processTraceFuncWithMap(char *result, uint64_t a2, uint64_t *a3)
{
  int v5 = result;
  int v6 = *((_DWORD *)a3 + 2);
  if (v6 <= -16316)
  {
    switch(v6)
    {
      case -16349:
        int v7 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v7[8], a2);
        *((void *)v5 + 6) = result;
        break;
      case -16348:
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        *((_DWORD *)v5 + 17) = *((_DWORD *)result + 2);
        break;
      case -16347:
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        v5[75] = *((_DWORD *)result + 2);
        break;
      case -16346:
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        v5[76] = *((_DWORD *)result + 2);
        break;
      case -16345:
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        v5[74] = *((_DWORD *)result + 2);
        break;
      case -16344:
        *((void *)result + 3) = *a3;
        break;
      default:
        if (v6 == -16316)
        {
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t v12 = *a3;
          uint64_t v13 = *(void *)result;
          *((void *)v5 + 1) = *((void *)result + 1);
          *((void *)v5 + 2) = v12;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          *((void *)v5 + 5) = v13;
          int v11 = 64;
LABEL_12:
          *((_DWORD *)v5 + 16) = v11;
        }
        break;
    }
  }
  else
  {
    switch(v6)
    {
      case -15809:
      case -15808:
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        v5[73] = *((void *)result + 1);
        break;
      case -15807:
        return result;
      case -15806:
      case -15805:
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        v5[72] = *((void *)result + 1);
        break;
      default:
        if (v6 == -16315)
        {
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t v14 = *a3;
          uint64_t v15 = *(void *)result;
          *((void *)v5 + 1) = *((void *)result + 1);
          *((void *)v5 + 2) = v14;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          *((void *)v5 + 5) = v15;
          *((_DWORD *)v5 + 16) = *((void *)result + 2);
        }
        else if (v6 == -16165)
        {
          uint64_t v8 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t v9 = *a3;
          uint64_t v10 = *(void *)v8;
          *((void *)v5 + 1) = *((void *)v8 + 1);
          *((void *)v5 + 2) = v9;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          *((void *)v5 + 5) = v10;
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v8[16], a2);
          *((void *)v5 + 7) = result;
          int v11 = *(_DWORD *)result;
          goto LABEL_12;
        }
        break;
    }
  }
  return result;
}

char *GTMTLSMRasterizationRateMap_processTraceFuncWithMap(char *result, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = result;
  int v5 = *((_DWORD *)a3 + 2);
  switch(v5)
  {
    case -15801:
      *((void *)result + 3) = *a3;
      break;
    case -15411:
      uint64_t v10 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v10[8], a2);
      *((void *)v4 + 6) = result;
      break;
    case -15793:
      int v7 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      uint64_t v8 = *a3;
      uint64_t v9 = *(void *)v7;
      *((void *)v4 + 1) = *((void *)v7 + 1);
      *((void *)v4 + 2) = v8;
      *((_DWORD *)v4 + 1) = *((_DWORD *)a3 + 2);
      *((void *)v4 + 5) = v9;
      uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v7[16], a2);
      *((void *)v4 + 6) = result;
      *((_DWORD *)v4 + 14) = *((_DWORD *)result + 6);
      v4[60] = result[34];
      break;
  }
  return result;
}

char *GTMTLSMDevice_processTraceFuncWithMap(char *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = result;
  int v5 = *(_DWORD *)(a3 + 8);
  if (v5 == -10239)
  {
    int v7 = GTTraceFunc_argumentBytesWithMap((void *)a3, *(unsigned __int8 *)(a3 + 13), a2);
    *((void *)v4 + 1) = *(void *)v7;
    uint64_t result = GTTraceFunc_argumentBytesWithMap((void *)a3, v7[8], a2);
    *((void *)v4 + 5) = result;
  }
  else if (v5 == -16317)
  {
    *((void *)result + 3) = *(void *)a3;
  }
  return result;
}

uint64_t GTMTLSMFilter_processTraceFuncWithMap(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = result;
  int v6 = *((_DWORD *)a3 + 2);
  if (v6 <= -6123)
  {
    switch(v6)
    {
      case -6143:
LABEL_5:
        uint64_t v10 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        uint64_t v11 = *a3;
        uint64_t v12 = *(void *)v10;
        *(void *)(v5 + 8) = *((void *)v10 + 1);
        *(void *)(v5 + 16) = v11;
        uint64_t v13 = *((unsigned int *)a3 + 2);
        *(_DWORD *)(v5 + 4) = v13;
        *(void *)(v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v13;
        *(void *)(v5 + 48) = v12;
        *(void *)(v5 + 56) = GTTraceFunc_argumentBytesWithMap(a3, v10[16], a2);
        uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithMap(a3, v10[24], a2);
        *(void *)(v5 + 64) = result;
        break;
      case -6141:
LABEL_9:
        uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        uint64_t v18 = *a3;
        uint64_t v19 = *(void *)result;
        *(void *)(v5 + 8) = *(void *)(result + 8);
        *(void *)(v5 + 16) = v18;
        uint64_t v20 = *((unsigned int *)a3 + 2);
        *(_DWORD *)(v5 + 4) = v20;
        *(void *)(v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v20;
        *(void *)(v5 + 48) = v19;
        *(void *)(v5 + 56) = *(void *)(result + 16);
        *(void *)(v5 + 64) = *(void *)(result + 24);
        *(void *)(v5 + 72) = *(void *)(result + 32);
        *(void *)(v5 + 8mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *(void *)(result + 40);
        break;
      case -6139:
        *(void *)(result + 24) = *a3;
        break;
      case -6134:
        uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        uint64_t v28 = *a3;
        uint64_t v29 = *(void *)result;
        *(void *)(v5 + 8) = *(void *)(result + 8);
        *(void *)(v5 + 16) = v28;
        uint64_t v30 = *((unsigned int *)a3 + 2);
        *(_DWORD *)(v5 + 4) = v30;
        *(void *)(v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v30;
        *(void *)(v5 + 48) = v29;
        *(unsigned char *)(v5 + 96) = *(_DWORD *)(result + 16);
        *(void *)(v5 + 56) = *(void *)(result + 24);
        *(void *)(v5 + 64) = *(void *)(result + 32);
        *(void *)(v5 + 8mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *(void *)(result + 40);
        uint64_t v24 = *(void *)(result + 48);
LABEL_14:
        *(void *)(v5 + 88) = v24;
        break;
      case -6133:
        uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        uint64_t v31 = *a3;
        uint64_t v32 = *(void *)result;
        *(void *)(v5 + 8) = *(void *)(result + 8);
        *(void *)(v5 + 16) = v31;
        uint64_t v33 = *((unsigned int *)a3 + 2);
        *(_DWORD *)(v5 + 4) = v33;
        *(void *)(v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v33;
        *(void *)(v5 + 48) = v32;
        *(void *)(v5 + 56) = *(int *)(result + 16);
        *(_DWORD *)(v5 + 64) = *(_DWORD *)(result + 20);
        *(_DWORD *)(v5 + 68) = *(_DWORD *)(result + 24);
        *(_DWORD *)(v5 + 72) = *(_DWORD *)(result + 28);
        break;
      case -6131:
        unsigned int v34 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        uint64_t v35 = *a3;
        uint64_t v36 = *(void *)v34;
        *(void *)(v5 + 8) = *((void *)v34 + 1);
        *(void *)(v5 + 16) = v35;
        uint64_t v37 = *((unsigned int *)a3 + 2);
        *(_DWORD *)(v5 + 4) = v37;
        *(void *)(v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v37;
        *(void *)(v5 + 48) = v36;
        *(void *)(v5 + 56) = GTTraceFunc_argumentBytesWithMap(a3, v34[16], a2);
        uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithMap(a3, v34[24], a2);
        *(void *)(v5 + 64) = result;
        *(unsigned char *)(v5 + 72) = *((_DWORD *)v34 + 8);
        break;
      case -6129:
        uint64_t v38 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        uint64_t v39 = *a3;
        uint64_t v40 = *(void *)v38;
        *(void *)(v5 + 8) = *((void *)v38 + 1);
        *(void *)(v5 + 16) = v39;
        uint64_t v41 = *((unsigned int *)a3 + 2);
        *(_DWORD *)(v5 + 4) = v41;
        *(void *)(v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v41;
        *(void *)(v5 + 48) = v40;
        *(void *)(v5 + 56) = *((int *)v38 + 4);
        unsigned int v42 = v38[24];
        if (g_loadURLAsMemHeader) {
          uint64_t result = GTTraceFunc_argumentBlobWithMap(a3, v42, a2);
        }
        else {
          uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithMap(a3, v42, a2);
        }
        *(void *)(v5 + 72) = result;
        *(void *)(v5 + 64) = *((void *)v38 + 4);
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case -6122:
        uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        uint64_t v21 = *a3;
        uint64_t v22 = *(void *)result;
        *(void *)(v5 + 8) = *(void *)(result + 8);
        *(void *)(v5 + 16) = v21;
        uint64_t v23 = *((unsigned int *)a3 + 2);
        *(_DWORD *)(v5 + 4) = v23;
        *(void *)(v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v23;
        *(void *)(v5 + 48) = v22;
        *(unsigned char *)(v5 + 96) = *(_DWORD *)(result + 16);
        *(unsigned char *)(v5 + 97) = *(_DWORD *)(result + 20);
        *(void *)(v5 + 56) = *(void *)(result + 24);
        *(void *)(v5 + 64) = *(void *)(result + 32);
        *(void *)(v5 + 72) = *(void *)(result + 40);
        *(void *)(v5 + 8mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *(void *)(result + 48);
        uint64_t v24 = *(void *)(result + 56);
        goto LABEL_14;
      case -6121:
      case -6120:
      case -6118:
      case -6117:
      case -6115:
      case -6114:
      case -6113:
      case -6112:
        return result;
      case -6119:
      case -6110:
        uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        uint64_t v7 = *a3;
        uint64_t v8 = *(void *)result;
        *(void *)(v5 + 8) = *(void *)(result + 8);
        *(void *)(v5 + 16) = v7;
        uint64_t v9 = *((unsigned int *)a3 + 2);
        *(_DWORD *)(v5 + 4) = v9;
        *(void *)(v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v9;
        *(void *)(v5 + 48) = v8;
        break;
      case -6116:
        uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        uint64_t v25 = *a3;
        uint64_t v26 = *(void *)result;
        *(void *)(v5 + 8) = *(void *)(result + 8);
        *(void *)(v5 + 16) = v25;
        uint64_t v27 = *((unsigned int *)a3 + 2);
        *(_DWORD *)(v5 + 4) = v27;
        *(void *)(v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v27;
        *(void *)(v5 + 48) = v26;
        *(void *)(v5 + 56) = *(void *)(result + 16);
        *(void *)(v5 + 64) = *(void *)(result + 24);
        *(void *)(v5 + 72) = *(void *)(result + 32);
        *(void *)(v5 + 8mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *(void *)(result + 40);
        *(void *)(v5 + 88) = *(void *)(result + 48);
        *(void *)(v5 + 96) = *(void *)(result + 56);
        break;
      case -6111:
        goto LABEL_5;
      case -6109:
        goto LABEL_9;
      default:
        if (v6 == -6096 || v6 == -6095)
        {
          uint64_t v14 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t v15 = *a3;
          uint64_t v16 = *(void *)v14;
          *(void *)(v5 + 8) = *((void *)v14 + 1);
          *(void *)(v5 + 16) = v15;
          uint64_t v17 = *((unsigned int *)a3 + 2);
          *(_DWORD *)(v5 + 4) = v17;
          *(void *)(v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v17;
          *(void *)(v5 + 48) = v16;
          uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithMap(a3, v14[16], a2);
          *(void *)(v5 + 56) = result;
        }
        break;
    }
  }
  return result;
}

char *GTMTLSMResourceGroup_processTraceFuncWithMap(char *result, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = result;
  int v5 = *((_DWORD *)a3 + 2);
  if (v5 == -15769)
  {
    *((void *)result + 3) = *a3;
  }
  else if (v5 == -15900)
  {
    uint64_t v7 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
    uint64_t v8 = *a3;
    uint64_t v9 = *(void *)v7;
    *((void *)v4 + 1) = *((void *)v7 + 1);
    *((void *)v4 + 2) = v8;
    *((_DWORD *)v4 + 1) = *((_DWORD *)a3 + 2);
    *((void *)v4 + 5) = v9;
    uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v7[24], a2);
    *((void *)v4 + 6) = result;
    *((_DWORD *)v4 + 14) = *((void *)v7 + 2);
  }
  return result;
}

char *GTMTLSMDrawable_processTraceFuncWithMap(char *result, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = result;
  int v5 = *((_DWORD *)a3 + 2);
  if (v5 > -7162)
  {
    if (v5 == -7161)
    {
      *((void *)result + 3) = *a3;
    }
    else if (v5 == -6655)
    {
      uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      uint64_t v8 = *a3;
      *((void *)v4 + 1) = *((void *)result + 1);
      *((void *)v4 + 2) = v8;
      *((_DWORD *)v4 + 1) = *((_DWORD *)a3 + 2);
    }
  }
  else if (v5 == -7167)
  {
    uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
    *((void *)v4 + 6) = *((void *)result + 1);
  }
  else if (v5 == -7166)
  {
    uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
    uint64_t v6 = *a3;
    uint64_t v7 = *(void *)result;
    *((void *)v4 + 1) = *((void *)result + 1);
    *((void *)v4 + 2) = v6;
    *((_DWORD *)v4 + 1) = *((_DWORD *)a3 + 2);
    *((void *)v4 + 5) = v7;
  }
  return result;
}

uint64_t GTMTLSMLayer_processTraceFuncWithMap(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = result;
  int v6 = *((_DWORD *)a3 + 2);
  switch(v6)
  {
    case -7165:
      uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      *(_WORD *)(v5 + 272) = *(void *)(result + 8);
      break;
    case -7164:
      uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      *(void *)(v5 + 176) = *(void *)(result + 8);
      *(void *)(v5 + 184) = *(void *)(result + 16);
      break;
    case -7163:
      uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      uint64_t v7 = *a3;
      uint64_t v8 = *(void *)(result + 8);
      *(void *)(v5 + 8) = *(void *)result;
      *(void *)(v5 + 16) = v7;
      *(void *)(v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v8;
      break;
    case -7162:
      uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      for (uint64_t i = 0; i != 32; i += 8)
        *(void *)(v5 + 216 + i) = *(void *)(result + 8 + i);
      goto LABEL_14;
    case -7161:
    case -7158:
    case -7157:
    case -7156:
    case -7155:
      return result;
    case -7160:
      uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      *(unsigned char *)(v5 + 274) = *(_DWORD *)(result + 8);
      break;
    case -7159:
      uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      for (uint64_t j = 0; j != 32; j += 8)
        *(void *)(v5 + 216 + j) = *(void *)(result + 8 + j);
LABEL_14:
      *(void *)(v5 + 208) = *(void *)(result + 40);
      break;
    case -7154:
      uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      *(unsigned char *)(v5 + 275) = *(_DWORD *)(result + 8);
      break;
    case -7153:
      unsigned int v11 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2)[8];
      if (g_loadURLAsMemHeader) {
        uint64_t result = GTTraceFunc_argumentBlobWithMap(a3, v11, a2);
      }
      else {
        uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithMap(a3, v11, a2);
      }
      *(void *)(v5 + 264) = result;
      break;
    default:
      if (v6 == -8183)
      {
        uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        for (uint64_t k = 0; k != 128; k += 8)
          *(void *)(v5 + 48 + k) = *(void *)(result + 8 + k);
        *(_OWORD *)(v5 + 248) = *(_OWORD *)(result + 136);
      }
      else if (v6 == -8181)
      {
        uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        *(void *)(v5 + 192) = *(void *)(result + 8);
        *(void *)(v5 + 20mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *(void *)(result + 16);
      }
      break;
  }
  return result;
}

char *GTMTLSMAccelerationStructure_processTraceFuncWithMap(char *result, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = result;
  int v6 = *((_DWORD *)a3 + 2);
  if (v6 <= -10198)
  {
    if (v6 > -15507)
    {
      switch(v6)
      {
        case -15359:
          uint64_t v8 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t v9 = *a3;
          *((void *)v5 + 1) = *((void *)v8 + 1);
          *((void *)v5 + 2) = v9;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((void *)v5 + 15) = result;
          if (result)
          {
            uint64_t v10 = *((void *)result + 1);
            *((void *)v5 + 7) = *(void *)result;
            *((_DWORD *)v5 + 22) = *((_DWORD *)result + 4);
            uint64_t v11 = *((void *)result + 4);
            *((void *)v5 + 16) = *((void *)result + 3);
            *((void *)v5 + 23) = v11;
            uint64_t v12 = *((void *)result + 9);
            *((_WORD *)v5 + 48) = *((_WORD *)result + 32);
            *((void *)v5 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v12;
            long long v13 = *((_OWORD *)result + 5);
            *(_OWORD *)(v5 + 168) = v13;
            *((_DWORD *)v5 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v12 - v13;
            *((_DWORD *)v5 + 21) = v10;
            *((void *)v5 + 24) = *((void *)result + 12);
            *((void *)v5 + 17) = *((void *)result + 7);
          }
          *((void *)v5 + 5) = *(void *)v8;
          uint64_t v14 = *((void *)v8 + 2);
          *((void *)v5 + 25) = *((void *)v8 + 3);
          uint64_t v15 = *((void *)v8 + 4);
          *((void *)v5 + 18) = v14;
          *((void *)v5 + 19) = v15;
          return result;
        case -15358:
          goto LABEL_31;
        case -15357:
          return result;
        case -15356:
          unsigned int v42 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t v43 = *a3;
          *((void *)v5 + 1) = *((void *)v42 + 1);
          *((void *)v5 + 2) = v43;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((void *)v5 + 15) = result;
          if (result)
          {
            uint64_t v44 = *((void *)result + 1);
            *((void *)v5 + 7) = *(void *)result;
            *((_DWORD *)v5 + 22) = *((_DWORD *)result + 4);
            uint64_t v45 = *((void *)result + 4);
            *((void *)v5 + 16) = *((void *)result + 3);
            *((void *)v5 + 23) = v45;
            uint64_t v46 = *((void *)result + 5);
            *((void *)v5 + 25) = *((void *)result + 6);
            *((_WORD *)v5 + 48) = *((_WORD *)result + 32);
            uint64_t v47 = *((void *)result + 9);
            *((void *)v5 + 19) = v46;
            *((void *)v5 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v47;
            long long v48 = *((_OWORD *)result + 5);
            *(_OWORD *)(v5 + 168) = v48;
            *((_DWORD *)v5 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v47 - v48;
            *((_DWORD *)v5 + 21) = v44;
            *((void *)v5 + 24) = *((void *)result + 12);
            *((void *)v5 + 17) = *((void *)result + 7);
          }
          goto LABEL_62;
        case -15355:
          unsigned int v42 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t v49 = *a3;
          *((void *)v5 + 1) = *((void *)v42 + 1);
          *((void *)v5 + 2) = v49;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((void *)v5 + 15) = result;
          if (result)
          {
            uint64_t v50 = *((void *)result + 1);
            *((void *)v5 + 7) = *(void *)result;
            int v51 = *((_DWORD *)result + 4);
            *((_DWORD *)v5 + 21) = v50;
            *((_DWORD *)v5 + 22) = v51;
            uint64_t v52 = *((void *)result + 4);
            *((void *)v5 + 16) = *((void *)result + 3);
            uint64_t v53 = *((void *)result + 6);
            *((void *)v5 + 19) = *((void *)result + 5);
            *((void *)v5 + 23) = v52;
            *((void *)v5 + 25) = v53;
            *((_WORD *)v5 + 48) = *((_WORD *)result + 32);
            *((_OWORD *)v5 + 1mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *(_OWORD *)(result + 72);
            uint64_t v54 = *((void *)result + 12);
            *((void *)v5 + 22) = *((void *)result + 11);
            *((void *)v5 + 24) = v54;
            *((void *)v5 + 17) = *((void *)result + 7);
          }
          *((_DWORD *)v5 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *((void *)v42 + 2);
LABEL_62:
          *((void *)v5 + 6) = *(void *)v42;
          return result;
        case -15354:
          uint64_t v33 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t v55 = *a3;
          *((void *)v5 + 1) = *((void *)v33 + 1);
          *((void *)v5 + 2) = v55;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((void *)v5 + 15) = result;
          if (result)
          {
            uint64_t v56 = *((void *)result + 1);
            *((void *)v5 + 7) = *(void *)result;
            *((_DWORD *)v5 + 22) = *((_DWORD *)result + 4);
            *((void *)v5 + 16) = *((void *)result + 3);
            uint64_t v57 = *((void *)result + 5);
            *((void *)v5 + 25) = *((void *)result + 6);
            *((_WORD *)v5 + 48) = *((_WORD *)result + 32);
            uint64_t v58 = *((void *)result + 9);
            *((void *)v5 + 19) = v57;
            *((void *)v5 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v58;
            long long v59 = *((_OWORD *)result + 5);
            *(_OWORD *)(v5 + 168) = v59;
            *((_DWORD *)v5 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v58 - v59;
            *((_DWORD *)v5 + 21) = v56;
            *((void *)v5 + 24) = *((void *)result + 12);
            *((void *)v5 + 17) = *((void *)result + 7);
          }
          *((void *)v5 + 6) = *(void *)v33;
          goto LABEL_66;
        case -15353:
          int v60 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t v61 = *a3;
          *((void *)v5 + 1) = *((void *)v60 + 1);
          *((void *)v5 + 2) = v61;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((void *)v5 + 15) = result;
          if (result)
          {
            uint64_t v62 = *((void *)result + 1);
            *((void *)v5 + 7) = *(void *)result;
            int v63 = *((_DWORD *)result + 4);
            *((_DWORD *)v5 + 21) = v62;
            *((_DWORD *)v5 + 22) = v63;
            *((void *)v5 + 16) = *((void *)result + 3);
            uint64_t v64 = *((void *)result + 6);
            *((void *)v5 + 19) = *((void *)result + 5);
            *((void *)v5 + 25) = v64;
            *((_WORD *)v5 + 48) = *((_WORD *)result + 32);
            *((_OWORD *)v5 + 1mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *(_OWORD *)(result + 72);
            uint64_t v65 = *((void *)result + 12);
            *((void *)v5 + 22) = *((void *)result + 11);
            *((void *)v5 + 24) = v65;
            *((void *)v5 + 17) = *((void *)result + 7);
          }
          *((void *)v5 + 6) = *(void *)v60;
          uint64_t v66 = *((void *)v60 + 2);
          *((_DWORD *)v5 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *((void *)v60 + 3);
          *((void *)v5 + 23) = v66;
          return result;
        case -15352:
          uint64_t v67 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t v68 = *a3;
          *((void *)v5 + 1) = *((void *)v67 + 1);
          *((void *)v5 + 2) = v68;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((void *)v5 + 15) = result;
          if (result)
          {
            uint64_t v69 = *((void *)result + 1);
            *((void *)v5 + 7) = *(void *)result;
            int v70 = *((_DWORD *)result + 4);
            *((_DWORD *)v5 + 21) = v69;
            *((_DWORD *)v5 + 22) = v70;
            *((void *)v5 + 16) = *((void *)result + 3);
            *((void *)v5 + 25) = *((void *)result + 6);
            *((_WORD *)v5 + 48) = *((_WORD *)result + 32);
            *((_OWORD *)v5 + 1mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *(_OWORD *)(result + 72);
            uint64_t v71 = *((void *)result + 12);
            *((void *)v5 + 22) = *((void *)result + 11);
            *((void *)v5 + 24) = v71;
            *((void *)v5 + 17) = *((void *)result + 7);
          }
          *((void *)v5 + 6) = *(void *)v67;
          uint64_t v72 = *((void *)v67 + 2);
          *((_DWORD *)v5 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *((void *)v67 + 3);
          *((void *)v5 + 23) = v72;
          uint64_t v39 = *((void *)v67 + 4);
          goto LABEL_73;
        case -15351:
          int v73 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t v74 = *a3;
          *((void *)v5 + 1) = *((void *)v73 + 1);
          *((void *)v5 + 2) = v74;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((void *)v5 + 15) = result;
          if (result)
          {
            uint64_t v75 = *((void *)result + 1);
            *((void *)v5 + 7) = *(void *)result;
            *((_DWORD *)v5 + 22) = *((_DWORD *)result + 4);
            *((void *)v5 + 16) = *((void *)result + 3);
            *((void *)v5 + 25) = *((void *)result + 6);
            uint64_t v76 = *((void *)result + 9);
            *((_WORD *)v5 + 48) = *((_WORD *)result + 32);
            *((void *)v5 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v76;
            long long v77 = *((_OWORD *)result + 5);
            *(_OWORD *)(v5 + 168) = v77;
            *((_DWORD *)v5 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v76 - v77;
            *((_DWORD *)v5 + 21) = v75;
            *((void *)v5 + 24) = *((void *)result + 12);
            *((void *)v5 + 17) = *((void *)result + 7);
          }
          *((void *)v5 + 6) = *(void *)v73;
          goto LABEL_80;
        default:
          if (v6 == -15506)
          {
            int v73 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
            uint64_t v78 = *a3;
            *((void *)v5 + 1) = *((void *)v73 + 1);
            *((void *)v5 + 2) = v78;
            *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
            uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
            *((void *)v5 + 15) = result;
            if (result)
            {
              uint64_t v79 = *((void *)result + 1);
              *((void *)v5 + 7) = *(void *)result;
              *((_DWORD *)v5 + 22) = *((_DWORD *)result + 4);
              *((void *)v5 + 16) = *((void *)result + 3);
              *((void *)v5 + 25) = *((void *)result + 6);
              uint64_t v80 = *((void *)result + 9);
              *((_WORD *)v5 + 48) = *((_WORD *)result + 32);
              *((void *)v5 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v80;
              long long v81 = *((_OWORD *)result + 5);
              *(_OWORD *)(v5 + 168) = v81;
              *((_DWORD *)v5 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v80 - v81;
              *((_DWORD *)v5 + 21) = v79;
              *((void *)v5 + 24) = *((void *)result + 12);
              *((void *)v5 + 17) = *((void *)result + 7);
            }
            *((void *)v5 + 5) = *(void *)v73;
LABEL_80:
            uint64_t v82 = *((void *)v73 + 3);
            *((void *)v5 + 23) = *((void *)v73 + 2);
            *((void *)v5 + 19) = v82;
          }
          else if (v6 == -15464)
          {
            uint64_t v24 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
            uint64_t v25 = *a3;
            *((void *)v5 + 1) = *((void *)v24 + 1);
            *((void *)v5 + 2) = v25;
            *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
            uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
            *((void *)v5 + 15) = result;
            if (result)
            {
              uint64_t v26 = *((void *)result + 1);
              *((void *)v5 + 7) = *(void *)result;
              *((_DWORD *)v5 + 22) = *((_DWORD *)result + 4);
              uint64_t v27 = *((void *)result + 4);
              *((void *)v5 + 16) = *((void *)result + 3);
              uint64_t v28 = *((void *)result + 5);
              *((void *)v5 + 23) = v27;
              *((_WORD *)v5 + 48) = *((_WORD *)result + 32);
              uint64_t v29 = *((void *)result + 9);
              *((void *)v5 + 19) = v28;
              *((void *)v5 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v29;
              long long v30 = *((_OWORD *)result + 5);
              *(_OWORD *)(v5 + 168) = v30;
              *((_DWORD *)v5 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v29 - v30;
              *((_DWORD *)v5 + 21) = v26;
              *((void *)v5 + 24) = *((void *)result + 12);
              *((void *)v5 + 17) = *((void *)result + 7);
            }
            *((void *)v5 + 5) = *(void *)v24;
            uint64_t v31 = *((void *)v24 + 3);
            *((void *)v5 + 18) = *((void *)v24 + 2);
            *((void *)v5 + 25) = v31;
          }
          break;
      }
    }
    else if (v6 > -15616)
    {
      switch(v6)
      {
        case -15615:
LABEL_31:
          uint64_t v17 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t v18 = *a3;
          *((void *)v5 + 1) = *((void *)v17 + 1);
          *((void *)v5 + 2) = v18;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((void *)v5 + 15) = result;
          if (result)
          {
            uint64_t v19 = *((void *)result + 1);
            *((void *)v5 + 7) = *(void *)result;
            *((_DWORD *)v5 + 22) = *((_DWORD *)result + 4);
            uint64_t v20 = *((void *)result + 4);
            *((void *)v5 + 16) = *((void *)result + 3);
            *((void *)v5 + 23) = v20;
            uint64_t v21 = *((void *)result + 5);
            *((void *)v5 + 25) = *((void *)result + 6);
            *((_WORD *)v5 + 48) = *((_WORD *)result + 32);
            uint64_t v22 = *((void *)result + 9);
            *((void *)v5 + 19) = v21;
            *((void *)v5 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v22;
            long long v23 = *((_OWORD *)result + 5);
            *(_OWORD *)(v5 + 168) = v23;
            *((_DWORD *)v5 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v22 - v23;
            *((_DWORD *)v5 + 21) = v19;
            *((void *)v5 + 24) = *((void *)result + 12);
            *((void *)v5 + 17) = *((void *)result + 7);
          }
          *((void *)v5 + 5) = *(void *)v17;
          break;
        case -15614:
          uint64_t v33 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t v34 = *a3;
          *((void *)v5 + 1) = *((void *)v33 + 1);
          *((void *)v5 + 2) = v34;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((void *)v5 + 15) = result;
          if (result)
          {
            uint64_t v35 = *((void *)result + 1);
            *((void *)v5 + 7) = *(void *)result;
            *((_DWORD *)v5 + 22) = *((_DWORD *)result + 4);
            *((void *)v5 + 16) = *((void *)result + 3);
            uint64_t v36 = *((void *)result + 5);
            *((void *)v5 + 25) = *((void *)result + 6);
            *((_WORD *)v5 + 48) = *((_WORD *)result + 32);
            uint64_t v37 = *((void *)result + 9);
            *((void *)v5 + 19) = v36;
            *((void *)v5 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v37;
            long long v38 = *((_OWORD *)result + 5);
            *(_OWORD *)(v5 + 168) = v38;
            *((_DWORD *)v5 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v37 - v38;
            *((_DWORD *)v5 + 21) = v35;
            *((void *)v5 + 24) = *((void *)result + 12);
            *((void *)v5 + 17) = *((void *)result + 7);
          }
          *((void *)v5 + 5) = *(void *)v33;
LABEL_66:
          *((void *)v5 + 23) = *((void *)v33 + 2);
          break;
        case -15552:
          uint64_t v16 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v16[8], a2);
          *((void *)v5 + 14) = result;
          if (result)
          {
            v5[104] = (*result & 0xFE) == 2;
            v5[105] = 1;
            v5[107] = (result[1] & 4) != 0;
          }
          break;
      }
    }
    else
    {
      switch(v6)
      {
        case -15661:
          uint64_t v7 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v7[8], a2);
          *((void *)v5 + 9) = result;
          break;
        case -15660:
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          *((_DWORD *)v5 + 22) = *((_DWORD *)result + 2);
          break;
        case -15659:
          *((void *)result + 3) = *a3;
          break;
        case -15651:
          result[100] = 1;
          break;
        case -15650:
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t v32 = *((void *)result + 2);
          if (v32 != 1) {
            *((_WORD *)v5 + 49) = v32;
          }
          break;
        default:
          return result;
      }
    }
    return result;
  }
  if (v6 > -10174)
  {
    if (v6 <= -10160)
    {
      switch(v6)
      {
        case -10173:
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          *((void *)v5 + 8) = *((void *)result + 1);
          break;
        case -10170:
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t v39 = *((void *)result + 1);
LABEL_73:
          *((void *)v5 + 19) = v39;
          break;
        case -10169:
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          *((_DWORD *)v5 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *((void *)result + 1);
          break;
        case -10167:
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          *((void *)v5 + 17) = *((void *)result + 1);
          break;
        default:
          return result;
      }
      return result;
    }
    if (v6 == -10159)
    {
      uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      int16x8_t v41 = *(int16x8_t *)(result + 8);
    }
    else
    {
      if (v6 != -10158)
      {
        if (v6 == -10154)
        {
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          if (*((void *)v5 + 1) == *((void *)result + 1))
          {
            uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, result[16], a2);
            *((void *)v5 + 14) = result;
          }
        }
        return result;
      }
      uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      if (*((void *)v5 + 1) != *((void *)result + 1)) {
        return result;
      }
      int16x8_t v41 = *((int16x8_t *)result + 1);
    }
    *(int16x4_t *)v41.i8 = vmovn_s32((int32x4_t)v41);
    *((_DWORD *)v5 + 26) = vmovn_s16(v41).u32[0];
    return result;
  }
  if (v6 <= -10196)
  {
    if (v6 == -10197)
    {
      uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      *((void *)v5 + 7) = *((void *)result + 1);
    }
    else
    {
      uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      *((_DWORD *)v5 + 21) = *((void *)result + 1);
    }
  }
  else
  {
    switch(v6)
    {
      case -10195:
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        *((_DWORD *)v5 + 23) = *((_DWORD *)result + 2);
        break;
      case -10182:
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        *((_OWORD *)v5 + 1mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *(_OWORD *)(result + 8);
        uint64_t v40 = *((void *)result + 4);
        *((void *)v5 + 22) = *((void *)result + 3);
        *((_WORD *)v5 + 48) = v40;
        *((_OWORD *)v5 + 12) = *(_OWORD *)(result + 40);
        break;
      case -10181:
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        *((void *)v5 + 16) = *((void *)result + 1);
        break;
    }
  }
  return result;
}

char *GTMTLSMFunctionHandle_processTraceFuncWithMap(char *result, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = result;
  int v5 = *((_DWORD *)a3 + 2);
  if (v5 > -15445)
  {
    switch(v5)
    {
      case -15444:
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        uint64_t v14 = *a3;
        uint64_t v15 = *(void *)result;
        *((void *)v4 + 1) = *((void *)result + 1);
        *((void *)v4 + 2) = v14;
        *((_DWORD *)v4 + 1) = *((_DWORD *)a3 + 2);
        *((void *)v4 + 7) = v15;
        *((void *)v4 + 5) = *((void *)result + 2);
        char v11 = 2;
        break;
      case -15437:
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        uint64_t v16 = *a3;
        uint64_t v17 = *(void *)result;
        *((void *)v4 + 1) = *((void *)result + 1);
        *((void *)v4 + 2) = v16;
        *((_DWORD *)v4 + 1) = *((_DWORD *)a3 + 2);
        *((void *)v4 + 7) = v17;
        *((void *)v4 + 5) = *((void *)result + 2);
        char v11 = 4;
        break;
      case -15436:
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        uint64_t v9 = *a3;
        uint64_t v10 = *(void *)result;
        *((void *)v4 + 1) = *((void *)result + 1);
        *((void *)v4 + 2) = v9;
        *((_DWORD *)v4 + 1) = *((_DWORD *)a3 + 2);
        *((void *)v4 + 7) = v10;
        *((void *)v4 + 5) = *((void *)result + 2);
        char v11 = 1;
        break;
      default:
        return result;
    }
    v4[64] = v11;
  }
  else
  {
    switch(v5)
    {
      case -15620:
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        uint64_t v12 = *a3;
        uint64_t v13 = *(void *)result;
        *((void *)v4 + 1) = *((void *)result + 1);
        *((void *)v4 + 2) = v12;
        *((_DWORD *)v4 + 1) = *((_DWORD *)a3 + 2);
        *((void *)v4 + 5) = *((void *)result + 2);
        *((void *)v4 + 6) = v13;
        break;
      case -15610:
        *((void *)result + 3) = *a3;
        break;
      case -15463:
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        uint64_t v6 = *a3;
        uint64_t v7 = *(void *)result;
        *((void *)v4 + 1) = *((void *)result + 1);
        *((void *)v4 + 2) = v6;
        *((_DWORD *)v4 + 1) = *((_DWORD *)a3 + 2);
        *((void *)v4 + 7) = v7;
        uint64_t v8 = *((void *)result + 3);
        *((void *)v4 + 5) = *((void *)result + 2);
        v4[64] = v8;
        break;
    }
  }
  return result;
}

char *GTMTLSMIntersectionFunctionTable_processTraceFuncWithMap(char *result, uint64_t a2, uint64_t *a3)
{
  int v5 = result;
  int v6 = *((_DWORD *)a3 + 2);
  if (v6 > -15444)
  {
    if (v6 <= -10181)
    {
      switch(v6)
      {
        case -15443:
          long long v30 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t v31 = *a3;
          *((void *)v5 + 1) = *((void *)v30 + 1);
          *((void *)v5 + 2) = v31;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          uint64_t v32 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((void *)v5 + 14) = v32;
          if (v32)
          {
            uint64_t v33 = *((void *)v32 + 1);
            *((void *)v5 + 7) = *(void *)v32;
            int v34 = *((_DWORD *)v32 + 4);
            *((_DWORD *)v5 + 21) = v33;
            *((_DWORD *)v5 + 22) = v34;
            *(int8x16_t *)(v5 + 136) = vextq_s8(*(int8x16_t *)(v32 + 24), *(int8x16_t *)(v32 + 24), 8uLL);
            *((void *)v5 + 19) = *((void *)v32 + 5);
          }
          *((void *)v5 + 16) = *(void *)v30;
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v30[16], a2);
          *((void *)v5 + 13) = result;
          char v18 = 2;
          break;
        case -15442:
          uint64_t v25 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t v26 = *a3;
          *((void *)v5 + 1) = *((void *)v25 + 1);
          *((void *)v5 + 2) = v26;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          uint64_t v27 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((void *)v5 + 14) = v27;
          if (v27)
          {
            uint64_t v28 = *((void *)v27 + 1);
            *((void *)v5 + 7) = *(void *)v27;
            int v29 = *((_DWORD *)v27 + 4);
            *((_DWORD *)v5 + 21) = v28;
            *((_DWORD *)v5 + 22) = v29;
            *(int8x16_t *)(v5 + 136) = vextq_s8(*(int8x16_t *)(v27 + 24), *(int8x16_t *)(v27 + 24), 8uLL);
            *((void *)v5 + 19) = *((void *)v27 + 5);
          }
          *((void *)v5 + 16) = *(void *)v25;
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v25[16], a2);
          *((void *)v5 + 13) = result;
          char v18 = 4;
          break;
        case -15441:
          uint64_t v13 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          uint64_t v14 = *a3;
          *((void *)v5 + 1) = *((void *)v13 + 1);
          *((void *)v5 + 2) = v14;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          uint64_t v15 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((void *)v5 + 14) = v15;
          if (v15)
          {
            uint64_t v16 = *((void *)v15 + 1);
            *((void *)v5 + 7) = *(void *)v15;
            int v17 = *((_DWORD *)v15 + 4);
            *((_DWORD *)v5 + 21) = v16;
            *((_DWORD *)v5 + 22) = v17;
            *(int8x16_t *)(v5 + 136) = vextq_s8(*(int8x16_t *)(v15 + 24), *(int8x16_t *)(v15 + 24), 8uLL);
            *((void *)v5 + 19) = *((void *)v15 + 5);
          }
          *((void *)v5 + 16) = *(void *)v13;
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v13[16], a2);
          *((void *)v5 + 13) = result;
          char v18 = 1;
          break;
        default:
          return result;
      }
      v5[160] = v18;
    }
    else
    {
      switch(v6)
      {
        case -10180:
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          *((void *)v5 + 8) = *((void *)result + 1);
          break;
        case -10179:
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          *((_DWORD *)v5 + 21) = *((void *)result + 1);
          break;
        case -10178:
        case -10177:
          return result;
        case -10176:
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          *((void *)v5 + 7) = *((void *)result + 1);
          break;
        case -10175:
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          *((void *)v5 + 18) = *((void *)result + 1);
          break;
        default:
          if (v6 == -10161)
          {
            uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
            *((void *)v5 + 19) = *((void *)result + 1);
          }
          break;
      }
    }
  }
  else if (v6 > -15561)
  {
    if (v6 > -15541)
    {
      if (v6 == -15540)
      {
        uint64_t v7 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        uint64_t v35 = *a3;
        *((void *)v5 + 1) = *((void *)v7 + 1);
        *((void *)v5 + 2) = v35;
        *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
        uint64_t v36 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
        *((void *)v5 + 14) = v36;
        if (v36)
        {
          uint64_t v37 = *((void *)v36 + 1);
          *((void *)v5 + 7) = *(void *)v36;
          int v38 = *((_DWORD *)v36 + 4);
          *((_DWORD *)v5 + 21) = v37;
          *((_DWORD *)v5 + 22) = v38;
          *(int8x16_t *)(v5 + 136) = vextq_s8(*(int8x16_t *)(v36 + 24), *(int8x16_t *)(v36 + 24), 8uLL);
          *((void *)v5 + 19) = *((void *)v36 + 5);
        }
        *((void *)v5 + 15) = *(void *)v7;
LABEL_45:
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v7[16], a2);
        *((void *)v5 + 13) = result;
      }
      else if (v6 == -15462)
      {
        uint64_t v19 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        uint64_t v20 = *a3;
        *((void *)v5 + 1) = *((void *)v19 + 1);
        *((void *)v5 + 2) = v20;
        *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
        uint64_t v21 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
        *((void *)v5 + 14) = v21;
        if (v21)
        {
          uint64_t v22 = *((void *)v21 + 1);
          *((void *)v5 + 7) = *(void *)v21;
          int v23 = *((_DWORD *)v21 + 4);
          *((_DWORD *)v5 + 21) = v22;
          *((_DWORD *)v5 + 22) = v23;
          *(int8x16_t *)(v5 + 136) = vextq_s8(*(int8x16_t *)(v21 + 24), *(int8x16_t *)(v21 + 24), 8uLL);
          *((void *)v5 + 19) = *((void *)v21 + 5);
        }
        *((void *)v5 + 16) = *(void *)v19;
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v19[24], a2);
        *((void *)v5 + 13) = result;
        v5[160] = *((void *)v19 + 2);
      }
    }
    else if (v6 == -15560)
    {
      result[100] = 1;
    }
    else if (v6 == -15557)
    {
      uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      uint64_t v12 = *((void *)result + 2);
      if (v12 != 1) {
        *((_WORD *)v5 + 49) = v12;
      }
    }
  }
  else
  {
    switch(v6)
    {
      case -15577:
        uint64_t v7 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        uint64_t v8 = *a3;
        *((void *)v5 + 1) = *((void *)v7 + 1);
        *((void *)v5 + 2) = v8;
        *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
        uint64_t v9 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
        *((void *)v5 + 14) = v9;
        if (v9)
        {
          uint64_t v10 = *((void *)v9 + 1);
          *((void *)v5 + 7) = *(void *)v9;
          int v11 = *((_DWORD *)v9 + 4);
          *((_DWORD *)v5 + 21) = v10;
          *((_DWORD *)v5 + 22) = v11;
          *(int8x16_t *)(v5 + 136) = vextq_s8(*(int8x16_t *)(v9 + 24), *(int8x16_t *)(v9 + 24), 8uLL);
          *((void *)v5 + 19) = *((void *)v9 + 5);
        }
        *((void *)v5 + 5) = *(void *)v7;
        goto LABEL_45;
      case -15570:
        uint64_t v24 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v24[8], a2);
        *((void *)v5 + 9) = result;
        break;
      case -15569:
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        *((_DWORD *)v5 + 22) = *((_DWORD *)result + 2);
        break;
      case -15568:
        *((void *)result + 3) = *a3;
        break;
      default:
        return result;
    }
  }
  return result;
}

char *GTMTLSMIntersectionFunctionTableStateful_processTraceFuncWithMap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7 = *(_DWORD *)(a3 + 8);
  if (v7 <= -15531)
  {
    if (v7 > -15546)
    {
      if (v7 == -15545)
      {
        uint64_t result = GTTraceFunc_argumentBytesWithMap((void *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        uint64_t v43 = *((void *)result + 1);
        uint64_t v44 = a1 + 184 + 24 * *((void *)result + 3);
        *(_DWORD *)uint64_t v44 = v43 != 0;
        *(void *)(v44 + 8) = v43;
        *(void *)(a1 + 184 + 24 * *((void *)result + 3) + 16) = *((void *)result + 2);
        return result;
      }
      if (v7 == -15544)
      {
        uint64_t v24 = GTTraceFunc_argumentBytesWithMap((void *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        uint64_t v25 = GTTraceFunc_argumentBytesWithMap((void *)a3, v24[24], a2);
        uint64_t result = GTTraceFunc_argumentBytesWithMap((void *)a3, v24[25], a2);
        if (*((void *)v24 + 2))
        {
          unint64_t v26 = 0;
          do
          {
            uint64_t v27 = *(void *)&v25[8 * v26];
            uint64_t v28 = a1 + 184 + 24 * (v26 + *((void *)v24 + 1));
            *(_DWORD *)uint64_t v28 = v27 != 0;
            *(void *)(v28 + 8) = v27;
            *(void *)(a1 + 184 + 24 * (v26 + *((void *)v24 + 1)) + 16) = *(void *)&result[8 * v26];
            ++v26;
          }
          while (*((void *)v24 + 2) > v26);
        }
        return result;
      }
    }
    else
    {
      if (v7 == -15559)
      {
        uint64_t result = GTTraceFunc_argumentBytesWithMap((void *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        uint64_t v38 = *(void *)(a1 + 168);
        if (!v38) {
          return result;
        }
        uint64_t v10 = *((void *)result + 1);
        uint64_t v11 = v38 + 16 * *((void *)result + 2);
        int v12 = 1;
        goto LABEL_48;
      }
      if (v7 == -15558)
      {
        uint64_t result = GTTraceFunc_argumentBytesWithMap((void *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        if (*(void *)(a1 + 168))
        {
          uint64_t v13 = result;
          uint64_t result = GTTraceFunc_argumentBytesWithMap((void *)a3, result[24], a2);
          if (*((void *)v13 + 2))
          {
            unint64_t v14 = 0;
            do
            {
              uint64_t v15 = *(void *)(a1 + 168) + 16 * (v14 + *((void *)v13 + 1));
              *(_DWORD *)uint64_t v15 = 1;
              *(void *)(v15 + 8) = *(void *)&result[8 * v14++];
            }
            while (*((void *)v13 + 2) > v14);
          }
        }
        return result;
      }
    }
LABEL_56:
    return GTMTLSMIntersectionFunctionTable_processTraceFuncWithMap((char *)a1, a2, (uint64_t *)a3);
  }
  if (v7 <= -15259)
  {
    switch(v7)
    {
      case -15530:
        uint64_t result = GTTraceFunc_argumentBytesWithMap((void *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        uint64_t v9 = *(void *)(a1 + 168);
        if (!v9) {
          return result;
        }
        uint64_t v10 = *((void *)result + 1);
        uint64_t v11 = v9 + 16 * *((void *)result + 2);
        int v12 = 2;
        break;
      case -15529:
        uint64_t result = GTTraceFunc_argumentBytesWithMap((void *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        if (*(void *)(a1 + 168) && *((void *)result + 3))
        {
          unint64_t v29 = 0;
          do
          {
            uint64_t v30 = *((void *)result + 1);
            uint64_t v31 = *(void *)(a1 + 168) + 16 * (v29 + *((void *)result + 2));
            *(_DWORD *)uint64_t v31 = 2;
            *(void *)(v31 + 8) = v30;
            ++v29;
          }
          while (*((void *)result + 3) > v29);
        }
        return result;
      case -15526:
        uint64_t result = GTTraceFunc_argumentBytesWithMap((void *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        uint64_t v32 = *((void *)result + 1);
        uint64_t v33 = a1 + 24 * *((void *)result + 2);
        *(_DWORD *)(v33 + 184) = 2 * (v32 != 0);
        *(void *)(v33 + 192) = v32;
        return result;
      case -15525:
        int v34 = GTTraceFunc_argumentBytesWithMap((void *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        uint64_t result = GTTraceFunc_argumentBytesWithMap((void *)a3, v34[24], a2);
        if (*((void *)v34 + 2))
        {
          unint64_t v35 = 0;
          do
          {
            uint64_t v36 = *(void *)&result[8 * v35];
            uint64_t v37 = a1 + 24 * (v35 + *((void *)v34 + 1));
            *(_DWORD *)(v37 + 184) = 2 * (v36 != 0);
            *(void *)(v37 + 192) = v36;
            ++v35;
          }
          while (*((void *)v34 + 2) > v35);
        }
        return result;
      default:
        goto LABEL_56;
    }
    goto LABEL_48;
  }
  if (v7 == -15258)
  {
    uint64_t result = GTTraceFunc_argumentBytesWithMap((void *)a3, *(unsigned __int8 *)(a3 + 13), a2);
    uint64_t v39 = *(void *)(a1 + 168);
    if (!v39) {
      return result;
    }
    uint64_t v10 = *((void *)result + 1);
    uint64_t v11 = v39 + 16 * *((void *)result + 2);
    int v12 = 3;
LABEL_48:
    *(_DWORD *)uint64_t v11 = v12;
    *(void *)(v11 + 8) = v10;
    return result;
  }
  if (v7 == -15257)
  {
    uint64_t result = GTTraceFunc_argumentBytesWithMap((void *)a3, *(unsigned __int8 *)(a3 + 13), a2);
    if (*(void *)(a1 + 168) && *((void *)result + 3))
    {
      unint64_t v40 = 0;
      do
      {
        uint64_t v41 = *((void *)result + 1);
        uint64_t v42 = *(void *)(a1 + 168) + 16 * (v40 + *((void *)result + 2));
        *(_DWORD *)uint64_t v42 = 3;
        *(void *)(v42 + 8) = v41;
        ++v40;
      }
      while (*((void *)result + 3) > v40);
    }
    return result;
  }
  if (v7 != -10152) {
    goto LABEL_56;
  }
  uint64_t result = GTTraceFunc_argumentBytesWithMap((void *)a3, *(unsigned __int8 *)(a3 + 13), a2);
  if (a4)
  {
    uint64_t result = GTTraceFunc_argumentBytesWithMap((void *)a3, result[8], a2);
    unint64_t v17 = *(void *)result;
    if (*(void *)result)
    {
      char v18 = result;
      unint64_t v19 = 0;
      uint64_t v20 = (_DWORD *)(a1 + 184);
      do
      {
        uint64_t v21 = &v18[8 * v19];
        uint64_t v22 = *((void *)v21 + 1);
        if (v22)
        {
          uint64_t result = (char *)GTMTLGPUAddressResource_resourceForGPUAddress(*(void **)(*(void *)a4 + 24), *(int *)(*(void *)a4 + 12), *((void *)v21 + 1));
          if (result)
          {
            uint64_t v23 = *((void *)result + 2);
            if (v23)
            {
              unint64_t v46 = *(void *)result;
              uint64_t v47 = a1 + 24 * v19;
              *(_DWORD *)(v47 + 184) = 1;
              *(void *)(v47 + 192) = v23;
              *(void *)(v47 + 20mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v22 - v46;
              return result;
            }
          }
          uint64_t result = (char *)GTMTLIndirectResources_visibleFunctionTableIdForGPUAddress(a4, v22);
          if (result)
          {
            uint64_t v45 = a1 + 24 * v19;
            *(_DWORD *)(v45 + 184) = 2;
            *(void *)(v45 + 192) = result;
            return result;
          }
          unint64_t v17 = *(void *)v18;
        }
        else
        {
          *uint64_t v20 = 0;
        }
        ++v19;
        v20 += 6;
      }
      while (v17 > v19);
    }
  }
  return result;
}

char *GTMTLSMVisibleFunctionTable_processTraceFuncWithMap(char *result, uint64_t a2, uint64_t *a3)
{
  int v5 = result;
  int v6 = *((_DWORD *)a3 + 2);
  if (v6 > -15439)
  {
    if (v6 > -10178)
    {
      if (v6 > -10161)
      {
        if (v6 == -10160)
        {
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          *((void *)v5 + 19) = *((void *)result + 1);
        }
        else if (v6 == -10153)
        {
          uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          *((void *)v5 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *((void *)result + 1);
        }
      }
      else if (v6 == -10177)
      {
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        *((void *)v5 + 7) = *((void *)result + 1);
      }
      else if (v6 == -10174)
      {
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        *((_DWORD *)v5 + 21) = *((void *)result + 1);
      }
      return result;
    }
    if (v6 != -15438)
    {
      if (v6 == -10193)
      {
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        *((void *)v5 + 17) = *((void *)result + 1);
      }
      else if (v6 == -10178)
      {
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        *((void *)v5 + 8) = *((void *)result + 1);
      }
      return result;
    }
    int v7 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
    uint64_t v18 = *a3;
    *((void *)v5 + 1) = *((void *)v7 + 1);
    *((void *)v5 + 2) = v18;
    *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
    unint64_t v19 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
    *((void *)v5 + 14) = v19;
    if (v19)
    {
      uint64_t v20 = *((void *)v19 + 1);
      *((void *)v5 + 7) = *(void *)v19;
      int v21 = *((_DWORD *)v19 + 4);
      *((_DWORD *)v5 + 21) = v20;
      *((_DWORD *)v5 + 22) = v21;
      *(_OWORD *)(v5 + 136) = *(_OWORD *)(v19 + 24);
      *(_OWORD *)(v5 + 152) = *(_OWORD *)(v19 + 40);
    }
    *((void *)v5 + 16) = *(void *)v7;
    char v16 = 1;
LABEL_40:
    v5[168] = v16;
LABEL_41:
    unsigned int v27 = v7[16];
LABEL_42:
    uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v27, a2);
    *((void *)v5 + 13) = result;
    return result;
  }
  if (v6 > -15461)
  {
    switch(v6)
    {
      case -15460:
        uint64_t v22 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        uint64_t v23 = *a3;
        *((void *)v5 + 1) = *((void *)v22 + 1);
        *((void *)v5 + 2) = v23;
        *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
        uint64_t v24 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
        *((void *)v5 + 14) = v24;
        if (v24)
        {
          uint64_t v25 = *((void *)v24 + 1);
          *((void *)v5 + 7) = *(void *)v24;
          int v26 = *((_DWORD *)v24 + 4);
          *((_DWORD *)v5 + 21) = v25;
          *((_DWORD *)v5 + 22) = v26;
          *(_OWORD *)(v5 + 136) = *(_OWORD *)(v24 + 24);
          *(_OWORD *)(v5 + 152) = *(_OWORD *)(v24 + 40);
        }
        *((void *)v5 + 16) = *(void *)v22;
        v5[168] = *((void *)v22 + 2);
        unsigned int v27 = v22[24];
        goto LABEL_42;
      case -15440:
        int v7 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        uint64_t v28 = *a3;
        *((void *)v5 + 1) = *((void *)v7 + 1);
        *((void *)v5 + 2) = v28;
        *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
        unint64_t v29 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
        *((void *)v5 + 14) = v29;
        if (v29)
        {
          uint64_t v30 = *((void *)v29 + 1);
          *((void *)v5 + 7) = *(void *)v29;
          int v31 = *((_DWORD *)v29 + 4);
          *((_DWORD *)v5 + 21) = v30;
          *((_DWORD *)v5 + 22) = v31;
          *(_OWORD *)(v5 + 136) = *(_OWORD *)(v29 + 24);
          *(_OWORD *)(v5 + 152) = *(_OWORD *)(v29 + 40);
        }
        *((void *)v5 + 16) = *(void *)v7;
        char v16 = 2;
        break;
      case -15439:
        int v7 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        uint64_t v12 = *a3;
        *((void *)v5 + 1) = *((void *)v7 + 1);
        *((void *)v5 + 2) = v12;
        *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
        uint64_t v13 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
        *((void *)v5 + 14) = v13;
        if (v13)
        {
          uint64_t v14 = *((void *)v13 + 1);
          *((void *)v5 + 7) = *(void *)v13;
          int v15 = *((_DWORD *)v13 + 4);
          *((_DWORD *)v5 + 21) = v14;
          *((_DWORD *)v5 + 22) = v15;
          *(_OWORD *)(v5 + 136) = *(_OWORD *)(v13 + 24);
          *(_OWORD *)(v5 + 152) = *(_OWORD *)(v13 + 40);
        }
        *((void *)v5 + 16) = *(void *)v7;
        char v16 = 4;
        break;
      default:
        return result;
    }
    goto LABEL_40;
  }
  switch(v6)
  {
    case -15607:
      unint64_t v17 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v17[8], a2);
      *((void *)v5 + 9) = result;
      return result;
    case -15605:
      *((void *)result + 3) = *a3;
      return result;
    case -15578:
      int v7 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      uint64_t v8 = *a3;
      *((void *)v5 + 1) = *((void *)v7 + 1);
      *((void *)v5 + 2) = v8;
      *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
      uint64_t v9 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
      *((void *)v5 + 14) = v9;
      if (v9)
      {
        uint64_t v10 = *((void *)v9 + 1);
        *((void *)v5 + 7) = *(void *)v9;
        int v11 = *((_DWORD *)v9 + 4);
        *((_DWORD *)v5 + 21) = v10;
        *((_DWORD *)v5 + 22) = v11;
        *(_OWORD *)(v5 + 136) = *(_OWORD *)(v9 + 24);
        *(_OWORD *)(v5 + 152) = *(_OWORD *)(v9 + 40);
      }
      *((void *)v5 + 15) = *(void *)v7;
      goto LABEL_41;
  }
  return result;
}

char *GTMTLSMVisibleFunctionTableStateful_processTraceFuncWithMap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(_DWORD *)(a3 + 8);
  if (v6 == -15597)
  {
    uint64_t result = GTTraceFunc_argumentBytesWithMap((void *)a3, *(unsigned __int8 *)(a3 + 13), a2);
    if (*(void *)(a1 + 176))
    {
      uint64_t v9 = result;
      uint64_t result = GTTraceFunc_argumentBytesWithMap((void *)a3, result[24], a2);
      if (*((void *)v9 + 2))
      {
        unint64_t v10 = 0;
        uint64_t v11 = *(void *)(a1 + 176);
        do
        {
          *(void *)(v11 + 8 * (v10 + *((void *)v9 + 1))) = *(void *)&result[8 * v10];
          ++v10;
        }
        while (*((void *)v9 + 2) > v10);
      }
    }
  }
  else if (v6 == -15598)
  {
    uint64_t result = GTTraceFunc_argumentBytesWithMap((void *)a3, *(unsigned __int8 *)(a3 + 13), a2);
    uint64_t v8 = *(void *)(a1 + 176);
    if (v8) {
      *(void *)(v8 + 8 * *((void *)result + 2)) = *((void *)result + 1);
    }
  }
  else
  {
    return GTMTLSMVisibleFunctionTable_processTraceFuncWithMap((char *)a1, a2, (uint64_t *)a3);
  }
  return result;
}

char *GTMTLFXSMSpatialScaler_processTraceFuncWithMap(char *result, uint64_t a2, uint64_t *a3)
{
  int v5 = result;
  int v6 = *((_DWORD *)a3 + 2);
  switch(v6)
  {
    case -20480:
      uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      *((void *)v5 + 8) = *((void *)result + 1);
      break;
    case -20479:
      uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      *((void *)v5 + 7) = *((void *)result + 1);
      break;
    case -20478:
      uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      *((void *)v5 + 11) = *((void *)result + 1);
      break;
    case -20477:
      uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      *((void *)v5 + 1mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *((void *)result + 1);
      break;
    case -20476:
      uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      *((void *)v5 + 9) = *((void *)result + 1);
      break;
    case -20475:
      *((void *)result + 3) = *a3;
      break;
    default:
      if (v6 == -18432)
      {
        int v7 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        uint64_t v8 = *a3;
        uint64_t v9 = *(void *)v7;
        *((void *)v5 + 1) = *((void *)v7 + 1);
        *((void *)v5 + 2) = v8;
        *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
        *((void *)v5 + 5) = v9;
        uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v7[16], a2);
        *((void *)v5 + 6) = result;
        *((_OWORD *)v5 + 5) = *(_OWORD *)result;
      }
      break;
  }
  return result;
}

float32_t GTMTLFXSMTemporalScaler_processTraceFuncWithMap(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v6 = *((_DWORD *)a3 + 2);
  switch(v6)
  {
    case -20473:
      *(void *)(a1 + 64) = *((void *)GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2) + 1);
      break;
    case -20472:
      *(unsigned char *)(a1 + 148) = *((_DWORD *)GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2) + 2);
      break;
    case -20471:
      *(void *)(a1 + 72) = *((void *)GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2) + 1);
      break;
    case -20470:
      *(void *)(a1 + 88) = *((void *)GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2) + 1);
      break;
    case -20469:
      *(void *)(a1 + 56) = *((void *)GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2) + 1);
      break;
    case -20468:
      *(void *)(a1 + 12mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *((void *)GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2) + 1);
      break;
    case -20467:
      *(void *)(a1 + 112) = *((void *)GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2) + 1);
      break;
    case -20466:
      v7.i32[0] = *((_DWORD *)GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2) + 2);
      *(_DWORD *)(a1 + 128) = v7.i32[0];
      break;
    case -20465:
      v7.i32[0] = *((_DWORD *)GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2) + 2);
      *(_DWORD *)(a1 + 132) = v7.i32[0];
      break;
    case -20464:
      *(void *)(a1 + 8mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *((void *)GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2) + 1);
      break;
    case -20463:
      v7.i32[0] = *((_DWORD *)GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2) + 2);
      *(_DWORD *)(a1 + 136) = v7.i32[0];
      break;
    case -20462:
      v7.i32[0] = *((_DWORD *)GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2) + 2);
      *(_DWORD *)(a1 + 14mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v7.i32[0];
      break;
    case -20461:
      *(void *)(a1 + 96) = *((void *)GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2) + 1);
      break;
    case -20460:
      v7.i32[0] = *((_DWORD *)GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2) + 2);
      *(_DWORD *)(a1 + 144) = v7.i32[0];
      break;
    case -20459:
      *(unsigned char *)(a1 + 149) = *((_DWORD *)GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2) + 2);
      break;
    case -20458:
      *(void *)(a1 + 24) = *a3;
      break;
    case -20457:
      *(unsigned char *)(a1 + 149) = 0;
      break;
    case -20456:
      *(void *)(a1 + 104) = *((void *)GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2) + 1);
      break;
    default:
      if (v6 == -18430)
      {
        *(unsigned char *)(a1 + 15mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *((void *)GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2) + 1);
      }
      else if (v6 == -18431)
      {
        uint64_t v8 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        uint64_t v9 = *a3;
        uint64_t v10 = *(void *)v8;
        *(void *)(a1 + 8) = *((void *)v8 + 1);
        *(void *)(a1 + 16) = v9;
        *(_DWORD *)(a1 + 4) = *((_DWORD *)a3 + 2);
        *(void *)(a1 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v10;
        uint64_t v11 = GTTraceFunc_argumentBytesWithMap(a3, v8[16], a2);
        *(void *)(a1 + 48) = v11;
        *(void *)(a1 + 128) = 0;
        uint64x2_t v12 = *((uint64x2_t *)v11 + 1);
        *(uint64x2_t *)(a1 + 112) = v12;
        float32x2_t v7 = vneg_f32(vcvt_f32_f64(vcvtq_f64_u64(v12)));
        *(float32x2_t *)(a1 + 136) = v7;
        *(_DWORD *)(a1 + 144) = 1065353216;
        *(_WORD *)(a1 + 148) = 257;
      }
      break;
  }
  return v7.f32[0];
}

char *GTMTLSMResidencySet_processTraceFuncWithMap(char *result, uint64_t a2, uint64_t *a3)
{
  if (*((_DWORD *)a3 + 2) == -15245)
  {
    int v5 = result;
    int v6 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
    uint64_t v7 = *a3;
    *((void *)v5 + 1) = *((void *)v6 + 1);
    *((void *)v5 + 2) = v7;
    *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
    uint64_t result = GTTraceFunc_argumentBytesWithMap(a3, v6[24], a2);
    *((void *)v5 + 5) = *(void *)v6;
    *((void *)v5 + 6) = result;
  }
  return result;
}

char *GTMTLSMBuffer_processTraceFuncWithPool(char *result, uint64_t a2, uint64_t a3)
{
  int v5 = result;
  int v6 = *(_DWORD *)(a3 + 8);
  if (v6 <= -15779)
  {
    if (v6 <= -16313)
    {
      switch(v6)
      {
        case -16372:
          uint64_t v7 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
          uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v7[8], a2);
          *((void *)v5 + 9) = result;
          break;
        case -16371:
          uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
          *((_DWORD *)v5 + 22) = *((_DWORD *)result + 2);
          break;
        case -16370:
          *((void *)result + 3) = *(void *)a3;
          break;
        case -16369:
        case -16368:
          return result;
        case -16367:
          uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
          uint64_t v28 = *((void *)result + 2);
          if (v28 != 1) {
            *((_WORD *)v5 + 49) = v28;
          }
          break;
        default:
          if (v6 == -16314 || v6 == -16313) {
            goto LABEL_35;
          }
          break;
      }
      return result;
    }
    if (v6 > -16123)
    {
      switch(v6)
      {
        case -16122:
          result[100] = 1;
          break;
        case -16117:
          unint64_t v29 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
          uint64_t v30 = *(void *)a3;
          uint64_t v31 = *((void *)v29 + 2);
          *((void *)v5 + 1) = *((void *)v29 + 1);
          *((void *)v5 + 2) = v30;
          *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
          *((_WORD *)v5 + 48) = *((void *)v29 + 3);
          *((void *)v5 + 13) = v31;
          uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
          *((void *)v5 + 19) = result;
          if (result)
          {
            uint64_t v32 = *((void *)result + 1);
            *((void *)v5 + 7) = *(void *)result;
            int v33 = *((_DWORD *)result + 4);
            *((_DWORD *)v5 + 21) = v32;
            *((_DWORD *)v5 + 22) = v33;
            *((void *)v5 + 14) = *((void *)result + 3);
            *((_OWORD *)v5 + 8) = *((_OWORD *)result + 2);
          }
          *((void *)v5 + 6) = *(void *)v29;
          break;
        case -15914:
          uint64_t v8 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
          uint64_t v9 = *(void *)a3;
          uint64_t v10 = *(void *)v8;
          *((void *)v5 + 1) = *((void *)v8 + 1);
          *((void *)v5 + 2) = v9;
          *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
          *((void *)v5 + 5) = *((void *)v8 + 2);
          *((void *)v5 + 15) = v10;
          uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
          uint64_t v11 = *((void *)result + 3);
          *((void *)v5 + 13) = *((void *)result + 2);
          *((_WORD *)v5 + 48) = v11;
          break;
      }
      return result;
    }
    if (v6 != -16312)
    {
      if (v6 != -16163) {
        return result;
      }
      uint64_t v18 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
      uint64_t v19 = *(void *)a3;
      *((void *)v5 + 1) = *((void *)v18 + 1);
      *((void *)v5 + 2) = v19;
      *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
      uint64_t v20 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
      *((void *)v5 + 19) = v20;
      if (v20)
      {
        uint64_t v21 = *((void *)v20 + 1);
        *((void *)v5 + 7) = *(void *)v20;
        int v22 = *((_DWORD *)v20 + 4);
        *((_DWORD *)v5 + 21) = v21;
        *((_DWORD *)v5 + 22) = v22;
        *((void *)v5 + 14) = *((void *)v20 + 3);
        *((_OWORD *)v5 + 8) = *((_OWORD *)v20 + 2);
      }
      uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v18[16], a2);
      *((void *)v5 + 18) = result;
      if (result) {
        uint64_t v23 = *((void *)result + 1);
      }
      else {
        uint64_t v23 = 0;
      }
      *((void *)v5 + 13) = v23;
      goto LABEL_58;
    }
LABEL_35:
    uint64_t v18 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
    uint64_t v24 = *(void *)a3;
    uint64_t v25 = *((void *)v18 + 2);
    *((void *)v5 + 1) = *((void *)v18 + 1);
    *((void *)v5 + 2) = v24;
    *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
    *((_WORD *)v5 + 48) = *((void *)v18 + 3);
    *((void *)v5 + 13) = v25;
    uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
    *((void *)v5 + 19) = result;
    if (result)
    {
      uint64_t v26 = *((void *)result + 1);
      *((void *)v5 + 7) = *(void *)result;
      int v27 = *((_DWORD *)result + 4);
      *((_DWORD *)v5 + 21) = v26;
      *((_DWORD *)v5 + 22) = v27;
      *((void *)v5 + 14) = *((void *)result + 3);
      *((_OWORD *)v5 + 8) = *((_OWORD *)result + 2);
    }
LABEL_58:
    *((void *)v5 + 5) = *(void *)v18;
    return result;
  }
  if (v6 > -10224)
  {
    if (v6 <= -10204)
    {
      if (v6 == -10223)
      {
        uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        *((_DWORD *)v5 + 21) = *((void *)result + 1);
      }
      else if (v6 == -10210)
      {
        uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        *((void *)v5 + 8) = *((void *)result + 1);
      }
      return result;
    }
    if (v6 == -10203)
    {
      uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
      *((void *)v5 + 7) = *((void *)result + 1);
      return result;
    }
    if (v6 != -10187)
    {
      if (v6 != -10186) {
        return result;
      }
      uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
      long long v12 = *(_OWORD *)(result + 8);
      goto LABEL_28;
    }
    uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
    uint64_t v34 = *((void *)result + 1);
LABEL_54:
    *((_DWORD *)v5 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v34;
    return result;
  }
  if (v6 <= -10238)
  {
    if (v6 != -15778)
    {
      if (v6 != -15509) {
        return result;
      }
      uint64_t v13 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
      uint64_t v14 = *(void *)a3;
      *((void *)v5 + 1) = *((void *)v13 + 1);
      *((void *)v5 + 2) = v14;
      *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
      int v15 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v13[16], a2);
      *((_WORD *)v5 + 48) = *((_WORD *)v15 + 16);
      *((void *)v5 + 13) = *(void *)v15;
      uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
      *((void *)v5 + 19) = result;
      if (!result) {
        return result;
      }
      uint64_t v16 = *((void *)result + 1);
      *((void *)v5 + 7) = *(void *)result;
      int v17 = *((_DWORD *)result + 4);
      *((_DWORD *)v5 + 21) = v16;
      *((_DWORD *)v5 + 22) = v17;
      *((void *)v5 + 14) = *((void *)result + 3);
      long long v12 = *((_OWORD *)result + 2);
LABEL_28:
      *((_OWORD *)v5 + 8) = v12;
      return result;
    }
    unint64_t v35 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
    uint64_t v36 = *(void *)a3;
    uint64_t v37 = *((void *)v35 + 2);
    *((void *)v5 + 1) = *((void *)v35 + 1);
    *((void *)v5 + 2) = v36;
    *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
    *((_WORD *)v5 + 48) = *((void *)v35 + 3);
    *((void *)v5 + 13) = v37;
    uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
    *((void *)v5 + 19) = result;
    if (result)
    {
      uint64_t v38 = *((void *)result + 1);
      *((void *)v5 + 7) = *(void *)result;
      int v39 = *((_DWORD *)result + 4);
      *((_DWORD *)v5 + 21) = v38;
      *((_DWORD *)v5 + 22) = v39;
      *((void *)v5 + 14) = *((void *)result + 3);
      *((_OWORD *)v5 + 8) = *((_OWORD *)result + 2);
    }
    *((void *)v5 + 6) = *(void *)v35;
    uint64_t v34 = *((void *)v35 + 4);
    goto LABEL_54;
  }
  switch(v6)
  {
    case -10237:
      goto LABEL_35;
    case -10235:
      uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
      *((_DWORD *)v5 + 23) = *((_DWORD *)result + 2);
      break;
    case -10228:
      uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
      *((void *)v5 + 14) = *((void *)result + 1);
      break;
  }
  return result;
}

char *GTMTLSMTexture_processTraceFuncWithPool(char *result, uint64_t a2, uint64_t a3)
{
  int v5 = result;
  int v6 = *(_DWORD *)(a3 + 8);
  if (v6 > -15914)
  {
    if (v6 <= -10228)
    {
      if (v6 > -15690)
      {
        if (v6 > -10235)
        {
          if (v6 == -10234)
          {
            uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
            *((_DWORD *)v5 + 23) = *((_DWORD *)result + 2);
          }
          else if (v6 == -10231)
          {
            uint64_t v69 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
            uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v69[8], a2);
            *((void *)v5 + 14) = result;
          }
          return result;
        }
        if (v6 == -15689)
        {
          uint64_t v36 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
          uint64_t v103 = *(void *)a3;
          *((void *)v5 + 1) = *((void *)v36 + 1);
          *((void *)v5 + 2) = v103;
          *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
          uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
          *((void *)v5 + 16) = result;
          if (result)
          {
            uint64_t v104 = *((void *)result + 1);
            *((void *)v5 + 7) = *(void *)result;
            int v105 = *((_DWORD *)result + 4);
            *((_DWORD *)v5 + 21) = v104;
            *((_DWORD *)v5 + 22) = v105;
            uint64_t v107 = *((void *)result + 6);
            uint64_t v106 = *((void *)result + 7);
            *((void *)v5 + 21) = *((void *)result + 5);
            *((void *)v5 + 22) = v106;
            *((_WORD *)v5 + 106) = *((_WORD *)result + 40);
            *((void *)v5 + 14) = result + 24;
            *((void *)v5 + 25) = v107;
          }
          *((_WORD *)v5 + 76) = *((void *)v36 + 2);
          v5[158] = *((void *)v36 + 3);
          v5[159] = *((void *)v36 + 4);
          v5[160] = *((void *)v36 + 5);
          *((_WORD *)v5 + 77) = *((void *)v36 + 6);
          *((_WORD *)v5 + 78) = *((void *)v36 + 7);
        }
        else
        {
          if (v6 != -15688) {
            return result;
          }
          uint64_t v36 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
          uint64_t v37 = *(void *)a3;
          *((void *)v5 + 1) = *((void *)v36 + 1);
          *((void *)v5 + 2) = v37;
          *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
          uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
          *((void *)v5 + 16) = result;
          if (result)
          {
            uint64_t v38 = *((void *)result + 1);
            *((void *)v5 + 7) = *(void *)result;
            int v39 = *((_DWORD *)result + 4);
            *((_DWORD *)v5 + 21) = v38;
            *((_DWORD *)v5 + 22) = v39;
            uint64_t v41 = *((void *)result + 6);
            uint64_t v40 = *((void *)result + 7);
            *((void *)v5 + 21) = *((void *)result + 5);
            *((void *)v5 + 22) = v40;
            *((_WORD *)v5 + 106) = *((_WORD *)result + 40);
            *((void *)v5 + 14) = result + 24;
            *((void *)v5 + 25) = v41;
          }
          *((_WORD *)v5 + 76) = *((void *)v36 + 2);
          v5[158] = *((void *)v36 + 3);
          v5[159] = *((void *)v36 + 4);
          v5[160] = *((void *)v36 + 5);
          *((_WORD *)v5 + 77) = *((void *)v36 + 6);
          *((_WORD *)v5 + 78) = *((void *)v36 + 7);
          *((_DWORD *)v5 + 52) = *((_DWORD *)v36 + 18);
        }
        *((void *)v5 + 18) = *(void *)v36;
        uint64_t v56 = *((void *)v36 + 8);
      }
      else
      {
        if (v6 <= -15776)
        {
          if (v6 == -15913)
          {
            char v90 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
            uint64_t v91 = *(void *)a3;
            *((void *)v5 + 1) = *((void *)v90 + 1);
            *((void *)v5 + 2) = v91;
            *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
            unint64_t v92 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
            *((void *)v5 + 16) = v92;
            if (v92)
            {
              uint64_t v93 = *((void *)v92 + 1);
              *((void *)v5 + 7) = *(void *)v92;
              int v94 = *((_DWORD *)v92 + 4);
              *((_DWORD *)v5 + 21) = v93;
              *((_DWORD *)v5 + 22) = v94;
              uint64_t v96 = *((void *)v92 + 6);
              uint64_t v95 = *((void *)v92 + 7);
              *((void *)v5 + 21) = *((void *)v92 + 5);
              *((void *)v5 + 22) = v95;
              *((_WORD *)v5 + 106) = *((_WORD *)v92 + 40);
              *((void *)v5 + 14) = v92 + 24;
              *((void *)v5 + 25) = v96;
            }
            *((void *)v5 + 5) = *((void *)v90 + 2);
            *((void *)v5 + 23) = *(void *)v90;
            long long v97 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
            uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v97[24], a2);
            *((void *)v5 + 13) = result;
            return result;
          }
          if (v6 != -15777) {
            return result;
          }
          uint64_t v21 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
          uint64_t v22 = *(void *)a3;
          *((void *)v5 + 1) = *((void *)v21 + 1);
          *((void *)v5 + 2) = v22;
          *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
          uint64_t v23 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
          *((void *)v5 + 16) = v23;
          if (v23)
          {
            uint64_t v24 = *((void *)v23 + 1);
            *((void *)v5 + 7) = *(void *)v23;
            int v25 = *((_DWORD *)v23 + 4);
            *((_DWORD *)v5 + 21) = v24;
            *((_DWORD *)v5 + 22) = v25;
            uint64_t v27 = *((void *)v23 + 6);
            uint64_t v26 = *((void *)v23 + 7);
            *((void *)v5 + 21) = *((void *)v23 + 5);
            *((void *)v5 + 22) = v26;
            *((_WORD *)v5 + 106) = *((_WORD *)v23 + 40);
            *((void *)v5 + 14) = v23 + 24;
            *((void *)v5 + 25) = v27;
          }
          uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v21[24], a2);
          *((void *)v5 + 13) = result;
          *((void *)v5 + 6) = *(void *)v21;
          uint64_t v28 = *((void *)v21 + 2);
LABEL_91:
          *((_DWORD *)v5 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v28;
          return result;
        }
        if (v6 == -15775)
        {
          int v70 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
          uint64_t v121 = *(void *)a3;
          *((void *)v5 + 1) = *((void *)v70 + 1);
          *((void *)v5 + 2) = v121;
          *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
          uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
          *((void *)v5 + 16) = result;
          if (result)
          {
            uint64_t v122 = *((void *)result + 1);
            *((void *)v5 + 7) = *(void *)result;
            int v123 = *((_DWORD *)result + 4);
            *((_DWORD *)v5 + 21) = v122;
            *((_DWORD *)v5 + 22) = v123;
            uint64_t v125 = *((void *)result + 6);
            uint64_t v124 = *((void *)result + 7);
            *((void *)v5 + 21) = *((void *)result + 5);
            *((void *)v5 + 22) = v124;
            *((_WORD *)v5 + 106) = *((_WORD *)result + 40);
            *((void *)v5 + 14) = result + 24;
            *((void *)v5 + 25) = v125;
          }
          *((_WORD *)v5 + 76) = *((void *)v70 + 2);
          v5[158] = *((void *)v70 + 3);
          v5[159] = *((void *)v70 + 4);
          v5[160] = *((void *)v70 + 5);
          *((_WORD *)v5 + 77) = *((void *)v70 + 6);
          *((_WORD *)v5 + 78) = *((void *)v70 + 7);
          *((_DWORD *)v5 + 52) = *((_DWORD *)v70 + 16);
          goto LABEL_117;
        }
        if (v6 != -15690) {
          return result;
        }
        uint64_t v57 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        uint64_t v58 = *(void *)a3;
        *((void *)v5 + 1) = *((void *)v57 + 1);
        *((void *)v5 + 2) = v58;
        *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
        uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
        *((void *)v5 + 16) = result;
        if (result)
        {
          uint64_t v59 = *((void *)result + 1);
          *((void *)v5 + 7) = *(void *)result;
          int v60 = *((_DWORD *)result + 4);
          *((_DWORD *)v5 + 21) = v59;
          *((_DWORD *)v5 + 22) = v60;
          uint64_t v61 = *((void *)result + 6);
          *((void *)v5 + 21) = *((void *)result + 5);
          *((_WORD *)v5 + 106) = *((_WORD *)result + 40);
          *((void *)v5 + 14) = result + 24;
          *((void *)v5 + 25) = v61;
        }
        *((_WORD *)v5 + 76) = *((void *)v57 + 2);
        *((void *)v5 + 18) = *(void *)v57;
        uint64_t v56 = *((void *)v57 + 3);
      }
    }
    else
    {
      if (v6 <= -10205)
      {
        if (v6 > -10213)
        {
          if (v6 == -10212)
          {
            uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
            *((void *)v5 + 8) = *((void *)result + 1);
          }
          else if (v6 == -10205)
          {
            uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
            *((_WORD *)v5 + 106) = *((_DWORD *)result + 2);
          }
        }
        else if (v6 == -10227)
        {
          uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
          *((void *)v5 + 21) = *((void *)result + 1);
        }
        else if (v6 == -10222)
        {
          uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
          *((_DWORD *)v5 + 21) = *((_DWORD *)result + 2);
        }
        return result;
      }
      if (v6 > -10186)
      {
        if (v6 != -10185)
        {
          if (v6 == -10164)
          {
            uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
            *((void *)v5 + 25) = *((void *)result + 1);
          }
          else if (v6 == -7167)
          {
            uint64_t v14 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
            uint64_t v15 = *(void *)a3;
            *((void *)v5 + 1) = *((void *)v14 + 1);
            *((void *)v5 + 2) = v15;
            *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
            uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
            *((void *)v5 + 16) = result;
            if (result)
            {
              uint64_t v16 = *((void *)result + 1);
              *((void *)v5 + 7) = *(void *)result;
              int v17 = *((_DWORD *)result + 4);
              *((_DWORD *)v5 + 21) = v16;
              *((_DWORD *)v5 + 22) = v17;
              uint64_t v19 = *((void *)result + 6);
              uint64_t v18 = *((void *)result + 7);
              *((void *)v5 + 21) = *((void *)result + 5);
              *((void *)v5 + 22) = v18;
              *((_WORD *)v5 + 106) = *((_WORD *)result + 40);
              *((void *)v5 + 14) = result + 24;
              *((void *)v5 + 25) = v19;
            }
            *((void *)v5 + 24) = *(void *)v14;
          }
          return result;
        }
        uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        uint64_t v28 = *((void *)result + 1);
        goto LABEL_91;
      }
      if (v6 == -10204)
      {
        uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        *((void *)v5 + 7) = *((void *)result + 1);
        return result;
      }
      if (v6 != -10198) {
        return result;
      }
      uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
      uint64_t v56 = *((void *)result + 1);
    }
    *((void *)v5 + 22) = v56;
    return result;
  }
  if (v6 <= -16197)
  {
    if (v6 > -16241)
    {
      switch(v6)
      {
        case -16240:
          uint64_t v20 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
          uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v20[8], a2);
          *((void *)v5 + 9) = result;
          break;
        case -16239:
          uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
          *((_DWORD *)v5 + 22) = *((_DWORD *)result + 2);
          break;
        case -16238:
          *((void *)result + 3) = *(void *)a3;
          break;
        case -16233:
          int v70 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
          uint64_t v71 = *(void *)a3;
          *((void *)v5 + 1) = *((void *)v70 + 1);
          *((void *)v5 + 2) = v71;
          *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
          uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
          *((void *)v5 + 16) = result;
          if (result)
          {
            uint64_t v72 = *((void *)result + 1);
            *((void *)v5 + 7) = *(void *)result;
            int v73 = *((_DWORD *)result + 4);
            *((_DWORD *)v5 + 21) = v72;
            *((_DWORD *)v5 + 22) = v73;
            uint64_t v75 = *((void *)result + 6);
            uint64_t v74 = *((void *)result + 7);
            *((void *)v5 + 21) = *((void *)result + 5);
            *((void *)v5 + 22) = v74;
            *((_WORD *)v5 + 106) = *((_WORD *)result + 40);
            *((void *)v5 + 14) = result + 24;
            *((void *)v5 + 25) = v75;
          }
          *((_WORD *)v5 + 76) = *((void *)v70 + 2);
          goto LABEL_117;
        case -16232:
          uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
          uint64_t v76 = *((void *)result + 2);
          if (v76 != 1) {
            *((_WORD *)v5 + 49) = v76;
          }
          break;
        default:
          return result;
      }
      return result;
    }
    if (v6 != -16368)
    {
      if (v6 != -16310)
      {
        if (v6 != -16294) {
          return result;
        }
        uint64_t v42 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        uint64_t v43 = *(void *)a3;
        *((void *)v5 + 1) = *((void *)v42 + 1);
        *((void *)v5 + 2) = v43;
        *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
        uint64_t v44 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
        *((void *)v5 + 16) = v44;
        if (v44)
        {
          uint64_t v45 = *((void *)v44 + 1);
          *((void *)v5 + 7) = *(void *)v44;
          int v46 = *((_DWORD *)v44 + 4);
          *((_DWORD *)v5 + 21) = v45;
          *((_DWORD *)v5 + 22) = v46;
          uint64_t v48 = *((void *)v44 + 6);
          uint64_t v47 = *((void *)v44 + 7);
          *((void *)v5 + 21) = *((void *)v44 + 5);
          *((void *)v5 + 22) = v47;
          *((_WORD *)v5 + 106) = *((_WORD *)v44 + 40);
          *((void *)v5 + 14) = v44 + 24;
          *((void *)v5 + 25) = v48;
        }
        *((void *)v5 + 13) = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v42[24], a2);
        uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v42[25], a2);
        *((void *)v5 + 15) = result;
        *((void *)v5 + 19) = *((void *)v42 + 2);
        goto LABEL_109;
      }
      uint64_t v42 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
      uint64_t v108 = *(void *)a3;
      *((void *)v5 + 1) = *((void *)v42 + 1);
      *((void *)v5 + 2) = v108;
      *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
      id v109 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
      *((void *)v5 + 16) = v109;
      if (v109)
      {
        uint64_t v110 = *((void *)v109 + 1);
        *((void *)v5 + 7) = *(void *)v109;
        int v111 = *((_DWORD *)v109 + 4);
        *((_DWORD *)v5 + 21) = v110;
        *((_DWORD *)v5 + 22) = v111;
        uint64_t v113 = *((void *)v109 + 6);
        uint64_t v112 = *((void *)v109 + 7);
        *((void *)v5 + 21) = *((void *)v109 + 5);
        *((void *)v5 + 22) = v112;
        *((_WORD *)v5 + 106) = *((_WORD *)v109 + 40);
        *((void *)v5 + 14) = v109 + 24;
        *((void *)v5 + 25) = v113;
      }
      unsigned int v55 = v42[24];
      goto LABEL_108;
    }
    goto LABEL_67;
  }
  if (v6 <= -16099)
  {
    if (v6 <= -16115)
    {
      if (v6 != -16196)
      {
        if (v6 == -16116)
        {
          unint64_t v29 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
          uint64_t v30 = *(void *)a3;
          *((void *)v5 + 1) = *((void *)v29 + 1);
          *((void *)v5 + 2) = v30;
          *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
          uint64_t v31 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
          *((void *)v5 + 16) = v31;
          if (v31)
          {
            uint64_t v32 = *((void *)v31 + 1);
            *((void *)v5 + 7) = *(void *)v31;
            int v33 = *((_DWORD *)v31 + 4);
            *((_DWORD *)v5 + 21) = v32;
            *((_DWORD *)v5 + 22) = v33;
            uint64_t v35 = *((void *)v31 + 6);
            uint64_t v34 = *((void *)v31 + 7);
            *((void *)v5 + 21) = *((void *)v31 + 5);
            *((void *)v5 + 22) = v34;
            *((_WORD *)v5 + 106) = *((_WORD *)v31 + 40);
            *((void *)v5 + 14) = v31 + 24;
            *((void *)v5 + 25) = v35;
          }
          uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v29[16], a2);
          *((void *)v5 + 13) = result;
          *((void *)v5 + 6) = *(void *)v29;
        }
        return result;
      }
      int v70 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
      uint64_t v98 = *(void *)a3;
      *((void *)v5 + 1) = *((void *)v70 + 1);
      *((void *)v5 + 2) = v98;
      *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
      uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
      *((void *)v5 + 16) = result;
      if (result)
      {
        uint64_t v99 = *((void *)result + 1);
        *((void *)v5 + 7) = *(void *)result;
        int v100 = *((_DWORD *)result + 4);
        *((_DWORD *)v5 + 21) = v99;
        *((_DWORD *)v5 + 22) = v100;
        uint64_t v102 = *((void *)result + 6);
        uint64_t v101 = *((void *)result + 7);
        *((void *)v5 + 21) = *((void *)result + 5);
        *((void *)v5 + 22) = v101;
        *((_WORD *)v5 + 106) = *((_WORD *)result + 40);
        *((void *)v5 + 14) = result + 24;
        *((void *)v5 + 25) = v102;
      }
      *((_WORD *)v5 + 76) = *((void *)v70 + 2);
      v5[158] = *((void *)v70 + 3);
      v5[159] = *((void *)v70 + 4);
      v5[160] = *((void *)v70 + 5);
      *((_WORD *)v5 + 77) = *((void *)v70 + 6);
      *((_WORD *)v5 + 78) = *((void *)v70 + 7);
LABEL_117:
      *((void *)v5 + 18) = *(void *)v70;
      return result;
    }
    if (v6 == -16114)
    {
      result[100] = 1;
      return result;
    }
    if (v6 != -16104) {
      return result;
    }
LABEL_67:
    uint64_t v62 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
    uint64_t v63 = *(void *)a3;
    *((void *)v5 + 1) = *((void *)v62 + 1);
    *((void *)v5 + 2) = v63;
    *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
    uint64_t v64 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
    *((void *)v5 + 16) = v64;
    if (v64)
    {
      uint64_t v65 = *((void *)v64 + 1);
      *((void *)v5 + 7) = *(void *)v64;
      int v66 = *((_DWORD *)v64 + 4);
      *((_DWORD *)v5 + 21) = v65;
      *((_DWORD *)v5 + 22) = v66;
      uint64_t v68 = *((void *)v64 + 6);
      uint64_t v67 = *((void *)v64 + 7);
      *((void *)v5 + 21) = *((void *)v64 + 5);
      *((void *)v5 + 22) = v67;
      *((_WORD *)v5 + 106) = *((_WORD *)v64 + 40);
      *((void *)v5 + 14) = v64 + 24;
      *((void *)v5 + 25) = v68;
    }
    uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v62[32], a2);
    *((void *)v5 + 13) = result;
    *((void *)v5 + 17) = *(void *)v62;
    *((_DWORD *)v5 + 38) = *((void *)v62 + 2);
    *((_DWORD *)v5 + 39) = *((void *)v62 + 3);
    return result;
  }
  if (v6 > -16032)
  {
    if (v6 == -16031)
    {
      uint64_t v42 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
      uint64_t v77 = *(void *)a3;
      *((void *)v5 + 1) = *((void *)v42 + 1);
      *((void *)v5 + 2) = v77;
      *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
      uint64_t v78 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
      *((void *)v5 + 16) = v78;
      if (v78)
      {
        uint64_t v79 = *((void *)v78 + 1);
        *((void *)v5 + 7) = *(void *)v78;
        int v80 = *((_DWORD *)v78 + 4);
        *((_DWORD *)v5 + 21) = v79;
        *((_DWORD *)v5 + 22) = v80;
        uint64_t v82 = *((void *)v78 + 6);
        uint64_t v81 = *((void *)v78 + 7);
        *((void *)v5 + 21) = *((void *)v78 + 5);
        *((void *)v5 + 22) = v81;
        *((_WORD *)v5 + 106) = *((_WORD *)v78 + 40);
        *((void *)v5 + 14) = v78 + 24;
        *((void *)v5 + 25) = v82;
      }
      uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v42[41], a2);
      *((void *)v5 + 13) = result;
      *((_DWORD *)v5 + 38) = *((void *)v42 + 3);
      uint64_t v83 = *((void *)v42 + 4);
    }
    else
    {
      if (v6 != -16030)
      {
        if (v6 == -15980)
        {
          uint64_t v7 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
          uint64_t v8 = *(void *)a3;
          *((void *)v5 + 1) = *((void *)v7 + 1);
          *((void *)v5 + 2) = v8;
          *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
          uint64_t v9 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
          *((void *)v5 + 16) = v9;
          if (v9)
          {
            uint64_t v10 = *((void *)v9 + 1);
            *((void *)v5 + 7) = *(void *)v9;
            int v11 = *((_DWORD *)v9 + 4);
            *((_DWORD *)v5 + 21) = v10;
            *((_DWORD *)v5 + 22) = v11;
            uint64_t v13 = *((void *)v9 + 6);
            uint64_t v12 = *((void *)v9 + 7);
            *((void *)v5 + 21) = *((void *)v9 + 5);
            *((void *)v5 + 22) = v12;
            *((_WORD *)v5 + 106) = *((_WORD *)v9 + 40);
            *((void *)v5 + 14) = v9 + 24;
            *((void *)v5 + 25) = v13;
          }
          uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v7[24], a2);
          *((void *)v5 + 13) = result;
          *((void *)v5 + 5) = *(void *)v7;
          v5[214] = 1;
        }
        return result;
      }
      uint64_t v42 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
      uint64_t v84 = *(void *)a3;
      *((void *)v5 + 1) = *((void *)v42 + 1);
      *((void *)v5 + 2) = v84;
      *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
      uint64_t v85 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
      *((void *)v5 + 16) = v85;
      if (v85)
      {
        uint64_t v86 = *((void *)v85 + 1);
        *((void *)v5 + 7) = *(void *)v85;
        int v87 = *((_DWORD *)v85 + 4);
        *((_DWORD *)v5 + 21) = v86;
        *((_DWORD *)v5 + 22) = v87;
        uint64_t v89 = *((void *)v85 + 6);
        uint64_t v88 = *((void *)v85 + 7);
        *((void *)v5 + 21) = *((void *)v85 + 5);
        *((void *)v5 + 22) = v88;
        *((_WORD *)v5 + 106) = *((_WORD *)v85 + 40);
        *((void *)v5 + 14) = v85 + 24;
        *((void *)v5 + 25) = v89;
      }
      uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v42[49], a2);
      *((void *)v5 + 13) = result;
      *((_DWORD *)v5 + 38) = *((void *)v42 + 4);
      uint64_t v83 = *((void *)v42 + 5);
    }
    *((_DWORD *)v5 + 39) = v83;
LABEL_109:
    *((void *)v5 + 5) = *(void *)v42;
    return result;
  }
  if (v6 != -16098)
  {
    if (v6 != -16096) {
      return result;
    }
    uint64_t v42 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
    uint64_t v49 = *(void *)a3;
    *((void *)v5 + 1) = *((void *)v42 + 1);
    *((void *)v5 + 2) = v49;
    *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
    uint64_t v50 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
    *((void *)v5 + 16) = v50;
    if (v50)
    {
      uint64_t v51 = *((void *)v50 + 1);
      *((void *)v5 + 7) = *(void *)v50;
      int v52 = *((_DWORD *)v50 + 4);
      *((_DWORD *)v5 + 21) = v51;
      *((_DWORD *)v5 + 22) = v52;
      uint64_t v54 = *((void *)v50 + 6);
      uint64_t v53 = *((void *)v50 + 7);
      *((void *)v5 + 21) = *((void *)v50 + 5);
      *((void *)v5 + 22) = v53;
      *((_WORD *)v5 + 106) = *((_WORD *)v50 + 40);
      *((void *)v5 + 14) = v50 + 24;
      *((void *)v5 + 25) = v54;
    }
    unsigned int v55 = v42[33];
LABEL_108:
    uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v55, a2);
    *((void *)v5 + 13) = result;
    goto LABEL_109;
  }
  char v114 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
  uint64_t v115 = *(void *)a3;
  *((void *)v5 + 1) = *((void *)v114 + 1);
  *((void *)v5 + 2) = v115;
  *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
  unint64_t v116 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
  *((void *)v5 + 16) = v116;
  if (v116)
  {
    uint64_t v117 = *((void *)v116 + 1);
    *((void *)v5 + 7) = *(void *)v116;
    int v118 = *((_DWORD *)v116 + 4);
    *((_DWORD *)v5 + 21) = v117;
    *((_DWORD *)v5 + 22) = v118;
    uint64_t v120 = *((void *)v116 + 6);
    uint64_t v119 = *((void *)v116 + 7);
    *((void *)v5 + 21) = *((void *)v116 + 5);
    *((void *)v5 + 22) = v119;
    *((_WORD *)v5 + 106) = *((_WORD *)v116 + 40);
    *((void *)v5 + 14) = v116 + 24;
    *((void *)v5 + 25) = v120;
  }
  uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v114[40], a2);
  *((void *)v5 + 13) = result;
  *((void *)v5 + 17) = *(void *)v114;
  *((_DWORD *)v5 + 38) = *((void *)v114 + 2);
  *((_DWORD *)v5 + 39) = *((void *)v114 + 3);
  *((_DWORD *)v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *((void *)v114 + 4);
  return result;
}

char *GTMTLSMIndirectCommandBuffer_processTraceFuncWithPool(char *result, uint64_t a2, uint64_t a3)
{
  int v5 = result;
  int v6 = *(_DWORD *)(a3 + 8);
  if (v6 > -10219)
  {
    if (v6 <= -10210)
    {
      if (v6 == -10218)
      {
        uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        *((void *)v5 + 15) = *((void *)result + 1);
      }
      else if (v6 == -10215)
      {
        uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        *((_DWORD *)v5 + 21) = *((void *)result + 1);
      }
    }
    else
    {
      switch(v6)
      {
        case -10209:
          uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
          *((void *)v5 + 8) = *((void *)result + 1);
          break;
        case -10202:
          uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
          *((void *)v5 + 7) = *((void *)result + 1);
          break;
        case -10166:
          uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
          *((void *)v5 + 16) = *((void *)result + 1);
          break;
      }
    }
  }
  else
  {
    switch(v6)
    {
      case -15925:
        uint64_t v7 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v7[8], a2);
        *((void *)v5 + 9) = result;
        break;
      case -15924:
        uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        *((_DWORD *)v5 + 22) = *((_DWORD *)result + 2);
        break;
      case -15923:
        *((void *)result + 3) = *(void *)a3;
        break;
      case -15922:
      case -15921:
        return result;
      case -15920:
        uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        uint64_t v15 = *((void *)result + 2);
        if (v15 != 1) {
          *((_WORD *)v5 + 49) = v15;
        }
        break;
      case -15919:
        result[100] = 1;
        break;
      default:
        if (v6 == -15972 || v6 == -15969)
        {
          uint64_t v8 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
          uint64_t v9 = *(void *)a3;
          uint64_t v10 = *(void *)v8;
          *((void *)v5 + 1) = *((void *)v8 + 1);
          *((void *)v5 + 2) = v9;
          *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
          *((void *)v5 + 5) = v10;
          *((void *)v5 + 13) = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v8[32], a2);
          uint64_t v11 = *((void *)v8 + 3);
          *((_DWORD *)v5 + 34) = *((void *)v8 + 2);
          *((_WORD *)v5 + 48) = v11;
          uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
          *((void *)v5 + 14) = result;
          if (result)
          {
            uint64_t v12 = *((void *)result + 1);
            *((void *)v5 + 7) = *(void *)result;
            int v13 = *((_DWORD *)result + 4);
            *((_DWORD *)v5 + 21) = v12;
            *((_DWORD *)v5 + 22) = v13;
            uint64_t v14 = *((void *)result + 6);
            *((void *)v5 + 15) = *((void *)result + 3);
            *((void *)v5 + 16) = v14;
          }
        }
        break;
    }
  }
  return result;
}

char *GTMTLSMHeap_processTraceFuncWithPool(char *result, uint64_t a2, uint64_t a3)
{
  int v5 = result;
  int v6 = *(_DWORD *)(a3 + 8);
  if (v6 > -10212)
  {
    switch(v6)
    {
      case -10211:
        uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        *((void *)v5 + 8) = *((void *)result + 1);
        break;
      case -10208:
        uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        *((_DWORD *)v5 + 18) = *((void *)result + 1);
        break;
      case -10207:
        uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        *((_DWORD *)v5 + 19) = *((void *)result + 1);
        break;
    }
  }
  else
  {
    switch(v6)
    {
      case -16120:
        uint64_t v7 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        uint64_t v8 = *(void *)a3;
        uint64_t v9 = *(void *)v7;
        *((void *)v5 + 1) = *((void *)v7 + 1);
        *((void *)v5 + 2) = v8;
        *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
        *((void *)v5 + 5) = v9;
        uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v7[16], a2);
        *((void *)v5 + 6) = result;
        break;
      case -16119:
        uint64_t v10 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v10[8], a2);
        *((void *)v5 + 7) = result;
        break;
      case -16118:
        *((void *)result + 3) = *(void *)a3;
        break;
      case -16115:
        uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        uint64_t v11 = *((void *)result + 2);
        if (v11 != 1) {
          *((_WORD *)v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v11;
        }
        break;
      default:
        return result;
    }
  }
  return result;
}

char *GTMTLSMDepthStencilState_processTraceFuncWithPool(char *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = result;
  int v5 = *(_DWORD *)(a3 + 8);
  if (v5 == -16320)
  {
    *((void *)result + 3) = *(void *)a3;
  }
  else if (v5 == -16311)
  {
    uint64_t v7 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
    uint64_t v8 = *(void *)a3;
    uint64_t v9 = *(void *)v7;
    *((void *)v4 + 1) = *((void *)v7 + 1);
    *((void *)v4 + 2) = v8;
    *((_DWORD *)v4 + 1) = *(_DWORD *)(a3 + 8);
    *((void *)v4 + 5) = v9;
    uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v7[16], a2);
    *((void *)v4 + 6) = result;
  }
  return result;
}

char *GTMTLSMSamplerState_processTraceFuncWithPool(char *result, uint64_t a2, uint64_t a3)
{
  int v5 = result;
  int v6 = *(_DWORD *)(a3 + 8);
  if (v6 > -10227)
  {
    if (v6 == -10226)
    {
      uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
      *((void *)v5 + 8) = *((void *)result + 1);
    }
    else if (v6 == -10163)
    {
      uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
      *((void *)v5 + 9) = *((void *)result + 1);
    }
  }
  else if (v6 == -16309)
  {
    uint64_t v7 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
    uint64_t v8 = *(void *)a3;
    *((void *)v5 + 1) = *((void *)v7 + 1);
    *((void *)v5 + 2) = v8;
    *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
    uint64_t v9 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
    *((void *)v5 + 7) = v9;
    if (v9)
    {
      *((void *)v5 + 1mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *((void *)v9 + 2);
      *((_OWORD *)v5 + 4) = *(_OWORD *)v9;
    }
    *((void *)v5 + 5) = *(void *)v7;
    uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v7[16], a2);
    *((void *)v5 + 6) = result;
  }
  else if (v6 == -16241)
  {
    *((void *)result + 3) = *(void *)a3;
  }
  return result;
}

char *GTMTLSMEvent_processTraceFuncWithPool(char *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = result;
  int v5 = *(_DWORD *)(a3 + 8);
  switch(v5)
  {
    case -15879:
      *((void *)result + 3) = *(void *)a3;
      break;
    case -15880:
      uint64_t v9 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
      uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v9[8], a2);
      *((void *)v4 + 6) = result;
      break;
    case -15997:
      uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
      uint64_t v7 = *(void *)a3;
      uint64_t v8 = *(void *)result;
      *((void *)v4 + 1) = *((void *)result + 1);
      *((void *)v4 + 2) = v7;
      *((_DWORD *)v4 + 1) = *(_DWORD *)(a3 + 8);
      *((void *)v4 + 5) = v8;
      break;
  }
  return result;
}

char *GTMTLSMSharedEvent_processTraceFuncWithPool(char *result, uint64_t a2, uint64_t a3)
{
  int v5 = result;
  int v6 = *(_DWORD *)(a3 + 8);
  if (v6 <= -15974)
  {
    switch(v6)
    {
      case -15996:
        uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        uint64_t v11 = *(void *)a3;
        uint64_t v12 = *(void *)result;
        *((void *)v5 + 1) = *((void *)result + 1);
        *((void *)v5 + 2) = v11;
        *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
        *((void *)v5 + 5) = v12;
        uint64_t v13 = *((void *)result + 2);
        *((_DWORD *)v5 + 18) = *((_DWORD *)result + 6);
        *((void *)v5 + 7) = v13;
        *((void *)v5 + 8) = 0;
        return result;
      case -15975:
        uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        uint64_t v9 = *((void *)result + 1);
LABEL_17:
        *((void *)v5 + 8) = v9;
        return result;
      case -15974:
        uint64_t v10 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v10[8], a2);
        *((void *)v5 + 6) = result;
        break;
    }
  }
  else
  {
    if (v6 <= -15910)
    {
      if (v6 == -15973)
      {
        *((void *)result + 3) = *(void *)a3;
        return result;
      }
      if (v6 != -15912) {
        return result;
      }
      uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
      uint64_t v7 = *(void *)a3;
      uint64_t v8 = *(void *)result;
      *((void *)v5 + 1) = *((void *)result + 1);
      *((void *)v5 + 2) = v7;
      *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
      *((void *)v5 + 5) = v8;
      *((_DWORD *)v5 + 18) = *((_DWORD *)result + 6);
      uint64_t v9 = *((void *)result + 2);
      goto LABEL_17;
    }
    if (v6 == -15909)
    {
      uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
      uint64_t v14 = *(void *)a3;
      uint64_t v15 = *(void *)result;
      *((void *)v5 + 1) = *((void *)result + 1);
      *((void *)v5 + 2) = v14;
      *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
      *((void *)v5 + 5) = v15;
      *((_DWORD *)v5 + 18) = *((_DWORD *)result + 8);
      *(_OWORD *)(v5 + 56) = *((_OWORD *)result + 1);
    }
    else if (v6 == -15907)
    {
      uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
      *((void *)v5 + 7) = *((void *)result + 1);
    }
  }
  return result;
}

char *GTMTLSMLateEvalEvent_processTraceFuncWithPool(char *result, uint64_t a2, uint64_t a3)
{
  int v5 = result;
  switch(*(_DWORD *)(a3 + 8))
  {
    case 0xFFFFC378:
      uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
      uint64_t v6 = *(void *)a3;
      uint64_t v7 = *(void *)result;
      *((void *)v5 + 1) = *((void *)result + 1);
      *((void *)v5 + 2) = v6;
      *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
      *((void *)v5 + 5) = v7;
      *((void *)v5 + 8) = 0;
      break;
    case 0xFFFFC37D:
      uint64_t v8 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
      uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v8[8], a2);
      *((void *)v5 + 6) = result;
      break;
    case 0xFFFFC37E:
      uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
      *((void *)v5 + 8) = *((void *)result + 1);
      break;
    case 0xFFFFC37F:
      *((void *)result + 3) = *(void *)a3;
      break;
    default:
      return result;
  }
  return result;
}

char *GTMTLSMFence_processTraceFuncWithPool(char *result, uint64_t a2, uint64_t a3)
{
  int v5 = result;
  int v6 = *(_DWORD *)(a3 + 8);
  switch(v6)
  {
    case -16136:
      uint64_t v9 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
      uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v9[8], a2);
      *((void *)v5 + 6) = result;
      break;
    case -16127:
      *((void *)result + 3) = *(void *)a3;
      break;
    case -16128:
      uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
      uint64_t v7 = *(void *)a3;
      uint64_t v8 = *(void *)result;
      *((void *)v5 + 1) = *((void *)result + 1);
      *((void *)v5 + 2) = v7;
      *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
      *((void *)v5 + 5) = v8;
      break;
  }
  return result;
}

char *GTMTLSMCounterSampleBuffer_processTraceFuncWithPool(char *result, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a3 + 8) == -15848)
  {
    int v5 = result;
    int v6 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
    uint64_t v7 = *(void *)a3;
    uint64_t v8 = *(void *)v6;
    *((void *)v5 + 1) = *((void *)v6 + 1);
    *((void *)v5 + 2) = v7;
    *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
    *((void *)v5 + 5) = v8;
    uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v6[24], a2);
    *((void *)v5 + 6) = result;
  }
  return result;
}

char *GTMTLSMRenderPipelineState_processTraceFuncWithPool(char *result, uint64_t a2, uint64_t a3)
{
  int v5 = result;
  int v6 = *(_DWORD *)(a3 + 8);
  if (v6 > -15462)
  {
    if (v6 > -10221)
    {
      if (v6 <= -10185)
      {
        if (v6 == -10220)
        {
          uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
          *((void *)v5 + 12) = *((void *)result + 1);
        }
        else if (v6 == -10192)
        {
          uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
          *((_DWORD *)v5 + 102) = *((_DWORD *)result + 2);
        }
      }
      else
      {
        switch(v6)
        {
          case -10184:
            uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
            *((_DWORD *)v5 + 103) = *((void *)result + 1);
            break;
          case -10172:
            uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
            *((void *)v5 + 5mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *((void *)result + 1);
            break;
          case -10165:
            uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
            *((void *)v5 + 14) = *((void *)result + 1);
            break;
        }
      }
    }
    else
    {
      switch(v6)
      {
        case -15406:
        case -15405:
          uint64_t v13 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
          uint64_t v14 = *(void *)a3;
          uint64_t v15 = *(void *)v13;
          *((void *)v5 + 1) = *((void *)v13 + 1);
          *((void *)v5 + 2) = v14;
          *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
          *((void *)v5 + 5) = v15;
          uint64_t v16 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
          *((void *)v5 + 7) = v16;
          if (v16)
          {
            int v17 = v16;
            memcpy(v5 + 120, v16 + 216, 0x118uLL);
            *((_OWORD *)v5 + 6) = *(_OWORD *)v17;
            *((_DWORD *)v5 + 102) = *((_DWORD *)v17 + 48);
            *((_DWORD *)v5 + 103) = *((unsigned __int16 *)v17 + 98);
            *((void *)v5 + 14) = *((void *)v17 + 2);
          }
          unsigned int v18 = v13[24];
          goto LABEL_31;
        case -15404:
        case -15403:
          uint64_t v30 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
          uint64_t v31 = *(void *)a3;
          uint64_t v32 = *(void *)v30;
          *((void *)v5 + 1) = *((void *)v30 + 1);
          *((void *)v5 + 2) = v31;
          *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
          *((void *)v5 + 5) = v32;
          int v33 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
          *((void *)v5 + 7) = v33;
          if (v33)
          {
            uint64_t v34 = v33;
            memcpy(v5 + 120, v33 + 216, 0x118uLL);
            *((_OWORD *)v5 + 6) = *(_OWORD *)v34;
            *((_DWORD *)v5 + 102) = *((_DWORD *)v34 + 48);
            *((_DWORD *)v5 + 103) = *((unsigned __int16 *)v34 + 98);
            *((void *)v5 + 14) = *((void *)v34 + 2);
          }
          unsigned int v18 = v30[32];
LABEL_31:
          uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v18, a2);
          *((void *)v5 + 9) = result;
          break;
        default:
          if (v6 == -15461)
          {
            uint64_t v40 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
            uint64_t v41 = *(void *)a3;
            uint64_t v42 = *(void *)v40;
            *((void *)v5 + 1) = *((void *)v40 + 1);
            *((void *)v5 + 2) = v41;
            *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
            *((void *)v5 + 5) = v42;
            uint64_t v43 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
            *((void *)v5 + 7) = v43;
            if (v43)
            {
              uint64_t v44 = v43;
              memcpy(v5 + 120, v43 + 216, 0x118uLL);
              *((_OWORD *)v5 + 6) = *(_OWORD *)v44;
              *((_DWORD *)v5 + 102) = *((_DWORD *)v44 + 48);
              *((_DWORD *)v5 + 103) = *((unsigned __int16 *)v44 + 98);
              *((void *)v5 + 14) = *((void *)v44 + 2);
            }
            uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v40[24], a2);
            *((void *)v5 + 1mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = result;
          }
          break;
      }
    }
  }
  else if (v6 > -16092)
  {
    switch(v6)
    {
      case -16091:
      case -16089:
        uint64_t v19 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        uint64_t v20 = *(void *)a3;
        uint64_t v21 = *(void *)v19;
        *((void *)v5 + 1) = *((void *)v19 + 1);
        *((void *)v5 + 2) = v20;
        *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
        *((void *)v5 + 5) = v21;
        uint64_t v22 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
        *((void *)v5 + 7) = v22;
        if (v22)
        {
          uint64_t v23 = v22;
          memcpy(v5 + 120, v22 + 216, 0x118uLL);
          *((_OWORD *)v5 + 6) = *(_OWORD *)v23;
          *((_DWORD *)v5 + 102) = *((_DWORD *)v23 + 48);
          *((_DWORD *)v5 + 103) = *((unsigned __int16 *)v23 + 98);
          *((void *)v5 + 14) = *((void *)v23 + 2);
        }
        unsigned int v24 = v19[24];
        goto LABEL_35;
      case -16090:
      case -16088:
        uint64_t v35 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        uint64_t v36 = *(void *)a3;
        uint64_t v37 = *(void *)v35;
        *((void *)v5 + 1) = *((void *)v35 + 1);
        *((void *)v5 + 2) = v36;
        *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
        *((void *)v5 + 5) = v37;
        uint64_t v38 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
        *((void *)v5 + 7) = v38;
        if (v38)
        {
          int v39 = v38;
          memcpy(v5 + 120, v38 + 216, 0x118uLL);
          *((_OWORD *)v5 + 6) = *(_OWORD *)v39;
          *((_DWORD *)v5 + 102) = *((_DWORD *)v39 + 48);
          *((_DWORD *)v5 + 103) = *((unsigned __int16 *)v39 + 98);
          *((void *)v5 + 14) = *((void *)v39 + 2);
        }
        unsigned int v24 = v35[32];
LABEL_35:
        uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v24, a2);
        *((void *)v5 + 8) = result;
        break;
      default:
        if (v6 == -15738)
        {
          uint64_t v45 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
          uint64_t v46 = *(void *)a3;
          uint64_t v47 = *(void *)v45;
          *((void *)v5 + 1) = *((void *)v45 + 1);
          *((void *)v5 + 2) = v46;
          *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
          *((void *)v5 + 5) = v47;
          uint64_t v48 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
          *((void *)v5 + 7) = v48;
          if (v48)
          {
            uint64_t v49 = v48;
            memcpy(v5 + 120, v48 + 216, 0x118uLL);
            *((_OWORD *)v5 + 6) = *(_OWORD *)v49;
            *((_DWORD *)v5 + 102) = *((_DWORD *)v49 + 48);
            *((_DWORD *)v5 + 103) = *((unsigned __int16 *)v49 + 98);
            *((void *)v5 + 14) = *((void *)v49 + 2);
          }
          uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v45[32], a2);
          *((void *)v5 + 11) = result;
        }
        break;
    }
  }
  else
  {
    switch(v6)
    {
      case -16303:
      case -16301:
        uint64_t v7 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        uint64_t v8 = *(void *)a3;
        uint64_t v9 = *(void *)v7;
        *((void *)v5 + 1) = *((void *)v7 + 1);
        *((void *)v5 + 2) = v8;
        *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
        *((void *)v5 + 5) = v9;
        uint64_t v10 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
        *((void *)v5 + 7) = v10;
        if (v10)
        {
          uint64_t v11 = v10;
          memcpy(v5 + 120, v10 + 216, 0x118uLL);
          *((_OWORD *)v5 + 6) = *(_OWORD *)v11;
          *((_DWORD *)v5 + 102) = *((_DWORD *)v11 + 48);
          *((_DWORD *)v5 + 103) = *((unsigned __int16 *)v11 + 98);
          *((void *)v5 + 14) = *((void *)v11 + 2);
        }
        unsigned int v12 = v7[24];
        goto LABEL_27;
      case -16302:
      case -16300:
        int v25 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        uint64_t v26 = *(void *)a3;
        uint64_t v27 = *(void *)v25;
        *((void *)v5 + 1) = *((void *)v25 + 1);
        *((void *)v5 + 2) = v26;
        *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
        *((void *)v5 + 5) = v27;
        uint64_t v28 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
        *((void *)v5 + 7) = v28;
        if (v28)
        {
          unint64_t v29 = v28;
          memcpy(v5 + 120, v28 + 216, 0x118uLL);
          *((_OWORD *)v5 + 6) = *(_OWORD *)v29;
          *((_DWORD *)v5 + 102) = *((_DWORD *)v29 + 48);
          *((_DWORD *)v5 + 103) = *((unsigned __int16 *)v29 + 98);
          *((void *)v5 + 14) = *((void *)v29 + 2);
        }
        unsigned int v12 = v25[32];
LABEL_27:
        uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v12, a2);
        *((void *)v5 + 6) = result;
        break;
      default:
        if (v6 == -16242) {
          *((void *)result + 3) = *(void *)a3;
        }
        break;
    }
  }
  return result;
}

char *GTMTLSMComputePipelineState_processTraceFuncWithPool(char *result, uint64_t a2, uint64_t a3)
{
  int v5 = result;
  int v6 = *(_DWORD *)(a3 + 8);
  if (v6 <= -16102)
  {
    switch(v6)
    {
      case -16299:
      case -16298:
      case -16297:
      case -16296:
        uint64_t v7 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        uint64_t v8 = *(void *)a3;
        uint64_t v9 = *(void *)v7;
        *((void *)v5 + 1) = *((void *)v7 + 1);
        *((void *)v5 + 2) = v8;
        *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
        *((void *)v5 + 5) = v9;
        uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
        *((void *)v5 + 8) = result;
        if (result)
        {
          long long v10 = *(_OWORD *)(result + 104);
          long long v11 = *(_OWORD *)(result + 120);
          long long v12 = *(_OWORD *)(result + 136);
          *((void *)v5 + 21) = *((void *)result + 19);
          *(_OWORD *)(v5 + 152) = v12;
          *(_OWORD *)(v5 + 136) = v11;
          *(_OWORD *)(v5 + 12mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v10;
          *((_OWORD *)v5 + 6) = *(_OWORD *)result;
          *((_DWORD *)v5 + 48) = *((_DWORD *)result + 22);
          *((void *)v5 + 14) = *((void *)result + 2);
        }
        *((void *)v5 + 6) = *((void *)v7 + 2);
        break;
      default:
        JUMPOUT(0);
    }
  }
  else if (v6 > -10215)
  {
    if (v6 > -10172)
    {
      if (v6 == -10171)
      {
        uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        *((void *)v5 + 22) = *((void *)result + 1);
      }
      else if (v6 == -10162)
      {
        uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        *((void *)v5 + 14) = *((void *)result + 1);
      }
    }
    else if (v6 == -10214)
    {
      uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
      *((void *)v5 + 12) = *((void *)result + 1);
    }
    else if (v6 == -10191)
    {
      uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
      *((_DWORD *)v5 + 48) = *((_DWORD *)result + 2);
    }
  }
  else if (v6 > -15741)
  {
    if (v6 == -15740)
    {
      uint64_t v27 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
      uint64_t v28 = *(void *)a3;
      uint64_t v29 = *(void *)v27;
      *((void *)v5 + 1) = *((void *)v27 + 1);
      *((void *)v5 + 2) = v28;
      *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
      *((void *)v5 + 5) = v29;
      uint64_t v30 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
      *((void *)v5 + 8) = v30;
      if (v30)
      {
        long long v31 = *(_OWORD *)(v30 + 104);
        long long v32 = *(_OWORD *)(v30 + 120);
        long long v33 = *(_OWORD *)(v30 + 136);
        *((void *)v5 + 21) = *((void *)v30 + 19);
        *(_OWORD *)(v5 + 152) = v33;
        *(_OWORD *)(v5 + 136) = v32;
        *(_OWORD *)(v5 + 12mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v31;
        *((_OWORD *)v5 + 6) = *(_OWORD *)v30;
        *((_DWORD *)v5 + 48) = *((_DWORD *)v30 + 22);
        *((void *)v5 + 14) = *((void *)v30 + 2);
      }
      uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v27[32], a2);
      *((void *)v5 + 11) = result;
    }
    else if (v6 == -15541)
    {
      uint64_t v13 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
      uint64_t v14 = *(void *)a3;
      uint64_t v15 = *(void *)v13;
      *((void *)v5 + 1) = *((void *)v13 + 1);
      *((void *)v5 + 2) = v14;
      *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
      *((void *)v5 + 5) = v15;
      uint64_t v16 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
      *((void *)v5 + 8) = v16;
      if (v16)
      {
        long long v17 = *(_OWORD *)(v16 + 104);
        long long v18 = *(_OWORD *)(v16 + 120);
        long long v19 = *(_OWORD *)(v16 + 136);
        *((void *)v5 + 21) = *((void *)v16 + 19);
        *(_OWORD *)(v5 + 152) = v19;
        *(_OWORD *)(v5 + 136) = v18;
        *(_OWORD *)(v5 + 12mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v17;
        *((_OWORD *)v5 + 6) = *(_OWORD *)v16;
        *((_DWORD *)v5 + 48) = *((_DWORD *)v16 + 22);
        *((void *)v5 + 14) = *((void *)v16 + 2);
      }
      uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v13[24], a2);
      *((void *)v5 + 23) = result;
    }
  }
  else if (v6 == -16101)
  {
    uint64_t v20 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
    uint64_t v21 = *(void *)a3;
    uint64_t v22 = *(void *)v20;
    *((void *)v5 + 1) = *((void *)v20 + 1);
    *((void *)v5 + 2) = v21;
    *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
    *((void *)v5 + 5) = v22;
    uint64_t v23 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
    *((void *)v5 + 8) = v23;
    if (v23)
    {
      long long v24 = *(_OWORD *)(v23 + 104);
      long long v25 = *(_OWORD *)(v23 + 120);
      long long v26 = *(_OWORD *)(v23 + 136);
      *((void *)v5 + 21) = *((void *)v23 + 19);
      *(_OWORD *)(v5 + 152) = v26;
      *(_OWORD *)(v5 + 136) = v25;
      *(_OWORD *)(v5 + 12mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v24;
      *((_OWORD *)v5 + 6) = *(_OWORD *)v23;
      *((_DWORD *)v5 + 48) = *((_DWORD *)v23 + 22);
      *((void *)v5 + 14) = *((void *)v23 + 2);
    }
    *((void *)v5 + 9) = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v20[24], a2);
    uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v20[25], a2);
    *((void *)v5 + 1mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = result;
  }
  else if (v6 == -15989)
  {
    uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
    *((void *)v5 + 13) = *((void *)result + 1);
  }
  return result;
}

char *GTMTLSMMotionEstimationPipelineState_processTraceFuncWithPool(char *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = result;
  int v5 = *(_DWORD *)(a3 + 8);
  if (v5 == -15893)
  {
    *((void *)result + 3) = *(void *)a3;
  }
  else if (v5 == -15891)
  {
    uint64_t v7 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
    uint64_t v8 = *(void *)a3;
    uint64_t v9 = *(void *)v7;
    *((void *)v4 + 1) = *((void *)v7 + 1);
    *((void *)v4 + 2) = v8;
    *((_DWORD *)v4 + 1) = *(_DWORD *)(a3 + 8);
    *((void *)v4 + 5) = v9;
    uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v7[16], a2);
    *((void *)v4 + 6) = result;
  }
  return result;
}

uint64_t GTMTLSMFunction_processTraceFuncWithPool(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(a3 + 8);
  if (v6 > -15731)
  {
    if (v6 > -15551)
    {
      switch(v6)
      {
        case -15430:
        case -15428:
          goto LABEL_20;
        case -15429:
        case -15427:
          goto LABEL_22;
        default:
          if (v6 == -15550)
          {
            uint64_t v57 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
            uint64_t v58 = *(void *)a3;
            uint64_t v59 = *(void *)v57;
            *(void *)(v5 + 8) = *((void *)v57 + 1);
            *(void *)(v5 + 16) = v58;
            *(_DWORD *)(v5 + 4) = *(_DWORD *)(a3 + 8);
            *(void *)(v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v59;
            int v60 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
            *(void *)(v5 + 8mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v60;
            if (v60) {
              uint64_t v61 = *(void *)v60;
            }
            else {
              uint64_t v61 = 0;
            }
            *(void *)(v5 + 64) = v61;
            unsigned int v62 = v57[24];
            goto LABEL_89;
          }
          if (v6 != -10157) {
            return result;
          }
          unsigned int v41 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2)[16];
          break;
      }
    }
    else
    {
      if (v6 > -15609)
      {
        if (v6 != -15608)
        {
          if (v6 == -15551)
          {
            uint64_t v21 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
            uint64_t v22 = *(void *)a3;
            uint64_t v23 = *(void *)v21;
            *(void *)(v5 + 8) = *((void *)v21 + 1);
            *(void *)(v5 + 16) = v22;
            *(_DWORD *)(v5 + 4) = *(_DWORD *)(a3 + 8);
            *(void *)(v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v23;
            long long v24 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
            *(void *)(v5 + 8mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v24;
            if (v24) {
              uint64_t v25 = *(void *)v24;
            }
            else {
              uint64_t v25 = 0;
            }
            *(void *)(v5 + 64) = v25;
            unsigned int v62 = v21[32];
LABEL_89:
            uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v62, a2);
            *(void *)(v5 + 12mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = result;
          }
          return result;
        }
      }
      else
      {
        if (v6 == -15730)
        {
LABEL_22:
          long long v12 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
          uint64_t v17 = *(void *)a3;
          uint64_t v18 = *(void *)v12;
          *(void *)(v5 + 8) = *((void *)v12 + 1);
          *(void *)(v5 + 16) = v17;
          *(_DWORD *)(v5 + 4) = *(_DWORD *)(a3 + 8);
          *(void *)(v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v18;
          long long v19 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
          *(void *)(v5 + 8mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v19;
          if (v19) {
            uint64_t v20 = *(void *)v19;
          }
          else {
            uint64_t v20 = 0;
          }
          *(void *)(v5 + 64) = v20;
          *(unsigned char *)(v5 + 132) = 1;
          unsigned int v42 = v12[24];
          if (g_loadURLAsMemHeader)
          {
            if (v42 < 0x40) {
              uint64_t Header = 0;
            }
            else {
              uint64_t Header = GTTraceMemPool_findHeader(a2, *(void *)a3, v42);
            }
          }
          else
          {
            uint64_t Header = (uint64_t)GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v42, a2);
          }
          *(void *)(v5 + 88) = Header;
          unsigned int v56 = v12[25];
          if (g_loadURLAsMemHeader)
          {
            if (v56 < 0x40) {
              uint64_t result = 0;
            }
            else {
              uint64_t result = GTTraceMemPool_findHeader(a2, *(void *)a3, v56);
            }
          }
          else
          {
            uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v12[25], a2);
          }
          *(void *)(v5 + 96) = result;
          goto LABEL_71;
        }
        if (v6 != -15609) {
          return result;
        }
      }
      long long v26 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
      uint64_t v27 = *(void *)a3;
      uint64_t v28 = *(void *)v26;
      *(void *)(v5 + 8) = *((void *)v26 + 1);
      *(void *)(v5 + 16) = v27;
      *(_DWORD *)(v5 + 4) = *(_DWORD *)(a3 + 8);
      *(void *)(v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v28;
      uint64_t v29 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
      *(void *)(v5 + 8mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v29;
      if (v29) {
        uint64_t v30 = *(void *)v29;
      }
      else {
        uint64_t v30 = 0;
      }
      *(void *)(v5 + 64) = v30;
      unsigned int v41 = v26[24];
    }
    uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v41, a2);
    *(void *)(v5 + 112) = result;
    return result;
  }
  if (v6 <= -16083)
  {
    if (v6 <= -16124)
    {
      if (v6 == -16293)
      {
        *(void *)(result + 24) = *(void *)a3;
      }
      else if (v6 == -16290)
      {
        long long v31 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        uint64_t v32 = *(void *)a3;
        uint64_t v33 = *(void *)v31;
        *(void *)(v5 + 8) = *((void *)v31 + 1);
        *(void *)(v5 + 16) = v32;
        *(_DWORD *)(v5 + 4) = *(_DWORD *)(a3 + 8);
        *(void *)(v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v33;
        uint64_t v34 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
        *(void *)(v5 + 8mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v34;
        if (v34) {
          uint64_t v35 = *(void *)v34;
        }
        else {
          uint64_t v35 = 0;
        }
        *(void *)(v5 + 64) = v35;
        uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v31[16], a2);
        *(void *)(v5 + 56) = result;
      }
    }
    else if (v6 == -16123)
    {
      uint64_t v44 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
      uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v44[8], a2);
      *(void *)(v5 + 64) = result;
    }
    else if (v6 == -16107 || v6 == -16106)
    {
      uint64_t v7 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
      uint64_t v8 = *(void *)a3;
      uint64_t v9 = *(void *)v7;
      *(void *)(v5 + 8) = *((void *)v7 + 1);
      *(void *)(v5 + 16) = v8;
      *(_DWORD *)(v5 + 4) = *(_DWORD *)(a3 + 8);
      *(void *)(v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v9;
      long long v10 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
      *(void *)(v5 + 8mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v10;
      if (v10) {
        uint64_t v11 = *(void *)v10;
      }
      else {
        uint64_t v11 = 0;
      }
      *(void *)(v5 + 64) = v11;
      *(void *)(v5 + 56) = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v7[24], a2);
      uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v7[25], a2);
      *(void *)(v5 + 72) = result;
    }
    return result;
  }
  if (v6 > -16039)
  {
    if (v6 == -16038)
    {
      uint64_t v45 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
      uint64_t v46 = *(void *)a3;
      uint64_t v47 = *(void *)v45;
      *(void *)(v5 + 8) = *((void *)v45 + 1);
      *(void *)(v5 + 16) = v46;
      *(_DWORD *)(v5 + 4) = *(_DWORD *)(a3 + 8);
      *(void *)(v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v47;
      uint64_t v48 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
      *(void *)(v5 + 8mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v48;
      if (v48) {
        uint64_t v49 = *(void *)v48;
      }
      else {
        uint64_t v49 = 0;
      }
      *(void *)(v5 + 64) = v49;
      uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v45[16], a2);
      *(void *)(v5 + 56) = result;
      *(unsigned char *)(v5 + 131) = 1;
      return result;
    }
    if (v6 == -15830)
    {
      uint64_t v50 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
      uint64_t v51 = *(void *)a3;
      uint64_t v52 = *(void *)v50;
      *(void *)(v5 + 8) = *((void *)v50 + 1);
      *(void *)(v5 + 16) = v51;
      *(_DWORD *)(v5 + 4) = *(_DWORD *)(a3 + 8);
      *(void *)(v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v52;
      uint64_t v53 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
      *(void *)(v5 + 8mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v53;
      if (v53) {
        uint64_t v54 = *(void *)v53;
      }
      else {
        uint64_t v54 = 0;
      }
      *(void *)(v5 + 64) = v54;
      *(void *)(v5 + 56) = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v50[18], a2);
      *(unsigned char *)(v5 + 132) = 1;
      unsigned int v63 = v50[16];
      if (g_loadURLAsMemHeader)
      {
        if (v63 < 0x40) {
          uint64_t result = 0;
        }
        else {
          uint64_t result = GTTraceMemPool_findHeader(a2, *(void *)a3, v63);
        }
      }
      else
      {
        uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v63, a2);
      }
      *(void *)(v5 + 104) = result;
      *(unsigned char *)(v5 + 13mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v50[17];
      return result;
    }
    if (v6 != -15731) {
      return result;
    }
LABEL_20:
    long long v12 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
    uint64_t v13 = *(void *)a3;
    uint64_t v14 = *(void *)v12;
    *(void *)(v5 + 8) = *((void *)v12 + 1);
    *(void *)(v5 + 16) = v13;
    *(_DWORD *)(v5 + 4) = *(_DWORD *)(a3 + 8);
    *(void *)(v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v14;
    uint64_t v15 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
    *(void *)(v5 + 8mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v15;
    if (v15) {
      uint64_t v16 = *(void *)v15;
    }
    else {
      uint64_t v16 = 0;
    }
    *(void *)(v5 + 64) = v16;
    *(unsigned char *)(v5 + 132) = 1;
    unsigned int v55 = v12[24];
    if (g_loadURLAsMemHeader)
    {
      if (v55 < 0x40) {
        uint64_t result = 0;
      }
      else {
        uint64_t result = GTTraceMemPool_findHeader(a2, *(void *)a3, v55);
      }
    }
    else
    {
      uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v55, a2);
    }
    *(void *)(v5 + 88) = result;
LABEL_71:
    *(_WORD *)(v5 + 128) = *((void *)v12 + 2);
    return result;
  }
  if (v6 == -16082 || v6 == -16081)
  {
    uint64_t v36 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
    uint64_t v37 = *(void *)a3;
    uint64_t v38 = *(void *)v36;
    *(void *)(v5 + 8) = *((void *)v36 + 1);
    *(void *)(v5 + 16) = v37;
    *(_DWORD *)(v5 + 4) = *(_DWORD *)(a3 + 8);
    *(void *)(v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v38;
    int v39 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
    *(void *)(v5 + 8mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v39;
    if (v39) {
      uint64_t v40 = *(void *)v39;
    }
    else {
      uint64_t v40 = 0;
    }
    *(void *)(v5 + 64) = v40;
    *(void *)(v5 + 56) = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v36[32], a2);
    uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v36[33], a2);
    *(void *)(v5 + 72) = result;
    *(void *)(v5 + 48) = *((void *)v36 + 2);
  }
  return result;
}

char *GTMTLSMIndirectComputeCommand_processTraceFuncWithPool(char *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = result;
  int v5 = *(_DWORD *)(a3 + 8);
  if (v5 == -15935)
  {
    *((void *)result + 3) = *(void *)a3;
  }
  else if (v5 == -15921)
  {
    uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
    uint64_t v6 = *(void *)a3;
    uint64_t v7 = *(void *)result;
    *((void *)v4 + 1) = *((void *)result + 1);
    *((void *)v4 + 2) = v6;
    *((_DWORD *)v4 + 1) = *(_DWORD *)(a3 + 8);
    uint64_t v8 = *((void *)result + 2);
    *((void *)v4 + 5) = v7;
    *((void *)v4 + 6) = v8;
  }
  return result;
}

char *GTMTLSMIndirectRenderCommand_processTraceFuncWithPool(char *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = result;
  int v5 = *(_DWORD *)(a3 + 8);
  if (v5 == -15957)
  {
    *((void *)result + 3) = *(void *)a3;
  }
  else if (v5 == -15922)
  {
    uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
    uint64_t v6 = *(void *)a3;
    uint64_t v7 = *(void *)result;
    *((void *)v4 + 1) = *((void *)result + 1);
    *((void *)v4 + 2) = v6;
    *((_DWORD *)v4 + 1) = *(_DWORD *)(a3 + 8);
    uint64_t v8 = *((void *)result + 2);
    *((void *)v4 + 5) = v7;
    *((void *)v4 + 6) = v8;
  }
  return result;
}

uint64_t GTMTLSMLibrary_processTraceFuncWithPool(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(a3 + 8);
  if (v6 <= -16030)
  {
    if (v6 > -16293)
    {
      if (v6 <= -16096)
      {
        if (v6 == -16292)
        {
          uint64_t v57 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
          uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v57[8], a2);
          *(void *)(v5 + 112) = result;
        }
        else if (v6 == -16291)
        {
          *(void *)(result + 24) = *(void *)a3;
        }
      }
      else
      {
        switch(v6)
        {
          case -16095:
            uint64_t v50 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
            uint64_t v51 = *(void *)a3;
            uint64_t v52 = *(void *)v50;
            *(void *)(v5 + 8) = *((void *)v50 + 1);
            *(void *)(v5 + 16) = v51;
            *(_DWORD *)(v5 + 4) = *(_DWORD *)(a3 + 8);
            *(void *)(v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v52;
            uint64_t v53 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
            *(void *)(v5 + 64) = v53;
            if (v53)
            {
              *(void *)(v5 + 128) = *((void *)v53 + 1);
              *(unsigned char *)(v5 + 16mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v53[16];
            }
            *(unsigned char *)(v5 + 161) = 0;
            unsigned int v34 = v50[24];
LABEL_65:
            uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v34, a2);
            *(void *)(v5 + 96) = result;
            uint64_t v54 = *(void **)(v5 + 64);
            if (v54) {
              uint64_t v54 = (void *)*v54;
            }
            *(void *)(v5 + 144) = v54;
            break;
          case -16083:
            unsigned int v55 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
            uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v55[8], a2);
            *(void *)(v5 + 12mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = result;
            break;
          case -16039:
LABEL_24:
            uint64_t v14 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
            uint64_t v15 = *(void *)a3;
            uint64_t v16 = *(void *)v14;
            *(void *)(v5 + 8) = *((void *)v14 + 1);
            *(void *)(v5 + 16) = v15;
            *(_DWORD *)(v5 + 4) = *(_DWORD *)(a3 + 8);
            *(void *)(v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v16;
            uint64_t v17 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
            *(void *)(v5 + 64) = v17;
            if (v17)
            {
              *(void *)(v5 + 128) = *((void *)v17 + 1);
              *(unsigned char *)(v5 + 16mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v17[16];
            }
            *(unsigned char *)(v5 + 161) = 1;
            uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v14[24], a2);
            *(void *)(v5 + 96) = result;
            uint64_t v18 = *(void **)(v5 + 64);
            if (v18) {
              uint64_t v18 = (void *)*v18;
            }
            *(void *)(v5 + 136) = v18;
            break;
        }
      }
    }
    else
    {
      switch(v6)
      {
        case -16308:
          uint64_t v30 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
          uint64_t v31 = *(void *)a3;
          uint64_t v32 = *(void *)v30;
          *(void *)(v5 + 8) = *((void *)v30 + 1);
          *(void *)(v5 + 16) = v31;
          *(_DWORD *)(v5 + 4) = *(_DWORD *)(a3 + 8);
          *(void *)(v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v32;
          uint64_t v33 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
          *(void *)(v5 + 64) = v33;
          if (v33)
          {
            *(void *)(v5 + 128) = *((void *)v33 + 1);
            *(unsigned char *)(v5 + 16mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v33[16];
          }
          *(unsigned char *)(v5 + 161) = 0;
          unsigned int v34 = v30[16];
          goto LABEL_65;
        case -16307:
          goto LABEL_24;
        case -16306:
          uint64_t v35 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
          uint64_t v36 = *(void *)a3;
          uint64_t v37 = *(void *)v35;
          *(void *)(v5 + 8) = *((void *)v35 + 1);
          *(void *)(v5 + 16) = v36;
          *(_DWORD *)(v5 + 4) = *(_DWORD *)(a3 + 8);
          *(void *)(v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v37;
          uint64_t v38 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
          *(void *)(v5 + 64) = v38;
          if (v38)
          {
            *(void *)(v5 + 128) = *((void *)v38 + 1);
            *(unsigned char *)(v5 + 16mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v38[16];
          }
          *(unsigned char *)(v5 + 161) = 3;
          unsigned int v39 = v35[24];
          if (g_loadURLAsMemHeader)
          {
            if (v39 < 0x40) {
              uint64_t result = 0;
            }
            else {
              uint64_t result = GTTraceMemPool_findHeader(a2, *(void *)a3, v39);
            }
          }
          else
          {
            uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v39, a2);
          }
          *(void *)(v5 + 96) = result;
          break;
        case -16305:
        case -16304:
          uint64_t v8 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
          uint64_t v9 = *(void *)a3;
          uint64_t v10 = *(void *)v8;
          *(void *)(v5 + 8) = *((void *)v8 + 1);
          *(void *)(v5 + 16) = v9;
          *(_DWORD *)(v5 + 4) = *(_DWORD *)(a3 + 8);
          *(void *)(v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v10;
          uint64_t v11 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
          *(void *)(v5 + 64) = v11;
          if (v11)
          {
            *(void *)(v5 + 128) = *((void *)v11 + 1);
            *(unsigned char *)(v5 + 16mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v11[16];
          }
          *(unsigned char *)(v5 + 161) = 2;
          unsigned int v12 = v8[24];
          if (g_loadURLAsMemHeader)
          {
            if (v12 < 0x40) {
              uint64_t Header = 0;
            }
            else {
              uint64_t Header = GTTraceMemPool_findHeader(a2, *(void *)a3, v12);
            }
          }
          else
          {
            uint64_t Header = (uint64_t)GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v12, a2);
          }
          *(void *)(v5 + 96) = Header;
          uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v8[25], a2);
          *(void *)(v5 + 104) = result;
          break;
        default:
          return result;
      }
    }
  }
  else
  {
    if (v6 <= -15435)
    {
      if (v6 <= -15848)
      {
        if (v6 != -16029 && v6 != -16018) {
          return result;
        }
        uint64_t v23 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        uint64_t v24 = *(void *)a3;
        uint64_t v25 = *(void *)v23;
        *(void *)(v5 + 8) = *((void *)v23 + 1);
        *(void *)(v5 + 16) = v24;
        *(_DWORD *)(v5 + 4) = *(_DWORD *)(a3 + 8);
        *(void *)(v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v25;
        long long v26 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
        *(void *)(v5 + 64) = v26;
        if (v26)
        {
          *(void *)(v5 + 128) = *((void *)v26 + 1);
          *(unsigned char *)(v5 + 16mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v26[16];
        }
        *(unsigned char *)(v5 + 161) = 4;
        uint64_t v27 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v23[24], a2);
        if (v27)
        {
          uint64_t v28 = *(void *)v27;
          *(void *)(v5 + 48) = v27 + 8;
          *(_DWORD *)(v5 + 152) = v28;
        }
        unsigned int v29 = v23[25];
      }
      else
      {
        if (v6 != -15847)
        {
          if (v6 == -15693)
          {
            uint64_t v44 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
            uint64_t v45 = *(void *)a3;
            uint64_t v46 = *(void *)v44;
            *(void *)(v5 + 8) = *((void *)v44 + 1);
            *(void *)(v5 + 16) = v45;
            *(_DWORD *)(v5 + 4) = *(_DWORD *)(a3 + 8);
            *(void *)(v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v46;
            uint64_t v47 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
            *(void *)(v5 + 64) = v47;
            if (v47)
            {
              *(void *)(v5 + 128) = *((void *)v47 + 1);
              *(unsigned char *)(v5 + 16mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v47[16];
            }
            *(void *)(v5 + 8mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v44[24], a2);
            uint64_t v48 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v44[25], a2);
            uint64_t v49 = *(void *)v48;
            uint64_t result = (uint64_t)(v48 + 8);
            *(void *)(v5 + 88) = result;
            *(_DWORD *)(v5 + 156) = v49;
            goto LABEL_36;
          }
          int v7 = -15435;
          goto LABEL_18;
        }
        uint64_t v40 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        uint64_t v41 = *(void *)a3;
        uint64_t v42 = *(void *)v40;
        *(void *)(v5 + 8) = *((void *)v40 + 1);
        *(void *)(v5 + 16) = v41;
        *(_DWORD *)(v5 + 4) = *(_DWORD *)(a3 + 8);
        *(void *)(v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v42;
        uint64_t v43 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
        *(void *)(v5 + 64) = v43;
        if (v43)
        {
          *(void *)(v5 + 128) = *((void *)v43 + 1);
          *(unsigned char *)(v5 + 16mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v43[16];
        }
        *(unsigned char *)(v5 + 161) = 5;
        *(void *)(v5 + 48) = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v40[32], a2);
        *(_DWORD *)(v5 + 152) = *((void *)v40 + 2);
        unsigned int v29 = v40[33];
      }
      uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v29, a2);
      *(void *)(v5 + 56) = result;
      return result;
    }
    if (v6 <= -15420)
    {
      if (v6 != -15434 && v6 != -15421)
      {
        int v7 = -15420;
LABEL_18:
        if (v6 != v7) {
          return result;
        }
      }
LABEL_33:
      long long v19 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
      uint64_t v20 = *(void *)a3;
      uint64_t v21 = *(void *)v19;
      *(void *)(v5 + 8) = *((void *)v19 + 1);
      *(void *)(v5 + 16) = v20;
      *(_DWORD *)(v5 + 4) = *(_DWORD *)(a3 + 8);
      *(void *)(v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v21;
      uint64_t v22 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
      *(void *)(v5 + 64) = v22;
      if (v22)
      {
        *(void *)(v5 + 128) = *((void *)v22 + 1);
        *(unsigned char *)(v5 + 16mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v22[16];
      }
      uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v19[24], a2);
      *(void *)(v5 + 72) = result;
      *(void *)(v5 + 88) = *(void *)(result + 8);
      *(_DWORD *)(v5 + 156) = *(unsigned __int16 *)(result + 18);
LABEL_36:
      *(unsigned char *)(v5 + 161) = 6;
      return result;
    }
    switch(v6)
    {
      case -15419:
        goto LABEL_33;
      case -10188:
        unsigned int v56 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v56[8], a2);
        *(void *)(v5 + 128) = result;
        break;
      case -10183:
        uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        *(unsigned char *)(v5 + 16mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *(void *)(result + 8);
        break;
    }
  }
  return result;
}

char *GTMTLSMDynamicLibrary_processTraceFuncWithPool(char *result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(a3 + 8);
  if (v6 > -15676)
  {
    if (v6 == -15675)
    {
      *((void *)result + 3) = *(void *)a3;
    }
    else if (v6 == -15613)
    {
      uint64_t v8 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
      uint64_t v9 = *(void *)a3;
      uint64_t v10 = *(void *)v8;
      *((void *)v5 + 1) = *((void *)v8 + 1);
      *((void *)v5 + 2) = v9;
      *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
      *((void *)v5 + 5) = v10;
      uint64_t v11 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
      if (v11)
      {
        *((void *)v5 + 9) = *(void *)v11;
        *(_OWORD *)(v5 + 88) = *(_OWORD *)(v11 + 8);
        *((_WORD *)v5 + 52) = *((_WORD *)v11 + 12);
      }
      uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v8[24], a2);
      *((void *)v5 + 1mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = result;
    }
  }
  else if (v6 == -15695)
  {
    unsigned int v12 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
    uint64_t v13 = *(void *)a3;
    uint64_t v14 = *(void *)v12;
    *((void *)v5 + 1) = *((void *)v12 + 1);
    *((void *)v5 + 2) = v13;
    *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
    *((void *)v5 + 5) = v14;
    uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
    if (result)
    {
      *((void *)v5 + 9) = *(void *)result;
      *(_OWORD *)(v5 + 88) = *(_OWORD *)(result + 8);
      *((_WORD *)v5 + 52) = *((_WORD *)result + 12);
    }
    *((void *)v5 + 6) = *((void *)v12 + 2);
  }
  else if (v6 == -15676)
  {
    int v7 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
    uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v7[8], a2);
    *((void *)v5 + 8) = result;
  }
  return result;
}

char *GTMTLSMPipelineLibrary_processTraceFuncWithPool(char *result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(a3 + 8);
  if (v6 > -15745)
  {
    if (v6 == -15744)
    {
      uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
      v5[82] = *((_DWORD *)result + 2);
    }
    else if (v6 == -15743)
    {
      uint64_t v10 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
      uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v10[8], a2);
      *((void *)v5 + 7) = result;
    }
  }
  else if (v6 == -16291)
  {
    *((void *)result + 3) = *(void *)a3;
  }
  else if (v6 == -16075)
  {
    int v7 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
    uint64_t v8 = *(void *)a3;
    uint64_t v9 = *(void *)v7;
    *((void *)v5 + 1) = *((void *)v7 + 1);
    *((void *)v5 + 2) = v8;
    *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
    *((void *)v5 + 5) = v9;
    *((void *)v5 + 6) = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v7[24], a2);
    uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
    if (result)
    {
      *((_WORD *)v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *((_WORD *)result + 12);
      *((_OWORD *)v5 + 4) = *(_OWORD *)(result + 8);
    }
  }
  return result;
}

char *GTMTLSMIOCommandQueue_processTraceFuncWithPool(char *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = result;
  int v5 = *(_DWORD *)(a3 + 8);
  if (v5 == -15332)
  {
    *((void *)result + 3) = *(void *)a3;
  }
  else if (v5 == -15350)
  {
    int v7 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
    uint64_t v8 = *(void *)a3;
    uint64_t v9 = *(void *)v7;
    *((void *)v4 + 1) = *((void *)v7 + 1);
    *((void *)v4 + 2) = v8;
    *((_DWORD *)v4 + 1) = *(_DWORD *)(a3 + 8);
    *((void *)v4 + 5) = v9;
    uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v7[24], a2);
    *((void *)v4 + 7) = result;
  }
  return result;
}

char *GTMTLSMCommandQueue_processTraceFuncWithPool(char *result, uint64_t a2, uint64_t a3)
{
  int v5 = result;
  int v6 = *(_DWORD *)(a3 + 8);
  if (v6 <= -16316)
  {
    switch(v6)
    {
      case -16349:
        int v7 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v7[8], a2);
        *((void *)v5 + 6) = result;
        break;
      case -16348:
        uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        *((_DWORD *)v5 + 17) = *((_DWORD *)result + 2);
        break;
      case -16347:
        uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        v5[75] = *((_DWORD *)result + 2);
        break;
      case -16346:
        uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        v5[76] = *((_DWORD *)result + 2);
        break;
      case -16345:
        uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        v5[74] = *((_DWORD *)result + 2);
        break;
      case -16344:
        *((void *)result + 3) = *(void *)a3;
        break;
      default:
        if (v6 == -16316)
        {
          uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
          uint64_t v12 = *(void *)a3;
          uint64_t v13 = *(void *)result;
          *((void *)v5 + 1) = *((void *)result + 1);
          *((void *)v5 + 2) = v12;
          *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
          *((void *)v5 + 5) = v13;
          int v11 = 64;
LABEL_12:
          *((_DWORD *)v5 + 16) = v11;
        }
        break;
    }
  }
  else
  {
    switch(v6)
    {
      case -15809:
      case -15808:
        uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        v5[73] = *((void *)result + 1);
        break;
      case -15807:
        return result;
      case -15806:
      case -15805:
        uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        v5[72] = *((void *)result + 1);
        break;
      default:
        if (v6 == -16315)
        {
          uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
          uint64_t v14 = *(void *)a3;
          uint64_t v15 = *(void *)result;
          *((void *)v5 + 1) = *((void *)result + 1);
          *((void *)v5 + 2) = v14;
          *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
          *((void *)v5 + 5) = v15;
          *((_DWORD *)v5 + 16) = *((void *)result + 2);
        }
        else if (v6 == -16165)
        {
          uint64_t v8 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
          uint64_t v9 = *(void *)a3;
          uint64_t v10 = *(void *)v8;
          *((void *)v5 + 1) = *((void *)v8 + 1);
          *((void *)v5 + 2) = v9;
          *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
          *((void *)v5 + 5) = v10;
          uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v8[16], a2);
          *((void *)v5 + 7) = result;
          int v11 = *(_DWORD *)result;
          goto LABEL_12;
        }
        break;
    }
  }
  return result;
}

char *GTMTLSMRasterizationRateMap_processTraceFuncWithPool(char *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = result;
  int v5 = *(_DWORD *)(a3 + 8);
  switch(v5)
  {
    case -15801:
      *((void *)result + 3) = *(void *)a3;
      break;
    case -15411:
      uint64_t v10 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
      uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v10[8], a2);
      *((void *)v4 + 6) = result;
      break;
    case -15793:
      int v7 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
      uint64_t v8 = *(void *)a3;
      uint64_t v9 = *(void *)v7;
      *((void *)v4 + 1) = *((void *)v7 + 1);
      *((void *)v4 + 2) = v8;
      *((_DWORD *)v4 + 1) = *(_DWORD *)(a3 + 8);
      *((void *)v4 + 5) = v9;
      uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v7[16], a2);
      *((void *)v4 + 6) = result;
      *((_DWORD *)v4 + 14) = *((_DWORD *)result + 6);
      v4[60] = result[34];
      break;
  }
  return result;
}

char *GTMTLSMDevice_processTraceFuncWithPool(char *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = result;
  int v5 = *(_DWORD *)(a3 + 8);
  if (v5 == -10239)
  {
    int v7 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
    *((void *)v4 + 1) = *(void *)v7;
    uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v7[8], a2);
    *((void *)v4 + 5) = result;
  }
  else if (v5 == -16317)
  {
    *((void *)result + 3) = *(void *)a3;
  }
  return result;
}

uint64_t GTMTLSMFilter_processTraceFuncWithPool(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(a3 + 8);
  if (v6 <= -6123)
  {
    switch(v6)
    {
      case -6143:
LABEL_5:
        uint64_t v10 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        uint64_t v11 = *(void *)a3;
        uint64_t v12 = *(void *)v10;
        *(void *)(v5 + 8) = *((void *)v10 + 1);
        *(void *)(v5 + 16) = v11;
        uint64_t v13 = *(unsigned int *)(a3 + 8);
        *(_DWORD *)(v5 + 4) = v13;
        *(void *)(v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v13;
        *(void *)(v5 + 48) = v12;
        *(void *)(v5 + 56) = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v10[16], a2);
        uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v10[24], a2);
        *(void *)(v5 + 64) = result;
        break;
      case -6141:
LABEL_9:
        uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        uint64_t v18 = *(void *)a3;
        uint64_t v19 = *(void *)result;
        *(void *)(v5 + 8) = *(void *)(result + 8);
        *(void *)(v5 + 16) = v18;
        uint64_t v20 = *(unsigned int *)(a3 + 8);
        *(_DWORD *)(v5 + 4) = v20;
        *(void *)(v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v20;
        *(void *)(v5 + 48) = v19;
        *(void *)(v5 + 56) = *(void *)(result + 16);
        *(void *)(v5 + 64) = *(void *)(result + 24);
        *(void *)(v5 + 72) = *(void *)(result + 32);
        *(void *)(v5 + 8mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *(void *)(result + 40);
        break;
      case -6139:
        *(void *)(result + 24) = *(void *)a3;
        break;
      case -6134:
        uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        uint64_t v28 = *(void *)a3;
        uint64_t v29 = *(void *)result;
        *(void *)(v5 + 8) = *(void *)(result + 8);
        *(void *)(v5 + 16) = v28;
        uint64_t v30 = *(unsigned int *)(a3 + 8);
        *(_DWORD *)(v5 + 4) = v30;
        *(void *)(v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v30;
        *(void *)(v5 + 48) = v29;
        *(unsigned char *)(v5 + 96) = *(_DWORD *)(result + 16);
        *(void *)(v5 + 56) = *(void *)(result + 24);
        *(void *)(v5 + 64) = *(void *)(result + 32);
        *(void *)(v5 + 8mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *(void *)(result + 40);
        uint64_t v24 = *(void *)(result + 48);
LABEL_14:
        *(void *)(v5 + 88) = v24;
        break;
      case -6133:
        uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        uint64_t v31 = *(void *)a3;
        uint64_t v32 = *(void *)result;
        *(void *)(v5 + 8) = *(void *)(result + 8);
        *(void *)(v5 + 16) = v31;
        uint64_t v33 = *(unsigned int *)(a3 + 8);
        *(_DWORD *)(v5 + 4) = v33;
        *(void *)(v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v33;
        *(void *)(v5 + 48) = v32;
        *(void *)(v5 + 56) = *(int *)(result + 16);
        *(_DWORD *)(v5 + 64) = *(_DWORD *)(result + 20);
        *(_DWORD *)(v5 + 68) = *(_DWORD *)(result + 24);
        *(_DWORD *)(v5 + 72) = *(_DWORD *)(result + 28);
        break;
      case -6131:
        unsigned int v34 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        uint64_t v35 = *(void *)a3;
        uint64_t v36 = *(void *)v34;
        *(void *)(v5 + 8) = *((void *)v34 + 1);
        *(void *)(v5 + 16) = v35;
        uint64_t v37 = *(unsigned int *)(a3 + 8);
        *(_DWORD *)(v5 + 4) = v37;
        *(void *)(v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v37;
        *(void *)(v5 + 48) = v36;
        *(void *)(v5 + 56) = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v34[16], a2);
        uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v34[24], a2);
        *(void *)(v5 + 64) = result;
        *(unsigned char *)(v5 + 72) = *((_DWORD *)v34 + 8);
        break;
      case -6129:
        uint64_t v38 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        uint64_t v39 = *(void *)a3;
        uint64_t v40 = *(void *)v38;
        *(void *)(v5 + 8) = *((void *)v38 + 1);
        *(void *)(v5 + 16) = v39;
        uint64_t v41 = *(unsigned int *)(a3 + 8);
        *(_DWORD *)(v5 + 4) = v41;
        *(void *)(v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v41;
        *(void *)(v5 + 48) = v40;
        *(void *)(v5 + 56) = *((int *)v38 + 4);
        unsigned int v42 = v38[24];
        if (g_loadURLAsMemHeader)
        {
          if (v42 < 0x40) {
            uint64_t result = 0;
          }
          else {
            uint64_t result = GTTraceMemPool_findHeader(a2, *(void *)a3, v42);
          }
        }
        else
        {
          uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v42, a2);
        }
        *(void *)(v5 + 72) = result;
        *(void *)(v5 + 64) = *((void *)v38 + 4);
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case -6122:
        uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        uint64_t v21 = *(void *)a3;
        uint64_t v22 = *(void *)result;
        *(void *)(v5 + 8) = *(void *)(result + 8);
        *(void *)(v5 + 16) = v21;
        uint64_t v23 = *(unsigned int *)(a3 + 8);
        *(_DWORD *)(v5 + 4) = v23;
        *(void *)(v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v23;
        *(void *)(v5 + 48) = v22;
        *(unsigned char *)(v5 + 96) = *(_DWORD *)(result + 16);
        *(unsigned char *)(v5 + 97) = *(_DWORD *)(result + 20);
        *(void *)(v5 + 56) = *(void *)(result + 24);
        *(void *)(v5 + 64) = *(void *)(result + 32);
        *(void *)(v5 + 72) = *(void *)(result + 40);
        *(void *)(v5 + 8mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *(void *)(result + 48);
        uint64_t v24 = *(void *)(result + 56);
        goto LABEL_14;
      case -6121:
      case -6120:
      case -6118:
      case -6117:
      case -6115:
      case -6114:
      case -6113:
      case -6112:
        return result;
      case -6119:
      case -6110:
        uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        uint64_t v7 = *(void *)a3;
        uint64_t v8 = *(void *)result;
        *(void *)(v5 + 8) = *(void *)(result + 8);
        *(void *)(v5 + 16) = v7;
        uint64_t v9 = *(unsigned int *)(a3 + 8);
        *(_DWORD *)(v5 + 4) = v9;
        *(void *)(v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v9;
        *(void *)(v5 + 48) = v8;
        break;
      case -6116:
        uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        uint64_t v25 = *(void *)a3;
        uint64_t v26 = *(void *)result;
        *(void *)(v5 + 8) = *(void *)(result + 8);
        *(void *)(v5 + 16) = v25;
        uint64_t v27 = *(unsigned int *)(a3 + 8);
        *(_DWORD *)(v5 + 4) = v27;
        *(void *)(v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v27;
        *(void *)(v5 + 48) = v26;
        *(void *)(v5 + 56) = *(void *)(result + 16);
        *(void *)(v5 + 64) = *(void *)(result + 24);
        *(void *)(v5 + 72) = *(void *)(result + 32);
        *(void *)(v5 + 8mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *(void *)(result + 40);
        *(void *)(v5 + 88) = *(void *)(result + 48);
        *(void *)(v5 + 96) = *(void *)(result + 56);
        break;
      case -6111:
        goto LABEL_5;
      case -6109:
        goto LABEL_9;
      default:
        if (v6 == -6096 || v6 == -6095)
        {
          uint64_t v14 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
          uint64_t v15 = *(void *)a3;
          uint64_t v16 = *(void *)v14;
          *(void *)(v5 + 8) = *((void *)v14 + 1);
          *(void *)(v5 + 16) = v15;
          uint64_t v17 = *(unsigned int *)(a3 + 8);
          *(_DWORD *)(v5 + 4) = v17;
          *(void *)(v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v17;
          *(void *)(v5 + 48) = v16;
          uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v14[16], a2);
          *(void *)(v5 + 56) = result;
        }
        break;
    }
  }
  return result;
}

char *GTMTLSMResourceGroup_processTraceFuncWithPool(char *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = result;
  int v5 = *(_DWORD *)(a3 + 8);
  if (v5 == -15769)
  {
    *((void *)result + 3) = *(void *)a3;
  }
  else if (v5 == -15900)
  {
    uint64_t v7 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
    uint64_t v8 = *(void *)a3;
    uint64_t v9 = *(void *)v7;
    *((void *)v4 + 1) = *((void *)v7 + 1);
    *((void *)v4 + 2) = v8;
    *((_DWORD *)v4 + 1) = *(_DWORD *)(a3 + 8);
    *((void *)v4 + 5) = v9;
    uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v7[24], a2);
    *((void *)v4 + 6) = result;
    *((_DWORD *)v4 + 14) = *((void *)v7 + 2);
  }
  return result;
}

char *GTMTLSMDrawable_processTraceFuncWithPool(char *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = result;
  int v5 = *(_DWORD *)(a3 + 8);
  if (v5 > -7162)
  {
    if (v5 == -7161)
    {
      *((void *)result + 3) = *(void *)a3;
    }
    else if (v5 == -6655)
    {
      uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
      uint64_t v8 = *(void *)a3;
      *((void *)v4 + 1) = *((void *)result + 1);
      *((void *)v4 + 2) = v8;
      *((_DWORD *)v4 + 1) = *(_DWORD *)(a3 + 8);
    }
  }
  else if (v5 == -7167)
  {
    uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
    *((void *)v4 + 6) = *((void *)result + 1);
  }
  else if (v5 == -7166)
  {
    uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
    uint64_t v6 = *(void *)a3;
    uint64_t v7 = *(void *)result;
    *((void *)v4 + 1) = *((void *)result + 1);
    *((void *)v4 + 2) = v6;
    *((_DWORD *)v4 + 1) = *(_DWORD *)(a3 + 8);
    *((void *)v4 + 5) = v7;
  }
  return result;
}

uint64_t GTMTLSMLayer_processTraceFuncWithPool(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(a3 + 8);
  switch(v6)
  {
    case -7165:
      uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
      *(_WORD *)(v5 + 272) = *(void *)(result + 8);
      break;
    case -7164:
      uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
      *(void *)(v5 + 176) = *(void *)(result + 8);
      *(void *)(v5 + 184) = *(void *)(result + 16);
      break;
    case -7163:
      uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
      uint64_t v7 = *(void *)a3;
      uint64_t v8 = *(void *)(result + 8);
      *(void *)(v5 + 8) = *(void *)result;
      *(void *)(v5 + 16) = v7;
      *(void *)(v5 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v8;
      break;
    case -7162:
      uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
      for (uint64_t i = 0; i != 32; i += 8)
        *(void *)(v5 + 216 + i) = *(void *)(result + 8 + i);
      goto LABEL_14;
    case -7161:
    case -7158:
    case -7157:
    case -7156:
    case -7155:
      return result;
    case -7160:
      uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
      *(unsigned char *)(v5 + 274) = *(_DWORD *)(result + 8);
      break;
    case -7159:
      uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
      for (uint64_t j = 0; j != 32; j += 8)
        *(void *)(v5 + 216 + j) = *(void *)(result + 8 + j);
LABEL_14:
      *(void *)(v5 + 208) = *(void *)(result + 40);
      break;
    case -7154:
      uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
      *(unsigned char *)(v5 + 275) = *(_DWORD *)(result + 8);
      break;
    case -7153:
      unsigned int v11 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2)[8];
      if (g_loadURLAsMemHeader)
      {
        if (v11 < 0x40) {
          uint64_t result = 0;
        }
        else {
          uint64_t result = GTTraceMemPool_findHeader(a2, *(void *)a3, v11);
        }
      }
      else
      {
        uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v11, a2);
      }
      *(void *)(v5 + 264) = result;
      break;
    default:
      if (v6 == -8183)
      {
        uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        for (uint64_t k = 0; k != 128; k += 8)
          *(void *)(v5 + 48 + k) = *(void *)(result + 8 + k);
        *(_OWORD *)(v5 + 248) = *(_OWORD *)(result + 136);
      }
      else if (v6 == -8181)
      {
        uint64_t result = (uint64_t)GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        *(void *)(v5 + 192) = *(void *)(result + 8);
        *(void *)(v5 + 20mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *(void *)(result + 16);
      }
      break;
  }
  return result;
}

char *GTMTLSMAccelerationStructure_processTraceFuncWithPool(char *result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(a3 + 8);
  if (v6 <= -10198)
  {
    if (v6 > -15507)
    {
      switch(v6)
      {
        case -15359:
          uint64_t v8 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
          uint64_t v9 = *(void *)a3;
          *((void *)v5 + 1) = *((void *)v8 + 1);
          *((void *)v5 + 2) = v9;
          *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
          uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
          *((void *)v5 + 15) = result;
          if (result)
          {
            uint64_t v10 = *((void *)result + 1);
            *((void *)v5 + 7) = *(void *)result;
            *((_DWORD *)v5 + 22) = *((_DWORD *)result + 4);
            uint64_t v11 = *((void *)result + 4);
            *((void *)v5 + 16) = *((void *)result + 3);
            *((void *)v5 + 23) = v11;
            uint64_t v12 = *((void *)result + 9);
            *((_WORD *)v5 + 48) = *((_WORD *)result + 32);
            *((void *)v5 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v12;
            long long v13 = *((_OWORD *)result + 5);
            *(_OWORD *)(v5 + 168) = v13;
            *((_DWORD *)v5 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v12 - v13;
            *((_DWORD *)v5 + 21) = v10;
            *((void *)v5 + 24) = *((void *)result + 12);
            *((void *)v5 + 17) = *((void *)result + 7);
          }
          *((void *)v5 + 5) = *(void *)v8;
          uint64_t v14 = *((void *)v8 + 2);
          *((void *)v5 + 25) = *((void *)v8 + 3);
          uint64_t v15 = *((void *)v8 + 4);
          *((void *)v5 + 18) = v14;
          *((void *)v5 + 19) = v15;
          return result;
        case -15358:
          goto LABEL_31;
        case -15357:
          return result;
        case -15356:
          unsigned int v42 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
          uint64_t v43 = *(void *)a3;
          *((void *)v5 + 1) = *((void *)v42 + 1);
          *((void *)v5 + 2) = v43;
          *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
          uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
          *((void *)v5 + 15) = result;
          if (result)
          {
            uint64_t v44 = *((void *)result + 1);
            *((void *)v5 + 7) = *(void *)result;
            *((_DWORD *)v5 + 22) = *((_DWORD *)result + 4);
            uint64_t v45 = *((void *)result + 4);
            *((void *)v5 + 16) = *((void *)result + 3);
            *((void *)v5 + 23) = v45;
            uint64_t v46 = *((void *)result + 5);
            *((void *)v5 + 25) = *((void *)result + 6);
            *((_WORD *)v5 + 48) = *((_WORD *)result + 32);
            uint64_t v47 = *((void *)result + 9);
            *((void *)v5 + 19) = v46;
            *((void *)v5 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v47;
            long long v48 = *((_OWORD *)result + 5);
            *(_OWORD *)(v5 + 168) = v48;
            *((_DWORD *)v5 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v47 - v48;
            *((_DWORD *)v5 + 21) = v44;
            *((void *)v5 + 24) = *((void *)result + 12);
            *((void *)v5 + 17) = *((void *)result + 7);
          }
          goto LABEL_62;
        case -15355:
          unsigned int v42 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
          uint64_t v49 = *(void *)a3;
          *((void *)v5 + 1) = *((void *)v42 + 1);
          *((void *)v5 + 2) = v49;
          *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
          uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
          *((void *)v5 + 15) = result;
          if (result)
          {
            uint64_t v50 = *((void *)result + 1);
            *((void *)v5 + 7) = *(void *)result;
            int v51 = *((_DWORD *)result + 4);
            *((_DWORD *)v5 + 21) = v50;
            *((_DWORD *)v5 + 22) = v51;
            uint64_t v52 = *((void *)result + 4);
            *((void *)v5 + 16) = *((void *)result + 3);
            uint64_t v53 = *((void *)result + 6);
            *((void *)v5 + 19) = *((void *)result + 5);
            *((void *)v5 + 23) = v52;
            *((void *)v5 + 25) = v53;
            *((_WORD *)v5 + 48) = *((_WORD *)result + 32);
            *((_OWORD *)v5 + 1mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *(_OWORD *)(result + 72);
            uint64_t v54 = *((void *)result + 12);
            *((void *)v5 + 22) = *((void *)result + 11);
            *((void *)v5 + 24) = v54;
            *((void *)v5 + 17) = *((void *)result + 7);
          }
          *((_DWORD *)v5 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *((void *)v42 + 2);
LABEL_62:
          *((void *)v5 + 6) = *(void *)v42;
          return result;
        case -15354:
          uint64_t v33 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
          uint64_t v55 = *(void *)a3;
          *((void *)v5 + 1) = *((void *)v33 + 1);
          *((void *)v5 + 2) = v55;
          *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
          uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
          *((void *)v5 + 15) = result;
          if (result)
          {
            uint64_t v56 = *((void *)result + 1);
            *((void *)v5 + 7) = *(void *)result;
            *((_DWORD *)v5 + 22) = *((_DWORD *)result + 4);
            *((void *)v5 + 16) = *((void *)result + 3);
            uint64_t v57 = *((void *)result + 5);
            *((void *)v5 + 25) = *((void *)result + 6);
            *((_WORD *)v5 + 48) = *((_WORD *)result + 32);
            uint64_t v58 = *((void *)result + 9);
            *((void *)v5 + 19) = v57;
            *((void *)v5 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v58;
            long long v59 = *((_OWORD *)result + 5);
            *(_OWORD *)(v5 + 168) = v59;
            *((_DWORD *)v5 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v58 - v59;
            *((_DWORD *)v5 + 21) = v56;
            *((void *)v5 + 24) = *((void *)result + 12);
            *((void *)v5 + 17) = *((void *)result + 7);
          }
          *((void *)v5 + 6) = *(void *)v33;
          goto LABEL_66;
        case -15353:
          int v60 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
          uint64_t v61 = *(void *)a3;
          *((void *)v5 + 1) = *((void *)v60 + 1);
          *((void *)v5 + 2) = v61;
          *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
          uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
          *((void *)v5 + 15) = result;
          if (result)
          {
            uint64_t v62 = *((void *)result + 1);
            *((void *)v5 + 7) = *(void *)result;
            int v63 = *((_DWORD *)result + 4);
            *((_DWORD *)v5 + 21) = v62;
            *((_DWORD *)v5 + 22) = v63;
            *((void *)v5 + 16) = *((void *)result + 3);
            uint64_t v64 = *((void *)result + 6);
            *((void *)v5 + 19) = *((void *)result + 5);
            *((void *)v5 + 25) = v64;
            *((_WORD *)v5 + 48) = *((_WORD *)result + 32);
            *((_OWORD *)v5 + 1mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *(_OWORD *)(result + 72);
            uint64_t v65 = *((void *)result + 12);
            *((void *)v5 + 22) = *((void *)result + 11);
            *((void *)v5 + 24) = v65;
            *((void *)v5 + 17) = *((void *)result + 7);
          }
          *((void *)v5 + 6) = *(void *)v60;
          uint64_t v66 = *((void *)v60 + 2);
          *((_DWORD *)v5 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *((void *)v60 + 3);
          *((void *)v5 + 23) = v66;
          return result;
        case -15352:
          uint64_t v67 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
          uint64_t v68 = *(void *)a3;
          *((void *)v5 + 1) = *((void *)v67 + 1);
          *((void *)v5 + 2) = v68;
          *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
          uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
          *((void *)v5 + 15) = result;
          if (result)
          {
            uint64_t v69 = *((void *)result + 1);
            *((void *)v5 + 7) = *(void *)result;
            int v70 = *((_DWORD *)result + 4);
            *((_DWORD *)v5 + 21) = v69;
            *((_DWORD *)v5 + 22) = v70;
            *((void *)v5 + 16) = *((void *)result + 3);
            *((void *)v5 + 25) = *((void *)result + 6);
            *((_WORD *)v5 + 48) = *((_WORD *)result + 32);
            *((_OWORD *)v5 + 1mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *(_OWORD *)(result + 72);
            uint64_t v71 = *((void *)result + 12);
            *((void *)v5 + 22) = *((void *)result + 11);
            *((void *)v5 + 24) = v71;
            *((void *)v5 + 17) = *((void *)result + 7);
          }
          *((void *)v5 + 6) = *(void *)v67;
          uint64_t v72 = *((void *)v67 + 2);
          *((_DWORD *)v5 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *((void *)v67 + 3);
          *((void *)v5 + 23) = v72;
          uint64_t v39 = *((void *)v67 + 4);
          goto LABEL_73;
        case -15351:
          int v73 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
          uint64_t v74 = *(void *)a3;
          *((void *)v5 + 1) = *((void *)v73 + 1);
          *((void *)v5 + 2) = v74;
          *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
          uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
          *((void *)v5 + 15) = result;
          if (result)
          {
            uint64_t v75 = *((void *)result + 1);
            *((void *)v5 + 7) = *(void *)result;
            *((_DWORD *)v5 + 22) = *((_DWORD *)result + 4);
            *((void *)v5 + 16) = *((void *)result + 3);
            *((void *)v5 + 25) = *((void *)result + 6);
            uint64_t v76 = *((void *)result + 9);
            *((_WORD *)v5 + 48) = *((_WORD *)result + 32);
            *((void *)v5 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v76;
            long long v77 = *((_OWORD *)result + 5);
            *(_OWORD *)(v5 + 168) = v77;
            *((_DWORD *)v5 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v76 - v77;
            *((_DWORD *)v5 + 21) = v75;
            *((void *)v5 + 24) = *((void *)result + 12);
            *((void *)v5 + 17) = *((void *)result + 7);
          }
          *((void *)v5 + 6) = *(void *)v73;
          goto LABEL_80;
        default:
          if (v6 == -15506)
          {
            int v73 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
            uint64_t v78 = *(void *)a3;
            *((void *)v5 + 1) = *((void *)v73 + 1);
            *((void *)v5 + 2) = v78;
            *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
            uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
            *((void *)v5 + 15) = result;
            if (result)
            {
              uint64_t v79 = *((void *)result + 1);
              *((void *)v5 + 7) = *(void *)result;
              *((_DWORD *)v5 + 22) = *((_DWORD *)result + 4);
              *((void *)v5 + 16) = *((void *)result + 3);
              *((void *)v5 + 25) = *((void *)result + 6);
              uint64_t v80 = *((void *)result + 9);
              *((_WORD *)v5 + 48) = *((_WORD *)result + 32);
              *((void *)v5 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v80;
              long long v81 = *((_OWORD *)result + 5);
              *(_OWORD *)(v5 + 168) = v81;
              *((_DWORD *)v5 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v80 - v81;
              *((_DWORD *)v5 + 21) = v79;
              *((void *)v5 + 24) = *((void *)result + 12);
              *((void *)v5 + 17) = *((void *)result + 7);
            }
            *((void *)v5 + 5) = *(void *)v73;
LABEL_80:
            uint64_t v82 = *((void *)v73 + 3);
            *((void *)v5 + 23) = *((void *)v73 + 2);
            *((void *)v5 + 19) = v82;
          }
          else if (v6 == -15464)
          {
            uint64_t v24 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
            uint64_t v25 = *(void *)a3;
            *((void *)v5 + 1) = *((void *)v24 + 1);
            *((void *)v5 + 2) = v25;
            *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
            uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
            *((void *)v5 + 15) = result;
            if (result)
            {
              uint64_t v26 = *((void *)result + 1);
              *((void *)v5 + 7) = *(void *)result;
              *((_DWORD *)v5 + 22) = *((_DWORD *)result + 4);
              uint64_t v27 = *((void *)result + 4);
              *((void *)v5 + 16) = *((void *)result + 3);
              uint64_t v28 = *((void *)result + 5);
              *((void *)v5 + 23) = v27;
              *((_WORD *)v5 + 48) = *((_WORD *)result + 32);
              uint64_t v29 = *((void *)result + 9);
              *((void *)v5 + 19) = v28;
              *((void *)v5 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v29;
              long long v30 = *((_OWORD *)result + 5);
              *(_OWORD *)(v5 + 168) = v30;
              *((_DWORD *)v5 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v29 - v30;
              *((_DWORD *)v5 + 21) = v26;
              *((void *)v5 + 24) = *((void *)result + 12);
              *((void *)v5 + 17) = *((void *)result + 7);
            }
            *((void *)v5 + 5) = *(void *)v24;
            uint64_t v31 = *((void *)v24 + 3);
            *((void *)v5 + 18) = *((void *)v24 + 2);
            *((void *)v5 + 25) = v31;
          }
          break;
      }
    }
    else if (v6 > -15616)
    {
      switch(v6)
      {
        case -15615:
LABEL_31:
          uint64_t v17 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
          uint64_t v18 = *(void *)a3;
          *((void *)v5 + 1) = *((void *)v17 + 1);
          *((void *)v5 + 2) = v18;
          *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
          uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
          *((void *)v5 + 15) = result;
          if (result)
          {
            uint64_t v19 = *((void *)result + 1);
            *((void *)v5 + 7) = *(void *)result;
            *((_DWORD *)v5 + 22) = *((_DWORD *)result + 4);
            uint64_t v20 = *((void *)result + 4);
            *((void *)v5 + 16) = *((void *)result + 3);
            *((void *)v5 + 23) = v20;
            uint64_t v21 = *((void *)result + 5);
            *((void *)v5 + 25) = *((void *)result + 6);
            *((_WORD *)v5 + 48) = *((_WORD *)result + 32);
            uint64_t v22 = *((void *)result + 9);
            *((void *)v5 + 19) = v21;
            *((void *)v5 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v22;
            long long v23 = *((_OWORD *)result + 5);
            *(_OWORD *)(v5 + 168) = v23;
            *((_DWORD *)v5 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v22 - v23;
            *((_DWORD *)v5 + 21) = v19;
            *((void *)v5 + 24) = *((void *)result + 12);
            *((void *)v5 + 17) = *((void *)result + 7);
          }
          *((void *)v5 + 5) = *(void *)v17;
          break;
        case -15614:
          uint64_t v33 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
          uint64_t v34 = *(void *)a3;
          *((void *)v5 + 1) = *((void *)v33 + 1);
          *((void *)v5 + 2) = v34;
          *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
          uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
          *((void *)v5 + 15) = result;
          if (result)
          {
            uint64_t v35 = *((void *)result + 1);
            *((void *)v5 + 7) = *(void *)result;
            *((_DWORD *)v5 + 22) = *((_DWORD *)result + 4);
            *((void *)v5 + 16) = *((void *)result + 3);
            uint64_t v36 = *((void *)result + 5);
            *((void *)v5 + 25) = *((void *)result + 6);
            *((_WORD *)v5 + 48) = *((_WORD *)result + 32);
            uint64_t v37 = *((void *)result + 9);
            *((void *)v5 + 19) = v36;
            *((void *)v5 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v37;
            long long v38 = *((_OWORD *)result + 5);
            *(_OWORD *)(v5 + 168) = v38;
            *((_DWORD *)v5 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v37 - v38;
            *((_DWORD *)v5 + 21) = v35;
            *((void *)v5 + 24) = *((void *)result + 12);
            *((void *)v5 + 17) = *((void *)result + 7);
          }
          *((void *)v5 + 5) = *(void *)v33;
LABEL_66:
          *((void *)v5 + 23) = *((void *)v33 + 2);
          break;
        case -15552:
          uint64_t v16 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
          uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v16[8], a2);
          *((void *)v5 + 14) = result;
          if (result)
          {
            v5[104] = (*result & 0xFE) == 2;
            v5[105] = 1;
            v5[107] = (result[1] & 4) != 0;
          }
          break;
      }
    }
    else
    {
      switch(v6)
      {
        case -15661:
          uint64_t v7 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
          uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v7[8], a2);
          *((void *)v5 + 9) = result;
          break;
        case -15660:
          uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
          *((_DWORD *)v5 + 22) = *((_DWORD *)result + 2);
          break;
        case -15659:
          *((void *)result + 3) = *(void *)a3;
          break;
        case -15651:
          result[100] = 1;
          break;
        case -15650:
          uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
          uint64_t v32 = *((void *)result + 2);
          if (v32 != 1) {
            *((_WORD *)v5 + 49) = v32;
          }
          break;
        default:
          return result;
      }
    }
    return result;
  }
  if (v6 > -10174)
  {
    if (v6 <= -10160)
    {
      switch(v6)
      {
        case -10173:
          uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
          *((void *)v5 + 8) = *((void *)result + 1);
          break;
        case -10170:
          uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
          uint64_t v39 = *((void *)result + 1);
LABEL_73:
          *((void *)v5 + 19) = v39;
          break;
        case -10169:
          uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
          *((_DWORD *)v5 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *((void *)result + 1);
          break;
        case -10167:
          uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
          *((void *)v5 + 17) = *((void *)result + 1);
          break;
        default:
          return result;
      }
      return result;
    }
    if (v6 == -10159)
    {
      uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
      int16x8_t v41 = *(int16x8_t *)(result + 8);
    }
    else
    {
      if (v6 != -10158)
      {
        if (v6 == -10154)
        {
          uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
          if (*((void *)v5 + 1) == *((void *)result + 1))
          {
            uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, result[16], a2);
            *((void *)v5 + 14) = result;
          }
        }
        return result;
      }
      uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
      if (*((void *)v5 + 1) != *((void *)result + 1)) {
        return result;
      }
      int16x8_t v41 = *((int16x8_t *)result + 1);
    }
    *(int16x4_t *)v41.i8 = vmovn_s32((int32x4_t)v41);
    *((_DWORD *)v5 + 26) = vmovn_s16(v41).u32[0];
    return result;
  }
  if (v6 <= -10196)
  {
    if (v6 == -10197)
    {
      uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
      *((void *)v5 + 7) = *((void *)result + 1);
    }
    else
    {
      uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
      *((_DWORD *)v5 + 21) = *((void *)result + 1);
    }
  }
  else
  {
    switch(v6)
    {
      case -10195:
        uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        *((_DWORD *)v5 + 23) = *((_DWORD *)result + 2);
        break;
      case -10182:
        uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        *((_OWORD *)v5 + 1mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *(_OWORD *)(result + 8);
        uint64_t v40 = *((void *)result + 4);
        *((void *)v5 + 22) = *((void *)result + 3);
        *((_WORD *)v5 + 48) = v40;
        *((_OWORD *)v5 + 12) = *(_OWORD *)(result + 40);
        break;
      case -10181:
        uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        *((void *)v5 + 16) = *((void *)result + 1);
        break;
    }
  }
  return result;
}

char *GTMTLSMFunctionHandle_processTraceFuncWithPool(char *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = result;
  int v5 = *(_DWORD *)(a3 + 8);
  if (v5 > -15445)
  {
    switch(v5)
    {
      case -15444:
        uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        uint64_t v14 = *(void *)a3;
        uint64_t v15 = *(void *)result;
        *((void *)v4 + 1) = *((void *)result + 1);
        *((void *)v4 + 2) = v14;
        *((_DWORD *)v4 + 1) = *(_DWORD *)(a3 + 8);
        *((void *)v4 + 7) = v15;
        *((void *)v4 + 5) = *((void *)result + 2);
        char v11 = 2;
        break;
      case -15437:
        uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        uint64_t v16 = *(void *)a3;
        uint64_t v17 = *(void *)result;
        *((void *)v4 + 1) = *((void *)result + 1);
        *((void *)v4 + 2) = v16;
        *((_DWORD *)v4 + 1) = *(_DWORD *)(a3 + 8);
        *((void *)v4 + 7) = v17;
        *((void *)v4 + 5) = *((void *)result + 2);
        char v11 = 4;
        break;
      case -15436:
        uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        uint64_t v9 = *(void *)a3;
        uint64_t v10 = *(void *)result;
        *((void *)v4 + 1) = *((void *)result + 1);
        *((void *)v4 + 2) = v9;
        *((_DWORD *)v4 + 1) = *(_DWORD *)(a3 + 8);
        *((void *)v4 + 7) = v10;
        *((void *)v4 + 5) = *((void *)result + 2);
        char v11 = 1;
        break;
      default:
        return result;
    }
    v4[64] = v11;
  }
  else
  {
    switch(v5)
    {
      case -15620:
        uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        uint64_t v12 = *(void *)a3;
        uint64_t v13 = *(void *)result;
        *((void *)v4 + 1) = *((void *)result + 1);
        *((void *)v4 + 2) = v12;
        *((_DWORD *)v4 + 1) = *(_DWORD *)(a3 + 8);
        *((void *)v4 + 5) = *((void *)result + 2);
        *((void *)v4 + 6) = v13;
        break;
      case -15610:
        *((void *)result + 3) = *(void *)a3;
        break;
      case -15463:
        uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        uint64_t v6 = *(void *)a3;
        uint64_t v7 = *(void *)result;
        *((void *)v4 + 1) = *((void *)result + 1);
        *((void *)v4 + 2) = v6;
        *((_DWORD *)v4 + 1) = *(_DWORD *)(a3 + 8);
        *((void *)v4 + 7) = v7;
        uint64_t v8 = *((void *)result + 3);
        *((void *)v4 + 5) = *((void *)result + 2);
        v4[64] = v8;
        break;
    }
  }
  return result;
}

char *GTMTLSMIntersectionFunctionTable_processTraceFuncWithPool(char *result, uint64_t a2, uint64_t a3)
{
  int v5 = result;
  int v6 = *(_DWORD *)(a3 + 8);
  if (v6 > -15444)
  {
    if (v6 <= -10181)
    {
      switch(v6)
      {
        case -15443:
          long long v30 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
          uint64_t v31 = *(void *)a3;
          *((void *)v5 + 1) = *((void *)v30 + 1);
          *((void *)v5 + 2) = v31;
          *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
          uint64_t v32 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
          *((void *)v5 + 14) = v32;
          if (v32)
          {
            uint64_t v33 = *((void *)v32 + 1);
            *((void *)v5 + 7) = *(void *)v32;
            int v34 = *((_DWORD *)v32 + 4);
            *((_DWORD *)v5 + 21) = v33;
            *((_DWORD *)v5 + 22) = v34;
            *(int8x16_t *)(v5 + 136) = vextq_s8(*(int8x16_t *)(v32 + 24), *(int8x16_t *)(v32 + 24), 8uLL);
            *((void *)v5 + 19) = *((void *)v32 + 5);
          }
          *((void *)v5 + 16) = *(void *)v30;
          uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v30[16], a2);
          *((void *)v5 + 13) = result;
          char v18 = 2;
          break;
        case -15442:
          uint64_t v25 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
          uint64_t v26 = *(void *)a3;
          *((void *)v5 + 1) = *((void *)v25 + 1);
          *((void *)v5 + 2) = v26;
          *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
          uint64_t v27 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
          *((void *)v5 + 14) = v27;
          if (v27)
          {
            uint64_t v28 = *((void *)v27 + 1);
            *((void *)v5 + 7) = *(void *)v27;
            int v29 = *((_DWORD *)v27 + 4);
            *((_DWORD *)v5 + 21) = v28;
            *((_DWORD *)v5 + 22) = v29;
            *(int8x16_t *)(v5 + 136) = vextq_s8(*(int8x16_t *)(v27 + 24), *(int8x16_t *)(v27 + 24), 8uLL);
            *((void *)v5 + 19) = *((void *)v27 + 5);
          }
          *((void *)v5 + 16) = *(void *)v25;
          uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v25[16], a2);
          *((void *)v5 + 13) = result;
          char v18 = 4;
          break;
        case -15441:
          uint64_t v13 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
          uint64_t v14 = *(void *)a3;
          *((void *)v5 + 1) = *((void *)v13 + 1);
          *((void *)v5 + 2) = v14;
          *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
          uint64_t v15 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
          *((void *)v5 + 14) = v15;
          if (v15)
          {
            uint64_t v16 = *((void *)v15 + 1);
            *((void *)v5 + 7) = *(void *)v15;
            int v17 = *((_DWORD *)v15 + 4);
            *((_DWORD *)v5 + 21) = v16;
            *((_DWORD *)v5 + 22) = v17;
            *(int8x16_t *)(v5 + 136) = vextq_s8(*(int8x16_t *)(v15 + 24), *(int8x16_t *)(v15 + 24), 8uLL);
            *((void *)v5 + 19) = *((void *)v15 + 5);
          }
          *((void *)v5 + 16) = *(void *)v13;
          uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v13[16], a2);
          *((void *)v5 + 13) = result;
          char v18 = 1;
          break;
        default:
          return result;
      }
      v5[160] = v18;
    }
    else
    {
      switch(v6)
      {
        case -10180:
          uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
          *((void *)v5 + 8) = *((void *)result + 1);
          break;
        case -10179:
          uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
          *((_DWORD *)v5 + 21) = *((void *)result + 1);
          break;
        case -10178:
        case -10177:
          return result;
        case -10176:
          uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
          *((void *)v5 + 7) = *((void *)result + 1);
          break;
        case -10175:
          uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
          *((void *)v5 + 18) = *((void *)result + 1);
          break;
        default:
          if (v6 == -10161)
          {
            uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
            *((void *)v5 + 19) = *((void *)result + 1);
          }
          break;
      }
    }
  }
  else if (v6 > -15561)
  {
    if (v6 > -15541)
    {
      if (v6 == -15540)
      {
        uint64_t v7 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        uint64_t v35 = *(void *)a3;
        *((void *)v5 + 1) = *((void *)v7 + 1);
        *((void *)v5 + 2) = v35;
        *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
        uint64_t v36 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
        *((void *)v5 + 14) = v36;
        if (v36)
        {
          uint64_t v37 = *((void *)v36 + 1);
          *((void *)v5 + 7) = *(void *)v36;
          int v38 = *((_DWORD *)v36 + 4);
          *((_DWORD *)v5 + 21) = v37;
          *((_DWORD *)v5 + 22) = v38;
          *(int8x16_t *)(v5 + 136) = vextq_s8(*(int8x16_t *)(v36 + 24), *(int8x16_t *)(v36 + 24), 8uLL);
          *((void *)v5 + 19) = *((void *)v36 + 5);
        }
        *((void *)v5 + 15) = *(void *)v7;
LABEL_45:
        uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v7[16], a2);
        *((void *)v5 + 13) = result;
      }
      else if (v6 == -15462)
      {
        uint64_t v19 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        uint64_t v20 = *(void *)a3;
        *((void *)v5 + 1) = *((void *)v19 + 1);
        *((void *)v5 + 2) = v20;
        *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
        uint64_t v21 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
        *((void *)v5 + 14) = v21;
        if (v21)
        {
          uint64_t v22 = *((void *)v21 + 1);
          *((void *)v5 + 7) = *(void *)v21;
          int v23 = *((_DWORD *)v21 + 4);
          *((_DWORD *)v5 + 21) = v22;
          *((_DWORD *)v5 + 22) = v23;
          *(int8x16_t *)(v5 + 136) = vextq_s8(*(int8x16_t *)(v21 + 24), *(int8x16_t *)(v21 + 24), 8uLL);
          *((void *)v5 + 19) = *((void *)v21 + 5);
        }
        *((void *)v5 + 16) = *(void *)v19;
        uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v19[24], a2);
        *((void *)v5 + 13) = result;
        v5[160] = *((void *)v19 + 2);
      }
    }
    else if (v6 == -15560)
    {
      result[100] = 1;
    }
    else if (v6 == -15557)
    {
      uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
      uint64_t v12 = *((void *)result + 2);
      if (v12 != 1) {
        *((_WORD *)v5 + 49) = v12;
      }
    }
  }
  else
  {
    switch(v6)
    {
      case -15577:
        uint64_t v7 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        uint64_t v8 = *(void *)a3;
        *((void *)v5 + 1) = *((void *)v7 + 1);
        *((void *)v5 + 2) = v8;
        *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
        uint64_t v9 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
        *((void *)v5 + 14) = v9;
        if (v9)
        {
          uint64_t v10 = *((void *)v9 + 1);
          *((void *)v5 + 7) = *(void *)v9;
          int v11 = *((_DWORD *)v9 + 4);
          *((_DWORD *)v5 + 21) = v10;
          *((_DWORD *)v5 + 22) = v11;
          *(int8x16_t *)(v5 + 136) = vextq_s8(*(int8x16_t *)(v9 + 24), *(int8x16_t *)(v9 + 24), 8uLL);
          *((void *)v5 + 19) = *((void *)v9 + 5);
        }
        *((void *)v5 + 5) = *(void *)v7;
        goto LABEL_45;
      case -15570:
        uint64_t v24 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v24[8], a2);
        *((void *)v5 + 9) = result;
        break;
      case -15569:
        uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        *((_DWORD *)v5 + 22) = *((_DWORD *)result + 2);
        break;
      case -15568:
        *((void *)result + 3) = *(void *)a3;
        break;
      default:
        return result;
    }
  }
  return result;
}

char *GTMTLSMIntersectionFunctionTableStateful_processTraceFuncWithPool(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7 = *(_DWORD *)(a3 + 8);
  if (v7 <= -15531)
  {
    if (v7 > -15546)
    {
      if (v7 == -15545)
      {
        uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        uint64_t v43 = *((void *)result + 1);
        uint64_t v44 = a1 + 184 + 24 * *((void *)result + 3);
        *(_DWORD *)uint64_t v44 = v43 != 0;
        *(void *)(v44 + 8) = v43;
        *(void *)(a1 + 184 + 24 * *((void *)result + 3) + 16) = *((void *)result + 2);
        return result;
      }
      if (v7 == -15544)
      {
        uint64_t v24 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        uint64_t v25 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v24[24], a2);
        uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v24[25], a2);
        if (*((void *)v24 + 2))
        {
          unint64_t v26 = 0;
          do
          {
            uint64_t v27 = *(void *)&v25[8 * v26];
            uint64_t v28 = a1 + 184 + 24 * (v26 + *((void *)v24 + 1));
            *(_DWORD *)uint64_t v28 = v27 != 0;
            *(void *)(v28 + 8) = v27;
            *(void *)(a1 + 184 + 24 * (v26 + *((void *)v24 + 1)) + 16) = *(void *)&result[8 * v26];
            ++v26;
          }
          while (*((void *)v24 + 2) > v26);
        }
        return result;
      }
    }
    else
    {
      if (v7 == -15559)
      {
        uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        uint64_t v38 = *(void *)(a1 + 168);
        if (!v38) {
          return result;
        }
        uint64_t v10 = *((void *)result + 1);
        uint64_t v11 = v38 + 16 * *((void *)result + 2);
        int v12 = 1;
        goto LABEL_48;
      }
      if (v7 == -15558)
      {
        uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        if (*(void *)(a1 + 168))
        {
          uint64_t v13 = result;
          uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, result[24], a2);
          if (*((void *)v13 + 2))
          {
            unint64_t v14 = 0;
            do
            {
              uint64_t v15 = *(void *)(a1 + 168) + 16 * (v14 + *((void *)v13 + 1));
              *(_DWORD *)uint64_t v15 = 1;
              *(void *)(v15 + 8) = *(void *)&result[8 * v14++];
            }
            while (*((void *)v13 + 2) > v14);
          }
        }
        return result;
      }
    }
LABEL_56:
    return GTMTLSMIntersectionFunctionTable_processTraceFuncWithPool((char *)a1, a2, a3);
  }
  if (v7 <= -15259)
  {
    switch(v7)
    {
      case -15530:
        uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        uint64_t v9 = *(void *)(a1 + 168);
        if (!v9) {
          return result;
        }
        uint64_t v10 = *((void *)result + 1);
        uint64_t v11 = v9 + 16 * *((void *)result + 2);
        int v12 = 2;
        break;
      case -15529:
        uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        if (*(void *)(a1 + 168) && *((void *)result + 3))
        {
          unint64_t v29 = 0;
          do
          {
            uint64_t v30 = *((void *)result + 1);
            uint64_t v31 = *(void *)(a1 + 168) + 16 * (v29 + *((void *)result + 2));
            *(_DWORD *)uint64_t v31 = 2;
            *(void *)(v31 + 8) = v30;
            ++v29;
          }
          while (*((void *)result + 3) > v29);
        }
        return result;
      case -15526:
        uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        uint64_t v32 = *((void *)result + 1);
        uint64_t v33 = a1 + 24 * *((void *)result + 2);
        *(_DWORD *)(v33 + 184) = 2 * (v32 != 0);
        *(void *)(v33 + 192) = v32;
        return result;
      case -15525:
        int v34 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v34[24], a2);
        if (*((void *)v34 + 2))
        {
          unint64_t v35 = 0;
          do
          {
            uint64_t v36 = *(void *)&result[8 * v35];
            uint64_t v37 = a1 + 24 * (v35 + *((void *)v34 + 1));
            *(_DWORD *)(v37 + 184) = 2 * (v36 != 0);
            *(void *)(v37 + 192) = v36;
            ++v35;
          }
          while (*((void *)v34 + 2) > v35);
        }
        return result;
      default:
        goto LABEL_56;
    }
    goto LABEL_48;
  }
  if (v7 == -15258)
  {
    uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
    uint64_t v39 = *(void *)(a1 + 168);
    if (!v39) {
      return result;
    }
    uint64_t v10 = *((void *)result + 1);
    uint64_t v11 = v39 + 16 * *((void *)result + 2);
    int v12 = 3;
LABEL_48:
    *(_DWORD *)uint64_t v11 = v12;
    *(void *)(v11 + 8) = v10;
    return result;
  }
  if (v7 == -15257)
  {
    uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
    if (*(void *)(a1 + 168) && *((void *)result + 3))
    {
      unint64_t v40 = 0;
      do
      {
        uint64_t v41 = *((void *)result + 1);
        uint64_t v42 = *(void *)(a1 + 168) + 16 * (v40 + *((void *)result + 2));
        *(_DWORD *)uint64_t v42 = 3;
        *(void *)(v42 + 8) = v41;
        ++v40;
      }
      while (*((void *)result + 3) > v40);
    }
    return result;
  }
  if (v7 != -10152) {
    goto LABEL_56;
  }
  uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
  if (a4)
  {
    uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, result[8], a2);
    unint64_t v17 = *(void *)result;
    if (*(void *)result)
    {
      char v18 = result;
      unint64_t v19 = 0;
      uint64_t v20 = (_DWORD *)(a1 + 184);
      do
      {
        uint64_t v21 = &v18[8 * v19];
        uint64_t v22 = *((void *)v21 + 1);
        if (v22)
        {
          uint64_t result = (char *)GTMTLGPUAddressResource_resourceForGPUAddress(*(void **)(*(void *)a4 + 24), *(int *)(*(void *)a4 + 12), *((void *)v21 + 1));
          if (result)
          {
            uint64_t v23 = *((void *)result + 2);
            if (v23)
            {
              unint64_t v46 = *(void *)result;
              uint64_t v47 = a1 + 24 * v19;
              *(_DWORD *)(v47 + 184) = 1;
              *(void *)(v47 + 192) = v23;
              *(void *)(v47 + 20mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v22 - v46;
              return result;
            }
          }
          uint64_t result = (char *)GTMTLIndirectResources_visibleFunctionTableIdForGPUAddress(a4, v22);
          if (result)
          {
            uint64_t v45 = a1 + 24 * v19;
            *(_DWORD *)(v45 + 184) = 2;
            *(void *)(v45 + 192) = result;
            return result;
          }
          unint64_t v17 = *(void *)v18;
        }
        else
        {
          *uint64_t v20 = 0;
        }
        ++v19;
        v20 += 6;
      }
      while (v17 > v19);
    }
  }
  return result;
}

char *GTMTLSMVisibleFunctionTable_processTraceFuncWithPool(char *result, uint64_t a2, uint64_t a3)
{
  int v5 = result;
  int v6 = *(_DWORD *)(a3 + 8);
  if (v6 > -15439)
  {
    if (v6 > -10178)
    {
      if (v6 > -10161)
      {
        if (v6 == -10160)
        {
          uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
          *((void *)v5 + 19) = *((void *)result + 1);
        }
        else if (v6 == -10153)
        {
          uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
          *((void *)v5 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *((void *)result + 1);
        }
      }
      else if (v6 == -10177)
      {
        uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        *((void *)v5 + 7) = *((void *)result + 1);
      }
      else if (v6 == -10174)
      {
        uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        *((_DWORD *)v5 + 21) = *((void *)result + 1);
      }
      return result;
    }
    if (v6 != -15438)
    {
      if (v6 == -10193)
      {
        uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        *((void *)v5 + 17) = *((void *)result + 1);
      }
      else if (v6 == -10178)
      {
        uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        *((void *)v5 + 8) = *((void *)result + 1);
      }
      return result;
    }
    int v7 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
    uint64_t v18 = *(void *)a3;
    *((void *)v5 + 1) = *((void *)v7 + 1);
    *((void *)v5 + 2) = v18;
    *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
    unint64_t v19 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
    *((void *)v5 + 14) = v19;
    if (v19)
    {
      uint64_t v20 = *((void *)v19 + 1);
      *((void *)v5 + 7) = *(void *)v19;
      int v21 = *((_DWORD *)v19 + 4);
      *((_DWORD *)v5 + 21) = v20;
      *((_DWORD *)v5 + 22) = v21;
      *(_OWORD *)(v5 + 136) = *(_OWORD *)(v19 + 24);
      *(_OWORD *)(v5 + 152) = *(_OWORD *)(v19 + 40);
    }
    *((void *)v5 + 16) = *(void *)v7;
    char v16 = 1;
LABEL_40:
    v5[168] = v16;
LABEL_41:
    unsigned int v27 = v7[16];
LABEL_42:
    uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v27, a2);
    *((void *)v5 + 13) = result;
    return result;
  }
  if (v6 > -15461)
  {
    switch(v6)
    {
      case -15460:
        uint64_t v22 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        uint64_t v23 = *(void *)a3;
        *((void *)v5 + 1) = *((void *)v22 + 1);
        *((void *)v5 + 2) = v23;
        *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
        uint64_t v24 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
        *((void *)v5 + 14) = v24;
        if (v24)
        {
          uint64_t v25 = *((void *)v24 + 1);
          *((void *)v5 + 7) = *(void *)v24;
          int v26 = *((_DWORD *)v24 + 4);
          *((_DWORD *)v5 + 21) = v25;
          *((_DWORD *)v5 + 22) = v26;
          *(_OWORD *)(v5 + 136) = *(_OWORD *)(v24 + 24);
          *(_OWORD *)(v5 + 152) = *(_OWORD *)(v24 + 40);
        }
        *((void *)v5 + 16) = *(void *)v22;
        v5[168] = *((void *)v22 + 2);
        unsigned int v27 = v22[24];
        goto LABEL_42;
      case -15440:
        int v7 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        uint64_t v28 = *(void *)a3;
        *((void *)v5 + 1) = *((void *)v7 + 1);
        *((void *)v5 + 2) = v28;
        *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
        unint64_t v29 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
        *((void *)v5 + 14) = v29;
        if (v29)
        {
          uint64_t v30 = *((void *)v29 + 1);
          *((void *)v5 + 7) = *(void *)v29;
          int v31 = *((_DWORD *)v29 + 4);
          *((_DWORD *)v5 + 21) = v30;
          *((_DWORD *)v5 + 22) = v31;
          *(_OWORD *)(v5 + 136) = *(_OWORD *)(v29 + 24);
          *(_OWORD *)(v5 + 152) = *(_OWORD *)(v29 + 40);
        }
        *((void *)v5 + 16) = *(void *)v7;
        char v16 = 2;
        break;
      case -15439:
        int v7 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        uint64_t v12 = *(void *)a3;
        *((void *)v5 + 1) = *((void *)v7 + 1);
        *((void *)v5 + 2) = v12;
        *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
        uint64_t v13 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
        *((void *)v5 + 14) = v13;
        if (v13)
        {
          uint64_t v14 = *((void *)v13 + 1);
          *((void *)v5 + 7) = *(void *)v13;
          int v15 = *((_DWORD *)v13 + 4);
          *((_DWORD *)v5 + 21) = v14;
          *((_DWORD *)v5 + 22) = v15;
          *(_OWORD *)(v5 + 136) = *(_OWORD *)(v13 + 24);
          *(_OWORD *)(v5 + 152) = *(_OWORD *)(v13 + 40);
        }
        *((void *)v5 + 16) = *(void *)v7;
        char v16 = 4;
        break;
      default:
        return result;
    }
    goto LABEL_40;
  }
  switch(v6)
  {
    case -15607:
      unint64_t v17 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
      uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v17[8], a2);
      *((void *)v5 + 9) = result;
      return result;
    case -15605:
      *((void *)result + 3) = *(void *)a3;
      return result;
    case -15578:
      int v7 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
      uint64_t v8 = *(void *)a3;
      *((void *)v5 + 1) = *((void *)v7 + 1);
      *((void *)v5 + 2) = v8;
      *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
      uint64_t v9 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 14), a2);
      *((void *)v5 + 14) = v9;
      if (v9)
      {
        uint64_t v10 = *((void *)v9 + 1);
        *((void *)v5 + 7) = *(void *)v9;
        int v11 = *((_DWORD *)v9 + 4);
        *((_DWORD *)v5 + 21) = v10;
        *((_DWORD *)v5 + 22) = v11;
        *(_OWORD *)(v5 + 136) = *(_OWORD *)(v9 + 24);
        *(_OWORD *)(v5 + 152) = *(_OWORD *)(v9 + 40);
      }
      *((void *)v5 + 15) = *(void *)v7;
      goto LABEL_41;
  }
  return result;
}

char *GTMTLSMVisibleFunctionTableStateful_processTraceFuncWithPool(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(_DWORD *)(a3 + 8);
  if (v6 == -15597)
  {
    uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
    if (*(void *)(a1 + 176))
    {
      uint64_t v9 = result;
      uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, result[24], a2);
      if (*((void *)v9 + 2))
      {
        unint64_t v10 = 0;
        uint64_t v11 = *(void *)(a1 + 176);
        do
        {
          *(void *)(v11 + 8 * (v10 + *((void *)v9 + 1))) = *(void *)&result[8 * v10];
          ++v10;
        }
        while (*((void *)v9 + 2) > v10);
      }
    }
  }
  else if (v6 == -15598)
  {
    uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
    uint64_t v8 = *(void *)(a1 + 176);
    if (v8) {
      *(void *)(v8 + 8 * *((void *)result + 2)) = *((void *)result + 1);
    }
  }
  else
  {
    return GTMTLSMVisibleFunctionTable_processTraceFuncWithPool((char *)a1, a2, a3);
  }
  return result;
}

char *GTMTLFXSMSpatialScaler_processTraceFuncWithPool(char *result, uint64_t a2, uint64_t a3)
{
  int v5 = result;
  int v6 = *(_DWORD *)(a3 + 8);
  switch(v6)
  {
    case -20480:
      uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
      *((void *)v5 + 8) = *((void *)result + 1);
      break;
    case -20479:
      uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
      *((void *)v5 + 7) = *((void *)result + 1);
      break;
    case -20478:
      uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
      *((void *)v5 + 11) = *((void *)result + 1);
      break;
    case -20477:
      uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
      *((void *)v5 + 1mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *((void *)result + 1);
      break;
    case -20476:
      uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
      *((void *)v5 + 9) = *((void *)result + 1);
      break;
    case -20475:
      *((void *)result + 3) = *(void *)a3;
      break;
    default:
      if (v6 == -18432)
      {
        int v7 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        uint64_t v8 = *(void *)a3;
        uint64_t v9 = *(void *)v7;
        *((void *)v5 + 1) = *((void *)v7 + 1);
        *((void *)v5 + 2) = v8;
        *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
        *((void *)v5 + 5) = v9;
        uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v7[16], a2);
        *((void *)v5 + 6) = result;
        *((_OWORD *)v5 + 5) = *(_OWORD *)result;
      }
      break;
  }
  return result;
}

float32_t GTMTLFXSMTemporalScaler_processTraceFuncWithPool(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(_DWORD *)(a3 + 8);
  switch(v6)
  {
    case -20473:
      *(void *)(a1 + 64) = *((void *)GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2)+ 1);
      break;
    case -20472:
      *(unsigned char *)(a1 + 148) = *((_DWORD *)GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2)+ 2);
      break;
    case -20471:
      *(void *)(a1 + 72) = *((void *)GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2)+ 1);
      break;
    case -20470:
      *(void *)(a1 + 88) = *((void *)GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2)+ 1);
      break;
    case -20469:
      *(void *)(a1 + 56) = *((void *)GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2)+ 1);
      break;
    case -20468:
      *(void *)(a1 + 12mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *((void *)GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2)+ 1);
      break;
    case -20467:
      *(void *)(a1 + 112) = *((void *)GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2)+ 1);
      break;
    case -20466:
      v7.i32[0] = *((_DWORD *)GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2) + 2);
      *(_DWORD *)(a1 + 128) = v7.i32[0];
      break;
    case -20465:
      v7.i32[0] = *((_DWORD *)GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2) + 2);
      *(_DWORD *)(a1 + 132) = v7.i32[0];
      break;
    case -20464:
      *(void *)(a1 + 8mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *((void *)GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2)+ 1);
      break;
    case -20463:
      v7.i32[0] = *((_DWORD *)GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2) + 2);
      *(_DWORD *)(a1 + 136) = v7.i32[0];
      break;
    case -20462:
      v7.i32[0] = *((_DWORD *)GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2) + 2);
      *(_DWORD *)(a1 + 14mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v7.i32[0];
      break;
    case -20461:
      *(void *)(a1 + 96) = *((void *)GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2)+ 1);
      break;
    case -20460:
      v7.i32[0] = *((_DWORD *)GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2) + 2);
      *(_DWORD *)(a1 + 144) = v7.i32[0];
      break;
    case -20459:
      *(unsigned char *)(a1 + 149) = *((_DWORD *)GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2)+ 2);
      break;
    case -20458:
      *(void *)(a1 + 24) = *(void *)a3;
      break;
    case -20457:
      *(unsigned char *)(a1 + 149) = 0;
      break;
    case -20456:
      *(void *)(a1 + 104) = *((void *)GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2)+ 1);
      break;
    default:
      if (v6 == -18430)
      {
        *(unsigned char *)(a1 + 15mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *((void *)GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2)+ 1);
      }
      else if (v6 == -18431)
      {
        uint64_t v8 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        uint64_t v9 = *(void *)a3;
        uint64_t v10 = *(void *)v8;
        *(void *)(a1 + 8) = *((void *)v8 + 1);
        *(void *)(a1 + 16) = v9;
        *(_DWORD *)(a1 + 4) = *(_DWORD *)(a3 + 8);
        *(void *)(a1 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v10;
        uint64_t v11 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v8[16], a2);
        *(void *)(a1 + 48) = v11;
        *(void *)(a1 + 128) = 0;
        uint64x2_t v12 = *((uint64x2_t *)v11 + 1);
        *(uint64x2_t *)(a1 + 112) = v12;
        float32x2_t v7 = vneg_f32(vcvt_f32_f64(vcvtq_f64_u64(v12)));
        *(float32x2_t *)(a1 + 136) = v7;
        *(_DWORD *)(a1 + 144) = 1065353216;
        *(_WORD *)(a1 + 148) = 257;
      }
      break;
  }
  return v7.f32[0];
}

char *GTMTLSMResidencySet_processTraceFuncWithPool(char *result, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a3 + 8) == -15245)
  {
    int v5 = result;
    int v6 = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, *(unsigned __int8 *)(a3 + 13), a2);
    uint64_t v7 = *(void *)a3;
    *((void *)v5 + 1) = *((void *)v6 + 1);
    *((void *)v5 + 2) = v7;
    *((_DWORD *)v5 + 1) = *(_DWORD *)(a3 + 8);
    uint64_t result = GTTraceFunc_argumentBytesWithPool((uint64_t *)a3, v6[24], a2);
    *((void *)v5 + 5) = *(void *)v6;
    *((void *)v5 + 6) = result;
  }
  return result;
}

uint64_t GTMTLRenderPipelineState_descriptorType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  long long v5 = 0u;
  memset(v4, 0, sizeof(v4));
  GTMTLRenderPipelineState_rootPipeline((uint64_t)v4, a1, a2, a3);
  if ((void)v5) {
    return 1;
  }
  if ((void)v6) {
    return 2;
  }
  if (*((void *)&v6 + 1)) {
    return 3;
  }
  return 0;
}

char *GTMTLRenderPipelineState_rootPipeline(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 40mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 32mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 24mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 16mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 8mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)a1 = 71;
  *(void *)(a1 + 24) = -1;
  *(void *)(a1 + 96) = -1;
  if (a2 && (uint64_t v7 = *(void *)(a2 + 32)) != 0 && (*(unsigned char *)(v7 + 79) & 8) != 0) {
    uint64_t v8 = v7 + 64;
  }
  else {
    uint64_t v8 = 0;
  }
  for (int i = *(_DWORD *)(v8 + 8); i == -15461; int i = *(_DWORD *)(v8 + 8))
  {
    long long v14 = 0;
    long long v14 = GTTraceFunc_targetContext(v8, a4);
    entry = find_entry(a3, &v14, 8uLL, 0);
    if (*entry
      && (uint64_t v11 = *(void *)(*entry + 32)) != 0
      && (uint64_t v12 = *(void *)(v11 + 32)) != 0
      && (*(unsigned char *)(v12 + 79) & 8) != 0)
    {
      uint64_t v8 = v12 + 64;
    }
    else
    {
      uint64_t v8 = 0;
    }
  }
  return GTMTLSMRenderPipelineState_processTraceFuncWithMap((char *)a1, a4, (uint64_t *)v8);
}

uint64_t GTMTLRenderPipelineState_partialDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  long long v5 = 0u;
  memset(v4, 0, sizeof(v4));
  GTMTLRenderPipelineState_rootPipeline((uint64_t)v4, a1, a2, a3);
  return v5;
}

uint64_t GTMTLRenderPipelineState_partialTileDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v5 = 0u;
  long long v6 = 0u;
  memset(v4, 0, sizeof(v4));
  GTMTLRenderPipelineState_rootPipeline((uint64_t)v4, a1, a2, a3);
  return v5;
}

uint64_t GTMTLRenderPipelineState_partialMeshDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v5 = 0u;
  long long v6 = 0u;
  memset(v4, 0, sizeof(v4));
  GTMTLRenderPipelineState_rootPipeline((uint64_t)v4, a1, a2, a3);
  return *((void *)&v5 + 1);
}

uint64_t GTMTLComputePipelineState_computeFunction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v14 = 0u;
  uint64_t v15 = 0;
  memset(&v18[4], 0, 80);
  long long v17 = 0u;
  memset(v18, 0, 48);
  LODWORD(v14) = 29;
  uint64_t v16 = -1;
  uint64_t v19 = 0;
  v18[3] = 0xFFFFFFFFFFFFFFFFLL;
  if (a1 && (uint64_t v5 = *(void *)(a1 + 32)) != 0 && (*(unsigned char *)(v5 + 79) & 8) != 0) {
    uint64_t v6 = v5 + 64;
  }
  else {
    uint64_t v6 = 0;
  }
  for (int i = *(_DWORD *)(v6 + 8); i == -15541; int i = *(_DWORD *)(v6 + 8))
  {
    long long v13 = 0;
    long long v13 = GTTraceFunc_targetContext(v6, a3);
    entry = find_entry(a2, &v13, 8uLL, 0);
    if (*entry
      && (uint64_t v9 = *(void *)(*entry + 32)) != 0
      && (uint64_t v10 = *(void *)(v9 + 32)) != 0
      && (*(unsigned char *)(v10 + 79) & 8) != 0)
    {
      uint64_t v6 = v10 + 64;
    }
    else
    {
      uint64_t v6 = 0;
    }
  }
  GTMTLSMComputePipelineState_processTraceFuncWithMap((char *)&v14, a3, (uint64_t *)v6);
  if (*((void *)&v18[0] + 1)) {
    long long v11 = (_OWORD *)(*((void *)&v18[0] + 1) + 848);
  }
  else {
    long long v11 = v18;
  }
  return *(void *)v11;
}

void *GTMTLSMRenderPipelineState_resourceAccess@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  memset(v15, 0, sizeof(v15));
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v7 = 0u;
  uint64_t v8 = 0;
  LODWORD(v7) = 71;
  uint64_t v9 = -1;
  long long v14 = 0xFFFFFFFFFFFFFFFFLL;
  if (a1 && (uint64_t v4 = *(void *)(a1 + 32)) != 0 && (*(unsigned char *)(v4 + 79) & 8) != 0) {
    uint64_t v5 = (uint64_t *)(v4 + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  GTMTLSMRenderPipelineState_processTraceFuncWithMap((char *)&v7, a2, v5);
  return memcpy(a3, (char *)v15 + 8, 0x118uLL);
}

double GTMTLSMComputePipelineState_resourceAccess@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long long v8 = 0u;
  uint64_t v9 = 0;
  uint64_t v17 = 0;
  memset(v16, 0, sizeof(v16));
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  LODWORD(v8) = 29;
  uint64_t v10 = -1;
  long long v15 = 0xFFFFFFFFFFFFFFFFLL;
  if (a1 && (uint64_t v4 = *(void *)(a1 + 32)) != 0 && (*(unsigned char *)(v4 + 79) & 8) != 0) {
    uint64_t v5 = (uint64_t *)(v4 + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  GTMTLSMComputePipelineState_processTraceFuncWithMap((char *)&v8, a2, v5);
  long long v6 = *(_OWORD *)((char *)&v16[1] + 8);
  *(_OWORD *)a3 = *(_OWORD *)((char *)v16 + 8);
  *(_OWORD *)(a3 + 16) = v6;
  double result = *((double *)&v16[2] + 1);
  *(_OWORD *)(a3 + 32) = *(_OWORD *)((char *)&v16[2] + 8);
  *(void *)(a3 + 48) = *((void *)&v16[3] + 1);
  return result;
}

uint64_t RetainDebugObject(void *a1)
{
  id v1 = a1;
  unint64_t v2 = DEVICEOBJECT(v1);
  os_unfair_lock_lock((os_unfair_lock_t)&s_debugObjectsLock);
  unint64_t v3 = (void *)s_debugObjects;
  if (!s_debugObjects)
  {
    id v4 = objc_alloc_init((Class)NSMutableDictionary);
    uint64_t v5 = (void *)s_debugObjects;
    s_debugObjects = (uint64_t)v4;

    unint64_t v3 = (void *)s_debugObjects;
  }
  long long v6 = +[NSNumber numberWithUnsignedLong:v2];
  [v3 setObject:v1 forKey:v6];

  os_unfair_lock_unlock((os_unfair_lock_t)&s_debugObjectsLock);
  return 0;
}

void ReleaseDebugObject(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  unsigned int v6 = atomic_load((unsigned int *)(a1 + 104));
  if (v6 != 1)
  {
    BOOL v7 = v6 != 2 || a2 == 0;
    if (v7 || (char v8 = atomic_load((unint64_t *)(a2 + 56)), (v8 & 0x10) == 0))
    {
      id v12 = v5;
      uint64_t v9 = DEVICEOBJECT(v5);
      os_unfair_lock_lock((os_unfair_lock_t)&s_debugObjectsLock);
      uint64_t v10 = (void *)s_debugObjects;
      long long v11 = +[NSNumber numberWithUnsignedLong:v9];
      [v10 removeObjectForKey:v11];

      os_unfair_lock_unlock((os_unfair_lock_t)&s_debugObjectsLock);
      id v5 = v12;
    }
  }
}

void ReleaseDebugObjects(uint64_t *a1, int a2)
{
  id v7 = [objc_alloc((Class)NSMutableArray) initWithCapacity:a2];
  if (a2 >= 1)
  {
    uint64_t v4 = a2;
    do
    {
      uint64_t v5 = *a1++;
      unsigned int v6 = +[NSNumber numberWithUnsignedLongLong:v5];
      [v7 addObject:v6];

      --v4;
    }
    while (v4);
  }
  os_unfair_lock_lock((os_unfair_lock_t)&s_debugObjectsLock);
  [(id)s_debugObjects removeObjectsForKeys:v7];
  os_unfair_lock_unlock((os_unfair_lock_t)&s_debugObjectsLock);
}

id GetDebugLibrary(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)&s_debugObjectsLock);
  unint64_t v2 = (void *)s_debugObjects;
  unint64_t v3 = +[NSNumber numberWithUnsignedLongLong:a1];
  uint64_t v4 = [v2 objectForKeyedSubscript:v3];

  os_unfair_lock_unlock((os_unfair_lock_t)&s_debugObjectsLock);
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  id v6 = v5;

  return v6;
}

BOOL EncodeDebugLibraryWithSource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(a2 + 96)) {
    return 0;
  }
  uint64_t v8 = *(void *)(a3 + 8);
  uint64_t v9 = GetDebugLibrary(v8);
  uint64_t v10 = v9;
  BOOL v4 = v9 != 0;
  if (v9)
  {
    id v11 = [v9 code];
    id v12 = (char *)[v11 UTF8String];
    long long v13 = (const void *)(strlen(v12) + 1);
    v16[0] = *(void *)a1;
    v16[1] = v8;
    uint64_t v14 = *(void *)(a1 + 32);
    HashBytes((uint64_t *)v12, (unint64_t)v13, __s);
    GTMTLCaptureState_storePointer(v14, __s, (uint64_t *)v12, v13);
    void v17[2] = v21;
    v17[3] = v22;
    char v18 = v23;
    v17[0] = *(_OWORD *)__s;
    v17[1] = v20;
    _OWORD v16[2] = v17;
    v16[3] = StoreMTLCompileOptionsUsingEncode(*(void *)(a1 + 32), *(void *)(a2 + 104), (uint64_t)__s, a4);
    void v16[4] = 0;
    DYTraceEncode_MTLDevice_newLibraryWithSource_options_error((uint64_t)v16, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
  }
  return v4;
}

uint64_t StoreMTLCompileOptionsUsingEncode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v8 = (const void *)EncodeDYMTLCompileOptions(a2, 0, 0, a4);
  __chkstk_darwin();
  uint64_t v10 = (uint64_t *)((char *)&v12 - v9);
  bzero((char *)&v12 - v9, (size_t)v8);
  EncodeDYMTLCompileOptions(a2, v10, (unint64_t)v8, a4);
  SavePointer(a1, v10, v8, a3);
  return a3;
}

BOOL EncodeDebugLibraryWithData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a2 + 96)) {
    return 0;
  }
  id v6 = GetDebugLibrary(*(void *)(a3 + 8));
  id v7 = v6;
  BOOL v3 = v6 != 0;
  if (v6)
  {
    uint64_t v8 = [v6 code];
    size_t size_ptr = 0;
    buffer_ptr = 0;
    dispatch_data_t v9 = dispatch_data_create_map(v8, (const void **)&buffer_ptr, &size_ptr);
    uint64_t v10 = *(void *)(a3 + 8);
    v15[0] = *(void *)a1;
    v15[1] = v10;
    uint64_t v11 = *(void *)(a1 + 32);
    long long v13 = (const void *)size_ptr;
    uint64_t v12 = (uint64_t *)buffer_ptr;
    HashBytes((uint64_t *)buffer_ptr, size_ptr, __s);
    GTMTLCaptureState_storePointer(v11, __s, v12, v13);
    _OWORD v18[2] = v22;
    v18[3] = v23;
    char v19 = v24;
    v18[0] = *(_OWORD *)__s;
    v18[1] = v21;
    v15[2] = v18;
    v15[3] = 0;
    DYTraceEncode_MTLDevice_newLibraryWithData_error((uint64_t)v15, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
  }
  return v3;
}

uint64_t SaveDirPath(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v22 = a1;
  BOOL v4 = +[NSFileManager defaultManager];
  uint64_t v5 = +[NSString stringWithUTF8String:a2];
  id v31 = 0;
  id v6 = [v4 contentsOfDirectoryAtPath:v5 error:&v31];
  id v21 = v31;
  id v7 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", objc_msgSend(v6, "count"));
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  id v8 = v6;
  id v9 = [v8 countByEnumeratingWithState:&v27 objects:v32 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v28;
    do
    {
      for (int i = 0; i != v10; int i = (char *)i + 1)
      {
        if (*(void *)v28 != v11) {
          objc_enumerationMutation(v8);
        }
        uint64_t v13 = *(void *)(*((void *)&v27 + 1) + 8 * i);
        uint64_t v14 = objc_msgSend(v5, "stringByAppendingPathComponent:", v13, v21, v22);
        char v26 = 0;
        if ([v4 fileExistsAtPath:v14 isDirectory:&v26]) {
          BOOL v15 = v26 == 0;
        }
        else {
          BOOL v15 = 0;
        }
        if (v15)
        {
          uint64_t v16 = [v4 contentsAtPath:v14];
          [v7 setObject:v16 forKeyedSubscript:v13];
        }
      }
      id v10 = [v8 countByEnumeratingWithState:&v27 objects:v32 count:16];
    }
    while (v10);
  }

  id v25 = v21;
  uint64_t v17 = +[NSKeyedArchiver archivedDataWithRootObject:v7 requiringSecureCoding:1 error:&v25];
  id v18 = v25;

  id v19 = v17;
  SavePointer(v22, (uint64_t *)[v19 bytes], objc_msgSend(v19, "length"), a3);

  return a3;
}

void SnapshotResidencySets(uint64_t a1, uint64_t a2)
{
  if (*(int *)(a2 + 12) >= 1)
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(*(void *)(a2 + 24) + 8 * v4);
      if (v5) {
        uint64_t v5 = *(void *)(v5 + 8);
      }
      uint64_t v7 = v5;
      entry = find_entry(a1, &v7, 8uLL, 0);
      ResidencySetTakeSnapshotInternal(*(void **)(*(void *)(*entry + 32) + 16), 1);
      ++v4;
    }
    while (v4 < *(int *)(a2 + 12));
  }
}

void *GTMTLDescriptorAllocator_copyData(uint64_t a1, const void *a2, size_t __n, int a4)
{
  if (__n) {
    uint64_t v4 = *(void **)(a1 + 416);
  }
  else {
    uint64_t v4 = 0;
  }
  *(void *)(a1 + 416) += __n;
  if (a4) {
    memcpy(v4, a2, __n);
  }
  return v4;
}

uint64_t GTMTLDescriptorAllocator_size(uint64_t a1)
{
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  do
  {
    v2 += (*(void *)(a1 + v1) + 7) & 0xFFFFFFFFFFFFFFF8;
    v1 += 8;
  }
  while (v1 != 424);
  return v2;
}

uint64_t GTMTLDescriptorAllocator_rebase(uint64_t result, uint64_t a2)
{
  for (uint64_t i = 0; i != 424; i += 8)
  {
    if (((*(void *)(result + i) + 7) & 0xFFFFFFFFFFFFFFF8) != 0) {
      uint64_t v3 = a2;
    }
    else {
      uint64_t v3 = 0;
    }
    a2 += (*(void *)(result + i) + 7) & 0xFFFFFFFFFFFFFFF8;
    *(void *)(result + i) = v3;
  }
  return result;
}

void *GTMPSDescriptorAllocator_copyData(uint64_t a1, const void *a2, size_t __n, int a4)
{
  if (__n) {
    uint64_t v4 = *(void **)(a1 + 72);
  }
  else {
    uint64_t v4 = 0;
  }
  *(void *)(a1 + 72) += __n;
  if (a4) {
    memcpy(v4, a2, __n);
  }
  return v4;
}

void *GTMPSDescriptorAllocator_copyFloats(uint64_t a1, const void *a2, uint64_t a3, int a4)
{
  if (a3) {
    uint64_t v4 = *(void **)(a1 + 64);
  }
  else {
    uint64_t v4 = 0;
  }
  *(void *)(a1 + 64) += 4 * a3;
  if (a4) {
    memcpy(v4, a2, 4 * a3);
  }
  return v4;
}

void *GTMPSDescriptorAllocator_copyFloats2(uint64_t a1, const void *a2, uint64_t a3, int a4)
{
  if (a3) {
    uint64_t v4 = *(void **)(a1 + 56);
  }
  else {
    uint64_t v4 = 0;
  }
  *(void *)(a1 + 56) += 8 * a3;
  if (a4) {
    memcpy(v4, a2, 8 * a3);
  }
  return v4;
}

uint64_t GTMPSDescriptorAllocator_size(uint64_t a1)
{
  uint64_t v1 = 0;
  int64x2_t v2 = 0uLL;
  int64x2_t v3 = vdupq_n_s64(0xFuLL);
  int8x16_t v4 = (int8x16_t)vdupq_n_s64(0xFFFFFFFFFFFFFFF0);
  do
  {
    int64x2_t v2 = vaddq_s64((int64x2_t)vandq_s8((int8x16_t)vaddq_s64(*(int64x2_t *)(a1 + v1), v3), v4), v2);
    v1 += 16;
  }
  while (v1 != 80);
  return vaddvq_s64(v2);
}

uint64_t GTMPSDescriptorAllocator_rebase(uint64_t result, uint64_t a2)
{
  for (uint64_t i = 0; i != 80; i += 8)
  {
    if (((*(void *)(result + i) + 15) & 0xFFFFFFFFFFFFFFF0) != 0) {
      uint64_t v3 = a2;
    }
    else {
      uint64_t v3 = 0;
    }
    a2 += (*(void *)(result + i) + 15) & 0xFFFFFFFFFFFFFFF0;
    *(void *)(result + i) = v3;
  }
  return result;
}

void *CopyGTMPSPluginCNNConvolutionData(void *a1, long long *a2, int a3)
{
  size_t v6 = *((unsigned int *)a2 + 14);
  uint64_t v7 = *((unsigned int *)a2 + 15);
  long long v33 = *a2;
  uint64_t v9 = *((void *)a2 + 6);
  uint64_t v8 = *((void *)a2 + 7);
  id v10 = (const void *)*((void *)a2 + 2);
  uint64_t v11 = a1[9];
  if (v6) {
    double result = (void *)a1[9];
  }
  else {
    double result = 0;
  }
  a1[9] = v11 + v6;
  id v31 = result;
  uint64_t v32 = v8;
  if (a3)
  {
    memcpy(result, v10, v6);
    uint64_t v13 = (const void *)*((void *)a2 + 3);
    BOOL v14 = v7 == 0;
    BOOL v15 = a1 + 8;
    if (v7) {
      uint64_t v16 = (void *)a1[8];
    }
    else {
      uint64_t v16 = 0;
    }
    *BOOL v15 = a1[8] + 4 * v7;
    double result = memcpy(v16, v13, 4 * v7);
  }
  else
  {
    BOOL v14 = v7 == 0;
    BOOL v15 = a1 + 8;
    if (v7) {
      uint64_t v16 = (void *)a1[8];
    }
    else {
      uint64_t v16 = 0;
    }
    *BOOL v15 = a1[8] + 4 * v7;
  }
  int v17 = *((_DWORD *)a2 + 2);
  if (v17 == 2)
  {
    long long v20 = (const void *)*((void *)a2 + 4);
    id v21 = (void *)*v15;
    *v15 += 1024;
    if (a3) {
      double result = memcpy(v21, v20, 0x400uLL);
    }
    id v19 = 0;
  }
  else
  {
    if (v17 == 1)
    {
      id v18 = (const void *)*((void *)a2 + 5);
      if (v14) {
        id v19 = 0;
      }
      else {
        id v19 = (void *)a1[7];
      }
      a1[7] += 8 * v7;
      if (a3) {
        double result = memcpy(v19, v18, 8 * v7);
      }
    }
    else
    {
      id v19 = 0;
    }
    id v21 = 0;
  }
  uint64_t v22 = (const void **)*((void *)a2 + 6);
  if (v22)
  {
    long long v23 = *v22;
    char v24 = (void *)*v15;
    uint64_t v25 = *v15 + 4 * v7;
    *BOOL v15 = v25;
    if (a3)
    {
      if (v14) {
        char v26 = 0;
      }
      else {
        char v26 = v24;
      }
      memcpy(v26, v23, 4 * v7);
      long long v27 = *(const void **)(*((void *)a2 + 6) + 8);
      if (v14) {
        long long v28 = 0;
      }
      else {
        long long v28 = (void *)a1[8];
      }
      a1[8] += 4 * v7;
      double result = memcpy(v28, v27, 4 * v7);
      long long v29 = (void *)a1[6];
      *long long v29 = v26;
      v29[1] = v28;
    }
    else
    {
      *BOOL v15 = v25 + 4 * v7;
    }
    uint64_t v9 = a1[6];
    a1[6] = v9 + 16;
  }
  if (a3)
  {
    uint64_t v30 = a1[3];
    *(_OWORD *)uint64_t v30 = v33;
    *(void *)(v30 + 16) = v31;
    *(void *)(v30 + 24) = v16;
    *(void *)(v30 + 32) = v21;
    *(void *)(v30 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v19;
    *(void *)(v30 + 48) = v9;
    *(void *)(v30 + 56) = v32;
  }
  a1[3] += 64;
  return result;
}

uint64_t GTMTLCounterSet_structType(const char *a1)
{
  if (!a1) {
    return -1;
  }
  if (!strcmp(a1, "timestamp")) {
    return 0;
  }
  if (!strcmp(a1, "stageutilization")) {
    return 1;
  }
  if (!strcmp(a1, "statistic")) {
    return 2;
  }
  return -1;
}

void *GTMTLDescriptorAllocator_copyString(uint64_t a1, char *__s, int a3)
{
  if (__s)
  {
    size_t v6 = strlen(__s);
    uint64_t v7 = (void *)(a1 + 416);
    uint64_t v8 = *(void *)(a1 + 416);
    size_t v9 = v6 + 1;
    if (v6 != -1)
    {
      id v10 = *(void **)(a1 + 416);
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v7 = (void *)(a1 + 416);
    uint64_t v8 = *(void *)(a1 + 416);
  }
  size_t v9 = 0;
  id v10 = 0;
LABEL_6:
  *uint64_t v7 = v8 + v9;
  if (a3) {
    memcpy(v10, __s, v9);
  }
  return v10;
}

uint64_t GTLowerBound(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v3 = *(void *)(a1 + 24);
  int v4 = *(_DWORD *)(a1 + 12);
  if (v4 >= 1)
  {
    do
    {
      int v8 = v4 >> 1;
      uint64_t v9 = v3 + *(int *)(a1 + 8) * (uint64_t)(v4 >> 1);
      if ((a3(v9, a2) & 0x80000000) != 0)
      {
        uint64_t v3 = v9 + *(int *)(a1 + 8);
        int v8 = v4 + ~v8;
      }
      int v4 = v8;
    }
    while (v8 > 0);
  }
  return v3;
}

uint64_t GTBinarySearch(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  int v3 = *(_DWORD *)(a1 + 12);
  if (v3 < 1) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 24);
  while (1)
  {
    int v8 = v3 >> 1;
    uint64_t v9 = v7 + *(int *)(a1 + 8) * (uint64_t)(v3 >> 1);
    int v10 = a3(v9, a2);
    if (!v10) {
      break;
    }
    if (v10 < 0)
    {
      uint64_t v7 = v9 + *(int *)(a1 + 8);
      int v8 = v3 + ~v8;
    }
    int v3 = v8;
    if (v8 <= 0) {
      return 0;
    }
  }
  return v9;
}

uint64_t GTInsert(apr_array_header_t *a1, int a2)
{
  return (uint64_t)&a1->elts[a1->elt_size * (uint64_t)a2];
}

void GTTraceDump_writeNewArchive(uint64_t a1, const void *a2, const char *a3)
{
  newpool = 0;
  apr_pool_create_ex(&newpool, 0, 0, 0);
  long long v77 = 0u;
  long long v76 = 0u;
  long long v75 = 0u;
  long long v74 = 0u;
  long long v73 = 0u;
  long long v72 = 0u;
  uint64_t v70 = 0;
  size_t v6 = newpool;
  uint64_t v7 = apr_hash_make(newpool);
  uint64_t v68 = v7;
  int v8 = apr_hash_make(v6);
  uint64_t v69 = v8;
  uint64_t v71 = apr_hash_make(v6);
  uint64_t v9 = gt_filepath_merge(a3, "gttrace-dna", v6);
  int v10 = open(v9, 513, 438);
  write(v10, &DNA1_BYTES, 0x42EEuLL);
  close(v10);
  uint64_t v11 = gt_filepath_merge(a3, "gttrace-range", v6);
  int v12 = open(v11, 513, 438);
  write(v12, a2, 0x28uLL);
  close(v12);
  uint64_t v13 = apr_array_make(v6, *(_DWORD *)(a1 + 48), 64);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = a1;
  *(_DWORD *)(a1 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0;
  BOOL v14 = apr_hash_next((apr_hash_index_t *)(a1 + 16));
  if (v14)
  {
    BOOL v15 = v14;
    do
    {
      uint64_t v16 = apr_array_push(v13);
      int v17 = *(long long **)(*((void *)v15 + 1) + 32);
      long long v18 = *v17;
      long long v19 = v17[1];
      long long v20 = v17[3];
      _OWORD v16[2] = v17[2];
      v16[3] = v20;
      _OWORD *v16 = v18;
      v16[1] = v19;
      BOOL v15 = apr_hash_next(v15);
    }
    while (v15);
  }
  qsort(v13->elts, v13->nelts, v13->elt_size, (int (__cdecl *)(const void *, const void *))CompareStream);
  id v21 = gt_filepath_merge(a3, "gttrace-streams", v6);
  int v22 = open(v21, 513, 438);
  write(v22, v13->elts, v13->elt_size * (uint64_t)v13->nelts);
  close(v22);
  long long v23 = (int *)**((void **)v13->elts + 3);
  uint64_t v67 = (pthread_mutex_t *)(v23 + 66);
  pthread_mutex_lock((pthread_mutex_t *)(v23 + 66));
  if (*v23 < 1)
  {
    uint64_t v26 = 0;
    uint64_t v27 = 0;
  }
  else
  {
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    do
    {
      GTTraceStore_buildDebugContext((uint64_t)&v68, *(unsigned int **)(*((void *)v23 + 1) + v24), *(void *)(*((void *)v23 + 1) + v24 + 8));
      ++v25;
      v24 += 16;
    }
    while (v25 < *v23);
    uint64_t v26 = *((void *)&v77 + 1);
    uint64_t v27 = v76 + *((void *)&v74 + 1);
    uint64_t v7 = v68;
    int v8 = v69;
  }
  int v28 = getpagesize();
  size_t v29 = (v27 + v28 - 1 + v26) & -v28;
  uint64_t v30 = gt_filepath_merge(a3, "gttrace-store", v6);
  int v31 = open(v30, 514, 438);
  ftruncate(v31, v29);
  size_t v66 = v29;
  uint64_t v32 = mmap(0, v29, 2, 1, v31, 0);
  close(v31);
  long long v33 = apr_array_make(*(apr_pool_t **)v7, *((_DWORD *)v7 + 12), 8);
  *((void *)v7 + 3) = 0;
  *((void *)v7 + 4) = 0;
  *((void *)v7 + 2) = v7;
  *((_DWORD *)v7 + 1mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0;
  int v34 = apr_hash_next((apr_hash_t *)((char *)v7 + 16));
  if (v34)
  {
    unint64_t v35 = v34;
    do
    {
      uint64_t v36 = *(void *)(*(void *)(*((void *)v35 + 1) + 32) + 16);
      *(void *)apr_array_push(v33) = v36;
      unint64_t v35 = apr_hash_next(v35);
    }
    while (v35);
  }
  qsort(v33->elts, v33->nelts, v33->elt_size, (int (__cdecl *)(const void *, const void *))CompareUInt64);
  if (v33->nelts < 1)
  {
    uint64_t v38 = 0;
  }
  else
  {
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    do
    {
      v79[0] = 0;
      v79[0] = *(void *)&v33->elts[8 * v37];
      uint64_t v39 = &v38[(void)v32];
      uint64_t v40 = *(void *)(*find_entry((uint64_t)v7, v79, 8uLL, 0) + 32);
      *((_OWORD *)v39 + 2) = 0u;
      *((_OWORD *)v39 + 3) = 0u;
      *(_OWORD *)uint64_t v39 = 0u;
      *((_OWORD *)v39 + 1) = 0u;
      v39[8] = *(unsigned char *)(v40 + 8);
      *((void *)v39 + 2) = *(void *)(v40 + 16);
      signed int v41 = 64;
      do
      {
        unsigned int v42 = atomic_load((unsigned int *)(v40 + 4));
        unsigned int v43 = v42 - 64;
        memcpy(&v39[v41], (const void *)(v40 + 64), (int)(v42 - 64));
        v41 += v43;
        uint64_t v40 = *(void *)(v40 + 40);
      }
      while (v40);
      atomic_store(v41, (unsigned int *)v39 + 1);
      uint64_t v44 = (v41 + 63) & 0xFFFFFFC0;
      *(_DWORD *)&v38[(void)v32] = v44;
      uint64_t v45 = &v38[v44];
      unint64_t v46 = &v38[v44 + (void)v32];
      uint64_t v47 = *find_entry((uint64_t)v8, v79, 8uLL, 0);
      if (v47 && (uint64_t v48 = *(void *)(v47 + 32)) != 0)
      {
        uint64_t v49 = v46;
        do
        {
          size_t v50 = atomic_load((unsigned int *)(v48 + 4));
          memcpy(v49, (const void *)v48, v50);
          unsigned int v51 = atomic_load((unsigned int *)(v48 + 4));
          uint64_t v52 = (v51 + 63) & 0xFFFFFFC0;
          *(_DWORD *)uint64_t v49 = v52;
          v49[3] = 0;
          v49[5] = 0;
          uint64_t v49 = (void *)((char *)v49 + v52);
          uint64_t v48 = *(void *)(v48 + 40);
        }
        while (v48);
      }
      else
      {
        uint64_t v49 = v46;
      }
      uint64_t v38 = (char *)v49 + v45 - v46;
      ++v37;
    }
    while (v37 < v33->nelts);
  }
  v33->int nelts = 0;
  uint64_t v53 = (uint64_t)v71;
  uint64_t v54 = (apr_hash_t *)((char *)v71 + 16);
  *((void *)v71 + 3) = 0;
  *(void *)(v53 + 32) = 0;
  *(void *)(v53 + 16) = v53;
  *(_DWORD *)(v53 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0;
  uint64_t v55 = apr_hash_next(v54);
  if (v55)
  {
    uint64_t v56 = v55;
    do
    {
      uint64_t v57 = **(void **)(*((void *)v56 + 1) + 16);
      *(void *)apr_array_push(v33) = v57;
      uint64_t v56 = apr_hash_next(v56);
    }
    while (v56);
  }
  qsort(v33->elts, v33->nelts, v33->elt_size, (int (__cdecl *)(const void *, const void *))CompareUInt64);
  uint64_t v58 = &v38[(void)v32];
  *((_OWORD *)v58 + 2) = 0u;
  *((_OWORD *)v58 + 3) = 0u;
  *(_OWORD *)uint64_t v58 = 0u;
  *((_OWORD *)v58 + 1) = 0u;
  v58[8] = 3;
  *((void *)v58 + 4) = v58;
  if (v33->nelts < 1)
  {
    signed int v60 = 64;
  }
  else
  {
    uint64_t v59 = 0;
    signed int v60 = 64;
    do
    {
      v79[0] = 0;
      v79[0] = *(void *)&v33->elts[8 * v59];
      uint64_t v61 = *(void **)(*find_entry(v53, v79, 8uLL, 0) + 32);
      int v62 = (8 * *v61 + 23) & 0xFFFFFFF8;
      memcpy(&v58[v60], v61 - 1, (8 * *v61 + 23) & 0xFFFFFFFF8);
      v60 += v62;
      ++v59;
    }
    while (v59 < v33->nelts);
  }
  atomic_store(v60, (unsigned int *)v58 + 1);
  uint64_t v63 = (v60 + 63) & 0xFFFFFFC0;
  *(_DWORD *)&v38[(void)v32] = v63;
  uint64_t v64 = &v38[v63];
  uint64_t v65 = &v64[(void)v32];
  *(_OWORD *)(v65 + 36) = 0u;
  *(_OWORD *)(v65 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
  *((_OWORD *)v65 + 3) = 0u;
  *(_OWORD *)(v65 + 4) = 0u;
  *(_DWORD *)uint64_t v65 = v66 - v64;
  *((void *)v65 + 4) = v65;
  munmap(v32, v66);
  pthread_mutex_unlock(v67);
  apr_pool_destroy(newpool);
}

uint64_t CompareUInt64(void *a1, void *a2)
{
  if (*a1 < *a2) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *a1 != *a2;
  }
}

uint64_t CompareStream(unint64_t *a1, unint64_t *a2)
{
  if (a1)
  {
    unint64_t v2 = *a1;
    if (a2)
    {
LABEL_3:
      unint64_t v3 = *a2;
      goto LABEL_6;
    }
  }
  else
  {
    unint64_t v2 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  unint64_t v3 = 0;
LABEL_6:
  BOOL v4 = v2 >= v3;
  BOOL v5 = v2 != v3;
  if (v4) {
    return v5;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

char *CopyFilePath(uint64_t a1, uint64_t a2, char *a3)
{
  BOOL v5 = *(const char ***)(a2 + 584);
  size_t v6 = *(apr_pool_t ***)(a2 + 592);
  uint64_t v7 = *v6;
  DatCATransform3D a = (uint64_t *)GTCaptureArchive_readData(v5, v6, a3, *v6, 0);
  GTMTLCaptureState_storePointer(a1, a3, Data, v9);
  apr_pool_clear(v7);
  return a3;
}

#error "DC6FC: too big function (funcsize=0)"

void WriteTextureInfo_(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (GTTraceFunc_argumentBytesWithMap((void *)a3, *(unsigned __int8 *)(a3 + 14), *(void *)(a2 + 24)))
  {
    long long v8 = 0u;
    uint64_t v9 = 0;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v11 = 0u;
    LODWORD(v8) = 80;
    uint64_t v10 = -1;
    WORD1(v15) = 2;
    long long v13 = 0xFFFFFFFFFFFFFFFFLL;
    uint64_t v22 = 0xFFFFFFFFLL;
    GTMTLSMTexture_processTraceFuncWithMap((char *)&v8, *(void *)(a2 + 24), (uint64_t *)a3);
    WriteTextureInfo(a1, (uint64_t)&v8, *(void *)(a2 + 16), a4);
  }
}

void *name_array(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v6 = a3;
    long long v8 = a1;
    do
    {
      uint64_t v9 = *a2++;
      uint64_t v11 = v9;
      *v8++ = *(void *)(*(void *)(*find_entry(a4, &v11, 8uLL, 0) + 32) + 8);
      --v6;
    }
    while (v6);
  }
  return a1;
}

void FlushChainedComputePipelineStateInfo_(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (GTTraceFunc_argumentBytesWithMap((void *)a3, *(unsigned __int8 *)(a3 + 14), *(void *)(a2 + 24)))
  {
    long long v8 = 0u;
    uint64_t v9 = 0;
    uint64_t v21 = 0;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    LODWORD(v8) = 29;
    uint64_t v10 = -1;
    long long v15 = 0xFFFFFFFFFFFFFFFFLL;
    GTMTLSMComputePipelineState_processTraceFuncWithMap((char *)&v8, *(void *)(a2 + 24), (uint64_t *)a3);
    FlushChainedComputePipelineStateInfo(a1, (uint64_t)&v8, *(void *)(a2 + 16), a4);
  }
}

void WriteIntersectionFunctionTableInfo_(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (GTTraceFunc_argumentBytesWithMap((void *)a3, *(unsigned __int8 *)(a3 + 14), *(void *)(a2 + 24)))
  {
    long long v8 = 0u;
    uint64_t v9 = 0;
    uint64_t v19 = 0;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    LODWORD(v8) = 60;
    uint64_t v10 = -1;
    WORD1(v15) = 2;
    long long v13 = 0xFFFFFFFFFFFFFFFFLL;
    GTMTLSMIntersectionFunctionTable_processTraceFuncWithMap((char *)&v8, *(void *)(a2 + 24), (uint64_t *)a3);
    WriteIntersectionFunctionTableInfo(a1, (uint64_t)&v8, *(void *)(a2 + 16), a4);
  }
}

void WriteVisibleFunctionTableInfo_(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (GTTraceFunc_argumentBytesWithMap((void *)a3, *(unsigned __int8 *)(a3 + 14), *(void *)(a2 + 24)))
  {
    long long v8 = 0u;
    uint64_t v9 = 0;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v11 = 0u;
    LODWORD(v8) = 83;
    uint64_t v10 = -1;
    GTMTLSMVisibleFunctionTable_processTraceFuncWithMap((char *)&v8, *(void *)(a2 + 24), (uint64_t *)a3);
    WriteVisibleFunctionTableInfo(a1, (uint64_t)&v8, *(void *)(a2 + 16), a4);
  }
}

void WriteAccelerationStructureInfo_(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (GTTraceFunc_argumentBytesWithMap((void *)a3, *(unsigned __int8 *)(a3 + 14), *(void *)(a2 + 24)))
  {
    long long v8 = 0u;
    uint64_t v9 = 0;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v11 = 0u;
    LODWORD(v8) = 16;
    uint64_t v10 = -1;
    WORD1(v15) = 2;
    long long v13 = 0xFFFFFFFFFFFFFFFFLL;
    GTMTLSMAccelerationStructure_processTraceFuncWithMap((char *)&v8, *(void *)(a2 + 24), (uint64_t *)a3);
    WriteAccelerationStructureInfo(a1, (uint64_t)&v8, *(void *)(a2 + 16), a4);
  }
}

void WriteBufferInfo_(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (GTTraceFunc_argumentBytesWithMap((void *)a3, *(unsigned __int8 *)(a3 + 14), *(void *)(a2 + 24)))
  {
    long long v8 = 0u;
    uint64_t v9 = 0;
    long long v15 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    LODWORD(v8) = 22;
    uint64_t v10 = -1;
    WORD1(v15) = 2;
    long long v13 = 0xFFFFFFFFFFFFFFFFLL;
    long long v16 = 0xFFFFFFFFFFFFFFFFLL;
    GTMTLSMBuffer_processTraceFuncWithMap((char *)&v8, *(void *)(a2 + 24), (uint64_t *)a3);
    WriteBufferInfo(a1, (uint64_t)&v8, *(void *)(a2 + 16), a4);
  }
}

void FlushChainedDynamicLibraryInfo_(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (GTTraceFunc_argumentBytesWithMap((void *)a3, *(unsigned __int8 *)(a3 + 14), *(void *)(a2 + 24)))
  {
    long long v8 = 0u;
    uint64_t v9 = 0;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v11 = 0u;
    LODWORD(v8) = 37;
    uint64_t v10 = -1;
    GTMTLSMDynamicLibrary_processTraceFuncWithMap((char *)&v8, *(void *)(a2 + 24), (uint64_t *)a3);
    FlushChainedDynamicLibraryInfo(a1, (uint64_t)&v8, *(void *)(a2 + 16), a4);
  }
}

void FlushChainedFunctionInfo_(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (GTTraceFunc_argumentBytesWithMap((void *)a3, *(unsigned __int8 *)(a3 + 14), *(void *)(a2 + 24)))
  {
    long long v8 = 0u;
    uint64_t v9 = 0;
    uint64_t v17 = 0;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    LODWORD(v8) = 43;
    uint64_t v10 = -1;
    GTMTLSMFunction_processTraceFuncWithMap((uint64_t)&v8, *(void *)(a2 + 24), (uint64_t *)a3);
    FlushChainedFunctionInfo(a1, (uint64_t)&v8, *(void *)(a2 + 16), a4);
  }
}

void WriteIndirectCommandBufferInfo_(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (GTTraceFunc_argumentBytesWithMap((void *)a3, *(unsigned __int8 *)(a3 + 14), *(void *)(a2 + 24)))
  {
    long long v8 = 0u;
    uint64_t v9 = 0;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v11 = 0u;
    LODWORD(v8) = 57;
    uint64_t v10 = -1;
    WORD1(v15) = 2;
    long long v13 = 0xFFFFFFFFFFFFFFFFLL;
    GTMTLSMIndirectCommandBuffer_processTraceFuncWithMap((char *)&v8, *(void *)(a2 + 24), (uint64_t *)a3);
    WriteIndirectCommandBufferInfo(a1, (uint64_t)&v8, *(void *)(a2 + 16), a4);
  }
}

void FlushChainedLibraryInfo_(uint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  if (GTTraceFunc_argumentBytesWithMap((void *)a3, *(unsigned __int8 *)(a3 + 14), *(void *)(a2 + 24)))
  {
    long long v8 = 0u;
    uint64_t v9 = 0;
    uint64_t v19 = 0;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    LODWORD(v8) = 62;
    uint64_t v10 = -1;
    GTMTLSMLibrary_processTraceFuncWithMap((uint64_t)&v8, *(void *)(a2 + 24), (uint64_t *)a3);
    FlushChainedLibraryInfo(a1, (uint64_t)&v8, *(void *)(a2 + 16), a4);
  }
}

void FlushChainedRenderPipelineStateInfo_(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (GTTraceFunc_argumentBytesWithMap((void *)a3, *(unsigned __int8 *)(a3 + 14), *(void *)(a2 + 24)))
  {
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v8 = 0u;
    uint64_t v9 = 0;
    LODWORD(v8) = 71;
    uint64_t v10 = -1;
    long long v15 = 0xFFFFFFFFFFFFFFFFLL;
    GTMTLSMRenderPipelineState_processTraceFuncWithMap((char *)&v8, *(void *)(a2 + 24), (uint64_t *)a3);
    FlushChainedRenderPipelineStateInfo(a1, (uint64_t)&v8, *(void *)(a2 + 16), a4);
  }
}

void WriteSamplerStateInfo_(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (GTTraceFunc_argumentBytesWithMap((void *)a3, *(unsigned __int8 *)(a3 + 14), *(void *)(a2 + 24)))
  {
    long long v8 = 0u;
    uint64_t v9 = 0;
    long long v12 = 0u;
    long long v11 = 0u;
    LODWORD(v8) = 75;
    uint64_t v10 = -1;
    uint64_t v14 = 0;
    long long v13 = 0xFFFFFFFFFFFFFFFFLL;
    GTMTLSMSamplerState_processTraceFuncWithMap((char *)&v8, *(void *)(a2 + 24), (uint64_t *)a3);
    WriteSamplerStateInfo(a1, (uint64_t)&v8, *(void *)(a2 + 16), a4);
  }
}

void FlushChainedPipelineLibraryInfo_(uint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  if (GTTraceFunc_argumentBytesWithMap((void *)a3, *(unsigned __int8 *)(a3 + 14), *(void *)(a2 + 24)))
  {
    long long v8 = 0u;
    uint64_t v9 = 0;
    uint64_t v14 = 0;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v11 = 0u;
    LODWORD(v8) = 67;
    uint64_t v10 = -1;
    GTMTLSMPipelineLibrary_processTraceFuncWithMap((char *)&v8, *(void *)(a2 + 24), (uint64_t *)a3);
    FlushChainedPipelineLibraryInfo(a1, (uint64_t)&v8, *(void *)(a2 + 16), a4);
  }
}

void *DecodeDYMTLRenderPassDescriptor(uint64_t a1, uint64_t a2, uint64_t a3, int a4, void *a5)
{
  memcpy(__dst, &GTMTLRenderPassDescriptorDefaults, 0x338uLL);
  int v8 = a4;
  double result = a5;
  unsigned int v10 = *(_DWORD *)a1;
  long long v11 = (uint64_t *)(a1 + 16);
  __dst[99] = *(void *)(a1 + 8);
  uint64_t v108 = (uint64_t)result;
  unsigned int v88 = v10;
  int v89 = a4;
  while (1)
  {
    long long v12 = v11;
    uint64_t v13 = *v11;
    uint64_t v14 = v11[1];
    char v15 = *((unsigned char *)v11 + 16);
    __int16 v16 = *((unsigned __int8 *)v11 + 24);
    __int16 v17 = *((unsigned __int8 *)v11 + 32);
    uint64_t v18 = v11[5];
    char v19 = *((unsigned char *)v11 + 48);
    __int16 v20 = *((_WORD *)v11 + 28);
    if (*v11 == -1) {
      break;
    }
    if (v10 <= 0x12)
    {
      char v21 = 0;
      char v24 = 0;
      long long v22 = *(_OWORD *)(v11 + 11);
      long long v23 = *(_OWORD *)(v11 + 13);
      v11 += 15;
      if (v8)
      {
LABEL_10:
        __int16 v25 = *((_WORD *)v12 + 32);
        char v26 = *((unsigned char *)v12 + 72);
        char v27 = *((unsigned char *)v12 + 80);
        if (result)
        {
          char v90 = *((unsigned char *)v12 + 72);
          char v91 = *((unsigned char *)v12 + 80);
          char v92 = v24;
          char v96 = v21;
          long long v100 = v23;
          long long v104 = v22;
          Stream_11288 = (uint64_t *)GetStream_11288((uint64_t)result, v14);
          if (Stream_11288) {
            uint64_t v14 = *Stream_11288;
          }
          else {
            uint64_t v14 = 0;
          }
          long long v29 = (uint64_t *)GetStream_11288(v108, v18);
          if (v29) {
            uint64_t v18 = *v29;
          }
          else {
            uint64_t v18 = 0;
          }
          double result = (void *)v108;
          unsigned int v10 = v88;
          int v8 = v89;
          long long v23 = v100;
          long long v22 = v104;
          char v24 = v92;
          char v21 = v96;
          char v26 = v90;
          char v27 = v91;
        }
        long long v30 = &__dst[8 * v13];
        *long long v30 = v18;
        v30[1] = v14;
        *((_WORD *)v30 + 8) = v17;
        *((_WORD *)v30 + 9) = v25;
        *((_WORD *)v30 + 1mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v20;
        *((_WORD *)v30 + 11) = v16;
        *((unsigned char *)v30 + 24) = v15;
        *((unsigned char *)v30 + 25) = v26;
        *((unsigned char *)v30 + 26) = v19;
        *((unsigned char *)v30 + 27) = v27;
        *((unsigned char *)v30 + 28) = v21;
        *((unsigned char *)v30 + 29) = v24;
        *((_WORD *)v30 + 15) = 0;
        *((_OWORD *)v30 + 2) = v22;
        *((_OWORD *)v30 + 3) = v23;
      }
    }
    else
    {
      char v21 = *((unsigned char *)v11 + 88);
      long long v22 = *((_OWORD *)v11 + 6);
      long long v23 = *((_OWORD *)v11 + 7);
      if (v10 < 0x27)
      {
        char v24 = 0;
        v11 += 16;
        if (v8) {
          goto LABEL_10;
        }
      }
      else
      {
        v11 += 17;
        char v24 = *((unsigned char *)v12 + 128);
        if (v8) {
          goto LABEL_10;
        }
      }
    }
  }
  if (v10 >= 0x13)
  {
    char v31 = *((unsigned char *)v11 + 88);
    uint64_t v32 = v11[12];
    if (v10 < 0x27)
    {
      char v34 = 0;
      long long v33 = v11 + 16;
    }
    else
    {
      long long v33 = v11 + 17;
      char v34 = *((unsigned char *)v11 + 128);
    }
    goto LABEL_26;
  }
  char v34 = 0;
  char v31 = 0;
  char v35 = 0;
  uint64_t v32 = v12[11];
  long long v33 = v12 + 15;
  if (v10 >= 5)
  {
LABEL_26:
    uint64_t v36 = *v33++;
    char v37 = v36;
    if (v36 == 255) {
      char v35 = 0;
    }
    else {
      char v35 = v37;
    }
    if (v8) {
      goto LABEL_30;
    }
  }
  else
  {
    if (!v8) {
      goto LABEL_39;
    }
LABEL_30:
    __int16 v38 = *((_WORD *)v12 + 32);
    char v39 = *((unsigned char *)v12 + 72);
    char v40 = *((unsigned char *)v12 + 80);
    if (result)
    {
      char v93 = *((unsigned char *)v12 + 80);
      char v97 = v34;
      char v101 = v31;
      int v105 = v33;
      signed int v41 = (uint64_t *)GetStream_11288((uint64_t)result, v14);
      if (v41) {
        uint64_t v14 = *v41;
      }
      else {
        uint64_t v14 = 0;
      }
      unsigned int v42 = (uint64_t *)GetStream_11288(v108, v18);
      if (v42) {
        uint64_t v18 = *v42;
      }
      else {
        uint64_t v18 = 0;
      }
      double result = (void *)v108;
      unsigned int v10 = v88;
      int v8 = v89;
      long long v33 = v105;
      char v34 = v97;
      char v31 = v101;
      char v40 = v93;
    }
    __dst[84] = v18;
    __dst[85] = v14;
    LOWORD(__dst[86]) = v17;
    WORD1(__dst[86]) = v38;
    WORD2(__dst[86]) = v20;
    HIWORD(__dst[86]) = v16;
    LOBYTE(__dst[87]) = v15;
    BYTE1(__dst[87]) = v39;
    BYTE2(__dst[87]) = v19;
    BYTE3(__dst[87]) = v40;
    BYTE4(__dst[87]) = v31;
    BYTE5(__dst[87]) = v34;
    HIWORD(__dst[87]) = 0;
    __dst[88] = v32;
    LOBYTE(__dst[89]) = v35;
    *(_DWORD *)((char *)&__dst[89] + 1) = 0;
    HIDWORD(__dst[89]) = 0;
  }
LABEL_39:
  if (v10 <= 0x12)
  {
    char v43 = 0;
    char v46 = 0;
    double v44 = *((double *)v33 + 10);
    uint64_t v45 = (unsigned __int16 *)(v33 + 14);
    if (v8) {
      goto LABEL_46;
    }
  }
  else
  {
    char v43 = *((unsigned char *)v33 + 80);
    double v44 = *((double *)v33 + 11);
    if (v10 < 0x27)
    {
      char v46 = 0;
      uint64_t v45 = (unsigned __int16 *)(v33 + 15);
      if (!v8) {
        goto LABEL_55;
      }
    }
    else
    {
      uint64_t v45 = (unsigned __int16 *)(v33 + 16);
      char v46 = *((unsigned char *)v33 + 120);
      if (!v8) {
        goto LABEL_55;
      }
    }
LABEL_46:
    uint64_t v47 = *v33;
    uint64_t v48 = v33[4];
    char v49 = *((unsigned char *)v33 + 8);
    __int16 v50 = *((unsigned __int8 *)v33 + 16);
    __int16 v51 = *((unsigned __int8 *)v33 + 24);
    char v52 = *((unsigned char *)v33 + 40);
    __int16 v53 = *((unsigned __int8 *)v33 + 48);
    __int16 v54 = *((unsigned __int8 *)v33 + 56);
    char v55 = *((unsigned char *)v33 + 64);
    char v56 = *((unsigned char *)v33 + 72);
    unsigned int v57 = v44;
    if (result)
    {
      unsigned int v94 = v44;
      char v98 = v49;
      char v102 = v46;
      char v106 = v43;
      uint64_t v58 = (uint64_t *)GetStream_11288((uint64_t)result, v47);
      if (v58) {
        uint64_t v47 = *v58;
      }
      else {
        uint64_t v47 = 0;
      }
      uint64_t v59 = (uint64_t *)GetStream_11288(v108, v48);
      if (v59) {
        uint64_t v48 = *v59;
      }
      else {
        uint64_t v48 = 0;
      }
      double result = (void *)v108;
      unsigned int v10 = v88;
      int v8 = v89;
      char v43 = v106;
      char v49 = v98;
      char v46 = v102;
      unsigned int v57 = v94;
    }
    __dst[90] = v48;
    __dst[91] = v47;
    LOWORD(__dst[92]) = v51;
    WORD1(__dst[92]) = v54;
    WORD2(__dst[92]) = v53;
    HIWORD(__dst[92]) = v50;
    LOBYTE(__dst[93]) = v49;
    BYTE1(__dst[93]) = v55;
    BYTE2(__dst[93]) = v52;
    BYTE3(__dst[93]) = v56;
    BYTE4(__dst[93]) = v43;
    BYTE5(__dst[93]) = v46;
    HIWORD(__dst[93]) = 0;
    __dst[94] = v57;
  }
LABEL_55:
  if (v10 >= 7)
  {
    int v60 = *v45;
    HIWORD(__dst[100]) = *v45;
    if (v10 < 0xD)
    {
      int v67 = 0;
      int v66 = 0;
      int v65 = 0;
      int v64 = 0;
      int v63 = 0;
      int v62 = 0;
      int v61 = 0;
    }
    else
    {
      int v61 = v45[4];
      WORD2(__dst[100]) = v45[4];
      int v62 = *((_DWORD *)v45 + 4);
      LODWORD(__dst[100]) = v62;
      int v63 = v45[12];
      HIWORD(__dst[101]) = v45[12];
      int v64 = v45[16];
      WORD2(__dst[101]) = v45[16];
      int v65 = v45[20];
      WORD1(__dst[101]) = v45[20];
      int v66 = v45[24];
      LOWORD(__dst[101]) = v45[24];
      int v67 = *((unsigned __int8 *)v45 + 56);
      LOBYTE(__dst[102]) = *((unsigned char *)v45 + 56);
      if (v10 != 13)
      {
        uint64_t v68 = *((void *)v45 + 8);
        uint64_t v69 = v45 + 36;
        uint64_t v70 = *(_DWORD **)(a3 + 408);
        __dst[95] = v70;
        __dst[96] = (int)v68;
        if (v68 << 32)
        {
          unint64_t v71 = 2 * (int)v68;
          if (v71 <= 1) {
            unint64_t v71 = 1;
          }
          long long v72 = v70;
          do
          {
            if (v8) {
              *long long v72 = *(_DWORD *)v69;
            }
            v69 += 4;
            ++v72;
            --v71;
          }
          while (v71);
        }
        *(void *)(a3 + 408) = &v70[2 * v68];
        if (v10 >= 0x14)
        {
          BYTE4(__dst[94]) = *(void *)v69;
          if (v10 >= 0x18)
          {
            BYTE2(__dst[102]) = *((void *)v69 + 1);
            if (v10 >= 0x21)
            {
              __dst[98] = *((void *)v69 + 2);
              if (v10 >= 0x27)
              {
                BYTE1(__dst[102]) = *((void *)v69 + 3);
                if (v10 >= 0x2A)
                {
                  __dst[97] = *((void *)v69 + 4);
                  BYTE3(__dst[102]) = *((void *)v69 + 5);
                  if (v10 >= 0x32)
                  {
                    int v95 = v66;
                    int v99 = v67;
                    for (uint64_t i = (uint64_t *)(v69 + 44); ; i += 6)
                    {
                      uint64_t v74 = *(i - 5);
                      if (v74 == -1) {
                        break;
                      }
                      if (v8)
                      {
                        uint64_t v75 = *(i - 4);
                        uint64_t v76 = *(i - 3);
                        uint64_t v78 = *(i - 2);
                        uint64_t v77 = *(i - 1);
                        uint64_t v79 = *i;
                        if (result)
                        {
                          uint64_t v103 = *(i - 1);
                          uint64_t v107 = *(i - 3);
                          uint64_t v80 = (uint64_t *)GetStream_11288((uint64_t)result, v75);
                          if (v80) {
                            uint64_t v75 = *v80;
                          }
                          else {
                            uint64_t v75 = 0;
                          }
                          double result = (void *)v108;
                          unsigned int v10 = v88;
                          int v8 = v89;
                          uint64_t v76 = v107;
                          uint64_t v77 = v103;
                        }
                        long long v81 = &__dst[5 * v74 + 64];
                        *long long v81 = v79;
                        v81[1] = v78;
                        v81[2] = v75;
                        v81[3] = v77;
                        v81[4] = v76;
                      }
                    }
                    int v66 = v95;
                    int v67 = v99;
                    if (v10 >= 0x43) {
                      BYTE4(__dst[102]) = *(i - 4);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (v60 == 0xFFFF) {
      HIWORD(__dst[100]) = 0;
    }
    if (v61 == 0xFFFF) {
      WORD2(__dst[100]) = 0;
    }
    if (v62 == -1) {
      LODWORD(__dst[100]) = 0;
    }
    if (v63 == 0xFFFF) {
      HIWORD(__dst[101]) = 0;
    }
    if (v64 == 0xFFFF) {
      WORD2(__dst[101]) = 0;
    }
    if (v65 == 0xFFFF) {
      WORD1(__dst[101]) = 0;
    }
    if (v66 == 0xFFFF) {
      LOWORD(__dst[101]) = 0;
    }
    if (v67 == 255) {
      LOBYTE(__dst[102]) = 0;
    }
  }
  uint64_t v82 = *(char **)(a3 + 240);
  *(void *)(a3 + 24mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v82 + 824;
  if (v8)
  {
    if (!result)
    {
      uint64_t v85 = &__dst[98];
      goto LABEL_105;
    }
    uint64_t v83 = (uint64_t *)GetStream_11288((uint64_t)result, __dst[99]);
    if (v83) {
      uint64_t v84 = *v83;
    }
    else {
      uint64_t v84 = 0;
    }
    __dst[99] = v84;
    uint64_t v85 = (uint64_t *)GetStream_11288(v108, __dst[98]);
    if (v85) {
LABEL_105:
    }
      uint64_t v86 = *v85;
    else {
      uint64_t v86 = 0;
    }
    __dst[98] = v86;
    return memcpy(v82, __dst, 0x338uLL);
  }
  return result;
}

uint64_t GetStream_11288(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a2;
  entry = find_entry(*(void *)(a1 + 24), &v7, 8uLL, 0);
  if (*entry
    && (uint64_t v4 = *(void *)(*entry + 32)) != 0
    && (unint64_t v5 = atomic_load((unint64_t *)(*(void *)(a1 + 16) + 72)), v5 < *(void *)(v4 + 24)))
  {
    return *(void *)(v4 + 8);
  }
  else
  {
    return 0;
  }
}

uint64_t EncodeDYMTLRenderPassDescriptor(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v112 = a2;
  unint64_t v114 = a3;
  if (a3 >= 8) {
    *a2 = 81;
  }
  uint64_t v113 = 8;
  uint64_t v111 = *(void *)(a1 + 792);
  entry = find_entry(a4, &v111, 8uLL, 0);
  if (*entry) {
    uint64_t v7 = *(void *)(*entry + 32);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = v113 + 8;
  if (v113 + 8 <= v114)
  {
    *(void *)((char *)v112 + v113) = *(void *)(v7 + 8);
    uint64_t v8 = v113 + 8;
  }
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v113 = v8;
  do
  {
    long long v11 = (uint64_t *)(a1 + v9);
    uint64_t v12 = *(void *)(a1 + v9 + 8);
    if (v12)
    {
      uint64_t v13 = v8 + 8;
      if (v8 + 8 <= v114)
      {
        *(void *)((char *)v112 + v8) = v10;
        uint64_t v13 = v113 + 8;
        uint64_t v12 = v11[1];
      }
      uint64_t v113 = v13;
      uint64_t v116 = v12;
      uint64_t v14 = find_entry(a4, &v116, 8uLL, 0);
      if (*v14) {
        uint64_t v15 = *(void *)(*v14 + 32);
      }
      else {
        uint64_t v15 = 0;
      }
      unint64_t v16 = v114;
      uint64_t v17 = v113 + 8;
      if (v113 + 8 <= v114)
      {
        *(void *)((char *)v112 + v113) = *(void *)(v15 + 8);
        unint64_t v16 = v114;
        uint64_t v17 = v113 + 8;
      }
      uint64_t v113 = v17;
      uint64_t v18 = v17 + 8;
      if (v17 + 8 <= v16)
      {
        *(void *)((char *)v112 + v17) = *(unsigned __int8 *)(a1 + v9 + 24);
        unint64_t v16 = v114;
        uint64_t v18 = v113 + 8;
      }
      uint64_t v113 = v18;
      uint64_t v19 = v18 + 8;
      if (v18 + 8 <= v16)
      {
        *(void *)((char *)v112 + v18) = *(unsigned __int16 *)(a1 + v9 + 22);
        unint64_t v16 = v114;
        uint64_t v19 = v113 + 8;
      }
      uint64_t v113 = v19;
      uint64_t v20 = v19 + 8;
      if (v19 + 8 <= v16)
      {
        *(void *)((char *)v112 + v19) = *(unsigned __int16 *)(a1 + v9 + 16);
        uint64_t v20 = v113 + 8;
      }
      uint64_t v113 = v20;
      uint64_t v115 = *v11;
      char v21 = find_entry(a4, &v115, 8uLL, 0);
      if (*v21) {
        uint64_t v22 = *(void *)(*v21 + 32);
      }
      else {
        uint64_t v22 = 0;
      }
      unint64_t v23 = v114;
      uint64_t v24 = v113 + 8;
      if (v113 + 8 <= v114)
      {
        *(void *)((char *)v112 + v113) = *(void *)(v22 + 8);
        unint64_t v23 = v114;
        uint64_t v24 = v113 + 8;
      }
      uint64_t v113 = v24;
      uint64_t v25 = v24 + 8;
      if (v24 + 8 <= v23)
      {
        *(void *)((char *)v112 + v24) = *(unsigned __int8 *)(a1 + v9 + 26);
        unint64_t v23 = v114;
        uint64_t v25 = v113 + 8;
      }
      uint64_t v113 = v25;
      uint64_t v26 = v25 + 8;
      if (v25 + 8 <= v23)
      {
        *(void *)((char *)v112 + v25) = *(unsigned __int16 *)(a1 + v9 + 20);
        unint64_t v23 = v114;
        uint64_t v26 = v113 + 8;
      }
      uint64_t v113 = v26;
      uint64_t v27 = v26 + 8;
      if (v26 + 8 <= v23)
      {
        *(void *)((char *)v112 + v26) = *(unsigned __int16 *)(a1 + v9 + 18);
        unint64_t v23 = v114;
        uint64_t v27 = v113 + 8;
      }
      uint64_t v113 = v27;
      uint64_t v28 = v27 + 8;
      if (v27 + 8 <= v23)
      {
        *(void *)((char *)v112 + v27) = *(unsigned __int8 *)(a1 + v9 + 25);
        unint64_t v23 = v114;
        uint64_t v28 = v113 + 8;
      }
      uint64_t v113 = v28;
      uint64_t v29 = v28 + 8;
      if (v28 + 8 <= v23)
      {
        *(void *)((char *)v112 + v28) = *(unsigned __int8 *)(a1 + v9 + 27);
        unint64_t v23 = v114;
        uint64_t v29 = v113 + 8;
      }
      uint64_t v113 = v29;
      uint64_t v30 = v29 + 8;
      if (v29 + 8 <= v23)
      {
        *(void *)((char *)v112 + v29) = *(unsigned __int8 *)(a1 + v9 + 28);
        uint64_t v30 = v113 + 8;
      }
      uint64_t v113 = v30;
      SaveGTMTLClearColor(&v112, *(double *)(a1 + v9 + 32), *(double *)(a1 + v9 + 40), *(double *)(a1 + v9 + 48), *(double *)(a1 + v9 + 56));
      uint64_t v8 = v113 + 8;
      if (v113 + 8 <= v114)
      {
        *(void *)((char *)v112 + v113) = *(unsigned __int8 *)(a1 + v9 + 29);
        uint64_t v8 = v113 + 8;
      }
      uint64_t v113 = v8;
    }
    ++v10;
    v9 += 64;
  }
  while (v9 != 512);
  uint64_t v31 = v8 + 8;
  if (v8 + 8 <= v114)
  {
    *(void *)((char *)v112 + v8) = -1;
    uint64_t v31 = v113 + 8;
  }
  uint64_t v113 = v31;
  uint64_t v116 = *(void *)(a1 + 680);
  uint64_t v32 = find_entry(a4, &v116, 8uLL, 0);
  if (*v32) {
    uint64_t v33 = *(void *)(*v32 + 32);
  }
  else {
    uint64_t v33 = 0;
  }
  unint64_t v34 = v114;
  uint64_t v35 = v113 + 8;
  if (v113 + 8 <= v114)
  {
    *(void *)((char *)v112 + v113) = *(void *)(v33 + 8);
    unint64_t v34 = v114;
    uint64_t v35 = v113 + 8;
  }
  uint64_t v113 = v35;
  uint64_t v36 = v35 + 8;
  if (v35 + 8 <= v34)
  {
    *(void *)((char *)v112 + v35) = *(unsigned __int8 *)(a1 + 696);
    unint64_t v34 = v114;
    uint64_t v36 = v113 + 8;
  }
  uint64_t v113 = v36;
  uint64_t v37 = v36 + 8;
  if (v36 + 8 <= v34)
  {
    *(void *)((char *)v112 + v36) = *(unsigned __int16 *)(a1 + 694);
    unint64_t v34 = v114;
    uint64_t v37 = v113 + 8;
  }
  uint64_t v113 = v37;
  uint64_t v38 = v37 + 8;
  if (v37 + 8 <= v34)
  {
    *(void *)((char *)v112 + v37) = *(unsigned __int16 *)(a1 + 688);
    uint64_t v38 = v113 + 8;
  }
  uint64_t v113 = v38;
  uint64_t v115 = *(void *)(a1 + 672);
  char v39 = find_entry(a4, &v115, 8uLL, 0);
  if (*v39) {
    uint64_t v40 = *(void *)(*v39 + 32);
  }
  else {
    uint64_t v40 = 0;
  }
  unint64_t v41 = v114;
  uint64_t v42 = v113 + 8;
  if (v113 + 8 <= v114)
  {
    *(void *)((char *)v112 + v113) = *(void *)(v40 + 8);
    unint64_t v41 = v114;
    uint64_t v42 = v113 + 8;
  }
  uint64_t v113 = v42;
  uint64_t v43 = v42 + 8;
  if (v42 + 8 <= v41)
  {
    *(void *)((char *)v112 + v42) = *(unsigned __int8 *)(a1 + 698);
    unint64_t v41 = v114;
    uint64_t v43 = v113 + 8;
  }
  uint64_t v113 = v43;
  uint64_t v44 = v43 + 8;
  if (v43 + 8 <= v41)
  {
    *(void *)((char *)v112 + v43) = *(unsigned __int16 *)(a1 + 692);
    unint64_t v41 = v114;
    uint64_t v44 = v113 + 8;
  }
  uint64_t v113 = v44;
  uint64_t v45 = v44 + 8;
  if (v44 + 8 <= v41)
  {
    *(void *)((char *)v112 + v44) = *(unsigned __int16 *)(a1 + 690);
    unint64_t v41 = v114;
    uint64_t v45 = v113 + 8;
  }
  uint64_t v113 = v45;
  uint64_t v46 = v45 + 8;
  if (v45 + 8 <= v41)
  {
    *(void *)((char *)v112 + v45) = *(unsigned __int8 *)(a1 + 697);
    unint64_t v41 = v114;
    uint64_t v46 = v113 + 8;
  }
  uint64_t v113 = v46;
  uint64_t v47 = v46 + 8;
  if (v46 + 8 <= v41)
  {
    *(void *)((char *)v112 + v46) = *(unsigned __int8 *)(a1 + 699);
    unint64_t v41 = v114;
    uint64_t v47 = v113 + 8;
  }
  uint64_t v113 = v47;
  uint64_t v48 = v47 + 8;
  if (v47 + 8 <= v41)
  {
    *(void *)((char *)v112 + v47) = *(unsigned __int8 *)(a1 + 700);
    uint64_t v48 = v113 + 8;
  }
  uint64_t v113 = v48;
  SaveGTMTLClearColor(&v112, *(double *)(a1 + 704), 0.0, 0.0, 0.0);
  unint64_t v49 = v114;
  uint64_t v50 = v113 + 8;
  if (v113 + 8 <= v114)
  {
    *(void *)((char *)v112 + v113) = *(unsigned __int8 *)(a1 + 701);
    unint64_t v49 = v114;
    uint64_t v50 = v113 + 8;
  }
  uint64_t v113 = v50;
  uint64_t v51 = v50 + 8;
  if (v50 + 8 <= v49)
  {
    *(void *)((char *)v112 + v5mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *(unsigned __int8 *)(a1 + 712);
    uint64_t v51 = v113 + 8;
  }
  uint64_t v113 = v51;
  uint64_t v116 = *(void *)(a1 + 728);
  char v52 = find_entry(a4, &v116, 8uLL, 0);
  if (*v52) {
    uint64_t v53 = *(void *)(*v52 + 32);
  }
  else {
    uint64_t v53 = 0;
  }
  unint64_t v54 = v114;
  uint64_t v55 = v113 + 8;
  if (v113 + 8 <= v114)
  {
    *(void *)((char *)v112 + v113) = *(void *)(v53 + 8);
    unint64_t v54 = v114;
    uint64_t v55 = v113 + 8;
  }
  uint64_t v113 = v55;
  uint64_t v56 = v55 + 8;
  if (v55 + 8 <= v54)
  {
    *(void *)((char *)v112 + v55) = *(unsigned __int8 *)(a1 + 744);
    unint64_t v54 = v114;
    uint64_t v56 = v113 + 8;
  }
  uint64_t v113 = v56;
  uint64_t v57 = v56 + 8;
  if (v56 + 8 <= v54)
  {
    *(void *)((char *)v112 + v56) = *(unsigned __int16 *)(a1 + 742);
    unint64_t v54 = v114;
    uint64_t v57 = v113 + 8;
  }
  uint64_t v113 = v57;
  uint64_t v58 = v57 + 8;
  if (v57 + 8 <= v54)
  {
    *(void *)((char *)v112 + v57) = *(unsigned __int16 *)(a1 + 736);
    uint64_t v58 = v113 + 8;
  }
  uint64_t v113 = v58;
  uint64_t v115 = *(void *)(a1 + 720);
  uint64_t v59 = find_entry(a4, &v115, 8uLL, 0);
  if (*v59) {
    uint64_t v61 = *(void *)(*v59 + 32);
  }
  else {
    uint64_t v61 = 0;
  }
  unint64_t v62 = v114;
  uint64_t v63 = v113 + 8;
  if (v113 + 8 <= v114)
  {
    *(void *)((char *)v112 + v113) = *(void *)(v61 + 8);
    unint64_t v62 = v114;
    uint64_t v63 = v113 + 8;
  }
  uint64_t v113 = v63;
  uint64_t v64 = v63 + 8;
  if (v63 + 8 <= v62)
  {
    *(void *)((char *)v112 + v63) = *(unsigned __int8 *)(a1 + 746);
    unint64_t v62 = v114;
    uint64_t v64 = v113 + 8;
  }
  uint64_t v113 = v64;
  uint64_t v65 = v64 + 8;
  if (v64 + 8 <= v62)
  {
    *(void *)((char *)v112 + v64) = *(unsigned __int16 *)(a1 + 740);
    unint64_t v62 = v114;
    uint64_t v65 = v113 + 8;
  }
  uint64_t v113 = v65;
  uint64_t v66 = v65 + 8;
  if (v65 + 8 <= v62)
  {
    *(void *)((char *)v112 + v65) = *(unsigned __int16 *)(a1 + 738);
    unint64_t v62 = v114;
    uint64_t v66 = v113 + 8;
  }
  uint64_t v113 = v66;
  uint64_t v67 = v66 + 8;
  if (v66 + 8 <= v62)
  {
    *(void *)((char *)v112 + v66) = *(unsigned __int8 *)(a1 + 745);
    unint64_t v62 = v114;
    uint64_t v67 = v113 + 8;
  }
  uint64_t v113 = v67;
  uint64_t v68 = v67 + 8;
  if (v67 + 8 <= v62)
  {
    *(void *)((char *)v112 + v67) = *(unsigned __int8 *)(a1 + 747);
    unint64_t v62 = v114;
    uint64_t v68 = v113 + 8;
  }
  uint64_t v113 = v68;
  uint64_t v69 = v68 + 8;
  if (v68 + 8 <= v62)
  {
    *(void *)((char *)v112 + v68) = *(unsigned __int8 *)(a1 + 748);
    uint64_t v69 = v113 + 8;
  }
  uint64_t v113 = v69;
  LODWORD(v6mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *(_DWORD *)(a1 + 752);
  SaveGTMTLClearColor(&v112, (double)v60, 0.0, 0.0, 0.0);
  unint64_t v70 = v114;
  uint64_t v71 = v113 + 8;
  if (v113 + 8 <= v114)
  {
    *(void *)((char *)v112 + v113) = *(unsigned __int8 *)(a1 + 749);
    unint64_t v70 = v114;
    uint64_t v71 = v113 + 8;
  }
  uint64_t v113 = v71;
  uint64_t v72 = v71 + 8;
  if (v71 + 8 <= v70)
  {
    *(void *)((char *)v112 + v71) = *(unsigned __int16 *)(a1 + 806);
    unint64_t v70 = v114;
    uint64_t v72 = v113 + 8;
  }
  uint64_t v113 = v72;
  uint64_t v73 = v72 + 8;
  if (v72 + 8 <= v70)
  {
    *(void *)((char *)v112 + v72) = *(unsigned __int16 *)(a1 + 804);
    unint64_t v70 = v114;
    uint64_t v73 = v113 + 8;
  }
  uint64_t v113 = v73;
  uint64_t v74 = v73 + 8;
  if (v73 + 8 <= v70)
  {
    *(void *)((char *)v112 + v73) = *(unsigned int *)(a1 + 800);
    unint64_t v70 = v114;
    uint64_t v74 = v113 + 8;
  }
  uint64_t v113 = v74;
  uint64_t v75 = v74 + 8;
  if (v74 + 8 <= v70)
  {
    *(void *)((char *)v112 + v74) = *(unsigned __int16 *)(a1 + 814);
    unint64_t v70 = v114;
    uint64_t v75 = v113 + 8;
  }
  uint64_t v113 = v75;
  uint64_t v76 = v75 + 8;
  if (v75 + 8 <= v70)
  {
    *(void *)((char *)v112 + v75) = *(unsigned __int16 *)(a1 + 812);
    unint64_t v70 = v114;
    uint64_t v76 = v113 + 8;
  }
  uint64_t v113 = v76;
  uint64_t v77 = v76 + 8;
  if (v76 + 8 <= v70)
  {
    *(void *)((char *)v112 + v76) = *(unsigned __int16 *)(a1 + 810);
    unint64_t v70 = v114;
    uint64_t v77 = v113 + 8;
  }
  uint64_t v113 = v77;
  uint64_t v78 = v77 + 8;
  if (v77 + 8 <= v70)
  {
    *(void *)((char *)v112 + v77) = *(unsigned __int16 *)(a1 + 808);
    unint64_t v70 = v114;
    uint64_t v78 = v113 + 8;
  }
  uint64_t v113 = v78;
  uint64_t v79 = v78 + 8;
  if (v78 + 8 <= v70)
  {
    *(void *)((char *)v112 + v78) = *(unsigned __int8 *)(a1 + 816);
    unint64_t v70 = v114;
    uint64_t v79 = v113 + 8;
  }
  uint64_t v113 = v79;
  uint64_t v80 = *(void *)(a1 + 768);
  uint64_t v81 = v79 + 8;
  if (v79 + 8 <= v70)
  {
    *(void *)((char *)v112 + v79) = v80;
    uint64_t v81 = v113 + 8;
    uint64_t v80 = *(void *)(a1 + 768);
  }
  uint64_t v113 = v81;
  if ((v80 & 0x7FFFFFFFFFFFFFFFLL) != 0)
  {
    unint64_t v82 = 0;
    do
    {
      unint64_t v83 = v81 + 4;
      unint64_t v84 = v114;
      if (v81 + 4 <= v114)
      {
        *(_DWORD *)((char *)v112 + v81) = *(_DWORD *)(*(void *)(a1 + 760) + 4 * v82);
        unint64_t v84 = v114;
        unint64_t v83 = v113 + 4;
      }
      uint64_t v113 = v83;
      if (v84 > v83)
      {
        if (v84 - v83 >= 4) {
          size_t v85 = 4;
        }
        else {
          size_t v85 = v84 - v83;
        }
        bzero((char *)v112 + v83, v85);
        unint64_t v83 = v113;
      }
      uint64_t v81 = v83 + 4;
      uint64_t v113 = v83 + 4;
      ++v82;
    }
    while (v82 < 2 * *(void *)(a1 + 768));
  }
  uint64_t v86 = v81 + 8;
  unint64_t v87 = v114;
  if (v81 + 8 <= v114)
  {
    *(void *)((char *)v112 + v81) = *(unsigned __int8 *)(a1 + 756);
    unint64_t v87 = v114;
    uint64_t v86 = v113 + 8;
  }
  uint64_t v113 = v86;
  uint64_t v88 = v86 + 8;
  if (v86 + 8 <= v87)
  {
    *(void *)((char *)v112 + v86) = *(unsigned __int8 *)(a1 + 818);
    uint64_t v88 = v113 + 8;
  }
  uint64_t v113 = v88;
  uint64_t v110 = *(void *)(a1 + 784);
  int v89 = find_entry(a4, &v110, 8uLL, 0);
  if (*v89) {
    uint64_t v90 = *(void *)(*v89 + 32);
  }
  else {
    uint64_t v90 = 0;
  }
  unint64_t v91 = v114;
  uint64_t v92 = v113 + 8;
  if (v113 + 8 <= v114)
  {
    *(void *)((char *)v112 + v113) = *(void *)(v90 + 8);
    unint64_t v91 = v114;
    uint64_t v92 = v113 + 8;
  }
  uint64_t v113 = v92;
  uint64_t v93 = v92 + 8;
  if (v92 + 8 <= v91)
  {
    *(void *)((char *)v112 + v92) = *(unsigned __int8 *)(a1 + 817);
    unint64_t v91 = v114;
    uint64_t v93 = v113 + 8;
  }
  uint64_t v113 = v93;
  uint64_t v94 = v93 + 8;
  if (v93 + 8 <= v91)
  {
    *(void *)((char *)v112 + v93) = *(void *)(a1 + 776);
    unint64_t v91 = v114;
    uint64_t v94 = v113 + 8;
  }
  uint64_t v113 = v94;
  uint64_t v95 = v94 + 8;
  if (v94 + 8 <= v91)
  {
    *(void *)((char *)v112 + v94) = *(unsigned __int8 *)(a1 + 819);
    uint64_t v95 = v113 + 8;
  }
  uint64_t v96 = 0;
  uint64_t v113 = v95;
  char v97 = (void *)(a1 + 544);
  do
  {
    uint64_t v98 = *(v97 - 2);
    if (v98)
    {
      uint64_t v99 = v95 + 8;
      if (v95 + 8 <= v114)
      {
        *(void *)((char *)v112 + v95) = v96;
        uint64_t v99 = v113 + 8;
        uint64_t v98 = *(v97 - 2);
      }
      uint64_t v113 = v99;
      uint64_t v116 = v98;
      long long v100 = find_entry(a4, &v116, 8uLL, 0);
      if (*v100) {
        uint64_t v101 = *(void *)(*v100 + 32);
      }
      else {
        uint64_t v101 = 0;
      }
      unint64_t v102 = v114;
      uint64_t v103 = v113 + 8;
      if (v113 + 8 <= v114)
      {
        *(void *)((char *)v112 + v113) = *(void *)(v101 + 8);
        unint64_t v102 = v114;
        uint64_t v103 = v113 + 8;
      }
      uint64_t v113 = v103;
      uint64_t v104 = v103 + 8;
      if (v103 + 8 <= v102)
      {
        *(void *)((char *)v112 + v103) = *v97;
        unint64_t v102 = v114;
        uint64_t v104 = v113 + 8;
      }
      uint64_t v113 = v104;
      uint64_t v105 = v104 + 8;
      if (v104 + 8 <= v102)
      {
        *(void *)((char *)v112 + v104) = *(v97 - 3);
        unint64_t v102 = v114;
        uint64_t v105 = v113 + 8;
      }
      uint64_t v113 = v105;
      uint64_t v106 = v105 + 8;
      if (v105 + 8 <= v102)
      {
        *(void *)((char *)v112 + v105) = *(v97 - 1);
        unint64_t v102 = v114;
        uint64_t v106 = v113 + 8;
      }
      uint64_t v113 = v106;
      uint64_t v95 = v106 + 8;
      if (v106 + 8 <= v102)
      {
        *(void *)((char *)v112 + v106) = *(v97 - 4);
        uint64_t v95 = v113 + 8;
      }
      uint64_t v113 = v95;
    }
    ++v96;
    v97 += 5;
  }
  while (v96 != 4);
  uint64_t v107 = v95 + 8;
  unint64_t v108 = v114;
  if (v95 + 8 <= v114)
  {
    *(void *)((char *)v112 + v95) = -1;
    unint64_t v108 = v114;
    uint64_t v107 = v113 + 8;
  }
  uint64_t v113 = v107;
  uint64_t result = v107 + 8;
  if (v107 + 8 <= v108)
  {
    *(void *)((char *)v112 + v107) = *(unsigned __int8 *)(a1 + 820);
    return v113 + 8;
  }
  return result;
}

void *SaveGTMTLClearColor(void *result, double a2, double a3, double a4, double a5)
{
  uint64_t v6 = result[1];
  unint64_t v5 = result[2];
  uint64_t v7 = v6 + 8;
  if (v6 + 8 <= v5)
  {
    *(double *)(*result + v6) = a2;
    unint64_t v5 = result[2];
    uint64_t v7 = result[1] + 8;
  }
  result[1] = v7;
  uint64_t v8 = v7 + 8;
  if (v7 + 8 <= v5)
  {
    *(double *)(*result + v7) = a3;
    unint64_t v5 = result[2];
    uint64_t v8 = result[1] + 8;
  }
  result[1] = v8;
  uint64_t v9 = v8 + 8;
  if (v8 + 8 <= v5)
  {
    *(double *)(*result + v8) = a4;
    unint64_t v5 = result[2];
    uint64_t v9 = result[1] + 8;
  }
  result[1] = v9;
  uint64_t v10 = v9 + 8;
  if (v9 + 8 <= v5)
  {
    *(double *)(*result + v9) = a5;
    uint64_t v10 = result[1] + 8;
  }
  result[1] = v10;
  return result;
}

uint64_t DecodeDYMTLTextureDescriptor(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = *(void *)(a3 + 232);
  *(void *)(a3 + 232) = v4 + 56;
  if (a4)
  {
    *(_OWORD *)uint64_t v4 = GTMTLTextureDescriptorDefaults;
    *(_OWORD *)(v4 + 16) = unk_1DEC10;
    *(_OWORD *)(v4 + 32) = xmmword_1DEC20;
    *(void *)(v4 + 48) = 512;
    unsigned int v5 = *(_DWORD *)result;
    *(unsigned char *)(v4 + 49) = *(void *)(result + 8);
    *(_WORD *)(v4 + 34) = *(void *)(result + 16);
    *(_DWORD *)(v4 + 24) = *(void *)(result + 24);
    *(_WORD *)(v4 + 32) = *(void *)(result + 32);
    *(_WORD *)(v4 + 3mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *(void *)(result + 40);
    *(unsigned char *)(v4 + 45) = *(void *)(result + 48);
    *(unsigned char *)(v4 + 47) = *(void *)(result + 56);
    *(_WORD *)(v4 + 28) = *(void *)(result + 64);
    uint64_t v6 = 72;
    if (v5 < 3) {
      uint64_t v6 = 80;
    }
    uint64_t v7 = result + v6;
    *(unsigned char *)(v4 + 43) = *(void *)v7;
    *(unsigned char *)(v4 + 44) = *(void *)(v7 + 8);
    if (v5)
    {
      *(_DWORD *)(v4 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *(void *)(v7 + 16);
      if (v5 <= 3)
      {
        if (v5 == 3) {
          *(_WORD *)(v4 + 36) = *(_WORD *)(v7 + 32) | (16 * *(_WORD *)(v7 + 24));
        }
      }
      else
      {
        int v8 = *(unsigned __int8 *)(v7 + 24);
        *(unsigned char *)(v4 + 46) = v8;
        int v9 = *(_DWORD *)(v7 + 40);
        int v10 = v9 | (16 * *(_DWORD *)(v7 + 32));
        *(_WORD *)(v4 + 36) = v9 | (16 * *(_WORD *)(v7 + 32));
        if (v5 >= 0x15)
        {
          *(unsigned char *)(v4 + 38) = *(void *)(v7 + 48);
          *(unsigned char *)(v4 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *(void *)(v7 + 56);
          if (v5 != 21)
          {
            *(void *)(v4 + 8) = *(void *)(v7 + 64);
            *(unsigned char *)(v4 + 42) = *(void *)(v7 + 72);
            if (v5 >= 0x23)
            {
              *(_DWORD *)(v4 + 16) = *(unsigned __int8 *)(v7 + 80) | (unsigned __int16)(*(_DWORD *)(v7 + 88) << 8) | (*(_DWORD *)(v7 + 96) << 16) | (*(_DWORD *)(v7 + 104) << 24);
              if (v5 >= 0x27)
              {
                *(_DWORD *)(v4 + 16) = *(void *)(v7 + 112);
                if (v5 >= 0x2A)
                {
                  *(_WORD *)(v4 + 36) = v10 | (*(_WORD *)(v7 + 120) << 8);
                  *(void *)uint64_t v4 = *(void *)(v7 + 128);
                  *(unsigned char *)(v4 + 48) = *(void *)(v7 + 136);
                  *(unsigned char *)(v4 + 5mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *(void *)(v7 + 144);
                  if (v5 >= 0x31)
                  {
                    *(unsigned char *)(v4 + 41) = *(void *)(v7 + 152);
                    *(unsigned char *)(v4 + 39) = *(void *)(v7 + 160);
                  }
                }
              }
            }
          }
        }
        if (v8 == 255) {
          *(unsigned char *)(v4 + 46) = 0;
        }
      }
    }
  }
  return result;
}

uint64_t EncodeDYMTLTextureDescriptor(uint64_t a1, void *a2, unint64_t a3)
{
  if (a3 >= 8)
  {
    *a2 = 81;
    if (a3 >= 0x10)
    {
      a2[1] = *(unsigned __int8 *)(a1 + 49);
      if (a3 >= 0x18)
      {
        a2[2] = *(unsigned __int16 *)(a1 + 34);
        if (a3 >= 0x20)
        {
          a2[3] = *(unsigned int *)(a1 + 24);
          if (a3 >= 0x28)
          {
            a2[4] = *(unsigned __int16 *)(a1 + 32);
            if (a3 >= 0x30)
            {
              a2[5] = *(unsigned __int16 *)(a1 + 30);
              if (a3 >= 0x38)
              {
                a2[6] = *(unsigned __int8 *)(a1 + 45);
                if (a3 >= 0x40)
                {
                  a2[7] = *(unsigned __int8 *)(a1 + 47);
                  if (a3 >= 0x48)
                  {
                    a2[8] = *(unsigned __int16 *)(a1 + 28);
                    if (a3 >= 0x50)
                    {
                      a2[9] = *(unsigned __int8 *)(a1 + 43);
                      if (a3 >= 0x58)
                      {
                        a2[10] = *(unsigned __int8 *)(a1 + 44);
                        if (a3 >= 0x60)
                        {
                          a2[11] = *(unsigned int *)(a1 + 20);
                          if (a3 >= 0x68)
                          {
                            a2[12] = *(unsigned __int8 *)(a1 + 46);
                            if (a3 >= 0x70)
                            {
                              a2[13] = *(_WORD *)(a1 + 36) >> 4;
                              if (a3 >= 0x78)
                              {
                                a2[14] = *(_WORD *)(a1 + 36) & 0xF;
                                if (a3 >= 0x80)
                                {
                                  a2[15] = *(unsigned __int8 *)(a1 + 38);
                                  if (a3 >= 0x88)
                                  {
                                    a2[16] = *(unsigned __int8 *)(a1 + 40);
                                    if (a3 >= 0x90)
                                    {
                                      a2[17] = *(void *)(a1 + 8);
                                      if (a3 >= 0x98)
                                      {
                                        a2[18] = *(unsigned __int8 *)(a1 + 42);
                                        if (a3 >= 0xA0)
                                        {
                                          a2[19] = *(unsigned __int8 *)(a1 + 16);
                                          if (a3 >= 0xA8)
                                          {
                                            a2[20] = BYTE1(*(_DWORD *)(a1 + 16));
                                            if (a3 >= 0xB0)
                                            {
                                              a2[21] = BYTE2(*(_DWORD *)(a1 + 16));
                                              if (a3 >= 0xB8)
                                              {
                                                a2[22] = (unint64_t)*(unsigned int *)(a1 + 16) >> 24;
                                                if (a3 >= 0xC0)
                                                {
                                                  a2[23] = *(unsigned int *)(a1 + 16);
                                                  if (a3 >= 0xC8)
                                                  {
                                                    a2[24] = *(unsigned char *)(a1 + 37) & 3;
                                                    if (a3 >= 0xD0)
                                                    {
                                                      a2[25] = *(void *)a1;
                                                      if (a3 >= 0xD8)
                                                      {
                                                        a2[26] = *(unsigned __int8 *)(a1 + 48);
                                                        if (a3 >= 0xE0)
                                                        {
                                                          a2[27] = *(unsigned __int8 *)(a1 + 50);
                                                          if (a3 >= 0xE8)
                                                          {
                                                            a2[28] = *(unsigned __int8 *)(a1 + 41);
                                                            if (a3 >= 0xF0) {
                                                              a2[29] = *(unsigned __int8 *)(a1 + 39);
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return 240;
}

double DecodeDYMTLBufferDescriptor(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = *(void *)(a3 + 224);
  *(void *)(a3 + 224) = v4 + 40;
  if (a4)
  {
    *(void *)(v4 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)uint64_t v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
    *(void *)uint64_t v4 = a1[1];
    *(_WORD *)(v4 + 32) = a1[2];
    *(unsigned char *)(v4 + 34) = a1[6];
    *(void *)(v4 + 24) = a1[8];
    *(void *)(v4 + 8) = a1[9];
    *(void *)(v4 + 16) = a1[10];
  }
  return result;
}

uint64_t EncodeDYMTLBufferDescriptor(uint64_t a1, void *a2, unint64_t a3)
{
  if (a3 >= 8)
  {
    *a2 = 81;
    if (a3 >= 0x10)
    {
      a2[1] = *(void *)a1;
      if (a3 >= 0x18)
      {
        a2[2] = *(unsigned __int16 *)(a1 + 32);
        if (a3 >= 0x20)
        {
          a2[3] = *(_WORD *)(a1 + 32) & 0xF;
          if (a3 >= 0x28)
          {
            a2[4] = *(_WORD *)(a1 + 32) >> 4;
            if (a3 >= 0x30)
            {
              a2[5] = *(_WORD *)(a1 + 32) & 0xF;
              if (a3 >= 0x38)
              {
                a2[6] = *(unsigned __int8 *)(a1 + 34);
                if (a3 >= 0x40)
                {
                  a2[7] = 0;
                  if (a3 >= 0x48)
                  {
                    a2[8] = *(void *)(a1 + 24);
                    if (a3 >= 0x50)
                    {
                      a2[9] = *(void *)(a1 + 8);
                      if (a3 >= 0x58) {
                        a2[10] = *(void *)(a1 + 16);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return 88;
}

size_t DecodeDYMTLRenderPipelineDescriptor(uint64_t a1, void *a2, void *a3, int a4, uint64_t a5)
{
  v102[1] = a2;
  memcpy(v101, &GTMTLRenderPipelineDescriptorDefaults, sizeof(v101));
  unsigned int v9 = *(_DWORD *)a1;
  v101[162] = *(void *)(a1 + 8);
  v101[147] = *(void *)(a1 + 16);
  bzero(__src, 0x2E8uLL);
  if (v9 < 0x1A)
  {
    long long v11 = (uint64_t *)(a1 + 24);
    uint64_t v10 = 31;
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 24);
    long long v11 = (uint64_t *)(a1 + 32);
    if ((int)v10 < 1) {
      goto LABEL_12;
    }
    uint64_t v10 = v10;
  }
  uint64_t v12 = &__src[11];
  do
  {
    if (a4)
    {
      uint64_t v13 = *v11;
      uint64_t v14 = v11[1];
      uint64_t v15 = v11[2];
      if (*v11 == 0xFFFFFFFFLL) {
        uint64_t v13 = -1;
      }
      *(void *)(v12 - 11) = v13;
      *(_WORD *)(v12 - 3) = v14;
      *(v12 - 1) = v15;
      *(_DWORD *)uint64_t v12 = 0;
      v12[4] = 0;
    }
    v11 += 3;
    v12 += 16;
    --v10;
  }
  while (v10);
  v102[0] = v11;
  if (v9 <= 0x19)
  {
    uint64_t v16 = 31;
    goto LABEL_15;
  }
LABEL_12:
  uint64_t v17 = *v11++;
  LODWORD(v16) = v17;
  v102[0] = v11;
  if ((int)v17 < 1) {
    goto LABEL_19;
  }
  uint64_t v16 = v16;
LABEL_15:
  uint64_t v18 = &__src[502];
  do
  {
    uint64_t v19 = *v11;
    uint64_t v20 = v11[1];
    uint64_t v21 = v11[2];
    v11 += 3;
    v102[0] = v11;
    if (a4)
    {
      *(_DWORD *)(v18 - 3) = v20;
      *((unsigned char *)v18 - 2) = v21;
      *((unsigned char *)v18 - 1) = v19;
      *uint64_t v18 = 0;
    }
    v18 += 4;
    --v16;
  }
  while (v16);
LABEL_19:
  if (a4) {
    memcpy(v101, __src, 0x2E8uLL);
  }
  v101[159] = *v11;
  v101[161] = v11[1];
  HIDWORD(v101[166]) = *((_DWORD *)v11 + 4);
  LOBYTE(v101[185]) = v11[3];
  BYTE1(v101[185]) = v11[4];
  BYTE5(v101[186]) = v11[5];
  WORD2(v101[167]) = v11[6];
  LOWORD(v101[169]) = v11[7];
  uint64_t v22 = v11[8];
  unint64_t v23 = v11 + 9;
  v102[0] = v23;
  if (v22)
  {
    uint64_t v24 = &v101[93];
    do
    {
      MakeDYMTLRenderPipelineColorAttachmentDescriptor(v102, (uint64_t)v24, a4);
      v24 += 2;
      --v22;
    }
    while (v22);
    unint64_t v23 = v102[0];
  }
  size_t result = strlen((const char *)v23);
  v102[0] = (void *)((char *)v23 + (result & 0xFFFFFFFFFFFFFFF8) + 8);
  int v26 = *(unsigned __int8 *)v23;
  if (!*(unsigned char *)v23) {
    unint64_t v23 = 0;
  }
  if (v26)
  {
    size_t result = strlen((const char *)v23);
    uint64_t v27 = a3 + 52;
    uint64_t v28 = a3[52];
    size_t v29 = result + 1;
    if (result != -1)
    {
      uint64_t v30 = (void *)a3[52];
      goto LABEL_32;
    }
  }
  else
  {
    uint64_t v27 = a3 + 52;
    uint64_t v28 = a3[52];
  }
  size_t v29 = 0;
  uint64_t v30 = 0;
LABEL_32:
  *uint64_t v27 = v28 + v29;
  if (a4) {
    size_t result = (size_t)memcpy(v30, v23, v29);
  }
  v101[150] = v30;
  if (v9 > 6)
  {
    uint64_t v31 = v102[0];
    BYTE5(v101[185]) = *v102[0];
    if (v9 >= 9)
    {
      BYTE1(v101[188]) = v102[0][1];
      v101[151] = v102[0][2];
      BYTE6(v101[187]) = v102[0][3];
      BYTE5(v101[187]) = v102[0][4];
      BYTE4(v101[187]) = v102[0][5];
      uint64_t v32 = v102[0][6];
      v102[0] += 6;
      HIBYTE(v101[187]) = v32;
      LOBYTE(v101[188]) = v31[7];
      if (v9 >= 0x12)
      {
        uint64_t v33 = v31[8];
        unint64_t v34 = v31 + 9;
        if (v33)
        {
          uint64_t v35 = (char *)&v101[180] + 7;
          do
          {
            if (a4) {
              unsigned char *v35 = *v34;
            }
            ++v34;
            ++v35;
            --v33;
          }
          while (v33);
        }
        uint64_t v38 = *v34;
        uint64_t v36 = v34 + 1;
        uint64_t v37 = v38;
        v102[0] = v36;
        if (v38)
        {
          char v39 = (char *)&v101[169] + 2;
          do
          {
            uint64_t v41 = *v36++;
            char v40 = v41;
            v102[0] = v36;
            if (a4) {
              *char v39 = v40;
            }
            ++v39;
            --v37;
          }
          while (v37);
        }
        if (v9 >= 0x17)
        {
          BYTE3(v101[187]) = *v36;
          if (v9 >= 0x20)
          {
            BYTE3(v101[188]) = v36[1];
            uint64_t v42 = v36[2];
            v102[0] = v36 + 2;
            LODWORD(v101[166]) = v42;
            if (v9 >= 0x26)
            {
              v101[158] = v36[3];
              if (v9 != 38)
              {
                BYTE6(v101[185]) = v36[4];
                HIBYTE(v101[184]) = v36[5];
                LODWORD(v101[167]) = v36[6];
                HIDWORD(v101[165]) = v36[7];
                HIBYTE(v101[185]) = v36[8];
                BYTE1(v101[186]) = v36[9];
                BYTE2(v101[186]) = v36[10];
                BYTE3(v101[186]) = v36[11];
                BYTE2(v101[188]) = v36[12];
                BYTE6(v101[184]) = v36[13];
                BYTE4(v101[186]) = v36[14];
                BYTE2(v101[185]) = v36[15];
                if (v9 >= 0x29)
                {
                  v101[160] = v36[16];
                  if (v9 != 41)
                  {
                    v101[145] = v36[17];
                    v101[146] = v36[18];
                    BYTE6(v101[186]) = v36[19];
                    LOBYTE(v101[186]) = v36[20];
                    BYTE3(v101[185]) = v36[21];
                    BYTE4(v101[185]) = v36[22];
                    size_t v43 = v36[23];
                    uint64_t v44 = v36 + 24;
                    uint64_t v45 = (uint64_t *)((char *)v36 + ((v43 + 7) & 0xFFFFFFFFFFFFFFF8) + 192);
                    v102[0] = v45;
                    if (v43) {
                      uint64_t v46 = (void *)a3[52];
                    }
                    else {
                      uint64_t v46 = 0;
                    }
                    uint64_t v47 = (char *)(a3[52] + v43);
                    a3[52] = v47;
                    if (a4)
                    {
                      if (v43) {
                        uint64_t v48 = v44;
                      }
                      else {
                        uint64_t v48 = 0;
                      }
                      size_t result = (size_t)memcpy(v46, v48, v43);
                      uint64_t v47 = (char *)a3[52];
                    }
                    v101[143] = v46;
                    v101[144] = v43;
                    size_t v51 = *v45;
                    uint64_t v50 = v45 + 1;
                    size_t v49 = v51;
                    char v52 = (void *)((char *)v50 + ((v51 + 7) & 0xFFFFFFFFFFFFFFF8));
                    v102[0] = v52;
                    if (v51) {
                      uint64_t v53 = v47;
                    }
                    else {
                      uint64_t v53 = 0;
                    }
                    a3[52] = &v47[v49];
                    if (a4)
                    {
                      if (v49) {
                        unint64_t v54 = v50;
                      }
                      else {
                        unint64_t v54 = 0;
                      }
                      size_t result = (size_t)memcpy(v53, v54, v49);
                    }
                    v101[141] = v53;
                    v101[142] = v49;
                    if (v9 >= 0x33)
                    {
                      unint64_t v57 = *v52;
                      uint64_t v56 = v52 + 1;
                      unint64_t v55 = v57;
                      v102[0] = v56;
                      v101[164] = v57;
                      if (v57)
                      {
                        unint64_t v58 = 0;
                        uint64_t v59 = (uint64_t *)a3[50];
                        v101[163] = v59;
                        do
                        {
                          uint64_t v61 = *v56++;
                          uint64_t v60 = v61;
                          v102[0] = v56;
                          if (a4)
                          {
                            if (a5)
                            {
                              size_t result = GetStream_11288(a5, v60);
                              if (result) {
                                uint64_t v60 = *(void *)result;
                              }
                              else {
                                uint64_t v60 = 0;
                              }
                            }
                            uint64_t v59 = (uint64_t *)a3[50];
                            *uint64_t v59 = v60;
                            unint64_t v55 = v101[164];
                          }
                          a3[50] = ++v59;
                          ++v58;
                        }
                        while (v55 > v58);
                      }
                      else
                      {
                        v101[163] = 0;
                      }
                      unint64_t v62 = *v56;
                      v102[0] = v56 + 1;
                      v101[149] = v62;
                      if (v62)
                      {
                        unint64_t v63 = 0;
                        uint64_t v64 = (uint64_t *)a3[50];
                        v101[148] = v64;
                        uint64_t v65 = v56 + 2;
                        do
                        {
                          uint64_t v66 = *(v65 - 1);
                          v102[0] = v65;
                          if (a4)
                          {
                            if (a5)
                            {
                              size_t result = GetStream_11288(a5, v66);
                              if (result) {
                                uint64_t v66 = *(void *)result;
                              }
                              else {
                                uint64_t v66 = 0;
                              }
                            }
                            uint64_t v64 = (uint64_t *)a3[50];
                            *uint64_t v64 = v66;
                            unint64_t v62 = v101[149];
                          }
                          ++v65;
                          a3[50] = ++v64;
                          ++v63;
                        }
                        while (v62 > v63);
                      }
                      else
                      {
                        v101[148] = 0;
                      }
                      if (v9 >= 0x37)
                      {
                        MakeDYMTLLinkedFunctions((size_t)v102, &v101[133], a3, a4, a5);
                        size_t result = MakeDYMTLLinkedFunctions((size_t)v102, &v101[109], a3, a4, a5);
                        if (v9 >= 0x3C)
                        {
                          v101[155] = *v102[0];
                          v101[152] = v102[0][1];
                          uint64_t v67 = v102[0][2];
                          uint64_t v68 = v102[0] + 3;
                          if (v67)
                          {
                            uint64_t v69 = &v101[177];
                            do
                            {
                              if (a4) {
                                unsigned char *v69 = *v68;
                              }
                              ++v68;
                              ++v69;
                              --v67;
                            }
                            while (v67);
                          }
                          uint64_t v72 = *v68;
                          uint64_t v71 = v68 + 1;
                          uint64_t v70 = v72;
                          v102[0] = v71;
                          if (v72)
                          {
                            uint64_t v73 = (char *)&v101[173] + 1;
                            do
                            {
                              uint64_t v75 = *v71++;
                              char v74 = v75;
                              v102[0] = v71;
                              if (a4) {
                                *uint64_t v73 = v74;
                              }
                              ++v73;
                              --v70;
                            }
                            while (v70);
                          }
                          unint64_t v78 = *v71;
                          uint64_t v77 = v71 + 1;
                          unint64_t v76 = v78;
                          v102[0] = v77;
                          v101[157] = v78;
                          if (v78)
                          {
                            unint64_t v79 = 0;
                            uint64_t v80 = (uint64_t *)a3[50];
                            v101[156] = v80;
                            do
                            {
                              uint64_t v82 = *v77++;
                              uint64_t v81 = v82;
                              v102[0] = v77;
                              if (a4)
                              {
                                if (a5)
                                {
                                  Stream_11288 = (uint64_t *)GetStream_11288(a5, v81);
                                  if (Stream_11288) {
                                    uint64_t v81 = *Stream_11288;
                                  }
                                  else {
                                    uint64_t v81 = 0;
                                  }
                                }
                                uint64_t v80 = (uint64_t *)a3[50];
                                *uint64_t v80 = v81;
                                unint64_t v76 = v101[157];
                              }
                              a3[50] = ++v80;
                              ++v79;
                            }
                            while (v76 > v79);
                          }
                          else
                          {
                            v101[156] = 0;
                          }
                          unint64_t v84 = *v77;
                          v102[0] = v77 + 1;
                          v101[154] = v84;
                          if (v84)
                          {
                            unint64_t v85 = 0;
                            uint64_t v86 = (uint64_t *)a3[50];
                            v101[153] = v86;
                            unint64_t v87 = v77 + 2;
                            do
                            {
                              uint64_t v88 = *(v87 - 1);
                              v102[0] = v87;
                              if (a4)
                              {
                                if (a5)
                                {
                                  int v89 = (uint64_t *)GetStream_11288(a5, v88);
                                  if (v89) {
                                    uint64_t v88 = *v89;
                                  }
                                  else {
                                    uint64_t v88 = 0;
                                  }
                                }
                                uint64_t v86 = (uint64_t *)a3[50];
                                *uint64_t v86 = v88;
                                unint64_t v84 = v101[154];
                              }
                              ++v87;
                              a3[50] = ++v86;
                              ++v85;
                            }
                            while (v84 > v85);
                          }
                          else
                          {
                            v101[153] = 0;
                          }
                          MakeDYMTLLinkedFunctions((size_t)v102, &v101[125], a3, a4, a5);
                          size_t result = MakeDYMTLLinkedFunctions((size_t)v102, &v101[117], a3, a4, a5);
                          if (v9 >= 0x42)
                          {
                            BYTE2(v101[187]) = *v102[0];
                            HIBYTE(v101[186]) = v102[0][1];
                            BYTE1(v101[187]) = v102[0][2];
                            LOBYTE(v101[187]) = v102[0][3];
                            if (v9 >= 0x44)
                            {
                              LODWORD(v101[165]) = v102[0][4];
                              if (v9 != 68)
                              {
                                HIWORD(v101[168]) = v102[0][5];
                                LOWORD(v101[168]) = v102[0][6];
                                WORD2(v101[168]) = v102[0][7];
                                WORD1(v101[168]) = v102[0][8];
                                if (v9 >= 0x4B) {
                                  HIWORD(v101[167]) = v102[0][9];
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (BYTE5(v101[185]) == 255) {
    BYTE5(v101[185]) = 0;
  }
  if (LODWORD(v101[166]) == -1)
  {
    BYTE3(v101[188]) = 0;
    LODWORD(v101[166]) = 1;
  }
  uint64_t v90 = (char *)a3[27];
  a3[27] = v90 + 1512;
  if (a4)
  {
    if (a5)
    {
      unint64_t v91 = (uint64_t *)GetStream_11288(a5, v101[162]);
      if (v91) {
        uint64_t v92 = *v91;
      }
      else {
        uint64_t v92 = 0;
      }
      v101[162] = v92;
      uint64_t v94 = (uint64_t *)GetStream_11288(a5, v101[147]);
      if (v94) {
        uint64_t v95 = *v94;
      }
      else {
        uint64_t v95 = 0;
      }
      v101[147] = v95;
      uint64_t v96 = (uint64_t *)GetStream_11288(a5, v101[158]);
      if (v96) {
        uint64_t v97 = *v96;
      }
      else {
        uint64_t v97 = 0;
      }
      v101[158] = v97;
      uint64_t v98 = (uint64_t *)GetStream_11288(a5, v101[155]);
      if (v98) {
        uint64_t v99 = *v98;
      }
      else {
        uint64_t v99 = 0;
      }
      v101[155] = v99;
      uint64_t v93 = (uint64_t *)GetStream_11288(a5, v101[152]);
      if (!v93)
      {
        uint64_t v100 = 0;
        goto LABEL_153;
      }
    }
    else
    {
      uint64_t v93 = &v101[152];
    }
    uint64_t v100 = *v93;
LABEL_153:
    v101[152] = v100;
    return (size_t)memcpy(v90, v101, 0x5E8uLL);
  }
  return result;
}

void **MakeDYMTLRenderPipelineColorAttachmentDescriptor(void **result, uint64_t a2, int a3)
{
  unint64_t v3 = *result;
  uint64_t v4 = *(*result)++;
  uint64_t v5 = v3[1];
  void *result = v3 + 2;
  uint64_t v6 = v3[2];
  void *result = v3 + 3;
  uint64_t v7 = v3[3];
  void *result = v3 + 4;
  uint64_t v8 = v3[4];
  void *result = v3 + 5;
  uint64_t v9 = v3[5];
  void *result = v3 + 6;
  uint64_t v10 = v3[6];
  void *result = v3 + 7;
  uint64_t v11 = v3[7];
  void *result = v3 + 8;
  uint64_t v12 = v3[8];
  void *result = v3 + 9;
  if (a3)
  {
    *(_WORD *)a2 = v12;
    *(unsigned char *)(a2 + 2) = v10;
    *(unsigned char *)(a2 + 3) = v4;
    *(unsigned char *)(a2 + 4) = v9;
    *(unsigned char *)(a2 + 5) = v6;
    *(unsigned char *)(a2 + 6) = v7;
    *(unsigned char *)(a2 + 7) = v8;
    *(unsigned char *)(a2 + 8) = v5;
    *(unsigned char *)(a2 + 9) = v11;
    *(_DWORD *)(a2 + 1mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0;
    *(_WORD *)(a2 + 14) = 0;
  }
  return result;
}

size_t MakeDYMTLLinkedFunctions(size_t result, void *a2, void *a3, int a4, uint64_t a5)
{
  uint64_t v9 = (const char **)result;
  uint64_t v10 = (const char *)(*(void *)result + 8);
  uint64_t v11 = **(void **)result;
  *(void *)size_t result = v10;
  if (v11)
  {
    uint64_t v46 = a3[50];
    uint64_t v12 = v11;
    do
    {
      uint64_t v13 = *(uint64_t **)*v9;
      *v9 += 8;
      if (a4)
      {
        if (a5)
        {
          size_t result = GetStream_11288(a5, (uint64_t)v13);
          if (result) {
            uint64_t v13 = *(uint64_t **)result;
          }
          else {
            uint64_t v13 = 0;
          }
        }
        uint64_t v14 = (uint64_t **)a3[50];
        void *v14 = v13;
      }
      else
      {
        uint64_t v14 = (uint64_t **)a3[50];
      }
      a3[50] = v14 + 1;
      --v12;
    }
    while (v12);
    uint64_t v10 = *v9;
  }
  else
  {
    uint64_t v46 = 0;
  }
  uint64_t v17 = *(void *)v10;
  uint64_t v15 = v10 + 8;
  uint64_t v16 = v17;
  *uint64_t v9 = v15;
  uint64_t v49 = v17;
  if (v17)
  {
    uint64_t v45 = a3[50];
    uint64_t v18 = v16;
    do
    {
      uint64_t v19 = *(uint64_t **)*v9;
      *v9 += 8;
      if (a4)
      {
        if (a5)
        {
          size_t result = GetStream_11288(a5, (uint64_t)v19);
          if (result) {
            uint64_t v19 = *(uint64_t **)result;
          }
          else {
            uint64_t v19 = 0;
          }
        }
        uint64_t v20 = (uint64_t **)a3[50];
        *uint64_t v20 = v19;
      }
      else
      {
        uint64_t v20 = (uint64_t **)a3[50];
      }
      a3[50] = v20 + 1;
      --v18;
    }
    while (v18);
    uint64_t v15 = *v9;
  }
  else
  {
    uint64_t v45 = 0;
  }
  uint64_t v22 = v15 + 8;
  uint64_t v21 = *(void *)v15;
  *uint64_t v9 = v15 + 8;
  uint64_t v47 = v11;
  uint64_t v48 = a2;
  if (v21)
  {
    uint64_t v23 = *((void *)v15 + 1);
    uint64_t v22 = v15 + 16;
    *uint64_t v9 = v15 + 16;
    if (v23)
    {
      uint64_t v24 = 0;
      uint64_t v50 = a3[42];
      size_t v51 = v15 + 16;
      *uint64_t v9 = &v22[8 * v23];
      a3[42] += 24 * v23;
      while (1)
      {
        uint64_t v25 = *v9;
        size_t result = strlen(*v9);
        *v9 += (result & 0xFFFFFFFFFFFFFFF8) + 8;
        if (*v25) {
          int v26 = v25;
        }
        else {
          int v26 = 0;
        }
        if (*v25)
        {
          size_t result = strlen(v26);
          uint64_t v27 = a3[52];
          size_t v28 = result + 1;
          if (result != -1)
          {
            size_t v29 = (void *)a3[52];
            goto LABEL_36;
          }
        }
        else
        {
          uint64_t v27 = a3[52];
        }
        size_t v28 = 0;
        size_t v29 = 0;
LABEL_36:
        a3[52] = v27 + v28;
        if (a4) {
          size_t result = (size_t)memcpy(v29, v26, v28);
        }
        uint64_t v30 = *(void *)&v22[8 * v24];
        if (v30)
        {
          uint64_t v31 = v23;
          uint64_t v32 = a3[50];
          int v33 = v30;
          do
          {
            unint64_t v34 = *(uint64_t **)*v9;
            *v9 += 8;
            if (a4)
            {
              if (a5)
              {
                size_t result = GetStream_11288(a5, (uint64_t)v34);
                if (result) {
                  unint64_t v34 = *(uint64_t **)result;
                }
                else {
                  unint64_t v34 = 0;
                }
              }
              uint64_t v35 = (uint64_t **)a3[50];
              unsigned char *v35 = v34;
            }
            else
            {
              uint64_t v35 = (uint64_t **)a3[50];
            }
            a3[50] = v35 + 1;
            --v33;
          }
          while (v33);
          uint64_t v23 = v31;
          uint64_t v22 = v51;
          if ((a4 & 1) == 0) {
            goto LABEL_50;
          }
        }
        else
        {
          uint64_t v32 = 0;
          if ((a4 & 1) == 0) {
            goto LABEL_50;
          }
        }
        uint64_t v36 = v50 + 24 * v24;
        *(void *)uint64_t v36 = v29;
        *(void *)(v36 + 8) = v32;
        *(_DWORD *)(v36 + 16) = v30;
        *(_DWORD *)(v36 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0;
LABEL_50:
        if (++v24 == v23)
        {
          uint64_t v22 = *v9;
          uint64_t v37 = v50;
          goto LABEL_56;
        }
      }
    }
    uint64_t v37 = 0;
LABEL_56:
    if (a4) {
      uint64_t v38 = v37;
    }
    else {
      uint64_t v38 = 0;
    }
    if (a4) {
      uint64_t v39 = v23;
    }
    else {
      uint64_t v39 = 0;
    }
  }
  else
  {
    uint64_t v38 = 0;
    uint64_t v39 = 0;
  }
  uint64_t v40 = *(void *)v22;
  *uint64_t v9 = v22 + 8;
  if (v40)
  {
    uint64_t v41 = a3[50];
    uint64_t v42 = v40;
    do
    {
      size_t v43 = *(uint64_t **)*v9;
      *v9 += 8;
      if (a4)
      {
        if (a5)
        {
          size_t result = GetStream_11288(a5, (uint64_t)v43);
          if (result) {
            size_t v43 = *(uint64_t **)result;
          }
          else {
            size_t v43 = 0;
          }
        }
        uint64_t v44 = (uint64_t **)a3[50];
        *uint64_t v44 = v43;
      }
      else
      {
        uint64_t v44 = (uint64_t **)a3[50];
      }
      a3[50] = v44 + 1;
      --v42;
    }
    while (v42);
  }
  else
  {
    uint64_t v41 = 0;
  }
  if (a4)
  {
    *uint64_t v48 = v45;
    v48[1] = v49;
    v48[2] = v46;
    v48[3] = v47;
    v48[4] = v38;
    v48[5] = v39;
    v48[6] = v41;
    v48[7] = v40;
  }
  return result;
}

uint64_t EncodeDYMTLRenderPipelineDescriptor(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  char v130 = a2;
  unint64_t v132 = a3;
  if (a3 >= 8) {
    *a2 = 81;
  }
  uint64_t v131 = 8;
  uint64_t v129 = *(void *)(a1 + 1296);
  uint64_t v6 = *find_entry(a4, &v129, 8uLL, 0);
  if (v6) {
    uint64_t v6 = *(void *)(v6 + 32);
  }
  uint64_t v7 = v131 + 8;
  if (v131 + 8 <= v132)
  {
    *(void *)((char *)v130 + v131) = *(void *)(v6 + 8);
    uint64_t v7 = v131 + 8;
  }
  uint64_t v131 = v7;
  uint64_t v128 = *(void *)(a1 + 1176);
  entry = find_entry(a4, &v128, 8uLL, 0);
  if (*entry) {
    uint64_t v9 = *(void *)(*entry + 32);
  }
  else {
    uint64_t v9 = 0;
  }
  unint64_t v10 = v132;
  uint64_t v11 = v131 + 8;
  if (v131 + 8 <= v132)
  {
    *(void *)((char *)v130 + v131) = *(void *)(v9 + 8);
    unint64_t v10 = v132;
    uint64_t v11 = v131 + 8;
  }
  uint64_t v131 = v11;
  uint64_t v12 = v11 + 8;
  if (v11 + 8 <= v10)
  {
    *(void *)((char *)v130 + v11) = 31;
    uint64_t v12 = v131 + 8;
  }
  uint64_t v13 = 0;
  uint64_t v131 = v12;
  do
  {
    uint64_t v14 = v12 + 8;
    unint64_t v15 = v132;
    if (v12 + 8 <= v132)
    {
      *(void *)((char *)v130 + v12) = *(void *)(a1 + v13);
      unint64_t v15 = v132;
      uint64_t v14 = v131 + 8;
    }
    uint64_t v131 = v14;
    uint64_t v16 = v14 + 8;
    if (v14 + 8 <= v15)
    {
      *(void *)((char *)v130 + v14) = *(unsigned __int16 *)(a1 + v13 + 8);
      unint64_t v15 = v132;
      uint64_t v16 = v131 + 8;
    }
    uint64_t v131 = v16;
    uint64_t v12 = v16 + 8;
    if (v16 + 8 <= v15)
    {
      *(void *)((char *)v130 + v16) = *(unsigned __int8 *)(a1 + v13 + 10);
      uint64_t v12 = v131 + 8;
    }
    uint64_t v131 = v12;
    v13 += 16;
  }
  while (v13 != 496);
  uint64_t v17 = v12 + 8;
  if (v12 + 8 <= v132)
  {
    *(void *)((char *)v130 + v12) = 31;
    uint64_t v17 = v131 + 8;
  }
  uint64_t v18 = 0;
  uint64_t v131 = v17;
  do
  {
    uint64_t v19 = a1 + v18;
    uint64_t v20 = v17 + 8;
    unint64_t v21 = v132;
    if (v17 + 8 <= v132)
    {
      *(void *)((char *)v130 + v17) = *(unsigned __int8 *)(v19 + 501);
      unint64_t v21 = v132;
      uint64_t v20 = v131 + 8;
    }
    uint64_t v131 = v20;
    uint64_t v22 = v20 + 8;
    if (v20 + 8 <= v21)
    {
      *(void *)((char *)v130 + v2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *(unsigned int *)(v19 + 496);
      unint64_t v21 = v132;
      uint64_t v22 = v131 + 8;
    }
    uint64_t v131 = v22;
    uint64_t v17 = v22 + 8;
    if (v22 + 8 <= v21)
    {
      *(void *)((char *)v130 + v22) = *(unsigned __int8 *)(a1 + v18 + 500);
      uint64_t v17 = v131 + 8;
    }
    uint64_t v131 = v17;
    v18 += 8;
  }
  while (v18 != 248);
  uint64_t v23 = v17 + 8;
  unint64_t v24 = v132;
  if (v17 + 8 <= v132)
  {
    *(void *)((char *)v130 + v17) = *(void *)(a1 + 1272);
    unint64_t v24 = v132;
    uint64_t v23 = v131 + 8;
  }
  uint64_t v131 = v23;
  uint64_t v25 = v23 + 8;
  if (v23 + 8 <= v24)
  {
    *(void *)((char *)v130 + v23) = *(void *)(a1 + 1288);
    unint64_t v24 = v132;
    uint64_t v25 = v131 + 8;
  }
  uint64_t v131 = v25;
  unint64_t v26 = v25 + 4;
  if (v25 + 4 <= v24)
  {
    *(_DWORD *)((char *)v130 + v25) = *(_DWORD *)(a1 + 1332);
    unint64_t v24 = v132;
    unint64_t v26 = v131 + 4;
  }
  uint64_t v131 = v26;
  if (v24 > v26)
  {
    if (v24 - v26 >= 4) {
      size_t v27 = 4;
    }
    else {
      size_t v27 = v24 - v26;
    }
    bzero((char *)v130 + v26, v27);
    unint64_t v26 = v131;
    unint64_t v24 = v132;
  }
  unint64_t v28 = v26 + 4;
  uint64_t v131 = v26 + 4;
  unint64_t v29 = v26 + 12;
  if (v29 <= v24)
  {
    *(void *)((char *)v130 + v28) = *(unsigned __int8 *)(a1 + 1480);
    unint64_t v24 = v132;
    unint64_t v29 = v131 + 8;
  }
  uint64_t v131 = v29;
  uint64_t v30 = v29 + 8;
  if (v29 + 8 <= v24)
  {
    *(void *)((char *)v130 + v29) = *(unsigned __int8 *)(a1 + 1481);
    unint64_t v24 = v132;
    uint64_t v30 = v131 + 8;
  }
  uint64_t v131 = v30;
  uint64_t v31 = v30 + 8;
  if (v30 + 8 <= v24)
  {
    *(void *)((char *)v130 + v3mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *(unsigned __int8 *)(a1 + 1493);
    unint64_t v24 = v132;
    uint64_t v31 = v131 + 8;
  }
  uint64_t v131 = v31;
  uint64_t v32 = v31 + 8;
  if (v31 + 8 <= v24)
  {
    *(void *)((char *)v130 + v31) = *(unsigned __int16 *)(a1 + 1340);
    unint64_t v24 = v132;
    uint64_t v32 = v131 + 8;
  }
  uint64_t v131 = v32;
  uint64_t v33 = v32 + 8;
  if (v32 + 8 <= v24)
  {
    *(void *)((char *)v130 + v32) = *(unsigned __int16 *)(a1 + 1352);
    unint64_t v24 = v132;
    uint64_t v33 = v131 + 8;
  }
  uint64_t v131 = v33;
  uint64_t v34 = v33 + 8;
  if (v33 + 8 <= v24)
  {
    *(void *)((char *)v130 + v33) = 8;
    uint64_t v34 = v131 + 8;
  }
  uint64_t v35 = 0;
  uint64_t v131 = v34;
  do
  {
    SaveDYMTLRenderPipelineColorAttachmentDescriptor(&v130, (unsigned __int8 *)(a1 + 744 + v35));
    v35 += 16;
  }
  while (v35 != 128);
  WriteDynamicBufferString(&v130, *(const char **)(a1 + 1200));
  unint64_t v36 = v132;
  uint64_t v37 = v131 + 8;
  if (v131 + 8 <= v132)
  {
    *(void *)((char *)v130 + v131) = *(unsigned __int8 *)(a1 + 1485);
    unint64_t v36 = v132;
    uint64_t v37 = v131 + 8;
  }
  uint64_t v131 = v37;
  uint64_t v38 = v37 + 8;
  if (v37 + 8 <= v36)
  {
    *(void *)((char *)v130 + v37) = *(unsigned __int8 *)(a1 + 1505);
    unint64_t v36 = v132;
    uint64_t v38 = v131 + 8;
  }
  uint64_t v131 = v38;
  uint64_t v39 = v38 + 8;
  if (v38 + 8 <= v36)
  {
    *(void *)((char *)v130 + v38) = *(void *)(a1 + 1208);
    unint64_t v36 = v132;
    uint64_t v39 = v131 + 8;
  }
  uint64_t v131 = v39;
  uint64_t v40 = v39 + 8;
  if (v39 + 8 <= v36)
  {
    *(void *)((char *)v130 + v39) = *(unsigned __int8 *)(a1 + 1502);
    unint64_t v36 = v132;
    uint64_t v40 = v131 + 8;
  }
  uint64_t v131 = v40;
  uint64_t v41 = v40 + 8;
  if (v40 + 8 <= v36)
  {
    *(void *)((char *)v130 + v4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *(unsigned __int8 *)(a1 + 1501);
    unint64_t v36 = v132;
    uint64_t v41 = v131 + 8;
  }
  uint64_t v131 = v41;
  uint64_t v42 = v41 + 8;
  if (v41 + 8 <= v36)
  {
    *(void *)((char *)v130 + v41) = *(unsigned __int8 *)(a1 + 1500);
    unint64_t v36 = v132;
    uint64_t v42 = v131 + 8;
  }
  uint64_t v131 = v42;
  uint64_t v43 = v42 + 8;
  if (v42 + 8 <= v36)
  {
    *(void *)((char *)v130 + v42) = *(unsigned __int8 *)(a1 + 1503);
    unint64_t v36 = v132;
    uint64_t v43 = v131 + 8;
  }
  uint64_t v131 = v43;
  uint64_t v44 = v43 + 8;
  if (v43 + 8 <= v36)
  {
    *(void *)((char *)v130 + v43) = *(unsigned __int8 *)(a1 + 1504);
    unint64_t v36 = v132;
    uint64_t v44 = v131 + 8;
  }
  uint64_t v131 = v44;
  uint64_t v45 = v44 + 8;
  if (v44 + 8 <= v36)
  {
    *(void *)((char *)v130 + v44) = 31;
    uint64_t v45 = v131 + 8;
  }
  uint64_t v46 = 0;
  uint64_t v131 = v45;
  do
  {
    uint64_t v47 = v45 + 8;
    if (v45 + 8 <= v132)
    {
      *(void *)((char *)v130 + v45) = *(unsigned __int8 *)(a1 + 1447 + v46);
      uint64_t v47 = v131 + 8;
    }
    uint64_t v131 = v47;
    ++v46;
    uint64_t v45 = v47;
  }
  while (v46 != 31);
  uint64_t v48 = v47 + 8;
  if (v47 + 8 <= v132)
  {
    *(void *)((char *)v130 + v47) = 31;
    uint64_t v48 = v131 + 8;
  }
  uint64_t v49 = 0;
  uint64_t v131 = v48;
  do
  {
    uint64_t v50 = v48 + 8;
    if (v48 + 8 <= v132)
    {
      *(void *)((char *)v130 + v48) = *(unsigned __int8 *)(a1 + 1354 + v49);
      uint64_t v50 = v131 + 8;
    }
    uint64_t v131 = v50;
    ++v49;
    uint64_t v48 = v50;
  }
  while (v49 != 31);
  uint64_t v51 = v50 + 8;
  unint64_t v52 = v132;
  if (v50 + 8 <= v132)
  {
    *(void *)((char *)v130 + v5mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *(unsigned __int8 *)(a1 + 1499);
    unint64_t v52 = v132;
    uint64_t v51 = v131 + 8;
  }
  uint64_t v131 = v51;
  uint64_t v53 = v51 + 8;
  if (v51 + 8 <= v52)
  {
    *(void *)((char *)v130 + v51) = *(unsigned __int8 *)(a1 + 1507);
    unint64_t v52 = v132;
    uint64_t v53 = v131 + 8;
  }
  uint64_t v131 = v53;
  uint64_t v54 = v53 + 8;
  if (v53 + 8 <= v52)
  {
    *(void *)((char *)v130 + v53) = *(unsigned int *)(a1 + 1328);
    uint64_t v54 = v131 + 8;
  }
  uint64_t v131 = v54;
  uint64_t v127 = *(void *)(a1 + 1264);
  unint64_t v55 = find_entry(a4, &v127, 8uLL, 0);
  if (*v55) {
    uint64_t v56 = *(void *)(*v55 + 32);
  }
  else {
    uint64_t v56 = 0;
  }
  unint64_t v57 = v132;
  uint64_t v58 = v131 + 8;
  if (v131 + 8 <= v132)
  {
    *(void *)((char *)v130 + v131) = *(void *)(v56 + 8);
    unint64_t v57 = v132;
    uint64_t v58 = v131 + 8;
  }
  uint64_t v131 = v58;
  uint64_t v59 = v58 + 8;
  if (v58 + 8 <= v57)
  {
    *(void *)((char *)v130 + v58) = *(unsigned __int8 *)(a1 + 1486);
    unint64_t v57 = v132;
    uint64_t v59 = v131 + 8;
  }
  uint64_t v131 = v59;
  uint64_t v60 = v59 + 8;
  if (v59 + 8 <= v57)
  {
    *(void *)((char *)v130 + v59) = *(unsigned __int8 *)(a1 + 1479);
    unint64_t v57 = v132;
    uint64_t v60 = v131 + 8;
  }
  uint64_t v131 = v60;
  uint64_t v61 = v60 + 8;
  if (v60 + 8 <= v57)
  {
    *(void *)((char *)v130 + v6mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *(unsigned int *)(a1 + 1336);
    unint64_t v57 = v132;
    uint64_t v61 = v131 + 8;
  }
  uint64_t v131 = v61;
  uint64_t v62 = v61 + 8;
  if (v61 + 8 <= v57)
  {
    *(void *)((char *)v130 + v61) = *(unsigned int *)(a1 + 1324);
    unint64_t v57 = v132;
    uint64_t v62 = v131 + 8;
  }
  uint64_t v131 = v62;
  uint64_t v63 = v62 + 8;
  if (v62 + 8 <= v57)
  {
    *(void *)((char *)v130 + v62) = *(unsigned __int8 *)(a1 + 1487);
    unint64_t v57 = v132;
    uint64_t v63 = v131 + 8;
  }
  uint64_t v131 = v63;
  uint64_t v64 = v63 + 8;
  if (v63 + 8 <= v57)
  {
    *(void *)((char *)v130 + v63) = *(unsigned __int8 *)(a1 + 1489);
    unint64_t v57 = v132;
    uint64_t v64 = v131 + 8;
  }
  uint64_t v131 = v64;
  uint64_t v65 = v64 + 8;
  if (v64 + 8 <= v57)
  {
    *(void *)((char *)v130 + v64) = *(unsigned __int8 *)(a1 + 1490);
    unint64_t v57 = v132;
    uint64_t v65 = v131 + 8;
  }
  uint64_t v131 = v65;
  uint64_t v66 = v65 + 8;
  if (v65 + 8 <= v57)
  {
    *(void *)((char *)v130 + v65) = *(unsigned __int8 *)(a1 + 1491);
    unint64_t v57 = v132;
    uint64_t v66 = v131 + 8;
  }
  uint64_t v131 = v66;
  uint64_t v67 = v66 + 8;
  if (v66 + 8 <= v57)
  {
    *(void *)((char *)v130 + v66) = *(unsigned __int8 *)(a1 + 1506);
    unint64_t v57 = v132;
    uint64_t v67 = v131 + 8;
  }
  uint64_t v131 = v67;
  uint64_t v68 = v67 + 8;
  if (v67 + 8 <= v57)
  {
    *(void *)((char *)v130 + v67) = *(unsigned __int8 *)(a1 + 1478);
    unint64_t v57 = v132;
    uint64_t v68 = v131 + 8;
  }
  uint64_t v131 = v68;
  uint64_t v69 = v68 + 8;
  if (v68 + 8 <= v57)
  {
    *(void *)((char *)v130 + v68) = *(unsigned __int8 *)(a1 + 1492);
    unint64_t v57 = v132;
    uint64_t v69 = v131 + 8;
  }
  uint64_t v131 = v69;
  uint64_t v70 = v69 + 8;
  if (v69 + 8 <= v57)
  {
    *(void *)((char *)v130 + v69) = *(unsigned __int8 *)(a1 + 1482);
    unint64_t v57 = v132;
    uint64_t v70 = v131 + 8;
  }
  uint64_t v131 = v70;
  uint64_t v71 = v70 + 8;
  if (v70 + 8 <= v57)
  {
    *(void *)((char *)v130 + v7mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *(void *)(a1 + 1280);
    unint64_t v57 = v132;
    uint64_t v71 = v131 + 8;
  }
  uint64_t v131 = v71;
  uint64_t v72 = v71 + 8;
  if (v71 + 8 <= v57)
  {
    *(void *)((char *)v130 + v71) = *(void *)(a1 + 1160);
    unint64_t v57 = v132;
    uint64_t v72 = v131 + 8;
  }
  uint64_t v131 = v72;
  uint64_t v73 = v72 + 8;
  if (v72 + 8 <= v57)
  {
    *(void *)((char *)v130 + v72) = *(void *)(a1 + 1168);
    unint64_t v57 = v132;
    uint64_t v73 = v131 + 8;
  }
  uint64_t v131 = v73;
  uint64_t v74 = v73 + 8;
  if (v73 + 8 <= v57)
  {
    *(void *)((char *)v130 + v73) = *(unsigned __int8 *)(a1 + 1494);
    unint64_t v57 = v132;
    uint64_t v74 = v131 + 8;
  }
  uint64_t v131 = v74;
  uint64_t v75 = v74 + 8;
  if (v74 + 8 <= v57)
  {
    *(void *)((char *)v130 + v74) = *(unsigned __int8 *)(a1 + 1488);
    unint64_t v57 = v132;
    uint64_t v75 = v131 + 8;
  }
  uint64_t v131 = v75;
  uint64_t v76 = v75 + 8;
  if (v75 + 8 <= v57)
  {
    *(void *)((char *)v130 + v75) = *(unsigned __int8 *)(a1 + 1483);
    unint64_t v57 = v132;
    uint64_t v76 = v131 + 8;
  }
  uint64_t v131 = v76;
  uint64_t v77 = v76 + 8;
  if (v76 + 8 <= v57)
  {
    *(void *)((char *)v130 + v76) = *(unsigned __int8 *)(a1 + 1484);
    uint64_t v77 = v131 + 8;
  }
  uint64_t v131 = v77;
  WriteGTData(&v130, *(const void **)(a1 + 1144), *(void *)(a1 + 1152));
  WriteGTData(&v130, *(const void **)(a1 + 1128), *(void *)(a1 + 1136));
  uint64_t v78 = *(void *)(a1 + 1312);
  uint64_t v79 = v131 + 8;
  if (v131 + 8 <= v132)
  {
    *(void *)((char *)v130 + v131) = v78;
    uint64_t v79 = v131 + 8;
    uint64_t v78 = *(void *)(a1 + 1312);
  }
  uint64_t v131 = v79;
  if (v78)
  {
    unint64_t v80 = 0;
    do
    {
      uint64_t v126 = *(void *)(*(void *)(a1 + 1304) + 8 * v80);
      uint64_t v81 = find_entry(a4, &v126, 8uLL, 0);
      if (*v81) {
        uint64_t v82 = *(void *)(*v81 + 32);
      }
      else {
        uint64_t v82 = 0;
      }
      uint64_t v79 = v131 + 8;
      if (v131 + 8 <= v132)
      {
        *(void *)((char *)v130 + v131) = *(void *)(v82 + 8);
        uint64_t v79 = v131 + 8;
      }
      uint64_t v131 = v79;
      ++v80;
    }
    while (*(void *)(a1 + 1312) > v80);
  }
  uint64_t v83 = *(void *)(a1 + 1192);
  uint64_t v84 = v79 + 8;
  if (v79 + 8 <= v132)
  {
    *(void *)((char *)v130 + v79) = v83;
    uint64_t v84 = v131 + 8;
    uint64_t v83 = *(void *)(a1 + 1192);
  }
  uint64_t v131 = v84;
  if (v83)
  {
    unint64_t v85 = 0;
    do
    {
      uint64_t v125 = *(void *)(*(void *)(a1 + 1184) + 8 * v85);
      uint64_t v86 = *find_entry(a4, &v125, 8uLL, 0);
      if (v86) {
        uint64_t v86 = *(void *)(v86 + 32);
      }
      uint64_t v87 = v131 + 8;
      if (v131 + 8 <= v132)
      {
        *(void *)((char *)v130 + v131) = *(void *)(v86 + 8);
        uint64_t v87 = v131 + 8;
      }
      uint64_t v131 = v87;
      ++v85;
    }
    while (*(void *)(a1 + 1192) > v85);
  }
  SaveDYMTLLinkedFunctions(&v130, a1 + 1064, a4);
  SaveDYMTLLinkedFunctions(&v130, a1 + 872, a4);
  uint64_t v124 = *(void *)(a1 + 1240);
  uint64_t v88 = *find_entry(a4, &v124, 8uLL, 0);
  if (v88) {
    uint64_t v88 = *(void *)(v88 + 32);
  }
  uint64_t v89 = v131 + 8;
  if (v131 + 8 <= v132)
  {
    *(void *)((char *)v130 + v131) = *(void *)(v88 + 8);
    uint64_t v89 = v131 + 8;
  }
  uint64_t v131 = v89;
  uint64_t v123 = *(void *)(a1 + 1216);
  uint64_t v90 = find_entry(a4, &v123, 8uLL, 0);
  if (*v90) {
    uint64_t v91 = *(void *)(*v90 + 32);
  }
  else {
    uint64_t v91 = 0;
  }
  unint64_t v92 = v132;
  uint64_t v93 = v131 + 8;
  if (v131 + 8 <= v132)
  {
    *(void *)((char *)v130 + v131) = *(void *)(v91 + 8);
    unint64_t v92 = v132;
    uint64_t v93 = v131 + 8;
  }
  uint64_t v131 = v93;
  uint64_t v94 = v93 + 8;
  if (v93 + 8 <= v92)
  {
    *(void *)((char *)v130 + v93) = 31;
    uint64_t v94 = v131 + 8;
  }
  uint64_t v95 = 0;
  uint64_t v131 = v94;
  do
  {
    uint64_t v96 = v94 + 8;
    if (v94 + 8 <= v132)
    {
      *(void *)((char *)v130 + v94) = *(unsigned __int8 *)(a1 + 1416 + v95);
      uint64_t v96 = v131 + 8;
    }
    uint64_t v131 = v96;
    ++v95;
    uint64_t v94 = v96;
  }
  while (v95 != 31);
  uint64_t v97 = v96 + 8;
  if (v96 + 8 <= v132)
  {
    *(void *)((char *)v130 + v96) = 31;
    uint64_t v97 = v131 + 8;
  }
  uint64_t v98 = 0;
  uint64_t v131 = v97;
  do
  {
    uint64_t v99 = v97 + 8;
    if (v97 + 8 <= v132)
    {
      *(void *)((char *)v130 + v97) = *(unsigned __int8 *)(a1 + 1385 + v98);
      uint64_t v99 = v131 + 8;
    }
    uint64_t v131 = v99;
    ++v98;
    uint64_t v97 = v99;
  }
  while (v98 != 31);
  uint64_t v100 = *(void *)(a1 + 1256);
  uint64_t v101 = v99 + 8;
  if (v99 + 8 <= v132)
  {
    *(void *)((char *)v130 + v99) = v100;
    uint64_t v101 = v131 + 8;
    uint64_t v100 = *(void *)(a1 + 1256);
  }
  uint64_t v131 = v101;
  if (v100)
  {
    unint64_t v102 = 0;
    do
    {
      uint64_t v122 = *(void *)(*(void *)(a1 + 1248) + 8 * v102);
      uint64_t v103 = find_entry(a4, &v122, 8uLL, 0);
      if (*v103) {
        uint64_t v104 = *(void *)(*v103 + 32);
      }
      else {
        uint64_t v104 = 0;
      }
      uint64_t v101 = v131 + 8;
      if (v131 + 8 <= v132)
      {
        *(void *)((char *)v130 + v131) = *(void *)(v104 + 8);
        uint64_t v101 = v131 + 8;
      }
      uint64_t v131 = v101;
      ++v102;
    }
    while (*(void *)(a1 + 1256) > v102);
  }
  uint64_t v105 = *(void *)(a1 + 1232);
  uint64_t v106 = v101 + 8;
  if (v101 + 8 <= v132)
  {
    *(void *)((char *)v130 + v101) = v105;
    uint64_t v106 = v131 + 8;
    uint64_t v105 = *(void *)(a1 + 1232);
  }
  uint64_t v131 = v106;
  if (v105)
  {
    unint64_t v107 = 0;
    do
    {
      uint64_t v121 = *(void *)(*(void *)(a1 + 1224) + 8 * v107);
      uint64_t v108 = *find_entry(a4, &v121, 8uLL, 0);
      if (v108) {
        uint64_t v108 = *(void *)(v108 + 32);
      }
      uint64_t v109 = v131 + 8;
      if (v131 + 8 <= v132)
      {
        *(void *)((char *)v130 + v131) = *(void *)(v108 + 8);
        uint64_t v109 = v131 + 8;
      }
      uint64_t v131 = v109;
      ++v107;
    }
    while (*(void *)(a1 + 1232) > v107);
  }
  SaveDYMTLLinkedFunctions(&v130, a1 + 1000, a4);
  SaveDYMTLLinkedFunctions(&v130, a1 + 936, a4);
  unint64_t v110 = v132;
  uint64_t v111 = v131 + 8;
  if (v131 + 8 <= v132)
  {
    *(void *)((char *)v130 + v131) = *(unsigned __int8 *)(a1 + 1498);
    unint64_t v110 = v132;
    uint64_t v111 = v131 + 8;
  }
  uint64_t v131 = v111;
  uint64_t v112 = v111 + 8;
  if (v111 + 8 <= v110)
  {
    *(void *)((char *)v130 + v111) = *(unsigned __int8 *)(a1 + 1495);
    unint64_t v110 = v132;
    uint64_t v112 = v131 + 8;
  }
  uint64_t v131 = v112;
  uint64_t v113 = v112 + 8;
  if (v112 + 8 <= v110)
  {
    *(void *)((char *)v130 + v112) = *(unsigned __int8 *)(a1 + 1497);
    unint64_t v110 = v132;
    uint64_t v113 = v131 + 8;
  }
  uint64_t v131 = v113;
  uint64_t v114 = v113 + 8;
  if (v113 + 8 <= v110)
  {
    *(void *)((char *)v130 + v113) = *(unsigned __int8 *)(a1 + 1496);
    unint64_t v110 = v132;
    uint64_t v114 = v131 + 8;
  }
  uint64_t v131 = v114;
  uint64_t v115 = v114 + 8;
  if (v114 + 8 <= v110)
  {
    *(void *)((char *)v130 + v114) = *(unsigned int *)(a1 + 1320);
    unint64_t v110 = v132;
    uint64_t v115 = v131 + 8;
  }
  uint64_t v131 = v115;
  uint64_t v116 = v115 + 8;
  if (v115 + 8 <= v110)
  {
    *(void *)((char *)v130 + v115) = *(unsigned __int16 *)(a1 + 1350);
    unint64_t v110 = v132;
    uint64_t v116 = v131 + 8;
  }
  uint64_t v131 = v116;
  uint64_t v117 = v116 + 8;
  if (v116 + 8 <= v110)
  {
    *(void *)((char *)v130 + v116) = *(unsigned __int16 *)(a1 + 1344);
    unint64_t v110 = v132;
    uint64_t v117 = v131 + 8;
  }
  uint64_t v131 = v117;
  uint64_t v118 = v117 + 8;
  if (v117 + 8 <= v110)
  {
    *(void *)((char *)v130 + v117) = *(unsigned __int16 *)(a1 + 1348);
    unint64_t v110 = v132;
    uint64_t v118 = v131 + 8;
  }
  uint64_t v131 = v118;
  uint64_t v119 = v118 + 8;
  if (v118 + 8 <= v110)
  {
    *(void *)((char *)v130 + v118) = *(unsigned __int16 *)(a1 + 1346);
    unint64_t v110 = v132;
    uint64_t v119 = v131 + 8;
  }
  uint64_t v131 = v119;
  uint64_t result = v119 + 8;
  if (v119 + 8 <= v110)
  {
    *(void *)((char *)v130 + v119) = *(unsigned __int16 *)(a1 + 1342);
    return v131 + 8;
  }
  return result;
}

void WriteDynamicBufferString(void *a1, const char *a2)
{
  if (a2) {
    unint64_t v3 = a2;
  }
  else {
    unint64_t v3 = "";
  }
  size_t v4 = strlen(v3);
  size_t v5 = v4 + 1;
  uint64_t v7 = a1[1];
  size_t v6 = a1[2];
  size_t v8 = v7 + v4 + 1;
  if (v8 <= v6)
  {
    memcpy((void *)(*a1 + v7), v3, v5);
    size_t v6 = a1[2];
    size_t v8 = a1[1] + v5;
  }
  a1[1] = v8;
  unint64_t v9 = (v4 & 0xFFFFFFFFFFFFFFF8) + ~v4 + 8;
  BOOL v10 = v6 > v8;
  size_t v11 = v6 - v8;
  if (v10)
  {
    if (v11 >= v9) {
      size_t v12 = v9;
    }
    else {
      size_t v12 = v11;
    }
    bzero((void *)(*a1 + v8), v12);
    size_t v8 = a1[1];
  }
  a1[1] = v8 + v9;
}

void *SaveDYMTLRenderPipelineColorAttachmentDescriptor(void *result, unsigned __int8 *a2)
{
  uint64_t v3 = result[1];
  unint64_t v2 = result[2];
  uint64_t v4 = v3 + 8;
  if (v3 + 8 <= v2)
  {
    *(void *)(*result + v3) = a2[3];
    unint64_t v2 = result[2];
    uint64_t v4 = result[1] + 8;
  }
  result[1] = v4;
  uint64_t v5 = v4 + 8;
  if (v4 + 8 <= v2)
  {
    *(void *)(*result + v4) = a2[8];
    unint64_t v2 = result[2];
    uint64_t v5 = result[1] + 8;
  }
  result[1] = v5;
  uint64_t v6 = v5 + 8;
  if (v5 + 8 <= v2)
  {
    *(void *)(*result + v5) = a2[5];
    unint64_t v2 = result[2];
    uint64_t v6 = result[1] + 8;
  }
  result[1] = v6;
  uint64_t v7 = v6 + 8;
  if (v6 + 8 <= v2)
  {
    *(void *)(*result + v6) = a2[6];
    unint64_t v2 = result[2];
    uint64_t v7 = result[1] + 8;
  }
  result[1] = v7;
  uint64_t v8 = v7 + 8;
  if (v7 + 8 <= v2)
  {
    *(void *)(*result + v7) = a2[7];
    unint64_t v2 = result[2];
    uint64_t v8 = result[1] + 8;
  }
  result[1] = v8;
  uint64_t v9 = v8 + 8;
  if (v8 + 8 <= v2)
  {
    *(void *)(*result + v8) = a2[4];
    unint64_t v2 = result[2];
    uint64_t v9 = result[1] + 8;
  }
  result[1] = v9;
  uint64_t v10 = v9 + 8;
  if (v9 + 8 <= v2)
  {
    *(void *)(*result + v9) = a2[2];
    unint64_t v2 = result[2];
    uint64_t v10 = result[1] + 8;
  }
  result[1] = v10;
  uint64_t v11 = v10 + 8;
  if (v10 + 8 <= v2)
  {
    *(void *)(*result + v1mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = a2[9];
    unint64_t v2 = result[2];
    uint64_t v11 = result[1] + 8;
  }
  result[1] = v11;
  uint64_t v12 = v11 + 8;
  if (v11 + 8 <= v2)
  {
    *(void *)(*result + v11) = *(unsigned __int16 *)a2;
    uint64_t v12 = result[1] + 8;
  }
  result[1] = v12;
  return result;
}

void WriteGTData(void *a1, const void *a2, size_t __n)
{
  uint64_t v5 = a1[1];
  uint64_t v6 = v5 + 8;
  if ((unint64_t)(v5 + 8) <= a1[2])
  {
    *(void *)(*a1 + v5) = __n;
    uint64_t v6 = a1[1] + 8;
  }
  a1[1] = v6;
  if (a2)
  {
    size_t v7 = v6 + __n;
    size_t v8 = a1[2];
    if (v6 + __n <= v8)
    {
      memcpy((void *)(*a1 + v6), a2, __n);
      size_t v8 = a1[2];
      size_t v7 = a1[1] + __n;
    }
    a1[1] = v7;
    size_t v9 = ((__n + 7) & 0xFFFFFFFFFFFFFFF8) - __n;
    BOOL v10 = v8 > v7;
    size_t v11 = v8 - v7;
    if (v10)
    {
      if (v11 >= v9) {
        size_t v12 = v9;
      }
      else {
        size_t v12 = v11;
      }
      bzero((void *)(*a1 + v7), v12);
      size_t v7 = a1[1];
    }
    a1[1] = v7 + v9;
  }
}

uint64_t *SaveDYMTLLinkedFunctions(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = a1[1];
  uint64_t v8 = v7 + 8;
  if ((unint64_t)(v7 + 8) <= a1[2])
  {
    *(void *)(*a1 + v7) = v6;
    uint64_t v8 = a1[1] + 8;
    uint64_t v6 = *(void *)(a2 + 24);
  }
  a1[1] = v8;
  if (v6)
  {
    unint64_t v9 = 0;
    do
    {
      uint64_t v29 = *(void *)(*(void *)(a2 + 16) + 8 * v9);
      entry = find_entry(a3, &v29, 8uLL, 0);
      if (*entry) {
        uint64_t v11 = *(void *)(*entry + 32);
      }
      else {
        uint64_t v11 = 0;
      }
      uint64_t v12 = a1[1];
      uint64_t v8 = v12 + 8;
      if ((unint64_t)(v12 + 8) <= a1[2])
      {
        *(void *)(*a1 + v12) = *(void *)(v11 + 8);
        uint64_t v8 = a1[1] + 8;
      }
      a1[1] = v8;
      ++v9;
    }
    while (*(void *)(a2 + 24) > v9);
  }
  uint64_t v13 = *(void *)(a2 + 8);
  uint64_t v14 = v8 + 8;
  if ((unint64_t)(v8 + 8) <= a1[2])
  {
    *(void *)(*a1 + v8) = v13;
    uint64_t v14 = a1[1] + 8;
    uint64_t v13 = *(void *)(a2 + 8);
  }
  a1[1] = v14;
  if (v13)
  {
    unint64_t v15 = 0;
    do
    {
      uint64_t v28 = *(void *)(*(void *)a2 + 8 * v15);
      uint64_t v16 = *find_entry(a3, &v28, 8uLL, 0);
      if (v16) {
        uint64_t v16 = *(void *)(v16 + 32);
      }
      uint64_t v17 = a1[1];
      uint64_t v18 = v17 + 8;
      if ((unint64_t)(v17 + 8) <= a1[2])
      {
        *(void *)(*a1 + v17) = *(void *)(v16 + 8);
        uint64_t v18 = a1[1] + 8;
      }
      a1[1] = v18;
      ++v15;
    }
    while (*(void *)(a2 + 8) > v15);
  }
  uint64_t result = (uint64_t *)SaveDYMTLLinkedFunctionsGroup(*(void *)(a2 + 32), *(unsigned int *)(a2 + 40), a1, a3);
  uint64_t v20 = *(void *)(a2 + 56);
  uint64_t v21 = a1[1];
  uint64_t v22 = v21 + 8;
  if ((unint64_t)(v21 + 8) <= a1[2])
  {
    *(void *)(*a1 + v21) = v20;
    uint64_t v22 = a1[1] + 8;
    uint64_t v20 = *(void *)(a2 + 56);
  }
  a1[1] = v22;
  if (v20)
  {
    unint64_t v23 = 0;
    do
    {
      uint64_t v27 = *(void *)(*(void *)(a2 + 48) + 8 * v23);
      uint64_t result = find_entry(a3, &v27, 8uLL, 0);
      uint64_t v24 = *result;
      if (*result) {
        uint64_t v24 = *(void *)(v24 + 32);
      }
      uint64_t v25 = a1[1];
      uint64_t v26 = v25 + 8;
      if ((unint64_t)(v25 + 8) <= a1[2])
      {
        *(void *)(*a1 + v25) = *(void *)(v24 + 8);
        uint64_t v26 = a1[1] + 8;
      }
      a1[1] = v26;
      ++v23;
    }
    while (*(void *)(a2 + 56) > v23);
  }
  return result;
}

uint64_t SaveDYMTLLinkedFunctionsGroup(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  int v5 = a2;
  memset(v25, 0, sizeof(v25));
  if (a3)
  {
    uint64_t v7 = a3;
    uint64_t v8 = SaveDYMTLLinkedFunctionsGroup(a1, a2, 0, a4);
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v7 = v25;
  }
  uint64_t v10 = v7[1];
  unint64_t v9 = v7[2];
  uint64_t v11 = v10 + 8;
  if (v10 + 8 <= v9)
  {
    *(void *)(*v7 + v1mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v8;
    unint64_t v9 = v7[2];
    uint64_t v11 = v7[1] + 8;
  }
  v7[1] = v11;
  uint64_t result = v11 + 8;
  if (v11 + 8 <= v9)
  {
    *(void *)(*v7 + v11) = v5;
    uint64_t result = v7[1] + 8;
  }
  v7[1] = result;
  if (v5 >= 1)
  {
    uint64_t v13 = (unsigned int *)(a1 + 16);
    uint64_t v14 = v5;
    do
    {
      uint64_t v15 = result + 8;
      if ((unint64_t)(result + 8) <= v7[2])
      {
        *(void *)(*v7 + atomic_fetch_add((atomic_ullong *volatile)&g_GPUDataDownloaded, result) = *v13;
        uint64_t v15 = v7[1] + 8;
      }
      v7[1] = v15;
      v13 += 6;
      uint64_t result = v15;
      --v14;
    }
    while (v14);
    for (uint64_t i = 0; i != v5; ++i)
    {
      uint64_t v17 = a1 + 24 * i;
      WriteDynamicBufferString(v7, *(const char **)v17);
      int v19 = *(_DWORD *)(v17 + 16);
      uint64_t v18 = (unsigned int *)(v17 + 16);
      if (v19)
      {
        unint64_t v20 = 0;
        do
        {
          uint64_t v24 = *(void *)(*(void *)(a1 + 24 * i + 8) + 8 * v20);
          uint64_t v21 = *find_entry(a4, &v24, 8uLL, 0);
          if (v21) {
            uint64_t v21 = *(void *)(v21 + 32);
          }
          uint64_t v22 = v7[1];
          uint64_t v23 = v22 + 8;
          if ((unint64_t)(v22 + 8) <= v7[2])
          {
            *(void *)(*v7 + v22) = *(void *)(v21 + 8);
            uint64_t v23 = v7[1] + 8;
          }
          v7[1] = v23;
          ++v20;
        }
        while (v20 < *v18);
      }
    }
    return v7[1];
  }
  return result;
}

size_t DecodeDYMTLMeshRenderPipelineDescriptor(uint64_t a1, void *a2, void *a3, int a4, uint64_t a5)
{
  v47[1] = a2;
  memcpy(v46, &GTMTLMeshRenderPipelineDescriptorDefaults, sizeof(v46));
  unsigned int v9 = *(_DWORD *)a1;
  size_t result = strlen((const char *)(a1 + 8));
  v47[0] = (void *)((result & 0xFFFFFFFFFFFFFFF8) + a1 + 8 + 8);
  int v11 = *(unsigned __int8 *)(a1 + 8);
  if (*(unsigned char *)(a1 + 8)) {
    uint64_t v12 = (const char *)(a1 + 8);
  }
  else {
    uint64_t v12 = 0;
  }
  if (v11)
  {
    size_t result = strlen(v12);
    uint64_t v13 = a3 + 52;
    uint64_t v14 = a3[52];
    size_t v15 = result + 1;
    if (result != -1)
    {
      uint64_t v16 = (void *)a3[52];
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v13 = a3 + 52;
    uint64_t v14 = a3[52];
  }
  size_t v15 = 0;
  uint64_t v16 = 0;
LABEL_9:
  *uint64_t v13 = v14 + v15;
  if (a4) {
    size_t result = (size_t)memcpy(v16, v12, v15);
  }
  *(int8x16_t *)((char *)&v46[22] + 8) = vextq_s8(*(int8x16_t *)v47[0], *(int8x16_t *)v47[0], 8uLL);
  uint64_t v17 = v47[0][2];
  WORD3(v46[25]) = v47[0][3];
  uint64_t v18 = v47[0][5];
  WORD2(v46[25]) = v47[0][4];
  uint64_t v19 = v47[0][7];
  long long v20 = *((_OWORD *)v47[0] + 4);
  uint64_t v22 = v47[0][10];
  uint64_t v21 = v47[0][11];
  uint64_t v23 = v47[0] + 12;
  uint64_t v24 = v47[0][6];
  v47[0] += 6;
  BYTE11(v46[31]) = v18;
  BYTE10(v46[31]) = v24;
  *((void *)&v46[21] + 1) = v17;
  *(void *)&v46[22] = v16;
  *((void *)&v46[23] + 1) = v19;
  v46[20] = v20;
  *(void *)&v46[21] = v22;
  if (v21)
  {
    uint64_t v25 = (char *)&v46[29] + 8;
    do
    {
      if (a4) {
        *uint64_t v25 = *v23;
      }
      ++v23;
      ++v25;
      --v21;
    }
    while (v21);
  }
  uint64_t v28 = *v23;
  uint64_t v26 = v23 + 1;
  uint64_t v27 = v28;
  v47[0] = v26;
  if (v28)
  {
    uint64_t v29 = (char *)&v46[27] + 9;
    do
    {
      if (a4) {
        *uint64_t v29 = *v26;
      }
      ++v26;
      ++v29;
      --v27;
    }
    while (v27);
  }
  uint64_t v32 = *v26;
  uint64_t v30 = v26 + 1;
  uint64_t v31 = v32;
  v47[0] = v30;
  if (v32)
  {
    uint64_t v33 = (char *)&v46[25] + 10;
    do
    {
      if (a4) {
        *uint64_t v33 = *v30;
      }
      ++v30;
      ++v33;
      --v31;
    }
    while (v31);
  }
  BYTE12(v46[31]) = *v30;
  BYTE7(v46[31]) = v30[1];
  BYTE8(v46[31]) = v30[2];
  BYTE13(v46[31]) = v30[3];
  BYTE9(v46[31]) = v30[4];
  HIDWORD(v46[24]) = v30[5];
  uint64_t v34 = v30[6];
  uint64_t v35 = v30 + 7;
  v47[0] = v35;
  if (v34)
  {
    unint64_t v36 = v46;
    do
    {
      size_t result = (size_t)MakeDYMTLRenderPipelineColorAttachmentDescriptor(v47, (uint64_t)v36++, a4);
      --v34;
    }
    while (v34);
    uint64_t v35 = v47[0];
  }
  LOWORD(v46[25]) = *v35;
  WORD4(v46[25]) = v35[1];
  BYTE14(v46[31]) = v35[2];
  if (v9 > 0x43)
  {
    uint64_t v37 = v35[3];
    v47[0] = v35 + 4;
    DWORD2(v46[24]) = v37;
    if (v9 >= 0x46)
    {
      MakeDYMTLLinkedFunctions((size_t)v47, &v46[16], a3, a4, a5);
      MakeDYMTLLinkedFunctions((size_t)v47, &v46[12], a3, a4, a5);
      size_t result = MakeDYMTLLinkedFunctions((size_t)v47, &v46[8], a3, a4, a5);
      if (v9 >= 0x4B)
      {
        uint64_t v38 = v47[0][1];
        WORD1(v46[25]) = *v47[0];
        *(void *)&v46[24] = v38;
      }
    }
  }
  uint64_t v39 = (char *)a3[26];
  a3[26] = v39 + 512;
  if (a4)
  {
    if (a5)
    {
      Stream_11288 = (uint64_t *)GetStream_11288(a5, *(uint64_t *)&v46[23]);
      if (Stream_11288) {
        uint64_t v41 = *Stream_11288;
      }
      else {
        uint64_t v41 = 0;
      }
      *(void *)&v46[23] = v41;
      uint64_t v43 = (uint64_t *)GetStream_11288(a5, *((uint64_t *)&v46[22] + 1));
      if (v43) {
        uint64_t v44 = *v43;
      }
      else {
        uint64_t v44 = 0;
      }
      *((void *)&v46[22] + 1) = v44;
      uint64_t v42 = (uint64_t *)GetStream_11288(a5, *((uint64_t *)&v46[21] + 1));
      if (!v42)
      {
        uint64_t v45 = 0;
        goto LABEL_46;
      }
    }
    else
    {
      uint64_t v42 = (uint64_t *)&v46[21] + 1;
    }
    uint64_t v45 = *v42;
LABEL_46:
    *((void *)&v46[21] + 1) = v45;
    return (size_t)memcpy(v39, v46, 0x200uLL);
  }
  return result;
}

uint64_t EncodeDYMTLMeshRenderPipelineDescriptor(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v53 = a2;
  unint64_t v55 = a3;
  if (a3 >= 8) {
    *a2 = 81;
  }
  uint64_t v54 = 8;
  WriteDynamicBufferString(&v53, *(const char **)(a1 + 352));
  uint64_t v52 = *(void *)(a1 + 368);
  uint64_t v6 = *find_entry(a4, &v52, 8uLL, 0);
  if (v6) {
    uint64_t v6 = *(void *)(v6 + 32);
  }
  uint64_t v7 = v54 + 8;
  if (v54 + 8 <= v55)
  {
    *(void *)((char *)v53 + v54) = *(void *)(v6 + 8);
    uint64_t v7 = v54 + 8;
  }
  uint64_t v54 = v7;
  uint64_t v51 = *(void *)(a1 + 360);
  uint64_t v8 = *find_entry(a4, &v51, 8uLL, 0);
  if (v8) {
    uint64_t v8 = *(void *)(v8 + 32);
  }
  uint64_t v9 = v54 + 8;
  if (v54 + 8 <= v55)
  {
    *(void *)((char *)v53 + v54) = *(void *)(v8 + 8);
    uint64_t v9 = v54 + 8;
  }
  uint64_t v54 = v9;
  uint64_t v50 = *(void *)(a1 + 344);
  entry = find_entry(a4, &v50, 8uLL, 0);
  if (*entry) {
    uint64_t v11 = *(void *)(*entry + 32);
  }
  else {
    uint64_t v11 = 0;
  }
  unint64_t v12 = v55;
  uint64_t v13 = v54 + 8;
  if (v54 + 8 <= v55)
  {
    *(void *)((char *)v53 + v54) = *(void *)(v11 + 8);
    unint64_t v12 = v55;
    uint64_t v13 = v54 + 8;
  }
  uint64_t v54 = v13;
  uint64_t v14 = v13 + 8;
  if (v13 + 8 <= v12)
  {
    *(void *)((char *)v53 + v13) = *(unsigned __int16 *)(a1 + 406);
    unint64_t v12 = v55;
    uint64_t v14 = v54 + 8;
  }
  uint64_t v54 = v14;
  uint64_t v15 = v14 + 8;
  if (v14 + 8 <= v12)
  {
    *(void *)((char *)v53 + v14) = *(unsigned __int16 *)(a1 + 404);
    unint64_t v12 = v55;
    uint64_t v15 = v54 + 8;
  }
  uint64_t v54 = v15;
  uint64_t v16 = v15 + 8;
  if (v15 + 8 <= v12)
  {
    *(void *)((char *)v53 + v15) = *(unsigned __int8 *)(a1 + 507);
    unint64_t v12 = v55;
    uint64_t v16 = v54 + 8;
  }
  uint64_t v54 = v16;
  uint64_t v17 = v16 + 8;
  if (v16 + 8 <= v12)
  {
    *(void *)((char *)v53 + v16) = *(unsigned __int8 *)(a1 + 506);
    unint64_t v12 = v55;
    uint64_t v17 = v54 + 8;
  }
  uint64_t v54 = v17;
  uint64_t v18 = v17 + 8;
  if (v17 + 8 <= v12)
  {
    *(void *)((char *)v53 + v17) = *(void *)(a1 + 376);
    unint64_t v12 = v55;
    uint64_t v18 = v54 + 8;
  }
  uint64_t v54 = v18;
  uint64_t v20 = *(void *)(a1 + 328);
  uint64_t v19 = *(void *)(a1 + 336);
  uint64_t v21 = v18 + 8;
  if (v18 + 8 <= v12)
  {
    *(void *)((char *)v53 + v18) = *(void *)(a1 + 320);
    unint64_t v12 = v55;
    uint64_t v21 = v54 + 8;
  }
  uint64_t v54 = v21;
  uint64_t v22 = v21 + 8;
  if (v21 + 8 <= v12)
  {
    *(void *)((char *)v53 + v21) = v20;
    unint64_t v12 = v55;
    uint64_t v22 = v54 + 8;
  }
  uint64_t v54 = v22;
  uint64_t v23 = v22 + 8;
  if (v22 + 8 <= v12)
  {
    *(void *)((char *)v53 + v22) = v19;
    unint64_t v12 = v55;
    uint64_t v23 = v54 + 8;
  }
  uint64_t v54 = v23;
  uint64_t v24 = v23 + 8;
  if (v23 + 8 <= v12)
  {
    *(void *)((char *)v53 + v23) = 31;
    uint64_t v24 = v54 + 8;
  }
  uint64_t v25 = 0;
  uint64_t v54 = v24;
  do
  {
    uint64_t v26 = v24 + 8;
    if (v24 + 8 <= v55)
    {
      *(void *)((char *)v53 + v24) = *(unsigned __int8 *)(a1 + 472 + v25);
      uint64_t v26 = v54 + 8;
    }
    uint64_t v54 = v26;
    ++v25;
    uint64_t v24 = v26;
  }
  while (v25 != 31);
  uint64_t v27 = v26 + 8;
  if (v26 + 8 <= v55)
  {
    *(void *)((char *)v53 + v26) = 31;
    uint64_t v27 = v54 + 8;
  }
  uint64_t v28 = 0;
  uint64_t v54 = v27;
  do
  {
    uint64_t v29 = v27 + 8;
    if (v27 + 8 <= v55)
    {
      *(void *)((char *)v53 + v27) = *(unsigned __int8 *)(a1 + 441 + v28);
      uint64_t v29 = v54 + 8;
    }
    uint64_t v54 = v29;
    ++v28;
    uint64_t v27 = v29;
  }
  while (v28 != 31);
  uint64_t v30 = v29 + 8;
  if (v29 + 8 <= v55)
  {
    *(void *)((char *)v53 + v29) = 31;
    uint64_t v30 = v54 + 8;
  }
  uint64_t v31 = 0;
  uint64_t v54 = v30;
  do
  {
    uint64_t v32 = v30 + 8;
    if (v30 + 8 <= v55)
    {
      *(void *)((char *)v53 + v3mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *(unsigned __int8 *)(a1 + 410 + v31);
      uint64_t v32 = v54 + 8;
    }
    uint64_t v54 = v32;
    ++v31;
    uint64_t v30 = v32;
  }
  while (v31 != 31);
  uint64_t v33 = v32 + 8;
  unint64_t v34 = v55;
  if (v32 + 8 <= v55)
  {
    *(void *)((char *)v53 + v32) = *(unsigned __int8 *)(a1 + 508);
    unint64_t v34 = v55;
    uint64_t v33 = v54 + 8;
  }
  uint64_t v54 = v33;
  uint64_t v35 = v33 + 8;
  if (v33 + 8 <= v34)
  {
    *(void *)((char *)v53 + v33) = *(unsigned __int8 *)(a1 + 503);
    unint64_t v34 = v55;
    uint64_t v35 = v54 + 8;
  }
  uint64_t v54 = v35;
  uint64_t v36 = v35 + 8;
  if (v35 + 8 <= v34)
  {
    *(void *)((char *)v53 + v35) = *(unsigned __int8 *)(a1 + 504);
    unint64_t v34 = v55;
    uint64_t v36 = v54 + 8;
  }
  uint64_t v54 = v36;
  uint64_t v37 = v36 + 8;
  if (v36 + 8 <= v34)
  {
    *(void *)((char *)v53 + v36) = *(unsigned __int8 *)(a1 + 509);
    unint64_t v34 = v55;
    uint64_t v37 = v54 + 8;
  }
  uint64_t v54 = v37;
  uint64_t v38 = v37 + 8;
  if (v37 + 8 <= v34)
  {
    *(void *)((char *)v53 + v37) = *(unsigned __int8 *)(a1 + 505);
    unint64_t v34 = v55;
    uint64_t v38 = v54 + 8;
  }
  uint64_t v54 = v38;
  uint64_t v39 = v38 + 8;
  if (v38 + 8 <= v34)
  {
    *(void *)((char *)v53 + v38) = *(unsigned int *)(a1 + 396);
    unint64_t v34 = v55;
    uint64_t v39 = v54 + 8;
  }
  uint64_t v54 = v39;
  uint64_t v40 = v39 + 8;
  if (v39 + 8 <= v34)
  {
    *(void *)((char *)v53 + v39) = 8;
    uint64_t v40 = v54 + 8;
  }
  uint64_t v41 = 0;
  uint64_t v54 = v40;
  do
  {
    SaveDYMTLRenderPipelineColorAttachmentDescriptor(&v53, (unsigned __int8 *)(a1 + v41));
    v41 += 16;
  }
  while (v41 != 128);
  unint64_t v42 = v55;
  uint64_t v43 = v54 + 8;
  if (v54 + 8 <= v55)
  {
    *(void *)((char *)v53 + v54) = *(unsigned __int16 *)(a1 + 400);
    unint64_t v42 = v55;
    uint64_t v43 = v54 + 8;
  }
  uint64_t v54 = v43;
  uint64_t v44 = v43 + 8;
  if (v43 + 8 <= v42)
  {
    *(void *)((char *)v53 + v43) = *(unsigned __int16 *)(a1 + 408);
    unint64_t v42 = v55;
    uint64_t v44 = v54 + 8;
  }
  uint64_t v54 = v44;
  uint64_t v45 = v44 + 8;
  if (v44 + 8 <= v42)
  {
    *(void *)((char *)v53 + v44) = *(unsigned __int8 *)(a1 + 510);
    unint64_t v42 = v55;
    uint64_t v45 = v54 + 8;
  }
  uint64_t v54 = v45;
  uint64_t v46 = v45 + 8;
  if (v45 + 8 <= v42)
  {
    *(void *)((char *)v53 + v45) = *(unsigned int *)(a1 + 392);
    uint64_t v46 = v54 + 8;
  }
  uint64_t v54 = v46;
  SaveDYMTLLinkedFunctions(&v53, a1 + 256, a4);
  SaveDYMTLLinkedFunctions(&v53, a1 + 192, a4);
  SaveDYMTLLinkedFunctions(&v53, a1 + 128, a4);
  unint64_t v47 = v55;
  uint64_t v48 = v54 + 8;
  if (v54 + 8 <= v55)
  {
    *(void *)((char *)v53 + v54) = *(unsigned __int16 *)(a1 + 402);
    unint64_t v47 = v55;
    uint64_t v48 = v54 + 8;
  }
  uint64_t v54 = v48;
  uint64_t result = v48 + 8;
  if (v48 + 8 <= v47)
  {
    *(void *)((char *)v53 + v48) = *(void *)(a1 + 384);
    return v54 + 8;
  }
  return result;
}

size_t DecodeDYMTLDepthStencilDescriptor(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v7 = *(unsigned char *)(a1 + 8);
  uint64_t v8 = (const char *)(a1 + 24);
  char v9 = *(unsigned char *)(a1 + 16);
  size_t result = strlen((const char *)(a1 + 24));
  size_t v11 = result;
  int v12 = *(unsigned __int8 *)(a1 + 24);
  if (*(unsigned char *)(a1 + 24)) {
    uint64_t v13 = v8;
  }
  else {
    uint64_t v13 = 0;
  }
  if (v12)
  {
    size_t result = strlen(v13);
    uint64_t v14 = (void *)(a3 + 416);
    uint64_t v15 = *(void *)(a3 + 416);
    size_t v16 = result + 1;
    if (result != -1)
    {
      uint64_t v17 = *(void **)(a3 + 416);
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v14 = (void *)(a3 + 416);
    uint64_t v15 = *(void *)(a3 + 416);
  }
  size_t v16 = 0;
  uint64_t v17 = 0;
LABEL_9:
  void *v14 = v15 + v16;
  if (a4)
  {
    size_t result = (size_t)memcpy(v17, v13, v16);
    uint64_t v19 = *(void *)&v8[(v11 & 0xFFFFFFFFFFFFFFF8) + 32];
    uint64_t v18 = *(void *)&v8[(v11 & 0xFFFFFFFFFFFFFFF8) + 40];
    uint64_t v21 = *(void *)&v8[(v11 & 0xFFFFFFFFFFFFFFF8) + 16];
    uint64_t v20 = *(void *)&v8[(v11 & 0xFFFFFFFFFFFFFFF8) + 24];
    int32x2_t v22 = vmovn_s64(*(int64x2_t *)&v8[(v11 & 0xFFFFFFFFFFFFFFF8) + 48]);
    uint64_t v24 = *(void *)&v8[(v11 & 0xFFFFFFFFFFFFFFF8) + 88];
    uint64_t v23 = *(void *)&v8[(v11 & 0xFFFFFFFFFFFFFFF8) + 96];
    uint64_t v26 = *(void *)&v8[(v11 & 0xFFFFFFFFFFFFFFF8) + 72];
    uint64_t v25 = *(void *)&v8[(v11 & 0xFFFFFFFFFFFFFFF8) + 80];
    uint64_t v27 = *(void *)(a3 + 200);
    int32x2_t v28 = vmovn_s64(*(int64x2_t *)&v8[(v11 & 0xFFFFFFFFFFFFFFF8) + 104]);
    *(void *)(a3 + 20mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v27 + 48;
    *(int32x2_t *)uint64_t v27 = v28;
    *(unsigned char *)(v27 + 8) = v24;
    *(unsigned char *)(v27 + 9) = v23;
    *(unsigned char *)(v27 + 1mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v26;
    *(unsigned char *)(v27 + 11) = v25;
    *(_DWORD *)(v27 + 12) = 0;
    *(int32x2_t *)(v27 + 16) = v22;
    *(unsigned char *)(v27 + 24) = v19;
    *(unsigned char *)(v27 + 25) = v18;
    *(unsigned char *)(v27 + 26) = v21;
    *(unsigned char *)(v27 + 27) = v20;
    *(_DWORD *)(v27 + 28) = 0;
    *(void *)(v27 + 32) = v17;
    *(unsigned char *)(v27 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v7;
    *(unsigned char *)(v27 + 41) = v9;
    *(_WORD *)(v27 + 46) = 0;
    *(_DWORD *)(v27 + 42) = 0;
  }
  else
  {
    *(void *)(a3 + 200) += 48;
  }
  return result;
}

uint64_t EncodeDYMTLDepthStencilDescriptor(uint64_t a1, void *a2, unint64_t a3)
{
  int v5 = a2;
  unint64_t v7 = a3;
  if (a3 >= 8)
  {
    *a2 = 81;
    if (a3 >= 0x10)
    {
      a2[1] = *(unsigned __int8 *)(a1 + 40);
      if (a3 >= 0x18) {
        a2[2] = *(unsigned __int8 *)(a1 + 41);
      }
    }
  }
  uint64_t v6 = 24;
  WriteDynamicBufferString(&v5, *(const char **)(a1 + 32));
  SaveDYMTLStencilDescriptor(&v5, (unsigned int *)(a1 + 16));
  SaveDYMTLStencilDescriptor(&v5, (unsigned int *)a1);
  return v6;
}

void *SaveDYMTLStencilDescriptor(void *result, unsigned int *a2)
{
  uint64_t v3 = result[1];
  unint64_t v2 = result[2];
  uint64_t v4 = v3 + 8;
  if (v3 + 8 <= v2)
  {
    *(void *)(*result + v3) = 0;
    unint64_t v2 = result[2];
    uint64_t v4 = result[1] + 8;
  }
  result[1] = v4;
  uint64_t v5 = v4 + 8;
  if (v4 + 8 <= v2)
  {
    *(void *)(*result + v4) = *((unsigned __int8 *)a2 + 10);
    unint64_t v2 = result[2];
    uint64_t v5 = result[1] + 8;
  }
  result[1] = v5;
  uint64_t v6 = v5 + 8;
  if (v5 + 8 <= v2)
  {
    *(void *)(*result + v5) = *((unsigned __int8 *)a2 + 11);
    unint64_t v2 = result[2];
    uint64_t v6 = result[1] + 8;
  }
  result[1] = v6;
  uint64_t v7 = v6 + 8;
  if (v6 + 8 <= v2)
  {
    *(void *)(*result + v6) = *((unsigned __int8 *)a2 + 8);
    unint64_t v2 = result[2];
    uint64_t v7 = result[1] + 8;
  }
  result[1] = v7;
  uint64_t v8 = v7 + 8;
  if (v7 + 8 <= v2)
  {
    *(void *)(*result + v7) = *((unsigned __int8 *)a2 + 9);
    unint64_t v2 = result[2];
    uint64_t v8 = result[1] + 8;
  }
  result[1] = v8;
  uint64_t v9 = v8 + 8;
  if (v8 + 8 <= v2)
  {
    *(void *)(*result + v8) = *a2;
    unint64_t v2 = result[2];
    uint64_t v9 = result[1] + 8;
  }
  result[1] = v9;
  uint64_t v10 = v9 + 8;
  if (v9 + 8 <= v2)
  {
    *(void *)(*result + v9) = a2[1];
    uint64_t v10 = result[1] + 8;
  }
  result[1] = v10;
  return result;
}

uint64_t DecodeDYMTLSamplerDescriptor(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unsigned int v7 = *(_DWORD *)a1;
  char v33 = *(unsigned char *)(a1 + 16);
  char v34 = *(unsigned char *)(a1 + 24);
  char v35 = *(unsigned char *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 32);
  char v36 = *(unsigned char *)(a1 + 40);
  char v37 = *(unsigned char *)(a1 + 48);
  char v9 = *(unsigned char *)(a1 + 56);
  char v10 = *(unsigned char *)(a1 + 64);
  int v11 = *(_DWORD *)(a1 + 72);
  int v12 = (const char *)(a1 + 88);
  int v13 = *(_DWORD *)(a1 + 80);
  size_t v14 = strlen((const char *)(a1 + 88));
  if (*(unsigned char *)(a1 + 88)) {
    uint64_t v15 = v12;
  }
  else {
    uint64_t v15 = 0;
  }
  if (*(unsigned char *)(a1 + 88))
  {
    size_t v16 = strlen(v15);
    uint64_t v17 = (void *)(a3 + 416);
    uint64_t v18 = *(void *)(a3 + 416);
    size_t v19 = v16 + 1;
    if (v16 != -1)
    {
      uint64_t v20 = *(void **)(a3 + 416);
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v17 = (void *)(a3 + 416);
    uint64_t v18 = *(void *)(a3 + 416);
  }
  size_t v19 = 0;
  uint64_t v20 = 0;
LABEL_9:
  *uint64_t v17 = v18 + v19;
  if (a4) {
    memcpy(v20, v15, v19);
  }
  int32x4_t v21 = 0uLL;
  if (v7 < 2)
  {
    char v29 = 0;
    int v24 = 0;
    int v27 = 0;
    uint64_t v26 = 0;
    int v22 = 0;
LABEL_22:
    char v23 = 0;
LABEL_23:
    int v25 = 0;
LABEL_24:
    char v28 = 0;
    goto LABEL_25;
  }
  int v22 = v12[(v14 & 0xFFFFFFFFFFFFFFF8) + 8];
  if (v7 < 8)
  {
    char v29 = 0;
    int v24 = 0;
    int v27 = 0;
    uint64_t v26 = 0;
    goto LABEL_22;
  }
  char v23 = v12[(v14 & 0xFFFFFFFFFFFFFFF8) + 16];
  if (v7 < 0xA)
  {
    char v29 = 0;
    int v24 = 0;
LABEL_41:
    int v27 = 0;
    uint64_t v26 = 0;
    goto LABEL_23;
  }
  int v24 = v12[(v14 & 0xFFFFFFFFFFFFFFF8) + 24];
  if (v7 < 0x11)
  {
    char v29 = 0;
    goto LABEL_41;
  }
  int v25 = v12[(v14 & 0xFFFFFFFFFFFFFFF8) + 32];
  if (v7 < 0x16)
  {
    char v29 = 0;
    int v27 = 0;
    uint64_t v26 = 0;
    goto LABEL_24;
  }
  uint64_t v26 = *(void *)&v12[(v14 & 0xFFFFFFFFFFFFFFF8) + 40];
  int v27 = v12[(v14 & 0xFFFFFFFFFFFFFFF8) + 48];
  if (v7 < 0x1C)
  {
    char v29 = 0;
    goto LABEL_24;
  }
  char v28 = v12[(v14 & 0xFFFFFFFFFFFFFFF8) + 56];
  if (v7 < 0x27)
  {
    char v29 = 0;
  }
  else
  {
    int v24 = v12[(v14 & 0xFFFFFFFFFFFFFFF8) + 64];
    int32x4_t v21 = vuzp1q_s32(*(int32x4_t *)&v12[(v14 & 0xFFFFFFFFFFFFFFF8) + 72], *(int32x4_t *)&v12[(v14 & 0xFFFFFFFFFFFFFFF8) + 88]);
    char v29 = v12[(v14 & 0xFFFFFFFFFFFFFFF8) + 104];
    if (v7 >= 0x2A)
    {
      __int16 v30 = *(_WORD *)&v12[(v14 & 0xFFFFFFFFFFFFFFF8) + 112];
      goto LABEL_26;
    }
  }
LABEL_25:
  __int16 v30 = 0;
LABEL_26:
  uint64_t v31 = *(void *)(a3 + 192);
  uint64_t result = v31 + 64;
  *(void *)(a3 + 192) = v31 + 64;
  if (a4)
  {
    if (v27 == 255) {
      LOBYTE(v27) = 0;
    }
    *(void *)uint64_t v31 = v20;
    *(void *)(v31 + 8) = v8;
    if (v26 == -1) {
      uint64_t v26 = 0;
    }
    *(void *)(v31 + 16) = v26;
    if (v25 == 255) {
      LOBYTE(v25) = 0;
    }
    *(int32x4_t *)(v31 + 24) = v21;
    if (v24 == 255) {
      LOBYTE(v24) = 0;
    }
    if (v22 == 255) {
      LOBYTE(v22) = 0;
    }
    *(_DWORD *)(v31 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v13;
    *(_DWORD *)(v31 + 44) = v11;
    *(_WORD *)(v31 + 48) = v30;
    *(unsigned char *)(v31 + 5mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v24;
    *(unsigned char *)(v31 + 51) = v23;
    *(unsigned char *)(v31 + 52) = v27;
    *(unsigned char *)(v31 + 53) = v29;
    *(unsigned char *)(v31 + 54) = v22;
    *(unsigned char *)(v31 + 55) = v33;
    *(unsigned char *)(v31 + 56) = v35;
    *(unsigned char *)(v31 + 57) = v34;
    *(unsigned char *)(v31 + 58) = v10;
    *(unsigned char *)(v31 + 59) = v9;
    *(unsigned char *)(v31 + 6mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v28;
    *(unsigned char *)(v31 + 61) = v36;
    *(unsigned char *)(v31 + 62) = v25;
    *(unsigned char *)(v31 + 63) = v37;
  }
  return result;
}

uint64_t EncodeDYMTLSamplerDescriptor(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v24 = a2;
  unint64_t v26 = a3;
  if (a3 <= 7)
  {
    uint64_t v25 = 8;
LABEL_9:
    uint64_t v25 = 56;
    goto LABEL_10;
  }
  *(void *)a2 = 81;
  uint64_t v25 = 8;
  if (a3 < 0x10) {
    goto LABEL_9;
  }
  *(void *)(a2 + 8) = *(unsigned __int8 *)(a1 + 56);
  if (a3 < 0x18) {
    goto LABEL_9;
  }
  *(void *)(a2 + 16) = *(unsigned __int8 *)(a1 + 55);
  if (a3 < 0x20) {
    goto LABEL_9;
  }
  *(void *)(a2 + 24) = *(unsigned __int8 *)(a1 + 57);
  if (a3 < 0x28) {
    goto LABEL_9;
  }
  *(void *)(a2 + 32) = *(void *)(a1 + 8);
  if (a3 < 0x30) {
    goto LABEL_9;
  }
  *(void *)(a2 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *(unsigned __int8 *)(a1 + 61);
  if (a3 <= 0x37) {
    goto LABEL_9;
  }
  *(void *)(a2 + 48) = *(unsigned __int8 *)(a1 + 63);
  uint64_t v25 = 56;
  if (a3 >= 0x40)
  {
    *(void *)(a2 + 56) = *(unsigned __int8 *)(a1 + 59);
    if (a3 >= 0x48)
    {
      *(void *)(a2 + 64) = *(unsigned __int8 *)(a1 + 58);
      if (a3 >= 0x4C)
      {
        *(_DWORD *)(a2 + 72) = *(_DWORD *)(a1 + 44);
        if (a3 >= 0x4D)
        {
          int32x4_t v21 = (void *)(a2 + 76);
          size_t v22 = a3 - 76 >= 4 ? 4 : a3 - 76;
          bzero(v21, v22);
          if (a3 >= 0x54)
          {
            *(_DWORD *)(a2 + 8mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *(_DWORD *)(a1 + 40);
            if (a3 >= 0x55)
            {
              if (a3 - 84 >= 4) {
                size_t v23 = 4;
              }
              else {
                size_t v23 = a3 - 84;
              }
              bzero((void *)(a2 + 84), v23);
            }
          }
        }
      }
    }
  }
LABEL_10:
  uint64_t v25 = 88;
  WriteDynamicBufferString(&v24, *(const char **)a1);
  unint64_t v6 = v26;
  uint64_t v7 = v25 + 8;
  if (v25 + 8 <= v26)
  {
    *(void *)(v24 + v25) = *(unsigned __int8 *)(a1 + 54);
    unint64_t v6 = v26;
    uint64_t v7 = v25 + 8;
  }
  uint64_t v25 = v7;
  uint64_t v8 = v7 + 8;
  if (v7 + 8 <= v6)
  {
    *(void *)(v24 + v7) = *(unsigned __int8 *)(a1 + 51);
    unint64_t v6 = v26;
    uint64_t v8 = v25 + 8;
  }
  uint64_t v25 = v8;
  uint64_t v9 = v8 + 8;
  if (v8 + 8 <= v6)
  {
    *(void *)(v24 + v8) = *(unsigned __int8 *)(a1 + 50);
    unint64_t v6 = v26;
    uint64_t v9 = v25 + 8;
  }
  uint64_t v25 = v9;
  uint64_t v10 = v9 + 8;
  if (v9 + 8 <= v6)
  {
    *(void *)(v24 + v9) = *(unsigned __int8 *)(a1 + 62);
    unint64_t v6 = v26;
    uint64_t v10 = v25 + 8;
  }
  uint64_t v25 = v10;
  uint64_t v11 = v10 + 8;
  if (v10 + 8 <= v6)
  {
    *(void *)(v24 + v1mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *(void *)(a1 + 16);
    unint64_t v6 = v26;
    uint64_t v11 = v25 + 8;
  }
  uint64_t v25 = v11;
  uint64_t v12 = v11 + 8;
  if (v11 + 8 <= v6)
  {
    *(void *)(v24 + v11) = *(unsigned __int8 *)(a1 + 52);
    unint64_t v6 = v26;
    uint64_t v12 = v25 + 8;
  }
  uint64_t v25 = v12;
  uint64_t v13 = v12 + 8;
  if (v12 + 8 <= v6)
  {
    *(void *)(v24 + v12) = *(unsigned __int8 *)(a1 + 60);
    unint64_t v6 = v26;
    uint64_t v13 = v25 + 8;
  }
  uint64_t v25 = v13;
  uint64_t v14 = v13 + 8;
  if (v13 + 8 <= v6)
  {
    *(void *)(v24 + v13) = *(unsigned __int8 *)(a1 + 50);
    unint64_t v6 = v26;
    uint64_t v14 = v25 + 8;
  }
  uint64_t v25 = v14;
  uint64_t v15 = v14 + 8;
  if (v14 + 8 <= v6)
  {
    *(void *)(v24 + v14) = *(unsigned int *)(a1 + 24);
    unint64_t v6 = v26;
    uint64_t v15 = v25 + 8;
  }
  uint64_t v25 = v15;
  uint64_t v16 = v15 + 8;
  if (v15 + 8 <= v6)
  {
    *(void *)(v24 + v15) = *(unsigned int *)(a1 + 28);
    unint64_t v6 = v26;
    uint64_t v16 = v25 + 8;
  }
  uint64_t v25 = v16;
  uint64_t v17 = v16 + 8;
  if (v16 + 8 <= v6)
  {
    *(void *)(v24 + v16) = *(unsigned int *)(a1 + 32);
    unint64_t v6 = v26;
    uint64_t v17 = v25 + 8;
  }
  uint64_t v25 = v17;
  uint64_t v18 = v17 + 8;
  if (v17 + 8 <= v6)
  {
    *(void *)(v24 + v17) = *(unsigned int *)(a1 + 36);
    unint64_t v6 = v26;
    uint64_t v18 = v25 + 8;
  }
  uint64_t v25 = v18;
  uint64_t v19 = v18 + 8;
  if (v18 + 8 <= v6)
  {
    *(void *)(v24 + v18) = *(unsigned __int8 *)(a1 + 53);
    unint64_t v6 = v26;
    uint64_t v19 = v25 + 8;
  }
  uint64_t v25 = v19;
  uint64_t result = v19 + 8;
  if (v19 + 8 <= v6)
  {
    *(void *)(v24 + v19) = *(unsigned __int16 *)(a1 + 48);
    return v25 + 8;
  }
  return result;
}

uint64_t DecodeDYMTLHeapDescriptor(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = *(void *)(a3 + 184);
  *(void *)(a3 + 184) = v4 + 24;
  if (a4)
  {
    *(_OWORD *)uint64_t v4 = GTMTLHeapDescriptorDefaults;
    *(void *)(v4 + 16) = 32;
    unsigned int v5 = *(_DWORD *)result;
    *(void *)(v4 + 8) = *(void *)(result + 8);
    *(unsigned char *)(v4 + 19) = *(void *)(result + 32);
    *(_WORD *)(v4 + 16) = *(void *)(result + 56);
    if (v5 >= 0x2A)
    {
      *(unsigned char *)(v4 + 18) = *(void *)(result + 64);
      if (v5 >= 0x34) {
        *(void *)uint64_t v4 = *(void *)(result + 72);
      }
    }
  }
  return result;
}

uint64_t EncodeDYMTLHeapDescriptor(uint64_t a1, void *a2, unint64_t a3)
{
  if (a3 >= 8)
  {
    *a2 = 81;
    if (a3 >= 0x10)
    {
      a2[1] = *(void *)(a1 + 8);
      if (a3 >= 0x18)
      {
        a2[2] = *(_WORD *)(a1 + 16) & 0xF;
        if (a3 >= 0x20)
        {
          a2[3] = *(_WORD *)(a1 + 16) >> 4;
          if (a3 >= 0x28)
          {
            a2[4] = *(unsigned __int8 *)(a1 + 19);
            if (a3 >= 0x30)
            {
              a2[5] = (*(_WORD *)(a1 + 16) & 0x300) == 512;
              if (a3 >= 0x38)
              {
                a2[6] = ((unint64_t)*(unsigned __int16 *)(a1 + 16) >> 8) & 3;
                if (a3 >= 0x40)
                {
                  a2[7] = *(unsigned __int16 *)(a1 + 16);
                  if (a3 >= 0x48)
                  {
                    a2[8] = *(unsigned __int8 *)(a1 + 18);
                    if (a3 >= 0x50) {
                      a2[9] = *(void *)a1;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return 80;
}

uint64_t DecodeDYMTLIndirectCommandBufferDescriptor(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = *(void *)(a3 + 176);
  *(void *)(a3 + 176) = v4 + 24;
  if (a4)
  {
    *(void *)uint64_t v4 = 0;
    *(void *)(v4 + 8) = 0;
    *(void *)(v4 + 16) = 0;
    unsigned int v5 = *(_DWORD *)result;
    *(_WORD *)(v4 + 8) = *(void *)(result + 8);
    *(unsigned char *)(v4 + 11) = *(void *)(result + 16);
    *(unsigned char *)(v4 + 1mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *(void *)(result + 24);
    *(unsigned char *)(v4 + 18) = *(void *)(result + 32);
    *(unsigned char *)(v4 + 12) = *(void *)(result + 40);
    if (v5 >= 0x1B)
    {
      *(unsigned char *)(v4 + 13) = *(void *)(result + 48);
      *(unsigned char *)(v4 + 14) = *(void *)(result + 56);
      if (v5 >= 0x29)
      {
        *(void *)uint64_t v4 = *(void *)(result + 64);
        if (v5 >= 0x3C)
        {
          *(unsigned char *)(v4 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *(void *)(result + 72);
          if (v5 >= 0x48)
          {
            *(unsigned char *)(v4 + 16) = *(void *)(result + 80);
            *(unsigned char *)(v4 + 15) = *(void *)(result + 88);
            *(unsigned char *)(v4 + 17) = *(void *)(result + 96);
            if (v5 != 72)
            {
              *(unsigned char *)(v4 + 19) = *(void *)(result + 104);
              if (v5 >= 0x4A) {
                *(unsigned char *)(v4 + 21) = *(void *)(result + 112);
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t EncodeDYMTLIndirectCommandBufferDescriptor(uint64_t a1, void *a2, unint64_t a3)
{
  if (a3 >= 8)
  {
    *a2 = 81;
    if (a3 >= 0x10)
    {
      a2[1] = *(unsigned __int16 *)(a1 + 8);
      if (a3 >= 0x18)
      {
        a2[2] = *(unsigned __int8 *)(a1 + 11);
        if (a3 >= 0x20)
        {
          a2[3] = *(unsigned __int8 *)(a1 + 10);
          if (a3 >= 0x28)
          {
            a2[4] = *(unsigned __int8 *)(a1 + 18);
            if (a3 >= 0x30)
            {
              a2[5] = *(unsigned __int8 *)(a1 + 12);
              if (a3 >= 0x38)
              {
                a2[6] = *(unsigned __int8 *)(a1 + 13);
                if (a3 >= 0x40)
                {
                  a2[7] = *(unsigned __int8 *)(a1 + 14);
                  if (a3 >= 0x48)
                  {
                    a2[8] = *(void *)a1;
                    if (a3 >= 0x50)
                    {
                      a2[9] = *(unsigned __int8 *)(a1 + 20);
                      if (a3 >= 0x58)
                      {
                        a2[10] = *(unsigned __int8 *)(a1 + 16);
                        if (a3 >= 0x60)
                        {
                          a2[11] = *(unsigned __int8 *)(a1 + 15);
                          if (a3 >= 0x68)
                          {
                            a2[12] = *(unsigned __int8 *)(a1 + 17);
                            if (a3 >= 0x70)
                            {
                              a2[13] = *(unsigned __int8 *)(a1 + 19);
                              if (a3 >= 0x78) {
                                a2[14] = *(unsigned __int8 *)(a1 + 21);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return 120;
}

void DecodeDYMTLComputePipelineDescriptor(uint64_t a1, uint64_t a2, void *a3, int a4, uint64_t a5)
{
  v66[1] = a2;
  memcpy(v65, &GTMTLComputePipelineDescriptorDefaults, sizeof(v65));
  unsigned int v9 = *(_DWORD *)a1;
  uint64_t v10 = *(void *)(a1 + 16);
  v65[106] = *(void *)(a1 + 8);
  BYTE6(v65[119]) = v10;
  v66[0] = (strlen((const char *)(a1 + 24)) & 0xFFFFFFFFFFFFFFF8) + a1 + 24 + 8;
  int v11 = *(unsigned __int8 *)(a1 + 24);
  if (*(unsigned char *)(a1 + 24)) {
    uint64_t v12 = (const char *)(a1 + 24);
  }
  else {
    uint64_t v12 = 0;
  }
  if (v11)
  {
    size_t v13 = strlen(v12);
    uint64_t v14 = a3 + 52;
    uint64_t v15 = a3[52];
    size_t v16 = v13 + 1;
    if (v13 != -1)
    {
      uint64_t v17 = (void *)a3[52];
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v14 = a3 + 52;
    uint64_t v15 = a3[52];
  }
  size_t v16 = 0;
  uint64_t v17 = 0;
LABEL_9:
  void *v14 = v15 + v16;
  if (a4) {
    memcpy(v17, v12, v16);
  }
  v65[109] = v17;
  if (v9 < 0xB) {
    goto LABEL_87;
  }
  bzero(__src, 0x2F0uLL);
  uint64_t v18 = (uint64_t *)v66[0];
  if (v9 < 0x1A)
  {
    uint64_t v19 = 31;
  }
  else
  {
    uint64_t v18 = (uint64_t *)(v66[0] + 8);
    uint64_t v19 = *(unsigned int *)v66[0];
    if (!*(_DWORD *)v66[0]) {
      goto LABEL_23;
    }
  }
  uint64_t v20 = &__src[11];
  do
  {
    if (a4)
    {
      uint64_t v22 = v18[1];
      uint64_t v21 = v18[2];
      uint64_t v23 = *v18;
      if (*v18 == 0xFFFFFFFFLL) {
        uint64_t v23 = -1;
      }
      *(void *)(v20 - 11) = v23;
      *(_WORD *)(v20 - 3) = v22;
      *(v20 - 1) = v21;
      *(_DWORD *)uint64_t v20 = 0;
      void v20[4] = 0;
    }
    v18 += 3;
    v20 += 16;
    --v19;
  }
  while (v19);
  v66[0] = v18;
  if (v9 > 0x19)
  {
LABEL_23:
    unsigned int v25 = *(_DWORD *)v18++;
    uint64_t v24 = v25;
    v66[0] = v18;
    if (!v25) {
      goto LABEL_30;
    }
    goto LABEL_26;
  }
  uint64_t v24 = 31;
LABEL_26:
  unint64_t v26 = &__src[502];
  do
  {
    if (a4)
    {
      uint64_t v27 = v18[2];
      uint64_t v28 = *v18;
      *(_DWORD *)(v26 - 3) = v18[1];
      *((unsigned char *)v26 - 2) = v27;
      *((unsigned char *)v26 - 1) = v28;
      _WORD *v26 = 0;
    }
    v18 += 3;
    v26 += 4;
    --v24;
  }
  while (v24);
LABEL_30:
  __src[745] = *v18;
  uint64_t v29 = v18[1];
  __int16 v30 = v18 + 2;
  v66[0] = v18 + 2;
  unsigned char __src[744] = v29;
  if (a4) {
    memcpy(v65, __src, 0x2F0uLL);
  }
  HIBYTE(v65[118]) = -1;
  if (v9 >= 0x12)
  {
    if (v9 < 0x1A)
    {
      uint64_t v31 = 31;
    }
    else
    {
      uint64_t v31 = v18[2];
      __int16 v30 = v18 + 3;
      v66[0] = v18 + 3;
      if ((int)v31 < 1) {
        goto LABEL_39;
      }
      uint64_t v31 = v31;
    }
    uint64_t v32 = &v65[115];
    do
    {
      uint64_t v33 = *v30++;
      *v32++ = v33;
      --v31;
    }
    while (v31);
LABEL_39:
    if (v9 >= 0x1B)
    {
      BYTE4(v65[119]) = *v30;
      if (v9 >= 0x25)
      {
        HIWORD(v65[114]) = v30[1];
        if (v9 != 37)
        {
          v65[110] = v30[2];
          if (v9 >= 0x28)
          {
            uint64_t v34 = v30[3];
            char v35 = v30 + 4;
            v66[0] = v35;
            v65[108] = v34;
            if (v34)
            {
              char v36 = (uint64_t *)a3[50];
              v65[107] = v36;
              do
              {
                uint64_t v38 = *v35++;
                uint64_t v37 = v38;
                if (a4)
                {
                  if (a5)
                  {
                    Stream_11288 = (uint64_t *)GetStream_11288(a5, v37);
                    if (Stream_11288) {
                      uint64_t v37 = *Stream_11288;
                    }
                    else {
                      uint64_t v37 = 0;
                    }
                  }
                  char v36 = (uint64_t *)a3[50];
                  *char v36 = v37;
                }
                a3[50] = ++v36;
                --v34;
              }
              while (v34);
            }
            else
            {
              v65[107] = 0;
            }
            if (v9 >= 0x29)
            {
              v65[113] = *v35;
              if (v9 != 41)
              {
                BYTE5(v65[119]) = v35[1];
                LOWORD(v65[114]) = v35[2];
                BYTE2(v65[119]) = v35[3];
                BYTE1(v65[119]) = v35[4];
                LOBYTE(v65[119]) = v35[5];
                size_t v40 = v35[6];
                uint64_t v41 = v35 + 7;
                unint64_t v42 = (size_t *)((char *)v35 + ((v40 + 7) & 0xFFFFFFFFFFFFFFF8) + 56);
                v66[0] = v42;
                if (v40) {
                  uint64_t v43 = (void *)a3[52];
                }
                else {
                  uint64_t v43 = 0;
                }
                uint64_t v44 = (char *)(a3[52] + v40);
                a3[52] = v44;
                if (a4)
                {
                  if (v40) {
                    uint64_t v45 = v41;
                  }
                  else {
                    uint64_t v45 = 0;
                  }
                  memcpy(v43, v45, v40);
                  uint64_t v44 = (char *)a3[52];
                }
                v65[104] = v43;
                v65[105] = v40;
                size_t v48 = *v42;
                unint64_t v47 = v42 + 1;
                size_t v46 = v48;
                uint64_t v49 = (void *)((char *)v47 + ((v48 + 7) & 0xFFFFFFFFFFFFFFF8));
                v66[0] = v49;
                if (v48) {
                  uint64_t v50 = v44;
                }
                else {
                  uint64_t v50 = 0;
                }
                a3[52] = &v44[v46];
                if (a4)
                {
                  if (v46) {
                    uint64_t v51 = v47;
                  }
                  else {
                    uint64_t v51 = 0;
                  }
                  memcpy(v50, v51, v46);
                }
                v65[102] = v50;
                v65[103] = v46;
                if (v9 >= 0x2D)
                {
                  uint64_t v52 = *v49;
                  v66[0] = v49 + 1;
                  WORD2(v65[114]) = v52;
                  uint64_t v53 = v49[1];
                  v66[0] = v49 + 2;
                  BYTE3(v65[119]) = v53;
                  MakeDYMTLLinkedFunctions((size_t)v66, &v65[94], a3, a4, a5);
                  if (v9 >= 0x30)
                  {
                    uint64_t v54 = (uint64_t *)(v66[0] + 8);
                    uint64_t v55 = *(void *)v66[0];
                    v65[112] = v55;
                    if (v55)
                    {
                      uint64_t v56 = (uint64_t *)a3[50];
                      v65[111] = v56;
                      do
                      {
                        uint64_t v58 = *v54++;
                        uint64_t v57 = v58;
                        if (a4)
                        {
                          if (a5)
                          {
                            uint64_t v59 = (uint64_t *)GetStream_11288(a5, v57);
                            if (v59) {
                              uint64_t v57 = *v59;
                            }
                            else {
                              uint64_t v57 = 0;
                            }
                          }
                          uint64_t v56 = (uint64_t *)a3[50];
                          *uint64_t v56 = v57;
                        }
                        a3[50] = ++v56;
                        --v55;
                      }
                      while (v55);
                    }
                    else
                    {
                      v65[111] = 0;
                    }
                    if (v9 >= 0x4B) {
                      WORD1(v65[114]) = *v54;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_87:
  uint64_t v60 = (char *)a3[21];
  a3[21] = v60 + 960;
  if (!a4) {
    return;
  }
  if (a5)
  {
    uint64_t v61 = (uint64_t *)GetStream_11288(a5, v65[106]);
    if (v61) {
      uint64_t v62 = *v61;
    }
    else {
      uint64_t v62 = 0;
    }
    v65[106] = v62;
    uint64_t v63 = (uint64_t *)GetStream_11288(a5, v65[110]);
    if (!v63)
    {
      uint64_t v64 = 0;
      goto LABEL_96;
    }
  }
  else
  {
    uint64_t v63 = &v65[110];
  }
  uint64_t v64 = *v63;
LABEL_96:
  v65[110] = v64;
  memcpy(v60, v65, 0x3C0uLL);
}

uint64_t EncodeDYMTLComputePipelineDescriptor(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v58 = a2;
  unint64_t v60 = a3;
  if (a3 >= 8) {
    *a2 = 81;
  }
  uint64_t v59 = 8;
  uint64_t v57 = *(void *)(a1 + 848);
  entry = find_entry(a4, &v57, 8uLL, 0);
  if (*entry) {
    uint64_t v7 = *(void *)(*entry + 32);
  }
  else {
    uint64_t v7 = 0;
  }
  unint64_t v8 = v60;
  uint64_t v9 = v59 + 8;
  if (v59 + 8 <= v60)
  {
    *(void *)((char *)v58 + v59) = *(void *)(v7 + 8);
    unint64_t v8 = v60;
    uint64_t v9 = v59 + 8;
  }
  uint64_t v59 = v9;
  uint64_t v10 = v9 + 8;
  if (v9 + 8 <= v8)
  {
    *(void *)((char *)v58 + v9) = *(unsigned __int8 *)(a1 + 958);
    uint64_t v10 = v59 + 8;
  }
  uint64_t v59 = v10;
  WriteDynamicBufferString(&v58, *(const char **)(a1 + 872));
  uint64_t v11 = v59 + 8;
  if (!*(unsigned char *)(a1 + 951))
  {
    if (v59 + 8 > v60) {
      goto LABEL_38;
    }
    *(void *)((char *)v58 + v59) = -1;
    goto LABEL_37;
  }
  if (v59 + 8 <= v60)
  {
    *(void *)((char *)v58 + v59) = 31;
    uint64_t v11 = v59 + 8;
  }
  uint64_t v12 = 0;
  uint64_t v59 = v11;
  do
  {
    uint64_t v13 = v11 + 8;
    unint64_t v14 = v60;
    if (v11 + 8 <= v60)
    {
      *(void *)((char *)v58 + v11) = *(void *)(a1 + v12);
      unint64_t v14 = v60;
      uint64_t v13 = v59 + 8;
    }
    uint64_t v59 = v13;
    uint64_t v15 = v13 + 8;
    if (v13 + 8 <= v14)
    {
      *(void *)((char *)v58 + v13) = *(unsigned __int16 *)(a1 + v12 + 8);
      unint64_t v14 = v60;
      uint64_t v15 = v59 + 8;
    }
    uint64_t v59 = v15;
    uint64_t v11 = v15 + 8;
    if (v15 + 8 <= v14)
    {
      *(void *)((char *)v58 + v15) = *(unsigned __int8 *)(a1 + v12 + 10);
      uint64_t v11 = v59 + 8;
    }
    uint64_t v59 = v11;
    v12 += 16;
  }
  while (v12 != 496);
  uint64_t v16 = v11 + 8;
  if (v11 + 8 <= v60)
  {
    *(void *)((char *)v58 + v11) = 31;
    uint64_t v16 = v59 + 8;
  }
  uint64_t v17 = 0;
  uint64_t v59 = v16;
  do
  {
    uint64_t v18 = a1 + v17;
    uint64_t v19 = v16 + 8;
    unint64_t v20 = v60;
    if (v16 + 8 <= v60)
    {
      *(void *)((char *)v58 + v16) = *(unsigned __int8 *)(v18 + 501);
      unint64_t v20 = v60;
      uint64_t v19 = v59 + 8;
    }
    uint64_t v59 = v19;
    uint64_t v21 = v19 + 8;
    if (v19 + 8 <= v20)
    {
      *(void *)((char *)v58 + v19) = *(unsigned int *)(v18 + 496);
      unint64_t v20 = v60;
      uint64_t v21 = v59 + 8;
    }
    uint64_t v59 = v21;
    uint64_t v16 = v21 + 8;
    if (v21 + 8 <= v20)
    {
      *(void *)((char *)v58 + v21) = *(unsigned __int8 *)(a1 + v17 + 500);
      uint64_t v16 = v59 + 8;
    }
    uint64_t v59 = v16;
    v17 += 8;
  }
  while (v17 != 248);
  uint64_t v22 = v16 + 8;
  unint64_t v23 = v60;
  if (v16 + 8 <= v60)
  {
    *(void *)((char *)v58 + v16) = *(unsigned __int8 *)(a1 + 745);
    unint64_t v23 = v60;
    uint64_t v22 = v59 + 8;
  }
  uint64_t v59 = v22;
  uint64_t v11 = v22 + 8;
  if (v22 + 8 <= v23)
  {
    *(void *)((char *)v58 + v22) = *(unsigned __int8 *)(a1 + 744);
LABEL_37:
    uint64_t v11 = v59 + 8;
  }
LABEL_38:
  uint64_t v59 = v11;
  uint64_t v24 = v11 + 8;
  if (v11 + 8 <= v60)
  {
    *(void *)((char *)v58 + v11) = 31;
    uint64_t v24 = v59 + 8;
  }
  uint64_t v25 = 0;
  uint64_t v59 = v24;
  do
  {
    uint64_t v26 = v24 + 8;
    if (v24 + 8 <= v60)
    {
      *(void *)((char *)v58 + v24) = *(unsigned __int8 *)(a1 + 920 + v25);
      uint64_t v26 = v59 + 8;
    }
    uint64_t v59 = v26;
    ++v25;
    uint64_t v24 = v26;
  }
  while (v25 != 31);
  uint64_t v27 = v26 + 8;
  unint64_t v28 = v60;
  if (v26 + 8 <= v60)
  {
    *(void *)((char *)v58 + v26) = *(unsigned __int8 *)(a1 + 956);
    unint64_t v28 = v60;
    uint64_t v27 = v59 + 8;
  }
  uint64_t v59 = v27;
  uint64_t v29 = v27 + 8;
  if (v27 + 8 <= v28)
  {
    *(void *)((char *)v58 + v27) = *(unsigned __int16 *)(a1 + 918);
    uint64_t v29 = v59 + 8;
  }
  uint64_t v59 = v29;
  uint64_t v56 = *(void *)(a1 + 880);
  __int16 v30 = find_entry(a4, &v56, 8uLL, 0);
  if (*v30) {
    uint64_t v31 = *(void *)(*v30 + 32);
  }
  else {
    uint64_t v31 = 0;
  }
  unint64_t v32 = v60;
  uint64_t v33 = v59 + 8;
  if (v59 + 8 <= v60)
  {
    *(void *)((char *)v58 + v59) = *(void *)(v31 + 8);
    unint64_t v32 = v60;
    uint64_t v33 = v59 + 8;
  }
  uint64_t v59 = v33;
  uint64_t v34 = *(void *)(a1 + 864);
  uint64_t v35 = v33 + 8;
  if (v33 + 8 <= v32)
  {
    *(void *)((char *)v58 + v33) = v34;
    uint64_t v35 = v59 + 8;
    uint64_t v34 = *(void *)(a1 + 864);
  }
  uint64_t v59 = v35;
  if (v34)
  {
    unint64_t v36 = 0;
    do
    {
      uint64_t v55 = *(void *)(*(void *)(a1 + 856) + 8 * v36);
      uint64_t v37 = *find_entry(a4, &v55, 8uLL, 0);
      if (v37) {
        uint64_t v37 = *(void *)(v37 + 32);
      }
      uint64_t v35 = v59 + 8;
      if (v59 + 8 <= v60)
      {
        *(void *)((char *)v58 + v59) = *(void *)(v37 + 8);
        uint64_t v35 = v59 + 8;
      }
      uint64_t v59 = v35;
      ++v36;
    }
    while (*(void *)(a1 + 864) > v36);
  }
  uint64_t v38 = v35 + 8;
  unint64_t v39 = v60;
  if (v35 + 8 <= v60)
  {
    *(void *)((char *)v58 + v35) = *(void *)(a1 + 904);
    unint64_t v39 = v60;
    uint64_t v38 = v59 + 8;
  }
  uint64_t v59 = v38;
  uint64_t v40 = v38 + 8;
  if (v38 + 8 <= v39)
  {
    *(void *)((char *)v58 + v38) = *(unsigned __int8 *)(a1 + 957);
    unint64_t v39 = v60;
    uint64_t v40 = v59 + 8;
  }
  uint64_t v59 = v40;
  uint64_t v41 = v40 + 8;
  if (v40 + 8 <= v39)
  {
    *(void *)((char *)v58 + v4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *(unsigned __int16 *)(a1 + 912);
    unint64_t v39 = v60;
    uint64_t v41 = v59 + 8;
  }
  uint64_t v59 = v41;
  uint64_t v42 = v41 + 8;
  if (v41 + 8 <= v39)
  {
    *(void *)((char *)v58 + v41) = *(unsigned __int8 *)(a1 + 954);
    unint64_t v39 = v60;
    uint64_t v42 = v59 + 8;
  }
  uint64_t v59 = v42;
  uint64_t v43 = v42 + 8;
  if (v42 + 8 <= v39)
  {
    *(void *)((char *)v58 + v42) = *(unsigned __int8 *)(a1 + 953);
    unint64_t v39 = v60;
    uint64_t v43 = v59 + 8;
  }
  uint64_t v59 = v43;
  uint64_t v44 = v43 + 8;
  if (v43 + 8 <= v39)
  {
    *(void *)((char *)v58 + v43) = *(unsigned __int8 *)(a1 + 952);
    uint64_t v44 = v59 + 8;
  }
  uint64_t v59 = v44;
  WriteGTData(&v58, *(const void **)(a1 + 832), *(void *)(a1 + 840));
  WriteGTData(&v58, *(const void **)(a1 + 816), *(void *)(a1 + 824));
  unint64_t v45 = v60;
  uint64_t v46 = v59 + 8;
  if (v59 + 8 <= v60)
  {
    *(void *)((char *)v58 + v59) = *(unsigned __int16 *)(a1 + 916);
    unint64_t v45 = v60;
    uint64_t v46 = v59 + 8;
  }
  uint64_t v59 = v46;
  uint64_t v47 = v46 + 8;
  if (v46 + 8 <= v45)
  {
    *(void *)((char *)v58 + v46) = *(unsigned __int8 *)(a1 + 955);
    uint64_t v47 = v59 + 8;
  }
  uint64_t v59 = v47;
  SaveDYMTLLinkedFunctions(&v58, a1 + 752, a4);
  uint64_t v48 = *(void *)(a1 + 896);
  uint64_t v49 = v59 + 8;
  if (v59 + 8 <= v60)
  {
    *(void *)((char *)v58 + v59) = v48;
    uint64_t v49 = v59 + 8;
    uint64_t v48 = *(void *)(a1 + 896);
  }
  uint64_t v59 = v49;
  if (v48)
  {
    unint64_t v50 = 0;
    do
    {
      uint64_t v54 = *(void *)(*(void *)(a1 + 888) + 8 * v50);
      uint64_t v51 = find_entry(a4, &v54, 8uLL, 0);
      if (*v51) {
        uint64_t v52 = *(void *)(*v51 + 32);
      }
      else {
        uint64_t v52 = 0;
      }
      uint64_t v49 = v59 + 8;
      if (v59 + 8 <= v60)
      {
        *(void *)((char *)v58 + v59) = *(void *)(v52 + 8);
        uint64_t v49 = v59 + 8;
      }
      uint64_t v59 = v49;
      ++v50;
    }
    while (*(void *)(a1 + 896) > v50);
  }
  uint64_t result = v49 + 8;
  if (v49 + 8 <= v60)
  {
    *(void *)((char *)v58 + v49) = *(unsigned __int16 *)(a1 + 914);
    return v59 + 8;
  }
  return result;
}

double DecodeDYMTLTileRenderPipelineDescriptor(uint64_t a1, uint64_t a2, void *a3, int a4, uint64_t a5)
{
  v59[1] = a2;
  long long v56 = xmmword_1DF928;
  long long v57 = unk_1DF938;
  long long v58 = xmmword_1DF948;
  long long v52 = xmmword_1DF8E8;
  long long v53 = unk_1DF8F8;
  long long v54 = xmmword_1DF908;
  long long v55 = unk_1DF918;
  long long v48 = GTMTLTileRenderPipelineDescriptorDefaults;
  long long v49 = unk_1DF8B8;
  long long v50 = xmmword_1DF8C8;
  long long v51 = unk_1DF8D8;
  uint64_t v9 = (const char *)(a1 + 8);
  unsigned int v10 = *(_DWORD *)a1;
  v59[0] = (strlen((const char *)(a1 + 8)) & 0xFFFFFFFFFFFFFFF8) + a1 + 8 + 8;
  int v12 = *(unsigned __int8 *)(a1 + 8);
  if (*(unsigned char *)(a1 + 8)) {
    uint64_t v13 = v9;
  }
  else {
    uint64_t v13 = 0;
  }
  if (v12)
  {
    size_t v14 = strlen(v13);
    uint64_t v15 = a3 + 52;
    uint64_t v16 = a3[52];
    size_t v17 = v14 + 1;
    if (v14 != -1)
    {
      uint64_t v18 = (void *)a3[52];
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v15 = a3 + 52;
    uint64_t v16 = a3[52];
  }
  size_t v17 = 0;
  uint64_t v18 = 0;
LABEL_9:
  *uint64_t v15 = v16 + v17;
  if (a4) {
    memcpy(v18, v13, v17);
  }
  uint64_t v19 = *(void *)v59[0];
  uint64_t v20 = *(void *)(v59[0] + 8);
  *(void *)&long long v54 = v18;
  *((void *)&v55 + 1) = v19;
  WORD3(v56) = v20;
  uint64_t v21 = *(void *)(v59[0] + 16);
  uint64_t v22 = (void *)(v59[0] + 24);
  if (v21)
  {
    unint64_t v23 = &v52;
    do
    {
      if (a4) {
        *(_WORD *)unint64_t v23 = *v22;
      }
      ++v22;
      unint64_t v23 = (long long *)((char *)v23 + 2);
      --v21;
    }
    while (v21);
  }
  BYTE9(v58) = *v22;
  uint64_t v24 = v22[1];
  uint64_t v25 = v22 + 2;
  v59[0] = v25;
  if (v24)
  {
    uint64_t v26 = (char *)&v56 + 8;
    do
    {
      if (a4) {
        unsigned char *v26 = *v25;
      }
      ++v25;
      ++v26;
      --v24;
    }
    while (v24);
  }
  if (v10 > 0x2D)
  {
    size_t v29 = *v25;
    uint64_t v27 = v25 + 1;
    size_t v28 = v29;
    __int16 v30 = (void *)((char *)v27 + ((v29 + 7) & 0xFFFFFFFFFFFFFFF8));
    v59[0] = v30;
    if (v29) {
      uint64_t v31 = (void *)a3[52];
    }
    else {
      uint64_t v31 = 0;
    }
    a3[52] += v28;
    if (a4)
    {
      if (v28) {
        unint64_t v32 = v27;
      }
      else {
        unint64_t v32 = 0;
      }
      memcpy(v31, v32, v28);
    }
    *(void *)&long long v53 = v31;
    *((void *)&v53 + 1) = v28;
    if (v10 >= 0x33)
    {
      uint64_t v35 = *v30;
      uint64_t v34 = v30 + 1;
      uint64_t v33 = v35;
      v59[0] = v34;
      *(void *)&long long v55 = v35;
      if (v35)
      {
        unint64_t v36 = (uint64_t *)a3[50];
        *((void *)&v54 + 1) = v36;
        do
        {
          uint64_t v38 = *v34++;
          uint64_t v37 = v38;
          if (a4)
          {
            if (a5)
            {
              Stream_11288 = (uint64_t *)GetStream_11288(a5, v37);
              if (Stream_11288) {
                uint64_t v37 = *Stream_11288;
              }
              else {
                uint64_t v37 = 0;
              }
            }
            unint64_t v36 = (uint64_t *)a3[50];
            *unint64_t v36 = v37;
          }
          a3[50] = ++v36;
          --v33;
        }
        while (v33);
        v59[0] = v34;
      }
      else
      {
        *((void *)&v54 + 1) = 0;
      }
      if (v10 >= 0x37)
      {
        MakeDYMTLLinkedFunctions((size_t)v59, &v48, a3, a4, a5);
        if (v10 >= 0x42)
        {
          BYTE8(v58) = *(void *)v59[0];
          if (v10 >= 0x45)
          {
            WORD1(v56) = *(void *)(v59[0] + 8);
            if (v10 >= 0x4B) {
              LOWORD(v56) = *(void *)(v59[0] + 16);
            }
          }
        }
      }
    }
  }
  uint64_t v40 = (long long *)a3[20];
  a3[20] = v40 + 11;
  if (a4)
  {
    uint64_t v41 = *((void *)&v55 + 1);
    if (a5)
    {
      uint64_t v42 = (uint64_t *)GetStream_11288(a5, *((uint64_t *)&v55 + 1));
      if (v42) {
        uint64_t v41 = *v42;
      }
      else {
        uint64_t v41 = 0;
      }
    }
    *((void *)&v55 + 1) = v41;
    long long v43 = v57;
    v40[8] = v56;
    v40[9] = v43;
    v40[10] = v58;
    long long v44 = v53;
    void v40[4] = v52;
    v40[5] = v44;
    long long v45 = v49;
    *uint64_t v40 = v48;
    v40[1] = v45;
    long long v46 = v51;
    v40[2] = v50;
    void v40[3] = v46;
    double result = *(double *)&v54;
    long long v47 = v55;
    v40[6] = v54;
    v40[7] = v47;
  }
  return result;
}

uint64_t EncodeDYMTLTileRenderPipelineDescriptor(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  __int16 v30 = a2;
  unint64_t v32 = a3;
  if (a3 >= 8) {
    *a2 = 81;
  }
  uint64_t v31 = 8;
  WriteDynamicBufferString(&v30, *(const char **)(a1 + 96));
  uint64_t v29 = *(void *)(a1 + 120);
  entry = find_entry(a4, &v29, 8uLL, 0);
  if (*entry) {
    uint64_t v7 = *(void *)(*entry + 32);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v9 = v31;
  unint64_t v8 = v32;
  uint64_t v10 = v31 + 8;
  if (v31 + 8 <= v32) {
    *(void *)((char *)v30 + v31) = *(void *)(v7 + 8);
  }
  if (v9 + 16 <= v8) {
    *(void *)((char *)v30 + v1mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *(unsigned __int16 *)(a1 + 134);
  }
  uint64_t v31 = v9 + 16;
  if (v9 + 24 <= v8) {
    *(void *)((char *)v30 + v9 + 16) = 8;
  }
  uint64_t v11 = 0;
  uint64_t v12 = 64;
  do
  {
    if (v9 + v11 + 32 <= v8) {
      *(void *)((char *)v30 + v9 + v11 + 24) = *(unsigned __int16 *)(a1 + v12);
    }
    v11 += 8;
    v12 += 2;
  }
  while (v11 != 64);
  uint64_t v13 = v9 + 64;
  uint64_t v14 = v9 + 80;
  uint64_t v15 = v14 + 16;
  if (v14 + 16 <= v8) {
    *(void *)((char *)v30 + v13 + 24) = *(unsigned __int8 *)(a1 + 169);
  }
  unint64_t v16 = v14 + 24;
  if (v16 <= v8) {
    *(void *)((char *)v30 + v15) = 31;
  }
  for (uint64_t i = 136; i != 167; ++i)
  {
    if (v16 + 8 <= v8) {
      *(void *)((char *)v30 + v16) = *(unsigned __int8 *)(a1 + i);
    }
    uint64_t v31 = v16 + 8;
    v16 += 8;
  }
  WriteGTData(&v30, *(const void **)(a1 + 80), *(void *)(a1 + 88));
  uint64_t v18 = *(void *)(a1 + 112);
  unint64_t v19 = v32;
  uint64_t v20 = v31 + 8;
  if (v31 + 8 <= v32)
  {
    *(void *)((char *)v30 + v31) = v18;
    uint64_t v18 = *(void *)(a1 + 112);
  }
  uint64_t v31 = v20;
  if (v18)
  {
    unint64_t v21 = 0;
    do
    {
      uint64_t v28 = *(void *)(*(void *)(a1 + 104) + 8 * v21);
      uint64_t v22 = find_entry(a4, &v28, 8uLL, 0);
      if (*v22) {
        uint64_t v23 = *(void *)(*v22 + 32);
      }
      else {
        uint64_t v23 = 0;
      }
      if (v20 + 8 <= v19) {
        *(void *)((char *)v30 + v2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *(void *)(v23 + 8);
      }
      uint64_t v31 = v20 + 8;
      ++v21;
      v20 += 8;
    }
    while (*(void *)(a1 + 112) > v21);
  }
  SaveDYMTLLinkedFunctions(&v30, a1, a4);
  unint64_t v24 = v32;
  uint64_t v25 = v31 + 8;
  if (v31 + 8 <= v32)
  {
    *(void *)((char *)v30 + v31) = *(unsigned __int8 *)(a1 + 168);
    unint64_t v24 = v32;
    uint64_t v25 = v31 + 8;
  }
  uint64_t v31 = v25;
  uint64_t v26 = v25 + 8;
  if (v25 + 8 <= v24)
  {
    *(void *)((char *)v30 + v25) = *(unsigned __int16 *)(a1 + 130);
    unint64_t v24 = v32;
    uint64_t v26 = v31 + 8;
  }
  uint64_t v31 = v26;
  uint64_t result = v26 + 8;
  if (v26 + 8 <= v24)
  {
    *(void *)((char *)v30 + v26) = *(unsigned __int16 *)(a1 + 128);
    return v31 + 8;
  }
  return result;
}

uint64_t DecodeDYMTLMotionEstimationPipelineDescriptor(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = *(void *)(a3 + 152);
  *(void *)(a3 + 152) = v4 + 4;
  if (a4)
  {
    *(_DWORD *)uint64_t v4 = 0;
    *(_WORD *)(v4 + 2) = *(void *)(result + 8);
    *(_WORD *)uint64_t v4 = *(void *)(result + 16);
  }
  return result;
}

uint64_t EncodeDYMTLMotionEstimationPipelineDescriptor(unsigned __int16 *a1, void *a2, unint64_t a3)
{
  if (a3 >= 8)
  {
    *a2 = 81;
    if (a3 >= 0x10)
    {
      a2[1] = a1[1];
      if (a3 >= 0x18) {
        a2[2] = *a1;
      }
    }
  }
  return 24;
}

uint64_t DecodeDYMTLCommandQueueDescriptor(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = *(void *)(a3 + 144);
  *(void *)(a3 + 144) = v4 + 16;
  if (a4)
  {
    *(_OWORD *)uint64_t v4 = GTMTLCommandQueueDescriptorDefaults;
    unsigned int v5 = *(_DWORD *)result;
    *(_DWORD *)uint64_t v4 = *(void *)(result + 8);
    *(unsigned char *)(v4 + 8) = *(void *)(result + 16);
    *(unsigned char *)(v4 + 4) = *(void *)(result + 24);
    *(unsigned char *)(v4 + 7) = *(void *)(result + 32);
    if (v5 >= 0x2A)
    {
      *(unsigned char *)(v4 + 6) = *(void *)(result + 40);
      if (v5 >= 0x51) {
        *(unsigned char *)(v4 + 5) = *(void *)(result + 48);
      }
    }
  }
  return result;
}

uint64_t EncodeDYMTLCommandQueueDescriptor(unsigned __int8 *a1, void *a2, unint64_t a3)
{
  if (a3 >= 8)
  {
    *a2 = 81;
    if (a3 >= 0x10)
    {
      a2[1] = *(unsigned int *)a1;
      if (a3 >= 0x18)
      {
        a2[2] = a1[8];
        if (a3 >= 0x20)
        {
          a2[3] = a1[4];
          if (a3 >= 0x28)
          {
            a2[4] = a1[7];
            if (a3 >= 0x30)
            {
              a2[5] = a1[6];
              if (a3 >= 0x38) {
                a2[6] = a1[5];
              }
            }
          }
        }
      }
    }
  }
  return 56;
}

void *DecodeDYMTLIOCommandQueueDescriptor(void *result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = *(void *)(a3 + 136);
  *(void *)(a3 + 136) = v4 + 8;
  if (a4)
  {
    *(void *)uint64_t v4 = 64;
    *(_DWORD *)uint64_t v4 = result[1];
    *(unsigned char *)(v4 + 4) = result[2];
    *(unsigned char *)(v4 + 5) = result[3];
  }
  return result;
}

uint64_t EncodeDYMTLIOCommandQueueDescriptor(unsigned int *a1, void *a2, unint64_t a3)
{
  if (a3 >= 8)
  {
    *a2 = 81;
    if (a3 >= 0x10)
    {
      a2[1] = *a1;
      if (a3 >= 0x18)
      {
        a2[2] = *((unsigned __int8 *)a1 + 4);
        if (a3 >= 0x20) {
          a2[3] = *((unsigned __int8 *)a1 + 5);
        }
      }
    }
  }
  return 32;
}

uint64_t *DecodeDYMTLCommandBufferDescriptor(uint64_t *result, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a3 + 128);
  *(void *)(a3 + 128) = v5 + 16;
  if (a4)
  {
    *(_OWORD *)uint64_t v5 = GTMTLCommandBufferDescriptorDefaults;
    *(unsigned char *)(v5 + 8) = result[1];
    *(unsigned char *)(v5 + 9) = result[2];
    uint64_t v6 = result[3];
    *(void *)uint64_t v5 = v6;
    if (a5)
    {
      uint64_t result = (uint64_t *)GetStream_11288(a5, v6);
      if (result) {
        uint64_t v6 = *result;
      }
      else {
        uint64_t v6 = 0;
      }
    }
    *(void *)uint64_t v5 = v6;
  }
  return result;
}

uint64_t EncodeDYMTLCommandBufferDescriptor(uint64_t *a1, void *a2, unint64_t a3, uint64_t a4)
{
  if (a3 >= 8)
  {
    *a2 = 81;
    if (a3 >= 0x10)
    {
      a2[1] = *((unsigned __int8 *)a1 + 8);
      if (a3 >= 0x18) {
        a2[2] = *((unsigned __int8 *)a1 + 9);
      }
    }
  }
  uint64_t v8 = *a1;
  uint64_t v6 = *find_entry(a4, &v8, 8uLL, 0);
  if (v6) {
    uint64_t v6 = *(void *)(v6 + 32);
  }
  if (a3 >= 0x20) {
    a2[3] = *(void *)(v6 + 8);
  }
  return 32;
}

size_t DecodeDYMTLFunctionConstantValues(size_t result, uint64_t a2, void *a3, int a4)
{
  unint64_t v6 = result + 8;
  uint64_t v28 = a3[40];
  if (*(void *)(result + 8) != -1)
  {
    uint64_t v7 = 0;
    while (1)
    {
      uint64_t v8 = a3[40];
      a3[40] = v8 + 32;
      uint64_t v9 = *(void *)v6;
      unint64_t v10 = v6 + 8;
      uint64_t result = strlen((const char *)(v6 + 8));
      size_t v11 = result;
      int v12 = *(unsigned __int8 *)(v6 + 8);
      uint64_t v13 = *(unsigned char *)(v6 + 8) ? (const char *)(v6 + 8) : 0;
      if (!v12) {
        break;
      }
      uint64_t result = strlen(v13);
      uint64_t v14 = a3[52];
      size_t v15 = result + 1;
      if (result == -1) {
        goto LABEL_10;
      }
      unint64_t v16 = (void *)a3[52];
LABEL_11:
      size_t v17 = (v11 & 0xFFFFFFFFFFFFFFF8) + v10;
      uint64_t v18 = (uint64_t *)(v17 + 8);
      size_t v19 = v14 + v15;
      a3[52] = v19;
      if (a4)
      {
        memcpy(v16, v13, v15);
        uint64_t v20 = (char *)a3[52];
        uint64_t v21 = v18[1];
        uint64_t v29 = *v18;
        size_t v22 = v18[2];
        uint64_t v23 = v18 + 3;
        unint64_t v6 = (unint64_t)v18 + ((v22 + 7) & 0xFFFFFFFFFFFFFFF8) + 24;
        a3[52] = &v20[v22];
        if (v22) {
          unint64_t v24 = v20;
        }
        else {
          unint64_t v24 = 0;
        }
        if (v22) {
          uint64_t v25 = v23;
        }
        else {
          uint64_t v25 = 0;
        }
        uint64_t result = (size_t)memcpy(v24, v25, v22);
        *(void *)uint64_t v8 = v24;
        *(void *)(v8 + 8) = v22;
        *(void *)(v8 + 16) = v16;
        *(_WORD *)(v8 + 24) = v9;
        *(unsigned char *)(v8 + 26) = v21;
        *(unsigned char *)(v8 + 27) = v29;
        *(_DWORD *)(v8 + 28) = 0;
      }
      else
      {
        uint64_t v26 = *(void *)(v17 + 24);
        unint64_t v6 = (unint64_t)v18 + ((v26 + 7) & 0xFFFFFFFFFFFFFFF8) + 24;
        a3[52] = v19 + v26;
      }
      ++v7;
      if (*(void *)v6 == -1) {
        goto LABEL_23;
      }
    }
    uint64_t v14 = a3[52];
LABEL_10:
    size_t v15 = 0;
    unint64_t v16 = 0;
    goto LABEL_11;
  }
  uint64_t v7 = 0;
LABEL_23:
  uint64_t v27 = (void *)a3[15];
  a3[15] = v27 + 2;
  if (a4)
  {
    *uint64_t v27 = v28;
    v27[1] = v7;
  }
  return result;
}

uint64_t EncodeDYMTLFunctionConstantValues(uint64_t *a1, void *a2, unint64_t a3)
{
  uint64_t v14 = a2;
  unint64_t v16 = a3;
  if (a3 >= 8) {
    *a2 = 81;
  }
  uint64_t v4 = 8;
  uint64_t v15 = 8;
  if (a1[1])
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = *a1;
      uint64_t v8 = v15 + 8;
      if (v15 + 8 <= v16) {
        *(void *)((char *)v14 + v15) = *(unsigned __int16 *)(v7 + v5 + 24);
      }
      uint64_t v15 = v8;
      WriteDynamicBufferString(&v14, *(const char **)(v7 + v5 + 16));
      uint64_t v9 = v15;
      unint64_t v10 = v16;
      uint64_t v11 = v15 + 8;
      if (v15 + 8 <= v16) {
        *(void *)((char *)v14 + v15) = *(unsigned __int8 *)(v7 + v5 + 27);
      }
      unint64_t v12 = v9 + 16;
      if (v12 <= v10) {
        *(void *)((char *)v14 + v11) = *(unsigned __int8 *)(v7 + v5 + 26);
      }
      uint64_t v15 = v12;
      WriteGTData(&v14, *(const void **)(v7 + v5), *(void *)(v7 + v5 + 8));
      ++v6;
      v5 += 32;
    }
    while (a1[1] > v6);
    uint64_t v4 = v15;
    a3 = v16;
  }
  uint64_t result = v4 + 8;
  if (v4 + 8 <= a3) {
    *(void *)((char *)v14 + v4) = -1;
  }
  return result;
}

uint64_t DecodeDYMTLVisibleFunctionTableDescriptor(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = *(void *)(a3 + 112);
  *(void *)(a3 + 112) = v4 + 24;
  if (a4)
  {
    unsigned int v5 = *(_DWORD *)result;
    *(void *)uint64_t v4 = *(void *)(result + 8);
    if (v5 >= 0x2F)
    {
      *(void *)(v4 + 8) = *(void *)(result + 16);
      if (v5 >= 0x36) {
        *(unsigned char *)(v4 + 16) = *(void *)(result + 24);
      }
    }
  }
  return result;
}

uint64_t EncodeDYMTLVisibleFunctionTableDescriptor(uint64_t a1, void *a2, unint64_t a3)
{
  if (a3 >= 8)
  {
    *a2 = 81;
    if (a3 >= 0x10)
    {
      a2[1] = *(void *)a1;
      if (a3 >= 0x18)
      {
        a2[2] = *(void *)(a1 + 8);
        if (a3 >= 0x20) {
          a2[3] = *(unsigned __int8 *)(a1 + 16);
        }
      }
    }
  }
  return 32;
}

size_t DecodeDYMTLRasterizationRateMapDescriptor(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  unsigned int v7 = *(_DWORD *)a1;
  uint64_t v8 = (const char *)(a1 + 8);
  size_t result = strlen((const char *)(a1 + 8));
  unint64_t v10 = (unint64_t)&v8[(result & 0xFFFFFFFFFFFFFFF8) + 8];
  if (*(unsigned char *)(a1 + 8))
  {
    size_t result = strlen(v8);
    uint64_t v13 = a3 + 52;
    uint64_t v14 = a3[52];
    size_t v11 = result + 1;
    if (result != -1)
    {
      unint64_t v12 = (void *)a3[52];
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v13 = a3 + 52;
    uint64_t v14 = a3[52];
  }
  size_t v11 = 0;
  unint64_t v12 = 0;
LABEL_6:
  *uint64_t v13 = v14 + v11;
  if (a4) {
    size_t result = (size_t)memcpy(v12, v8, v11);
  }
  __int16 v15 = *(_WORD *)v10;
  __int16 v16 = *(_WORD *)(v10 + 8);
  __int16 v17 = *(_WORD *)(v10 + 16);
  unint64_t v18 = v10 + 32;
  uint64_t v19 = *(void *)(v10 + 24);
  if (v19)
  {
    uint64_t v20 = 0;
    uint64_t v21 = a3[36];
    while (1)
    {
      uint64_t v22 = a3[36];
      a3[36] = v22 + 24;
      uint64_t v24 = *(void *)v18;
      uint64_t v23 = *(void *)(v18 + 8);
      size_t result = *(unsigned __int16 *)(v18 + 16);
      v18 += 24;
      if ((_WORD)v24)
      {
        uint64_t v25 = 0;
        uint64_t v26 = a3[51];
        do
        {
          if (a4) {
            *(_DWORD *)(v26 + v25) = *(_DWORD *)v18;
          }
          v18 += 8;
          a3[51] = v26 + v25 + 4;
          v25 += 4;
        }
        while (4 * (unsigned __int16)v24 != v25);
      }
      else
      {
        uint64_t v26 = 0;
      }
      if ((_WORD)v23)
      {
        uint64_t v27 = 0;
        uint64_t v28 = a3[51];
        do
        {
          if (a4) {
            *(_DWORD *)(v28 + v27) = *(_DWORD *)v18;
          }
          v18 += 8;
          a3[51] = v28 + v27 + 4;
          v27 += 4;
        }
        while (4 * (unsigned __int16)v23 != v27);
        if ((a4 & 1) == 0) {
          goto LABEL_24;
        }
      }
      else
      {
        uint64_t v28 = 0;
        if ((a4 & 1) == 0) {
          goto LABEL_24;
        }
      }
      *(void *)uint64_t v22 = v26;
      *(void *)(v22 + 8) = v28;
      *(_WORD *)(v22 + 16) = v24;
      *(_WORD *)(v22 + 18) = result;
      *(_WORD *)(v22 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v23;
      *(_WORD *)(v22 + 22) = 0;
LABEL_24:
      if (++v20 == v19) {
        goto LABEL_29;
      }
    }
  }
  uint64_t v21 = 0;
LABEL_29:
  if (v7 <= 0x39)
  {
    char v31 = 0;
    int v29 = 0;
    char v30 = 2;
  }
  else
  {
    int v29 = *(_DWORD *)v18;
    char v30 = *(unsigned char *)(v18 + 8);
    if (v7 < 0x44) {
      char v31 = 0;
    }
    else {
      char v31 = *(unsigned char *)(v18 + 16);
    }
  }
  uint64_t v32 = a3[13];
  a3[13] = v32 + 40;
  if (a4)
  {
    *(void *)uint64_t v32 = v12;
    *(void *)(v32 + 8) = v21;
    *(void *)(v32 + 16) = v19;
    *(_DWORD *)(v32 + 24) = v29;
    *(_WORD *)(v32 + 28) = v17;
    *(_WORD *)(v32 + 3mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v16;
    *(_WORD *)(v32 + 32) = v15;
    *(unsigned char *)(v32 + 34) = v30;
    *(unsigned char *)(v32 + 35) = v31;
    *(_DWORD *)(v32 + 36) = 0;
  }
  return result;
}

uint64_t EncodeDYMTLRasterizationRateMapDescriptor(const char **a1, void *a2, unint64_t a3)
{
  uint64_t v3 = a1;
  unint64_t v39 = a2;
  unint64_t v41 = a3;
  if (a3 >= 8) {
    *a2 = 81;
  }
  uint64_t v40 = 8;
  WriteDynamicBufferString(&v39, *a1);
  unint64_t v4 = v41;
  uint64_t v5 = v40 + 8;
  if (v40 + 8 <= v41)
  {
    uint64_t v6 = v40;
    *(void *)((char *)v39 + v4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *((unsigned __int16 *)v3 + 16);
    uint64_t v5 = v6 + 8;
    unint64_t v4 = v41;
  }
  uint64_t v40 = v5;
  uint64_t v7 = v5 + 8;
  if (v5 + 8 <= v4)
  {
    uint64_t v8 = v40;
    *(void *)((char *)v39 + v5) = *((unsigned __int16 *)v3 + 15);
    uint64_t v7 = v8 + 8;
    unint64_t v4 = v41;
  }
  uint64_t v40 = v7;
  uint64_t v9 = v7 + 8;
  if (v7 + 8 <= v4)
  {
    uint64_t v10 = v40;
    *(void *)((char *)v39 + v7) = *((unsigned __int16 *)v3 + 14);
    uint64_t v9 = v10 + 8;
    unint64_t v4 = v41;
  }
  uint64_t v40 = v9;
  size_t v11 = v3[2];
  uint64_t v12 = v9 + 8;
  if (v9 + 8 <= v4)
  {
    uint64_t v13 = v40;
    *(void *)((char *)v39 + v9) = v11;
    uint64_t v12 = v13 + 8;
    size_t v11 = v3[2];
  }
  uint64_t v40 = v12;
  if (v11)
  {
    unint64_t v14 = 0;
    uint64_t v15 = v40;
    unint64_t v16 = v41;
    __int16 v17 = v39;
    uint64_t v38 = v3;
    do
    {
      unint64_t v18 = v3[1];
      uint64_t v19 = &v18[24 * v14];
      uint64_t v20 = v19 + 16;
      uint64_t v21 = v12 + 8;
      if (v12 + 8 <= v16)
      {
        *(void *)((char *)v17 + v12) = (unsigned __int16)*v20;
        uint64_t v21 = v15 + 8;
      }
      uint64_t v22 = &v18[24 * v14 + 20];
      if (v21 + 8 <= v16) {
        *(void *)((char *)v17 + v21) = *(unsigned __int16 *)v22;
      }
      uint64_t v15 = v21 + 16;
      if (v21 + 16 <= v16) {
        *(void *)((char *)v17 + v21 + 8) = *(unsigned __int16 *)&v18[24 * v14 + 18];
      }
      if (*v20)
      {
        unint64_t v23 = 0;
        do
        {
          unint64_t v24 = v15 + 4;
          if (v15 + 4 <= v16) {
            *(_DWORD *)((char *)v17 + v15) = *(_DWORD *)(*(void *)v19 + 4 * v23);
          }
          if (v16 > v24)
          {
            if (v16 - v24 >= 4) {
              size_t v25 = 4;
            }
            else {
              size_t v25 = v16 - v24;
            }
            bzero((char *)v17 + v24, v25);
          }
          uint64_t v15 = v24 + 4;
          ++v23;
        }
        while (v23 < (unsigned __int16)*v20);
      }
      if (*(_WORD *)v22)
      {
        unint64_t v26 = 0;
        uint64_t v27 = &v18[24 * v14 + 8];
        uint64_t v3 = v38;
        do
        {
          unint64_t v28 = v15 + 4;
          if (v15 + 4 <= v16) {
            *(_DWORD *)((char *)v17 + v15) = *(_DWORD *)(*(void *)v27 + 4 * v26);
          }
          if (v16 > v28)
          {
            if (v16 - v28 >= 4) {
              size_t v29 = 4;
            }
            else {
              size_t v29 = v16 - v28;
            }
            bzero((char *)v17 + v28, v29);
          }
          uint64_t v15 = v28 + 4;
          ++v26;
        }
        while (v26 < *(unsigned __int16 *)v22);
      }
      else
      {
        uint64_t v3 = v38;
      }
      ++v14;
      uint64_t v12 = v15;
    }
    while ((unint64_t)v3[2] > v14);
    uint64_t v40 = v15;
  }
  else
  {
    uint64_t v15 = v12;
  }
  unint64_t v30 = v15 + 4;
  unint64_t v31 = v41;
  if (v15 + 4 <= v41)
  {
    uint64_t v32 = v40;
    *(_DWORD *)((char *)v39 + v15) = *((_DWORD *)v3 + 6);
    unint64_t v30 = v32 + 4;
    unint64_t v31 = v41;
  }
  if (v31 > v30)
  {
    if (v31 - v30 >= 4) {
      size_t v33 = 4;
    }
    else {
      size_t v33 = v31 - v30;
    }
    bzero((char *)v39 + v30, v33);
  }
  uint64_t v40 = v30 + 4;
  uint64_t v34 = v30 + 12;
  if (v30 + 12 <= v31)
  {
    uint64_t v35 = v40;
    *(void *)((char *)v39 + v30 + 4) = *((unsigned __int8 *)v3 + 34);
    uint64_t v34 = v35 + 8;
    unint64_t v31 = v41;
  }
  uint64_t v40 = v34;
  uint64_t result = v34 + 8;
  if (v34 + 8 <= v31)
  {
    uint64_t v37 = v40;
    *(void *)((char *)v39 + v34) = *((unsigned __int8 *)v3 + 35);
    return v37 + 8;
  }
  return result;
}

size_t DecodeDYMTLFunctionDescriptor(uint64_t a1, uint64_t a2, void *a3, int a4, uint64_t a5)
{
  uint64_t v9 = (const char *)(a1 + 16);
  char v38 = *(unsigned char *)(a1 + 8);
  unsigned int v39 = *(_DWORD *)a1;
  size_t v10 = strlen((const char *)(a1 + 16)) & 0xFFFFFFFFFFFFFFF8;
  size_t v11 = &v9[v10 + 8];
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v12 = v9;
  }
  else {
    uint64_t v12 = 0;
  }
  if (*(unsigned char *)(a1 + 16))
  {
    size_t v13 = strlen(v12);
    unint64_t v14 = a3 + 52;
    uint64_t v15 = a3[52];
    size_t v16 = v13 + 1;
    if (v13 != -1)
    {
      __int16 v17 = (void *)a3[52];
      goto LABEL_9;
    }
  }
  else
  {
    unint64_t v14 = a3 + 52;
    uint64_t v15 = a3[52];
  }
  size_t v16 = 0;
  __int16 v17 = 0;
LABEL_9:
  void *v14 = v15 + v16;
  if (a4) {
    memcpy(v17, v12, v16);
  }
  size_t result = strlen(v11);
  unint64_t v19 = result & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = &v11[result & 0xFFFFFFFFFFFFFFF8];
  if (*v11) {
    uint64_t v21 = v11;
  }
  else {
    uint64_t v21 = 0;
  }
  uint64_t v37 = v17;
  if (*v11)
  {
    size_t result = strlen(v21);
    uint64_t v22 = a3 + 52;
    uint64_t v23 = a3[52];
    size_t v24 = result + 1;
    if (result != -1)
    {
      size_t v25 = (void *)a3[52];
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v22 = a3 + 52;
    uint64_t v23 = a3[52];
  }
  size_t v24 = 0;
  size_t v25 = 0;
LABEL_19:
  *uint64_t v22 = v23 + v24;
  if (a4) {
    size_t result = (size_t)memcpy(v25, v21, v24);
  }
  size_t v27 = (size_t)(v20 + 16);
  uint64_t v26 = *((void *)v20 + 1);
  if (v26)
  {
    uint64_t v28 = a3[15];
    size_t result = DecodeDYMTLFunctionConstantValues(v27, v26, a3, a4);
  }
  else
  {
    uint64_t v28 = 0;
  }
  if (v39 < 0x3E)
  {
    uint64_t v32 = 0;
    uint64_t v30 = 0;
  }
  else
  {
    unint64_t v29 = (v26 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v30 = *(void *)(v27 + v29);
    if (v30)
    {
      uint64_t v40 = v28;
      uint64_t v31 = 0;
      uint64_t v32 = (uint64_t *)a3[50];
      uint64_t v33 = v10 + v19 + v29 + a1 + 48;
      uint64_t v34 = v32;
      do
      {
        if (a4)
        {
          uint64_t v35 = *(void *)(v33 + 8 * v31);
          if (a5)
          {
            size_t result = GetStream_11288(a5, v35);
            if (result) {
              uint64_t v35 = *(void *)result;
            }
            else {
              uint64_t v35 = 0;
            }
          }
          uint64_t v34 = (uint64_t *)a3[50];
          uint64_t *v34 = v35;
        }
        a3[50] = ++v34;
        ++v31;
      }
      while (v30 != v31);
      uint64_t v28 = v40;
    }
    else
    {
      uint64_t v32 = 0;
    }
  }
  uint64_t v36 = a3[12];
  a3[12] = v36 + 48;
  if (a4)
  {
    *(void *)uint64_t v36 = v28;
    *(void *)(v36 + 8) = v37;
    *(void *)(v36 + 16) = v32;
    *(void *)(v36 + 24) = v30;
    *(void *)(v36 + 32) = v25;
    *(unsigned char *)(v36 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v38;
    *(_DWORD *)(v36 + 41) = 0;
    *(_DWORD *)(v36 + 44) = 0;
  }
  return result;
}

unint64_t EncodeDYMTLFunctionDescriptor(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  unint64_t v19 = a2;
  unint64_t v21 = a3;
  if (a3 >= 8)
  {
    *a2 = 81;
    if (a3 >= 0x10) {
      a2[1] = *(unsigned __int8 *)(a1 + 40);
    }
  }
  uint64_t v20 = 16;
  WriteDynamicBufferString(&v19, *(const char **)(a1 + 8));
  WriteDynamicBufferString(&v19, *(const char **)(a1 + 32));
  if (*(void *)a1)
  {
    uint64_t v6 = EncodeDYMTLFunctionConstantValues(*(uint64_t **)a1, 0, 0);
    uint64_t v7 = v6;
    unint64_t v8 = v21;
    uint64_t v9 = v20 + 8;
    unint64_t v10 = v21 - (v20 + 8);
    if (v21 >= v20 + 8) {
      v19[(unint64_t)v20 / 8] = v6;
    }
    if (v6 && v9 + v6 <= v8) {
      EncodeDYMTLFunctionConstantValues(*(uint64_t **)a1, (void *)((char *)v19 + v9), v10);
    }
  }
  else
  {
    unint64_t v8 = v21;
    uint64_t v9 = v20 + 8;
    uint64_t v7 = 0;
    if (v20 + 8 <= v21) {
      v19[(unint64_t)v20 / 8] = 0;
    }
  }
  uint64_t v11 = v9 + v7;
  uint64_t v12 = *(void *)(a1 + 24);
  unint64_t v13 = v9 + v7 + 8;
  if (v13 <= v8)
  {
    *(void *)((char *)v19 + v11) = v12;
    uint64_t v12 = *(void *)(a1 + 24);
  }
  if (!v12) {
    return v13;
  }
  unint64_t v14 = 0;
  uint64_t v15 = v19;
  do
  {
    uint64_t v18 = *(void *)(*(void *)(a1 + 16) + 8 * v14);
    uint64_t v16 = *find_entry(a4, &v18, 8uLL, 0);
    if (v16) {
      uint64_t v16 = *(void *)(v16 + 32);
    }
    unint64_t result = v13 + 8;
    if (v13 + 8 <= v8) {
      *(void *)((char *)v15 + v13) = *(void *)(v16 + 8);
    }
    ++v14;
    v13 += 8;
  }
  while (*(void *)(a1 + 24) > v14);
  return result;
}

uint64_t DecodeDYMTLCompileOptions(uint64_t a1, uint64_t a2, void *a3, int a4, uint64_t a5)
{
  unsigned int v8 = *(_DWORD *)a1;
  size_t v9 = *(void *)(a1 + 8);
  unint64_t v10 = a1 + 16 + ((v9 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v9) {
    uint64_t v11 = (void *)a3[52];
  }
  else {
    uint64_t v11 = 0;
  }
  a3[52] += v9;
  if (a4)
  {
    if (v9) {
      uint64_t v12 = (const void *)(a1 + 16);
    }
    else {
      uint64_t v12 = 0;
    }
    memcpy(v11, v12, v9);
  }
  char v13 = *(unsigned char *)v10;
  char v15 = *(unsigned char *)v10 == 0;
  BOOL v14 = *(unsigned char *)v10 != 0;
  char v16 = 2 * v14;
  uint64_t result = *(unsigned __int8 *)(v10 + 8);
  if (v8 <= 0xF)
  {
    char v18 = 0;
    char v19 = 0;
    __int16 v20 = 0;
    char v21 = 0;
    char v22 = 0;
    if (v8 < 6)
    {
      int v29 = 0;
      uint64_t v23 = 0;
      size_t v24 = 0;
      uint64_t v25 = 0;
      char v26 = 0;
      size_t v27 = 0;
      char v28 = 0;
    }
    else
    {
      uint64_t v23 = 0;
      size_t v24 = 0;
      uint64_t v25 = 0;
      char v26 = 0;
      size_t v27 = 0;
      char v28 = 0;
      int v29 = *(_DWORD *)(v10 + 40);
    }
    goto LABEL_60;
  }
  int v59 = *(_DWORD *)(v10 + 16);
  if (v8 < 0x28)
  {
    char v18 = 0;
    char v19 = 0;
    __int16 v20 = 0;
    char v21 = 0;
    char v22 = 0;
    uint64_t v23 = 0;
    size_t v24 = 0;
    uint64_t v25 = 0;
    char v26 = 0;
    size_t v27 = 0;
    char v28 = 0;
    int v29 = *(_DWORD *)(v10 + 16);
    goto LABEL_60;
  }
  unsigned int v55 = *(unsigned __int8 *)(v10 + 8);
  char v56 = 2 * v14;
  BOOL v57 = *(unsigned char *)v10 == 0;
  char v58 = *(unsigned char *)v10;
  unint64_t v30 = v10 + 24;
  size_t v31 = strlen((const char *)(v10 + 24));
  int v32 = *(unsigned __int8 *)(v10 + 24);
  if (*(unsigned char *)(v10 + 24)) {
    uint64_t v33 = (const char *)(v10 + 24);
  }
  else {
    uint64_t v33 = 0;
  }
  if (v32)
  {
    size_t v34 = strlen(v33);
    uint64_t v35 = a3[52];
    size_t v36 = v34 + 1;
    if (v34 != -1)
    {
      __dst = (void *)a3[52];
      char v15 = v57;
      char v13 = v58;
      uint64_t result = v55;
      char v16 = v56;
      goto LABEL_23;
    }
  }
  else
  {
    uint64_t v35 = a3[52];
  }
  char v15 = v57;
  char v13 = v58;
  uint64_t result = v55;
  char v16 = v56;
  size_t v36 = 0;
  __dst = 0;
LABEL_23:
  a3[52] = v35 + v36;
  if (a4)
  {
    memcpy(__dst, v33, v36);
    uint64_t result = v55;
    char v16 = v56;
    char v15 = v57;
    char v13 = v58;
  }
  if (v8 < 0x2B)
  {
    char v18 = 0;
    char v19 = 0;
    __int16 v20 = 0;
    char v21 = 0;
    char v22 = 0;
    size_t v24 = 0;
    uint64_t v25 = 0;
    char v26 = 0;
    size_t v27 = 0;
    char v28 = 0;
    int v29 = v59;
    uint64_t v23 = __dst;
    goto LABEL_60;
  }
  unint64_t v37 = (v31 & 0xFFFFFFFFFFFFFFF8) + v30 + 8;
  char v53 = *(unsigned char *)v37;
  if (v8 < 0x30)
  {
    char v18 = 0;
    char v19 = 0;
    __int16 v20 = 0;
    char v21 = 0;
    size_t v24 = 0;
    uint64_t v25 = 0;
    char v26 = 0;
    size_t v27 = 0;
    char v28 = 0;
    int v29 = v59;
    uint64_t v23 = __dst;
    char v22 = v53;
    goto LABEL_60;
  }
  size_t v38 = (strlen((const char *)(v37 + 8)) & 0xFFFFFFFFFFFFFFF8) + v37 + 8 + 8;
  int v39 = *(unsigned __int8 *)(v37 + 8);
  if (*(unsigned char *)(v37 + 8)) {
    uint64_t v40 = (const char *)(v37 + 8);
  }
  else {
    uint64_t v40 = 0;
  }
  if (v39)
  {
    size_t v41 = strlen(v40);
    uint64_t v42 = a3[52];
    size_t v43 = v41 + 1;
    if (v41 != -1)
    {
      size_t v27 = (void *)a3[52];
      char v15 = v57;
      char v13 = v58;
      uint64_t result = v55;
      char v16 = v56;
      goto LABEL_37;
    }
  }
  else
  {
    uint64_t v42 = a3[52];
  }
  char v15 = v57;
  char v13 = v58;
  uint64_t result = v55;
  char v16 = v56;
  size_t v43 = 0;
  size_t v27 = 0;
LABEL_37:
  long long v52 = v11;
  a3[52] = v42 + v43;
  if (a4)
  {
    memcpy(v27, v40, v43);
    uint64_t result = v55;
    char v16 = v56;
    char v15 = v57;
    char v13 = v58;
  }
  char v51 = *(unsigned char *)v38;
  uint64_t v25 = *(void *)(v38 + 8);
  size_t v44 = v38 + 16;
  if (v25)
  {
    size_t v24 = (uint64_t *)a3[50];
    uint64_t v45 = v25;
    long long v46 = v24;
    do
    {
      uint64_t v48 = *(void *)v44;
      v44 += 8;
      uint64_t v47 = v48;
      if (a4)
      {
        if (a5)
        {
          Stream_11288 = (uint64_t *)GetStream_11288(a5, v47);
          if (Stream_11288) {
            uint64_t v47 = *Stream_11288;
          }
          else {
            uint64_t v47 = 0;
          }
        }
        long long v46 = (uint64_t *)a3[50];
        *long long v46 = v47;
      }
      a3[50] = ++v46;
      --v45;
    }
    while (v45);
    char v15 = v57;
    char v13 = v58;
    uint64_t result = v55;
    char v16 = v56;
  }
  else
  {
    size_t v24 = 0;
  }
  if (v8 < 0x3B)
  {
    char v18 = 0;
    char v19 = 0;
    __int16 v20 = 0;
    char v21 = 0;
LABEL_58:
    char v28 = 0;
LABEL_59:
    uint64_t v11 = v52;
    int v29 = v59;
    uint64_t v23 = __dst;
    char v22 = v53;
    char v26 = v51;
    goto LABEL_60;
  }
  char v21 = *(unsigned char *)v44;
  if (v8 < 0x40)
  {
    char v18 = 0;
    char v19 = 0;
    __int16 v20 = 0;
    goto LABEL_58;
  }
  char v28 = *(unsigned char *)(v44 + 8);
  if (v8 < 0x47)
  {
    char v18 = 0;
    char v19 = 0;
    __int16 v20 = 0;
    goto LABEL_59;
  }
  char v18 = *(unsigned char *)(v44 + 16);
  char v19 = *(unsigned char *)(v44 + 24);
  __int16 v20 = *(_WORD *)(v44 + 32);
  int v29 = v59;
  uint64_t v23 = __dst;
  char v22 = v53;
  char v26 = v51;
  if (v8 >= 0x4C)
  {
    char v15 = *(unsigned char *)(v44 + 40);
    char v16 = *(unsigned char *)(v44 + 48);
  }
  uint64_t v11 = v52;
LABEL_60:
  uint64_t v50 = a3[11];
  a3[11] = v50 + 64;
  if (a4)
  {
    *(void *)uint64_t v50 = v11;
    *(void *)(v50 + 8) = v9;
    *(void *)(v50 + 16) = v23;
    *(void *)(v50 + 24) = v27;
    *(void *)(v50 + 32) = v24;
    *(void *)(v50 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v25;
    *(_DWORD *)(v50 + 48) = v29;
    *(_WORD *)(v50 + 52) = v20;
    *(unsigned char *)(v50 + 54) = v19;
    *(unsigned char *)(v50 + 55) = v18;
    *(unsigned char *)(v50 + 56) = result;
    *(unsigned char *)(v50 + 57) = v13;
    *(unsigned char *)(v50 + 58) = v26;
    *(unsigned char *)(v50 + 59) = v15;
    *(unsigned char *)(v50 + 6mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v16;
    *(unsigned char *)(v50 + 61) = v28;
    *(unsigned char *)(v50 + 62) = v22;
    *(unsigned char *)(v50 + 63) = v21;
  }
  return result;
}

uint64_t EncodeDYMTLCompileOptions(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  int v29 = a2;
  unint64_t v31 = a3;
  if (a3 >= 8) {
    *a2 = 81;
  }
  uint64_t v30 = 8;
  WriteGTData(&v29, *(const void **)a1, *(void *)(a1 + 8));
  unint64_t v6 = v31;
  uint64_t v7 = v30 + 8;
  if (v30 + 8 <= v31)
  {
    *(void *)((char *)v29 + v3mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *(unsigned __int8 *)(a1 + 57);
    unint64_t v6 = v31;
    uint64_t v7 = v30 + 8;
  }
  uint64_t v30 = v7;
  uint64_t v8 = v7 + 8;
  if (v7 + 8 <= v6)
  {
    *(void *)((char *)v29 + v7) = *(unsigned __int8 *)(a1 + 56);
    unint64_t v6 = v31;
    uint64_t v8 = v30 + 8;
  }
  uint64_t v30 = v8;
  uint64_t v9 = v8 + 8;
  if (v8 + 8 <= v6)
  {
    *(void *)((char *)v29 + v8) = *(unsigned int *)(a1 + 48);
    uint64_t v9 = v30 + 8;
  }
  uint64_t v30 = v9;
  WriteDynamicBufferString(&v29, *(const char **)(a1 + 16));
  uint64_t v10 = v30 + 8;
  if (v30 + 8 <= v31)
  {
    *(void *)((char *)v29 + v3mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *(unsigned __int8 *)(a1 + 62);
    uint64_t v10 = v30 + 8;
  }
  uint64_t v30 = v10;
  WriteDynamicBufferString(&v29, *(const char **)(a1 + 24));
  unint64_t v11 = v31;
  uint64_t v12 = v30 + 8;
  if (v30 + 8 <= v31)
  {
    *(void *)((char *)v29 + v3mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *(unsigned __int8 *)(a1 + 58);
    unint64_t v11 = v31;
    uint64_t v12 = v30 + 8;
  }
  uint64_t v30 = v12;
  uint64_t v13 = *(void *)(a1 + 40);
  uint64_t v14 = v12 + 8;
  if (v12 + 8 <= v11)
  {
    *(void *)((char *)v29 + v12) = v13;
    uint64_t v14 = v30 + 8;
    uint64_t v13 = *(void *)(a1 + 40);
  }
  uint64_t v30 = v14;
  if (v13)
  {
    unint64_t v15 = 0;
    uint64_t v17 = v30;
    unint64_t v16 = v31;
    char v18 = v29;
    do
    {
      uint64_t v28 = *(void *)(*(void *)(a1 + 32) + 8 * v15);
      uint64_t v19 = *find_entry(a4, &v28, 8uLL, 0);
      if (v19) {
        uint64_t v19 = *(void *)(v19 + 32);
      }
      uint64_t v14 = v17 + 8;
      if (v17 + 8 <= v16) {
        *(void *)((char *)v18 + v17) = *(void *)(v19 + 8);
      }
      ++v15;
      v17 += 8;
    }
    while (*(void *)(a1 + 40) > v15);
    uint64_t v30 = v14;
  }
  uint64_t v20 = v14 + 8;
  unint64_t v21 = v31;
  if (v14 + 8 <= v31)
  {
    *(void *)((char *)v29 + v14) = *(unsigned __int8 *)(a1 + 63);
    unint64_t v21 = v31;
    uint64_t v20 = v30 + 8;
  }
  uint64_t v30 = v20;
  uint64_t v22 = v20 + 8;
  if (v20 + 8 <= v21)
  {
    *(void *)((char *)v29 + v2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = *(unsigned __int8 *)(a1 + 61);
    unint64_t v21 = v31;
    uint64_t v22 = v30 + 8;
  }
  uint64_t v30 = v22;
  uint64_t v23 = v22 + 8;
  if (v22 + 8 <= v21)
  {
    *(void *)((char *)v29 + v22) = *(unsigned __int8 *)(a1 + 55);
    unint64_t v21 = v31;
    uint64_t v23 = v30 + 8;
  }
  uint64_t v30 = v23;
  uint64_t v24 = v23 + 8;
  if (v23 + 8 <= v21)
  {
    *(void *)((char *)v29 + v23) = *(unsigned __int8 *)(a1 + 54);
    unint64_t v21 = v31;
    uint64_t v24 = v30 + 8;
  }
  uint64_t v30 = v24;
  uint64_t v25 = v24 + 8;
  if (v24 + 8 <= v21)
  {
    *(void *)((char *)v29 + v24) = *(unsigned __int16 *)(a1 + 52);
    unint64_t v21 = v31;
    uint64_t v25 = v30 + 8;
  }
  uint64_t v30 = v25;
  uint64_t v26 = v25 + 8;
  if (v25 + 8 <= v21)
  {
    *(void *)((char *)v29 + v25) = *(unsigned __int8 *)(a1 + 59);
    unint64_t v21 = v31;
    uint64_t v26 = v30 + 8;
  }
  uint64_t v30 = v26;
  uint64_t result = v26 + 8;
  if (v26 + 8 <= v21)
  {
    *(void *)((char *)v29 + v26) = *(unsigned __int8 *)(a1 + 60);
    return v30 + 8;
  }
  return result;
}

uint64_t *DecodeDYMTLCaptureDescriptor(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  int v10 = *(unsigned __int8 *)(a1 + 24);
  uint64_t result = (uint64_t *)(a1 + 24);
  int v9 = v10;
  uint64_t v11 = *(result - 2);
  char v12 = *((unsigned char *)result - 8);
  if (v10) {
    uint64_t v13 = (const char *)result;
  }
  else {
    uint64_t v13 = 0;
  }
  if (v9)
  {
    uint64_t result = (uint64_t *)strlen(v13);
    uint64_t v14 = (void *)(a3 + 416);
    uint64_t v15 = *(void *)(a3 + 416);
    size_t v16 = (size_t)result + 1;
    if (result != (uint64_t *)-1)
    {
      uint64_t v17 = *(void **)(a3 + 416);
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v14 = (void *)(a3 + 416);
    uint64_t v15 = *(void *)(a3 + 416);
  }
  size_t v16 = 0;
  uint64_t v17 = 0;
LABEL_9:
  void *v14 = v15 + v16;
  if (a4)
  {
    uint64_t result = (uint64_t *)memcpy(v17, v13, v16);
    uint64_t v18 = *(void *)(a3 + 72);
    *(void *)(a3 + 72) = v18 + 24;
    if (a5)
    {
      uint64_t result = (uint64_t *)GetStream_11288(a5, v11);
      if (result) {
        uint64_t v11 = *result;
      }
      else {
        uint64_t v11 = 0;
      }
    }
    *(void *)uint64_t v18 = v11;
    *(void *)(v18 + 8) = v17;
    *(unsigned char *)(v18 + 16) = v12;
    *(_DWORD *)(v18 + 17) = 0;
    *(_DWORD *)(v18 + 2mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0;
  }
  else
  {
    *(void *)(a3 + 72) += 24;
  }
  return result;
}

uint64_t EncodeDYMTLCaptureDescriptor(uint64_t *a1, void *a2, unint64_t a3, uint64_t a4)
{
  int v10 = a2;
  unint64_t v12 = a3;
  if (a3 >= 8) {
    *a2 = 81;
  }
  uint64_t v9 = *a1;
  uint64_t v7 = *find_entry(a4, &v9, 8uLL, 0);
  if (v7) {
    uint64_t v7 = *(void *)(v7 + 32);
  }
  if (a3 >= 0x10)
  {
    a2[1] = *(void *)(v7 + 8);
    if (a3 >= 0x18) {
      a2[2] = *((unsigned __int8 *)a1 + 16);
    }
  }
  uint64_t v11 = 24;
  WriteDynamicBufferString(&v10, (const char *)a1[1]);
  return v11;
}

uint64_t *DecodeDYMTLBlitPassDescriptor(uint64_t *result, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5 = *(_OWORD **)(a3 + 64);
  *(void *)(a3 + 64) = v5 + 6;
  if (a4)
  {
    v5[4] = 0u;
    void v5[5] = 0u;
    v5[2] = 0u;
    v5[3] = 0u;
    _OWORD *v5 = 0u;
    v5[1] = 0u;
    for (uint64_t i = result + 1; ; i += 4)
    {
      uint64_t v8 = *i;
      if (*i == -1) {
        break;
      }
      uint64_t v9 = i[1];
      uint64_t v10 = i[2];
      uint64_t v11 = i[3];
      if (a5)
      {
        uint64_t result = (uint64_t *)GetStream_11288(a5, v9);
        if (result) {
          uint64_t v9 = *result;
        }
        else {
          uint64_t v9 = 0;
        }
      }
      unint64_t v12 = (void *)v5 + 3 * v8;
      *unint64_t v12 = v11;
      v12[1] = v9;
      void v12[2] = v10;
    }
  }
  return result;
}

unint64_t EncodeDYMTLBlitPassDescriptor(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  if (a3 >= 8) {
    *a2 = 81;
  }
  uint64_t v7 = 0;
  uint64_t v8 = (uint64_t *)(a1 + 8);
  unint64_t v9 = 8;
  do
  {
    uint64_t v10 = *v8;
    if (*v8)
    {
      if (v9 + 8 <= a3)
      {
        a2[v9 / 8] = v7;
        uint64_t v10 = *v8;
      }
      uint64_t v15 = v10;
      entry = find_entry(a4, &v15, 8uLL, 0);
      if (*entry) {
        uint64_t v12 = *(void *)(*entry + 32);
      }
      else {
        uint64_t v12 = 0;
      }
      if (v9 + 16 <= a3) {
        a2[v9 / 8 + 1] = *(void *)(v12 + 8);
      }
      unint64_t v13 = v9 + 24;
      if (v9 + 24 <= a3) {
        a2[v9 / 8 + 2] = v8[1];
      }
      v9 += 32;
      if (v9 <= a3) {
        *(void *)((char *)a2 + v13) = *(v8 - 1);
      }
    }
    ++v7;
    v8 += 3;
  }
  while (v7 != 4);
  unint64_t result = v9 + 8;
  if (v9 + 8 <= a3) {
    a2[v9 / 8] = -1;
  }
  return result;
}

uint64_t *DecodeDYMTLComputePassDescriptor(uint64_t *result, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a3 + 56);
  *(void *)(a3 + 56) = v5 + 104;
  if (a4)
  {
    *(void *)(v5 + 96) = 0;
    *(_OWORD *)(v5 + 64) = 0u;
    *(_OWORD *)(v5 + 8mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = 0u;
    *(_OWORD *)(v5 + 32) = 0u;
    *(_OWORD *)(v5 + 48) = 0u;
    *(_OWORD *)uint64_t v5 = 0u;
    *(_OWORD *)(v5 + 16) = 0u;
    uint64_t v7 = result + 2;
    *(unsigned char *)(v5 + 96) = result[1];
    while (1)
    {
      uint64_t v8 = *v7;
      if (*v7 == -1) {
        break;
      }
      uint64_t v9 = v7[1];
      uint64_t v10 = v7[2];
      uint64_t v11 = v7[3];
      if (a5)
      {
        unint64_t result = (uint64_t *)GetStream_11288(a5, v9);
        if (result) {
          uint64_t v9 = *result;
        }
        else {
          uint64_t v9 = 0;
        }
      }
      uint64_t v12 = (void *)(v5 + 24 * v8);
      *uint64_t v12 = v11;
      v12[1] = v9;
      void v12[2] = v10;
      v7 += 4;
    }
  }
  return result;
}

unint64_t EncodeDYMTLComputePassDescriptor(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  if (a3 >= 8)
  {
    *a2 = 81;
    if (a3 >= 0x10) {
      a2[1] = *(unsigned __int8 *)(a1 + 96);
    }
  }
  uint64_t v7 = 0;
  uint64_t v8 = (uint64_t *)(a1 + 8);
  unint64_t v9 = 16;
  do
  {
    uint64_t v10 = *v8;
    if (*v8)
    {
      if (v9 + 8 <= a3)
      {
        a2[v9 / 8] = v7;
        uint64_t v10 = *v8;
      }
      uint64_t v15 = v10;
      entry = find_entry(a4, &v15, 8uLL, 0);
      if (*entry) {
        uint64_t v12 = *(void *)(*entry + 32);
      }
      else {
        uint64_t v12 = 0;
      }
      if (v9 + 16 <= a3) {
        a2[v9 / 8 + 1] = *(void *)(v12 + 8);
      }
      unint64_t v13 = v9 + 24;
      if (v9 + 24 <= a3) {
        a2[v9 / 8 + 2] = v8[1];
      }
      v9 += 32;
      if (v9 <= a3) {
        *(void *)((char *)a2 + v13) = *(v8 - 1);
      }
    }
    ++v7;
    v8 += 3;
  }
  while (v7 != 4);
  unint64_t result = v9 + 8;
  if (v9 + 8 <= a3) {
    a2[v9 / 8] = -1;
  }
  return result;
}

uint64_t *DecodeDYMTLResourceStatePassDescriptor(uint64_t *result, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5 = *(_OWORD **)(a3 + 48);
  *(void *)(a3 + 48) = v5 + 6;
  if (a4)
  {
    v5[4] = 0u;
    void v5[5] = 0u;
    v5[2] = 0u;
    v5[3] = 0u;
    _OWORD *v5 = 0u;
    v5[1] = 0u;
    for (uint64_t i = result + 1; ; i += 4)
    {
      uint64_t v8 = *i;
      if (*i == -1) {
        break;
      }
      uint64_t v9 = i[1];
      uint64_t v10 = i[2];
      uint64_t v11 = i[3];
      if (a5)
      {
        unint64_t result = (uint64_t *)GetStream_11288(a5, v9);
        if (result) {
          uint64_t v9 = *result;
        }
        else {
          uint64_t v9 = 0;
        }
      }
      uint64_t v12 = (void *)v5 + 3 * v8;
      *uint64_t v12 = v11;
      v12[1] = v9;
      void v12[2] = v10;
    }
  }
  return result;
}

unint64_t EncodeDYMTLResourceStatePassDescriptor(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  if (a3 >= 8) {
    *a2 = 81;
  }
  uint64_t v7 = 0;
  uint64_t v8 = (uint64_t *)(a1 + 8);
  unint64_t v9 = 8;
  do
  {
    uint64_t v10 = *v8;
    if (*v8)
    {
      if (v9 + 8 <= a3)
      {
        a2[v9 / 8] = v7;
        uint64_t v10 = *v8;
      }
      uint64_t v15 = v10;
      entry = find_entry(a4, &v15, 8uLL, 0);
      if (*entry) {
        uint64_t v12 = *(void *)(*entry + 32);
      }
      else {
        uint64_t v12 = 0;
      }
      if (v9 + 16 <= a3) {
        a2[v9 / 8 + 1] = *(void *)(v12 + 8);
      }
      unint64_t v13 = v9 + 24;
      if (v9 + 24 <= a3) {
        a2[v9 / 8 + 2] = v8[1];
      }
      v9 += 32;
      if (v9 <= a3) {
        *(void *)((char *)a2 + v13) = *(v8 - 1);
      }
    }
    ++v7;
    v8 += 3;
  }
  while (v7 != 4);
  unint64_t result = v9 + 8;
  if (v9 + 8 <= a3) {
    a2[v9 / 8] = -1;
  }
  return result;
}

uint64_t *DecodeDYMTLAccelerationStructurePassDescriptor(uint64_t *result, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5 = *(_OWORD **)(a3 + 40);
  *(void *)(a3 + 4mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = v5 + 6;
  if (a4)
  {
    v5[4] = 0u;
    void v5[5] = 0u;
    v5[2] = 0u;
    v5[3] = 0u;
    _OWORD *v5 = 0u;
    v5[1] = 0u;
    for (uint64_t i = result + 1; ; i += 4)
    {
      uint64_t v8 = *i;
      if (*i == -1) {
        break;
      }
      uint64_t v9 = i[1];
      uint64_t v10 = i[2];
      uint64_t v11 = i[3];
      if (a5)
      {
        unint64_t result = (uint64_t *)GetStream_11288(a5, v9);
        if (result) {
          uint64_t v9 = *result;
        }
        else {
          uint64_t v9 = 0;
        }
      }
      uint64_t v12 = (void *)v5 + 3 * v8;
      *uint64_t v12 = v11;
      v12[1] = v9;
      void v12[2] = v10;
    }
  }
  return result;
}

unint64_t EncodeDYMTLAccelerationStructurePassDescriptor(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  if (a3 >= 8) {
    *a2 = 81;
  }
  uint64_t v7 = 0;
  uint64_t v8 = (uint64_t *)(a1 + 8);
  unint64_t v9 = 8;
  do
  {
    uint64_t v10 = *v8;
    if (*v8)
    {
      if (v9 + 8 <= a3)
      {
        a2[v9 / 8] = v7;
        uint64_t v10 = *v8;
      }
      uint64_t v15 = v10;
      entry = find_entry(a4, &v15, 8uLL, 0);
      if (*entry) {
        uint64_t v12 = *(void *)(*entry + 32);
      }
      else {
        uint64_t v12 = 0;
      }
      if (v9 + 16 <= a3) {
        a2[v9 / 8 + 1] = *(void *)(v12 + 8);
      }
      unint64_t v13 = v9 + 24;
      if (v9 + 24 <= a3) {
        a2[v9 / 8 + 2] = v8[1];
      }
      v9 += 32;
      if (v9 <= a3) {
        *(void *)((char *)a2 + v13) = *(v8 - 1);
      }
    }
    ++v7;
    v8 += 3;
  }
  while (v7 != 4);
  unint64_t result = v9 + 8;
  if (v9 + 8 <= a3) {
    a2[v9 / 8] = -1;
  }
  return result;
}

uint64_t DecodeDYMTLIntersectionFunctionTableDescriptor(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = *(void *)(a3 + 32);
  *(void *)(a3 + 32) = v4 + 16;
  if (a4)
  {
    unsigned int v5 = *(_DWORD *)result;
    *(_DWORD *)(v4 + 8) = *(void *)(result + 8);
    if (v5 >= 0x36)
    {
      *(void *)uint64_t v4 = *(void *)(result + 16);
      *(unsigned char *)(v4 + 12) = *(void *)(result + 24);
    }
  }
  return result;
}

uint64_t EncodeDYMTLIntersectionFunctionTableDescriptor(uint64_t a1, void *a2, unint64_t a3)
{
  if (a3 >= 8)
  {
    *a2 = 81;
    if (a3 >= 0x10)
    {
      a2[1] = *(unsigned int *)(a1 + 8);
      if (a3 >= 0x18)
      {
        a2[2] = *(void *)a1;
        if (a3 >= 0x20) {
          a2[3] = *(unsigned __int8 *)(a1 + 12);
        }
      }
    }
  }
  return 32;
}

uint64_t *DecodeDYMTLRenderPipelineFunctionsDescriptor(uint64_t *result, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v8 = result[1];
  unint64_t v9 = result + 2;
  uint64_t v46 = v8;
  if (v8)
  {
    uint64_t v10 = *(uint64_t **)(a3 + 400);
    uint64_t v45 = v10;
    do
    {
      uint64_t v12 = *v9++;
      uint64_t v11 = v12;
      if (a4)
      {
        if (a5)
        {
          unint64_t result = (uint64_t *)GetStream_11288(a5, v11);
          if (result) {
            uint64_t v11 = *result;
          }
          else {
            uint64_t v11 = 0;
          }
        }
        uint64_t v10 = *(uint64_t **)(a3 + 400);
        *uint64_t v10 = v11;
      }
      *(void *)(a3 + 40mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = ++v10;
      --v8;
    }
    while (v8);
  }
  else
  {
    uint64_t v45 = 0;
  }
  uint64_t v15 = *v9;
  uint64_t v14 = v9 + 1;
  uint64_t v13 = v15;
  size_t v44 = (uint64_t *)v15;
  if (v15)
  {
    size_t v16 = *(uint64_t **)(a3 + 400);
    size_t v43 = v16;
    do
    {
      uint64_t v18 = *v14++;
      uint64_t v17 = v18;
      if (a4)
      {
        if (a5)
        {
          unint64_t result = (uint64_t *)GetStream_11288(a5, v17);
          if (result) {
            uint64_t v17 = *result;
          }
          else {
            uint64_t v17 = 0;
          }
        }
        size_t v16 = *(uint64_t **)(a3 + 400);
        uint64_t *v16 = v17;
      }
      *(void *)(a3 + 40mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = ++v16;
      --v13;
    }
    while (v13);
  }
  else
  {
    size_t v43 = 0;
  }
  uint64_t v21 = *v14;
  uint64_t v19 = v14 + 1;
  uint64_t v20 = (uint64_t *)v21;
  if (v21)
  {
    uint64_t v22 = *(uint64_t **)(a3 + 400);
    uint64_t v23 = v20;
    uint64_t v42 = v22;
    do
    {
      uint64_t v25 = *v19++;
      uint64_t v24 = v25;
      if (a4)
      {
        if (a5)
        {
          unint64_t result = (uint64_t *)GetStream_11288(a5, v24);
          if (result) {
            uint64_t v24 = *result;
          }
          else {
            uint64_t v24 = 0;
          }
        }
        uint64_t v22 = *(uint64_t **)(a3 + 400);
        *uint64_t v22 = v24;
      }
      *(void *)(a3 + 40mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = ++v22;
      uint64_t v23 = (uint64_t *)((char *)v23 - 1);
    }
    while (v23);
  }
  else
  {
    uint64_t v42 = 0;
  }
  uint64_t v28 = *v19;
  size_t v27 = v19 + 1;
  uint64_t v26 = (uint64_t *)v28;
  if (v28)
  {
    int v29 = *(uint64_t **)(a3 + 400);
    uint64_t v30 = v26;
    unint64_t v31 = v29;
    do
    {
      uint64_t v33 = *v27++;
      uint64_t v32 = v33;
      if (a4)
      {
        if (a5)
        {
          unint64_t result = (uint64_t *)GetStream_11288(a5, v32);
          if (result) {
            uint64_t v32 = *result;
          }
          else {
            uint64_t v32 = 0;
          }
        }
        unint64_t v31 = *(uint64_t **)(a3 + 400);
        *unint64_t v31 = v32;
      }
      *(void *)(a3 + 40mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = ++v31;
      uint64_t v30 = (uint64_t *)((char *)v30 - 1);
    }
    while (v30);
  }
  else
  {
    int v29 = 0;
  }
  uint64_t v34 = *v27;
  if (*v27)
  {
    uint64_t v35 = *(uint64_t **)(a3 + 400);
    size_t v36 = v27 + 1;
    uint64_t v37 = v34;
    size_t v38 = v35;
    do
    {
      uint64_t v40 = *v36++;
      uint64_t v39 = v40;
      if (a4)
      {
        if (a5)
        {
          unint64_t result = (uint64_t *)GetStream_11288(a5, v39);
          if (result) {
            uint64_t v39 = *result;
          }
          else {
            uint64_t v39 = 0;
          }
        }
        size_t v38 = *(uint64_t **)(a3 + 400);
        uint64_t *v38 = v39;
      }
      *(void *)(a3 + 40mach_msg_server((BOOLean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *))mach_exc_server, 0x40000u, exceptionPort, 0) = ++v38;
      --v37;
    }
    while (v37);
  }
  else
  {
    uint64_t v35 = 0;
  }
  size_t v41 = *(uint64_t ***)(a3 + 24);
  *(void *)(a3 + 24) = v41 + 10;
  if (a4)
  {
    *size_t v41 = v43;
    v41[1] = v44;
    void v41[2] = v29;
    void v41[3] = v26;
    v41[4] = v35;
    v41[5] = (uint64_t *)v34;
    v41[6] = v42;
    v41[7] = v20;
    v41[8] = v45;
    v41[9] = (uint64_t *)v46;
  }
  return result;
}