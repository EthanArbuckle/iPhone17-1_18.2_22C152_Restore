uint64_t AssetDownloadResponse.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t vars8;

  type metadata accessor for UUID();
  sub_24A08F280();
  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  return v5(a1, v1, v3);
}

uint64_t AssetDownloadResponse.asset.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for AssetDownloadResponse();
  return sub_24A08E104(v1 + *(int *)(v3 + 20), a1, (void (*)(void))type metadata accessor for Asset);
}

uint64_t type metadata accessor for AssetDownloadResponse()
{
  uint64_t result = qword_26975D3B8;
  if (!qword_26975D3B8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t AssetDownloadResponse.fileURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AssetDownloadResponse() + 24);
  type metadata accessor for URL();
  sub_24A08F280();
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  return v6(a1, v3, v4);
}

uint64_t AssetDownloadResponse.range.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for AssetDownloadResponse() + 28));
}

uint64_t AssetDownloadResponse.init(id:asset:fileURL:range:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X8>)
{
  type metadata accessor for UUID();
  sub_24A08F280();
  (*(void (**)(uint64_t, uint64_t))(v14 + 32))(a7, a1);
  v15 = (int *)type metadata accessor for AssetDownloadResponse();
  sub_24A08CF08(a2, a7 + v15[5]);
  uint64_t v16 = a7 + v15[6];
  type metadata accessor for URL();
  sub_24A08F280();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 32))(v16, a3);
  uint64_t v19 = a7 + v15[7];
  *(void *)uint64_t v19 = a4;
  *(void *)(v19 + 8) = a5;
  *(unsigned char *)(v19 + 16) = a6 & 1;
  return result;
}

uint64_t sub_24A08CF08(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Asset(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void AssetDownloadResponse.hash(into:)()
{
  uint64_t v1 = v0;
  type metadata accessor for UUID();
  sub_24A08E248(&qword_26975D340, MEMORY[0x263F07508]);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v2 = type metadata accessor for AssetDownloadResponse();
  uint64_t v3 = v0 + *(int *)(v2 + 20);
  Asset.ID.hash(into:)();
  uint64_t v4 = type metadata accessor for Asset(0);
  uint64_t v5 = (uint64_t *)(v3 + *(int *)(v4 + 20));
  uint64_t v6 = *v5;
  unint64_t v7 = v5[1];
  uint64_t v8 = v5[2];
  unint64_t v9 = v5[3];
  sub_24A08DE84(*v5, v7);
  Data.hash(into:)();
  sub_24A08DEDC(v6, v7);
  sub_24A08DE84(v8, v9);
  Data.hash(into:)();
  sub_24A08DEDC(v8, v9);
  Hasher._combine(_:)(*(void *)(v3 + *(int *)(v4 + 24)));
  type metadata accessor for URL();
  sub_24A08E248(&qword_26975D348, MEMORY[0x263F06EA8]);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v10 = v1 + *(int *)(v2 + 28);
  if (*(unsigned char *)(v10 + 16) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v12 = *(void *)v10;
    Swift::UInt v11 = *(void *)(v10 + 8);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v12);
    Hasher._combine(_:)(v11);
  }
}

BOOL static AssetDownloadResponse.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((static UUID.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = (int *)type metadata accessor for AssetDownloadResponse();
  if (!static Asset.== infix(_:_:)(a1 + v4[5], a2 + v4[5]) || (MEMORY[0x24C5BACC0](a1 + v4[6], a2 + v4[6]) & 1) == 0) {
    return 0;
  }
  uint64_t v5 = v4[7];
  uint64_t v6 = (uint64_t *)(a1 + v5);
  char v7 = *(unsigned char *)(a1 + v5 + 16);
  uint64_t v8 = (uint64_t *)(a2 + v5);
  if ((v7 & 1) == 0)
  {
    if ((v8[2] & 1) == 0)
    {
      uint64_t v10 = *v6;
      uint64_t v9 = v6[1];
      uint64_t v12 = *v8;
      uint64_t v11 = v8[1];
      if (v10 == v12 && v9 == v11) {
        return 1;
      }
    }
    return 0;
  }
  return (v8[2] & 1) != 0;
}

BOOL sub_24A08D1E0(char a1, char a2)
{
  return a1 == a2;
}

void sub_24A08D1F0(uint64_t a1, unsigned __int8 a2)
{
}

uint64_t sub_24A08D218(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x7465737361 && a2 == 0xE500000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x4C5255656C6966 && a2 == 0xE700000000000000;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (a1 == 0x65676E6172 && a2 == 0xE500000000000000)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v9) {
          return 3;
        }
        else {
          return 4;
        }
      }
    }
  }
}

uint64_t sub_24A08D3A0()
{
  return 4;
}

Swift::Int sub_24A08D3A8(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

uint64_t sub_24A08D3F0()
{
  return 0;
}

uint64_t sub_24A08D3FC(char a1)
{
  uint64_t result = 25705;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x7465737361;
      break;
    case 2:
      uint64_t result = 0x4C5255656C6966;
      break;
    case 3:
      uint64_t result = 0x65676E6172;
      break;
    default:
      return result;
  }
  return result;
}

BOOL sub_24A08D47C(char *a1, char *a2)
{
  return sub_24A08D1E0(*a1, *a2);
}

Swift::Int sub_24A08D488()
{
  return sub_24A08D3A8(*v0);
}

void sub_24A08D490(uint64_t a1)
{
  sub_24A08D1F0(a1, *v1);
}

Swift::Int sub_24A08D498()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_24A08D4DC()
{
  return sub_24A08D3FC(*v0);
}

uint64_t sub_24A08D4E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_24A08D218(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_24A08D50C()
{
  return sub_24A08D3F0();
}

uint64_t sub_24A08D52C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_24A08D3A0();
  *a1 = result;
  return result;
}

uint64_t sub_24A08D554(uint64_t a1)
{
  unint64_t v2 = sub_24A08DFBC();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A08D590(uint64_t a1)
{
  unint64_t v2 = sub_24A08DFBC();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t AssetDownloadResponse.encode(to:)(void *a1)
{
  uint64_t v4 = sub_24A08DF34(&qword_26975D350);
  sub_24A08F24C();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388]();
  sub_24A08F2C8();
  sub_24A08DF78(a1, a1[3]);
  sub_24A08DFBC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for UUID();
  sub_24A08E248(&qword_26975D360, MEMORY[0x263F07508]);
  sub_24A08F2F4();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for AssetDownloadResponse();
    type metadata accessor for Asset(0);
    sub_24A08E248(&qword_26975D368, (void (*)(uint64_t))type metadata accessor for Asset);
    sub_24A08F290();
    type metadata accessor for URL();
    sub_24A08E248(&qword_26975D370, MEMORY[0x263F06EA8]);
    sub_24A08F290();
    sub_24A08DF34(&qword_26975D378);
    sub_24A08E0A0(&qword_26975D380);
    sub_24A08F2F4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v2, v4);
}

Swift::Int AssetDownloadResponse.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t AssetDownloadResponse.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v26 = a2;
  uint64_t v31 = type metadata accessor for URL();
  sub_24A08F24C();
  uint64_t v28 = v4;
  MEMORY[0x270FA5388]();
  sub_24A08F2E0();
  uint64_t v27 = v5;
  type metadata accessor for Asset(0);
  sub_24A08F280();
  MEMORY[0x270FA5388]();
  sub_24A08F2C8();
  uint64_t v33 = type metadata accessor for UUID();
  sub_24A08F24C();
  uint64_t v29 = v6;
  MEMORY[0x270FA5388]();
  sub_24A08F2E0();
  uint64_t v34 = v7;
  uint64_t v32 = sub_24A08DF34(&qword_26975D388);
  sub_24A08F24C();
  uint64_t v30 = v8;
  MEMORY[0x270FA5388]();
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for AssetDownloadResponse();
  sub_24A08F280();
  MEMORY[0x270FA5388]();
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A08DF78(a1, a1[3]);
  sub_24A08DFBC();
  v35 = v10;
  uint64_t v14 = (uint64_t)v36;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v14) {
    return sub_24A08E050((uint64_t)a1);
  }
  uint64_t v15 = v11;
  uint64_t v16 = (uint64_t)v13;
  v36 = a1;
  uint64_t v17 = v31;
  LOBYTE(v37) = 0;
  sub_24A08E248(&qword_26975D390, MEMORY[0x263F07508]);
  uint64_t v18 = v33;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 32))(v13, v34, v18);
  LOBYTE(v37) = 1;
  sub_24A08E248(&qword_26975D398, (void (*)(uint64_t))type metadata accessor for Asset);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v19 = v15;
  sub_24A08CF08(v2, v16 + *(int *)(v15 + 20));
  LOBYTE(v37) = 2;
  sub_24A08E248(&qword_26975D3A0, MEMORY[0x263F06EA8]);
  uint64_t v20 = v27;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 32))(v16 + *(int *)(v19 + 24), v20, v17);
  sub_24A08DF34(&qword_26975D378);
  char v39 = 3;
  sub_24A08E0A0(&qword_26975D3A8);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  sub_24A08F2BC();
  v21();
  char v22 = v38;
  uint64_t v23 = v16 + *(int *)(v19 + 28);
  *(_OWORD *)uint64_t v23 = v37;
  *(unsigned char *)(v23 + 16) = v22;
  sub_24A08E104(v16, v26, (void (*)(void))type metadata accessor for AssetDownloadResponse);
  sub_24A08E050((uint64_t)v36);
  return sub_24A08E164(v16, (void (*)(void))type metadata accessor for AssetDownloadResponse);
}

Swift::Int sub_24A08DE14()
{
  return Hasher._finalize()();
}

uint64_t sub_24A08DE50@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return AssetDownloadResponse.init(from:)(a1, a2);
}

uint64_t sub_24A08DE68(void *a1)
{
  return AssetDownloadResponse.encode(to:)(a1);
}

uint64_t sub_24A08DE84(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }
  return swift_retain();
}

uint64_t sub_24A08DEDC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }
  return swift_release();
}

uint64_t sub_24A08DF34(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

void *sub_24A08DF78(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_24A08DFBC()
{
  unint64_t result = qword_26975D358;
  if (!qword_26975D358)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975D358);
  }
  return result;
}

uint64_t sub_24A08E008(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_24A08E050(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_24A08E0A0(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_24A08E008(&qword_26975D378);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24A08E104(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_24A08F280();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t sub_24A08E164(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_24A08F280();
  sub_24A08F2BC();
  v3();
  return a1;
}

uint64_t sub_24A08E1B8()
{
  return sub_24A08E248(&qword_26975D340, MEMORY[0x263F07508]);
}

uint64_t sub_24A08E200()
{
  return sub_24A08E248(&qword_26975D3B0, (void (*)(uint64_t))type metadata accessor for AssetDownloadResponse);
}

uint64_t sub_24A08E248(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for AssetDownloadResponse(char *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v37 = *a2;
    *(void *)a1 = *a2;
    a1 = (char *)(v37 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = &a1[v8];
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v40 = type metadata accessor for URL();
    char v39 = *(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 16);
    v39(v9, v10, v40);
    uint64_t v11 = (int *)type metadata accessor for Asset.ID(0);
    uint64_t v12 = v11[5];
    v13 = &v9[v12];
    uint64_t v14 = &v10[v12];
    uint64_t v15 = *((void *)v14 + 1);
    *(void *)v13 = *(void *)v14;
    *((void *)v13 + 1) = v15;
    uint64_t v16 = v11[6];
    uint64_t v17 = (uint64_t *)&v9[v16];
    uint64_t v18 = (uint64_t *)&v10[v16];
    uint64_t v19 = *v18;
    unint64_t v20 = v18[1];
    swift_bridgeObjectRetain();
    sub_24A08DE84(v19, v20);
    *uint64_t v17 = v19;
    v17[1] = v20;
    uint64_t v21 = v11[7];
    char v22 = (uint64_t *)&v9[v21];
    uint64_t v23 = (uint64_t *)&v10[v21];
    uint64_t v24 = *v23;
    unint64_t v25 = v23[1];
    sub_24A08DE84(*v23, v25);
    *char v22 = v24;
    v22[1] = v25;
    uint64_t v26 = type metadata accessor for Asset(0);
    uint64_t v27 = *(int *)(v26 + 20);
    uint64_t v28 = (uint64_t *)&v9[v27];
    uint64_t v29 = &v10[v27];
    uint64_t v30 = *(void *)&v10[v27];
    unint64_t v31 = *(void *)&v10[v27 + 8];
    sub_24A08DE84(v30, v31);
    *uint64_t v28 = v30;
    v28[1] = v31;
    uint64_t v32 = *((void *)v29 + 2);
    unint64_t v33 = *((void *)v29 + 3);
    sub_24A08DE84(v32, v33);
    v28[2] = v32;
    v28[3] = v33;
    *(void *)&v9[*(int *)(v26 + 24)] = *(void *)&v10[*(int *)(v26 + 24)];
    v39(&a1[a3[6]], (char *)a2 + a3[6], v40);
    uint64_t v34 = a3[7];
    v35 = &a1[v34];
    v36 = (char *)a2 + v34;
    *(_OWORD *)v35 = *(_OWORD *)v36;
    v35[16] = v36[16];
  }
  return a1;
}

uint64_t destroy for AssetDownloadResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t))v11)((void *)(v6 - 8), v5, v6);
  uint64_t v7 = type metadata accessor for Asset.ID(0);
  swift_bridgeObjectRelease();
  sub_24A08DEDC(*(void *)(v5 + *(int *)(v7 + 24)), *(void *)(v5 + *(int *)(v7 + 24) + 8));
  sub_24A08DEDC(*(void *)(v5 + *(int *)(v7 + 28)), *(void *)(v5 + *(int *)(v7 + 28) + 8));
  uint64_t v8 = v5 + *(int *)(type metadata accessor for Asset(0) + 20);
  sub_24A08DEDC(*(void *)v8, *(void *)(v8 + 8));
  sub_24A08DEDC(*(void *)(v8 + 16), *(void *)(v8 + 24));
  uint64_t v9 = a1 + *(int *)(a2 + 24);
  return v11(v9, v6);
}

uint64_t initializeWithCopy for AssetDownloadResponse(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  char v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
  v38(v8, v9, v10);
  uint64_t v11 = (int *)type metadata accessor for Asset.ID(0);
  uint64_t v12 = v11[5];
  v13 = (void *)(v8 + v12);
  uint64_t v14 = (void *)(v9 + v12);
  uint64_t v15 = v14[1];
  void *v13 = *v14;
  v13[1] = v15;
  uint64_t v16 = v11[6];
  uint64_t v17 = (uint64_t *)(v8 + v16);
  uint64_t v18 = (uint64_t *)(v9 + v16);
  uint64_t v19 = *v18;
  unint64_t v20 = v18[1];
  swift_bridgeObjectRetain();
  sub_24A08DE84(v19, v20);
  *uint64_t v17 = v19;
  v17[1] = v20;
  uint64_t v21 = v11[7];
  char v22 = (uint64_t *)(v8 + v21);
  uint64_t v23 = (uint64_t *)(v9 + v21);
  uint64_t v24 = *v23;
  unint64_t v25 = v23[1];
  sub_24A08DE84(*v23, v25);
  *char v22 = v24;
  v22[1] = v25;
  uint64_t v26 = type metadata accessor for Asset(0);
  uint64_t v27 = *(int *)(v26 + 20);
  uint64_t v28 = (uint64_t *)(v8 + v27);
  uint64_t v29 = v9 + v27;
  uint64_t v30 = *(void *)(v9 + v27);
  unint64_t v31 = *(void *)(v9 + v27 + 8);
  sub_24A08DE84(v30, v31);
  *uint64_t v28 = v30;
  v28[1] = v31;
  uint64_t v32 = *(void *)(v29 + 16);
  unint64_t v33 = *(void *)(v29 + 24);
  sub_24A08DE84(v32, v33);
  v28[2] = v32;
  v28[3] = v33;
  *(void *)(v8 + *(int *)(v26 + 24)) = *(void *)(v9 + *(int *)(v26 + 24));
  v38(a1 + a3[6], a2 + a3[6], v10);
  uint64_t v34 = a3[7];
  uint64_t v35 = a1 + v34;
  uint64_t v36 = a2 + v34;
  *(_OWORD *)uint64_t v35 = *(_OWORD *)v36;
  *(unsigned char *)(v35 + 16) = *(unsigned char *)(v36 + 16);
  return a1;
}

uint64_t assignWithCopy for AssetDownloadResponse(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24);
  v46(v8, v9, v10);
  uint64_t v11 = (int *)type metadata accessor for Asset.ID(0);
  uint64_t v12 = v11[5];
  v13 = (void *)(v8 + v12);
  uint64_t v14 = (void *)(v9 + v12);
  void *v13 = *v14;
  v13[1] = v14[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v15 = v11[6];
  uint64_t v16 = (uint64_t *)(v8 + v15);
  uint64_t v17 = (uint64_t *)(v9 + v15);
  uint64_t v18 = *v17;
  unint64_t v19 = v17[1];
  sub_24A08DE84(*v17, v19);
  uint64_t v20 = *v16;
  unint64_t v21 = v16[1];
  *uint64_t v16 = v18;
  v16[1] = v19;
  sub_24A08DEDC(v20, v21);
  uint64_t v22 = v11[7];
  uint64_t v23 = (uint64_t *)(v8 + v22);
  uint64_t v24 = (uint64_t *)(v9 + v22);
  uint64_t v25 = *v24;
  unint64_t v26 = v24[1];
  sub_24A08DE84(*v24, v26);
  uint64_t v27 = *v23;
  unint64_t v28 = v23[1];
  *uint64_t v23 = v25;
  v23[1] = v26;
  sub_24A08DEDC(v27, v28);
  uint64_t v29 = type metadata accessor for Asset(0);
  uint64_t v30 = *(int *)(v29 + 20);
  unint64_t v31 = (uint64_t *)(v8 + v30);
  uint64_t v32 = v9 + v30;
  uint64_t v33 = *(void *)(v9 + v30);
  unint64_t v34 = *(void *)(v9 + v30 + 8);
  sub_24A08DE84(v33, v34);
  uint64_t v35 = *v31;
  unint64_t v36 = v31[1];
  *unint64_t v31 = v33;
  v31[1] = v34;
  sub_24A08DEDC(v35, v36);
  uint64_t v37 = *(void *)(v32 + 16);
  unint64_t v38 = *(void *)(v32 + 24);
  sub_24A08DE84(v37, v38);
  uint64_t v39 = v31[2];
  unint64_t v40 = v31[3];
  v31[2] = v37;
  v31[3] = v38;
  sub_24A08DEDC(v39, v40);
  *(void *)(v8 + *(int *)(v29 + 24)) = *(void *)(v9 + *(int *)(v29 + 24));
  v46(a1 + a3[6], a2 + a3[6], v10);
  uint64_t v41 = a3[7];
  uint64_t v42 = a1 + v41;
  uint64_t v43 = a2 + v41;
  char v44 = *(unsigned char *)(v43 + 16);
  *(_OWORD *)uint64_t v42 = *(_OWORD *)v43;
  *(unsigned char *)(v42 + 16) = v44;
  return a1;
}

uint64_t initializeWithTake for AssetDownloadResponse(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  uint64_t v12 = (int *)type metadata accessor for Asset.ID(0);
  *(_OWORD *)(v8 + v12[5]) = *(_OWORD *)(v9 + v12[5]);
  *(_OWORD *)(v8 + v12[6]) = *(_OWORD *)(v9 + v12[6]);
  *(_OWORD *)(v8 + v12[7]) = *(_OWORD *)(v9 + v12[7]);
  uint64_t v13 = type metadata accessor for Asset(0);
  uint64_t v14 = *(int *)(v13 + 20);
  uint64_t v15 = (_OWORD *)(v8 + v14);
  uint64_t v16 = (_OWORD *)(v9 + v14);
  long long v17 = v16[1];
  _OWORD *v15 = *v16;
  v15[1] = v17;
  *(void *)(v8 + *(int *)(v13 + 24)) = *(void *)(v9 + *(int *)(v13 + 24));
  v11(a1 + a3[6], a2 + a3[6], v10);
  uint64_t v18 = a3[7];
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
  *(unsigned char *)(v19 + 16) = *(unsigned char *)(v20 + 16);
  return a1;
}

uint64_t assignWithTake for AssetDownloadResponse(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40);
  v35(v8, v9, v10);
  uint64_t v11 = (int *)type metadata accessor for Asset.ID(0);
  uint64_t v12 = v11[5];
  uint64_t v13 = (void *)(v8 + v12);
  uint64_t v14 = (uint64_t *)(v9 + v12);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  void *v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  uint64_t v17 = v11[6];
  uint64_t v18 = *(void *)(v8 + v17);
  unint64_t v19 = *(void *)(v8 + v17 + 8);
  *(_OWORD *)(v8 + v17) = *(_OWORD *)(v9 + v17);
  sub_24A08DEDC(v18, v19);
  uint64_t v20 = v11[7];
  uint64_t v21 = *(void *)(v8 + v20);
  unint64_t v22 = *(void *)(v8 + v20 + 8);
  *(_OWORD *)(v8 + v20) = *(_OWORD *)(v9 + v20);
  sub_24A08DEDC(v21, v22);
  uint64_t v23 = type metadata accessor for Asset(0);
  uint64_t v24 = *(int *)(v23 + 20);
  uint64_t v25 = v8 + v24;
  uint64_t v26 = v9 + v24;
  uint64_t v27 = *(void *)(v8 + v24);
  unint64_t v28 = *(void *)(v8 + v24 + 8);
  *(_OWORD *)(v8 + v24) = *(_OWORD *)(v9 + v24);
  sub_24A08DEDC(v27, v28);
  uint64_t v29 = *(void *)(v25 + 16);
  unint64_t v30 = *(void *)(v25 + 24);
  *(_OWORD *)(v25 + 16) = *(_OWORD *)(v26 + 16);
  sub_24A08DEDC(v29, v30);
  *(void *)(v8 + *(int *)(v23 + 24)) = *(void *)(v9 + *(int *)(v23 + 24));
  v35(a1 + a3[6], a2 + a3[6], v10);
  uint64_t v31 = a3[7];
  uint64_t v32 = a1 + v31;
  uint64_t v33 = a2 + v31;
  *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
  *(unsigned char *)(v32 + 16) = *(unsigned char *)(v33 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for AssetDownloadResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A08ECF4);
}

uint64_t sub_24A08ECF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for UUID();
  sub_24A08F268();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1;
  }
  else
  {
    type metadata accessor for Asset(0);
    sub_24A08F268();
    if (*(_DWORD *)(v11 + 84) == a2)
    {
      uint64_t v8 = v10;
      uint64_t v12 = *(int *)(a3 + 20);
    }
    else
    {
      uint64_t v8 = type metadata accessor for URL();
      uint64_t v12 = *(int *)(a3 + 24);
    }
    uint64_t v9 = a1 + v12;
  }
  return _s10CloudAsset21UploadResponseMessageOwet_0(v9, a2, v8);
}

uint64_t _s10CloudAsset21UploadResponseMessageOwet_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for AssetDownloadResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A08EDD0);
}

uint64_t sub_24A08EDD0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for UUID();
  sub_24A08F268();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1;
  }
  else
  {
    type metadata accessor for Asset(0);
    sub_24A08F268();
    if (*(_DWORD *)(v13 + 84) == a3)
    {
      uint64_t v10 = v12;
      uint64_t v14 = *(int *)(a4 + 20);
    }
    else
    {
      uint64_t v10 = type metadata accessor for URL();
      uint64_t v14 = *(int *)(a4 + 24);
    }
    uint64_t v11 = a1 + v14;
  }
  return _s10CloudAsset21UploadResponseMessageOwst_0(v11, a2, a2, v10);
}

uint64_t _s10CloudAsset21UploadResponseMessageOwst_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t sub_24A08EEA0()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Asset(319);
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for URL();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

unsigned char *initializeBufferWithCopyOfBuffer for AssetDownloadResponse.CodingKeys(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for AssetDownloadResponse.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFD)
  {
    if (a2 + 3 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 3) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 4;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v5 = v6 - 4;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for AssetDownloadResponse.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24A08F110);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

uint64_t sub_24A08F138(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_24A08F144(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for AssetDownloadResponse.CodingKeys()
{
  return &type metadata for AssetDownloadResponse.CodingKeys;
}

unint64_t sub_24A08F160()
{
  unint64_t result = qword_26975D3C8;
  if (!qword_26975D3C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975D3C8);
  }
  return result;
}

unint64_t sub_24A08F1B0()
{
  unint64_t result = qword_26975D3D0;
  if (!qword_26975D3D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975D3D0);
  }
  return result;
}

unint64_t sub_24A08F200()
{
  unint64_t result = qword_26975D3D8;
  if (!qword_26975D3D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975D3D8);
  }
  return result;
}

uint64_t sub_24A08F290()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

BOOL static Asset.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((MEMORY[0x24C5BACC0]() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = type metadata accessor for Asset.ID(0);
  sub_24A093CB4(v4);
  BOOL v7 = v7 && v5 == v6;
  if (v7 || (v8 = _stringCompareWithSmolCheck(_:_:expecting:)(), BOOL result = 0, (v8 & 1) != 0))
  {
    sub_24A093C94();
    if (v10)
    {
      sub_24A093C94();
      if (v11)
      {
        uint64_t v23 = type metadata accessor for Asset(0);
        uint64_t v12 = *(int *)(v23 + 20);
        uint64_t v13 = *(void *)(a1 + v12);
        unint64_t v14 = *(void *)(a1 + v12 + 8);
        uint64_t v16 = *(void *)(a1 + v12 + 16);
        unint64_t v15 = *(void *)(a1 + v12 + 24);
        uint64_t v17 = (uint64_t *)(a2 + v12);
        uint64_t v19 = *v17;
        unint64_t v18 = v17[1];
        uint64_t v20 = v17[2];
        unint64_t v21 = v17[3];
        sub_24A08DE84(v13, v14);
        sub_24A08DE84(v16, v15);
        sub_24A08DE84(v19, v18);
        sub_24A08DE84(v20, v21);
        if (MEMORY[0x24C5BAD10](v13, v14, v19, v18))
        {
          char v22 = MEMORY[0x24C5BAD10](v16, v15, v20, v21);
          sub_24A08DEDC(v19, v18);
          sub_24A08DEDC(v20, v21);
          sub_24A08DEDC(v13, v14);
          sub_24A08DEDC(v16, v15);
          if (v22) {
            return *(void *)(a1 + *(int *)(v23 + 24)) == *(void *)(a2 + *(int *)(v23 + 24));
          }
        }
        else
        {
          sub_24A08DEDC(v19, v18);
          sub_24A08DEDC(v20, v21);
          sub_24A08DEDC(v13, v14);
          sub_24A08DEDC(v16, v15);
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t Asset.ID.Builder.__allocating_init(partition:ownerID:signature:)()
{
  sub_24A093D84();
  uint64_t v0 = swift_allocObject();
  Asset.ID.Builder.init(partition:ownerID:signature:)();
  return v0;
}

uint64_t Asset.ID.Builder.init(partition:ownerID:signature:)()
{
  sub_24A093D84();
  uint64_t v6 = v1 + OBJC_IVAR____TtCVV10CloudAsset5Asset2ID7Builder_partition;
  uint64_t v7 = type metadata accessor for URL();
  sub_24A08F24C();
  uint64_t v9 = v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v6, v5, v7);
  char v11 = (void *)(v1 + OBJC_IVAR____TtCVV10CloudAsset5Asset2ID7Builder_ownerID);
  *char v11 = v4;
  v11[1] = v3;
  uint64_t v12 = (void *)(v1 + OBJC_IVAR____TtCVV10CloudAsset5Asset2ID7Builder_signature);
  *uint64_t v12 = v2;
  v12[1] = v0;
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v5, v7);
  *(_OWORD *)(v1 + OBJC_IVAR____TtCVV10CloudAsset5Asset2ID7Builder_referenceSignature) = xmmword_24A0E6FA0;
  return v1;
}

uint64_t Asset.ID.Builder.setReferenceSignature(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = (uint64_t *)(v2 + OBJC_IVAR____TtCVV10CloudAsset5Asset2ID7Builder_referenceSignature);
  uint64_t v4 = *(void *)(v2 + OBJC_IVAR____TtCVV10CloudAsset5Asset2ID7Builder_referenceSignature);
  unint64_t v5 = *(void *)(v2 + OBJC_IVAR____TtCVV10CloudAsset5Asset2ID7Builder_referenceSignature + 8);
  *uint64_t v3 = a1;
  v3[1] = a2;
  sub_24A08DE84(a1, a2);
  sub_24A08DEDC(v4, v5);
  return swift_retain();
}

uint64_t Asset.ID.Builder.build()@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for URL();
  sub_24A08F280();
  uint64_t v3 = sub_24A093E40();
  v4(v3);
  uint64_t v6 = *(void *)(v1 + OBJC_IVAR____TtCVV10CloudAsset5Asset2ID7Builder_ownerID);
  uint64_t v5 = *(void *)(v1 + OBJC_IVAR____TtCVV10CloudAsset5Asset2ID7Builder_ownerID + 8);
  uint64_t v7 = (int *)type metadata accessor for Asset.ID(0);
  uint64_t v8 = (void *)(a1 + v7[5]);
  *uint64_t v8 = v6;
  v8[1] = v5;
  uint64_t v9 = *(void *)(v1 + OBJC_IVAR____TtCVV10CloudAsset5Asset2ID7Builder_signature);
  unint64_t v10 = *(void *)(v1 + OBJC_IVAR____TtCVV10CloudAsset5Asset2ID7Builder_signature + 8);
  char v11 = (uint64_t *)(a1 + v7[6]);
  *char v11 = v9;
  v11[1] = v10;
  uint64_t v12 = v1 + OBJC_IVAR____TtCVV10CloudAsset5Asset2ID7Builder_referenceSignature;
  uint64_t v13 = *(void *)(v1 + OBJC_IVAR____TtCVV10CloudAsset5Asset2ID7Builder_referenceSignature);
  unint64_t v14 = *(void *)(v12 + 8);
  unint64_t v15 = (uint64_t *)(a1 + v7[7]);
  uint64_t *v15 = v13;
  v15[1] = v14;
  swift_bridgeObjectRetain();
  sub_24A08DE84(v9, v10);
  return sub_24A08DE84(v13, v14);
}

uint64_t Asset.ID.Builder.deinit()
{
  type metadata accessor for URL();
  sub_24A08F280();
  uint64_t v1 = sub_24A093DD0();
  v2(v1);
  swift_bridgeObjectRelease();
  sub_24A08DEDC(*(void *)(v0 + OBJC_IVAR____TtCVV10CloudAsset5Asset2ID7Builder_signature), *(void *)(v0 + OBJC_IVAR____TtCVV10CloudAsset5Asset2ID7Builder_signature + 8));
  sub_24A08DEDC(*(void *)(v0 + OBJC_IVAR____TtCVV10CloudAsset5Asset2ID7Builder_referenceSignature), *(void *)(v0 + OBJC_IVAR____TtCVV10CloudAsset5Asset2ID7Builder_referenceSignature + 8));
  return v0;
}

uint64_t Asset.ID.Builder.__deallocating_deinit()
{
  Asset.ID.Builder.deinit();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);
  return MEMORY[0x270FA0228](v0, v1, v2);
}

uint64_t sub_24A08F828()
{
  return 1;
}

Swift::Int sub_24A08F830()
{
  return sub_24A09108C();
}

uint64_t sub_24A08F850()
{
  return 0x6675626F746F7270;
}

void sub_24A08F870(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_24A08F87C(uint64_t a1)
{
  unint64_t v2 = sub_24A090D78();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A08F8B8(uint64_t a1)
{
  unint64_t v2 = sub_24A090D78();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t Asset.ID.partition.getter()
{
  type metadata accessor for URL();
  sub_24A08F280();
  uint64_t v0 = sub_24A093C7C();
  return v1(v0);
}

uint64_t Asset.ID.storageLocation.getter()
{
  uint64_t v1 = type metadata accessor for URL.DirectoryHint();
  sub_24A08F24C();
  uint64_t v3 = v2;
  MEMORY[0x270FA5388]();
  sub_24A08F2C8();
  type metadata accessor for Asset.ID(0);
  sub_24A093D78();
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v0, *MEMORY[0x263F06E50], v1);
  sub_24A090D2C();
  swift_bridgeObjectRetain();
  URL.appending<A>(path:directoryHint:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0, v1);
  return swift_bridgeObjectRelease();
}

uint64_t Asset.ID.ownerID.getter()
{
  return sub_24A093C7C();
}

uint64_t Asset.ID.signature.getter()
{
  return sub_24A093C7C();
}

uint64_t Asset.ID.referenceSignature.getter()
{
  return sub_24A093C7C();
}

int *Asset.ID.init(storageLocation:signature:referenceSignature:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  URL.deletingLastPathComponent()();
  uint64_t v12 = URL.lastPathComponent.getter();
  uint64_t v14 = v13;
  type metadata accessor for URL();
  sub_24A08F280();
  (*(void (**)(uint64_t))(v15 + 8))(a1);
  BOOL result = (int *)type metadata accessor for Asset.ID(0);
  uint64_t v17 = (uint64_t *)(a6 + result[5]);
  *uint64_t v17 = v12;
  v17[1] = v14;
  unint64_t v18 = (void *)(a6 + result[6]);
  *unint64_t v18 = a2;
  v18[1] = a3;
  uint64_t v19 = (void *)(a6 + result[7]);
  *uint64_t v19 = a4;
  v19[1] = a5;
  return result;
}

void Asset.ID.init(from:)()
{
  sub_24A093C64();
  uint64_t v2 = v1;
  uint64_t v59 = v3;
  uint64_t v4 = sub_24A08DF34(&qword_26975D3E8);
  uint64_t v5 = sub_24A093C88(v4);
  MEMORY[0x270FA5388](v5);
  sub_24A08F2E0();
  uint64_t v61 = v6;
  sub_24A093CF0();
  uint64_t v60 = type metadata accessor for URL();
  sub_24A08F24C();
  uint64_t v58 = v7;
  MEMORY[0x270FA5388](v8);
  sub_24A08F2E0();
  uint64_t v56 = v9;
  uint64_t v10 = sub_24A093CF0();
  uint64_t v57 = type metadata accessor for Asset.ID(v10);
  sub_24A08F280();
  MEMORY[0x270FA5388](v11);
  sub_24A08F2E0();
  uint64_t v55 = v12;
  sub_24A093CF0();
  uint64_t v13 = type metadata accessor for BinaryDecodingOptions();
  uint64_t v14 = sub_24A093C88(v13);
  MEMORY[0x270FA5388](v14);
  sub_24A08F2E0();
  v63 = v15;
  uint64_t v16 = sub_24A093CF0();
  uint64_t v17 = type metadata accessor for CloudAssets_Asset.ID(v16);
  sub_24A08F280();
  uint64_t v19 = MEMORY[0x270FA5388](v18);
  unint64_t v21 = (char *)v53 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v23 = (char *)v53 - v22;
  uint64_t v24 = sub_24A08DF34(&qword_26975D3F0);
  sub_24A08F24C();
  uint64_t v62 = v25;
  MEMORY[0x270FA5388](v26);
  unint64_t v28 = (char *)v53 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A08DF78(v2, v2[3]);
  sub_24A090D78();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v0)
  {
    v53[1] = v17;
    v53[0] = (uint64_t)v21;
    v54 = v23;
    uint64_t v29 = v62;
    v69 = v2;
    sub_24A090DC4();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    long long v67 = v68;
    uint64_t v66 = 0;
    long long v64 = 0u;
    long long v65 = 0u;
    BinaryDecodingOptions.init()();
    sub_24A090EA8(&qword_26975D408, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset.ID);
    uint64_t v30 = (uint64_t)v54;
    Message.init<A>(serializedBytes:extensions:partial:options:)();
    uint64_t v31 = v29;
    uint64_t v32 = (void *)v53[0];
    sub_24A0912B4(v30, v53[0]);
    uint64_t v33 = v61;
    URL.init(string:)();
    uint64_t v34 = v60;
    if (_s10CloudAsset21UploadResponseMessageOwet_0(v33, 1, v60) != 1)
    {
      uint64_t v38 = v34;
      uint64_t v39 = *(void (**)(uint64_t, uint64_t))(v58 + 32);
      uint64_t v40 = v56;
      uint64_t v41 = v33;
      uint64_t v42 = v38;
      v39(v56, v41);
      v63 = v28;
      uint64_t v43 = v55;
      ((void (*)(uint64_t, uint64_t, uint64_t))v39)(v55, v40, v42);
      uint64_t v44 = v32[3];
      uint64_t v45 = v57;
      v46 = (void *)(v43 + *(int *)(v57 + 20));
      void *v46 = v32[2];
      v46[1] = v44;
      uint64_t v48 = v32[4];
      unint64_t v47 = v32[5];
      v49 = (uint64_t *)(v43 + *(int *)(v45 + 24));
      uint64_t *v49 = v48;
      v49[1] = v47;
      uint64_t v50 = v32[6];
      unint64_t v51 = v32[7];
      swift_bridgeObjectRetain();
      sub_24A08DE84(v48, v47);
      sub_24A08DE84(v50, v51);
      sub_24A09214C((uint64_t)v32, (void (*)(void))type metadata accessor for CloudAssets_Asset.ID);
      v52 = (uint64_t *)(v43 + *(int *)(v45 + 28));
      uint64_t *v52 = v50;
      v52[1] = v51;
      sub_24A09214C((uint64_t)v54, (void (*)(void))type metadata accessor for CloudAssets_Asset.ID);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v63, v24);
      sub_24A091BD4(v43, v59);
      uint64_t v37 = (uint64_t)v69;
      goto LABEL_5;
    }
    sub_24A093B94(v33, &qword_26975D3E8);
    sub_24A090E10();
    swift_allocError();
    swift_willThrow();
    sub_24A09214C((uint64_t)v32, (void (*)(void))type metadata accessor for CloudAssets_Asset.ID);
    uint64_t v35 = sub_24A093C7C();
    sub_24A09214C(v35, v36);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v28, v24);
    uint64_t v2 = v69;
  }
  uint64_t v37 = (uint64_t)v2;
LABEL_5:
  sub_24A08E050(v37);
  sub_24A093C4C();
}

void Asset.ID.encode(to:)()
{
  sub_24A093C64();
  uint64_t v3 = v1;
  uint64_t v4 = v0;
  uint64_t v5 = sub_24A093CE4();
  uint64_t v6 = type metadata accessor for CloudAssets_Asset.ID(v5);
  sub_24A08F280();
  MEMORY[0x270FA5388](v7);
  sub_24A093C34();
  uint64_t v25 = sub_24A08DF34(&qword_26975D418);
  sub_24A08F24C();
  uint64_t v9 = v8;
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A08DF78(v0, v0[3]);
  sub_24A090D78();
  sub_24A093DF8();
  UnknownStorage.init()();
  *uint64_t v2 = URL.absoluteString.getter();
  v2[1] = v13;
  uint64_t v14 = (int *)type metadata accessor for Asset.ID(0);
  uint64_t v15 = (void *)((char *)v0 + v14[5]);
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  v2[2] = v17;
  v2[3] = v16;
  uint64_t v18 = (void *)((char *)v0 + v14[6]);
  uint64_t v20 = *v18;
  unint64_t v19 = v18[1];
  v2[4] = *v18;
  v2[5] = v19;
  unint64_t v21 = (void *)((char *)v4 + v14[7]);
  uint64_t v22 = *v21;
  unint64_t v23 = v21[1];
  v2[6] = *v21;
  v2[7] = v23;
  swift_bridgeObjectRetain();
  sub_24A08DE84(v20, v19);
  sub_24A08DE84(v22, v23);
  sub_24A090EA8(&qword_26975D408, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset.ID);
  sub_24A093D54();
  sub_24A093D18();
  sub_24A09214C((uint64_t)v2, (void (*)(void))type metadata accessor for CloudAssets_Asset.ID);
  if (v3)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v25);
  }
  else
  {
    v24[0] = v6;
    v24[1] = v22;
    sub_24A090E5C();
    sub_24A093D28();
    sub_24A093DB4();
    (*(void (**)(char *, uint64_t *))(v9 + 8))(v12, v2);
  }
  sub_24A093C4C();
}

uint64_t Asset.ID.hash(into:)()
{
  uint64_t v1 = type metadata accessor for URL();
  sub_24A090EA8(&qword_26975D348, MEMORY[0x263F06EA8]);
  sub_24A093E40();
  dispatch thunk of Hashable.hash(into:)();
  type metadata accessor for Asset.ID(0);
  sub_24A093E18();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v2 = (uint64_t *)(v0 + *(int *)(v1 + 24));
  uint64_t v3 = *v2;
  unint64_t v4 = v2[1];
  sub_24A08DE84(*v2, v4);
  Data.hash(into:)();
  sub_24A08DEDC(v3, v4);
  uint64_t v5 = (uint64_t *)(v0 + *(int *)(v1 + 28));
  uint64_t v6 = *v5;
  unint64_t v7 = v5[1];
  sub_24A08DE84(*v5, v7);
  Data.hash(into:)();
  return sub_24A08DEDC(v6, v7);
}

uint64_t static Asset.ID.== infix(_:_:)()
{
  if (MEMORY[0x24C5BACC0]())
  {
    uint64_t v0 = type metadata accessor for Asset.ID(0);
    sub_24A093CB4(v0);
    BOOL v3 = v3 && v1 == v2;
    if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      sub_24A093C94();
      if (v4)
      {
        JUMPOUT(0x24C5BAD10);
      }
    }
  }
  return 0;
}

Swift::Int Asset.ID.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int sub_24A0904B8()
{
  return Hasher._finalize()();
}

void sub_24A0904F4()
{
}

void sub_24A09050C()
{
}

double Asset.Protector.Builder.__allocating_init(securityKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  double result = 0.0;
  *(_OWORD *)(v4 + 32) = xmmword_24A0E6FA0;
  return result;
}

uint64_t Asset.Protector.Builder.init(securityKey:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  *(_OWORD *)(v2 + 32) = xmmword_24A0E6FA0;
  return v2;
}

uint64_t Asset.Protector.Builder.setPrivacyKey(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 32);
  unint64_t v4 = *(void *)(v2 + 40);
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  sub_24A08DE84(a1, a2);
  sub_24A08DEDC(v3, v4);
  return swift_retain();
}

uint64_t Asset.Protector.Builder.build()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1[2];
  unint64_t v3 = v1[3];
  uint64_t v4 = v1[4];
  uint64_t v5 = v1[5];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  sub_24A08DE84(v2, v3);
  uint64_t v6 = sub_24A093C7C();
  return sub_24A08DE84(v6, v7);
}

uint64_t Asset.Protector.Builder.deinit()
{
  sub_24A08DEDC(*(void *)(v0 + 16), *(void *)(v0 + 24));
  sub_24A08DEDC(*(void *)(v0 + 32), *(void *)(v0 + 40));
  return v0;
}

uint64_t Asset.Protector.Builder.__deallocating_deinit()
{
  Asset.Protector.Builder.deinit();
  return MEMORY[0x270FA0228](v0, 48, 7);
}

uint64_t sub_24A09067C(uint64_t a1)
{
  unint64_t v2 = sub_24A090EF0();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A0906B8(uint64_t a1)
{
  unint64_t v2 = sub_24A090EF0();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t Asset.Protector.securityKey.getter()
{
  return sub_24A093C7C();
}

uint64_t Asset.Protector.privacyKey.getter()
{
  return sub_24A093C7C();
}

uint64_t Asset.Protector.init(securityKey:privacyKey:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  *a5 = result;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = a4;
  return result;
}

void Asset.Protector.init(from:)()
{
  sub_24A093C64();
  unint64_t v3 = v2;
  unint64_t v21 = v4;
  uint64_t v5 = type metadata accessor for BinaryDecodingOptions();
  uint64_t v6 = sub_24A093C88(v5);
  MEMORY[0x270FA5388](v6);
  sub_24A093CD4();
  type metadata accessor for CloudAssets_Asset.Protector(0);
  sub_24A08F280();
  MEMORY[0x270FA5388](v7);
  sub_24A093D9C();
  uint64_t v8 = sub_24A08DF34(&qword_26975D428);
  sub_24A08F24C();
  uint64_t v22 = v9;
  MEMORY[0x270FA5388](v10);
  sub_24A093CD4();
  uint64_t v13 = v12 - v11;
  sub_24A08DF78(v3, v3[3]);
  sub_24A090EF0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v0)
  {
    uint64_t v20 = (uint64_t)v3;
  }
  else
  {
    unint64_t v23 = v3;
    sub_24A090DC4();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    sub_24A093DE0();
    BinaryDecodingOptions.init()();
    sub_24A090EA8(&qword_26975D438, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset.Protector);
    uint64_t v14 = v1;
    Message.init<A>(serializedBytes:extensions:partial:options:)();
    uint64_t v15 = v13;
    uint64_t v16 = *v1;
    uint64_t v17 = v1[1];
    uint64_t v18 = v1[2];
    unint64_t v19 = v14[3];
    sub_24A08DE84(*v14, v14[1]);
    sub_24A08DE84(v18, v19);
    sub_24A09214C((uint64_t)v14, (void (*)(void))type metadata accessor for CloudAssets_Asset.Protector);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v15, v8);
    *unint64_t v21 = v16;
    v21[1] = v17;
    v21[2] = v18;
    v21[3] = v19;
    uint64_t v20 = (uint64_t)v23;
  }
  sub_24A08E050(v20);
  sub_24A093C4C();
}

void Asset.Protector.encode(to:)()
{
  sub_24A093C64();
  unint64_t v3 = v2;
  type metadata accessor for CloudAssets_Asset.Protector(0);
  sub_24A08F280();
  MEMORY[0x270FA5388](v4);
  sub_24A093C34();
  uint64_t v15 = sub_24A08DF34(&qword_26975D440);
  sub_24A08F24C();
  uint64_t v14 = v5;
  MEMORY[0x270FA5388](v6);
  sub_24A093CD4();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = *v0;
  unint64_t v11 = v0[1];
  uint64_t v12 = v0[2];
  unint64_t v13 = v0[3];
  sub_24A08DF78(v3, v3[3]);
  sub_24A090EF0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  UnknownStorage.init()();
  *uint64_t v1 = v10;
  v1[1] = v11;
  v1[2] = v12;
  v1[3] = v13;
  sub_24A08DE84(v10, v11);
  sub_24A08DE84(v12, v13);
  sub_24A090EA8(&qword_26975D438, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset.Protector);
  Message.serializedData(partial:)();
  sub_24A093D18();
  sub_24A09214C((uint64_t)v1, (void (*)(void))type metadata accessor for CloudAssets_Asset.Protector);
  if (!v12)
  {
    sub_24A090E5C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    sub_24A093DB4();
  }
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v9, v15);
  sub_24A093C4C();
}

uint64_t Asset.Protector.hash(into:)()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v4 = v0[2];
  unint64_t v3 = v0[3];
  sub_24A08DE84(v1, v2);
  sub_24A093E40();
  Data.hash(into:)();
  sub_24A08DEDC(v1, v2);
  sub_24A08DE84(v4, v3);
  Data.hash(into:)();
  return sub_24A08DEDC(v4, v3);
}

uint64_t static Asset.Protector.== infix(_:_:)(void *a1, void *a2)
{
  if (MEMORY[0x24C5BAD10](*a1, a1[1], *a2, a2[1]))
  {
    JUMPOUT(0x24C5BAD10);
  }
  return 0;
}

uint64_t type metadata accessor for Asset.ID(uint64_t a1)
{
  return sub_24A0933F0(a1, (uint64_t *)&unk_26975D490);
}

uint64_t type metadata accessor for Asset(uint64_t a1)
{
  return sub_24A0933F0(a1, (uint64_t *)&unk_26975D480);
}

unint64_t sub_24A090D2C()
{
  unint64_t result = qword_26975D3E0;
  if (!qword_26975D3E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975D3E0);
  }
  return result;
}

unint64_t sub_24A090D78()
{
  unint64_t result = qword_26975D3F8;
  if (!qword_26975D3F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975D3F8);
  }
  return result;
}

unint64_t sub_24A090DC4()
{
  unint64_t result = qword_26975D400;
  if (!qword_26975D400)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975D400);
  }
  return result;
}

unint64_t sub_24A090E10()
{
  unint64_t result = qword_26975D410;
  if (!qword_26975D410)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975D410);
  }
  return result;
}

unint64_t sub_24A090E5C()
{
  unint64_t result = qword_26975D420;
  if (!qword_26975D420)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975D420);
  }
  return result;
}

uint64_t sub_24A090EA8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_24A090EF0()
{
  unint64_t result = qword_26975D430;
  if (!qword_26975D430)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975D430);
  }
  return result;
}

Swift::Int Asset.Protector.hashValue.getter()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v4 = v0[2];
  unint64_t v3 = v0[3];
  sub_24A093E78();
  uint64_t v5 = sub_24A093E40();
  sub_24A08DE84(v5, v6);
  Data.hash(into:)();
  sub_24A08DEDC(v1, v2);
  sub_24A08DE84(v4, v3);
  Data.hash(into:)();
  sub_24A08DEDC(v4, v3);
  return Hasher._finalize()();
}

void sub_24A090FC8()
{
  Swift::UInt v0 = sub_24A093CE4();
  Hasher._combine(_:)(v0);
}

uint64_t sub_24A090FEC(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x6675626F746F7270 && a2 == 0xEC00000061746144)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

Swift::Int sub_24A09108C()
{
  return Hasher._finalize()();
}

Swift::Int sub_24A0910D0()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v4 = v0[2];
  unint64_t v3 = v0[3];
  Hasher.init(_seed:)();
  sub_24A08DE84(v1, v2);
  Data.hash(into:)();
  sub_24A08DEDC(v1, v2);
  sub_24A08DE84(v4, v3);
  Data.hash(into:)();
  sub_24A08DEDC(v4, v3);
  return Hasher._finalize()();
}

void sub_24A091164()
{
}

void sub_24A09117C()
{
}

Swift::Int sub_24A091198()
{
  return Hasher._finalize()();
}

uint64_t sub_24A0911D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t result = sub_24A090FEC(a1, a2);
  *a3 = result != 0;
  return result;
}

uint64_t sub_24A091208(uint64_t a1)
{
  unint64_t v2 = sub_24A091B88();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A091244(uint64_t a1)
{
  unint64_t v2 = sub_24A091B88();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t Asset.id.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_24A0912B4(v1, a1);
}

uint64_t sub_24A0912B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_24A093CE4();
  v4(v3);
  sub_24A08F280();
  uint64_t v5 = sub_24A093E4C();
  v6(v5);
  return a2;
}

uint64_t Asset.protector.getter@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for Asset(0);
  sub_24A093D78();
  uint64_t v3 = *v2;
  unint64_t v4 = v2[1];
  uint64_t v5 = v2[2];
  unint64_t v6 = v2[3];
  *a1 = *v2;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  sub_24A08DE84(v3, v4);
  return sub_24A08DE84(v5, v6);
}

uint64_t Asset.size.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for Asset(0) + 24));
}

void sub_24A091388()
{
  sub_24A093C64();
  uint64_t v51 = v3;
  uint64_t v5 = v4;
  uint64_t v6 = sub_24A08DF34(&qword_26975D500);
  uint64_t v7 = sub_24A093C88(v6);
  MEMORY[0x270FA5388](v7);
  sub_24A08F2E0();
  uint64_t v49 = v8;
  uint64_t v9 = sub_24A093CF0();
  uint64_t v48 = type metadata accessor for CloudAssets_Asset.Protector(v9);
  sub_24A08F280();
  MEMORY[0x270FA5388](v10);
  sub_24A08F2E0();
  uint64_t v50 = v11;
  uint64_t v12 = sub_24A08DF34(&qword_26975D3E8);
  uint64_t v13 = sub_24A093C88(v12);
  MEMORY[0x270FA5388](v13);
  sub_24A093CFC();
  uint64_t v14 = type metadata accessor for URL();
  sub_24A08F24C();
  uint64_t v47 = v15;
  MEMORY[0x270FA5388](v16);
  sub_24A08F2E0();
  uint64_t v46 = v17;
  uint64_t v18 = sub_24A08DF34(&qword_26975D4F8);
  uint64_t v19 = sub_24A093C88(v18);
  MEMORY[0x270FA5388](v19);
  sub_24A093C34();
  uint64_t v20 = type metadata accessor for CloudAssets_Asset.ID(0);
  sub_24A08F280();
  MEMORY[0x270FA5388](v21);
  sub_24A093CD4();
  uint64_t v24 = v23 - v22;
  uint64_t v25 = (int *)type metadata accessor for Asset.ID(0);
  sub_24A08F280();
  MEMORY[0x270FA5388](v26);
  sub_24A093D9C();
  uint64_t v45 = type metadata accessor for CloudAssets_Asset(0);
  v52 = (uint64_t *)v5;
  sub_24A093BE0(v5 + *(int *)(v45 + 24), v0, &qword_26975D4F8);
  if (_s10CloudAsset21UploadResponseMessageOwet_0(v0, 1, v20) == 1)
  {
    *(void *)uint64_t v24 = 0;
    *(void *)(v24 + 8) = 0xE000000000000000;
    *(void *)(v24 + 16) = 0;
    *(void *)(v24 + 24) = 0xE000000000000000;
    *(_OWORD *)(v24 + 32) = xmmword_24A0E6FA0;
    *(_OWORD *)(v24 + 48) = xmmword_24A0E6FA0;
    UnknownStorage.init()();
    sub_24A093B94(v0, &qword_26975D4F8);
  }
  else
  {
    sub_24A091BD4(v0, v24);
  }
  URL.init(string:)();
  if (_s10CloudAsset21UploadResponseMessageOwet_0(v2, 1, v14) == 1)
  {
    sub_24A093B94(v2, &qword_26975D3E8);
    sub_24A090E10();
    swift_allocError();
    swift_willThrow();
    sub_24A09214C(v24, (void (*)(void))type metadata accessor for CloudAssets_Asset.ID);
    sub_24A09214C(v5, (void (*)(void))type metadata accessor for CloudAssets_Asset);
  }
  else
  {
    uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 32);
    v27(v46, v2, v14);
    v27(v1, v46, v14);
    uint64_t v28 = *(void *)(v24 + 24);
    uint64_t v29 = (void *)(v1 + v25[5]);
    *uint64_t v29 = *(void *)(v24 + 16);
    v29[1] = v28;
    uint64_t v31 = *(void *)(v24 + 32);
    unint64_t v30 = *(void *)(v24 + 40);
    uint64_t v32 = (uint64_t *)(v1 + v25[6]);
    *uint64_t v32 = v31;
    v32[1] = v30;
    uint64_t v33 = *(void *)(v24 + 48);
    unint64_t v34 = *(void *)(v24 + 56);
    swift_bridgeObjectRetain();
    sub_24A08DE84(v31, v30);
    sub_24A08DE84(v33, v34);
    sub_24A09214C(v24, (void (*)(void))type metadata accessor for CloudAssets_Asset.ID);
    uint64_t v35 = (uint64_t *)(v1 + v25[7]);
    uint64_t *v35 = v33;
    v35[1] = v34;
    sub_24A091BD4(v1, v51);
    sub_24A093BE0((uint64_t)v52 + *(int *)(v45 + 28), v49, &qword_26975D500);
    if (_s10CloudAsset21UploadResponseMessageOwet_0(v49, 1, v48) == 1)
    {
      *(_OWORD *)uint64_t v50 = xmmword_24A0E6FA0;
      *(_OWORD *)(v50 + 16) = xmmword_24A0E6FA0;
      UnknownStorage.init()();
      sub_24A093B94(v49, &qword_26975D500);
    }
    else
    {
      sub_24A091BD4(v49, v50);
    }
    uint64_t v36 = *(void *)v50;
    uint64_t v37 = *(void *)(v50 + 8);
    uint64_t v38 = *(void *)(v50 + 16);
    unint64_t v39 = *(void *)(v50 + 24);
    uint64_t v40 = sub_24A093C7C();
    sub_24A08DE84(v40, v41);
    sub_24A08DE84(v38, v39);
    sub_24A09214C(v50, (void (*)(void))type metadata accessor for CloudAssets_Asset.Protector);
    uint64_t v42 = type metadata accessor for Asset(0);
    uint64_t v43 = (void *)(v51 + *(int *)(v42 + 20));
    *uint64_t v43 = v36;
    v43[1] = v37;
    v43[2] = v38;
    v43[3] = v39;
    uint64_t v44 = *v52;
    sub_24A09214C((uint64_t)v52, (void (*)(void))type metadata accessor for CloudAssets_Asset);
    *(void *)(v51 + *(int *)(v42 + 24)) = v44;
  }
  sub_24A093C4C();
}

__n128 Asset.init(id:protector:size:)@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __n128 v11 = *a2;
  unint64_t v6 = a2[1].n128_u64[0];
  unint64_t v7 = a2[1].n128_u64[1];
  sub_24A091BD4(a1, a4);
  type metadata accessor for Asset(0);
  sub_24A093D78();
  __n128 result = v11;
  *uint64_t v9 = v11;
  v9[1].n128_u64[0] = v6;
  v9[1].n128_u64[1] = v7;
  *(void *)(a4 + *(int *)(v10 + 24)) = a3;
  return result;
}

void Asset.init(from:)()
{
  sub_24A093C64();
  uint64_t v4 = v3;
  uint64_t v16 = v5;
  uint64_t v6 = type metadata accessor for BinaryDecodingOptions();
  uint64_t v7 = sub_24A093C88(v6);
  MEMORY[0x270FA5388](v7);
  sub_24A08F2E0();
  uint64_t v8 = sub_24A093CF0();
  type metadata accessor for CloudAssets_Asset(v8);
  sub_24A08F280();
  MEMORY[0x270FA5388](v9);
  uint64_t v10 = sub_24A093CFC();
  uint64_t v11 = type metadata accessor for Asset(v10);
  uint64_t v12 = sub_24A093C88(v11);
  MEMORY[0x270FA5388](v12);
  sub_24A093C34();
  uint64_t v13 = sub_24A08DF34(&qword_26975D448);
  sub_24A08F24C();
  uint64_t v17 = v14;
  MEMORY[0x270FA5388](v15);
  sub_24A08F2C8();
  sub_24A08DF78(v4, v4[3]);
  sub_24A091B88();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v0)
  {
    sub_24A090DC4();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    sub_24A093DE0();
    BinaryDecodingOptions.init()();
    sub_24A090EA8(&qword_26975D458, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset);
    Message.init<A>(serializedBytes:extensions:partial:options:)();
    sub_24A091388();
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v1, v13);
    sub_24A091BD4(v2, v16);
  }
  sub_24A08E050((uint64_t)v4);
  sub_24A093C4C();
}

unint64_t sub_24A091B88()
{
  unint64_t result = qword_26975D450;
  if (!qword_26975D450)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975D450);
  }
  return result;
}

uint64_t sub_24A091BD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A093CE4();
  v5(v4);
  sub_24A08F280();
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(a2, v2);
  return a2;
}

uint64_t sub_24A091C30@<X0>(void *a1@<X8>)
{
  uint64_t v44 = a1;
  uint64_t v47 = type metadata accessor for CloudAssets_Asset.Protector(0);
  sub_24A08F280();
  MEMORY[0x270FA5388](v2);
  sub_24A093E2C();
  uint64_t v45 = v3;
  MEMORY[0x270FA5388](v4);
  uint64_t v46 = (void *)((char *)v39 - v5);
  uint64_t v6 = sub_24A093CF0();
  uint64_t v40 = type metadata accessor for CloudAssets_Asset.ID(v6);
  MEMORY[0x270FA5388](v40);
  sub_24A093E2C();
  uint64_t v41 = v7;
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (void *)((char *)v39 - v9);
  UnknownStorage.init()();
  *uint64_t v10 = URL.absoluteString.getter();
  v10[1] = v11;
  uint64_t v12 = (int *)type metadata accessor for Asset.ID(0);
  uint64_t v13 = v1;
  uint64_t v14 = (uint64_t *)(v1 + v12[5]);
  uint64_t v15 = v14[1];
  v10[2] = *v14;
  v10[3] = v15;
  uint64_t v16 = (uint64_t *)(v13 + v12[6]);
  uint64_t v17 = *v16;
  unint64_t v18 = v16[1];
  v10[4] = *v16;
  v10[5] = v18;
  uint64_t v19 = (uint64_t *)(v13 + v12[7]);
  uint64_t v20 = v13;
  uint64_t v43 = v13;
  uint64_t v22 = *v19;
  unint64_t v21 = v19[1];
  v10[6] = *v19;
  v10[7] = v21;
  uint64_t v42 = type metadata accessor for Asset(0);
  uint64_t v23 = (uint64_t *)(v20 + *(int *)(v42 + 20));
  uint64_t v25 = *v23;
  unint64_t v24 = v23[1];
  uint64_t v26 = v23[2];
  unint64_t v27 = v23[3];
  v39[1] = (char *)v46 + *(int *)(v47 + 24);
  swift_bridgeObjectRetain();
  sub_24A08DE84(v17, v18);
  sub_24A08DE84(v22, v21);
  sub_24A08DE84(v25, v24);
  sub_24A08DE84(v26, v27);
  UnknownStorage.init()();
  uint64_t v28 = v46;
  uint64_t *v46 = v25;
  v28[1] = v24;
  v28[2] = v26;
  v28[3] = v27;
  sub_24A08DE84(v25, v24);
  sub_24A08DE84(v26, v27);
  sub_24A08DEDC(v25, v24);
  sub_24A08DEDC(v26, v27);
  uint64_t v29 = v44;
  *uint64_t v44 = 0;
  uint64_t v30 = type metadata accessor for CloudAssets_Asset(0);
  UnknownStorage.init()();
  uint64_t v31 = (uint64_t)v29 + *(int *)(v30 + 24);
  uint64_t v32 = v40;
  _s10CloudAsset21UploadResponseMessageOwst_0(v31, 1, 1, v40);
  uint64_t v33 = (uint64_t)v29 + *(int *)(v30 + 28);
  uint64_t v34 = v47;
  _s10CloudAsset21UploadResponseMessageOwst_0(v33, 1, 1, v47);
  uint64_t v35 = v41;
  sub_24A0912B4((uint64_t)v10, v41);
  sub_24A093B94(v31, &qword_26975D4F8);
  sub_24A091BD4(v35, v31);
  _s10CloudAsset21UploadResponseMessageOwst_0(v31, 0, 1, v32);
  uint64_t v36 = v45;
  sub_24A0912B4((uint64_t)v28, v45);
  sub_24A093B94(v33, &qword_26975D500);
  sub_24A091BD4(v36, v33);
  _s10CloudAsset21UploadResponseMessageOwst_0(v33, 0, 1, v34);
  uint64_t v37 = *(void *)(v43 + *(int *)(v42 + 24));
  sub_24A09214C((uint64_t)v28, (void (*)(void))type metadata accessor for CloudAssets_Asset.Protector);
  uint64_t result = sub_24A09214C((uint64_t)v10, (void (*)(void))type metadata accessor for CloudAssets_Asset.ID);
  *uint64_t v29 = v37;
  return result;
}

void Asset.encode(to:)()
{
  sub_24A093C64();
  uint64_t v3 = sub_24A093CE4();
  uint64_t v4 = type metadata accessor for CloudAssets_Asset(v3);
  sub_24A08F280();
  MEMORY[0x270FA5388](v5);
  sub_24A093C34();
  uint64_t v12 = sub_24A08DF34(&qword_26975D460);
  sub_24A08F24C();
  uint64_t v7 = v6;
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)v11 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A08DF78(v0, v0[3]);
  sub_24A091B88();
  sub_24A093DF8();
  sub_24A091C30(v2);
  sub_24A090EA8(&qword_26975D458, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset);
  sub_24A093D54();
  sub_24A093D18();
  sub_24A09214C((uint64_t)v2, (void (*)(void))type metadata accessor for CloudAssets_Asset);
  if (v1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v12);
  }
  else
  {
    v11[0] = v4;
    v11[1] = v0;
    sub_24A090E5C();
    sub_24A093D28();
    sub_24A093DB4();
    (*(void (**)(char *, void *))(v7 + 8))(v10, v2);
  }
  sub_24A093C4C();
}

uint64_t sub_24A09214C(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_24A08F280();
  uint64_t v3 = sub_24A093DD0();
  v4(v3);
  return a1;
}

void Asset.hash(into:)()
{
  Asset.ID.hash(into:)();
  type metadata accessor for Asset(0);
  sub_24A093E18();
  uint64_t v5 = *(void *)(v4 + 16);
  unint64_t v6 = *(void *)(v4 + 24);
  sub_24A08DE84(v2, v3);
  Data.hash(into:)();
  sub_24A08DEDC(v2, v3);
  sub_24A08DE84(v5, v6);
  Data.hash(into:)();
  sub_24A08DEDC(v5, v6);
  Hasher._combine(_:)(*(void *)(v0 + *(int *)(v1 + 24)));
}

Swift::Int Asset.hashValue.getter()
{
  sub_24A093E78();
  Asset.ID.hash(into:)();
  uint64_t v1 = type metadata accessor for Asset(0);
  sub_24A093D78();
  uint64_t v3 = *v2;
  unint64_t v4 = v2[1];
  uint64_t v5 = v2[2];
  unint64_t v6 = v2[3];
  sub_24A08DE84(*v2, v4);
  Data.hash(into:)();
  sub_24A08DEDC(v3, v4);
  sub_24A08DE84(v5, v6);
  Data.hash(into:)();
  sub_24A08DEDC(v5, v6);
  Hasher._combine(_:)(*(void *)(v0 + *(int *)(v1 + 24)));
  return Hasher._finalize()();
}

Swift::Int sub_24A092310(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  Asset.ID.hash(into:)();
  unint64_t v4 = (uint64_t *)(v2 + *(int *)(a2 + 20));
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  uint64_t v7 = v4[2];
  unint64_t v8 = v4[3];
  sub_24A08DE84(*v4, v6);
  Data.hash(into:)();
  sub_24A08DEDC(v5, v6);
  sub_24A08DE84(v7, v8);
  Data.hash(into:)();
  sub_24A08DEDC(v7, v8);
  Hasher._combine(_:)(*(void *)(v2 + *(int *)(a2 + 24)));
  return Hasher._finalize()();
}

uint64_t sub_24A0923D0()
{
  return sub_24A090EA8(&qword_26975D468, (void (*)(uint64_t))type metadata accessor for Asset.ID);
}

unint64_t sub_24A09241C()
{
  unint64_t result = qword_26975D470;
  if (!qword_26975D470)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975D470);
  }
  return result;
}

uint64_t sub_24A092468()
{
  return sub_24A090EA8(&qword_26975D478, (void (*)(uint64_t))type metadata accessor for Asset);
}

void sub_24A0924B0()
{
}

void sub_24A0924C8()
{
}

uint64_t *initializeBufferWithCopyOfBuffer for Asset(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v30 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v30 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    unint64_t v8 = (int *)type metadata accessor for Asset.ID(0);
    uint64_t v9 = v8[5];
    uint64_t v10 = (uint64_t *)((char *)a1 + v9);
    uint64_t v11 = (uint64_t *)((char *)a2 + v9);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = v8[6];
    uint64_t v14 = (uint64_t *)((char *)a1 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t v16 = *v15;
    unint64_t v17 = v15[1];
    swift_bridgeObjectRetain();
    sub_24A08DE84(v16, v17);
    *uint64_t v14 = v16;
    v14[1] = v17;
    uint64_t v18 = v8[7];
    uint64_t v19 = (uint64_t *)((char *)a1 + v18);
    uint64_t v20 = (uint64_t *)((char *)a2 + v18);
    uint64_t v21 = *v20;
    unint64_t v22 = v20[1];
    sub_24A08DE84(*v20, v22);
    *uint64_t v19 = v21;
    v19[1] = v22;
    uint64_t v23 = *(int *)(a3 + 20);
    unint64_t v24 = (uint64_t *)((char *)a1 + v23);
    uint64_t v25 = (char *)a2 + v23;
    uint64_t v26 = *(uint64_t *)((char *)a2 + v23);
    unint64_t v27 = *(uint64_t *)((char *)a2 + v23 + 8);
    sub_24A08DE84(v26, v27);
    *unint64_t v24 = v26;
    v24[1] = v27;
    uint64_t v28 = *((void *)v25 + 2);
    unint64_t v29 = *((void *)v25 + 3);
    sub_24A08DE84(v28, v29);
    void v24[2] = v28;
    v24[3] = v29;
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
  }
  return a1;
}

uint64_t destroy for Asset(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = type metadata accessor for Asset.ID(0);
  swift_bridgeObjectRelease();
  sub_24A08DEDC(*(void *)(a1 + *(int *)(v5 + 24)), *(void *)(a1 + *(int *)(v5 + 24) + 8));
  sub_24A08DEDC(*(void *)(a1 + *(int *)(v5 + 28)), *(void *)(a1 + *(int *)(v5 + 28) + 8));
  unint64_t v6 = (uint64_t *)(a1 + *(int *)(a2 + 20));
  sub_24A08DEDC(*v6, v6[1]);
  uint64_t v7 = v6[2];
  unint64_t v8 = v6[3];
  return sub_24A08DEDC(v7, v8);
}

uint64_t initializeWithCopy for Asset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for Asset.ID(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = v7[6];
  uint64_t v13 = (uint64_t *)(a1 + v12);
  uint64_t v14 = (uint64_t *)(a2 + v12);
  uint64_t v15 = *v14;
  unint64_t v16 = v14[1];
  swift_bridgeObjectRetain();
  sub_24A08DE84(v15, v16);
  uint64_t *v13 = v15;
  v13[1] = v16;
  uint64_t v17 = v7[7];
  uint64_t v18 = (uint64_t *)(a1 + v17);
  uint64_t v19 = (uint64_t *)(a2 + v17);
  uint64_t v20 = *v19;
  unint64_t v21 = v19[1];
  sub_24A08DE84(*v19, v21);
  *uint64_t v18 = v20;
  v18[1] = v21;
  uint64_t v22 = *(int *)(a3 + 20);
  uint64_t v23 = (uint64_t *)(a1 + v22);
  uint64_t v24 = a2 + v22;
  uint64_t v25 = *(void *)(a2 + v22);
  unint64_t v26 = *(void *)(a2 + v22 + 8);
  sub_24A08DE84(v25, v26);
  *uint64_t v23 = v25;
  v23[1] = v26;
  uint64_t v27 = *(void *)(v24 + 16);
  unint64_t v28 = *(void *)(v24 + 24);
  sub_24A08DE84(v27, v28);
  v23[2] = v27;
  v23[3] = v28;
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t assignWithCopy for Asset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for Asset.ID(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  *uint64_t v9 = *v10;
  v9[1] = v10[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v11 = v7[6];
  uint64_t v12 = (uint64_t *)(a1 + v11);
  uint64_t v13 = (uint64_t *)(a2 + v11);
  uint64_t v14 = *v13;
  unint64_t v15 = v13[1];
  sub_24A08DE84(*v13, v15);
  uint64_t v16 = *v12;
  unint64_t v17 = v12[1];
  *uint64_t v12 = v14;
  v12[1] = v15;
  sub_24A08DEDC(v16, v17);
  uint64_t v18 = v7[7];
  uint64_t v19 = (uint64_t *)(a1 + v18);
  uint64_t v20 = (uint64_t *)(a2 + v18);
  uint64_t v21 = *v20;
  unint64_t v22 = v20[1];
  sub_24A08DE84(*v20, v22);
  uint64_t v23 = *v19;
  unint64_t v24 = v19[1];
  *uint64_t v19 = v21;
  v19[1] = v22;
  sub_24A08DEDC(v23, v24);
  uint64_t v25 = *(int *)(a3 + 20);
  unint64_t v26 = (uint64_t *)(a1 + v25);
  uint64_t v27 = a2 + v25;
  uint64_t v28 = *(void *)(a2 + v25);
  unint64_t v29 = *(void *)(a2 + v25 + 8);
  sub_24A08DE84(v28, v29);
  uint64_t v30 = *v26;
  unint64_t v31 = v26[1];
  *unint64_t v26 = v28;
  v26[1] = v29;
  sub_24A08DEDC(v30, v31);
  uint64_t v32 = *(void *)(v27 + 16);
  unint64_t v33 = *(void *)(v27 + 24);
  sub_24A08DE84(v32, v33);
  uint64_t v34 = v26[2];
  unint64_t v35 = v26[3];
  v26[2] = v32;
  v26[3] = v33;
  sub_24A08DEDC(v34, v35);
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t initializeWithTake for Asset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for Asset.ID(0);
  *(_OWORD *)(a1 + v7[5]) = *(_OWORD *)(a2 + v7[5]);
  *(_OWORD *)(a1 + v7[6]) = *(_OWORD *)(a2 + v7[6]);
  *(_OWORD *)(a1 + v7[7]) = *(_OWORD *)(a2 + v7[7]);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = (_OWORD *)(a1 + v8);
  uint64_t v11 = (_OWORD *)(a2 + v8);
  long long v12 = v11[1];
  *uint64_t v10 = *v11;
  v10[1] = v12;
  *(void *)(a1 + v9) = *(void *)(a2 + v9);
  return a1;
}

uint64_t assignWithTake for Asset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for Asset.ID(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (uint64_t *)(a2 + v8);
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  *uint64_t v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease();
  uint64_t v13 = v7[6];
  uint64_t v14 = *(void *)(a1 + v13);
  unint64_t v15 = *(void *)(a1 + v13 + 8);
  *(_OWORD *)(a1 + v13) = *(_OWORD *)(a2 + v13);
  sub_24A08DEDC(v14, v15);
  uint64_t v16 = v7[7];
  uint64_t v17 = *(void *)(a1 + v16);
  unint64_t v18 = *(void *)(a1 + v16 + 8);
  *(_OWORD *)(a1 + v16) = *(_OWORD *)(a2 + v16);
  sub_24A08DEDC(v17, v18);
  uint64_t v19 = *(int *)(a3 + 20);
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  uint64_t v22 = *(void *)(a1 + v19);
  unint64_t v23 = *(void *)(a1 + v19 + 8);
  *(_OWORD *)(a1 + v19) = *(_OWORD *)(a2 + v19);
  sub_24A08DEDC(v22, v23);
  uint64_t v24 = *(void *)(v20 + 16);
  unint64_t v25 = *(void *)(v20 + 24);
  *(_OWORD *)(v20 + 16) = *(_OWORD *)(v21 + 16);
  sub_24A08DEDC(v24, v25);
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t getEnumTagSinglePayload for Asset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A092B6C);
}

uint64_t sub_24A092B6C()
{
  uint64_t v3 = sub_24A093E90();
  type metadata accessor for Asset.ID(v3);
  sub_24A08F268();
  if (*(_DWORD *)(v5 + 84) == v1)
  {
    return _s10CloudAsset21UploadResponseMessageOwet_0(v0, v1, v4);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + *(int *)(v2 + 20) + 8) >> 60;
    if (((4 * v7) & 0xC) != 0) {
      return 16 - ((4 * v7) & 0xC | (v7 >> 2));
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for Asset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A092C14);
}

void sub_24A092C14(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_24A093CE4();
  type metadata accessor for Asset.ID(v8);
  sub_24A08F268();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = sub_24A093EA4();
    _s10CloudAsset21UploadResponseMessageOwst_0(v10, v11, v12, v13);
  }
  else
  {
    uint64_t v14 = (void *)(v4 + *(int *)(a4 + 20));
    *uint64_t v14 = 0;
    v14[1] = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
  }
}

uint64_t sub_24A092C9C()
{
  uint64_t result = type metadata accessor for Asset.ID(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Asset.ID(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (uint64_t *)((char *)a1 + v8);
    uint64_t v11 = (uint64_t *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = (uint64_t *)((char *)a1 + v9);
    uint64_t v14 = *(uint64_t *)((char *)a2 + v9);
    unint64_t v15 = *(uint64_t *)((char *)a2 + v9 + 8);
    swift_bridgeObjectRetain();
    sub_24A08DE84(v14, v15);
    uint64_t *v13 = v14;
    v13[1] = v15;
    uint64_t v16 = a3[7];
    uint64_t v17 = (uint64_t *)((char *)a1 + v16);
    unint64_t v18 = (uint64_t *)((char *)a2 + v16);
    uint64_t v19 = *v18;
    unint64_t v20 = v18[1];
    sub_24A08DE84(*v18, v20);
    *uint64_t v17 = v19;
    v17[1] = v20;
  }
  return a1;
}

uint64_t destroy for Asset.ID(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease();
  sub_24A08DEDC(*(void *)(a1 + *(int *)(a2 + 24)), *(void *)(a1 + *(int *)(a2 + 24) + 8));
  int v5 = (uint64_t *)(a1 + *(int *)(a2 + 28));
  uint64_t v6 = *v5;
  unint64_t v7 = v5[1];
  return sub_24A08DEDC(v6, v7);
}

uint64_t initializeWithCopy for Asset.ID(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v7);
  uint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = (uint64_t *)(a1 + v8);
  uint64_t v13 = *(void *)(a2 + v8);
  unint64_t v14 = *(void *)(a2 + v8 + 8);
  swift_bridgeObjectRetain();
  sub_24A08DE84(v13, v14);
  *uint64_t v12 = v13;
  v12[1] = v14;
  uint64_t v15 = a3[7];
  uint64_t v16 = (uint64_t *)(a1 + v15);
  uint64_t v17 = (uint64_t *)(a2 + v15);
  uint64_t v18 = *v17;
  unint64_t v19 = v17[1];
  sub_24A08DE84(*v17, v19);
  *uint64_t v16 = v18;
  v16[1] = v19;
  return a1;
}

uint64_t assignWithCopy for Asset.ID(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = a3[6];
  uint64_t v11 = (uint64_t *)(a1 + v10);
  uint64_t v12 = (uint64_t *)(a2 + v10);
  uint64_t v13 = *v12;
  unint64_t v14 = v12[1];
  sub_24A08DE84(*v12, v14);
  uint64_t v15 = *v11;
  unint64_t v16 = v11[1];
  *uint64_t v11 = v13;
  v11[1] = v14;
  sub_24A08DEDC(v15, v16);
  uint64_t v17 = a3[7];
  uint64_t v18 = (uint64_t *)(a1 + v17);
  unint64_t v19 = (uint64_t *)(a2 + v17);
  uint64_t v20 = *v19;
  unint64_t v21 = v19[1];
  sub_24A08DE84(*v19, v21);
  uint64_t v22 = *v18;
  unint64_t v23 = v18[1];
  *uint64_t v18 = v20;
  v18[1] = v21;
  sub_24A08DEDC(v22, v23);
  return a1;
}

uint64_t initializeWithTake for Asset.ID(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithTake for Asset.ID(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v12 = a3[6];
  uint64_t v13 = *(void *)(a1 + v12);
  unint64_t v14 = *(void *)(a1 + v12 + 8);
  *(_OWORD *)(a1 + v12) = *(_OWORD *)(a2 + v12);
  sub_24A08DEDC(v13, v14);
  uint64_t v15 = a3[7];
  uint64_t v16 = *(void *)(a1 + v15);
  unint64_t v17 = *(void *)(a1 + v15 + 8);
  *(_OWORD *)(a1 + v15) = *(_OWORD *)(a2 + v15);
  sub_24A08DEDC(v16, v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for Asset.ID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A093214);
}

uint64_t sub_24A093214()
{
  sub_24A093E90();
  type metadata accessor for URL();
  sub_24A08F268();
  if (*(_DWORD *)(v4 + 84) == v1)
  {
    return _s10CloudAsset21UploadResponseMessageOwet_0(v0, v1, v3);
  }
  else
  {
    unint64_t v6 = *(void *)(v0 + *(int *)(v2 + 20) + 8);
    if (v6 >= 0xFFFFFFFF) {
      LODWORD(v6) = -1;
    }
    return (v6 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for Asset.ID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A0932AC);
}

void sub_24A0932AC(uint64_t a1, int a2, int a3, uint64_t a4)
{
  sub_24A093CE4();
  type metadata accessor for URL();
  sub_24A08F268();
  if (*(_DWORD *)(v8 + 84) == a3)
  {
    uint64_t v9 = sub_24A093EA4();
    _s10CloudAsset21UploadResponseMessageOwst_0(v9, v10, v11, v12);
  }
  else
  {
    *(void *)(v4 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
}

uint64_t sub_24A093328()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_24A0933C8()
{
  return type metadata accessor for Asset.ID.Builder(0);
}

uint64_t type metadata accessor for Asset.ID.Builder(uint64_t a1)
{
  return sub_24A0933F0(a1, (uint64_t *)&unk_26975D4A0);
}

uint64_t sub_24A0933F0(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_24A093424()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for Asset.ID.Builder(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for Asset.ID.Builder);
}

uint64_t dispatch thunk of Asset.ID.Builder.__allocating_init(partition:ownerID:signature:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t initializeBufferWithCopyOfBuffer for Asset.Protector(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for Asset.Protector(uint64_t *a1)
{
  sub_24A08DEDC(*a1, a1[1]);
  uint64_t v2 = a1[2];
  unint64_t v3 = a1[3];
  return sub_24A08DEDC(v2, v3);
}

uint64_t *initializeWithCopy for Asset.Protector(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_24A08DE84(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  uint64_t v7 = a2[2];
  unint64_t v6 = a2[3];
  sub_24A08DE84(v7, v6);
  a1[2] = v7;
  a1[3] = v6;
  return a1;
}

uint64_t *assignWithCopy for Asset.Protector(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_24A08DE84(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_24A08DEDC(v6, v7);
  uint64_t v9 = a2[2];
  unint64_t v8 = a2[3];
  sub_24A08DE84(v9, v8);
  uint64_t v10 = a1[2];
  unint64_t v11 = a1[3];
  a1[2] = v9;
  a1[3] = v8;
  sub_24A08DEDC(v10, v11);
  return a1;
}

__n128 initializeWithTake for Asset.Protector(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t *assignWithTake for Asset.Protector(uint64_t *a1, _OWORD *a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_24A08DEDC(v4, v5);
  uint64_t v6 = a1[2];
  unint64_t v7 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_24A08DEDC(v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for Asset.Protector(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xD && *(unsigned char *)(a1 + 32))
    {
      unsigned int v2 = *(_DWORD *)a1 + 12;
    }
    else
    {
      unsigned int v2 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
      if (v2 >= 0xC) {
        unsigned int v2 = -1;
      }
    }
  }
  else
  {
    unsigned int v2 = -1;
  }
  return v2 + 1;
}

uint64_t storeEnumTagSinglePayload for Asset.Protector(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 13;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2)
    {
      *(void *)__n128 result = 0;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

void type metadata accessor for Asset.Protector()
{
}

uint64_t type metadata accessor for Asset.Protector.Builder()
{
  return self;
}

uint64_t method lookup function for Asset.Protector.Builder(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for Asset.Protector.Builder);
}

uint64_t dispatch thunk of Asset.Protector.Builder.__allocating_init(securityKey:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t sub_24A093784()
{
  return 0;
}

void type metadata accessor for Asset.CodingKeys()
{
}

void type metadata accessor for Asset.Protector.CodingKeys()
{
}

uint64_t getEnumTagSinglePayload for AssetSkeleton.CodingKeys(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *sub_24A0937F4(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *__n128 result = a2;
        return result;
      case 2:
        *(_WORD *)__n128 result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)__n128 result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *__n128 result = 0;
      break;
    case 2:
      *(_WORD *)__n128 result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x24A093890);
    case 4:
      *(_DWORD *)__n128 result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void type metadata accessor for Asset.ID.CodingKeys()
{
}

unint64_t sub_24A0938C8()
{
  unint64_t result = qword_26975D4B0;
  if (!qword_26975D4B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975D4B0);
  }
  return result;
}

unint64_t sub_24A093918()
{
  unint64_t result = qword_26975D4B8;
  if (!qword_26975D4B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975D4B8);
  }
  return result;
}

unint64_t sub_24A093968()
{
  unint64_t result = qword_26975D4C0;
  if (!qword_26975D4C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975D4C0);
  }
  return result;
}

unint64_t sub_24A0939B8()
{
  unint64_t result = qword_26975D4C8;
  if (!qword_26975D4C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975D4C8);
  }
  return result;
}

unint64_t sub_24A093A08()
{
  unint64_t result = qword_26975D4D0;
  if (!qword_26975D4D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975D4D0);
  }
  return result;
}

unint64_t sub_24A093A58()
{
  unint64_t result = qword_26975D4D8;
  if (!qword_26975D4D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975D4D8);
  }
  return result;
}

unint64_t sub_24A093AA8()
{
  unint64_t result = qword_26975D4E0;
  if (!qword_26975D4E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975D4E0);
  }
  return result;
}

unint64_t sub_24A093AF8()
{
  unint64_t result = qword_26975D4E8;
  if (!qword_26975D4E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975D4E8);
  }
  return result;
}

unint64_t sub_24A093B48()
{
  unint64_t result = qword_26975D4F0;
  if (!qword_26975D4F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975D4F0);
  }
  return result;
}

uint64_t sub_24A093B94(uint64_t a1, uint64_t *a2)
{
  sub_24A08DF34(a2);
  sub_24A08F280();
  uint64_t v3 = sub_24A093DD0();
  v4(v3);
  return a1;
}

uint64_t sub_24A093BE0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_24A08DF34(a3);
  sub_24A08F280();
  uint64_t v4 = sub_24A093E4C();
  v5(v4);
  return a2;
}

uint64_t sub_24A093C7C()
{
  return v0;
}

uint64_t sub_24A093C88(uint64_t a1)
{
  return a1 - 8;
}

void sub_24A093C94()
{
  JUMPOUT(0x24C5BAD10);
}

uint64_t sub_24A093CB4(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 20));
}

uint64_t sub_24A093CE4()
{
  return 0;
}

uint64_t sub_24A093CF0()
{
  return 0;
}

uint64_t sub_24A093CFC()
{
  return 0;
}

uint64_t sub_24A093D28()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t sub_24A093D54()
{
  return Message.serializedData(partial:)();
}

uint64_t sub_24A093DB4()
{
  return sub_24A08DEDC(v0, v1);
}

uint64_t sub_24A093DD0()
{
  return v0;
}

double sub_24A093DE0()
{
  *(_OWORD *)(v0 - 112) = *(_OWORD *)(v0 - 96);
  *(void *)(v0 - 128) = 0;
  double result = 0.0;
  *(_OWORD *)(v0 - 160) = 0u;
  *(_OWORD *)(v0 - 144) = 0u;
  return result;
}

uint64_t sub_24A093DF8()
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)();
}

uint64_t sub_24A093E40()
{
  return v0;
}

uint64_t sub_24A093E4C()
{
  return v0;
}

uint64_t sub_24A093E60()
{
  return sub_24A08DE84(v0, v1);
}

uint64_t sub_24A093E78()
{
  return Hasher.init(_seed:)();
}

uint64_t sub_24A093E90()
{
  return 0;
}

uint64_t sub_24A093EA4()
{
  return v0;
}

uint64_t sub_24A093EB8(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x6675626F746F7270 && a2 == 0xEC00000061746144)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    sub_24A08F850();
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

Swift::Int sub_24A093F40()
{
  return Hasher._finalize()();
}

uint64_t sub_24A093F88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t result = sub_24A093EB8(a1, a2);
  *a3 = result != 0;
  return result;
}

uint64_t sub_24A093FB8(uint64_t a1)
{
  unint64_t v2 = sub_24A0943D8();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A093FF4(uint64_t a1)
{
  unint64_t v2 = sub_24A0943D8();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t AssetSkeleton.asset.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_24A0966D0(v1, a1);
}

uint64_t AssetSkeleton.assetID.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_24A0966D0(v1, a1);
}

uint64_t AssetSkeleton.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = a2;
  uint64_t v6 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x270FA5388](v6 - 8);
  unint64_t v29 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for CloudAssets_SimultaneousDownloadableAssets(0);
  sub_24A08F280();
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (uint64_t *)((char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = type metadata accessor for AssetSkeleton();
  MEMORY[0x270FA5388](v11 - 8);
  sub_24A093C34();
  uint64_t v12 = sub_24A08DF34(&qword_26975D508);
  sub_24A08F24C();
  uint64_t v22 = v13;
  MEMORY[0x270FA5388](v14);
  sub_24A08F2C8();
  sub_24A08DF78(a1, a1[3]);
  sub_24A0943D8();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    uint64_t v19 = v4;
    uint64_t v20 = a1;
    uint64_t v15 = v22;
    sub_24A090DC4();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v18 = v12;
    long long v27 = v28;
    uint64_t v26 = 0;
    long long v24 = 0u;
    long long v25 = 0u;
    BinaryDecodingOptions.init()();
    sub_24A095668(&qword_26975D518, (void (*)(uint64_t))type metadata accessor for CloudAssets_SimultaneousDownloadableAssets);
    Message.init<A>(serializedBytes:extensions:partial:options:)();
    uint64_t v17 = v19;
    sub_24A094424(v10, v19);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v3, v18);
    a1 = v20;
    sub_24A096674(v17, v21);
  }
  return sub_24A08E050((uint64_t)a1);
}

uint64_t type metadata accessor for AssetSkeleton()
{
  uint64_t result = qword_26975D530;
  if (!qword_26975D530) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_24A0943D8()
{
  unint64_t result = qword_26975D510;
  if (!qword_26975D510)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975D510);
  }
  return result;
}

uint64_t sub_24A094424@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v80 = a2;
  uint64_t v70 = type metadata accessor for Date();
  uint64_t v74 = *(void *)(v70 - 8);
  MEMORY[0x270FA5388](v70);
  v73 = (char *)&v64 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_24A08DF34(&qword_26975D560);
  MEMORY[0x270FA5388](v4 - 8);
  v75 = (char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Google_Protobuf_Timestamp();
  uint64_t v77 = *(void *)(v6 - 8);
  uint64_t v78 = v6;
  MEMORY[0x270FA5388](v6);
  v76 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_24A08DF34(&qword_26975D568);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v72 = (uint64_t)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = type metadata accessor for CloudAssets_Credential(0);
  MEMORY[0x270FA5388](v71);
  uint64_t v11 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Credential(0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Asset(0);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = (char *)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_24A08DF34(&qword_26975D570);
  MEMORY[0x270FA5388](v18 - 8);
  uint64_t v20 = (char *)&v64 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for CloudAssets_Asset(0);
  uint64_t v22 = MEMORY[0x270FA5388](v21);
  long long v24 = (char *)&v64 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  uint64_t v26 = (char *)&v64 - v25;
  sub_24A0B2978(*a1, (uint64_t)v20);
  if (_s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v20, 1, v21) == 1)
  {
    sub_24A096620((uint64_t)v20, &qword_26975D570);
    sub_24A090E10();
    swift_allocError();
    swift_willThrow();
    long long v27 = type metadata accessor for CloudAssets_SimultaneousDownloadableAssets;
    uint64_t v28 = (uint64_t)a1;
    return sub_24A096720(v28, (void (*)(void))v27);
  }
  uint64_t v66 = v12;
  long long v67 = v11;
  long long v68 = v14;
  v69 = a1;
  uint64_t v29 = v78;
  uint64_t v30 = v80;
  sub_24A096674((uint64_t)v20, (uint64_t)v26);
  sub_24A0966D0((uint64_t)v26, (uint64_t)v24);
  uint64_t v31 = (uint64_t)v79;
  sub_24A091388();
  if (v31)
  {
    sub_24A096720((uint64_t)v69, (void (*)(void))type metadata accessor for CloudAssets_SimultaneousDownloadableAssets);
    long long v27 = type metadata accessor for CloudAssets_Asset;
    uint64_t v28 = (uint64_t)v26;
    return sub_24A096720(v28, (void (*)(void))v27);
  }
  v79 = v26;
  sub_24A096674((uint64_t)v17, v30);
  unint64_t v33 = v69;
  uint64_t v34 = v69[1];
  unint64_t v35 = v69[2];
  uint64_t v65 = type metadata accessor for AssetSkeleton();
  uint64_t v36 = (uint64_t *)(v30 + *(int *)(v65 + 20));
  uint64_t *v36 = v34;
  v36[1] = v35;
  unint64_t v37 = v35;
  uint64_t v38 = (uint64_t)v33 + *(int *)(type metadata accessor for CloudAssets_SimultaneousDownloadableAssets(0) + 32);
  uint64_t v39 = v72;
  sub_24A093BE0(v38, v72, &qword_26975D568);
  uint64_t v40 = v71;
  int v41 = _s10CloudAsset21UploadResponseMessageOwet_0(v39, 1, v71);
  uint64_t v42 = v29;
  uint64_t v44 = v67;
  uint64_t v43 = v68;
  if (v41 == 1)
  {
    *long long v67 = 0;
    v44[1] = 0xE000000000000000;
    v44[2] = 0;
    v44[3] = 0xE000000000000000;
    v44[4] = 0;
    v44[5] = 0xE000000000000000;
    sub_24A08DE84(v34, v37);
    UnknownStorage.init()();
    _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)v44 + *(int *)(v40 + 32), 1, 1, v29);
    sub_24A096620(v39, &qword_26975D568);
  }
  else
  {
    sub_24A096674(v39, (uint64_t)v67);
    sub_24A08DE84(v34, v37);
  }
  uint64_t v45 = (uint64_t)v75;
  uint64_t v46 = v40;
  uint64_t v47 = v44[1];
  *uint64_t v43 = *v44;
  v43[1] = v47;
  uint64_t v48 = v44[3];
  v43[2] = v44[2];
  v43[3] = v48;
  uint64_t v49 = v44[5];
  v43[4] = v44[4];
  v43[5] = v49;
  sub_24A093BE0((uint64_t)v44 + *(int *)(v46 + 32), v45, &qword_26975D560);
  int v50 = _s10CloudAsset21UploadResponseMessageOwet_0(v45, 1, v29);
  uint64_t v51 = v74;
  uint64_t v52 = v66;
  if (v50 == 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v53 = v76;
    Google_Protobuf_Timestamp.init()();
    sub_24A096620(v45, &qword_26975D560);
    uint64_t v54 = v77;
  }
  else
  {
    uint64_t v55 = v45;
    v53 = v76;
    uint64_t v54 = v77;
    (*(void (**)(char *, uint64_t, uint64_t))(v77 + 32))(v76, v55, v42);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v56 = v73;
  Google_Protobuf_Timestamp.date.getter();
  sub_24A096720((uint64_t)v67, (void (*)(void))type metadata accessor for CloudAssets_Credential);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v53, v42);
  uint64_t v57 = (uint64_t)v68;
  (*(void (**)(char *, char *, uint64_t))(v51 + 32))((char *)v68 + *(int *)(v52 + 28), v56, v70);
  sub_24A096720((uint64_t)v79, (void (*)(void))type metadata accessor for CloudAssets_Asset);
  uint64_t v58 = v65;
  uint64_t v59 = v80;
  sub_24A096674(v57, v80 + *(int *)(v65 + 28));
  uint64_t v60 = v69;
  uint64_t v61 = v69[3];
  unint64_t v62 = v69[4];
  sub_24A08DE84(v61, v62);
  uint64_t result = sub_24A096720((uint64_t)v60, (void (*)(void))type metadata accessor for CloudAssets_SimultaneousDownloadableAssets);
  v63 = (uint64_t *)(v59 + *(int *)(v58 + 24));
  uint64_t *v63 = v61;
  v63[1] = v62;
  return result;
}

uint64_t AssetSkeleton.init(asset:credential:storageReference:storageReferenceSignature:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  sub_24A096674(a1, a7);
  uint64_t v13 = (int *)type metadata accessor for AssetSkeleton();
  uint64_t result = sub_24A096674(a2, a7 + v13[7]);
  uint64_t v15 = (void *)(a7 + v13[5]);
  void *v15 = a3;
  v15[1] = a4;
  uint64_t v16 = (void *)(a7 + v13[6]);
  *uint64_t v16 = a5;
  v16[1] = a6;
  return result;
}

uint64_t sub_24A094C34@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v39 = *(void *)(v3 - 8);
  uint64_t v40 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v38 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Google_Protobuf_Timestamp();
  uint64_t v41 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  unint64_t v37 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for CloudAssets_Credential(0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (uint64_t *)((char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  *(_OWORD *)(a1 + 3) = xmmword_24A0E6FA0;
  uint64_t v10 = type metadata accessor for CloudAssets_SimultaneousDownloadableAssets(0);
  UnknownStorage.init()();
  uint64_t v36 = (uint64_t)a1 + *(int *)(v10 + 32);
  _s10CloudAsset21UploadResponseMessageOwst_0(v36, 1, 1, v7);
  sub_24A08DF34(&qword_26975D558);
  uint64_t v11 = *(void *)(type metadata accessor for CloudAssets_Asset(0) - 8);
  unint64_t v12 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_24A0E75F0;
  sub_24A091C30((void *)(v13 + v12));
  *a1 = v13;
  uint64_t v14 = (int *)type metadata accessor for AssetSkeleton();
  uint64_t v15 = v14[5];
  uint64_t v35 = v1;
  uint64_t v16 = (uint64_t *)(v1 + v15);
  uint64_t v17 = *v16;
  unint64_t v18 = v16[1];
  a1[1] = *v16;
  a1[2] = v18;
  uint64_t v19 = (char *)(v1 + v14[7]);
  sub_24A08DE84(v17, v18);
  UnknownStorage.init()();
  uint64_t v20 = (uint64_t)v9 + *(int *)(v7 + 32);
  uint64_t v21 = v5;
  _s10CloudAsset21UploadResponseMessageOwst_0(v20, 1, 1, v5);
  uint64_t v22 = *((void *)v19 + 1);
  *uint64_t v9 = *(void *)v19;
  v9[1] = v22;
  uint64_t v23 = *((void *)v19 + 3);
  v9[2] = *((void *)v19 + 2);
  v9[3] = v23;
  uint64_t v24 = *((void *)v19 + 5);
  v9[4] = *((void *)v19 + 4);
  v9[5] = v24;
  uint64_t v25 = type metadata accessor for Credential(0);
  (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v38, &v19[*(int *)(v25 + 28)], v40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v26 = v37;
  Google_Protobuf_Timestamp.init(date:)();
  sub_24A096620(v20, &qword_26975D560);
  (*(void (**)(uint64_t, char *, uint64_t))(v41 + 32))(v20, v26, v21);
  _s10CloudAsset21UploadResponseMessageOwst_0(v20, 0, 1, v21);
  uint64_t v27 = v36;
  sub_24A096620(v36, &qword_26975D568);
  sub_24A096674((uint64_t)v9, v27);
  _s10CloudAsset21UploadResponseMessageOwst_0(v27, 0, 1, v7);
  uint64_t v28 = (uint64_t *)(v35 + v14[6]);
  uint64_t v29 = *v28;
  unint64_t v30 = v28[1];
  uint64_t v31 = a1[3];
  unint64_t v32 = a1[4];
  sub_24A08DE84(*v28, v30);
  uint64_t result = sub_24A08DEDC(v31, v32);
  a1[3] = v29;
  a1[4] = v30;
  return result;
}

uint64_t AssetSkeleton.encode(to:)()
{
  uint64_t v4 = sub_24A093CE4();
  type metadata accessor for CloudAssets_SimultaneousDownloadableAssets(v4);
  sub_24A08F280();
  MEMORY[0x270FA5388](v5);
  sub_24A093C34();
  uint64_t v13 = sub_24A08DF34(&qword_26975D520);
  sub_24A08F24C();
  uint64_t v7 = v6;
  MEMORY[0x270FA5388](v8);
  sub_24A08F2C8();
  sub_24A08DF78(v0, v0[3]);
  sub_24A0943D8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_24A094C34(v3);
  sub_24A095668(&qword_26975D518, (void (*)(uint64_t))type metadata accessor for CloudAssets_SimultaneousDownloadableAssets);
  uint64_t v9 = Message.serializedData(partial:)();
  unint64_t v11 = v10;
  sub_24A096720((uint64_t)v3, (void (*)(void))type metadata accessor for CloudAssets_SimultaneousDownloadableAssets);
  if (!v1)
  {
    sub_24A090E5C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    sub_24A08DEDC(v9, v11);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v2, v13);
}

uint64_t AssetSkeleton.hash(into:)(uint64_t a1)
{
  Asset.ID.hash(into:)();
  type metadata accessor for Asset(0);
  sub_24A0967D0();
  uint64_t v6 = *(void *)(v5 + 16);
  unint64_t v7 = *(void *)(v5 + 24);
  sub_24A08DE84(v2, v3);
  sub_24A096794();
  sub_24A08DEDC(v2, v3);
  sub_24A08DE84(v6, v7);
  Data.hash(into:)();
  sub_24A08DEDC(v6, v7);
  Hasher._combine(_:)(*(void *)(v1 + *(int *)(v1 + 24)));
  type metadata accessor for AssetSkeleton();
  sub_24A0967D0();
  sub_24A08DE84(v2, v3);
  sub_24A096794();
  sub_24A08DEDC(v2, v3);
  uint64_t v8 = (uint64_t *)(v1 + *(int *)(a1 + 24));
  uint64_t v9 = *v8;
  unint64_t v10 = v8[1];
  sub_24A08DE84(*v8, v10);
  sub_24A096794();
  sub_24A08DEDC(v9, v10);
  return Credential.hash(into:)();
}

uint64_t static AssetSkeleton.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (!static Asset.== infix(_:_:)(a1, a2)) {
    return 0;
  }
  uint64_t v4 = type metadata accessor for AssetSkeleton();
  sub_24A093C94();
  if ((v5 & 1) == 0) {
    return 0;
  }
  sub_24A093C94();
  if ((v6 & 1) == 0) {
    return 0;
  }
  uint64_t v7 = *(int *)(v4 + 28);
  return static Credential.== infix(_:_:)((void *)(a1 + v7), (void *)(a2 + v7));
}

Swift::Int AssetSkeleton.hashValue.getter()
{
  uint64_t v1 = v0;
  Hasher.init(_seed:)();
  Asset.ID.hash(into:)();
  uint64_t v2 = type metadata accessor for Asset(0);
  unint64_t v3 = (uint64_t *)(v1 + *(int *)(v2 + 20));
  uint64_t v4 = *v3;
  unint64_t v5 = v3[1];
  uint64_t v6 = v3[2];
  unint64_t v7 = v3[3];
  sub_24A08DE84(*v3, v5);
  sub_24A096778();
  sub_24A08DEDC(v4, v5);
  sub_24A08DE84(v6, v7);
  Data.hash(into:)();
  sub_24A08DEDC(v6, v7);
  Hasher._combine(_:)(*(void *)(v1 + *(int *)(v2 + 24)));
  uint64_t v8 = type metadata accessor for AssetSkeleton();
  sub_24A0967B0(*(int *)(v8 + 20));
  sub_24A096778();
  sub_24A08DEDC(v4, v5);
  sub_24A0967B0(*(int *)(v8 + 24));
  sub_24A096778();
  sub_24A08DEDC(v4, v5);
  Credential.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int sub_24A09549C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  Hasher.init(_seed:)();
  Asset.ID.hash(into:)();
  uint64_t v5 = type metadata accessor for Asset(0);
  uint64_t v6 = (uint64_t *)(v4 + *(int *)(v5 + 20));
  uint64_t v7 = *v6;
  unint64_t v8 = v6[1];
  uint64_t v9 = v6[2];
  unint64_t v10 = v6[3];
  sub_24A08DE84(*v6, v8);
  Data.hash(into:)();
  sub_24A08DEDC(v7, v8);
  sub_24A08DE84(v9, v10);
  Data.hash(into:)();
  sub_24A08DEDC(v9, v10);
  Hasher._combine(_:)(*(void *)(v4 + *(int *)(v5 + 24)));
  unint64_t v11 = (uint64_t *)(v4 + *(int *)(a2 + 20));
  uint64_t v12 = *v11;
  unint64_t v13 = v11[1];
  sub_24A08DE84(*v11, v13);
  Data.hash(into:)();
  sub_24A08DEDC(v12, v13);
  uint64_t v14 = (uint64_t *)(v4 + *(int *)(a2 + 24));
  uint64_t v15 = *v14;
  unint64_t v16 = v14[1];
  sub_24A08DE84(*v14, v16);
  Data.hash(into:)();
  sub_24A08DEDC(v15, v16);
  Credential.hash(into:)();
  return Hasher._finalize()();
}

uint64_t sub_24A0955EC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return AssetSkeleton.init(from:)(a1, a2);
}

uint64_t sub_24A095604()
{
  return AssetSkeleton.encode(to:)();
}

uint64_t sub_24A095620()
{
  return sub_24A095668(&qword_26975D528, (void (*)(uint64_t))type metadata accessor for AssetSkeleton);
}

uint64_t sub_24A095668(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AssetSkeleton(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v53 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v53 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    unint64_t v8 = (int *)type metadata accessor for Asset.ID(0);
    uint64_t v9 = v8[5];
    unint64_t v10 = (uint64_t *)((char *)a1 + v9);
    unint64_t v11 = (uint64_t *)((char *)a2 + v9);
    uint64_t v12 = v11[1];
    *unint64_t v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = v8[6];
    uint64_t v14 = (uint64_t *)((char *)a1 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t v16 = *v15;
    unint64_t v17 = v15[1];
    swift_bridgeObjectRetain();
    sub_24A08DE84(v16, v17);
    *uint64_t v14 = v16;
    v14[1] = v17;
    uint64_t v18 = v8[7];
    uint64_t v19 = (uint64_t *)((char *)a1 + v18);
    uint64_t v20 = (uint64_t *)((char *)a2 + v18);
    uint64_t v21 = *v20;
    unint64_t v22 = v20[1];
    sub_24A08DE84(*v20, v22);
    *uint64_t v19 = v21;
    v19[1] = v22;
    uint64_t v23 = type metadata accessor for Asset(0);
    uint64_t v24 = *(int *)(v23 + 20);
    uint64_t v25 = (uint64_t *)((char *)a1 + v24);
    uint64_t v26 = (char *)a2 + v24;
    uint64_t v27 = *(uint64_t *)((char *)a2 + v24);
    unint64_t v28 = *(uint64_t *)((char *)a2 + v24 + 8);
    sub_24A08DE84(v27, v28);
    *uint64_t v25 = v27;
    v25[1] = v28;
    uint64_t v29 = *((void *)v26 + 2);
    unint64_t v30 = *((void *)v26 + 3);
    sub_24A08DE84(v29, v30);
    v25[2] = v29;
    v25[3] = v30;
    *(uint64_t *)((char *)a1 + *(int *)(v23 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(v23 + 24));
    uint64_t v31 = a3[5];
    unint64_t v32 = (uint64_t *)((char *)a1 + v31);
    unint64_t v33 = (uint64_t *)((char *)a2 + v31);
    uint64_t v34 = *v33;
    unint64_t v35 = v33[1];
    sub_24A08DE84(*v33, v35);
    *unint64_t v32 = v34;
    v32[1] = v35;
    uint64_t v36 = a3[6];
    unint64_t v37 = (uint64_t *)((char *)a1 + v36);
    uint64_t v38 = (uint64_t *)((char *)a2 + v36);
    uint64_t v39 = *v38;
    unint64_t v40 = v38[1];
    sub_24A08DE84(*v38, v40);
    *unint64_t v37 = v39;
    v37[1] = v40;
    uint64_t v41 = a3[7];
    uint64_t v42 = (uint64_t *)((char *)a1 + v41);
    uint64_t v43 = (uint64_t *)((char *)a2 + v41);
    uint64_t v44 = *(uint64_t *)((char *)a2 + v41);
    uint64_t v45 = v43[1];
    *uint64_t v42 = v44;
    v42[1] = v45;
    uint64_t v46 = v43[3];
    v42[2] = v43[2];
    v42[3] = v46;
    uint64_t v47 = v43[5];
    v42[4] = v43[4];
    v42[5] = v47;
    uint64_t v48 = *(int *)(type metadata accessor for Credential(0) + 28);
    uint64_t v49 = (char *)v42 + v48;
    int v50 = (char *)v43 + v48;
    uint64_t v51 = type metadata accessor for Date();
    uint64_t v52 = *(void (**)(char *, char *, uint64_t))(*(void *)(v51 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v52(v49, v50, v51);
  }
  return a1;
}

uint64_t destroy for AssetSkeleton(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = type metadata accessor for Asset.ID(0);
  swift_bridgeObjectRelease();
  sub_24A08DEDC(*(void *)(a1 + *(int *)(v5 + 24)), *(void *)(a1 + *(int *)(v5 + 24) + 8));
  sub_24A08DEDC(*(void *)(a1 + *(int *)(v5 + 28)), *(void *)(a1 + *(int *)(v5 + 28) + 8));
  uint64_t v6 = a1 + *(int *)(type metadata accessor for Asset(0) + 20);
  sub_24A08DEDC(*(void *)v6, *(void *)(v6 + 8));
  sub_24A08DEDC(*(void *)(v6 + 16), *(void *)(v6 + 24));
  sub_24A08DEDC(*(void *)(a1 + a2[5]), *(void *)(a1 + a2[5] + 8));
  sub_24A08DEDC(*(void *)(a1 + a2[6]), *(void *)(a1 + a2[6] + 8));
  uint64_t v7 = a1 + a2[7];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = v7 + *(int *)(type metadata accessor for Credential(0) + 28);
  uint64_t v9 = type metadata accessor for Date();
  unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);
  return v10(v8, v9);
}

uint64_t initializeWithCopy for AssetSkeleton(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for Asset.ID(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = (void *)(a1 + v8);
  unint64_t v10 = (void *)(a2 + v8);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = v7[6];
  uint64_t v13 = (uint64_t *)(a1 + v12);
  uint64_t v14 = (uint64_t *)(a2 + v12);
  uint64_t v15 = *v14;
  unint64_t v16 = v14[1];
  swift_bridgeObjectRetain();
  sub_24A08DE84(v15, v16);
  uint64_t *v13 = v15;
  v13[1] = v16;
  uint64_t v17 = v7[7];
  uint64_t v18 = (uint64_t *)(a1 + v17);
  uint64_t v19 = (uint64_t *)(a2 + v17);
  uint64_t v20 = *v19;
  unint64_t v21 = v19[1];
  sub_24A08DE84(*v19, v21);
  *uint64_t v18 = v20;
  v18[1] = v21;
  uint64_t v22 = type metadata accessor for Asset(0);
  uint64_t v23 = *(int *)(v22 + 20);
  uint64_t v24 = (uint64_t *)(a1 + v23);
  uint64_t v25 = a2 + v23;
  uint64_t v26 = *(void *)(a2 + v23);
  unint64_t v27 = *(void *)(a2 + v23 + 8);
  sub_24A08DE84(v26, v27);
  *uint64_t v24 = v26;
  v24[1] = v27;
  uint64_t v28 = *(void *)(v25 + 16);
  unint64_t v29 = *(void *)(v25 + 24);
  sub_24A08DE84(v28, v29);
  void v24[2] = v28;
  v24[3] = v29;
  *(void *)(a1 + *(int *)(v22 + 24)) = *(void *)(a2 + *(int *)(v22 + 24));
  uint64_t v30 = a3[5];
  uint64_t v31 = (uint64_t *)(a1 + v30);
  unint64_t v32 = (uint64_t *)(a2 + v30);
  uint64_t v33 = *v32;
  unint64_t v34 = v32[1];
  sub_24A08DE84(*v32, v34);
  *uint64_t v31 = v33;
  v31[1] = v34;
  uint64_t v35 = a3[6];
  uint64_t v36 = (uint64_t *)(a1 + v35);
  unint64_t v37 = (uint64_t *)(a2 + v35);
  uint64_t v38 = *v37;
  unint64_t v39 = v37[1];
  sub_24A08DE84(*v37, v39);
  uint64_t *v36 = v38;
  v36[1] = v39;
  uint64_t v40 = a3[7];
  uint64_t v41 = (void *)(a1 + v40);
  uint64_t v42 = (void *)(a2 + v40);
  uint64_t v43 = *(void *)(a2 + v40);
  uint64_t v44 = v42[1];
  *uint64_t v41 = v43;
  v41[1] = v44;
  uint64_t v45 = v42[3];
  v41[2] = v42[2];
  v41[3] = v45;
  uint64_t v46 = v42[5];
  v41[4] = v42[4];
  v41[5] = v46;
  uint64_t v47 = *(int *)(type metadata accessor for Credential(0) + 28);
  uint64_t v48 = (char *)v41 + v47;
  uint64_t v49 = (char *)v42 + v47;
  uint64_t v50 = type metadata accessor for Date();
  uint64_t v51 = *(void (**)(char *, char *, uint64_t))(*(void *)(v50 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v51(v48, v49, v50);
  return a1;
}

uint64_t assignWithCopy for AssetSkeleton(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for Asset.ID(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = (void *)(a1 + v8);
  unint64_t v10 = (void *)(a2 + v8);
  *uint64_t v9 = *v10;
  v9[1] = v10[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v11 = v7[6];
  uint64_t v12 = (uint64_t *)(a1 + v11);
  uint64_t v13 = (uint64_t *)(a2 + v11);
  uint64_t v14 = *v13;
  unint64_t v15 = v13[1];
  sub_24A08DE84(*v13, v15);
  uint64_t v16 = *v12;
  unint64_t v17 = v12[1];
  *uint64_t v12 = v14;
  v12[1] = v15;
  sub_24A08DEDC(v16, v17);
  uint64_t v18 = v7[7];
  uint64_t v19 = (uint64_t *)(a1 + v18);
  uint64_t v20 = (uint64_t *)(a2 + v18);
  uint64_t v21 = *v20;
  unint64_t v22 = v20[1];
  sub_24A08DE84(*v20, v22);
  uint64_t v23 = *v19;
  unint64_t v24 = v19[1];
  *uint64_t v19 = v21;
  v19[1] = v22;
  sub_24A08DEDC(v23, v24);
  uint64_t v25 = type metadata accessor for Asset(0);
  uint64_t v26 = *(int *)(v25 + 20);
  unint64_t v27 = (uint64_t *)(a1 + v26);
  uint64_t v28 = a2 + v26;
  uint64_t v29 = *(void *)(a2 + v26);
  unint64_t v30 = *(void *)(a2 + v26 + 8);
  sub_24A08DE84(v29, v30);
  uint64_t v31 = *v27;
  unint64_t v32 = v27[1];
  *unint64_t v27 = v29;
  v27[1] = v30;
  sub_24A08DEDC(v31, v32);
  uint64_t v33 = *(void *)(v28 + 16);
  unint64_t v34 = *(void *)(v28 + 24);
  sub_24A08DE84(v33, v34);
  uint64_t v35 = v27[2];
  unint64_t v36 = v27[3];
  v27[2] = v33;
  v27[3] = v34;
  sub_24A08DEDC(v35, v36);
  *(void *)(a1 + *(int *)(v25 + 24)) = *(void *)(a2 + *(int *)(v25 + 24));
  uint64_t v37 = a3[5];
  uint64_t v38 = (uint64_t *)(a1 + v37);
  unint64_t v39 = (uint64_t *)(a2 + v37);
  uint64_t v40 = *v39;
  unint64_t v41 = v39[1];
  sub_24A08DE84(*v39, v41);
  uint64_t v42 = *v38;
  unint64_t v43 = v38[1];
  *uint64_t v38 = v40;
  v38[1] = v41;
  sub_24A08DEDC(v42, v43);
  uint64_t v44 = a3[6];
  uint64_t v45 = (uint64_t *)(a1 + v44);
  uint64_t v46 = (uint64_t *)(a2 + v44);
  uint64_t v47 = *v46;
  unint64_t v48 = v46[1];
  sub_24A08DE84(*v46, v48);
  uint64_t v49 = *v45;
  unint64_t v50 = v45[1];
  *uint64_t v45 = v47;
  v45[1] = v48;
  sub_24A08DEDC(v49, v50);
  uint64_t v51 = a3[7];
  uint64_t v52 = (void *)(a1 + v51);
  uint64_t v53 = (void *)(a2 + v51);
  void *v52 = *(void *)(a2 + v51);
  v52[1] = *(void *)(a2 + v51 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v52[2] = v53[2];
  v52[3] = v53[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v52[4] = v53[4];
  v52[5] = v53[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v54 = *(int *)(type metadata accessor for Credential(0) + 28);
  uint64_t v55 = (char *)v52 + v54;
  uint64_t v56 = (char *)v53 + v54;
  uint64_t v57 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 24))(v55, v56, v57);
  return a1;
}

uint64_t initializeWithTake for AssetSkeleton(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for Asset.ID(0);
  *(_OWORD *)(a1 + v7[5]) = *(_OWORD *)(a2 + v7[5]);
  *(_OWORD *)(a1 + v7[6]) = *(_OWORD *)(a2 + v7[6]);
  *(_OWORD *)(a1 + v7[7]) = *(_OWORD *)(a2 + v7[7]);
  uint64_t v8 = type metadata accessor for Asset(0);
  uint64_t v9 = *(int *)(v8 + 20);
  unint64_t v10 = (_OWORD *)(a1 + v9);
  uint64_t v11 = (_OWORD *)(a2 + v9);
  long long v12 = v11[1];
  *unint64_t v10 = *v11;
  v10[1] = v12;
  *(void *)(a1 + *(int *)(v8 + 24)) = *(void *)(a2 + *(int *)(v8 + 24));
  uint64_t v13 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v13) = *(_OWORD *)(a2 + v13);
  uint64_t v14 = a3[7];
  unint64_t v15 = (_OWORD *)(a1 + v14);
  uint64_t v16 = (_OWORD *)(a2 + v14);
  long long v17 = v16[1];
  _OWORD *v15 = *v16;
  v15[1] = v17;
  v15[2] = v16[2];
  uint64_t v18 = *(int *)(type metadata accessor for Credential(0) + 28);
  uint64_t v19 = (char *)v15 + v18;
  uint64_t v20 = (char *)v16 + v18;
  uint64_t v21 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v19, v20, v21);
  return a1;
}

uint64_t assignWithTake for AssetSkeleton(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for Asset.ID(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = (void *)(a1 + v8);
  unint64_t v10 = (uint64_t *)(a2 + v8);
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  *uint64_t v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease();
  uint64_t v13 = v7[6];
  uint64_t v14 = *(void *)(a1 + v13);
  unint64_t v15 = *(void *)(a1 + v13 + 8);
  *(_OWORD *)(a1 + v13) = *(_OWORD *)(a2 + v13);
  sub_24A08DEDC(v14, v15);
  uint64_t v16 = v7[7];
  uint64_t v17 = *(void *)(a1 + v16);
  unint64_t v18 = *(void *)(a1 + v16 + 8);
  *(_OWORD *)(a1 + v16) = *(_OWORD *)(a2 + v16);
  sub_24A08DEDC(v17, v18);
  uint64_t v19 = type metadata accessor for Asset(0);
  uint64_t v20 = *(int *)(v19 + 20);
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  uint64_t v23 = *(void *)(a1 + v20);
  unint64_t v24 = *(void *)(a1 + v20 + 8);
  *(_OWORD *)(a1 + v20) = *(_OWORD *)(a2 + v20);
  sub_24A08DEDC(v23, v24);
  uint64_t v25 = *(void *)(v21 + 16);
  unint64_t v26 = *(void *)(v21 + 24);
  *(_OWORD *)(v21 + 16) = *(_OWORD *)(v22 + 16);
  sub_24A08DEDC(v25, v26);
  *(void *)(a1 + *(int *)(v19 + 24)) = *(void *)(a2 + *(int *)(v19 + 24));
  uint64_t v27 = a3[5];
  uint64_t v28 = *(void *)(a1 + v27);
  unint64_t v29 = *(void *)(a1 + v27 + 8);
  *(_OWORD *)(a1 + v27) = *(_OWORD *)(a2 + v27);
  sub_24A08DEDC(v28, v29);
  uint64_t v30 = a3[6];
  uint64_t v31 = *(void *)(a1 + v30);
  unint64_t v32 = *(void *)(a1 + v30 + 8);
  *(_OWORD *)(a1 + v30) = *(_OWORD *)(a2 + v30);
  sub_24A08DEDC(v31, v32);
  uint64_t v33 = a3[7];
  unint64_t v34 = (void *)(a1 + v33);
  uint64_t v35 = (void *)(a2 + v33);
  uint64_t v36 = *(void *)(a2 + v33 + 8);
  *unint64_t v34 = *(void *)(a2 + v33);
  v34[1] = v36;
  swift_bridgeObjectRelease();
  uint64_t v37 = v35[3];
  v34[2] = v35[2];
  v34[3] = v37;
  swift_bridgeObjectRelease();
  uint64_t v38 = v35[5];
  v34[4] = v35[4];
  v34[5] = v38;
  swift_bridgeObjectRelease();
  uint64_t v39 = *(int *)(type metadata accessor for Credential(0) + 28);
  uint64_t v40 = (char *)v34 + v39;
  unint64_t v41 = (char *)v35 + v39;
  uint64_t v42 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v42 - 8) + 40))(v40, v41, v42);
  return a1;
}

uint64_t getEnumTagSinglePayload for AssetSkeleton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A0961FC);
}

uint64_t sub_24A0961FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for Asset(0);
  sub_24A08F268();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1;
  }
  else
  {
    if (a2 == 12)
    {
      uint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8) >> 60;
      if (((4 * v10) & 0xC) != 0) {
        return 16 - ((4 * v10) & 0xC | (v10 >> 2));
      }
      else {
        return 0;
      }
    }
    uint64_t v8 = type metadata accessor for Credential(0);
    uint64_t v9 = a1 + *(int *)(a3 + 28);
  }
  return _s10CloudAsset21UploadResponseMessageOwet_0(v9, a2, v8);
}

uint64_t storeEnumTagSinglePayload for AssetSkeleton(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A0962D0);
}

void sub_24A0962D0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for Asset(0);
  sub_24A08F268();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1;
  }
  else
  {
    if (a3 == 12)
    {
      uint64_t v12 = (void *)(a1 + *(int *)(a4 + 20));
      *uint64_t v12 = 0;
      v12[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
      return;
    }
    uint64_t v10 = type metadata accessor for Credential(0);
    uint64_t v11 = a1 + *(int *)(a4 + 28);
  }
  _s10CloudAsset21UploadResponseMessageOwst_0(v11, a2, a2, v10);
}

uint64_t sub_24A096388()
{
  uint64_t result = type metadata accessor for Asset(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Credential(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AssetSkeleton.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x24A0964F8);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for AssetSkeleton.CodingKeys()
{
  return &type metadata for AssetSkeleton.CodingKeys;
}

unint64_t sub_24A096534()
{
  unint64_t result = qword_26975D540;
  if (!qword_26975D540)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975D540);
  }
  return result;
}

unint64_t sub_24A096584()
{
  unint64_t result = qword_26975D548;
  if (!qword_26975D548)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975D548);
  }
  return result;
}

unint64_t sub_24A0965D4()
{
  unint64_t result = qword_26975D550;
  if (!qword_26975D550)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975D550);
  }
  return result;
}

uint64_t sub_24A096620(uint64_t a1, uint64_t *a2)
{
  sub_24A08DF34(a2);
  sub_24A08F280();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t sub_24A096674(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A093CE4();
  v5(v4);
  sub_24A08F280();
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(a2, v2);
  return a2;
}

uint64_t sub_24A0966D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_24A093CE4();
  v4(v3);
  sub_24A08F280();
  uint64_t v5 = sub_24A093E4C();
  v6(v5);
  return a2;
}

uint64_t sub_24A096720(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_24A08F280();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t sub_24A096778()
{
  return Data.hash(into:)();
}

uint64_t sub_24A096794()
{
  return Data.hash(into:)();
}

uint64_t sub_24A0967B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = (uint64_t *)(v1 + a1);
  uint64_t v4 = *v3;
  unint64_t v5 = v3[1];
  return sub_24A08DE84(v4, v5);
}

uint64_t sub_24A0967E4()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_24A0967EC@<X0>(uint64_t a1@<X8>)
{
  return sub_24A096814(&OBJC_IVAR____TtC10CloudAsset23AssetsUploadCoordinator__signals, &qword_26975D580, a1);
}

uint64_t sub_24A096800@<X0>(uint64_t a1@<X8>)
{
  return sub_24A096814(&OBJC_IVAR____TtC10CloudAsset23AssetsUploadCoordinator__results, &qword_26975D590, a1);
}

uint64_t sub_24A096814@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = v3 + *a1;
  sub_24A08DF34(a2);
  sub_24A08F280();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  return v8(a3, v5, v6);
}

uint64_t sub_24A09687C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_defaultActor_initialize();
  *(void *)(v3 + 112) = a1;
  uint64_t v7 = v3 + OBJC_IVAR____TtC10CloudAsset23AssetsUploadCoordinator__signals;
  sub_24A08DF34(&qword_26975D580);
  sub_24A08F280();
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v7, a2);
  uint64_t v9 = v3 + OBJC_IVAR____TtC10CloudAsset23AssetsUploadCoordinator__results;
  sub_24A08DF34(&qword_26975D590);
  sub_24A08F280();
  (*(void (**)(uint64_t, uint64_t))(v10 + 32))(v9, a3);
  return v3;
}

uint64_t AssetsUploadCoordinator.deinit()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC10CloudAsset23AssetsUploadCoordinator__signals;
  sub_24A08DF34(&qword_26975D580);
  sub_24A08F280();
  (*(void (**)(uint64_t))(v2 + 8))(v1);
  uint64_t v3 = v0 + OBJC_IVAR____TtC10CloudAsset23AssetsUploadCoordinator__results;
  sub_24A08DF34(&qword_26975D590);
  sub_24A08F280();
  (*(void (**)(uint64_t))(v4 + 8))(v3);
  swift_defaultActor_destroy();
  return v0;
}

uint64_t AssetsUploadCoordinator.__deallocating_deinit()
{
  AssetsUploadCoordinator.deinit();
  return MEMORY[0x270FA2418](v0);
}

uint64_t AssetsUploadCoordinator.unownedExecutor.getter()
{
  return v0;
}

uint64_t sub_24A096A2C()
{
  return AssetsUploadCoordinator.unownedExecutor.getter();
}

uint64_t sub_24A096A48()
{
  return type metadata accessor for AssetsUploadCoordinator();
}

uint64_t type metadata accessor for AssetsUploadCoordinator()
{
  uint64_t result = qword_26975D598;
  if (!qword_26975D598) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_24A096A98()
{
  sub_24A096C00();
  if (v0 <= 0x3F)
  {
    sub_24A096C6C();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t method lookup function for AssetsUploadCoordinator(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AssetsUploadCoordinator);
}

uint64_t dispatch thunk of AssetsUploadCoordinator.assetSkeletons.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of AssetsUploadCoordinator.signals.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of AssetsUploadCoordinator.results.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

void sub_24A096C00()
{
  if (!qword_26975D5A8)
  {
    sub_24A08E008(&qword_26975D5B0);
    unint64_t v0 = type metadata accessor for AsyncThrowingStream();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26975D5A8);
    }
  }
}

void sub_24A096C6C()
{
  if (!qword_26975D5B8)
  {
    sub_24A08E008(&qword_26975D5C0);
    sub_24A08E008(&qword_26975D5B0);
    unint64_t v0 = type metadata accessor for AsyncThrowingStream();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26975D5B8);
    }
  }
}

uint64_t XPCAsyncSequenceRequest.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v1, v3);
}

uint64_t XPCAsyncSequenceRequest.data.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for XPCAsyncSequenceRequest() + 20);
  uint64_t v2 = *(void *)v1;
  sub_24A08DE84(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t type metadata accessor for XPCAsyncSequenceRequest()
{
  uint64_t result = qword_26975D5E0;
  if (!qword_26975D5E0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

BOOL sub_24A096DD8(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void sub_24A096DE8(uint64_t a1, char a2)
{
}

uint64_t sub_24A096E10(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1635017060 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_24A096ED8()
{
  return 2;
}

Swift::Int sub_24A096EE0(char a1)
{
  return Hasher._finalize()();
}

uint64_t sub_24A096F28(char a1)
{
  if (a1) {
    return 1635017060;
  }
  else {
    return 25705;
  }
}

BOOL sub_24A096F4C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_24A096DD8(*a1, *a2);
}

Swift::Int sub_24A096F58()
{
  return sub_24A096EE0(*v0);
}

void sub_24A096F60(uint64_t a1)
{
  sub_24A096DE8(a1, *v1);
}

uint64_t sub_24A096F68()
{
  return sub_24A096F28(*v0);
}

uint64_t sub_24A096F70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_24A096E10(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_24A096F98@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_24A096ED8();
  *a1 = result;
  return result;
}

uint64_t sub_24A096FC0(uint64_t a1)
{
  unint64_t v2 = sub_24A0971B8();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A096FFC(uint64_t a1)
{
  unint64_t v2 = sub_24A0971B8();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t XPCAsyncSequenceRequest.encode(to:)(void *a1)
{
  uint64_t v4 = sub_24A08DF34(&qword_26975D5C8);
  sub_24A08F24C();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  sub_24A08F2C8();
  sub_24A08DF78(a1, a1[3]);
  sub_24A0971B8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for UUID();
  sub_24A0975AC(&qword_26975D360);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for XPCAsyncSequenceRequest();
    sub_24A090E5C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v2, v4);
}

unint64_t sub_24A0971B8()
{
  unint64_t result = qword_26975D5D0;
  if (!qword_26975D5D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975D5D0);
  }
  return result;
}

uint64_t XPCAsyncSequenceRequest.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22 = a2;
  uint64_t v25 = type metadata accessor for UUID();
  sub_24A08F24C();
  uint64_t v23 = v5;
  MEMORY[0x270FA5388](v6);
  sub_24A08F2C8();
  uint64_t v26 = sub_24A08DF34(&qword_26975D5D8);
  sub_24A08F24C();
  uint64_t v24 = v7;
  MEMORY[0x270FA5388](v8);
  uint64_t v9 = type metadata accessor for XPCAsyncSequenceRequest();
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A08DF78(a1, a1[3]);
  sub_24A0971B8();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_24A08E050((uint64_t)a1);
  }
  uint64_t v12 = v11;
  uint64_t v13 = v23;
  LOBYTE(v27) = 0;
  sub_24A0975AC(&qword_26975D390);
  uint64_t v14 = v25;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  unint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 32);
  uint64_t v21 = (uint64_t)v12;
  v15(v12, v3, v14);
  char v28 = 1;
  sub_24A090DC4();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v16 = sub_24A097E24();
  v17(v16);
  uint64_t v19 = v21;
  uint64_t v18 = v22;
  *(_OWORD *)(v21 + *(int *)(v9 + 20)) = v27;
  sub_24A0974B8(v19, v18);
  sub_24A08E050((uint64_t)a1);
  return sub_24A09751C(v19);
}

uint64_t sub_24A0974B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for XPCAsyncSequenceRequest();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_24A09751C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for XPCAsyncSequenceRequest();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_24A097578()
{
  return sub_24A0975AC(&qword_26975D340);
}

uint64_t sub_24A0975AC(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for UUID();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24A0975F4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return XPCAsyncSequenceRequest.init(from:)(a1, a2);
}

uint64_t sub_24A09760C(void *a1)
{
  return XPCAsyncSequenceRequest.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for XPCAsyncSequenceRequest(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = *v10;
    unint64_t v12 = v10[1];
    sub_24A08DE84(*v10, v12);
    *uint64_t v9 = v11;
    v9[1] = v12;
  }
  return a1;
}

uint64_t destroy for XPCAsyncSequenceRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  int v5 = (uint64_t *)(a1 + *(int *)(a2 + 20));
  uint64_t v6 = *v5;
  unint64_t v7 = v5[1];
  return sub_24A08DEDC(v6, v7);
}

uint64_t initializeWithCopy for XPCAsyncSequenceRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  unint64_t v11 = v9[1];
  sub_24A08DE84(*v9, v11);
  *uint64_t v8 = v10;
  v8[1] = v11;
  return a1;
}

uint64_t assignWithCopy for XPCAsyncSequenceRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  unint64_t v11 = v9[1];
  sub_24A08DE84(*v9, v11);
  uint64_t v12 = *v8;
  unint64_t v13 = v8[1];
  *uint64_t v8 = v10;
  v8[1] = v11;
  sub_24A08DEDC(v12, v13);
  return a1;
}

uint64_t initializeWithTake for XPCAsyncSequenceRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for XPCAsyncSequenceRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void *)(a1 + v7);
  unint64_t v9 = *(void *)(a1 + v7 + 8);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  sub_24A08DEDC(v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for XPCAsyncSequenceRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A0979BC);
}

uint64_t sub_24A0979BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for UUID();
  sub_24A08F268();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return _s10CloudAsset21UploadResponseMessageOwet_0(a1, a2, v6);
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20) + 8) >> 60;
    if (((4 * v9) & 0xC) != 0) {
      return 16 - ((4 * v9) & 0xC | (v9 >> 2));
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for XPCAsyncSequenceRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A097A70);
}

void sub_24A097A70(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for UUID();
  sub_24A08F268();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    _s10CloudAsset21UploadResponseMessageOwst_0(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v10 = (void *)(a1 + *(int *)(a4 + 20));
    *uint64_t v10 = 0;
    v10[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
}

uint64_t sub_24A097B08()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for XPCAsyncSequenceRequest.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 1) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v5 = v6 - 2;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for XPCAsyncSequenceRequest.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24A097CF0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *sub_24A097D18(unsigned char *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for XPCAsyncSequenceRequest.CodingKeys()
{
  return &type metadata for XPCAsyncSequenceRequest.CodingKeys;
}

unint64_t sub_24A097D38()
{
  unint64_t result = qword_26975D5F0;
  if (!qword_26975D5F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975D5F0);
  }
  return result;
}

unint64_t sub_24A097D88()
{
  unint64_t result = qword_26975D5F8;
  if (!qword_26975D5F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975D5F8);
  }
  return result;
}

unint64_t sub_24A097DD8()
{
  unint64_t result = qword_26975D600;
  if (!qword_26975D600)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975D600);
  }
  return result;
}

uint64_t sub_24A097E24()
{
  return v0;
}

uint64_t AssetDownloadRequest.id.getter()
{
  type metadata accessor for UUID();
  sub_24A08F280();
  uint64_t v0 = sub_24A093C7C();
  return v1(v0);
}

uint64_t AssetDownloadRequest.tenantName.getter()
{
  return sub_24A093C7C();
}

uint64_t type metadata accessor for AssetDownloadRequest()
{
  uint64_t result = qword_26975D658;
  if (!qword_26975D658) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t AssetDownloadRequest.workingDirectory.getter()
{
  sub_24A09C108();
  type metadata accessor for URL();
  sub_24A08F280();
  uint64_t v0 = sub_24A093C7C();
  return v1(v0);
}

uint64_t AssetDownloadRequest.asset.getter()
{
  uint64_t v2 = sub_24A09C108();
  return sub_24A09A624(v1 + *(int *)(v2 + 28), v0, (void (*)(void))type metadata accessor for Asset);
}

uint64_t AssetDownloadRequest.range.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for AssetDownloadRequest() + 32));
}

uint64_t AssetDownloadRequest.fileURL.getter()
{
  sub_24A09C108();
  type metadata accessor for URL();
  sub_24A08F280();
  uint64_t v0 = sub_24A093C7C();
  return v1(v0);
}

uint64_t AssetDownloadRequest.credential.getter()
{
  uint64_t v2 = sub_24A09C108();
  return sub_24A09A624(v1 + *(int *)(v2 + 40), v0, (void (*)(void))type metadata accessor for Credential);
}

uint64_t AssetDownloadRequest.storageReference.getter()
{
  uint64_t v0 = type metadata accessor for AssetDownloadRequest();
  sub_24A09C0C8(*(int *)(v0 + 44));
  return sub_24A093C7C();
}

uint64_t AssetDownloadRequest.storageReferenceSignature.getter()
{
  uint64_t v0 = type metadata accessor for AssetDownloadRequest();
  sub_24A09C0C8(*(int *)(v0 + 48));
  return sub_24A093C7C();
}

uint64_t AssetDownloadRequest.applicationID.getter()
{
  return sub_24A093C7C();
}

__n128 AssetDownloadRequest.init(asset:fileURL:credential:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  UUID.init()();
  uint64_t v7 = type metadata accessor for AssetDownloadRequest();
  sub_24A09BF48(v7);
  sub_24A09C0BC();
  sub_24A09A624(a1, v8, (void (*)(void))type metadata accessor for Asset);
  type metadata accessor for URL();
  sub_24A08F268();
  uint64_t v9 = sub_24A09BFC8();
  v10(v9);
  sub_24A09A624(a2, a3 + v3[10], (void (*)(void))type metadata accessor for Credential);
  *(_OWORD *)(a3 + v3[11]) = xmmword_24A0E6FA0;
  sub_24A09A684(a2, (void (*)(void))type metadata accessor for Credential);
  uint64_t v11 = sub_24A09BFFC();
  v12(v11);
  sub_24A09A684(a1, (void (*)(void))type metadata accessor for Asset);
  *(_OWORD *)(a3 + v3[12]) = xmmword_24A0E6FA0;
  sub_24A09BF24();
  return result;
}

void sub_24A098268(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v47 = a1;
  unint64_t v48 = a2;
  uint64_t v49 = a3;
  uint64_t v51 = type metadata accessor for URL.DirectoryHint();
  sub_24A08F24C();
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v6);
  sub_24A093C34();
  uint64_t v7 = sub_24A08DF34(&qword_26975D3E8);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for URL();
  sub_24A08F24C();
  uint64_t v60 = v10;
  uint64_t v61 = v11;
  MEMORY[0x270FA5388](v10);
  unint64_t v50 = (char *)v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A09C014();
  MEMORY[0x270FA5388](v13);
  sub_24A09C0FC();
  uint64_t v56 = v14;
  sub_24A09C014();
  MEMORY[0x270FA5388](v15);
  sub_24A09C0FC();
  uint64_t v57 = v16;
  sub_24A09C014();
  MEMORY[0x270FA5388](v17);
  sub_24A09C0FC();
  uint64_t v55 = v18;
  sub_24A09C014();
  MEMORY[0x270FA5388](v19);
  sub_24A09C0FC();
  v46[0] = v20;
  sub_24A09C014();
  MEMORY[0x270FA5388](v21);
  v46[1] = (char *)v46 - v22;
  uint64_t v23 = NSHomeDirectory();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)v9, 1, 1, v60);
  unsigned int v24 = *MEMORY[0x263F06E50];
  uint64_t v25 = v5;
  uint64_t v27 = v5 + 104;
  uint64_t v26 = *(void (**)(void))(v5 + 104);
  uint64_t v28 = v51;
  sub_24A09C05C();
  v26();
  uint64_t v58 = v26;
  URL.init(filePath:directoryHint:relativeTo:)();
  sub_24A09C0E8(0x7972617262694CLL);
  sub_24A09C05C();
  v26();
  unint64_t v54 = sub_24A090D2C();
  URL.appending<A>(path:directoryHint:)();
  unint64_t v29 = *(void (**)(void))(v25 + 8);
  uint64_t v59 = v25 + 8;
  sub_24A09C0B0();
  sub_24A09C038();
  v29();
  swift_bridgeObjectRelease();
  uint64_t v30 = v60;
  uint64_t v31 = *(void (**)(void))(v61 + 8);
  v61 += 8;
  sub_24A09C038();
  v31();
  sub_24A09C0E8(0x736568636143);
  unint64_t v32 = v58;
  sub_24A09C05C();
  v32();
  uint64_t v33 = v56;
  URL.appending<A>(path:directoryHint:)();
  ((void (*)(uint64_t, uint64_t))v29)(v3, v28);
  swift_bridgeObjectRelease();
  ((void (*)(void (*)(void), uint64_t))v31)(v33, v30);
  uint64_t v62 = 0x74694B64756F6C43;
  unint64_t v63 = 0xE800000000000000;
  unsigned int v52 = v24;
  uint64_t v53 = v27;
  sub_24A09C05C();
  v32();
  unint64_t v34 = v57;
  URL.appending<A>(path:directoryHint:)();
  uint64_t v56 = v29;
  ((void (*)(uint64_t, uint64_t))v29)(v3, v28);
  swift_bridgeObjectRelease();
  uint64_t v57 = v31;
  ((void (*)(void (*)(void), uint64_t))v31)(v34, v30);
  id v35 = objc_msgSend(self, sel_mainBundle);
  id v36 = objc_msgSend(v35, sel_bundleIdentifier);

  if (v36)
  {
    uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v39 = v38;

    uint64_t v62 = v37;
    unint64_t v63 = v39;
    uint64_t v40 = v52;
    unint64_t v41 = v58;
    ((void (*)(uint64_t, void, uint64_t))v58)(v3, v52, v28);
    URL.appending<A>(path:directoryHint:)();
    sub_24A09C0B0();
    uint64_t v42 = v56;
    sub_24A09C038();
    v42();
    swift_bridgeObjectRelease();
    unint64_t v43 = v57;
    sub_24A09C038();
    v43();
    uint64_t v62 = 0x73734164756F6C43;
    unint64_t v63 = 0xEB00000000737465;
    ((void (*)(uint64_t, uint64_t, uint64_t))v41)(v3, v40, v28);
    URL.appending<A>(path:directoryHint:)();
    uint64_t v44 = sub_24A09C0B0();
    ((void (*)(uint64_t))v42)(v44);
    swift_bridgeObjectRelease();
    sub_24A09BFBC();
    v43();
    uint64_t v62 = v47;
    unint64_t v63 = v48;
    ((void (*)(uint64_t, void, uint64_t))v58)(v3, v52, v28);
    URL.appending<A>(path:directoryHint:)();
    uint64_t v45 = sub_24A09C0B0();
    ((void (*)(uint64_t))v42)(v45);
    sub_24A09BFBC();
    v43();
  }
  else
  {
    __break(1u);
  }
}

__n128 AssetDownloadRequest.init(tenantName:asset:fileURL:credential:)@<Q0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  UUID.init()();
  uint64_t v10 = (int *)type metadata accessor for AssetDownloadRequest();
  uint64_t v11 = (uint64_t *)(a5 + v10[5]);
  *uint64_t v11 = a1;
  v11[1] = a2;
  uint64_t v12 = a5 + v10[6];
  swift_bridgeObjectRetain();
  sub_24A098268(a1, a2, v12);
  swift_bridgeObjectRelease();
  sub_24A09C0BC();
  sub_24A09A624(a3, v13, (void (*)(void))type metadata accessor for Asset);
  type metadata accessor for URL();
  sub_24A08F268();
  uint64_t v14 = sub_24A09BFC8();
  v15(v14);
  sub_24A09A624(a4, a5 + v10[10], (void (*)(void))type metadata accessor for Credential);
  *(_OWORD *)(a5 + v10[11]) = xmmword_24A0E6FA0;
  sub_24A09A684(a4, (void (*)(void))type metadata accessor for Credential);
  uint64_t v16 = sub_24A09BFFC();
  v17(v16);
  sub_24A09A684(a3, (void (*)(void))type metadata accessor for Asset);
  *(_OWORD *)(a5 + v10[12]) = xmmword_24A0E6FA0;
  sub_24A09BF24();
  return result;
}

void AssetDownloadRequest.init(skeleton:fileURL:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  UUID.init()();
  uint64_t v7 = type metadata accessor for AssetDownloadRequest();
  sub_24A09BF48(v7);
  sub_24A09C0BC();
  sub_24A098A5C(a1, v8, (void (*)(void))type metadata accessor for Asset);
  type metadata accessor for URL();
  sub_24A08F280();
  uint64_t v9 = sub_24A09C09C();
  v10(v9);
  uint64_t v11 = type metadata accessor for AssetSkeleton();
  uint64_t v12 = sub_24A09C044(v11);
  sub_24A098A5C(v12, v13, (void (*)(void))type metadata accessor for Credential);
  *(_OWORD *)(a3 + *(int *)(v3 + 44)) = *(_OWORD *)(a1 + *(int *)(a2 + 20));
  *(_OWORD *)(a3 + *(int *)(v3 + 48)) = *(_OWORD *)(a1 + *(int *)(a2 + 24));
  sub_24A09BF24();
}

uint64_t sub_24A098A5C(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_24A08F280();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

void AssetDownloadRequest.init(tenantName:skeleton:fileURL:)(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  UUID.init()();
  uint64_t v10 = (int *)type metadata accessor for AssetDownloadRequest();
  uint64_t v11 = (uint64_t *)(a5 + v10[5]);
  *uint64_t v11 = a1;
  v11[1] = a2;
  uint64_t v12 = a5 + v10[6];
  swift_bridgeObjectRetain();
  sub_24A098268(a1, a2, v12);
  swift_bridgeObjectRelease();
  sub_24A09C0BC();
  sub_24A098A5C(a3, v13, (void (*)(void))type metadata accessor for Asset);
  type metadata accessor for URL();
  sub_24A08F280();
  uint64_t v14 = sub_24A09C09C();
  v15(v14);
  uint64_t v16 = type metadata accessor for AssetSkeleton();
  uint64_t v17 = sub_24A09C044(v16);
  sub_24A098A5C(v17, v18, (void (*)(void))type metadata accessor for Credential);
  *(_OWORD *)(a5 + v10[11]) = *(_OWORD *)(a3 + *(int *)(a4 + 20));
  *(_OWORD *)(a5 + v10[12]) = *(_OWORD *)(a3 + *(int *)(a4 + 24));
  sub_24A09BF24();
}

__n128 AssetDownloadRequest.init(asset:destination:credential:range:applicationID:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  UUID.init()();
  uint64_t v15 = *a3;
  unint64_t v16 = a3[1];
  uint64_t v17 = (int *)type metadata accessor for AssetDownloadRequest();
  uint64_t v18 = (uint64_t *)(a9 + v17[5]);
  *uint64_t v18 = v15;
  v18[1] = v16;
  uint64_t v19 = a9 + v17[6];
  swift_bridgeObjectRetain();
  sub_24A098268(v15, v16, v19);
  sub_24A09A624(a1, a9 + v17[7], (void (*)(void))type metadata accessor for Asset);
  uint64_t v20 = a9 + v17[8];
  *(void *)uint64_t v20 = a4;
  *(void *)(v20 + 8) = a5;
  *(unsigned char *)(v20 + 16) = a6 & 1;
  uint64_t v21 = a9 + v17[9];
  uint64_t v22 = type metadata accessor for URL();
  sub_24A08F268();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v21, a2, v22);
  sub_24A09A624((uint64_t)a3, a9 + v17[10], (void (*)(void))type metadata accessor for Credential);
  unsigned int v24 = (void *)(a9 + v17[13]);
  *unsigned int v24 = a7;
  v24[1] = a8;
  *(_OWORD *)(a9 + v17[11]) = xmmword_24A0E6FA0;
  sub_24A09BFBC();
  v25();
  sub_24A09A684(a1, (void (*)(void))type metadata accessor for Asset);
  sub_24A09A684((uint64_t)a3, (void (*)(void))type metadata accessor for Credential);
  __n128 result = (__n128)xmmword_24A0E6FA0;
  *(_OWORD *)(a9 + v17[12]) = xmmword_24A0E6FA0;
  return result;
}

void AssetDownloadRequest.hash(into:)()
{
  uint64_t v1 = v0;
  type metadata accessor for UUID();
  sub_24A09A7F4(&qword_26975D340, MEMORY[0x263F07508]);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v2 = (int *)type metadata accessor for AssetDownloadRequest();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  type metadata accessor for URL();
  sub_24A09A7F4(&qword_26975D348, MEMORY[0x263F06EA8]);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v3 = v0 + v2[7];
  Asset.ID.hash(into:)();
  uint64_t v4 = type metadata accessor for Asset(0);
  uint64_t v5 = (uint64_t *)(v3 + *(int *)(v4 + 20));
  uint64_t v6 = *v5;
  unint64_t v7 = v5[1];
  uint64_t v9 = v5[2];
  unint64_t v8 = v5[3];
  sub_24A08DE84(*v5, v7);
  Data.hash(into:)();
  sub_24A08DEDC(v6, v7);
  sub_24A08DE84(v9, v8);
  Data.hash(into:)();
  sub_24A08DEDC(v9, v8);
  Hasher._combine(_:)(*(void *)(v3 + *(int *)(v4 + 24)));
  uint64_t v10 = v1 + v2[8];
  if (*(unsigned char *)(v10 + 16) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v11 = *(void *)v10;
    unint64_t v8 = *(void *)(v10 + 8);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v11);
    Hasher._combine(_:)(v8);
  }
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v12 = v1 + v2[10];
  Credential.hash(into:)();
  sub_24A09C07C(v2[11]);
  Data.hash(into:)();
  sub_24A08DEDC(v12, v8);
  sub_24A09C07C(v2[12]);
  Data.hash(into:)();
  sub_24A08DEDC(v12, v8);
  if (*(void *)(v1 + v2[13] + 8))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

uint64_t static AssetDownloadRequest.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((static UUID.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = (int *)type metadata accessor for AssetDownloadRequest();
  uint64_t v5 = v4[5];
  uint64_t v6 = *(void *)(a1 + v5);
  uint64_t v7 = *(void *)(a1 + v5 + 8);
  unint64_t v8 = (void *)(a2 + v5);
  BOOL v9 = v6 == *v8 && v7 == v8[1];
  if (v9 || (v10 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v10 & 1) != 0))
  {
    if ((MEMORY[0x24C5BACC0](a1 + v4[6], a2 + v4[6]) & 1) == 0 || !static Asset.== infix(_:_:)(a1 + v4[7], a2 + v4[7])) {
      return 0;
    }
    uint64_t v12 = v4[8];
    uint64_t v13 = (uint64_t *)(a1 + v12);
    char v14 = *(unsigned char *)(a1 + v12 + 16);
    uint64_t v15 = (uint64_t *)(a2 + v12);
    if (v14)
    {
      if ((v15[2] & 1) == 0) {
        return 0;
      }
    }
    else
    {
      if (v15[2]) {
        return 0;
      }
      uint64_t v17 = *v13;
      uint64_t v16 = v13[1];
      uint64_t v19 = *v15;
      uint64_t v18 = v15[1];
      if (v17 != v19 || v16 != v18) {
        return 0;
      }
    }
    if ((MEMORY[0x24C5BACC0](a1 + v4[9], a2 + v4[9]) & 1) == 0) {
      return 0;
    }
    if ((static Credential.== infix(_:_:)((void *)(a1 + v4[10]), (void *)(a2 + v4[10])) & 1) == 0) {
      return 0;
    }
    sub_24A093C94();
    if ((v21 & 1) == 0) {
      return 0;
    }
    sub_24A093C94();
    if ((v22 & 1) == 0) {
      return 0;
    }
    uint64_t v23 = v4[13];
    unsigned int v24 = (void *)(a1 + v23);
    uint64_t v25 = *(void *)(a1 + v23 + 8);
    uint64_t v26 = (void *)(a2 + v23);
    uint64_t v27 = v26[1];
    if (v25)
    {
      if (!v27) {
        return 0;
      }
      BOOL v28 = *v24 == *v26 && v25 == v27;
      if (!v28 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        return 0;
      }
    }
    else if (v27)
    {
      return 0;
    }
    return 1;
  }
  return result;
}

uint64_t sub_24A0991EC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x614E746E616E6574 && a2 == 0xEA0000000000656DLL;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0xD000000000000010 && a2 == 0x800000024A0EE750 {
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    }
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      BOOL v7 = a1 == 0x7465737361 && a2 == 0xE500000000000000;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        BOOL v8 = a1 == 0x65676E6172 && a2 == 0xE500000000000000;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 4;
        }
        else
        {
          BOOL v9 = a1 == 0x4C5255656C6966 && a2 == 0xE700000000000000;
          if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 5;
          }
          else
          {
            BOOL v10 = a1 == 0x69746E6564657263 && a2 == 0xEA00000000006C61;
            if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 6;
            }
            else if (a1 == 0xD000000000000010 && a2 == 0x800000024A0EE770 {
                   || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            }
            {
              swift_bridgeObjectRelease();
              return 7;
            }
            else if (a1 == 0xD000000000000019 && a2 == 0x800000024A0EE790 {
                   || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            }
            {
              swift_bridgeObjectRelease();
              return 8;
            }
            else if (a1 == 0x746163696C707061 && a2 == 0xED000044496E6F69)
            {
              swift_bridgeObjectRelease();
              return 9;
            }
            else
            {
              char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if (v12) {
                return 9;
              }
              else {
                return 10;
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_24A0995D8()
{
  return 10;
}

unint64_t sub_24A0995E0(char a1)
{
  unint64_t result = 25705;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x614E746E616E6574;
      break;
    case 2:
    case 7:
      unint64_t result = 0xD000000000000010;
      break;
    case 3:
      unint64_t result = 0x7465737361;
      break;
    case 4:
      unint64_t result = 0x65676E6172;
      break;
    case 5:
      unint64_t result = 0x4C5255656C6966;
      break;
    case 6:
      unint64_t result = 0x69746E6564657263;
      break;
    case 8:
      unint64_t result = 0xD000000000000019;
      break;
    case 9:
      unint64_t result = 0x746163696C707061;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_24A099724()
{
  return sub_24A0995E0(*v0);
}

uint64_t sub_24A09972C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_24A0991EC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_24A099754@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_24A0995D8();
  *a1 = result;
  return result;
}

uint64_t sub_24A09977C(uint64_t a1)
{
  unint64_t v2 = sub_24A09A5D8();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A0997B8(uint64_t a1)
{
  unint64_t v2 = sub_24A09A5D8();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t AssetDownloadRequest.encode(to:)(void *a1)
{
  uint64_t v4 = sub_24A08DF34(&qword_26975D608);
  sub_24A08F24C();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  sub_24A08F2C8();
  sub_24A08DF78(a1, a1[3]);
  sub_24A09A5D8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for UUID();
  sub_24A09A7F4(&qword_26975D360, MEMORY[0x263F07508]);
  sub_24A09C134();
  sub_24A09C068();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for AssetDownloadRequest();
    sub_24A09C020(1);
    KeyedEncodingContainer.encode(_:forKey:)();
    type metadata accessor for URL();
    sub_24A09A7F4(&qword_26975D370, MEMORY[0x263F06EA8]);
    sub_24A09C120();
    sub_24A09BFA0();
    type metadata accessor for Asset(0);
    sub_24A09A7F4(&qword_26975D368, (void (*)(uint64_t))type metadata accessor for Asset);
    sub_24A09C120();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    sub_24A08DF34(&qword_26975D378);
    sub_24A08E0A0(&qword_26975D380);
    sub_24A09C068();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_24A09BFA0();
    type metadata accessor for Credential(0);
    sub_24A09A7F4(&qword_26975D618, (void (*)(uint64_t))type metadata accessor for Credential);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    sub_24A090E5C();
    sub_24A09BFA0();
    sub_24A09BFA0();
    sub_24A09C020(9);
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v2, v4);
}

Swift::Int AssetDownloadRequest.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t AssetDownloadRequest.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v58 = a2;
  uint64_t v59 = type metadata accessor for Credential(0);
  sub_24A08F280();
  MEMORY[0x270FA5388](v5);
  sub_24A08F2E0();
  uint64_t v60 = v6;
  uint64_t v61 = type metadata accessor for Asset(0);
  sub_24A08F280();
  MEMORY[0x270FA5388](v7);
  sub_24A08F2E0();
  uint64_t v62 = v8;
  uint64_t v72 = type metadata accessor for URL();
  sub_24A08F24C();
  uint64_t v70 = v9;
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v57 - v14;
  uint64_t v16 = type metadata accessor for UUID();
  sub_24A08F24C();
  uint64_t v66 = v17;
  MEMORY[0x270FA5388](v18);
  sub_24A08F2C8();
  uint64_t v64 = sub_24A08DF34(&qword_26975D620);
  sub_24A08F24C();
  uint64_t v20 = v19;
  MEMORY[0x270FA5388](v21);
  sub_24A093C34();
  uint64_t v71 = (int *)type metadata accessor for AssetDownloadRequest();
  sub_24A08F280();
  MEMORY[0x270FA5388](v22);
  sub_24A08F2E0();
  long long v67 = a1;
  uint64_t v68 = v23;
  sub_24A08DF78(a1, a1[3]);
  sub_24A09A5D8();
  uint64_t v63 = v3;
  unsigned int v24 = v69;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  uint64_t v65 = v16;
  if (v24)
  {
    v69 = v24;
    return sub_24A08E050((uint64_t)v67);
  }
  uint64_t v25 = (uint64_t)v62;
  v69 = v13;
  uint64_t v57 = v20;
  LOBYTE(v73) = 0;
  sub_24A09A7F4(&qword_26975D390, MEMORY[0x263F07508]);
  sub_24A09C134();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v30 = v68;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 32))(v68, v2, v16);
  LOBYTE(v73) = 1;
  uint64_t v31 = KeyedDecodingContainer.decode(_:forKey:)();
  unint64_t v32 = v71;
  uint64_t v33 = (uint64_t *)(v30 + v71[5]);
  *uint64_t v33 = v31;
  v33[1] = v34;
  LOBYTE(v73) = 2;
  sub_24A09A7F4(&qword_26975D3A0, MEMORY[0x263F06EA8]);
  uint64_t v35 = v72;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  id v36 = v15;
  uint64_t v37 = *(void (**)(uint64_t, char *, uint64_t))(v70 + 32);
  v37(v30 + v32[6], v36, v35);
  LOBYTE(v73) = 3;
  sub_24A09A7F4(&qword_26975D398, (void (*)(uint64_t))type metadata accessor for Asset);
  sub_24A09C134();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  sub_24A098A5C(v25, v30 + v71[7], (void (*)(void))type metadata accessor for Asset);
  sub_24A08DF34(&qword_26975D378);
  char v75 = 4;
  sub_24A08E0A0(&qword_26975D3A8);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v62 = v37;
  char v38 = v74;
  uint64_t v39 = v72;
  uint64_t v40 = v30 + v71[8];
  *(_OWORD *)uint64_t v40 = v73;
  *(unsigned char *)(v40 + 16) = v38;
  LOBYTE(v73) = 5;
  unint64_t v41 = v69;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v42 = v71;
  v62(v30 + v71[9], v41, v39);
  LOBYTE(v73) = 6;
  sub_24A09A7F4(&qword_26975D628, (void (*)(uint64_t))type metadata accessor for Credential);
  sub_24A09C134();
  uint64_t v43 = v60;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  sub_24A098A5C(v43, v30 + v42[10], (void (*)(void))type metadata accessor for Credential);
  char v75 = 7;
  sub_24A090DC4();
  sub_24A09BFE4();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v69 = 0;
  *(_OWORD *)(v30 + v42[11]) = v73;
  char v75 = 8;
  sub_24A09BFE4();
  uint64_t v45 = v69;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v69 = v45;
  if (v45)
  {
    sub_24A09BFBC();
    v46();
    char v47 = 0;
    uint64_t v44 = (uint64_t)v67;
  }
  else
  {
    *(_OWORD *)(v30 + v42[12]) = v73;
    LOBYTE(v73) = 9;
    unint64_t v48 = v69;
    uint64_t v49 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v69 = v48;
    if (!v48)
    {
      uint64_t v52 = v49;
      uint64_t v53 = v50;
      sub_24A08F2BC();
      v54();
      uint64_t v55 = v68;
      uint64_t v56 = (uint64_t *)(v68 + v71[13]);
      *uint64_t v56 = v52;
      v56[1] = v53;
      sub_24A09A624(v55, v58, (void (*)(void))type metadata accessor for AssetDownloadRequest);
      sub_24A08E050((uint64_t)v67);
      return sub_24A09A684(v55, (void (*)(void))type metadata accessor for AssetDownloadRequest);
    }
    sub_24A08F2BC();
    v51();
    char v47 = 1;
    uint64_t v42 = v71;
    uint64_t v44 = (uint64_t)v67;
    uint64_t v30 = v68;
  }
  sub_24A08E050(v44);
  sub_24A08F2BC();
  v29();
  swift_bridgeObjectRelease();
  sub_24A09C038();
  v27();
  sub_24A09A684(v30 + v42[7], (void (*)(void))type metadata accessor for Asset);
  sub_24A08F2BC();
  v28();
  sub_24A09A684(v30 + v42[10], (void (*)(void))type metadata accessor for Credential);
  uint64_t result = sub_24A08DEDC(*(void *)(v30 + v42[11]), *(void *)(v30 + v42[11] + 8));
  if (v47) {
    return sub_24A08DEDC(*(void *)(v30 + v42[12]), *(void *)(v30 + v42[12] + 8));
  }
  return result;
}

Swift::Int sub_24A09A564()
{
  return Hasher._finalize()();
}

uint64_t sub_24A09A5A0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return AssetDownloadRequest.init(from:)(a1, a2);
}

uint64_t sub_24A09A5B8(void *a1)
{
  return AssetDownloadRequest.encode(to:)(a1);
}

unint64_t sub_24A09A5D8()
{
  unint64_t result = qword_26975D610;
  if (!qword_26975D610)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975D610);
  }
  return result;
}

uint64_t sub_24A09A624(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_24A08F280();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t sub_24A09A684(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_24A08F280();
  sub_24A08F2BC();
  v3();
  return a1;
}

uint64_t sub_24A09A6D8(void *a1)
{
  a1[1] = sub_24A09A7F4(&qword_26975D630, (void (*)(uint64_t))type metadata accessor for AssetDownloadRequest);
  a1[2] = sub_24A09A7F4(&qword_26975D638, (void (*)(uint64_t))type metadata accessor for AssetDownloadRequest);
  a1[3] = sub_24A09A7F4(&qword_26975D640, (void (*)(uint64_t))type metadata accessor for AssetDownloadRequest);
  uint64_t result = sub_24A09A7F4(&qword_26975D648, (void (*)(uint64_t))type metadata accessor for AssetDownloadRequest);
  a1[4] = result;
  return result;
}

uint64_t sub_24A09A7AC()
{
  return sub_24A09A7F4(&qword_26975D650, (void (*)(uint64_t))type metadata accessor for AssetDownloadRequest);
}

uint64_t sub_24A09A7F4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24A09A83C()
{
  return sub_24A09A7F4(&qword_26975D340, MEMORY[0x263F07508]);
}

char *initializeBufferWithCopyOfBuffer for AssetDownloadRequest(char *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v69 = *a2;
    *(void *)a1 = *a2;
    a1 = (char *)(v69 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = &a1[v8];
    uint64_t v11 = (uint64_t *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    *(void *)uint64_t v10 = *v11;
    *((void *)v10 + 1) = v12;
    uint64_t v13 = &a1[v9];
    uint64_t v14 = (char *)a2 + v9;
    uint64_t v72 = type metadata accessor for URL();
    uint64_t v71 = *(void (**)(char *, char *, uint64_t))(*(void *)(v72 - 8) + 16);
    swift_bridgeObjectRetain();
    v71(v13, v14, v72);
    uint64_t v15 = a3[7];
    uint64_t v16 = &a1[v15];
    uint64_t v17 = (char *)a2 + v15;
    v71(&a1[v15], (char *)a2 + v15, v72);
    uint64_t v18 = (int *)type metadata accessor for Asset.ID(0);
    uint64_t v19 = v18[5];
    uint64_t v20 = &v16[v19];
    uint64_t v21 = &v17[v19];
    uint64_t v22 = *((void *)v21 + 1);
    *(void *)uint64_t v20 = *(void *)v21;
    *((void *)v20 + 1) = v22;
    uint64_t v23 = v18[6];
    unsigned int v24 = (uint64_t *)&v16[v23];
    uint64_t v25 = (uint64_t *)&v17[v23];
    uint64_t v26 = *v25;
    unint64_t v27 = v25[1];
    swift_bridgeObjectRetain();
    sub_24A08DE84(v26, v27);
    *unsigned int v24 = v26;
    v24[1] = v27;
    uint64_t v28 = v18[7];
    unint64_t v29 = (uint64_t *)&v16[v28];
    uint64_t v30 = (uint64_t *)&v17[v28];
    uint64_t v31 = *v30;
    unint64_t v32 = v30[1];
    sub_24A08DE84(*v30, v32);
    *unint64_t v29 = v31;
    v29[1] = v32;
    uint64_t v33 = type metadata accessor for Asset(0);
    uint64_t v34 = *(int *)(v33 + 20);
    uint64_t v35 = (uint64_t *)&v16[v34];
    id v36 = &v17[v34];
    uint64_t v37 = *(void *)&v17[v34];
    unint64_t v38 = *(void *)&v17[v34 + 8];
    sub_24A08DE84(v37, v38);
    uint64_t *v35 = v37;
    v35[1] = v38;
    uint64_t v39 = *((void *)v36 + 2);
    unint64_t v40 = *((void *)v36 + 3);
    sub_24A08DE84(v39, v40);
    v35[2] = v39;
    v35[3] = v40;
    *(void *)&v16[*(int *)(v33 + 24)] = *(void *)&v17[*(int *)(v33 + 24)];
    uint64_t v41 = a3[8];
    uint64_t v42 = a3[9];
    uint64_t v43 = &a1[v41];
    uint64_t v44 = (char *)a2 + v41;
    *(_OWORD *)uint64_t v43 = *(_OWORD *)v44;
    v43[16] = v44[16];
    v71(&a1[v42], (char *)a2 + v42, v72);
    uint64_t v45 = a3[10];
    uint64_t v46 = &a1[v45];
    char v47 = (char *)a2 + v45;
    uint64_t v48 = *(uint64_t *)((char *)a2 + v45 + 8);
    *(void *)uint64_t v46 = *(uint64_t *)((char *)a2 + v45);
    *((void *)v46 + 1) = v48;
    uint64_t v49 = *(uint64_t *)((char *)a2 + v45 + 24);
    *((void *)v46 + 2) = *(uint64_t *)((char *)a2 + v45 + 16);
    *((void *)v46 + 3) = v49;
    uint64_t v50 = *(uint64_t *)((char *)a2 + v45 + 40);
    *((void *)v46 + 4) = *(uint64_t *)((char *)a2 + v45 + 32);
    *((void *)v46 + 5) = v50;
    uint64_t v51 = *(int *)(type metadata accessor for Credential(0) + 28);
    long long v73 = &v46[v51];
    uint64_t v52 = &v47[v51];
    uint64_t v53 = type metadata accessor for Date();
    unint64_t v54 = *(void (**)(char *, char *, uint64_t))(*(void *)(v53 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v54(v73, v52, v53);
    uint64_t v55 = a3[11];
    uint64_t v56 = (uint64_t *)&a1[v55];
    uint64_t v57 = (uint64_t *)((char *)a2 + v55);
    uint64_t v58 = *v57;
    unint64_t v59 = v57[1];
    sub_24A08DE84(*v57, v59);
    *uint64_t v56 = v58;
    v56[1] = v59;
    uint64_t v60 = a3[12];
    uint64_t v61 = (uint64_t *)&a1[v60];
    uint64_t v62 = (uint64_t *)((char *)a2 + v60);
    uint64_t v63 = *v62;
    unint64_t v64 = v62[1];
    sub_24A08DE84(*v62, v64);
    *uint64_t v61 = v63;
    v61[1] = v64;
    uint64_t v65 = a3[13];
    uint64_t v66 = &a1[v65];
    long long v67 = (uint64_t *)((char *)a2 + v65);
    uint64_t v68 = v67[1];
    *(void *)uint64_t v66 = *v67;
    *((void *)v66 + 1) = v68;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for AssetDownloadRequest(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease();
  uint64_t v5 = a1 + a2[6];
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  v7(v5, v6);
  uint64_t v8 = a1 + a2[7];
  v7(v8, v6);
  uint64_t v9 = type metadata accessor for Asset.ID(0);
  swift_bridgeObjectRelease();
  sub_24A08DEDC(*(void *)(v8 + *(int *)(v9 + 24)), *(void *)(v8 + *(int *)(v9 + 24) + 8));
  sub_24A08DEDC(*(void *)(v8 + *(int *)(v9 + 28)), *(void *)(v8 + *(int *)(v9 + 28) + 8));
  uint64_t v10 = v8 + *(int *)(type metadata accessor for Asset(0) + 20);
  sub_24A08DEDC(*(void *)v10, *(void *)(v10 + 8));
  sub_24A08DEDC(*(void *)(v10 + 16), *(void *)(v10 + 24));
  v7(a1 + a2[9], v6);
  uint64_t v11 = a1 + a2[10];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v12 = v11 + *(int *)(type metadata accessor for Credential(0) + 28);
  uint64_t v13 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
  sub_24A08DEDC(*(void *)(a1 + a2[11]), *(void *)(a1 + a2[11] + 8));
  sub_24A08DEDC(*(void *)(a1 + a2[12]), *(void *)(a1 + a2[12] + 8));
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AssetDownloadRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v7);
  uint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = a1 + v8;
  uint64_t v13 = a2 + v8;
  uint64_t v70 = type metadata accessor for URL();
  uint64_t v69 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v70 - 8) + 16);
  swift_bridgeObjectRetain();
  v69(v12, v13, v70);
  uint64_t v14 = a3[7];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  v69(a1 + v14, a2 + v14, v70);
  uint64_t v17 = (int *)type metadata accessor for Asset.ID(0);
  uint64_t v18 = v17[5];
  uint64_t v19 = (void *)(v15 + v18);
  uint64_t v20 = (void *)(v16 + v18);
  uint64_t v21 = v20[1];
  *uint64_t v19 = *v20;
  v19[1] = v21;
  uint64_t v22 = v17[6];
  uint64_t v23 = (uint64_t *)(v15 + v22);
  unsigned int v24 = (uint64_t *)(v16 + v22);
  uint64_t v25 = *v24;
  unint64_t v26 = v24[1];
  swift_bridgeObjectRetain();
  sub_24A08DE84(v25, v26);
  *uint64_t v23 = v25;
  v23[1] = v26;
  uint64_t v27 = v17[7];
  uint64_t v28 = (uint64_t *)(v15 + v27);
  unint64_t v29 = (uint64_t *)(v16 + v27);
  uint64_t v30 = *v29;
  unint64_t v31 = v29[1];
  sub_24A08DE84(*v29, v31);
  *uint64_t v28 = v30;
  v28[1] = v31;
  uint64_t v32 = type metadata accessor for Asset(0);
  uint64_t v33 = *(int *)(v32 + 20);
  uint64_t v34 = (uint64_t *)(v15 + v33);
  uint64_t v35 = v16 + v33;
  uint64_t v36 = *(void *)(v16 + v33);
  unint64_t v37 = *(void *)(v16 + v33 + 8);
  sub_24A08DE84(v36, v37);
  *uint64_t v34 = v36;
  v34[1] = v37;
  uint64_t v38 = *(void *)(v35 + 16);
  unint64_t v39 = *(void *)(v35 + 24);
  sub_24A08DE84(v38, v39);
  v34[2] = v38;
  v34[3] = v39;
  *(void *)(v15 + *(int *)(v32 + 24)) = *(void *)(v16 + *(int *)(v32 + 24));
  uint64_t v40 = a3[8];
  uint64_t v41 = a3[9];
  uint64_t v42 = a1 + v40;
  uint64_t v43 = a2 + v40;
  *(_OWORD *)uint64_t v42 = *(_OWORD *)v43;
  *(unsigned char *)(v42 + 16) = *(unsigned char *)(v43 + 16);
  v69(a1 + v41, a2 + v41, v70);
  uint64_t v44 = a3[10];
  uint64_t v45 = (void *)(a1 + v44);
  uint64_t v46 = a2 + v44;
  uint64_t v47 = *(void *)(a2 + v44 + 8);
  *uint64_t v45 = *(void *)(a2 + v44);
  v45[1] = v47;
  uint64_t v48 = *(void *)(a2 + v44 + 24);
  v45[2] = *(void *)(a2 + v44 + 16);
  v45[3] = v48;
  uint64_t v49 = *(void *)(a2 + v44 + 40);
  v45[4] = *(void *)(a2 + v44 + 32);
  v45[5] = v49;
  uint64_t v50 = *(int *)(type metadata accessor for Credential(0) + 28);
  uint64_t v71 = (char *)v45 + v50;
  uint64_t v51 = v46 + v50;
  uint64_t v52 = type metadata accessor for Date();
  uint64_t v53 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v52 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v53(v71, v51, v52);
  uint64_t v54 = a3[11];
  uint64_t v55 = (uint64_t *)(a1 + v54);
  uint64_t v56 = (uint64_t *)(a2 + v54);
  uint64_t v57 = *v56;
  unint64_t v58 = v56[1];
  sub_24A08DE84(*v56, v58);
  *uint64_t v55 = v57;
  v55[1] = v58;
  uint64_t v59 = a3[12];
  uint64_t v60 = (uint64_t *)(a1 + v59);
  uint64_t v61 = (uint64_t *)(a2 + v59);
  uint64_t v62 = *v61;
  unint64_t v63 = v61[1];
  sub_24A08DE84(*v61, v63);
  *uint64_t v60 = v62;
  v60[1] = v63;
  uint64_t v64 = a3[13];
  uint64_t v65 = (void *)(a1 + v64);
  uint64_t v66 = (void *)(a2 + v64);
  uint64_t v67 = v66[1];
  *uint64_t v65 = *v66;
  v65[1] = v67;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AssetDownloadRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = a3[6];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v77 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 24);
  uint64_t v76 = v13;
  v77(v11, v12, v13);
  uint64_t v14 = a3[7];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  v77(a1 + v14, a2 + v14, v13);
  uint64_t v17 = (int *)type metadata accessor for Asset.ID(0);
  uint64_t v18 = v17[5];
  uint64_t v19 = (void *)(v15 + v18);
  uint64_t v20 = (void *)(v16 + v18);
  *uint64_t v19 = *v20;
  v19[1] = v20[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v21 = v17[6];
  uint64_t v22 = (uint64_t *)(v15 + v21);
  uint64_t v23 = (uint64_t *)(v16 + v21);
  uint64_t v24 = *v23;
  unint64_t v25 = v23[1];
  sub_24A08DE84(*v23, v25);
  uint64_t v26 = *v22;
  unint64_t v27 = v22[1];
  *uint64_t v22 = v24;
  v22[1] = v25;
  sub_24A08DEDC(v26, v27);
  uint64_t v28 = v17[7];
  unint64_t v29 = (uint64_t *)(v15 + v28);
  uint64_t v30 = (uint64_t *)(v16 + v28);
  uint64_t v31 = *v30;
  unint64_t v32 = v30[1];
  sub_24A08DE84(*v30, v32);
  uint64_t v33 = *v29;
  unint64_t v34 = v29[1];
  *unint64_t v29 = v31;
  v29[1] = v32;
  sub_24A08DEDC(v33, v34);
  uint64_t v35 = type metadata accessor for Asset(0);
  uint64_t v36 = *(int *)(v35 + 20);
  unint64_t v37 = (uint64_t *)(v15 + v36);
  uint64_t v38 = v16 + v36;
  uint64_t v39 = *(void *)(v16 + v36);
  unint64_t v40 = *(void *)(v16 + v36 + 8);
  sub_24A08DE84(v39, v40);
  uint64_t v41 = *v37;
  unint64_t v42 = v37[1];
  *unint64_t v37 = v39;
  v37[1] = v40;
  sub_24A08DEDC(v41, v42);
  uint64_t v43 = *(void *)(v38 + 16);
  unint64_t v44 = *(void *)(v38 + 24);
  sub_24A08DE84(v43, v44);
  uint64_t v45 = v37[2];
  unint64_t v46 = v37[3];
  v37[2] = v43;
  v37[3] = v44;
  sub_24A08DEDC(v45, v46);
  *(void *)(v15 + *(int *)(v35 + 24)) = *(void *)(v16 + *(int *)(v35 + 24));
  uint64_t v47 = a3[8];
  uint64_t v48 = a1 + v47;
  uint64_t v49 = a2 + v47;
  char v50 = *(unsigned char *)(v49 + 16);
  *(_OWORD *)uint64_t v48 = *(_OWORD *)v49;
  *(unsigned char *)(v48 + 16) = v50;
  v77(a1 + a3[9], a2 + a3[9], v76);
  uint64_t v51 = a3[10];
  uint64_t v52 = (void *)(a1 + v51);
  uint64_t v53 = (void *)(a2 + v51);
  void *v52 = *(void *)(a2 + v51);
  v52[1] = *(void *)(a2 + v51 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v52[2] = v53[2];
  v52[3] = v53[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v52[4] = v53[4];
  v52[5] = v53[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v54 = *(int *)(type metadata accessor for Credential(0) + 28);
  uint64_t v55 = (char *)v52 + v54;
  uint64_t v56 = (char *)v53 + v54;
  uint64_t v57 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 24))(v55, v56, v57);
  uint64_t v58 = a3[11];
  uint64_t v59 = (uint64_t *)(a1 + v58);
  uint64_t v60 = (uint64_t *)(a2 + v58);
  uint64_t v61 = *v60;
  unint64_t v62 = v60[1];
  sub_24A08DE84(*v60, v62);
  uint64_t v63 = *v59;
  unint64_t v64 = v59[1];
  *uint64_t v59 = v61;
  v59[1] = v62;
  sub_24A08DEDC(v63, v64);
  uint64_t v65 = a3[12];
  uint64_t v66 = (uint64_t *)(a1 + v65);
  uint64_t v67 = (uint64_t *)(a2 + v65);
  uint64_t v68 = *v67;
  unint64_t v69 = v67[1];
  sub_24A08DE84(*v67, v69);
  uint64_t v70 = *v66;
  unint64_t v71 = v66[1];
  *uint64_t v66 = v68;
  v66[1] = v69;
  sub_24A08DEDC(v70, v71);
  uint64_t v72 = a3[13];
  long long v73 = (void *)(a1 + v72);
  char v74 = (void *)(a2 + v72);
  void *v73 = *v74;
  v73[1] = v74[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for AssetDownloadRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  uint64_t v12 = a3[7];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  v11(a1 + v12, a2 + v12, v10);
  uint64_t v15 = (int *)type metadata accessor for Asset.ID(0);
  *(_OWORD *)(v13 + v15[5]) = *(_OWORD *)(v14 + v15[5]);
  *(_OWORD *)(v13 + v15[6]) = *(_OWORD *)(v14 + v15[6]);
  *(_OWORD *)(v13 + v15[7]) = *(_OWORD *)(v14 + v15[7]);
  uint64_t v16 = type metadata accessor for Asset(0);
  uint64_t v17 = *(int *)(v16 + 20);
  uint64_t v18 = (_OWORD *)(v13 + v17);
  uint64_t v19 = (_OWORD *)(v14 + v17);
  long long v20 = v19[1];
  *uint64_t v18 = *v19;
  v18[1] = v20;
  *(void *)(v13 + *(int *)(v16 + 24)) = *(void *)(v14 + *(int *)(v16 + 24));
  uint64_t v21 = a3[8];
  uint64_t v22 = a3[9];
  uint64_t v23 = a1 + v21;
  uint64_t v24 = a2 + v21;
  *(unsigned char *)(v23 + 16) = *(unsigned char *)(v24 + 16);
  *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
  v11(a1 + v22, a2 + v22, v10);
  uint64_t v25 = a3[10];
  uint64_t v26 = (_OWORD *)(a1 + v25);
  uint64_t v27 = a2 + v25;
  long long v28 = *(_OWORD *)(a2 + v25 + 16);
  *uint64_t v26 = *(_OWORD *)(a2 + v25);
  v26[1] = v28;
  v26[2] = *(_OWORD *)(a2 + v25 + 32);
  uint64_t v29 = *(int *)(type metadata accessor for Credential(0) + 28);
  uint64_t v30 = (char *)v26 + v29;
  uint64_t v31 = v27 + v29;
  uint64_t v32 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v32 - 8) + 32))(v30, v31, v32);
  uint64_t v33 = a3[12];
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  *(_OWORD *)(a1 + v33) = *(_OWORD *)(a2 + v33);
  *(_OWORD *)(a1 + a3[13]) = *(_OWORD *)(a2 + a3[13]);
  return a1;
}

uint64_t assignWithTake for AssetDownloadRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v12 = a3[6];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = type metadata accessor for URL();
  uint64_t v65 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 40);
  v65(v13, v14, v15);
  uint64_t v16 = a3[7];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  v65(a1 + v16, a2 + v16, v15);
  uint64_t v19 = (int *)type metadata accessor for Asset.ID(0);
  uint64_t v20 = v19[5];
  uint64_t v21 = (void *)(v17 + v20);
  uint64_t v22 = (uint64_t *)(v18 + v20);
  uint64_t v24 = *v22;
  uint64_t v23 = v22[1];
  *uint64_t v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  uint64_t v25 = v19[6];
  uint64_t v26 = *(void *)(v17 + v25);
  unint64_t v27 = *(void *)(v17 + v25 + 8);
  *(_OWORD *)(v17 + v25) = *(_OWORD *)(v18 + v25);
  sub_24A08DEDC(v26, v27);
  uint64_t v28 = v19[7];
  uint64_t v29 = *(void *)(v17 + v28);
  unint64_t v30 = *(void *)(v17 + v28 + 8);
  *(_OWORD *)(v17 + v28) = *(_OWORD *)(v18 + v28);
  sub_24A08DEDC(v29, v30);
  uint64_t v31 = type metadata accessor for Asset(0);
  uint64_t v32 = *(int *)(v31 + 20);
  uint64_t v33 = v17 + v32;
  uint64_t v34 = v18 + v32;
  uint64_t v35 = *(void *)(v17 + v32);
  unint64_t v36 = *(void *)(v17 + v32 + 8);
  *(_OWORD *)(v17 + v32) = *(_OWORD *)(v18 + v32);
  sub_24A08DEDC(v35, v36);
  uint64_t v37 = *(void *)(v33 + 16);
  unint64_t v38 = *(void *)(v33 + 24);
  *(_OWORD *)(v33 + 16) = *(_OWORD *)(v34 + 16);
  sub_24A08DEDC(v37, v38);
  *(void *)(v17 + *(int *)(v31 + 24)) = *(void *)(v18 + *(int *)(v31 + 24));
  uint64_t v39 = a3[8];
  uint64_t v40 = a3[9];
  uint64_t v41 = a1 + v39;
  uint64_t v42 = a2 + v39;
  *(_OWORD *)uint64_t v41 = *(_OWORD *)v42;
  *(unsigned char *)(v41 + 16) = *(unsigned char *)(v42 + 16);
  v65(a1 + v40, a2 + v40, v15);
  uint64_t v43 = a3[10];
  unint64_t v44 = (void *)(a1 + v43);
  uint64_t v45 = (void *)(a2 + v43);
  uint64_t v46 = *(void *)(a2 + v43 + 8);
  *unint64_t v44 = *(void *)(a2 + v43);
  v44[1] = v46;
  swift_bridgeObjectRelease();
  uint64_t v47 = v45[3];
  v44[2] = v45[2];
  v44[3] = v47;
  swift_bridgeObjectRelease();
  uint64_t v48 = v45[5];
  v44[4] = v45[4];
  v44[5] = v48;
  swift_bridgeObjectRelease();
  uint64_t v49 = *(int *)(type metadata accessor for Credential(0) + 28);
  char v50 = (char *)v44 + v49;
  uint64_t v51 = (char *)v45 + v49;
  uint64_t v52 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v52 - 8) + 40))(v50, v51, v52);
  uint64_t v53 = a3[11];
  uint64_t v54 = *(void *)(a1 + v53);
  unint64_t v55 = *(void *)(a1 + v53 + 8);
  *(_OWORD *)(a1 + v53) = *(_OWORD *)(a2 + v53);
  sub_24A08DEDC(v54, v55);
  uint64_t v56 = a3[12];
  uint64_t v57 = *(void *)(a1 + v56);
  unint64_t v58 = *(void *)(a1 + v56 + 8);
  *(_OWORD *)(a1 + v56) = *(_OWORD *)(a2 + v56);
  sub_24A08DEDC(v57, v58);
  uint64_t v59 = a3[13];
  uint64_t v60 = (void *)(a1 + v59);
  uint64_t v61 = (uint64_t *)(a2 + v59);
  uint64_t v63 = *v61;
  uint64_t v62 = v61[1];
  *uint64_t v60 = v63;
  v60[1] = v62;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AssetDownloadRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A09B938);
}

uint64_t sub_24A09B938(uint64_t a1, uint64_t a2, int *a3)
{
  type metadata accessor for UUID();
  sub_24A08F268();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1;
LABEL_13:
    return _s10CloudAsset21UploadResponseMessageOwet_0(v9, a2, v8);
  }
  if (a2 != 0x7FFFFFFF)
  {
    type metadata accessor for URL();
    sub_24A08F268();
    if (*(_DWORD *)(v13 + 84) == a2)
    {
      uint64_t v8 = v12;
      uint64_t v14 = a3[6];
    }
    else
    {
      type metadata accessor for Asset(0);
      sub_24A08F268();
      if (*(_DWORD *)(v16 + 84) == a2)
      {
        uint64_t v8 = v15;
        uint64_t v14 = a3[7];
      }
      else
      {
        uint64_t v8 = type metadata accessor for Credential(0);
        uint64_t v14 = a3[10];
      }
    }
    uint64_t v9 = a1 + v14;
    goto LABEL_13;
  }
  unint64_t v10 = *(void *)(a1 + a3[5] + 8);
  if (v10 >= 0xFFFFFFFF) {
    LODWORD(v10) = -1;
  }
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for AssetDownloadRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A09BA48);
}

void sub_24A09BA48(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  type metadata accessor for UUID();
  sub_24A08F268();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(void *)(a1 + a4[5] + 8) = (a2 - 1);
      return;
    }
    type metadata accessor for URL();
    sub_24A08F268();
    if (*(_DWORD *)(v13 + 84) == a3)
    {
      uint64_t v10 = v12;
      uint64_t v14 = a4[6];
    }
    else
    {
      type metadata accessor for Asset(0);
      sub_24A08F268();
      if (*(_DWORD *)(v16 + 84) == a3)
      {
        uint64_t v10 = v15;
        uint64_t v14 = a4[7];
      }
      else
      {
        uint64_t v10 = type metadata accessor for Credential(0);
        uint64_t v14 = a4[10];
      }
    }
    uint64_t v11 = a1 + v14;
  }
  _s10CloudAsset21UploadResponseMessageOwst_0(v11, a2, a2, v10);
}

uint64_t sub_24A09BB40()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for URL();
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for Asset(319);
      if (v3 <= 0x3F)
      {
        uint64_t result = type metadata accessor for Credential(319);
        if (v4 <= 0x3F)
        {
          swift_initStructMetadata();
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AssetDownloadRequest.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF7)
  {
    if (a2 + 9 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 9) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 10;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  int v5 = v6 - 10;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for AssetDownloadRequest.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *uint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24A09BDFCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AssetDownloadRequest.CodingKeys()
{
  return &type metadata for AssetDownloadRequest.CodingKeys;
}

unint64_t sub_24A09BE38()
{
  unint64_t result = qword_26975D668;
  if (!qword_26975D668)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975D668);
  }
  return result;
}

unint64_t sub_24A09BE88()
{
  unint64_t result = qword_26975D670;
  if (!qword_26975D670)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975D670);
  }
  return result;
}

unint64_t sub_24A09BED8()
{
  unint64_t result = qword_26975D678;
  if (!qword_26975D678)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975D678);
  }
  return result;
}

void sub_24A09BF24()
{
  int v2 = (void *)(v0 + *(int *)(v1 + 52));
  *int v2 = 0;
  v2[1] = 0;
  uint64_t v3 = v0 + *(int *)(v1 + 32);
  *(void *)uint64_t v3 = 0;
  *(void *)(v3 + 8) = 0;
  *(unsigned char *)(v3 + 16) = 1;
}

void sub_24A09BF48(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + *(int *)(a1 + 20));
  *uint64_t v3 = 0x616C506572616853;
  v3[1] = 0xE900000000000079;
  uint64_t v4 = v1 + *(int *)(a1 + 24);
  sub_24A098268(0x616C506572616853, 0xE900000000000079, v4);
}

uint64_t sub_24A09BFA0()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t sub_24A09BFC8()
{
  return v0;
}

uint64_t sub_24A09BFFC()
{
  return v0;
}

void sub_24A09C020(char a1@<W8>)
{
  *(unsigned char *)(v1 - 112) = a1;
}

uint64_t sub_24A09C044(uint64_t a1)
{
  return v1 + *(int *)(a1 + 28);
}

uint64_t sub_24A09C07C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = (uint64_t *)(v1 + a1);
  uint64_t v4 = *v3;
  unint64_t v5 = v3[1];
  return sub_24A08DE84(v4, v5);
}

uint64_t sub_24A09C09C()
{
  return v0;
}

uint64_t sub_24A09C0B0()
{
  return v0;
}

uint64_t sub_24A09C0C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = (uint64_t *)(v1 + a1);
  uint64_t v4 = *v3;
  unint64_t v5 = v3[1];
  return sub_24A08DE84(v4, v5);
}

uint64_t sub_24A09C0E8@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v3 - 104) = a1;
  *(void *)(v3 - 96) = v1;
  return v2;
}

uint64_t sub_24A09C108()
{
  return type metadata accessor for AssetDownloadRequest();
}

uint64_t sub_24A09C120()
{
  return v0;
}

uint64_t sub_24A09C140@<X0>(uint64_t a1@<X8>)
{
  return sub_24A096814(&OBJC_IVAR____TtC10CloudAsset25AssetsDownloadCoordinator__results, &qword_26975D590, a1);
}

uint64_t sub_24A09C154@<X0>(uint64_t a1@<X8>)
{
  return sub_24A096814(&OBJC_IVAR____TtC10CloudAsset25AssetsDownloadCoordinator__signals, &qword_26975D580, a1);
}

uint64_t sub_24A09C168(uint64_t *a1)
{
  v2[3] = v1;
  uint64_t v4 = sub_24A08DF34(&qword_26975D698);
  v2[4] = v4;
  v2[5] = *(void *)(v4 - 8);
  uint64_t v5 = swift_task_alloc();
  uint64_t v6 = *a1;
  v2[6] = v5;
  v2[7] = v6;
  return MEMORY[0x270FA2498](sub_24A09C234, v1, 0);
}

uint64_t sub_24A09C234()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  v0[2] = v0[7];
  swift_bridgeObjectRetain();
  sub_24A08DF34(&qword_26975D6A8);
  AsyncThrowingStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_24A09C300(uint64_t a1)
{
  uint64_t v26 = a1;
  uint64_t v24 = sub_24A08DF34(&qword_26975D6D0);
  sub_24A08F24C();
  uint64_t v3 = v2;
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_24A08DF34(&qword_26975D580);
  sub_24A08F24C();
  uint64_t v8 = v7;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_24A08DF34(&qword_26975D6D8);
  uint64_t v13 = MEMORY[0x270FA5388](v12 - 8);
  uint64_t v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v23 - v16;
  swift_defaultActor_initialize();
  uint64_t v18 = v1 + OBJC_IVAR____TtC10CloudAsset25AssetsDownloadCoordinator__results;
  uint64_t v19 = sub_24A08DF34(&qword_26975D590);
  uint64_t v20 = *(void *)(v19 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v18, v26, v19);
  uint64_t v21 = sub_24A08DF34(&qword_26975D6A8);
  _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)v17, 1, 1, v21);
  unint64_t v27 = v17;
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v6, *MEMORY[0x263F8F680], v24);
  AsyncThrowingStream.init<>(_:bufferingPolicy:_:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v1 + OBJC_IVAR____TtC10CloudAsset25AssetsDownloadCoordinator__signals, v11, v25);
  sub_24A09CC18((uint64_t)v17, (uint64_t)v15);
  uint64_t result = _s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v15, 1, v21);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v26, v19);
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v1 + OBJC_IVAR____TtC10CloudAsset25AssetsDownloadCoordinator_continutation, v15, v21);
    sub_24A09CC80((uint64_t)v17);
    return v1;
  }
  return result;
}

uint64_t sub_24A09C5F0(uint64_t a1, uint64_t a2)
{
  sub_24A09CC80(a2);
  uint64_t v4 = sub_24A08DF34(&qword_26975D6A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return _s10CloudAsset21UploadResponseMessageOwst_0(a2, 0, 1, v4);
}

uint64_t AssetsDownloadCoordinator.deinit()
{
  sub_24A08DF34(&qword_26975D590);
  sub_24A08F280();
  uint64_t v1 = sub_24A093DD0();
  v2(v1);
  sub_24A08DF34(&qword_26975D580);
  sub_24A08F280();
  uint64_t v3 = sub_24A093DD0();
  v4(v3);
  sub_24A08DF34(&qword_26975D6A8);
  sub_24A08F280();
  uint64_t v5 = sub_24A093DD0();
  v6(v5);
  swift_defaultActor_destroy();
  return v0;
}

uint64_t AssetsDownloadCoordinator.__deallocating_deinit()
{
  AssetsDownloadCoordinator.deinit();
  return MEMORY[0x270FA2418](v0);
}

uint64_t AssetsDownloadCoordinator.unownedExecutor.getter()
{
  return v0;
}

uint64_t sub_24A09C790()
{
  return AssetsDownloadCoordinator.unownedExecutor.getter();
}

uint64_t sub_24A09C7AC()
{
  return type metadata accessor for AssetsDownloadCoordinator();
}

uint64_t type metadata accessor for AssetsDownloadCoordinator()
{
  uint64_t result = qword_26975D6B0;
  if (!qword_26975D6B0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_24A09C7FC()
{
  sub_24A096C6C();
  if (v0 <= 0x3F)
  {
    sub_24A09CB9C(319, (unint64_t *)&qword_26975D5A8, MEMORY[0x263F8F6B8]);
    if (v1 <= 0x3F)
    {
      sub_24A09CB9C(319, &qword_26975D6C8, MEMORY[0x263F8F690]);
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

uint64_t method lookup function for AssetsDownloadCoordinator(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AssetsDownloadCoordinator);
}

uint64_t dispatch thunk of AssetsDownloadCoordinator.results.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of AssetsDownloadCoordinator.signals.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of AssetsDownloadCoordinator.receive(signal:)(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v1 + 128) + **(int **)(*(void *)v1 + 128));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_24A09CAA8;
  return v6(a1);
}

uint64_t sub_24A09CAA8()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

void sub_24A09CB9C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, uint64_t, void))
{
  if (!*a2)
  {
    uint64_t v6 = sub_24A08E008(&qword_26975D5B0);
    unint64_t v7 = a3(a1, &type metadata for Signal, v6, MEMORY[0x263F8E4E0]);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_24A09CC10(uint64_t a1)
{
  return sub_24A09C5F0(a1, *(void *)(v1 + 16));
}

uint64_t sub_24A09CC18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A08DF34(&qword_26975D6D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_24A09CC80(uint64_t a1)
{
  uint64_t v2 = sub_24A08DF34(&qword_26975D6D8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t static XPCServiceNames.userService.getter()
{
  return 0xD00000000000001BLL;
}

unint64_t static XPCServiceNames.systemService.getter()
{
  return sub_24A09CD24();
}

unint64_t static XPCServiceNames.testService.getter()
{
  return sub_24A09CD24();
}

ValueMetadata *type metadata accessor for XPCServiceNames()
{
  return &type metadata for XPCServiceNames;
}

unint64_t sub_24A09CD24()
{
  return 0xD000000000000022;
}

uint64_t *sub_24A09CD38(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = a2[5];
    uint64_t v10 = *(int *)(a3 + 28);
    uint64_t v21 = (char *)a1 + v10;
    uint64_t v11 = (char *)a2 + v10;
    a1[4] = a2[4];
    a1[5] = v9;
    uint64_t v12 = type metadata accessor for UnknownStorage();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v21, v11, v12);
    uint64_t v14 = *(int *)(a3 + 32);
    uint64_t v15 = (char *)v4 + v14;
    uint64_t v16 = (char *)a2 + v14;
    uint64_t v17 = type metadata accessor for Google_Protobuf_Timestamp();
    if (_s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v16, 1, v17))
    {
      uint64_t v18 = sub_24A08DF34(&qword_26975D560);
      memcpy(v15, v16, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
      _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)v15, 0, 1, v17);
    }
  }
  return v4;
}

uint64_t sub_24A09CF00(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 32);
  uint64_t v7 = type metadata accessor for Google_Protobuf_Timestamp();
  uint64_t result = _s10CloudAsset21UploadResponseMessageOwet_0(v6, 1, v7);
  if (!result)
  {
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
    return v9(v6, v7);
  }
  return result;
}

void *sub_24A09CFF8(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a2[5];
  uint64_t v9 = *(int *)(a3 + 28);
  uint64_t v19 = (char *)a1 + v9;
  uint64_t v10 = (char *)a2 + v9;
  a1[4] = a2[4];
  a1[5] = v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v19, v10, v11);
  uint64_t v13 = *(int *)(a3 + 32);
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = type metadata accessor for Google_Protobuf_Timestamp();
  if (_s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v15, 1, v16))
  {
    uint64_t v17 = sub_24A08DF34(&qword_26975D560);
    memcpy(v14, v15, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
    _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)v14, 0, 1, v16);
  }
  return a1;
}

void *sub_24A09D170(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 32);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for Google_Protobuf_Timestamp();
  LODWORD(v8) = _s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v11, 1, v13);
  int v14 = _s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v12, 1, v13);
  if (!v8)
  {
    uint64_t v15 = *(void *)(v13 - 8);
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 24))(v11, v12, v13);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v15 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v16 = sub_24A08DF34(&qword_26975D560);
    memcpy(v11, v12, *(void *)(*(void *)(v16 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
  _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)v11, 0, 1, v13);
  return a1;
}

_OWORD *sub_24A09D378(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 32);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for Google_Protobuf_Timestamp();
  if (_s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v13, 1, v14))
  {
    uint64_t v15 = sub_24A08DF34(&qword_26975D560);
    memcpy(v12, v13, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
    _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)v12, 0, 1, v14);
  }
  return a1;
}

void *sub_24A09D4B0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(int *)(a3 + 28);
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 40))(v10, v11, v12);
  uint64_t v13 = *(int *)(a3 + 32);
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = type metadata accessor for Google_Protobuf_Timestamp();
  LODWORD(v11) = _s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v14, 1, v16);
  int v17 = _s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v15, 1, v16);
  if (!v11)
  {
    uint64_t v18 = *(void *)(v16 - 8);
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v14, v15, v16);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v14, v16);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v19 = sub_24A08DF34(&qword_26975D560);
    memcpy(v14, v15, *(void *)(*(void *)(v19 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v14, v15, v16);
  _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)v14, 0, 1, v16);
  return a1;
}

uint64_t sub_24A09D688(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A09D69C);
}

uint64_t sub_24A09D69C()
{
  sub_24A0AAEC4();
  if (v2) {
    return sub_24A0AAE40(*(void *)(v1 + 8));
  }
  sub_24A0AAE74();
  sub_24A08F268();
  if (*(_DWORD *)(v4 + 84) == v0)
  {
    sub_24A0AB1B4();
  }
  else
  {
    sub_24A08DF34(&qword_26975D560);
    sub_24A0AB1A8();
  }
  uint64_t v6 = sub_24A0AAF58(v5);
  return _s10CloudAsset21UploadResponseMessageOwet_0(v6, v7, v8);
}

uint64_t sub_24A09D720(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A09D734);
}

void sub_24A09D734()
{
  sub_24A0AAE2C();
  if (v3)
  {
    *(void *)(v1 + 8) = (v0 - 1);
  }
  else
  {
    sub_24A0AB060();
    sub_24A08F268();
    if (*(_DWORD *)(v4 + 84) == v2)
    {
      sub_24A0AB190();
    }
    else
    {
      sub_24A08DF34(&qword_26975D560);
      sub_24A0AB184();
    }
    uint64_t v6 = sub_24A0AAE64(v5);
    _s10CloudAsset21UploadResponseMessageOwst_0(v6, v7, v8, v9);
  }
}

uint64_t type metadata accessor for CloudAssets_Credential(uint64_t a1)
{
  return sub_24A0933F0(a1, (uint64_t *)&unk_26975D6E0);
}

void sub_24A09D7D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t *sub_24A09D804(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t sub_24A09D8E8(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

void *sub_24A09D960(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

void *sub_24A09D9F8(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

void *sub_24A09DA8C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *sub_24A09DB08(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t sub_24A09DB94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A09DBA8);
}

uint64_t sub_24A09DBA8()
{
  sub_24A0AAEC4();
  if (v2) {
    return sub_24A0AAE40(*v0);
  }
  sub_24A0AAE74();
  uint64_t v4 = sub_24A0AAF58(*(int *)(v1 + 20));
  return _s10CloudAsset21UploadResponseMessageOwet_0(v4, v5, v6);
}

uint64_t sub_24A09DC0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A09DC20);
}

void sub_24A09DC20()
{
  sub_24A0AAE2C();
  if (v3)
  {
    *uint64_t v1 = (v0 - 1);
  }
  else
  {
    uint64_t v4 = v2;
    type metadata accessor for UnknownStorage();
    uint64_t v5 = sub_24A0AAE64(*(int *)(v4 + 20));
    _s10CloudAsset21UploadResponseMessageOwst_0(v5, v6, v7, v8);
  }
}

uint64_t type metadata accessor for CloudAssets_Signal(uint64_t a1)
{
  return sub_24A0933F0(a1, (uint64_t *)&unk_26975D6F8);
}

uint64_t sub_24A09DCAC()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_24A09DD48(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v8 = a2[1];
    unint64_t v9 = a2[2];
    swift_bridgeObjectRetain();
    sub_24A08DE84(v8, v9);
    a1[1] = v8;
    a1[2] = v9;
    uint64_t v10 = a2[3];
    unint64_t v11 = a2[4];
    sub_24A08DE84(v10, v11);
    a1[3] = v10;
    a1[4] = v11;
    uint64_t v12 = *(int *)(a3 + 28);
    uint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = type metadata accessor for UnknownStorage();
    uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16);
    v16(v13, v14, v15);
    uint64_t v17 = *(int *)(a3 + 32);
    uint64_t v18 = (uint64_t *)((char *)a1 + v17);
    uint64_t v19 = (uint64_t *)((char *)a2 + v17);
    uint64_t v20 = type metadata accessor for CloudAssets_Credential(0);
    if (_s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v19, 1, v20))
    {
      uint64_t v21 = sub_24A08DF34(&qword_26975D568);
      memcpy(v18, v19, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      uint64_t v22 = v19[1];
      *uint64_t v18 = *v19;
      v18[1] = v22;
      uint64_t v23 = v19[3];
      v18[2] = v19[2];
      v18[3] = v23;
      uint64_t v24 = v19[5];
      v18[4] = v19[4];
      v18[5] = v24;
      uint64_t v25 = *(int *)(v20 + 28);
      uint64_t v33 = (char *)v18 + v25;
      uint64_t v26 = (char *)v19 + v25;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v16(v33, v26, v15);
      uint64_t v27 = *(int *)(v20 + 32);
      uint64_t v28 = (char *)v18 + v27;
      uint64_t v29 = (char *)v19 + v27;
      uint64_t v30 = type metadata accessor for Google_Protobuf_Timestamp();
      if (_s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v29, 1, v30))
      {
        uint64_t v31 = sub_24A08DF34(&qword_26975D560);
        memcpy(v28, v29, *(void *)(*(void *)(v31 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 16))(v28, v29, v30);
        _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)v28, 0, 1, v30);
      }
      _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)v18, 0, 1, v20);
    }
  }
  return a1;
}

uint64_t sub_24A09DFCC(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  sub_24A08DEDC(*(void *)(a1 + 8), *(void *)(a1 + 16));
  sub_24A08DEDC(*(void *)(a1 + 24), *(void *)(a1 + 32));
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v4, v5);
  uint64_t v7 = a1 + *(int *)(a2 + 32);
  uint64_t v8 = type metadata accessor for CloudAssets_Credential(0);
  uint64_t result = _s10CloudAsset21UploadResponseMessageOwet_0(v7, 1, v8);
  if (!result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v6(v7 + *(int *)(v8 + 28), v5);
    uint64_t v10 = v7 + *(int *)(v8 + 32);
    uint64_t v11 = type metadata accessor for Google_Protobuf_Timestamp();
    uint64_t result = _s10CloudAsset21UploadResponseMessageOwet_0(v10, 1, v11);
    if (!result)
    {
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8);
      return v12(v10, v11);
    }
  }
  return result;
}

void *sub_24A09E12C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  unint64_t v7 = a2[2];
  swift_bridgeObjectRetain();
  sub_24A08DE84(v6, v7);
  a1[1] = v6;
  a1[2] = v7;
  uint64_t v8 = a2[3];
  unint64_t v9 = a2[4];
  sub_24A08DE84(v8, v9);
  a1[3] = v8;
  a1[4] = v9;
  uint64_t v10 = *(int *)(a3 + 28);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
  v14(v11, v12, v13);
  uint64_t v15 = *(int *)(a3 + 32);
  uint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (void *)((char *)a2 + v15);
  uint64_t v18 = type metadata accessor for CloudAssets_Credential(0);
  if (_s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v17, 1, v18))
  {
    uint64_t v19 = sub_24A08DF34(&qword_26975D568);
    memcpy(v16, v17, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    uint64_t v20 = v17[1];
    *uint64_t v16 = *v17;
    v16[1] = v20;
    uint64_t v21 = v17[3];
    v16[2] = v17[2];
    v16[3] = v21;
    uint64_t v22 = v17[5];
    v16[4] = v17[4];
    v16[5] = v22;
    uint64_t v23 = *(int *)(v18 + 28);
    uint64_t v31 = (char *)v16 + v23;
    uint64_t v24 = (char *)v17 + v23;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14(v31, v24, v13);
    uint64_t v25 = *(int *)(v18 + 32);
    uint64_t v26 = (char *)v16 + v25;
    uint64_t v27 = (char *)v17 + v25;
    uint64_t v28 = type metadata accessor for Google_Protobuf_Timestamp();
    if (_s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v27, 1, v28))
    {
      uint64_t v29 = sub_24A08DF34(&qword_26975D560);
      memcpy(v26, v27, *(void *)(*(void *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16))(v26, v27, v28);
      _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)v26, 0, 1, v28);
    }
    _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)v16, 0, 1, v18);
  }
  return a1;
}

void *sub_24A09E368(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[1];
  unint64_t v7 = a2[2];
  sub_24A08DE84(v6, v7);
  uint64_t v8 = a1[1];
  unint64_t v9 = a1[2];
  a1[1] = v6;
  a1[2] = v7;
  sub_24A08DEDC(v8, v9);
  uint64_t v10 = a2[3];
  unint64_t v11 = a2[4];
  sub_24A08DE84(v10, v11);
  uint64_t v12 = a1[3];
  unint64_t v13 = a1[4];
  a1[3] = v10;
  a1[4] = v11;
  sub_24A08DEDC(v12, v13);
  uint64_t v14 = *(int *)(a3 + 28);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for UnknownStorage();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v18 + 24);
  v19(v15, v16, v17);
  uint64_t v20 = *(int *)(a3 + 32);
  uint64_t v21 = (void *)((char *)a1 + v20);
  uint64_t v22 = (void *)((char *)a2 + v20);
  uint64_t v23 = type metadata accessor for CloudAssets_Credential(0);
  LODWORD(v16) = _s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v21, 1, v23);
  int v24 = _s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v22, 1, v23);
  if (v16)
  {
    if (!v24)
    {
      *uint64_t v21 = *v22;
      v21[1] = v22[1];
      v21[2] = v22[2];
      v21[3] = v22[3];
      v21[4] = v22[4];
      v21[5] = v22[5];
      uint64_t v25 = *(int *)(v23 + 28);
      uint64_t v26 = (char *)v21 + v25;
      uint64_t v27 = (char *)v22 + v25;
      uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v28(v26, v27, v17);
      uint64_t v29 = *(int *)(v23 + 32);
      uint64_t v30 = (char *)v21 + v29;
      uint64_t v31 = (char *)v22 + v29;
      uint64_t v32 = type metadata accessor for Google_Protobuf_Timestamp();
      if (_s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v31, 1, v32))
      {
        uint64_t v33 = sub_24A08DF34(&qword_26975D560);
        memcpy(v30, v31, *(void *)(*(void *)(v33 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 16))(v30, v31, v32);
        _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)v30, 0, 1, v32);
      }
      uint64_t v43 = (uint64_t)v21;
      uint64_t v44 = v23;
      goto LABEL_14;
    }
    goto LABEL_7;
  }
  if (v24)
  {
    sub_24A09FA68((uint64_t)v21, (void (*)(void))type metadata accessor for CloudAssets_Credential);
LABEL_7:
    size_t v34 = *(void *)(*(void *)(sub_24A08DF34(&qword_26975D568) - 8) + 64);
    uint64_t v35 = v21;
    unint64_t v36 = v22;
    goto LABEL_8;
  }
  *uint64_t v21 = *v22;
  v21[1] = v22[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v21[2] = v22[2];
  v21[3] = v22[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v21[4] = v22[4];
  v21[5] = v22[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v19((char *)v21 + *(int *)(v23 + 28), (char *)v22 + *(int *)(v23 + 28), v17);
  uint64_t v37 = *(int *)(v23 + 32);
  uint64_t v38 = (uint64_t)v21 + v37;
  uint64_t v39 = (uint64_t)v22 + v37;
  uint64_t v40 = type metadata accessor for Google_Protobuf_Timestamp();
  int v41 = _s10CloudAsset21UploadResponseMessageOwet_0(v38, 1, v40);
  int v42 = _s10CloudAsset21UploadResponseMessageOwet_0(v39, 1, v40);
  if (v41)
  {
    if (!v42)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 16))(v38, v39, v40);
      uint64_t v43 = v38;
      uint64_t v44 = v40;
LABEL_14:
      _s10CloudAsset21UploadResponseMessageOwst_0(v43, 0, 1, v44);
      return a1;
    }
  }
  else
  {
    uint64_t v46 = *(void *)(v40 - 8);
    if (!v42)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 24))(v38, v39, v40);
      return a1;
    }
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v38, v40);
  }
  size_t v34 = *(void *)(*(void *)(sub_24A08DF34(&qword_26975D560) - 8) + 64);
  uint64_t v35 = (void *)v38;
  unint64_t v36 = (const void *)v39;
LABEL_8:
  memcpy(v35, v36, v34);
  return a1;
}

uint64_t sub_24A09E7CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 32);
  uint64_t v12 = (_OWORD *)(a1 + v11);
  unint64_t v13 = (_OWORD *)(a2 + v11);
  uint64_t v14 = type metadata accessor for CloudAssets_Credential(0);
  if (_s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v13, 1, v14))
  {
    uint64_t v15 = sub_24A08DF34(&qword_26975D568);
    memcpy(v12, v13, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    long long v16 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v16;
    v12[2] = v13[2];
    v10((uint64_t)v12 + *(int *)(v14 + 28), (uint64_t)v13 + *(int *)(v14 + 28), v9);
    uint64_t v17 = *(int *)(v14 + 32);
    uint64_t v18 = (char *)v12 + v17;
    uint64_t v19 = (char *)v13 + v17;
    uint64_t v20 = type metadata accessor for Google_Protobuf_Timestamp();
    if (_s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v19, 1, v20))
    {
      uint64_t v21 = sub_24A08DF34(&qword_26975D560);
      memcpy(v18, v19, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v18, v19, v20);
      _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)v18, 0, 1, v20);
    }
    _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)v12, 0, 1, v14);
  }
  return a1;
}

void *sub_24A09E9B4(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = a1[1];
  unint64_t v7 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  sub_24A08DEDC(v6, v7);
  uint64_t v8 = a1[3];
  unint64_t v9 = a1[4];
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  sub_24A08DEDC(v8, v9);
  uint64_t v10 = *(int *)(a3 + 28);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 40);
  v15(v11, v12, v13);
  uint64_t v16 = *(int *)(a3 + 32);
  uint64_t v17 = (uint64_t)a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = type metadata accessor for CloudAssets_Credential(0);
  LODWORD(v12) = _s10CloudAsset21UploadResponseMessageOwet_0(v17, 1, v19);
  int v20 = _s10CloudAsset21UploadResponseMessageOwet_0(v18, 1, v19);
  if (v12)
  {
    if (!v20)
    {
      long long v21 = *(_OWORD *)(v18 + 16);
      *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
      *(_OWORD *)(v17 + 16) = v21;
      *(_OWORD *)(v17 + 32) = *(_OWORD *)(v18 + 32);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32))(v17 + *(int *)(v19 + 28), v18 + *(int *)(v19 + 28), v13);
      uint64_t v22 = *(int *)(v19 + 32);
      uint64_t v23 = (void *)(v17 + v22);
      int v24 = (const void *)(v18 + v22);
      uint64_t v25 = type metadata accessor for Google_Protobuf_Timestamp();
      if (_s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v24, 1, v25))
      {
        uint64_t v26 = sub_24A08DF34(&qword_26975D560);
        memcpy(v23, v24, *(void *)(*(void *)(v26 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v25 - 8) + 32))(v23, v24, v25);
        _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)v23, 0, 1, v25);
      }
      uint64_t v39 = v17;
      uint64_t v40 = v19;
      goto LABEL_14;
    }
    goto LABEL_7;
  }
  if (v20)
  {
    sub_24A09FA68(v17, (void (*)(void))type metadata accessor for CloudAssets_Credential);
LABEL_7:
    size_t v27 = *(void *)(*(void *)(sub_24A08DF34(&qword_26975D568) - 8) + 64);
    uint64_t v28 = (void *)v17;
    uint64_t v29 = (const void *)v18;
    goto LABEL_8;
  }
  uint64_t v30 = *(void *)(v18 + 8);
  *(void *)uint64_t v17 = *(void *)v18;
  *(void *)(v17 + 8) = v30;
  swift_bridgeObjectRelease();
  uint64_t v31 = *(void *)(v18 + 24);
  *(void *)(v17 + 16) = *(void *)(v18 + 16);
  *(void *)(v17 + 24) = v31;
  swift_bridgeObjectRelease();
  uint64_t v32 = *(void *)(v18 + 40);
  *(void *)(v17 + 32) = *(void *)(v18 + 32);
  *(void *)(v17 + 40) = v32;
  swift_bridgeObjectRelease();
  v15((char *)(v17 + *(int *)(v19 + 28)), v18 + *(int *)(v19 + 28), v13);
  uint64_t v33 = *(int *)(v19 + 32);
  uint64_t v34 = v17 + v33;
  uint64_t v35 = v18 + v33;
  uint64_t v36 = type metadata accessor for Google_Protobuf_Timestamp();
  int v37 = _s10CloudAsset21UploadResponseMessageOwet_0(v34, 1, v36);
  int v38 = _s10CloudAsset21UploadResponseMessageOwet_0(v35, 1, v36);
  if (v37)
  {
    if (!v38)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 32))(v34, v35, v36);
      uint64_t v39 = v34;
      uint64_t v40 = v36;
LABEL_14:
      _s10CloudAsset21UploadResponseMessageOwst_0(v39, 0, 1, v40);
      return a1;
    }
  }
  else
  {
    uint64_t v42 = *(void *)(v36 - 8);
    if (!v38)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 40))(v34, v35, v36);
      return a1;
    }
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v34, v36);
  }
  size_t v27 = *(void *)(*(void *)(sub_24A08DF34(&qword_26975D560) - 8) + 64);
  uint64_t v28 = (void *)v34;
  uint64_t v29 = (const void *)v35;
LABEL_8:
  memcpy(v28, v29, v27);
  return a1;
}

uint64_t sub_24A09ED7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A09ED90);
}

uint64_t sub_24A09ED90()
{
  sub_24A0AAEC4();
  if (v2) {
    return sub_24A0AAE40(*v1);
  }
  sub_24A0AAE74();
  sub_24A08F268();
  if (*(_DWORD *)(v4 + 84) == v0)
  {
    sub_24A0AB1B4();
  }
  else
  {
    sub_24A08DF34(&qword_26975D568);
    sub_24A0AB1A8();
  }
  uint64_t v6 = sub_24A0AAF58(v5);
  return _s10CloudAsset21UploadResponseMessageOwet_0(v6, v7, v8);
}

uint64_t sub_24A09EE14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A09EE28);
}

void sub_24A09EE28()
{
  sub_24A0AAE2C();
  if (v3)
  {
    *unint64_t v1 = (v0 - 1);
  }
  else
  {
    sub_24A0AB060();
    sub_24A08F268();
    if (*(_DWORD *)(v4 + 84) == v2)
    {
      sub_24A0AB190();
    }
    else
    {
      sub_24A08DF34(&qword_26975D568);
      sub_24A0AB184();
    }
    uint64_t v6 = sub_24A0AAE64(v5);
    _s10CloudAsset21UploadResponseMessageOwst_0(v6, v7, v8, v9);
  }
}

uint64_t type metadata accessor for CloudAssets_SimultaneousDownloadableAssets(uint64_t a1)
{
  return sub_24A0933F0(a1, (uint64_t *)&unk_26975D708);
}

void sub_24A09EECC(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_24A09EF00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t *a6, void (*a7)(uint64_t))
{
  type metadata accessor for UnknownStorage();
  if (v9 <= 0x3F)
  {
    sub_24A09EFE8(319, a6, a7);
    if (v10 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_24A09EFE8(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t *sub_24A09F03C(uint64_t *a1, uint64_t *a2, int *a3)
{
  unint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    uint64_t v7 = a3[5];
    uint64_t v8 = (char *)a1 + v7;
    unint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
    v11(v8, v9, v10);
    uint64_t v12 = a3[6];
    uint64_t v13 = (uint64_t *)((char *)v4 + v12);
    uint64_t v14 = (uint64_t *)((char *)a2 + v12);
    uint64_t v15 = type metadata accessor for CloudAssets_Asset.ID(0);
    if (_s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v14, 1, v15))
    {
      uint64_t v16 = sub_24A08DF34(&qword_26975D4F8);
      memcpy(v13, v14, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      uint64_t v18 = v14[1];
      void *v13 = *v14;
      v13[1] = v18;
      uint64_t v34 = v11;
      uint64_t v19 = v14[3];
      v13[2] = v14[2];
      v13[3] = v19;
      uint64_t v20 = v14[4];
      unint64_t v21 = v14[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_24A08DE84(v20, v21);
      v13[4] = v20;
      v13[5] = v21;
      uint64_t v22 = v14[6];
      unint64_t v23 = v14[7];
      sub_24A08DE84(v22, v23);
      v13[6] = v22;
      v13[7] = v23;
      uint64_t v11 = v34;
      v34((char *)v13 + *(int *)(v15 + 32), (char *)v14 + *(int *)(v15 + 32), v10);
      _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)v13, 0, 1, v15);
    }
    uint64_t v24 = a3[7];
    uint64_t v25 = (uint64_t *)((char *)v4 + v24);
    uint64_t v26 = (uint64_t *)((char *)a2 + v24);
    uint64_t v27 = type metadata accessor for CloudAssets_Asset.Protector(0);
    if (_s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v26, 1, v27))
    {
      uint64_t v28 = sub_24A08DF34(&qword_26975D500);
      memcpy(v25, v26, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      uint64_t v29 = *v26;
      unint64_t v30 = v26[1];
      sub_24A08DE84(*v26, v30);
      *uint64_t v25 = v29;
      v25[1] = v30;
      uint64_t v31 = v26[2];
      unint64_t v32 = v26[3];
      sub_24A08DE84(v31, v32);
      v25[2] = v31;
      v25[3] = v32;
      v11((char *)v25 + *(int *)(v27 + 24), (char *)v26 + *(int *)(v27 + 24), v10);
      _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)v25, 0, 1, v27);
    }
  }
  return v4;
}

uint64_t type metadata accessor for CloudAssets_Asset.ID(uint64_t a1)
{
  return sub_24A0933F0(a1, (uint64_t *)&unk_26975D750);
}

uint64_t type metadata accessor for CloudAssets_Asset.Protector(uint64_t a1)
{
  return sub_24A0933F0(a1, (uint64_t *)&unk_26975D740);
}

uint64_t sub_24A09F300(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v12(v4, v5);
  uint64_t v6 = a1 + a2[6];
  uint64_t v7 = type metadata accessor for CloudAssets_Asset.ID(0);
  if (!_s10CloudAsset21UploadResponseMessageOwet_0(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_24A08DEDC(*(void *)(v6 + 32), *(void *)(v6 + 40));
    sub_24A08DEDC(*(void *)(v6 + 48), *(void *)(v6 + 56));
    v12(v6 + *(int *)(v7 + 32), v5);
  }
  uint64_t v8 = a1 + a2[7];
  uint64_t v9 = type metadata accessor for CloudAssets_Asset.Protector(0);
  uint64_t result = _s10CloudAsset21UploadResponseMessageOwet_0(v8, 1, v9);
  if (!result)
  {
    sub_24A08DEDC(*(void *)v8, *(void *)(v8 + 8));
    sub_24A08DEDC(*(void *)(v8 + 16), *(void *)(v8 + 24));
    uint64_t v11 = v8 + *(int *)(v9 + 24);
    return ((uint64_t (*)(uint64_t, uint64_t))v12)(v11, v5);
  }
  return result;
}

void *sub_24A09F460(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  v10(v7, v8, v9);
  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (void *)((char *)a2 + v11);
  uint64_t v14 = type metadata accessor for CloudAssets_Asset.ID(0);
  if (_s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v13, 1, v14))
  {
    uint64_t v15 = sub_24A08DF34(&qword_26975D4F8);
    memcpy(v12, v13, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    uint64_t v16 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v16;
    unint64_t v32 = v10;
    uint64_t v17 = v13[3];
    v12[2] = v13[2];
    v12[3] = v17;
    uint64_t v18 = v13[4];
    unint64_t v19 = v13[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_24A08DE84(v18, v19);
    v12[4] = v18;
    v12[5] = v19;
    uint64_t v20 = v13[6];
    unint64_t v21 = v13[7];
    sub_24A08DE84(v20, v21);
    v12[6] = v20;
    v12[7] = v21;
    uint64_t v10 = v32;
    v32((char *)v12 + *(int *)(v14 + 32), (char *)v13 + *(int *)(v14 + 32), v9);
    _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)v12, 0, 1, v14);
  }
  uint64_t v22 = a3[7];
  unint64_t v23 = (void *)((char *)a1 + v22);
  uint64_t v24 = (void *)((char *)a2 + v22);
  uint64_t v25 = type metadata accessor for CloudAssets_Asset.Protector(0);
  if (_s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v24, 1, v25))
  {
    uint64_t v26 = sub_24A08DF34(&qword_26975D500);
    memcpy(v23, v24, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    uint64_t v27 = *v24;
    unint64_t v28 = v24[1];
    sub_24A08DE84(*v24, v28);
    *unint64_t v23 = v27;
    v23[1] = v28;
    uint64_t v29 = v24[2];
    unint64_t v30 = v24[3];
    sub_24A08DE84(v29, v30);
    v23[2] = v29;
    v23[3] = v30;
    v10((char *)v23 + *(int *)(v25 + 24), (char *)v24 + *(int *)(v25 + 24), v9);
    _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)v23, 0, 1, v25);
  }
  return a1;
}

void *sub_24A09F694(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v53 = *(void *)(v9 - 8);
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(v53 + 24);
  v10(v7, v8, v9);
  uint64_t v11 = a3[6];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for CloudAssets_Asset.ID(0);
  int v15 = _s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v12, 1, v14);
  int v16 = _s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v13, 1, v14);
  if (v15)
  {
    if (!v16)
    {
      *(void *)uint64_t v12 = *(void *)v13;
      *((void *)v12 + 1) = *((void *)v13 + 1);
      *((void *)v12 + 2) = *((void *)v13 + 2);
      *((void *)v12 + 3) = *((void *)v13 + 3);
      uint64_t v50 = v9;
      uint64_t v51 = v10;
      uint64_t v17 = *((void *)v13 + 4);
      unint64_t v18 = *((void *)v13 + 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_24A08DE84(v17, v18);
      *((void *)v12 + 4) = v17;
      *((void *)v12 + 5) = v18;
      uint64_t v9 = v50;
      uint64_t v19 = *((void *)v13 + 6);
      unint64_t v20 = *((void *)v13 + 7);
      sub_24A08DE84(v19, v20);
      *((void *)v12 + 6) = v19;
      *((void *)v12 + 7) = v20;
      uint64_t v10 = v51;
      (*(void (**)(char *, char *, uint64_t))(v53 + 16))(&v12[*(int *)(v14 + 32)], &v13[*(int *)(v14 + 32)], v50);
      _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    sub_24A09FA68((uint64_t)v12, (void (*)(void))type metadata accessor for CloudAssets_Asset.ID);
LABEL_6:
    uint64_t v21 = sub_24A08DF34(&qword_26975D4F8);
    memcpy(v12, v13, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_7;
  }
  *(void *)uint64_t v12 = *(void *)v13;
  *((void *)v12 + 1) = *((void *)v13 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v12 + 2) = *((void *)v13 + 2);
  *((void *)v12 + 3) = *((void *)v13 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v52 = v10;
  uint64_t v34 = *((void *)v13 + 4);
  unint64_t v35 = *((void *)v13 + 5);
  sub_24A08DE84(v34, v35);
  uint64_t v36 = *((void *)v12 + 4);
  unint64_t v37 = *((void *)v12 + 5);
  *((void *)v12 + 4) = v34;
  *((void *)v12 + 5) = v35;
  sub_24A08DEDC(v36, v37);
  uint64_t v38 = *((void *)v13 + 6);
  unint64_t v39 = *((void *)v13 + 7);
  sub_24A08DE84(v38, v39);
  uint64_t v40 = *((void *)v12 + 6);
  unint64_t v41 = *((void *)v12 + 7);
  *((void *)v12 + 6) = v38;
  *((void *)v12 + 7) = v39;
  uint64_t v10 = v52;
  sub_24A08DEDC(v40, v41);
  v52(&v12[*(int *)(v14 + 32)], &v13[*(int *)(v14 + 32)], v9);
LABEL_7:
  uint64_t v22 = a3[7];
  unint64_t v23 = (void *)((char *)a1 + v22);
  uint64_t v24 = (void *)((char *)a2 + v22);
  uint64_t v25 = type metadata accessor for CloudAssets_Asset.Protector(0);
  int v26 = _s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v23, 1, v25);
  int v27 = _s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v24, 1, v25);
  if (!v26)
  {
    if (!v27)
    {
      uint64_t v42 = *v24;
      unint64_t v43 = v24[1];
      sub_24A08DE84(*v24, v43);
      uint64_t v44 = *v23;
      unint64_t v45 = v23[1];
      *unint64_t v23 = v42;
      v23[1] = v43;
      sub_24A08DEDC(v44, v45);
      uint64_t v46 = v24[2];
      unint64_t v47 = v24[3];
      sub_24A08DE84(v46, v47);
      uint64_t v48 = v23[2];
      unint64_t v49 = v23[3];
      v23[2] = v46;
      v23[3] = v47;
      sub_24A08DEDC(v48, v49);
      v10((char *)v23 + *(int *)(v25 + 24), (char *)v24 + *(int *)(v25 + 24), v9);
      return a1;
    }
    sub_24A09FA68((uint64_t)v23, (void (*)(void))type metadata accessor for CloudAssets_Asset.Protector);
    goto LABEL_12;
  }
  if (v27)
  {
LABEL_12:
    uint64_t v32 = sub_24A08DF34(&qword_26975D500);
    memcpy(v23, v24, *(void *)(*(void *)(v32 - 8) + 64));
    return a1;
  }
  uint64_t v28 = *v24;
  unint64_t v29 = v24[1];
  sub_24A08DE84(*v24, v29);
  *unint64_t v23 = v28;
  v23[1] = v29;
  uint64_t v30 = v24[2];
  unint64_t v31 = v24[3];
  sub_24A08DE84(v30, v31);
  v23[2] = v30;
  v23[3] = v31;
  (*(void (**)(char *, char *, uint64_t))(v53 + 16))((char *)v23 + *(int *)(v25 + 24), (char *)v24 + *(int *)(v25 + 24), v9);
  _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)v23, 0, 1, v25);
  return a1;
}

uint64_t sub_24A09FA68(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_24A08F280();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

void *sub_24A09FAC0(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = a3[6];
  uint64_t v12 = (_OWORD *)((char *)a1 + v11);
  uint64_t v13 = (_OWORD *)((char *)a2 + v11);
  uint64_t v14 = type metadata accessor for CloudAssets_Asset.ID(0);
  if (_s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v13, 1, v14))
  {
    uint64_t v15 = sub_24A08DF34(&qword_26975D4F8);
    memcpy(v12, v13, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    long long v16 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v16;
    long long v17 = v13[3];
    v12[2] = v13[2];
    v12[3] = v17;
    v10((char *)v12 + *(int *)(v14 + 32), (char *)v13 + *(int *)(v14 + 32), v9);
    _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)v12, 0, 1, v14);
  }
  uint64_t v18 = a3[7];
  uint64_t v19 = (_OWORD *)((char *)a1 + v18);
  unint64_t v20 = (_OWORD *)((char *)a2 + v18);
  uint64_t v21 = type metadata accessor for CloudAssets_Asset.Protector(0);
  if (_s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v20, 1, v21))
  {
    uint64_t v22 = sub_24A08DF34(&qword_26975D500);
    memcpy(v19, v20, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    long long v23 = v20[1];
    *uint64_t v19 = *v20;
    v19[1] = v23;
    v10((char *)v19 + *(int *)(v21 + 24), (char *)v20 + *(int *)(v21 + 24), v9);
    _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)v19, 0, 1, v21);
  }
  return a1;
}

void *sub_24A09FC90(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void *)(v9 - 8);
  unint64_t v39 = *(void (**)(char *, char *, uint64_t))(v10 + 40);
  v39(v7, v8, v9);
  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for CloudAssets_Asset.ID(0);
  int v15 = _s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v12, 1, v14);
  int v16 = _s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v13, 1, v14);
  if (v15)
  {
    if (!v16)
    {
      long long v17 = *((_OWORD *)v13 + 1);
      *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
      *((_OWORD *)v12 + 1) = v17;
      long long v18 = *((_OWORD *)v13 + 3);
      *((_OWORD *)v12 + 2) = *((_OWORD *)v13 + 2);
      *((_OWORD *)v12 + 3) = v18;
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))((char *)v12 + *(int *)(v14 + 32), &v13[*(int *)(v14 + 32)], v9);
      _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    sub_24A09FA68((uint64_t)v12, (void (*)(void))type metadata accessor for CloudAssets_Asset.ID);
LABEL_6:
    uint64_t v19 = sub_24A08DF34(&qword_26975D4F8);
    memcpy(v12, v13, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v29 = *((void *)v13 + 1);
  *uint64_t v12 = *(void *)v13;
  v12[1] = v29;
  swift_bridgeObjectRelease();
  uint64_t v30 = *((void *)v13 + 3);
  v12[2] = *((void *)v13 + 2);
  v12[3] = v30;
  swift_bridgeObjectRelease();
  uint64_t v31 = v12[4];
  unint64_t v32 = v12[5];
  *((_OWORD *)v12 + 2) = *((_OWORD *)v13 + 2);
  sub_24A08DEDC(v31, v32);
  uint64_t v33 = v12[6];
  unint64_t v34 = v12[7];
  *((_OWORD *)v12 + 3) = *((_OWORD *)v13 + 3);
  sub_24A08DEDC(v33, v34);
  v39((char *)v12 + *(int *)(v14 + 32), &v13[*(int *)(v14 + 32)], v9);
LABEL_7:
  uint64_t v20 = a3[7];
  uint64_t v21 = (void *)((char *)a1 + v20);
  uint64_t v22 = (char *)a2 + v20;
  uint64_t v23 = type metadata accessor for CloudAssets_Asset.Protector(0);
  int v24 = _s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v21, 1, v23);
  int v25 = _s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v22, 1, v23);
  if (!v24)
  {
    if (!v25)
    {
      uint64_t v35 = *v21;
      unint64_t v36 = v21[1];
      *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
      sub_24A08DEDC(v35, v36);
      uint64_t v37 = v21[2];
      unint64_t v38 = v21[3];
      *((_OWORD *)v21 + 1) = *((_OWORD *)v22 + 1);
      sub_24A08DEDC(v37, v38);
      v39((char *)v21 + *(int *)(v23 + 24), &v22[*(int *)(v23 + 24)], v9);
      return a1;
    }
    sub_24A09FA68((uint64_t)v21, (void (*)(void))type metadata accessor for CloudAssets_Asset.Protector);
    goto LABEL_12;
  }
  if (v25)
  {
LABEL_12:
    uint64_t v27 = sub_24A08DF34(&qword_26975D500);
    memcpy(v21, v22, *(void *)(*(void *)(v27 - 8) + 64));
    return a1;
  }
  long long v26 = *((_OWORD *)v22 + 1);
  *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
  *((_OWORD *)v21 + 1) = v26;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))((char *)v21 + *(int *)(v23 + 24), &v22[*(int *)(v23 + 24)], v9);
  _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)v21, 0, 1, v23);
  return a1;
}

uint64_t sub_24A09FFA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A09FFBC);
}

uint64_t sub_24A09FFBC(uint64_t a1, int a2, uint64_t a3)
{
  type metadata accessor for UnknownStorage();
  sub_24A08F268();
  if (*(_DWORD *)(v5 + 84) == a2)
  {
    uint64_t v6 = *(int *)(a3 + 20);
  }
  else
  {
    sub_24A08DF34(&qword_26975D4F8);
    sub_24A08F268();
    if (*(_DWORD *)(v7 + 84) == a2)
    {
      uint64_t v6 = *(int *)(a3 + 24);
    }
    else
    {
      sub_24A08DF34(&qword_26975D500);
      sub_24A0AB1B4();
    }
  }
  uint64_t v8 = sub_24A0AAF58(v6);
  return _s10CloudAsset21UploadResponseMessageOwet_0(v8, v9, v10);
}

uint64_t sub_24A0A005C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A0A0070);
}

uint64_t sub_24A0A0070(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for UnknownStorage();
  sub_24A08F268();
  if (*(_DWORD *)(v6 + 84) == a3)
  {
    uint64_t v7 = *(int *)(a4 + 20);
  }
  else
  {
    sub_24A08DF34(&qword_26975D4F8);
    sub_24A08F268();
    if (*(_DWORD *)(v8 + 84) == a3)
    {
      uint64_t v7 = *(int *)(a4 + 24);
    }
    else
    {
      sub_24A08DF34(&qword_26975D500);
      sub_24A0AB190();
    }
  }
  uint64_t v9 = sub_24A0AAE64(v7);
  return _s10CloudAsset21UploadResponseMessageOwst_0(v9, v10, v11, v12);
}

uint64_t type metadata accessor for CloudAssets_Asset(uint64_t a1)
{
  return sub_24A0933F0(a1, (uint64_t *)&unk_26975D720);
}

void sub_24A0A0134()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    sub_24A09EFE8(319, &qword_26975D730, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset.ID);
    if (v1 <= 0x3F)
    {
      sub_24A09EFE8(319, &qword_26975D738, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset.Protector);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t *sub_24A0A0280(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_24A08DE84(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a2[2];
    unint64_t v10 = a2[3];
    sub_24A08DE84(v9, v10);
    a1[2] = v9;
    a1[3] = v10;
    uint64_t v11 = *(int *)(a3 + 24);
    uint64_t v12 = (char *)a1 + v11;
    uint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  }
  return a1;
}

uint64_t sub_24A0A037C(uint64_t a1, uint64_t a2)
{
  sub_24A08DEDC(*(void *)a1, *(void *)(a1 + 8));
  sub_24A08DEDC(*(void *)(a1 + 16), *(void *)(a1 + 24));
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t *sub_24A0A0400(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_24A08DE84(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  sub_24A08DE84(v8, v9);
  a1[2] = v8;
  a1[3] = v9;
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
  return a1;
}

uint64_t *sub_24A0A04AC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_24A08DE84(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_24A08DEDC(v8, v9);
  uint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  sub_24A08DE84(v10, v11);
  uint64_t v12 = a1[2];
  unint64_t v13 = a1[3];
  a1[2] = v10;
  a1[3] = v11;
  sub_24A08DEDC(v12, v13);
  uint64_t v14 = *(int *)(a3 + 24);
  uint64_t v15 = (char *)a1 + v14;
  int v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 24))(v15, v16, v17);
  return a1;
}

_OWORD *sub_24A0A0568(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (char *)a1 + v5;
  unint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t *sub_24A0A05E4(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_24A08DEDC(v6, v7);
  uint64_t v8 = a1[2];
  unint64_t v9 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_24A08DEDC(v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  unint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t sub_24A0A0684(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A0A0698);
}

uint64_t sub_24A0A0698(uint64_t a1, int a2)
{
  if (a2 == 12)
  {
    uint64_t v3 = *(void *)(a1 + 8) >> 60;
    if (((4 * v3) & 0xC) != 0) {
      return 16 - ((4 * v3) & 0xC | (v3 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    sub_24A0AAE74();
    uint64_t v5 = sub_24A0AAF58(*(int *)(v2 + 24));
    return _s10CloudAsset21UploadResponseMessageOwet_0(v5, v6, v7);
  }
}

uint64_t sub_24A0A071C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A0A0730);
}

void *sub_24A0A0730(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *uint64_t result = 0;
    result[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = (uint64_t)v5 + *(int *)(a4 + 24);
    return (void *)_s10CloudAsset21UploadResponseMessageOwst_0(v8, a2, a2, v7);
  }
  return result;
}

uint64_t sub_24A0A07B8()
{
  return sub_24A0AAB70();
}

uint64_t *sub_24A0A07C8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = a2[4];
    unint64_t v10 = a2[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_24A08DE84(v9, v10);
    a1[4] = v9;
    a1[5] = v10;
    uint64_t v11 = a2[6];
    unint64_t v12 = a2[7];
    sub_24A08DE84(v11, v12);
    a1[6] = v11;
    a1[7] = v12;
    uint64_t v13 = *(int *)(a3 + 32);
    uint64_t v14 = (char *)a1 + v13;
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
  }
  return a1;
}

uint64_t sub_24A0A08E0(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_24A08DEDC(*(void *)(a1 + 32), *(void *)(a1 + 40));
  sub_24A08DEDC(*(void *)(a1 + 48), *(void *)(a1 + 56));
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

void *sub_24A0A0970(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a2[4];
  unint64_t v9 = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_24A08DE84(v8, v9);
  a1[4] = v8;
  a1[5] = v9;
  uint64_t v10 = a2[6];
  unint64_t v11 = a2[7];
  sub_24A08DE84(v10, v11);
  a1[6] = v10;
  a1[7] = v11;
  uint64_t v12 = *(int *)(a3 + 32);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  return a1;
}

void *sub_24A0A0A38(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[4];
  unint64_t v7 = a2[5];
  sub_24A08DE84(v6, v7);
  uint64_t v8 = a1[4];
  unint64_t v9 = a1[5];
  a1[4] = v6;
  a1[5] = v7;
  sub_24A08DEDC(v8, v9);
  uint64_t v10 = a2[6];
  unint64_t v11 = a2[7];
  sub_24A08DE84(v10, v11);
  uint64_t v12 = a1[6];
  unint64_t v13 = a1[7];
  a1[6] = v10;
  a1[7] = v11;
  sub_24A08DEDC(v12, v13);
  uint64_t v14 = *(int *)(a3 + 32);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 24))(v15, v16, v17);
  return a1;
}

_OWORD *sub_24A0A0B34(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  long long v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = *(int *)(a3 + 32);
  unint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  return a1;
}

void *sub_24A0A0BB8(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a1[4];
  unint64_t v9 = a1[5];
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  sub_24A08DEDC(v8, v9);
  uint64_t v10 = a1[6];
  unint64_t v11 = a1[7];
  *((_OWORD *)a1 + 3) = *(_OWORD *)(a2 + 48);
  sub_24A08DEDC(v10, v11);
  uint64_t v12 = *(int *)(a3 + 32);
  unint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 40))(v13, v14, v15);
  return a1;
}

uint64_t sub_24A0A0C74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A0A0C88);
}

uint64_t sub_24A0A0C88()
{
  sub_24A0AAEC4();
  if (v1) {
    return sub_24A0AAE40(*(void *)(v0 + 8));
  }
  sub_24A0AAE74();
  sub_24A0AB1A8();
  uint64_t v4 = sub_24A0AAF58(v3);
  return _s10CloudAsset21UploadResponseMessageOwet_0(v4, v5, v6);
}

uint64_t sub_24A0A0CE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A0A0CFC);
}

void sub_24A0A0CFC()
{
  sub_24A0AAE2C();
  if (v2)
  {
    *(void *)(v1 + 8) = (v0 - 1);
  }
  else
  {
    type metadata accessor for UnknownStorage();
    sub_24A0AB184();
    uint64_t v4 = sub_24A0AAE64(v3);
    _s10CloudAsset21UploadResponseMessageOwst_0(v4, v5, v6, v7);
  }
}

uint64_t sub_24A0A0D64()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_24A0A0E08@<X0>(void *a1@<X8>)
{
  sub_24A0AAF10(a1);
  *(_OWORD *)(v1 + 32) = xmmword_24A0E6FA0;
  *(_OWORD *)(v1 + 48) = xmmword_24A0E6FA0;
  type metadata accessor for CloudAssets_Asset.ID(0);
  return UnknownStorage.init()();
}

uint64_t sub_24A0A0E48@<X0>(_OWORD *a1@<X8>)
{
  *a1 = xmmword_24A0E6FA0;
  a1[1] = xmmword_24A0E6FA0;
  type metadata accessor for CloudAssets_Asset.Protector(0);
  return UnknownStorage.init()();
}

uint64_t sub_24A0A0E88@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  type metadata accessor for CloudAssets_Asset(0);
  UnknownStorage.init()();
  uint64_t v1 = type metadata accessor for CloudAssets_Asset.ID(0);
  sub_24A0AB164(v1);
  type metadata accessor for CloudAssets_Asset.Protector(0);
  uint64_t v2 = sub_24A0AAE90();
  return _s10CloudAsset21UploadResponseMessageOwst_0(v2, v3, v4, v5);
}

uint64_t sub_24A0A0F04@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = MEMORY[0x263F8EE78];
  *(_OWORD *)(a1 + 8) = xmmword_24A0E6FA0;
  *(_OWORD *)(a1 + 24) = xmmword_24A0E6FA0;
  type metadata accessor for CloudAssets_SimultaneousDownloadableAssets(0);
  UnknownStorage.init()();
  type metadata accessor for CloudAssets_Credential(0);
  uint64_t v1 = sub_24A0AAE90();
  return _s10CloudAsset21UploadResponseMessageOwst_0(v1, v2, v3, v4);
}

uint64_t sub_24A0A0F7C@<X0>(void *a1@<X8>)
{
  sub_24A0AAF10(a1);
  *(void *)(v1 + 32) = 0;
  *(void *)(v1 + 40) = v2;
  type metadata accessor for CloudAssets_Credential(0);
  UnknownStorage.init()();
  type metadata accessor for Google_Protobuf_Timestamp();
  uint64_t v3 = sub_24A0AAE90();
  return _s10CloudAsset21UploadResponseMessageOwst_0(v3, v4, v5, v6);
}

BOOL sub_24A0A0FF0(BOOL result, char a2)
{
  if (a2) {
    return result;
  }
  return result;
}

void sub_24A0A1004()
{
  qword_269769F30 = (uint64_t)&unk_26FDF1968;
}

uint64_t *sub_24A0A1018()
{
  if (qword_26975D2B0 != -1) {
    swift_once();
  }
  return &qword_269769F30;
}

void sub_24A0A1064(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
}

void sub_24A0A1074(uint64_t a1@<X8>)
{
  sub_24A0A0FDC();
  *(void *)a1 = v2;
  *(unsigned char *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 9) = v4 & 1;
}

BOOL sub_24A0A10A8()
{
  return sub_24A0A0FF0(*(void *)v0, *(unsigned char *)(v0 + 8));
}

uint64_t sub_24A0A10B4@<X0>(void *a1@<X8>)
{
  sub_24A0A1018();
  *a1 = qword_269769F30;
  return swift_bridgeObjectRetain();
}

void sub_24A0A10F4(uint64_t a1@<X8>)
{
  sub_24A0A0FDC();
  *(void *)a1 = v2;
  *(unsigned char *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 9) = v4 & 1;
}

BOOL sub_24A0A112C@<W0>(BOOL *a1@<X8>)
{
  BOOL result = sub_24A0A0FF0(*(void *)v1, *(unsigned char *)(v1 + 8));
  *a1 = result;
  return result;
}

Swift::Int sub_24A0A115C()
{
  return sub_24A0A1168();
}

Swift::Int sub_24A0A1168()
{
  return Hasher._finalize()();
}

uint64_t sub_24A0A11C8(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_24A0A80A8();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

Swift::Int sub_24A0A1214()
{
  return sub_24A0A1220();
}

Swift::Int sub_24A0A1220()
{
  return Hasher._finalize()();
}

BOOL sub_24A0A127C(uint64_t a1, uint64_t a2)
{
  return sub_24A0AB1E8(*(void *)a1, *(unsigned char *)(a1 + 8), *(void *)a2, *(unsigned char *)(a2 + 8));
}

uint64_t sub_24A0A1298@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0;
  type metadata accessor for CloudAssets_Signal.Event(0);
  return UnknownStorage.init()();
}

uint64_t sub_24A0A12DC@<X0>(void *a1@<X8>)
{
  *a1 = MEMORY[0x263F8EE78];
  type metadata accessor for CloudAssets_Signal(0);
  return UnknownStorage.init()();
}

uint64_t sub_24A0A131C@<X0>(void *a1@<X8>)
{
  sub_24A0AAF10(a1);
  type metadata accessor for CloudAssets_AssetStreamHandle(0);
  UnknownStorage.init()();
  uint64_t v1 = type metadata accessor for CloudAssets_Asset(0);
  sub_24A0AB164(v1);
  type metadata accessor for CloudAssets_Credential(0);
  uint64_t v2 = sub_24A0AAE90();
  return _s10CloudAsset21UploadResponseMessageOwst_0(v2, v3, v4, v5);
}

uint64_t sub_24A0A1394()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_24A0A8044(v0, qword_269769F38);
  sub_24A0A800C(v0, (uint64_t)qword_269769F38);
  sub_24A08DF34(&qword_26975D878);
  uint64_t v1 = (int *)(sub_24A08DF34(&qword_26975D880) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_24A0E7E20;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "id";
  *(void *)(v6 + 8) = 2;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "protector";
  *((void *)v10 + 1) = 9;
  v10[16] = 2;
  v9();
  unint64_t v11 = (void *)((char *)v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *unint64_t v11 = 3;
  *(void *)uint64_t v12 = "size";
  *((void *)v12 + 1) = 4;
  v12[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_24A0A1588()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    switch(result)
    {
      case 3:
        dispatch thunk of Decoder.decodeSingularInt64Field(value:)();
        break;
      case 2:
        sub_24A0AAD70();
        sub_24A0A16D8();
        break;
      case 1:
        sub_24A0AAD70();
        sub_24A0A1628();
        break;
    }
  }
  return result;
}

uint64_t sub_24A0A1628()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t sub_24A0A16D8()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t sub_24A0A1788()
{
  uint64_t v2 = sub_24A0AAEEC();
  uint64_t result = sub_24A0A1814(v2);
  if (!v0)
  {
    uint64_t v4 = sub_24A0AB018();
    sub_24A0A19E0(v4);
    if (*v1) {
      dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)();
    }
    type metadata accessor for CloudAssets_Asset(0);
    return sub_24A0AAFF4();
  }
  return result;
}

uint64_t sub_24A0A1814(uint64_t a1)
{
  uint64_t v2 = sub_24A08DF34(&qword_26975D4F8);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CloudAssets_Asset.ID(0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CloudAssets_Asset(0);
  sub_24A0A80F4(a1 + *(int *)(v8 + 24), (uint64_t)v4, &qword_26975D4F8);
  if (_s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v4, 1, v5) == 1) {
    return sub_24A096620((uint64_t)v4, &qword_26975D4F8);
  }
  sub_24A0A7FAC((uint64_t)v4, (uint64_t)v7, (void (*)(void))type metadata accessor for CloudAssets_Asset.ID);
  sub_24A0A76D4(&qword_26975D408, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset.ID);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_24A09FA68((uint64_t)v7, (void (*)(void))type metadata accessor for CloudAssets_Asset.ID);
}

uint64_t sub_24A0A19E0(uint64_t a1)
{
  uint64_t v2 = sub_24A08DF34(&qword_26975D500);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CloudAssets_Asset.Protector(0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CloudAssets_Asset(0);
  sub_24A0A80F4(a1 + *(int *)(v8 + 28), (uint64_t)v4, &qword_26975D500);
  if (_s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v4, 1, v5) == 1) {
    return sub_24A096620((uint64_t)v4, &qword_26975D500);
  }
  sub_24A0A7FAC((uint64_t)v4, (uint64_t)v7, (void (*)(void))type metadata accessor for CloudAssets_Asset.Protector);
  sub_24A0A76D4(&qword_26975D438, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset.Protector);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_24A09FA68((uint64_t)v7, (void (*)(void))type metadata accessor for CloudAssets_Asset.Protector);
}

void sub_24A0A1BAC()
{
  sub_24A0AAFDC();
  long long v73 = v2;
  uint64_t v4 = (char *)v3;
  type metadata accessor for UnknownStorage();
  sub_24A08F24C();
  uint64_t v62 = v6;
  uint64_t v63 = v5;
  MEMORY[0x270FA5388](v5);
  sub_24A093E2C();
  uint64_t v61 = v7;
  sub_24A09C014();
  MEMORY[0x270FA5388](v8);
  uint64_t v60 = (char *)&v60 - v9;
  uint64_t v10 = sub_24A093CF0();
  uint64_t v69 = type metadata accessor for CloudAssets_Asset.Protector(v10);
  sub_24A08F280();
  MEMORY[0x270FA5388](v11);
  sub_24A08F2E0();
  unint64_t v64 = (void *)v12;
  uint64_t v66 = sub_24A08DF34(&qword_26975D888);
  sub_24A08F280();
  MEMORY[0x270FA5388](v13);
  sub_24A08F2E0();
  uint64_t v70 = v14;
  uint64_t v15 = sub_24A08DF34(&qword_26975D500);
  uint64_t v16 = sub_24A093C88(v15);
  MEMORY[0x270FA5388](v16);
  sub_24A093E2C();
  uint64_t v65 = (void *)v17;
  sub_24A09C014();
  MEMORY[0x270FA5388](v18);
  uint64_t v67 = (uint64_t)&v60 - v19;
  sub_24A09C014();
  MEMORY[0x270FA5388](v20);
  uint64_t v68 = (uint64_t)&v60 - v21;
  uint64_t v22 = sub_24A093CF0();
  type metadata accessor for CloudAssets_Asset.ID(v22);
  sub_24A08F280();
  MEMORY[0x270FA5388](v23);
  sub_24A0AAED4();
  uint64_t v24 = sub_24A08DF34(&qword_26975D890);
  uint64_t v25 = v24 - 8;
  MEMORY[0x270FA5388](v24);
  sub_24A08F2C8();
  uint64_t v26 = sub_24A08DF34(&qword_26975D4F8);
  uint64_t v27 = sub_24A093C88(v26);
  uint64_t v28 = MEMORY[0x270FA5388](v27);
  uint64_t v30 = (char *)&v60 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = MEMORY[0x270FA5388](v28);
  uint64_t v33 = (char *)&v60 - v32;
  MEMORY[0x270FA5388](v31);
  uint64_t v35 = (char *)&v60 - v34;
  uint64_t v36 = type metadata accessor for CloudAssets_Asset(0);
  uint64_t v37 = *(int *)(v36 + 24);
  unint64_t v71 = v4;
  sub_24A0A80F4((uint64_t)&v4[v37], (uint64_t)v35, &qword_26975D4F8);
  uint64_t v72 = v36;
  sub_24A0A80F4((uint64_t)&v73[*(int *)(v36 + 24)], (uint64_t)v33, &qword_26975D4F8);
  uint64_t v38 = v0 + *(int *)(v25 + 56);
  sub_24A0A80F4((uint64_t)v35, v0, &qword_26975D4F8);
  sub_24A0A80F4((uint64_t)v33, v38, &qword_26975D4F8);
  sub_24A0AADB8(v0);
  if (v39)
  {
    sub_24A096620((uint64_t)v33, &qword_26975D4F8);
    sub_24A096620((uint64_t)v35, &qword_26975D4F8);
    sub_24A0AADB8(v38);
    if (v39)
    {
      sub_24A096620(v0, &qword_26975D4F8);
      goto LABEL_11;
    }
LABEL_9:
    uint64_t v40 = &qword_26975D890;
    uint64_t v41 = v0;
    goto LABEL_27;
  }
  sub_24A0A80F4(v0, (uint64_t)v30, &qword_26975D4F8);
  sub_24A0AADB8(v38);
  if (v39)
  {
    sub_24A096620((uint64_t)v33, &qword_26975D4F8);
    sub_24A096620((uint64_t)v35, &qword_26975D4F8);
    sub_24A09FA68((uint64_t)v30, (void (*)(void))type metadata accessor for CloudAssets_Asset.ID);
    goto LABEL_9;
  }
  sub_24A0A7FAC(v38, v1, (void (*)(void))type metadata accessor for CloudAssets_Asset.ID);
  sub_24A0AB0D4();
  char v42 = sub_24A0A2A94();
  sub_24A09FA68(v1, (void (*)(void))type metadata accessor for CloudAssets_Asset.ID);
  sub_24A096620((uint64_t)v33, &qword_26975D4F8);
  sub_24A096620((uint64_t)v35, &qword_26975D4F8);
  sub_24A09FA68((uint64_t)v30, (void (*)(void))type metadata accessor for CloudAssets_Asset.ID);
  sub_24A096620(v0, &qword_26975D4F8);
  if ((v42 & 1) == 0) {
    goto LABEL_28;
  }
LABEL_11:
  uint64_t v44 = v71;
  uint64_t v43 = v72;
  uint64_t v45 = v68;
  sub_24A0A80F4((uint64_t)&v71[*(int *)(v72 + 28)], v68, &qword_26975D500);
  uint64_t v46 = v73;
  uint64_t v47 = v67;
  sub_24A0A80F4((uint64_t)&v73[*(int *)(v43 + 28)], v67, &qword_26975D500);
  uint64_t v48 = v70;
  uint64_t v49 = v70 + *(int *)(v66 + 48);
  sub_24A0A80F4(v45, v70, &qword_26975D500);
  sub_24A0A80F4(v47, v49, &qword_26975D500);
  uint64_t v50 = v69;
  sub_24A0AAE14(v48, 1, v69);
  if (!v39)
  {
    uint64_t v56 = v65;
    sub_24A0A80F4(v48, (uint64_t)v65, &qword_26975D500);
    sub_24A0AAE14(v49, 1, v50);
    if (!v57)
    {
      unint64_t v58 = v64;
      sub_24A0A7FAC(v49, (uint64_t)v64, (void (*)(void))type metadata accessor for CloudAssets_Asset.Protector);
      if ((MEMORY[0x24C5BAD10](*v56, v56[1], *v58, v58[1]) & 1) != 0
        && (MEMORY[0x24C5BAD10](v56[2], v56[3], v58[2], v58[3]) & 1) != 0)
      {
        sub_24A0A76D4(&qword_26975D898, MEMORY[0x263F50560]);
        sub_24A093C7C();
        char v59 = dispatch thunk of static Equatable.== infix(_:_:)();
        sub_24A09FA68((uint64_t)v58, (void (*)(void))type metadata accessor for CloudAssets_Asset.Protector);
        sub_24A096620(v47, &qword_26975D500);
        sub_24A096620(v45, &qword_26975D500);
        sub_24A09FA68((uint64_t)v56, (void (*)(void))type metadata accessor for CloudAssets_Asset.Protector);
        sub_24A096620(v48, &qword_26975D500);
        if ((v59 & 1) == 0) {
          goto LABEL_28;
        }
        goto LABEL_16;
      }
      sub_24A09FA68((uint64_t)v58, (void (*)(void))type metadata accessor for CloudAssets_Asset.Protector);
      sub_24A096620(v47, &qword_26975D500);
      sub_24A096620(v45, &qword_26975D500);
      sub_24A09FA68((uint64_t)v56, (void (*)(void))type metadata accessor for CloudAssets_Asset.Protector);
      uint64_t v41 = v48;
      uint64_t v40 = &qword_26975D500;
LABEL_27:
      sub_24A096620(v41, v40);
      goto LABEL_28;
    }
    sub_24A096620(v47, &qword_26975D500);
    sub_24A096620(v45, &qword_26975D500);
    sub_24A09FA68((uint64_t)v56, (void (*)(void))type metadata accessor for CloudAssets_Asset.Protector);
LABEL_21:
    uint64_t v40 = &qword_26975D888;
    uint64_t v41 = v48;
    goto LABEL_27;
  }
  sub_24A096620(v47, &qword_26975D500);
  sub_24A096620(v45, &qword_26975D500);
  sub_24A0AAE14(v49, 1, v50);
  if (!v39) {
    goto LABEL_21;
  }
  sub_24A096620(v48, &qword_26975D500);
LABEL_16:
  if (*(void *)v44 == *(void *)v46)
  {
    uint64_t v51 = v72;
    uint64_t v53 = v62;
    uint64_t v52 = v63;
    uint64_t v54 = *(void (**)(char *, char *, uint64_t))(v62 + 16);
    v54(v60, &v44[*(int *)(v72 + 20)], v63);
    v54(v61, &v46[*(int *)(v51 + 20)], v52);
    sub_24A0A76D4(&qword_26975D898, MEMORY[0x263F50560]);
    dispatch thunk of static Equatable.== infix(_:_:)();
    unint64_t v55 = *(void (**)(void))(v53 + 8);
    sub_24A0AB0F8();
    v55();
    sub_24A0AB0F8();
    v55();
  }
LABEL_28:
  sub_24A0AB030();
}

unint64_t sub_24A0A2348()
{
  return 0xD000000000000011;
}

uint64_t (*sub_24A0A2370())()
{
  return nullsub_1;
}

uint64_t sub_24A0A2394()
{
  return sub_24A0A1588();
}

uint64_t sub_24A0A23AC()
{
  return sub_24A0A1788();
}

uint64_t sub_24A0A23C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A0A76D4(&qword_26975D850, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_24A0A2448(uint64_t a1, uint64_t a2)
{
  return sub_24A0A2E08(a1, a2, &qword_26975D2B8, (uint64_t)qword_269769F38);
}

uint64_t sub_24A0A246C(uint64_t a1)
{
  uint64_t v2 = sub_24A0A76D4(&qword_26975D458, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset);
  return MEMORY[0x270F44CC0](a1, v2);
}

Swift::Int sub_24A0A24D8()
{
  return sub_24A0A725C((void (*)(void))type metadata accessor for CloudAssets_Asset, &qword_26975D808, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset);
}

uint64_t sub_24A0A2534()
{
  sub_24A0A76D4(&qword_26975D458, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset);
  return Message.hash(into:)();
}

void sub_24A0A25B8(int a1)
{
  v1._countAndFlagsBits = 4475182;
  v1._object = (void *)0xE300000000000000;
  sub_24A0A2FE8(a1, v1, qword_269769F50, &qword_269769F50[1]);
}

void *sub_24A0A25D4()
{
  if (qword_26975D2C0 != -1) {
    swift_once();
  }
  return qword_269769F50;
}

uint64_t sub_24A0A2620()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_24A0A8044(v0, qword_269769F60);
  sub_24A0A800C(v0, (uint64_t)qword_269769F60);
  sub_24A08DF34(&qword_26975D878);
  Swift::String v1 = (int *)(sub_24A08DF34(&qword_26975D880) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_24A0E7E30;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "partition";
  *(void *)(v6 + 8) = 9;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "owner_id";
  *(void *)(v10 + 8) = 8;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "signature";
  *((void *)v12 + 1) = 9;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "reference_signature";
  *((void *)v14 + 1) = 19;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_24A0A2860()
{
  uint64_t result = sub_24A0AAD48();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 3:
        case 4:
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
          break;
        default:
          break;
      }
      uint64_t result = sub_24A0AAF40();
    }
  }
  return result;
}

uint64_t sub_24A0A2930()
{
  sub_24A0AB1C0();
  sub_24A0AADA4();
  if (!v3 || (v0 = v1, uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    sub_24A0AADA4();
    if (!v5 || (v0 = v1, uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    {
      if (sub_24A0AB0E0() || (v6 = sub_24A0AB0D4(), uint64_t result = sub_24A0AAF64(v6, v7, 3), !v0))
      {
        uint64_t v8 = *(void *)(v2 + 48);
        uint64_t v9 = *(void *)(v2 + 56);
        if (sub_24A0AB0E0() || (uint64_t result = sub_24A0AAF64(v8, v9, 4), !v0))
        {
          type metadata accessor for CloudAssets_Asset.ID(0);
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  return result;
}

BOOL sub_24A0A2A30(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v3 = (int)a1;
      uint64_t v2 = a1 >> 32;
      break;
    case 2uLL:
      uint64_t v3 = *(void *)(a1 + 16);
      uint64_t v2 = *(void *)(a1 + 24);
      break;
    case 3uLL:
      return v3 == v2;
    default:
      uint64_t v3 = 0;
      uint64_t v2 = BYTE6(a2);
      break;
  }
  return v3 == v2;
}

uint64_t sub_24A0A2A94()
{
  sub_24A0AAF24();
  sub_24A08F24C();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  sub_24A0AADD8();
  MEMORY[0x270FA5388](v6);
  uint64_t v7 = sub_24A0AB08C();
  BOOL v11 = v7 == v10 && v8 == v9;
  if (v11 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    BOOL v13 = v1[2] == v0[2] && v1[3] == v0[3];
    if (v13 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      if ((MEMORY[0x24C5BAD10](v1[4], v1[5], v0[4], v0[5]) & 1) != 0
        && (MEMORY[0x24C5BAD10](v1[6], v1[7], v0[6], v0[7]) & 1) != 0)
      {
        type metadata accessor for CloudAssets_Asset.ID(0);
        uint64_t v14 = sub_24A0AAD84();
        ((void (*)(uint64_t))v2)(v14);
        sub_24A0AAE04();
        v2();
        sub_24A0A76D4(&qword_26975D898, MEMORY[0x263F50560]);
        char v12 = sub_24A0AAEA4();
        uint64_t v15 = *(void (**)(void))(v4 + 8);
        sub_24A0AADF4();
        v15();
        sub_24A0AADF4();
        v15();
      }
      else
      {
        char v12 = 0;
      }
    }
  }
  return v12 & 1;
}

uint64_t sub_24A0A2C10(uint64_t a1, uint64_t a2)
{
  return sub_24A0A60C8(a1, a2, (void (*)(void))sub_24A0A25D4, qword_269769F50);
}

uint64_t sub_24A0A2C34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t sub_24A0A2CA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*sub_24A0A2D14())()
{
  return nullsub_1;
}

uint64_t sub_24A0A2D38()
{
  return sub_24A0A2860();
}

uint64_t sub_24A0A2D50()
{
  return sub_24A0A2930();
}

uint64_t sub_24A0A2D68(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A0A76D4(&qword_26975D840, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset.ID);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_24A0A2DE4(uint64_t a1, uint64_t a2)
{
  return sub_24A0A2E08(a1, a2, &qword_26975D2C8, (uint64_t)qword_269769F60);
}

uint64_t sub_24A0A2E08(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  sub_24A0A6554(a3, a4);
  type metadata accessor for _NameMap();
  sub_24A08F280();
  uint64_t v4 = sub_24A093C7C();
  return v5(v4);
}

uint64_t sub_24A0A2E78(uint64_t a1)
{
  uint64_t v2 = sub_24A0A76D4(&qword_26975D408, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset.ID);
  return MEMORY[0x270F44CC0](a1, v2);
}

Swift::Int sub_24A0A2EE4()
{
  return sub_24A0A725C((void (*)(void))type metadata accessor for CloudAssets_Asset.ID, &qword_26975D7F8, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset.ID);
}

uint64_t sub_24A0A2F40()
{
  sub_24A0A76D4(&qword_26975D408, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset.ID);
  return Message.hash(into:)();
}

void sub_24A0A2FC0(int a1)
{
  v1._countAndFlagsBits = 0x746365746F72502ELL;
  v1._object = (void *)0xEA0000000000726FLL;
  sub_24A0A2FE8(a1, v1, qword_269769F78, &qword_269769F78[1]);
}

void sub_24A0A2FE8(int a1, Swift::String a2, void *a3, void *a4)
{
  *a3 = 0xD000000000000011;
  *a4 = 0x800000024A0EE880;
}

void *sub_24A0A3054()
{
  if (qword_26975D2D0 != -1) {
    swift_once();
  }
  return qword_269769F78;
}

uint64_t sub_24A0A30A0()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_24A0A8044(v0, qword_269769F88);
  sub_24A0A800C(v0, (uint64_t)qword_269769F88);
  sub_24A08DF34(&qword_26975D878);
  Swift::String v1 = (int *)(sub_24A08DF34(&qword_26975D880) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_24A0E7E40;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "security_key";
  *(void *)(v6 + 8) = 12;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "privacy_key";
  *((void *)v10 + 1) = 11;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_24A0A3258()
{
  uint64_t result = sub_24A0AAD48();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2 || result == 1) {
        dispatch thunk of Decoder.decodeSingularBytesField(value:)();
      }
      uint64_t result = sub_24A0AAF40();
    }
  }
  return result;
}

uint64_t sub_24A0A32CC()
{
  uint64_t v2 = *v0;
  unint64_t v3 = v0[1];
  switch(v3 >> 62)
  {
    case 1uLL:
      uint64_t v4 = (int)v2;
      uint64_t v5 = v2 >> 32;
      goto LABEL_6;
    case 2uLL:
      uint64_t v4 = *(void *)(v2 + 16);
      uint64_t v5 = *(void *)(v2 + 24);
LABEL_6:
      if (v4 != v5) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 3uLL:
      goto LABEL_8;
    default:
      if ((v3 & 0xFF000000000000) == 0) {
        goto LABEL_8;
      }
LABEL_7:
      uint64_t result = sub_24A0AB104(v2, v3, 1);
      if (!v1)
      {
LABEL_8:
        uint64_t v7 = v0[2];
        unint64_t v8 = v0[3];
        switch(v8 >> 62)
        {
          case 1uLL:
            uint64_t v9 = (int)v7;
            uint64_t v10 = v7 >> 32;
            goto LABEL_13;
          case 2uLL:
            uint64_t v9 = *(void *)(v7 + 16);
            uint64_t v10 = *(void *)(v7 + 24);
LABEL_13:
            if (v9 != v10) {
              goto LABEL_14;
            }
            goto LABEL_15;
          case 3uLL:
            goto LABEL_15;
          default:
            if ((v8 & 0xFF000000000000) == 0) {
              goto LABEL_15;
            }
LABEL_14:
            uint64_t result = sub_24A0AB104(v7, v8, 2);
            if (!v1)
            {
LABEL_15:
              type metadata accessor for CloudAssets_Asset.Protector(0);
              uint64_t result = sub_24A0AAFB4();
            }
            break;
        }
      }
      return result;
  }
}

uint64_t sub_24A0A33F8()
{
  sub_24A0AAF24();
  sub_24A08F24C();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  sub_24A0AADD8();
  MEMORY[0x270FA5388](v6);
  uint64_t v7 = sub_24A0AB08C();
  if ((MEMORY[0x24C5BAD10](v7) & 1) != 0
    && (MEMORY[0x24C5BAD10](*(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v0 + 16), *(void *)(v0 + 24)) & 1) != 0)
  {
    type metadata accessor for CloudAssets_Asset.Protector(0);
    uint64_t v8 = sub_24A0AAD84();
    ((void (*)(uint64_t))v2)(v8);
    sub_24A0AAE04();
    v2();
    sub_24A0A76D4(&qword_26975D898, MEMORY[0x263F50560]);
    char v9 = sub_24A0AAEA4();
    uint64_t v10 = *(void (**)(void))(v4 + 8);
    sub_24A0AADF4();
    v10();
    sub_24A0AADF4();
    v10();
  }
  else
  {
    char v9 = 0;
  }
  return v9 & 1;
}

uint64_t sub_24A0A352C(uint64_t a1, uint64_t a2)
{
  return sub_24A0A60C8(a1, a2, (void (*)(void))sub_24A0A3054, qword_269769F78);
}

uint64_t (*sub_24A0A3558())()
{
  return nullsub_1;
}

uint64_t sub_24A0A357C()
{
  return sub_24A0A3258();
}

uint64_t sub_24A0A3594()
{
  return sub_24A0A32CC();
}

uint64_t sub_24A0A35AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A0A76D4(&qword_26975D848, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset.Protector);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_24A0A3628(uint64_t a1, uint64_t a2)
{
  return sub_24A0A2E08(a1, a2, &qword_26975D2D8, (uint64_t)qword_269769F88);
}

uint64_t sub_24A0A364C(uint64_t a1)
{
  uint64_t v2 = sub_24A0A76D4(&qword_26975D438, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset.Protector);
  return MEMORY[0x270F44CC0](a1, v2);
}

Swift::Int sub_24A0A36B8()
{
  return sub_24A0A725C((void (*)(void))type metadata accessor for CloudAssets_Asset.Protector, &qword_26975D7E8, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset.Protector);
}

uint64_t sub_24A0A3714()
{
  sub_24A0A76D4(&qword_26975D438, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset.Protector);
  return Message.hash(into:)();
}

uint64_t sub_24A0A3794()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_24A0A8044(v0, qword_269769FA0);
  sub_24A0A800C(v0, (uint64_t)qword_269769FA0);
  sub_24A08DF34(&qword_26975D878);
  uint64_t v1 = (int *)(sub_24A08DF34(&qword_26975D880) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_24A0E7E30;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "tenant_name";
  *(void *)(v6 + 8) = 11;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "requestor_id";
  *(void *)(v10 + 8) = 12;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  BOOL v11 = (void *)(v5 + 2 * v2);
  char v12 = (char *)v11 + v1[14];
  *BOOL v11 = 3;
  *(void *)char v12 = "access_token";
  *((void *)v12 + 1) = 12;
  v12[16] = 2;
  v9();
  BOOL v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "expiration_date";
  *((void *)v14 + 1) = 15;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_24A0A39C4()
{
  uint64_t result = sub_24A0AAD48();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 4:
          sub_24A0AAD70();
          sub_24A0A3A80();
          break;
        default:
          break;
      }
      uint64_t result = sub_24A0AAF40();
    }
  }
  return result;
}

uint64_t sub_24A0A3A80()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t sub_24A0A3B30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v4;
  uint64_t v6 = v3;
  sub_24A0AADA4();
  if (!v10 || (uint64_t result = sub_24A0AB0A4(), (v5 = v4) == 0))
  {
    sub_24A0AADA4();
    if (!v12 || (uint64_t result = sub_24A0AB0A4(), (v5 = v4) == 0))
    {
      sub_24A0AADA4();
      if (!v13 || (uint64_t result = sub_24A0AB0A4(), (v5 = v4) == 0))
      {
        uint64_t result = sub_24A0A3C14(v6, a1, a2, a3);
        if (!v5)
        {
          type metadata accessor for CloudAssets_Credential(0);
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  return result;
}

uint64_t sub_24A0A3C14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_24A08DF34(&qword_26975D560);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Google_Protobuf_Timestamp();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  BOOL v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CloudAssets_Credential(0);
  sub_24A0A80F4(a1 + *(int *)(v12 + 32), (uint64_t)v7, &qword_26975D560);
  if (_s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v7, 1, v8) == 1) {
    return sub_24A096620((uint64_t)v7, &qword_26975D560);
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
  sub_24A0A76D4(&qword_26975D870, MEMORY[0x263F502F0]);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

void sub_24A0A3E08()
{
  sub_24A0AAFDC();
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  type metadata accessor for UnknownStorage();
  sub_24A08F24C();
  uint64_t v47 = v8;
  uint64_t v48 = v7;
  MEMORY[0x270FA5388](v7);
  sub_24A093E2C();
  uint64_t v46 = v9;
  sub_24A09C014();
  MEMORY[0x270FA5388](v10);
  uint64_t v45 = &v41[-v11];
  sub_24A093CF0();
  uint64_t v12 = type metadata accessor for Google_Protobuf_Timestamp();
  sub_24A08F24C();
  uint64_t v49 = v13;
  MEMORY[0x270FA5388](v14);
  sub_24A0AAED4();
  uint64_t v15 = sub_24A08DF34(&qword_26975D8A0);
  sub_24A08F280();
  MEMORY[0x270FA5388](v16);
  sub_24A093D9C();
  uint64_t v17 = sub_24A08DF34(&qword_26975D560);
  uint64_t v18 = sub_24A093C88(v17);
  MEMORY[0x270FA5388](v18);
  sub_24A0AAF98();
  uint64_t v20 = MEMORY[0x270FA5388](v19);
  uint64_t v22 = &v41[-v21];
  MEMORY[0x270FA5388](v20);
  uint64_t v24 = &v41[-v23];
  BOOL v25 = *v6 == *v4 && v6[1] == v4[1];
  if (!v25 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    goto LABEL_27;
  }
  BOOL v26 = v6[2] == v4[2] && v6[3] == v4[3];
  if (!v26 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    goto LABEL_27;
  }
  BOOL v27 = v6[4] == v4[4] && v6[5] == v4[5];
  if (!v27 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    goto LABEL_27;
  }
  uint64_t v43 = v1;
  uint64_t v28 = type metadata accessor for CloudAssets_Credential(0);
  sub_24A0A80F4((uint64_t)v6 + *(int *)(v28 + 32), (uint64_t)v24, &qword_26975D560);
  uint64_t v44 = v28;
  sub_24A0A80F4((uint64_t)v4 + *(int *)(v28 + 32), (uint64_t)v22, &qword_26975D560);
  uint64_t v29 = v0 + *(int *)(v15 + 48);
  sub_24A0A80F4((uint64_t)v24, v0, &qword_26975D560);
  sub_24A0A80F4((uint64_t)v22, v29, &qword_26975D560);
  sub_24A0AAE14(v0, 1, v12);
  if (v25)
  {
    sub_24A096620((uint64_t)v22, &qword_26975D560);
    sub_24A096620((uint64_t)v24, &qword_26975D560);
    sub_24A0AAE14(v29, 1, v12);
    if (v25)
    {
      sub_24A096620(v0, &qword_26975D560);
LABEL_26:
      uint64_t v35 = v45;
      uint64_t v37 = v47;
      uint64_t v36 = v48;
      uint64_t v38 = *(void (**)(void))(v47 + 16);
      sub_24A0AAE54();
      v38();
      uint64_t v39 = v46;
      sub_24A0AAE54();
      v38();
      sub_24A0A76D4(&qword_26975D898, MEMORY[0x263F50560]);
      dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v40 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
      v40(v39, v36);
      v40((uint64_t)v35, v36);
      goto LABEL_27;
    }
    goto LABEL_24;
  }
  sub_24A0A80F4(v0, v2, &qword_26975D560);
  sub_24A0AAE14(v29, 1, v12);
  if (v30)
  {
    sub_24A096620((uint64_t)v22, &qword_26975D560);
    sub_24A096620((uint64_t)v24, &qword_26975D560);
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v2, v12);
LABEL_24:
    sub_24A096620(v0, &qword_26975D8A0);
    goto LABEL_27;
  }
  uint64_t v31 = v49;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 32))(v43, v29, v12);
  sub_24A0A76D4(&qword_26975D8A8, MEMORY[0x263F502F0]);
  int v42 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v32 = *(void (**)(void))(v31 + 8);
  sub_24A0AB19C();
  v32();
  sub_24A096620((uint64_t)v22, &qword_26975D560);
  sub_24A096620((uint64_t)v24, &qword_26975D560);
  sub_24A0AB19C();
  v32();
  uint64_t v33 = sub_24A0AB0D4();
  sub_24A096620(v33, v34);
  if (v42) {
    goto LABEL_26;
  }
LABEL_27:
  sub_24A0AB030();
}

unint64_t sub_24A0A42C0()
{
  return 0xD000000000000016;
}

uint64_t (*sub_24A0A42E4())()
{
  return nullsub_1;
}

uint64_t sub_24A0A4308()
{
  return sub_24A0A39C4();
}

uint64_t sub_24A0A4320(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24A0A3B30(a1, a2, a3);
}

uint64_t sub_24A0A4338(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A0A76D4(&qword_26975D868, (void (*)(uint64_t))type metadata accessor for CloudAssets_Credential);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_24A0A43B4(uint64_t a1, uint64_t a2)
{
  return sub_24A0A2E08(a1, a2, &qword_26975D2E0, (uint64_t)qword_269769FA0);
}

uint64_t sub_24A0A43D8(uint64_t a1)
{
  uint64_t v2 = sub_24A0A76D4(&qword_26975D7D0, (void (*)(uint64_t))type metadata accessor for CloudAssets_Credential);
  return MEMORY[0x270F44CC0](a1, v2);
}

Swift::Int sub_24A0A4444()
{
  return sub_24A0A725C((void (*)(void))type metadata accessor for CloudAssets_Credential, &qword_26975D7D8, (void (*)(uint64_t))type metadata accessor for CloudAssets_Credential);
}

uint64_t sub_24A0A44A0()
{
  sub_24A0A76D4(&qword_26975D7D0, (void (*)(uint64_t))type metadata accessor for CloudAssets_Credential);
  return Message.hash(into:)();
}

uint64_t sub_24A0A4520()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_24A0A8044(v0, qword_269769FB8);
  sub_24A0A800C(v0, (uint64_t)qword_269769FB8);
  sub_24A08DF34(&qword_26975D878);
  uint64_t v1 = (int *)(sub_24A08DF34(&qword_26975D880) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_24A0E7E30;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "assets";
  *(void *)(v6 + 8) = 6;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "storage_reference";
  *(void *)(v10 + 8) = 17;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "credential";
  *((void *)v12 + 1) = 10;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "storage_reference_signature";
  *((void *)v14 + 1) = 27;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_24A0A4760()
{
  uint64_t result = sub_24A0AAD48();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          uint64_t v5 = sub_24A0AAD70();
          sub_24A0A53AC(v5, v6, v7, v8, v9, &qword_26975D458, v10);
          break;
        case 2:
        case 4:
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
          break;
        case 3:
          sub_24A0AB144(result, v2, v3, v4, (void (*)(void))type metadata accessor for CloudAssets_SimultaneousDownloadableAssets);
          break;
        default:
          break;
      }
      uint64_t result = sub_24A0AAF40();
    }
  }
  return result;
}

uint64_t sub_24A0A4884(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t sub_24A0A4938()
{
  sub_24A0AB1C0();
  uint64_t v7 = v6;
  if (!*(void *)(*(void *)v1 + 16)
    || (type metadata accessor for CloudAssets_Asset(0),
        sub_24A0A76D4(&qword_26975D458, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset),
        sub_24A0AB048(),
        uint64_t v2 = v4,
        uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(),
        !v4))
  {
    if (sub_24A0AB0E0() || (v9 = sub_24A0AB0D4(), uint64_t result = sub_24A0AAF64(v9, v10, 2), (v4 = v2) == 0))
    {
      uint64_t result = sub_24A0A69AC(v5, v7, v3, v0, type metadata accessor for CloudAssets_SimultaneousDownloadableAssets);
      if (!v4)
      {
        uint64_t v11 = *(void *)(v5 + 24);
        uint64_t v12 = *(void *)(v5 + 32);
        if (!sub_24A0AB0E0()) {
          sub_24A0AAF64(v11, v12, 4);
        }
        type metadata accessor for CloudAssets_SimultaneousDownloadableAssets(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

#error "24A0A4BF8: call analysis failed (funcsize=259)"

unint64_t sub_24A0A4ECC()
{
  return 0xD00000000000002ALL;
}

uint64_t sub_24A0A4EE8()
{
  sub_24A0AAF80();
  sub_24A08F280();
  uint64_t v0 = sub_24A093C7C();
  return v1(v0);
}

uint64_t sub_24A0A4F44()
{
  sub_24A0AAF80();
  sub_24A08F280();
  uint64_t v0 = sub_24A0AB07C();
  return v1(v0);
}

uint64_t sub_24A0A4F9C()
{
  return sub_24A0A4760();
}

uint64_t sub_24A0A4FB4()
{
  return sub_24A0A4938();
}

uint64_t sub_24A0A4FCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A0A76D4(&qword_26975D858, (void (*)(uint64_t))type metadata accessor for CloudAssets_SimultaneousDownloadableAssets);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_24A0A5048(uint64_t a1, uint64_t a2)
{
  return sub_24A0A2E08(a1, a2, &qword_26975D2E8, (uint64_t)qword_269769FB8);
}

uint64_t sub_24A0A506C(uint64_t a1)
{
  uint64_t v2 = sub_24A0A76D4(&qword_26975D518, (void (*)(uint64_t))type metadata accessor for CloudAssets_SimultaneousDownloadableAssets);
  return MEMORY[0x270F44CC0](a1, v2);
}

Swift::Int sub_24A0A50D8()
{
  return sub_24A0A725C((void (*)(void))type metadata accessor for CloudAssets_SimultaneousDownloadableAssets, &qword_26975D7C0, (void (*)(uint64_t))type metadata accessor for CloudAssets_SimultaneousDownloadableAssets);
}

uint64_t sub_24A0A5134()
{
  sub_24A0A76D4(&qword_26975D518, (void (*)(uint64_t))type metadata accessor for CloudAssets_SimultaneousDownloadableAssets);
  return Message.hash(into:)();
}

uint64_t sub_24A0A51B4()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_24A0A8044(v0, qword_269769FD0);
  sub_24A0A800C(v0, (uint64_t)qword_269769FD0);
  sub_24A08DF34(&qword_26975D878);
  uint64_t v1 = (int *)(sub_24A08DF34(&qword_26975D880) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_24A0E75F0;
  unint64_t v4 = v3 + v2 + v1[14];
  *(void *)(v3 + v2) = 1;
  *(void *)unint64_t v4 = "events";
  *(void *)(v4 + 8) = 6;
  *(unsigned char *)(v4 + 16) = 2;
  uint64_t v5 = *MEMORY[0x263F50718];
  uint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 104))(v4, v5, v6);
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_24A0A5310()
{
  uint64_t result = sub_24A0AAD48();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 1)
      {
        uint64_t v3 = sub_24A0AAD70();
        sub_24A0A53AC(v3, v4, v5, v6, v7, &qword_26975D788, v8);
      }
      uint64_t result = sub_24A0AAF40();
    }
  }
  return result;
}

uint64_t sub_24A0A53AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), unint64_t *a6, void (*a7)(uint64_t))
{
  return dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
}

uint64_t sub_24A0A5448()
{
  sub_24A0AB0C0();
  if (!*(void *)(*(void *)v1 + 16)
    || (type metadata accessor for CloudAssets_Signal.Event(0),
        sub_24A0A76D4(&qword_26975D788, (void (*)(uint64_t))type metadata accessor for CloudAssets_Signal.Event), sub_24A0AB048(), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v0))
  {
    type metadata accessor for CloudAssets_Signal(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t sub_24A0A5518()
{
  sub_24A0AAF24();
  sub_24A08F24C();
  uint64_t v2 = v1;
  MEMORY[0x270FA5388](v3);
  sub_24A0AADD8();
  MEMORY[0x270FA5388](v4);
  sub_24A0AFAF8();
  if (v5)
  {
    type metadata accessor for CloudAssets_Signal(0);
    uint64_t v6 = sub_24A0AAD84();
    ((void (*)(uint64_t))v0)(v6);
    sub_24A0AAE04();
    v0();
    sub_24A0A76D4(&qword_26975D898, MEMORY[0x263F50560]);
    char v7 = sub_24A0AAEA4();
    uint64_t v8 = *(void (**)(void))(v2 + 8);
    sub_24A0AADF4();
    v8();
    sub_24A0AADF4();
    v8();
  }
  else
  {
    char v7 = 0;
  }
  return v7 & 1;
}

unint64_t sub_24A0A564C()
{
  return 0xD000000000000012;
}

uint64_t sub_24A0A5668()
{
  sub_24A0AAF80();
  sub_24A08F280();
  uint64_t v0 = sub_24A093C7C();
  return v1(v0);
}

uint64_t sub_24A0A56C4()
{
  sub_24A0AAF80();
  sub_24A08F280();
  uint64_t v0 = sub_24A0AB07C();
  return v1(v0);
}

uint64_t sub_24A0A571C()
{
  return sub_24A0A5310();
}

uint64_t sub_24A0A5734()
{
  return sub_24A0A5448();
}

uint64_t sub_24A0A574C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A0A76D4(&qword_26975D860, (void (*)(uint64_t))type metadata accessor for CloudAssets_Signal);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_24A0A57C8(uint64_t a1, uint64_t a2)
{
  return sub_24A0A2E08(a1, a2, &qword_26975D2F0, (uint64_t)qword_269769FD0);
}

uint64_t sub_24A0A57EC(uint64_t a1)
{
  uint64_t v2 = sub_24A0A76D4((unint64_t *)&qword_26975D7A8, (void (*)(uint64_t))type metadata accessor for CloudAssets_Signal);
  return MEMORY[0x270F44CC0](a1, v2);
}

Swift::Int sub_24A0A5858()
{
  return sub_24A0A725C((void (*)(void))type metadata accessor for CloudAssets_Signal, &qword_26975D7B0, (void (*)(uint64_t))type metadata accessor for CloudAssets_Signal);
}

uint64_t sub_24A0A58B4()
{
  sub_24A0A76D4((unint64_t *)&qword_26975D7A8, (void (*)(uint64_t))type metadata accessor for CloudAssets_Signal);
  return Message.hash(into:)();
}

uint64_t sub_24A0A5934()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_24A0A8044(v0, qword_269769FE8);
  sub_24A0A800C(v0, (uint64_t)qword_269769FE8);
  sub_24A08DF34(&qword_26975D878);
  uint64_t v1 = (int *)(sub_24A08DF34(&qword_26975D880) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_24A0E7E40;
  char v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *char v5 = 0;
  *(void *)unint64_t v6 = "STORAGE_CONTAINER_UPLOAD_START";
  *(void *)(v6 + 8) = 30;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)uint64_t v10 = "ALL_UPLOADS_FINISH";
  *((void *)v10 + 1) = 18;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_24A0A5AEC(uint64_t a1, uint64_t a2)
{
  return sub_24A0A2E08(a1, a2, &qword_26975D2F8, (uint64_t)qword_269769FE8);
}

void sub_24A0A5B10()
{
  v0._countAndFlagsBits = 0x746E6576452ELL;
  v0._object = (void *)0xE600000000000000;
  String.append(_:)(v0);
  qword_26976A000 = 0xD000000000000012;
  *(void *)algn_26976A008 = 0x800000024A0EE8D0;
}

uint64_t *sub_24A0A5B78()
{
  if (qword_26975D300 != -1) {
    swift_once();
  }
  return &qword_26976A000;
}

uint64_t sub_24A0A5BC4()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_24A0A8044(v0, qword_26976A010);
  sub_24A0A800C(v0, (uint64_t)qword_26976A010);
  sub_24A08DF34(&qword_26975D878);
  uint64_t v1 = (int *)(sub_24A08DF34(&qword_26975D880) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_24A0E7E40;
  char v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *char v5 = 1;
  *(void *)unint64_t v6 = "type";
  *(void *)(v6 + 8) = 4;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "container_index";
  *((void *)v10 + 1) = 15;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_24A0A5D84()
{
  uint64_t result = sub_24A0AAD48();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        dispatch thunk of Decoder.decodeSingularInt64Field(value:)();
      }
      else if (result == 1)
      {
        sub_24A0AAD70();
        sub_24A0A5E00();
      }
      uint64_t result = sub_24A0AAF40();
    }
  }
  return result;
}

uint64_t sub_24A0A5E00()
{
  return dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
}

uint64_t sub_24A0A5E68()
{
  sub_24A0AB0C0();
  if (!*v1
    || (sub_24A0A80A8(), uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(), !v0))
  {
    if (!*(void *)(v2 + 16)
      || (uint64_t result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(), !v0))
    {
      type metadata accessor for CloudAssets_Signal.Event(0);
      return sub_24A0AAFB4();
    }
  }
  return result;
}

uint64_t sub_24A0A5F28()
{
  sub_24A0AAF24();
  sub_24A08F24C();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  sub_24A0AADD8();
  MEMORY[0x270FA5388](v6);
  uint64_t v7 = *v1;
  uint64_t v8 = *v0;
  if (*((unsigned char *)v1 + 8)) {
    uint64_t v7 = *v1 != 0;
  }
  if (*((unsigned char *)v0 + 8) == 1)
  {
    if (v8)
    {
      if (v7 != 1) {
        goto LABEL_12;
      }
    }
    else if (v7)
    {
LABEL_12:
      char v10 = 0;
      return v10 & 1;
    }
  }
  else if (v7 != v8)
  {
    goto LABEL_12;
  }
  if (v1[2] != v0[2]) {
    goto LABEL_12;
  }
  type metadata accessor for CloudAssets_Signal.Event(0);
  uint64_t v9 = sub_24A0AAD84();
  ((void (*)(uint64_t))v2)(v9);
  sub_24A0AAE04();
  v2();
  sub_24A0A76D4(&qword_26975D898, MEMORY[0x263F50560]);
  char v10 = sub_24A0AAEA4();
  uint64_t v11 = *(void (**)(void))(v4 + 8);
  sub_24A0AADF4();
  v11();
  sub_24A0AADF4();
  v11();
  return v10 & 1;
}

uint64_t sub_24A0A60A4(uint64_t a1, uint64_t a2)
{
  return sub_24A0A60C8(a1, a2, (void (*)(void))sub_24A0A5B78, &qword_26976A000);
}

uint64_t sub_24A0A60C8(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t *a4)
{
  a3();
  uint64_t v5 = *a4;
  swift_bridgeObjectRetain();
  return v5;
}

uint64_t sub_24A0A610C()
{
  return sub_24A0A5D84();
}

uint64_t sub_24A0A6124()
{
  return sub_24A0A5E68();
}

uint64_t sub_24A0A613C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A0A76D4(&qword_26975D8B8, (void (*)(uint64_t))type metadata accessor for CloudAssets_Signal.Event);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_24A0A61B8(uint64_t a1, uint64_t a2)
{
  return sub_24A0A2E08(a1, a2, &qword_26975D308, (uint64_t)qword_26976A010);
}

uint64_t sub_24A0A61DC(uint64_t a1)
{
  uint64_t v2 = sub_24A0A76D4(&qword_26975D788, (void (*)(uint64_t))type metadata accessor for CloudAssets_Signal.Event);
  return MEMORY[0x270F44CC0](a1, v2);
}

Swift::Int sub_24A0A6248()
{
  return sub_24A0A725C((void (*)(void))type metadata accessor for CloudAssets_Signal.Event, &qword_26975D790, (void (*)(uint64_t))type metadata accessor for CloudAssets_Signal.Event);
}

uint64_t sub_24A0A62A4()
{
  sub_24A0A76D4(&qword_26975D788, (void (*)(uint64_t))type metadata accessor for CloudAssets_Signal.Event);
  return Message.hash(into:)();
}

uint64_t sub_24A0A6324()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_24A0A8044(v0, qword_26976A028);
  sub_24A0A800C(v0, (uint64_t)qword_26976A028);
  sub_24A08DF34(&qword_26975D878);
  uint64_t v1 = (int *)(sub_24A08DF34(&qword_26975D880) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_24A0E7E30;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "asset";
  *(void *)(v6 + 8) = 5;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "credential";
  *(void *)(v10 + 8) = 10;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "type";
  *((void *)v12 + 1) = 4;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "applicationID";
  *((void *)v14 + 1) = 13;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_24A0A6554(void *a1, uint64_t a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for _NameMap();
  return sub_24A0A800C(v3, a2);
}

uint64_t sub_24A0A65A8()
{
  uint64_t result = sub_24A0AAD48();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          sub_24A0AAD70();
          sub_24A0A6678();
          break;
        case 2:
          sub_24A0AB144(result, v2, v3, v4, (void (*)(void))type metadata accessor for CloudAssets_AssetStreamHandle);
          break;
        case 3:
        case 4:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        default:
          break;
      }
      uint64_t result = sub_24A0AAF40();
    }
  }
  return result;
}

uint64_t sub_24A0A6678()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t sub_24A0A6728()
{
  uint64_t v1 = sub_24A0AAEEC();
  uint64_t result = sub_24A0A67E0(v1);
  if (!v0)
  {
    uint64_t v3 = sub_24A0AB018();
    sub_24A0A69AC(v3, v4, v5, v6, v7);
    sub_24A0AADA4();
    if (v8) {
      sub_24A0AB124();
    }
    sub_24A0AADA4();
    if (v9) {
      sub_24A0AB124();
    }
    type metadata accessor for CloudAssets_AssetStreamHandle(0);
    return sub_24A0AAFF4();
  }
  return result;
}

uint64_t sub_24A0A67E0(uint64_t a1)
{
  uint64_t v2 = sub_24A08DF34(&qword_26975D570);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CloudAssets_Asset(0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CloudAssets_AssetStreamHandle(0);
  sub_24A0A80F4(a1 + *(int *)(v8 + 28), (uint64_t)v4, &qword_26975D570);
  if (_s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v4, 1, v5) == 1) {
    return sub_24A096620((uint64_t)v4, &qword_26975D570);
  }
  sub_24A0A7FAC((uint64_t)v4, (uint64_t)v7, (void (*)(void))type metadata accessor for CloudAssets_Asset);
  sub_24A0A76D4(&qword_26975D458, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_24A09FA68((uint64_t)v7, (void (*)(void))type metadata accessor for CloudAssets_Asset);
}

uint64_t sub_24A0A69AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  v16[3] = a4;
  v16[1] = a3;
  uint64_t v8 = sub_24A08DF34(&qword_26975D568);
  uint64_t v9 = sub_24A093C88(v8);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CloudAssets_Credential(0);
  sub_24A08F280();
  MEMORY[0x270FA5388](v13);
  sub_24A093D9C();
  uint64_t v14 = a5(0);
  sub_24A0A80F4(a1 + *(int *)(v14 + 32), (uint64_t)v11, &qword_26975D568);
  if (_s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v11, 1, v12) == 1) {
    return sub_24A096620((uint64_t)v11, &qword_26975D568);
  }
  sub_24A0A7FAC((uint64_t)v11, v5, (void (*)(void))type metadata accessor for CloudAssets_Credential);
  sub_24A0A76D4(&qword_26975D7D0, (void (*)(uint64_t))type metadata accessor for CloudAssets_Credential);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_24A09FA68(v5, (void (*)(void))type metadata accessor for CloudAssets_Credential);
}

void sub_24A0A6B70()
{
  sub_24A0AAFDC();
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  type metadata accessor for UnknownStorage();
  sub_24A08F24C();
  uint64_t v65 = v8;
  uint64_t v66 = v7;
  MEMORY[0x270FA5388](v7);
  sub_24A093E2C();
  v64[2] = v9;
  sub_24A09C014();
  MEMORY[0x270FA5388](v10);
  v64[1] = (char *)v64 - v11;
  uint64_t v12 = sub_24A093CF0();
  uint64_t v72 = type metadata accessor for CloudAssets_Credential(v12);
  sub_24A08F280();
  MEMORY[0x270FA5388](v13);
  sub_24A08F2E0();
  uint64_t v67 = v14;
  uint64_t v69 = sub_24A08DF34(&qword_26975D8B0);
  sub_24A08F280();
  MEMORY[0x270FA5388](v15);
  sub_24A08F2E0();
  uint64_t v73 = v16;
  uint64_t v17 = sub_24A08DF34(&qword_26975D568);
  uint64_t v18 = sub_24A093C88(v17);
  MEMORY[0x270FA5388](v18);
  sub_24A093E2C();
  uint64_t v68 = v19;
  sub_24A09C014();
  MEMORY[0x270FA5388](v20);
  uint64_t v70 = (uint64_t)v64 - v21;
  sub_24A09C014();
  MEMORY[0x270FA5388](v22);
  uint64_t v71 = (uint64_t)v64 - v23;
  uint64_t v24 = sub_24A093CF0();
  type metadata accessor for CloudAssets_Asset(v24);
  sub_24A08F280();
  MEMORY[0x270FA5388](v25);
  sub_24A0AAED4();
  uint64_t v26 = sub_24A08DF34(&qword_26975D8D0);
  uint64_t v27 = v26 - 8;
  MEMORY[0x270FA5388](v26);
  sub_24A08F2C8();
  uint64_t v28 = sub_24A08DF34(&qword_26975D570);
  uint64_t v29 = sub_24A093C88(v28);
  uint64_t v30 = MEMORY[0x270FA5388](v29);
  uint64_t v32 = (char *)v64 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v30);
  sub_24A0AB1D4();
  MEMORY[0x270FA5388](v33);
  uint64_t v35 = (char *)v64 - v34;
  uint64_t v36 = type metadata accessor for CloudAssets_AssetStreamHandle(0);
  uint64_t v37 = *(int *)(v36 + 28);
  char v74 = v6;
  uint64_t v38 = (uint64_t)v6 + v37;
  uint64_t v39 = v36;
  sub_24A0A80F4(v38, (uint64_t)v35, &qword_26975D570);
  uint64_t v40 = *(int *)(v39 + 28);
  char v75 = v4;
  sub_24A0A80F4((uint64_t)v4 + v40, v0, &qword_26975D570);
  uint64_t v41 = v1 + *(int *)(v27 + 56);
  sub_24A0A80F4((uint64_t)v35, v1, &qword_26975D570);
  sub_24A0A80F4(v0, v41, &qword_26975D570);
  sub_24A0AADB8(v1);
  if (v42)
  {
    sub_24A096620(v0, &qword_26975D570);
    sub_24A096620((uint64_t)v35, &qword_26975D570);
    sub_24A0AADB8(v41);
    if (v42)
    {
      sub_24A096620(v1, &qword_26975D570);
      goto LABEL_11;
    }
LABEL_9:
    uint64_t v43 = &qword_26975D8D0;
    uint64_t v44 = v1;
LABEL_20:
    sub_24A096620(v44, v43);
    goto LABEL_21;
  }
  sub_24A0A80F4(v1, (uint64_t)v32, &qword_26975D570);
  sub_24A0AADB8(v41);
  if (v42)
  {
    sub_24A096620(v0, &qword_26975D570);
    sub_24A096620((uint64_t)v35, &qword_26975D570);
    sub_24A09FA68((uint64_t)v32, (void (*)(void))type metadata accessor for CloudAssets_Asset);
    goto LABEL_9;
  }
  sub_24A0A7FAC(v41, v2, (void (*)(void))type metadata accessor for CloudAssets_Asset);
  sub_24A0A1BAC();
  char v46 = v45;
  sub_24A09FA68(v2, (void (*)(void))type metadata accessor for CloudAssets_Asset);
  sub_24A096620(v0, &qword_26975D570);
  sub_24A096620((uint64_t)v35, &qword_26975D570);
  sub_24A09FA68((uint64_t)v32, (void (*)(void))type metadata accessor for CloudAssets_Asset);
  sub_24A096620(v1, &qword_26975D570);
  if ((v46 & 1) == 0) {
    goto LABEL_21;
  }
LABEL_11:
  uint64_t v47 = v74;
  uint64_t v48 = v71;
  sub_24A0A80F4((uint64_t)v74 + *(int *)(v39 + 32), v71, &qword_26975D568);
  uint64_t v49 = v75;
  uint64_t v50 = v70;
  sub_24A0A80F4((uint64_t)v75 + *(int *)(v39 + 32), v70, &qword_26975D568);
  uint64_t v51 = v73;
  uint64_t v52 = v73 + *(int *)(v69 + 48);
  sub_24A0A80F4(v48, v73, &qword_26975D568);
  sub_24A0A80F4(v50, v52, &qword_26975D568);
  uint64_t v53 = v72;
  sub_24A0AAE14(v51, 1, v72);
  if (!v42)
  {
    uint64_t v54 = v68;
    sub_24A0A80F4(v51, v68, &qword_26975D568);
    sub_24A0AAE14(v52, 1, v53);
    if (!v55)
    {
      uint64_t v56 = v67;
      sub_24A0A7FAC(v52, v67, (void (*)(void))type metadata accessor for CloudAssets_Credential);
      sub_24A0A3E08();
      char v58 = v57;
      sub_24A09FA68(v56, (void (*)(void))type metadata accessor for CloudAssets_Credential);
      sub_24A096620(v50, &qword_26975D568);
      sub_24A096620(v48, &qword_26975D568);
      sub_24A09FA68(v54, (void (*)(void))type metadata accessor for CloudAssets_Credential);
      sub_24A096620(v51, &qword_26975D568);
      if ((v58 & 1) == 0) {
        goto LABEL_21;
      }
      goto LABEL_23;
    }
    sub_24A096620(v50, &qword_26975D568);
    sub_24A096620(v48, &qword_26975D568);
    sub_24A09FA68(v54, (void (*)(void))type metadata accessor for CloudAssets_Credential);
    goto LABEL_19;
  }
  sub_24A096620(v50, &qword_26975D568);
  sub_24A096620(v48, &qword_26975D568);
  sub_24A0AAE14(v52, 1, v53);
  if (!v42)
  {
LABEL_19:
    uint64_t v43 = &qword_26975D8B0;
    uint64_t v44 = v51;
    goto LABEL_20;
  }
  sub_24A096620(v51, &qword_26975D568);
LABEL_23:
  BOOL v59 = *v47 == *v49 && v47[1] == v49[1];
  if (v59 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    BOOL v60 = v47[2] == v49[2] && v47[3] == v49[3];
    if (v60 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      uint64_t v61 = v65;
      uint64_t v62 = *(void (**)(void))(v65 + 16);
      sub_24A0AAE54();
      v62();
      sub_24A0AAE54();
      v62();
      sub_24A0A76D4(&qword_26975D898, MEMORY[0x263F50560]);
      dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v63 = *(void (**)(void))(v61 + 8);
      sub_24A0AB19C();
      v63();
      sub_24A0AB19C();
      v63();
    }
  }
LABEL_21:
  sub_24A0AB030();
}

Swift::Int sub_24A0A725C(void (*a1)(void), unint64_t *a2, void (*a3)(uint64_t))
{
  return Hasher._finalize()();
}

unint64_t sub_24A0A72E8()
{
  return 0xD00000000000001DLL;
}

uint64_t sub_24A0A7304()
{
  sub_24A0AAF80();
  sub_24A08F280();
  uint64_t v0 = sub_24A093C7C();
  return v1(v0);
}

uint64_t sub_24A0A7360()
{
  sub_24A0AAF80();
  sub_24A08F280();
  uint64_t v0 = sub_24A0AB07C();
  return v1(v0);
}

uint64_t sub_24A0A73B8()
{
  return sub_24A0A65A8();
}

uint64_t sub_24A0A73D0()
{
  return sub_24A0A6728();
}

uint64_t sub_24A0A73E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A0A76D4(&qword_26975D8C8, (void (*)(uint64_t))type metadata accessor for CloudAssets_AssetStreamHandle);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_24A0A7464(uint64_t a1, uint64_t a2)
{
  return sub_24A0A2E08(a1, a2, &qword_26975D310, (uint64_t)qword_26976A028);
}

uint64_t sub_24A0A7488(uint64_t a1)
{
  uint64_t v2 = sub_24A0A76D4(&qword_26975D768, (void (*)(uint64_t))type metadata accessor for CloudAssets_AssetStreamHandle);
  return MEMORY[0x270F44CC0](a1, v2);
}

Swift::Int sub_24A0A74F4()
{
  return sub_24A0A725C((void (*)(void))type metadata accessor for CloudAssets_AssetStreamHandle, &qword_26975D770, (void (*)(uint64_t))type metadata accessor for CloudAssets_AssetStreamHandle);
}

uint64_t sub_24A0A7550()
{
  sub_24A0A76D4(&qword_26975D768, (void (*)(uint64_t))type metadata accessor for CloudAssets_AssetStreamHandle);
  return Message.hash(into:)();
}

Swift::Int sub_24A0A75CC()
{
  return Hasher._finalize()();
}

uint64_t sub_24A0A7624()
{
  return sub_24A0A76D4(&qword_26975D760, (void (*)(uint64_t))type metadata accessor for CloudAssets_AssetStreamHandle);
}

uint64_t type metadata accessor for CloudAssets_AssetStreamHandle(uint64_t a1)
{
  return sub_24A0933F0(a1, (uint64_t *)&unk_26975D8D8);
}

uint64_t sub_24A0A768C()
{
  return sub_24A0A76D4(&qword_26975D768, (void (*)(uint64_t))type metadata accessor for CloudAssets_AssetStreamHandle);
}

uint64_t sub_24A0A76D4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24A0A771C()
{
  return sub_24A0A76D4(&qword_26975D770, (void (*)(uint64_t))type metadata accessor for CloudAssets_AssetStreamHandle);
}

uint64_t sub_24A0A7764()
{
  return sub_24A0A76D4(&qword_26975D778, (void (*)(uint64_t))type metadata accessor for CloudAssets_AssetStreamHandle);
}

uint64_t sub_24A0A77AC()
{
  return sub_24A0A76D4(&qword_26975D780, (void (*)(uint64_t))type metadata accessor for CloudAssets_Signal.Event);
}

uint64_t type metadata accessor for CloudAssets_Signal.Event(uint64_t a1)
{
  return sub_24A0933F0(a1, (uint64_t *)&unk_26975D8F0);
}

uint64_t sub_24A0A7814()
{
  return sub_24A0A76D4(&qword_26975D788, (void (*)(uint64_t))type metadata accessor for CloudAssets_Signal.Event);
}

uint64_t sub_24A0A785C()
{
  return sub_24A0A76D4(&qword_26975D790, (void (*)(uint64_t))type metadata accessor for CloudAssets_Signal.Event);
}

uint64_t sub_24A0A78A4()
{
  return sub_24A0A76D4(&qword_26975D798, (void (*)(uint64_t))type metadata accessor for CloudAssets_Signal.Event);
}

uint64_t sub_24A0A78EC()
{
  return sub_24A0A76D4(&qword_26975D7A0, (void (*)(uint64_t))type metadata accessor for CloudAssets_Signal);
}

uint64_t sub_24A0A7934()
{
  return sub_24A0A76D4((unint64_t *)&qword_26975D7A8, (void (*)(uint64_t))type metadata accessor for CloudAssets_Signal);
}

uint64_t sub_24A0A797C()
{
  return sub_24A0A76D4(&qword_26975D7B0, (void (*)(uint64_t))type metadata accessor for CloudAssets_Signal);
}

uint64_t sub_24A0A79C4()
{
  return sub_24A0A76D4(&qword_26975D7B8, (void (*)(uint64_t))type metadata accessor for CloudAssets_SimultaneousDownloadableAssets);
}

uint64_t sub_24A0A7A0C()
{
  return sub_24A0A76D4(&qword_26975D518, (void (*)(uint64_t))type metadata accessor for CloudAssets_SimultaneousDownloadableAssets);
}

uint64_t sub_24A0A7A54()
{
  return sub_24A0A76D4(&qword_26975D7C0, (void (*)(uint64_t))type metadata accessor for CloudAssets_SimultaneousDownloadableAssets);
}

uint64_t sub_24A0A7A9C()
{
  return sub_24A0A76D4(&qword_26975D7C8, (void (*)(uint64_t))type metadata accessor for CloudAssets_Credential);
}

uint64_t sub_24A0A7AE4()
{
  return sub_24A0A76D4(&qword_26975D7D0, (void (*)(uint64_t))type metadata accessor for CloudAssets_Credential);
}

uint64_t sub_24A0A7B2C()
{
  return sub_24A0A76D4(&qword_26975D7D8, (void (*)(uint64_t))type metadata accessor for CloudAssets_Credential);
}

uint64_t sub_24A0A7B74()
{
  return sub_24A0A76D4(&qword_26975D7E0, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset.Protector);
}

uint64_t sub_24A0A7BBC()
{
  return sub_24A0A76D4(&qword_26975D438, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset.Protector);
}

uint64_t sub_24A0A7C04()
{
  return sub_24A0A76D4(&qword_26975D7E8, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset.Protector);
}

uint64_t sub_24A0A7C4C()
{
  return sub_24A0A76D4(&qword_26975D7F0, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset.ID);
}

uint64_t sub_24A0A7C94()
{
  return sub_24A0A76D4(&qword_26975D408, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset.ID);
}

uint64_t sub_24A0A7CDC()
{
  return sub_24A0A76D4(&qword_26975D7F8, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset.ID);
}

uint64_t sub_24A0A7D24()
{
  return sub_24A0A76D4(&qword_26975D800, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset);
}

uint64_t sub_24A0A7D6C()
{
  return sub_24A0A76D4(&qword_26975D458, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset);
}

uint64_t sub_24A0A7DB4()
{
  return sub_24A0A76D4(&qword_26975D808, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset);
}

uint64_t sub_24A0A7DFC()
{
  return sub_24A0A76D4(&qword_26975D810, (void (*)(uint64_t))type metadata accessor for CloudAssets_Credential);
}

uint64_t sub_24A0A7E44()
{
  return sub_24A0A76D4(&qword_26975D818, (void (*)(uint64_t))type metadata accessor for CloudAssets_Signal);
}

uint64_t sub_24A0A7E8C()
{
  return sub_24A0A76D4(&qword_26975D820, (void (*)(uint64_t))type metadata accessor for CloudAssets_SimultaneousDownloadableAssets);
}

uint64_t sub_24A0A7ED4()
{
  return sub_24A0A76D4(&qword_26975D828, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset);
}

uint64_t sub_24A0A7F1C()
{
  return sub_24A0A76D4(&qword_26975D830, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset.Protector);
}

uint64_t sub_24A0A7F64()
{
  return sub_24A0A76D4(&qword_26975D838, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset.ID);
}

uint64_t sub_24A0A7FAC(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_24A08F280();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t sub_24A0A800C(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t *sub_24A0A8044(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

unint64_t sub_24A0A80A8()
{
  unint64_t result = qword_26975D8C0;
  if (!qword_26975D8C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975D8C0);
  }
  return result;
}

uint64_t sub_24A0A80F4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_24A08DF34(a3);
  sub_24A08F280();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t initializeBufferWithCopyOfBuffer for Signal.Event(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for Signal.Event(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for Signal.Event(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)unint64_t result = 0;
    *(unsigned char *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 9) = v3;
  return result;
}

uint64_t sub_24A0A81B4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_24A0A81D0(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)unint64_t result = (a2 - 1);
    char v2 = 1;
  }
  else
  {
    char v2 = 0;
  }
  *(unsigned char *)(result + 8) = v2;
  return result;
}

ValueMetadata *type metadata accessor for CloudAssets_Signal.EventType()
{
  return &type metadata for CloudAssets_Signal.EventType;
}

uint64_t *sub_24A0A8200(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = a3[6];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UnknownStorage();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    BOOL v59 = v13;
    v13(v10, v11, v12);
    uint64_t v14 = a3[7];
    uint64_t v15 = (uint64_t *)((char *)v4 + v14);
    uint64_t v16 = (uint64_t *)((char *)a2 + v14);
    uint64_t v17 = (int *)type metadata accessor for CloudAssets_Asset(0);
    if (_s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v16, 1, (uint64_t)v17))
    {
      uint64_t v18 = sub_24A08DF34(&qword_26975D570);
      memcpy(v15, v16, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      void *v15 = *v16;
      v13((char *)v15 + v17[5], (char *)v16 + v17[5], v12);
      uint64_t v20 = v17[6];
      uint64_t v21 = (void *)((char *)v15 + v20);
      uint64_t v22 = (void *)((char *)v16 + v20);
      uint64_t v56 = type metadata accessor for CloudAssets_Asset.ID(0);
      if (_s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v22, 1, v56))
      {
        uint64_t v23 = sub_24A08DF34(&qword_26975D4F8);
        memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
      }
      else
      {
        uint64_t v24 = v22[1];
        *uint64_t v21 = *v22;
        v21[1] = v24;
        uint64_t v57 = v12;
        uint64_t v25 = v22[3];
        v21[2] = v22[2];
        v21[3] = v25;
        unint64_t v26 = v22[5];
        uint64_t v55 = v22[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_24A08DE84(v55, v26);
        v21[4] = v55;
        v21[5] = v26;
        uint64_t v28 = v22[6];
        unint64_t v27 = v22[7];
        sub_24A08DE84(v28, v27);
        v21[6] = v28;
        v21[7] = v27;
        uint64_t v12 = v57;
        v59((char *)v21 + *(int *)(v56 + 32), (char *)v22 + *(int *)(v56 + 32), v57);
        _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)v21, 0, 1, v56);
      }
      uint64_t v29 = v17[7];
      uint64_t v30 = (void *)((char *)v15 + v29);
      uint64_t v31 = (void *)((char *)v16 + v29);
      uint64_t v32 = type metadata accessor for CloudAssets_Asset.Protector(0);
      if (_s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v31, 1, v32))
      {
        uint64_t v33 = sub_24A08DF34(&qword_26975D500);
        memcpy(v30, v31, *(void *)(*(void *)(v33 - 8) + 64));
      }
      else
      {
        uint64_t v58 = v12;
        uint64_t v34 = *v31;
        unint64_t v35 = v31[1];
        sub_24A08DE84(*v31, v35);
        *uint64_t v30 = v34;
        v30[1] = v35;
        uint64_t v36 = v31[2];
        unint64_t v37 = v31[3];
        sub_24A08DE84(v36, v37);
        v30[2] = v36;
        v30[3] = v37;
        uint64_t v12 = v58;
        v59((char *)v30 + *(int *)(v32 + 24), (char *)v31 + *(int *)(v32 + 24), v58);
        _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)v30, 0, 1, v32);
      }
      _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)v15, 0, 1, (uint64_t)v17);
    }
    uint64_t v38 = a3[8];
    uint64_t v39 = (uint64_t *)((char *)v4 + v38);
    uint64_t v40 = (uint64_t *)((char *)a2 + v38);
    uint64_t v41 = type metadata accessor for CloudAssets_Credential(0);
    if (_s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v40, 1, v41))
    {
      uint64_t v42 = sub_24A08DF34(&qword_26975D568);
      memcpy(v39, v40, *(void *)(*(void *)(v42 - 8) + 64));
    }
    else
    {
      uint64_t v43 = v40[1];
      *uint64_t v39 = *v40;
      v39[1] = v43;
      uint64_t v44 = v40[3];
      void v39[2] = v40[2];
      v39[3] = v44;
      uint64_t v45 = v40[5];
      v39[4] = v40[4];
      v39[5] = v45;
      uint64_t v46 = *(int *)(v41 + 28);
      uint64_t v47 = (char *)v39 + v46;
      uint64_t v48 = (char *)v40 + v46;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v59(v47, v48, v12);
      uint64_t v49 = *(int *)(v41 + 32);
      uint64_t v50 = (char *)v39 + v49;
      uint64_t v51 = (char *)v40 + v49;
      uint64_t v52 = type metadata accessor for Google_Protobuf_Timestamp();
      if (_s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v51, 1, v52))
      {
        uint64_t v53 = sub_24A08DF34(&qword_26975D560);
        memcpy(v50, v51, *(void *)(*(void *)(v53 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v52 - 8) + 16))(v50, v51, v52);
        _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)v50, 0, 1, v52);
      }
      _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)v39, 0, 1, v41);
    }
  }
  return v4;
}

uint64_t sub_24A0A86C4(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[6];
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v4, v5);
  uint64_t v7 = a1 + a2[7];
  uint64_t v8 = (int *)type metadata accessor for CloudAssets_Asset(0);
  if (!_s10CloudAsset21UploadResponseMessageOwet_0(v7, 1, (uint64_t)v8))
  {
    v6(v7 + v8[5], v5);
    uint64_t v9 = v7 + v8[6];
    uint64_t v10 = type metadata accessor for CloudAssets_Asset.ID(0);
    if (!_s10CloudAsset21UploadResponseMessageOwet_0(v9, 1, v10))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_24A08DEDC(*(void *)(v9 + 32), *(void *)(v9 + 40));
      sub_24A08DEDC(*(void *)(v9 + 48), *(void *)(v9 + 56));
      v6(v9 + *(int *)(v10 + 32), v5);
    }
    uint64_t v11 = v7 + v8[7];
    uint64_t v12 = type metadata accessor for CloudAssets_Asset.Protector(0);
    if (!_s10CloudAsset21UploadResponseMessageOwet_0(v11, 1, v12))
    {
      sub_24A08DEDC(*(void *)v11, *(void *)(v11 + 8));
      sub_24A08DEDC(*(void *)(v11 + 16), *(void *)(v11 + 24));
      v6(v11 + *(int *)(v12 + 24), v5);
    }
  }
  uint64_t v13 = a1 + a2[8];
  uint64_t v14 = type metadata accessor for CloudAssets_Credential(0);
  uint64_t result = _s10CloudAsset21UploadResponseMessageOwet_0(v13, 1, v14);
  if (!result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v6(v13 + *(int *)(v14 + 28), v5);
    uint64_t v16 = v13 + *(int *)(v14 + 32);
    uint64_t v17 = type metadata accessor for Google_Protobuf_Timestamp();
    uint64_t result = _s10CloudAsset21UploadResponseMessageOwet_0(v16, 1, v17);
    if (!result)
    {
      uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8);
      return v18(v16, v17);
    }
  }
  return result;
}

void *sub_24A0A8924(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a3[6];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v57 = v12;
  v12(v9, v10, v11);
  uint64_t v13 = a3[7];
  uint64_t v14 = (void *)((char *)a1 + v13);
  uint64_t v15 = (void *)((char *)a2 + v13);
  uint64_t v16 = (int *)type metadata accessor for CloudAssets_Asset(0);
  if (_s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v15, 1, (uint64_t)v16))
  {
    uint64_t v17 = sub_24A08DF34(&qword_26975D570);
    memcpy(v14, v15, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    *uint64_t v14 = *v15;
    v12((char *)v14 + v16[5], (char *)v15 + v16[5], v11);
    uint64_t v18 = v16[6];
    uint64_t v19 = (void *)((char *)v14 + v18);
    uint64_t v20 = (void *)((char *)v15 + v18);
    uint64_t v54 = type metadata accessor for CloudAssets_Asset.ID(0);
    if (_s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v20, 1, v54))
    {
      uint64_t v21 = sub_24A08DF34(&qword_26975D4F8);
      memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      uint64_t v22 = v20[1];
      *uint64_t v19 = *v20;
      v19[1] = v22;
      uint64_t v55 = v11;
      uint64_t v23 = v20[3];
      v19[2] = v20[2];
      v19[3] = v23;
      unint64_t v24 = v20[5];
      uint64_t v53 = v20[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_24A08DE84(v53, v24);
      v19[4] = v53;
      v19[5] = v24;
      uint64_t v26 = v20[6];
      unint64_t v25 = v20[7];
      sub_24A08DE84(v26, v25);
      v19[6] = v26;
      v19[7] = v25;
      uint64_t v11 = v55;
      v57((char *)v19 + *(int *)(v54 + 32), (char *)v20 + *(int *)(v54 + 32), v55);
      _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)v19, 0, 1, v54);
    }
    uint64_t v27 = v16[7];
    uint64_t v28 = (void *)((char *)v14 + v27);
    uint64_t v29 = (void *)((char *)v15 + v27);
    uint64_t v30 = type metadata accessor for CloudAssets_Asset.Protector(0);
    if (_s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v29, 1, v30))
    {
      uint64_t v31 = sub_24A08DF34(&qword_26975D500);
      memcpy(v28, v29, *(void *)(*(void *)(v31 - 8) + 64));
    }
    else
    {
      uint64_t v56 = v11;
      uint64_t v32 = *v29;
      unint64_t v33 = v29[1];
      sub_24A08DE84(*v29, v33);
      *uint64_t v28 = v32;
      v28[1] = v33;
      uint64_t v34 = v29[2];
      unint64_t v35 = v29[3];
      sub_24A08DE84(v34, v35);
      v28[2] = v34;
      v28[3] = v35;
      uint64_t v11 = v56;
      v57((char *)v28 + *(int *)(v30 + 24), (char *)v29 + *(int *)(v30 + 24), v56);
      _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)v28, 0, 1, v30);
    }
    _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)v14, 0, 1, (uint64_t)v16);
  }
  uint64_t v36 = a3[8];
  unint64_t v37 = (void *)((char *)a1 + v36);
  uint64_t v38 = (void *)((char *)a2 + v36);
  uint64_t v39 = type metadata accessor for CloudAssets_Credential(0);
  if (_s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v38, 1, v39))
  {
    uint64_t v40 = sub_24A08DF34(&qword_26975D568);
    memcpy(v37, v38, *(void *)(*(void *)(v40 - 8) + 64));
  }
  else
  {
    uint64_t v41 = v38[1];
    *unint64_t v37 = *v38;
    v37[1] = v41;
    uint64_t v42 = v38[3];
    v37[2] = v38[2];
    v37[3] = v42;
    uint64_t v43 = v38[5];
    v37[4] = v38[4];
    v37[5] = v43;
    uint64_t v44 = *(int *)(v39 + 28);
    uint64_t v45 = (char *)v37 + v44;
    uint64_t v46 = (char *)v38 + v44;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v57(v45, v46, v11);
    uint64_t v47 = *(int *)(v39 + 32);
    uint64_t v48 = (char *)v37 + v47;
    uint64_t v49 = (char *)v38 + v47;
    uint64_t v50 = type metadata accessor for Google_Protobuf_Timestamp();
    if (_s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v49, 1, v50))
    {
      uint64_t v51 = sub_24A08DF34(&qword_26975D560);
      memcpy(v48, v49, *(void *)(*(void *)(v51 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v50 - 8) + 16))(v48, v49, v50);
      _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)v48, 0, 1, v50);
    }
    _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)v37, 0, 1, v39);
  }
  return a1;
}

void *sub_24A0A8D98(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = (void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24);
  v109 = *v10;
  uint64_t v110 = *(void *)(v9 - 8);
  (*v10)(v7, v8, v9);
  uint64_t v11 = a3[7];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = (int *)type metadata accessor for CloudAssets_Asset(0);
  int v15 = _s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v12, 1, (uint64_t)v14);
  int v16 = _s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v13, 1, (uint64_t)v14);
  if (!v15)
  {
    if (v16)
    {
      sub_24A09FA68((uint64_t)v12, (void (*)(void))type metadata accessor for CloudAssets_Asset);
      goto LABEL_7;
    }
    v105 = a3;
    *(void *)uint64_t v12 = *(void *)v13;
    uint64_t v108 = v9;
    v109(&v12[v14[5]], &v13[v14[5]], v9);
    uint64_t v23 = v14[6];
    unint64_t v24 = &v12[v23];
    unint64_t v25 = &v13[v23];
    uint64_t v26 = type metadata accessor for CloudAssets_Asset.ID(0);
    int v27 = _s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v24, 1, v26);
    uint64_t v104 = v26;
    int v28 = _s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v25, 1, v26);
    if (v27)
    {
      if (!v28)
      {
        *(void *)unint64_t v24 = *(void *)v25;
        *((void *)v24 + 1) = *((void *)v25 + 1);
        *((void *)v24 + 2) = *((void *)v25 + 2);
        *((void *)v24 + 3) = *((void *)v25 + 3);
        uint64_t v30 = *((void *)v25 + 4);
        unint64_t v29 = *((void *)v25 + 5);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_24A08DE84(v30, v29);
        *((void *)v24 + 4) = v30;
        *((void *)v24 + 5) = v29;
        uint64_t v32 = *((void *)v25 + 6);
        unint64_t v31 = *((void *)v25 + 7);
        sub_24A08DE84(v32, v31);
        *((void *)v24 + 6) = v32;
        *((void *)v24 + 7) = v31;
        uint64_t v9 = v108;
        (*(void (**)(char *, char *, uint64_t))(v110 + 16))(&v24[*(int *)(v104 + 32)], &v25[*(int *)(v104 + 32)], v108);
        _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)v24, 0, 1, v104);
        goto LABEL_19;
      }
    }
    else
    {
      if (!v28)
      {
        *(void *)unint64_t v24 = *(void *)v25;
        *((void *)v24 + 1) = *((void *)v25 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *((void *)v24 + 2) = *((void *)v25 + 2);
        *((void *)v24 + 3) = *((void *)v25 + 3);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v87 = *((void *)v25 + 4);
        unint64_t v86 = *((void *)v25 + 5);
        sub_24A08DE84(v87, v86);
        uint64_t v88 = *((void *)v24 + 4);
        unint64_t v89 = *((void *)v24 + 5);
        *((void *)v24 + 4) = v87;
        *((void *)v24 + 5) = v86;
        sub_24A08DEDC(v88, v89);
        uint64_t v91 = *((void *)v25 + 6);
        unint64_t v90 = *((void *)v25 + 7);
        sub_24A08DE84(v91, v90);
        uint64_t v92 = *((void *)v24 + 6);
        unint64_t v93 = *((void *)v24 + 7);
        *((void *)v24 + 6) = v91;
        *((void *)v24 + 7) = v90;
        sub_24A08DEDC(v92, v93);
        uint64_t v9 = v108;
        v109(&v24[*(int *)(v26 + 32)], &v25[*(int *)(v26 + 32)], v108);
LABEL_19:
        uint64_t v47 = v14[7];
        uint64_t v48 = (uint64_t *)&v12[v47];
        uint64_t v49 = (uint64_t *)&v13[v47];
        uint64_t v50 = type metadata accessor for CloudAssets_Asset.Protector(0);
        int v51 = _s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v48, 1, v50);
        int v52 = _s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v49, 1, v50);
        if (v51)
        {
          if (!v52)
          {
            uint64_t v53 = *v49;
            unint64_t v54 = v49[1];
            sub_24A08DE84(*v49, v54);
            *uint64_t v48 = v53;
            v48[1] = v54;
            uint64_t v55 = v49[2];
            unint64_t v56 = v49[3];
            sub_24A08DE84(v55, v56);
            v48[2] = v55;
            v48[3] = v56;
            (*(void (**)(char *, char *, uint64_t))(v110 + 16))((char *)v48 + *(int *)(v50 + 24), (char *)v49 + *(int *)(v50 + 24), v9);
            _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)v48, 0, 1, v50);
LABEL_25:
            a3 = v105;
            goto LABEL_26;
          }
        }
        else
        {
          if (!v52)
          {
            uint64_t v94 = *v49;
            unint64_t v95 = v49[1];
            sub_24A08DE84(*v49, v95);
            uint64_t v96 = *v48;
            unint64_t v97 = v48[1];
            *uint64_t v48 = v94;
            v48[1] = v95;
            sub_24A08DEDC(v96, v97);
            uint64_t v98 = v49[2];
            unint64_t v99 = v49[3];
            sub_24A08DE84(v98, v99);
            uint64_t v100 = v48[2];
            unint64_t v101 = v48[3];
            v48[2] = v98;
            v48[3] = v99;
            sub_24A08DEDC(v100, v101);
            v109((char *)v48 + *(int *)(v50 + 24), (char *)v49 + *(int *)(v50 + 24), v9);
            goto LABEL_25;
          }
          sub_24A09FA68((uint64_t)v48, (void (*)(void))type metadata accessor for CloudAssets_Asset.Protector);
        }
        uint64_t v57 = sub_24A08DF34(&qword_26975D500);
        memcpy(v48, v49, *(void *)(*(void *)(v57 - 8) + 64));
        goto LABEL_25;
      }
      sub_24A09FA68((uint64_t)v24, (void (*)(void))type metadata accessor for CloudAssets_Asset.ID);
    }
    uint64_t v46 = sub_24A08DF34(&qword_26975D4F8);
    memcpy(v24, v25, *(void *)(*(void *)(v46 - 8) + 64));
    uint64_t v9 = v108;
    goto LABEL_19;
  }
  if (v16)
  {
LABEL_7:
    uint64_t v22 = sub_24A08DF34(&qword_26975D570);
    memcpy(v12, v13, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_26;
  }
  *(void *)uint64_t v12 = *(void *)v13;
  v103 = *(void (**)(char *, char *, uint64_t))(v110 + 16);
  v103(&v12[v14[5]], &v13[v14[5]], v9);
  uint64_t v17 = v14[6];
  uint64_t v18 = &v12[v17];
  uint64_t v19 = &v13[v17];
  uint64_t v107 = v9;
  uint64_t v20 = type metadata accessor for CloudAssets_Asset.ID(0);
  if (_s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v19, 1, v20))
  {
    uint64_t v21 = sub_24A08DF34(&qword_26975D4F8);
    memcpy(v18, v19, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    *(void *)uint64_t v18 = *(void *)v19;
    *((void *)v18 + 1) = *((void *)v19 + 1);
    *((void *)v18 + 2) = *((void *)v19 + 2);
    *((void *)v18 + 3) = *((void *)v19 + 3);
    v106 = a3;
    uint64_t v33 = *((void *)v19 + 4);
    unint64_t v102 = *((void *)v19 + 5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_24A08DE84(v33, v102);
    *((void *)v18 + 4) = v33;
    *((void *)v18 + 5) = v102;
    uint64_t v34 = *((void *)v19 + 6);
    unint64_t v35 = *((void *)v19 + 7);
    sub_24A08DE84(v34, v35);
    *((void *)v18 + 6) = v34;
    *((void *)v18 + 7) = v35;
    a3 = v106;
    v103(&v18[*(int *)(v20 + 32)], &v19[*(int *)(v20 + 32)], v107);
    _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)v18, 0, 1, v20);
  }
  uint64_t v36 = v14[7];
  unint64_t v37 = &v12[v36];
  uint64_t v38 = (uint64_t *)&v13[v36];
  uint64_t v39 = type metadata accessor for CloudAssets_Asset.Protector(0);
  if (_s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v38, 1, v39))
  {
    uint64_t v40 = sub_24A08DF34(&qword_26975D500);
    memcpy(v37, v38, *(void *)(*(void *)(v40 - 8) + 64));
    uint64_t v9 = v107;
  }
  else
  {
    uint64_t v41 = a3;
    uint64_t v42 = *v38;
    unint64_t v43 = v38[1];
    sub_24A08DE84(*v38, v43);
    *(void *)unint64_t v37 = v42;
    *((void *)v37 + 1) = v43;
    uint64_t v44 = v38[2];
    unint64_t v45 = v38[3];
    sub_24A08DE84(v44, v45);
    *((void *)v37 + 2) = v44;
    *((void *)v37 + 3) = v45;
    a3 = v41;
    uint64_t v9 = v107;
    v103(&v37[*(int *)(v39 + 24)], (char *)v38 + *(int *)(v39 + 24), v107);
    _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)v37, 0, 1, v39);
  }
  _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)v12, 0, 1, (uint64_t)v14);
LABEL_26:
  uint64_t v58 = a3[8];
  BOOL v59 = (void *)((char *)a1 + v58);
  BOOL v60 = (void *)((char *)a2 + v58);
  uint64_t v61 = type metadata accessor for CloudAssets_Credential(0);
  int v62 = _s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v59, 1, v61);
  int v63 = _s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v60, 1, v61);
  if (v62)
  {
    if (!v63)
    {
      *BOOL v59 = *v60;
      v59[1] = v60[1];
      v59[2] = v60[2];
      v59[3] = v60[3];
      v59[4] = v60[4];
      v59[5] = v60[5];
      uint64_t v64 = *(int *)(v61 + 28);
      uint64_t v65 = (char *)v59 + v64;
      uint64_t v66 = (char *)v60 + v64;
      uint64_t v67 = *(void (**)(char *, char *, uint64_t))(v110 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v67(v65, v66, v9);
      uint64_t v68 = *(int *)(v61 + 32);
      uint64_t v69 = (char *)v59 + v68;
      uint64_t v70 = (char *)v60 + v68;
      uint64_t v71 = type metadata accessor for Google_Protobuf_Timestamp();
      if (_s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v70, 1, v71))
      {
        uint64_t v72 = sub_24A08DF34(&qword_26975D560);
        memcpy(v69, v70, *(void *)(*(void *)(v72 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v71 - 8) + 16))(v69, v70, v71);
        _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)v69, 0, 1, v71);
      }
      uint64_t v82 = (uint64_t)v59;
      uint64_t v83 = v61;
      goto LABEL_39;
    }
    goto LABEL_32;
  }
  if (v63)
  {
    sub_24A09FA68((uint64_t)v59, (void (*)(void))type metadata accessor for CloudAssets_Credential);
LABEL_32:
    size_t v73 = *(void *)(*(void *)(sub_24A08DF34(&qword_26975D568) - 8) + 64);
    char v74 = v59;
    char v75 = v60;
    goto LABEL_33;
  }
  *BOOL v59 = *v60;
  v59[1] = v60[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v59[2] = v60[2];
  v59[3] = v60[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v59[4] = v60[4];
  v59[5] = v60[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v109((char *)v59 + *(int *)(v61 + 28), (char *)v60 + *(int *)(v61 + 28), v9);
  uint64_t v76 = *(int *)(v61 + 32);
  uint64_t v77 = (uint64_t)v59 + v76;
  uint64_t v78 = (uint64_t)v60 + v76;
  uint64_t v79 = type metadata accessor for Google_Protobuf_Timestamp();
  int v80 = _s10CloudAsset21UploadResponseMessageOwet_0(v77, 1, v79);
  int v81 = _s10CloudAsset21UploadResponseMessageOwet_0(v78, 1, v79);
  if (v80)
  {
    if (!v81)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v79 - 8) + 16))(v77, v78, v79);
      uint64_t v82 = v77;
      uint64_t v83 = v79;
LABEL_39:
      _s10CloudAsset21UploadResponseMessageOwst_0(v82, 0, 1, v83);
      return a1;
    }
  }
  else
  {
    uint64_t v85 = *(void *)(v79 - 8);
    if (!v81)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v85 + 24))(v77, v78, v79);
      return a1;
    }
    (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v77, v79);
  }
  size_t v73 = *(void *)(*(void *)(sub_24A08DF34(&qword_26975D560) - 8) + 64);
  char v74 = (void *)v77;
  char v75 = (const void *)v78;
LABEL_33:
  memcpy(v74, v75, v73);
  return a1;
}

_OWORD *sub_24A0A9808(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(v3 + 28);
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  int v15 = (int *)type metadata accessor for CloudAssets_Asset(0);
  if (_s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v14, 1, (uint64_t)v15))
  {
    uint64_t v16 = sub_24A08DF34(&qword_26975D570);
    memcpy(v13, v14, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    uint64_t v43 = v3;
    void *v13 = *v14;
    v11((char *)v13 + v15[5], (char *)v14 + v15[5], v10);
    uint64_t v17 = v15[6];
    uint64_t v18 = (_OWORD *)((char *)v13 + v17);
    uint64_t v19 = (_OWORD *)((char *)v14 + v17);
    uint64_t v20 = v11;
    uint64_t v21 = type metadata accessor for CloudAssets_Asset.ID(0);
    uint64_t v44 = v20;
    if (_s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v19, 1, v21))
    {
      uint64_t v22 = sub_24A08DF34(&qword_26975D4F8);
      memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      long long v23 = v19[1];
      *uint64_t v18 = *v19;
      v18[1] = v23;
      long long v24 = v19[3];
      v18[2] = v19[2];
      v18[3] = v24;
      v20((char *)v18 + *(int *)(v21 + 32), (char *)v19 + *(int *)(v21 + 32), v10);
      _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)v18, 0, 1, v21);
    }
    uint64_t v25 = v15[7];
    uint64_t v26 = (_OWORD *)((char *)v13 + v25);
    int v27 = (_OWORD *)((char *)v14 + v25);
    uint64_t v28 = type metadata accessor for CloudAssets_Asset.Protector(0);
    uint64_t v3 = v43;
    if (_s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v27, 1, v28))
    {
      uint64_t v29 = sub_24A08DF34(&qword_26975D500);
      memcpy(v26, v27, *(void *)(*(void *)(v29 - 8) + 64));
      uint64_t v11 = v44;
    }
    else
    {
      long long v30 = v27[1];
      *uint64_t v26 = *v27;
      v26[1] = v30;
      uint64_t v11 = v44;
      v44((char *)v26 + *(int *)(v28 + 24), (char *)v27 + *(int *)(v28 + 24), v10);
      _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)v26, 0, 1, v28);
    }
    _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)v13, 0, 1, (uint64_t)v15);
  }
  uint64_t v31 = *(int *)(v3 + 32);
  uint64_t v32 = (_OWORD *)((char *)a1 + v31);
  uint64_t v33 = (_OWORD *)((char *)a2 + v31);
  uint64_t v34 = type metadata accessor for CloudAssets_Credential(0);
  if (_s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v33, 1, v34))
  {
    uint64_t v35 = sub_24A08DF34(&qword_26975D568);
    memcpy(v32, v33, *(void *)(*(void *)(v35 - 8) + 64));
  }
  else
  {
    long long v36 = v33[1];
    *uint64_t v32 = *v33;
    v32[1] = v36;
    v32[2] = v33[2];
    v11((char *)v32 + *(int *)(v34 + 28), (char *)v33 + *(int *)(v34 + 28), v10);
    uint64_t v37 = *(int *)(v34 + 32);
    uint64_t v38 = (char *)v32 + v37;
    uint64_t v39 = (char *)v33 + v37;
    uint64_t v40 = type metadata accessor for Google_Protobuf_Timestamp();
    if (_s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v39, 1, v40))
    {
      uint64_t v41 = sub_24A08DF34(&qword_26975D560);
      memcpy(v38, v39, *(void *)(*(void *)(v41 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 32))(v38, v39, v40);
      _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)v38, 0, 1, v40);
    }
    _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)v32, 0, 1, v34);
  }
  return a1;
}

void *sub_24A0A9BDC(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(v12 + 40);
  v13(v9, v10, v11);
  uint64_t v98 = a3;
  uint64_t v14 = *(int *)(a3 + 28);
  int v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = (int *)type metadata accessor for CloudAssets_Asset(0);
  int v18 = _s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v15, 1, (uint64_t)v17);
  int v19 = _s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v16, 1, (uint64_t)v17);
  uint64_t v97 = v12;
  if (v18)
  {
    if (!v19)
    {
      uint64_t v94 = v13;
      *(void *)int v15 = *(void *)v16;
      uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
      v20(&v15[v17[5]], &v16[v17[5]], v11);
      uint64_t v21 = v17[6];
      uint64_t v22 = &v15[v21];
      long long v23 = &v16[v21];
      uint64_t v95 = v11;
      uint64_t v24 = type metadata accessor for CloudAssets_Asset.ID(0);
      unint64_t v93 = v20;
      if (_s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v23, 1, v24))
      {
        uint64_t v25 = sub_24A08DF34(&qword_26975D4F8);
        memcpy(v22, v23, *(void *)(*(void *)(v25 - 8) + 64));
      }
      else
      {
        long long v37 = *((_OWORD *)v23 + 1);
        *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
        *((_OWORD *)v22 + 1) = v37;
        long long v38 = *((_OWORD *)v23 + 3);
        *((_OWORD *)v22 + 2) = *((_OWORD *)v23 + 2);
        *((_OWORD *)v22 + 3) = v38;
        v20(&v22[*(int *)(v24 + 32)], &v23[*(int *)(v24 + 32)], v95);
        _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)v22, 0, 1, v24);
      }
      uint64_t v39 = v17[7];
      uint64_t v40 = &v15[v39];
      uint64_t v41 = &v16[v39];
      uint64_t v42 = type metadata accessor for CloudAssets_Asset.Protector(0);
      uint64_t v13 = v94;
      if (_s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v41, 1, v42))
      {
        uint64_t v43 = sub_24A08DF34(&qword_26975D500);
        memcpy(v40, v41, *(void *)(*(void *)(v43 - 8) + 64));
        uint64_t v11 = v95;
      }
      else
      {
        long long v44 = *((_OWORD *)v41 + 1);
        *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
        *((_OWORD *)v40 + 1) = v44;
        uint64_t v11 = v95;
        v93(&v40[*(int *)(v42 + 24)], &v41[*(int *)(v42 + 24)], v95);
        _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)v40, 0, 1, v42);
      }
      uint64_t v45 = (uint64_t)v15;
      uint64_t v46 = (uint64_t)v17;
      goto LABEL_17;
    }
    goto LABEL_7;
  }
  if (v19)
  {
    sub_24A09FA68((uint64_t)v15, (void (*)(void))type metadata accessor for CloudAssets_Asset);
LABEL_7:
    size_t v26 = *(void *)(*(void *)(sub_24A08DF34(&qword_26975D570) - 8) + 64);
    int v27 = v15;
    uint64_t v28 = v16;
LABEL_8:
    memcpy(v27, v28, v26);
    goto LABEL_18;
  }
  *(void *)int v15 = *(void *)v16;
  uint64_t v96 = v11;
  v13(&v15[v17[5]], &v16[v17[5]], v11);
  uint64_t v29 = v17[6];
  long long v30 = &v15[v29];
  uint64_t v31 = &v16[v29];
  uint64_t v32 = type metadata accessor for CloudAssets_Asset.ID(0);
  int v33 = _s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v30, 1, v32);
  int v34 = _s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v31, 1, v32);
  if (v33)
  {
    if (!v34)
    {
      long long v35 = *((_OWORD *)v31 + 1);
      *(_OWORD *)long long v30 = *(_OWORD *)v31;
      *((_OWORD *)v30 + 1) = v35;
      long long v36 = *((_OWORD *)v31 + 3);
      *((_OWORD *)v30 + 2) = *((_OWORD *)v31 + 2);
      *((_OWORD *)v30 + 3) = v36;
      uint64_t v11 = v96;
      (*(void (**)(char *, char *, uint64_t))(v97 + 32))(&v30[*(int *)(v32 + 32)], &v31[*(int *)(v32 + 32)], v96);
      _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)v30, 0, 1, v32);
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  if (v34)
  {
    sub_24A09FA68((uint64_t)v30, (void (*)(void))type metadata accessor for CloudAssets_Asset.ID);
LABEL_35:
    uint64_t v74 = sub_24A08DF34(&qword_26975D4F8);
    memcpy(v30, v31, *(void *)(*(void *)(v74 - 8) + 64));
    uint64_t v11 = v96;
    goto LABEL_36;
  }
  uint64_t v83 = *((void *)v31 + 1);
  *(void *)long long v30 = *(void *)v31;
  *((void *)v30 + 1) = v83;
  swift_bridgeObjectRelease();
  uint64_t v84 = *((void *)v31 + 3);
  *((void *)v30 + 2) = *((void *)v31 + 2);
  *((void *)v30 + 3) = v84;
  swift_bridgeObjectRelease();
  uint64_t v85 = *((void *)v30 + 4);
  unint64_t v86 = *((void *)v30 + 5);
  *((_OWORD *)v30 + 2) = *((_OWORD *)v31 + 2);
  sub_24A08DEDC(v85, v86);
  uint64_t v87 = *((void *)v30 + 6);
  unint64_t v88 = *((void *)v30 + 7);
  *((_OWORD *)v30 + 3) = *((_OWORD *)v31 + 3);
  sub_24A08DEDC(v87, v88);
  uint64_t v11 = v96;
  v13(&v30[*(int *)(v32 + 32)], &v31[*(int *)(v32 + 32)], v96);
LABEL_36:
  uint64_t v75 = v17[7];
  uint64_t v76 = (uint64_t)&v15[v75];
  uint64_t v77 = &v16[v75];
  uint64_t v78 = type metadata accessor for CloudAssets_Asset.Protector(0);
  int v79 = _s10CloudAsset21UploadResponseMessageOwet_0(v76, 1, v78);
  int v80 = _s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v77, 1, v78);
  if (v79)
  {
    if (!v80)
    {
      long long v81 = *((_OWORD *)v77 + 1);
      *(_OWORD *)uint64_t v76 = *(_OWORD *)v77;
      *(_OWORD *)(v76 + 16) = v81;
      (*(void (**)(uint64_t, char *, uint64_t))(v97 + 32))(v76 + *(int *)(v78 + 24), &v77[*(int *)(v78 + 24)], v11);
      uint64_t v45 = v76;
      uint64_t v46 = v78;
LABEL_17:
      _s10CloudAsset21UploadResponseMessageOwst_0(v45, 0, 1, v46);
      goto LABEL_18;
    }
    goto LABEL_44;
  }
  if (v80)
  {
    sub_24A09FA68(v76, (void (*)(void))type metadata accessor for CloudAssets_Asset.Protector);
LABEL_44:
    size_t v26 = *(void *)(*(void *)(sub_24A08DF34(&qword_26975D500) - 8) + 64);
    int v27 = (void *)v76;
    uint64_t v28 = v77;
    goto LABEL_8;
  }
  uint64_t v89 = *(void *)v76;
  unint64_t v90 = *(void *)(v76 + 8);
  *(_OWORD *)uint64_t v76 = *(_OWORD *)v77;
  sub_24A08DEDC(v89, v90);
  uint64_t v91 = *(void *)(v76 + 16);
  unint64_t v92 = *(void *)(v76 + 24);
  *(_OWORD *)(v76 + 16) = *((_OWORD *)v77 + 1);
  sub_24A08DEDC(v91, v92);
  v13((char *)(v76 + *(int *)(v78 + 24)), &v77[*(int *)(v78 + 24)], v11);
LABEL_18:
  uint64_t v47 = *(int *)(v98 + 32);
  uint64_t v48 = (uint64_t)a1 + v47;
  uint64_t v49 = (uint64_t)a2 + v47;
  uint64_t v50 = type metadata accessor for CloudAssets_Credential(0);
  int v51 = _s10CloudAsset21UploadResponseMessageOwet_0(v48, 1, v50);
  int v52 = _s10CloudAsset21UploadResponseMessageOwet_0(v49, 1, v50);
  if (v51)
  {
    if (!v52)
    {
      long long v53 = *(_OWORD *)(v49 + 16);
      *(_OWORD *)uint64_t v48 = *(_OWORD *)v49;
      *(_OWORD *)(v48 + 16) = v53;
      *(_OWORD *)(v48 + 32) = *(_OWORD *)(v49 + 32);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v97 + 32))(v48 + *(int *)(v50 + 28), v49 + *(int *)(v50 + 28), v11);
      uint64_t v54 = *(int *)(v50 + 32);
      uint64_t v55 = (void *)(v48 + v54);
      unint64_t v56 = (const void *)(v49 + v54);
      uint64_t v57 = type metadata accessor for Google_Protobuf_Timestamp();
      if (_s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v56, 1, v57))
      {
        uint64_t v58 = sub_24A08DF34(&qword_26975D560);
        memcpy(v55, v56, *(void *)(*(void *)(v58 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v57 - 8) + 32))(v55, v56, v57);
        _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)v55, 0, 1, v57);
      }
      uint64_t v71 = v48;
      uint64_t v72 = v50;
      goto LABEL_31;
    }
    goto LABEL_24;
  }
  if (v52)
  {
    sub_24A09FA68(v48, (void (*)(void))type metadata accessor for CloudAssets_Credential);
LABEL_24:
    size_t v59 = *(void *)(*(void *)(sub_24A08DF34(&qword_26975D568) - 8) + 64);
    BOOL v60 = (void *)v48;
    uint64_t v61 = (const void *)v49;
    goto LABEL_25;
  }
  uint64_t v62 = *(void *)(v49 + 8);
  *(void *)uint64_t v48 = *(void *)v49;
  *(void *)(v48 + 8) = v62;
  swift_bridgeObjectRelease();
  uint64_t v63 = *(void *)(v49 + 24);
  *(void *)(v48 + 16) = *(void *)(v49 + 16);
  *(void *)(v48 + 24) = v63;
  swift_bridgeObjectRelease();
  uint64_t v64 = *(void *)(v49 + 40);
  *(void *)(v48 + 32) = *(void *)(v49 + 32);
  *(void *)(v48 + 40) = v64;
  swift_bridgeObjectRelease();
  v13((char *)(v48 + *(int *)(v50 + 28)), (char *)(v49 + *(int *)(v50 + 28)), v11);
  uint64_t v65 = *(int *)(v50 + 32);
  uint64_t v66 = v48 + v65;
  uint64_t v67 = v49 + v65;
  uint64_t v68 = type metadata accessor for Google_Protobuf_Timestamp();
  int v69 = _s10CloudAsset21UploadResponseMessageOwet_0(v66, 1, v68);
  int v70 = _s10CloudAsset21UploadResponseMessageOwet_0(v67, 1, v68);
  if (v69)
  {
    if (!v70)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v68 - 8) + 32))(v66, v67, v68);
      uint64_t v71 = v66;
      uint64_t v72 = v68;
LABEL_31:
      _s10CloudAsset21UploadResponseMessageOwst_0(v71, 0, 1, v72);
      return a1;
    }
  }
  else
  {
    uint64_t v82 = *(void *)(v68 - 8);
    if (!v70)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v82 + 40))(v66, v67, v68);
      return a1;
    }
    (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v66, v68);
  }
  size_t v59 = *(void *)(*(void *)(sub_24A08DF34(&qword_26975D560) - 8) + 64);
  BOOL v60 = (void *)v66;
  uint64_t v61 = (const void *)v67;
LABEL_25:
  memcpy(v60, v61, v59);
  return a1;
}

uint64_t sub_24A0AA458(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A0AA46C);
}

uint64_t sub_24A0AA46C()
{
  sub_24A0AAEC4();
  if (v3) {
    return sub_24A0AAE40(*(void *)(v1 + 8));
  }
  sub_24A0AAE74();
  sub_24A08F268();
  if (*(_DWORD *)(v5 + 84) == v0)
  {
    uint64_t v6 = *(int *)(v2 + 24);
  }
  else
  {
    sub_24A08DF34(&qword_26975D570);
    sub_24A08F268();
    if (*(_DWORD *)(v7 + 84) == v0)
    {
      sub_24A0AB1B4();
    }
    else
    {
      sub_24A08DF34(&qword_26975D568);
      sub_24A0AB1A8();
    }
  }
  uint64_t v8 = sub_24A0AAF58(v6);
  return _s10CloudAsset21UploadResponseMessageOwet_0(v8, v9, v10);
}

uint64_t sub_24A0AA518(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A0AA52C);
}

void sub_24A0AA52C()
{
  sub_24A0AAE2C();
  if (v4)
  {
    *(void *)(v1 + 8) = (v0 - 1);
  }
  else
  {
    sub_24A0AB060();
    sub_24A08F268();
    if (*(_DWORD *)(v5 + 84) == v3)
    {
      uint64_t v6 = *(int *)(v2 + 24);
    }
    else
    {
      sub_24A08DF34(&qword_26975D570);
      sub_24A08F268();
      if (*(_DWORD *)(v7 + 84) == v3)
      {
        sub_24A0AB190();
      }
      else
      {
        sub_24A08DF34(&qword_26975D568);
        sub_24A0AB184();
      }
    }
    uint64_t v8 = sub_24A0AAE64(v6);
    _s10CloudAsset21UploadResponseMessageOwst_0(v8, v9, v10, v11);
  }
}

void sub_24A0AA5D8()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    sub_24A09EFE8(319, &qword_26975D8E8, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset);
    if (v1 <= 0x3F)
    {
      sub_24A09EFE8(319, &qword_26975D718, (void (*)(uint64_t))type metadata accessor for CloudAssets_Credential);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void *sub_24A0AA720(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *int v3 = *a2;
    int v3 = (void *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    *(void *)(a1 + 16) = a2[2];
    uint64_t v5 = *(int *)(a3 + 24);
    uint64_t v6 = a1 + v5;
    uint64_t v7 = (uint64_t)a2 + v5;
    uint64_t v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t sub_24A0AA7FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 24);
  uint64_t v3 = type metadata accessor for UnknownStorage();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
  return v4(v2, v3);
}

uint64_t sub_24A0AA864(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

uint64_t sub_24A0AA8F0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 16) = a2[2];
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = (uint64_t)a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 24))(v6, v7, v8);
  return a1;
}

uint64_t sub_24A0AA97C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_24A0AAA08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t sub_24A0AAA94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A0AAAA8);
}

uint64_t sub_24A0AAAA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  return _s10CloudAsset21UploadResponseMessageOwet_0(v4, a2, v5);
}

uint64_t sub_24A0AAAF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A0AAB08);
}

uint64_t sub_24A0AAB08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 24);
  uint64_t v6 = type metadata accessor for UnknownStorage();
  return _s10CloudAsset21UploadResponseMessageOwst_0(v5, a2, a2, v6);
}

uint64_t sub_24A0AAB58()
{
  return sub_24A0AAB70();
}

uint64_t sub_24A0AAB70()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_24A0AAC04()
{
  unint64_t result = qword_26975D900;
  if (!qword_26975D900)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975D900);
  }
  return result;
}

unint64_t sub_24A0AAC54()
{
  unint64_t result = qword_26975D908;
  if (!qword_26975D908)
  {
    sub_24A08E008(&qword_26975D910);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975D908);
  }
  return result;
}

unint64_t sub_24A0AACAC()
{
  unint64_t result = qword_26975D918;
  if (!qword_26975D918)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975D918);
  }
  return result;
}

unint64_t sub_24A0AACFC()
{
  unint64_t result = qword_26975D920;
  if (!qword_26975D920)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975D920);
  }
  return result;
}

uint64_t sub_24A0AAD48()
{
  return dispatch thunk of Decoder.nextFieldNumber()();
}

uint64_t sub_24A0AAD70()
{
  return v0;
}

uint64_t sub_24A0AAD84()
{
  return v0;
}

uint64_t sub_24A0AADB8(uint64_t a1)
{
  return _s10CloudAsset21UploadResponseMessageOwet_0(a1, 1, v1);
}

uint64_t sub_24A0AAE14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _s10CloudAsset21UploadResponseMessageOwet_0(a1, a2, a3);
}

uint64_t sub_24A0AAE40@<X0>(unint64_t a1@<X8>)
{
  if (a1 >= 0xFFFFFFFF) {
    LODWORD(a1) = -1;
  }
  return (a1 + 1);
}

uint64_t sub_24A0AAE64@<X0>(uint64_t a1@<X8>)
{
  return v1 + a1;
}

uint64_t sub_24A0AAE74()
{
  return type metadata accessor for UnknownStorage();
}

uint64_t sub_24A0AAE90()
{
  return v0;
}

uint64_t sub_24A0AAEA4()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

uint64_t sub_24A0AAEEC()
{
  return v0;
}

void sub_24A0AAF10(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
}

uint64_t sub_24A0AAF24()
{
  return type metadata accessor for UnknownStorage();
}

uint64_t sub_24A0AAF40()
{
  return dispatch thunk of Decoder.nextFieldNumber()();
}

uint64_t sub_24A0AAF58@<X0>(uint64_t a1@<X8>)
{
  return v1 + a1;
}

uint64_t sub_24A0AAF64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270F44D88](a1, a2, a3, v4, v3);
}

uint64_t sub_24A0AAF80()
{
  return type metadata accessor for UnknownStorage();
}

uint64_t sub_24A0AAFB4()
{
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t sub_24A0AAFF4()
{
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t sub_24A0AB018()
{
  return v0;
}

uint64_t sub_24A0AB048()
{
  return v0;
}

uint64_t sub_24A0AB060()
{
  return type metadata accessor for UnknownStorage();
}

uint64_t sub_24A0AB07C()
{
  return v0;
}

uint64_t sub_24A0AB08C()
{
  return *(void *)v0;
}

uint64_t sub_24A0AB0A4()
{
  return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
}

uint64_t sub_24A0AB0D4()
{
  return v0;
}

BOOL sub_24A0AB0E0()
{
  return sub_24A0A2A30(v0, v1);
}

uint64_t sub_24A0AB104(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270F44D88](a1, a2, a3, v4, v3);
}

uint64_t sub_24A0AB124()
{
  return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
}

uint64_t sub_24A0AB144(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  return sub_24A0A4884(v6, v5, v8, v7, a5);
}

uint64_t sub_24A0AB164(uint64_t a1)
{
  return _s10CloudAsset21UploadResponseMessageOwst_0(v1, 1, 1, a1);
}

BOOL sub_24A0AB1E8(uint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v4 = a1 != 0;
  if ((a2 & 1) == 0) {
    uint64_t v4 = a1;
  }
  uint64_t v5 = a3 != 0;
  if ((a4 & 1) == 0) {
    uint64_t v5 = a3;
  }
  return v4 == v5;
}

void DownloadRequestMessage.hash(into:)(uint64_t a1)
{
  uint64_t v3 = *(void *)v1;
  Hasher._combine(_:)(*(unsigned __int8 *)(v1 + 8));
  sub_24A0B105C(a1, v3);
}

uint64_t static DownloadRequestMessage.== infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(unsigned __int8 *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = *((unsigned __int8 *)a2 + 8);
  if ((v3 & 1) == 0)
  {
    if ((v5 & 1) == 0)
    {
      j__swift_bridgeObjectRetain(*a2, 0);
      j__swift_bridgeObjectRetain(v2, 0);
      char v6 = sub_24A0AB488(v2, v4);
      uint64_t v3 = 0;
      uint64_t v5 = 0;
      goto LABEL_7;
    }
    goto LABEL_5;
  }
  if ((v5 & 1) == 0)
  {
LABEL_5:
    j__swift_bridgeObjectRetain(*a2, *((unsigned __int8 *)a2 + 8));
    j__swift_bridgeObjectRetain(v2, v3);
    char v6 = 0;
    goto LABEL_7;
  }
  uint64_t v3 = 1;
  j__swift_bridgeObjectRetain(*a2, 1);
  j__swift_bridgeObjectRetain(v2, 1);
  char v6 = sub_24A0AB488(v2, v4);
  uint64_t v5 = 1;
LABEL_7:
  j__swift_bridgeObjectRelease(v2, v3);
  j__swift_bridgeObjectRelease(v4, v5);
  return v6 & 1;
}

uint64_t sub_24A0AB34C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = (unsigned char *)(a1 + 40);
    uint64_t v4 = (char *)(a2 + 40);
    do
    {
      char v5 = *v4;
      if (*v3)
      {
        if (!*v4) {
          return 0;
        }
      }
      else
      {
        if (*((void *)v3 - 1) != *((void *)v4 - 1)) {
          char v5 = 1;
        }
        if (v5) {
          return 0;
        }
      }
      v3 += 16;
      v4 += 16;
      --v2;
    }
    while (v2);
  }
  return 1;
}

uint64_t sub_24A0AB3B8(void *a1, void *a2)
{
  unint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t result = a1[4];
  if (result != a2[4] || a1[5] != a2[5])
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = 0;
    if ((v7 & 1) == 0) {
      return result;
    }
  }
  if (v2 == 1) {
    return 1;
  }
  uint64_t v8 = a2 + 7;
  uint64_t v9 = a1 + 7;
  unint64_t v10 = 1;
  while (v10 < v2)
  {
    uint64_t result = *(v9 - 1);
    if (result != *(v8 - 1) || *v9 != *v8)
    {
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0) {
        return 0;
      }
    }
    ++v10;
    v8 += 2;
    v9 += 2;
    if (v2 == v10) {
      return 1;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_24A0AB488(uint64_t a1, uint64_t a2)
{
  __s1[3] = *MEMORY[0x263EF8340];
  v217 = (int *)type metadata accessor for AssetDownloadRequest();
  uint64_t v4 = MEMORY[0x270FA5388](v217);
  char v6 = (char *)&v198 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v9 = (char *)&v198 - v8;
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v10 || a1 == a2) {
    return 1;
  }
  v214 = v6;
  uint64_t v215 = 0;
  unint64_t v11 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v206 = *(void *)(v7 + 72);
  uint64_t v207 = a1;
  uint64_t v208 = a2;
  while (2)
  {
    uint64_t v210 = v10;
    sub_24A0B2458(a1 + v11, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for AssetDownloadRequest);
    unint64_t v209 = v11;
    sub_24A0B2458(a2 + v11, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for AssetDownloadRequest);
    if ((static UUID.== infix(_:_:)() & 1) == 0) {
      goto LABEL_245;
    }
    uint64_t v12 = v217[5];
    uint64_t v13 = *(void *)&v9[v12];
    uint64_t v14 = *(void *)&v9[v12 + 8];
    int v15 = &v6[v12];
    BOOL v16 = v13 == *(void *)v15 && v14 == *((void *)v15 + 1);
    if (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      goto LABEL_245;
    }
    if ((MEMORY[0x24C5BACC0](&v9[v217[6]], &v6[v217[6]]) & 1) == 0) {
      goto LABEL_245;
    }
    uint64_t v17 = v217[7];
    int v18 = &v9[v17];
    v216 = &v6[v17];
    if ((MEMORY[0x24C5BACC0](&v9[v17]) & 1) == 0) {
      goto LABEL_245;
    }
    unint64_t v19 = type metadata accessor for Asset.ID(0);
    uint64_t v20 = *(int *)(v19 + 20);
    uint64_t v21 = *(void *)&v18[v20];
    uint64_t v22 = *(void *)&v18[v20 + 8];
    long long v23 = &v216[v20];
    BOOL v24 = v21 == *(void *)v23 && v22 == *((void *)v23 + 1);
    if (!v24 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      goto LABEL_245;
    }
    uint64_t v25 = *(int *)(v19 + 24);
    uint64_t v26 = *(void *)&v18[v25];
    unint64_t v27 = *(void *)&v18[v25 + 8];
    uint64_t v28 = (uint64_t *)&v216[v25];
    uint64_t v30 = *v28;
    unint64_t v29 = v28[1];
    uint64_t v31 = 0;
    switch(v27 >> 62)
    {
      case 1uLL:
        LODWORD(v31) = HIDWORD(v26) - v26;
        if (__OFSUB__(HIDWORD(v26), v26)) {
          goto LABEL_248;
        }
        uint64_t v31 = (int)v31;
LABEL_23:
        switch(v29 >> 62)
        {
          case 1uLL:
            LODWORD(v35) = HIDWORD(v30) - v30;
            if (__OFSUB__(HIDWORD(v30), v30)) {
              goto LABEL_249;
            }
            uint64_t v35 = (int)v35;
LABEL_32:
            if (v31 != v35) {
              goto LABEL_245;
            }
            if (v31 < 1) {
              goto LABEL_52;
            }
            break;
          case 2uLL:
            uint64_t v37 = *(void *)(v30 + 16);
            uint64_t v36 = *(void *)(v30 + 24);
            BOOL v34 = __OFSUB__(v36, v37);
            uint64_t v35 = v36 - v37;
            if (!v34) {
              goto LABEL_32;
            }
            goto LABEL_250;
          case 3uLL:
            if (v31) {
              goto LABEL_245;
            }
            goto LABEL_52;
          default:
            uint64_t v35 = BYTE6(v29);
            goto LABEL_32;
        }
        break;
      case 2uLL:
        uint64_t v33 = *(void *)(v26 + 16);
        uint64_t v32 = *(void *)(v26 + 24);
        BOOL v34 = __OFSUB__(v32, v33);
        uint64_t v31 = v32 - v33;
        if (!v34) {
          goto LABEL_23;
        }
        __break(1u);
LABEL_248:
        __break(1u);
LABEL_249:
        __break(1u);
LABEL_250:
        __break(1u);
LABEL_251:
        __break(1u);
LABEL_252:
        __break(1u);
LABEL_253:
        __break(1u);
LABEL_254:
        __break(1u);
LABEL_255:
        __break(1u);
LABEL_256:
        __break(1u);
LABEL_257:
        __break(1u);
LABEL_258:
        __break(1u);
LABEL_259:
        __break(1u);
LABEL_260:
        __break(1u);
LABEL_261:
        __break(1u);
LABEL_262:
        __break(1u);
LABEL_263:
        __break(1u);
LABEL_264:
        __break(1u);
LABEL_265:
        __break(1u);
LABEL_266:
        __break(1u);
LABEL_267:
        __break(1u);
LABEL_268:
        __break(1u);
LABEL_269:
        __break(1u);
LABEL_270:
        __break(1u);
LABEL_271:
        __break(1u);
LABEL_272:
        __break(1u);
LABEL_273:
        __break(1u);
LABEL_274:
        __break(1u);
LABEL_275:
        __break(1u);
        goto LABEL_276;
      case 3uLL:
        goto LABEL_23;
      default:
        uint64_t v31 = BYTE6(v27);
        goto LABEL_23;
    }
    switch(v27 >> 62)
    {
      case 1uLL:
        v205 = v18;
        if (v26 >> 32 < (int)v26) {
          goto LABEL_271;
        }
        sub_24A08DE84(v30, v29);
        sub_24A08DE84(v30, v29);
        sub_24A08DE84(v30, v29);
        sub_24A08DE84(v26, v27);
        uint64_t v47 = __DataStorage._bytes.getter();
        if (!v47) {
          goto LABEL_50;
        }
        uint64_t v48 = __DataStorage._offset.getter();
        if (__OFSUB__((int)v26, v48)) {
          goto LABEL_281;
        }
        v47 += (int)v26 - v48;
LABEL_50:
        __DataStorage._length.getter();
        uint64_t v49 = v215;
        sub_24A0B0AF8(v47, v30, v29, (BOOL *)__s1);
        sub_24A08DEDC(v30, v29);
        uint64_t v215 = v49;
        if (v49)
        {
          sub_24A08DEDC(v30, v29);
          sub_24A08DEDC(v30, v29);
          uint64_t v196 = v26;
          unint64_t v197 = v27;
          goto LABEL_302;
        }
        sub_24A08DEDC(v26, v27);
        sub_24A08DEDC(v30, v29);
        char v50 = __s1[0];
        sub_24A08DEDC(v30, v29);
        char v6 = v214;
        int v18 = v205;
        if ((v50 & 1) == 0) {
          goto LABEL_245;
        }
LABEL_52:
        uint64_t v51 = *(int *)(v19 + 28);
        uint64_t v52 = *(void *)&v18[v51];
        unint64_t v53 = *(void *)&v18[v51 + 8];
        uint64_t v54 = (uint64_t *)&v216[v51];
        uint64_t v55 = *v54;
        unint64_t v19 = v54[1];
        uint64_t v56 = 0;
        switch(v53 >> 62)
        {
          case 1uLL:
            LODWORD(v56) = HIDWORD(v52) - v52;
            if (__OFSUB__(HIDWORD(v52), v52)) {
              goto LABEL_251;
            }
            uint64_t v56 = (int)v56;
LABEL_57:
            switch(v19 >> 62)
            {
              case 1uLL:
                LODWORD(v59) = HIDWORD(v55) - v55;
                if (__OFSUB__(HIDWORD(v55), v55)) {
                  goto LABEL_254;
                }
                uint64_t v59 = (int)v59;
LABEL_66:
                if (v56 != v59) {
                  goto LABEL_245;
                }
                if (v56 < 1) {
                  goto LABEL_86;
                }
                break;
              case 2uLL:
                uint64_t v61 = *(void *)(v55 + 16);
                uint64_t v60 = *(void *)(v55 + 24);
                BOOL v34 = __OFSUB__(v60, v61);
                uint64_t v59 = v60 - v61;
                if (!v34) {
                  goto LABEL_66;
                }
                goto LABEL_253;
              case 3uLL:
                if (v56) {
                  goto LABEL_245;
                }
                goto LABEL_86;
              default:
                uint64_t v59 = BYTE6(v19);
                goto LABEL_66;
            }
            break;
          case 2uLL:
            uint64_t v58 = *(void *)(v52 + 16);
            uint64_t v57 = *(void *)(v52 + 24);
            BOOL v34 = __OFSUB__(v57, v58);
            uint64_t v56 = v57 - v58;
            if (!v34) {
              goto LABEL_57;
            }
            goto LABEL_252;
          case 3uLL:
            goto LABEL_57;
          default:
            uint64_t v56 = BYTE6(v53);
            goto LABEL_57;
        }
        switch(v53 >> 62)
        {
          case 1uLL:
            if (v52 >> 32 < (int)v52) {
              goto LABEL_273;
            }
            sub_24A08DE84(v55, v19);
            sub_24A08DE84(v55, v19);
            sub_24A08DE84(v55, v19);
            sub_24A08DE84(v52, v53);
            uint64_t v70 = __DataStorage._bytes.getter();
            if (!v70) {
              goto LABEL_84;
            }
            uint64_t v71 = __DataStorage._offset.getter();
            if (__OFSUB__((int)v52, v71)) {
              goto LABEL_283;
            }
            v70 += (int)v52 - v71;
LABEL_84:
            __DataStorage._length.getter();
            uint64_t v72 = v215;
            sub_24A0B0AF8(v70, v55, v19, (BOOL *)__s1);
            sub_24A08DEDC(v55, v19);
            uint64_t v215 = v72;
            if (v72)
            {
              sub_24A08DEDC(v55, v19);
              sub_24A08DEDC(v55, v19);
              uint64_t v196 = v52;
              unint64_t v197 = v53;
              goto LABEL_302;
            }
            sub_24A08DEDC(v52, v53);
            sub_24A08DEDC(v55, v19);
            char v73 = __s1[0];
            sub_24A08DEDC(v55, v19);
            char v6 = v214;
            if ((v73 & 1) == 0) {
              goto LABEL_245;
            }
LABEL_86:
            uint64_t v74 = type metadata accessor for Asset(0);
            uint64_t v75 = *(int *)(v74 + 20);
            uint64_t v77 = *(void *)&v18[v75];
            unint64_t v76 = *(void *)&v18[v75 + 8];
            uint64_t v79 = *(void *)&v18[v75 + 16];
            unint64_t v78 = *(void *)&v18[v75 + 24];
            int v80 = (uint64_t *)&v216[v75];
            uint64_t v82 = *v80;
            unint64_t v81 = v80[1];
            uint64_t v83 = v80[2];
            unint64_t v19 = v80[3];
            uint64_t v84 = 0;
            switch(v76 >> 62)
            {
              case 1uLL:
                LODWORD(v84) = HIDWORD(v77) - v77;
                if (__OFSUB__(HIDWORD(v77), v77)) {
                  goto LABEL_256;
                }
                uint64_t v84 = (int)v84;
                break;
              case 2uLL:
                uint64_t v86 = *(void *)(v77 + 16);
                uint64_t v85 = *(void *)(v77 + 24);
                BOOL v34 = __OFSUB__(v85, v86);
                uint64_t v84 = v85 - v86;
                if (!v34) {
                  goto LABEL_91;
                }
                goto LABEL_255;
              case 3uLL:
                goto LABEL_91;
              default:
                uint64_t v84 = BYTE6(v76);
                goto LABEL_91;
            }
            break;
          case 2uLL:
            uint64_t v62 = v18;
            unint64_t v39 = v53 & 0x3FFFFFFFFFFFFFFFLL;
            uint64_t v63 = *(void *)(v52 + 16);
            uint64_t v64 = *(void *)(v52 + 24);
            sub_24A08DE84(v55, v19);
            sub_24A08DE84(v55, v19);
            sub_24A08DE84(v55, v19);
            swift_retain();
            swift_retain();
            uint64_t v65 = __DataStorage._bytes.getter();
            if (!v65) {
              goto LABEL_73;
            }
            uint64_t v66 = __DataStorage._offset.getter();
            if (__OFSUB__(v63, v66)) {
              goto LABEL_282;
            }
            v65 += v63 - v66;
LABEL_73:
            if (__OFSUB__(v64, v63)) {
              goto LABEL_274;
            }
            __DataStorage._length.getter();
            uint64_t v67 = v215;
            sub_24A0B0AF8(v65, v55, v19, (BOOL *)__s1);
            sub_24A08DEDC(v55, v19);
            uint64_t v215 = v67;
            if (v67)
            {
              sub_24A08DEDC(v55, v19);
              sub_24A08DEDC(v55, v19);
              goto LABEL_293;
            }
            swift_release();
            swift_release();
            char v68 = __s1[0];
            sub_24A08DEDC(v55, v19);
            sub_24A08DEDC(v55, v19);
            char v6 = v214;
            int v18 = v62;
            if ((v68 & 1) == 0) {
              goto LABEL_245;
            }
            goto LABEL_86;
          case 3uLL:
            memset(__s1, 0, 14);
            sub_24A08DE84(v55, v19);
            sub_24A08DE84(v55, v19);
            goto LABEL_78;
          default:
            __s1[0] = v52;
            LOWORD(__s1[1]) = v53;
            BYTE2(__s1[1]) = BYTE2(v53);
            BYTE3(__s1[1]) = BYTE3(v53);
            BYTE4(__s1[1]) = BYTE4(v53);
            BYTE5(__s1[1]) = BYTE5(v53);
            sub_24A08DE84(v55, v19);
            sub_24A08DE84(v55, v19);
LABEL_78:
            uint64_t v69 = v215;
            sub_24A0B0AF8((uint64_t)__s1, v55, v19, &v218);
            uint64_t v215 = v69;
            sub_24A08DEDC(v55, v19);
            sub_24A08DEDC(v55, v19);
            char v6 = v214;
            if (!v218) {
              goto LABEL_245;
            }
            goto LABEL_86;
        }
        break;
      case 2uLL:
        long long v38 = v18;
        unint64_t v39 = v27 & 0x3FFFFFFFFFFFFFFFLL;
        uint64_t v40 = *(void *)(v26 + 16);
        uint64_t v41 = *(void *)(v26 + 24);
        sub_24A08DE84(v30, v29);
        sub_24A08DE84(v30, v29);
        sub_24A08DE84(v30, v29);
        swift_retain();
        swift_retain();
        uint64_t v42 = __DataStorage._bytes.getter();
        if (!v42) {
          goto LABEL_39;
        }
        uint64_t v43 = __DataStorage._offset.getter();
        if (__OFSUB__(v40, v43)) {
          goto LABEL_280;
        }
        v42 += v40 - v43;
LABEL_39:
        if (__OFSUB__(v41, v40)) {
          goto LABEL_272;
        }
        __DataStorage._length.getter();
        uint64_t v44 = v215;
        sub_24A0B0AF8(v42, v30, v29, (BOOL *)__s1);
        sub_24A08DEDC(v30, v29);
        uint64_t v215 = v44;
        if (v44)
        {
          sub_24A08DEDC(v30, v29);
          uint64_t v194 = v30;
          unint64_t v195 = v29;
          goto LABEL_292;
        }
        swift_release();
        swift_release();
        char v45 = __s1[0];
        sub_24A08DEDC(v30, v29);
        sub_24A08DEDC(v30, v29);
        char v6 = v214;
        int v18 = v38;
        if ((v45 & 1) == 0) {
          goto LABEL_245;
        }
        goto LABEL_52;
      case 3uLL:
        memset(__s1, 0, 14);
        sub_24A08DE84(v30, v29);
        sub_24A08DE84(v30, v29);
        goto LABEL_44;
      default:
        __s1[0] = v26;
        LOWORD(__s1[1]) = v27;
        BYTE2(__s1[1]) = BYTE2(v27);
        BYTE3(__s1[1]) = BYTE3(v27);
        BYTE4(__s1[1]) = BYTE4(v27);
        BYTE5(__s1[1]) = BYTE5(v27);
        sub_24A08DE84(v30, v29);
        sub_24A08DE84(v30, v29);
LABEL_44:
        uint64_t v46 = v215;
        sub_24A0B0AF8((uint64_t)__s1, v30, v29, &v218);
        uint64_t v215 = v46;
        sub_24A08DEDC(v30, v29);
        sub_24A08DEDC(v30, v29);
        char v6 = v214;
        if (!v218) {
          goto LABEL_245;
        }
        goto LABEL_52;
    }
LABEL_91:
    unint64_t v212 = v76;
    unint64_t v213 = v78;
    uint64_t v211 = v74;
    switch(v81 >> 62)
    {
      case 1uLL:
        LODWORD(v87) = HIDWORD(v82) - v82;
        if (__OFSUB__(HIDWORD(v82), v82)) {
          goto LABEL_258;
        }
        uint64_t v87 = (int)v87;
LABEL_100:
        if (v84 != v87) {
          goto LABEL_245;
        }
        if (v84 < 1)
        {
LABEL_104:
          sub_24A08DE84(v77, v76);
          sub_24A08DE84(v79, v78);
          sub_24A08DE84(v82, v81);
          sub_24A08DE84(v83, v19);
LABEL_122:
          uint64_t v105 = 0;
          switch(v213 >> 62)
          {
            case 1uLL:
              LODWORD(v105) = HIDWORD(v79) - v79;
              if (__OFSUB__(HIDWORD(v79), v79)) {
                goto LABEL_260;
              }
              uint64_t v105 = (int)v105;
              break;
            case 2uLL:
              uint64_t v107 = *(void *)(v79 + 16);
              uint64_t v106 = *(void *)(v79 + 24);
              BOOL v34 = __OFSUB__(v106, v107);
              uint64_t v105 = v106 - v107;
              if (!v34) {
                break;
              }
              goto LABEL_259;
            case 3uLL:
              break;
            default:
              uint64_t v105 = BYTE6(v213);
              break;
          }
          switch(v19 >> 62)
          {
            case 1uLL:
              LODWORD(v108) = HIDWORD(v83) - v83;
              if (__OFSUB__(HIDWORD(v83), v83)) {
                goto LABEL_262;
              }
              uint64_t v108 = (int)v108;
LABEL_136:
              if (v105 != v108) {
                goto LABEL_244;
              }
              if (v105 < 1)
              {
LABEL_140:
                sub_24A08DEDC(v82, v81);
                sub_24A08DEDC(v83, v19);
                sub_24A08DEDC(v77, v212);
                sub_24A08DEDC(v79, v213);
                uint64_t v112 = v211;
              }
              else
              {
                unint64_t v111 = v213;
                switch(v213 >> 62)
                {
                  case 1uLL:
                    v205 = v18;
                    if (v79 >> 32 < (int)v79) {
                      goto LABEL_277;
                    }
                    uint64_t v200 = (int)v79;
                    unint64_t v39 = v213;
                    sub_24A08DE84(v83, v19);
                    sub_24A08DE84(v83, v19);
                    sub_24A08DE84(v83, v19);
                    sub_24A08DE84(v79, v39);
                    uint64_t v122 = v215;
                    char v123 = sub_24A0B0D20(v200, v79 >> 32, v39 & 0x3FFFFFFFFFFFFFFFLL, v83, v19);
                    uint64_t v215 = v122;
                    if (v122)
                    {
                      sub_24A08DEDC(v83, v19);
                      sub_24A08DEDC(v83, v19);
                      uint64_t v196 = v79;
                      goto LABEL_300;
                    }
                    char v118 = v123;
                    sub_24A08DEDC(v79, v39);
                    sub_24A08DEDC(v82, v81);
                    sub_24A08DEDC(v83, v19);
                    sub_24A08DEDC(v77, v212);
                    uint64_t v119 = v79;
                    unint64_t v120 = v39;
LABEL_150:
                    sub_24A08DEDC(v119, v120);
                    sub_24A08DEDC(v83, v19);
                    sub_24A08DEDC(v83, v19);
                    char v6 = v214;
                    int v18 = v205;
                    uint64_t v112 = v211;
                    if ((v118 & 1) == 0) {
                      goto LABEL_245;
                    }
                    break;
                  case 2uLL:
                    v205 = v18;
                    unint64_t v39 = v213 & 0x3FFFFFFFFFFFFFFFLL;
                    uint64_t v113 = *(void *)(v79 + 16);
                    uint64_t v114 = *(void *)(v79 + 24);
                    sub_24A08DE84(v83, v19);
                    sub_24A08DE84(v83, v19);
                    sub_24A08DE84(v83, v19);
                    swift_retain();
                    swift_retain();
                    uint64_t v115 = v114;
                    uint64_t v116 = v215;
                    char v117 = sub_24A0B0D20(v113, v115, v39, v83, v19);
                    uint64_t v215 = v116;
                    if (v116)
                    {
                      sub_24A08DEDC(v83, v19);
                      sub_24A08DEDC(v83, v19);
                      swift_release();
                      goto LABEL_298;
                    }
                    char v118 = v117;
                    swift_release();
                    swift_release();
                    sub_24A08DEDC(v82, v81);
                    sub_24A08DEDC(v83, v19);
                    sub_24A08DEDC(v77, v212);
                    uint64_t v119 = v79;
                    unint64_t v120 = v213;
                    goto LABEL_150;
                  case 3uLL:
                    memset(__s1, 0, 14);
                    sub_24A08DE84(v83, v19);
                    sub_24A08DE84(v83, v19);
                    goto LABEL_144;
                  default:
                    __s1[0] = v79;
                    LOWORD(__s1[1]) = v213;
                    *(_DWORD *)((char *)&__s1[1] + 2) = *(_DWORD *)((char *)&v213 + 2);
                    sub_24A08DE84(v83, v19);
                    sub_24A08DE84(v83, v19);
LABEL_144:
                    uint64_t v121 = v215;
                    sub_24A0B0AF8((uint64_t)__s1, v83, v19, &v218);
                    uint64_t v215 = v121;
                    if (v121)
                    {
                      sub_24A08DEDC(v83, v19);
                      uint64_t v196 = v83;
                      unint64_t v197 = v19;
                      goto LABEL_302;
                    }
                    sub_24A08DEDC(v82, v81);
                    sub_24A08DEDC(v83, v19);
                    sub_24A08DEDC(v77, v212);
                    sub_24A08DEDC(v79, v111);
                    sub_24A08DEDC(v83, v19);
                    sub_24A08DEDC(v83, v19);
                    char v6 = v214;
                    uint64_t v112 = v211;
                    if (!v218) {
                      goto LABEL_245;
                    }
                    break;
                }
              }
              if (*(void *)&v18[*(int *)(v112 + 24)] != *(void *)&v216[*(int *)(v112 + 24)]) {
                goto LABEL_245;
              }
              uint64_t v124 = v217[8];
              v125 = &v9[v124];
              char v126 = v9[v124 + 16];
              v127 = &v6[v124];
              if (v126)
              {
                if ((v127[16] & 1) == 0) {
                  goto LABEL_245;
                }
              }
              else
              {
                if (v127[16]) {
                  goto LABEL_245;
                }
                uint64_t v129 = *(void *)v125;
                uint64_t v128 = *((void *)v125 + 1);
                uint64_t v131 = *(void *)v127;
                uint64_t v130 = *((void *)v127 + 1);
                if (v129 != v131 || v128 != v130) {
                  goto LABEL_245;
                }
              }
              if ((MEMORY[0x24C5BACC0](&v9[v217[9]], &v6[v217[9]]) & 1) == 0) {
                goto LABEL_245;
              }
              uint64_t v133 = v217[10];
              v134 = &v9[v133];
              v135 = &v6[v133];
              BOOL v136 = *(void *)&v9[v133] == *(void *)&v6[v133]
                  && *(void *)&v9[v133 + 8] == *(void *)&v6[v133 + 8];
              if (!v136 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
                goto LABEL_245;
              }
              BOOL v137 = *((void *)v134 + 2) == *((void *)v135 + 2) && *((void *)v134 + 3) == *((void *)v135 + 3);
              if (!v137 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
                goto LABEL_245;
              }
              BOOL v138 = *((void *)v134 + 4) == *((void *)v135 + 4) && *((void *)v134 + 5) == *((void *)v135 + 5);
              if (!v138 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
                goto LABEL_245;
              }
              type metadata accessor for Credential(0);
              if ((static Date.== infix(_:_:)() & 1) == 0) {
                goto LABEL_245;
              }
              uint64_t v139 = v217[11];
              uint64_t v140 = *(void *)&v9[v139];
              unint64_t v141 = *(void *)&v9[v139 + 8];
              v142 = (unint64_t *)&v6[v139];
              unint64_t v19 = *v142;
              unint64_t v39 = v142[1];
              uint64_t v143 = 0;
              switch(v141 >> 62)
              {
                case 1uLL:
                  LODWORD(v143) = HIDWORD(v140) - v140;
                  if (__OFSUB__(HIDWORD(v140), v140)) {
                    goto LABEL_264;
                  }
                  uint64_t v143 = (int)v143;
LABEL_183:
                  switch(v39 >> 62)
                  {
                    case 1uLL:
                      LODWORD(v146) = HIDWORD(v19) - v19;
                      if (__OFSUB__(HIDWORD(v19), v19)) {
                        goto LABEL_266;
                      }
                      uint64_t v146 = (int)v146;
LABEL_192:
                      if (v143 != v146) {
                        goto LABEL_245;
                      }
                      if (v143 < 1) {
                        goto LABEL_205;
                      }
                      break;
                    case 2uLL:
                      uint64_t v148 = *(void *)(v19 + 16);
                      uint64_t v147 = *(void *)(v19 + 24);
                      BOOL v34 = __OFSUB__(v147, v148);
                      uint64_t v146 = v147 - v148;
                      if (!v34) {
                        goto LABEL_192;
                      }
                      goto LABEL_265;
                    case 3uLL:
                      if (v143) {
                        goto LABEL_245;
                      }
                      goto LABEL_205;
                    default:
                      uint64_t v146 = BYTE6(v39);
                      goto LABEL_192;
                  }
                  break;
                case 2uLL:
                  uint64_t v145 = *(void *)(v140 + 16);
                  uint64_t v144 = *(void *)(v140 + 24);
                  BOOL v34 = __OFSUB__(v144, v145);
                  uint64_t v143 = v144 - v145;
                  if (!v34) {
                    goto LABEL_183;
                  }
                  goto LABEL_263;
                case 3uLL:
                  goto LABEL_183;
                default:
                  uint64_t v143 = BYTE6(v141);
                  goto LABEL_183;
              }
              sub_24A08DE84(v19, v39);
              sub_24A08DE84(v19, v39);
              unint64_t v150 = v203;
              unint64_t v149 = v204;
              switch(v141 >> 62)
              {
                case 1uLL:
                  if (v140 >> 32 < (int)v140) {
                    goto LABEL_278;
                  }
                  sub_24A08DE84(v19, v39);
                  sub_24A08DE84(v19, v39);
                  sub_24A08DE84(v19, v39);
                  sub_24A08DE84(v140, v141);
                  uint64_t v162 = v215;
                  char v163 = sub_24A0B0D20((int)v140, v140 >> 32, v141 & 0x3FFFFFFFFFFFFFFFLL, v19, v39);
                  uint64_t v215 = v162;
                  if (v162)
                  {
LABEL_301:
                    sub_24A08DEDC(v19, v39);
                    sub_24A08DEDC(v19, v39);
                    sub_24A08DEDC(v19, v39);
                    sub_24A08DEDC(v19, v39);
                    uint64_t v196 = v140;
                    unint64_t v197 = v141;
                    goto LABEL_302;
                  }
                  BOOL v154 = v163;
                  sub_24A08DEDC(v140, v141);
LABEL_204:
                  char v6 = v214;
                  sub_24A08DEDC(v19, v39);
                  sub_24A08DEDC(v19, v39);
                  sub_24A08DEDC(v19, v39);
                  sub_24A08DEDC(v19, v39);
                  if (!v154) {
                    goto LABEL_245;
                  }
LABEL_205:
                  uint64_t v164 = v217[12];
                  uint64_t v140 = *(void *)&v9[v164];
                  unint64_t v141 = *(void *)&v9[v164 + 8];
                  v165 = (unint64_t *)&v6[v164];
                  unint64_t v19 = *v165;
                  unint64_t v39 = v165[1];
                  uint64_t v166 = 0;
                  switch(v141 >> 62)
                  {
                    case 1uLL:
                      LODWORD(v166) = HIDWORD(v140) - v140;
                      if (__OFSUB__(HIDWORD(v140), v140)) {
                        goto LABEL_268;
                      }
                      uint64_t v166 = (int)v166;
                      break;
                    case 2uLL:
                      uint64_t v168 = *(void *)(v140 + 16);
                      uint64_t v167 = *(void *)(v140 + 24);
                      BOOL v34 = __OFSUB__(v167, v168);
                      uint64_t v166 = v167 - v168;
                      if (!v34) {
                        break;
                      }
                      goto LABEL_267;
                    case 3uLL:
                      break;
                    default:
                      uint64_t v166 = BYTE6(v141);
                      break;
                  }
                  switch(v39 >> 62)
                  {
                    case 1uLL:
                      LODWORD(v169) = HIDWORD(v19) - v19;
                      if (__OFSUB__(HIDWORD(v19), v19)) {
                        goto LABEL_269;
                      }
                      uint64_t v169 = (int)v169;
LABEL_219:
                      if (v166 != v169) {
                        goto LABEL_245;
                      }
                      if (v166 >= 1)
                      {
                        sub_24A08DE84(v19, v39);
                        sub_24A08DE84(v19, v39);
                        unint64_t v172 = v202;
                        unint64_t v173 = v201;
                        switch(v141 >> 62)
                        {
                          case 1uLL:
                            if (v140 >> 32 < (int)v140) {
                              goto LABEL_279;
                            }
                            sub_24A08DE84(v19, v39);
                            sub_24A08DE84(v19, v39);
                            sub_24A08DE84(v19, v39);
                            sub_24A08DE84(v140, v141);
                            uint64_t v185 = v215;
                            char v186 = sub_24A0B0D20((int)v140, v140 >> 32, v141 & 0x3FFFFFFFFFFFFFFFLL, v19, v39);
                            uint64_t v215 = v185;
                            if (v185) {
                              goto LABEL_301;
                            }
                            BOOL v177 = v186;
                            sub_24A08DEDC(v140, v141);
LABEL_231:
                            char v6 = v214;
                            sub_24A08DEDC(v19, v39);
                            sub_24A08DEDC(v19, v39);
                            sub_24A08DEDC(v19, v39);
                            sub_24A08DEDC(v19, v39);
                            if (v177) {
                              break;
                            }
                            goto LABEL_245;
                          case 2uLL:
                            uint64_t v178 = *(void *)(v140 + 16);
                            uint64_t v179 = *(void *)(v140 + 24);
                            sub_24A08DE84(v19, v39);
                            sub_24A08DE84(v19, v39);
                            sub_24A08DE84(v19, v39);
                            swift_retain();
                            swift_retain();
                            uint64_t v180 = v215;
                            char v181 = sub_24A0B0D20(v178, v179, v141 & 0x3FFFFFFFFFFFFFFFLL, v19, v39);
                            uint64_t v215 = v180;
                            if (v180) {
                              goto LABEL_297;
                            }
                            BOOL v177 = v181;
                            swift_release();
                            swift_release();
                            goto LABEL_231;
                          case 3uLL:
                            sub_24A08DE84(v19, v39);
                            sub_24A08DE84(v19, v39);
                            sub_24A08DE84(v19, v39);
                            unint64_t v182 = v172 & 0xFF00000000000000;
                            uint64_t v183 = v215;
                            BOOL v184 = sub_24A0B0E8C(0, v182, v19, v39);
                            uint64_t v215 = v183;
                            if (v183) {
                              goto LABEL_299;
                            }
                            BOOL v177 = v184;
                            unint64_t v202 = v182;
                            goto LABEL_231;
                          default:
                            sub_24A08DE84(v19, v39);
                            sub_24A08DE84(v19, v39);
                            sub_24A08DE84(v19, v39);
                            unint64_t v174 = v173 & 0xFF00000000000000 | v141 & 0xFFFFFFFFFFFFFFLL;
                            uint64_t v175 = v215;
                            BOOL v176 = sub_24A0B0E8C(v140, v174, v19, v39);
                            uint64_t v215 = v175;
                            if (v175) {
                              goto LABEL_299;
                            }
                            BOOL v177 = v176;
                            unint64_t v201 = v174;
                            goto LABEL_231;
                        }
                      }
LABEL_232:
                      uint64_t v187 = v217[13];
                      v188 = &v9[v187];
                      uint64_t v189 = *(void *)&v9[v187 + 8];
                      v190 = &v6[v187];
                      uint64_t v191 = *((void *)v190 + 1);
                      if (v189)
                      {
                        if (!v191) {
                          goto LABEL_245;
                        }
                        BOOL v192 = *(void *)v188 == *(void *)v190 && v189 == v191;
                        if (!v192 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
                          goto LABEL_245;
                        }
                      }
                      else if (v191)
                      {
                        goto LABEL_245;
                      }
                      sub_24A0B24C0((uint64_t)v6, (void (*)(void))type metadata accessor for AssetDownloadRequest);
                      sub_24A0B24C0((uint64_t)v9, (void (*)(void))type metadata accessor for AssetDownloadRequest);
                      a1 = v207;
                      unint64_t v11 = v209 + v206;
                      uint64_t result = 1;
                      uint64_t v10 = v210 - 1;
                      a2 = v208;
                      if (v210 == 1) {
                        return result;
                      }
                      break;
                    case 2uLL:
                      uint64_t v171 = *(void *)(v19 + 16);
                      uint64_t v170 = *(void *)(v19 + 24);
                      BOOL v34 = __OFSUB__(v170, v171);
                      uint64_t v169 = v170 - v171;
                      if (!v34) {
                        goto LABEL_219;
                      }
                      goto LABEL_270;
                    case 3uLL:
                      if (v166) {
                        goto LABEL_245;
                      }
                      goto LABEL_232;
                    default:
                      uint64_t v169 = BYTE6(v39);
                      goto LABEL_219;
                  }
                  break;
                case 2uLL:
                  uint64_t v155 = *(void *)(v140 + 16);
                  uint64_t v156 = *(void *)(v140 + 24);
                  sub_24A08DE84(v19, v39);
                  sub_24A08DE84(v19, v39);
                  sub_24A08DE84(v19, v39);
                  swift_retain();
                  swift_retain();
                  uint64_t v157 = v215;
                  char v158 = sub_24A0B0D20(v155, v156, v141 & 0x3FFFFFFFFFFFFFFFLL, v19, v39);
                  uint64_t v215 = v157;
                  if (v157)
                  {
LABEL_297:
                    sub_24A08DEDC(v19, v39);
                    sub_24A08DEDC(v19, v39);
                    sub_24A08DEDC(v19, v39);
                    sub_24A08DEDC(v19, v39);
                    swift_release();
                    goto LABEL_298;
                  }
                  BOOL v154 = v158;
                  swift_release();
                  swift_release();
                  goto LABEL_204;
                case 3uLL:
                  sub_24A08DE84(v19, v39);
                  sub_24A08DE84(v19, v39);
                  sub_24A08DE84(v19, v39);
                  unint64_t v159 = v149 & 0xFF00000000000000;
                  uint64_t v160 = v215;
                  BOOL v161 = sub_24A0B0E8C(0, v159, v19, v39);
                  uint64_t v215 = v160;
                  if (v160) {
                    goto LABEL_299;
                  }
                  BOOL v154 = v161;
                  unint64_t v204 = v159;
                  goto LABEL_204;
                default:
                  sub_24A08DE84(v19, v39);
                  sub_24A08DE84(v19, v39);
                  sub_24A08DE84(v19, v39);
                  unint64_t v151 = v150 & 0xFF00000000000000 | v141 & 0xFFFFFFFFFFFFFFLL;
                  uint64_t v152 = v215;
                  BOOL v153 = sub_24A0B0E8C(v140, v151, v19, v39);
                  uint64_t v215 = v152;
                  if (v152) {
                    goto LABEL_299;
                  }
                  BOOL v154 = v153;
                  unint64_t v203 = v151;
                  goto LABEL_204;
              }
              break;
            case 2uLL:
              uint64_t v110 = *(void *)(v83 + 16);
              uint64_t v109 = *(void *)(v83 + 24);
              BOOL v34 = __OFSUB__(v109, v110);
              uint64_t v108 = v109 - v110;
              if (!v34) {
                goto LABEL_136;
              }
              goto LABEL_261;
            case 3uLL:
              if (v105) {
                goto LABEL_244;
              }
              goto LABEL_140;
            default:
              uint64_t v108 = BYTE6(v19);
              goto LABEL_136;
          }
          continue;
        }
        switch(v76 >> 62)
        {
          case 1uLL:
            v205 = v18;
            uint64_t v200 = v77 >> 32;
            if (v77 >> 32 < (int)v77) {
              goto LABEL_275;
            }
            v199 = v9;
            unint64_t v98 = v76;
            sub_24A08DE84(v82, v81);
            sub_24A08DE84(v82, v81);
            sub_24A08DE84(v82, v81);
            sub_24A08DE84(v77, v98);
            sub_24A08DE84(v79, v78);
            sub_24A08DE84(v82, v81);
            sub_24A08DE84(v83, v19);
            sub_24A08DE84(v77, v98);
            uint64_t v99 = __DataStorage._bytes.getter();
            if (!v99) {
              goto LABEL_115;
            }
            uint64_t v100 = __DataStorage._offset.getter();
            if (__OFSUB__((int)v77, v100)) {
              goto LABEL_285;
            }
            v99 += (int)v77 - v100;
LABEL_115:
            __DataStorage._length.getter();
            uint64_t v101 = v215;
            sub_24A0B0AF8(v99, v82, v81, (BOOL *)__s1);
            sub_24A08DEDC(v82, v81);
            uint64_t v215 = v101;
            if (v101)
            {
              sub_24A08DEDC(v82, v81);
              sub_24A08DEDC(v82, v81);
              uint64_t v196 = v77;
              unint64_t v197 = v212;
              goto LABEL_302;
            }
            sub_24A08DEDC(v77, v212);
            sub_24A08DEDC(v82, v81);
            char v102 = __s1[0];
            sub_24A08DEDC(v82, v81);
            char v6 = v214;
            int v18 = v205;
            uint64_t v9 = v199;
            if ((v102 & 1) == 0) {
              goto LABEL_244;
            }
            goto LABEL_122;
          case 2uLL:
            v205 = v18;
            unint64_t v39 = v76 & 0x3FFFFFFFFFFFFFFFLL;
            uint64_t v200 = *(void *)(v77 + 16);
            v199 = *(char **)(v77 + 24);
            unint64_t v92 = v76;
            sub_24A08DE84(v82, v81);
            sub_24A08DE84(v82, v81);
            sub_24A08DE84(v82, v81);
            sub_24A08DE84(v77, v92);
            sub_24A08DE84(v79, v78);
            sub_24A08DE84(v82, v81);
            sub_24A08DE84(v83, v19);
            swift_retain();
            swift_retain();
            uint64_t v93 = __DataStorage._bytes.getter();
            if (v93)
            {
              uint64_t v94 = __DataStorage._offset.getter();
              uint64_t v95 = v200;
              if (__OFSUB__(v200, v94)) {
                goto LABEL_284;
              }
              v93 += v200 - v94;
            }
            else
            {
              uint64_t v95 = v200;
            }
            if (__OFSUB__(v199, v95))
            {
LABEL_276:
              __break(1u);
LABEL_277:
              __break(1u);
LABEL_278:
              __break(1u);
LABEL_279:
              __break(1u);
LABEL_280:
              __break(1u);
LABEL_281:
              __break(1u);
LABEL_282:
              __break(1u);
LABEL_283:
              __break(1u);
LABEL_284:
              __break(1u);
LABEL_285:
              __break(1u);
            }
            __DataStorage._length.getter();
            uint64_t v103 = v215;
            sub_24A0B0AF8(v93, v82, v81, (BOOL *)__s1);
            sub_24A08DEDC(v82, v81);
            uint64_t v215 = v103;
            if (v103)
            {
              sub_24A08DEDC(v82, v81);
              uint64_t v194 = v82;
              unint64_t v195 = v81;
LABEL_292:
              sub_24A08DEDC(v194, v195);
LABEL_293:
              swift_release();
LABEL_298:
              swift_release();
              __break(1u);
LABEL_299:
              sub_24A08DEDC(v19, v39);
              sub_24A08DEDC(v19, v39);
              sub_24A08DEDC(v19, v39);
              uint64_t v196 = v19;
LABEL_300:
              unint64_t v197 = v39;
LABEL_302:
              sub_24A08DEDC(v196, v197);
              __break(1u);
              JUMPOUT(0x24A0AD178);
            }
            swift_release();
            swift_release();
            char v104 = __s1[0];
            sub_24A08DEDC(v82, v81);
            sub_24A08DEDC(v82, v81);
            char v6 = v214;
            int v18 = v205;
            if (v104) {
              goto LABEL_122;
            }
LABEL_244:
            sub_24A08DEDC(v82, v81);
            sub_24A08DEDC(v83, v19);
            sub_24A08DEDC(v77, v212);
            sub_24A08DEDC(v79, v213);
LABEL_245:
            sub_24A0B24C0((uint64_t)v6, (void (*)(void))type metadata accessor for AssetDownloadRequest);
            sub_24A0B24C0((uint64_t)v9, (void (*)(void))type metadata accessor for AssetDownloadRequest);
            break;
          case 3uLL:
            memset(__s1, 0, 14);
            unint64_t v96 = v76;
            sub_24A08DE84(v82, v81);
            sub_24A08DE84(v82, v81);
            sub_24A08DE84(v77, v96);
            sub_24A08DE84(v79, v78);
            sub_24A08DE84(v82, v81);
            sub_24A08DE84(v83, v19);
            goto LABEL_109;
          default:
            __s1[0] = v77;
            LOWORD(__s1[1]) = v76;
            BYTE2(__s1[1]) = BYTE2(v76);
            BYTE3(__s1[1]) = BYTE3(v76);
            BYTE4(__s1[1]) = BYTE4(v76);
            BYTE5(__s1[1]) = BYTE5(v76);
            unint64_t v90 = v78;
            v205 = (char *)__s1 + BYTE6(v76);
            unint64_t v91 = v76;
            sub_24A08DE84(v82, v81);
            sub_24A08DE84(v82, v81);
            sub_24A08DE84(v77, v91);
            sub_24A08DE84(v79, v90);
            sub_24A08DE84(v82, v81);
            sub_24A08DE84(v83, v19);
LABEL_109:
            uint64_t v97 = v215;
            sub_24A0B0AF8((uint64_t)__s1, v82, v81, &v218);
            uint64_t v215 = v97;
            sub_24A08DEDC(v82, v81);
            sub_24A08DEDC(v82, v81);
            char v6 = v214;
            if (!v218) {
              goto LABEL_244;
            }
            goto LABEL_122;
        }
        return 0;
      case 2uLL:
        uint64_t v89 = *(void *)(v82 + 16);
        uint64_t v88 = *(void *)(v82 + 24);
        BOOL v34 = __OFSUB__(v88, v89);
        uint64_t v87 = v88 - v89;
        if (!v34) {
          goto LABEL_100;
        }
        goto LABEL_257;
      case 3uLL:
        if (v84) {
          goto LABEL_245;
        }
        goto LABEL_104;
      default:
        uint64_t v87 = BYTE6(v81);
        goto LABEL_100;
    }
  }
}

void sub_24A0AD298()
{
  sub_24A0AAFDC();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  v204[3] = *MEMORY[0x263EF8340];
  uint64_t v201 = type metadata accessor for AssetSkeleton();
  sub_24A0B25A4();
  MEMORY[0x270FA5388](v4);
  sub_24A0B27B4();
  uint64_t v7 = v5 - v6;
  MEMORY[0x270FA5388](v8);
  unint64_t v11 = (char *)&v190 - v10;
  uint64_t v12 = *(void *)(v3 + 16);
  if (v12 != *(void *)(v1 + 16) || !v12 || v3 == v1) {
    goto LABEL_265;
  }
  unint64_t v202 = 0;
  unint64_t v13 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v192 = *(void *)(v9 + 72);
  uint64_t v193 = v3;
  uint64_t v194 = v1;
  uint64_t v195 = v7;
  v199 = (char *)&v190 - v10;
  while (2)
  {
    uint64_t v197 = v12;
    sub_24A0B2458(v3 + v13, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for AssetSkeleton);
    unint64_t v196 = v13;
    sub_24A0B2458(v1 + v13, v7, (uint64_t (*)(void))type metadata accessor for AssetSkeleton);
    if ((MEMORY[0x24C5BACC0](v11, v7) & 1) == 0) {
      goto LABEL_264;
    }
    unint64_t v14 = type metadata accessor for Asset.ID(0);
    uint64_t v15 = *(int *)(v14 + 20);
    uint64_t v16 = *(void *)&v11[v15];
    uint64_t v17 = *(void *)&v11[v15 + 8];
    int v18 = (void *)(v7 + v15);
    BOOL v19 = v16 == *v18 && v17 == v18[1];
    if (!v19 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      goto LABEL_264;
    }
    uint64_t v20 = *(int *)(v14 + 24);
    uint64_t v21 = *(void *)&v11[v20];
    unint64_t v22 = *(void *)&v11[v20 + 8];
    long long v23 = (unint64_t *)(v7 + v20);
    unint64_t v25 = *v23;
    unint64_t v24 = v23[1];
    uint64_t v26 = 0;
    switch(v22 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v21), v21)) {
          goto LABEL_267;
        }
        uint64_t v26 = HIDWORD(v21) - (int)v21;
LABEL_16:
        unint64_t v29 = v24 >> 62;
        unint64_t v30 = HIDWORD(v25);
        size_t v31 = BYTE6(v24);
        switch(v24 >> 62)
        {
          case 1uLL:
            LODWORD(v32) = HIDWORD(v25) - v25;
            if (__OFSUB__(HIDWORD(v25), v25)) {
              goto LABEL_268;
            }
            uint64_t v32 = (int)v32;
LABEL_25:
            if (v26 != v32) {
              goto LABEL_264;
            }
            if (v26 < 1) {
              goto LABEL_81;
            }
            break;
          case 2uLL:
            uint64_t v34 = *(void *)(v25 + 16);
            uint64_t v33 = *(void *)(v25 + 24);
            BOOL v35 = __OFSUB__(v33, v34);
            uint64_t v32 = v33 - v34;
            if (!v35) {
              goto LABEL_25;
            }
            goto LABEL_269;
          case 3uLL:
            if (v26) {
              goto LABEL_264;
            }
            goto LABEL_81;
          default:
            uint64_t v32 = BYTE6(v24);
            goto LABEL_25;
        }
        break;
      case 2uLL:
        uint64_t v28 = *(void *)(v21 + 16);
        uint64_t v27 = *(void *)(v21 + 24);
        uint64_t v26 = v27 - v28;
        if (!__OFSUB__(v27, v28)) {
          goto LABEL_16;
        }
        __break(1u);
LABEL_267:
        __break(1u);
LABEL_268:
        __break(1u);
LABEL_269:
        __break(1u);
LABEL_270:
        __break(1u);
LABEL_271:
        __break(1u);
LABEL_272:
        __break(1u);
LABEL_273:
        __break(1u);
LABEL_274:
        __break(1u);
LABEL_275:
        __break(1u);
LABEL_276:
        __break(1u);
LABEL_277:
        __break(1u);
LABEL_278:
        __break(1u);
LABEL_279:
        __break(1u);
LABEL_280:
        __break(1u);
LABEL_281:
        __break(1u);
LABEL_282:
        __break(1u);
LABEL_283:
        __break(1u);
LABEL_284:
        __break(1u);
LABEL_285:
        __break(1u);
LABEL_286:
        __break(1u);
LABEL_287:
        __break(1u);
LABEL_288:
        __break(1u);
LABEL_289:
        __break(1u);
LABEL_290:
        __break(1u);
LABEL_291:
        __break(1u);
LABEL_292:
        __break(1u);
LABEL_293:
        __break(1u);
LABEL_294:
        __break(1u);
LABEL_295:
        __break(1u);
LABEL_296:
        __break(1u);
LABEL_297:
        __break(1u);
LABEL_298:
        __break(1u);
LABEL_299:
        __break(1u);
LABEL_300:
        __break(1u);
LABEL_301:
        __break(1u);
LABEL_302:
        __break(1u);
LABEL_303:
        __break(1u);
LABEL_304:
        __break(1u);
LABEL_305:
        __break(1u);
        goto LABEL_306;
      case 3uLL:
        goto LABEL_16;
      default:
        uint64_t v26 = BYTE6(v22);
        goto LABEL_16;
    }
    uint64_t v36 = (uint64_t)v25 >> 32;
    unint64_t v37 = v25 >> 8;
    unint64_t v38 = v25 >> 16;
    unint64_t v39 = v25 >> 24;
    unint64_t v40 = v25 >> 40;
    unint64_t v41 = HIWORD(v25);
    unint64_t v42 = HIBYTE(v25);
    unint64_t v43 = v24 >> 8;
    unint64_t v44 = v24 >> 16;
    unint64_t v45 = v24 >> 24;
    unint64_t v46 = HIDWORD(v24);
    unint64_t v47 = v24 >> 40;
    switch(v22 >> 62)
    {
      case 1uLL:
        if (v21 >> 32 < (int)v21) {
          goto LABEL_290;
        }
        sub_24A0B267C();
        sub_24A0B267C();
        sub_24A0B267C();
        sub_24A08DE84(v21, v22);
        uint64_t v60 = __DataStorage._bytes.getter();
        if (!v60) {
          goto LABEL_58;
        }
        uint64_t v61 = __DataStorage._offset.getter();
        if (__OFSUB__((int)v21, v61)) {
          goto LABEL_302;
        }
        v60 += (int)v21 - v61;
LABEL_58:
        __DataStorage._length.getter();
        unint64_t v62 = v202;
        sub_24A0B0AF8(v60, v25, v24, (BOOL *)v204);
        sub_24A0B263C();
        unint64_t v202 = v62;
        if (v62)
        {
          sub_24A0B263C();
          sub_24A0B263C();
          uint64_t v186 = v21;
          unint64_t v187 = v22;
          goto LABEL_337;
        }
        sub_24A08DEDC(v21, v22);
        sub_24A0B263C();
        char v55 = v204[0];
        sub_24A0B263C();
        uint64_t v7 = v195;
LABEL_60:
        unint64_t v11 = v199;
        if ((v55 & 1) == 0) {
          goto LABEL_264;
        }
        goto LABEL_81;
      case 2uLL:
        uint64_t v50 = *(void *)(v21 + 16);
        uint64_t v51 = *(void *)(v21 + 24);
        sub_24A0B267C();
        sub_24A0B267C();
        sub_24A0B267C();
        swift_retain();
        swift_retain();
        uint64_t v52 = __DataStorage._bytes.getter();
        if (!v52) {
          goto LABEL_39;
        }
        uint64_t v53 = __DataStorage._offset.getter();
        if (__OFSUB__(v50, v53)) {
          goto LABEL_301;
        }
        v52 += v50 - v53;
LABEL_39:
        if (__OFSUB__(v51, v50)) {
          goto LABEL_291;
        }
        __DataStorage._length.getter();
        unint64_t v54 = v202;
        sub_24A0B0AF8(v52, v25, v24, (BOOL *)v204);
        sub_24A0B263C();
        uint64_t v7 = v195;
        unint64_t v202 = v54;
        if (v54) {
          goto LABEL_323;
        }
        swift_release();
        swift_release();
        char v55 = v204[0];
        sub_24A0B263C();
        sub_24A0B263C();
        goto LABEL_60;
      case 3uLL:
        sub_24A0B2824();
        if (!v56) {
          goto LABEL_62;
        }
        if (v56 == 1)
        {
          if (v36 < (int)v25) {
            goto LABEL_312;
          }
          sub_24A0B267C();
          uint64_t v21 = __DataStorage._bytes.getter();
          if (v21)
          {
            uint64_t v57 = __DataStorage._offset.getter();
            if (__OFSUB__((int)v25, v57)) {
              goto LABEL_318;
            }
            v21 += (int)v25 - v57;
          }
          uint64_t v49 = __DataStorage._length.getter();
          if (!v21)
          {
            __break(1u);
LABEL_320:
            __break(1u);
LABEL_321:
            __break(1u);
LABEL_322:
            __break(1u);
LABEL_323:
            sub_24A0B263C();
            sub_24A0B263C();
            goto LABEL_332;
          }
LABEL_49:
          if (v49 >= v36 - (int)v25) {
            size_t v58 = v36 - (int)v25;
          }
          else {
            size_t v58 = v49;
          }
          int v59 = memcmp(v204, (const void *)v21, v58);
          sub_24A0B263C();
          uint64_t v7 = v195;
          if (v59) {
            goto LABEL_264;
          }
        }
        else
        {
          uint64_t v68 = *(void *)(v25 + 16);
          uint64_t v69 = *(void *)(v25 + 24);
          sub_24A0B267C();
          swift_retain();
          swift_retain();
          uint64_t v66 = (char *)__DataStorage._bytes.getter();
          if (v66)
          {
            uint64_t v70 = __DataStorage._offset.getter();
            uint64_t v7 = v195;
            if (__OFSUB__(v68, v70)) {
              goto LABEL_316;
            }
            v66 += v68 - v70;
          }
          else
          {
            uint64_t v7 = v195;
          }
          BOOL v35 = __OFSUB__(v69, v68);
          int64_t v71 = v69 - v68;
          if (v35) {
            goto LABEL_313;
          }
          uint64_t v72 = __DataStorage._length.getter();
          if (!v66) {
            goto LABEL_320;
          }
LABEL_77:
          if (v72 >= v71) {
            size_t v73 = v71;
          }
          else {
            size_t v73 = v72;
          }
          uint64_t v21 = memcmp(v204, v66, v73);
          swift_release();
          swift_release();
          sub_24A0B263C();
          unint64_t v11 = v199;
          if (v21) {
            goto LABEL_264;
          }
        }
LABEL_81:
        sub_24A0B2724();
        switch(v77)
        {
          case 1:
            LODWORD(v76) = v75 - v25;
            if (__OFSUB__(v75, v25)) {
              goto LABEL_270;
            }
            uint64_t v76 = (int)v76;
LABEL_86:
            switch(v14 >> 62)
            {
              case 1uLL:
                LODWORD(v80) = HIDWORD(v24) - v24;
                if (__OFSUB__(HIDWORD(v24), v24)) {
                  goto LABEL_273;
                }
                uint64_t v80 = (int)v80;
LABEL_95:
                if (v76 != v80) {
                  goto LABEL_264;
                }
                if (v76 < 1) {
                  goto LABEL_114;
                }
                break;
              case 2uLL:
                uint64_t v82 = *(void *)(v24 + 16);
                uint64_t v81 = *(void *)(v24 + 24);
                BOOL v35 = __OFSUB__(v81, v82);
                uint64_t v80 = v81 - v82;
                if (!v35) {
                  goto LABEL_95;
                }
                goto LABEL_272;
              case 3uLL:
                if (v76) {
                  goto LABEL_264;
                }
                goto LABEL_114;
              default:
                uint64_t v80 = BYTE6(v14);
                goto LABEL_95;
            }
            break;
          case 2:
            uint64_t v79 = *(void *)(v25 + 16);
            uint64_t v78 = *(void *)(v25 + 24);
            BOOL v35 = __OFSUB__(v78, v79);
            uint64_t v76 = v78 - v79;
            if (!v35) {
              goto LABEL_86;
            }
            goto LABEL_271;
          case 3:
            goto LABEL_86;
          default:
            uint64_t v76 = BYTE6(v21);
            goto LABEL_86;
        }
        break;
      default:
        v204[0] = v21;
        LOWORD(v204[1]) = v22;
        BYTE2(v204[1]) = BYTE2(v22);
        BYTE3(v204[1]) = BYTE3(v22);
        BYTE4(v204[1]) = BYTE4(v22);
        BYTE5(v204[1]) = BYTE5(v22);
        if (!v29)
        {
LABEL_62:
          v203[0] = v25;
          v203[1] = v37;
          v203[2] = v38;
          v203[3] = v39;
          v203[4] = v30;
          v203[5] = v40;
          v203[6] = v41;
          v203[7] = v42;
          v203[8] = v24;
          v203[9] = v43;
          v203[10] = v44;
          v203[11] = v45;
          v203[12] = v46;
          v203[13] = v47;
          int v63 = memcmp(v204, v203, v31);
          uint64_t v7 = v195;
          if (v63) {
            goto LABEL_264;
          }
          goto LABEL_81;
        }
        if (v29 == 1)
        {
          if (v36 < (int)v25) {
            goto LABEL_311;
          }
          sub_24A0B267C();
          uint64_t v21 = __DataStorage._bytes.getter();
          if (v21)
          {
            uint64_t v48 = __DataStorage._offset.getter();
            if (__OFSUB__((int)v25, v48)) {
              goto LABEL_317;
            }
            v21 += (int)v25 - v48;
          }
          uint64_t v49 = __DataStorage._length.getter();
          if (!v21) {
            goto LABEL_322;
          }
          goto LABEL_49;
        }
        uint64_t v64 = *(void *)(v25 + 16);
        uint64_t v65 = *(void *)(v25 + 24);
        sub_24A0B267C();
        swift_retain();
        swift_retain();
        uint64_t v66 = (char *)__DataStorage._bytes.getter();
        if (v66)
        {
          uint64_t v67 = __DataStorage._offset.getter();
          uint64_t v7 = v195;
          if (__OFSUB__(v64, v67)) {
            goto LABEL_315;
          }
          v66 += v64 - v67;
        }
        else
        {
          uint64_t v7 = v195;
        }
        BOOL v35 = __OFSUB__(v65, v64);
        int64_t v71 = v65 - v64;
        if (v35) {
          goto LABEL_314;
        }
        uint64_t v72 = __DataStorage._length.getter();
        if (!v66) {
          goto LABEL_321;
        }
        goto LABEL_77;
    }
    switch(v74)
    {
      case 1:
        if ((uint64_t)v25 >> 32 < (int)v25) {
          goto LABEL_292;
        }
        sub_24A0B2544();
        sub_24A0B2544();
        sub_24A0B2544();
        sub_24A08DE84(v25, v21);
        uint64_t v89 = __DataStorage._bytes.getter();
        if (!v89) {
          goto LABEL_111;
        }
        uint64_t v90 = __DataStorage._offset.getter();
        if (__OFSUB__((int)v25, v90)) {
          goto LABEL_304;
        }
        v89 += (int)v25 - v90;
LABEL_111:
        __DataStorage._length.getter();
        sub_24A0B25C0(v89, (BOOL *)v204);
        sub_24A0B252C();
        unint64_t v202 = (unint64_t)v11;
        if (v11)
        {
LABEL_333:
          sub_24A0B252C();
          sub_24A0B252C();
          uint64_t v186 = v25;
          unint64_t v187 = v21;
          goto LABEL_337;
        }
        sub_24A08DEDC(v25, v21);
        sub_24A0B252C();
        char v88 = v204[0];
        sub_24A0B252C();
        uint64_t v7 = v195;
        goto LABEL_113;
      case 2:
        uint64_t v85 = *(void *)(v25 + 16);
        uint64_t v86 = *(void *)(v25 + 24);
        sub_24A0B2544();
        sub_24A0B2544();
        sub_24A0B2544();
        swift_retain();
        swift_retain();
        if (__DataStorage._bytes.getter() && __OFSUB__(v85, __DataStorage._offset.getter())) {
          goto LABEL_303;
        }
        BOOL v35 = __OFSUB__(v86, v85);
        unint64_t v87 = v86 - v85;
        if (v35) {
          goto LABEL_293;
        }
        __DataStorage._length.getter();
        sub_24A0B255C();
        sub_24A0B252C();
        unint64_t v202 = v87;
        if (v87)
        {
LABEL_330:
          sub_24A0B252C();
          uint64_t v188 = v24;
          unint64_t v189 = v14;
LABEL_331:
          sub_24A08DEDC(v188, v189);
          goto LABEL_332;
        }
        swift_release();
        swift_release();
        char v88 = v204[0];
        sub_24A0B252C();
        sub_24A0B252C();
LABEL_113:
        unint64_t v11 = v199;
        if ((v88 & 1) == 0) {
          goto LABEL_264;
        }
LABEL_114:
        uint64_t v91 = type metadata accessor for Asset(0);
        uint64_t v92 = *(int *)(v91 + 20);
        uint64_t v94 = *(void *)&v11[v92];
        unint64_t v93 = *(void *)&v11[v92 + 8];
        unint64_t v25 = *(void *)&v11[v92 + 16];
        unint64_t v95 = *(void *)&v11[v92 + 24];
        unint64_t v96 = (unint64_t *)(v7 + v92);
        unint64_t v24 = *v96;
        unint64_t v14 = v96[1];
        uint64_t v98 = v96[2];
        unint64_t v97 = v96[3];
        uint64_t v21 = v91;
        uint64_t v99 = 0;
        switch(v93 >> 62)
        {
          case 1uLL:
            LODWORD(v99) = HIDWORD(v94) - v94;
            if (__OFSUB__(HIDWORD(v94), v94)) {
              goto LABEL_275;
            }
            uint64_t v99 = (int)v99;
            break;
          case 2uLL:
            uint64_t v101 = *(void *)(v94 + 16);
            uint64_t v100 = *(void *)(v94 + 24);
            BOOL v35 = __OFSUB__(v100, v101);
            uint64_t v99 = v100 - v101;
            if (!v35) {
              goto LABEL_119;
            }
            goto LABEL_274;
          case 3uLL:
            goto LABEL_119;
          default:
            uint64_t v99 = BYTE6(v93);
            goto LABEL_119;
        }
        break;
      case 3:
        memset(v204, 0, 14);
        sub_24A0B2544();
        sub_24A0B2544();
        uint64_t v83 = sub_24A0B2654();
        goto LABEL_105;
      default:
        LOWORD(v204[0]) = v25;
        BYTE2(v204[0]) = BYTE2(v25);
        BYTE3(v204[0]) = BYTE3(v25);
        BYTE4(v204[0]) = v75;
        BYTE5(v204[0]) = BYTE5(v25);
        BYTE6(v204[0]) = BYTE6(v25);
        HIBYTE(v204[0]) = HIBYTE(v25);
        LOWORD(v204[1]) = v21;
        BYTE2(v204[1]) = BYTE2(v21);
        BYTE3(v204[1]) = BYTE3(v21);
        BYTE4(v204[1]) = BYTE4(v21);
        BYTE5(v204[1]) = BYTE5(v21);
        sub_24A0B2544();
        sub_24A0B2544();
        uint64_t v83 = sub_24A0B2830();
LABEL_105:
        sub_24A0B25C0(v83, v84);
        unint64_t v202 = (unint64_t)v11;
        unint64_t v11 = v199;
        sub_24A0B252C();
        sub_24A0B252C();
        if ((v203[0] & 1) == 0) {
          goto LABEL_264;
        }
        goto LABEL_114;
    }
LABEL_119:
    unint64_t v200 = v95;
    unint64_t v198 = v93;
    switch(v14 >> 62)
    {
      case 1uLL:
        LODWORD(v102) = HIDWORD(v24) - v24;
        if (__OFSUB__(HIDWORD(v24), v24)) {
          goto LABEL_277;
        }
        uint64_t v102 = (int)v102;
LABEL_128:
        if (v99 != v102) {
          goto LABEL_264;
        }
        if (v99 < 1)
        {
LABEL_132:
          sub_24A08DE84(v94, v93);
          sub_24A08DE84(v25, v95);
          sub_24A0B2544();
          sub_24A0B260C();
LABEL_149:
          uint64_t v124 = 0;
          switch(v200 >> 62)
          {
            case 1uLL:
              LODWORD(v124) = HIDWORD(v25) - v25;
              if (__OFSUB__(HIDWORD(v25), v25)) {
                goto LABEL_279;
              }
              uint64_t v124 = (int)v124;
              break;
            case 2uLL:
              uint64_t v126 = *(void *)(v25 + 16);
              uint64_t v125 = *(void *)(v25 + 24);
              BOOL v35 = __OFSUB__(v125, v126);
              uint64_t v124 = v125 - v126;
              if (!v35) {
                break;
              }
              goto LABEL_278;
            case 3uLL:
              break;
            default:
              uint64_t v124 = BYTE6(v200);
              break;
          }
          switch(v97 >> 62)
          {
            case 1uLL:
              LODWORD(v127) = HIDWORD(v98) - v98;
              if (__OFSUB__(HIDWORD(v98), v98)) {
                goto LABEL_280;
              }
              uint64_t v127 = (int)v127;
LABEL_163:
              if (v124 != v127) {
                goto LABEL_263;
              }
              if (v124 >= 1)
              {
                unint64_t v130 = v200;
                switch(v200 >> 62)
                {
                  case 1uLL:
                    uint64_t v191 = v21;
                    if ((uint64_t)v25 >> 32 < (int)v25) {
                      goto LABEL_296;
                    }
                    unint64_t v139 = v200;
                    sub_24A0B260C();
                    sub_24A0B260C();
                    sub_24A0B260C();
                    sub_24A08DE84(v25, v139);
                    if (__DataStorage._bytes.getter() && __OFSUB__((int)v25, __DataStorage._offset.getter())) {
                      goto LABEL_308;
                    }
                    __DataStorage._length.getter();
                    sub_24A0B26F4();
                    sub_24A0B25DC();
                    unint64_t v202 = (int)v25;
                    if (v25)
                    {
                      sub_24A0B25DC();
                      sub_24A0B25DC();
                      uint64_t v186 = v25;
                      unint64_t v187 = v200;
                      goto LABEL_337;
                    }
                    unint64_t v140 = v200;
                    sub_24A08DEDC(v25, v200);
                    sub_24A0B252C();
                    sub_24A0B25DC();
                    unint64_t v14 = LOBYTE(v204[0]);
                    sub_24A0B27C4();
                    sub_24A08DEDC(v25, v140);
                    sub_24A0B25DC();
                    sub_24A0B25DC();
                    uint64_t v7 = v195;
                    unint64_t v11 = v199;
                    uint64_t v21 = v191;
                    if ((v14 & 1) == 0) {
                      goto LABEL_264;
                    }
                    goto LABEL_183;
                  case 2uLL:
                    uint64_t v191 = v21;
                    uint64_t v134 = *(void *)(v25 + 16);
                    uint64_t v135 = *(void *)(v25 + 24);
                    sub_24A0B260C();
                    sub_24A0B260C();
                    sub_24A0B260C();
                    swift_retain();
                    swift_retain();
                    if (__DataStorage._bytes.getter() && __OFSUB__(v134, __DataStorage._offset.getter())) {
                      goto LABEL_307;
                    }
                    BOOL v35 = __OFSUB__(v135, v134);
                    unint64_t v136 = v135 - v134;
                    if (v35) {
                      goto LABEL_297;
                    }
                    __DataStorage._length.getter();
                    sub_24A0B26F4();
                    sub_24A0B25DC();
                    uint64_t v7 = v195;
                    unint64_t v202 = v136;
                    if (!v136)
                    {
                      swift_release();
                      swift_release();
                      char v137 = v204[0];
                      sub_24A0B252C();
                      sub_24A0B25DC();
                      sub_24A0B27C4();
                      sub_24A08DEDC(v25, v200);
                      sub_24A0B25DC();
                      sub_24A0B25DC();
                      unint64_t v11 = v199;
                      uint64_t v21 = v191;
                      if ((v137 & 1) == 0) {
                        goto LABEL_264;
                      }
                      goto LABEL_183;
                    }
                    sub_24A0B25DC();
                    uint64_t v188 = v98;
                    unint64_t v189 = v97;
                    break;
                  case 3uLL:
                    sub_24A0B2824();
                    sub_24A0B260C();
                    sub_24A0B260C();
                    uint64_t v133 = (void *)sub_24A0B2654();
                    goto LABEL_175;
                  default:
                    LOWORD(v204[0]) = v25;
                    BYTE2(v204[0]) = BYTE2(v25);
                    BYTE3(v204[0]) = BYTE3(v25);
                    BYTE4(v204[0]) = BYTE4(v25);
                    sub_24A0B2934(SBYTE6(v25));
                    HIBYTE(v204[0]) = v131;
                    LOBYTE(v204[1]) = v130;
                    sub_24A0B2928(SBYTE1(v130));
                    sub_24A0B2850(SBYTE5(v130));
                    sub_24A0B260C();
                    sub_24A0B260C();
                    v132 = v203;
                    uint64_t v133 = v204;
LABEL_175:
                    unint64_t v138 = v202;
                    sub_24A0B0AF8((uint64_t)v133, v98, v97, v132);
                    unint64_t v202 = v138;
                    if (v138)
                    {
                      sub_24A0B25DC();
                      uint64_t v186 = v98;
                      unint64_t v187 = v97;
                      goto LABEL_337;
                    }
                    sub_24A0B252C();
                    sub_24A0B25DC();
                    sub_24A0B27C4();
                    sub_24A08DEDC(v25, v130);
                    sub_24A0B25DC();
                    sub_24A0B25DC();
                    unint64_t v11 = v199;
                    if ((v203[0] & 1) == 0) {
                      goto LABEL_264;
                    }
                    goto LABEL_183;
                }
                goto LABEL_331;
              }
LABEL_167:
              sub_24A0B252C();
              sub_24A0B25DC();
              sub_24A0B27C4();
              sub_24A08DEDC(v25, v200);
LABEL_183:
              if (*(void *)&v11[*(int *)(v21 + 24)] != *(void *)(v7 + *(int *)(v21 + 24))) {
                goto LABEL_264;
              }
              sub_24A0B2724();
              switch(v144)
              {
                case 1:
                  LODWORD(v143) = v142 - v25;
                  if (__OFSUB__(v142, v25)) {
                    goto LABEL_282;
                  }
                  uint64_t v143 = (int)v143;
LABEL_189:
                  switch(v14 >> 62)
                  {
                    case 1uLL:
                      LODWORD(v147) = HIDWORD(v24) - v24;
                      if (__OFSUB__(HIDWORD(v24), v24)) {
                        goto LABEL_284;
                      }
                      uint64_t v147 = (int)v147;
LABEL_198:
                      if (v143 != v147) {
                        goto LABEL_264;
                      }
                      if (v143 >= 1)
                      {
                        switch(v141)
                        {
                          case 1:
                            if ((uint64_t)v25 >> 32 < (int)v25) {
                              goto LABEL_298;
                            }
                            sub_24A0B2544();
                            sub_24A0B2544();
                            sub_24A0B2544();
                            sub_24A08DE84(v25, v21);
                            uint64_t v156 = __DataStorage._bytes.getter();
                            if (!v156) {
                              goto LABEL_214;
                            }
                            uint64_t v157 = __DataStorage._offset.getter();
                            if (__OFSUB__((int)v25, v157)) {
                              goto LABEL_310;
                            }
                            v156 += (int)v25 - v157;
LABEL_214:
                            __DataStorage._length.getter();
                            sub_24A0B25C0(v156, (BOOL *)v204);
                            sub_24A0B252C();
                            unint64_t v202 = (int)v25;
                            if (v25) {
                              goto LABEL_333;
                            }
                            sub_24A08DEDC(v25, v21);
                            sub_24A0B252C();
                            char v155 = v204[0];
                            sub_24A0B252C();
                            uint64_t v7 = v195;
LABEL_216:
                            unint64_t v11 = v199;
                            if (v155) {
                              break;
                            }
                            goto LABEL_264;
                          case 2:
                            uint64_t v152 = *(void *)(v25 + 16);
                            uint64_t v153 = *(void *)(v25 + 24);
                            sub_24A0B2544();
                            sub_24A0B2544();
                            sub_24A0B2544();
                            swift_retain();
                            swift_retain();
                            if (__DataStorage._bytes.getter() && __OFSUB__(v152, __DataStorage._offset.getter())) {
                              goto LABEL_309;
                            }
                            BOOL v35 = __OFSUB__(v153, v152);
                            unint64_t v154 = v153 - v152;
                            if (v35) {
                              goto LABEL_299;
                            }
                            __DataStorage._length.getter();
                            sub_24A0B255C();
                            sub_24A0B252C();
                            unint64_t v202 = v154;
                            if (v154) {
                              goto LABEL_330;
                            }
                            swift_release();
                            swift_release();
                            char v155 = v204[0];
                            sub_24A0B252C();
                            sub_24A0B252C();
                            goto LABEL_216;
                          case 3:
                            memset(v204, 0, 14);
                            sub_24A0B2544();
                            sub_24A0B2544();
                            uint64_t v150 = sub_24A0B2654();
                            goto LABEL_208;
                          default:
                            LOWORD(v204[0]) = v25;
                            BYTE2(v204[0]) = BYTE2(v25);
                            BYTE3(v204[0]) = BYTE3(v25);
                            BYTE4(v204[0]) = v142;
                            BYTE5(v204[0]) = BYTE5(v25);
                            BYTE6(v204[0]) = BYTE6(v25);
                            HIBYTE(v204[0]) = HIBYTE(v25);
                            LOWORD(v204[1]) = v21;
                            BYTE2(v204[1]) = BYTE2(v21);
                            BYTE3(v204[1]) = BYTE3(v21);
                            BYTE4(v204[1]) = BYTE4(v21);
                            BYTE5(v204[1]) = BYTE5(v21);
                            sub_24A0B2544();
                            sub_24A0B2544();
                            uint64_t v150 = sub_24A0B2830();
LABEL_208:
                            sub_24A0B25C0(v150, v151);
                            unint64_t v202 = (unint64_t)v11;
                            unint64_t v11 = v199;
                            sub_24A0B252C();
                            sub_24A0B252C();
                            if ((v203[0] & 1) == 0) {
                              goto LABEL_264;
                            }
                            break;
                        }
                      }
LABEL_217:
                      uint64_t v158 = *(int *)(v201 + 24);
                      unint64_t v24 = *(void *)&v11[v158];
                      unint64_t v25 = *(void *)&v11[v158 + 8];
                      unint64_t v159 = (uint64_t *)(v7 + v158);
                      uint64_t v161 = *v159;
                      unint64_t v160 = v159[1];
                      uint64_t v162 = 0;
                      switch(v25 >> 62)
                      {
                        case 1uLL:
                          LODWORD(v162) = HIDWORD(v24) - v24;
                          if (__OFSUB__(HIDWORD(v24), v24)) {
                            goto LABEL_287;
                          }
                          uint64_t v162 = (int)v162;
LABEL_222:
                          switch(v160 >> 62)
                          {
                            case 1uLL:
                              LODWORD(v165) = HIDWORD(v161) - v161;
                              if (__OFSUB__(HIDWORD(v161), v161)) {
                                goto LABEL_289;
                              }
                              uint64_t v165 = (int)v165;
LABEL_231:
                              if (v162 != v165) {
                                goto LABEL_264;
                              }
                              if (v162 < 1) {
                                goto LABEL_244;
                              }
                              break;
                            case 2uLL:
                              uint64_t v167 = *(void *)(v161 + 16);
                              uint64_t v166 = *(void *)(v161 + 24);
                              BOOL v35 = __OFSUB__(v166, v167);
                              uint64_t v165 = v166 - v167;
                              if (!v35) {
                                goto LABEL_231;
                              }
                              goto LABEL_288;
                            case 3uLL:
                              if (v162) {
                                goto LABEL_264;
                              }
                              goto LABEL_244;
                            default:
                              uint64_t v165 = BYTE6(v160);
                              goto LABEL_231;
                          }
                          break;
                        case 2uLL:
                          uint64_t v164 = *(void *)(v24 + 16);
                          uint64_t v163 = *(void *)(v24 + 24);
                          BOOL v35 = __OFSUB__(v163, v164);
                          uint64_t v162 = v163 - v164;
                          if (!v35) {
                            goto LABEL_222;
                          }
                          goto LABEL_286;
                        case 3uLL:
                          goto LABEL_222;
                        default:
                          uint64_t v162 = BYTE6(v25);
                          goto LABEL_222;
                      }
                      break;
                    case 2uLL:
                      uint64_t v149 = *(void *)(v24 + 16);
                      uint64_t v148 = *(void *)(v24 + 24);
                      BOOL v35 = __OFSUB__(v148, v149);
                      uint64_t v147 = v148 - v149;
                      if (!v35) {
                        goto LABEL_198;
                      }
                      goto LABEL_285;
                    case 3uLL:
                      if (v143) {
                        goto LABEL_264;
                      }
                      goto LABEL_217;
                    default:
                      uint64_t v147 = BYTE6(v14);
                      goto LABEL_198;
                  }
                  break;
                case 2:
                  uint64_t v146 = *(void *)(v25 + 16);
                  uint64_t v145 = *(void *)(v25 + 24);
                  BOOL v35 = __OFSUB__(v145, v146);
                  uint64_t v143 = v145 - v146;
                  if (!v35) {
                    goto LABEL_189;
                  }
                  goto LABEL_283;
                case 3:
                  goto LABEL_189;
                default:
                  uint64_t v143 = BYTE6(v21);
                  goto LABEL_189;
              }
              switch(v25 >> 62)
              {
                case 1uLL:
                  if ((uint64_t)v24 >> 32 < (int)v24) {
                    goto LABEL_300;
                  }
                  sub_24A0B26AC();
                  sub_24A0B26AC();
                  sub_24A0B26AC();
                  sub_24A08DE84(v24, v25);
                  unint64_t v178 = v202;
                  char v179 = sub_24A0B0D20((int)v24, (uint64_t)v24 >> 32, v25 & 0x3FFFFFFFFFFFFFFFLL, v161, v160);
                  unint64_t v202 = v178;
                  if (v178) {
                    goto LABEL_336;
                  }
                  char v176 = v179;
                  sub_24A08DEDC(v24, v25);
                  sub_24A0B2694();
                  sub_24A0B2694();
                  uint64_t v7 = v195;
                  goto LABEL_243;
                case 2uLL:
                  v25 &= 0x3FFFFFFFFFFFFFFFuLL;
                  uint64_t v172 = *(void *)(v24 + 16);
                  uint64_t v173 = *(void *)(v24 + 24);
                  sub_24A0B26AC();
                  sub_24A0B26AC();
                  sub_24A0B26AC();
                  swift_retain();
                  swift_retain();
                  unint64_t v174 = v202;
                  char v175 = sub_24A0B0D20(v172, v173, v25, v161, v160);
                  unint64_t v202 = v174;
                  if (v174)
                  {
                    sub_24A0B2694();
                    sub_24A0B2694();
                    swift_release();
LABEL_335:
                    swift_release();
                    __break(1u);
LABEL_336:
                    sub_24A0B2694();
                    sub_24A0B2694();
                    uint64_t v186 = v24;
                    unint64_t v187 = v25;
LABEL_337:
                    sub_24A08DEDC(v186, v187);
                    __break(1u);
                    JUMPOUT(0x24A0AEAC4);
                  }
                  char v176 = v175;
                  swift_release();
                  swift_release();
                  sub_24A0B2694();
                  sub_24A0B2694();
LABEL_243:
                  unint64_t v11 = v199;
                  if ((v176 & 1) == 0) {
                    goto LABEL_264;
                  }
LABEL_244:
                  uint64_t v180 = *(int *)(v201 + 28);
                  char v181 = &v11[v180];
                  unint64_t v182 = (void *)(v7 + v180);
                  BOOL v183 = *(void *)&v11[v180] == *(void *)(v7 + v180)
                      && *(void *)&v11[v180 + 8] == *(void *)(v7 + v180 + 8);
                  if (!v183 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
                    goto LABEL_264;
                  }
                  BOOL v184 = *((void *)v181 + 2) == v182[2] && *((void *)v181 + 3) == v182[3];
                  if (!v184 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
                    goto LABEL_264;
                  }
                  BOOL v185 = *((void *)v181 + 4) == v182[4] && *((void *)v181 + 5) == v182[5];
                  if (!v185 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
                    goto LABEL_264;
                  }
                  type metadata accessor for Credential(0);
                  if ((static Date.== infix(_:_:)() & 1) == 0) {
                    goto LABEL_264;
                  }
                  sub_24A0B24C0(v7, (void (*)(void))type metadata accessor for AssetSkeleton);
                  sub_24A0B24C0((uint64_t)v11, (void (*)(void))type metadata accessor for AssetSkeleton);
                  uint64_t v3 = v193;
                  unint64_t v13 = v196 + v192;
                  uint64_t v12 = v197 - 1;
                  uint64_t v1 = v194;
                  if (v197 == 1) {
                    goto LABEL_265;
                  }
                  break;
                case 3uLL:
                  sub_24A0B2824();
                  sub_24A0B26AC();
                  sub_24A0B26AC();
                  uint64_t v171 = (void *)sub_24A0B2654();
                  goto LABEL_238;
                default:
                  LOWORD(v204[0]) = v24;
                  BYTE2(v204[0]) = BYTE2(v24);
                  BYTE3(v204[0]) = BYTE3(v24);
                  BYTE4(v204[0]) = BYTE4(v24);
                  sub_24A0B2934(SBYTE6(v24));
                  HIBYTE(v204[0]) = v168;
                  LOBYTE(v204[1]) = v25;
                  sub_24A0B2928(SBYTE1(v25));
                  BYTE3(v204[1]) = v169;
                  sub_24A0B2840(SBYTE5(v25));
                  sub_24A0B26AC();
                  sub_24A0B26AC();
                  uint64_t v170 = v203;
                  uint64_t v171 = v204;
LABEL_238:
                  unint64_t v177 = v202;
                  sub_24A0B0AF8((uint64_t)v171, v161, v160, v170);
                  unint64_t v202 = v177;
                  unint64_t v11 = v199;
                  sub_24A0B2694();
                  sub_24A0B2694();
                  if ((v203[0] & 1) == 0) {
                    goto LABEL_264;
                  }
                  goto LABEL_244;
              }
              break;
            case 2uLL:
              uint64_t v129 = *(void *)(v98 + 16);
              uint64_t v128 = *(void *)(v98 + 24);
              BOOL v35 = __OFSUB__(v128, v129);
              uint64_t v127 = v128 - v129;
              if (!v35) {
                goto LABEL_163;
              }
              goto LABEL_281;
            case 3uLL:
              if (v124) {
                goto LABEL_263;
              }
              goto LABEL_167;
            default:
              uint64_t v127 = BYTE6(v97);
              goto LABEL_163;
          }
          continue;
        }
        switch(v93 >> 62)
        {
          case 1uLL:
            uint64_t v191 = v91;
            if (v94 >> 32 < (int)v94) {
              goto LABEL_294;
            }
            unint64_t v190 = (int)v94;
            unint64_t v121 = v93;
            sub_24A08DE84(v24, v14);
            sub_24A0B2544();
            sub_24A0B2544();
            sub_24A08DE84(v94, v121);
            sub_24A08DE84(v25, v200);
            sub_24A0B2544();
            sub_24A0B260C();
            sub_24A08DE84(v94, v121);
            if (__DataStorage._bytes.getter())
            {
              uint64_t v122 = __DataStorage._offset.getter();
              unint64_t v123 = v190;
              if (__OFSUB__(v190, v122))
              {
LABEL_306:
                __break(1u);
LABEL_307:
                __break(1u);
LABEL_308:
                __break(1u);
LABEL_309:
                __break(1u);
LABEL_310:
                __break(1u);
LABEL_311:
                __break(1u);
LABEL_312:
                __break(1u);
LABEL_313:
                __break(1u);
LABEL_314:
                __break(1u);
LABEL_315:
                __break(1u);
LABEL_316:
                __break(1u);
LABEL_317:
                __break(1u);
LABEL_318:
                __break(1u);
              }
            }
            else
            {
              unint64_t v123 = v190;
            }
            __DataStorage._length.getter();
            sub_24A0B255C();
            sub_24A0B252C();
            unint64_t v202 = v123;
            if (v123)
            {
              sub_24A0B252C();
              sub_24A0B252C();
              uint64_t v186 = v94;
              unint64_t v187 = v198;
              goto LABEL_337;
            }
            sub_24A0B27C4();
            sub_24A0B252C();
            char v120 = v204[0];
            sub_24A0B252C();
            uint64_t v7 = v195;
            goto LABEL_148;
          case 2uLL:
            uint64_t v117 = *(void *)(v94 + 16);
            unint64_t v190 = *(void *)(v94 + 24);
            uint64_t v191 = v91;
            unint64_t v118 = v93;
            sub_24A08DE84(v24, v14);
            sub_24A0B2544();
            sub_24A0B2544();
            sub_24A08DE84(v94, v118);
            sub_24A08DE84(v25, v95);
            sub_24A0B2544();
            sub_24A0B260C();
            swift_retain();
            swift_retain();
            if (__DataStorage._bytes.getter() && __OFSUB__(v117, __DataStorage._offset.getter())) {
              goto LABEL_305;
            }
            unint64_t v119 = v190 - v117;
            if (__OFSUB__(v190, v117)) {
              goto LABEL_295;
            }
            __DataStorage._length.getter();
            sub_24A0B255C();
            sub_24A0B252C();
            uint64_t v7 = v195;
            unint64_t v202 = v119;
            if (v119)
            {
              sub_24A0B252C();
              sub_24A0B252C();
LABEL_332:
              swift_release();
              goto LABEL_335;
            }
            swift_release();
            swift_release();
            char v120 = v204[0];
            sub_24A0B252C();
            sub_24A0B252C();
LABEL_148:
            unint64_t v11 = v199;
            uint64_t v21 = v191;
            if (v120) {
              goto LABEL_149;
            }
LABEL_263:
            sub_24A0B252C();
            sub_24A0B25DC();
            sub_24A0B27C4();
            sub_24A08DEDC(v25, v200);
LABEL_264:
            sub_24A0B24C0(v7, (void (*)(void))type metadata accessor for AssetSkeleton);
            sub_24A0B24C0((uint64_t)v11, (void (*)(void))type metadata accessor for AssetSkeleton);
LABEL_265:
            sub_24A0AB030();
            return;
          case 3uLL:
            memset(v204, 0, 14);
            unint64_t v110 = v93;
            sub_24A08DE84(v24, v14);
            sub_24A0B2544();
            sub_24A08DE84(v94, v110);
            sub_24A08DE84(v25, v95);
            sub_24A0B2544();
            sub_24A0B260C();
            uint64_t v116 = (void *)sub_24A0B2654();
            goto LABEL_139;
          default:
            LOWORD(v204[0]) = v94;
            BYTE2(v204[0]) = BYTE2(v94);
            BYTE3(v204[0]) = BYTE3(v94);
            BYTE4(v204[0]) = BYTE4(v94);
            sub_24A0B2934(SBYTE6(v94));
            HIBYTE(v204[0]) = v105;
            LOBYTE(v204[1]) = v106;
            sub_24A0B2928(v107);
            BYTE3(v204[1]) = v108;
            sub_24A0B2840(v109);
            unint64_t v110 = v95;
            uint64_t v191 = v112 + v111;
            unint64_t v114 = v113;
            sub_24A08DE84(v24, v14);
            sub_24A0B2544();
            sub_24A08DE84(v94, v114);
            sub_24A08DE84(v25, v110);
            sub_24A0B2544();
            sub_24A0B260C();
            uint64_t v115 = v203;
            uint64_t v116 = v204;
LABEL_139:
            sub_24A0B25C0((uint64_t)v116, v115);
            unint64_t v202 = v110;
            unint64_t v11 = v199;
            sub_24A0B252C();
            sub_24A0B252C();
            if ((v203[0] & 1) == 0) {
              goto LABEL_263;
            }
            goto LABEL_149;
        }
      case 2uLL:
        uint64_t v104 = *(void *)(v24 + 16);
        uint64_t v103 = *(void *)(v24 + 24);
        BOOL v35 = __OFSUB__(v103, v104);
        uint64_t v102 = v103 - v104;
        if (!v35) {
          goto LABEL_128;
        }
        goto LABEL_276;
      case 3uLL:
        if (v99) {
          goto LABEL_264;
        }
        goto LABEL_132;
      default:
        uint64_t v102 = BYTE6(v14);
        goto LABEL_128;
    }
  }
}

void sub_24A0AEBE4()
{
  sub_24A0AAFDC();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v150 = *MEMORY[0x263EF8340];
  uint64_t v129 = (int *)type metadata accessor for AssetUploadRequest();
  sub_24A0B25A4();
  MEMORY[0x270FA5388](v4);
  sub_24A0B27B4();
  uint64_t v7 = v5 - v6;
  MEMORY[0x270FA5388](v8);
  unint64_t v11 = (char *)&v115 - v10;
  uint64_t v12 = *(void *)(v3 + 16);
  if (v12 != *(void *)(v1 + 16) || !v12 || v3 == v1) {
    goto LABEL_125;
  }
  uint64_t v120 = v3;
  uint64_t v121 = 0;
  unint64_t v13 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v14 = *(void *)(v9 + 72);
  uint64_t v118 = v1;
  uint64_t v119 = v14;
  while (2)
  {
    sub_24A0B2458(v3 + v13, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for AssetUploadRequest);
    sub_24A0B2458(v1 + v13, v7, (uint64_t (*)(void))type metadata accessor for AssetUploadRequest);
    if ((static UUID.== infix(_:_:)() & 1) == 0) {
      goto LABEL_124;
    }
    uint64_t v15 = v129[5];
    uint64_t v16 = *(void *)&v11[v15];
    uint64_t v17 = *(void *)&v11[v15 + 8];
    int v18 = (void *)(v7 + v15);
    BOOL v19 = v16 == *v18 && v17 == v18[1];
    if (!v19 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
      || (MEMORY[0x24C5BACC0](&v11[v129[6]], v7 + v129[6]) & 1) == 0
      || (MEMORY[0x24C5BACC0](&v11[v129[7]], v7 + v129[7]) & 1) == 0
      || (MEMORY[0x24C5BACC0](&v11[v129[8]], v7 + v129[8]) & 1) == 0)
    {
      goto LABEL_124;
    }
    uint64_t v20 = v129[9];
    uint64_t v21 = *(void *)&v11[v20];
    unint64_t v22 = *(void *)&v11[v20 + 8];
    uint64_t v23 = *(void *)&v11[v20 + 16];
    unint64_t v24 = *(void *)&v11[v20 + 24];
    unint64_t v25 = (uint64_t *)(v7 + v20);
    uint64_t v27 = *v25;
    unint64_t v26 = v25[1];
    uint64_t v29 = v25[2];
    unint64_t v28 = v25[3];
    uint64_t v127 = v23;
    unint64_t v128 = v28;
    uint64_t v30 = 0;
    switch(v22 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v21), v21))
        {
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
        }
        uint64_t v30 = HIDWORD(v21) - (int)v21;
        break;
      case 2uLL:
        uint64_t v32 = *(void *)(v21 + 16);
        uint64_t v31 = *(void *)(v21 + 24);
        BOOL v33 = __OFSUB__(v31, v32);
        uint64_t v30 = v31 - v32;
        if (!v33) {
          break;
        }
        goto LABEL_127;
      case 3uLL:
        break;
      default:
        uint64_t v30 = BYTE6(v22);
        break;
    }
    unint64_t v125 = v24;
    uint64_t v126 = v29;
    unint64_t v122 = v13;
    unint64_t v123 = v22;
    uint64_t v124 = v21;
    switch(v26 >> 62)
    {
      case 1uLL:
        LODWORD(v34) = HIDWORD(v27) - v27;
        if (__OFSUB__(HIDWORD(v27), v27)) {
          goto LABEL_129;
        }
        uint64_t v34 = (int)v34;
LABEL_28:
        if (v30 != v34) {
          goto LABEL_124;
        }
        if (v30 < 1)
        {
LABEL_33:
          sub_24A08DE84(v21, v22);
          sub_24A0B2880();
          sub_24A0B25F4();
          sub_24A0B2868();
          unint64_t v44 = v125;
          goto LABEL_58;
        }
        break;
      case 2uLL:
        uint64_t v36 = *(void *)(v27 + 16);
        uint64_t v35 = *(void *)(v27 + 24);
        BOOL v33 = __OFSUB__(v35, v36);
        uint64_t v34 = v35 - v36;
        if (!v33) {
          goto LABEL_28;
        }
        goto LABEL_128;
      case 3uLL:
        if (v30) {
          goto LABEL_124;
        }
        goto LABEL_33;
      default:
        uint64_t v34 = BYTE6(v26);
        goto LABEL_28;
    }
    switch(v22 >> 62)
    {
      case 1uLL:
        if (v21 >> 32 < (int)v21) {
          goto LABEL_134;
        }
        uint64_t v63 = (int)v21;
        uint64_t v64 = v21;
        unint64_t v65 = v22;
        sub_24A08DE84(v27, v26);
        sub_24A0B25F4();
        sub_24A0B25F4();
        sub_24A08DE84(v64, v65);
        sub_24A0B2880();
        sub_24A0B25F4();
        sub_24A0B2868();
        sub_24A08DE84(v64, v65);
        if (__DataStorage._bytes.getter() && __OFSUB__(v63, __DataStorage._offset.getter())) {
          goto LABEL_139;
        }
        __DataStorage._length.getter();
        sub_24A0B26C4();
        sub_24A0B258C();
        uint64_t v121 = v63;
        if (v63)
        {
          sub_24A0B258C();
          sub_24A0B258C();
          unint64_t v114 = v123;
          uint64_t v113 = v124;
          goto LABEL_156;
        }
        sub_24A08DEDC(v124, v123);
        sub_24A0B258C();
        char v52 = v142;
        sub_24A0B258C();
        uint64_t v1 = v118;
LABEL_57:
        uint64_t v3 = v120;
        unint64_t v44 = v125;
        if ((v52 & 1) == 0) {
          goto LABEL_123;
        }
        goto LABEL_58;
      case 2uLL:
        uint64_t v45 = v22 & 0x3FFFFFFFFFFFFFFFLL;
        uint64_t v46 = *(void *)(v21 + 16);
        uint64_t v117 = *(void *)(v21 + 24);
        uint64_t v47 = v21;
        unint64_t v48 = v22;
        sub_24A08DE84(v27, v26);
        sub_24A0B25F4();
        sub_24A0B25F4();
        sub_24A08DE84(v47, v48);
        sub_24A08DE84(v127, v24);
        sub_24A0B25F4();
        sub_24A0B2868();
        swift_retain();
        swift_retain();
        uint64_t v49 = (char *)__DataStorage._bytes.getter();
        if (!v49) {
          goto LABEL_37;
        }
        uint64_t v50 = __DataStorage._offset.getter();
        if (__OFSUB__(v46, v50)) {
          goto LABEL_138;
        }
        v49 += v46 - v50;
LABEL_37:
        BOOL v33 = __OFSUB__(v117, v46);
        uint64_t v51 = v117 - v46;
        if (v33) {
          goto LABEL_135;
        }
        __DataStorage._length.getter();
        sub_24A0B26C4();
        sub_24A0B258C();
        uint64_t v1 = v118;
        uint64_t v121 = v51;
        if (v51) {
          goto LABEL_148;
        }
        swift_release();
        swift_release();
        char v52 = v142;
        sub_24A0B258C();
        sub_24A0B258C();
        goto LABEL_57;
      case 3uLL:
        sub_24A0B2824();
        if (!v55)
        {
          __int16 v130 = v27;
          char v131 = BYTE2(v27);
          char v132 = BYTE3(v27);
          char v133 = v56;
          char v134 = BYTE5(v27);
          char v135 = BYTE6(v27);
          char v136 = HIBYTE(v27);
          __int16 v137 = v26;
          char v138 = BYTE2(v26);
          char v139 = BYTE3(v26);
          char v140 = BYTE4(v26);
          char v141 = BYTE5(v26);
          sub_24A08DE84(v53, v54);
          sub_24A0B2880();
          sub_24A0B25F4();
          sub_24A0B2868();
          int v103 = memcmp(&v142, &v130, BYTE6(v26));
          unint64_t v44 = v125;
          if (v103) {
            goto LABEL_123;
          }
          goto LABEL_58;
        }
        unint64_t v57 = v128;
        if (v55 == 1)
        {
          uint64_t v58 = v27 >> 32;
          if (v27 >> 32 < (int)v27) {
            goto LABEL_142;
          }
          uint64_t v45 = v26 & 0x3FFFFFFFFFFFFFFFLL;
          sub_24A0B25F4();
          sub_24A0B25F4();
          sub_24A08DE84(v124, v123);
          sub_24A0B2880();
          sub_24A0B25F4();
          sub_24A08DE84(v126, v57);
          uint64_t v49 = (char *)__DataStorage._bytes.getter();
          if (v49)
          {
            uint64_t v59 = __DataStorage._offset.getter();
            if (__OFSUB__((int)v27, v59)) {
              goto LABEL_145;
            }
            v49 += (int)v27 - v59;
          }
          uint64_t v60 = __DataStorage._length.getter();
          if (v49)
          {
            if (v60 >= v58 - (int)v27) {
              size_t v61 = v58 - (int)v27;
            }
            else {
              size_t v61 = v60;
            }
            int v62 = memcmp(&v142, v49, v61);
            sub_24A0B258C();
            sub_24A0B258C();
            uint64_t v1 = v118;
            uint64_t v3 = v120;
            unint64_t v44 = v125;
            if (v62) {
              goto LABEL_123;
            }
            goto LABEL_58;
          }
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          sub_24A0B258C();
          sub_24A0B258C();
LABEL_152:
          swift_release();
          swift_release();
          __break(1u);
LABEL_153:
          sub_24A0B2940();
          uint64_t v113 = v45;
LABEL_154:
          unint64_t v114 = (unint64_t)v49;
LABEL_156:
          sub_24A08DEDC(v113, v114);
          __break(1u);
          JUMPOUT(0x24A0AF924);
        }
        uint64_t v45 = v26 & 0x3FFFFFFFFFFFFFFFLL;
        uint64_t v104 = *(void *)(v27 + 16);
        uint64_t v116 = *(void *)(v27 + 24);
        uint64_t v117 = v104;
        uint64_t v105 = v53;
        unint64_t v106 = v54;
        sub_24A08DE84(v27, v26);
        sub_24A0B25F4();
        sub_24A08DE84(v105, v106);
        sub_24A08DE84(v127, v24);
        sub_24A0B25F4();
        sub_24A08DE84(v126, v57);
        swift_retain();
        swift_retain();
        uint64_t v49 = (char *)__DataStorage._bytes.getter();
        if (v49)
        {
          uint64_t v107 = __DataStorage._offset.getter();
          uint64_t v108 = v117;
          if (__OFSUB__(v117, v107)) {
            goto LABEL_144;
          }
          v49 += v117 - v107;
        }
        else
        {
          uint64_t v108 = v117;
        }
        int64_t v109 = v116 - v108;
        if (__OFSUB__(v116, v108)) {
          goto LABEL_143;
        }
        uint64_t v110 = __DataStorage._length.getter();
        uint64_t v1 = v118;
        if (!v49) {
          goto LABEL_147;
        }
        if (v110 >= v109) {
          size_t v111 = v109;
        }
        else {
          size_t v111 = v110;
        }
        int v112 = memcmp(&v142, v49, v111);
        swift_release();
        swift_release();
        sub_24A0B258C();
        sub_24A0B258C();
        uint64_t v3 = v120;
        unint64_t v44 = v125;
        if (!v112)
        {
LABEL_58:
          uint64_t v66 = 0;
          switch(v44 >> 62)
          {
            case 1uLL:
              LODWORD(v66) = HIDWORD(v127) - v127;
              if (__OFSUB__(HIDWORD(v127), v127)) {
                goto LABEL_130;
              }
              uint64_t v66 = (int)v66;
              break;
            case 2uLL:
              uint64_t v68 = *(void *)(v127 + 16);
              uint64_t v67 = *(void *)(v127 + 24);
              BOOL v33 = __OFSUB__(v67, v68);
              uint64_t v66 = v67 - v68;
              if (!v33) {
                break;
              }
              goto LABEL_131;
            case 3uLL:
              break;
            default:
              uint64_t v66 = BYTE6(v44);
              break;
          }
          switch(v128 >> 62)
          {
            case 1uLL:
              LODWORD(v69) = HIDWORD(v126) - v126;
              if (__OFSUB__(HIDWORD(v126), v126)) {
                goto LABEL_133;
              }
              uint64_t v69 = (int)v69;
LABEL_72:
              if (v66 != v69) {
                goto LABEL_123;
              }
              if (v66 < 1)
              {
LABEL_78:
                sub_24A0B258C();
                sub_24A08DEDC(v126, v128);
                sub_24A08DEDC(v124, v123);
                sub_24A08DEDC(v127, v44);
                unint64_t v77 = v122;
                goto LABEL_93;
              }
              break;
            case 2uLL:
              uint64_t v71 = *(void *)(v126 + 16);
              uint64_t v70 = *(void *)(v126 + 24);
              BOOL v33 = __OFSUB__(v70, v71);
              uint64_t v69 = v70 - v71;
              if (!v33) {
                goto LABEL_72;
              }
              goto LABEL_132;
            case 3uLL:
              if (v66) {
                goto LABEL_123;
              }
              goto LABEL_78;
            default:
              uint64_t v69 = BYTE6(v128);
              goto LABEL_72;
          }
          uint64_t v49 = (char *)v128;
          switch(v44 >> 62)
          {
            case 1uLL:
              uint64_t v117 = v12;
              uint64_t v90 = v127;
              if (v90 >> 32 < (int)v90) {
                goto LABEL_136;
              }
              uint64_t v116 = (int)v127;
              sub_24A08DE84(v126, v128);
              sub_24A0B27F4();
              sub_24A0B27F4();
              sub_24A08DE84(v90, v44);
              if (__DataStorage._bytes.getter() && __OFSUB__(v116, __DataStorage._offset.getter())) {
                goto LABEL_141;
              }
              __DataStorage._length.getter();
              uint64_t v91 = sub_24A0B2778();
              uint64_t v92 = v121;
              sub_24A0B0AF8(v91, v93, v128, v94);
              sub_24A0B27DC();
              uint64_t v121 = v92;
              if (v92)
              {
                sub_24A0B27DC();
                sub_24A0B27DC();
                uint64_t v113 = v127;
                unint64_t v114 = v125;
                goto LABEL_156;
              }
              uint64_t v95 = v127;
              unint64_t v96 = v125;
              sub_24A08DEDC(v127, v125);
              sub_24A0B258C();
              sub_24A0B27DC();
              char v85 = v142;
              sub_24A08DEDC(v124, v123);
              sub_24A08DEDC(v95, v96);
              sub_24A0B27DC();
              sub_24A0B27DC();
              uint64_t v1 = v118;
LABEL_92:
              uint64_t v3 = v120;
              unint64_t v77 = v122;
              uint64_t v12 = v117;
              if ((v85 & 1) == 0) {
                goto LABEL_124;
              }
LABEL_93:
              uint64_t v97 = v129[10];
              uint64_t v98 = &v11[v97];
              uint64_t v99 = (void *)(v7 + v97);
              BOOL v100 = *(void *)&v11[v97] == *(void *)(v7 + v97)
                  && *(void *)&v11[v97 + 8] == *(void *)(v7 + v97 + 8);
              if (!v100 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
                goto LABEL_124;
              }
              BOOL v101 = *((void *)v98 + 2) == v99[2] && *((void *)v98 + 3) == v99[3];
              if (!v101 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
                goto LABEL_124;
              }
              BOOL v102 = *((void *)v98 + 4) == v99[4] && *((void *)v98 + 5) == v99[5];
              if (!v102 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
                goto LABEL_124;
              }
              type metadata accessor for Credential(0);
              if ((static Date.== infix(_:_:)() & 1) == 0) {
                goto LABEL_124;
              }
              sub_24A0B24C0(v7, (void (*)(void))type metadata accessor for AssetUploadRequest);
              sub_24A0B24C0((uint64_t)v11, (void (*)(void))type metadata accessor for AssetUploadRequest);
              unint64_t v13 = v77 + v119;
              if (!--v12) {
                goto LABEL_125;
              }
              break;
            case 2uLL:
              uint64_t v117 = v12;
              uint64_t v45 = v44 & 0x3FFFFFFFFFFFFFFFLL;
              uint64_t v78 = *(void *)(v127 + 16);
              uint64_t v79 = *(void *)(v127 + 24);
              sub_24A08DE84(v126, v128);
              sub_24A0B27F4();
              sub_24A0B27F4();
              swift_retain();
              swift_retain();
              if (__DataStorage._bytes.getter() && __OFSUB__(v78, __DataStorage._offset.getter())) {
                goto LABEL_140;
              }
              if (__OFSUB__(v79, v78)) {
                goto LABEL_137;
              }
              __DataStorage._length.getter();
              uint64_t v80 = sub_24A0B2778();
              uint64_t v49 = (char *)v128;
              uint64_t v81 = v121;
              sub_24A0B0AF8(v80, v82, v128, v83);
              sub_24A0B2664();
              uint64_t v1 = v118;
              uint64_t v121 = v81;
              if (!v81)
              {
                swift_release();
                uint64_t v84 = v127;
                swift_release();
                char v85 = v142;
                sub_24A0B258C();
                sub_24A0B2664();
                sub_24A08DEDC(v124, v123);
                sub_24A08DEDC(v84, v125);
                sub_24A0B2664();
                sub_24A0B2664();
                goto LABEL_92;
              }
              sub_24A0B2664();
              sub_24A0B2664();
              goto LABEL_152;
            case 3uLL:
              sub_24A0B2824();
              uint64_t v45 = v86;
              sub_24A08DE84(v86, (unint64_t)v49);
              sub_24A08DE84(v45, (unint64_t)v49);
              uint64_t v87 = sub_24A0B2654();
              uint64_t v88 = v121;
              sub_24A0B0AF8(v87, v45, (unint64_t)v49, v89);
              uint64_t v121 = v88;
              if (v88) {
                goto LABEL_153;
              }
              sub_24A0B258C();
              sub_24A0B2940();
              sub_24A08DEDC(v124, v123);
              sub_24A08DEDC(v127, v125);
              sub_24A0B2940();
              sub_24A0B2940();
              uint64_t v3 = v120;
              unint64_t v77 = v122;
              if ((v130 & 1) == 0) {
                goto LABEL_124;
              }
              goto LABEL_93;
            default:
              uint64_t v117 = v12;
              uint64_t v72 = v127;
              int v142 = v127;
              char v143 = BYTE4(v127);
              sub_24A0B2934(SBYTE6(v127));
              char v146 = v73;
              LOBYTE(v147) = v44;
              sub_24A0B2928(SBYTE1(v44));
              sub_24A0B2850(SBYTE5(v44));
              uint64_t v75 = v74;
              sub_24A08DE84(v74, (unint64_t)v49);
              sub_24A0B27F4();
              uint64_t v76 = v121;
              sub_24A0B0AF8((uint64_t)&v142, v75, (unint64_t)v49, (BOOL *)&v130);
              uint64_t v121 = v76;
              if (!v76)
              {
                sub_24A0B258C();
                sub_24A0B2664();
                sub_24A08DEDC(v124, v123);
                sub_24A08DEDC(v72, v44);
                sub_24A0B2664();
                sub_24A0B2664();
                uint64_t v3 = v120;
                unint64_t v77 = v122;
                uint64_t v12 = v117;
                if ((v130 & 1) == 0) {
                  goto LABEL_124;
                }
                goto LABEL_93;
              }
              sub_24A0B2664();
              uint64_t v113 = v75;
              goto LABEL_154;
          }
          continue;
        }
LABEL_123:
        sub_24A0B258C();
        sub_24A08DEDC(v126, v128);
        sub_24A08DEDC(v124, v123);
        sub_24A08DEDC(v127, v44);
LABEL_124:
        sub_24A0B24C0(v7, (void (*)(void))type metadata accessor for AssetUploadRequest);
        sub_24A0B24C0((uint64_t)v11, (void (*)(void))type metadata accessor for AssetUploadRequest);
LABEL_125:
        sub_24A0AB030();
        return;
      default:
        LOWORD(v142) = v21;
        BYTE2(v142) = BYTE2(v21);
        HIBYTE(v142) = BYTE3(v21);
        char v143 = BYTE4(v21);
        char v144 = BYTE5(v21);
        char v145 = BYTE6(v21);
        char v146 = HIBYTE(v21);
        __int16 v147 = v22;
        char v148 = BYTE2(v22);
        char v149 = BYTE3(v22);
        sub_24A0B2840(SBYTE5(v22));
        uint64_t v38 = v37;
        unint64_t v40 = v39;
        sub_24A08DE84(v27, v26);
        sub_24A0B25F4();
        sub_24A08DE84(v38, v40);
        sub_24A0B2880();
        sub_24A0B25F4();
        sub_24A0B2868();
        uint64_t v41 = sub_24A0B2830();
        uint64_t v42 = v121;
        sub_24A0B0AF8(v41, v27, v26, v43);
        uint64_t v121 = v42;
        uint64_t v3 = v120;
        sub_24A0B258C();
        sub_24A0B258C();
        unint64_t v44 = v125;
        if ((v130 & 1) == 0) {
          goto LABEL_123;
        }
        goto LABEL_58;
    }
  }
}

void sub_24A0AF984(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_24A0AAFDC();
  a19 = v20;
  a20 = v21;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  uint64_t v26 = type metadata accessor for CloudAssets_Asset(0) - 8;
  MEMORY[0x270FA5388](v26);
  sub_24A0B27B4();
  uint64_t v29 = v27 - v28;
  MEMORY[0x270FA5388](v30);
  BOOL v33 = (char *)&a9 - v32;
  uint64_t v34 = *(void *)(v25 + 16);
  if (v34 == *(void *)(v23 + 16) && v34 && v25 != v23)
  {
    unint64_t v35 = (*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80);
    uint64_t v36 = *(void *)(v31 + 72);
    uint64_t v37 = v34 - 1;
    do
    {
      sub_24A0B2458(v25 + v35, (uint64_t)v33, type metadata accessor for CloudAssets_Asset);
      sub_24A0B2458(v23 + v35, v29, type metadata accessor for CloudAssets_Asset);
      sub_24A0A1BAC();
      char v39 = v38;
      sub_24A0B24C0(v29, (void (*)(void))type metadata accessor for CloudAssets_Asset);
      sub_24A0B24C0((uint64_t)v33, (void (*)(void))type metadata accessor for CloudAssets_Asset);
      BOOL v41 = v37-- != 0;
      if ((v39 & 1) == 0) {
        break;
      }
      v35 += v36;
    }
    while (v41);
  }
  sub_24A0AB030();
}

void sub_24A0AFAF8()
{
  sub_24A0AAFDC();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  type metadata accessor for CloudAssets_Signal.Event(0);
  sub_24A0B25A4();
  MEMORY[0x270FA5388](v4);
  sub_24A0B27B4();
  uint64_t v7 = v5 - v6;
  MEMORY[0x270FA5388](v8);
  unint64_t v11 = (char *)&v16 - v10;
  uint64_t v12 = *(void *)(v3 + 16);
  if (v12 == *(void *)(v1 + 16) && v12 && v3 != v1)
  {
    unint64_t v13 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    uint64_t v17 = *(void *)(v9 + 72);
    while (1)
    {
      sub_24A0B2458(v3 + v13, (uint64_t)v11, type metadata accessor for CloudAssets_Signal.Event);
      sub_24A0B2458(v1 + v13, v7, type metadata accessor for CloudAssets_Signal.Event);
      uint64_t v14 = *(void *)v11;
      uint64_t v15 = *(void *)v7;
      if (v11[8]) {
        uint64_t v14 = *(void *)v11 != 0;
      }
      if (*(unsigned char *)(v7 + 8) == 1)
      {
        if (v15)
        {
          if (v14 != 1) {
            break;
          }
        }
        else if (v14)
        {
          break;
        }
      }
      else if (v14 != v15)
      {
        break;
      }
      if (*((void *)v11 + 2) != *(void *)(v7 + 16)) {
        break;
      }
      type metadata accessor for UnknownStorage();
      sub_24A0B2410(&qword_26975D898, MEMORY[0x263F50560]);
      if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0) {
        break;
      }
      sub_24A0B24C0(v7, (void (*)(void))type metadata accessor for CloudAssets_Signal.Event);
      sub_24A0B24C0((uint64_t)v11, (void (*)(void))type metadata accessor for CloudAssets_Signal.Event);
      v13 += v17;
      if (!--v12) {
        goto LABEL_19;
      }
    }
    sub_24A0B24C0(v7, (void (*)(void))type metadata accessor for CloudAssets_Signal.Event);
    sub_24A0B24C0((uint64_t)v11, (void (*)(void))type metadata accessor for CloudAssets_Signal.Event);
  }
LABEL_19:
  sub_24A0AB030();
}

void sub_24A0AFD34()
{
}

uint64_t sub_24A0AFD5C()
{
  return 0x7374736575716572;
}

uint64_t sub_24A0AFD74(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7165526863746162 && a2 == 0xED00007374736575;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65526D6165727473 && a2 == 0xEE00737473657571)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_24A0AFEAC(char a1)
{
  if (a1) {
    return 0x65526D6165727473;
  }
  else {
    return 0x7165526863746162;
  }
}

uint64_t sub_24A0AFEFC(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x7374736575716572 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

Swift::Int sub_24A0AFF88()
{
  return sub_24A093F40();
}

uint64_t sub_24A0AFFA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_24A0AFEFC(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_24A0AFFD4()
{
  return sub_24A08D3F0();
}

uint64_t sub_24A0AFFF0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_24A08F828();
  *a1 = result & 1;
  return result;
}

uint64_t sub_24A0B001C(uint64_t a1)
{
  unint64_t v2 = sub_24A0B163C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A0B0058(uint64_t a1)
{
  unint64_t v2 = sub_24A0B163C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_24A0B0094()
{
  return sub_24A0AFEAC(*v0);
}

uint64_t sub_24A0B009C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_24A0AFD74(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_24A0B00C4(uint64_t a1)
{
  unint64_t v2 = sub_24A0B15A4();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A0B0100(uint64_t a1)
{
  unint64_t v2 = sub_24A0B15A4();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_24A0B013C(uint64_t a1)
{
  unint64_t v2 = sub_24A0B15F0();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A0B0178(uint64_t a1)
{
  unint64_t v2 = sub_24A0B15F0();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t DownloadRequestMessage.encode(to:)(void *a1)
{
  sub_24A08DF34(&qword_26975D928);
  sub_24A08F24C();
  MEMORY[0x270FA5388](v4);
  sub_24A093CD4();
  sub_24A08DF34(&qword_26975D930);
  sub_24A08F24C();
  MEMORY[0x270FA5388](v5);
  sub_24A093CD4();
  sub_24A08DF34(&qword_26975D938);
  sub_24A08F24C();
  uint64_t v7 = v6;
  MEMORY[0x270FA5388](v8);
  sub_24A0B28D0();
  char v9 = *(unsigned char *)(v1 + 8);
  uint64_t v10 = a1[3];
  sub_24A08DF78(a1, v10);
  sub_24A0B15A4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v9) {
    sub_24A0B15F0();
  }
  else {
    sub_24A0B163C();
  }
  sub_24A0B2908();
  sub_24A08DF34(&qword_26975D950);
  sub_24A0B1C5C(&qword_26975D958, &qword_26975D638);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  sub_24A08F2BC();
  v11();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v2, v10);
}

Swift::Int DownloadRequestMessage.hashValue.getter()
{
  uint64_t v1 = *(void *)v0;
  Swift::UInt v2 = *(unsigned __int8 *)(v0 + 8);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  sub_24A0B105C((uint64_t)v4, v1);
  return Hasher._finalize()();
}

uint64_t DownloadRequestMessage.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_24A08DF34(&qword_26975D968);
  sub_24A08F24C();
  MEMORY[0x270FA5388](v3);
  sub_24A0B28D0();
  sub_24A08DF34(&qword_26975D970);
  sub_24A08F24C();
  MEMORY[0x270FA5388](v4);
  sub_24A093CD4();
  uint64_t v5 = sub_24A08DF34(&qword_26975D978);
  sub_24A08F24C();
  uint64_t v34 = v6;
  MEMORY[0x270FA5388](v7);
  sub_24A093CD4();
  uint64_t v10 = v9 - v8;
  sub_24A08DF78(a1, a1[3]);
  sub_24A0B15A4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v35) {
    goto LABEL_10;
  }
  uint64_t v11 = KeyedDecodingContainer.allKeys.getter();
  uint64_t v12 = *(void *)(v11 + 16);
  if (!v12)
  {
    uint64_t v13 = v5;
    uint64_t v20 = v34;
LABEL_8:
    uint64_t v21 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v23 = v22;
    sub_24A08DF34(&qword_26975D980);
    *uint64_t v23 = &type metadata for DownloadRequestMessage;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v21 - 8) + 104))(v23, *MEMORY[0x263F8DCB0], v21);
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v10, v13);
LABEL_10:
    uint64_t v24 = (uint64_t)a1;
    return sub_24A08E050(v24);
  }
  uint64_t v13 = v5;
  char v14 = *(unsigned char *)(v11 + 32);
  sub_24A0B2394(1, v12, v11, v11 + 32, 0, (2 * v12) | 1);
  uint64_t v16 = v15;
  unint64_t v18 = v17;
  swift_bridgeObjectRelease();
  if (v16 != v18 >> 1)
  {
    uint64_t v20 = v34;
    goto LABEL_8;
  }
  char v19 = v14;
  if (v14)
  {
    LOBYTE(v36) = 1;
    sub_24A0B15F0();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    sub_24A08DF34(&qword_26975D950);
    sub_24A0B1C5C(&qword_26975D988, &qword_26975D630);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    sub_24A08F2BC();
    v26();
    swift_unknownObjectRelease();
    uint64_t v27 = sub_24A0B2624();
    v28(v27);
    uint64_t v29 = v36;
    char v19 = v14;
  }
  else
  {
    LOBYTE(v36) = 0;
    sub_24A0B163C();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    sub_24A08DF34(&qword_26975D950);
    sub_24A0B1C5C(&qword_26975D988, &qword_26975D630);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    sub_24A08F2BC();
    v30();
    swift_unknownObjectRelease();
    uint64_t v31 = sub_24A0B2624();
    v32(v31);
    uint64_t v29 = v36;
  }
  *(void *)a2 = v29;
  *(unsigned char *)(a2 + 8) = v19;
  uint64_t v24 = (uint64_t)a1;
  return sub_24A08E050(v24);
}

Swift::Int sub_24A0B0A68()
{
  uint64_t v1 = *(void *)v0;
  Swift::UInt v2 = *(unsigned __int8 *)(v0 + 8);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  sub_24A0B105C((uint64_t)v4, v1);
  return Hasher._finalize()();
}

uint64_t sub_24A0B0AC4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return DownloadRequestMessage.init(from:)(a1, a2);
}

uint64_t sub_24A0B0ADC(void *a1)
{
  return DownloadRequestMessage.encode(to:)(a1);
}

uint64_t sub_24A0B0AF8@<X0>(uint64_t __s1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, BOOL *a4@<X8>)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v6 = v4;
  uint64_t v7 = a3;
  uint64_t v9 = (const void *)__s1;
  switch(a3 >> 62)
  {
    case 1uLL:
      if (a2 >> 32 < (int)a2) {
        __break(1u);
      }
      swift_retain();
      char v14 = sub_24A0B0DEC((int)a2, a2 >> 32, v7 & 0x3FFFFFFFFFFFFFFFLL, v9);
      if (v6) {
        goto LABEL_16;
      }
      BOOL v10 = v14;
      __s1 = sub_24A08DEDC(a2, v7);
      break;
    case 2uLL:
      uint64_t v7 = a3 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v11 = *(void *)(a2 + 16);
      uint64_t v12 = *(void *)(a2 + 24);
      swift_retain();
      swift_retain();
      char v13 = sub_24A0B0DEC(v11, v12, v7, v9);
      if (v6) {
        goto LABEL_15;
      }
      BOOL v10 = v13;
      swift_release();
      __s1 = swift_release();
      break;
    case 3uLL:
      if (!__s1) {
        goto LABEL_14;
      }
      BOOL v10 = 1;
      break;
    default:
      uint64_t __s2 = a2;
      __int16 v16 = a3;
      char v17 = BYTE2(a3);
      char v18 = BYTE3(a3);
      char v19 = BYTE4(a3);
      char v20 = BYTE5(a3);
      if (!__s1)
      {
        __break(1u);
LABEL_14:
        __break(1u);
LABEL_15:
        swift_release();
        swift_release();
        __break(1u);
LABEL_16:
        sub_24A08DEDC(a2, v7);
        __break(1u);
        JUMPOUT(0x24A0B0D10);
      }
      __s1 = memcmp((const void *)__s1, &__s2, BYTE6(a3));
      BOOL v10 = __s1 == 0;
      break;
  }
  *a4 = v10;
  return __s1;
}

uint64_t sub_24A0B0D20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_9:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  __DataStorage._length.getter();
  sub_24A0B0AF8(v11, a4, a5, &v13);
  sub_24A08DEDC(a4, a5);
  if (!v5) {
    return v13;
  }
  return v12;
}

uint64_t sub_24A0B0DEC(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v8 = (char *)result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_12:
      __break(1u);
      goto LABEL_13;
    }
    v8 += a1 - result;
  }
  BOOL v9 = __OFSUB__(a2, a1);
  int64_t v10 = a2 - a1;
  if (v9)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t result = __DataStorage._length.getter();
  if (!a4)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!v8)
  {
LABEL_14:
    __break(1u);
    return result;
  }
  if (result >= v10) {
    size_t v11 = v10;
  }
  else {
    size_t v11 = result;
  }
  return memcmp(a4, v8, v11) == 0;
}

BOOL sub_24A0B0E8C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t __s1 = a1;
  __int16 v11 = a2;
  char v12 = BYTE2(a2);
  char v13 = BYTE3(a2);
  char v14 = BYTE4(a2);
  char v15 = BYTE5(a2);
  sub_24A0B0AF8((uint64_t)&__s1, a3, a4, &v9);
  sub_24A08DEDC(a3, a4);
  if (!v4) {
    return v9;
  }
  return v7;
}

void sub_24A0B0F90(uint64_t a1, uint64_t a2)
{
  sub_24A0B2958(a1, a2);
  if (v2)
  {
    uint64_t v4 = (unsigned char *)(v3 + 40);
    do
    {
      if (*v4)
      {
        Hasher._combine(_:)(1uLL);
      }
      else
      {
        Swift::UInt64 v5 = *((void *)v4 - 1);
        Hasher._combine(_:)(0);
        Hasher._combine(_:)(v5);
      }
      v4 += 16;
      --v2;
    }
    while (v2);
  }
}

void sub_24A0B0FF4(uint64_t a1, uint64_t a2)
{
  sub_24A0B2958(a1, a2);
  if (v2)
  {
    uint64_t v4 = v3 + 40;
    do
    {
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      v4 += 16;
      --v2;
    }
    while (v2);
  }
}

void sub_24A0B105C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)type metadata accessor for AssetDownloadRequest();
  uint64_t v4 = *((void *)v3 - 1);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::UInt v7 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v7);
  if (v7)
  {
    uint64_t v8 = a2 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v35 = *(void *)(v4 + 72);
    uint64_t v36 = v3;
    do
    {
      uint64_t v37 = v8;
      Swift::UInt v38 = v7;
      sub_24A0B2458(v8, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for AssetDownloadRequest);
      type metadata accessor for UUID();
      sub_24A0B2410(&qword_26975D340, MEMORY[0x263F07508]);
      dispatch thunk of Hashable.hash(into:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      type metadata accessor for URL();
      sub_24A0B2410(&qword_26975D348, MEMORY[0x263F06EA8]);
      dispatch thunk of Hashable.hash(into:)();
      BOOL v9 = &v6[v3[7]];
      dispatch thunk of Hashable.hash(into:)();
      uint64_t v10 = type metadata accessor for Asset.ID(0);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      __int16 v11 = (uint64_t *)&v9[*(int *)(v10 + 24)];
      uint64_t v12 = *v11;
      unint64_t v13 = v11[1];
      sub_24A08DE84(*v11, v13);
      Data.hash(into:)();
      sub_24A08DEDC(v12, v13);
      char v14 = (uint64_t *)&v9[*(int *)(v10 + 28)];
      uint64_t v15 = *v14;
      unint64_t v16 = v14[1];
      sub_24A08DE84(*v14, v16);
      Data.hash(into:)();
      sub_24A08DEDC(v15, v16);
      uint64_t v17 = type metadata accessor for Asset(0);
      char v18 = (uint64_t *)&v9[*(int *)(v17 + 20)];
      uint64_t v19 = *v18;
      unint64_t v20 = v18[1];
      uint64_t v22 = v18[2];
      unint64_t v21 = v18[3];
      sub_24A08DE84(*v18, v20);
      Data.hash(into:)();
      uint64_t v23 = v19;
      uint64_t v3 = v36;
      sub_24A08DEDC(v23, v20);
      sub_24A08DE84(v22, v21);
      Data.hash(into:)();
      sub_24A08DEDC(v22, v21);
      Hasher._combine(_:)(*(void *)&v9[*(int *)(v17 + 24)]);
      uint64_t v24 = &v6[v3[8]];
      if (v24[16] == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Swift::UInt v26 = *(void *)v24;
        Swift::UInt v25 = *((void *)v24 + 1);
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v26);
        Hasher._combine(_:)(v25);
      }
      dispatch thunk of Hashable.hash(into:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      type metadata accessor for Credential(0);
      type metadata accessor for Date();
      sub_24A0B2410((unint64_t *)&unk_26975D9E0, MEMORY[0x263F07490]);
      dispatch thunk of Hashable.hash(into:)();
      uint64_t v27 = (uint64_t *)&v6[v3[11]];
      uint64_t v28 = *v27;
      unint64_t v29 = v27[1];
      sub_24A08DE84(*v27, v29);
      Data.hash(into:)();
      sub_24A08DEDC(v28, v29);
      uint64_t v30 = (uint64_t *)&v6[v3[12]];
      uint64_t v31 = *v30;
      unint64_t v32 = v30[1];
      sub_24A08DE84(*v30, v32);
      Data.hash(into:)();
      sub_24A08DEDC(v31, v32);
      if (*(void *)&v6[v3[13] + 8])
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      uint64_t v33 = v37;
      Swift::UInt v34 = v38;
      sub_24A0B24C0((uint64_t)v6, (void (*)(void))type metadata accessor for AssetDownloadRequest);
      uint64_t v8 = v33 + v35;
      Swift::UInt v7 = v34 - 1;
    }
    while (v7);
  }
}

unint64_t sub_24A0B15A4()
{
  unint64_t result = qword_26975D940;
  if (!qword_26975D940)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975D940);
  }
  return result;
}

unint64_t sub_24A0B15F0()
{
  unint64_t result = qword_26975D948;
  if (!qword_26975D948)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975D948);
  }
  return result;
}

unint64_t sub_24A0B163C()
{
  unint64_t result = qword_26975D960;
  if (!qword_26975D960)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975D960);
  }
  return result;
}

void sub_24A0B1688()
{
  sub_24A0AAFDC();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = type metadata accessor for AssetSkeleton();
  sub_24A08F24C();
  MEMORY[0x270FA5388](v7);
  sub_24A0B2748();
  if (v1)
  {
    sub_24A0B280C();
    uint64_t v22 = v8;
    do
    {
      sub_24A0B2458(v3, v0, (uint64_t (*)(void))type metadata accessor for AssetSkeleton);
      type metadata accessor for URL();
      sub_24A0B2410(&qword_26975D348, MEMORY[0x263F06EA8]);
      dispatch thunk of Hashable.hash(into:)();
      uint64_t v9 = type metadata accessor for Asset.ID(0);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      uint64_t v10 = (uint64_t *)(v0 + *(int *)(v9 + 24));
      uint64_t v11 = *v10;
      unint64_t v12 = v10[1];
      sub_24A08DE84(*v10, v12);
      Data.hash(into:)();
      sub_24A08DEDC(v11, v12);
      unint64_t v13 = (uint64_t *)(v0 + *(int *)(v9 + 28));
      uint64_t v14 = *v13;
      unint64_t v15 = v13[1];
      sub_24A08DE84(*v13, v15);
      Data.hash(into:)();
      sub_24A08DEDC(v14, v15);
      uint64_t v16 = type metadata accessor for Asset(0);
      uint64_t v17 = (uint64_t *)(v0 + *(int *)(v16 + 20));
      uint64_t v18 = *v17;
      unint64_t v19 = v17[1];
      uint64_t v21 = v17[2];
      unint64_t v20 = v17[3];
      sub_24A08DE84(*v17, v19);
      Data.hash(into:)();
      sub_24A08DEDC(v18, v19);
      sub_24A08DE84(v21, v20);
      Data.hash(into:)();
      sub_24A08DEDC(v21, v20);
      Hasher._combine(_:)(*(void *)(v0 + *(int *)(v16 + 24)));
      sub_24A0B28E8(*(int *)(v6 + 20));
      Data.hash(into:)();
      sub_24A08DEDC(v5, v20);
      sub_24A0B28E8(*(int *)(v6 + 24));
      Data.hash(into:)();
      sub_24A08DEDC(v5, v20);
      swift_bridgeObjectRetain();
      sub_24A0B2898();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_24A0B2898();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_24A0B2898();
      swift_bridgeObjectRelease();
      type metadata accessor for Credential(0);
      type metadata accessor for Date();
      sub_24A0B2410((unint64_t *)&unk_26975D9E0, MEMORY[0x263F07490]);
      dispatch thunk of Hashable.hash(into:)();
      sub_24A0B24C0(v0, (void (*)(void))type metadata accessor for AssetSkeleton);
      v3 += v22;
      --v1;
    }
    while (v1);
  }
  sub_24A0AB030();
}

void sub_24A0B19B8()
{
  sub_24A0AAFDC();
  uint64_t v3 = v2;
  uint64_t v4 = type metadata accessor for AssetUploadRequest();
  sub_24A08F24C();
  MEMORY[0x270FA5388](v5);
  sub_24A0B2748();
  if (v1)
  {
    sub_24A0B280C();
    uint64_t v10 = v6;
    do
    {
      sub_24A0B2458(v3, v0, (uint64_t (*)(void))type metadata accessor for AssetUploadRequest);
      type metadata accessor for UUID();
      sub_24A0B2410(&qword_26975D340, MEMORY[0x263F07508]);
      dispatch thunk of Hashable.hash(into:)();
      swift_bridgeObjectRetain();
      sub_24A0B2798();
      swift_bridgeObjectRelease();
      type metadata accessor for URL();
      sub_24A0B2410(&qword_26975D348, MEMORY[0x263F06EA8]);
      sub_24A0B28B4();
      sub_24A0B28B4();
      sub_24A0B28B4();
      uint64_t v7 = (uint64_t *)(v0 + *(int *)(v4 + 36));
      uint64_t v8 = *v7;
      unint64_t v9 = v7[1];
      sub_24A08DE84(*v7, v9);
      Data.hash(into:)();
      sub_24A08DEDC(v8, v9);
      sub_24A0B27F4();
      Data.hash(into:)();
      sub_24A0B2664();
      swift_bridgeObjectRetain();
      sub_24A0B2798();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_24A0B2798();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_24A0B2798();
      swift_bridgeObjectRelease();
      type metadata accessor for Credential(0);
      type metadata accessor for Date();
      sub_24A0B2410((unint64_t *)&unk_26975D9E0, MEMORY[0x263F07490]);
      dispatch thunk of Hashable.hash(into:)();
      sub_24A0B24C0(v0, (void (*)(void))type metadata accessor for AssetUploadRequest);
      v3 += v10;
      --v1;
    }
    while (v1);
  }
  sub_24A0AB030();
}

uint64_t sub_24A0B1C5C(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_24A08E008(&qword_26975D950);
    sub_24A0B2410(a2, (void (*)(uint64_t))type metadata accessor for AssetDownloadRequest);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_24A0B1CF4()
{
  unint64_t result = qword_26975D990;
  if (!qword_26975D990)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975D990);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for DownloadRequestMessage(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unsigned __int8 v4 = *((unsigned char *)a2 + 8);
  j__swift_bridgeObjectRetain(*a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

uint64_t destroy for DownloadRequestMessage(uint64_t a1)
{
  return j__swift_bridgeObjectRelease(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t *assignWithCopy for DownloadRequestMessage(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unsigned __int8 v4 = *((unsigned char *)a2 + 8);
  j__swift_bridgeObjectRetain(*a2, v4);
  uint64_t v5 = *a1;
  uint64_t v6 = *((unsigned __int8 *)a1 + 8);
  *a1 = v3;
  *((unsigned char *)a1 + 8) = v4;
  j__swift_bridgeObjectRelease(v5, v6);
  return a1;
}

uint64_t *assignWithTake for DownloadRequestMessage(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  char v4 = *((unsigned char *)a2 + 8);
  uint64_t v5 = *a1;
  uint64_t v6 = *((unsigned __int8 *)a1 + 8);
  *a1 = v3;
  *((unsigned char *)a1 + 8) = v4;
  j__swift_bridgeObjectRelease(v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for DownloadRequestMessage(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFF && *(unsigned char *)(a1 + 9))
    {
      int v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
      if (v3 <= 1) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DownloadRequestMessage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_24A0B1EB0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_24A0B1EB8(uint64_t result, char a2)
{
  *(unsigned char *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for DownloadRequestMessage()
{
  return &type metadata for DownloadRequestMessage;
}

unsigned char *storeEnumTagSinglePayload for DownloadRequestMessage.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24A0B1FA0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DownloadRequestMessage.CodingKeys()
{
  return &type metadata for DownloadRequestMessage.CodingKeys;
}

ValueMetadata *type metadata accessor for DownloadRequestMessage.BatchRequestsCodingKeys()
{
  return &type metadata for DownloadRequestMessage.BatchRequestsCodingKeys;
}

unsigned char *_s10CloudAsset22DownloadRequestMessageO23BatchRequestsCodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x24A0B2088);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for DownloadRequestMessage.StreamRequestsCodingKeys()
{
  return &type metadata for DownloadRequestMessage.StreamRequestsCodingKeys;
}

unint64_t sub_24A0B20C4()
{
  unint64_t result = qword_26975D998;
  if (!qword_26975D998)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975D998);
  }
  return result;
}

unint64_t sub_24A0B2114()
{
  unint64_t result = qword_26975D9A0;
  if (!qword_26975D9A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975D9A0);
  }
  return result;
}

unint64_t sub_24A0B2164()
{
  unint64_t result = qword_26975D9A8;
  if (!qword_26975D9A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975D9A8);
  }
  return result;
}

unint64_t sub_24A0B21B4()
{
  unint64_t result = qword_26975D9B0;
  if (!qword_26975D9B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975D9B0);
  }
  return result;
}

unint64_t sub_24A0B2204()
{
  unint64_t result = qword_26975D9B8;
  if (!qword_26975D9B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975D9B8);
  }
  return result;
}

unint64_t sub_24A0B2254()
{
  unint64_t result = qword_26975D9C0;
  if (!qword_26975D9C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975D9C0);
  }
  return result;
}

unint64_t sub_24A0B22A4()
{
  unint64_t result = qword_26975D9C8;
  if (!qword_26975D9C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975D9C8);
  }
  return result;
}

unint64_t sub_24A0B22F4()
{
  unint64_t result = qword_26975D9D0;
  if (!qword_26975D9D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975D9D0);
  }
  return result;
}

unint64_t sub_24A0B2344()
{
  unint64_t result = qword_26975D9D8;
  if (!qword_26975D9D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975D9D8);
  }
  return result;
}

uint64_t sub_24A0B2394(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (result < a5)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if ((uint64_t)(a6 >> 1) < result || (uint64_t)(a6 >> 1) < a2) {
    goto LABEL_10;
  }
  if (a2 < a5)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if ((a2 & 0x8000000000000000) == 0) {
    return swift_unknownObjectRetain();
  }
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_24A0B2410(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24A0B2458(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_24A0B24C0(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_24A08F2BC();
  v3();
  return a1;
}

uint64_t sub_24A0B252C()
{
  return sub_24A08DEDC(v1, v0);
}

uint64_t sub_24A0B2544()
{
  return sub_24A08DE84(v1, v0);
}

uint64_t sub_24A0B255C()
{
  return sub_24A0B0AF8(v2, v1, v0, (BOOL *)(v3 - 120));
}

uint64_t sub_24A0B258C()
{
  return sub_24A08DEDC(v1, v0);
}

uint64_t sub_24A0B25C0@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  return sub_24A0B0AF8(a1, v3, v2, a2);
}

uint64_t sub_24A0B25DC()
{
  return sub_24A08DEDC(v1, v0);
}

uint64_t sub_24A0B25F4()
{
  return sub_24A08DE84(v1, v0);
}

uint64_t sub_24A0B260C()
{
  return sub_24A08DE84(v1, v0);
}

uint64_t sub_24A0B2624()
{
  return *(void *)(v0 - 136);
}

uint64_t sub_24A0B263C()
{
  return sub_24A08DEDC(v1, v0);
}

uint64_t sub_24A0B2654()
{
  return v0 - 120;
}

uint64_t sub_24A0B2664()
{
  return sub_24A08DEDC(v0, v1);
}

uint64_t sub_24A0B267C()
{
  return sub_24A08DE84(v1, v0);
}

uint64_t sub_24A0B2694()
{
  return sub_24A08DEDC(v1, v0);
}

uint64_t sub_24A0B26AC()
{
  return sub_24A08DE84(v1, v0);
}

uint64_t sub_24A0B26C4()
{
  return sub_24A0B0AF8(v1, v2, v0, (BOOL *)(v3 - 120));
}

uint64_t sub_24A0B26F4()
{
  return sub_24A0B0AF8(v0, v2, v1, (BOOL *)(v3 - 120));
}

void sub_24A0B2748()
{
  Swift::UInt v2 = *(void *)(v0 + 16);
  Hasher._combine(_:)(v2);
}

uint64_t sub_24A0B2778()
{
  return v0;
}

uint64_t sub_24A0B2798()
{
  return String.hash(into:)();
}

uint64_t sub_24A0B27C4()
{
  unint64_t v3 = *(void *)(v1 - 176);
  return sub_24A08DEDC(v0, v3);
}

uint64_t sub_24A0B27DC()
{
  return sub_24A08DEDC(v1, v0);
}

uint64_t sub_24A0B27F4()
{
  return sub_24A08DE84(v0, v1);
}

void sub_24A0B2824()
{
  *(void *)(v0 - 114) = 0;
  *(void *)(v0 - 120) = 0;
}

uint64_t sub_24A0B2830()
{
  return v0 - 120;
}

void sub_24A0B2840(char a1@<W8>)
{
  *(unsigned char *)(v2 - 108) = v1;
  *(unsigned char *)(v2 - 107) = a1;
}

void sub_24A0B2850(char a1@<W8>)
{
  *(unsigned char *)(v3 - 109) = v1;
  *(unsigned char *)(v3 - 108) = v2;
  *(unsigned char *)(v3 - 107) = a1;
}

uint64_t sub_24A0B2868()
{
  uint64_t v2 = *(void *)(v0 - 168);
  unint64_t v3 = *(void *)(v0 - 152);
  return sub_24A08DE84(v2, v3);
}

uint64_t sub_24A0B2880()
{
  uint64_t v2 = *(void *)(v0 - 160);
  unint64_t v3 = *(void *)(v0 - 176);
  return sub_24A08DE84(v2, v3);
}

uint64_t sub_24A0B2898()
{
  return String.hash(into:)();
}

uint64_t sub_24A0B28B4()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t sub_24A0B28E8@<X0>(uint64_t a1@<X8>)
{
  unint64_t v3 = (uint64_t *)(v1 + a1);
  uint64_t v4 = *v3;
  unint64_t v5 = v3[1];
  return sub_24A08DE84(v4, v5);
}

uint64_t sub_24A0B2908()
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

void sub_24A0B2928(char a1@<W8>)
{
  *(unsigned char *)(v2 - 111) = a1;
  *(unsigned char *)(v2 - 110) = v1;
}

void sub_24A0B2934(char a1@<W8>)
{
  *(unsigned char *)(v2 - 115) = v1;
  *(unsigned char *)(v2 - 114) = a1;
}

uint64_t sub_24A0B2940()
{
  return sub_24A08DEDC(v0, v1);
}

void sub_24A0B2958(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
}

uint64_t sub_24A0B2978@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24A0B29A4(a1, type metadata accessor for CloudAssets_Asset, (void (*)(void))type metadata accessor for CloudAssets_Asset, a2);
}

uint64_t sub_24A0B29A4@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X1>, void (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = a2(0);
  uint64_t v9 = v8;
  if (v7)
  {
    sub_24A0B387C(a1+ ((*(unsigned __int8 *)(*(void *)(v8 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v8 - 8) + 80)), a4, a3);
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = 1;
  }
  return _s10CloudAsset21UploadResponseMessageOwst_0(a4, v10, 1, v9);
}

uint64_t sub_24A0B2A60()
{
  sub_24A0B3914();
  v1[2] = v2;
  v1[3] = v0;
  sub_24A08DF34(qword_26975D9F0);
  v1[4] = sub_24A0B395C();
  sub_24A0B39BC();
  return MEMORY[0x270FA2498](v3, v4, v5);
}

uint64_t sub_24A0B2AE4()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 24) + 112);
  *(void *)(v0 + 40) = v1;
  return sub_24A0B38F4((uint64_t)sub_24A0B2B04, v1);
}

uint64_t sub_24A0B2B04()
{
  sub_24A0B3914();
  *(void *)(v0 + 48) = *(void *)(*(void *)(v0 + 40) + 112);
  swift_bridgeObjectRetain();
  sub_24A0B39BC();
  return MEMORY[0x270FA2498](v1, v2, v3);
}

uint64_t sub_24A0B2B74()
{
  sub_24A0B3914();
  uint64_t v1 = v0[4];
  sub_24A0B29A4(v0[6], (uint64_t (*)(void))type metadata accessor for AssetSkeleton, (void (*)(void))type metadata accessor for AssetSkeleton, v1);
  swift_bridgeObjectRelease();
  uint64_t v2 = type metadata accessor for AssetSkeleton();
  uint64_t result = _s10CloudAsset21UploadResponseMessageOwet_0(v1, 1, v2);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    sub_24A0B33FC(v0[4], v0[2], (void (*)(void))type metadata accessor for AssetSkeleton);
    swift_task_dealloc();
    sub_24A0B3920();
    return v4();
  }
  return result;
}

uint64_t sub_24A0B2C58(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return sub_24A0B38F4((uint64_t)sub_24A0B2C74, v1);
}

uint64_t sub_24A0B2C74()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 24) + 112);
  *(void *)(v0 + 32) = v1;
  return sub_24A0B38F4((uint64_t)sub_24A0B2C94, v1);
}

uint64_t sub_24A0B2C94()
{
  sub_24A0B3914();
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 32) + OBJC_IVAR____TtC10CloudAsset23AssetsUploadCoordinator__signals;
  sub_24A08DF34(&qword_26975D580);
  sub_24A0B392C();
  (*(void (**)(uint64_t, uint64_t))(v3 + 16))(v1, v2);
  sub_24A0B3920();
  return v4();
}

uint64_t sub_24A0B2D2C()
{
  sub_24A0B3914();
  v1[4] = v2;
  v1[5] = v0;
  v1[6] = sub_24A08DF34(&qword_26975D5C0);
  v1[7] = sub_24A0B395C();
  sub_24A08DF34(&qword_26975DA08);
  v1[8] = sub_24A0B395C();
  uint64_t v3 = sub_24A08DF34(&qword_26975DA10);
  v1[9] = v3;
  sub_24A0B38FC(v3);
  v1[10] = v4;
  v1[11] = sub_24A0B395C();
  uint64_t v5 = sub_24A08DF34(&qword_26975D590);
  v1[12] = v5;
  sub_24A0B38FC(v5);
  v1[13] = v6;
  v1[14] = sub_24A0B395C();
  sub_24A0B39BC();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

uint64_t sub_24A0B2E44()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 40) + 112);
  *(void *)(v0 + 120) = v1;
  return sub_24A0B38F4((uint64_t)sub_24A0B2E64, v1);
}

uint64_t sub_24A0B2E64()
{
  sub_24A0B3914();
  (*(void (**)(void, uint64_t, void))(v0[13] + 16))(v0[14], v0[15] + OBJC_IVAR____TtC10CloudAsset23AssetsUploadCoordinator__results, v0[12]);
  sub_24A0B39BC();
  return MEMORY[0x270FA2498](v1, v2, v3);
}

uint64_t sub_24A0B2EE4()
{
  sub_24A0B3940();
  uint64_t v1 = v0[5];
  MEMORY[0x24C5BB210](v0[12]);
  unint64_t v2 = sub_24A0B3324();
  uint64_t v3 = (void *)swift_task_alloc();
  v0[16] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_24A0B2FAC;
  uint64_t v4 = v0[8];
  uint64_t v5 = v0[9];
  return MEMORY[0x270FA20F8](v4, v1, v2, v5, v0 + 2);
}

uint64_t sub_24A0B2FAC()
{
  sub_24A0B3914();
  sub_24A0B38DC();
  uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_24A0B394C();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  uint64_t v6 = *(void *)(v3 + 40);
  if (v0) {
    uint64_t v7 = sub_24A0B3278;
  }
  else {
    uint64_t v7 = sub_24A0B3090;
  }
  return MEMORY[0x270FA2498](v7, v6, 0);
}

uint64_t sub_24A0B3090()
{
  uint64_t v1 = v0[8];
  if (_s10CloudAsset21UploadResponseMessageOwet_0(v1, 1, v0[6]) == 1)
  {
    uint64_t v3 = v0[13];
    uint64_t v2 = v0[14];
    uint64_t v4 = v0[12];
    sub_24A0B39DC();
    v5();
    sub_24A090E10();
    swift_allocError();
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
LABEL_5:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_24A0B3920();
    goto LABEL_7;
  }
  sub_24A0B3394(v1, v0[7]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v0[3] = *(void *)v0[7];
    sub_24A08DF34(&qword_26975D5B0);
    swift_willThrowTypedImpl();
    uint64_t v6 = sub_24A0B3984();
    v7(v6);
    uint64_t v8 = sub_24A0B39C8();
    v9(v8);
    goto LABEL_5;
  }
  sub_24A0B33FC(v0[7], v0[4], (void (*)(void))type metadata accessor for Asset);
  uint64_t v11 = sub_24A0B3984();
  v12(v11);
  uint64_t v13 = sub_24A0B39C8();
  v14(v13);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A0B3920();
LABEL_7:
  return v10();
}

uint64_t sub_24A0B3278()
{
  sub_24A0B3940();
  uint64_t v2 = v0[13];
  uint64_t v1 = v0[14];
  uint64_t v3 = v0[12];
  sub_24A0B39DC();
  v4();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A0B3920();
  return v5();
}

unint64_t sub_24A0B3324()
{
  unint64_t result = qword_26975DA18;
  if (!qword_26975DA18)
  {
    type metadata accessor for AssetUploadCoordinator();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975DA18);
  }
  return result;
}

uint64_t type metadata accessor for AssetUploadCoordinator()
{
  return self;
}

uint64_t sub_24A0B3394(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A08DF34(&qword_26975D5C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_24A0B33FC(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_24A0B392C();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t AssetUploadCoordinator.deinit()
{
  swift_release();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t AssetUploadCoordinator.__deallocating_deinit()
{
  swift_release();
  swift_defaultActor_destroy();
  return MEMORY[0x270FA2418](v0);
}

uint64_t AssetUploadCoordinator.unownedExecutor.getter()
{
  return v0;
}

uint64_t sub_24A0B34C4()
{
  return AssetUploadCoordinator.unownedExecutor.getter();
}

uint64_t method lookup function for AssetUploadCoordinator(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AssetUploadCoordinator);
}

uint64_t dispatch thunk of AssetUploadCoordinator.assetSkeleton.getter()
{
  sub_24A0B3940();
  sub_24A0B3974();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_24A0B399C(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_24A0B35E4;
  uint64_t v3 = sub_24A0B39AC();
  return v4(v3);
}

uint64_t sub_24A0B35E4()
{
  sub_24A0B3914();
  sub_24A0B38DC();
  uint64_t v1 = *v0;
  sub_24A0B394C();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_24A0B3920();
  return v3();
}

uint64_t dispatch thunk of AssetUploadCoordinator.signals.getter()
{
  sub_24A0B3940();
  sub_24A0B3974();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_24A0B399C(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_24A0B38D8;
  uint64_t v3 = sub_24A0B39AC();
  return v4(v3);
}

uint64_t dispatch thunk of AssetUploadCoordinator.result()()
{
  sub_24A0B3940();
  sub_24A0B3974();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_24A0B399C(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_24A0B35E4;
  uint64_t v3 = sub_24A0B39AC();
  return v4(v3);
}

uint64_t sub_24A0B387C(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_24A0B392C();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t sub_24A0B38F4(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA2498](a1, a2, 0);
}

uint64_t sub_24A0B38FC(uint64_t a1)
{
  return a1 - 8;
}

uint64_t sub_24A0B3920()
{
  return v0 + 8;
}

uint64_t sub_24A0B395C()
{
  return swift_task_alloc();
}

uint64_t sub_24A0B3984()
{
  return v0;
}

uint64_t sub_24A0B399C(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t sub_24A0B39AC()
{
  return v0;
}

uint64_t sub_24A0B39C8()
{
  return v0;
}

void SimultaneousTransferError.hash(into:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  Hasher._combine(_:)(0);
  sub_24A0B0FF4(a1, v3);
}

uint64_t static SimultaneousTransferError.== infix(_:_:)(void **a1, void **a2)
{
  return sub_24A0AB3B8(*a1, *a2);
}

uint64_t sub_24A0B3A4C(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x746163696C707061 && a2 == 0xEE007344496E6F69)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_24A0B3AF8()
{
  return 0x746163696C707061;
}

uint64_t sub_24A0B3B1C(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000013 && a2 == 0x800000024A0EEB10)
  {
    swift_bridgeObjectRelease();
    char v2 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v2 = v3 ^ 1;
  }
  return v2 & 1;
}

unint64_t sub_24A0B3BA4()
{
  return 0xD000000000000013;
}

uint64_t sub_24A0B3BC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_24A0B3A4C(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_24A0B3BF0(uint64_t a1)
{
  unint64_t v2 = sub_24A0B4390();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A0B3C2C(uint64_t a1)
{
  unint64_t v2 = sub_24A0B4390();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_24A0B3C6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_24A0B3B1C(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_24A0B3C98(uint64_t a1)
{
  unint64_t v2 = sub_24A0B4344();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A0B3CD4(uint64_t a1)
{
  unint64_t v2 = sub_24A0B4344();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t SimultaneousTransferError.encode(to:)(void *a1)
{
  sub_24A08DF34(&qword_26975DA38);
  sub_24A08F24C();
  MEMORY[0x270FA5388](v2);
  sub_24A093CD4();
  uint64_t v3 = sub_24A08DF34(&qword_26975DA40);
  sub_24A08F24C();
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v6);
  sub_24A093CD4();
  uint64_t v9 = v8 - v7;
  sub_24A08DF78(a1, a1[3]);
  sub_24A0B4344();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_24A0B4390();
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  sub_24A08DF34(&qword_26975DA58);
  sub_24A0B43DC(&qword_26975DA60);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  uint64_t v10 = sub_24A0B4908();
  v11(v10);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v9, v3);
}

Swift::Int SimultaneousTransferError.hashValue.getter()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  sub_24A0B0FF4((uint64_t)v3, v1);
  return Hasher._finalize()();
}

uint64_t SimultaneousTransferError.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  sub_24A08DF34(&qword_26975DA68);
  sub_24A08F24C();
  MEMORY[0x270FA5388](v4);
  sub_24A093CD4();
  uint64_t v5 = sub_24A08DF34(&qword_26975DA70);
  sub_24A08F24C();
  uint64_t v27 = v6;
  MEMORY[0x270FA5388](v7);
  sub_24A093CD4();
  uint64_t v10 = v9 - v8;
  sub_24A08DF78(a1, a1[3]);
  sub_24A0B4344();
  uint64_t v11 = (uint64_t)a1;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    uint64_t v12 = KeyedDecodingContainer.allKeys.getter();
    uint64_t v13 = *(void *)(v12 + 16);
    if (v13
      && (sub_24A0B2390(1, v13, v12, v12 + 32, 0, (2 * v13) | 1),
          uint64_t v15 = v14,
          unint64_t v17 = v16,
          swift_bridgeObjectRelease(),
          v15 == v17 >> 1))
    {
      sub_24A0B4390();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      sub_24A08DF34(&qword_26975DA58);
      sub_24A0B43DC(&qword_26975DA78);
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v11 = (uint64_t)a1;
      uint64_t v22 = sub_24A0B4908();
      v23(v22);
      swift_unknownObjectRelease();
      uint64_t v24 = sub_24A0B48EC();
      v25(v24);
      *a2 = v28;
    }
    else
    {
      uint64_t v18 = type metadata accessor for DecodingError();
      swift_allocError();
      unint64_t v20 = v19;
      sub_24A08DF34(&qword_26975D980);
      *unint64_t v20 = &type metadata for SimultaneousTransferError;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v18 - 8) + 104))(v20, *MEMORY[0x263F8DCB0], v18);
      swift_willThrow();
      swift_unknownObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v10, v5);
      uint64_t v11 = (uint64_t)a1;
    }
  }
  return sub_24A08E050(v11);
}

Swift::Int sub_24A0B42B0()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  sub_24A0B0FF4((uint64_t)v3, v1);
  return Hasher._finalize()();
}

uint64_t sub_24A0B4300@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return SimultaneousTransferError.init(from:)(a1, a2);
}

uint64_t sub_24A0B4318(void *a1)
{
  return SimultaneousTransferError.encode(to:)(a1);
}

unint64_t sub_24A0B4344()
{
  unint64_t result = qword_26975DA48;
  if (!qword_26975DA48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975DA48);
  }
  return result;
}

unint64_t sub_24A0B4390()
{
  unint64_t result = qword_26975DA50;
  if (!qword_26975DA50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975DA50);
  }
  return result;
}

uint64_t sub_24A0B43DC(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_24A08E008(&qword_26975DA58);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_24A0B4444()
{
  unint64_t result = qword_26975DA80;
  if (!qword_26975DA80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975DA80);
  }
  return result;
}

unint64_t sub_24A0B4494()
{
  unint64_t result = qword_26975DA88;
  if (!qword_26975DA88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975DA88);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for SimultaneousTransferError(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for SimultaneousTransferError()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for SimultaneousTransferError(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *initializeWithTake for SimultaneousTransferError(void *result, void *a2)
{
  *unint64_t result = *a2;
  return result;
}

void *assignWithTake for SimultaneousTransferError(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SimultaneousTransferError(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 8))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SimultaneousTransferError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 8) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SimultaneousTransferError()
{
  return &type metadata for SimultaneousTransferError;
}

ValueMetadata *type metadata accessor for SimultaneousTransferError.CodingKeys()
{
  return &type metadata for SimultaneousTransferError.CodingKeys;
}

unsigned char *_s10CloudAsset25SimultaneousTransferErrorO10CodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x24A0B46D0);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for SimultaneousTransferError.ApplicationsBlockedCodingKeys()
{
  return &type metadata for SimultaneousTransferError.ApplicationsBlockedCodingKeys;
}

unint64_t sub_24A0B470C()
{
  unint64_t result = qword_26975DA90;
  if (!qword_26975DA90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975DA90);
  }
  return result;
}

unint64_t sub_24A0B475C()
{
  unint64_t result = qword_26975DA98;
  if (!qword_26975DA98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975DA98);
  }
  return result;
}

unint64_t sub_24A0B47AC()
{
  unint64_t result = qword_26975DAA0;
  if (!qword_26975DAA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975DAA0);
  }
  return result;
}

unint64_t sub_24A0B47FC()
{
  unint64_t result = qword_26975DAA8;
  if (!qword_26975DAA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975DAA8);
  }
  return result;
}

unint64_t sub_24A0B484C()
{
  unint64_t result = qword_26975DAB0;
  if (!qword_26975DAB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975DAB0);
  }
  return result;
}

unint64_t sub_24A0B489C()
{
  unint64_t result = qword_26975DAB8[0];
  if (!qword_26975DAB8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26975DAB8);
  }
  return result;
}

uint64_t sub_24A0B48EC()
{
  return v0;
}

uint64_t sub_24A0B4908()
{
  return v0;
}

uint64_t sub_24A0B4924(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x73736563637573 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6572756C696166 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_24A0B4A1C(char a1)
{
  if (a1) {
    return 0x6572756C696166;
  }
  else {
    return 0x73736563637573;
  }
}

uint64_t sub_24A0B4A4C()
{
  return 1;
}

uint64_t sub_24A0B4A6C()
{
  return 0;
}

uint64_t sub_24A0B4A78(uint64_t a1, uint64_t a2)
{
  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_24A0B4AE8()
{
  return 12383;
}

BOOL sub_24A0B4AF4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_24A096DD8(*a1, *a2);
}

Swift::Int sub_24A0B4B0C()
{
  return sub_24A096EE0(*v0);
}

void sub_24A0B4B20(uint64_t a1)
{
  sub_24A096DE8(a1, *v1);
}

Swift::Int sub_24A0B4B34()
{
  Hasher.init(_seed:)();
  sub_24A096DE8((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t sub_24A0B4B80()
{
  return sub_24A0B4A1C(*v0);
}

uint64_t sub_24A0B4B94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_24A0B4924(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_24A0B4BC8()
{
  return sub_24A08D3F0();
}

uint64_t sub_24A0B4BF4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_24A096ED8();
  *a1 = result;
  return result;
}

uint64_t sub_24A0B4C28(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x270FA00B0](a1, WitnessTable);
}

uint64_t sub_24A0B4C7C(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x270FA00B8](a1, WitnessTable);
}

uint64_t sub_24A0B4CD0()
{
  return sub_24A0B4A6C();
}

uint64_t sub_24A0B4CE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, unsigned char *a4@<X8>)
{
  return sub_24A0B4E6C(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, void, void, void))sub_24A0B4A4C, a4);
}

uint64_t sub_24A0B4CF8(void *a1, uint64_t a2)
{
  return sub_24A0B4EC4(a1, a2, (uint64_t (*)(void, void, void))sub_24A08D3F0);
}

uint64_t sub_24A0B4D10@<X0>(uint64_t a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  return sub_24A0B4F0C(a1, a2, (uint64_t (*)(uint64_t, void, void, void))sub_24A08F828, a3);
}

uint64_t sub_24A0B4D28(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x270FA00B0](a1, WitnessTable);
}

uint64_t sub_24A0B4D7C(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x270FA00B8](a1, WitnessTable);
}

uint64_t sub_24A0B4DD0()
{
  return sub_24A08F828();
}

Swift::Int sub_24A0B4DDC()
{
  return sub_24A093F40();
}

void sub_24A0B4DEC()
{
}

Swift::Int sub_24A0B4DFC()
{
  return Hasher._finalize()();
}

uint64_t sub_24A0B4E44()
{
  return sub_24A0B4AE8();
}

uint64_t sub_24A0B4E54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, unsigned char *a4@<X8>)
{
  return sub_24A0B4E6C(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, void, void, void))sub_24A0B4A78, a4);
}

uint64_t sub_24A0B4E6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t (*a4)(uint64_t, uint64_t, void, void, void)@<X4>, unsigned char *a5@<X8>)
{
  uint64_t result = a4(a1, a2, a3[2], a3[3], a3[4]);
  *a5 = result & 1;
  return result;
}

uint64_t sub_24A0B4EAC(void *a1, uint64_t a2)
{
  return sub_24A0B4EC4(a1, a2, (uint64_t (*)(void, void, void))sub_24A0B6C44);
}

uint64_t sub_24A0B4EC4(void *a1, uint64_t a2, uint64_t (*a3)(void, void, void))
{
  return a3(a1[2], a1[3], a1[4]);
}

uint64_t sub_24A0B4EF4@<X0>(uint64_t a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  return sub_24A0B4F0C(a1, a2, (uint64_t (*)(uint64_t, void, void, void))sub_24A0AFF84, a3);
}

uint64_t sub_24A0B4F0C@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t (*a3)(uint64_t, void, void, void)@<X3>, unsigned char *a4@<X8>)
{
  uint64_t result = a3(a1, a2[2], a2[3], a2[4]);
  *a4 = result & 1;
  return result;
}

uint64_t sub_24A0B4F4C(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x270FA00B0](a1, WitnessTable);
}

uint64_t sub_24A0B4FA0(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x270FA00B8](a1, WitnessTable);
}

uint64_t XPCResult.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v47 = a2;
  sub_24A0B6D04();
  uint64_t v5 = type metadata accessor for XPCResult.FailureCodingKeys();
  swift_getWitnessTable();
  sub_24A0B6D30();
  uint64_t v44 = v6;
  uint64_t v45 = v5;
  type metadata accessor for KeyedEncodingContainer();
  sub_24A0B6C48();
  uint64_t v42 = v8;
  uint64_t v43 = v7;
  sub_24A0B6C78();
  MEMORY[0x270FA5388](v9);
  sub_24A0B6D18();
  uint64_t v38 = v10;
  sub_24A0B6D04();
  uint64_t v11 = type metadata accessor for XPCResult.SuccessCodingKeys();
  swift_getWitnessTable();
  sub_24A0B6D30();
  v37[3] = v11;
  v37[1] = v12;
  type metadata accessor for KeyedEncodingContainer();
  sub_24A0B6C48();
  uint64_t v40 = v14;
  uint64_t v41 = v13;
  sub_24A0B6C78();
  MEMORY[0x270FA5388](v15);
  sub_24A0B6D18();
  v37[2] = v16;
  sub_24A0B6C48();
  uint64_t v39 = v17;
  MEMORY[0x270FA5388](v18);
  sub_24A08F2E0();
  uint64_t v50 = v19;
  sub_24A0B6C48();
  uint64_t v21 = v20;
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)v37 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = v4;
  type metadata accessor for XPCResult.CodingKeys();
  swift_getWitnessTable();
  uint64_t v51 = type metadata accessor for KeyedEncodingContainer();
  sub_24A0B6C48();
  uint64_t v48 = v25;
  sub_24A0B6C78();
  MEMORY[0x270FA5388](v26);
  uint64_t v28 = (char *)v37 - v27;
  sub_24A08DF78(a1, a1[3]);
  uint64_t v49 = v28;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v24, v52, v47);
  if (_s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v24, 1, v3) == 1)
  {
    char v54 = 1;
    uint64_t v29 = v38;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v29, v43);
    sub_24A0B6C84();
    return v30();
  }
  else
  {
    uint64_t v32 = v48;
    uint64_t v33 = v39;
    (*(void (**)(uint64_t, char *, uint64_t))(v39 + 32))(v50, v24, v3);
    char v53 = 0;
    uint64_t v34 = v51;
    uint64_t v35 = v49;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    sub_24A0B6C84();
    v36();
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v50, v3);
    return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v35, v34);
  }
}

uint64_t type metadata accessor for XPCResult.FailureCodingKeys()
{
  return sub_24A0B6C14();
}

uint64_t type metadata accessor for XPCResult.SuccessCodingKeys()
{
  return sub_24A0B6C14();
}

uint64_t type metadata accessor for XPCResult.CodingKeys()
{
  return sub_24A0B6C14();
}

uint64_t XPCResult.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  size_t v61 = a4;
  uint64_t v7 = type metadata accessor for XPCResult.FailureCodingKeys();
  swift_getWitnessTable();
  sub_24A0B6D30();
  uint64_t v66 = v8;
  uint64_t v67 = v7;
  uint64_t v58 = type metadata accessor for KeyedDecodingContainer();
  sub_24A0B6C48();
  uint64_t v57 = v9;
  sub_24A0B6C78();
  MEMORY[0x270FA5388](v10);
  sub_24A0B6D18();
  uint64_t v65 = v11;
  sub_24A0B6CD4();
  uint64_t v12 = type metadata accessor for XPCResult.SuccessCodingKeys();
  swift_getWitnessTable();
  sub_24A0B6D30();
  uint64_t v62 = v13;
  uint64_t v63 = v12;
  uint64_t v56 = type metadata accessor for KeyedDecodingContainer();
  sub_24A0B6C48();
  uint64_t v59 = v14;
  sub_24A0B6C78();
  MEMORY[0x270FA5388](v15);
  sub_24A0B6D18();
  uint64_t v64 = v16;
  sub_24A0B6CD4();
  type metadata accessor for XPCResult.CodingKeys();
  swift_getWitnessTable();
  sub_24A0B6D24();
  uint64_t v71 = type metadata accessor for KeyedDecodingContainer();
  sub_24A0B6C48();
  uint64_t v69 = v17;
  sub_24A0B6C78();
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v53 - v19;
  uint64_t v72 = a3;
  uint64_t v73 = a2;
  sub_24A0B6CD4();
  uint64_t v68 = type metadata accessor for XPCResult();
  sub_24A0B6C48();
  uint64_t v60 = v21;
  uint64_t v23 = MEMORY[0x270FA5388](v22);
  uint64_t v25 = (char *)&v53 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  uint64_t v27 = (char *)&v53 - v26;
  sub_24A08DF78(a1, a1[3]);
  uint64_t v70 = v20;
  uint64_t v28 = v78;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v28) {
    goto LABEL_7;
  }
  char v54 = v25;
  int v55 = v27;
  uint64_t v29 = v73;
  uint64_t v78 = a1;
  *(void *)&long long v74 = KeyedDecodingContainer.allKeys.getter();
  sub_24A0B6D24();
  type metadata accessor for Array();
  swift_getWitnessTable();
  *(void *)&long long v76 = ArraySlice.init<A>(_:)();
  *((void *)&v76 + 1) = v30;
  *(void *)&long long v77 = v31;
  *((void *)&v77 + 1) = v32;
  sub_24A0B6D24();
  type metadata accessor for ArraySlice();
  swift_getWitnessTable();
  Collection<>.popFirst()();
  char v33 = v74;
  if (v74 == 2 || (v53 = v76, long long v74 = v76, v75 = v77, (Collection.isEmpty.getter() & 1) == 0))
  {
    uint64_t v34 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v36 = v35;
    sub_24A08DF34(&qword_26975D980);
    uint64_t *v36 = v68;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v34 - 8) + 104))(v36, *MEMORY[0x263F8DCB0], v34);
    swift_willThrow();
    swift_unknownObjectRelease();
    uint64_t v37 = sub_24A0B6CAC();
    v38(v37);
    a1 = v78;
LABEL_7:
    uint64_t v39 = (uint64_t)a1;
    return sub_24A08E050(v39);
  }
  if (v33)
  {
    LOBYTE(v74) = 1;
    uint64_t v41 = v65;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v41, v58);
    swift_unknownObjectRelease();
    uint64_t v42 = sub_24A0B6CAC();
    v43(v42);
    uint64_t v44 = (uint64_t)v55;
    _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)v55, 1, 1, v29);
    (*(void (**)(char *, uint64_t, uint64_t))(v60 + 32))(v61, v44, v68);
  }
  else
  {
    LOBYTE(v74) = 0;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    sub_24A0B6C84();
    v45();
    swift_unknownObjectRelease();
    uint64_t v46 = sub_24A0B6C94();
    v47(v46);
    uint64_t v48 = (uint64_t)v54;
    _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)v54, 0, 1, v29);
    uint64_t v49 = *(void (**)(char *, uint64_t, uint64_t))(v60 + 32);
    uint64_t v50 = (uint64_t)v55;
    uint64_t v51 = v48;
    uint64_t v52 = v68;
    v49(v55, v51, v68);
    v49(v61, v50, v52);
  }
  uint64_t v39 = (uint64_t)v78;
  return sub_24A08E050(v39);
}

uint64_t type metadata accessor for XPCResult()
{
  return sub_24A0B6C14();
}

uint64_t sub_24A0B5A8C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  return XPCResult.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3);
}

uint64_t sub_24A0B5AB0(void *a1, uint64_t a2)
{
  return XPCResult.encode(to:)(a1, a2);
}

uint64_t static XPCResult<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v34 = a6;
  sub_24A0B6C48();
  uint64_t v36 = v8;
  uint64_t v37 = v7;
  MEMORY[0x270FA5388](v9);
  sub_24A08F2E0();
  char v33 = v10;
  uint64_t v11 = type metadata accessor for XPCResult();
  sub_24A0B6C48();
  uint64_t v13 = v12;
  sub_24A0B6C78();
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v32 - v15;
  sub_24A0B6D24();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  sub_24A0B6C48();
  uint64_t v19 = v18;
  sub_24A0B6C78();
  uint64_t v21 = MEMORY[0x270FA5388](v20);
  uint64_t v23 = (char *)&v32 - v22;
  uint64_t v24 = (char *)&v32 + *(int *)(v21 + 48) - v22;
  uint64_t v35 = v13;
  uint64_t v25 = *(void (**)(void))(v13 + 16);
  sub_24A0B6CC4();
  v25();
  sub_24A0B6CC4();
  v25();
  sub_24A0B6CE4((uint64_t)v23);
  if (v27)
  {
    char v26 = 1;
    sub_24A0B6CE4((uint64_t)v24);
    if (v27) {
      goto LABEL_10;
    }
  }
  else
  {
    sub_24A0B6CC4();
    v25();
    sub_24A0B6CE4((uint64_t)v24);
    if (!v27)
    {
      uint64_t v28 = v36;
      uint64_t v29 = v33;
      (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v33, v24, a3);
      char v26 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v30 = *(void (**)(char *, uint64_t))(v28 + 8);
      v30(v29, a3);
      v30(v16, a3);
LABEL_10:
      uint64_t v19 = v35;
      goto LABEL_11;
    }
    (*(void (**)(char *, uint64_t))(v36 + 8))(v16, a3);
  }
  char v26 = 0;
  uint64_t v11 = TupleTypeMetadata2;
LABEL_11:
  (*(void (**)(char *, uint64_t))(v19 + 8))(v23, v11);
  return v26 & 1;
}

uint64_t sub_24A0B5D2C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return static XPCResult<>.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4], *(void *)(a4 - 8));
}

void XPCResult<>.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  sub_24A0B6C60();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A0B6C60();
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v11 + 16))(v10, v12);
  if (_s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v10, 1, v2) == 1)
  {
    Hasher._combine(_:)(1uLL);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v10, v2);
    Hasher._combine(_:)(0);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v2);
  }
}

Swift::Int XPCResult<>.hashValue.getter(uint64_t a1)
{
  Hasher.init(_seed:)();
  XPCResult<>.hash(into:)((uint64_t)v3, a1);
  return Hasher._finalize()();
}

Swift::Int sub_24A0B5EFC(uint64_t a1)
{
  return XPCResult<>.hashValue.getter(a1);
}

void sub_24A0B5F04(uint64_t a1, uint64_t a2)
{
}

Swift::Int sub_24A0B5F0C(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  XPCResult<>.hash(into:)((uint64_t)v4, a2);
  return Hasher._finalize()();
}

uint64_t sub_24A0B5F60()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A0B5FA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 24);
}

uint64_t sub_24A0B5FAC()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t *sub_24A0B6028(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if (*(_DWORD *)(v6 + 84)) {
    size_t v7 = *(void *)(v6 + 64);
  }
  else {
    size_t v7 = *(void *)(v6 + 64) + 1;
  }
  uint64_t v8 = *(_DWORD *)(v6 + 80);
  if (v8 > 7 || (*(_DWORD *)(v6 + 80) & 0x100000) != 0 || v7 > 0x18)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v8 + 16) & ~v8));
    swift_retain();
  }
  else if (_s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)a2, 1, v5))
  {
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)a1, 0, 1, v5);
  }
  return a1;
}

uint64_t sub_24A0B6144(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t result = _s10CloudAsset21UploadResponseMessageOwet_0(a1, 1, v3);
  if (!result)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    return v5(a1, v3);
  }
  return result;
}

void *sub_24A0B61C0(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  int v6 = _s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)a2, 1, v5);
  uint64_t v7 = *(void *)(v5 - 8);
  if (v6)
  {
    if (*(_DWORD *)(v7 + 84)) {
      size_t v8 = *(void *)(v7 + 64);
    }
    else {
      size_t v8 = *(void *)(v7 + 64) + 1;
    }
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v5);
    _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)a1, 0, 1, v5);
  }
  return a1;
}

void *sub_24A0B6284(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  int v6 = _s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)a1, 1, v5);
  int v7 = _s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)a2, 1, v5);
  uint64_t v8 = *(void *)(v5 - 8);
  if (v6)
  {
    if (!v7)
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(a1, a2, v5);
      _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)a1, 0, 1, v5);
      return a1;
    }
    int v9 = *(_DWORD *)(v8 + 84);
    size_t v10 = *(void *)(v8 + 64);
  }
  else
  {
    if (!v7)
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 24))(a1, a2, v5);
      return a1;
    }
    uint64_t v11 = v8 + 8;
    (*(void (**)(void *, uint64_t))(v8 + 8))(a1, v5);
    int v9 = *(_DWORD *)(v11 + 76);
    size_t v10 = *(void *)(v11 + 56);
  }
  if (v9) {
    size_t v12 = v10;
  }
  else {
    size_t v12 = v10 + 1;
  }
  memcpy(a1, a2, v12);
  return a1;
}

void *sub_24A0B63AC(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  int v6 = _s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)a2, 1, v5);
  uint64_t v7 = *(void *)(v5 - 8);
  if (v6)
  {
    if (*(_DWORD *)(v7 + 84)) {
      size_t v8 = *(void *)(v7 + 64);
    }
    else {
      size_t v8 = *(void *)(v7 + 64) + 1;
    }
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v5);
    _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)a1, 0, 1, v5);
  }
  return a1;
}

void *sub_24A0B6470(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  int v6 = _s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)a1, 1, v5);
  int v7 = _s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)a2, 1, v5);
  uint64_t v8 = *(void *)(v5 - 8);
  if (v6)
  {
    if (!v7)
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(a1, a2, v5);
      _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)a1, 0, 1, v5);
      return a1;
    }
    int v9 = *(_DWORD *)(v8 + 84);
    size_t v10 = *(void *)(v8 + 64);
  }
  else
  {
    if (!v7)
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 40))(a1, a2, v5);
      return a1;
    }
    uint64_t v11 = v8 + 8;
    (*(void (**)(void *, uint64_t))(v8 + 8))(a1, v5);
    int v9 = *(_DWORD *)(v11 + 76);
    size_t v10 = *(void *)(v11 + 56);
  }
  if (v9) {
    size_t v12 = v10;
  }
  else {
    size_t v12 = v10 + 1;
  }
  memcpy(a1, a2, v12);
  return a1;
}

uint64_t sub_24A0B6598(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(unsigned int *)(*(void *)(v4 - 8) + 84);
  unsigned int v6 = v5 - 1;
  if (!v5) {
    unsigned int v6 = 0;
  }
  uint64_t v7 = *(void *)(*(void *)(v4 - 8) + 64);
  if (!v5) {
    ++v7;
  }
  if (!a2) {
    return 0;
  }
  unsigned int v8 = a2 - v6;
  if (a2 > v6)
  {
    char v9 = 8 * v7;
    if (v7 > 3) {
      goto LABEL_8;
    }
    unsigned int v11 = ((v8 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v7);
      if (v10) {
        goto LABEL_15;
      }
    }
    else
    {
      if (v11 <= 0xFF)
      {
        if (v11 < 2) {
          goto LABEL_23;
        }
LABEL_8:
        int v10 = *((unsigned __int8 *)a1 + v7);
        if (!*((unsigned char *)a1 + v7)) {
          goto LABEL_23;
        }
LABEL_15:
        int v12 = (v10 - 1) << v9;
        if (v7 > 3) {
          int v12 = 0;
        }
        if (v7)
        {
          if (v7 > 3) {
            LODWORD(v7) = 4;
          }
          switch((int)v7)
          {
            case 2:
              LODWORD(v7) = *a1;
              break;
            case 3:
              LODWORD(v7) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
              break;
            case 4:
              LODWORD(v7) = *(_DWORD *)a1;
              break;
            default:
              LODWORD(v7) = *(unsigned __int8 *)a1;
              break;
          }
        }
        return v6 + (v7 | v12) + 1;
      }
      int v10 = *(unsigned __int16 *)((char *)a1 + v7);
      if (*(unsigned __int16 *)((char *)a1 + v7)) {
        goto LABEL_15;
      }
    }
  }
LABEL_23:
  if (v5 < 2) {
    return 0;
  }
  unsigned int v14 = _s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)a1, v5, v4);
  if (v14 >= 2) {
    return v14 - 1;
  }
  else {
    return 0;
  }
}

void sub_24A0B671C(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  if (v9) {
    unsigned int v10 = v9 - 1;
  }
  else {
    unsigned int v10 = 0;
  }
  if (v9) {
    size_t v11 = *(void *)(v8 + 64);
  }
  else {
    size_t v11 = *(void *)(v8 + 64) + 1;
  }
  char v12 = 8 * v11;
  BOOL v13 = a3 >= v10;
  unsigned int v14 = a3 - v10;
  if (v14 != 0 && v13)
  {
    if (v11 <= 3)
    {
      unsigned int v15 = ((v14 + ~(-1 << v12)) >> v12) + 1;
      if (HIWORD(v15))
      {
        int v6 = 4;
      }
      else if (v15 >= 0x100)
      {
        int v6 = 2;
      }
      else
      {
        int v6 = v15 > 1;
      }
    }
    else
    {
      int v6 = 1;
    }
  }
  if (v10 < a2)
  {
    unsigned int v16 = ~v10 + a2;
    if (v11 < 4)
    {
      int v17 = (v16 >> v12) + 1;
      if (v11)
      {
        int v18 = v16 & ~(-1 << v12);
        bzero(a1, v11);
        if (v11 == 3)
        {
          *(_WORD *)a1 = v18;
          a1[2] = BYTE2(v18);
        }
        else if (v11 == 2)
        {
          *(_WORD *)a1 = v18;
        }
        else
        {
          *a1 = v18;
        }
      }
    }
    else
    {
      bzero(a1, v11);
      *(_DWORD *)a1 = v16;
      int v17 = 1;
    }
    switch(v6)
    {
      case 1:
        a1[v11] = v17;
        return;
      case 2:
        *(_WORD *)&a1[v11] = v17;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v11] = v17;
        return;
      default:
        return;
    }
  }
  switch(v6)
  {
    case 1:
      a1[v11] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_28;
    case 2:
      *(_WORD *)&a1[v11] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_28;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x24A0B693CLL);
    case 4:
      *(_DWORD *)&a1[v11] = 0;
      goto LABEL_27;
    default:
LABEL_27:
      if (a2)
      {
LABEL_28:
        if (v9 >= 2)
        {
          uint64_t v19 = a2 + 1;
          _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)a1, v19, v9, v7);
        }
      }
      return;
  }
}

uint64_t sub_24A0B6964(uint64_t a1, uint64_t a2)
{
  return _s10CloudAsset21UploadResponseMessageOwet_0(a1, 1, *(void *)(a2 + 16));
}

uint64_t sub_24A0B6970(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _s10CloudAsset21UploadResponseMessageOwst_0(a1, a2, 1, *(void *)(a3 + 16));
}

unsigned char *sub_24A0B697C(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24A0B6A48);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *sub_24A0B6A70(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x24A0B6B0CLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_24A0B6B34()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A0B6B50()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A0B6B6C()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A0B6B88()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A0B6BA4()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A0B6BC0()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A0B6BDC()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A0B6BF8()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A0B6C14()
{
  return swift_getGenericMetadata();
}

uint64_t sub_24A0B6C94()
{
  return v0;
}

uint64_t sub_24A0B6CAC()
{
  return v0;
}

uint64_t sub_24A0B6CE4(uint64_t a1)
{
  return _s10CloudAsset21UploadResponseMessageOwet_0(a1, 1, v1);
}

uint64_t sub_24A0B6D04()
{
  return 255;
}

uint64_t sub_24A0B6D24()
{
  return 0;
}

uint64_t sub_24A0B6D30()
{
  return 0;
}

void Signal.Event.hash(into:)()
{
  if (*(unsigned char *)(v0 + 8))
  {
    Hasher._combine(_:)(1uLL);
  }
  else
  {
    Swift::UInt64 v1 = *(void *)v0;
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v1);
  }
}

uint64_t static Signal.Event.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*(unsigned char *)(a2 + 8)) {
      return sub_24A08F828();
    }
    return 0;
  }
  if (*(unsigned char *)(a2 + 8)) {
    return 0;
  }
  return *(void *)a1 == *(void *)a2;
}

uint64_t sub_24A0B6DBC(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD00000000000001BLL && a2 == 0x800000024A0EEB30
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000024A0EEB50)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

unint64_t sub_24A0B6EAC(char a1)
{
  if (a1) {
    return 0xD000000000000010;
  }
  else {
    return 0xD00000000000001BLL;
  }
}

uint64_t sub_24A0B6EEC(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x656E6961746E6F63 && a2 == 0xEE007865646E4972)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_24A0B6F98()
{
  return 0x656E6961746E6F63;
}

uint64_t sub_24A0B6FC0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_24A0B4A4C();
  *a1 = result & 1;
  return result;
}

uint64_t sub_24A0B6FEC(uint64_t a1)
{
  unint64_t v2 = sub_24A0B741C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A0B7028(uint64_t a1)
{
  unint64_t v2 = sub_24A0B741C();
  return MEMORY[0x270FA00B8](a1, v2);
}

unint64_t sub_24A0B7064()
{
  return sub_24A0B6EAC(*v0);
}

uint64_t sub_24A0B706C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_24A0B6DBC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_24A0B7094(uint64_t a1)
{
  unint64_t v2 = sub_24A0B73D0();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A0B70D0(uint64_t a1)
{
  unint64_t v2 = sub_24A0B73D0();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_24A0B7110@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_24A0B6EEC(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_24A0B713C(uint64_t a1)
{
  unint64_t v2 = sub_24A0B7468();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A0B7178(uint64_t a1)
{
  unint64_t v2 = sub_24A0B7468();
  return MEMORY[0x270FA00B8](a1, v2);
}

void Signal.Event.encode(to:)()
{
  sub_24A093C64();
  unint64_t v2 = v1;
  sub_24A08DF34(&qword_26975DCC0);
  sub_24A08F24C();
  MEMORY[0x270FA5388](v3);
  sub_24A08F2E0();
  sub_24A08DF34(&qword_26975DCC8);
  sub_24A08F24C();
  MEMORY[0x270FA5388](v4);
  sub_24A0B8CE0();
  sub_24A08DF34(&qword_26975DCD0);
  sub_24A08F24C();
  MEMORY[0x270FA5388](v5);
  sub_24A093C34();
  char v6 = *(unsigned char *)(v0 + 8);
  sub_24A08DF78(v2, v2[3]);
  sub_24A0B73D0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v6)
  {
    sub_24A0B741C();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  }
  else
  {
    sub_24A0B7468();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  sub_24A08F2BC();
  v7();
  uint64_t v8 = sub_24A0B8D10();
  v9(v8);
  sub_24A093C4C();
}

unint64_t sub_24A0B73D0()
{
  unint64_t result = qword_26975DCD8;
  if (!qword_26975DCD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975DCD8);
  }
  return result;
}

unint64_t sub_24A0B741C()
{
  unint64_t result = qword_26975DCE0;
  if (!qword_26975DCE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975DCE0);
  }
  return result;
}

unint64_t sub_24A0B7468()
{
  unint64_t result = qword_26975DCE8;
  if (!qword_26975DCE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975DCE8);
  }
  return result;
}

Swift::Int Signal.Event.hashValue.getter()
{
  Swift::UInt64 v1 = *(void *)v0;
  char v2 = *(unsigned char *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v2)
  {
    Hasher._combine(_:)(1uLL);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v1);
  }
  return Hasher._finalize()();
}

void Signal.Event.init(from:)()
{
  sub_24A093C64();
  uint64_t v46 = v0;
  uint64_t v4 = v3;
  uint64_t v43 = v5;
  uint64_t v45 = sub_24A08DF34(&qword_26975DCF0);
  sub_24A08F24C();
  uint64_t v42 = v6;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A08DF34(&qword_26975DCF8);
  sub_24A08F24C();
  uint64_t v41 = v10;
  MEMORY[0x270FA5388](v11);
  sub_24A08F2C8();
  uint64_t v12 = sub_24A08DF34(&qword_26975DD00);
  sub_24A08F24C();
  uint64_t v44 = v13;
  MEMORY[0x270FA5388](v14);
  sub_24A0B28D0();
  sub_24A08DF78(v4, v4[3]);
  sub_24A0B73D0();
  unsigned int v15 = v46;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v15)
  {
    uint64_t v39 = v1;
    uint64_t v40 = v9;
    uint64_t v46 = v4;
    uint64_t v16 = KeyedDecodingContainer.allKeys.getter();
    uint64_t v17 = *(void *)(v16 + 16);
    if (v17
      && (uint64_t v38 = 0,
          char v18 = *(unsigned char *)(v16 + 32),
          sub_24A0B2390(1, v17, v16, v16 + 32, 0, (2 * v17) | 1),
          uint64_t v20 = v19,
          unint64_t v22 = v21,
          swift_bridgeObjectRelease(),
          v20 == v22 >> 1))
    {
      if (v18)
      {
        sub_24A0B741C();
        uint64_t v23 = v38;
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        if (!v23)
        {
          sub_24A08F2BC();
          v24();
          swift_unknownObjectRelease();
          sub_24A08F2BC();
          v25();
          uint64_t v26 = 0;
LABEL_14:
          uint64_t v36 = v43;
          *uint64_t v43 = v26;
          *((unsigned char *)v36 + 8) = v18;
          uint64_t v32 = (uint64_t)v46;
          goto LABEL_12;
        }
      }
      else
      {
        sub_24A0B7468();
        uint64_t v31 = v38;
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        if (!v31)
        {
          uint64_t v26 = KeyedDecodingContainer.decode(_:forKey:)();
          sub_24A08F2BC();
          v33();
          swift_unknownObjectRelease();
          uint64_t v34 = sub_24A0B8CF8();
          v35(v34);
          goto LABEL_14;
        }
      }
      swift_unknownObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v2, v12);
    }
    else
    {
      uint64_t v27 = v44;
      uint64_t v28 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v30 = v29;
      sub_24A08DF34(&qword_26975D980);
      *uint64_t v30 = &type metadata for Signal.Event;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v28 - 8) + 104))(v30, *MEMORY[0x263F8DCB0], v28);
      swift_willThrow();
      swift_unknownObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v2, v12);
    }
    uint64_t v4 = v46;
  }
  uint64_t v32 = (uint64_t)v4;
LABEL_12:
  sub_24A08E050(v32);
  sub_24A093C4C();
}

Swift::Int sub_24A0B7960()
{
  Swift::UInt64 v1 = *(void *)v0;
  char v2 = *(unsigned char *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v2)
  {
    Hasher._combine(_:)(1uLL);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v1);
  }
  return Hasher._finalize()();
}

void sub_24A0B79C8()
{
}

void sub_24A0B79E0()
{
}

uint64_t sub_24A0B79FC(uint64_t a1)
{
  unint64_t v2 = sub_24A0B8508();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A0B7A38(uint64_t a1)
{
  unint64_t v2 = sub_24A0B8508();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t Signal.events.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Signal.events.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *Swift::UInt64 v1 = a1;
  return result;
}

uint64_t (*Signal.events.modify())()
{
  return nullsub_1;
}

uint64_t sub_24A0B7AC8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = type metadata accessor for CloudAssets_Signal.Event(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v5 - 8);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v23 - v10;
  uint64_t v12 = *(void *)a1;
  int64_t v13 = *(void *)(*(void *)a1 + 16);
  if (v13)
  {
    uint64_t v24 = a2;
    uint64_t v25 = v2;
    uint64_t v27 = a1;
    uint64_t v29 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    sub_24A0C6A34(0, v13, 0);
    uint64_t v14 = *(unsigned __int8 *)(v6 + 80);
    uint64_t v26 = v12;
    uint64_t v15 = v12 + ((v14 + 32) & ~v14);
    uint64_t v28 = *(void *)(v6 + 72);
    while (1)
    {
      sub_24A0B8C28(v15, (uint64_t)v11);
      sub_24A0B8C28((uint64_t)v11, (uint64_t)v9);
      if (v9[8] != 1) {
        break;
      }
      uint64_t v16 = *(void *)v9;
      if (*(void *)v9) {
        uint64_t v17 = 0;
      }
      else {
        uint64_t v17 = *((void *)v9 + 2);
      }
      sub_24A0B8C8C((uint64_t)v9, (void (*)(void))type metadata accessor for CloudAssets_Signal.Event);
      sub_24A0B8C8C((uint64_t)v11, (void (*)(void))type metadata accessor for CloudAssets_Signal.Event);
      uint64_t v18 = v29;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_24A0C6A34(0, *(void *)(v18 + 16) + 1, 1);
        uint64_t v18 = v29;
      }
      unint64_t v20 = *(void *)(v18 + 16);
      unint64_t v19 = *(void *)(v18 + 24);
      if (v20 >= v19 >> 1)
      {
        sub_24A0C6A34((char *)(v19 > 1), v20 + 1, 1);
        uint64_t v18 = v29;
      }
      *(void *)(v18 + 16) = v20 + 1;
      uint64_t v21 = v18 + 16 * v20;
      *(void *)(v21 + 32) = v17;
      *(unsigned char *)(v21 + 40) = v16 != 0;
      v15 += v28;
      if (!--v13)
      {
        a1 = v27;
        a2 = v24;
        goto LABEL_15;
      }
    }
    sub_24A090E10();
    swift_allocError();
    swift_willThrow();
    sub_24A0B8C8C((uint64_t)v9, (void (*)(void))type metadata accessor for CloudAssets_Signal.Event);
    sub_24A0B8C8C((uint64_t)v11, (void (*)(void))type metadata accessor for CloudAssets_Signal.Event);
    swift_release();
    sub_24A0B8C8C(v27, (void (*)(void))type metadata accessor for CloudAssets_Signal);
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = MEMORY[0x263F8EE78];
LABEL_15:
    sub_24A0B8C8C(a1, (void (*)(void))type metadata accessor for CloudAssets_Signal);
    uint64_t result = swift_bridgeObjectRelease();
    *a2 = v18;
  }
  return result;
}

void Signal.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_24A093C64();
  a19 = v23;
  a20 = v24;
  uint64_t v26 = v25;
  char v33 = v27;
  uint64_t v28 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x270FA5388](v28 - 8);
  sub_24A08F2E0();
  type metadata accessor for CloudAssets_Signal(0);
  sub_24A08F280();
  MEMORY[0x270FA5388](v29);
  sub_24A0B28D0();
  uint64_t v30 = sub_24A08DF34(&qword_26975DD08);
  sub_24A08F24C();
  uint64_t v34 = v31;
  MEMORY[0x270FA5388](v32);
  sub_24A0B8CE0();
  sub_24A08DF78(v26, v26[3]);
  sub_24A0B8508();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v20)
  {
    sub_24A090DC4();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    BinaryDecodingOptions.init()();
    sub_24A0B8554();
    Message.init<A>(serializedBytes:extensions:partial:options:)();
    sub_24A0B7AC8(v21, &a10);
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v22, v30);
    *char v33 = a10;
  }
  sub_24A08E050((uint64_t)v26);
  sub_24A093C4C();
}

CloudAsset::Signal __swiftcall Signal.init()()
{
  *uint64_t v0 = MEMORY[0x263F8EE78];
  return result;
}

uint64_t sub_24A0B801C@<X0>(void *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for CloudAssets_Signal.Event(0);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)v19 - v8;
  uint64_t v10 = *v1;
  type metadata accessor for CloudAssets_Signal(0);
  uint64_t result = UnknownStorage.init()();
  int64_t v12 = *(void *)(v10 + 16);
  uint64_t v13 = MEMORY[0x263F8EE78];
  if (v12)
  {
    uint64_t v20 = a1;
    uint64_t v21 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    sub_24A0C6A54(0, v12, 0);
    uint64_t v13 = v21;
    v19[1] = v10;
    uint64_t v14 = (unsigned char *)(v10 + 40);
    do
    {
      uint64_t v15 = *((void *)v14 - 1);
      char v16 = *v14;
      *((void *)v7 + 2) = 0;
      UnknownStorage.init()();
      if (v16)
      {
        *(void *)uint64_t v7 = 1;
        v7[8] = 1;
      }
      else
      {
        *(void *)uint64_t v7 = 0;
        v7[8] = 1;
        *((void *)v7 + 2) = v15;
      }
      sub_24A0B8BC4((uint64_t)v7, (uint64_t)v9);
      uint64_t v21 = v13;
      unint64_t v18 = *(void *)(v13 + 16);
      unint64_t v17 = *(void *)(v13 + 24);
      if (v18 >= v17 >> 1)
      {
        sub_24A0C6A54(v17 > 1, v18 + 1, 1);
        uint64_t v13 = v21;
      }
      *(void *)(v13 + 16) = v18 + 1;
      sub_24A0B8BC4((uint64_t)v9, v13+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v18);
      v14 += 16;
      --v12;
    }
    while (v12);
    uint64_t result = swift_bridgeObjectRelease();
    a1 = v20;
  }
  *a1 = v13;
  return result;
}

void Signal.encode(to:)()
{
  sub_24A093C64();
  uint64_t v4 = v3;
  type metadata accessor for CloudAssets_Signal(0);
  sub_24A08F280();
  MEMORY[0x270FA5388](v5);
  sub_24A093C34();
  uint64_t v12 = sub_24A08DF34(&qword_26975DD18);
  sub_24A08F24C();
  uint64_t v7 = v6;
  MEMORY[0x270FA5388](v8);
  sub_24A08F2C8();
  sub_24A08DF78(v4, v4[3]);
  sub_24A0B8508();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_24A0B801C(v2);
  sub_24A0B8554();
  uint64_t v9 = Message.serializedData(partial:)();
  unint64_t v11 = v10;
  sub_24A0B8C8C((uint64_t)v2, (void (*)(void))type metadata accessor for CloudAssets_Signal);
  if (!v0)
  {
    sub_24A090E5C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    sub_24A08DEDC(v9, v11);
  }
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v1, v12);
  sub_24A093C4C();
}

void Signal.hash(into:)()
{
  uint64_t v1 = *v0;
  Swift::UInt v2 = *(void *)(*v0 + 16);
  Hasher._combine(_:)(v2);
  if (v2)
  {
    uint64_t v3 = (unsigned char *)(v1 + 40);
    do
    {
      if (*v3)
      {
        Hasher._combine(_:)(1uLL);
      }
      else
      {
        Swift::UInt64 v4 = *((void *)v3 - 1);
        Hasher._combine(_:)(0);
        Hasher._combine(_:)(v4);
      }
      v3 += 16;
      --v2;
    }
    while (v2);
  }
}

uint64_t static Signal.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return sub_24A0AB34C(*a1, *a2);
}

Swift::Int Signal.hashValue.getter()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  sub_24A0B0F90((uint64_t)v3, v1);
  return Hasher._finalize()();
}

Swift::Int sub_24A0B8490()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  sub_24A0B0F90((uint64_t)v3, v1);
  return Hasher._finalize()();
}

#error "24A0B84E0: call analysis failed (funcsize=6)"

void sub_24A0B84EC()
{
}

unint64_t sub_24A0B8508()
{
  unint64_t result = qword_26975DD10;
  if (!qword_26975DD10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975DD10);
  }
  return result;
}

unint64_t sub_24A0B8554()
{
  unint64_t result = qword_26975D7A8;
  if (!qword_26975D7A8)
  {
    type metadata accessor for CloudAssets_Signal(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975D7A8);
  }
  return result;
}

unint64_t sub_24A0B85A8()
{
  unint64_t result = qword_26975DD20;
  if (!qword_26975DD20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975DD20);
  }
  return result;
}

unint64_t sub_24A0B85F8()
{
  unint64_t result = qword_26975DD28;
  if (!qword_26975DD28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975DD28);
  }
  return result;
}

void type metadata accessor for Signal()
{
}

void type metadata accessor for Signal.Event()
{
}

void type metadata accessor for Signal.CodingKeys()
{
}

unsigned char *storeEnumTagSinglePayload for Signal.Event.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24A0B8738);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Signal.Event.CodingKeys()
{
  return &type metadata for Signal.Event.CodingKeys;
}

unsigned char *_s10CloudAsset6SignalV5EventO37StorageContainerUploadStartCodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x24A0B880CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for Signal.Event.StorageContainerUploadStartCodingKeys()
{
  return &type metadata for Signal.Event.StorageContainerUploadStartCodingKeys;
}

ValueMetadata *type metadata accessor for Signal.Event.AllUploadsFinishCodingKeys()
{
  return &type metadata for Signal.Event.AllUploadsFinishCodingKeys;
}

unint64_t sub_24A0B8858()
{
  unint64_t result = qword_26975DD30;
  if (!qword_26975DD30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975DD30);
  }
  return result;
}

unint64_t sub_24A0B88A8()
{
  unint64_t result = qword_26975DD38;
  if (!qword_26975DD38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975DD38);
  }
  return result;
}

unint64_t sub_24A0B88F8()
{
  unint64_t result = qword_26975DD40;
  if (!qword_26975DD40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975DD40);
  }
  return result;
}

unint64_t sub_24A0B8948()
{
  unint64_t result = qword_26975DD48;
  if (!qword_26975DD48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975DD48);
  }
  return result;
}

unint64_t sub_24A0B8998()
{
  unint64_t result = qword_26975DD50;
  if (!qword_26975DD50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975DD50);
  }
  return result;
}

unint64_t sub_24A0B89E8()
{
  unint64_t result = qword_26975DD58;
  if (!qword_26975DD58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975DD58);
  }
  return result;
}

unint64_t sub_24A0B8A38()
{
  unint64_t result = qword_26975DD60;
  if (!qword_26975DD60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975DD60);
  }
  return result;
}

unint64_t sub_24A0B8A88()
{
  unint64_t result = qword_26975DD68;
  if (!qword_26975DD68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975DD68);
  }
  return result;
}

unint64_t sub_24A0B8AD8()
{
  unint64_t result = qword_26975DD70;
  if (!qword_26975DD70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975DD70);
  }
  return result;
}

unint64_t sub_24A0B8B28()
{
  unint64_t result = qword_26975DD78;
  if (!qword_26975DD78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975DD78);
  }
  return result;
}

unint64_t sub_24A0B8B78()
{
  unint64_t result = qword_26975DD80;
  if (!qword_26975DD80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975DD80);
  }
  return result;
}

uint64_t sub_24A0B8BC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CloudAssets_Signal.Event(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_24A0B8C28(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CloudAssets_Signal.Event(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_24A0B8C8C(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_24A08F280();
  sub_24A08F2BC();
  v3();
  return a1;
}

uint64_t sub_24A0B8CF8()
{
  return v0;
}

uint64_t sub_24A0B8D10()
{
  return v0;
}

unint64_t static LoggerSubsystem.client.getter()
{
  return sub_24A0B8D4C();
}

unint64_t static LoggerSubsystem.server.getter()
{
  return sub_24A0B8D4C();
}

ValueMetadata *type metadata accessor for LoggerSubsystem()
{
  return &type metadata for LoggerSubsystem;
}

unint64_t sub_24A0B8D4C()
{
  return 0xD000000000000025;
}

uint64_t sub_24A0B8D60()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_24A0A8044(v0, qword_26975DD88);
  sub_24A0A800C(v0, (uint64_t)qword_26975DD88);
  type metadata accessor for AssetManager();
  sub_24A08DF34(&qword_26975E050);
  String.init<A>(describing:)();
  return Logger.init(subsystem:category:)();
}

uint64_t sub_24A0B8DF8()
{
  type metadata accessor for AssetManager();
  uint64_t v0 = swift_allocObject();
  uint64_t result = AssetManager.init(serviceName:)(0xD00000000000001BLL, 0x800000024A0EE800);
  qword_26975DDA0 = v0;
  return result;
}

uint64_t AssetManager.__allocating_init(serviceName:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  AssetManager.init(serviceName:)(a1, a2);
  return v4;
}

uint64_t static AssetManager.shared.getter()
{
  return sub_24A0B8FE8(&qword_26975D320);
}

uint64_t sub_24A0B8EC0()
{
  uint64_t v0 = sub_24A0B8F44();
  uint64_t v2 = v1;
  type metadata accessor for AssetManager();
  uint64_t v3 = swift_allocObject();
  uint64_t result = AssetManager.init(serviceName:)(v0, v2);
  qword_26975DDA8 = v3;
  return result;
}

uint64_t sub_24A0B8F44()
{
  swift_bridgeObjectRetain();
  uint64_t v1 = String.init<A>(_:)();
  String.append<A>(contentsOf:)();
  return v1;
}

uint64_t static AssetManager.testable.getter()
{
  return sub_24A0B8FE8(&qword_26975D328);
}

uint64_t sub_24A0B8FE8(void *a1)
{
  if (*a1 != -1) {
    swift_once();
  }
  return swift_retain();
}

uint64_t AssetManager.init(serviceName:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for XPCMessageSender();
  swift_allocObject();
  uint64_t v9 = v6;
  unint64_t v10 = &off_26FDF2818;
  *(void *)&long long v8 = XPCMessageSender.init(machServiceName:)(a1, a2);
  sub_24A0C2DF8(&v8, v3 + 16);
  return v3;
}

uint64_t sub_24A0B9114(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  v5[7] = sub_24A08DF34(&qword_26975D5C0);
  v5[8] = swift_task_alloc();
  uint64_t v6 = sub_24A08DF34(&qword_26975DED8);
  v5[9] = v6;
  v5[10] = *(void *)(v6 - 8);
  v5[11] = swift_task_alloc();
  v5[12] = type metadata accessor for Asset(0);
  v5[13] = swift_task_alloc();
  v5[14] = sub_24A08DF34(&qword_26975DE78);
  v5[15] = swift_task_alloc();
  sub_24A08DF34(&qword_26975DEE0);
  v5[16] = swift_task_alloc();
  uint64_t v7 = sub_24A08DF34(&qword_26975DEE8);
  v5[17] = v7;
  v5[18] = *(void *)(v7 - 8);
  v5[19] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_24A0B9300, 0, 0);
}

uint64_t sub_24A0B9300()
{
  sub_24A0B3940();
  uint64_t v0 = sub_24A08DF34(&qword_26975DE70);
  MEMORY[0x24C5BB210](v0);
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)sub_24A0C9618(v1);
  *uint64_t v2 = v3;
  v2[1] = sub_24A0B93B8;
  sub_24A0C91A4();
  return MEMORY[0x270FA20F8](v4, v5, v6, v7, v8);
}

uint64_t sub_24A0B93B8()
{
  sub_24A0B3914();
  sub_24A0B38DC();
  uint64_t v1 = *v0;
  sub_24A0B394C();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_24A0C9144();
  return MEMORY[0x270FA2498](v3, v4, v5);
}

uint64_t sub_24A0B9494(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_24A0C9DD4();
  sub_24A0C9A44();
  sub_24A0AAE14(v10[16], 1, v10[14]);
  if (v26)
  {
    sub_24A09C038();
    v11();
    v10[4] = 0;
    sub_24A08DF34(&qword_26975DEC0);
    AsyncThrowingStream.Continuation.finish(throwing:)();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_24A0B3920();
    sub_24A0C97DC();
    return v13(v12, v13, v14, v15, v16, v17, v18, v19, a9, a10);
  }
  else
  {
    uint64_t v21 = v10[15];
    uint64_t v22 = v10[12];
    uint64_t v23 = sub_24A0C9634();
    sub_24A0C7400(v23, v24, v25);
    sub_24A0AAE14(v21, 1, v22);
    if (v26)
    {
      sub_24A090E10();
      uint64_t v27 = sub_24A0C9258();
      sub_24A0C9F1C(v27);
      sub_24A08DF34(&qword_26975DEC0);
      AsyncThrowingStream.Continuation.yield(_:)();
      sub_24A09BFBC();
      v28();
    }
    else
    {
      uint64_t v29 = v10[13];
      uint64_t v30 = v10[8];
      sub_24A0C7DC8(v10[15], v29);
      sub_24A0C7450(v29, v30);
      swift_storeEnumTagMultiPayload();
      sub_24A08DF34(&qword_26975DEC0);
      sub_24A0C9C90();
      sub_24A0C93B4();
      v31();
      sub_24A0C8734(v29, (void (*)(void))type metadata accessor for Asset);
    }
    uint64_t v32 = swift_task_alloc();
    char v33 = (void *)sub_24A0C9618(v32);
    *char v33 = v34;
    v33[1] = sub_24A0B93B8;
    sub_24A0C91A4();
    sub_24A0C97DC();
    return MEMORY[0x270FA20F8](v35, v36, v37, v38, v39);
  }
}

uint64_t sub_24A0B9718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_24A0C933C();
  sub_24A0C9640();
  sub_24A09C038();
  v13();
  v12[3] = v12[2];
  sub_24A08DF34(&qword_26975DEC0);
  AsyncThrowingStream.Continuation.finish(throwing:)();
  v12[4] = 0;
  sub_24A08DF34(&qword_26975DEC0);
  AsyncThrowingStream.Continuation.finish(throwing:)();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A0B3920();
  sub_24A0C92E8();
  return v15(v14, v15, v16, v17, v18, v19, v20, v21, a9, a10, a11, a12);
}

uint64_t AssetManager.process(request:)()
{
  sub_24A0B3914();
  v1[4] = v2;
  v1[5] = v0;
  v1[3] = v3;
  uint64_t v4 = sub_24A08DF34(&qword_26975D5C0);
  v1[6] = v4;
  sub_24A093C88(v4);
  v1[7] = sub_24A0B395C();
  uint64_t v5 = sub_24A08DF34(&qword_26975DA08);
  sub_24A093C88(v5);
  v1[8] = sub_24A0B395C();
  uint64_t v6 = sub_24A08DF34(&qword_26975DA10);
  v1[9] = v6;
  sub_24A0B38FC(v6);
  v1[10] = v7;
  v1[11] = sub_24A0B395C();
  uint64_t v8 = sub_24A08DF34(&qword_26975D590);
  v1[12] = v8;
  sub_24A0B38FC(v8);
  v1[13] = v9;
  v1[14] = sub_24A0B395C();
  sub_24A0C9144();
  return MEMORY[0x270FA2498](v10, v11, v12);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  sub_24A0B3914();
  v1[4] = v2;
  v1[5] = v0;
  v1[3] = v3;
  uint64_t v4 = sub_24A08DF34(&qword_26975D5C0);
  v1[6] = v4;
  sub_24A093C88(v4);
  v1[7] = sub_24A0B395C();
  uint64_t v5 = sub_24A08DF34(&qword_26975DA08);
  sub_24A093C88(v5);
  v1[8] = sub_24A0B395C();
  uint64_t v6 = sub_24A08DF34(&qword_26975DA10);
  v1[9] = v6;
  sub_24A0B38FC(v6);
  v1[10] = v7;
  v1[11] = sub_24A0B395C();
  uint64_t v8 = sub_24A08DF34(&qword_26975D590);
  v1[12] = v8;
  sub_24A0B38FC(v8);
  v1[13] = v9;
  v1[14] = sub_24A0B395C();
  sub_24A0C9144();
  return MEMORY[0x270FA2498](v10, v11, v12);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  sub_24A0B3914();
  v1[5] = v2;
  v1[6] = v0;
  v1[4] = v3;
  uint64_t v4 = sub_24A08DF34(&qword_26975DE18);
  v1[7] = v4;
  sub_24A093C88(v4);
  v1[8] = sub_24A0B395C();
  uint64_t v5 = sub_24A08DF34(&qword_26975DE20);
  sub_24A093C88(v5);
  v1[9] = sub_24A0B395C();
  uint64_t v6 = sub_24A08DF34(&qword_26975DE28);
  v1[10] = v6;
  sub_24A0B38FC(v6);
  v1[11] = v7;
  v1[12] = sub_24A0B395C();
  uint64_t v8 = sub_24A08DF34(&qword_26975DE00);
  v1[13] = v8;
  sub_24A0B38FC(v8);
  v1[14] = v9;
  v1[15] = sub_24A0B395C();
  sub_24A0C9144();
  return MEMORY[0x270FA2498](v10, v11, v12);
}

uint64_t sub_24A0B9928()
{
  sub_24A0B3940();
  uint64_t v1 = v0[4];
  sub_24A08DF34(&qword_26975DDB8);
  uint64_t v2 = type metadata accessor for AssetUploadRequest();
  sub_24A0B38FC(v2);
  uint64_t v3 = (__n128 *)sub_24A0C9270();
  v0[15] = v3;
  sub_24A0C9E8C(v3, (__n128)xmmword_24A0E75F0);
  sub_24A0C7450(v1, v4);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[16] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_24A0B9A30;
  sub_24A0C9DA0();
  return AssetManager.process(requests:)();
}

uint64_t sub_24A0B9A30()
{
  sub_24A0B3914();
  sub_24A0B38DC();
  uint64_t v3 = v2;
  sub_24A0C9188();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_24A0B394C();
  *uint64_t v6 = v5;
  *(void *)(v3 + 136) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_bridgeObjectRelease();
  }
  sub_24A0C9144();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

uint64_t sub_24A0B9B14()
{
  sub_24A0B3914();
  MEMORY[0x24C5BB210](*(void *)(v0 + 96));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 144) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_24A0B9BBC;
  sub_24A0C91A4();
  return MEMORY[0x270FA20F8](v2, v3, v4, v5, v6);
}

uint64_t sub_24A0B9BBC()
{
  sub_24A0B3914();
  sub_24A0B38DC();
  uint64_t v1 = *v0;
  sub_24A0B394C();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_24A0C9144();
  return MEMORY[0x270FA2498](v3, v4, v5);
}

uint64_t sub_24A0B9C98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_24A0C933C();
  sub_24A0C9640();
  uint64_t v13 = v12[8];
  sub_24A0C92B0();
  if (v22)
  {
    sub_24A09C038();
    v14();
    if (qword_26975D318 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_24A0A800C(v15, (uint64_t)qword_26975DD88);
    uint64_t v16 = (void *)Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (sub_24A0C9930(v17))
    {
      uint64_t v18 = (_WORD *)sub_24A0CA1C8();
      sub_24A0CA204(v18);
      sub_24A0C9550(&dword_24A08B000, v19, v20, "result stream for upload terminated unexpectedly");
      sub_24A0C912C();
    }

    sub_24A090E10();
    sub_24A0C9258();
    swift_willThrow();
    sub_24A0C9448();
    v21();
  }
  else
  {
    sub_24A0C7400(v13, v12[7], &qword_26975D5C0);
    sub_24A0CA1EC();
    sub_24A0CA168();
    if (!v22)
    {
      uint64_t v27 = v12[7];
      uint64_t v28 = v12[3];
      uint64_t v29 = sub_24A0C93D8();
      v30(v29);
      sub_24A0C9304();
      v31();
      sub_24A0C7DC8(v27, v28);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      sub_24A0C9194();
      goto LABEL_12;
    }
    swift_willThrow();
    uint64_t v23 = sub_24A0C93D8();
    v24(v23);
    uint64_t v25 = sub_24A0CA140();
    v26(v25);
  }
  sub_24A0C994C();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A0B3920();
LABEL_12:
  sub_24A0C92E8();
  return v33(v32, v33, v34, v35, v36, v37, v38, v39, a9, a10, a11, a12);
}

uint64_t sub_24A0B9EA8()
{
  sub_24A0B3940();
  swift_bridgeObjectRelease();
  sub_24A0C994C();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A0B3920();
  return v0();
}

uint64_t sub_24A0B9F28()
{
  sub_24A0B3940();
  sub_24A09C038();
  v0();
  sub_24A0C9628();
  v1();
  sub_24A0C994C();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A0B3920();
  return v2();
}

uint64_t AssetManager.process(requests:)()
{
  sub_24A0B3914();
  v1[5] = v2;
  v1[6] = v0;
  v1[4] = v3;
  sub_24A0C9244();
  v1[7] = v4;
  uint64_t v5 = sub_24A08DF34(&qword_26975DDC8);
  v1[8] = v5;
  sub_24A0B38FC(v5);
  v1[9] = v6;
  v1[10] = sub_24A0B395C();
  uint64_t v7 = sub_24A08DF34(&qword_26975DDD0);
  v1[11] = v7;
  sub_24A0B38FC(v7);
  v1[12] = v8;
  v1[13] = sub_24A0B395C();
  uint64_t v9 = type metadata accessor for TaskPriority();
  v1[14] = v9;
  sub_24A0B38FC(v9);
  v1[15] = v10;
  v1[16] = sub_24A0B395C();
  sub_24A0C9144();
  return MEMORY[0x270FA2498](v11, v12, v13);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v9;

  sub_24A0B3940();
  v0[2] = v1;
  uint64_t v2 = sub_24A08DF34(&qword_26975DDC8);
  v0[3] = v2;
  sub_24A0B38FC(v2);
  v0[4] = v3;
  v0[5] = sub_24A0B395C();
  uint64_t v4 = sub_24A08DF34(&qword_26975DE00);
  v0[6] = v4;
  sub_24A0B38FC(v4);
  v0[7] = v5;
  v0[8] = sub_24A0B395C();
  swift_task_alloc();
  sub_24A0C9DAC();
  v0[9] = v6;
  *uint64_t v6 = v7;
  v6[1] = sub_24A0BAD60;
  sub_24A0C9DA0();
  return AssetManager.process(requests:)();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  sub_24A0B3914();
  v1[5] = v2;
  v1[6] = v0;
  v1[4] = v3;
  sub_24A0C9244();
  v1[7] = v4;
  uint64_t v5 = sub_24A08DF34(&qword_26975DE30);
  v1[8] = v5;
  sub_24A0B38FC(v5);
  v1[9] = v6;
  v1[10] = sub_24A0B395C();
  uint64_t v7 = sub_24A08DF34(&qword_26975DE38);
  v1[11] = v7;
  sub_24A0B38FC(v7);
  v1[12] = v8;
  v1[13] = sub_24A0B395C();
  uint64_t v9 = sub_24A08DF34(&qword_26975DE40);
  v1[14] = v9;
  sub_24A0B38FC(v9);
  v1[15] = v10;
  v1[16] = sub_24A0B395C();
  uint64_t v11 = type metadata accessor for TaskPriority();
  v1[17] = v11;
  sub_24A0B38FC(v11);
  v1[18] = v12;
  v1[19] = sub_24A0B395C();
  sub_24A0C9144();
  return MEMORY[0x270FA2498](v13, v14, v15);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;

  sub_24A0B3914();
  v1[6] = v2;
  v1[7] = v0;
  sub_24A0C9244();
  v1[8] = v3;
  uint64_t v4 = sub_24A08DF34(&qword_26975DDC8);
  v1[9] = v4;
  sub_24A0B38FC(v4);
  v1[10] = v5;
  v1[11] = sub_24A0B395C();
  uint64_t v6 = sub_24A08DF34(&qword_26975D590);
  sub_24A093C88(v6);
  v1[12] = sub_24A0B395C();
  uint64_t v7 = sub_24A08DF34(&qword_26975DE60);
  v1[13] = v7;
  sub_24A0B38FC(v7);
  v1[14] = v8;
  v1[15] = sub_24A0B395C();
  uint64_t v9 = sub_24A08DF34(&qword_26975DE68);
  v1[16] = v9;
  sub_24A0B38FC(v9);
  v1[17] = v10;
  v1[18] = sub_24A0C9724();
  v1[19] = swift_task_alloc();
  uint64_t v11 = sub_24A08DF34(&qword_26975DE70);
  v1[20] = v11;
  sub_24A0B38FC(v11);
  v1[21] = v12;
  v1[22] = sub_24A0B395C();
  uint64_t v13 = sub_24A08DF34(&qword_26975D6D0);
  v1[23] = v13;
  sub_24A0B38FC(v13);
  v1[24] = v14;
  v1[25] = sub_24A0B395C();
  uint64_t v15 = sub_24A08DF34(&qword_26975D6A8);
  v1[26] = v15;
  sub_24A0B38FC(v15);
  v1[27] = v16;
  v1[28] = sub_24A0C9724();
  v1[29] = swift_task_alloc();
  os_log_type_t v17 = sub_24A08DF34(&qword_26975D580);
  v1[30] = v17;
  sub_24A0B38FC(v17);
  v1[31] = v18;
  v1[32] = sub_24A0C9724();
  v1[33] = swift_task_alloc();
  uint64_t v19 = sub_24A08DF34(&qword_26975DDD0);
  v1[34] = v19;
  sub_24A0B38FC(v19);
  v1[35] = v20;
  v1[36] = sub_24A0B395C();
  uint64_t v21 = type metadata accessor for TaskPriority();
  v1[37] = v21;
  sub_24A0B38FC(v21);
  v1[38] = v22;
  v1[39] = sub_24A0B395C();
  sub_24A0C9144();
  return MEMORY[0x270FA2498](v23, v24, v25);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  sub_24A0B3914();
  v1[4] = v2;
  v1[5] = v0;
  sub_24A0C9244();
  v1[6] = v3;
  uint64_t v4 = sub_24A08DF34(&qword_26975DE98);
  sub_24A093C88(v4);
  v1[7] = sub_24A0B395C();
  uint64_t v5 = sub_24A08DF34(&qword_26975D590);
  v1[8] = v5;
  sub_24A0B38FC(v5);
  v1[9] = v6;
  v1[10] = sub_24A0C9724();
  v1[11] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for TaskPriority();
  v1[12] = v7;
  sub_24A0B38FC(v7);
  v1[13] = v8;
  v1[14] = sub_24A0B395C();
  sub_24A0C9144();
  return MEMORY[0x270FA2498](v9, v10, v11);
}

uint64_t sub_24A0BA0CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t *a22,uint64_t a23,uint64_t a24)
{
  sub_24A0C9200();
  a23 = v26;
  a24 = v27;
  sub_24A0C9538();
  a22 = v25;
  if (qword_26975D318 != -1) {
    swift_once();
  }
  uint64_t v28 = type metadata accessor for Logger();
  sub_24A0C96D0(v28, (uint64_t)qword_26975DD88);
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.default.getter();
  if (sub_24A0C98E8(v30))
  {
    a9 = v25 + 3;
    a10 = v25 + 2;
    a11 = v25[14];
    uint64_t v31 = (_DWORD *)sub_24A0C9324();
    a13 = sub_24A0C9A50();
    *uint64_t v31 = 136315394;
    uint64_t v32 = type metadata accessor for AssetUploadRequest();
    uint64_t v33 = swift_bridgeObjectRetain();
    uint64_t v34 = MEMORY[0x24C5BB120](v33, v32);
    unint64_t v36 = v35;
    swift_bridgeObjectRelease();
    uint64_t v37 = sub_24A0C6240(v34, v36, &a13);
    sub_24A0C9CD0(v37);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    sub_24A0C9CAC();
    sub_24A0C90D8(&qword_26975DDE0, MEMORY[0x263F8F520]);
    dispatch thunk of CustomStringConvertible.description.getter();
    sub_24A0C9448();
    uint64_t v39 = v38();
    uint64_t v41 = sub_24A0CA024(v39, v40, &a13);
    sub_24A0C9C6C(v41);
    swift_bridgeObjectRelease();
    sub_24A0C964C(&dword_24A08B000, v29, v24, "start processing %s with priority %s");
    sub_24A0C9814();
    sub_24A0C912C();
    sub_24A0C912C();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  sub_24A0C9F64(v25[6]);
  uint64_t v52 = (char *)&dword_26975DDD8 + dword_26975DDD8;
  swift_bridgeObjectRetain();
  uint64_t v42 = (void *)swift_task_alloc();
  v25[17] = (uint64_t)v42;
  *uint64_t v42 = v25;
  v42[1] = sub_24A0BA344;
  sub_24A0C9DA0();
  sub_24A0C916C();
  return v46(v43, v44, v45, v46, v47, v48, v49, v50, a9, a10, a11, v52, a13, a14, a15, a16);
}

uint64_t sub_24A0BA344()
{
  sub_24A0B3914();
  sub_24A0B38DC();
  sub_24A0C9188();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_24A0B394C();
  *uint64_t v5 = v4;
  *(void *)(v6 + 144) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_24A0C9144();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

uint64_t sub_24A0BA43C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_24A0C933C();
  sub_24A0C9640();
  uint64_t v29 = v12[16];
  uint64_t v13 = v12[13];
  uint64_t v14 = v12[10];
  uint64_t v16 = v12[8];
  uint64_t v15 = v12[9];
  uint64_t v17 = v12[7];
  uint64_t v18 = swift_task_alloc();
  *(void *)(v18 + 16) = v13;
  *(void *)(v18 + 24) = v17;
  sub_24A08DF34(&qword_26975D5C0);
  (*(void (**)(uint64_t, void, uint64_t))(v15 + 104))(v14, *MEMORY[0x263F8F680], v16);
  AsyncThrowingStream.init<>(_:bufferingPolicy:_:)();
  sub_24A0C9E38();
  sub_24A0C9544();
  v19();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A0C9194();
  sub_24A0C92E8();
  return v21(v20, v21, v22, v23, v24, v25, v26, v27, v29, a10, a11, a12);
}

uint64_t sub_24A0BA550()
{
  sub_24A0B3914();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A0B3920();
  return v0();
}

uint64_t sub_24A0BA6D8()
{
  sub_24A0B3940();
  uint64_t v1 = v0[4];
  sub_24A08DF34(&qword_26975DDF0);
  uint64_t v2 = type metadata accessor for AssetDownloadRequest();
  sub_24A0B38FC(v2);
  uint64_t v3 = (__n128 *)sub_24A0C9270();
  v0[15] = v3;
  sub_24A0C9E8C(v3, (__n128)xmmword_24A0E75F0);
  sub_24A0C7450(v1, v4);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[16] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_24A0BA7E0;
  sub_24A0C9DA0();
  return AssetManager.process(requests:)();
}

uint64_t sub_24A0BA7E0()
{
  sub_24A0B3914();
  sub_24A0B38DC();
  uint64_t v3 = v2;
  sub_24A0C9188();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_24A0B394C();
  *uint64_t v6 = v5;
  *(void *)(v3 + 136) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_bridgeObjectRelease();
  }
  sub_24A0C9144();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

uint64_t sub_24A0BA8C4()
{
  sub_24A0B3914();
  MEMORY[0x24C5BB210](*(void *)(v0 + 96));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 144) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_24A0BA96C;
  sub_24A0C91A4();
  return MEMORY[0x270FA20F8](v2, v3, v4, v5, v6);
}

uint64_t sub_24A0BA96C()
{
  sub_24A0B3914();
  sub_24A0B38DC();
  uint64_t v1 = *v0;
  sub_24A0B394C();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_24A0C9144();
  return MEMORY[0x270FA2498](v3, v4, v5);
}

uint64_t sub_24A0BAA48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_24A0C933C();
  sub_24A0C9640();
  uint64_t v13 = v12[8];
  sub_24A0C92B0();
  if (v22)
  {
    sub_24A09C038();
    v14();
    if (qword_26975D318 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_24A0A800C(v15, (uint64_t)qword_26975DD88);
    uint64_t v16 = (void *)Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (sub_24A0C9930(v17))
    {
      uint64_t v18 = (_WORD *)sub_24A0CA1C8();
      sub_24A0CA204(v18);
      sub_24A0C9550(&dword_24A08B000, v19, v20, "result stream for download terminated unexpectedly");
      sub_24A0C912C();
    }

    sub_24A090E10();
    sub_24A0C9258();
    swift_willThrow();
    sub_24A0C9448();
    v21();
  }
  else
  {
    sub_24A0C7400(v13, v12[7], &qword_26975D5C0);
    sub_24A0CA1EC();
    sub_24A0CA168();
    if (!v22)
    {
      uint64_t v27 = v12[7];
      uint64_t v28 = v12[3];
      uint64_t v29 = sub_24A0C93D8();
      v30(v29);
      sub_24A0C9304();
      v31();
      sub_24A0C7DC8(v27, v28);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      sub_24A0C9194();
      goto LABEL_12;
    }
    swift_willThrow();
    uint64_t v23 = sub_24A0C93D8();
    v24(v23);
    uint64_t v25 = sub_24A0CA140();
    v26(v25);
  }
  sub_24A0C994C();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A0B3920();
LABEL_12:
  sub_24A0C92E8();
  return v33(v32, v33, v34, v35, v36, v37, v38, v39, a9, a10, a11, a12);
}

uint64_t sub_24A0BAD60()
{
  sub_24A0B3914();
  sub_24A0B38DC();
  sub_24A0C9188();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_24A0B394C();
  *uint64_t v5 = v4;
  *(void *)(v6 + 80) = v0;
  swift_task_dealloc();
  sub_24A0C9144();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

uint64_t sub_24A0BAE3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_24A0C933C();
  sub_24A0C9640();
  uint64_t v13 = v12[8];
  uint64_t v14 = v12[5];
  uint64_t v15 = v12[3];
  uint64_t v16 = v12[4];
  *(void *)(swift_task_alloc() + 16) = v13;
  sub_24A08DF34(&qword_26975D5C0);
  (*(void (**)(uint64_t, void, uint64_t))(v16 + 104))(v14, *MEMORY[0x263F8F680], v15);
  AsyncThrowingStream.init<>(_:bufferingPolicy:_:)();
  sub_24A0C9634();
  sub_24A0C9304();
  v17();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A0C9194();
  sub_24A0C92E8();
  return v19(v18, v19, v20, v21, v22, v23, v24, v25, a9, a10, a11, a12);
}

uint64_t sub_24A0BAF3C()
{
  sub_24A0B3914();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A0B3920();
  return v0();
}

uint64_t sub_24A0BB0B8()
{
  sub_24A0B3940();
  uint64_t v1 = v0[5];
  sub_24A08DF34(&qword_26975DDF0);
  uint64_t v2 = type metadata accessor for AssetDownloadRequest();
  sub_24A0B38FC(v2);
  uint64_t v3 = (__n128 *)sub_24A0C9270();
  v0[16] = v3;
  sub_24A0C9E8C(v3, (__n128)xmmword_24A0E75F0);
  sub_24A0C7450(v1, v4);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[17] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_24A0BB1C0;
  sub_24A0C9DA0();
  return AssetManager.process(requests:)();
}

uint64_t sub_24A0BB1C0()
{
  sub_24A0B3914();
  sub_24A0B38DC();
  uint64_t v3 = v2;
  sub_24A0C9188();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_24A0B394C();
  *uint64_t v6 = v5;
  *(void *)(v3 + 144) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_bridgeObjectRelease();
  }
  sub_24A0C9144();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

uint64_t sub_24A0BB2A4()
{
  sub_24A0B3914();
  MEMORY[0x24C5BB210](*(void *)(v0 + 104));
  swift_task_alloc();
  sub_24A0C9DAC();
  *(void *)(v0 + 152) = v1;
  *uint64_t v1 = v2;
  v1[1] = sub_24A0BB348;
  sub_24A0C91A4();
  return MEMORY[0x270FA20F8](v3, v4, v5, v6, v7);
}

uint64_t sub_24A0BB348()
{
  sub_24A0B3914();
  sub_24A0B38DC();
  uint64_t v1 = *v0;
  sub_24A0B394C();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_24A0C9144();
  return MEMORY[0x270FA2498](v3, v4, v5);
}

uint64_t sub_24A0BB424()
{
  sub_24A0C9640();
  uint64_t v1 = v0[9];
  sub_24A0C92B0();
  if (v2)
  {
    sub_24A09C038();
    v3();
    if (qword_26975D318 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_24A0A800C(v4, (uint64_t)qword_26975DD88);
    uint64_t v5 = (void *)Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (sub_24A0C9930(v6))
    {
      uint64_t v7 = (_WORD *)sub_24A0CA1C8();
      sub_24A0CA204(v7);
      sub_24A0C9550(&dword_24A08B000, v8, v9, "result stream for download terminated unexpectedly");
      sub_24A0C912C();
    }

    sub_24A090E10();
    sub_24A0C9258();
    swift_willThrow();
    sub_24A0C9448();
    v10();
    goto LABEL_10;
  }
  sub_24A0C7400(v1, v0[8], &qword_26975DE18);
  int v11 = sub_24A0CA1EC();
  uint64_t v13 = v0[14];
  uint64_t v12 = v0[15];
  uint64_t v14 = v0[13];
  if (v11 == 1)
  {
    v0[3] = *(void *)v0[8];
    sub_24A08DF34(&qword_26975D5B0);
    swift_willThrowTypedImpl();
    sub_24A0C9304();
    v15();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
LABEL_10:
    sub_24A0C9BFC();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_24A0B3920();
    goto LABEL_12;
  }
  sub_24A0C7DC8(v0[8], v0[4]);
  sub_24A0C9304();
  v17();
  sub_24A0C93B4();
  v18();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A0C9194();
LABEL_12:
  return v16();
}

uint64_t sub_24A0BB698()
{
  sub_24A0B3940();
  swift_bridgeObjectRelease();
  sub_24A0C9BFC();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A0B3920();
  return v0();
}

uint64_t sub_24A0BB718()
{
  sub_24A0B3940();
  sub_24A09C038();
  v0();
  sub_24A0C9628();
  v1();
  sub_24A0C9BFC();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A0B3920();
  return v2();
}

uint64_t sub_24A0BB8F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_24A0C9200();
  a23 = v26;
  a24 = v27;
  sub_24A0C9538();
  a22 = v25;
  if (qword_26975D318 != -1) {
    swift_once();
  }
  uint64_t v28 = type metadata accessor for Logger();
  sub_24A0C96D0(v28, (uint64_t)qword_26975DD88);
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.default.getter();
  if (sub_24A0C98E8(v30))
  {
    a9 = v25 + 24;
    a10 = v25 + 16;
    a11 = *(void *)(v25 + 136);
    uint64_t v31 = (_DWORD *)sub_24A0C9324();
    a13 = sub_24A0C9A50();
    *uint64_t v31 = 136315394;
    uint64_t v32 = type metadata accessor for AssetDownloadRequest();
    uint64_t v33 = swift_bridgeObjectRetain();
    uint64_t v34 = MEMORY[0x24C5BB120](v33, v32);
    unint64_t v36 = v35;
    swift_bridgeObjectRelease();
    uint64_t v37 = sub_24A0C6240(v34, v36, &a13);
    sub_24A0C9CD0(v37);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    sub_24A0C9CAC();
    sub_24A0C90D8(&qword_26975DDE0, MEMORY[0x263F8F520]);
    dispatch thunk of CustomStringConvertible.description.getter();
    sub_24A0C9448();
    uint64_t v39 = v38();
    uint64_t v41 = sub_24A0CA024(v39, v40, &a13);
    sub_24A0C9C6C(v41);
    swift_bridgeObjectRelease();
    sub_24A0C964C(&dword_24A08B000, v29, v24, "start processing %s with priority %s");
    sub_24A0C9814();
    sub_24A0C912C();
    sub_24A0C912C();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  sub_24A0C9F64(*(void *)(v25 + 48));
  char v54 = (char *)&dword_26975DE48 + dword_26975DE48;
  uint64_t v42 = swift_task_alloc();
  uint64_t v43 = (void *)sub_24A0C9618(v42);
  *uint64_t v43 = v44;
  v43[1] = sub_24A0BBB58;
  sub_24A0C916C();
  return v48(v45, v46, v47, v48, v49, v50, v51, v52, a9, a10, a11, v54, a13, a14, a15, a16);
}

uint64_t sub_24A0BBB58()
{
  sub_24A0B3914();
  sub_24A0B38DC();
  sub_24A0C9188();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_24A0B394C();
  *uint64_t v5 = v4;
  *(void *)(v6 + 168) = v0;
  swift_task_dealloc();
  sub_24A0C9144();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

uint64_t sub_24A0BBC34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  sub_24A0C9200();
  sub_24A0C9538();
  uint64_t v17 = v16[5];
  int64_t v18 = *(void *)(v17 + 16);
  uint64_t v19 = MEMORY[0x263F8EE78];
  if (v18)
  {
    uint64_t v21 = v16[8];
    uint64_t v20 = v16[9];
    uint64_t v54 = MEMORY[0x263F8EE78];
    sub_24A0C6A74(0, v18, 0);
    uint64_t v19 = v54;
    uint64_t v22 = type metadata accessor for AssetDownloadRequest();
    sub_24A0B38FC(v22);
    uint64_t v24 = v17 + ((*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80));
    uint64_t v26 = *(void *)(v25 + 72);
    do
    {
      uint64_t v27 = v16[10];
      uint64_t v28 = v27 + *(int *)(v21 + 48);
      sub_24A0C7450(v24, v28);
      type metadata accessor for UUID();
      sub_24A08F280();
      (*(void (**)(uint64_t, uint64_t))(v29 + 16))(v27, v28);
      a13 = v19;
      unint64_t v31 = *(void *)(v19 + 16);
      unint64_t v30 = *(void *)(v19 + 24);
      if (v31 >= v30 >> 1) {
        sub_24A0C6A74(v30 > 1, v31 + 1, 1);
      }
      uint64_t v32 = v16[10];
      *(void *)(v19 + 16) = v31 + 1;
      sub_24A0C7400(v32, v19+ ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80))+ *(void *)(v20 + 72) * v31, &qword_26975DE30);
      v24 += v26;
      --v18;
    }
    while (v18);
    uint64_t v17 = v16[5];
  }
  uint64_t v33 = v16[16];
  uint64_t v34 = v16[13];
  uint64_t v51 = v16[14];
  uint64_t v52 = v16[19];
  uint64_t v35 = v16[11];
  uint64_t v36 = v16[12];
  uint64_t v53 = v16[10];
  uint64_t v37 = v16[7];
  uint64_t v50 = v16[4];
  uint64_t v38 = sub_24A0BCC80(v19);
  uint64_t v39 = (void *)swift_task_alloc();
  void v39[2] = v33;
  v39[3] = v38;
  v39[4] = v17;
  v39[5] = v37;
  sub_24A08DF34(&qword_26975DE18);
  (*(void (**)(uint64_t, void, uint64_t))(v36 + 104))(v34, *MEMORY[0x263F8F680], v35);
  sub_24A093E40();
  AsyncThrowingStream.init<>(_:bufferingPolicy:_:)();
  swift_bridgeObjectRelease();
  sub_24A09BFBC();
  v40();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A0C9194();
  sub_24A0C916C();
  return v42(v41, v42, v43, v44, v45, v46, v47, v48, v50, v51, v52, v53, a13, a14, a15, a16);
}

uint64_t sub_24A0BBEB4()
{
  sub_24A0B3940();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A0B3920();
  return v0();
}

uint64_t sub_24A0BBF3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v23 = a1;
  uint64_t v24 = a3;
  uint64_t v4 = sub_24A08DF34(&qword_26975DEC0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x270FA5388](v4);
  uint64_t v22 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_24A08DF34(&qword_26975DDD0);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_24A08DF34(&qword_26975DE98);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for TaskPriority();
  _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)v13, 1, 1, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a2, v7);
  uint64_t v15 = v4;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v23, v4);
  unint64_t v16 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v17 = (v9 + *(unsigned __int8 *)(v5 + 80) + v16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v18 = (v6 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = 0;
  *(void *)(v19 + 24) = 0;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v19 + v16, v10, v7);
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v19 + v17, v22, v15);
  *(void *)(v19 + v18) = v24;
  sub_24A0BCB44((uint64_t)v13, (uint64_t)&unk_26975E008, v19);
  return swift_release();
}

uint64_t sub_24A0BC1D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[3] = a4;
  v5[4] = a5;
  v5[5] = sub_24A08DF34(&qword_26975D5C0);
  v5[6] = swift_task_alloc();
  uint64_t v6 = sub_24A08DF34(&qword_26975DED8);
  v5[7] = v6;
  v5[8] = *(void *)(v6 - 8);
  v5[9] = swift_task_alloc();
  v5[10] = type metadata accessor for Asset(0);
  v5[11] = swift_task_alloc();
  v5[12] = swift_task_alloc();
  v5[13] = swift_task_alloc();
  sub_24A08DF34(&qword_26975DE78);
  v5[14] = swift_task_alloc();
  v5[15] = swift_task_alloc();
  v5[16] = type metadata accessor for UploadResponseMessage();
  v5[17] = swift_task_alloc();
  sub_24A08DF34(&qword_26975DF10);
  v5[18] = swift_task_alloc();
  uint64_t v7 = sub_24A08DF34(&qword_26975DF18);
  v5[19] = v7;
  v5[20] = *(void *)(v7 - 8);
  v5[21] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_24A0BC41C, 0, 0);
}

uint64_t sub_24A0BC41C()
{
  sub_24A0B3940();
  uint64_t v1 = sub_24A08DF34(&qword_26975DDD0);
  MEMORY[0x24C5BB210](v1);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 176) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_24A0BC4DC;
  sub_24A0C91A4();
  return MEMORY[0x270FA20F8](v3, v4, v5, v6, v7);
}

uint64_t sub_24A0BC4DC()
{
  sub_24A0B3914();
  sub_24A0B38DC();
  uint64_t v1 = *v0;
  sub_24A0B394C();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_24A0C9144();
  return MEMORY[0x270FA2498](v3, v4, v5);
}

void sub_24A0BC5B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t *a22,uint64_t a23,uint64_t a24)
{
  sub_24A0C9200();
  a23 = v25;
  a24 = v26;
  sub_24A0C9538();
  a22 = v24;
  uint64_t v27 = v24[18];
  sub_24A0AAE14(v27, 1, v24[16]);
  if (v28)
  {
    sub_24A0C9A68();
    uint64_t v67 = v29;
    sub_24A09C038();
    v30();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_24A0C9194();
    sub_24A0C916C();
    v32(v31, v32, v33, v34, v35, v36, v37, v38, a9, a10, a11, v67, a13, a14, a15, a16);
  }
  else
  {
    sub_24A0C7DC8(v27, v24[17]);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v40 = v24[14];
      uint64_t v41 = v24[10];
      sub_24A0C7400(v24[17], v24[15], &qword_26975DE78);
      uint64_t v42 = sub_24A0C9634();
      sub_24A093BE0(v42, v43, &qword_26975DE78);
      sub_24A0AAE14(v40, 1, v41);
      if (v28)
      {
        sub_24A090E10();
        uint64_t v44 = sub_24A0C9258();
        sub_24A0C9F1C(v44);
        sub_24A08DF34(&qword_26975DEC0);
        AsyncThrowingStream.Continuation.yield(_:)();
        sub_24A09BFBC();
        v45();
      }
      else
      {
        sub_24A0C7DC8(v24[14], v24[13]);
        if (qword_26975D318 != -1) {
          swift_once();
        }
        uint64_t v46 = v24[12];
        uint64_t v47 = v24[13];
        uint64_t v48 = type metadata accessor for Logger();
        sub_24A0A800C(v48, (uint64_t)qword_26975DD88);
        sub_24A0C7450(v47, v46);
        uint64_t v49 = Logger.logObject.getter();
        os_log_type_t v50 = static os_log_type_t.default.getter();
        BOOL v51 = sub_24A0C9D84(v50);
        uint64_t v52 = v24[12];
        if (v51)
        {
          uint64_t v53 = v24[11];
          uint64_t v54 = sub_24A0C93C0();
          a13 = sub_24A0C9298();
          *(_DWORD *)uint64_t v54 = 136315138;
          sub_24A0C7450(v52, v53);
          uint64_t v55 = String.init<A>(describing:)();
          *(void *)(v54 + 4) = sub_24A0C6240(v55, v56, &a13);
          swift_bridgeObjectRelease();
          sub_24A0C8734(v52, (void (*)(void))type metadata accessor for Asset);
          sub_24A0C9850(&dword_24A08B000, v49, v57, "successfully uploaded asset %s");
          sub_24A0C95E4();
          sub_24A0C912C();
          sub_24A0C912C();
        }
        else
        {
          sub_24A0C8734(v24[12], (void (*)(void))type metadata accessor for Asset);
        }

        uint64_t v58 = v24[13];
        sub_24A0C7450(v58, v24[6]);
        swift_storeEnumTagMultiPayload();
        sub_24A08DF34(&qword_26975DEC0);
        sub_24A0C9C90();
        sub_24A0C93B4();
        v59();
        sub_24A0C8734(v58, (void (*)(void))type metadata accessor for Asset);
      }
      sub_24A0C8A04(v24[15], &qword_26975DE78);
      uint64_t v60 = (void *)swift_task_alloc();
      v24[22] = (uint64_t)v60;
      *uint64_t v60 = v24;
      v60[1] = sub_24A0BC4DC;
      sub_24A0C91A4();
      sub_24A0C916C();
      MEMORY[0x270FA20F8](v61, v62, v63, v64, v65);
    }
    else
    {
      _assertionFailure(_:_:file:line:flags:)();
      sub_24A0C916C();
    }
  }
}

uint64_t sub_24A0BCA54()
{
  sub_24A0C9A68();
  sub_24A09C038();
  v0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A0B3920();
  return v1();
}

uint64_t sub_24A0BCB44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_24A093CE4();
  uint64_t v5 = type metadata accessor for TaskPriority();
  sub_24A0AAE14(v3, 1, v5);
  if (v6)
  {
    sub_24A0C8A04(v3, &qword_26975DE98);
  }
  else
  {
    TaskPriority.rawValue.getter();
    sub_24A08F2BC();
    v7();
  }
  if (*(void *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t sub_24A0BCC80(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_24A08DF34(&qword_26975DF70);
    uint64_t v1 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v1 = MEMORY[0x263F8EE80];
  }
  uint64_t v4 = v1;
  uint64_t v2 = swift_bridgeObjectRetain();
  sub_24A0C78C4(v2, 1, &v4);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_24A0BCD2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v30 = a4;
  uint64_t v31 = a5;
  uint64_t v28 = a1;
  uint64_t v29 = a3;
  uint64_t v6 = sub_24A08DF34(&qword_26975DF28);
  uint64_t v26 = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x270FA5388](v6);
  uint64_t v27 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_24A08DF34(&qword_26975DE40);
  uint64_t v25 = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_24A08DF34(&qword_26975DE98);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for TaskPriority();
  _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)v15, 1, 1, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v28, v6);
  unint64_t v17 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v18 = (v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = (*(unsigned __int8 *)(v7 + 80) + v18 + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v20 = (v8 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = 0;
  *(void *)(v21 + 24) = 0;
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v21 + v17, v12, v25);
  *(void *)(v21 + v18) = v29;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v21 + v19, v27, v26);
  uint64_t v22 = v31;
  *(void *)(v21 + v20) = v30;
  *(void *)(v21 + ((v20 + 15) & 0xFFFFFFFFFFFFFFF8)) = v22;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_24A0D17A4((uint64_t)v15, (uint64_t)&unk_26975DF38, v21);
  return swift_release();
}

uint64_t sub_24A0BCFFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[13] = a6;
  v7[14] = a7;
  v7[11] = a4;
  v7[12] = a5;
  v7[15] = sub_24A08DF34(&qword_26975DE18);
  v7[16] = swift_task_alloc();
  uint64_t v8 = sub_24A08DF34(&qword_26975DF40);
  v7[17] = v8;
  v7[18] = *(void *)(v8 - 8);
  v7[19] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for AssetDownloadRequest();
  v7[20] = v9;
  v7[21] = *(void *)(v9 - 8);
  v7[22] = swift_task_alloc();
  sub_24A08DF34(&qword_26975D3E8);
  v7[23] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for URL();
  v7[24] = v10;
  v7[25] = *(void *)(v10 - 8);
  v7[26] = swift_task_alloc();
  v7[27] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for TaskPriority();
  v7[28] = v11;
  v7[29] = *(void *)(v11 - 8);
  v7[30] = swift_task_alloc();
  v7[31] = type metadata accessor for AssetDownloadResponse();
  v7[32] = swift_task_alloc();
  v7[33] = swift_task_alloc();
  v7[34] = swift_task_alloc();
  sub_24A08DF34(&qword_26975DF48);
  v7[35] = swift_task_alloc();
  v7[36] = swift_task_alloc();
  v7[37] = type metadata accessor for DownloadResponseMessage();
  v7[38] = swift_task_alloc();
  sub_24A08DF34(&qword_26975DF50);
  v7[39] = swift_task_alloc();
  uint64_t v12 = sub_24A08DF34(&qword_26975DF58);
  v7[40] = v12;
  v7[41] = *(void *)(v12 - 8);
  v7[42] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_24A0BD3C4, 0, 0);
}

uint64_t sub_24A0BD3C4()
{
  sub_24A0B3940();
  uint64_t v1 = sub_24A08DF34(&qword_26975DE40);
  MEMORY[0x24C5BB210](v1);
  swift_task_alloc();
  sub_24A0C9DAC();
  *(void *)(v0 + 344) = v2;
  *uint64_t v2 = v3;
  v2[1] = sub_24A0BD4B0;
  sub_24A0C9144();
  return MEMORY[0x270FA20F8](v4, v5, v6, v7, v8);
}

uint64_t sub_24A0BD4B0()
{
  sub_24A0B3914();
  sub_24A0B38DC();
  uint64_t v1 = *v0;
  sub_24A0B394C();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_24A0C9144();
  return MEMORY[0x270FA2498](v3, v4, v5);
}

uint64_t sub_24A0BD5B8()
{
  __int16 v137 = v0;
  uint64_t v2 = v0;
  v136[1] = *MEMORY[0x263EF8340];
  sub_24A0C92B0();
  if (v3) {
    goto LABEL_3;
  }
  uint64_t v7 = sub_24A093E40();
  sub_24A0C7DC8(v7, v8);
  int v9 = sub_24A0CA1EC();
  uint64_t v10 = (uint64_t *)v0[38];
  if (v9 == 1)
  {
    uint64_t v11 = *v10;
    if (qword_26975D318 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_24A0A800C(v12, (uint64_t)qword_26975DD88);
    swift_bridgeObjectRetain_n();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (sub_24A0C9BB8(v14))
    {
      uint64_t v15 = sub_24A0C93C0();
      uint64_t v16 = (void *)sub_24A0C93F0();
      *(_DWORD *)uint64_t v15 = 138412290;
      sub_24A0B4444();
      sub_24A0C9258();
      *unint64_t v17 = v11;
      swift_bridgeObjectRetain();
      uint64_t v18 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v15 + 4) = v18;
      *uint64_t v16 = v18;
      sub_24A0C9AF0();
      _os_log_impl(&dword_24A08B000, v13, v1, "requests failed due to server blocking %@", (uint8_t *)v15, 0xCu);
      sub_24A08DF34(&qword_26975DF20);
      swift_arrayDestroy();
      sub_24A0C912C();
      sub_24A0C912C();
    }
    else
    {
      sub_24A0C9AF0();
    }

    sub_24A0B4444();
    uint64_t v37 = sub_24A0C9258();
    *uint64_t v38 = v11;
    v0[4] = v37;
    sub_24A08DF34(&qword_26975DF28);
    AsyncThrowingStream.Continuation.finish(throwing:)();
    goto LABEL_26;
  }
  uint64_t v20 = v0[35];
  uint64_t v19 = v0[36];
  uint64_t v21 = v0[31];
  uint64_t v22 = (uint64_t *)((char *)v10 + *(int *)(sub_24A08DF34(&qword_26975DF60) + 48));
  uint64_t v24 = *v22;
  unint64_t v23 = v22[1];
  uint64_t v25 = sub_24A0C9634();
  sub_24A0C7400(v25, v26, &qword_26975DF48);
  sub_24A093BE0(v19, v20, &qword_26975DF48);
  sub_24A0AAE14(v20, 1, v21);
  if (v3)
  {
    swift_bridgeObjectRelease();
    if (qword_26975D318 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_24A0C96D0(v27, (uint64_t)qword_26975DD88);
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (sub_24A0C9D84(v29))
    {
      uint64_t v30 = v0[20];
      uint64_t v31 = sub_24A0C93C0();
      v136[0] = sub_24A0C9298();
      *(_DWORD *)uint64_t v31 = 136315138;
      uint64_t v32 = swift_bridgeObjectRetain();
      uint64_t v33 = MEMORY[0x24C5BB120](v32, v30);
      unint64_t v35 = v34;
      swift_bridgeObjectRelease();
      *(void *)(v31 + 4) = sub_24A0C6240(v33, v35, v136);
      uint64_t v2 = v0;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      sub_24A0C9850(&dword_24A08B000, v28, v36, "failed to process requests %s");
      sub_24A0CA03C();
      sub_24A0C912C();
      sub_24A0C912C();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    uint64_t v52 = v2[36];
    uint64_t v53 = (uint64_t *)v2[16];
    sub_24A090E10();
    uint64_t *v53 = sub_24A0C9258();
    swift_storeEnumTagMultiPayload();
    sub_24A08DF34(&qword_26975DF28);
    sub_24A0C9C90();
    sub_24A0CA1E0();
    sub_24A0AB19C();
    v54();
    uint64_t v55 = v52;
    goto LABEL_25;
  }
  unint64_t v134 = v23;
  uint64_t v133 = v24;
  sub_24A0C7DC8(v0[35], v0[34]);
  if (qword_26975D318 != -1) {
    swift_once();
  }
  uint64_t v39 = v0[33];
  uint64_t v40 = v0[34];
  uint64_t v132 = type metadata accessor for Logger();
  sub_24A0A800C(v132, (uint64_t)qword_26975DD88);
  sub_24A0C7450(v40, v39);
  uint64_t v41 = Logger.logObject.getter();
  os_log_type_t v42 = static os_log_type_t.default.getter();
  BOOL v43 = os_log_type_enabled(v41, v42);
  uint64_t v44 = v0[33];
  if (v43)
  {
    uint64_t v45 = sub_24A0C9324();
    v136[0] = sub_24A0C9A50();
    *(_DWORD *)uint64_t v45 = 136315394;
    sub_24A0C90D8(&qword_26975DF68, MEMORY[0x263F06EA8]);
    uint64_t v46 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[9] = sub_24A0C6240(v46, v47, v136);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_24A0C8734(v44, (void (*)(void))type metadata accessor for AssetDownloadResponse);
    *(_WORD *)(v45 + 12) = 2080;
    static Task<>.currentPriority.getter();
    sub_24A0C90D8(&qword_26975DDE0, MEMORY[0x263F8F520]);
    uint64_t v48 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v50 = v49;
    sub_24A0AB19C();
    v51();
    v0[10] = sub_24A0C6240(v48, v50, v136);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_24A0C964C(&dword_24A08B000, v41, v42, "successfully downloaded asset at %s with priority %s");
    sub_24A0C97F4();
    sub_24A0C912C();
    sub_24A0C912C();
  }
  else
  {
    sub_24A0C8734(v44, (void (*)(void))type metadata accessor for AssetDownloadResponse);
  }

  if (!*(void *)(v0[12] + 16) || (unint64_t v64 = sub_24A0D5CFC(v0[34]), (v62 & 1) == 0))
  {
    sub_24A0CA108(v0[23], v62, v63, v0[24]);
    goto LABEL_36;
  }
  uint64_t v65 = v0[24];
  uint64_t v66 = v0[25];
  uint64_t v68 = v2[22];
  uint64_t v67 = v2[23];
  uint64_t v69 = v2[20];
  sub_24A0C7450(*(void *)(v2[12] + 56) + *(void *)(v2[21] + 72) * v64, v68);
  uint64_t v70 = *(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 16);
  v70(v67, v68 + *(int *)(v69 + 36), v65);
  sub_24A0C8734(v68, (void (*)(void))type metadata accessor for AssetDownloadRequest);
  _s10CloudAsset21UploadResponseMessageOwst_0(v67, 0, 1, v65);
  sub_24A0C92B0();
  if (v3)
  {
LABEL_36:
    uint64_t v87 = v2[23];
    swift_bridgeObjectRelease();
    sub_24A0C8A04(v87, &qword_26975D3E8);
    sub_24A090E10();
    uint64_t v88 = sub_24A0C9258();
    sub_24A0CA120(v88);
    sub_24A08DF34(&qword_26975DF28);
    AsyncThrowingStream.Continuation.yield(_:)();
    sub_24A093E40();
    sub_24A0AB19C();
    v89();
    uint64_t v90 = (void *)Logger.logObject.getter();
    os_log_type_t v91 = static os_log_type_t.error.getter();
    if (sub_24A0C9930(v91))
    {
      uint64_t v92 = (_WORD *)sub_24A0CA1C8();
      sub_24A0CA204(v92);
      sub_24A0C9550(&dword_24A08B000, v93, v94, "invalid request id");
      sub_24A0C912C();
    }
    uint64_t v95 = v2[36];
    uint64_t v96 = v2[34];

    sub_24A0C8734(v96, (void (*)(void))type metadata accessor for AssetDownloadResponse);
    sub_24A0C8A04(v95, &qword_26975DF48);
    goto LABEL_3;
  }
  uint64_t v71 = v2[34];
  uint64_t v72 = v2[32];
  uint64_t v74 = v2[26];
  uint64_t v73 = v2[27];
  uint64_t v75 = v2[24];
  sub_24A0CA0C4();
  v76();
  sub_24A0C7450(v71, v72);
  v70(v74, v73, v75);
  long long v77 = Logger.logObject.getter();
  os_log_type_t v78 = static os_log_type_t.default.getter();
  BOOL v79 = os_log_type_enabled(v77, v78);
  uint64_t v80 = v2[32];
  char v131 = v2;
  if (v79)
  {
    uint64_t v81 = sub_24A0C9324();
    v136[0] = sub_24A0C9A50();
    *(_DWORD *)uint64_t v81 = 136315394;
    uint64_t v70 = (void (*)(uint64_t, uint64_t, uint64_t))(v81 + 4);
    sub_24A0C90D8(&qword_26975DF68, MEMORY[0x263F06EA8]);
    uint64_t v82 = dispatch thunk of CustomStringConvertible.description.getter();
    v131[7] = sub_24A0C6240(v82, v83, v136);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_24A0C8734(v80, (void (*)(void))type metadata accessor for AssetDownloadResponse);
    *(_WORD *)(v81 + 12) = 2080;
    uint64_t v84 = dispatch thunk of CustomStringConvertible.description.getter();
    v131[8] = sub_24A0C6240(v84, v85, v136);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_24A08F2BC();
    v86();
    _os_log_impl(&dword_24A08B000, v77, v78, "moving file from %s to %s", (uint8_t *)v81, 0x16u);
    sub_24A0C9814();
    sub_24A0C912C();
    uint64_t v2 = v131;
    sub_24A0C912C();
  }
  else
  {
    sub_24A0C8734(v80, (void (*)(void))type metadata accessor for AssetDownloadResponse);
    uint64_t v97 = sub_24A0C9634();
    v98(v97);
  }

  String.utf8CString.getter();
  uint64_t v99 = sandbox_extension_consume();
  swift_release();
  if (v99 < 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v113 = Logger.logObject.getter();
    os_log_type_t v114 = static os_log_type_t.error.getter();
    if (sub_24A0C9D84(v114))
    {
      uint64_t v99 = (uint64_t)(v2 + 6);
      uint64_t v115 = (_DWORD *)sub_24A0C93C0();
      v136[0] = sub_24A0C9298();
      *uint64_t v115 = 136315138;
      uint64_t v70 = (void (*)(uint64_t, uint64_t, uint64_t))(v115 + 3);
      swift_bridgeObjectRetain();
      v2[6] = sub_24A0C6240(v133, v134, v136);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      sub_24A0C9850(&dword_24A08B000, v113, v116, "failed to consume extension token %s");
      sub_24A0C95E4();
      sub_24A0C912C();
      sub_24A0C912C();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    sub_24A0C9994();
    sub_24A090E10();
    uint64_t v118 = sub_24A0C9258();
    swift_willThrow();
    sub_24A0C9544();
    v121();
    sub_24A0C8734((uint64_t)v70, (void (*)(void))type metadata accessor for AssetDownloadResponse);
    sub_24A0C8A04(v99, &qword_26975DF48);
    uint64_t v122 = sub_24A0C9634();
    v123(v122);
  }
  else
  {
    uint64_t v100 = v2[31];
    swift_bridgeObjectRelease();
    id v101 = objc_msgSend(self, sel_defaultManager);
    URL._bridgeToObjectiveC()((NSURL *)*(int *)(v100 + 24));
    int v103 = v102;
    URL._bridgeToObjectiveC()(v104);
    unint64_t v106 = v105;
    v2[5] = 0;
    unsigned int v107 = objc_msgSend(v101, sel_moveItemAtURL_toURL_error_, v103, v105, v2 + 5);

    uint64_t v108 = (void *)v2[5];
    if (v107)
    {
      uint64_t v109 = v2[34];
      uint64_t v135 = v2[36];
      sub_24A0C7450(v109, v2[16]);
      swift_storeEnumTagMultiPayload();
      id v110 = v108;
      sub_24A08DF34(&qword_26975DF28);
      AsyncThrowingStream.Continuation.yield(_:)();
      sub_24A0AB19C();
      v111();
      sandbox_extension_release();
      sub_24A08F2BC();
      v112();
      sub_24A0C8734(v109, (void (*)(void))type metadata accessor for AssetDownloadResponse);
      uint64_t v55 = v135;
LABEL_25:
      sub_24A0C8A04(v55, &qword_26975DF48);
LABEL_26:
      unint64_t v56 = (void *)swift_task_alloc();
      v2[43] = v56;
      *unint64_t v56 = v2;
      v56[1] = sub_24A0BD4B0;
      sub_24A0C9144();
      return MEMORY[0x270FA20F8](v57, v58, v59, v60, v61);
    }
    sub_24A0C9994();
    id v117 = v108;
    uint64_t v118 = _convertNSErrorToError(_:)();

    swift_willThrow();
    sub_24A0AB19C();
    v119();
    sub_24A0C8734((uint64_t)v103, (void (*)(void))type metadata accessor for AssetDownloadResponse);
    sub_24A0C8A04(v99, &qword_26975DF48);
    sub_24A0C9544();
    v120();
  }
  if (qword_26975D318 != -1) {
    swift_once();
  }
  sub_24A0A800C(v132, (uint64_t)qword_26975DD88);
  MEMORY[0x24C5BB8B0](v118);
  MEMORY[0x24C5BB8B0](v118);
  uint64_t v124 = Logger.logObject.getter();
  os_log_type_t v125 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v124, v125))
  {
    uint64_t v126 = (_DWORD *)sub_24A0C93C0();
    uint64_t v127 = (void *)sub_24A0C93F0();
    *uint64_t v126 = 138412290;
    MEMORY[0x24C5BB8B0](v118);
    uint64_t v128 = _swift_stdlib_bridgeErrorToNSError();
    v131[3] = v128;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v127 = v128;
    MEMORY[0x24C5BB8A0](v118);
    MEMORY[0x24C5BB8A0](v118);
    sub_24A0C9850(&dword_24A08B000, v124, v129, "failed to process requests due to error %@");
    sub_24A08DF34(&qword_26975DF20);
    sub_24A0CA03C();
    sub_24A0C912C();
    sub_24A0C912C();
  }
  else
  {
    MEMORY[0x24C5BB8A0](v118);
    MEMORY[0x24C5BB8A0](v118);
  }
  __int16 v130 = (uint64_t *)v131[16];

  sub_24A090E10();
  *__int16 v130 = sub_24A0C9258();
  sub_24A093E40();
  swift_storeEnumTagMultiPayload();
  sub_24A08DF34(&qword_26975DF28);
  AsyncThrowingStream.Continuation.yield(_:)();
  MEMORY[0x24C5BB8A0](v118);
LABEL_3:
  sub_24A09C038();
  v4();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A0B3920();
  return v5();
}

uint64_t sub_24A0BE734(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  sub_24A0C9DEC();
  uint64_t v44 = *MEMORY[0x263EF8340];
  sub_24A09C038();
  v19();
  uint64_t v20 = v18[2];
  if (qword_26975D318 != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  sub_24A0A800C(v21, (uint64_t)qword_26975DD88);
  MEMORY[0x24C5BB8B0](v20);
  MEMORY[0x24C5BB8B0](v20);
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v22, v23))
  {
    sub_24A0C93C0();
    uint64_t v24 = (void *)sub_24A0C93F0();
    sub_24A0C9BEC(5.7779e-34);
    MEMORY[0x24C5BB8B0](v20);
    uint64_t v25 = _swift_stdlib_bridgeErrorToNSError();
    v18[3] = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v24 = v25;
    MEMORY[0x24C5BB8A0](v20);
    MEMORY[0x24C5BB8A0](v20);
    sub_24A0C95C8(&dword_24A08B000, v22, v26, "failed to process requests due to error %@");
    sub_24A08DF34(&qword_26975DF20);
    swift_arrayDestroy();
    sub_24A0C912C();
    sub_24A0C912C();
  }
  else
  {
    MEMORY[0x24C5BB8A0](v20);
    MEMORY[0x24C5BB8A0](v20);
  }

  sub_24A090E10();
  uint64_t v27 = sub_24A0C9258();
  sub_24A0CA120(v27);
  sub_24A08DF34(&qword_26975DF28);
  AsyncThrowingStream.Continuation.yield(_:)();
  MEMORY[0x24C5BB8A0](v20);
  uint64_t v38 = v18[30];
  uint64_t v39 = v18[27];
  uint64_t v40 = v18[26];
  uint64_t v41 = v18[23];
  uint64_t v42 = v18[22];
  uint64_t v43 = v18[16];
  sub_24A09C038();
  v28();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A0B3920();
  sub_24A0C9B9C();
  return v30(v29, v30, v31, v32, v33, v34, v35, v36, v38, v39, v40, v41, v42, v43, v44, a16, a17, a18);
}

void sub_24A0BEA18()
{
  sub_24A0AAFDC();
  v31[2] = v0;
  uint64_t v32 = v1;
  char v3 = v2;
  v31[1] = v4;
  uint64_t v5 = sub_24A08DF34(&qword_26975DEC0);
  sub_24A08F24C();
  uint64_t v7 = v6;
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x270FA5388](v10);
  v31[0] = (char *)v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_24A08DF34(v3);
  sub_24A08F24C();
  uint64_t v13 = v12;
  uint64_t v15 = *(void *)(v14 + 64);
  MEMORY[0x270FA5388](v16);
  unint64_t v17 = (char *)v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_24A08DF34(&qword_26975DE98);
  uint64_t v19 = sub_24A093C88(v18);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)v31 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for TaskPriority();
  sub_24A0CA108((uint64_t)v21, v23, v24, v22);
  sub_24A0C9454();
  v25();
  uint64_t v26 = v5;
  sub_24A0C9454();
  v27();
  unint64_t v28 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v29 = (v15 + *(unsigned __int8 *)(v7 + 80) + v28) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = 0;
  *(void *)(v30 + 24) = 0;
  (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v30 + v28, v17, v11);
  (*(void (**)(unint64_t, void, uint64_t))(v7 + 32))(v30 + v29, v31[0], v26);
  sub_24A0D17A4((uint64_t)v21, v32, v30);
  swift_release();
  sub_24A0AB030();
}

uint64_t sub_24A0BEC1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[4] = a4;
  v5[5] = a5;
  v5[6] = type metadata accessor for AssetDownloadResponse();
  v5[7] = swift_task_alloc();
  v5[8] = sub_24A08DF34(&qword_26975D5C0);
  v5[9] = swift_task_alloc();
  uint64_t v6 = sub_24A08DF34(&qword_26975DED8);
  v5[10] = v6;
  v5[11] = *(void *)(v6 - 8);
  v5[12] = swift_task_alloc();
  v5[13] = sub_24A08DF34(&qword_26975DE18);
  v5[14] = swift_task_alloc();
  v5[15] = swift_task_alloc();
  sub_24A08DF34(&qword_26975DE20);
  v5[16] = swift_task_alloc();
  uint64_t v7 = sub_24A08DF34(&qword_26975DE28);
  v5[17] = v7;
  v5[18] = *(void *)(v7 - 8);
  v5[19] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_24A0BEE18, 0, 0);
}

uint64_t sub_24A0BEE18()
{
  sub_24A0B3940();
  uint64_t v0 = sub_24A08DF34(&qword_26975DE00);
  MEMORY[0x24C5BB210](v0);
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)sub_24A0C9618(v1);
  *uint64_t v2 = v3;
  v2[1] = sub_24A0BEED0;
  sub_24A0C91A4();
  return MEMORY[0x270FA20F8](v4, v5, v6, v7, v8);
}

uint64_t sub_24A0BEED0()
{
  sub_24A0B3914();
  sub_24A0B38DC();
  uint64_t v1 = *v0;
  sub_24A0B394C();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_24A0C9144();
  return MEMORY[0x270FA2498](v3, v4, v5);
}

uint64_t sub_24A0BEFAC()
{
  sub_24A0C9A44();
  uint64_t v1 = v0[16];
  sub_24A0C92B0();
  if (v2)
  {
    sub_24A09C038();
    v3();
    sub_24A0C9A84();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_24A0B3920();
    sub_24A0C9C30();
    __asm { BRAA            X1, X16 }
  }
  sub_24A0C7400(v1, v0[15], &qword_26975DE18);
  uint64_t v6 = sub_24A0CA1E0();
  sub_24A093BE0(v6, v7, &qword_26975DE18);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v9 = (void *)v0[14];
  uint64_t v10 = (void *)v0[9];
  if (EnumCaseMultiPayload == 1)
  {
    *uint64_t v10 = *v9;
  }
  else
  {
    uint64_t v12 = v0[6];
    uint64_t v11 = v0[7];
    sub_24A0C7DC8((uint64_t)v9, v11);
    sub_24A0C7450(v11 + *(int *)(v12 + 20), (uint64_t)v10);
    sub_24A0C8734(v11, (void (*)(void))type metadata accessor for AssetDownloadResponse);
  }
  sub_24A0C9634();
  swift_storeEnumTagMultiPayload();
  uint64_t v13 = v0[15];
  sub_24A08DF34(&qword_26975DEC0);
  AsyncThrowingStream.Continuation.yield(_:)();
  sub_24A0C93B4();
  v14();
  sub_24A0C8A04(v13, &qword_26975DE18);
  uint64_t v15 = swift_task_alloc();
  uint64_t v16 = (void *)sub_24A0C9618(v15);
  *uint64_t v16 = v17;
  v16[1] = sub_24A0BEED0;
  sub_24A0C91A4();
  sub_24A0C9C30();
  return MEMORY[0x270FA20F8](v18, v19, v20, v21, v22);
}

uint64_t sub_24A0BF1F0()
{
  sub_24A0C9DC8();
  sub_24A09C038();
  v1();
  *(void *)(v0 + 24) = *(void *)(v0 + 16);
  sub_24A08DF34(&qword_26975DEC0);
  AsyncThrowingStream.Continuation.finish(throwing:)();
  sub_24A0C9A84();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A0B3920();
  return v2();
}

uint64_t AssetManager.process(request:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return sub_24A0C9904((uint64_t)sub_24A0BF2D8);
}

{
  uint64_t v1;
  uint64_t v2;

  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return sub_24A0C9904((uint64_t)sub_24A0C0520);
}

uint64_t sub_24A0BF2D8()
{
  sub_24A0B3940();
  uint64_t v1 = v0[2];
  sub_24A08DF34(&qword_26975DDB8);
  uint64_t v2 = type metadata accessor for AssetUploadRequest();
  sub_24A0B38FC(v2);
  uint64_t v3 = (__n128 *)sub_24A0C9270();
  v0[4] = v3;
  sub_24A0C9E8C(v3, (__n128)xmmword_24A0E75F0);
  sub_24A0C7450(v1, v4);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[5] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_24A0BF3DC;
  return AssetManager.process(requests:)();
}

uint64_t sub_24A0BF3DC()
{
  sub_24A0B3940();
  uint64_t v3 = v2;
  sub_24A0B38DC();
  uint64_t v5 = v4;
  sub_24A0C9188();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  sub_24A0B394C();
  *uint64_t v8 = v7;
  *(void *)(v5 + 48) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_bridgeObjectRelease();
    *(void *)(v5 + 56) = v3;
  }
  sub_24A0C9144();
  return MEMORY[0x270FA2498](v9, v10, v11);
}

uint64_t sub_24A0BF4D4()
{
  sub_24A0B3914();
  uint64_t v1 = *(void *)(v0 + 56);
  type metadata accessor for AssetUploadCoordinator();
  uint64_t v2 = swift_allocObject();
  swift_defaultActor_initialize();
  *(void *)(v2 + 112) = v1;
  uint64_t v3 = sub_24A0C986C();
  return v4(v3);
}

uint64_t sub_24A0BF548()
{
  sub_24A0B3914();
  swift_bridgeObjectRelease();
  sub_24A0B3920();
  return v0();
}

uint64_t sub_24A0BF820(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, os_log_type_t type, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26)
{
  sub_24A0C9DEC();
  a25 = v27;
  a26 = v28;
  a24 = v26;
  if (qword_26975D318 != -1) {
    swift_once();
  }
  uint64_t v29 = type metadata accessor for Logger();
  v26[40] = sub_24A0A800C(v29, (uint64_t)qword_26975DD88);
  swift_bridgeObjectRetain_n();
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v30, v31))
  {
    a12 = v26[38];
    a10 = v26 + 4;
    a11 = v26[37];
    uint64_t v32 = (uint8_t *)sub_24A0C9324();
    a13 = sub_24A0C9A50();
    a15 = a13;
    *(_DWORD *)uint64_t v32 = 136315394;
    uint64_t v33 = type metadata accessor for AssetUploadRequest();
    uint64_t v34 = swift_bridgeObjectRetain();
    uint64_t v35 = MEMORY[0x24C5BB120](v34, v33);
    unint64_t v37 = v36;
    swift_bridgeObjectRelease();
    v26[4] = sub_24A0C6240(v35, v37, &a15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    sub_24A0CA0DC();
    sub_24A0C90D8(&qword_26975DDE0, MEMORY[0x263F8F520]);
    dispatch thunk of CustomStringConvertible.description.getter();
    sub_24A08F2BC();
    uint64_t v39 = v38();
    v26[5] = sub_24A0CA024(v39, v40, &a15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_24A08B000, v30, v31, "start processing %s with priority %s", v32, 0x16u);
    sub_24A0C97F4();
    sub_24A0C912C();
    sub_24A0C912C();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  sub_24A0C9F64(v26[7]);
  typea = (char *)&dword_26975DDD8 + dword_26975DDD8;
  swift_bridgeObjectRetain();
  swift_task_alloc();
  sub_24A0C9DAC();
  v26[41] = v41;
  *uint64_t v41 = v42;
  v41[1] = sub_24A0BFAFC;
  sub_24A0C9B9C();
  return v46(v43, v44, v45, v46, v47, v48, v49, v50, a9, a10, a11, a12, a13, typea, a15, a16, a17, a18);
}

uint64_t sub_24A0BFAFC()
{
  sub_24A0B3914();
  sub_24A0B38DC();
  sub_24A0C9188();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_24A0B394C();
  *uint64_t v5 = v4;
  *(void *)(v6 + 336) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_24A0C9144();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

uint64_t sub_24A0BFBF4()
{
  uint64_t v20 = *(void *)(v0 + 288);
  uint64_t v1 = *(void *)(v0 + 224);
  uint64_t v2 = *(void *)(v0 + 216);
  uint64_t v12 = *(void *)(v0 + 208);
  uint64_t v3 = *(void *)(v0 + 136);
  uint64_t v15 = *(void *)(v0 + 144);
  uint64_t v4 = *(void *)(v0 + 120);
  uint64_t v16 = *(void *)(v0 + 128);
  uint64_t v17 = *(void *)(v0 + 152);
  uint64_t v5 = *(void *)(v0 + 112);
  uint64_t v13 = *(void *)(v0 + 232);
  uint64_t v14 = *(void *)(v0 + 104);
  uint64_t v19 = *(void *)(v0 + 64);
  uint64_t v18 = *(void *)(v0 + 48);
  *(_DWORD *)(v0 + 368) = *MEMORY[0x263F8F680];
  sub_24A0CA0D0();
  v6();
  static AsyncThrowingStream.makeStream<>(of:throwing:bufferingPolicy:)();
  sub_24A0C9544();
  v7();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v13, v1, v12);
  sub_24A08DF34(&qword_26975DE78);
  sub_24A0CA0D0();
  v8();
  static AsyncThrowingStream.makeStream<>(of:throwing:bufferingPolicy:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v14);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v17, v15, v16);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 344) = v9;
  v9[2] = v20;
  v9[3] = v17;
  v9[4] = v13;
  v9[5] = v18;
  v9[6] = v19;
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v0 + 352) = v10;
  sub_24A08DF34(&qword_26975DE80);
  *uint64_t v10 = v0;
  v10[1] = sub_24A0BFE60;
  sub_24A0C9144();
  return MEMORY[0x270FA2360]();
}

uint64_t sub_24A0BFE60()
{
  sub_24A0B3914();
  sub_24A0B38DC();
  sub_24A0C9188();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_24A0B394C();
  *uint64_t v5 = v4;
  *(void *)(v6 + 360) = v0;
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A0C9144();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

uint64_t sub_24A0BFF58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  sub_24A0C9200();
  sub_24A0C9538();
  sub_24A0C9408();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A0C916C();
  return v17(v16, v17, v18, v19, v20, v21, v22, v23, a9, a10, a11, a12, a13, a14, a15, a16);
}

uint64_t sub_24A0C0020()
{
  uint64_t v28 = v0;
  uint64_t v25 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (sub_24A0C9BB8(v2))
  {
    uint64_t v3 = (_DWORD *)sub_24A0C93C0();
    uint64_t v27 = sub_24A0C9298();
    *uint64_t v3 = 136315138;
    uint64_t v4 = type metadata accessor for AssetSkeleton();
    uint64_t v5 = swift_bridgeObjectRetain();
    uint64_t v6 = MEMORY[0x24C5BB120](v5, v4);
    unint64_t v8 = v7;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 24) = sub_24A0C6240(v6, v8, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    sub_24A0C95C8(&dword_24A08B000, v1, v9, "created ephemeral assets %s");
    sub_24A0C95E4();
    sub_24A0C912C();
    sub_24A0C912C();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  unsigned int v23 = *(_DWORD *)(v0 + 368);
  uint64_t v24 = *(void *)(v0 + 256);
  uint64_t v10 = *(void *)(v0 + 176);
  uint64_t v11 = *(void *)(v0 + 88);
  uint64_t v12 = *(void *)(v0 + 96);
  uint64_t v14 = *(void *)(v0 + 72);
  uint64_t v13 = *(void *)(v0 + 80);
  sub_24A0C9454();
  v15();
  *(void *)(swift_task_alloc() + 16) = v10;
  sub_24A08DF34(&qword_26975D5C0);
  (*(void (**)(uint64_t, void, uint64_t))(v13 + 104))(v11, v23, v14);
  AsyncThrowingStream.init<>(_:bufferingPolicy:_:)();
  swift_task_dealloc();
  type metadata accessor for AssetsUploadCoordinator();
  sub_24A0CA190();
  uint64_t v26 = sub_24A09687C(v25, v24, v12);
  sub_24A0C9448();
  v16();
  sub_24A09BFBC();
  v17();
  sub_24A0C9544();
  v18();
  sub_24A08F2BC();
  v19();
  sub_24A08F2BC();
  v20();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v21 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v21(v26);
}

uint64_t sub_24A0C03BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  sub_24A0C9200();
  sub_24A0C9538();
  uint64_t v34 = v16[34];
  uint64_t v35 = v16[36];
  uint64_t v33 = v16[29];
  uint64_t v18 = v16[26];
  uint64_t v17 = v16[27];
  sub_24A09C038();
  v19();
  uint64_t v20 = sub_24A0CA1E0();
  v21(v20);
  sub_24A0C9448();
  v22();
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v33, v18);
  sub_24A0C9544();
  v23();
  sub_24A0C9408();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A0C916C();
  return v25(v24, v25, v26, v27, v28, v29, v30, v31, a9, a10, v33, v34, v35, a14, a15, a16);
}

uint64_t sub_24A0C0520()
{
  sub_24A0B3940();
  uint64_t v1 = v0[2];
  sub_24A08DF34(&qword_26975DDF0);
  uint64_t v2 = type metadata accessor for AssetDownloadRequest();
  sub_24A0B38FC(v2);
  uint64_t v3 = (__n128 *)sub_24A0C9270();
  v0[4] = v3;
  sub_24A0C9E8C(v3, (__n128)xmmword_24A0E75F0);
  sub_24A0C7450(v1, v4);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[5] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_24A0C0624;
  return AssetManager.process(requests:)();
}

uint64_t sub_24A0C0624()
{
  sub_24A0B3940();
  uint64_t v3 = v2;
  sub_24A0B38DC();
  uint64_t v5 = v4;
  sub_24A0C9188();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  sub_24A0B394C();
  *unint64_t v8 = v7;
  *(void *)(v5 + 48) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_bridgeObjectRelease();
    *(void *)(v5 + 56) = v3;
  }
  sub_24A0C9144();
  return MEMORY[0x270FA2498](v9, v10, v11);
}

uint64_t sub_24A0C071C()
{
  sub_24A0B3914();
  uint64_t v1 = *(void *)(v0 + 56);
  type metadata accessor for AssetDownloadCoordinator();
  uint64_t v2 = swift_allocObject();
  swift_defaultActor_initialize();
  *(void *)(v2 + 112) = v1;
  uint64_t v3 = sub_24A0C986C();
  return v4(v3);
}

uint64_t sub_24A0C0888(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, os_log_type_t type, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27)
{
  sub_24A0C9DEC();
  a26 = v28;
  a27 = v29;
  a25 = v27;
  if (qword_26975D318 != -1) {
    swift_once();
  }
  uint64_t v30 = type metadata accessor for Logger();
  sub_24A0C96D0(v30, (uint64_t)qword_26975DD88);
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = (uint8_t *)sub_24A0C9324();
    a16 = sub_24A0C9A50();
    *(_DWORD *)uint64_t v33 = 136315394;
    uint64_t v34 = type metadata accessor for AssetDownloadRequest();
    uint64_t v35 = swift_bridgeObjectRetain();
    uint64_t v36 = MEMORY[0x24C5BB120](v35, v34);
    unint64_t v38 = v37;
    swift_bridgeObjectRelease();
    v27[2] = sub_24A0C6240(v36, v38, &a16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    sub_24A0CA0DC();
    sub_24A0C90D8(&qword_26975DDE0, MEMORY[0x263F8F520]);
    dispatch thunk of CustomStringConvertible.description.getter();
    sub_24A08F2BC();
    uint64_t v40 = v39();
    v27[3] = sub_24A0CA024(v40, v41, &a16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_24A08B000, v31, v32, "start processing %s with priority %s", v33, 0x16u);
    sub_24A0C97F4();
    sub_24A0C912C();
    sub_24A0C912C();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  swift_task_alloc();
  sub_24A0C9DAC();
  v27[15] = v42;
  *uint64_t v42 = v43;
  v42[1] = sub_24A0C0B24;
  sub_24A0C9B9C();
  return AssetManager.process(requests:)();
}

uint64_t sub_24A0C0B24()
{
  sub_24A0B3914();
  sub_24A0B38DC();
  sub_24A0C9188();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_24A0B394C();
  *uint64_t v5 = v4;
  *(void *)(v6 + 128) = v0;
  swift_task_dealloc();
  sub_24A0C9144();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

uint64_t sub_24A0C0C00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_24A0C933C();
  sub_24A0C9640();
  uint64_t v13 = v12[12];
  uint64_t v14 = v12[10];
  uint64_t v15 = v12[7];
  uint64_t v16 = v12[6];
  sub_24A0CA1E0();
  sub_24A0C9454();
  v17();
  type metadata accessor for AssetsDownloadCoordinator();
  sub_24A0CA190();
  uint64_t v18 = sub_24A09C300(v14);
  _s10CloudAsset21UploadResponseMessageOwst_0(v15, 1, 1, v13);
  uint64_t v19 = (void *)swift_allocObject();
  void v19[2] = 0;
  v19[3] = 0;
  v19[4] = v18;
  v19[5] = v16;
  swift_retain();
  sub_24A0BCB44(v15, (uint64_t)&unk_26975DEA8, (uint64_t)v19);
  swift_release();
  sub_24A0C9304();
  v20();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A0C986C();
  sub_24A0C92E8();
  return v23(v21, v22, v23, v24, v25, v26, v27, v28, a9, a10, a11, a12);
}

uint64_t sub_24A0C0D34()
{
  sub_24A0B3940();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A0B3920();
  return v0();
}

uint64_t sub_24A0C0DB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v40 = a5;
  uint64_t v41 = a6;
  uint64_t v36 = a3;
  uint64_t v37 = a4;
  uint64_t v35 = a2;
  uint64_t v38 = a1;
  uint64_t v46 = sub_24A08DF34(&qword_26975DEF0);
  uint64_t v43 = *(void *)(v46 - 8);
  uint64_t v39 = *(void *)(v43 + 64);
  MEMORY[0x270FA5388](v46);
  uint64_t v45 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = sub_24A08DF34(&qword_26975D6A8);
  uint64_t v7 = *(void *)(v44 - 8);
  uint64_t v34 = *(void *)(v7 + 64);
  MEMORY[0x270FA5388](v44);
  uint64_t v42 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_24A08DF34(&qword_26975DE68);
  uint64_t v31 = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  MEMORY[0x270FA5388](v9);
  os_log_type_t v32 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_24A08DF34(&qword_26975DDD0);
  uint64_t v30 = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_24A08DF34(&qword_26975DE98);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = v18;
  uint64_t v19 = type metadata accessor for TaskPriority();
  _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)v18, 1, 1, v19);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v35, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v36, v9);
  uint64_t v29 = v7;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v42, v37, v44);
  uint64_t v20 = v43;
  (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v45, v38, v46);
  unint64_t v21 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v22 = (v14 + *(unsigned __int8 *)(v10 + 80) + v21) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v23 = (v11 + *(unsigned __int8 *)(v7 + 80) + v22) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v24 = (v34 + *(unsigned __int8 *)(v20 + 80) + v23) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  unint64_t v25 = (v39 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = 0;
  *(void *)(v26 + 24) = 0;
  (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v26 + v21, v15, v30);
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v26 + v22, v32, v31);
  (*(void (**)(unint64_t, char *, uint64_t))(v29 + 32))(v26 + v23, v42, v44);
  (*(void (**)(unint64_t, char *, uint64_t))(v43 + 32))(v26 + v24, v45, v46);
  uint64_t v27 = v41;
  *(void *)(v26 + v25) = v40;
  *(void *)(v26 + ((v25 + 15) & 0xFFFFFFFFFFFFFFF8)) = v27;
  swift_bridgeObjectRetain();
  sub_24A0D17A4((uint64_t)v33, (uint64_t)&unk_26975DF00, v26);
  return swift_release();
}

uint64_t sub_24A0C1228(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[19] = a7;
  v8[20] = a8;
  v8[17] = a5;
  v8[18] = a6;
  v8[16] = a4;
  uint64_t v9 = sub_24A08DF34(&qword_26975D698);
  v8[21] = v9;
  v8[22] = *(void *)(v9 - 8);
  v8[23] = swift_task_alloc();
  uint64_t v10 = sub_24A08DF34(&qword_26975DF08);
  v8[24] = v10;
  v8[25] = *(void *)(v10 - 8);
  v8[26] = swift_task_alloc();
  v8[27] = sub_24A08DF34(&qword_26975DE78);
  v8[28] = swift_task_alloc();
  v8[29] = swift_task_alloc();
  v8[30] = swift_task_alloc();
  v8[31] = type metadata accessor for UploadResponseMessage();
  v8[32] = swift_task_alloc();
  sub_24A08DF34(&qword_26975DF10);
  v8[33] = swift_task_alloc();
  uint64_t v11 = sub_24A08DF34(&qword_26975DF18);
  v8[34] = v11;
  v8[35] = *(void *)(v11 - 8);
  v8[36] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_24A0C1468, 0, 0);
}

uint64_t sub_24A0C1468()
{
  sub_24A0B3940();
  uint64_t v1 = sub_24A08DF34(&qword_26975DDD0);
  MEMORY[0x24C5BB210](v1);
  *(unsigned char *)(v0 + 304) = 0;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 296) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_24A0C152C;
  sub_24A0C91A4();
  return MEMORY[0x270FA20F8](v3, v4, v5, v6, v7);
}

uint64_t sub_24A0C152C()
{
  sub_24A0B3914();
  sub_24A0B38DC();
  uint64_t v1 = *v0;
  sub_24A0B394C();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_24A0C9144();
  return MEMORY[0x270FA2498](v3, v4, v5);
}

uint64_t sub_24A0C1608(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_24A0C9200();
  a23 = v25;
  a24 = v26;
  sub_24A0C9538();
  a22 = v24;
  uint64_t v27 = *(void *)(v24 + 264);
  sub_24A0AAE14(v27, 1, *(void *)(v24 + 248));
  if (v28)
  {
    char v29 = *(unsigned char *)(v24 + 304);
    sub_24A09C038();
    v30();
    if ((v29 & 1) == 0)
    {
      if (qword_26975D318 != -1) {
        swift_once();
      }
      uint64_t v31 = type metadata accessor for Logger();
      sub_24A0A800C(v31, (uint64_t)qword_26975DD88);
      swift_bridgeObjectRetain_n();
      os_log_type_t v32 = (void *)Logger.logObject.getter();
      os_log_type_t v33 = static os_log_type_t.error.getter();
      if (sub_24A0C98AC(v33))
      {
        a11 = v24 + 88;
        a12 = v24 + 64;
        uint64_t v34 = (_DWORD *)sub_24A0C93C0();
        a13 = sub_24A0C9298();
        *uint64_t v34 = 136315138;
        a10 = v34 + 1;
        uint64_t v35 = type metadata accessor for AssetUploadRequest();
        uint64_t v36 = swift_bridgeObjectRetain();
        uint64_t v37 = MEMORY[0x24C5BB120](v36, v35);
        unint64_t v39 = v38;
        swift_bridgeObjectRelease();
        *(void *)(v24 + 88) = sub_24A0C6240(v37, v39, &a13);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        sub_24A0C9910(&dword_24A08B000, v40, v41, "ephemeral asset not received for request %s");
        sub_24A0C9834();
        sub_24A0C912C();
        sub_24A0C912C();
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      sub_24A090E10();
      *(void *)(v24 + 64) = sub_24A0C9258();
      sub_24A08DF34(&qword_26975DEF0);
      CheckedContinuation.resume(throwing:)();
    }
    *(void *)(v24 + 72) = 0;
    sub_24A08DF34(&qword_26975D6A8);
    AsyncThrowingStream.Continuation.finish(throwing:)();
    *(void *)(v24 + 80) = 0;
    sub_24A08DF34(&qword_26975DE68);
    AsyncThrowingStream.Continuation.finish(throwing:)();
    sub_24A0C99D8();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_24A0B3920();
    sub_24A0C916C();
    return v44(v43, v44, v45, v46, v47, v48, v49, v50, a9, a10, a11, a12, a13, a14, a15, a16);
  }
  else
  {
    sub_24A0C7DC8(v27, *(void *)(v24 + 256));
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 1:
        uint64_t v52 = *(void *)(v24 + 232);
        uint64_t v53 = *(void *)(v24 + 240);
        sub_24A0C7400(*(void *)(v24 + 256), v53, &qword_26975DE78);
        sub_24A093BE0(v53, v52, &qword_26975DE78);
        sub_24A08DF34(&qword_26975DE68);
        AsyncThrowingStream.Continuation.yield(_:)();
        sub_24A0C93B4();
        v54();
        if (qword_26975D318 != -1) {
          swift_once();
        }
        uint64_t v55 = type metadata accessor for Logger();
        sub_24A0A800C(v55, (uint64_t)qword_26975DD88);
        uint64_t v56 = sub_24A0C9634();
        sub_24A093BE0(v56, v57, v58);
        uint64_t v59 = Logger.logObject.getter();
        os_log_type_t v60 = static os_log_type_t.default.getter();
        BOOL v61 = sub_24A0C9BB8(v60);
        uint64_t v62 = *(void *)(v24 + 240);
        if (v61)
        {
          uint64_t v64 = *(void *)(v24 + 224);
          uint64_t v63 = *(void *)(v24 + 232);
          uint64_t v65 = sub_24A0C93C0();
          a13 = sub_24A0C9298();
          *(_DWORD *)uint64_t v65 = 136315138;
          sub_24A093BE0(v64, v63, &qword_26975DE78);
          uint64_t v66 = String.init<A>(describing:)();
          *(void *)(v65 + 4) = sub_24A0C6240(v66, v67, &a13);
          swift_bridgeObjectRelease();
          sub_24A0C8A04(v64, &qword_26975DE78);
          sub_24A0C95C8(&dword_24A08B000, v59, v68, "get result for persisting an asset %s");
          sub_24A0C9834();
          sub_24A0C912C();
          sub_24A0C912C();
        }
        else
        {
          uint64_t v83 = *(void *)(v24 + 224);

          sub_24A0C8A04(v83, &qword_26975DE78);
        }
        sub_24A0C8A04(v62, &qword_26975DE78);
        break;
      case 2:
        uint64_t v69 = *(uint64_t **)(v24 + 256);
        uint64_t v70 = *v69;
        *(void *)(v24 + 112) = *v69;
        swift_bridgeObjectRetain();
        sub_24A08DF34(&qword_26975D6A8);
        AsyncThrowingStream.Continuation.yield(_:)();
        sub_24A09BFBC();
        v71();
        if (qword_26975D318 != -1) {
          swift_once();
        }
        uint64_t v72 = type metadata accessor for Logger();
        sub_24A0A800C(v72, (uint64_t)qword_26975DD88);
        swift_bridgeObjectRetain();
        uint64_t v73 = (void *)Logger.logObject.getter();
        os_log_type_t v74 = static os_log_type_t.default.getter();
        if (sub_24A0C98AC(v74))
        {
          uint64_t v75 = sub_24A0C93C0();
          a13 = sub_24A0C9298();
          *(_DWORD *)uint64_t v75 = 136315138;
          *(void *)(v24 + 120) = v70;
          swift_bridgeObjectRetain();
          uint64_t v76 = String.init<A>(describing:)();
          *(void *)(v75 + 4) = sub_24A0C6240(v76, v77, &a13);
          swift_bridgeObjectRelease();
          sub_24A0C9AF0();
          sub_24A0C9910(&dword_24A08B000, v78, v79, "get signal for an ephemeral asset %s");
          sub_24A0C9834();
          sub_24A0C912C();
          sub_24A0C912C();
        }
        else
        {
          sub_24A0C9AF0();
        }

        break;
      case 3:
        uint64_t v80 = **(void **)(v24 + 256);
        sub_24A0B4444();
        uint64_t v81 = sub_24A0C9258();
        *uint64_t v82 = v80;
        *(void *)(v24 + 96) = v81;
        sub_24A08DF34(&qword_26975DE68);
        AsyncThrowingStream.Continuation.finish(throwing:)();
        break;
      default:
        *(void *)(v24 + 104) = **(void **)(v24 + 256);
        sub_24A08DF34(&qword_26975DEF0);
        CheckedContinuation.resume(returning:)();
        *(unsigned char *)(v24 + 304) = 1;
        break;
    }
    uint64_t v84 = (void *)swift_task_alloc();
    *(void *)(v24 + 296) = v84;
    *uint64_t v84 = v24;
    v84[1] = sub_24A0C152C;
    sub_24A0C91A4();
    sub_24A0C916C();
    return MEMORY[0x270FA20F8](v85, v86, v87, v88, v89);
  }
}

uint64_t sub_24A0C1D24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_24A0C9200();
  a23 = v26;
  a24 = v27;
  sub_24A0C9538();
  a22 = v24;
  char v28 = *(unsigned char *)(v24 + 304);
  sub_24A09C038();
  v29();
  uint64_t v30 = *(void *)(v24 + 16);
  if ((v28 & 1) == 0)
  {
    if (qword_26975D318 != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    sub_24A0A800C(v31, (uint64_t)qword_26975DD88);
    swift_bridgeObjectRetain();
    MEMORY[0x24C5BB8B0](v30);
    swift_bridgeObjectRetain();
    MEMORY[0x24C5BB8B0](v30);
    os_log_type_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (sub_24A0C98AC(v33))
    {
      a12 = v24 + 24;
      a9 = v24 + 48;
      a10 = v24 + 56;
      uint64_t v34 = sub_24A0C9324();
      uint64_t v35 = (void *)sub_24A0C93F0();
      a11 = sub_24A0C9298();
      a13 = a11;
      *(_DWORD *)uint64_t v34 = 138412546;
      MEMORY[0x24C5BB8B0](v30);
      uint64_t v36 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v24 + 48) = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v35 = v36;
      MEMORY[0x24C5BB8A0](v30);
      MEMORY[0x24C5BB8A0](v30);
      *(_WORD *)(v34 + 12) = 2080;
      uint64_t v37 = type metadata accessor for AssetUploadRequest();
      uint64_t v38 = swift_bridgeObjectRetain();
      uint64_t v39 = MEMORY[0x24C5BB120](v38, v37);
      unint64_t v41 = v40;
      swift_bridgeObjectRelease();
      *(void *)(v24 + 56) = sub_24A0C6240(v39, v41, &a13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      sub_24A0C964C(&dword_24A08B000, v32, v25, "ephemeral asset not received due to error %@ for request %s");
      sub_24A08DF34(&qword_26975DF20);
      swift_arrayDestroy();
      sub_24A0C912C();
      swift_arrayDestroy();
      sub_24A0C912C();
      sub_24A0C912C();
    }
    else
    {
      MEMORY[0x24C5BB8A0](v30);
      MEMORY[0x24C5BB8A0](v30);
      swift_bridgeObjectRelease_n();
    }

    *(void *)(v24 + 24) = v30;
    MEMORY[0x24C5BB8B0](v30);
    sub_24A08DF34(&qword_26975DEF0);
    CheckedContinuation.resume(throwing:)();
  }
  *(void *)(v24 + 32) = v30;
  MEMORY[0x24C5BB8B0](v30);
  sub_24A08DF34(&qword_26975D6A8);
  AsyncThrowingStream.Continuation.finish(throwing:)();
  *(void *)(v24 + 40) = v30;
  sub_24A08DF34(&qword_26975DE68);
  AsyncThrowingStream.Continuation.finish(throwing:)();
  sub_24A0C99D8();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A0B3920();
  sub_24A0C916C();
  return v43(v42, v43, v44, v45, v46, v47, v48, v49, a9, a10, a11, a12, a13, a14, a15, a16);
}

uint64_t sub_24A0C2060(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[5] = a4;
  uint64_t v5 = sub_24A08DF34(&qword_26975DEB8);
  v4[6] = v5;
  v4[7] = *(void *)(v5 - 8);
  uint64_t v6 = swift_task_alloc();
  uint64_t v7 = OBJC_IVAR____TtC10CloudAsset25AssetsDownloadCoordinator__signals;
  v4[8] = v6;
  v4[9] = v7;
  return MEMORY[0x270FA2498](sub_24A0C212C, 0, 0);
}

uint64_t sub_24A0C212C()
{
  sub_24A0B3940();
  uint64_t v1 = sub_24A08DF34(&qword_26975D580);
  MEMORY[0x24C5BB210](v1);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_24A0C21EC;
  uint64_t v3 = sub_24A0C9760();
  return MEMORY[0x270FA20F8](v3, v4, v5, v6, v7);
}

uint64_t sub_24A0C21EC()
{
  sub_24A0B3914();
  sub_24A0B38DC();
  uint64_t v1 = *v0;
  sub_24A0B394C();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_24A0C9144();
  return MEMORY[0x270FA2498](v3, v4, v5);
}

uint64_t sub_24A0C22C8()
{
  sub_24A0C9A44();
  unint64_t v22 = v0;
  uint64_t v1 = v0[2];
  if (!v1)
  {
    sub_24A09C038();
    v10();
    swift_task_dealloc();
    sub_24A0C9194();
    sub_24A0C9C30();
    __asm { BRAA            X1, X16 }
  }
  if (qword_26975D318 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_24A0A800C(v2, (uint64_t)qword_26975DD88);
  swift_bridgeObjectRetain();
  uint64_t v3 = (void *)Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (sub_24A0C98AC(v4))
  {
    uint64_t v5 = sub_24A0C93C0();
    uint64_t v21 = sub_24A0C9298();
    *(_DWORD *)uint64_t v5 = 136315138;
    v0[4] = v1;
    swift_bridgeObjectRetain();
    uint64_t v6 = String.init<A>(describing:)();
    *(void *)(v5 + 4) = sub_24A0C6240(v6, v7, &v21);
    swift_bridgeObjectRelease();
    sub_24A0C9AF0();
    sub_24A0C9910(&dword_24A08B000, v8, v9, "received signal %s");
    sub_24A0C9834();
    sub_24A0C912C();
    sub_24A0C912C();
  }
  else
  {
    sub_24A0C9AF0();
  }

  uint64_t v13 = (void *)swift_task_alloc();
  v0[10] = v13;
  void *v13 = v0;
  v13[1] = sub_24A0C21EC;
  sub_24A0C9760();
  sub_24A0C9C30();
  return MEMORY[0x270FA20F8](v14, v15, v16, v17, v18);
}

uint64_t sub_24A0C24C4()
{
  sub_24A0B3914();
  sub_24A09C038();
  v0();
  swift_task_dealloc();
  sub_24A0B3920();
  return v1();
}

uint64_t AssetManager.deinit()
{
  sub_24A08E050(v0 + 16);
  return v0;
}

uint64_t AssetManager.__deallocating_deinit()
{
  sub_24A08E050(v0 + 16);
  return MEMORY[0x270FA0228](v0, 56, 7);
}

void sub_24A0C2590()
{
  sub_24A0AAFDC();
  uint64_t v24 = v0;
  uint64_t v25 = v1;
  uint64_t v23 = v2;
  v21[1] = v3;
  uint64_t v26 = sub_24A08DF34(v4);
  sub_24A08F24C();
  uint64_t v6 = v5;
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x270FA5388](v9);
  v21[0] = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UUID();
  sub_24A08F24C();
  uint64_t v11 = v10;
  uint64_t v13 = MEMORY[0x270FA5388](v12);
  MEMORY[0x270FA5388](v13);
  uint64_t v22 = (uint64_t)v21 - v14;
  uint64_t v15 = *(void (**)(void))(v11 + 16);
  sub_24A0CA09C();
  v15();
  sub_24A0C9454();
  v16();
  sub_24A0CA09C();
  v15();
  unint64_t v17 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v18 = swift_allocObject();
  (*(void (**)(unint64_t, void, uint64_t))(v6 + 32))(v18 + v17, v21[0], v26);
  *(void *)(v18 + ((v8 + v17 + 7) & 0xFFFFFFFFFFFFFFF8)) = v24;
  sub_24A0CA0C4();
  v19();
  swift_beginAccess();
  swift_retain();
  sub_24A0D62CC(v25, v18, v22);
  sub_24A09BFBC();
  v20();
  swift_endAccess();
  sub_24A0AB030();
}

uint64_t sub_24A0C27A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for UploadResponseMessage();
  MEMORY[0x270FA5388](v6);
  uint64_t v7 = sub_24A08DF34(&qword_26975E040);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (uint64_t *)(a1 + *(int *)(type metadata accessor for XPCAsyncSequenceResponse() + 20));
  unint64_t v12 = v11[1];
  if (v12 >> 60 == 11)
  {
    sub_24A0C87B4();
    uint64_t v13 = swift_allocError();
    *uint64_t v14 = 1;
    uint64_t v19 = v13;
  }
  else
  {
    if (v12 >> 60 != 15)
    {
      v18[1] = a4;
      uint64_t v17 = *v11;
      type metadata accessor for JSONDecoder();
      swift_allocObject();
      sub_24A08DE84(v17, v12);
      JSONDecoder.init()();
      sub_24A0C90D8(&qword_26975E048, (void (*)(uint64_t))type metadata accessor for UploadResponseMessage);
      dispatch thunk of JSONDecoder.decode<A>(_:from:)();
      swift_release();
      sub_24A08DF34(&qword_26975E018);
      AsyncThrowingStream.Continuation.yield(_:)();
      sub_24A0C8810(v17, v12);
      return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    }
    uint64_t v19 = 0;
  }
  sub_24A08DF34(&qword_26975E018);
  AsyncThrowingStream.Continuation.finish(throwing:)();
  swift_beginAccess();
  uint64_t v15 = sub_24A0D6158(a4);
  uint64_t result = swift_endAccess();
  if (v15) {
    return sub_24A0C8800(v15);
  }
  return result;
}

uint64_t sub_24A0C2AD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for DownloadResponseMessage();
  MEMORY[0x270FA5388](v6);
  uint64_t v7 = sub_24A08DF34(&qword_26975DFD0);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (uint64_t *)(a1 + *(int *)(type metadata accessor for XPCAsyncSequenceResponse() + 20));
  unint64_t v12 = v11[1];
  if (v12 >> 60 == 11)
  {
    sub_24A0C87B4();
    uint64_t v13 = swift_allocError();
    *uint64_t v14 = 1;
    uint64_t v19 = v13;
  }
  else
  {
    if (v12 >> 60 != 15)
    {
      v18[1] = a4;
      uint64_t v17 = *v11;
      type metadata accessor for JSONDecoder();
      swift_allocObject();
      sub_24A08DE84(v17, v12);
      JSONDecoder.init()();
      sub_24A0C90D8(&qword_26975DFE0, (void (*)(uint64_t))type metadata accessor for DownloadResponseMessage);
      dispatch thunk of JSONDecoder.decode<A>(_:from:)();
      swift_release();
      sub_24A08DF34(&qword_26975DF90);
      AsyncThrowingStream.Continuation.yield(_:)();
      sub_24A0C8810(v17, v12);
      return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    }
    uint64_t v19 = 0;
  }
  sub_24A08DF34(&qword_26975DF90);
  AsyncThrowingStream.Continuation.finish(throwing:)();
  swift_beginAccess();
  uint64_t v15 = sub_24A0D6158(a4);
  uint64_t result = swift_endAccess();
  if (v15) {
    return sub_24A0C8800(v15);
  }
  return result;
}

uint64_t sub_24A0C2DF8(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_24A0C2E10(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 40) = a2;
  *(void *)(v4 + 48) = v3;
  *(unsigned char *)(v4 + 25) = a3;
  *(void *)(v4 + 32) = a1;
  *(void *)(v4 + 56) = *v3;
  sub_24A08DF34(&qword_26975DE98);
  *(void *)(v4 + 64) = swift_task_alloc();
  uint64_t v5 = sub_24A08DF34(&qword_26975E010);
  *(void *)(v4 + 72) = v5;
  *(void *)(v4 + 80) = *(void *)(v5 - 8);
  *(void *)(v4 + 88) = swift_task_alloc();
  uint64_t v6 = sub_24A08DF34(&qword_26975E018);
  *(void *)(v4 + 96) = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  *(void *)(v4 + 104) = v7;
  *(void *)(v4 + 112) = *(void *)(v7 + 64);
  *(void *)(v4 + 120) = swift_task_alloc();
  *(void *)(v4 + 128) = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_24A0C2FAC, 0, 0);
}

uint64_t sub_24A0C2FAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_24A0C9358();
  sub_24A0C9AE4();
  uint64_t v23 = *(void *)(v22 + 128);
  uint64_t v24 = *(void *)(v22 + 104);
  uint64_t v25 = *(void *)(v22 + 88);
  uint64_t v51 = *(void *)(v22 + 120);
  uint64_t v27 = *(void *)(v22 + 72);
  uint64_t v26 = *(void *)(v22 + 80);
  uint64_t v28 = *(void *)(v22 + 64);
  uint64_t v50 = *(void *)(v22 + 56);
  uint64_t v48 = *(void *)(v22 + 112);
  uint64_t v49 = *(void *)(v22 + 48);
  HIDWORD(a12) = *(unsigned __int8 *)(v22 + 25);
  uint64_t v46 = *(void *)(v22 + 96);
  uint64_t v47 = *(void *)(v22 + 40);
  type metadata accessor for UploadResponseMessage();
  sub_24A0CA0D0();
  v29();
  static AsyncThrowingStream.makeStream<>(of:throwing:bufferingPolicy:)();
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
  uint64_t v30 = type metadata accessor for TaskPriority();
  sub_24A0CA108(v28, v31, v32, v30);
  sub_24A0C9454();
  v33();
  *(void *)(v22 + 16) = v47;
  *(unsigned char *)(v22 + 24) = BYTE4(a12) & 1;
  unint64_t v34 = (*(unsigned __int8 *)(v24 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
  uint64_t v35 = (void *)swift_allocObject();
  v35[2] = 0;
  v35[3] = 0;
  v35[4] = v49;
  sub_24A0CA0C4();
  v36();
  sub_24A0C8D88(v22 + 16, (uint64_t)v35 + ((v34 + v48 + 7) & 0xFFFFFFFFFFFFFFF8));
  *(void *)((char *)v35 + ((v34 + v48 + 23) & 0xFFFFFFFFFFFFFFF8)) = v50;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_24A0BCB44(v28, (uint64_t)&unk_26975E028, (uint64_t)v35);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v46);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A0C9194();
  sub_24A0C91E4();
  return v38(v37, v38, v39, v40, v41, v42, v43, v44, a9, v46, v47, a12, v28, v23, v48, v49, v50, v25, v51,
           a20,
           a21,
           a22);
}

uint64_t sub_24A0C31E0(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 40) = a2;
  *(void *)(v4 + 48) = v3;
  *(unsigned char *)(v4 + 25) = a3;
  *(void *)(v4 + 32) = a1;
  *(void *)(v4 + 56) = *v3;
  sub_24A08DF34(&qword_26975DE98);
  *(void *)(v4 + 64) = swift_task_alloc();
  uint64_t v5 = sub_24A08DF34(&qword_26975DF88);
  *(void *)(v4 + 72) = v5;
  *(void *)(v4 + 80) = *(void *)(v5 - 8);
  *(void *)(v4 + 88) = swift_task_alloc();
  uint64_t v6 = sub_24A08DF34(&qword_26975DF90);
  *(void *)(v4 + 96) = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  *(void *)(v4 + 104) = v7;
  *(void *)(v4 + 112) = *(void *)(v7 + 64);
  *(void *)(v4 + 120) = swift_task_alloc();
  *(void *)(v4 + 128) = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_24A0C337C, 0, 0);
}

uint64_t sub_24A0C337C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_24A0C9358();
  sub_24A0C9AE4();
  uint64_t v23 = *(void *)(v22 + 128);
  uint64_t v24 = *(void *)(v22 + 104);
  uint64_t v25 = *(void *)(v22 + 64);
  uint64_t v47 = *(void *)(v22 + 96);
  uint64_t v48 = v25;
  uint64_t v52 = *(void *)(v22 + 56);
  uint64_t v53 = *(void *)(v22 + 88);
  uint64_t v49 = *(void *)(v22 + 112);
  uint64_t v51 = *(void *)(v22 + 48);
  HIDWORD(a12) = *(unsigned char *)(v22 + 25) & 1;
  uint64_t v45 = *(void *)(v22 + 120);
  uint64_t v46 = *(void *)(v22 + 40);
  type metadata accessor for DownloadResponseMessage();
  sub_24A0CA0D0();
  v26();
  static AsyncThrowingStream.makeStream<>(of:throwing:bufferingPolicy:)();
  sub_24A0C93B4();
  v27();
  uint64_t v28 = type metadata accessor for TaskPriority();
  sub_24A0CA108(v25, v29, v30, v28);
  sub_24A0C9454();
  v31();
  *(void *)(v22 + 16) = v46;
  *(unsigned char *)(v22 + 24) = BYTE4(a12);
  uint64_t v32 = ((*(unsigned __int8 *)(v24 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80)) + v49;
  unint64_t v50 = (v32 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v33 = (v32 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v34 = (void *)swift_allocObject();
  v34[2] = 0;
  v34[3] = 0;
  v34[4] = v51;
  sub_24A0CA0C4();
  v35();
  sub_24A0C85C0(v22 + 16, (uint64_t)v34 + v50);
  *(void *)((char *)v34 + v33) = v52;
  j__swift_bridgeObjectRetain(v46, HIDWORD(a12));
  swift_retain();
  sub_24A0BCB44(v48, (uint64_t)&unk_26975DFA0, (uint64_t)v34);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v47);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A0C9194();
  sub_24A0C91E4();
  return v37(v36, v37, v38, v39, v40, v41, v42, v43, a9, v45, v46, a12, v47, v48, v23, v50, v51, v52, v53,
           a20,
           a21,
           a22);
}

uint64_t sub_24A0C35B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  *(void *)(v7 + 96) = a4;
  *(void *)(v7 + 104) = a5;
  uint64_t v10 = type metadata accessor for XPCRichError();
  *(void *)(v7 + 112) = v10;
  *(void *)(v7 + 120) = *(void *)(v10 - 8);
  *(void *)(v7 + 128) = swift_task_alloc();
  *(void *)(v7 + 136) = swift_task_alloc();
  *(void *)(v7 + 144) = swift_task_alloc();
  *(void *)(v7 + 152) = type metadata accessor for XPCAsyncSequenceRequest();
  *(void *)(v7 + 160) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for UUID();
  *(void *)(v7 + 168) = v11;
  *(void *)(v7 + 176) = *(void *)(v11 - 8);
  *(void *)(v7 + 184) = swift_task_alloc();
  *(void *)(v7 + 192) = swift_task_alloc();
  *(void *)(v7 + 200) = swift_task_alloc();
  *(void *)(v7 + 208) = swift_task_alloc();
  *(void *)(v7 + 216) = swift_task_alloc();
  *(void *)(v7 + 16) = a6;
  *(unsigned char *)(v7 + 24) = a7 & 1;
  return MEMORY[0x270FA2498](sub_24A0C376C, 0, 0);
}

uint64_t sub_24A0C376C()
{
  sub_24A0B3914();
  uint64_t v1 = *(void *)(v0 + 96);
  UUID.init()();
  uint64_t v2 = *(void *)(v1 + 56);
  *(void *)(v0 + 224) = v2;
  return MEMORY[0x270FA2498](sub_24A0C37D8, v2, 0);
}

uint64_t sub_24A0C37D8()
{
  sub_24A0B3914();
  sub_24A0C2590();
  sub_24A0C9144();
  return MEMORY[0x270FA2498](v0, v1, v2);
}

uint64_t sub_24A0C3860()
{
  sub_24A0B3914();
  uint64_t v1 = sub_24A08DF78((void *)(*(void *)(v0 + 96) + 16), *(void *)(*(void *)(v0 + 96) + 40));
  *(void *)(v0 + 232) = v1;
  uint64_t v2 = *v1;
  return MEMORY[0x270FA2498](sub_24A0C38D0, v2, 0);
}

uint64_t sub_24A0C38D0()
{
  sub_24A0B3940();
  *(void *)(v0 + 240) = sub_24A0DC454();
  *(void *)(v0 + 248) = 0;
  sub_24A0C9144();
  return MEMORY[0x270FA2498](v1, v2, v3);
}

#error "24A0C3DC8: call analysis failed (funcsize=426)"

#error "24A0C43DC: call analysis failed (funcsize=361)"

uint64_t sub_24A0C463C()
{
  sub_24A0B3914();
  sub_24A0DC378();
  sub_24A0C9144();
  return MEMORY[0x270FA2498](v0, v1, v2);
}

uint64_t sub_24A0C46A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24)
{
  sub_24A0C9200();
  a23 = v27;
  a24 = v28;
  sub_24A0C9538();
  a22 = v24;
  uint64_t v29 = sub_24A0C9E20();
  v30(v29);
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v31, v32))
  {
    a11 = v24[22];
    a12 = v24[38];
    uint64_t v25 = v24[21];
    uint64_t v26 = 12;
    sub_24A0C93C0();
    a13 = sub_24A0C9298();
    sub_24A0C9BEC(4.8149e-34);
    sub_24A0C90D8(&qword_26975DFB0, MEMORY[0x263F07508]);
    uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v35 = sub_24A0C6240(v33, v34, &a13);
    sub_24A0C9A1C(v35);
    swift_bridgeObjectRelease();
    sub_24A09C038();
    v36();
    sub_24A0C95C8(&dword_24A08B000, v31, v37, "[message id = %s] evict xpc session from cache as it is no longer usable");
    sub_24A0C95E4();
    sub_24A0C912C();
    sub_24A0C912C();
  }
  else
  {
    uint64_t v38 = sub_24A0C9E08();
    v39(v38);
  }

  sub_24A0C94A0();
  sub_24A0C90D8(&qword_26975DFB8, MEMORY[0x263F8F408]);
  uint64_t v40 = sub_24A0C9258();
  uint64_t v42 = sub_24A0C9310(v40, v41);
  ((void (*)(uint64_t))v26)(v42);
  v24[8] = v25;
  sub_24A08DF34(&qword_26975E018);
  AsyncThrowingStream.Continuation.finish(throwing:)();
  sub_24A09C038();
  v43();
  sub_24A09C038();
  v44();
  MEMORY[0x24C5BB8A0](v24[4]);
  sub_24A0C921C();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A0C9194();
  sub_24A0C916C();
  return v46(v45, v46, v47, v48, v49, v50, v51, v52, a9, a10, a11, a12, a13, a14, a15, a16);
}

uint64_t sub_24A0C48F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  *(void *)(v7 + 96) = a4;
  *(void *)(v7 + 104) = a5;
  uint64_t v10 = type metadata accessor for XPCRichError();
  *(void *)(v7 + 112) = v10;
  *(void *)(v7 + 120) = *(void *)(v10 - 8);
  *(void *)(v7 + 128) = swift_task_alloc();
  *(void *)(v7 + 136) = swift_task_alloc();
  *(void *)(v7 + 144) = swift_task_alloc();
  *(void *)(v7 + 152) = type metadata accessor for XPCAsyncSequenceRequest();
  *(void *)(v7 + 160) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for UUID();
  *(void *)(v7 + 168) = v11;
  *(void *)(v7 + 176) = *(void *)(v11 - 8);
  *(void *)(v7 + 184) = swift_task_alloc();
  *(void *)(v7 + 192) = swift_task_alloc();
  *(void *)(v7 + 200) = swift_task_alloc();
  *(void *)(v7 + 208) = swift_task_alloc();
  *(void *)(v7 + 216) = swift_task_alloc();
  *(void *)(v7 + 16) = a6;
  *(unsigned char *)(v7 + 24) = a7 & 1;
  return MEMORY[0x270FA2498](sub_24A0C4AA8, 0, 0);
}

uint64_t sub_24A0C4AA8()
{
  sub_24A0B3914();
  uint64_t v1 = *(void *)(v0 + 96);
  UUID.init()();
  uint64_t v2 = *(void *)(v1 + 56);
  *(void *)(v0 + 224) = v2;
  return MEMORY[0x270FA2498](sub_24A0C4B14, v2, 0);
}

uint64_t sub_24A0C4B14()
{
  sub_24A0B3914();
  sub_24A0C2590();
  sub_24A0C9144();
  return MEMORY[0x270FA2498](v0, v1, v2);
}

uint64_t sub_24A0C4B9C()
{
  sub_24A0B3914();
  uint64_t v1 = sub_24A08DF78((void *)(*(void *)(v0 + 96) + 16), *(void *)(*(void *)(v0 + 96) + 40));
  *(void *)(v0 + 232) = v1;
  uint64_t v2 = *v1;
  return MEMORY[0x270FA2498](sub_24A0C4C0C, v2, 0);
}

uint64_t sub_24A0C4C0C()
{
  sub_24A0B3940();
  *(void *)(v0 + 240) = sub_24A0DC454();
  *(void *)(v0 + 248) = 0;
  sub_24A0C9144();
  return MEMORY[0x270FA2498](v1, v2, v3);
}

#error "24A0C5104: call analysis failed (funcsize=426)"

#error "24A0C5718: call analysis failed (funcsize=361)"

uint64_t sub_24A0C5978()
{
  sub_24A0B3914();
  sub_24A0DC378();
  sub_24A0C9144();
  return MEMORY[0x270FA2498](v0, v1, v2);
}

uint64_t sub_24A0C59DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24)
{
  sub_24A0C9200();
  a23 = v27;
  a24 = v28;
  sub_24A0C9538();
  a22 = v24;
  uint64_t v29 = sub_24A0C9E20();
  v30(v29);
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v31, v32))
  {
    a11 = v24[22];
    a12 = v24[38];
    uint64_t v25 = v24[21];
    uint64_t v26 = 12;
    sub_24A0C93C0();
    a13 = sub_24A0C9298();
    sub_24A0C9BEC(4.8149e-34);
    sub_24A0C90D8(&qword_26975DFB0, MEMORY[0x263F07508]);
    uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v35 = sub_24A0C6240(v33, v34, &a13);
    sub_24A0C9A1C(v35);
    swift_bridgeObjectRelease();
    sub_24A09C038();
    v36();
    sub_24A0C95C8(&dword_24A08B000, v31, v37, "[message id = %s] evict xpc session from cache as it is no longer usable");
    sub_24A0C95E4();
    sub_24A0C912C();
    sub_24A0C912C();
  }
  else
  {
    uint64_t v38 = sub_24A0C9E08();
    v39(v38);
  }

  sub_24A0C94A0();
  sub_24A0C90D8(&qword_26975DFB8, MEMORY[0x263F8F408]);
  uint64_t v40 = sub_24A0C9258();
  uint64_t v42 = sub_24A0C9310(v40, v41);
  ((void (*)(uint64_t))v26)(v42);
  v24[8] = v25;
  sub_24A08DF34(&qword_26975DF90);
  AsyncThrowingStream.Continuation.finish(throwing:)();
  sub_24A09C038();
  v43();
  sub_24A09C038();
  v44();
  MEMORY[0x24C5BB8A0](v24[4]);
  sub_24A0C921C();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A0C9194();
  sub_24A0C916C();
  return v46(v45, v46, v47, v48, v49, v50, v51, v52, a9, a10, a11, a12, a13, a14, a15, a16);
}

char *sub_24A0C5C2C(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[16 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 16 * a2);
  }
  return __src;
}

uint64_t sub_24A0C5CC0(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    uint64_t v8 = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return MEMORY[0x270FA01D0](v8, v9, v10, v7);
  }
  if (a3 < a1
    || (uint64_t result = type metadata accessor for CloudAssets_Signal.Event(0),
        a1 + *(void *)(*(void *)(result - 8) + 72) * a2 <= a3))
  {
    uint64_t v11 = type metadata accessor for CloudAssets_Signal.Event(0);
    return MEMORY[0x270FA01D8](a3, a1, a2, v11);
  }
  else if (a3 != a1)
  {
    uint64_t v7 = result;
    uint64_t v8 = a3;
    unint64_t v9 = a1;
    uint64_t v10 = a2;
    return MEMORY[0x270FA01D0](v8, v9, v10, v7);
  }
  return result;
}

uint64_t sub_24A0C5DF0(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    uint64_t v8 = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return MEMORY[0x270FA01D0](v8, v9, v10, v7);
  }
  if (a3 < a1
    || (uint64_t result = sub_24A08DF34(&qword_26975DE30), a1 + *(void *)(*(void *)(result - 8) + 72) * a2 <= a3))
  {
    uint64_t v11 = sub_24A08DF34(&qword_26975DE30);
    return MEMORY[0x270FA01D8](a3, a1, a2, v11);
  }
  else if (a3 != a1)
  {
    uint64_t v7 = result;
    uint64_t v8 = a3;
    unint64_t v9 = a1;
    uint64_t v10 = a2;
    return MEMORY[0x270FA01D0](v8, v9, v10, v7);
  }
  return result;
}

void *sub_24A0C5F28(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0 || (&__dst[16 * a2] > __src ? (BOOL v3 = &__src[16 * a2] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, 16 * a2);
  }
  return result;
}

uint64_t sub_24A0C6004(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0
    || ((uint64_t v6 = type metadata accessor for CloudAssets_Signal.Event(0),
         uint64_t v7 = *(void *)(*(void *)(v6 - 8) + 72) * a2,
         unint64_t v8 = a3 + v7,
         unint64_t v9 = a1 + v7,
         v8 > a1)
      ? (BOOL v10 = v9 > a3)
      : (BOOL v10 = 0),
        v10))
  {
    uint64_t v12 = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v11 = v6;
    uint64_t v12 = a3;
    unint64_t v13 = a1;
    uint64_t v14 = a2;
  }
  return MEMORY[0x270FA01C8](v12, v13, v14, v11);
}

uint64_t sub_24A0C611C(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0
    || ((uint64_t v6 = sub_24A08DF34(&qword_26975DE30),
         uint64_t v7 = *(void *)(*(void *)(v6 - 8) + 72) * a2,
         unint64_t v8 = a3 + v7,
         unint64_t v9 = a1 + v7,
         v8 > a1)
      ? (BOOL v10 = v9 > a3)
      : (BOOL v10 = 0),
        v10))
  {
    uint64_t v12 = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v11 = v6;
    uint64_t v12 = a3;
    unint64_t v13 = a1;
    uint64_t v14 = a2;
  }
  return MEMORY[0x270FA01C8](v12, v13, v14, v11);
}

uint64_t sub_24A0C6238(uint64_t a1)
{
  return sub_24A0BBF3C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_24A0C6240(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  sub_24A0C9144();
  uint64_t v9 = sub_24A0C6310(v6, v7, v8, 1, a1, a2);
  uint64_t v10 = v15[0];
  if (v9)
  {
    uint64_t v11 = v9;
    uint64_t ObjectType = swift_getObjectType();
    v15[0] = v11;
    uint64_t v12 = *a3;
    if (*a3)
    {
      sub_24A0C8A54((uint64_t)v15, *a3);
      *a3 = v12 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x263F8DBE0];
    v15[0] = a1;
    v15[1] = a2;
    uint64_t v13 = *a3;
    if (*a3)
    {
      sub_24A0C8A54((uint64_t)v15, *a3);
      *a3 = v13 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_24A08E050((uint64_t)v15);
  return v10;
}

uint64_t sub_24A0C6310(void *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      sub_24A0C6468((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter();
      uint64_t result = 0;
      *a1 = __dst;
      return result;
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    uint64_t result = sub_24A0C6540(a5, a6);
    *a1 = v11;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    uint64_t v8 = _StringObject.sharedUTF8.getter();
    if (!v8)
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
  }
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

void *sub_24A0C6468(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000) != 0 || (&__dst[__n] > __src ? (BOOL v3 = &__src[__n] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, __n);
  }
  return result;
}

uint64_t sub_24A0C6540(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = sub_24A0C65D8(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = (uint64_t)sub_24A0C67B4(0, *(void *)(v2 + 16) + 1, 1, v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = (uint64_t)sub_24A0C67B4((char *)(v3 > 1), v4 + 1, 1, v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_24A0C65D8(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0)
  {
    Swift::Int v2 = String.UTF8View._foreignCount()();
    if (v2) {
      goto LABEL_6;
    }
    return MEMORY[0x263F8EE78];
  }
  if ((a2 & 0x2000000000000000) != 0) {
    Swift::Int v2 = HIBYTE(a2) & 0xF;
  }
  else {
    Swift::Int v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return MEMORY[0x263F8EE78];
  }
LABEL_6:
  unint64_t v3 = sub_24A0C674C(v2, 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    unint64_t v4 = v3;
    uint64_t v5 = _StringGuts.copyUTF8(into:)();
    if ((v6 & 1) != 0 || v5 != v2) {
      goto LABEL_14;
    }
    return (uint64_t)v4;
  }
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
LABEL_14:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_24A0C674C(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  sub_24A08DF34(&qword_26975DFF8);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

char *sub_24A0C67B4(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    int64_t v9 = *(void *)(a4 + 16);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_24A08DF34(&qword_26975DFF8);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = (char *)(a4 + 32);
  if (v5)
  {
    sub_24A0C6964(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_24A0C688C(v13, v8, v12);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_24A0C688C(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000) != 0 || (&__dst[__n] > __src ? (BOOL v3 = &__src[__n] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, __n);
  }
  return result;
}

char *sub_24A0C6964(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000) != 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

void sub_24A0C69F4()
{
}

char *sub_24A0C6A34(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_24A0C74A0(a1, a2, a3, *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

size_t sub_24A0C6A54(size_t a1, int64_t a2, char a3)
{
  size_t result = sub_24A0C7584(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

size_t sub_24A0C6A74(size_t a1, int64_t a2, char a3)
{
  size_t result = sub_24A0C7720(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_24A0C6A94(uint64_t a1)
{
  return sub_24A0BCD2C(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_24A0C6AA0(uint64_t a1)
{
  return sub_24A0C0DB8(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

void sub_24A0C6AB0()
{
}

uint64_t sub_24A0C6AF0()
{
  swift_unknownObjectRelease();
  swift_release();
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_24A0C6B30()
{
  sub_24A0C9DC8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_24A0B399C(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_24A0B35E4;
  sub_24A0C9600();
  return sub_24A0C2060(v3, v4, v5, v6);
}

uint64_t type metadata accessor for AssetManager()
{
  return self;
}

uint64_t method lookup function for AssetManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AssetManager);
}

uint64_t dispatch thunk of AssetManager.__allocating_init(serviceName:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

unsigned char *storeEnumTagSinglePayload for AssetManager.AssetError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *size_t result = a2;
        return result;
      case 2:
        *(_WORD *)size_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)size_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *size_t result = 0;
      break;
    case 2:
      *(_WORD *)size_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x24A0C6CC0);
    case 4:
      *(_DWORD *)size_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for AssetManager.AssetError()
{
  return &type metadata for AssetManager.AssetError;
}

unint64_t sub_24A0C6CFC()
{
  unint64_t result = qword_26975DEB0;
  if (!qword_26975DEB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975DEB0);
  }
  return result;
}

uint64_t sub_24A0C6D48()
{
  return sub_24A0C8834();
}

uint64_t sub_24A0C6D54()
{
  sub_24A0C9DC8();
  uint64_t v0 = sub_24A08DF34(&qword_26975DE70);
  sub_24A0B38FC(v0);
  uint64_t v1 = sub_24A08DF34(&qword_26975DEC0);
  sub_24A0C92D4(v1);
  sub_24A0C9A00();
  uint64_t v2 = swift_task_alloc();
  int v3 = (void *)sub_24A0C9DB8(v2);
  *int v3 = v4;
  v3[1] = sub_24A0B35E4;
  sub_24A0C9600();
  return sub_24A0B9114(v5, v6, v7, v8, v9);
}

uint64_t sub_24A0C6E40()
{
  sub_24A08DF34(&qword_26975DDD0);
  sub_24A08F24C();
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  sub_24A08DF34(&qword_26975DE68);
  sub_24A08F24C();
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  sub_24A08DF34(&qword_26975D6A8);
  sub_24A08F24C();
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  sub_24A08DF34(&qword_26975DEF0);
  sub_24A08F24C();
  uint64_t v8 = v2 | v4 | v6 | *(unsigned __int8 *)(v7 + 80) | 7;
  sub_24A0C9F50();
  uint64_t v10 = v9 + 8;
  swift_unknownObjectRelease();
  sub_24A0C93B4();
  v13(v11, v12);
  sub_24A0C9304();
  v16(v14, v15);
  sub_24A0C9448();
  v19(v17, v18);
  sub_24A0C9628();
  v22(v20, v21);
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, v10, v8);
}

uint64_t sub_24A0C7018()
{
  sub_24A0C9640();
  uint64_t v0 = sub_24A08DF34(&qword_26975DDD0);
  sub_24A0B38FC(v0);
  uint64_t v1 = sub_24A08DF34(&qword_26975DE68);
  sub_24A0B38FC(v1);
  uint64_t v2 = sub_24A08DF34(&qword_26975D6A8);
  sub_24A0B38FC(v2);
  uint64_t v3 = sub_24A08DF34(&qword_26975DEF0);
  sub_24A0B38FC(v3);
  sub_24A0C9790();
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)sub_24A0B399C(v4);
  *uint64_t v5 = v6;
  v5[1] = sub_24A0B38D8;
  sub_24A0C9694();
  sub_24A0C92E8();
  return sub_24A0C1228(v7, v8, v9, v10, v11, v12, v13, v14);
}

uint64_t sub_24A0C71B4()
{
  sub_24A08DF34(&qword_26975DE40);
  sub_24A08F24C();
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  sub_24A08DF34(&qword_26975DF28);
  sub_24A08F24C();
  uint64_t v10 = v2 | *(unsigned __int8 *)(v3 + 80) | 7;
  sub_24A0C9F50();
  uint64_t v5 = v4 + 8;
  swift_unknownObjectRelease();
  uint64_t v6 = sub_24A0C939C();
  v7(v6);
  swift_bridgeObjectRelease();
  sub_24A0C9304();
  v8();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, v5, v10);
}

uint64_t sub_24A0C72E0()
{
  sub_24A0C9DD4();
  sub_24A0C9A44();
  uint64_t v0 = sub_24A08DF34(&qword_26975DE40);
  sub_24A0B38FC(v0);
  uint64_t v1 = sub_24A08DF34(&qword_26975DF28);
  sub_24A0B38FC(v1);
  sub_24A0C9790();
  uint64_t v2 = swift_task_alloc();
  uint64_t v3 = (void *)sub_24A0B399C(v2);
  *uint64_t v3 = v4;
  v3[1] = sub_24A0B38D8;
  sub_24A0C9694();
  sub_24A0C97DC();
  return sub_24A0BCFFC(v5, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_24A0C7400(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_24A08DF34(a3);
  sub_24A08F280();
  uint64_t v4 = sub_24A0CA154();
  v5(v4);
  return a2;
}

uint64_t sub_24A0C7450(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_24A093CE4();
  v4(v3);
  sub_24A08F280();
  uint64_t v5 = sub_24A093E4C();
  v6(v5);
  return a2;
}

char *sub_24A0C74A0(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_24A08DF34(&qword_26975E060);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 16);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = (char *)(a4 + 32);
  if (v5)
  {
    sub_24A0C5C2C(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_24A0C5F28(v13, v8, v12);
  }
  swift_release();
  return v10;
}

size_t sub_24A0C7584(size_t result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_25:
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  sub_24A08DF34(&qword_26975E058);
  uint64_t v10 = *(void *)(type metadata accessor for CloudAssets_Signal.Event(0) - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  unint64_t result = j__malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_24;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  uint64_t v15 = *(void *)(type metadata accessor for CloudAssets_Signal.Event(0) - 8);
  unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  unint64_t v17 = (unint64_t)v13 + v16;
  unint64_t v18 = a4 + v16;
  if (v5)
  {
    sub_24A0C5CC0(v18, v8, v17);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_24A0C6004(v18, v8, v17);
  }
  swift_release();
  return (size_t)v13;
}

size_t sub_24A0C7720(size_t result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_25:
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  sub_24A08DF34(&qword_26975DF80);
  uint64_t v10 = *(void *)(sub_24A08DF34(&qword_26975DE30) - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  unint64_t result = j__malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_24;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  uint64_t v15 = *(void *)(sub_24A08DF34(&qword_26975DE30) - 8);
  unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  unint64_t v17 = (unint64_t)v13 + v16;
  unint64_t v18 = a4 + v16;
  if (v5)
  {
    sub_24A0C5DF0(v18, v8, v17);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_24A0C611C(v18, v8, v17);
  }
  swift_release();
  return (size_t)v13;
}

uint64_t sub_24A0C78C4(uint64_t a1, char a2, void *a3)
{
  uint64_t v47 = a3;
  uint64_t v6 = type metadata accessor for AssetDownloadRequest();
  uint64_t v45 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v46 = (uint64_t)v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v48 = (uint64_t)v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_24A08DF34(&qword_26975DE30);
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = *(void *)(a1 + 16);
  if (!v15) {
    return swift_bridgeObjectRelease();
  }
  v40[0] = v3;
  v40[1] = a1;
  uint64_t v43 = (uint64_t)v40 + *(int *)(v12 + 48) - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = (uint64_t)v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = a1 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  uint64_t v41 = *(void *)(v13 + 72);
  uint64_t v42 = v9;
  unint64_t v17 = (void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32);
  swift_bridgeObjectRetain();
  while (1)
  {
    uint64_t v18 = v44;
    sub_24A093BE0(v16, v44, &qword_26975DE30);
    uint64_t v19 = *v17;
    uint64_t v20 = v48;
    uint64_t v21 = v8;
    (*v17)(v48, v18, v8);
    sub_24A0C7DC8(v43, v46);
    uint64_t v22 = (void *)*v47;
    unint64_t v24 = sub_24A0D5CFC(v20);
    uint64_t v25 = v22[2];
    BOOL v26 = (v23 & 1) == 0;
    uint64_t v27 = v25 + v26;
    if (__OFADD__(v25, v26))
    {
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_20;
    }
    char v28 = v23;
    if (v22[3] < v27) {
      break;
    }
    if (a2)
    {
      if (v23) {
        goto LABEL_14;
      }
    }
    else
    {
      sub_24A08DF34(&qword_26975DF78);
      _NativeDictionary.copy()();
      if (v28) {
        goto LABEL_14;
      }
    }
LABEL_10:
    uint64_t v31 = v48;
    os_log_type_t v32 = (void *)*v47;
    *(void *)(*v47 + 8 * (v24 >> 6) + 64) |= 1 << v24;
    uint64_t v8 = v21;
    v19(v32[6] + *(void *)(v42 + 72) * v24, v31, v21);
    sub_24A0C7DC8(v46, v32[7] + *(void *)(v45 + 72) * v24);
    uint64_t v33 = v32[2];
    BOOL v34 = __OFADD__(v33, 1);
    uint64_t v35 = v33 + 1;
    if (v34) {
      goto LABEL_18;
    }
    v32[2] = v35;
    v16 += v41;
    a2 = 1;
    if (!--v15) {
      return swift_bridgeObjectRelease_n();
    }
  }
  sub_24A0C7E18(v27, a2 & 1);
  unint64_t v29 = sub_24A0D5CFC(v48);
  if ((v28 & 1) != (v30 & 1)) {
    goto LABEL_19;
  }
  unint64_t v24 = v29;
  if ((v28 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_14:
  uint64_t v36 = swift_allocError();
  swift_willThrow();
  uint64_t v51 = v36;
  MEMORY[0x24C5BB8B0](v36);
  sub_24A08DF34(&qword_26975D5B0);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    sub_24A0C8734(v46, (void (*)(void))type metadata accessor for AssetDownloadRequest);
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v48, v21);
    swift_bridgeObjectRelease();
    return MEMORY[0x24C5BB8A0](v51);
  }
LABEL_20:
  uint64_t v49 = 0;
  unint64_t v50 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v38._object = (void *)0x800000024A0EECC0;
  v38._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v38);
  _print_unlocked<A, B>(_:_:)();
  v39._countAndFlagsBits = 39;
  v39._object = (void *)0xE100000000000000;
  String.append(_:)(v39);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_24A0C7DC8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_24A093CE4();
  v4(v3);
  sub_24A08F280();
  uint64_t v5 = sub_24A0CA154();
  v6(v5);
  return a2;
}

uint64_t sub_24A0C7E18(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for AssetDownloadRequest();
  uint64_t v49 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v54 = (uint64_t)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v51 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_24A08DF34(&qword_26975DF70);
  int v50 = a2;
  uint64_t v11 = v10;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v13 = v12;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_40;
  }
  uint64_t v14 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v15 = *(void *)(v11 + 64);
  uint64_t v46 = (void *)(v11 + 64);
  if (v14 < 64) {
    uint64_t v16 = ~(-1 << v14);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v15;
  uint64_t v44 = v2;
  int64_t v45 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v47 = (void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  uint64_t v52 = (void (**)(char *, unint64_t, uint64_t))(v8 + 32);
  uint64_t v53 = v7;
  uint64_t v18 = v12 + 64;
  uint64_t result = swift_retain();
  int64_t v20 = 0;
  uint64_t v48 = v11;
  uint64_t v21 = v51;
  if (!v17) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v22 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  unint64_t v23 = v22 | (v20 << 6);
  while (1)
  {
    uint64_t v28 = v8;
    uint64_t v29 = *(void *)(v8 + 72);
    unint64_t v30 = *(void *)(v11 + 48) + v29 * v23;
    if (v50)
    {
      (*v52)(v21, v30, v53);
      uint64_t v31 = *(void *)(v11 + 56);
      uint64_t v32 = *(void *)(v49 + 72);
      sub_24A0C7DC8(v31 + v32 * v23, v54);
    }
    else
    {
      (*v47)(v21, v30, v53);
      uint64_t v33 = *(void *)(v11 + 56);
      uint64_t v32 = *(void *)(v49 + 72);
      sub_24A0C7450(v33 + v32 * v23, v54);
    }
    sub_24A0C90D8(&qword_26975D340, MEMORY[0x263F07508]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v34 = -1 << *(unsigned char *)(v13 + 32);
    unint64_t v35 = result & ~v34;
    unint64_t v36 = v35 >> 6;
    if (((-1 << v35) & ~*(void *)(v18 + 8 * (v35 >> 6))) == 0)
    {
      char v38 = 0;
      unint64_t v39 = (unint64_t)(63 - v34) >> 6;
      uint64_t v21 = v51;
      while (++v36 != v39 || (v38 & 1) == 0)
      {
        BOOL v40 = v36 == v39;
        if (v36 == v39) {
          unint64_t v36 = 0;
        }
        v38 |= v40;
        uint64_t v41 = *(void *)(v18 + 8 * v36);
        if (v41 != -1)
        {
          unint64_t v37 = __clz(__rbit64(~v41)) + (v36 << 6);
          goto LABEL_31;
        }
      }
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    unint64_t v37 = __clz(__rbit64((-1 << v35) & ~*(void *)(v18 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    uint64_t v21 = v51;
LABEL_31:
    *(void *)(v18 + ((v37 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v37;
    (*v52)((char *)(*(void *)(v13 + 48) + v29 * v37), (unint64_t)v21, v53);
    uint64_t result = sub_24A0C7DC8(v54, *(void *)(v13 + 56) + v32 * v37);
    ++*(void *)(v13 + 16);
    uint64_t v11 = v48;
    uint64_t v8 = v28;
    if (v17) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      goto LABEL_42;
    }
    if (v24 >= v45)
    {
      swift_release();
      uint64_t v3 = v44;
      uint64_t v25 = v46;
      goto LABEL_35;
    }
    uint64_t v25 = v46;
    unint64_t v26 = v46[v24];
    ++v20;
    if (!v26)
    {
      int64_t v20 = v24 + 1;
      if (v24 + 1 >= v45) {
        goto LABEL_33;
      }
      unint64_t v26 = v46[v20];
      if (!v26) {
        break;
      }
    }
LABEL_18:
    unint64_t v17 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v20 << 6);
    uint64_t v21 = v51;
  }
  int64_t v27 = v24 + 2;
  if (v27 < v45)
  {
    unint64_t v26 = v46[v27];
    if (!v26)
    {
      while (1)
      {
        int64_t v20 = v27 + 1;
        if (__OFADD__(v27, 1)) {
          goto LABEL_43;
        }
        if (v20 >= v45) {
          goto LABEL_33;
        }
        unint64_t v26 = v46[v20];
        ++v27;
        if (v26) {
          goto LABEL_18;
        }
      }
    }
    int64_t v20 = v27;
    goto LABEL_18;
  }
LABEL_33:
  swift_release();
  uint64_t v3 = v44;
LABEL_35:
  if (v50)
  {
    uint64_t v42 = 1 << *(unsigned char *)(v11 + 32);
    if (v42 >= 64) {
      sub_24A0C8324(0, (unint64_t)(v42 + 63) >> 6, v25);
    }
    else {
      *uint64_t v25 = -1 << v42;
    }
    *(void *)(v11 + 16) = 0;
  }
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v13;
  return result;
}

uint64_t sub_24A0C8324(uint64_t result, uint64_t a2, void *a3)
{
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    for (; a2; --a2)
      *a3++ = result;
  }
  return result;
}

uint64_t sub_24A0C8344(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = *(void *)a6;
  char v13 = *(unsigned char *)(a6 + 8);
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v14;
  *uint64_t v14 = v6;
  v14[1] = sub_24A0B35E4;
  return sub_24A0C35B4(a1, a2, a3, a4, a5, v12, v13);
}

uint64_t sub_24A0C842C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = *(void *)a6;
  char v13 = *(unsigned char *)(a6 + 8);
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v14;
  *uint64_t v14 = v6;
  v14[1] = sub_24A0B38D8;
  return sub_24A0C48F0(a1, a2, a3, a4, a5, v12, v13);
}

uint64_t sub_24A0C8514()
{
  sub_24A08DF34(&qword_26975DF90);
  sub_24A08F24C();
  sub_24A0C9664();
  swift_release();
  uint64_t v4 = sub_24A0C9BD4();
  v5(v4);
  j__swift_bridgeObjectRelease(*(void *)(v0 + v3), *(unsigned __int8 *)(v0 + v3 + 8));
  return MEMORY[0x270FA0238](v0, v2, v1);
}

uint64_t sub_24A0C85C0(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_24A0C861C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_24A0C9DD4();
  sub_24A0C9A44();
  uint64_t v10 = sub_24A08DF34(&qword_26975DF90);
  sub_24A0B38FC(v10);
  sub_24A0C9474();
  uint64_t v11 = swift_task_alloc();
  uint64_t v12 = (void *)sub_24A0B399C(v11);
  *uint64_t v12 = v13;
  v12[1] = sub_24A0B38D8;
  sub_24A0C959C();
  sub_24A0C97DC();
  return v21(v14, v15, v16, v17, v18, v19, v20, v21, a9, a10);
}

unint64_t sub_24A0C86E8()
{
  unint64_t result = qword_26975DFC0;
  if (!qword_26975DFC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975DFC0);
  }
  return result;
}

uint64_t sub_24A0C8734(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_24A08F280();
  sub_24A08F2BC();
  v3();
  return a1;
}

uint64_t sub_24A0C8788()
{
  return sub_24A0C8F08();
}

uint64_t sub_24A0C8794(uint64_t a1)
{
  return sub_24A0C9014(a1, &qword_26975DF90, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_24A0C2AD0);
}

unint64_t sub_24A0C87B4()
{
  unint64_t result = qword_26975DFD8;
  if (!qword_26975DFD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975DFD8);
  }
  return result;
}

uint64_t sub_24A0C8800(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_24A0C8810(uint64_t a1, unint64_t a2)
{
  if (((a2 >> 60) | 4) != 0xF) {
    return sub_24A08DEDC(a1, a2);
  }
  return a1;
}

uint64_t sub_24A0C8828()
{
  return sub_24A0C8834();
}

uint64_t sub_24A0C8834()
{
  sub_24A0AAFDC();
  sub_24A08DF34(v0);
  sub_24A08F24C();
  sub_24A08DF34(&qword_26975DEC0);
  sub_24A08F24C();
  swift_unknownObjectRelease();
  uint64_t v1 = sub_24A0C939C();
  v2(v1);
  sub_24A0C93B4();
  v3();
  sub_24A0AB030();
  return MEMORY[0x270FA0238](v4, v5, v6);
}

uint64_t sub_24A0C8918()
{
  sub_24A0C9DC8();
  uint64_t v0 = sub_24A08DF34(&qword_26975DE00);
  sub_24A0B38FC(v0);
  uint64_t v1 = sub_24A08DF34(&qword_26975DEC0);
  sub_24A0C92D4(v1);
  sub_24A0C9A00();
  uint64_t v2 = swift_task_alloc();
  uint64_t v3 = (void *)sub_24A0C9DB8(v2);
  *uint64_t v3 = v4;
  v3[1] = sub_24A0B38D8;
  sub_24A0C9600();
  return sub_24A0BEC1C(v5, v6, v7, v8, v9);
}

uint64_t sub_24A0C8A04(uint64_t a1, uint64_t *a2)
{
  sub_24A08DF34(a2);
  sub_24A08F280();
  sub_24A08F2BC();
  v3();
  return a1;
}

uint64_t sub_24A0C8A54(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_24A0C8AB0()
{
  sub_24A0AAFDC();
  sub_24A08DF34(&qword_26975DDD0);
  sub_24A08F24C();
  sub_24A08DF34(&qword_26975DEC0);
  sub_24A08F24C();
  swift_unknownObjectRelease();
  uint64_t v0 = sub_24A0C939C();
  v1(v0);
  sub_24A0C93B4();
  v2();
  sub_24A0AB030();
  return MEMORY[0x270FA0238](v3, v4, v5);
}

uint64_t sub_24A0C8BA8()
{
  sub_24A0C9DC8();
  uint64_t v2 = v1;
  uint64_t v3 = sub_24A08DF34(&qword_26975DDD0);
  sub_24A0B38FC(v3);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = sub_24A08DF34(&qword_26975DEC0);
  sub_24A0B38FC(v8);
  unint64_t v10 = (v5 + v7 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = *(void *)(v0 + 16);
  uint64_t v12 = *(void *)(v0 + 24);
  uint64_t v13 = v0 + v10;
  uint64_t v14 = swift_task_alloc();
  uint64_t v15 = (void *)sub_24A0C9DB8(v14);
  void *v15 = v16;
  v15[1] = sub_24A0B38D8;
  return sub_24A0BC1D8(v2, v11, v12, v0 + v5, v13);
}

uint64_t sub_24A0C8CE4()
{
  sub_24A08DF34(&qword_26975E018);
  sub_24A08F24C();
  sub_24A0C9664();
  swift_release();
  uint64_t v3 = sub_24A0C9BD4();
  v4(v3);
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, v2, v1);
}

uint64_t sub_24A0C8D88(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_24A0C8DE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_24A0C9DD4();
  sub_24A0C9A44();
  uint64_t v10 = sub_24A08DF34(&qword_26975E018);
  sub_24A0B38FC(v10);
  sub_24A0C9474();
  uint64_t v11 = swift_task_alloc();
  uint64_t v12 = (void *)sub_24A0B399C(v11);
  *uint64_t v12 = v13;
  v12[1] = sub_24A0B38D8;
  sub_24A0C959C();
  sub_24A0C97DC();
  return v21(v14, v15, v16, v17, v18, v19, v20, v21, a9, a10);
}

unint64_t sub_24A0C8EB0()
{
  unint64_t result = qword_26975E038;
  if (!qword_26975E038)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E038);
  }
  return result;
}

uint64_t sub_24A0C8EFC()
{
  return sub_24A0C8F08();
}

uint64_t sub_24A0C8F08()
{
  sub_24A0AAFDC();
  sub_24A08DF34(v0);
  sub_24A08F24C();
  type metadata accessor for UUID();
  sub_24A08F24C();
  uint64_t v1 = sub_24A0C939C();
  v2(v1);
  swift_release();
  sub_24A0C9304();
  v3();
  sub_24A0AB030();
  return MEMORY[0x270FA0238](v4, v5, v6);
}

uint64_t sub_24A0C8FF4(uint64_t a1)
{
  return sub_24A0C9014(a1, &qword_26975E018, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_24A0C27A8);
}

uint64_t sub_24A0C9014(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, unint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = sub_24A08DF34(a2);
  sub_24A0B38FC(v5);
  unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v9 = (*(void *)(v8 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = type metadata accessor for UUID();
  sub_24A0C92D4(v10);
  uint64_t v12 = *(void *)(v3 + v9);
  uint64_t v13 = v3 + ((v9 + *(unsigned __int8 *)(v11 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  return a3(a1, v3 + v7, v12, v13);
}

uint64_t sub_24A0C90D8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_24A0C912C()
{
  JUMPOUT(0x24C5BBA10);
}

uint64_t sub_24A0C9150()
{
  return v0;
}

uint64_t sub_24A0C9194()
{
  return v0 + 8;
}

uint64_t sub_24A0C91B8(uint64_t a1)
{
  v2[32] = a1;
  v2[33] = *(void *)(v3 + 16);
  v2[34] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  return v1;
}

uint64_t sub_24A0C921C()
{
  return swift_task_dealloc();
}

uint64_t sub_24A0C9258()
{
  return swift_allocError();
}

uint64_t sub_24A0C9270()
{
  return swift_allocObject();
}

uint64_t sub_24A0C9298()
{
  return swift_slowAlloc();
}

uint64_t sub_24A0C92B0()
{
  return _s10CloudAsset21UploadResponseMessageOwet_0(v0, 1, v1);
}

uint64_t sub_24A0C92D4(uint64_t a1)
{
  return a1 - 8;
}

uint64_t sub_24A0C9310(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_24A0C9324()
{
  return swift_slowAlloc();
}

void *sub_24A0C9374()
{
  uint64_t result = sub_24A08DF78((void *)(*(void *)(v0 + 96) + 16), *(void *)(*(void *)(v0 + 96) + 40));
  *(void *)(v0 + 312) = result;
  return result;
}

uint64_t sub_24A0C939C()
{
  return v0 + v1;
}

uint64_t sub_24A0C93C0()
{
  return swift_slowAlloc();
}

uint64_t sub_24A0C93D8()
{
  return v0;
}

uint64_t sub_24A0C93F0()
{
  return swift_slowAlloc();
}

uint64_t sub_24A0C9408()
{
  return swift_task_dealloc();
}

uint64_t sub_24A0C94CC(uint64_t a1)
{
  *uint64_t v1 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_24A0C94EC()
{
  *(void *)(v0 + 280) = *(void *)(v2 + 16);
  *(void *)(v0 + 288) = (v2 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  return v1;
}

uint64_t sub_24A0C9518()
{
  return swift_arrayDestroy();
}

void sub_24A0C9550(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v5, v4, a4, v6, 2u);
}

uint64_t sub_24A0C9570()
{
  *(void *)(v0 + 280) = *(void *)(v1 + 16);
  *(void *)(v0 + 288) = (v1 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  return v2;
}

uint64_t sub_24A0C959C()
{
  return v0;
}

void sub_24A0C95C8(void *a1, NSObject *a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, a2, v5, a4, v4, 0xCu);
}

uint64_t sub_24A0C95E4()
{
  return swift_arrayDestroy();
}

uint64_t sub_24A0C9618(uint64_t result)
{
  *(void *)(v1 + 160) = result;
  return result;
}

uint64_t sub_24A0C9634()
{
  return v0;
}

void sub_24A0C964C(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, a2, a3, a4, v4, 0x16u);
}

uint64_t sub_24A0C9664()
{
  return swift_unknownObjectRelease();
}

uint64_t sub_24A0C9694()
{
  return v0;
}

uint64_t sub_24A0C96B8()
{
  return swift_arrayDestroy();
}

uint64_t sub_24A0C96D0(uint64_t a1, uint64_t a2)
{
  sub_24A0A800C(a1, a2);
  return swift_bridgeObjectRetain_n();
}

uint64_t sub_24A0C9700(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_24A0C9724()
{
  return swift_task_alloc();
}

uint64_t sub_24A0C9740()
{
  return v0;
}

uint64_t sub_24A0C9760()
{
  return v0;
}

void sub_24A0C9780()
{
  *(_WORD *)(v0 + 12) = 2112;
}

uint64_t sub_24A0C97B0()
{
  return type metadata accessor for Logger();
}

uint64_t sub_24A0C97F4()
{
  return swift_arrayDestroy();
}

uint64_t sub_24A0C9814()
{
  return swift_arrayDestroy();
}

uint64_t sub_24A0C9834()
{
  return swift_arrayDestroy();
}

void sub_24A0C9850(void *a1, NSObject *a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, a2, v5, a4, v4, 0xCu);
}

uint64_t sub_24A0C986C()
{
  return v0;
}

void sub_24A0C9880()
{
  *(void *)(v0 + 32) = *(void *)(v0 + 248);
  JUMPOUT(0x24C5BB8B0);
}

BOOL sub_24A0C98AC(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_24A0C98C8()
{
  return v0;
}

BOOL sub_24A0C98E8(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_24A0C9904(uint64_t a1)
{
  return MEMORY[0x270FA2498](a1, 0, 0);
}

void sub_24A0C9910(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

BOOL sub_24A0C9930(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_24A0C994C()
{
  return swift_task_dealloc();
}

uint64_t sub_24A0C9968(uint64_t a1)
{
  *uint64_t v1 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_24A0C99B0()
{
  return type metadata accessor for Logger();
}

uint64_t sub_24A0C99D8()
{
  return swift_task_dealloc();
}

uint64_t sub_24A0C9A1C(uint64_t a1)
{
  *(void *)(v1 + 72) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_24A0C9A50()
{
  return swift_slowAlloc();
}

uint64_t sub_24A0C9A84()
{
  return swift_task_dealloc();
}

uint64_t sub_24A0C9AAC()
{
  return v0;
}

uint64_t sub_24A0C9AC8()
{
  return v0;
}

uint64_t sub_24A0C9AF0()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_24A0C9B08()
{
  return v0;
}

uint64_t sub_24A0C9B24(uint64_t a1)
{
  *(void *)(v1 + 88) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_24A0C9B4C(uint64_t a1)
{
  *(void *)(v1 + 88) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_24A0C9B74(uint64_t a1)
{
  *uint64_t v1 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

BOOL sub_24A0C9BB8(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_24A0C9BD4()
{
  return v0 + v1;
}

void sub_24A0C9BEC(float a1)
{
  *uint64_t v1 = a1;
}

uint64_t sub_24A0C9BFC()
{
  return swift_task_dealloc();
}

void sub_24A0C9C48(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, os_log_t log, uint64_t a13, os_log_type_t type)
{
  _os_log_impl(a1, log, type, a4, v14, 0x16u);
}

uint64_t sub_24A0C9C6C(uint64_t a1)
{
  *(void *)(v1 + 24) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_24A0C9C90()
{
  return AsyncThrowingStream.Continuation.yield(_:)();
}

uint64_t sub_24A0C9CAC()
{
  *(_WORD *)(v0 + 12) = 2080;
  return static Task<>.currentPriority.getter();
}

uint64_t sub_24A0C9CD0(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_24A0C9CF4(uint64_t a1)
{
  *(void *)(v1 + 80) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_24A0C9D18(uint64_t a1)
{
  *(void *)(v1 + 80) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void sub_24A0C9D3C(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_log_type_t type, os_log_t log)
{
  _os_log_impl(a1, log, type, a4, v14, 0x16u);
}

uint64_t sub_24A0C9D60()
{
  return swift_release();
}

BOOL sub_24A0C9D84(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_24A0C9DB8(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t sub_24A0C9E08()
{
  return *(void *)(v0 + 184);
}

uint64_t sub_24A0C9E20()
{
  return *(void *)(v0 + 184);
}

uint64_t sub_24A0C9E38()
{
  return v0;
}

uint64_t sub_24A0C9E44()
{
  return swift_dynamicCast();
}

uint64_t sub_24A0C9E68()
{
  return swift_dynamicCast();
}

__n128 *sub_24A0C9E8C(__n128 *result, __n128 a2)
{
  result[1] = a2;
  return result;
}

uint64_t sub_24A0C9E98()
{
  *(void *)(v1 + 296) = v0;
  *(void *)(v1 + 304) = v2;
  return XPCRichError.canRetry.getter();
}

void sub_24A0C9EBC()
{
  *(void *)(v0 + 32) = v1;
  JUMPOUT(0x24C5BB8B0);
}

void sub_24A0C9EDC()
{
  *(_WORD *)(v0 + 12) = 2112;
  JUMPOUT(0x24C5BB8B0);
}

void sub_24A0C9EFC()
{
  *(_WORD *)(v0 + 12) = 2112;
  JUMPOUT(0x24C5BB8B0);
}

uint64_t sub_24A0C9F1C(uint64_t a1)
{
  *uint64_t v1 = a1;
  return swift_storeEnumTagMultiPayload();
}

void *sub_24A0C9F64@<X0>(uint64_t a1@<X8>)
{
  return sub_24A08DF78((void *)(a1 + 16), *(void *)(a1 + 40));
}

uint64_t sub_24A0C9F84()
{
  return type metadata accessor for Logger();
}

uint64_t sub_24A0C9FA4()
{
  return type metadata accessor for Logger();
}

void sub_24A0C9FC4()
{
  JUMPOUT(0x24C5BB8A0);
}

uint64_t sub_24A0C9FE4()
{
  return swift_arrayDestroy();
}

uint64_t sub_24A0CA004()
{
  return swift_arrayDestroy();
}

uint64_t sub_24A0CA024(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_24A0C6240(v3, v4, a3);
}

uint64_t sub_24A0CA03C()
{
  return swift_arrayDestroy();
}

uint64_t sub_24A0CA054()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t sub_24A0CA06C()
{
  return AsyncThrowingStream.Continuation.finish(throwing:)();
}

uint64_t sub_24A0CA084()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t sub_24A0CA0DC()
{
  *(_WORD *)(v0 + 12) = 2080;
  return static Task<>.currentPriority.getter();
}

uint64_t sub_24A0CA108(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _s10CloudAsset21UploadResponseMessageOwst_0(a1, 1, 1, a4);
}

uint64_t sub_24A0CA120(uint64_t a1)
{
  *uint64_t v1 = a1;
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_24A0CA140()
{
  return v0;
}

uint64_t sub_24A0CA154()
{
  return v0;
}

uint64_t sub_24A0CA17C()
{
  return v0;
}

uint64_t sub_24A0CA190()
{
  return swift_allocObject();
}

uint64_t sub_24A0CA1A8()
{
  return dispatch thunk of XPCSession.send<A>(_:)();
}

uint64_t sub_24A0CA1C8()
{
  return swift_slowAlloc();
}

uint64_t sub_24A0CA1E0()
{
  return v0;
}

uint64_t sub_24A0CA1EC()
{
  return swift_getEnumCaseMultiPayload();
}

_WORD *sub_24A0CA204(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

void sub_24A0CA210()
{
  JUMPOUT(0x24C5BB8A0);
}

uint64_t sub_24A0CA230()
{
  return swift_release();
}

void sub_24A0CA250()
{
  *(void *)(v1 + 40) = v0;
}

void sub_24A0CA264()
{
  *(void *)(v0 + 40) = v1;
}

uint64_t sub_24A0CA278(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = (int *)type metadata accessor for AssetDownloadResponse();
  sub_24A08F280();
  MEMORY[0x270FA5388](v8);
  sub_24A0CDEA0();
  uint64_t v9 = sub_24A08DF34(&qword_26975DF48);
  uint64_t v10 = sub_24A093C88(v9);
  MEMORY[0x270FA5388](v10);
  sub_24A0CDEB8();
  uint64_t v11 = sub_24A08DF34(&qword_26975E1D0);
  uint64_t v12 = sub_24A093C88(v11);
  MEMORY[0x270FA5388](v12);
  sub_24A0CDF60();
  uint64_t v14 = v2 + v13;
  sub_24A0A80F4(a1, v2, &qword_26975DF48);
  sub_24A0A80F4(a2, v14, &qword_26975DF48);
  sub_24A0CDF08(v2);
  if (v18)
  {
    sub_24A0CDF08(v14);
    if (v15) {
      uint64_t v16 = &qword_26975DF48;
    }
    else {
      uint64_t v16 = &qword_26975E1D0;
    }
    if (v15) {
      char v17 = -1;
    }
    else {
      char v17 = 0;
    }
  }
  else
  {
    sub_24A0A80F4(v2, v4, &qword_26975DF48);
    sub_24A0CDF08(v14);
    if (!v18)
    {
      sub_24A0CDE1C(v14, v3, (void (*)(void))type metadata accessor for AssetDownloadResponse);
      char v19 = static UUID.== infix(_:_:)();
      if ((v19 & 1) != 0
        && static Asset.== infix(_:_:)(v4 + v7[5], v3 + v7[5])
        && (MEMORY[0x24C5BACC0](v4 + v7[6], v3 + v7[6]) & 1) != 0)
      {
        uint64_t v20 = v7[7];
        uint64_t v21 = (uint64_t *)(v4 + v20);
        char v22 = *(unsigned char *)(v4 + v20 + 16);
        unint64_t v23 = (uint64_t *)(v3 + v20);
        if (v22)
        {
          if (v23[2])
          {
LABEL_26:
            sub_24A0CDDC8(v3, (void (*)(void))type metadata accessor for AssetDownloadResponse);
            sub_24A0CDDC8(v4, (void (*)(void))type metadata accessor for AssetDownloadResponse);
            char v17 = 1;
            goto LABEL_24;
          }
        }
        else if ((v23[2] & 1) == 0)
        {
          uint64_t v25 = *v21;
          uint64_t v24 = v21[1];
          uint64_t v27 = *v23;
          uint64_t v26 = v23[1];
          if (v25 == v27 && v24 == v26) {
            goto LABEL_26;
          }
        }
      }
      sub_24A0CDDC8(v3, (void (*)(void))type metadata accessor for AssetDownloadResponse);
      sub_24A0CDDC8(v4, (void (*)(void))type metadata accessor for AssetDownloadResponse);
      char v17 = 0;
LABEL_24:
      uint64_t v16 = &qword_26975DF48;
      goto LABEL_25;
    }
    sub_24A0CDDC8(v4, (void (*)(void))type metadata accessor for AssetDownloadResponse);
    char v17 = 0;
    uint64_t v16 = &qword_26975E1D0;
  }
LABEL_25:
  sub_24A0C8A04(v2, v16);
  return v17 & 1;
}

uint64_t sub_24A0CA4FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Asset(0);
  MEMORY[0x270FA5388](v4);
  os_log_type_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_24A08DF34(&qword_26975DE78);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_24A08DF34(&qword_26975E1D8);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = (uint64_t)&v13[*(int *)(v11 + 56)];
  sub_24A0A80F4(a1, (uint64_t)v13, &qword_26975DE78);
  sub_24A0A80F4(a2, v14, &qword_26975DE78);
  if (_s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v13, 1, v4) == 1)
  {
    int v15 = _s10CloudAsset21UploadResponseMessageOwet_0(v14, 1, v4);
    if (v15 == 1) {
      uint64_t v16 = &qword_26975DE78;
    }
    else {
      uint64_t v16 = &qword_26975E1D8;
    }
    if (v15 == 1) {
      char v17 = -1;
    }
    else {
      char v17 = 0;
    }
  }
  else
  {
    sub_24A0A80F4((uint64_t)v13, (uint64_t)v9, &qword_26975DE78);
    if (_s10CloudAsset21UploadResponseMessageOwet_0(v14, 1, v4) == 1)
    {
      sub_24A0CDDC8((uint64_t)v9, (void (*)(void))type metadata accessor for Asset);
      char v17 = 0;
      uint64_t v16 = &qword_26975E1D8;
    }
    else
    {
      sub_24A0CDE1C(v14, (uint64_t)v6, (void (*)(void))type metadata accessor for Asset);
      char v17 = static Asset.== infix(_:_:)((uint64_t)v9, (uint64_t)v6);
      sub_24A0CDDC8((uint64_t)v6, (void (*)(void))type metadata accessor for Asset);
      sub_24A0CDDC8((uint64_t)v9, (void (*)(void))type metadata accessor for Asset);
      uint64_t v16 = &qword_26975DE78;
    }
  }
  sub_24A0C8A04((uint64_t)v13, v16);
  return v17 & 1;
}

void sub_24A0CA740()
{
  uint64_t v3 = type metadata accessor for AssetDownloadResponse();
  sub_24A08F280();
  MEMORY[0x270FA5388](v4);
  sub_24A0CDEB8();
  uint64_t v5 = sub_24A08DF34(&qword_26975DF48);
  uint64_t v6 = sub_24A093C88(v5);
  MEMORY[0x270FA5388](v6);
  sub_24A0CDEA0();
  sub_24A0A80F4(v0, v0, &qword_26975DF48);
  sub_24A0CDF08(v0);
  if (v7)
  {
    Hasher._combine(_:)(1uLL);
  }
  else
  {
    sub_24A0CDE1C(v0, v1, (void (*)(void))type metadata accessor for AssetDownloadResponse);
    Hasher._combine(_:)(0);
    type metadata accessor for UUID();
    sub_24A0CDD80(&qword_26975D340, MEMORY[0x263F07508]);
    dispatch thunk of Hashable.hash(into:)();
    uint64_t v8 = v1 + *(int *)(v3 + 20);
    type metadata accessor for URL();
    sub_24A0CDD80(&qword_26975D348, MEMORY[0x263F06EA8]);
    dispatch thunk of Hashable.hash(into:)();
    type metadata accessor for Asset.ID(0);
    sub_24A0CE01C();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t v9 = (uint64_t *)(v8 + *(int *)(v2 + 24));
    uint64_t v10 = *v9;
    unint64_t v11 = v9[1];
    sub_24A08DE84(*v9, v11);
    Data.hash(into:)();
    sub_24A08DEDC(v10, v11);
    uint64_t v12 = (uint64_t *)(v8 + *(int *)(v2 + 28));
    uint64_t v13 = *v12;
    unint64_t v14 = v12[1];
    sub_24A08DE84(*v12, v14);
    sub_24A0CDF98();
    Data.hash(into:)();
    sub_24A08DEDC(v13, v14);
    type metadata accessor for Asset(0);
    sub_24A0CE01C();
    uint64_t v17 = *(void *)(v15 + 16);
    unint64_t v16 = *(void *)(v15 + 24);
    sub_24A08DE84(v14, v11);
    Data.hash(into:)();
    sub_24A08DEDC(v14, v11);
    sub_24A08DE84(v17, v16);
    Data.hash(into:)();
    sub_24A08DEDC(v17, v16);
    Hasher._combine(_:)(*(void *)(v8 + *(int *)(v13 + 24)));
    dispatch thunk of Hashable.hash(into:)();
    uint64_t v18 = v1 + *(int *)(v3 + 28);
    if (*(unsigned char *)(v18 + 16) == 1)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Swift::UInt v20 = *(void *)v18;
      Swift::UInt v19 = *(void *)(v18 + 8);
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v20);
      Hasher._combine(_:)(v19);
    }
    sub_24A0CDDC8(v1, (void (*)(void))type metadata accessor for AssetDownloadResponse);
  }
}

void sub_24A0CAA7C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Asset(0);
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_24A08DF34(&qword_26975DE78);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A0A80F4(v1, (uint64_t)v7, &qword_26975DE78);
  if (_s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)v7, 1, v2) == 1)
  {
    Hasher._combine(_:)(1uLL);
  }
  else
  {
    sub_24A0CDE1C((uint64_t)v7, (uint64_t)v4, (void (*)(void))type metadata accessor for Asset);
    Hasher._combine(_:)(0);
    type metadata accessor for URL();
    sub_24A0CDD80(&qword_26975D348, MEMORY[0x263F06EA8]);
    dispatch thunk of Hashable.hash(into:)();
    uint64_t v8 = type metadata accessor for Asset.ID(0);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t v9 = (uint64_t *)&v4[*(int *)(v8 + 24)];
    uint64_t v10 = *v9;
    unint64_t v11 = v9[1];
    sub_24A08DE84(*v9, v11);
    Data.hash(into:)();
    sub_24A08DEDC(v10, v11);
    uint64_t v12 = (uint64_t *)&v4[*(int *)(v8 + 28)];
    uint64_t v13 = *v12;
    unint64_t v14 = v12[1];
    sub_24A08DE84(*v12, v14);
    Data.hash(into:)();
    sub_24A08DEDC(v13, v14);
    uint64_t v15 = (uint64_t *)&v4[*(int *)(v2 + 20)];
    uint64_t v16 = *v15;
    unint64_t v17 = v15[1];
    uint64_t v18 = v15[2];
    unint64_t v19 = v15[3];
    sub_24A08DE84(*v15, v17);
    Data.hash(into:)();
    sub_24A08DEDC(v16, v17);
    sub_24A08DE84(v18, v19);
    Data.hash(into:)();
    sub_24A08DEDC(v18, v19);
    Hasher._combine(_:)(*(void *)&v4[*(int *)(v2 + 24)]);
    sub_24A0CDDC8((uint64_t)v4, (void (*)(void))type metadata accessor for Asset);
  }
}

uint64_t UploadResponseMessage.hash(into:)(uint64_t a1)
{
  uint64_t v4 = v2;
  uint64_t v6 = sub_24A08DF34(&qword_26975DE78);
  uint64_t v7 = sub_24A093C88(v6);
  MEMORY[0x270FA5388](v7);
  sub_24A0CDFB0();
  type metadata accessor for UploadResponseMessage();
  sub_24A08F280();
  MEMORY[0x270FA5388](v8);
  sub_24A0CDEB8();
  sub_24A0CAEF4(v4, (uint64_t)v3);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_24A0CC5C0((uint64_t)v3, v1);
      Hasher._combine(_:)(1uLL);
      sub_24A0CAA7C();
      return sub_24A0C8A04(v1, &qword_26975DE78);
    case 2u:
      uint64_t v9 = *v3;
      Hasher._combine(_:)(2uLL);
      sub_24A0B0F90(a1, v9);
      return swift_bridgeObjectRelease();
    case 3u:
      uint64_t v10 = *v3;
      Hasher._combine(_:)(3uLL);
      Hasher._combine(_:)(0);
      sub_24A0B0FF4(a1, v10);
      return swift_bridgeObjectRelease();
    default:
      Hasher._combine(_:)(0);
      sub_24A0B1688();
      return swift_bridgeObjectRelease();
  }
}

uint64_t type metadata accessor for UploadResponseMessage()
{
  uint64_t result = qword_26975E140;
  if (!qword_26975E140) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_24A0CAEF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UploadResponseMessage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t static UploadResponseMessage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = sub_24A08DF34(&qword_26975DE78);
  uint64_t v9 = sub_24A093C88(v8);
  MEMORY[0x270FA5388](v9);
  sub_24A0CDEA0();
  type metadata accessor for UploadResponseMessage();
  sub_24A08F280();
  MEMORY[0x270FA5388](v10);
  sub_24A0CDF7C();
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  unint64_t v14 = (char *)&v32 - v13;
  MEMORY[0x270FA5388](v12);
  sub_24A0CDFF4();
  MEMORY[0x270FA5388](v15);
  unint64_t v17 = (char *)&v32 - v16;
  uint64_t v18 = sub_24A08DF34(&qword_26975E068);
  uint64_t v19 = sub_24A093C88(v18);
  MEMORY[0x270FA5388](v19);
  sub_24A0CDF60();
  uint64_t v21 = v2 + v20;
  sub_24A0CAEF4(a1, v2);
  sub_24A0CAEF4(a2, v21);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_24A0CAEF4(v2, v4);
      if (sub_24A0CDFDC() == 1)
      {
        sub_24A0CC5C0(v21, v3);
        char v23 = sub_24A0CA4FC(v4, v3);
        uint64_t v24 = sub_24A0CDFA4();
        sub_24A0C8A04(v24, v25);
        sub_24A0C8A04(v4, &qword_26975DE78);
        goto LABEL_12;
      }
      sub_24A0C8A04(v4, &qword_26975DE78);
      goto LABEL_15;
    case 2u:
      sub_24A0CAEF4(v2, (uint64_t)v14);
      if (sub_24A0CDFDC() != 2) {
        goto LABEL_13;
      }
      uint64_t v26 = sub_24A0CDFA4();
      char v28 = sub_24A0AB34C(v26, v27);
      goto LABEL_10;
    case 3u:
      sub_24A0CAEF4(v2, v5);
      if (sub_24A0CDFDC() != 3) {
        goto LABEL_13;
      }
      uint64_t v29 = (void *)sub_24A0CDFA4();
      char v28 = sub_24A0AB3B8(v29, v30);
LABEL_10:
      char v23 = v28;
      swift_bridgeObjectRelease();
      goto LABEL_11;
    default:
      sub_24A0CAEF4(v2, (uint64_t)v17);
      if (sub_24A0CDFDC())
      {
LABEL_13:
        swift_bridgeObjectRelease();
LABEL_15:
        sub_24A0C8A04(v2, &qword_26975E068);
        char v23 = 0;
      }
      else
      {
        sub_24A0CDFA4();
        sub_24A0AD298();
        char v23 = v22;
        swift_bridgeObjectRelease();
LABEL_11:
        swift_bridgeObjectRelease();
LABEL_12:
        sub_24A0CDDC8(v2, (void (*)(void))type metadata accessor for UploadResponseMessage);
      }
      return v23 & 1;
  }
}

uint64_t sub_24A0CB230(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6172656D65687065 && a2 == 0xEE0074657373416CLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x6574736973726570 && a2 == 0xEE00746573734164;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x6C616E676973 && a2 == 0xE600000000000000;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (a1 == 0xD000000000000019 && a2 == 0x800000024A0EF010)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v8) {
          return 3;
        }
        else {
          return 4;
        }
      }
    }
  }
}

unint64_t sub_24A0CB404(char a1)
{
  unint64_t result = 0x6172656D65687065;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6574736973726570;
      break;
    case 2:
      unint64_t result = 0x6C616E676973;
      break;
    case 3:
      unint64_t result = 0xD000000000000019;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_24A0CB4B4(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x726F727265 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_24A0CB534()
{
  return 0x726F727265;
}

unint64_t sub_24A0CB548()
{
  return sub_24A0CB404(*v0);
}

uint64_t sub_24A0CB550@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_24A0CB230(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_24A0CB578(uint64_t a1)
{
  unint64_t v2 = sub_24A0CC628();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A0CB5B4(uint64_t a1)
{
  unint64_t v2 = sub_24A0CC628();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_24A0CB5F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_24A0B4A78(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_24A0CB620(uint64_t a1)
{
  unint64_t v2 = sub_24A0CC7F0();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A0CB65C(uint64_t a1)
{
  unint64_t v2 = sub_24A0CC7F0();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_24A0CB698(uint64_t a1)
{
  unint64_t v2 = sub_24A0CC7A4();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A0CB6D4(uint64_t a1)
{
  unint64_t v2 = sub_24A0CC7A4();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_24A0CB710(uint64_t a1)
{
  unint64_t v2 = sub_24A0CC70C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A0CB74C(uint64_t a1)
{
  unint64_t v2 = sub_24A0CC70C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_24A0CB78C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_24A0CB4B4(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_24A0CB7B8(uint64_t a1)
{
  unint64_t v2 = sub_24A0CC674();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A0CB7F4(uint64_t a1)
{
  unint64_t v2 = sub_24A0CC674();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t UploadResponseMessage.encode(to:)(void *a1)
{
  sub_24A08DF34(&qword_26975E070);
  sub_24A08F24C();
  MEMORY[0x270FA5388](v3);
  sub_24A08F2E0();
  sub_24A08DF34(&qword_26975E078);
  sub_24A08F24C();
  MEMORY[0x270FA5388](v4);
  sub_24A0CDF44(v5, v20);
  sub_24A08DF34(&qword_26975E080);
  sub_24A08F24C();
  MEMORY[0x270FA5388](v6);
  sub_24A0CDF28(v7, v21);
  sub_24A08DF34(&qword_26975DE78);
  sub_24A08F280();
  MEMORY[0x270FA5388](v8);
  sub_24A0CDFB0();
  sub_24A08DF34(&qword_26975E088);
  sub_24A08F24C();
  MEMORY[0x270FA5388](v9);
  sub_24A093CD4();
  type metadata accessor for UploadResponseMessage();
  sub_24A08F280();
  MEMORY[0x270FA5388](v10);
  sub_24A093CD4();
  uint64_t v13 = v12 - v11;
  sub_24A08DF34(&qword_26975E090);
  sub_24A08F24C();
  MEMORY[0x270FA5388](v14);
  sub_24A093CD4();
  sub_24A08DF78(a1, a1[3]);
  sub_24A0CC628();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_24A0CAEF4(v22, v13);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_24A0CC5C0(v13, v1);
      sub_24A0CC7A4();
      sub_24A0CDEE8();
      sub_24A0CC8D4(&qword_26975E0C8);
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      sub_24A08F2BC();
      v18();
      sub_24A0C8A04(v1, &qword_26975DE78);
      sub_24A08F2BC();
      return v19();
    case 2u:
      sub_24A0CC70C();
      sub_24A0CDEE8();
      sub_24A0CC758();
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      goto LABEL_5;
    case 3u:
      sub_24A0CC674();
      sub_24A0CDEE8();
      sub_24A0CC6C0();
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      goto LABEL_5;
    default:
      sub_24A0CC7F0();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      sub_24A08DF34(&qword_26975DE80);
      sub_24A0CC91C(&qword_26975E0D8, &qword_26975E0E0);
      KeyedEncodingContainer.encode<A>(_:forKey:)();
LABEL_5:
      sub_24A08F2BC();
      v15();
      sub_24A08F2BC();
      v16();
      return swift_bridgeObjectRelease();
  }
}

Swift::Int UploadResponseMessage.hashValue.getter()
{
  Hasher.init(_seed:)();
  UploadResponseMessage.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t UploadResponseMessage.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v73 = a2;
  uint64_t v76 = sub_24A08DF34(&qword_26975E0E8);
  sub_24A08F24C();
  uint64_t v72 = v5;
  MEMORY[0x270FA5388](v6);
  sub_24A0CDF44(v7, v62);
  uint64_t v68 = sub_24A08DF34(&qword_26975E0F0);
  sub_24A08F24C();
  uint64_t v71 = v8;
  MEMORY[0x270FA5388](v9);
  sub_24A08F2E0();
  uint64_t v74 = v10;
  sub_24A08DF34(&qword_26975E0F8);
  sub_24A08F24C();
  uint64_t v69 = v12;
  uint64_t v70 = v11;
  MEMORY[0x270FA5388](v11);
  sub_24A08F2E0();
  uint64_t v75 = v13;
  uint64_t v80 = sub_24A08DF34(&qword_26975E100);
  sub_24A08F24C();
  uint64_t v67 = v14;
  MEMORY[0x270FA5388](v15);
  sub_24A0CDF28(v16, v62);
  uint64_t v79 = sub_24A08DF34(&qword_26975E108);
  sub_24A08F24C();
  uint64_t v77 = v17;
  MEMORY[0x270FA5388](v18);
  sub_24A093CD4();
  uint64_t v21 = v20 - v19;
  uint64_t v78 = type metadata accessor for UploadResponseMessage();
  sub_24A08F280();
  MEMORY[0x270FA5388](v22);
  sub_24A0CDF7C();
  uint64_t v24 = MEMORY[0x270FA5388](v23);
  uint64_t v26 = (char *)&v62 - v25;
  uint64_t v27 = MEMORY[0x270FA5388](v24);
  uint64_t v29 = (char *)&v62 - v28;
  MEMORY[0x270FA5388](v27);
  sub_24A0CDFF4();
  MEMORY[0x270FA5388](v30);
  uint64_t v32 = (char *)&v62 - v31;
  uint64_t v81 = a1;
  uint64_t v33 = (void *)sub_24A0CDFA4();
  sub_24A08DF78(v33, v34);
  sub_24A0CC628();
  uint64_t v35 = (uint64_t)v82;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v35)
  {
    uint64_t v66 = v29;
    uint64_t v63 = v26;
    uint64_t v64 = v2;
    uint64_t v65 = v3;
    uint64_t v36 = v79;
    uint64_t v82 = v32;
    uint64_t v37 = v78;
    uint64_t v38 = KeyedDecodingContainer.allKeys.getter();
    uint64_t v39 = *(void *)(v38 + 16);
    if (v39
      && (uint64_t v62 = 0,
          uint64_t v40 = *(unsigned __int8 *)(v38 + 32),
          sub_24A0B2390(1, v39, v38, v38 + 32, 0, (2 * v39) | 1),
          uint64_t v42 = v41,
          unint64_t v44 = v43,
          swift_bridgeObjectRelease(),
          v42 == v44 >> 1))
    {
      switch(v40)
      {
        case 1:
          LOBYTE(v83) = 1;
          sub_24A0CC7A4();
          sub_24A0CDE80();
          sub_24A08DF34(&qword_26975DE78);
          sub_24A0CC8D4(&qword_26975E120);
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          sub_24A0CE044();
          sub_24A08F2BC();
          v52();
          swift_unknownObjectRelease();
          sub_24A08F2BC();
          v53();
          uint64_t v51 = v66;
          sub_24A0CDF98();
          break;
        case 2:
          LOBYTE(v83) = 2;
          sub_24A0CC70C();
          sub_24A0CDE80();
          sub_24A0CC888();
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          sub_24A0CDFC8();
          sub_24A08F2BC();
          v54();
          swift_unknownObjectRelease();
          uint64_t v55 = sub_24A0CDED0();
          v56(v55);
          uint64_t v51 = v63;
          void *v63 = v83;
          sub_24A0CDF98();
          break;
        case 3:
          LOBYTE(v83) = 3;
          sub_24A0CC674();
          sub_24A0CDE80();
          sub_24A0CC83C();
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          sub_24A0CE030();
          sub_24A08F2BC();
          v57();
          swift_unknownObjectRelease();
          uint64_t v58 = sub_24A0CDED0();
          v59(v58);
          uint64_t v51 = v65;
          *uint64_t v65 = v83;
          sub_24A0CDF98();
          break;
        default:
          LOBYTE(v83) = 0;
          sub_24A0CC7F0();
          sub_24A0CDE80();
          sub_24A08DF34(&qword_26975DE80);
          sub_24A0CC91C(&qword_26975E128, &qword_26975E130);
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          sub_24A0CE008();
          sub_24A08F2BC();
          v49();
          swift_unknownObjectRelease();
          sub_24A08F2BC();
          v50();
          uint64_t v51 = v64;
          *uint64_t v64 = v83;
          sub_24A0CDF98();
          break;
      }
      swift_storeEnumTagMultiPayload();
      uint64_t v60 = (uint64_t)v51;
      uint64_t v61 = (uint64_t)v82;
      sub_24A0CDE1C(v60, (uint64_t)v82, (void (*)(void))type metadata accessor for UploadResponseMessage);
      sub_24A0CDE1C(v61, v73, (void (*)(void))type metadata accessor for UploadResponseMessage);
    }
    else
    {
      uint64_t v45 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v47 = v46;
      sub_24A08DF34(&qword_26975D980);
      *uint64_t v47 = v37;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v45 - 8) + 104))(v47, *MEMORY[0x263F8DCB0], v45);
      swift_willThrow();
      swift_unknownObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v21, v36);
    }
  }
  return sub_24A08E050(v81);
}

Swift::Int sub_24A0CC550()
{
  Hasher.init(_seed:)();
  UploadResponseMessage.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t sub_24A0CC58C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return UploadResponseMessage.init(from:)(a1, a2);
}

uint64_t sub_24A0CC5A4(void *a1)
{
  return UploadResponseMessage.encode(to:)(a1);
}

uint64_t sub_24A0CC5C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A08DF34(&qword_26975DE78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_24A0CC628()
{
  unint64_t result = qword_26975E098;
  if (!qword_26975E098)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E098);
  }
  return result;
}

unint64_t sub_24A0CC674()
{
  unint64_t result = qword_26975E0A0;
  if (!qword_26975E0A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E0A0);
  }
  return result;
}

unint64_t sub_24A0CC6C0()
{
  unint64_t result = qword_26975E0A8;
  if (!qword_26975E0A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E0A8);
  }
  return result;
}

unint64_t sub_24A0CC70C()
{
  unint64_t result = qword_26975E0B0;
  if (!qword_26975E0B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E0B0);
  }
  return result;
}

unint64_t sub_24A0CC758()
{
  unint64_t result = qword_26975E0B8;
  if (!qword_26975E0B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E0B8);
  }
  return result;
}

unint64_t sub_24A0CC7A4()
{
  unint64_t result = qword_26975E0C0;
  if (!qword_26975E0C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E0C0);
  }
  return result;
}

unint64_t sub_24A0CC7F0()
{
  unint64_t result = qword_26975E0D0;
  if (!qword_26975E0D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E0D0);
  }
  return result;
}

unint64_t sub_24A0CC83C()
{
  unint64_t result = qword_26975E110;
  if (!qword_26975E110)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E110);
  }
  return result;
}

unint64_t sub_24A0CC888()
{
  unint64_t result = qword_26975E118;
  if (!qword_26975E118)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E118);
  }
  return result;
}

uint64_t sub_24A0CC8D4(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_24A08E008(&qword_26975DE78);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24A0CC91C(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_24A08E008(&qword_26975DE80);
    sub_24A0CDD80(a2, (void (*)(uint64_t))type metadata accessor for AssetSkeleton);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24A0CC9B0()
{
  return sub_24A0CDD80(&qword_26975E138, (void (*)(uint64_t))type metadata accessor for UploadResponseMessage);
}

uint64_t *initializeBufferWithCopyOfBuffer for UploadResponseMessage(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v6 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v6 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v7 = type metadata accessor for Asset(0);
        if (_s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)a2, 1, v7))
        {
          uint64_t v8 = sub_24A08DF34(&qword_26975DE78);
          memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
        }
        else
        {
          uint64_t v9 = type metadata accessor for URL();
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
          uint64_t v10 = (int *)type metadata accessor for Asset.ID(0);
          uint64_t v11 = v10[5];
          uint64_t v12 = (uint64_t *)((char *)a1 + v11);
          uint64_t v13 = (uint64_t *)((char *)a2 + v11);
          uint64_t v14 = v13[1];
          *uint64_t v12 = *v13;
          v12[1] = v14;
          uint64_t v15 = v10[6];
          uint64_t v16 = (uint64_t *)((char *)a1 + v15);
          uint64_t v17 = (uint64_t *)((char *)a2 + v15);
          uint64_t v18 = *v17;
          unint64_t v19 = v17[1];
          swift_bridgeObjectRetain();
          sub_24A08DE84(v18, v19);
          *uint64_t v16 = v18;
          v16[1] = v19;
          uint64_t v20 = v10[7];
          uint64_t v21 = (uint64_t *)((char *)a1 + v20);
          uint64_t v22 = (uint64_t *)((char *)a2 + v20);
          uint64_t v23 = *v22;
          unint64_t v24 = v22[1];
          sub_24A08DE84(*v22, v24);
          *uint64_t v21 = v23;
          v21[1] = v24;
          uint64_t v25 = *(int *)(v7 + 20);
          uint64_t v26 = (uint64_t *)((char *)a1 + v25);
          uint64_t v27 = (char *)a2 + v25;
          uint64_t v28 = *(uint64_t *)((char *)a2 + v25);
          unint64_t v29 = *(uint64_t *)((char *)a2 + v25 + 8);
          sub_24A08DE84(v28, v29);
          *uint64_t v26 = v28;
          v26[1] = v29;
          uint64_t v30 = *((void *)v27 + 2);
          unint64_t v31 = *((void *)v27 + 3);
          sub_24A08DE84(v30, v31);
          v26[2] = v30;
          v26[3] = v31;
          *(uint64_t *)((char *)a1 + *(int *)(v7 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(v7 + 24));
          _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)a1, 0, 1, v7);
        }
        break;
      default:
        *a1 = *a2;
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for UploadResponseMessage(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
    case 2:
    case 3:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    case 1:
      uint64_t v3 = type metadata accessor for Asset(0);
      uint64_t result = _s10CloudAsset21UploadResponseMessageOwet_0(a1, 1, v3);
      if (!result)
      {
        uint64_t v4 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
        uint64_t v5 = type metadata accessor for Asset.ID(0);
        swift_bridgeObjectRelease();
        sub_24A08DEDC(*(void *)(a1 + *(int *)(v5 + 24)), *(void *)(a1 + *(int *)(v5 + 24) + 8));
        sub_24A08DEDC(*(void *)(a1 + *(int *)(v5 + 28)), *(void *)(a1 + *(int *)(v5 + 28) + 8));
        uint64_t v6 = (uint64_t *)(a1 + *(int *)(v3 + 20));
        sub_24A08DEDC(*v6, v6[1]);
        uint64_t v7 = v6[2];
        unint64_t v8 = v6[3];
        uint64_t result = sub_24A08DEDC(v7, v8);
      }
      break;
    default:
      return result;
  }
  return result;
}

void *initializeWithCopy for UploadResponseMessage(void *a1, void *a2)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v4 = type metadata accessor for Asset(0);
      if (_s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)a2, 1, v4))
      {
        uint64_t v5 = sub_24A08DF34(&qword_26975DE78);
        memcpy(a1, a2, *(void *)(*(void *)(v5 - 8) + 64));
      }
      else
      {
        uint64_t v6 = type metadata accessor for URL();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        uint64_t v7 = (int *)type metadata accessor for Asset.ID(0);
        uint64_t v8 = v7[5];
        uint64_t v9 = (void *)((char *)a1 + v8);
        uint64_t v10 = (void *)((char *)a2 + v8);
        uint64_t v11 = v10[1];
        *uint64_t v9 = *v10;
        v9[1] = v11;
        uint64_t v12 = v7[6];
        uint64_t v13 = (void *)((char *)a1 + v12);
        uint64_t v14 = (void *)((char *)a2 + v12);
        uint64_t v15 = *v14;
        unint64_t v16 = v14[1];
        swift_bridgeObjectRetain();
        sub_24A08DE84(v15, v16);
        uint64_t *v13 = v15;
        v13[1] = v16;
        uint64_t v17 = v7[7];
        uint64_t v18 = (void *)((char *)a1 + v17);
        unint64_t v19 = (void *)((char *)a2 + v17);
        uint64_t v20 = *v19;
        unint64_t v21 = v19[1];
        sub_24A08DE84(*v19, v21);
        *uint64_t v18 = v20;
        v18[1] = v21;
        uint64_t v22 = *(int *)(v4 + 20);
        uint64_t v23 = (void *)((char *)a1 + v22);
        unint64_t v24 = (char *)a2 + v22;
        uint64_t v25 = *(void *)((char *)a2 + v22);
        unint64_t v26 = *(void *)((char *)a2 + v22 + 8);
        sub_24A08DE84(v25, v26);
        *uint64_t v23 = v25;
        v23[1] = v26;
        uint64_t v27 = *((void *)v24 + 2);
        unint64_t v28 = *((void *)v24 + 3);
        sub_24A08DE84(v27, v28);
        v23[2] = v27;
        v23[3] = v28;
        *(void *)((char *)a1 + *(int *)(v4 + 24)) = *(void *)((char *)a2 + *(int *)(v4 + 24));
        _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)a1, 0, 1, v4);
      }
      break;
    default:
      *a1 = *a2;
      swift_bridgeObjectRetain();
      break;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for UploadResponseMessage(void *a1, void *a2)
{
  if (a1 != a2)
  {
    sub_24A0CDDC8((uint64_t)a1, (void (*)(void))type metadata accessor for UploadResponseMessage);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v4 = type metadata accessor for Asset(0);
        if (_s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)a2, 1, v4))
        {
          uint64_t v5 = sub_24A08DF34(&qword_26975DE78);
          memcpy(a1, a2, *(void *)(*(void *)(v5 - 8) + 64));
        }
        else
        {
          uint64_t v6 = type metadata accessor for URL();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
          uint64_t v7 = (int *)type metadata accessor for Asset.ID(0);
          uint64_t v8 = v7[5];
          uint64_t v9 = (void *)((char *)a1 + v8);
          uint64_t v10 = (void *)((char *)a2 + v8);
          *uint64_t v9 = *v10;
          v9[1] = v10[1];
          uint64_t v11 = v7[6];
          uint64_t v12 = (void *)((char *)a1 + v11);
          uint64_t v13 = (void *)((char *)a2 + v11);
          uint64_t v14 = *v13;
          unint64_t v15 = v13[1];
          swift_bridgeObjectRetain();
          sub_24A08DE84(v14, v15);
          *uint64_t v12 = v14;
          v12[1] = v15;
          uint64_t v16 = v7[7];
          uint64_t v17 = (void *)((char *)a1 + v16);
          uint64_t v18 = (void *)((char *)a2 + v16);
          uint64_t v19 = *v18;
          unint64_t v20 = v18[1];
          sub_24A08DE84(*v18, v20);
          *uint64_t v17 = v19;
          v17[1] = v20;
          uint64_t v21 = *(int *)(v4 + 20);
          uint64_t v22 = (void *)((char *)a1 + v21);
          uint64_t v23 = (char *)a2 + v21;
          uint64_t v24 = *(void *)((char *)a2 + v21);
          unint64_t v25 = *(void *)((char *)a2 + v21 + 8);
          sub_24A08DE84(v24, v25);
          *uint64_t v22 = v24;
          v22[1] = v25;
          uint64_t v26 = *((void *)v23 + 2);
          unint64_t v27 = *((void *)v23 + 3);
          sub_24A08DE84(v26, v27);
          v22[2] = v26;
          v22[3] = v27;
          *(void *)((char *)a1 + *(int *)(v4 + 24)) = *(void *)((char *)a2 + *(int *)(v4 + 24));
          _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)a1, 0, 1, v4);
        }
        break;
      default:
        *a1 = *a2;
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *initializeWithTake for UploadResponseMessage(char *a1, char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for Asset(0);
    if (_s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)a2, 1, v6))
    {
      uint64_t v7 = sub_24A08DF34(&qword_26975DE78);
      memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
    }
    else
    {
      uint64_t v8 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
      uint64_t v9 = (int *)type metadata accessor for Asset.ID(0);
      *(_OWORD *)&a1[v9[5]] = *(_OWORD *)&a2[v9[5]];
      *(_OWORD *)&a1[v9[6]] = *(_OWORD *)&a2[v9[6]];
      *(_OWORD *)&a1[v9[7]] = *(_OWORD *)&a2[v9[7]];
      uint64_t v10 = *(int *)(v6 + 20);
      uint64_t v11 = &a1[v10];
      uint64_t v12 = &a2[v10];
      long long v13 = *((_OWORD *)v12 + 1);
      *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
      *((_OWORD *)v11 + 1) = v13;
      *(void *)&a1[*(int *)(v6 + 24)] = *(void *)&a2[*(int *)(v6 + 24)];
      _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)a1, 0, 1, v6);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

char *assignWithTake for UploadResponseMessage(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_24A0CDDC8((uint64_t)a1, (void (*)(void))type metadata accessor for UploadResponseMessage);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for Asset(0);
      if (_s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)a2, 1, v6))
      {
        uint64_t v7 = sub_24A08DF34(&qword_26975DE78);
        memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
      }
      else
      {
        uint64_t v8 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
        uint64_t v9 = (int *)type metadata accessor for Asset.ID(0);
        *(_OWORD *)&a1[v9[5]] = *(_OWORD *)&a2[v9[5]];
        *(_OWORD *)&a1[v9[6]] = *(_OWORD *)&a2[v9[6]];
        *(_OWORD *)&a1[v9[7]] = *(_OWORD *)&a2[v9[7]];
        uint64_t v10 = *(int *)(v6 + 20);
        uint64_t v11 = &a1[v10];
        uint64_t v12 = &a2[v10];
        long long v13 = *((_OWORD *)v12 + 1);
        *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
        *((_OWORD *)v11 + 1) = v13;
        *(void *)&a1[*(int *)(v6 + 24)] = *(void *)&a2[*(int *)(v6 + 24)];
        _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)a1, 0, 1, v6);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_24A0CD54C()
{
  return swift_storeEnumTagMultiPayload();
}

void sub_24A0CD55C()
{
  sub_24A0CD5F8();
  if (v0 <= 0x3F) {
    swift_initEnumMetadataMultiPayload();
  }
}

void sub_24A0CD5F8()
{
  if (!qword_26975E150)
  {
    type metadata accessor for Asset(255);
    sub_24A0CDD80(&qword_26975D398, (void (*)(uint64_t))type metadata accessor for Asset);
    sub_24A0CDD80(&qword_26975D368, (void (*)(uint64_t))type metadata accessor for Asset);
    unint64_t v0 = type metadata accessor for XPCResult();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26975E150);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for UploadResponseMessage.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24A0CD790);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UploadResponseMessage.CodingKeys()
{
  return &type metadata for UploadResponseMessage.CodingKeys;
}

ValueMetadata *type metadata accessor for UploadResponseMessage.EphemeralAssetCodingKeys()
{
  return &type metadata for UploadResponseMessage.EphemeralAssetCodingKeys;
}

ValueMetadata *type metadata accessor for UploadResponseMessage.PersistedAssetCodingKeys()
{
  return &type metadata for UploadResponseMessage.PersistedAssetCodingKeys;
}

ValueMetadata *type metadata accessor for UploadResponseMessage.SignalCodingKeys()
{
  return &type metadata for UploadResponseMessage.SignalCodingKeys;
}

unsigned char *_s10CloudAsset21UploadResponseMessageO24EphemeralAssetCodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x24A0CD898);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for UploadResponseMessage.SimultaneousTransferErrorCodingKeys()
{
  return &type metadata for UploadResponseMessage.SimultaneousTransferErrorCodingKeys;
}

unint64_t sub_24A0CD8D4()
{
  unint64_t result = qword_26975E158;
  if (!qword_26975E158)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E158);
  }
  return result;
}

unint64_t sub_24A0CD924()
{
  unint64_t result = qword_26975E160;
  if (!qword_26975E160)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E160);
  }
  return result;
}

unint64_t sub_24A0CD974()
{
  unint64_t result = qword_26975E168;
  if (!qword_26975E168)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E168);
  }
  return result;
}

unint64_t sub_24A0CD9C4()
{
  unint64_t result = qword_26975E170;
  if (!qword_26975E170)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E170);
  }
  return result;
}

unint64_t sub_24A0CDA14()
{
  unint64_t result = qword_26975E178;
  if (!qword_26975E178)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E178);
  }
  return result;
}

unint64_t sub_24A0CDA64()
{
  unint64_t result = qword_26975E180;
  if (!qword_26975E180)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E180);
  }
  return result;
}

unint64_t sub_24A0CDAB4()
{
  unint64_t result = qword_26975E188;
  if (!qword_26975E188)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E188);
  }
  return result;
}

unint64_t sub_24A0CDB04()
{
  unint64_t result = qword_26975E190;
  if (!qword_26975E190)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E190);
  }
  return result;
}

unint64_t sub_24A0CDB54()
{
  unint64_t result = qword_26975E198;
  if (!qword_26975E198)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E198);
  }
  return result;
}

unint64_t sub_24A0CDBA4()
{
  unint64_t result = qword_26975E1A0;
  if (!qword_26975E1A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E1A0);
  }
  return result;
}

unint64_t sub_24A0CDBF4()
{
  unint64_t result = qword_26975E1A8;
  if (!qword_26975E1A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E1A8);
  }
  return result;
}

unint64_t sub_24A0CDC44()
{
  unint64_t result = qword_26975E1B0;
  if (!qword_26975E1B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E1B0);
  }
  return result;
}

unint64_t sub_24A0CDC94()
{
  unint64_t result = qword_26975E1B8;
  if (!qword_26975E1B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E1B8);
  }
  return result;
}

unint64_t sub_24A0CDCE4()
{
  unint64_t result = qword_26975E1C0;
  if (!qword_26975E1C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E1C0);
  }
  return result;
}

unint64_t sub_24A0CDD34()
{
  unint64_t result = qword_26975E1C8;
  if (!qword_26975E1C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E1C8);
  }
  return result;
}

uint64_t sub_24A0CDD80(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24A0CDDC8(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_24A08F280();
  sub_24A08F2BC();
  v3();
  return a1;
}

uint64_t sub_24A0CDE1C(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_24A08F280();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t sub_24A0CDE80()
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t sub_24A0CDED0()
{
  return v0;
}

uint64_t sub_24A0CDEE8()
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t sub_24A0CDF08(uint64_t a1)
{
  return _s10CloudAsset21UploadResponseMessageOwet_0(a1, 1, v1);
}

void sub_24A0CDF28(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 176) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void sub_24A0CDF44(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 152) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_24A0CDF98()
{
  return v0;
}

uint64_t sub_24A0CDFA4()
{
  return v0;
}

uint64_t sub_24A0CDFC8()
{
  return v0;
}

uint64_t sub_24A0CDFDC()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t sub_24A0CE008()
{
  return v0;
}

uint64_t sub_24A0CE030()
{
  return v0;
}

uint64_t sub_24A0CE044()
{
  return v0;
}

void UploadRequestMessage.hash(into:)()
{
  Hasher._combine(_:)(*(unsigned __int8 *)(v0 + 8));
  sub_24A0B19B8();
}

uint64_t static UploadRequestMessage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 8) & 1) == 0)
  {
    if ((*(unsigned char *)(a2 + 8) & 1) == 0) {
      goto LABEL_3;
    }
LABEL_5:
    char v3 = 0;
    return v3 & 1;
  }
  if ((*(unsigned char *)(a2 + 8) & 1) == 0) {
    goto LABEL_5;
  }
LABEL_3:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_24A0AEBE4();
  char v3 = v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t sub_24A0CE120(uint64_t a1)
{
  unint64_t v2 = sub_24A0CEC28();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A0CE15C(uint64_t a1)
{
  unint64_t v2 = sub_24A0CEC28();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_24A0CE198(uint64_t a1)
{
  unint64_t v2 = sub_24A0CEB90();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A0CE1D4(uint64_t a1)
{
  unint64_t v2 = sub_24A0CEB90();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_24A0CE210(uint64_t a1)
{
  unint64_t v2 = sub_24A0CEBDC();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A0CE24C(uint64_t a1)
{
  unint64_t v2 = sub_24A0CEBDC();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t UploadRequestMessage.encode(to:)(void *a1)
{
  sub_24A08DF34(&qword_26975E1E0);
  sub_24A08F24C();
  uint64_t v22 = v5;
  uint64_t v23 = v4;
  MEMORY[0x270FA5388](v4);
  sub_24A093CD4();
  uint64_t v8 = v7 - v6;
  sub_24A08DF34(&qword_26975E1E8);
  sub_24A08F24C();
  uint64_t v20 = v10;
  uint64_t v21 = v9;
  MEMORY[0x270FA5388](v9);
  sub_24A093CD4();
  uint64_t v13 = v12 - v11;
  sub_24A08DF34(&qword_26975E1F0);
  sub_24A08F24C();
  uint64_t v15 = v14;
  MEMORY[0x270FA5388](v16);
  sub_24A0B28D0();
  char v17 = *(unsigned char *)(v1 + 8);
  uint64_t v18 = a1[3];
  sub_24A08DF78(a1, v18);
  sub_24A0CEB90();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v17)
  {
    sub_24A0CEBDC();
    sub_24A0B2908();
    sub_24A08DF34(&qword_26975E208);
    sub_24A0CEC74(&qword_26975E210, &qword_26975E218);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v8, v23);
  }
  else
  {
    sub_24A0CEC28();
    sub_24A0B2908();
    sub_24A08DF34(&qword_26975E208);
    sub_24A0CEC74(&qword_26975E210, &qword_26975E218);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v13, v21);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v2, v18);
}

Swift::Int UploadRequestMessage.hashValue.getter()
{
  Swift::UInt v1 = *(unsigned __int8 *)(v0 + 8);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  sub_24A0B19B8();
  return Hasher._finalize()();
}

uint64_t UploadRequestMessage.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_24A08DF34(&qword_26975E228);
  sub_24A08F24C();
  MEMORY[0x270FA5388](v3);
  sub_24A0B28D0();
  sub_24A08DF34(&qword_26975E230);
  sub_24A08F24C();
  MEMORY[0x270FA5388](v4);
  sub_24A093CD4();
  uint64_t v5 = sub_24A08DF34(&qword_26975E238);
  sub_24A08F24C();
  uint64_t v36 = v6;
  MEMORY[0x270FA5388](v7);
  sub_24A093CD4();
  uint64_t v10 = v9 - v8;
  sub_24A08DF78(a1, a1[3]);
  sub_24A0CEB90();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v37) {
    goto LABEL_10;
  }
  uint64_t v11 = KeyedDecodingContainer.allKeys.getter();
  uint64_t v12 = *(void *)(v11 + 16);
  if (!v12)
  {
    uint64_t v13 = v5;
    uint64_t v20 = v36;
LABEL_8:
    uint64_t v21 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v23 = v22;
    sub_24A08DF34(&qword_26975D980);
    *uint64_t v23 = &type metadata for UploadRequestMessage;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v21 - 8) + 104))(v23, *MEMORY[0x263F8DCB0], v21);
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v10, v13);
LABEL_10:
    uint64_t v24 = (uint64_t)a1;
    return sub_24A08E050(v24);
  }
  uint64_t v13 = v5;
  char v14 = *(unsigned char *)(v11 + 32);
  sub_24A0B2390(1, v12, v11, v11 + 32, 0, (2 * v12) | 1);
  uint64_t v16 = v15;
  unint64_t v18 = v17;
  swift_bridgeObjectRelease();
  if (v16 != v18 >> 1)
  {
    uint64_t v20 = v36;
    goto LABEL_8;
  }
  char v19 = v14;
  if (v14)
  {
    LOBYTE(v38) = 1;
    sub_24A0CEBDC();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    sub_24A08DF34(&qword_26975E208);
    sub_24A0CEC74(&qword_26975E240, &qword_26975E248);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v26 = sub_24A0CF310();
    v27(v26);
    swift_unknownObjectRelease();
    uint64_t v28 = sub_24A0B2624();
    v29(v28);
    uint64_t v30 = v38;
    char v19 = v14;
  }
  else
  {
    LOBYTE(v38) = 0;
    sub_24A0CEC28();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    sub_24A08DF34(&qword_26975E208);
    sub_24A0CEC74(&qword_26975E240, &qword_26975E248);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v31 = sub_24A0CF32C();
    v32(v31);
    swift_unknownObjectRelease();
    uint64_t v33 = sub_24A0B2624();
    v34(v33);
    uint64_t v30 = v38;
  }
  *(void *)a2 = v30;
  *(unsigned char *)(a2 + 8) = v19;
  uint64_t v24 = (uint64_t)a1;
  return sub_24A08E050(v24);
}

Swift::Int sub_24A0CEB00()
{
  Swift::UInt v1 = *(unsigned __int8 *)(v0 + 8);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  sub_24A0B19B8();
  return Hasher._finalize()();
}

uint64_t sub_24A0CEB5C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return UploadRequestMessage.init(from:)(a1, a2);
}

uint64_t sub_24A0CEB74(void *a1)
{
  return UploadRequestMessage.encode(to:)(a1);
}

unint64_t sub_24A0CEB90()
{
  unint64_t result = qword_26975E1F8;
  if (!qword_26975E1F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E1F8);
  }
  return result;
}

unint64_t sub_24A0CEBDC()
{
  unint64_t result = qword_26975E200;
  if (!qword_26975E200)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E200);
  }
  return result;
}

unint64_t sub_24A0CEC28()
{
  unint64_t result = qword_26975E220;
  if (!qword_26975E220)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E220);
  }
  return result;
}

uint64_t sub_24A0CEC74(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_24A08E008(&qword_26975E208);
    sub_24A0CECF4(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24A0CECF4(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for AssetUploadRequest();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_24A0CED3C()
{
  unint64_t result = qword_26975E250;
  if (!qword_26975E250)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E250);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for UploadRequestMessage(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for UploadRequestMessage(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for UploadRequestMessage(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for UploadRequestMessage()
{
  return &type metadata for UploadRequestMessage;
}

unsigned char *storeEnumTagSinglePayload for UploadRequestMessage.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24A0CEF1CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UploadRequestMessage.CodingKeys()
{
  return &type metadata for UploadRequestMessage.CodingKeys;
}

ValueMetadata *type metadata accessor for UploadRequestMessage.BatchRequestsCodingKeys()
{
  return &type metadata for UploadRequestMessage.BatchRequestsCodingKeys;
}

unsigned char *_s10CloudAsset20UploadRequestMessageO23BatchRequestsCodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x24A0CF004);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for UploadRequestMessage.StreamRequestsCodingKeys()
{
  return &type metadata for UploadRequestMessage.StreamRequestsCodingKeys;
}

unint64_t sub_24A0CF040()
{
  unint64_t result = qword_26975E258;
  if (!qword_26975E258)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E258);
  }
  return result;
}

unint64_t sub_24A0CF090()
{
  unint64_t result = qword_26975E260;
  if (!qword_26975E260)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E260);
  }
  return result;
}

unint64_t sub_24A0CF0E0()
{
  unint64_t result = qword_26975E268;
  if (!qword_26975E268)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E268);
  }
  return result;
}

unint64_t sub_24A0CF130()
{
  unint64_t result = qword_26975E270;
  if (!qword_26975E270)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E270);
  }
  return result;
}

unint64_t sub_24A0CF180()
{
  unint64_t result = qword_26975E278;
  if (!qword_26975E278)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E278);
  }
  return result;
}

unint64_t sub_24A0CF1D0()
{
  unint64_t result = qword_26975E280;
  if (!qword_26975E280)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E280);
  }
  return result;
}

unint64_t sub_24A0CF220()
{
  unint64_t result = qword_26975E288;
  if (!qword_26975E288)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E288);
  }
  return result;
}

unint64_t sub_24A0CF270()
{
  unint64_t result = qword_26975E290;
  if (!qword_26975E290)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E290);
  }
  return result;
}

unint64_t sub_24A0CF2C0()
{
  unint64_t result = qword_26975E298;
  if (!qword_26975E298)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E298);
  }
  return result;
}

uint64_t sub_24A0CF310()
{
  return v0;
}

uint64_t sub_24A0CF32C()
{
  return v0;
}

uint64_t sub_24A0CF348(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000011 && a2 == 0x800000024A0EF030
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v5 = a1 == 0x6552746C75736572 && a2 == 0xEE00646576696563;
    if (v5 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x65526C616E676973 && a2 == 0xEE00646576696563)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v7) {
        return 2;
      }
      else {
        return 3;
      }
    }
  }
}

uint64_t sub_24A0CF4D4()
{
  return 3;
}

uint64_t sub_24A0CF4DC(char a1)
{
  if (!a1) {
    return 0xD000000000000011;
  }
  if (a1 == 1) {
    return 0x6552746C75736572;
  }
  return 0x65526C616E676973;
}

uint64_t sub_24A0CF550()
{
  return sub_24A0CF4DC(*v0);
}

uint64_t sub_24A0CF558@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_24A0CF348(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_24A0CF580@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_24A0CF4D4();
  *a1 = result;
  return result;
}

uint64_t sub_24A0CF5A8(uint64_t a1)
{
  unint64_t v2 = sub_24A0CFC24();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A0CF5E4(uint64_t a1)
{
  unint64_t v2 = sub_24A0CFC24();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_24A0CF620(uint64_t a1)
{
  unint64_t v2 = sub_24A0CFD20();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A0CF65C(uint64_t a1)
{
  unint64_t v2 = sub_24A0CFD20();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_24A0CF698(uint64_t a1)
{
  unint64_t v2 = sub_24A0CFCD4();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A0CF6D4(uint64_t a1)
{
  unint64_t v2 = sub_24A0CFCD4();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_24A0CF710(uint64_t a1)
{
  unint64_t v2 = sub_24A0CFDCC();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A0CF74C(uint64_t a1)
{
  unint64_t v2 = sub_24A0CFDCC();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t AssetUploadEvent.encode(to:)(void *a1)
{
  sub_24A08DF34(&qword_26975E2A0);
  sub_24A08F24C();
  MEMORY[0x270FA5388](v2);
  sub_24A0D16C4(v3, v23);
  sub_24A08DF34(&qword_26975E2A8);
  sub_24A08F24C();
  MEMORY[0x270FA5388](v4);
  sub_24A08F2E0();
  sub_24A08DF34(&qword_26975DE78);
  sub_24A08F280();
  MEMORY[0x270FA5388](v5);
  sub_24A093CD4();
  uint64_t v8 = v7 - v6;
  sub_24A08DF34(&qword_26975E2B0);
  sub_24A08F24C();
  MEMORY[0x270FA5388](v9);
  sub_24A0D169C();
  sub_24A08F280();
  MEMORY[0x270FA5388](v10);
  sub_24A093CD4();
  uint64_t v13 = v12 - v11;
  sub_24A08DF34(&qword_26975E2B8);
  sub_24A08F24C();
  MEMORY[0x270FA5388](v14);
  sub_24A093CD4();
  sub_24A08DF78(a1, a1[3]);
  sub_24A0CFC24();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_24A0CFC70(v24, v13);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_24A0CC5C0(v13, v8);
      sub_24A0CFD20();
      sub_24A0D16F8();
      sub_24A0CC8D4(&qword_26975E0C8);
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      sub_24A08F2BC();
      v16();
      sub_24A0CFD6C(v8);
      sub_24A08F2BC();
      return v17();
    }
    sub_24A0CFCD4();
    sub_24A0D16F8();
    sub_24A0CC758();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    sub_24A08F2BC();
    v21();
    sub_24A08F2BC();
    v22();
  }
  else
  {
    sub_24A0CFDCC();
    sub_24A0D16F8();
    sub_24A08DF34(&qword_26975DE80);
    sub_24A0D0590(&qword_26975E0D8, &qword_26975E0E0);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    sub_24A08F2BC();
    v19();
    sub_24A08F2BC();
    v20();
  }
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for AssetUploadEvent()
{
  uint64_t result = qword_26975E300;
  if (!qword_26975E300) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_24A0CFC24()
{
  unint64_t result = qword_26975E2C0;
  if (!qword_26975E2C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E2C0);
  }
  return result;
}

uint64_t sub_24A0CFC70(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AssetUploadEvent();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_24A0CFCD4()
{
  unint64_t result = qword_26975E2C8;
  if (!qword_26975E2C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E2C8);
  }
  return result;
}

unint64_t sub_24A0CFD20()
{
  unint64_t result = qword_26975E2D0;
  if (!qword_26975E2D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E2D0);
  }
  return result;
}

uint64_t sub_24A0CFD6C(uint64_t a1)
{
  uint64_t v2 = sub_24A08DF34(&qword_26975DE78);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_24A0CFDCC()
{
  unint64_t result = qword_26975E2D8;
  if (!qword_26975E2D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E2D8);
  }
  return result;
}

uint64_t AssetUploadEvent.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v68 = a2;
  uint64_t v67 = sub_24A08DF34(&qword_26975E2E0);
  sub_24A08F24C();
  uint64_t v65 = v4;
  MEMORY[0x270FA5388](v5);
  sub_24A08F2E0();
  uint64_t v70 = v6;
  uint64_t v73 = sub_24A08DF34(&qword_26975E2E8);
  sub_24A08F24C();
  uint64_t v64 = v7;
  MEMORY[0x270FA5388](v8);
  sub_24A0D16C4(v9, v57);
  uint64_t v66 = sub_24A08DF34(&qword_26975E2F0);
  sub_24A08F24C();
  uint64_t v63 = v10;
  MEMORY[0x270FA5388](v11);
  sub_24A08F2E0();
  uint64_t v69 = v12;
  sub_24A08DF34(&qword_26975E2F8);
  sub_24A08F24C();
  uint64_t v71 = v14;
  uint64_t v72 = v13;
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = sub_24A0D169C();
  sub_24A08F280();
  uint64_t v17 = MEMORY[0x270FA5388](v16);
  char v19 = (char *)&v57 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x270FA5388](v17);
  uint64_t v22 = (char *)&v57 - v21;
  uint64_t v23 = MEMORY[0x270FA5388](v20);
  unint64_t v25 = (char *)&v57 - v24;
  MEMORY[0x270FA5388](v23);
  unint64_t v27 = (char *)&v57 - v26;
  uint64_t v28 = a1[3];
  uint64_t v74 = a1;
  sub_24A08DF78(a1, v28);
  sub_24A0CFC24();
  uint64_t v29 = v75;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v29)
  {
    uint64_t v30 = (uint64_t)v74;
  }
  else
  {
    uint64_t v58 = v25;
    uint64_t v59 = v19;
    uint64_t v60 = v27;
    uint64_t v61 = v22;
    uint64_t v31 = v72;
    uint64_t v75 = v15;
    uint64_t v32 = KeyedDecodingContainer.allKeys.getter();
    uint64_t v33 = *(void *)(v32 + 16);
    uint64_t v62 = v2;
    if (v33
      && (int v34 = *(unsigned __int8 *)(v32 + 32),
          sub_24A0B2390(1, v33, v32, v32 + 32, 0, (2 * v33) | 1),
          uint64_t v36 = v35,
          unint64_t v38 = v37,
          swift_bridgeObjectRelease(),
          v36 == v38 >> 1))
    {
      if (v34)
      {
        if (v34 == 1)
        {
          LOBYTE(v76) = 1;
          sub_24A0CFD20();
          sub_24A0D1674();
          sub_24A08DF34(&qword_26975DE78);
          sub_24A0CC8D4(&qword_26975E120);
          sub_24A0D172C();
          uint64_t v30 = (uint64_t)v74;
          sub_24A08F2BC();
          v46();
          swift_unknownObjectRelease();
          uint64_t v47 = sub_24A0D16E0();
          v48(v47);
          uint64_t v49 = v61;
        }
        else
        {
          LOBYTE(v76) = 2;
          sub_24A0CFCD4();
          sub_24A0D1674();
          sub_24A0CC888();
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          uint64_t v30 = (uint64_t)v74;
          sub_24A08F2BC();
          v53();
          swift_unknownObjectRelease();
          sub_24A08F2BC();
          v54();
          uint64_t v49 = v59;
          *uint64_t v59 = v76;
        }
      }
      else
      {
        LOBYTE(v76) = 0;
        sub_24A0CFDCC();
        sub_24A0D1674();
        sub_24A08DF34(&qword_26975DE80);
        sub_24A0D0590(&qword_26975E128, &qword_26975E130);
        sub_24A0D172C();
        uint64_t v30 = (uint64_t)v74;
        sub_24A08F2BC();
        v50();
        swift_unknownObjectRelease();
        uint64_t v51 = sub_24A0D1714();
        v52(v51);
        uint64_t v49 = v58;
        *uint64_t v58 = v76;
      }
      swift_storeEnumTagMultiPayload();
      uint64_t v55 = (uint64_t)v49;
      uint64_t v56 = (uint64_t)v60;
      sub_24A0D052C(v55, (uint64_t)v60);
      sub_24A0D052C(v56, v68);
    }
    else
    {
      uint64_t v30 = (uint64_t)v74;
      uint64_t v39 = v75;
      uint64_t v40 = v71;
      uint64_t v41 = type metadata accessor for DecodingError();
      swift_allocError();
      unint64_t v43 = v42;
      sub_24A08DF34(&qword_26975D980);
      *unint64_t v43 = v39;
      uint64_t v44 = v62;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v41 - 8) + 104))(v43, *MEMORY[0x263F8DCB0], v41);
      swift_willThrow();
      swift_unknownObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v44, v31);
    }
  }
  return sub_24A08E050(v30);
}

uint64_t sub_24A0D04FC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return AssetUploadEvent.init(from:)(a1, a2);
}

uint64_t sub_24A0D0514(void *a1)
{
  return AssetUploadEvent.encode(to:)(a1);
}

uint64_t sub_24A0D052C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AssetUploadEvent();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_24A0D0590(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_24A08E008(&qword_26975DE80);
    sub_24A0D0FE8(a2, (void (*)(uint64_t))type metadata accessor for AssetSkeleton);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AssetUploadEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for Asset(0);
      if (_s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)a2, 1, v6))
      {
        uint64_t v7 = sub_24A08DF34(&qword_26975DE78);
        memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
      }
      else
      {
        uint64_t v9 = type metadata accessor for URL();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
        uint64_t v10 = (int *)type metadata accessor for Asset.ID(0);
        uint64_t v11 = v10[5];
        uint64_t v12 = (uint64_t *)((char *)a1 + v11);
        uint64_t v13 = (uint64_t *)((char *)a2 + v11);
        uint64_t v14 = v13[1];
        *uint64_t v12 = *v13;
        v12[1] = v14;
        uint64_t v15 = v10[6];
        uint64_t v16 = (uint64_t *)((char *)a1 + v15);
        uint64_t v17 = (uint64_t *)((char *)a2 + v15);
        uint64_t v18 = *v17;
        unint64_t v19 = v17[1];
        swift_bridgeObjectRetain();
        sub_24A08DE84(v18, v19);
        *uint64_t v16 = v18;
        v16[1] = v19;
        uint64_t v20 = v10[7];
        uint64_t v21 = (uint64_t *)((char *)a1 + v20);
        uint64_t v22 = (uint64_t *)((char *)a2 + v20);
        uint64_t v23 = *v22;
        unint64_t v24 = v22[1];
        sub_24A08DE84(*v22, v24);
        *uint64_t v21 = v23;
        v21[1] = v24;
        uint64_t v25 = *(int *)(v6 + 20);
        uint64_t v26 = (uint64_t *)((char *)a1 + v25);
        unint64_t v27 = (char *)a2 + v25;
        uint64_t v28 = *(uint64_t *)((char *)a2 + v25);
        unint64_t v29 = *(uint64_t *)((char *)a2 + v25 + 8);
        sub_24A08DE84(v28, v29);
        *uint64_t v26 = v28;
        v26[1] = v29;
        uint64_t v30 = *((void *)v27 + 2);
        unint64_t v31 = *((void *)v27 + 3);
        sub_24A08DE84(v30, v31);
        v26[2] = v30;
        v26[3] = v31;
        *(uint64_t *)((char *)a1 + *(int *)(v6 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(v6 + 24));
        _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)a1, 0, 1, v6);
      }
    }
    else
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for AssetUploadEvent(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2)
  {
LABEL_4:
    return swift_bridgeObjectRelease();
  }
  if (result != 1)
  {
    if (result) {
      return result;
    }
    goto LABEL_4;
  }
  uint64_t v3 = type metadata accessor for Asset(0);
  uint64_t result = _s10CloudAsset21UploadResponseMessageOwet_0(a1, 1, v3);
  if (!result)
  {
    uint64_t v4 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
    uint64_t v5 = type metadata accessor for Asset.ID(0);
    swift_bridgeObjectRelease();
    sub_24A08DEDC(*(void *)(a1 + *(int *)(v5 + 24)), *(void *)(a1 + *(int *)(v5 + 24) + 8));
    sub_24A08DEDC(*(void *)(a1 + *(int *)(v5 + 28)), *(void *)(a1 + *(int *)(v5 + 28) + 8));
    uint64_t v6 = (uint64_t *)(a1 + *(int *)(v3 + 20));
    sub_24A08DEDC(*v6, v6[1]);
    uint64_t v7 = v6[2];
    unint64_t v8 = v6[3];
    return sub_24A08DEDC(v7, v8);
  }
  return result;
}

void *initializeWithCopy for AssetUploadEvent(void *a1, void *a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for Asset(0);
    if (_s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)a2, 1, v4))
    {
      uint64_t v5 = sub_24A08DF34(&qword_26975DE78);
      memcpy(a1, a2, *(void *)(*(void *)(v5 - 8) + 64));
    }
    else
    {
      uint64_t v6 = type metadata accessor for URL();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      uint64_t v7 = (int *)type metadata accessor for Asset.ID(0);
      uint64_t v8 = v7[5];
      uint64_t v9 = (void *)((char *)a1 + v8);
      uint64_t v10 = (void *)((char *)a2 + v8);
      uint64_t v11 = v10[1];
      *uint64_t v9 = *v10;
      v9[1] = v11;
      uint64_t v12 = v7[6];
      uint64_t v13 = (void *)((char *)a1 + v12);
      uint64_t v14 = (void *)((char *)a2 + v12);
      uint64_t v15 = *v14;
      unint64_t v16 = v14[1];
      swift_bridgeObjectRetain();
      sub_24A08DE84(v15, v16);
      uint64_t *v13 = v15;
      v13[1] = v16;
      uint64_t v17 = v7[7];
      uint64_t v18 = (void *)((char *)a1 + v17);
      unint64_t v19 = (void *)((char *)a2 + v17);
      uint64_t v20 = *v19;
      unint64_t v21 = v19[1];
      sub_24A08DE84(*v19, v21);
      *uint64_t v18 = v20;
      v18[1] = v21;
      uint64_t v22 = *(int *)(v4 + 20);
      uint64_t v23 = (void *)((char *)a1 + v22);
      unint64_t v24 = (char *)a2 + v22;
      uint64_t v25 = *(void *)((char *)a2 + v22);
      unint64_t v26 = *(void *)((char *)a2 + v22 + 8);
      sub_24A08DE84(v25, v26);
      *uint64_t v23 = v25;
      v23[1] = v26;
      uint64_t v27 = *((void *)v24 + 2);
      unint64_t v28 = *((void *)v24 + 3);
      sub_24A08DE84(v27, v28);
      v23[2] = v27;
      v23[3] = v28;
      *(void *)((char *)a1 + *(int *)(v4 + 24)) = *(void *)((char *)a2 + *(int *)(v4 + 24));
      _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)a1, 0, 1, v4);
    }
  }
  else
  {
    *a1 = *a2;
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for AssetUploadEvent(void *a1, void *a2)
{
  if (a1 != a2)
  {
    sub_24A0D0D7C((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v4 = type metadata accessor for Asset(0);
      if (_s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)a2, 1, v4))
      {
        uint64_t v5 = sub_24A08DF34(&qword_26975DE78);
        memcpy(a1, a2, *(void *)(*(void *)(v5 - 8) + 64));
      }
      else
      {
        uint64_t v6 = type metadata accessor for URL();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        uint64_t v7 = (int *)type metadata accessor for Asset.ID(0);
        uint64_t v8 = v7[5];
        uint64_t v9 = (void *)((char *)a1 + v8);
        uint64_t v10 = (void *)((char *)a2 + v8);
        *uint64_t v9 = *v10;
        v9[1] = v10[1];
        uint64_t v11 = v7[6];
        uint64_t v12 = (void *)((char *)a1 + v11);
        uint64_t v13 = (void *)((char *)a2 + v11);
        uint64_t v14 = *v13;
        unint64_t v15 = v13[1];
        swift_bridgeObjectRetain();
        sub_24A08DE84(v14, v15);
        *uint64_t v12 = v14;
        v12[1] = v15;
        uint64_t v16 = v7[7];
        uint64_t v17 = (void *)((char *)a1 + v16);
        uint64_t v18 = (void *)((char *)a2 + v16);
        uint64_t v19 = *v18;
        unint64_t v20 = v18[1];
        sub_24A08DE84(*v18, v20);
        *uint64_t v17 = v19;
        v17[1] = v20;
        uint64_t v21 = *(int *)(v4 + 20);
        uint64_t v22 = (void *)((char *)a1 + v21);
        uint64_t v23 = (char *)a2 + v21;
        uint64_t v24 = *(void *)((char *)a2 + v21);
        unint64_t v25 = *(void *)((char *)a2 + v21 + 8);
        sub_24A08DE84(v24, v25);
        *uint64_t v22 = v24;
        v22[1] = v25;
        uint64_t v26 = *((void *)v23 + 2);
        unint64_t v27 = *((void *)v23 + 3);
        sub_24A08DE84(v26, v27);
        v22[2] = v26;
        v22[3] = v27;
        *(void *)((char *)a1 + *(int *)(v4 + 24)) = *(void *)((char *)a2 + *(int *)(v4 + 24));
        _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)a1, 0, 1, v4);
      }
    }
    else
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_24A0D0D7C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AssetUploadEvent();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *assignWithTake for AssetUploadEvent(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_24A0D0D7C((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for Asset(0);
      if (_s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)a2, 1, v6))
      {
        uint64_t v7 = sub_24A08DF34(&qword_26975DE78);
        memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
      }
      else
      {
        uint64_t v8 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
        uint64_t v9 = (int *)type metadata accessor for Asset.ID(0);
        *(_OWORD *)&a1[v9[5]] = *(_OWORD *)&a2[v9[5]];
        *(_OWORD *)&a1[v9[6]] = *(_OWORD *)&a2[v9[6]];
        *(_OWORD *)&a1[v9[7]] = *(_OWORD *)&a2[v9[7]];
        uint64_t v10 = *(int *)(v6 + 20);
        uint64_t v11 = &a1[v10];
        uint64_t v12 = &a2[v10];
        long long v13 = *((_OWORD *)v12 + 1);
        *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
        *((_OWORD *)v11 + 1) = v13;
        *(void *)&a1[*(int *)(v6 + 24)] = *(void *)&a2[*(int *)(v6 + 24)];
        _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)a1, 0, 1, v6);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

void sub_24A0D0F50()
{
  sub_24A0CD5F8();
  if (v0 <= 0x3F) {
    swift_initEnumMetadataMultiPayload();
  }
}

uint64_t sub_24A0D0FE8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AssetUploadEvent.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFE)
  {
    if (a2 + 2 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 2) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 3;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v5 = v6 - 3;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for AssetUploadEvent.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24A0D1184);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AssetUploadEvent.CodingKeys()
{
  return &type metadata for AssetUploadEvent.CodingKeys;
}

ValueMetadata *type metadata accessor for AssetUploadEvent.SkeletonsReceivedCodingKeys()
{
  return &type metadata for AssetUploadEvent.SkeletonsReceivedCodingKeys;
}

ValueMetadata *type metadata accessor for AssetUploadEvent.ResultReceivedCodingKeys()
{
  return &type metadata for AssetUploadEvent.ResultReceivedCodingKeys;
}

unsigned char *_s10CloudAsset16AssetUploadEventO27SkeletonsReceivedCodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x24A0D127CLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for AssetUploadEvent.SignalReceivedCodingKeys()
{
  return &type metadata for AssetUploadEvent.SignalReceivedCodingKeys;
}

unint64_t sub_24A0D12B8()
{
  unint64_t result = qword_26975E310;
  if (!qword_26975E310)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E310);
  }
  return result;
}

unint64_t sub_24A0D1308()
{
  unint64_t result = qword_26975E318;
  if (!qword_26975E318)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E318);
  }
  return result;
}

unint64_t sub_24A0D1358()
{
  unint64_t result = qword_26975E320;
  if (!qword_26975E320)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E320);
  }
  return result;
}

unint64_t sub_24A0D13A8()
{
  unint64_t result = qword_26975E328;
  if (!qword_26975E328)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E328);
  }
  return result;
}

unint64_t sub_24A0D13F8()
{
  unint64_t result = qword_26975E330;
  if (!qword_26975E330)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E330);
  }
  return result;
}

unint64_t sub_24A0D1448()
{
  unint64_t result = qword_26975E338;
  if (!qword_26975E338)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E338);
  }
  return result;
}

unint64_t sub_24A0D1498()
{
  unint64_t result = qword_26975E340;
  if (!qword_26975E340)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E340);
  }
  return result;
}

unint64_t sub_24A0D14E8()
{
  unint64_t result = qword_26975E348;
  if (!qword_26975E348)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E348);
  }
  return result;
}

unint64_t sub_24A0D1538()
{
  unint64_t result = qword_26975E350;
  if (!qword_26975E350)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E350);
  }
  return result;
}

unint64_t sub_24A0D1588()
{
  unint64_t result = qword_26975E358;
  if (!qword_26975E358)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E358);
  }
  return result;
}

unint64_t sub_24A0D15D8()
{
  unint64_t result = qword_26975E360;
  if (!qword_26975E360)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E360);
  }
  return result;
}

unint64_t sub_24A0D1628()
{
  unint64_t result = qword_26975E368;
  if (!qword_26975E368)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E368);
  }
  return result;
}

uint64_t sub_24A0D1674()
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t sub_24A0D169C()
{
  return type metadata accessor for AssetUploadEvent();
}

void sub_24A0D16C4(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 136) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_24A0D16E0()
{
  return v0;
}

uint64_t sub_24A0D16F8()
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t sub_24A0D1714()
{
  return v0;
}

uint64_t sub_24A0D172C()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t XPCMessageSender.__allocating_init(machServiceName:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  XPCMessageSender.init(machServiceName:)(a1, a2);
  return v4;
}

uint64_t sub_24A0D17A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  if (_s10CloudAsset21UploadResponseMessageOwet_0(a1, 1, v6) == 1)
  {
    sub_24A0C8A04(a1, &qword_26975DE98);
  }
  else
  {
    TaskPriority.rawValue.getter();
    sub_24A08F2BC();
    v7();
  }
  if (*(void *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_24A0D1910@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *MEMORY[0x263F8F680];
  sub_24A08E008(&qword_26975D5B0);
  uint64_t v3 = type metadata accessor for AsyncThrowingStream.Continuation.BufferingPolicy();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104);
  return v4(a1, v2, v3);
}

void sub_24A0D19AC()
{
  sub_24A0AAFDC();
  uint64_t v31 = v1;
  uint64_t v32 = v0;
  uint64_t v29 = v2;
  uint64_t v30 = v3;
  sub_24A08E008(&qword_26975D5B0);
  uint64_t v33 = type metadata accessor for AsyncThrowingStream.Continuation();
  sub_24A0B6C48();
  uint64_t v5 = v4;
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x270FA5388](v8);
  unint64_t v27 = (char *)&v27 - v9;
  uint64_t v10 = type metadata accessor for UUID();
  sub_24A0B6C48();
  uint64_t v12 = v11;
  uint64_t v14 = *(void *)(v13 + 64);
  uint64_t v16 = MEMORY[0x270FA5388](v15);
  MEMORY[0x270FA5388](v16);
  uint64_t v28 = (uint64_t)&v27 - v17;
  uint64_t v18 = *(void (**)(void))(v12 + 16);
  sub_24A0D70B0();
  v18();
  sub_24A0C9454();
  v19();
  sub_24A0D70B0();
  v18();
  unint64_t v20 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v21 = (v7 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = (*(unsigned __int8 *)(v12 + 80) + v21 + 8) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v23 = swift_allocObject();
  uint64_t v24 = v31;
  *(void *)(v23 + 16) = v30;
  *(void *)(v23 + 24) = v24;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v23 + v20, v27, v33);
  *(void *)(v23 + v21) = v32;
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v23 + v22, (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  swift_beginAccess();
  swift_retain();
  uint64_t v25 = v23;
  uint64_t v26 = v28;
  sub_24A0D62CC((uint64_t)sub_24A0D6078, v25, v28);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v26, v10);
  swift_endAccess();
  sub_24A0AB030();
}

uint64_t sub_24A0D1C10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x270FA5388](a1);
  sub_24A08E008(&qword_26975D5B0);
  uint64_t v7 = type metadata accessor for AsyncThrowingStream.Continuation.YieldResult();
  uint64_t v18 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)v17 - v8;
  uint64_t v10 = (uint64_t *)(a1 + *(int *)(type metadata accessor for XPCAsyncSequenceResponse() + 20));
  unint64_t v11 = v10[1];
  if (v11 >> 60 == 11)
  {
    sub_24A0C87B4();
    uint64_t v12 = swift_allocError();
    unsigned char *v13 = 1;
    uint64_t v19 = v12;
  }
  else
  {
    if (v11 >> 60 != 15)
    {
      v17[1] = a4;
      v17[2] = a2;
      uint64_t v16 = *v10;
      type metadata accessor for JSONDecoder();
      swift_allocObject();
      sub_24A08DE84(v16, v11);
      JSONDecoder.init()();
      dispatch thunk of JSONDecoder.decode<A>(_:from:)();
      swift_release();
      type metadata accessor for AsyncThrowingStream.Continuation();
      AsyncThrowingStream.Continuation.yield(_:)();
      sub_24A0C8810(v16, v11);
      return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v9, v7);
    }
    uint64_t v19 = 0;
  }
  type metadata accessor for AsyncThrowingStream.Continuation();
  AsyncThrowingStream.Continuation.finish(throwing:)();
  swift_beginAccess();
  uint64_t v14 = sub_24A0D6158(a4);
  uint64_t result = swift_endAccess();
  if (v14) {
    return sub_24A0C8800(v14);
  }
  return result;
}

uint64_t sub_24A0D1F3C(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  uint64_t v4 = *(void *)(v1 + 112);
  if (*(void *)(v4 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v5 = sub_24A0D5CFC(a1);
    if (v6)
    {
      uint64_t v7 = *(void (**)(uint64_t))(*(void *)(v4 + 56) + 16 * v5);
      swift_retain_n();
      swift_bridgeObjectRelease();
      v7(a1);
      return swift_release_n();
    }
    else
    {
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_24A0D1FE8()
{
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return MEMORY[0x270FA2418](v0);
}

uint64_t sub_24A0D2020()
{
  return v0;
}

uint64_t sub_24A0D2030()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_24A0A8044(v0, qword_26975E370);
  sub_24A0A800C(v0, (uint64_t)qword_26975E370);
  type metadata accessor for XPCMessageSender();
  sub_24A08DF34(&qword_26975E3D0);
  String.init<A>(describing:)();
  return Logger.init(subsystem:category:)();
}

uint64_t XPCMessageSender.init(machServiceName:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  type metadata accessor for XPCMessageSender.AsyncSequenceDispatcher();
  uint64_t v6 = swift_allocObject();
  swift_defaultActor_initialize();
  type metadata accessor for UUID();
  sub_24A08DF34(&qword_26975E388);
  sub_24A0D65E8(&qword_26975D340, MEMORY[0x263F07508]);
  *(void *)(v6 + 112) = Dictionary.init(dictionaryLiteral:)();
  *(void *)(v3 + 56) = v6;
  uint64_t v7 = type metadata accessor for XPCSessionCacheImplementation();
  swift_allocObject();
  swift_retain_n();
  uint64_t v8 = sub_24A0DC324(a1, a2, (uint64_t)sub_24A0D23D8, v6);
  uint64_t v11 = v7;
  uint64_t v12 = &off_26FDF19A8;
  swift_release();
  *(void *)&long long v10 = v8;
  sub_24A0C2DF8(&v10, v3 + 16);
  return v3;
}

uint64_t type metadata accessor for XPCMessageSender.AsyncSequenceDispatcher()
{
  return self;
}

double sub_24A0D2244@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for XPCAsyncSequenceResponse();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v9 = sub_24A08DF34(&qword_26975DE98);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for TaskPriority();
  _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)v11, 1, 1, v12);
  sub_24A0D6BDC(a1, (uint64_t)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v13 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v14 = (void *)swift_allocObject();
  void v14[2] = 0;
  v14[3] = 0;
  v14[4] = a2;
  sub_24A0D6D44((uint64_t)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v14 + v13);
  swift_retain();
  sub_24A0D17A4((uint64_t)v11, (uint64_t)&unk_26975E418, (uint64_t)v14);
  swift_release();
  *(void *)(a3 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  return result;
}

double sub_24A0D23D8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24A0D2244(a1, v2, a2);
}

uint64_t sub_24A0D23E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return MEMORY[0x270FA2498](sub_24A0D2400, a4, 0);
}

uint64_t sub_24A0D2400()
{
  sub_24A0B3914();
  sub_24A0D1F3C(*(void *)(v0 + 24));
  sub_24A0B3920();
  return v1();
}

uint64_t XPCMessageSender.deinit()
{
  uint64_t v1 = sub_24A08DF34(&qword_26975DE98);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for TaskPriority();
  _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)v3, 1, 1, v4);
  sub_24A0D578C(v0 + 16, (uint64_t)v8);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = 0;
  *(void *)(v5 + 24) = 0;
  sub_24A0C2DF8(v8, v5 + 32);
  sub_24A0D17A4((uint64_t)v3, (uint64_t)&unk_26975E398, v5);
  swift_release();
  sub_24A08E050(v0 + 16);
  swift_release();
  return v0;
}

uint64_t sub_24A0D2558(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return MEMORY[0x270FA2498](sub_24A0D2578, 0, 0);
}

uint64_t sub_24A0D2578()
{
  sub_24A0B3914();
  uint64_t v1 = sub_24A08DF78(*(void **)(v0 + 16), *(void *)(*(void *)(v0 + 16) + 24));
  *(void *)(v0 + 24) = v1;
  uint64_t v2 = *v1;
  return MEMORY[0x270FA2498](sub_24A0D25E4, v2, 0);
}

uint64_t sub_24A0D25E4()
{
  sub_24A0B3914();
  sub_24A0DC95C();
  sub_24A0B3920();
  return v0();
}

uint64_t XPCMessageSender.__deallocating_deinit()
{
  XPCMessageSender.deinit();
  return MEMORY[0x270FA0228](v0, 64, 7);
}

uint64_t XPCMessageSender.send<A, B>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_24A0D6ED8(a1, a2, a3, a4, a5, a6);
  *(void *)(v6 + 72) = v7;
  sub_24A0C9144();
  return MEMORY[0x270FA2498](v8, v9, v10);
}

uint64_t sub_24A0D26A4()
{
  sub_24A0B3940();
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = swift_task_alloc();
  *(void *)(v0 + 80) = v4;
  long long v5 = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v4 + 32) = v5;
  *(void *)(v4 + 48) = v2;
  *(void *)(v4 + 56) = v3;
  *(void *)(v4 + 64) = v1;
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_24A0D279C;
  sub_24A0C9144();
  return MEMORY[0x270FA2360]();
}

uint64_t sub_24A0D279C()
{
  sub_24A0B3914();
  sub_24A0B38DC();
  uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_24A0B394C();
  *long long v5 = v4;
  *(void *)(v3 + 96) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_24A0C9144();
    return MEMORY[0x270FA2498](v6, v7, v8);
  }
  else
  {
    swift_task_dealloc();
    sub_24A0B3920();
    return v9();
  }
}

uint64_t sub_24A0D28A0()
{
  sub_24A0B3914();
  swift_task_dealloc();
  sub_24A0B3920();
  return v0();
}

uint64_t sub_24A0D28FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v35 = a8;
  uint64_t v36 = a7;
  uint64_t v33 = a6;
  uint64_t v34 = a2;
  uint64_t v37 = a4;
  uint64_t v32 = a1;
  sub_24A08E008(&qword_26975D5B0);
  uint64_t v10 = type metadata accessor for CheckedContinuation();
  uint64_t v30 = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  uint64_t v13 = MEMORY[0x270FA5388](v10);
  uint64_t v15 = (char *)&v30 - v14;
  uint64_t v31 = (char *)&v30 - v14;
  uint64_t v16 = *(void *)(a5 - 8);
  uint64_t v17 = *(void *)(v16 + 64);
  MEMORY[0x270FA5388](v13);
  uint64_t v18 = (char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_24A08DF34(&qword_26975DE98);
  MEMORY[0x270FA5388](v19 - 8);
  unint64_t v21 = (char *)&v30 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for TaskPriority();
  _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)v21, 1, 1, v22);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a3, a5);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v15, v32, v10);
  unint64_t v23 = (*(unsigned __int8 *)(v16 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  unint64_t v24 = (v17 + v23 + *(unsigned __int8 *)(v11 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v25 = (char *)swift_allocObject();
  *((void *)v25 + 2) = 0;
  *((void *)v25 + 3) = 0;
  uint64_t v26 = v33;
  uint64_t v27 = v34;
  *((void *)v25 + 4) = a5;
  *((void *)v25 + 5) = v26;
  uint64_t v28 = v35;
  *((void *)v25 + 6) = v36;
  *((void *)v25 + 7) = v28;
  *((void *)v25 + 8) = v27;
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(&v25[v23], v18, a5);
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v25[v24], v31, v30);
  *(void *)&v25[(v12 + v24 + 7) & 0xFFFFFFFFFFFFFFF8] = v37;
  swift_retain();
  sub_24A0D17A4((uint64_t)v21, (uint64_t)&unk_26975E3E0, (uint64_t)v25);
  return swift_release();
}

uint64_t sub_24A0D2BD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[20] = v14;
  v8[21] = v15;
  v8[18] = a8;
  v8[19] = v13;
  v8[16] = a6;
  v8[17] = a7;
  v8[14] = a4;
  v8[15] = a5;
  sub_24A08E008(&qword_26975D5B0);
  uint64_t v9 = type metadata accessor for CheckedContinuation();
  v8[22] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v8[23] = v10;
  v8[24] = *(void *)(v10 + 64);
  v8[25] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_24A0D2CCC, 0, 0);
}

uint64_t sub_24A0D2CCC()
{
  sub_24A0B3914();
  sub_24A0D578C(v0[14] + 16, (uint64_t)(v0 + 2));
  uint64_t v1 = sub_24A08DF78(v0 + 2, v0[5]);
  v0[26] = v1;
  uint64_t v2 = *v1;
  return MEMORY[0x270FA2498](sub_24A0D2D4C, v2, 0);
}

uint64_t sub_24A0D2D4C()
{
  sub_24A0B3940();
  *(void *)(v0 + 216) = sub_24A0DC454();
  *(void *)(v0 + 224) = 0;
  sub_24A0C9144();
  return MEMORY[0x270FA2498](v1, v2, v3);
}

uint64_t sub_24A0D2DD4()
{
  uint64_t v22 = *(void *)(v0 + 224);
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v20 = *(void *)(v0 + 200);
  uint64_t v2 = *(void *)(v0 + 184);
  uint64_t v19 = *(void *)(v0 + 176);
  uint64_t v4 = *(void *)(v0 + 160);
  uint64_t v3 = *(void *)(v0 + 168);
  uint64_t v6 = *(void *)(v0 + 144);
  uint64_t v5 = *(void *)(v0 + 152);
  uint64_t v21 = *(void *)(v0 + 136);
  sub_24A0C9454();
  v7();
  uint64_t v23 = v0 + 16;
  sub_24A0D578C(v0 + 16, v0 + 56);
  unint64_t v8 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v9 = (v1 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = (char *)swift_allocObject();
  *((void *)v10 + 2) = v6;
  *((void *)v10 + 3) = v5;
  *((void *)v10 + 4) = v4;
  *((void *)v10 + 5) = v3;
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 32))(&v10[v8], v20, v19);
  sub_24A0C2DF8((long long *)(v0 + 56), (uint64_t)&v10[v9]);
  *(void *)&v10[(v9 + 47) & 0xFFFFFFFFFFFFFFF8] = v21;
  dispatch thunk of XPCSession.send<A, B>(_:replyHandler:)();
  if (v22)
  {
    swift_release();
    swift_release();
    sub_24A08E050(v23);
    *(void *)(v0 + 96) = v22;
    MEMORY[0x24C5BB8B0](v22);
    CheckedContinuation.resume(throwing:)();
    if (qword_26975D330 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_24A0A800C(v11, (uint64_t)qword_26975E370);
    MEMORY[0x24C5BB8B0](v22);
    MEMORY[0x24C5BB8B0](v22);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)sub_24A0D6FC4();
      uint64_t v15 = (void *)sub_24A0C93F0();
      *(_DWORD *)uint64_t v14 = 138412290;
      MEMORY[0x24C5BB8B0](v22);
      uint64_t v16 = _swift_stdlib_bridgeErrorToNSError();
      sub_24A0D6F74(v16);
      void *v15 = v10;
      MEMORY[0x24C5BB8A0](v22);
      MEMORY[0x24C5BB8A0](v22);
      _os_log_impl(&dword_24A08B000, v12, v13, "received %@ in sending message", v14, 0xCu);
      sub_24A08DF34(&qword_26975DF20);
      swift_arrayDestroy();
      sub_24A0C912C();
      sub_24A0C912C();

      MEMORY[0x24C5BB8A0](v22);
    }
    else
    {
      MEMORY[0x24C5BB8A0](v22);
      MEMORY[0x24C5BB8A0](v22);
      MEMORY[0x24C5BB8A0](v22);
    }
  }
  else
  {
    swift_release();
    swift_release();
    sub_24A08E050(v23);
  }
  swift_task_dealloc();
  sub_24A0B3920();
  return v17();
}

uint64_t sub_24A0D30E8()
{
  uint64_t v2 = *(void *)(v0 + 224);
  sub_24A08E050(v0 + 16);
  *(void *)(v0 + 96) = v2;
  MEMORY[0x24C5BB8B0](v2);
  CheckedContinuation.resume(throwing:)();
  if (qword_26975D330 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_24A0A800C(v3, (uint64_t)qword_26975E370);
  MEMORY[0x24C5BB8B0](v2);
  MEMORY[0x24C5BB8B0](v2);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)sub_24A0D6FC4();
    uint64_t v7 = (void *)sub_24A0C93F0();
    *(_DWORD *)uint64_t v6 = 138412290;
    MEMORY[0x24C5BB8B0](v2);
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError();
    sub_24A0D6F74(v8);
    *uint64_t v7 = v1;
    MEMORY[0x24C5BB8A0](v2);
    MEMORY[0x24C5BB8A0](v2);
    _os_log_impl(&dword_24A08B000, v4, v5, "received %@ in sending message", v6, 0xCu);
    sub_24A08DF34(&qword_26975DF20);
    swift_arrayDestroy();
    sub_24A0C912C();
    sub_24A0C912C();

    MEMORY[0x24C5BB8A0](v2);
  }
  else
  {
    MEMORY[0x24C5BB8A0](v2);
    MEMORY[0x24C5BB8A0](v2);
    MEMORY[0x24C5BB8A0](v2);
  }
  swift_task_dealloc();
  sub_24A0B3920();
  return v9();
}

uint64_t sub_24A0D32D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v64 = a3;
  uint64_t v67 = a2;
  uint64_t v8 = sub_24A08DF34(&qword_26975DE98);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v65 = (uint64_t)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_24A08DF34(&qword_26975E3E8);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for XPCRichError();
  uint64_t v63 = *(void *)(v13 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v13);
  uint64_t v62 = (char *)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v66 = (char *)&v57 - v17;
  uint64_t v18 = *(void *)(a6 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v16);
  uint64_t v21 = (char *)&v57 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v23 = (char *)&v57 - v22;
  uint64_t v24 = sub_24A08E008(&qword_26975D5B0);
  uint64_t v25 = type metadata accessor for Result();
  MEMORY[0x270FA5388](v25);
  uint64_t v27 = (uint8_t **)((char *)&v57 - v26);
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))((char *)&v57 - v26, a1, v25);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *(void *)&v68[0] = *v27;
    uint64_t v29 = *(void *)&v68[0];
    MEMORY[0x24C5BB8B0](*(void *)&v68[0]);
    uint64_t v30 = v13;
    if (swift_dynamicCast())
    {
      uint64_t v60 = v24;
      _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)v12, 0, 1, v13);
      uint64_t v31 = v63;
      uint64_t v32 = v66;
      (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v66, v12, v13);
      if (qword_26975D330 != -1) {
        swift_once();
      }
      uint64_t v33 = type metadata accessor for Logger();
      sub_24A0A800C(v33, (uint64_t)qword_26975E370);
      uint64_t v34 = v62;
      uint64_t v61 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
      v61(v62, v32, v30);
      uint64_t v35 = Logger.logObject.getter();
      os_log_type_t v36 = static os_log_type_t.error.getter();
      BOOL v37 = os_log_type_enabled(v35, v36);
      uint64_t v59 = a6;
      if (v37)
      {
        uint64_t v38 = swift_slowAlloc();
        uint64_t v58 = v29;
        uint64_t v39 = (uint8_t *)v38;
        uint64_t v40 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v39 = 138412290;
        uint64_t v57 = v39 + 4;
        sub_24A0D65E8(&qword_26975DFB8, MEMORY[0x263F8F408]);
        swift_allocError();
        uint64_t v41 = v31;
        v61(v42, v34, v30);
        uint64_t v43 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)&v68[0] = v43;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v40 = v43;
        uint64_t v44 = *(void (**)(char *, uint64_t))(v41 + 8);
        v44(v34, v30);
        _os_log_impl(&dword_24A08B000, v35, v36, "received xpc error %@ from xpc session", v39, 0xCu);
        sub_24A08DF34(&qword_26975DF20);
        swift_arrayDestroy();
        MEMORY[0x24C5BBA10](v40, -1, -1);
        uint64_t v45 = v39;
        uint64_t v29 = v58;
        MEMORY[0x24C5BBA10](v45, -1, -1);
      }
      else
      {
        uint64_t v44 = *(void (**)(char *, uint64_t))(v31 + 8);
        v44(v34, v30);
      }

      uint64_t v51 = type metadata accessor for TaskPriority();
      uint64_t v52 = v65;
      _s10CloudAsset21UploadResponseMessageOwst_0(v65, 1, 1, v51);
      sub_24A0D578C(v64, (uint64_t)v68);
      uint64_t v53 = swift_allocObject();
      *(void *)(v53 + 16) = 0;
      *(void *)(v53 + 24) = 0;
      sub_24A0C2DF8(v68, v53 + 32);
      sub_24A0BCB44(v52, (uint64_t)&unk_26975E3F8, v53);
      swift_release();
      sub_24A0D65E8(&qword_26975DFB8, MEMORY[0x263F8F408]);
      uint64_t v54 = swift_allocError();
      uint64_t v55 = v66;
      v61(v56, v66, v30);
      *(void *)&v68[0] = v54;
      type metadata accessor for CheckedContinuation();
      CheckedContinuation.resume(throwing:)();
      MEMORY[0x24C5BB8A0](v29);
      return ((uint64_t (*)(char *, uint64_t))v44)(v55, v30);
    }
    else
    {
      _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)v12, 1, 1, v13);
      sub_24A0C8A04((uint64_t)v12, &qword_26975E3E8);
      if (qword_26975D330 != -1) {
        swift_once();
      }
      uint64_t v47 = type metadata accessor for Logger();
      sub_24A0A800C(v47, (uint64_t)qword_26975E370);
      uint64_t v48 = Logger.logObject.getter();
      os_log_type_t v49 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v48, v49))
      {
        int v50 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)int v50 = 0;
        _os_log_impl(&dword_24A08B000, v48, v49, "error received from xpc session is not XPC error type.", v50, 2u);
        MEMORY[0x24C5BBA10](v50, -1, -1);
      }

      *(void *)&v68[0] = v29;
      type metadata accessor for CheckedContinuation();
      return CheckedContinuation.resume(throwing:)();
    }
  }
  else
  {
    (*(void (**)(char *, void *, uint64_t))(v18 + 32))(v23, v27, a6);
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v21, v23, a6);
    type metadata accessor for CheckedContinuation();
    CheckedContinuation.resume(returning:)();
    return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v23, a6);
  }
}

uint64_t sub_24A0D3AE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return MEMORY[0x270FA2498](sub_24A0D3B04, 0, 0);
}

uint64_t sub_24A0D3B04()
{
  sub_24A0B3914();
  uint64_t v1 = sub_24A08DF78(*(void **)(v0 + 16), *(void *)(*(void *)(v0 + 16) + 24));
  *(void *)(v0 + 24) = v1;
  uint64_t v2 = *v1;
  return MEMORY[0x270FA2498](sub_24A0D3B70, v2, 0);
}

uint64_t sub_24A0D3B70()
{
  sub_24A0B3914();
  sub_24A0DC378();
  sub_24A0C9194();
  return v0();
}

uint64_t XPCMessageSender.send<A, B>(_:)()
{
  sub_24A0B3940();
  sub_24A0D6ED8(v1, v2, v3, v4, v5, v6);
  v0[9] = v7;
  uint64_t v9 = *(void *)(v8 - 8);
  v0[10] = v9;
  v0[11] = *(void *)(v9 + 64);
  v0[12] = swift_task_alloc();
  sub_24A08DF34(&qword_26975DE98);
  v0[13] = swift_task_alloc();
  sub_24A08E008(&qword_26975D5B0);
  sub_24A0D709C();
  uint64_t v10 = type metadata accessor for AsyncThrowingStream.Continuation.BufferingPolicy();
  v0[14] = v10;
  sub_24A0B38FC(v10);
  v0[15] = v11;
  v0[16] = swift_task_alloc();
  sub_24A0D709C();
  uint64_t v12 = type metadata accessor for AsyncThrowingStream.Continuation();
  v0[17] = v12;
  sub_24A0B38FC(v12);
  v0[18] = v13;
  v0[19] = *(void *)(v14 + 64);
  v0[20] = swift_task_alloc();
  v0[21] = swift_task_alloc();
  sub_24A0C9144();
  return MEMORY[0x270FA2498](v15, v16, v17);
}

uint64_t sub_24A0D3D5C()
{
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v2 = *(void *)(v0 + 128);
  uint64_t v16 = *(void *)(v0 + 136);
  uint64_t v17 = *(void *)(v0 + 160);
  uint64_t v3 = *(void *)(v0 + 112);
  uint64_t v4 = *(void *)(v0 + 120);
  uint64_t v5 = *(void *)(v0 + 104);
  uint64_t v19 = *(void *)(v0 + 152);
  uint64_t v25 = *(void *)(v0 + 96);
  uint64_t v6 = *(void *)(v0 + 80);
  uint64_t v18 = *(void *)(v0 + 88);
  uint64_t v22 = *(void *)(v0 + 64);
  uint64_t v23 = *(void *)(v0 + 72);
  uint64_t v21 = *(void *)(v0 + 56);
  uint64_t v24 = *(void *)(v0 + 32);
  long long v20 = *(_OWORD *)(v0 + 40);
  sub_24A0D1910(v2);
  static AsyncThrowingStream.makeStream<>(of:throwing:bufferingPolicy:)();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  uint64_t v7 = type metadata accessor for TaskPriority();
  _s10CloudAsset21UploadResponseMessageOwst_0(v5, 1, 1, v7);
  sub_24A0C9454();
  v8();
  sub_24A0C9454();
  v9();
  unint64_t v10 = (*(unsigned __int8 *)(v1 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v11 = (v19 + *(unsigned __int8 *)(v6 + 80) + v10) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = 0;
  *(void *)(v12 + 24) = 0;
  *(void *)(v12 + 32) = v24;
  *(_OWORD *)(v12 + 40) = v20;
  *(void *)(v12 + 56) = v21;
  *(void *)(v12 + 64) = v22;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v1 + 32))(v12 + v10, v17, v16);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v6 + 32))(v12 + v11, v25, v24);
  *(void *)(v12 + ((v18 + v11 + 7) & 0xFFFFFFFFFFFFFFF8)) = v23;
  swift_retain();
  sub_24A0BCB44(v5, (uint64_t)&unk_26975E3B8, v12);
  swift_release();
  sub_24A0C9628();
  v13();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A0C9194();
  return v14();
}

uint64_t sub_24A0D3FDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 128) = v14;
  *(_OWORD *)(v8 + 112) = v13;
  *(void *)(v8 + 96) = a6;
  *(void *)(v8 + 104) = a8;
  *(void *)(v8 + 80) = a4;
  *(void *)(v8 + 88) = a5;
  uint64_t v9 = type metadata accessor for XPCRichError();
  *(void *)(v8 + 136) = v9;
  *(void *)(v8 + 144) = *(void *)(v9 - 8);
  *(void *)(v8 + 152) = swift_task_alloc();
  *(void *)(v8 + 160) = swift_task_alloc();
  *(void *)(v8 + 168) = swift_task_alloc();
  *(void *)(v8 + 176) = type metadata accessor for XPCAsyncSequenceRequest();
  *(void *)(v8 + 184) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for UUID();
  *(void *)(v8 + 192) = v10;
  *(void *)(v8 + 200) = *(void *)(v10 - 8);
  *(void *)(v8 + 208) = swift_task_alloc();
  *(void *)(v8 + 216) = swift_task_alloc();
  *(void *)(v8 + 224) = swift_task_alloc();
  *(void *)(v8 + 232) = swift_task_alloc();
  *(void *)(v8 + 240) = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_24A0D4190, 0, 0);
}

uint64_t sub_24A0D4190()
{
  sub_24A0B3914();
  uint64_t v1 = *(void *)(v0 + 80);
  UUID.init()();
  uint64_t v2 = *(void *)(v1 + 56);
  *(void *)(v0 + 248) = v2;
  return MEMORY[0x270FA2498](sub_24A0D41FC, v2, 0);
}

uint64_t sub_24A0D41FC()
{
  sub_24A0B3914();
  sub_24A0D19AC();
  sub_24A0C9144();
  return MEMORY[0x270FA2498](v0, v1, v2);
}

uint64_t sub_24A0D4268()
{
  sub_24A0B3914();
  uint64_t v1 = sub_24A08DF78((void *)(*(void *)(v0 + 80) + 16), *(void *)(*(void *)(v0 + 80) + 40));
  *(void *)(v0 + 256) = v1;
  uint64_t v2 = *v1;
  return MEMORY[0x270FA2498](sub_24A0D42D8, v2, 0);
}

uint64_t sub_24A0D42D8()
{
  sub_24A0B3940();
  *(void *)(v0 + 264) = sub_24A0DC454();
  *(void *)(v0 + 272) = 0;
  sub_24A0C9144();
  return MEMORY[0x270FA2498](v1, v2, v3);
}

uint64_t sub_24A0D4360()
{
  os_log_type_t v91 = v0;
  uint64_t v1 = v0[34];
  sub_24A0C9454();
  v2();
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  uint64_t v3 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  uint64_t v5 = v1;
  uint64_t v6 = v0[29];
  uint64_t v8 = v0[24];
  uint64_t v7 = v0[25];
  if (!v5)
  {
    uint64_t v10 = v3;
    uint64_t v11 = v4;
    uint64_t v13 = v0[22];
    uint64_t v12 = v0[23];
    swift_release();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v12, v6, v8);
    uint64_t v14 = (uint64_t *)(v12 + *(int *)(v13 + 20));
    *uint64_t v14 = v10;
    v14[1] = v11;
    sub_24A0D65E8(&qword_26975DFC8, (void (*)(uint64_t))type metadata accessor for XPCAsyncSequenceRequest);
    dispatch thunk of XPCSession.send<A>(_:)();
    uint64_t v74 = v0[30];
    uint64_t v75 = v0[24];
    uint64_t v76 = v0[25];
    uint64_t v77 = v0[23];
    swift_release();
    sub_24A09751C(v77);
    (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v74, v75);
    goto LABEL_21;
  }
  sub_24A0C9628();
  v9();
  swift_release();
  swift_release();
  v0[2] = v5;
  MEMORY[0x24C5BB8B0](v5);
  v0[35] = sub_24A08DF34(&qword_26975D5B0);
  if (!swift_dynamicCast())
  {
    MEMORY[0x24C5BB8A0](v0[2]);
    if (qword_26975D330 != -1) {
      swift_once();
    }
    uint64_t v46 = v0[30];
    uint64_t v48 = v0[25];
    uint64_t v47 = v0[26];
    uint64_t v49 = v0[24];
    uint64_t v50 = type metadata accessor for Logger();
    sub_24A0A800C(v50, (uint64_t)qword_26975E370);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 16))(v47, v46, v49);
    MEMORY[0x24C5BB8B0](v5);
    MEMORY[0x24C5BB8B0](v5);
    uint64_t v51 = Logger.logObject.getter();
    os_log_type_t v52 = static os_log_type_t.default.getter();
    uint64_t v53 = (void (*)(void))v52;
    BOOL v54 = os_log_type_enabled(v51, v52);
    uint64_t v55 = v5;
    uint64_t v56 = v0[25];
    if (v54)
    {
      loga = v51;
      uint64_t v57 = swift_slowAlloc();
      typea = (void *)sub_24A0C93F0();
      uint64_t v88 = sub_24A0C9298();
      v90[0] = v88;
      *(_DWORD *)uint64_t v57 = 136315394;
      sub_24A0D65E8(&qword_26975DFB0, MEMORY[0x263F07508]);
      uint64_t v58 = sub_24A0CA054();
      os_log_type_t v83 = v53;
      uint64_t v60 = sub_24A0C6240(v58, v59, v90);
      sub_24A0D7070(v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v53 = *(void (**)(void))(v56 + 8);
      sub_24A0C9304();
      v53();
      *(_WORD *)(v57 + 12) = 2112;
      MEMORY[0x24C5BB8B0](v55);
      uint64_t v61 = _swift_stdlib_bridgeErrorToNSError();
      sub_24A0D7070(v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *typea = v61;
      MEMORY[0x24C5BB8A0](v55);
      MEMORY[0x24C5BB8A0](v55);
      _os_log_impl(&dword_24A08B000, loga, v83, "[message id = %s] failed to send message over XPC due to non-XPC error %@", (uint8_t *)v57, 0x16u);
      sub_24A08DF34(&qword_26975DF20);
      sub_24A0D703C();
      sub_24A0C912C();
      uint64_t v51 = v88;
      swift_arrayDestroy();
      sub_24A0C912C();
      uint64_t v62 = v53;
      sub_24A0C912C();
    }
    else
    {
      uint64_t v62 = *(void (**)(void))(v56 + 8);
      sub_24A0C9304();
      v62();
      MEMORY[0x24C5BB8A0](v55);
      MEMORY[0x24C5BB8A0](v55);
    }
    sub_24A0D6FAC();
    type metadata accessor for AsyncThrowingStream.Continuation();
    AsyncThrowingStream.Continuation.finish(throwing:)();
    ((void (*)(NSObject *, void (*)(void)))v62)(v51, v53);
LABEL_21:
    sub_24A0D6EB0();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_24A0C9194();
    sub_24A0C91E4();
    __asm { BRAA            X1, X16 }
  }
  uint64_t v15 = v0[20];
  uint64_t v16 = v0[21];
  uint64_t v18 = v0[17];
  uint64_t v17 = v0[18];
  MEMORY[0x24C5BB8A0](v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32))(v15, v16, v18);
  if (qword_26975D330 != -1) {
    swift_once();
  }
  uint64_t v20 = v0[19];
  uint64_t v19 = v0[20];
  uint64_t v21 = v0[17];
  uint64_t v22 = v0[18];
  uint64_t v23 = type metadata accessor for Logger();
  uint64_t v24 = sub_24A0A800C(v23, (uint64_t)qword_26975E370);
  uint64_t v25 = sub_24A0D6EFC(v24);
  v26(v25);
  uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16);
  uint64_t v27 = v22 + 16;
  v0[39] = v28;
  v0[40] = v27 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  uint64_t v89 = v28;
  v28(v20, v19, v21);
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.default.getter();
  BOOL v31 = os_log_type_enabled(v29, v30);
  uint64_t v32 = v0[25];
  uint64_t v33 = v0[18];
  uint64_t v34 = v0[19];
  uint64_t v35 = v0[17];
  if (v31)
  {
    log = v29;
    uint64_t v36 = swift_slowAlloc();
    uint64_t v82 = (void *)sub_24A0C93F0();
    v90[0] = sub_24A0C9298();
    *(_DWORD *)uint64_t v36 = 136315394;
    os_log_type_t type = v30;
    sub_24A0D65E8(&qword_26975DFB0, MEMORY[0x263F07508]);
    uint64_t v37 = sub_24A0CA054();
    v0[8] = sub_24A0C6240(v37, v38, v90);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v81 = *(void (**)(uint64_t))(v32 + 8);
    uint64_t v39 = sub_24A0D70C4();
    v40(v39);
    *(_WORD *)(v36 + 12) = 2112;
    sub_24A0D65E8(&qword_26975DFB8, MEMORY[0x263F8F408]);
    uint64_t v41 = swift_allocError();
    v89(v42, v34, v35);
    uint64_t v43 = _swift_stdlib_bridgeErrorToNSError();
    sub_24A0D70D8(v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v82 = v41;
    uint64_t v44 = *(void (**)(void))(v33 + 8);
    uint64_t v45 = v81;
    sub_24A0C9628();
    v44();
    _os_log_impl(&dword_24A08B000, log, type, "[message id = %s] failed to send message over XPC due to XPC error %@", (uint8_t *)v36, 0x16u);
    sub_24A08DF34(&qword_26975DF20);
    swift_arrayDestroy();
    sub_24A0C912C();
    sub_24A0C9518();
    sub_24A0C912C();
    sub_24A0C912C();
  }
  else
  {
    uint64_t v45 = *(void (**)(uint64_t))(v32 + 8);
    uint64_t v63 = sub_24A0D70C4();
    v45(v63);
    uint64_t v44 = *(void (**)(void))(v33 + 8);
    sub_24A0C9628();
    v44();
  }
  v0[41] = v44;
  v0[42] = v45;
  if (XPCRichError.canRetry.getter())
  {
    uint64_t v64 = (void (*)(uint64_t))v0[39];
    sub_24A0D6FF8();
    sub_24A0D705C();
    sub_24A0D65E8(&qword_26975DFB8, MEMORY[0x263F8F408]);
    uint64_t v65 = sub_24A0D6F54();
    uint64_t v67 = sub_24A0D6F40(v65, v66);
    v64(v67);
    v0[6] = v27;
    sub_24A0D7008();
    AsyncThrowingStream.Continuation.finish(throwing:)();
    sub_24A09C038();
    v68();
    sub_24A09C038();
    v69();
    MEMORY[0x24C5BB8A0](v0[2]);
    goto LABEL_21;
  }
  v0[43] = sub_24A08DF78((void *)(v0[10] + 16), *(void *)(v0[10] + 40));
  sub_24A0C91E4();
  return MEMORY[0x270FA2498](v70, v71, v72);
}

uint64_t sub_24A0D4C84()
{
  uint64_t v64 = v0;
  uint64_t v1 = v0[34];
  v0[2] = v1;
  MEMORY[0x24C5BB8B0](v1);
  v0[35] = sub_24A08DF34(&qword_26975D5B0);
  if ((swift_dynamicCast() & 1) == 0)
  {
    MEMORY[0x24C5BB8A0](v0[2]);
    if (qword_26975D330 != -1) {
      swift_once();
    }
    uint64_t v27 = v0[30];
    uint64_t v29 = v0[25];
    uint64_t v28 = v0[26];
    uint64_t v30 = v0[24];
    uint64_t v31 = type metadata accessor for Logger();
    sub_24A0A800C(v31, (uint64_t)qword_26975E370);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(v28, v27, v30);
    MEMORY[0x24C5BB8B0](v1);
    MEMORY[0x24C5BB8B0](v1);
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.default.getter();
    uint64_t v34 = (void (*)(void))v33;
    BOOL v35 = os_log_type_enabled(v32, v33);
    uint64_t v36 = v0[25];
    if (v35)
    {
      uint64_t v60 = v32;
      uint64_t v37 = swift_slowAlloc();
      os_log_t loga = (os_log_t)sub_24A0C93F0();
      uint64_t v61 = sub_24A0C9298();
      uint64_t v63 = v61;
      *(_DWORD *)uint64_t v37 = 136315394;
      sub_24A0D65E8(&qword_26975DFB0, MEMORY[0x263F07508]);
      uint64_t v38 = sub_24A0CA054();
      os_log_type_t v57 = v34;
      uint64_t v40 = sub_24A0C6240(v38, v39, &v63);
      sub_24A0D7070(v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v34 = *(void (**)(void))(v36 + 8);
      sub_24A0C9304();
      v34();
      *(_WORD *)(v37 + 12) = 2112;
      MEMORY[0x24C5BB8B0](v1);
      uint64_t v41 = _swift_stdlib_bridgeErrorToNSError();
      sub_24A0D7070(v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      loga->isa = (Class)v41;
      MEMORY[0x24C5BB8A0](v1);
      MEMORY[0x24C5BB8A0](v1);
      _os_log_impl(&dword_24A08B000, v60, v57, "[message id = %s] failed to send message over XPC due to non-XPC error %@", (uint8_t *)v37, 0x16u);
      sub_24A08DF34(&qword_26975DF20);
      sub_24A0D703C();
      sub_24A0C912C();
      uint64_t v32 = v61;
      swift_arrayDestroy();
      sub_24A0C912C();
      uint64_t v42 = v34;
      sub_24A0C912C();
    }
    else
    {
      uint64_t v42 = *(void (**)(void))(v36 + 8);
      sub_24A0C9304();
      v42();
      MEMORY[0x24C5BB8A0](v1);
      MEMORY[0x24C5BB8A0](v1);
    }
    sub_24A0D6FAC();
    type metadata accessor for AsyncThrowingStream.Continuation();
    AsyncThrowingStream.Continuation.finish(throwing:)();
    ((void (*)(NSObject *, void (*)(void)))v42)(v32, v34);
LABEL_15:
    sub_24A0D6EB0();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_24A0C9194();
    sub_24A0C91E4();
    __asm { BRAA            X1, X16 }
  }
  uint64_t v2 = v0[20];
  uint64_t v3 = v0[21];
  uint64_t v4 = v0[17];
  uint64_t v5 = v0[18];
  MEMORY[0x24C5BB8A0](v1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v2, v3, v4);
  if (qword_26975D330 != -1) {
    swift_once();
  }
  uint64_t v6 = v0[19];
  uint64_t v62 = v0[20];
  uint64_t v8 = v0[17];
  uint64_t v7 = v0[18];
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = sub_24A0A800C(v9, (uint64_t)qword_26975E370);
  uint64_t v11 = sub_24A0D6EFC(v10);
  v12(v11);
  uint64_t v13 = *(void (**)(void))(v7 + 16);
  v0[39] = v13;
  v0[40] = (v7 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  ((void (*)(uint64_t, uint64_t, uint64_t))v13)(v6, v62, v8);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  BOOL v16 = os_log_type_enabled(v14, v15);
  uint64_t v17 = v0[25];
  uint64_t v18 = v0[18];
  uint64_t v19 = (void *)v0[17];
  if (v16)
  {
    uint64_t v19 = v0 + 9;
    log = v14;
    uint64_t v20 = swift_slowAlloc();
    uint64_t v56 = (void *)sub_24A0C93F0();
    uint64_t v63 = sub_24A0C9298();
    *(_DWORD *)uint64_t v20 = 136315394;
    sub_24A0D65E8(&qword_26975DFB0, MEMORY[0x263F07508]);
    uint64_t v21 = sub_24A0CA054();
    v0[8] = sub_24A0C6240(v21, v22, &v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v23 = *(void (**)(void))(v17 + 8);
    sub_24A0D6F9C();
    v23();
    *(_WORD *)(v20 + 12) = 2112;
    sub_24A0D65E8(&qword_26975DFB8, MEMORY[0x263F8F408]);
    uint64_t v24 = swift_allocError();
    sub_24A0C9454();
    v13();
    uint64_t v25 = _swift_stdlib_bridgeErrorToNSError();
    sub_24A0D70D8(v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v56 = v24;
    uint64_t v26 = *(void (**)(void))(v18 + 8);
    sub_24A0C9448();
    v26();
    _os_log_impl(&dword_24A08B000, log, v15, "[message id = %s] failed to send message over XPC due to XPC error %@", (uint8_t *)v20, 0x16u);
    sub_24A08DF34(&qword_26975DF20);
    swift_arrayDestroy();
    sub_24A0C912C();
    sub_24A0C9518();
    sub_24A0C912C();
    sub_24A0C912C();
  }
  else
  {
    uint64_t v23 = *(void (**)(void))(v17 + 8);
    sub_24A0D6F9C();
    v23();
    uint64_t v26 = *(void (**)(void))(v18 + 8);
    sub_24A0C9448();
    v26();
  }
  v0[41] = v26;
  v0[42] = v23;
  if (XPCRichError.canRetry.getter())
  {
    uint64_t v43 = (void (*)(uint64_t))v0[39];
    sub_24A0D6FF8();
    sub_24A0D705C();
    sub_24A0D65E8(&qword_26975DFB8, MEMORY[0x263F8F408]);
    uint64_t v44 = sub_24A0D6F54();
    uint64_t v46 = sub_24A0D6F40(v44, v45);
    v43(v46);
    v0[6] = v19;
    sub_24A0D7008();
    AsyncThrowingStream.Continuation.finish(throwing:)();
    sub_24A09C038();
    v47();
    sub_24A09C038();
    v48();
    MEMORY[0x24C5BB8A0](v0[2]);
    goto LABEL_15;
  }
  v0[43] = sub_24A08DF78((void *)(v0[10] + 16), *(void *)(v0[10] + 40));
  sub_24A0C91E4();
  return MEMORY[0x270FA2498](v51, v52, v53);
}

uint64_t sub_24A0D5440()
{
  sub_24A0B3914();
  sub_24A0DC378();
  sub_24A0C9144();
  return MEMORY[0x270FA2498](v0, v1, v2);
}

uint64_t sub_24A0D54A4()
{
  uint64_t v17 = v0;
  (*(void (**)(void, void, void))(v0 + 296))(*(void *)(v0 + 216), *(void *)(v0 + 240), *(void *)(v0 + 192));
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)sub_24A0D6FC4();
    uint64_t v16 = sub_24A0C9298();
    *(_DWORD *)uint64_t v4 = 136315138;
    uint64_t v1 = v4 + 4;
    sub_24A0D65E8(&qword_26975DFB0, MEMORY[0x263F07508]);
    uint64_t v5 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 56) = sub_24A0C6240(v5, v6, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_24A09C038();
    v7();
    _os_log_impl(&dword_24A08B000, v2, v3, "[message id = %s] evict xpc session from cache as it is no longer usable", v4, 0xCu);
    swift_arrayDestroy();
    sub_24A0C912C();
    sub_24A0C912C();
  }
  else
  {
    (*(void (**)(void, void))(v0 + 336))(*(void *)(v0 + 216), *(void *)(v0 + 192));
  }

  uint64_t v8 = *(void (**)(uint64_t))(v0 + 312);
  sub_24A0D6FF8();
  sub_24A0D65E8(&qword_26975DFB8, MEMORY[0x263F8F408]);
  uint64_t v9 = sub_24A0D6F54();
  uint64_t v11 = sub_24A0D6F40(v9, v10);
  v8(v11);
  *(void *)(v0 + 48) = v1;
  sub_24A0D7008();
  AsyncThrowingStream.Continuation.finish(throwing:)();
  sub_24A09C038();
  v12();
  sub_24A09C038();
  v13();
  MEMORY[0x24C5BB8A0](*(void *)(v0 + 16));
  sub_24A0D6EB0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A0C9194();
  return v14();
}

uint64_t sub_24A0D578C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_24A0D57F4()
{
  sub_24A0B3940();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_24A0B399C(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_24A0B38D8;
  uint64_t v3 = sub_24A0D6FE0();
  return sub_24A0D2558(v3, v4, v5, v6);
}

uint64_t sub_24A0D588C(uint64_t a1)
{
  return sub_24A0D28FC(a1, v1[6], v1[7], v1[8], v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_24A0D58A0()
{
  sub_24A0AAFDC();
  sub_24A08E008(&qword_26975D5B0);
  type metadata accessor for AsyncThrowingStream.Continuation();
  sub_24A0B6C48();
  sub_24A0D6F28();
  sub_24A0D707C();
  swift_release();
  sub_24A0C9448();
  v0();
  sub_24A0D6F9C();
  v1();
  sub_24A0AB030();
  return MEMORY[0x270FA0238](v2, v3, v4);
}

uint64_t sub_24A0D59AC(uint64_t a1)
{
  sub_24A0D7024(a1);
  sub_24A08E008(&qword_26975D5B0);
  uint64_t v2 = type metadata accessor for AsyncThrowingStream.Continuation();
  sub_24A0B38FC(v2);
  sub_24A0D6F28();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_24A0B35E4;
  uint64_t v11 = sub_24A0D6E7C((uint64_t)v3, v4, v5, v6, v7, v8, v9, v10, v20);
  return sub_24A0D3FDC(v11, v12, v13, v14, v15, v16, v17, v18);
}

uint64_t type metadata accessor for XPCMessageSender()
{
  return self;
}

uint64_t method lookup function for XPCMessageSender(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for XPCMessageSender);
}

uint64_t dispatch thunk of XPCMessageSender.__allocating_init(machServiceName:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t sub_24A0D5B60(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_24A0D5C3C;
  return v6(a1);
}

uint64_t sub_24A0D5C3C()
{
  sub_24A0B3914();
  sub_24A0B38DC();
  uint64_t v1 = *v0;
  sub_24A0B394C();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_24A0C9194();
  return v3();
}

unint64_t sub_24A0D5CFC(uint64_t a1)
{
  type metadata accessor for UUID();
  sub_24A0D65E8(&qword_26975D340, MEMORY[0x263F07508]);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return sub_24A0D5D94(a1, v2);
}

unint64_t sub_24A0D5D94(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = a1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = v2;
  uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v9 = a2 & ~v8;
  uint64_t v18 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v12 = v5 + 16;
    uint64_t v11 = v13;
    uint64_t v14 = *(void *)(v12 + 56);
    do
    {
      v11(v7, *(void *)(v20 + 48) + v14 * v9, v4);
      sub_24A0D65E8(&qword_26975E3C0, MEMORY[0x263F07508]);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v12 - 8))(v7, v4);
      if (v15) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v10;
    }
    while (((*(void *)(v18 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  return v9;
}

uint64_t sub_24A0D5F54()
{
  sub_24A0AAFDC();
  sub_24A08E008(&qword_26975D5B0);
  type metadata accessor for AsyncThrowingStream.Continuation();
  sub_24A0B6C48();
  type metadata accessor for UUID();
  sub_24A0B6C48();
  sub_24A0C9448();
  v0();
  swift_release();
  sub_24A0C9304();
  v1();
  sub_24A0AB030();
  return MEMORY[0x270FA0238](v2, v3, v4);
}

uint64_t sub_24A0D6078(uint64_t a1)
{
  sub_24A08E008(&qword_26975D5B0);
  uint64_t v3 = type metadata accessor for AsyncThrowingStream.Continuation();
  sub_24A0B38FC(v3);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v7 = (*(void *)(v6 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = type metadata accessor for UUID();
  sub_24A0C92D4(v8);
  uint64_t v10 = *(void *)(v1 + v7);
  uint64_t v11 = v1 + ((v7 + *(unsigned __int8 *)(v9 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  return sub_24A0D1C10(a1, v1 + v5, v10, v11);
}

uint64_t sub_24A0D6158(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_24A0D5CFC(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v12 = *v2;
  uint64_t v7 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  Swift::Int v8 = *(void *)(v7 + 24);
  sub_24A08DF34(&qword_26975E3C8);
  _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v8);
  type metadata accessor for UUID();
  sub_24A08F280();
  sub_24A08F2BC();
  v9();
  uint64_t v10 = *(void *)(*(void *)(v12 + 56) + 16 * v4);
  sub_24A08DF34(&qword_26975E388);
  sub_24A0D65E8(&qword_26975D340, MEMORY[0x263F07508]);
  _NativeDictionary._delete(at:)();
  *uint64_t v2 = v12;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_24A0D62CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  sub_24A0D635C(a1, a2, a3, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v9;
  return swift_bridgeObjectRelease();
}

uint64_t sub_24A0D635C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v5 = (void **)v4;
  uint64_t v28 = a2;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (void *)*v4;
  unint64_t v14 = sub_24A0D5CFC(a3);
  uint64_t v16 = v13[2];
  BOOL v17 = (v15 & 1) == 0;
  Swift::Int v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v19 = v14;
  char v20 = v15;
  sub_24A08DF34(&qword_26975E3C8);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v18)) {
    goto LABEL_5;
  }
  unint64_t v21 = sub_24A0D5CFC(a3);
  if ((v20 & 1) != (v22 & 1))
  {
LABEL_11:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v19 = v21;
LABEL_5:
  uint64_t v23 = *v5;
  if (v20)
  {
    uint64_t v24 = (uint64_t *)(v23[7] + 16 * v19);
    uint64_t v25 = v28;
    *uint64_t v24 = a1;
    v24[1] = v25;
    return swift_release();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a3, v9);
    return sub_24A0D6528(v19, (uint64_t)v12, a1, v28, v23);
  }
}

uint64_t sub_24A0D6528(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v10 = a5[6];
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, a2, v11);
  uint64_t v13 = (void *)(a5[7] + 16 * a1);
  void *v13 = a3;
  v13[1] = a4;
  uint64_t v14 = a5[2];
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    a5[2] = v16;
  }
  return result;
}

uint64_t sub_24A0D65E8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24A0D6630()
{
  sub_24A0AAFDC();
  sub_24A0B6C48();
  unint64_t v3 = ((*(unsigned __int8 *)(v1 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))
     + *(void *)(v2 + 64);
  sub_24A08E008(&qword_26975D5B0);
  uint64_t v4 = type metadata accessor for CheckedContinuation();
  sub_24A0B6C48();
  uint64_t v6 = v5;
  unint64_t v7 = (v3 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  sub_24A0D707C();
  swift_release();
  sub_24A0C9448();
  v8();
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v4);
  sub_24A0AB030();
  return MEMORY[0x270FA0238](v9, v10, v11);
}

uint64_t sub_24A0D6744(uint64_t a1)
{
  sub_24A0D7024(a1);
  sub_24A0B6C48();
  sub_24A08E008(&qword_26975D5B0);
  uint64_t v2 = type metadata accessor for CheckedContinuation();
  sub_24A0B38FC(v2);
  unint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *unint64_t v3 = v1;
  v3[1] = sub_24A0B38D8;
  uint64_t v11 = sub_24A0D6E7C((uint64_t)v3, v4, v5, v6, v7, v8, v9, v10, v20);
  return sub_24A0D2BD0(v11, v12, v13, v14, v15, v16, v17, v18);
}

uint64_t sub_24A0D6894()
{
  sub_24A08E008(&qword_26975D5B0);
  type metadata accessor for CheckedContinuation();
  sub_24A08F280();
  v1 += 8;
  uint64_t v2 = *(unsigned __int8 *)(v1 + 72);
  uint64_t v3 = v2 | 7;
  unint64_t v4 = (*(void *)(v1 + 56) + ((v2 + 48) & ~v2) + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_24A08F2BC();
  v5();
  sub_24A08E050(v0 + v4);
  return MEMORY[0x270FA0238](v0, ((v4 + 47) & 0xFFFFFFFFFFFFFFF8) + 8, v3);
}

uint64_t sub_24A0D6954(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  sub_24A08E008(&qword_26975D5B0);
  uint64_t v5 = type metadata accessor for CheckedContinuation();
  sub_24A0B38FC(v5);
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v11 = (*(void *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v12 = *(void *)(v1 + ((v11 + 47) & 0xFFFFFFFFFFFFFFF8));
  return sub_24A0D32D8(a1, v1 + v10, v1 + v11, v12, v3, v4);
}

uint64_t sub_24A0D6A20()
{
  swift_unknownObjectRelease();
  sub_24A08E050(v0 + 32);
  return MEMORY[0x270FA0238](v0, 72, 7);
}

uint64_t sub_24A0D6A60()
{
  sub_24A0B3940();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_24A0B399C(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_24A0B38D8;
  uint64_t v3 = sub_24A0D6FE0();
  return sub_24A0D3AE4(v3, v4, v5, v6);
}

uint64_t sub_24A0D6AF8()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_24A0D6B30()
{
  sub_24A0B3940();
  uint64_t v2 = v1;
  uint64_t v3 = *(int **)(v0 + 16);
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)sub_24A0B399C(v4);
  *uint64_t v5 = v6;
  v5[1] = sub_24A0B38D8;
  uint64_t v7 = (uint64_t (*)(uint64_t, int *))((char *)&dword_26975E400 + dword_26975E400);
  return v7(v2, v3);
}

uint64_t sub_24A0D6BDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for XPCAsyncSequenceResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_24A0D6C40()
{
  uint64_t v1 = (int *)(type metadata accessor for XPCAsyncSequenceResponse() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  swift_unknownObjectRelease();
  swift_release();
  type metadata accessor for UUID();
  sub_24A08F280();
  sub_24A08F2BC();
  v5();
  uint64_t v6 = (uint64_t *)(v0 + v3 + v1[7]);
  unint64_t v7 = v6[1];
  if (((v7 >> 60) | 4) != 0xF) {
    sub_24A08DEDC(*v6, v7);
  }
  return MEMORY[0x270FA0238](v0, v3 + v4, v2 | 7);
}

uint64_t sub_24A0D6D44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for XPCAsyncSequenceResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_24A0D6DA8(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for XPCAsyncSequenceResponse();
  sub_24A0C92D4(v3);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v9 = swift_task_alloc();
  unint64_t v10 = (void *)sub_24A0B399C(v9);
  *unint64_t v10 = v11;
  v10[1] = sub_24A0B35E4;
  return sub_24A0D23E0(a1, v5, v6, v7, v8);
}

uint64_t sub_24A0D6E7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  v11[4] = v10;
  void v11[2] = v9;
  v11[3] = a9;
  return v11[5];
}

uint64_t sub_24A0D6EB0()
{
  return swift_task_dealloc();
}

uint64_t sub_24A0D6ED8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[7] = a6;
  v7[8] = v6;
  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  v7[2] = result;
  return result;
}

uint64_t sub_24A0D6EFC(uint64_t a1)
{
  v2[36] = a1;
  v2[37] = *(void *)(v3 + 16);
  v2[38] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  return v1;
}

uint64_t sub_24A0D6F40(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_24A0D6F54()
{
  return swift_allocError();
}

uint64_t sub_24A0D6F74(uint64_t a1)
{
  *(void *)(v1 + 104) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void sub_24A0D6FAC()
{
  *(void *)(v1 + 24) = v0;
}

uint64_t sub_24A0D6FC4()
{
  return swift_slowAlloc();
}

uint64_t sub_24A0D6FE0()
{
  return v0;
}

uint64_t sub_24A0D7008()
{
  return type metadata accessor for AsyncThrowingStream.Continuation();
}

uint64_t sub_24A0D7024(uint64_t result)
{
  *(void *)(v1 + 40) = result;
  return result;
}

uint64_t sub_24A0D703C()
{
  return swift_arrayDestroy();
}

void *sub_24A0D7070(uint64_t a1)
{
  *uint64_t v1 = a1;
  return v1;
}

uint64_t sub_24A0D707C()
{
  return swift_unknownObjectRelease();
}

uint64_t sub_24A0D709C()
{
  return 0;
}

uint64_t sub_24A0D70C4()
{
  return v0;
}

uint64_t sub_24A0D70D8(uint64_t result)
{
  *(void *)(v1 + 72) = result;
  return result;
}

uint64_t dispatch thunk of AssetRequest.tenantName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of AssetRequest.workingDirectory.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of AssetRequest.credential.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t DownloadResponseMessage.hash(into:)(uint64_t a1)
{
  uint64_t v3 = sub_24A08DF34(&qword_26975DF48);
  MEMORY[0x270FA5388](v3 - 8);
  sub_24A093CD4();
  uint64_t v6 = v5 - v4;
  type metadata accessor for DownloadResponseMessage();
  sub_24A08F280();
  MEMORY[0x270FA5388](v7);
  sub_24A0CDEA0();
  sub_24A0D72C8((uint64_t)v1, (uint64_t)v1);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = *v1;
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(0);
    sub_24A0B0FF4(a1, v8);
  }
  else
  {
    sub_24A08DF34(&qword_26975DF60);
    sub_24A0D8498((uint64_t)v1, v6);
    Hasher._combine(_:)(0);
    sub_24A0CA740();
    String.hash(into:)();
    sub_24A0C8A04(v6, &qword_26975DF48);
  }
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for DownloadResponseMessage()
{
  uint64_t result = qword_26975E488;
  if (!qword_26975E488) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_24A0D72C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DownloadResponseMessage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t static DownloadResponseMessage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_24A08DF34(&qword_26975DF48);
  MEMORY[0x270FA5388](v5 - 8);
  sub_24A0CDEA0();
  type metadata accessor for DownloadResponseMessage();
  sub_24A08F280();
  uint64_t v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (uint64_t *)((char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v30 - v10;
  uint64_t v12 = sub_24A08DF34(&qword_26975E420);
  MEMORY[0x270FA5388](v12 - 8);
  sub_24A093CD4();
  uint64_t v15 = v14 - v13;
  uint64_t v17 = (void **)(v14 - v13 + *(int *)(v16 + 56));
  sub_24A0D72C8(a1, v14 - v13);
  sub_24A0D72C8(a2, (uint64_t)v17);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    sub_24A0D72C8(v15, (uint64_t)v11);
    uint64_t v20 = *(int *)(sub_24A08DF34(&qword_26975DF60) + 48);
    uint64_t v22 = *(void *)&v11[v20];
    uint64_t v21 = *(void *)&v11[v20 + 8];
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      swift_bridgeObjectRelease();
      sub_24A0C8A04((uint64_t)v11, &qword_26975DF48);
LABEL_7:
      sub_24A0C8A04(v15, &qword_26975E420);
LABEL_17:
      char v19 = 0;
      return v19 & 1;
    }
    uint64_t v23 = (char *)v17 + v20;
    uint64_t v25 = *(uint64_t *)((char *)v17 + v20);
    uint64_t v24 = *((void *)v23 + 1);
    sub_24A0D8498((uint64_t)v17, v2);
    char v26 = sub_24A0CA278((uint64_t)v11, v2);
    sub_24A0C8A04((uint64_t)v11, &qword_26975DF48);
    if (v26)
    {
      if (v22 == v25 && v21 == v24)
      {
        swift_bridgeObjectRelease_n();
        sub_24A0C8A04(v2, &qword_26975DF48);
LABEL_20:
        sub_24A0D8500(v15);
        char v19 = 1;
        return v19 & 1;
      }
      char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_24A0C8A04(v2, &qword_26975DF48);
      if (v28) {
        goto LABEL_20;
      }
    }
    else
    {
      sub_24A0C8A04(v2, &qword_26975DF48);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    sub_24A0D8500(v15);
    goto LABEL_17;
  }
  sub_24A0D72C8(v15, (uint64_t)v9);
  uint64_t v18 = (void *)*v9;
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  char v19 = sub_24A0AB3B8(v18, *v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_24A0D8500(v15);
  return v19 & 1;
}

uint64_t sub_24A0D7624(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65736E6F70736572 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x800000024A0EF010)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_24A0D7714(char a1)
{
  if (a1) {
    return 0xD000000000000019;
  }
  else {
    return 0x65736E6F70736572;
  }
}

uint64_t sub_24A0D7750(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x746C75736572 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000024A0EF110)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_24A0D7838(char a1)
{
  if (a1) {
    return 0xD000000000000015;
  }
  else {
    return 0x746C75736572;
  }
}

uint64_t sub_24A0D7874()
{
  return sub_24A0D7714(*v0);
}

uint64_t sub_24A0D787C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_24A0D7624(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_24A0D78A4(uint64_t a1)
{
  unint64_t v2 = sub_24A0D855C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A0D78E0(uint64_t a1)
{
  unint64_t v2 = sub_24A0D855C();
  return MEMORY[0x270FA00B8](a1, v2);
}

Swift::Int sub_24A0D791C()
{
  return sub_24A096EE0(*v0);
}

uint64_t sub_24A0D7938()
{
  return sub_24A0D7838(*v0);
}

uint64_t sub_24A0D7940@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_24A0D7750(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_24A0D7968(uint64_t a1)
{
  unint64_t v2 = sub_24A0D85F4();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A0D79A4(uint64_t a1)
{
  unint64_t v2 = sub_24A0D85F4();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_24A0D79E0(uint64_t a1)
{
  unint64_t v2 = sub_24A0D85A8();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A0D7A1C(uint64_t a1)
{
  unint64_t v2 = sub_24A0D85A8();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t DownloadResponseMessage.encode(to:)(void *a1)
{
  sub_24A08DF34(&qword_26975E428);
  sub_24A08F24C();
  MEMORY[0x270FA5388](v2);
  sub_24A093CD4();
  sub_24A08DF34(&qword_26975E430);
  sub_24A08F24C();
  MEMORY[0x270FA5388](v3);
  sub_24A093D9C();
  sub_24A08DF34(&qword_26975DF48);
  sub_24A08F280();
  MEMORY[0x270FA5388](v4);
  sub_24A08F2E0();
  uint64_t v19 = v5;
  type metadata accessor for DownloadResponseMessage();
  sub_24A08F280();
  MEMORY[0x270FA5388](v6);
  sub_24A093CD4();
  uint64_t v9 = v8 - v7;
  uint64_t v21 = sub_24A08DF34(&qword_26975E438);
  sub_24A08F24C();
  uint64_t v11 = v10;
  MEMORY[0x270FA5388](v12);
  sub_24A093CD4();
  uint64_t v15 = v14 - v13;
  sub_24A08DF78(a1, a1[3]);
  sub_24A0D855C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_24A0D72C8(v20, v9);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_24A0D85A8();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    sub_24A0CC6C0();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    sub_24A08F2BC();
    v16();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v15, v21);
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_24A08DF34(&qword_26975DF60);
    sub_24A0D8498(v9, v19);
    sub_24A0D85F4();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    sub_24A0D86A4(&qword_26975E458);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    if (!v22) {
      KeyedEncodingContainer.encode(_:forKey:)();
    }
    swift_bridgeObjectRelease();
    sub_24A08F2BC();
    v18();
    sub_24A0C8A04(v19, &qword_26975DF48);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v15, v21);
  }
}

Swift::Int DownloadResponseMessage.hashValue.getter()
{
  Hasher.init(_seed:)();
  DownloadResponseMessage.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t DownloadResponseMessage.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v56 = a2;
  sub_24A08DF34(&qword_26975E460);
  sub_24A08F24C();
  uint64_t v58 = v5;
  uint64_t v59 = v4;
  MEMORY[0x270FA5388](v4);
  sub_24A08F2E0();
  uint64_t v61 = v6;
  uint64_t v57 = sub_24A08DF34(&qword_26975E468);
  sub_24A08F24C();
  uint64_t v60 = v7;
  MEMORY[0x270FA5388](v8);
  sub_24A08F2E0();
  uint64_t v63 = v9;
  uint64_t v10 = sub_24A08DF34(&qword_26975E470);
  sub_24A08F24C();
  uint64_t v62 = v11;
  MEMORY[0x270FA5388](v12);
  sub_24A093D9C();
  uint64_t v13 = type metadata accessor for DownloadResponseMessage();
  sub_24A08F280();
  uint64_t v15 = MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  uint64_t v20 = (char *)&v53 - v19;
  MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v53 - v21;
  uint64_t v23 = a1[3];
  uint64_t v64 = a1;
  sub_24A08DF78(a1, v23);
  sub_24A0D855C();
  uint64_t v24 = v65;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v24)
  {
    uint64_t v53 = v17;
    uint64_t v54 = v22;
    uint64_t v55 = v20;
    uint64_t v65 = v13;
    uint64_t v25 = KeyedDecodingContainer.allKeys.getter();
    uint64_t v26 = *(void *)(v25 + 16);
    uint64_t v27 = v10;
    uint64_t v28 = v2;
    if (v26
      && (char v29 = *(unsigned char *)(v25 + 32),
          sub_24A0B2390(1, v26, v25, v25 + 32, 0, (2 * v26) | 1),
          uint64_t v31 = v30,
          unint64_t v33 = v32,
          swift_bridgeObjectRelease(),
          v31 == v33 >> 1))
    {
      if (v29)
      {
        char v70 = 1;
        sub_24A0D85A8();
        sub_24A0D9BF8();
        sub_24A0CC83C();
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        sub_24A08F2BC();
        v39();
        swift_unknownObjectRelease();
        sub_24A0D9C18();
        sub_24A08F2BC();
        v40();
        uint64_t v41 = v53;
        void *v53 = v66;
        swift_storeEnumTagMultiPayload();
        uint64_t v42 = (uint64_t)v41;
      }
      else
      {
        char v69 = 0;
        sub_24A0D85F4();
        sub_24A0D9BF8();
        sub_24A08DF34(&qword_26975DF48);
        char v68 = 0;
        sub_24A0D86A4(&qword_26975E478);
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        char v67 = 1;
        uint64_t v43 = KeyedDecodingContainer.decode(_:forKey:)();
        uint64_t v59 = v44;
        uint64_t v45 = *(int *)(sub_24A08DF34(&qword_26975DF60) + 48);
        uint64_t v61 = 0;
        uint64_t v46 = (uint64_t)v55;
        uint64_t v47 = (uint64_t *)&v55[v45];
        sub_24A08F2BC();
        v48();
        swift_unknownObjectRelease();
        uint64_t v49 = sub_24A0D9BE0();
        v50(v49);
        uint64_t v51 = v59;
        *uint64_t v47 = v43;
        v47[1] = v51;
        swift_storeEnumTagMultiPayload();
        uint64_t v42 = v46;
      }
      uint64_t v52 = (uint64_t)v54;
      sub_24A0D8640(v42, (uint64_t)v54);
      sub_24A0D8640(v52, v56);
    }
    else
    {
      uint64_t v34 = v65;
      uint64_t v35 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v37 = v36;
      sub_24A08DF34(&qword_26975D980);
      *uint64_t v37 = v34;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v35 - 8) + 104))(v37, *MEMORY[0x263F8DCB0], v35);
      swift_willThrow();
      swift_unknownObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v28, v27);
    }
  }
  return sub_24A08E050((uint64_t)v64);
}

Swift::Int sub_24A0D8428()
{
  Hasher.init(_seed:)();
  DownloadResponseMessage.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t sub_24A0D8464@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return DownloadResponseMessage.init(from:)(a1, a2);
}

uint64_t sub_24A0D847C(void *a1)
{
  return DownloadResponseMessage.encode(to:)(a1);
}

uint64_t sub_24A0D8498(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A08DF34(&qword_26975DF48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_24A0D8500(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DownloadResponseMessage();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_24A0D855C()
{
  unint64_t result = qword_26975E440;
  if (!qword_26975E440)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E440);
  }
  return result;
}

unint64_t sub_24A0D85A8()
{
  unint64_t result = qword_26975E448;
  if (!qword_26975E448)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E448);
  }
  return result;
}

unint64_t sub_24A0D85F4()
{
  unint64_t result = qword_26975E450;
  if (!qword_26975E450)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E450);
  }
  return result;
}

uint64_t sub_24A0D8640(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DownloadResponseMessage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_24A0D86A4(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_24A08E008(&qword_26975DF48);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24A0D86EC()
{
  return sub_24A0D96BC(&qword_26975E480, (void (*)(uint64_t))type metadata accessor for DownloadResponseMessage);
}

uint64_t *initializeBufferWithCopyOfBuffer for DownloadResponseMessage(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v6 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v6 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v7 = type metadata accessor for AssetDownloadResponse();
      if (_s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)a2, 1, v7))
      {
        uint64_t v8 = sub_24A08DF34(&qword_26975DF48);
        memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
      }
      else
      {
        uint64_t v9 = type metadata accessor for UUID();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
        uint64_t v10 = *(int *)(v7 + 20);
        uint64_t v11 = (char *)a1 + v10;
        uint64_t v12 = (char *)a2 + v10;
        uint64_t v46 = type metadata accessor for URL();
        uint64_t v45 = *(void (**)(char *, char *, uint64_t))(*(void *)(v46 - 8) + 16);
        v45(v11, v12, v46);
        uint64_t v13 = (int *)type metadata accessor for Asset.ID(0);
        uint64_t v14 = v13[5];
        uint64_t v15 = &v11[v14];
        uint64_t v16 = &v12[v14];
        uint64_t v17 = *((void *)v16 + 1);
        *(void *)uint64_t v15 = *(void *)v16;
        *((void *)v15 + 1) = v17;
        uint64_t v18 = v13[6];
        uint64_t v19 = (uint64_t *)&v11[v18];
        uint64_t v20 = (uint64_t *)&v12[v18];
        uint64_t v21 = *v20;
        unint64_t v22 = v20[1];
        swift_bridgeObjectRetain();
        sub_24A08DE84(v21, v22);
        *uint64_t v19 = v21;
        v19[1] = v22;
        uint64_t v23 = v13[7];
        uint64_t v24 = (uint64_t *)&v11[v23];
        uint64_t v25 = (uint64_t *)&v12[v23];
        uint64_t v26 = *v25;
        unint64_t v27 = v25[1];
        sub_24A08DE84(*v25, v27);
        *uint64_t v24 = v26;
        v24[1] = v27;
        uint64_t v28 = type metadata accessor for Asset(0);
        uint64_t v29 = *(int *)(v28 + 20);
        uint64_t v30 = (uint64_t *)&v11[v29];
        uint64_t v44 = v7;
        uint64_t v31 = &v12[v29];
        uint64_t v32 = *(void *)&v12[v29];
        unint64_t v33 = *(void *)&v12[v29 + 8];
        sub_24A08DE84(v32, v33);
        *uint64_t v30 = v32;
        v30[1] = v33;
        uint64_t v34 = *((void *)v31 + 2);
        unint64_t v35 = *((void *)v31 + 3);
        sub_24A08DE84(v34, v35);
        v30[2] = v34;
        v30[3] = v35;
        *(void *)&v11[*(int *)(v28 + 24)] = *(void *)&v12[*(int *)(v28 + 24)];
        v45((char *)a1 + *(int *)(v44 + 24), (char *)a2 + *(int *)(v44 + 24), v46);
        uint64_t v36 = *(int *)(v44 + 28);
        uint64_t v37 = (char *)a1 + v36;
        uint64_t v38 = (char *)a2 + v36;
        *(_OWORD *)uint64_t v37 = *(_OWORD *)v38;
        v37[16] = v38[16];
        _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)a1, 0, 1, v44);
      }
      uint64_t v39 = *(int *)(sub_24A08DF34(&qword_26975DF60) + 48);
      uint64_t v40 = (uint64_t *)((char *)a1 + v39);
      uint64_t v41 = (uint64_t *)((char *)a2 + v39);
      uint64_t v42 = v41[1];
      *uint64_t v40 = *v41;
      v40[1] = v42;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for DownloadResponseMessage(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    uint64_t v2 = type metadata accessor for AssetDownloadResponse();
    if (!_s10CloudAsset21UploadResponseMessageOwet_0(a1, 1, v2))
    {
      uint64_t v3 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
      uint64_t v4 = a1 + *(int *)(v2 + 20);
      uint64_t v5 = type metadata accessor for URL();
      uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
      v6(v4, v5);
      uint64_t v7 = type metadata accessor for Asset.ID(0);
      swift_bridgeObjectRelease();
      sub_24A08DEDC(*(void *)(v4 + *(int *)(v7 + 24)), *(void *)(v4 + *(int *)(v7 + 24) + 8));
      sub_24A08DEDC(*(void *)(v4 + *(int *)(v7 + 28)), *(void *)(v4 + *(int *)(v7 + 28) + 8));
      uint64_t v8 = v4 + *(int *)(type metadata accessor for Asset(0) + 20);
      sub_24A08DEDC(*(void *)v8, *(void *)(v8 + 8));
      sub_24A08DEDC(*(void *)(v8 + 16), *(void *)(v8 + 24));
      v6(a1 + *(int *)(v2 + 24), v5);
    }
    sub_24A08DF34(&qword_26975DF60);
  }
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for DownloadResponseMessage(void *a1, void *a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *a1 = *a2;
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v4 = type metadata accessor for AssetDownloadResponse();
    if (_s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)a2, 1, v4))
    {
      uint64_t v5 = sub_24A08DF34(&qword_26975DF48);
      memcpy(a1, a2, *(void *)(*(void *)(v5 - 8) + 64));
    }
    else
    {
      uint64_t v6 = type metadata accessor for UUID();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      uint64_t v7 = *(int *)(v4 + 20);
      uint64_t v8 = (char *)a1 + v7;
      uint64_t v9 = (char *)a2 + v7;
      uint64_t v43 = type metadata accessor for URL();
      uint64_t v42 = *(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 16);
      v42(v8, v9, v43);
      uint64_t v10 = (int *)type metadata accessor for Asset.ID(0);
      uint64_t v11 = v10[5];
      uint64_t v12 = &v8[v11];
      uint64_t v13 = &v9[v11];
      uint64_t v14 = *((void *)v13 + 1);
      *(void *)uint64_t v12 = *(void *)v13;
      *((void *)v12 + 1) = v14;
      uint64_t v15 = v10[6];
      uint64_t v16 = (uint64_t *)&v8[v15];
      uint64_t v17 = (uint64_t *)&v9[v15];
      uint64_t v18 = *v17;
      unint64_t v19 = v17[1];
      swift_bridgeObjectRetain();
      sub_24A08DE84(v18, v19);
      *uint64_t v16 = v18;
      v16[1] = v19;
      uint64_t v20 = v10[7];
      uint64_t v21 = (uint64_t *)&v8[v20];
      unint64_t v22 = (uint64_t *)&v9[v20];
      uint64_t v23 = *v22;
      unint64_t v24 = v22[1];
      sub_24A08DE84(*v22, v24);
      *uint64_t v21 = v23;
      v21[1] = v24;
      uint64_t v25 = type metadata accessor for Asset(0);
      uint64_t v26 = *(int *)(v25 + 20);
      unint64_t v27 = (uint64_t *)&v8[v26];
      uint64_t v41 = v4;
      uint64_t v28 = &v9[v26];
      uint64_t v29 = *(void *)&v9[v26];
      unint64_t v30 = *(void *)&v9[v26 + 8];
      sub_24A08DE84(v29, v30);
      *unint64_t v27 = v29;
      v27[1] = v30;
      uint64_t v31 = *((void *)v28 + 2);
      unint64_t v32 = *((void *)v28 + 3);
      sub_24A08DE84(v31, v32);
      v27[2] = v31;
      v27[3] = v32;
      *(void *)&v8[*(int *)(v25 + 24)] = *(void *)&v9[*(int *)(v25 + 24)];
      v42((char *)a1 + *(int *)(v41 + 24), (char *)a2 + *(int *)(v41 + 24), v43);
      uint64_t v33 = *(int *)(v41 + 28);
      uint64_t v34 = (char *)a1 + v33;
      unint64_t v35 = (char *)a2 + v33;
      *(_OWORD *)uint64_t v34 = *(_OWORD *)v35;
      v34[16] = v35[16];
      _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)a1, 0, 1, v41);
    }
    uint64_t v36 = *(int *)(sub_24A08DF34(&qword_26975DF60) + 48);
    uint64_t v37 = (void *)((char *)a1 + v36);
    uint64_t v38 = (void *)((char *)a2 + v36);
    uint64_t v39 = v38[1];
    *uint64_t v37 = *v38;
    v37[1] = v39;
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for DownloadResponseMessage(void *a1, void *a2)
{
  if (a1 != a2)
  {
    sub_24A0D8500((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v4 = type metadata accessor for AssetDownloadResponse();
      if (_s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)a2, 1, v4))
      {
        uint64_t v5 = sub_24A08DF34(&qword_26975DF48);
        memcpy(a1, a2, *(void *)(*(void *)(v5 - 8) + 64));
      }
      else
      {
        uint64_t v6 = type metadata accessor for UUID();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        uint64_t v7 = *(int *)(v4 + 20);
        uint64_t v8 = (char *)a1 + v7;
        uint64_t v9 = (char *)a2 + v7;
        uint64_t v42 = type metadata accessor for URL();
        uint64_t v41 = *(void (**)(char *, char *, uint64_t))(*(void *)(v42 - 8) + 16);
        v41(v8, v9, v42);
        uint64_t v10 = (int *)type metadata accessor for Asset.ID(0);
        uint64_t v11 = v10[5];
        uint64_t v12 = &v8[v11];
        uint64_t v13 = &v9[v11];
        *(void *)uint64_t v12 = *(void *)v13;
        *((void *)v12 + 1) = *((void *)v13 + 1);
        uint64_t v14 = v10[6];
        uint64_t v15 = (uint64_t *)&v8[v14];
        uint64_t v16 = (uint64_t *)&v9[v14];
        uint64_t v17 = *v16;
        unint64_t v18 = v16[1];
        swift_bridgeObjectRetain();
        sub_24A08DE84(v17, v18);
        uint64_t *v15 = v17;
        v15[1] = v18;
        uint64_t v19 = v10[7];
        uint64_t v20 = (uint64_t *)&v8[v19];
        uint64_t v21 = (uint64_t *)&v9[v19];
        uint64_t v22 = *v21;
        unint64_t v23 = v21[1];
        sub_24A08DE84(*v21, v23);
        *uint64_t v20 = v22;
        v20[1] = v23;
        uint64_t v24 = type metadata accessor for Asset(0);
        uint64_t v25 = *(int *)(v24 + 20);
        uint64_t v26 = (uint64_t *)&v8[v25];
        uint64_t v40 = v4;
        unint64_t v27 = &v9[v25];
        uint64_t v28 = *(void *)&v9[v25];
        unint64_t v29 = *(void *)&v9[v25 + 8];
        sub_24A08DE84(v28, v29);
        *uint64_t v26 = v28;
        v26[1] = v29;
        uint64_t v30 = *((void *)v27 + 2);
        unint64_t v31 = *((void *)v27 + 3);
        sub_24A08DE84(v30, v31);
        v26[2] = v30;
        v26[3] = v31;
        *(void *)&v8[*(int *)(v24 + 24)] = *(void *)&v9[*(int *)(v24 + 24)];
        v41((char *)a1 + *(int *)(v40 + 24), (char *)a2 + *(int *)(v40 + 24), v42);
        uint64_t v32 = *(int *)(v40 + 28);
        uint64_t v33 = (char *)a1 + v32;
        uint64_t v34 = (char *)a2 + v32;
        char v35 = v34[16];
        *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
        v33[16] = v35;
        _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)a1, 0, 1, v40);
      }
      uint64_t v36 = *(int *)(sub_24A08DF34(&qword_26975DF60) + 48);
      uint64_t v37 = (void *)((char *)a1 + v36);
      uint64_t v38 = (void *)((char *)a2 + v36);
      *uint64_t v37 = *v38;
      v37[1] = v38[1];
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *initializeWithTake for DownloadResponseMessage(char *a1, char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = (int *)type metadata accessor for AssetDownloadResponse();
    if (_s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)a2, 1, (uint64_t)v6))
    {
      uint64_t v7 = sub_24A08DF34(&qword_26975DF48);
      memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
    }
    else
    {
      uint64_t v8 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
      uint64_t v9 = v6[5];
      uint64_t v10 = &a1[v9];
      uint64_t v11 = &a2[v9];
      uint64_t v12 = type metadata accessor for URL();
      uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32);
      v13(v10, v11, v12);
      uint64_t v14 = (int *)type metadata accessor for Asset.ID(0);
      *(_OWORD *)&v10[v14[5]] = *(_OWORD *)&v11[v14[5]];
      *(_OWORD *)&v10[v14[6]] = *(_OWORD *)&v11[v14[6]];
      *(_OWORD *)&v10[v14[7]] = *(_OWORD *)&v11[v14[7]];
      uint64_t v15 = type metadata accessor for Asset(0);
      uint64_t v16 = *(int *)(v15 + 20);
      uint64_t v17 = &v10[v16];
      unint64_t v18 = &v11[v16];
      long long v19 = *((_OWORD *)v18 + 1);
      *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
      *((_OWORD *)v17 + 1) = v19;
      *(void *)&v10[*(int *)(v15 + 24)] = *(void *)&v11[*(int *)(v15 + 24)];
      v13(&a1[v6[6]], &a2[v6[6]], v12);
      uint64_t v20 = v6[7];
      uint64_t v21 = &a1[v20];
      uint64_t v22 = &a2[v20];
      *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
      v21[16] = v22[16];
      _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)a1, 0, 1, (uint64_t)v6);
    }
    uint64_t v23 = sub_24A08DF34(&qword_26975DF60);
    *(_OWORD *)&a1[*(int *)(v23 + 48)] = *(_OWORD *)&a2[*(int *)(v23 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *assignWithTake for DownloadResponseMessage(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_24A0D8500((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = (int *)type metadata accessor for AssetDownloadResponse();
      if (_s10CloudAsset21UploadResponseMessageOwet_0((uint64_t)a2, 1, (uint64_t)v6))
      {
        uint64_t v7 = sub_24A08DF34(&qword_26975DF48);
        memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
      }
      else
      {
        uint64_t v8 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
        uint64_t v9 = v6[5];
        uint64_t v10 = &a1[v9];
        uint64_t v11 = &a2[v9];
        uint64_t v12 = type metadata accessor for URL();
        uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32);
        v13(v10, v11, v12);
        uint64_t v14 = (int *)type metadata accessor for Asset.ID(0);
        *(_OWORD *)&v10[v14[5]] = *(_OWORD *)&v11[v14[5]];
        *(_OWORD *)&v10[v14[6]] = *(_OWORD *)&v11[v14[6]];
        *(_OWORD *)&v10[v14[7]] = *(_OWORD *)&v11[v14[7]];
        uint64_t v15 = type metadata accessor for Asset(0);
        uint64_t v16 = *(int *)(v15 + 20);
        uint64_t v17 = &v10[v16];
        unint64_t v18 = &v11[v16];
        long long v19 = *((_OWORD *)v18 + 1);
        *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
        *((_OWORD *)v17 + 1) = v19;
        *(void *)&v10[*(int *)(v15 + 24)] = *(void *)&v11[*(int *)(v15 + 24)];
        v13(&a1[v6[6]], &a2[v6[6]], v12);
        uint64_t v20 = v6[7];
        uint64_t v21 = &a1[v20];
        uint64_t v22 = &a2[v20];
        *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
        v21[16] = v22[16];
        _s10CloudAsset21UploadResponseMessageOwst_0((uint64_t)a1, 0, 1, (uint64_t)v6);
      }
      uint64_t v23 = sub_24A08DF34(&qword_26975DF60);
      *(_OWORD *)&a1[*(int *)(v23 + 48)] = *(_OWORD *)&a2[*(int *)(v23 + 48)];
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

void sub_24A0D9548()
{
  sub_24A0D95F0();
  if (v0 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    v1[4] = v1;
    v1[5] = MEMORY[0x263F8CF50] + 64;
    swift_initEnumMetadataMultiPayload();
  }
}

void sub_24A0D95F0()
{
  if (!qword_26975E498)
  {
    type metadata accessor for AssetDownloadResponse();
    sub_24A0D96BC(&qword_26975E4A0, (void (*)(uint64_t))type metadata accessor for AssetDownloadResponse);
    sub_24A0D96BC(&qword_26975E4A8, (void (*)(uint64_t))type metadata accessor for AssetDownloadResponse);
    unint64_t v0 = type metadata accessor for XPCResult();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26975E498);
    }
  }
}

uint64_t sub_24A0D96BC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for DownloadResponseMessage.CodingKeys()
{
  return &type metadata for DownloadResponseMessage.CodingKeys;
}

unsigned char *_s10CloudAsset23DownloadResponseMessageO10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24A0D97E8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DownloadResponseMessage.ResponseCodingKeys()
{
  return &type metadata for DownloadResponseMessage.ResponseCodingKeys;
}

unsigned char *storeEnumTagSinglePayload for DownloadResponseMessage.SimultaneousTransferErrorCodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x24A0D98BCLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for DownloadResponseMessage.SimultaneousTransferErrorCodingKeys()
{
  return &type metadata for DownloadResponseMessage.SimultaneousTransferErrorCodingKeys;
}

unint64_t sub_24A0D98F8()
{
  unint64_t result = qword_26975E4B0;
  if (!qword_26975E4B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E4B0);
  }
  return result;
}

unint64_t sub_24A0D9948()
{
  unint64_t result = qword_26975E4B8;
  if (!qword_26975E4B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E4B8);
  }
  return result;
}

unint64_t sub_24A0D9998()
{
  unint64_t result = qword_26975E4C0;
  if (!qword_26975E4C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E4C0);
  }
  return result;
}

unint64_t sub_24A0D99E8()
{
  unint64_t result = qword_26975E4C8;
  if (!qword_26975E4C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E4C8);
  }
  return result;
}

unint64_t sub_24A0D9A38()
{
  unint64_t result = qword_26975E4D0;
  if (!qword_26975E4D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E4D0);
  }
  return result;
}

unint64_t sub_24A0D9A88()
{
  unint64_t result = qword_26975E4D8;
  if (!qword_26975E4D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E4D8);
  }
  return result;
}

unint64_t sub_24A0D9AD8()
{
  unint64_t result = qword_26975E4E0;
  if (!qword_26975E4E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E4E0);
  }
  return result;
}

unint64_t sub_24A0D9B28()
{
  unint64_t result = qword_26975E4E8;
  if (!qword_26975E4E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E4E8);
  }
  return result;
}

unint64_t sub_24A0D9B78()
{
  unint64_t result = qword_26975E4F0;
  if (!qword_26975E4F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E4F0);
  }
  return result;
}

uint64_t sub_24A0D9BE0()
{
  return v0;
}

uint64_t sub_24A0D9BF8()
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t sub_24A0D9C18()
{
  return v0;
}

uint64_t sub_24A0D9C2C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x646C656979 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x6873696E6966 && a2 == 0xE600000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x726F727265 && a2 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v8) {
        return 2;
      }
      else {
        return 3;
      }
    }
  }
}

uint64_t sub_24A0D9D64(char a1)
{
  if (!a1) {
    return 0x646C656979;
  }
  if (a1 == 1) {
    return 0x6873696E6966;
  }
  return 0x726F727265;
}

uint64_t sub_24A0D9DB0()
{
  return sub_24A0D9D64(*v0);
}

uint64_t sub_24A0D9DB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_24A0D9C2C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_24A0D9DE0(uint64_t a1)
{
  unint64_t v2 = sub_24A0DA2D4();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A0D9E1C(uint64_t a1)
{
  unint64_t v2 = sub_24A0DA2D4();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_24A0D9E58(uint64_t a1)
{
  unint64_t v2 = sub_24A0DA320();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A0D9E94(uint64_t a1)
{
  unint64_t v2 = sub_24A0DA320();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_24A0D9ED0(uint64_t a1)
{
  unint64_t v2 = sub_24A0DA36C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A0D9F0C(uint64_t a1)
{
  unint64_t v2 = sub_24A0DA36C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_24A0D9F48(uint64_t a1)
{
  unint64_t v2 = sub_24A0DA3B8();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A0D9F84(uint64_t a1)
{
  unint64_t v2 = sub_24A0DA3B8();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t XPCAsyncSequenceResponse.Event.encode(to:)(void *a1)
{
  sub_24A08DF34(&qword_26975E4F8);
  sub_24A08F24C();
  MEMORY[0x270FA5388](v3);
  sub_24A08F2E0();
  sub_24A08DF34(&qword_26975E500);
  sub_24A08F24C();
  MEMORY[0x270FA5388](v4);
  sub_24A093CD4();
  sub_24A08DF34(&qword_26975E508);
  sub_24A08F24C();
  MEMORY[0x270FA5388](v5);
  sub_24A093CD4();
  sub_24A08DF34(&qword_26975E510);
  sub_24A08F24C();
  MEMORY[0x270FA5388](v6);
  sub_24A0B28D0();
  uint64_t v7 = *v1;
  unint64_t v8 = v1[1];
  sub_24A08DF78(a1, a1[3]);
  sub_24A0DA2D4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v8 >> 60 == 11)
  {
    sub_24A0DA320();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    sub_24A08F2BC();
    v10();
    sub_24A0DC264();
    goto LABEL_5;
  }
  if (v8 >> 60 == 15)
  {
    sub_24A0DA36C();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    sub_24A08F2BC();
    v9();
    sub_24A0DC264();
LABEL_5:
    sub_24A08F2BC();
    return v11();
  }
  sub_24A08DE84(v7, v8);
  sub_24A0DA3B8();
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  sub_24A090E5C();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  sub_24A08F2BC();
  v13();
  sub_24A0DC264();
  sub_24A08F2BC();
  v14();
  return sub_24A0C8810(v7, v8);
}

unint64_t sub_24A0DA2D4()
{
  unint64_t result = qword_26975E518;
  if (!qword_26975E518)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E518);
  }
  return result;
}

unint64_t sub_24A0DA320()
{
  unint64_t result = qword_26975E520;
  if (!qword_26975E520)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E520);
  }
  return result;
}

unint64_t sub_24A0DA36C()
{
  unint64_t result = qword_26975E528;
  if (!qword_26975E528)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E528);
  }
  return result;
}

unint64_t sub_24A0DA3B8()
{
  unint64_t result = qword_26975E530;
  if (!qword_26975E530)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E530);
  }
  return result;
}

uint64_t XPCAsyncSequenceResponse.Event.init(from:)@<X0>(void *a1@<X0>, long long *a2@<X8>)
{
  sub_24A08DF34(&qword_26975E538);
  sub_24A08F24C();
  MEMORY[0x270FA5388](v3);
  sub_24A08F2E0();
  sub_24A08DF34(&qword_26975E540);
  sub_24A08F24C();
  MEMORY[0x270FA5388](v4);
  sub_24A093CD4();
  sub_24A08DF34(&qword_26975E548);
  sub_24A08F24C();
  MEMORY[0x270FA5388](v5);
  sub_24A0B28D0();
  uint64_t v6 = sub_24A08DF34(&qword_26975E550);
  sub_24A08F24C();
  uint64_t v35 = v7;
  MEMORY[0x270FA5388](v8);
  sub_24A093CD4();
  uint64_t v11 = v10 - v9;
  sub_24A08DF78(a1, a1[3]);
  sub_24A0DA2D4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v37) {
    return sub_24A08E050((uint64_t)a1);
  }
  uint64_t v12 = KeyedDecodingContainer.allKeys.getter();
  uint64_t v13 = *(void *)(v12 + 16);
  uint64_t v14 = v6;
  if (!v13)
  {
    uint64_t v23 = v11;
    uint64_t v24 = v35;
LABEL_9:
    uint64_t v25 = type metadata accessor for DecodingError();
    swift_allocError();
    unint64_t v27 = v26;
    sub_24A08DF34(&qword_26975D980);
    *unint64_t v27 = &type metadata for XPCAsyncSequenceResponse.Event;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v25 - 8) + 104))(v27, *MEMORY[0x263F8DCB0], v25);
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v14);
    return sub_24A08E050((uint64_t)a1);
  }
  int v15 = *(unsigned __int8 *)(v12 + 32);
  sub_24A0B2390(1, v13, v12, v12 + 32, 0, (2 * v13) | 1);
  uint64_t v17 = v16;
  unint64_t v19 = v18;
  swift_bridgeObjectRelease();
  if (v17 != v19 >> 1)
  {
    uint64_t v23 = v11;
    uint64_t v24 = v35;
    uint64_t v14 = v6;
    goto LABEL_9;
  }
  if (v15)
  {
    if (v15 == 1)
    {
      sub_24A0DA36C();
      sub_24A0DC244();
      sub_24A08F2BC();
      v20();
      swift_unknownObjectRelease();
      sub_24A08F2BC();
      v21();
      long long v22 = xmmword_24A0EB490;
    }
    else
    {
      sub_24A0DA320();
      sub_24A0DC244();
      sub_24A08F2BC();
      v29();
      swift_unknownObjectRelease();
      sub_24A08F2BC();
      v30();
      long long v22 = xmmword_24A0EB480;
    }
  }
  else
  {
    LOBYTE(v36) = 0;
    sub_24A0DA3B8();
    sub_24A0DC244();
    sub_24A090DC4();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    sub_24A08F2BC();
    v31();
    swift_unknownObjectRelease();
    uint64_t v32 = sub_24A0DC274();
    v33(v32);
    long long v22 = v36;
  }
  *a2 = v22;
  return sub_24A08E050((uint64_t)a1);
}

uint64_t sub_24A0DA958@<X0>(void *a1@<X0>, long long *a2@<X8>)
{
  return XPCAsyncSequenceResponse.Event.init(from:)(a1, a2);
}

uint64_t sub_24A0DA970(void *a1)
{
  return XPCAsyncSequenceResponse.Event.encode(to:)(a1);
}

uint64_t XPCAsyncSequenceResponse.id.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for UUID();
  sub_24A08F280();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  return v5(a1, v1, v3);
}

uint64_t XPCAsyncSequenceResponse.event.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = (uint64_t *)(v1 + *(int *)(type metadata accessor for XPCAsyncSequenceResponse() + 20));
  uint64_t v4 = *v3;
  unint64_t v5 = v3[1];
  *a1 = *v3;
  a1[1] = v5;
  return sub_24A0DB0D8(v4, v5);
}

uint64_t XPCAsyncSequenceResponse.init(id:event:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  type metadata accessor for UUID();
  sub_24A08F280();
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(a3, a1);
  uint64_t result = type metadata accessor for XPCAsyncSequenceResponse();
  uint64_t v9 = (void *)(a3 + *(int *)(result + 20));
  *uint64_t v9 = v5;
  v9[1] = v6;
  return result;
}

uint64_t sub_24A0DAAA8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746E657665 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_24A0DAB78(char a1)
{
  if (a1) {
    return 0x746E657665;
  }
  else {
    return 25705;
  }
}

uint64_t sub_24A0DABA0()
{
  return sub_24A0DAB78(*v0);
}

uint64_t sub_24A0DABA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_24A0DAAA8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_24A0DABD0(uint64_t a1)
{
  unint64_t v2 = sub_24A0DB0F0();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A0DAC0C(uint64_t a1)
{
  unint64_t v2 = sub_24A0DB0F0();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t XPCAsyncSequenceResponse.encode(to:)(void *a1)
{
  uint64_t v4 = sub_24A08DF34(&qword_26975E558);
  sub_24A08F24C();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  sub_24A08F2C8();
  sub_24A08DF78(a1, a1[3]);
  sub_24A0DB0F0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for UUID();
  sub_24A0975AC(&qword_26975D360);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for XPCAsyncSequenceResponse();
    sub_24A0DB13C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v2, v4);
}

uint64_t XPCAsyncSequenceResponse.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v16 = type metadata accessor for UUID();
  sub_24A08F24C();
  uint64_t v15 = v6;
  MEMORY[0x270FA5388](v7);
  sub_24A08F2C8();
  sub_24A08DF34(&qword_26975E570);
  sub_24A08F24C();
  MEMORY[0x270FA5388](v8);
  sub_24A093CD4();
  uint64_t v9 = type metadata accessor for XPCAsyncSequenceResponse();
  sub_24A08F280();
  MEMORY[0x270FA5388](v10);
  sub_24A0B28D0();
  sub_24A08DF78(a1, a1[3]);
  sub_24A0DB0F0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_24A08E050((uint64_t)a1);
  }
  LOBYTE(v17) = 0;
  sub_24A0975AC(&qword_26975D390);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32))(v4, v3, v16);
  sub_24A0DB188();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v11 = sub_24A097E24();
  v12(v11);
  *(_OWORD *)(v4 + *(int *)(v9 + 20)) = v17;
  sub_24A0D6BDC(v4, a2);
  sub_24A08E050((uint64_t)a1);
  return sub_24A0DB1D4(v4);
}

uint64_t sub_24A0DB060@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return XPCAsyncSequenceResponse.init(from:)(a1, a2);
}

uint64_t sub_24A0DB078(void *a1)
{
  return XPCAsyncSequenceResponse.encode(to:)(a1);
}

uint64_t type metadata accessor for XPCAsyncSequenceResponse()
{
  uint64_t result = qword_26975E580;
  if (!qword_26975E580) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_24A0DB0D8(uint64_t a1, unint64_t a2)
{
  if (((a2 >> 60) | 4) != 0xF) {
    return sub_24A08DE84(a1, a2);
  }
  return a1;
}

unint64_t sub_24A0DB0F0()
{
  unint64_t result = qword_26975E560;
  if (!qword_26975E560)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E560);
  }
  return result;
}

unint64_t sub_24A0DB13C()
{
  unint64_t result = qword_26975E568;
  if (!qword_26975E568)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E568);
  }
  return result;
}

unint64_t sub_24A0DB188()
{
  unint64_t result = qword_26975E578;
  if (!qword_26975E578)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E578);
  }
  return result;
}

uint64_t sub_24A0DB1D4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for XPCAsyncSequenceResponse();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *initializeBufferWithCopyOfBuffer for XPCAsyncSequenceResponse(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    unint64_t v11 = *((void *)v10 + 1);
    if (((v11 >> 60) | 4) == 0xF)
    {
      *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
    }
    else
    {
      uint64_t v13 = *(void *)v10;
      sub_24A08DE84(*(void *)v10, *((void *)v10 + 1));
      *(void *)uint64_t v9 = v13;
      *((void *)v9 + 1) = v11;
    }
  }
  return a1;
}

uint64_t destroy for XPCAsyncSequenceResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v6 = (uint64_t *)(a1 + *(int *)(a2 + 20));
  unint64_t v7 = v6[1];
  if (((v7 >> 60) | 4) != 0xF)
  {
    uint64_t v8 = *v6;
    return sub_24A08DEDC(v8, v7);
  }
  return result;
}

uint64_t initializeWithCopy for XPCAsyncSequenceResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = v9[1];
  if (((v10 >> 60) | 4) == 0xF)
  {
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  }
  else
  {
    uint64_t v11 = *v9;
    sub_24A08DE84(*v9, v9[1]);
    *(void *)uint64_t v8 = v11;
    *(void *)(v8 + 8) = v10;
  }
  return a1;
}

uint64_t assignWithCopy for XPCAsyncSequenceResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  if (((*(void *)(a1 + v7 + 8) >> 60) | 4) != 0xF)
  {
    unint64_t v12 = v9[1];
    if (((v12 >> 60) | 4) != 0xF)
    {
      uint64_t v14 = *v9;
      sub_24A08DE84(v14, v12);
      uint64_t v15 = *v8;
      unint64_t v16 = v8[1];
      *uint64_t v8 = v14;
      v8[1] = v12;
      sub_24A08DEDC(v15, v16);
      return a1;
    }
    sub_24A0DB578((uint64_t)v8);
    goto LABEL_6;
  }
  unint64_t v10 = v9[1];
  if (((v10 >> 60) | 4) == 0xF)
  {
LABEL_6:
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    return a1;
  }
  uint64_t v11 = *v9;
  sub_24A08DE84(v11, v10);
  *uint64_t v8 = v11;
  v8[1] = v10;
  return a1;
}

uint64_t sub_24A0DB578(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for XPCAsyncSequenceResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = *(void *)(a1 + v7 + 8);
  if (((v10 >> 60) | 4) != 0xF)
  {
    unint64_t v11 = v9[1];
    if (((v11 >> 60) | 4) != 0xF)
    {
      uint64_t v13 = *v8;
      *uint64_t v8 = *v9;
      v8[1] = v11;
      sub_24A08DEDC(v13, v10);
      return a1;
    }
    sub_24A0DB578((uint64_t)v8);
  }
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  return a1;
}

uint64_t getEnumTagSinglePayload for XPCAsyncSequenceResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A0DB6BC);
}

uint64_t sub_24A0DB6BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for UUID();
  sub_24A08F268();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return _s10CloudAsset21UploadResponseMessageOwet_0(a1, a2, v6);
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20) + 8) >> 60;
    int v10 = (4 * v9) & 0xC | (v9 >> 2);
    BOOL v11 = __OFSUB__(13, v10);
    int v12 = 13 - v10;
    if (v12 < 0 != v11) {
      int v12 = -1;
    }
    if (((4 * v9) & 0xC) != 0) {
      return (v12 + 1);
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for XPCAsyncSequenceResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A0DB774);
}

void sub_24A0DB774(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for UUID();
  sub_24A08F268();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    _s10CloudAsset21UploadResponseMessageOwst_0(a1, a2, a2, v8);
  }
  else
  {
    int v10 = (void *)(a1 + *(int *)(a4 + 20));
    *int v10 = 0;
    v10[1] = (unint64_t)(((14 - a2) >> 2) & 3 | (4 * (14 - a2))) << 60;
  }
}

uint64_t sub_24A0DB810()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *destroy for XPCAsyncSequenceResponse.Event(uint64_t *result)
{
  unint64_t v1 = result[1];
  if ((v1 & 0x3000000000000000) == 0) {
    return (uint64_t *)sub_24A08DEDC(*result, v1);
  }
  return result;
}

uint64_t _s10CloudAsset24XPCAsyncSequenceResponseV5EventOwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = a2[1];
  if ((v3 & 0x3000000000000000) != 0)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    uint64_t v4 = *a2;
    sub_24A08DE84(*a2, a2[1]);
    *(void *)a1 = v4;
    *(void *)(a1 + 8) = v3;
  }
  return a1;
}

uint64_t *assignWithCopy for XPCAsyncSequenceResponse.Event(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = a2[1];
  uint64_t v6 = v5 & 0x3000000000000000;
  if ((v4 & 0x3000000000000000) == 0)
  {
    if (!v6)
    {
      uint64_t v9 = *a2;
      sub_24A08DE84(v9, v5);
      uint64_t v10 = *a1;
      unint64_t v11 = a1[1];
      *a1 = v9;
      a1[1] = v5;
      sub_24A08DEDC(v10, v11);
      return a1;
    }
    sub_24A08DEDC(*a1, v4);
    goto LABEL_6;
  }
  if (v6)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  uint64_t v7 = *a2;
  sub_24A08DE84(v7, v5);
  *a1 = v7;
  a1[1] = v5;
  return a1;
}

__n128 initializeWithTake for XPCAsyncSequenceResponse.Event(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t *assignWithTake for XPCAsyncSequenceResponse.Event(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4 = a1[1];
  if ((v4 & 0x3000000000000000) == 0)
  {
    uint64_t v5 = a2[1];
    if ((v5 & 0x3000000000000000) == 0)
    {
      uint64_t v7 = *a1;
      *a1 = *a2;
      a1[1] = v5;
      sub_24A08DEDC(v7, v4);
      return a1;
    }
    sub_24A08DEDC(*a1, v4);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  return a1;
}

uint64_t getEnumTagSinglePayload for XPCAsyncSequenceResponse.Event(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xB && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 11);
  }
  uint64_t v3 = *(void *)(a1 + 8) >> 60;
  if (((4 * v3) & 0xC) != 0) {
    unsigned int v4 = 16 - ((4 * v3) & 0xC | (v3 >> 2));
  }
  else {
    unsigned int v4 = 0;
  }
  if (v4 >= 3) {
    return v4 - 2;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for XPCAsyncSequenceResponse.Event(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xA)
  {
    *(void *)__n128 result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)__n128 result = a2 - 11;
    if (a3 >= 0xB) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0xB) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2)
    {
      *(void *)__n128 result = 0;
      *(void *)(result + 8) = (unint64_t)((4 * (14 - a2)) | ((14 - a2) >> 2)) << 60;
    }
  }
  return result;
}

uint64_t sub_24A0DBACC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8) >> 60;
  if (((4 * v1) & 0xC) != 0) {
    return 16 - ((4 * v1) & 0xC | (v1 >> 2));
  }
  else {
    return 0;
  }
}

void *sub_24A0DBAF4(void *result, unsigned int a2)
{
  if (a2 > 0xC)
  {
    *__n128 result = a2 - 13;
    result[1] = 0;
  }
  else if (a2)
  {
    *__n128 result = 0;
    result[1] = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
  }
  return result;
}

ValueMetadata *type metadata accessor for XPCAsyncSequenceResponse.Event()
{
  return &type metadata for XPCAsyncSequenceResponse.Event;
}

unsigned char *storeEnumTagSinglePayload for XPCAsyncSequenceResponse.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24A0DBC00);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for XPCAsyncSequenceResponse.CodingKeys()
{
  return &type metadata for XPCAsyncSequenceResponse.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for XPCAsyncSequenceResponse.Event.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24A0DBD04);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for XPCAsyncSequenceResponse.Event.CodingKeys()
{
  return &type metadata for XPCAsyncSequenceResponse.Event.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for XPCAsyncSequenceResponse.Event.YieldCodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *__n128 result = a2;
        return result;
      case 2:
        *(_WORD *)__n128 result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)__n128 result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *__n128 result = 0;
      break;
    case 2:
      *(_WORD *)__n128 result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x24A0DBDD8);
    case 4:
      *(_DWORD *)__n128 result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for XPCAsyncSequenceResponse.Event.YieldCodingKeys()
{
  return &type metadata for XPCAsyncSequenceResponse.Event.YieldCodingKeys;
}

ValueMetadata *type metadata accessor for XPCAsyncSequenceResponse.Event.FinishCodingKeys()
{
  return &type metadata for XPCAsyncSequenceResponse.Event.FinishCodingKeys;
}

ValueMetadata *type metadata accessor for XPCAsyncSequenceResponse.Event.ErrorCodingKeys()
{
  return &type metadata for XPCAsyncSequenceResponse.Event.ErrorCodingKeys;
}

unint64_t sub_24A0DBE34()
{
  unint64_t result = qword_26975E590;
  if (!qword_26975E590)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E590);
  }
  return result;
}

unint64_t sub_24A0DBE84()
{
  unint64_t result = qword_26975E598;
  if (!qword_26975E598)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E598);
  }
  return result;
}

unint64_t sub_24A0DBED4()
{
  unint64_t result = qword_26975E5A0;
  if (!qword_26975E5A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E5A0);
  }
  return result;
}

unint64_t sub_24A0DBF24()
{
  unint64_t result = qword_26975E5A8;
  if (!qword_26975E5A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E5A8);
  }
  return result;
}

unint64_t sub_24A0DBF74()
{
  unint64_t result = qword_26975E5B0;
  if (!qword_26975E5B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E5B0);
  }
  return result;
}

unint64_t sub_24A0DBFC4()
{
  unint64_t result = qword_26975E5B8;
  if (!qword_26975E5B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E5B8);
  }
  return result;
}

unint64_t sub_24A0DC014()
{
  unint64_t result = qword_26975E5C0;
  if (!qword_26975E5C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E5C0);
  }
  return result;
}

unint64_t sub_24A0DC064()
{
  unint64_t result = qword_26975E5C8;
  if (!qword_26975E5C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E5C8);
  }
  return result;
}

unint64_t sub_24A0DC0B4()
{
  unint64_t result = qword_26975E5D0;
  if (!qword_26975E5D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E5D0);
  }
  return result;
}

unint64_t sub_24A0DC104()
{
  unint64_t result = qword_26975E5D8;
  if (!qword_26975E5D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E5D8);
  }
  return result;
}

unint64_t sub_24A0DC154()
{
  unint64_t result = qword_26975E5E0;
  if (!qword_26975E5E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E5E0);
  }
  return result;
}

unint64_t sub_24A0DC1A4()
{
  unint64_t result = qword_26975E5E8;
  if (!qword_26975E5E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E5E8);
  }
  return result;
}

unint64_t sub_24A0DC1F4()
{
  unint64_t result = qword_26975E5F0;
  if (!qword_26975E5F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E5F0);
  }
  return result;
}

uint64_t sub_24A0DC244()
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t sub_24A0DC264()
{
  return v0;
}

uint64_t sub_24A0DC274()
{
  return v0;
}

uint64_t sub_24A0DC28C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_24A0A8044(v0, qword_26975E5F8);
  sub_24A0A800C(v0, (uint64_t)qword_26975E5F8);
  type metadata accessor for XPCSessionCacheImplementation();
  sub_24A08DF34(&qword_26975E610);
  String.init<A>(describing:)();
  return Logger.init(subsystem:category:)();
}

void *sub_24A0DC324(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_defaultActor_initialize();
  v4[14] = a1;
  v4[15] = a2;
  v4[16] = a3;
  v4[17] = a4;
  v4[18] = 0;
  return v4;
}

uint64_t sub_24A0DC378()
{
  uint64_t v1 = v0;
  if (qword_26975D338 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_24A0A800C(v2, (uint64_t)qword_26975E5F8);
  int v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    *(_WORD *)swift_slowAlloc() = 0;
    sub_24A0DCB54(&dword_24A08B000, v5, v6, "evict xpc session");
    sub_24A0C912C();
  }

  *(void *)(v1 + 144) = 0;
  return swift_release();
}

uint64_t sub_24A0DC454()
{
  if (*(void *)(v1 + 144))
  {
    uint64_t v0 = *(void *)(v1 + 144);
  }
  else
  {
    uint64_t v3 = sub_24A0DC49C();
    if (v2) {
      return v0;
    }
    uint64_t v0 = v3;
  }
  swift_retain();
  return v0;
}

uint64_t sub_24A0DC49C()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for XPCSession.InitializationOptions();
  MEMORY[0x270FA5388](v3 - 8);
  if (qword_26975D338 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_24A0A800C(v4, (uint64_t)qword_26975E5F8);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl(&dword_24A08B000, v5, v6, "establish xpc session", v7, 2u);
    MEMORY[0x24C5BBA10](v7, -1, -1);
  }

  type metadata accessor for XPCSession();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  static XPCSession.InitializationOptions.none.getter();
  type metadata accessor for XPCAsyncSequenceResponse();
  sub_24A0DCB0C(&qword_26975E618, (void (*)(uint64_t))type metadata accessor for XPCAsyncSequenceResponse);
  uint64_t v8 = XPCSession.__allocating_init<A>(machService:targetQueue:options:incomingMessageHandler:cancellationHandler:)();
  uint64_t v9 = v8;
  if (!v1)
  {
    *(void *)(v2 + 144) = v8;
    swift_retain();
    swift_release();
  }
  return v9;
}

uint64_t sub_24A0DC6BC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for XPCRichError();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_26975D338 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_24A0A800C(v8, (uint64_t)qword_26975E5F8);
  uint64_t v9 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v9(v7, a1, v4);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    int v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = (void *)swift_slowAlloc();
    uint64_t v22 = v2;
    *(_DWORD *)int v12 = 138412290;
    uint64_t v20 = v12 + 4;
    sub_24A0DCB0C(&qword_26975DFB8, MEMORY[0x263F8F408]);
    swift_allocError();
    v9(v13, (uint64_t)v7, v4);
    uint64_t v14 = _swift_stdlib_bridgeErrorToNSError();
    uint64_t v23 = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v21 = v14;
    uint64_t v15 = sub_24A0DCB74();
    v16(v15);
    _os_log_impl(&dword_24A08B000, v10, v11, "cached xpc connection disconnected due to error %@", v12, 0xCu);
    sub_24A08DF34(&qword_26975DF20);
    swift_arrayDestroy();
    sub_24A0C912C();
    sub_24A0C912C();
  }
  else
  {
    uint64_t v17 = sub_24A0DCB74();
    v18(v17);
  }

  return sub_24A0DC378();
}

uint64_t sub_24A0DC95C()
{
  uint64_t v1 = v0;
  if (qword_26975D338 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_24A0A800C(v2, (uint64_t)qword_26975E5F8);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    *(_WORD *)swift_slowAlloc() = 0;
    sub_24A0DCB54(&dword_24A08B000, v5, v6, "cancel xpc session");
    sub_24A0C912C();
  }

  if (*(void *)(v1 + 144))
  {
    swift_retain();
    dispatch thunk of XPCSession.cancel(reason:)();
    swift_release();
  }
  return sub_24A0DC378();
}

uint64_t sub_24A0DCA64()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_24A0DCA9C()
{
  sub_24A0DCA64();
  return MEMORY[0x270FA2418](v0);
}

uint64_t type metadata accessor for XPCSessionCacheImplementation()
{
  return self;
}

uint64_t sub_24A0DCAEC()
{
  return sub_24A0D2020();
}

uint64_t sub_24A0DCB0C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_24A0DCB54(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t sub_24A0DCB74()
{
  return v0;
}

uint64_t sub_24A0DCB88@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  type metadata accessor for Date();
  sub_24A08F24C();
  uint64_t v24 = v6;
  uint64_t v25 = v5;
  MEMORY[0x270FA5388](v5);
  sub_24A093CD4();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = sub_24A08DF34(&qword_26975D560);
  MEMORY[0x270FA5388](v10 - 8);
  sub_24A093D9C();
  uint64_t v11 = type metadata accessor for Google_Protobuf_Timestamp();
  sub_24A08F24C();
  uint64_t v13 = v12;
  MEMORY[0x270FA5388](v14);
  sub_24A093CD4();
  uint64_t v17 = v16 - v15;
  uint64_t v18 = a1[1];
  *(void *)a2 = *a1;
  *((void *)a2 + 1) = v18;
  uint64_t v19 = a1[3];
  *((void *)a2 + 2) = a1[2];
  *((void *)a2 + 3) = v19;
  uint64_t v20 = a1[5];
  *((void *)a2 + 4) = a1[4];
  *((void *)a2 + 5) = v20;
  uint64_t v21 = type metadata accessor for CloudAssets_Credential(0);
  sub_24A0DE520((uint64_t)a1 + *(int *)(v21 + 32), v2);
  if (_s10CloudAsset21UploadResponseMessageOwet_0(v2, 1, v11) == 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    Google_Protobuf_Timestamp.init()();
    sub_24A0DD978(v2);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(v17, v2, v11);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  Google_Protobuf_Timestamp.date.getter();
  sub_24A0DD9D8((uint64_t)a1);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v17, v11);
  uint64_t v22 = type metadata accessor for Credential(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 32))(&a2[*(int *)(v22 + 28)], v9, v25);
}

uint64_t static Credential.== infix(_:_:)(void *a1, void *a2)
{
  BOOL v4 = *a1 == *a2 && a1[1] == a2[1];
  if (!v4 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  BOOL v5 = a1[2] == a2[2] && a1[3] == a2[3];
  if (!v5 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  BOOL v6 = a1[4] == a2[4] && a1[5] == a2[5];
  if (!v6 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  type metadata accessor for Credential(0);
  return static Date.== infix(_:_:)();
}

uint64_t type metadata accessor for Credential(uint64_t a1)
{
  return sub_24A0933F0(a1, (uint64_t *)&unk_26975E640);
}

uint64_t Credential.Builder.__allocating_init(tenantName:requestorID:accessToken:)()
{
  sub_24A0DE5BC();
  uint64_t v0 = swift_allocObject();
  Credential.Builder.init(tenantName:requestorID:accessToken:)();
  return v0;
}

void *Credential.Builder.init(tenantName:requestorID:accessToken:)()
{
  sub_24A0DE5BC();
  uint64_t v8 = type metadata accessor for Date();
  sub_24A08F24C();
  uint64_t v10 = v9;
  MEMORY[0x270FA5388](v11);
  sub_24A0B8CE0();
  v1[2] = v6;
  v1[3] = v5;
  void v1[6] = v2;
  v1[7] = v0;
  v1[4] = v4;
  v1[5] = v3;
  static Date.distantFuture.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))((uint64_t)v1 + OBJC_IVAR____TtCV10CloudAsset10Credential7Builder_expirationDate, v7, v8);
  return v1;
}

uint64_t Credential.Builder.setExpirationDate(_:)(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtCV10CloudAsset10Credential7Builder_expirationDate;
  swift_beginAccess();
  type metadata accessor for Date();
  sub_24A08F280();
  (*(void (**)(uint64_t, uint64_t))(v4 + 24))(v3, a1);
  swift_endAccess();
  return swift_retain();
}

uint64_t Credential.Builder.build()@<X0>(void *a1@<X8>)
{
  uint64_t v3 = v1[3];
  *a1 = v1[2];
  a1[1] = v3;
  uint64_t v4 = v1[5];
  a1[2] = v1[4];
  a1[3] = v4;
  uint64_t v5 = (char *)v1 + OBJC_IVAR____TtCV10CloudAsset10Credential7Builder_expirationDate;
  uint64_t v6 = v1[6];
  uint64_t v7 = v1[7];
  a1[4] = v6;
  a1[5] = v7;
  swift_beginAccess();
  uint64_t v8 = (char *)a1 + *(int *)(type metadata accessor for Credential(0) + 28);
  type metadata accessor for Date();
  sub_24A08F280();
  (*(void (**)(char *, char *))(v9 + 16))(v8, v5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t Credential.Builder.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtCV10CloudAsset10Credential7Builder_expirationDate;
  type metadata accessor for Date();
  sub_24A08F280();
  (*(void (**)(uint64_t))(v2 + 8))(v1);
  return v0;
}

uint64_t Credential.Builder.__deallocating_deinit()
{
  Credential.Builder.deinit();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);
  return MEMORY[0x270FA0228](v0, v1, v2);
}

uint64_t sub_24A0DD1C8(uint64_t a1)
{
  unint64_t v2 = sub_24A0DD5FC();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A0DD204(uint64_t a1)
{
  unint64_t v2 = sub_24A0DD5FC();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t Credential.tenantName.getter()
{
  return sub_24A093C7C();
}

uint64_t Credential.requestorID.getter()
{
  return sub_24A093C7C();
}

uint64_t Credential.accessToken.getter()
{
  return sub_24A093C7C();
}

uint64_t Credential.expirationDate.getter()
{
  sub_24A0DE588();
  sub_24A08F280();
  uint64_t v0 = sub_24A093C7C();
  return v1(v0);
}

uint64_t Credential.init(accessToken:expiryDate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = 0x616C506572616853;
  a4[1] = 0xE900000000000079;
  a4[2] = 0;
  a4[3] = 0xE000000000000000;
  a4[4] = a1;
  a4[5] = a2;
  sub_24A0DE588();
  sub_24A08F280();
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 32);
  return v8(a4, a3, v6);
}

uint64_t Credential.init(from:)@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x270FA5388](v4 - 8);
  sub_24A08F2E0();
  type metadata accessor for CloudAssets_Credential(0);
  sub_24A08F280();
  MEMORY[0x270FA5388](v5);
  sub_24A093CD4();
  uint64_t v8 = (void *)(v7 - v6);
  sub_24A08DF34(&qword_26975E620);
  sub_24A08F24C();
  MEMORY[0x270FA5388](v9);
  sub_24A093D9C();
  sub_24A08DF78(a1, a1[3]);
  sub_24A0DD5FC();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    sub_24A090DC4();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    BinaryDecodingOptions.init()();
    sub_24A0DDAF0(&qword_26975D7D0, (void (*)(uint64_t))type metadata accessor for CloudAssets_Credential);
    Message.init<A>(serializedBytes:extensions:partial:options:)();
    sub_24A0DCB88(v8, a2);
    uint64_t v11 = sub_24A0DE5D8();
    v12(v11);
  }
  return sub_24A08E050((uint64_t)a1);
}

unint64_t sub_24A0DD5FC()
{
  unint64_t result = qword_26975E628;
  if (!qword_26975E628)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E628);
  }
  return result;
}

uint64_t Credential.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  type metadata accessor for Date();
  sub_24A08F24C();
  uint64_t v31 = v6;
  uint64_t v32 = v5;
  MEMORY[0x270FA5388](v5);
  sub_24A08F2E0();
  uint64_t v30 = v7;
  uint64_t v8 = type metadata accessor for Google_Protobuf_Timestamp();
  sub_24A08F24C();
  uint64_t v33 = v9;
  MEMORY[0x270FA5388](v10);
  sub_24A093CD4();
  uint64_t v13 = v12 - v11;
  uint64_t v14 = type metadata accessor for CloudAssets_Credential(0);
  sub_24A08F280();
  MEMORY[0x270FA5388](v15);
  sub_24A093CD4();
  uint64_t v18 = (void *)(v17 - v16);
  sub_24A08DF34(&qword_26975E630);
  sub_24A08F24C();
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  MEMORY[0x270FA5388](v19);
  sub_24A0B8CE0();
  sub_24A08DF78(a1, a1[3]);
  sub_24A0DD5FC();
  uint64_t v34 = v2;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  UnknownStorage.init()();
  uint64_t v21 = (uint64_t)v18 + *(int *)(v14 + 32);
  _s10CloudAsset21UploadResponseMessageOwst_0(v21, 1, 1, v8);
  uint64_t v22 = v3[1];
  *uint64_t v18 = *v3;
  v18[1] = v22;
  uint64_t v23 = v3[3];
  v18[2] = v3[2];
  void v18[3] = v23;
  uint64_t v24 = v3[5];
  v18[4] = v3[4];
  v18[5] = v24;
  uint64_t v25 = (char *)v3 + *(int *)(type metadata accessor for Credential(0) + 28);
  (*(void (**)(uint64_t, char *, uint64_t))(v31 + 16))(v30, v25, v32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Google_Protobuf_Timestamp.init(date:)();
  sub_24A0DD978(v21);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 32))(v21, v13, v8);
  _s10CloudAsset21UploadResponseMessageOwst_0(v21, 0, 1, v8);
  sub_24A0DDAF0(&qword_26975D7D0, (void (*)(uint64_t))type metadata accessor for CloudAssets_Credential);
  uint64_t v26 = Message.serializedData(partial:)();
  unint64_t v28 = v27;
  sub_24A0DD9D8((uint64_t)v18);
  if (!v37)
  {
    sub_24A090E5C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    sub_24A08DEDC(v26, v28);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 8))(v34, v36);
}

uint64_t sub_24A0DD978(uint64_t a1)
{
  uint64_t v2 = sub_24A08DF34(&qword_26975D560);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_24A0DD9D8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CloudAssets_Credential(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t Credential.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t sub_24A0DDAF0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

Swift::Int Credential.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int sub_24A0DDB80()
{
  return Hasher._finalize()();
}

uint64_t sub_24A0DDBBC()
{
  return sub_24A0DDAF0(&qword_26975E638, (void (*)(uint64_t))type metadata accessor for Credential);
}

uint64_t sub_24A0DDC04@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  return Credential.init(from:)(a1, a2);
}

uint64_t sub_24A0DDC1C(void *a1)
{
  return Credential.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for Credential(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v13 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    uint64_t v7 = a2[5];
    uint64_t v8 = *(int *)(a3 + 28);
    uint64_t v9 = (char *)a2 + v8;
    uint64_t v10 = (char *)a1 + v8;
    a1[4] = a2[4];
    a1[5] = v7;
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v10, v9, v11);
  }
  return v3;
}

uint64_t destroy for Credential(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

void *initializeWithCopy for Credential(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = a2[5];
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = (char *)a2 + v7;
  uint64_t v9 = (char *)a1 + v7;
  a1[4] = a2[4];
  a1[5] = v6;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v9, v8, v10);
  return a1;
}

void *assignWithCopy for Credential(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for Credential(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  uint64_t v5 = *(int *)(a3 + 28);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

void *assignWithTake for Credential(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(int *)(a3 + 28);
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 40))(v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for Credential(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A0DE0B0);
}

uint64_t sub_24A0DE0B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for Date();
    uint64_t v9 = a1 + *(int *)(a3 + 28);
    return _s10CloudAsset21UploadResponseMessageOwet_0(v9, a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for Credential(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A0DE14C);
}

uint64_t sub_24A0DE14C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = v5 + *(int *)(a4 + 28);
    return _s10CloudAsset21UploadResponseMessageOwst_0(v8, a2, a2, v7);
  }
  return result;
}

uint64_t sub_24A0DE1CC()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_24A0DE268()
{
  return type metadata accessor for Credential.Builder(0);
}

uint64_t type metadata accessor for Credential.Builder(uint64_t a1)
{
  return sub_24A0933F0(a1, (uint64_t *)&unk_26975E650);
}

uint64_t sub_24A0DE290()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for Credential.Builder(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for Credential.Builder);
}

uint64_t dispatch thunk of Credential.Builder.__allocating_init(tenantName:requestorID:accessToken:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

unsigned char *storeEnumTagSinglePayload for Credential.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x24A0DE3F8);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for Credential.CodingKeys()
{
  return &type metadata for Credential.CodingKeys;
}

unint64_t sub_24A0DE434()
{
  unint64_t result = qword_26975E660;
  if (!qword_26975E660)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E660);
  }
  return result;
}

unint64_t sub_24A0DE484()
{
  unint64_t result = qword_26975E668;
  if (!qword_26975E668)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E668);
  }
  return result;
}

unint64_t sub_24A0DE4D4()
{
  unint64_t result = qword_26975E670;
  if (!qword_26975E670)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E670);
  }
  return result;
}

uint64_t sub_24A0DE520(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A08DF34(&qword_26975D560);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_24A0DE588()
{
  type metadata accessor for Credential(0);
  return type metadata accessor for Date();
}

uint64_t sub_24A0DE5D8()
{
  return v0;
}

uint64_t sub_24A0DE5F0()
{
  return String.hash(into:)();
}

uint64_t AssetUploadRequest.id.getter()
{
  type metadata accessor for UUID();
  sub_24A08F280();
  uint64_t v0 = sub_24A093C7C();
  return v1(v0);
}

uint64_t AssetUploadRequest.tenantName.getter()
{
  return sub_24A093C7C();
}

uint64_t type metadata accessor for AssetUploadRequest()
{
  uint64_t result = qword_26975E6B8;
  if (!qword_26975E6B8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t AssetUploadRequest.tenantName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for AssetUploadRequest() + 20));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*AssetUploadRequest.tenantName.modify())()
{
  return nullsub_1;
}

uint64_t AssetUploadRequest.workingDirectory.getter()
{
  sub_24A0E13DC();
  sub_24A0E1400();
  sub_24A08F280();
  uint64_t v0 = sub_24A093C7C();
  return v1(v0);
}

uint64_t AssetUploadRequest.workingDirectory.setter(uint64_t a1)
{
  type metadata accessor for AssetUploadRequest();
  sub_24A0E1400();
  sub_24A08F280();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 40);
  return v5(v1, a1, v3);
}

uint64_t (*AssetUploadRequest.workingDirectory.modify())()
{
  return nullsub_1;
}

uint64_t AssetUploadRequest.fileURL.getter()
{
  sub_24A0E13DC();
  sub_24A0E1400();
  sub_24A08F280();
  uint64_t v0 = sub_24A093C7C();
  return v1(v0);
}

uint64_t AssetUploadRequest.storageLocation.getter()
{
  sub_24A0E13DC();
  sub_24A0E1400();
  sub_24A08F280();
  uint64_t v0 = sub_24A093C7C();
  return v1(v0);
}

uint64_t AssetUploadRequest.protector.getter()
{
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(sub_24A0E13DC() + 36));
  uint64_t v3 = *v2;
  unint64_t v4 = v2[1];
  uint64_t v5 = v2[2];
  unint64_t v6 = v2[3];
  *uint64_t v0 = *v2;
  v0[1] = v4;
  v0[2] = v5;
  v0[3] = v6;
  sub_24A08DE84(v3, v4);
  return sub_24A08DE84(v5, v6);
}

uint64_t AssetUploadRequest.credential.getter()
{
  uint64_t v2 = sub_24A0E13DC();
  return sub_24A0E002C(v1 + *(int *)(v2 + 40), v0, (void (*)(void))type metadata accessor for Credential);
}

uint64_t AssetUploadRequest.init(fileURL:storageLocation:protector:credential:)@<X0>(long long *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  long long v13 = *a1;
  uint64_t v4 = *((void *)a1 + 2);
  uint64_t v5 = *((void *)a1 + 3);
  UUID.init()();
  uint64_t v6 = type metadata accessor for AssetUploadRequest();
  sub_24A093D78();
  *uint64_t v7 = 0x616C506572616853;
  v7[1] = 0xE900000000000079;
  sub_24A098264(0x616C506572616853, 0xE900000000000079);
  type metadata accessor for URL();
  sub_24A08F280();
  uint64_t v9 = *(void (**)(void))(v8 + 32);
  sub_24A0E13F4();
  v9();
  sub_24A0E13F4();
  v9();
  uint64_t v10 = a3 + *(int *)(v6 + 36);
  *(_OWORD *)uint64_t v10 = v13;
  *(void *)(v10 + 16) = v4;
  *(void *)(v10 + 24) = v5;
  uint64_t v11 = a3 + *(int *)(v6 + 40);
  return sub_24A0DEB14(a2, v11);
}

uint64_t sub_24A0DEB14(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Credential(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t AssetUploadRequest.init(tenantName:fileURL:storageLocation:protector:credential:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  long long v17 = *a3;
  uint64_t v8 = *((void *)a3 + 2);
  uint64_t v9 = *((void *)a3 + 3);
  UUID.init()();
  uint64_t v10 = type metadata accessor for AssetUploadRequest();
  sub_24A093D78();
  *uint64_t v11 = a1;
  v11[1] = a2;
  swift_bridgeObjectRetain();
  sub_24A098264(a1, a2);
  swift_bridgeObjectRelease();
  type metadata accessor for URL();
  sub_24A08F280();
  long long v13 = *(void (**)(void))(v12 + 32);
  sub_24A0E13F4();
  v13();
  sub_24A0E13F4();
  v13();
  uint64_t v14 = a5 + *(int *)(v10 + 36);
  *(_OWORD *)uint64_t v14 = v17;
  *(void *)(v14 + 16) = v8;
  *(void *)(v14 + 24) = v9;
  uint64_t v15 = a5 + *(int *)(v10 + 40);
  return sub_24A0DEB14(a4, v15);
}

uint64_t AssetUploadRequest.hash(into:)()
{
  type metadata accessor for UUID();
  sub_24A0E0200(&qword_26975D340, MEMORY[0x263F07508]);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v1 = type metadata accessor for AssetUploadRequest();
  sub_24A093D78();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  type metadata accessor for URL();
  sub_24A0E0200(&qword_26975D348, MEMORY[0x263F06EA8]);
  sub_24A0E13C0();
  sub_24A0E13C0();
  sub_24A0E13C0();
  uint64_t v2 = (uint64_t *)(v0 + *(int *)(v1 + 36));
  uint64_t v3 = *v2;
  unint64_t v4 = v2[1];
  uint64_t v5 = v2[2];
  unint64_t v6 = v2[3];
  sub_24A08DE84(*v2, v4);
  Data.hash(into:)();
  sub_24A08DEDC(v3, v4);
  sub_24A08DE84(v5, v6);
  Data.hash(into:)();
  sub_24A08DEDC(v5, v6);
  return Credential.hash(into:)();
}

uint64_t static AssetUploadRequest.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((static UUID.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  unint64_t v4 = (int *)type metadata accessor for AssetUploadRequest();
  uint64_t v5 = v4[5];
  uint64_t v6 = *(void *)(a1 + v5);
  uint64_t v7 = *(void *)(a1 + v5 + 8);
  uint64_t v8 = (void *)(a2 + v5);
  BOOL v9 = v6 == *v8 && v7 == v8[1];
  if (!v9 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    || (MEMORY[0x24C5BACC0](a1 + v4[6], a2 + v4[6]) & 1) == 0
    || (MEMORY[0x24C5BACC0](a1 + v4[7], a2 + v4[7]) & 1) == 0
    || (MEMORY[0x24C5BACC0](a1 + v4[8], a2 + v4[8]) & 1) == 0)
  {
    return 0;
  }
  uint64_t v10 = v4[9];
  uint64_t v11 = *(void *)(a1 + v10);
  unint64_t v12 = *(void *)(a1 + v10 + 8);
  uint64_t v13 = *(void *)(a1 + v10 + 16);
  unint64_t v14 = *(void *)(a1 + v10 + 24);
  uint64_t v15 = (uint64_t *)(a2 + v10);
  uint64_t v17 = *v15;
  unint64_t v16 = v15[1];
  uint64_t v18 = v15[2];
  unint64_t v22 = v15[3];
  sub_24A08DE84(v11, v12);
  sub_24A08DE84(v13, v14);
  sub_24A08DE84(v17, v16);
  sub_24A08DE84(v18, v22);
  if ((MEMORY[0x24C5BAD10](v11, v12, v17, v16) & 1) == 0)
  {
    sub_24A08DEDC(v17, v16);
    sub_24A08DEDC(v18, v22);
    sub_24A08DEDC(v11, v12);
    sub_24A08DEDC(v13, v14);
    return 0;
  }
  char v21 = MEMORY[0x24C5BAD10](v13, v14, v18, v22);
  sub_24A08DEDC(v17, v16);
  sub_24A08DEDC(v18, v22);
  sub_24A08DEDC(v11, v12);
  sub_24A08DEDC(v13, v14);
  if ((v21 & 1) == 0) {
    return 0;
  }
  uint64_t v19 = v4[10];
  return static Credential.== infix(_:_:)((void *)(a1 + v19), (void *)(a2 + v19));
}

uint64_t sub_24A0DF040(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x614E746E616E6574 && a2 == 0xEA0000000000656DLL;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0xD000000000000010 && a2 == 0x800000024A0EE750 {
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    }
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      BOOL v7 = a1 == 0x4C5255656C6966 && a2 == 0xE700000000000000;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        BOOL v8 = a1 == 0x4C656761726F7473 && a2 == 0xEF6E6F697461636FLL;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 4;
        }
        else
        {
          BOOL v9 = a1 == 0x6F746365746F7270 && a2 == 0xE900000000000072;
          if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 5;
          }
          else if (a1 == 0x69746E6564657263 && a2 == 0xEA00000000006C61)
          {
            swift_bridgeObjectRelease();
            return 6;
          }
          else
          {
            char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if (v11) {
              return 6;
            }
            else {
              return 7;
            }
          }
        }
      }
    }
  }
}

uint64_t sub_24A0DF334()
{
  return 7;
}

unint64_t sub_24A0DF33C(char a1)
{
  unint64_t result = 25705;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x614E746E616E6574;
      break;
    case 2:
      unint64_t result = 0xD000000000000010;
      break;
    case 3:
      unint64_t result = 0x4C5255656C6966;
      break;
    case 4:
      unint64_t result = 0x4C656761726F7473;
      break;
    case 5:
      unint64_t result = 0x6F746365746F7270;
      break;
    case 6:
      unint64_t result = 0x69746E6564657263;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_24A0DF438()
{
  return sub_24A0DF33C(*v0);
}

uint64_t sub_24A0DF440@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_24A0DF040(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_24A0DF468@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_24A0DF334();
  *a1 = result;
  return result;
}

uint64_t sub_24A0DF490(uint64_t a1)
{
  unint64_t v2 = sub_24A0DF804();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A0DF4CC(uint64_t a1)
{
  unint64_t v2 = sub_24A0DF804();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t AssetUploadRequest.encode(to:)(void *a1)
{
  uint64_t v3 = sub_24A08DF34(&qword_26975E678);
  sub_24A08F24C();
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v6);
  sub_24A093CD4();
  uint64_t v9 = v8 - v7;
  sub_24A08DF78(a1, a1[3]);
  sub_24A0DF804();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for UUID();
  sub_24A0E0200(&qword_26975D360, MEMORY[0x263F07508]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for AssetUploadRequest();
    KeyedEncodingContainer.encode(_:forKey:)();
    type metadata accessor for URL();
    sub_24A0E0200(&qword_26975D370, MEMORY[0x263F06EA8]);
    sub_24A0E139C();
    sub_24A0E139C();
    sub_24A0E139C();
    sub_24A0DF850();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    type metadata accessor for Credential(0);
    sub_24A0E0200(&qword_26975D618, (void (*)(uint64_t))type metadata accessor for Credential);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v9, v3);
}

unint64_t sub_24A0DF804()
{
  unint64_t result = qword_26975E680;
  if (!qword_26975E680)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E680);
  }
  return result;
}

unint64_t sub_24A0DF850()
{
  unint64_t result = qword_26975E688;
  if (!qword_26975E688)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E688);
  }
  return result;
}

Swift::Int AssetUploadRequest.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t AssetUploadRequest.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v47 = a2;
  uint64_t v48 = type metadata accessor for Credential(0);
  sub_24A08F280();
  MEMORY[0x270FA5388](v3);
  sub_24A08F2E0();
  uint64_t v50 = v4;
  uint64_t v57 = type metadata accessor for URL();
  sub_24A08F24C();
  uint64_t v54 = v5;
  uint64_t v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v7);
  unint64_t v12 = (char *)v46 - v11;
  MEMORY[0x270FA5388](v10);
  unint64_t v14 = (char *)v46 - v13;
  uint64_t v15 = type metadata accessor for UUID();
  sub_24A08F24C();
  uint64_t v53 = v16;
  MEMORY[0x270FA5388](v17);
  sub_24A093CD4();
  uint64_t v20 = v19 - v18;
  uint64_t v52 = sub_24A08DF34(&qword_26975E690);
  sub_24A08F24C();
  uint64_t v49 = v21;
  MEMORY[0x270FA5388](v22);
  sub_24A093CD4();
  uint64_t v25 = v24 - v23;
  uint64_t v60 = (int *)type metadata accessor for AssetUploadRequest();
  sub_24A08F280();
  MEMORY[0x270FA5388](v26);
  sub_24A08F2E0();
  uint64_t v59 = v27;
  uint64_t v28 = a1[3];
  uint64_t v56 = a1;
  sub_24A08DF78(a1, v28);
  sub_24A0DF804();
  uint64_t v55 = v25;
  unint64_t v29 = v58;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  uint64_t v51 = v15;
  if (v29) {
    return sub_24A08E050((uint64_t)v56);
  }
  uint64_t v30 = v12;
  uint64_t v58 = v9;
  uint64_t v31 = v50;
  LOBYTE(v61) = 0;
  sub_24A0E0200(&qword_26975D390, MEMORY[0x263F07508]);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v32 = v15;
  uint64_t v33 = v59;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 32))(v59, v20, v32);
  LOBYTE(v61) = 1;
  uint64_t v34 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v35 = (uint64_t *)(v33 + v60[5]);
  uint64_t *v35 = v34;
  v35[1] = v36;
  LOBYTE(v61) = 2;
  sub_24A0E0200(&qword_26975D3A0, MEMORY[0x263F06EA8]);
  uint64_t v37 = v57;
  sub_24A0E1374();
  uint64_t v38 = v59 + v60[6];
  v46[0] = *(void *)(v54 + 32);
  v46[1] = v54 + 32;
  ((void (*)(uint64_t, char *, uint64_t))v46[0])(v38, v14, v37);
  LOBYTE(v61) = 3;
  sub_24A0E1374();
  uint64_t v39 = (void (*)(uint64_t, char *, uint64_t))v46[0];
  ((void (*)(uint64_t, char *, uint64_t))v46[0])(v59 + v60[7], v30, v37);
  LOBYTE(v61) = 4;
  sub_24A0E1374();
  uint64_t v40 = v59;
  v39(v59 + v60[8], v58, v37);
  char v63 = 5;
  sub_24A0DFFE0();
  sub_24A0E1418();
  uint64_t v41 = (_OWORD *)(v40 + v60[9]);
  long long v42 = v62;
  *uint64_t v41 = v61;
  v41[1] = v42;
  LOBYTE(v61) = 6;
  sub_24A0E0200(&qword_26975D628, (void (*)(uint64_t))type metadata accessor for Credential);
  sub_24A0E1418();
  uint64_t v43 = sub_24A0E135C();
  v44(v43);
  sub_24A0DEB14(v31, v40 + v60[10]);
  sub_24A0E002C(v40, v47, (void (*)(void))type metadata accessor for AssetUploadRequest);
  sub_24A08E050((uint64_t)v56);
  return sub_24A0E0088(v40);
}

Swift::Int sub_24A0DFFA4()
{
  return Hasher._finalize()();
}

unint64_t sub_24A0DFFE0()
{
  unint64_t result = qword_26975E698;
  if (!qword_26975E698)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E698);
  }
  return result;
}

uint64_t sub_24A0E002C(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_24A08F280();
  uint64_t v4 = sub_24A093C7C();
  v5(v4);
  return a2;
}

uint64_t sub_24A0E0088(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AssetUploadRequest();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_24A0E00E4(void *a1)
{
  a1[1] = sub_24A0E0200(&qword_26975E248, (void (*)(uint64_t))type metadata accessor for AssetUploadRequest);
  a1[2] = sub_24A0E0200(&qword_26975E218, (void (*)(uint64_t))type metadata accessor for AssetUploadRequest);
  a1[3] = sub_24A0E0200(&qword_26975E6A0, (void (*)(uint64_t))type metadata accessor for AssetUploadRequest);
  uint64_t result = sub_24A0E0200(&qword_26975E6A8, (void (*)(uint64_t))type metadata accessor for AssetUploadRequest);
  a1[4] = result;
  return result;
}

uint64_t sub_24A0E01B8()
{
  return sub_24A0E0200(&qword_26975E6B0, (void (*)(uint64_t))type metadata accessor for AssetUploadRequest);
}

uint64_t sub_24A0E0200(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24A0E0248@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return AssetUploadRequest.init(from:)(a1, a2);
}

uint64_t sub_24A0E0260(void *a1)
{
  return AssetUploadRequest.encode(to:)(a1);
}

uint64_t sub_24A0E0278()
{
  return sub_24A0E0200(&qword_26975D340, MEMORY[0x263F07508]);
}

char *initializeBufferWithCopyOfBuffer for AssetUploadRequest(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v36 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v36 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = &a1[v8];
    uint64_t v11 = &a2[v8];
    uint64_t v12 = *((void *)v11 + 1);
    *(void *)uint64_t v10 = *(void *)v11;
    *((void *)v10 + 1) = v12;
    uint64_t v13 = &a1[v9];
    unint64_t v14 = &a2[v9];
    uint64_t v15 = type metadata accessor for URL();
    uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16);
    swift_bridgeObjectRetain();
    v16(v13, v14, v15);
    v16(&a1[a3[7]], &a2[a3[7]], v15);
    v16(&a1[a3[8]], &a2[a3[8]], v15);
    uint64_t v17 = a3[9];
    uint64_t v18 = (uint64_t *)&a1[v17];
    uint64_t v19 = &a2[v17];
    uint64_t v20 = *(void *)&a2[v17];
    unint64_t v21 = *(void *)&a2[v17 + 8];
    sub_24A08DE84(v20, v21);
    *uint64_t v18 = v20;
    v18[1] = v21;
    uint64_t v22 = *((void *)v19 + 2);
    unint64_t v23 = *((void *)v19 + 3);
    sub_24A08DE84(v22, v23);
    v18[2] = v22;
    void v18[3] = v23;
    uint64_t v24 = a3[10];
    uint64_t v25 = &a1[v24];
    uint64_t v26 = &a2[v24];
    uint64_t v27 = *(void *)&a2[v24];
    uint64_t v28 = *((void *)v26 + 1);
    *(void *)uint64_t v25 = v27;
    *((void *)v25 + 1) = v28;
    uint64_t v29 = *((void *)v26 + 3);
    *((void *)v25 + 2) = *((void *)v26 + 2);
    *((void *)v25 + 3) = v29;
    uint64_t v30 = *((void *)v26 + 5);
    *((void *)v25 + 4) = *((void *)v26 + 4);
    *((void *)v25 + 5) = v30;
    uint64_t v31 = *(int *)(type metadata accessor for Credential(0) + 28);
    uint64_t v32 = &v25[v31];
    uint64_t v33 = &v26[v31];
    uint64_t v34 = type metadata accessor for Date();
    uint64_t v35 = *(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v35(v32, v33, v34);
  }
  return a1;
}

uint64_t destroy for AssetUploadRequest(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease();
  uint64_t v5 = a1 + a2[6];
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  v7(v5, v6);
  v7(a1 + a2[7], v6);
  v7(a1 + a2[8], v6);
  uint64_t v8 = a1 + a2[9];
  sub_24A08DEDC(*(void *)v8, *(void *)(v8 + 8));
  sub_24A08DEDC(*(void *)(v8 + 16), *(void *)(v8 + 24));
  uint64_t v9 = a1 + a2[10];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = v9 + *(int *)(type metadata accessor for Credential(0) + 28);
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8);
  return v12(v10, v11);
}

uint64_t initializeWithCopy for AssetUploadRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v7);
  uint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = a1 + v8;
  uint64_t v13 = a2 + v8;
  uint64_t v14 = type metadata accessor for URL();
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16);
  swift_bridgeObjectRetain();
  v15(v12, v13, v14);
  v15(a1 + a3[7], a2 + a3[7], v14);
  v15(a1 + a3[8], a2 + a3[8], v14);
  uint64_t v16 = a3[9];
  uint64_t v17 = (uint64_t *)(a1 + v16);
  uint64_t v18 = a2 + v16;
  uint64_t v19 = *(void *)(a2 + v16);
  unint64_t v20 = *(void *)(a2 + v16 + 8);
  sub_24A08DE84(v19, v20);
  *uint64_t v17 = v19;
  v17[1] = v20;
  uint64_t v21 = *(void *)(v18 + 16);
  unint64_t v22 = *(void *)(v18 + 24);
  sub_24A08DE84(v21, v22);
  v17[2] = v21;
  void v17[3] = v22;
  uint64_t v23 = a3[10];
  uint64_t v24 = (void *)(a1 + v23);
  uint64_t v25 = (void *)(a2 + v23);
  uint64_t v26 = *(void *)(a2 + v23);
  uint64_t v27 = v25[1];
  *uint64_t v24 = v26;
  v24[1] = v27;
  uint64_t v28 = v25[3];
  void v24[2] = v25[2];
  v24[3] = v28;
  uint64_t v29 = v25[5];
  v24[4] = v25[4];
  v24[5] = v29;
  uint64_t v30 = *(int *)(type metadata accessor for Credential(0) + 28);
  uint64_t v31 = (char *)v24 + v30;
  uint64_t v32 = (char *)v25 + v30;
  uint64_t v33 = type metadata accessor for Date();
  uint64_t v34 = *(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v34(v31, v32, v33);
  return a1;
}

uint64_t assignWithCopy for AssetUploadRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = a3[6];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 24);
  v14(v11, v12, v13);
  v14(a1 + a3[7], a2 + a3[7], v13);
  v14(a1 + a3[8], a2 + a3[8], v13);
  uint64_t v15 = a3[9];
  uint64_t v16 = (uint64_t *)(a1 + v15);
  uint64_t v17 = a2 + v15;
  uint64_t v18 = *(void *)(a2 + v15);
  unint64_t v19 = *(void *)(a2 + v15 + 8);
  sub_24A08DE84(v18, v19);
  uint64_t v20 = *v16;
  unint64_t v21 = v16[1];
  *uint64_t v16 = v18;
  v16[1] = v19;
  sub_24A08DEDC(v20, v21);
  uint64_t v22 = *(void *)(v17 + 16);
  unint64_t v23 = *(void *)(v17 + 24);
  sub_24A08DE84(v22, v23);
  uint64_t v24 = v16[2];
  unint64_t v25 = v16[3];
  v16[2] = v22;
  v16[3] = v23;
  sub_24A08DEDC(v24, v25);
  uint64_t v26 = a3[10];
  uint64_t v27 = (void *)(a1 + v26);
  uint64_t v28 = (void *)(a2 + v26);
  *uint64_t v27 = *(void *)(a2 + v26);
  v27[1] = *(void *)(a2 + v26 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v27[2] = v28[2];
  v27[3] = v28[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v27[4] = v28[4];
  v27[5] = v28[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v29 = *(int *)(type metadata accessor for Credential(0) + 28);
  uint64_t v30 = (char *)v27 + v29;
  uint64_t v31 = (char *)v28 + v29;
  uint64_t v32 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 24))(v30, v31, v32);
  return a1;
}

uint64_t initializeWithTake for AssetUploadRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  v11(a1 + a3[7], a2 + a3[7], v10);
  v11(a1 + a3[8], a2 + a3[8], v10);
  uint64_t v12 = a3[9];
  uint64_t v13 = a3[10];
  uint64_t v14 = (_OWORD *)(a1 + v12);
  uint64_t v15 = (_OWORD *)(a2 + v12);
  long long v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  uint64_t v17 = (_OWORD *)(a1 + v13);
  uint64_t v18 = a2 + v13;
  long long v19 = *(_OWORD *)(a2 + v13 + 16);
  *uint64_t v17 = *(_OWORD *)(a2 + v13);
  v17[1] = v19;
  v17[2] = *(_OWORD *)(a2 + v13 + 32);
  uint64_t v20 = *(int *)(type metadata accessor for Credential(0) + 28);
  unint64_t v21 = (char *)v17 + v20;
  uint64_t v22 = v18 + v20;
  uint64_t v23 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 32))(v21, v22, v23);
  return a1;
}

uint64_t assignWithTake for AssetUploadRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v12 = a3[6];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = type metadata accessor for URL();
  long long v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 40);
  v16(v13, v14, v15);
  v16(a1 + a3[7], a2 + a3[7], v15);
  v16(a1 + a3[8], a2 + a3[8], v15);
  uint64_t v17 = a3[9];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  uint64_t v20 = *(void *)(a1 + v17);
  unint64_t v21 = *(void *)(a1 + v17 + 8);
  *(_OWORD *)(a1 + v17) = *(_OWORD *)(a2 + v17);
  sub_24A08DEDC(v20, v21);
  uint64_t v22 = *(void *)(v18 + 16);
  unint64_t v23 = *(void *)(v18 + 24);
  *(_OWORD *)(v18 + 16) = *(_OWORD *)(v19 + 16);
  sub_24A08DEDC(v22, v23);
  uint64_t v24 = a3[10];
  unint64_t v25 = (void *)(a1 + v24);
  uint64_t v26 = (void *)(a2 + v24);
  uint64_t v27 = *(void *)(a2 + v24 + 8);
  *unint64_t v25 = *(void *)(a2 + v24);
  v25[1] = v27;
  swift_bridgeObjectRelease();
  uint64_t v28 = v26[3];
  v25[2] = v26[2];
  v25[3] = v28;
  swift_bridgeObjectRelease();
  uint64_t v29 = v26[5];
  v25[4] = v26[4];
  v25[5] = v29;
  swift_bridgeObjectRelease();
  uint64_t v30 = *(int *)(type metadata accessor for Credential(0) + 28);
  uint64_t v31 = (char *)v25 + v30;
  uint64_t v32 = (char *)v26 + v30;
  uint64_t v33 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 40))(v31, v32, v33);
  return a1;
}

uint64_t getEnumTagSinglePayload for AssetUploadRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A0E0E08);
}

uint64_t sub_24A0E0E08(uint64_t a1, uint64_t a2, int *a3)
{
  type metadata accessor for UUID();
  sub_24A08F268();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1;
LABEL_11:
    return _s10CloudAsset21UploadResponseMessageOwet_0(v9, a2, v8);
  }
  if (a2 != 0x7FFFFFFF)
  {
    type metadata accessor for URL();
    sub_24A08F268();
    if (*(_DWORD *)(v13 + 84) == a2)
    {
      uint64_t v8 = v12;
      uint64_t v14 = a3[6];
    }
    else
    {
      uint64_t v8 = type metadata accessor for Credential(0);
      uint64_t v14 = a3[10];
    }
    uint64_t v9 = a1 + v14;
    goto LABEL_11;
  }
  unint64_t v10 = *(void *)(a1 + a3[5] + 8);
  if (v10 >= 0xFFFFFFFF) {
    LODWORD(v10) = -1;
  }
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for AssetUploadRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A0E0EF4);
}

void sub_24A0E0EF4(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  type metadata accessor for UUID();
  sub_24A08F268();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(void *)(a1 + a4[5] + 8) = (a2 - 1);
      return;
    }
    type metadata accessor for URL();
    sub_24A08F268();
    if (*(_DWORD *)(v13 + 84) == a3)
    {
      uint64_t v10 = v12;
      uint64_t v14 = a4[6];
    }
    else
    {
      uint64_t v10 = type metadata accessor for Credential(0);
      uint64_t v14 = a4[10];
    }
    uint64_t v11 = a1 + v14;
  }
  _s10CloudAsset21UploadResponseMessageOwst_0(v11, a2, a2, v10);
}

uint64_t sub_24A0E0FC8()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for URL();
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for Credential(319);
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AssetUploadRequest.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFA)
  {
    if (a2 + 6 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 6) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 7;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v5 = v6 - 7;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for AssetUploadRequest.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24A0E1234);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AssetUploadRequest.CodingKeys()
{
  return &type metadata for AssetUploadRequest.CodingKeys;
}

unint64_t sub_24A0E1270()
{
  unint64_t result = qword_26975E6C8;
  if (!qword_26975E6C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E6C8);
  }
  return result;
}

unint64_t sub_24A0E12C0()
{
  unint64_t result = qword_26975E6D0;
  if (!qword_26975E6D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E6D0);
  }
  return result;
}

unint64_t sub_24A0E1310()
{
  unint64_t result = qword_26975E6D8;
  if (!qword_26975E6D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E6D8);
  }
  return result;
}

uint64_t sub_24A0E135C()
{
  return *(void *)(v0 - 176);
}

uint64_t sub_24A0E1374()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t sub_24A0E139C()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t sub_24A0E13C0()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t sub_24A0E13DC()
{
  return type metadata accessor for AssetUploadRequest();
}

uint64_t sub_24A0E1400()
{
  return type metadata accessor for URL();
}

uint64_t sub_24A0E1418()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

BOOL static XPCError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void XPCError.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

uint64_t sub_24A0E1478(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000015 && a2 == 0x800000024A0EF230
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v5 = a1 == 0x636552726F727265 && a2 == 0xED00006465766965;
    if (v5 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0xD000000000000010 && a2 == 0x800000024A0EF250 {
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    }
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      BOOL v6 = a1 == 0x456E776F6E6B6E75 && a2 == 0xEF746E696F70646ELL;
      if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else if (a1 == 0x6C616E7265746E69 && a2 == 0xED0000726F727245)
      {
        swift_bridgeObjectRelease();
        return 4;
      }
      else
      {
        char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v8) {
          return 4;
        }
        else {
          return 5;
        }
      }
    }
  }
}

uint64_t sub_24A0E16F0()
{
  return 5;
}

unint64_t sub_24A0E16F8(char a1)
{
  unint64_t result = 0xD000000000000015;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x636552726F727265;
      break;
    case 2:
      unint64_t result = 0xD000000000000010;
      break;
    case 3:
      unint64_t result = 0x456E776F6E6B6E75;
      break;
    case 4:
      unint64_t result = 0x6C616E7265746E69;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_24A0E17DC()
{
  return sub_24A0E16F8(*v0);
}

uint64_t sub_24A0E17E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_24A0E1478(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_24A0E180C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_24A0E16F0();
  *a1 = result;
  return result;
}

uint64_t sub_24A0E1834(uint64_t a1)
{
  unint64_t v2 = sub_24A0E1EB4();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A0E1870(uint64_t a1)
{
  unint64_t v2 = sub_24A0E1EB4();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_24A0E18AC(uint64_t a1)
{
  unint64_t v2 = sub_24A0E1F98();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A0E18E8(uint64_t a1)
{
  unint64_t v2 = sub_24A0E1F98();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_24A0E1924(uint64_t a1)
{
  unint64_t v2 = sub_24A0E1FE4();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A0E1960(uint64_t a1)
{
  unint64_t v2 = sub_24A0E1FE4();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_24A0E199C(uint64_t a1)
{
  unint64_t v2 = sub_24A0E2030();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A0E19D8(uint64_t a1)
{
  unint64_t v2 = sub_24A0E2030();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_24A0E1A14(uint64_t a1)
{
  unint64_t v2 = sub_24A0E1F00();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A0E1A50(uint64_t a1)
{
  unint64_t v2 = sub_24A0E1F00();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_24A0E1A8C(uint64_t a1)
{
  unint64_t v2 = sub_24A0E1F4C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A0E1AC8(uint64_t a1)
{
  unint64_t v2 = sub_24A0E1F4C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t XPCError.encode(to:)(void *a1)
{
  sub_24A08DF34(&qword_26975E6E0);
  sub_24A08F24C();
  MEMORY[0x270FA5388](v3);
  sub_24A0E2D24(v4, v15);
  sub_24A08DF34(&qword_26975E6E8);
  sub_24A08F24C();
  MEMORY[0x270FA5388](v5);
  sub_24A08F2E0();
  sub_24A08DF34(&qword_26975E6F0);
  sub_24A08F24C();
  MEMORY[0x270FA5388](v6);
  sub_24A08F2E0();
  sub_24A08DF34(&qword_26975E6F8);
  sub_24A08F24C();
  MEMORY[0x270FA5388](v7);
  sub_24A093CD4();
  sub_24A08DF34(&qword_26975E700);
  sub_24A08F24C();
  MEMORY[0x270FA5388](v8);
  sub_24A093CD4();
  sub_24A08DF34(&qword_26975E708);
  sub_24A08F24C();
  MEMORY[0x270FA5388](v9);
  sub_24A093CD4();
  uint64_t v10 = *v1;
  sub_24A08DF78(a1, a1[3]);
  sub_24A0E1EB4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  switch(v10)
  {
    case 1:
      sub_24A0E1FE4();
      sub_24A0E2D04();
      goto LABEL_8;
    case 2:
      sub_24A0E1F98();
      sub_24A0E2D04();
      goto LABEL_7;
    case 3:
      sub_24A0E1F4C();
      sub_24A0E2D04();
      goto LABEL_7;
    case 4:
      sub_24A0E1F00();
      sub_24A0E2D04();
LABEL_7:
      sub_24A0E2D58();
LABEL_8:
      sub_24A08F2BC();
      v12();
      break;
    default:
      sub_24A0E2030();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      sub_24A08F2BC();
      v11();
      break;
  }
  sub_24A08F2BC();
  return v13();
}

unint64_t sub_24A0E1EB4()
{
  unint64_t result = qword_26975E710;
  if (!qword_26975E710)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E710);
  }
  return result;
}

unint64_t sub_24A0E1F00()
{
  unint64_t result = qword_26975E718;
  if (!qword_26975E718)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E718);
  }
  return result;
}

unint64_t sub_24A0E1F4C()
{
  unint64_t result = qword_26975E720;
  if (!qword_26975E720)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E720);
  }
  return result;
}

unint64_t sub_24A0E1F98()
{
  unint64_t result = qword_26975E728;
  if (!qword_26975E728)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E728);
  }
  return result;
}

unint64_t sub_24A0E1FE4()
{
  unint64_t result = qword_26975E730;
  if (!qword_26975E730)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E730);
  }
  return result;
}

unint64_t sub_24A0E2030()
{
  unint64_t result = qword_26975E738;
  if (!qword_26975E738)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E738);
  }
  return result;
}

Swift::Int XPCError.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t XPCError.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  sub_24A08DF34(&qword_26975E740);
  sub_24A08F24C();
  MEMORY[0x270FA5388](v3);
  sub_24A08F2E0();
  sub_24A08DF34(&qword_26975E748);
  sub_24A08F24C();
  MEMORY[0x270FA5388](v4);
  sub_24A0E2D24(v5, v33);
  sub_24A08DF34(&qword_26975E750);
  sub_24A08F24C();
  MEMORY[0x270FA5388](v6);
  sub_24A08F2E0();
  sub_24A08DF34(&qword_26975E758);
  sub_24A08F24C();
  MEMORY[0x270FA5388](v7);
  sub_24A093CD4();
  sub_24A08DF34(&qword_26975E760);
  sub_24A08F24C();
  MEMORY[0x270FA5388](v8);
  sub_24A093CD4();
  uint64_t v9 = sub_24A08DF34(&qword_26975E768);
  sub_24A08F24C();
  uint64_t v11 = v10;
  MEMORY[0x270FA5388](v12);
  sub_24A093CD4();
  uint64_t v15 = v14 - v13;
  uint64_t v36 = (uint64_t)a1;
  sub_24A08DF78(a1, a1[3]);
  sub_24A0E1EB4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v37) {
    return sub_24A08E050(v36);
  }
  uint64_t v16 = KeyedDecodingContainer.allKeys.getter();
  uint64_t v17 = *(void *)(v16 + 16);
  if (!v17)
  {
    uint64_t v25 = v15;
LABEL_9:
    uint64_t v26 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v28 = v27;
    sub_24A08DF34(&qword_26975D980);
    *uint64_t v28 = &type metadata for XPCError;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v26 - 8) + 104))(v28, *MEMORY[0x263F8DCB0], v26);
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v25, v9);
    return sub_24A08E050(v36);
  }
  uint64_t v34 = v9;
  uint64_t v18 = v15;
  uint64_t v19 = *(unsigned __int8 *)(v16 + 32);
  sub_24A0B2390(1, v17, v16, v16 + 32, 0, (2 * v17) | 1);
  uint64_t v21 = v20;
  unint64_t v23 = v22;
  swift_bridgeObjectRelease();
  if (v21 != v23 >> 1)
  {
    uint64_t v25 = v18;
    uint64_t v9 = v34;
    goto LABEL_9;
  }
  switch(v19)
  {
    case 1:
      uint64_t v24 = a2;
      sub_24A0E1FE4();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      goto LABEL_6;
    case 2:
      uint64_t v24 = a2;
      sub_24A0E1F98();
      sub_24A0E2CE4();
      goto LABEL_6;
    case 3:
      uint64_t v24 = a2;
      sub_24A0E1F4C();
      sub_24A0E2CE4();
      goto LABEL_6;
    case 4:
      uint64_t v24 = a2;
      sub_24A0E1F00();
      sub_24A0E2CE4();
      sub_24A0E2D58();
      goto LABEL_15;
    default:
      uint64_t v24 = a2;
      sub_24A0E2030();
      sub_24A0E2CE4();
LABEL_6:
      sub_24A0E2D58();
LABEL_15:
      sub_24A08F2BC();
      v30();
      swift_unknownObjectRelease();
      uint64_t v31 = sub_24A0E2D40();
      v32(v31);
      *uint64_t v24 = v19;
      uint64_t result = sub_24A08E050((uint64_t)a1);
      break;
  }
  return result;
}

uint64_t sub_24A0E265C@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return XPCError.init(from:)(a1, a2);
}

uint64_t sub_24A0E2674(void *a1)
{
  return XPCError.encode(to:)(a1);
}

unint64_t sub_24A0E2690()
{
  unint64_t result = qword_26975E770;
  if (!qword_26975E770)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E770);
  }
  return result;
}

ValueMetadata *type metadata accessor for XPCError()
{
  return &type metadata for XPCError;
}

uint64_t _s10CloudAsset8XPCErrorOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFC)
  {
    if (a2 + 4 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 4) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 5;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v5 = v6 - 5;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *_s10CloudAsset8XPCErrorOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24A0E2848);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for XPCError.CodingKeys()
{
  return &type metadata for XPCError.CodingKeys;
}

ValueMetadata *type metadata accessor for XPCError.InitializationFailureCodingKeys()
{
  return &type metadata for XPCError.InitializationFailureCodingKeys;
}

ValueMetadata *type metadata accessor for XPCError.ErrorReceivedCodingKeys()
{
  return &type metadata for XPCError.ErrorReceivedCodingKeys;
}

ValueMetadata *type metadata accessor for XPCError.CorruptedMessageCodingKeys()
{
  return &type metadata for XPCError.CorruptedMessageCodingKeys;
}

ValueMetadata *type metadata accessor for XPCError.UnknownEndpointCodingKeys()
{
  return &type metadata for XPCError.UnknownEndpointCodingKeys;
}

ValueMetadata *type metadata accessor for XPCError.InternalErrorCodingKeys()
{
  return &type metadata for XPCError.InternalErrorCodingKeys;
}

unint64_t sub_24A0E28D4()
{
  unint64_t result = qword_26975E778;
  if (!qword_26975E778)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E778);
  }
  return result;
}

unint64_t sub_24A0E2924()
{
  unint64_t result = qword_26975E780;
  if (!qword_26975E780)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E780);
  }
  return result;
}

unint64_t sub_24A0E2974()
{
  unint64_t result = qword_26975E788;
  if (!qword_26975E788)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E788);
  }
  return result;
}

unint64_t sub_24A0E29C4()
{
  unint64_t result = qword_26975E790;
  if (!qword_26975E790)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E790);
  }
  return result;
}

unint64_t sub_24A0E2A14()
{
  unint64_t result = qword_26975E798;
  if (!qword_26975E798)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E798);
  }
  return result;
}

unint64_t sub_24A0E2A64()
{
  unint64_t result = qword_26975E7A0;
  if (!qword_26975E7A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E7A0);
  }
  return result;
}

unint64_t sub_24A0E2AB4()
{
  unint64_t result = qword_26975E7A8;
  if (!qword_26975E7A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E7A8);
  }
  return result;
}

unint64_t sub_24A0E2B04()
{
  unint64_t result = qword_26975E7B0;
  if (!qword_26975E7B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E7B0);
  }
  return result;
}

unint64_t sub_24A0E2B54()
{
  unint64_t result = qword_26975E7B8;
  if (!qword_26975E7B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E7B8);
  }
  return result;
}

unint64_t sub_24A0E2BA4()
{
  unint64_t result = qword_26975E7C0;
  if (!qword_26975E7C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E7C0);
  }
  return result;
}

unint64_t sub_24A0E2BF4()
{
  unint64_t result = qword_26975E7C8;
  if (!qword_26975E7C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E7C8);
  }
  return result;
}

unint64_t sub_24A0E2C44()
{
  unint64_t result = qword_26975E7D0;
  if (!qword_26975E7D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E7D0);
  }
  return result;
}

unint64_t sub_24A0E2C94()
{
  unint64_t result = qword_26975E7D8;
  if (!qword_26975E7D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E7D8);
  }
  return result;
}

uint64_t sub_24A0E2CE4()
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t sub_24A0E2D04()
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

void sub_24A0E2D24(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 128) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_24A0E2D40()
{
  return v0;
}

uint64_t sub_24A0E2D58()
{
  return v0;
}

uint64_t sub_24A0E2D64()
{
  sub_24A0B3914();
  v1[4] = v2;
  v1[5] = v0;
  void v1[6] = sub_24A08DF34(&qword_26975D5C0);
  v1[7] = sub_24A0B395C();
  sub_24A08DF34(&qword_26975DA08);
  v1[8] = sub_24A0B395C();
  uint64_t v3 = sub_24A08DF34(&qword_26975D590);
  v1[9] = v3;
  sub_24A0B38FC(v3);
  v1[10] = v4;
  v1[11] = sub_24A0B395C();
  uint64_t v5 = sub_24A08DF34(&qword_26975DA10);
  v1[12] = v5;
  sub_24A0B38FC(v5);
  v1[13] = v6;
  v1[14] = sub_24A0B395C();
  return MEMORY[0x270FA2498](sub_24A0E2E80, v0, 0);
}

uint64_t sub_24A0E2E80()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 40) + 112);
  *(void *)(v0 + 120) = v1;
  return sub_24A0B38F4((uint64_t)sub_24A0E2EA0, v1);
}

uint64_t sub_24A0E2EA0()
{
  sub_24A0B3914();
  uint64_t v1 = v0[5];
  (*(void (**)(void, uint64_t, void))(v0[10] + 16))(v0[11], v0[15] + OBJC_IVAR____TtC10CloudAsset25AssetsDownloadCoordinator__results, v0[9]);
  return MEMORY[0x270FA2498](sub_24A0E2F28, v1, 0);
}

uint64_t sub_24A0E2F28()
{
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v3 = v0[9];
  uint64_t v4 = v0[5];
  MEMORY[0x24C5BB210](v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  unint64_t v5 = sub_24A0E3330();
  uint64_t v6 = (void *)swift_task_alloc();
  v0[16] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_24A0E3020;
  uint64_t v7 = v0[12];
  uint64_t v8 = v0[8];
  return MEMORY[0x270FA20F8](v8, v4, v5, v7, v0 + 2);
}

uint64_t sub_24A0E3020()
{
  sub_24A0B3914();
  sub_24A0B38DC();
  uint64_t v3 = v2;
  sub_24A0C9188();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_24A0C9188();
  *uint64_t v6 = v5;
  swift_task_dealloc();
  uint64_t v7 = *(void *)(v3 + 40);
  if (v0) {
    uint64_t v8 = sub_24A0E32A0;
  }
  else {
    uint64_t v8 = sub_24A0E3104;
  }
  return MEMORY[0x270FA2498](v8, v7, 0);
}

uint64_t sub_24A0E3104()
{
  uint64_t v1 = v0[8];
  if (_s10CloudAsset21UploadResponseMessageOwet_0(v1, 1, v0[6]) == 1)
  {
    uint64_t v2 = sub_24A0E38EC();
    v3(v2);
    sub_24A090E10();
    swift_allocError();
    swift_willThrow();
LABEL_5:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_24A0B3920();
    goto LABEL_7;
  }
  sub_24A0B3394(v1, v0[7]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v0[3] = *(void *)v0[7];
    sub_24A08DF34(&qword_26975D5B0);
    swift_willThrowTypedImpl();
    uint64_t v4 = sub_24A0E3904();
    v5(v4);
    goto LABEL_5;
  }
  sub_24A08CF08(v0[7], v0[4]);
  uint64_t v7 = sub_24A0E3904();
  v8(v7);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A0B3920();
LABEL_7:
  return v6();
}

uint64_t sub_24A0E32A0()
{
  uint64_t v0 = sub_24A0E38EC();
  v1(v0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_24A0B3920();
  return v2();
}

unint64_t sub_24A0E3330()
{
  unint64_t result = qword_26975E7E8;
  if (!qword_26975E7E8)
  {
    type metadata accessor for AssetDownloadCoordinator();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26975E7E8);
  }
  return result;
}

uint64_t type metadata accessor for AssetDownloadCoordinator()
{
  return self;
}

uint64_t sub_24A0E33A0(uint64_t *a1)
{
  uint64_t v3 = *a1;
  *(void *)(v2 + 24) = v1;
  *(void *)(v2 + 32) = v3;
  return sub_24A0B38F4((uint64_t)sub_24A0E33C0, v1);
}

uint64_t sub_24A0E33C0()
{
  sub_24A0B3914();
  v0[2] = v0[4];
  uint64_t v1 = (void *)swift_task_alloc();
  v0[5] = (uint64_t)v1;
  *uint64_t v1 = v0;
  v1[1] = sub_24A0E345C;
  return sub_24A09C168(v0 + 2);
}

uint64_t sub_24A0E345C()
{
  sub_24A0B3914();
  sub_24A0B38DC();
  uint64_t v3 = v2;
  sub_24A0C9188();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_24A0C9188();
  *uint64_t v6 = v5;
  *(void *)(v3 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(void *)(v3 + 24);
    return MEMORY[0x270FA2498](sub_24A0E355C, v7, 0);
  }
  else
  {
    sub_24A0B3920();
    return v8();
  }
}

uint64_t sub_24A0E355C()
{
  sub_24A0B3920();
  return v0();
}

uint64_t AssetDownloadCoordinator.deinit()
{
  swift_release();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t AssetDownloadCoordinator.__deallocating_deinit()
{
  swift_release();
  swift_defaultActor_destroy();
  return MEMORY[0x270FA2418](v0);
}

uint64_t AssetDownloadCoordinator.unownedExecutor.getter()
{
  return v0;
}

uint64_t sub_24A0E35E4()
{
  return AssetDownloadCoordinator.unownedExecutor.getter();
}

uint64_t method lookup function for AssetDownloadCoordinator(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AssetDownloadCoordinator);
}

uint64_t dispatch thunk of AssetDownloadCoordinator.result()(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v1 + 104) + **(int **)(*(void *)v1 + 104));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_24A0E3720;
  return v6(a1);
}

uint64_t sub_24A0E3720()
{
  sub_24A0B3914();
  sub_24A0B38DC();
  uint64_t v1 = *v0;
  sub_24A0C9188();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_24A0B3920();
  return v3();
}

uint64_t dispatch thunk of AssetDownloadCoordinator.receive(signal:)(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v1 + 112) + **(int **)(*(void *)v1 + 112));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_24A0E38E8;
  return v6(a1);
}

uint64_t sub_24A0E38EC()
{
  return *(void *)(v0 + 112);
}

uint64_t sub_24A0E3904()
{
  return v0;
}

uint64_t dispatch thunk of JSONDecoder.decode<A>(_:from:)()
{
  return MEMORY[0x270EEDDD0]();
}

uint64_t JSONDecoder.init()()
{
  return MEMORY[0x270EEDE10]();
}

uint64_t type metadata accessor for JSONDecoder()
{
  return MEMORY[0x270EEDE18]();
}

uint64_t dispatch thunk of JSONEncoder.encode<A>(_:)()
{
  return MEMORY[0x270EEDEE8]();
}

uint64_t JSONEncoder.init()()
{
  return MEMORY[0x270EEDF30]();
}

uint64_t type metadata accessor for JSONEncoder()
{
  return MEMORY[0x270EEDF38]();
}

uint64_t __DataStorage._bytes.getter()
{
  return MEMORY[0x270EEE638]();
}

uint64_t __DataStorage._length.getter()
{
  return MEMORY[0x270EEE658]();
}

uint64_t __DataStorage._offset.getter()
{
  return MEMORY[0x270EEE670]();
}

uint64_t LocalizedError.helpAnchor.getter()
{
  return MEMORY[0x270EEE920]();
}

uint64_t LocalizedError.failureReason.getter()
{
  return MEMORY[0x270EEE930]();
}

uint64_t LocalizedError.errorDescription.getter()
{
  return MEMORY[0x270EEE940]();
}

uint64_t LocalizedError.recoverySuggestion.getter()
{
  return MEMORY[0x270EEE950]();
}

uint64_t _convertNSErrorToError(_:)()
{
  return MEMORY[0x270EEF840]();
}

uint64_t type metadata accessor for URL.DirectoryHint()
{
  return MEMORY[0x270EEFC10]();
}

uint64_t URL.absoluteString.getter()
{
  return MEMORY[0x270EEFC58]();
}

uint64_t URL.lastPathComponent.getter()
{
  return MEMORY[0x270EEFCE0]();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
}

uint64_t URL.deletingLastPathComponent()()
{
  return MEMORY[0x270EEFDC0]();
}

uint64_t static URL.== infix(_:_:)()
{
  return MEMORY[0x270EEFDF0]();
}

uint64_t URL.init(string:)()
{
  return MEMORY[0x270EEFF00]();
}

uint64_t URL.init(filePath:directoryHint:relativeTo:)()
{
  return MEMORY[0x270EEFF18]();
}

uint64_t URL.appending<A>(path:directoryHint:)()
{
  return MEMORY[0x270EEFF40]();
}

uint64_t type metadata accessor for URL()
{
  return MEMORY[0x270EEFF68]();
}

uint64_t static Data.== infix(_:_:)()
{
  return MEMORY[0x270EF0158]();
}

uint64_t Data.hash(into:)()
{
  return MEMORY[0x270EF0190]();
}

uint64_t static Date.distantFuture.getter()
{
  return MEMORY[0x270EF07A0]();
}

uint64_t static Date.== infix(_:_:)()
{
  return MEMORY[0x270EF0B88]();
}

uint64_t type metadata accessor for Date()
{
  return MEMORY[0x270EF0C40]();
}

uint64_t static UUID.== infix(_:_:)()
{
  return MEMORY[0x270EF0CB0]();
}

uint64_t UUID.init()()
{
  return MEMORY[0x270EF0D08]();
}

uint64_t type metadata accessor for UUID()
{
  return MEMORY[0x270EF0D18]();
}

uint64_t Google_Protobuf_Timestamp.date.getter()
{
  return MEMORY[0x270F44678]();
}

uint64_t Google_Protobuf_Timestamp.init(date:)()
{
  return MEMORY[0x270F44680]();
}

uint64_t Google_Protobuf_Timestamp.init()()
{
  return MEMORY[0x270F44698]();
}

uint64_t type metadata accessor for Google_Protobuf_Timestamp()
{
  return MEMORY[0x270F446A0]();
}

uint64_t UnknownStorage.traverse<A>(visitor:)()
{
  return MEMORY[0x270F44A18]();
}

uint64_t UnknownStorage.init()()
{
  return MEMORY[0x270F44A20]();
}

uint64_t type metadata accessor for UnknownStorage()
{
  return MEMORY[0x270F44A28]();
}

uint64_t BinaryDecodingOptions.init()()
{
  return MEMORY[0x270F44AA8]();
}

uint64_t type metadata accessor for BinaryDecodingOptions()
{
  return MEMORY[0x270F44AB0]();
}

uint64_t _MessageImplementationBase._protobuf_generated_isEqualTo(other:)()
{
  return MEMORY[0x270F44AD8]();
}

uint64_t dispatch thunk of Decoder.nextFieldNumber()()
{
  return MEMORY[0x270F44B10]();
}

uint64_t dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)()
{
  return MEMORY[0x270F44B50]();
}

uint64_t dispatch thunk of Decoder.decodeSingularBytesField(value:)()
{
  return MEMORY[0x270F44B80]();
}

uint64_t dispatch thunk of Decoder.decodeSingularInt64Field(value:)()
{
  return MEMORY[0x270F44BB0]();
}

uint64_t dispatch thunk of Decoder.decodeSingularStringField(value:)()
{
  return MEMORY[0x270F44BF8]();
}

uint64_t dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)()
{
  return MEMORY[0x270F44C20]();
}

uint64_t dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)()
{
  return MEMORY[0x270F44C38]();
}

uint64_t Message.isInitialized.getter()
{
  return MEMORY[0x270F44C98]();
}

uint64_t Message.serializedData(partial:)()
{
  return MEMORY[0x270F44CA8]();
}

uint64_t Message.init<A>(serializedBytes:extensions:partial:options:)()
{
  return MEMORY[0x270F44CB8]();
}

uint64_t Message.hash(into:)()
{
  return MEMORY[0x270F44CD8]();
}

uint64_t dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)()
{
  return MEMORY[0x270F44D68]();
}

uint64_t dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)()
{
  return MEMORY[0x270F44DA0]();
}

uint64_t dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)()
{
  return MEMORY[0x270F44DD8]();
}

uint64_t dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)()
{
  return MEMORY[0x270F44DF0]();
}

uint64_t dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)()
{
  return MEMORY[0x270F44E00]();
}

uint64_t type metadata accessor for _NameMap.NameDescription()
{
  return MEMORY[0x270F44E10]();
}

uint64_t _NameMap.init(dictionaryLiteral:)()
{
  return MEMORY[0x270F44E18]();
}

uint64_t type metadata accessor for _NameMap()
{
  return MEMORY[0x270F44E28]();
}

uint64_t Logger.logObject.getter()
{
  return MEMORY[0x270FA2E00]();
}

uint64_t Logger.init(subsystem:category:)()
{
  return MEMORY[0x270FA2E08]();
}

uint64_t type metadata accessor for Logger()
{
  return MEMORY[0x270FA2E20]();
}

uint64_t XPCSession.__allocating_init<A>(machService:targetQueue:options:incomingMessageHandler:cancellationHandler:)()
{
  return MEMORY[0x270FA1A90]();
}

uint64_t static XPCSession.InitializationOptions.none.getter()
{
  return MEMORY[0x270FA1AC0]();
}

uint64_t type metadata accessor for XPCSession.InitializationOptions()
{
  return MEMORY[0x270FA1AF0]();
}

uint64_t dispatch thunk of XPCSession.send<A, B>(_:replyHandler:)()
{
  return MEMORY[0x270FA1B30]();
}

uint64_t dispatch thunk of XPCSession.send<A>(_:)()
{
  return MEMORY[0x270FA1B40]();
}

uint64_t dispatch thunk of XPCSession.cancel(reason:)()
{
  return MEMORY[0x270FA1B48]();
}

uint64_t type metadata accessor for XPCSession()
{
  return MEMORY[0x270FA1B90]();
}

uint64_t XPCRichError.canRetry.getter()
{
  return MEMORY[0x270FA1C78]();
}

uint64_t type metadata accessor for XPCRichError()
{
  return MEMORY[0x270FA1C88]();
}

uint64_t Dictionary.init(dictionaryLiteral:)()
{
  return MEMORY[0x270F9D0A8]();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return MEMORY[0x270F9D318]();
}

uint64_t dispatch thunk of Hashable.hash(into:)()
{
  return MEMORY[0x270F9D320]();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return MEMORY[0x270F9D598]();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EF19E8]();
}

uint64_t String.init<A>(describing:)()
{
  return MEMORY[0x270F9D5E0]();
}

uint64_t String.utf8CString.getter()
{
  return MEMORY[0x270F9D620]();
}

uint64_t String.hash(into:)()
{
  return MEMORY[0x270F9D708]();
}

uint64_t String.append<A>(contentsOf:)()
{
  return MEMORY[0x270F9D788]();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return MEMORY[0x270F9D7E0]();
}

uint64_t String.init<A>(_:)()
{
  return MEMORY[0x270F9D8E0]();
}

uint64_t Array.description.getter()
{
  return MEMORY[0x270F9DBB0]();
}

uint64_t type metadata accessor for Array()
{
  return MEMORY[0x270F9DCD8]();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return MEMORY[0x270FA1DF8]();
}

uint64_t CheckedContinuation.resume(throwing:)()
{
  return MEMORY[0x270FA1E18]();
}

uint64_t CheckedContinuation.resume(returning:)()
{
  return MEMORY[0x270FA1E20]();
}

uint64_t type metadata accessor for CheckedContinuation()
{
  return MEMORY[0x270FA1E28]();
}

uint64_t TaskPriority.rawValue.getter()
{
  return MEMORY[0x270FA1F08]();
}

uint64_t type metadata accessor for TaskPriority()
{
  return MEMORY[0x270FA1F10]();
}

uint64_t static Task<>.currentPriority.getter()
{
  return MEMORY[0x270FA1FE0]();
}

uint64_t static AsyncThrowingStream.makeStream<>(of:throwing:bufferingPolicy:)()
{
  return MEMORY[0x270FA20B0]();
}

uint64_t type metadata accessor for AsyncThrowingStream.Continuation.YieldResult()
{
  return MEMORY[0x270FA20B8]();
}

uint64_t type metadata accessor for AsyncThrowingStream.Continuation.BufferingPolicy()
{
  return MEMORY[0x270FA20C8]();
}

uint64_t AsyncThrowingStream.Continuation.yield(_:)()
{
  return MEMORY[0x270FA20D8]();
}

uint64_t AsyncThrowingStream.Continuation.finish(throwing:)()
{
  return MEMORY[0x270FA20E0]();
}

uint64_t type metadata accessor for AsyncThrowingStream.Continuation()
{
  return MEMORY[0x270FA20E8]();
}

uint64_t AsyncThrowingStream.makeAsyncIterator()()
{
  return MEMORY[0x270FA20F0]();
}

uint64_t type metadata accessor for AsyncThrowingStream()
{
  return MEMORY[0x270FA2118]();
}

uint64_t AsyncThrowingStream.init<>(_:bufferingPolicy:_:)()
{
  return MEMORY[0x270FA2120]();
}

uint64_t Collection<>.popFirst()()
{
  return MEMORY[0x270F9E0E8]();
}

uint64_t Collection.isEmpty.getter()
{
  return MEMORY[0x270F9E178]();
}

uint64_t static os_log_type_t.error.getter()
{
  return MEMORY[0x270FA2E60]();
}

uint64_t static os_log_type_t.default.getter()
{
  return MEMORY[0x270FA2E80]();
}

uint64_t type metadata accessor for Optional()
{
  return MEMORY[0x270F9E3C0]();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return MEMORY[0x270F9E530]();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return MEMORY[0x270F9E560]();
}

uint64_t type metadata accessor for ArraySlice()
{
  return MEMORY[0x270F9E708]();
}

uint64_t ArraySlice.init<A>(_:)()
{
  return MEMORY[0x270F9E718]();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return MEMORY[0x270F9E9B0]();
}

uint64_t DecodingError.Context.init(codingPath:debugDescription:underlyingError:)()
{
  return MEMORY[0x270F9EA78]();
}

uint64_t type metadata accessor for DecodingError()
{
  return MEMORY[0x270F9EA98]();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return MEMORY[0x270F9EB28]();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return MEMORY[0x270F9ED70]();
}

Swift::Bool __swiftcall _NativeDictionary.ensureUnique(isUnique:capacity:)(Swift::Bool isUnique, Swift::Int capacity)
{
  return MEMORY[0x270F9EF08](isUnique, capacity);
}

Swift::Void __swiftcall _NativeDictionary.copy()()
{
}

uint64_t _NativeDictionary._delete(at:)()
{
  return MEMORY[0x270F9EF20]();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return MEMORY[0x270F9EFE8]();
}

{
  return MEMORY[0x270F9EFF0]();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x270F9F0A0]();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return MEMORY[0x270F9F0B0]();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return MEMORY[0x270F9F0C0]();
}

uint64_t KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return MEMORY[0x270F9F250]();
}

uint64_t KeyedDecodingContainer.codingPath.getter()
{
  return MEMORY[0x270F9F258]();
}

uint64_t KeyedDecodingContainer.decodeIfPresent(_:forKey:)()
{
  return MEMORY[0x270F9F270]();
}

uint64_t KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x270F9F2A0]();
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return MEMORY[0x270F9F2E8]();
}

{
  return MEMORY[0x270F9F338]();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return MEMORY[0x270F9F318]();
}

uint64_t KeyedDecodingContainer.allKeys.getter()
{
  return MEMORY[0x270F9F360]();
}

uint64_t type metadata accessor for KeyedDecodingContainer()
{
  return MEMORY[0x270F9F378]();
}

uint64_t KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return MEMORY[0x270F9F390]();
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)()
{
  return MEMORY[0x270F9F3B0]();
}

uint64_t KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x270F9F3E0]();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return MEMORY[0x270F9F428]();
}

{
  return MEMORY[0x270F9F478]();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return MEMORY[0x270F9F458]();
}

uint64_t type metadata accessor for KeyedEncodingContainer()
{
  return MEMORY[0x270F9F4A8]();
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return MEMORY[0x270F9F4E0]();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return MEMORY[0x270F9F7D0]();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x270F9FB18]();
}

uint64_t Error._getEmbeddedNSError()()
{
  return MEMORY[0x270F9FB30]();
}

uint64_t Error._code.getter()
{
  return MEMORY[0x270F9FB38]();
}

uint64_t Error._domain.getter()
{
  return MEMORY[0x270F9FB40]();
}

uint64_t Error._userInfo.getter()
{
  return MEMORY[0x270F9FB48]();
}

uint64_t Hasher.init(_seed:)()
{
  return MEMORY[0x270F9FC48]();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt8 a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt64 a1)
{
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return MEMORY[0x270F9FC90]();
}

uint64_t type metadata accessor for Result()
{
  return MEMORY[0x270F9FCF8]();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return MEMORY[0x270F9FD70]();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return MEMORY[0x270F9FD98]();
}

NSString *NSHomeDirectory(void)
{
  return (NSString *)MEMORY[0x270EF2AD0]();
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x270FA0158]();
}

void bzero(void *a1, size_t a2)
{
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x270EDA378](ptr);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x270EDA468](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6D0](a1, a2);
}

uint64_t self
{
  return MEMORY[0x270F9A730]();
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A890](a1);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x270EDA9D0](oslog, type);
}

uint64_t sandbox_extension_consume()
{
  return MEMORY[0x270EDB2B8]();
}

uint64_t sandbox_extension_release()
{
  return MEMORY[0x270EDB2D8]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x270FA0190]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x270FA0198]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x270FA01C0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x270FA01E0]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x270FA01E8]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x270FA01F0]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x270FA01F8]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x270FA0200]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x270FA0208]();
}

uint64_t swift_defaultActor_destroy()
{
  return MEMORY[0x270FA2420]();
}

uint64_t swift_defaultActor_initialize()
{
  return MEMORY[0x270FA2428]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x270FA0260]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x270FA02C0]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x270FA02C8]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x270FA02D0]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x270FA0338]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x270FA03B0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x270FA03E8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x270FA0400]();
}

uint64_t swift_getTupleTypeLayout2()
{
  return MEMORY[0x270FA0410]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x270FA0428]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x270FA0440]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x270FA0448]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x270FA0450]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x270FA0460]();
}

uint64_t swift_initEnumMetadataSinglePayload()
{
  return MEMORY[0x270FA0470]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x270FA0488]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x270FA04C8]();
}

uint64_t swift_once()
{
  return MEMORY[0x270FA04F0]();
}

uint64_t swift_release()
{
  return MEMORY[0x270FA0520]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x270FA0528]();
}

uint64_t swift_retain()
{
  return MEMORY[0x270FA0530]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x270FA0538]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x270FA0558]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x270FA0560]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x270FA0578]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x270FA2450]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x270FA2458]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x270FA2460]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x270FA0588]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x270FA0590]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x270FA05A0]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x270FA0628]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x270FA0670]();
}

uint64_t swift_willThrowTypedImpl()
{
  return MEMORY[0x270FA0678]();
}