void QP::U2Parser::preheat(QP::U2Parser *this)
{
  id v2;
  NSLocale *v3;
  NSObject *v4;
  void *v5;
  int v6;
  void *v7;
  id v8;
  NSLocale *v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x263EF8340];
  v2 = *(id *)(*((void *)this + 10) + 104);
  if (QP::isSupportedQULocale((QP *)v2, v3))
  {
    if (u2ParserLogger(void)::token != -1) {
      dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_245);
    }
    v4 = (id)u2ParserLogger(void)::log;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = [v2 localeIdentifier];
      v12 = 138412290;
      v13 = v5;
      _os_log_impl(&dword_224D85000, v4, OS_LOG_TYPE_DEFAULT, "[QPNLU] Preheat QU model for locale: %@", (uint8_t *)&v12, 0xCu);
    }
    v6 = *(char *)(*((void *)this + 10) + 36);
    v7 = [MEMORY[0x263F628E8] sharedInstance];
    v8 = (id)[v7 getModelForLocale:v2 withTimeoutMS:-v6];

    if (QP::isSupportedECRLocale((QP *)v2, v9))
    {
      if (*(unsigned char *)(*((void *)this + 10) + 57)) {
        +[QPInProcessECRClient sharedClient];
      }
      else {
      v10 = +[QPXPCECRClient sharedClient];
      }
      v11 = v10;
      if (*(unsigned char *)(*((void *)this + 10) + 36)) {
        [v10 warmUpSync];
      }
      else {
        [v10 warmUpAsync];
      }
    }
  }
}

void sub_224D87680(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t QP::isSupportedECRLocale(QP *this, NSLocale *a2)
{
  v2 = [(QP *)this localeIdentifier];
  if ([v2 length])
  {
    if (QP::isSupportedECRLocale(NSLocale *)::onceToken != -1) {
      dispatch_once(&QP::isSupportedECRLocale(NSLocale *)::onceToken, &__block_literal_global_72);
    }
    uint64_t v3 = [(id)QP::isSupportedECRLocale(NSLocale *)::supportedLocaleIdentifiers containsObject:v2];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void sub_224D87744(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t QP::isSupportedQULocale(QP *this, NSLocale *a2)
{
  v2 = [(QP *)this localeIdentifier];
  if ([v2 length])
  {
    if (QP::isSupportedQULocale(NSLocale *)::onceToken != -1) {
      dispatch_once(&QP::isSupportedQULocale(NSLocale *)::onceToken, &__block_literal_global_8);
    }
    uint64_t v3 = [(id)QP::isSupportedQULocale(NSLocale *)::supportedLocaleIdentifiers containsObject:v2];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void sub_224D877D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_224D87D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_1(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

void OUTLINED_FUNCTION_2(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void OUTLINED_FUNCTION_1_1(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x16u);
}

uint64_t OUTLINED_FUNCTION_1_2(uint64_t a1)
{
  return *(void *)a1;
}

void OUTLINED_FUNCTION_1_3(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void OUTLINED_FUNCTION_0_1()
{
  JUMPOUT(0x22A623E20);
}

void OUTLINED_FUNCTION_0_4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

void OUTLINED_FUNCTION_0_5(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

os_log_t ___ZL12parserLoggerv_block_invoke()
{
  uint64_t v0 = _nlpLoggingSubsystem();
  os_log_t result = os_log_create(v0, "QueryParserEngine");
  parserLogger(void)::log = (uint64_t)result;
  return result;
}

const char *_nlpLoggingSubsystem()
{
  return "com.apple.spotlight.QueryParser";
}

void QP::Parser::preheat(QP::Parser *this)
{
  uint64_t v2 = *(void *)this;
  if (*(unsigned char *)(*(void *)this + 55))
  {
    uint64_t v3 = (QP::U2Parser *)*((void *)this + 6);
    if (v3)
    {
      QP::U2Parser::preheat(v3);
      uint64_t v2 = *(void *)this;
    }
  }
  if (*(unsigned char *)(v2 + 56))
  {
    uint64_t v4 = (QP::LLMParser *)*((void *)this + 8);
    if (v4)
    {
      QP::LLMParser::preheat(v4);
    }
  }
}

void QPQueryParserPreheat(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(QP::Parser ***)(a1 + 24);
    if (v1) {
      QP::QueryParserEngine::preheat(v1);
    }
  }
}

void *QP::Embedder::Embedder(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  a1[2] = 0;
  a1[3] = 0;
  startEmbeddingService();
  return a1;
}

void sub_224D88188(_Unwind_Exception *a1)
{
  nlp::CFScopedPtr<__CFError *>::reset((const void **)(v1 + 24), 0);
  nlp::CFScopedPtr<__CFData const*>::reset(v2, 0);
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 8);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(a1);
}

void QP::Embedder::preheat(QP::Embedder *this)
{
  if (embeddingLogger(void)::token != -1) {
    dispatch_once(&embeddingLogger(void)::token, &__block_literal_global);
  }
  os_signpost_id_t v2 = os_signpost_id_generate((os_log_t)embeddingLogger(void)::log);
  if (embeddingLogger(void)::token != -1) {
    dispatch_once(&embeddingLogger(void)::token, &__block_literal_global);
  }
  if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v3 = embeddingLogger(void)::log;
    if (os_signpost_enabled((os_log_t)embeddingLogger(void)::log))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_224D85000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v2, "Embedder::preheat", "", buf, 2u);
    }
  }
  if (*(unsigned char *)(*(void *)this + 36)) {
    embeddingGeneratorPreheatSync();
  }
  else {
    embeddingGeneratorPreheatAsync();
  }
  if (embeddingLogger(void)::token != -1) {
    dispatch_once(&embeddingLogger(void)::token, &__block_literal_global);
  }
  if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v4 = embeddingLogger(void)::log;
    if (os_signpost_enabled((os_log_t)embeddingLogger(void)::log))
    {
      *(_WORD *)v5 = 0;
      _os_signpost_emit_with_name_impl(&dword_224D85000, v4, OS_SIGNPOST_INTERVAL_END, v2, "Embedder::preheat", "", v5, 2u);
    }
  }
}

BOOL QP::Embedder::shouldEmbedLanguage(QP::Embedder *this, const __CFDictionary *a2)
{
  return *(unsigned char *)(*(void *)this + 36) || languageSupportedForEmbedding(a2) != 0;
}

BOOL QP::Embedder::shouldEmbedString(QP::Embedder *this, CFStringRef theString)
{
  return theString && CFStringGetLength(theString) > 2;
}

void QP::Embedder::createEmbeddingError(uint64_t a1, uint64_t a2)
{
  userInfoKeys[1] = *(void **)MEMORY[0x263EF8340];
  if (a2 == 2)
  {
    CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    uint64_t v4 = (__CFString *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Safety Error: Query is blocked by U2 Query Safety Model");
  }
  else
  {
    if (a2 != 1) {
      return;
    }
    CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    uint64_t v4 = (__CFString *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"Safety Error: Query is blocked for presence of sensitive or photo-sensitive term");
  }
  v5 = v4;
  v6 = (void *)*MEMORY[0x263EFFC48];
  userInfoValues = v4;
  userInfoKeys[0] = v6;
  CFErrorRef v7 = CFErrorCreateWithUserInfoKeysAndValues(v3, @"PhotoSearchSafetyDomainError", -8008, (const void *const *)userInfoKeys, (const void *const *)&userInfoValues, 1);
  nlp::CFScopedPtr<__CFError *>::reset((const void **)(a1 + 24), v7);
  CFRelease(v5);
}

void nlp::CFScopedPtr<__CFError *>::reset(const void **a1, const void *a2)
{
  uint64_t v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

void QP::Embedder::setInputs(const void **this, const __CFArray *a2, const __CFArray *a3, const __CFDictionary *a4, const __CFBoolean *a5)
{
  uint64_t v10 = this + 2;
  nlp::CFScopedPtr<__CFData const*>::reset(this + 2, 0);
  v11 = this + 3;
  nlp::CFScopedPtr<__CFError *>::reset(this + 3, 0);
  if (embeddingLogger(void)::token != -1) {
    dispatch_once(&embeddingLogger(void)::token, &__block_literal_global);
  }
  os_signpost_id_t v12 = os_signpost_id_generate((os_log_t)embeddingLogger(void)::log);
  if (embeddingLogger(void)::token != -1) {
    dispatch_once(&embeddingLogger(void)::token, &__block_literal_global);
  }
  if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v13 = embeddingLogger(void)::log;
    if (os_signpost_enabled((os_log_t)embeddingLogger(void)::log))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_224D85000, v13, OS_SIGNPOST_INTERVAL_BEGIN, v12, "Embedder::setInputs", "", buf, 2u);
    }
  }
  v17 = 0;
  id v14 = copyEmbeddingDataForInputs(a2, a3, a4, a5, &v17);
  nlp::CFScopedPtr<__CFData const*>::reset(v10, v14);
  if (v17) {
    nlp::CFScopedPtr<__CFError *>::reset(v11, v17);
  }
  if (embeddingLogger(void)::token != -1) {
    dispatch_once(&embeddingLogger(void)::token, &__block_literal_global);
  }
  if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v15 = embeddingLogger(void)::log;
    if (os_signpost_enabled((os_log_t)embeddingLogger(void)::log))
    {
      *(_WORD *)v16 = 0;
      _os_signpost_emit_with_name_impl(&dword_224D85000, v15, OS_SIGNPOST_INTERVAL_END, v12, "Embedder::setInputs", "", v16, 2u);
    }
  }
}

void QP::Embedder::clear(const void **this)
{
  nlp::CFScopedPtr<__CFData const*>::reset(this + 2, 0);
  nlp::CFScopedPtr<__CFError *>::reset(this + 3, 0);
}

void nlp::CFScopedPtr<__CFData const*>::reset(const void **a1, const void *a2)
{
  uint64_t v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

void QP::Embedder::cancelWithQueryID(QP::Embedder *this, uint64_t a2)
{
}

os_log_t ___ZL15embeddingLoggerv_block_invoke()
{
  uint64_t v0 = _nlpLoggingSubsystem();
  os_log_t result = os_log_create(v0, "QueryParserEmbedding");
  embeddingLogger(void)::log = (uint64_t)result;
  return result;
}

void std::__shared_weak_count::__release_shared[abi:ne180100](std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

void __clang_call_terminate(void *a1)
{
}

void sub_224D8886C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_224D88A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_224D88B90(_Unwind_Exception *a1)
{
  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_224D88D94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_224D88F0C(_Unwind_Exception *a1)
{
  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_224D890BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_224D891DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_224D89300(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_224D89728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_224D8A4BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, uint64_t a17, void *a18, void *a19, uint64_t a20,void *a21,void *a22,void *a23,uint64_t a24,void *a25,void *a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
  _Unwind_Resume(a1);
}

BOOL QP::startswith(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = (char)a2[23];
  BOOL v3 = v2 < 0;
  if (v2 >= 0) {
    uint64_t v4 = a2;
  }
  else {
    uint64_t v4 = *(unsigned __int8 **)a2;
  }
  if (v3) {
    uint64_t v5 = *((void *)a2 + 1);
  }
  else {
    uint64_t v5 = a2[23];
  }
  v6 = &v4[v5];
  if (v5)
  {
    if ((a1[23] & 0x80u) == 0) {
      CFErrorRef v7 = a1;
    }
    else {
      CFErrorRef v7 = *(unsigned __int8 **)a1;
    }
    while (*v4 == *v7)
    {
      ++v4;
      ++v7;
      if (!--v5)
      {
        uint64_t v4 = v6;
        return v4 == v6;
      }
    }
  }
  return v4 == v6;
}

BOOL QP::endswith(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *((unsigned __int8 *)a2 + 23);
  if ((v2 & 0x80u) == 0) {
    unint64_t v3 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    unint64_t v3 = a2[1];
  }
  unint64_t v4 = *((unsigned __int8 *)a1 + 23);
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    unint64_t v4 = a1[1];
  }
  if (v3 > v4) {
    return 0;
  }
  int v7 = (char)v2;
  v8 = (uint64_t *)((char *)a2 + v2);
  if (v7 >= 0)
  {
    uint64_t v9 = a2;
  }
  else
  {
    v8 = (uint64_t *)(*a2 + a2[1]);
    uint64_t v9 = (uint64_t *)*a2;
  }
  if (v5 >= 0) {
    uint64_t v10 = a1;
  }
  else {
    uint64_t v10 = (uint64_t *)*a1;
  }
  v11 = (unsigned __int8 *)v10 + v4 - 1;
  do
  {
    BOOL result = v8 == v9;
    if (v8 == v9) {
      break;
    }
    int v13 = *((unsigned __int8 *)v8 - 1);
    v8 = (uint64_t *)((char *)v8 - 1);
    int v12 = v13;
    int v14 = *v11--;
  }
  while (v12 == v14);
  return result;
}

BOOL QP::equals(void *a1, void *a2)
{
  int v2 = *((char *)a2 + 23);
  int v3 = *((char *)a1 + 23);
  if (v3 >= 0) {
    size_t v4 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v4 = a1[1];
  }
  if (v3 < 0) {
    a1 = (void *)*a1;
  }
  if (v2 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = a2[1];
  }
  if (v2 < 0) {
    a2 = (void *)*a2;
  }
  if (v5 >= v4) {
    size_t v6 = v4;
  }
  else {
    size_t v6 = v5;
  }
  BOOL v7 = memcmp(a1, a2, v6) == 0;
  return v5 == v4 && v7;
}

CFStringRef QP::createCFStringFromString(uint64_t a1)
{
  uint64_t v1 = (const UInt8 *)a1;
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    CFIndex v2 = *(unsigned __int8 *)(a1 + 23);
    if (!*(unsigned char *)(a1 + 23)) {
      return &stru_26D832058;
    }
    return CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x263EFFB08], v1, v2, 0x8000100u, 0);
  }
  CFIndex v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v1 = *(const UInt8 **)a1;
    return CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x263EFFB08], v1, v2, 0x8000100u, 0);
  }
  return &stru_26D832058;
}

void *QP::getUTF8StringFromCFString@<X0>(const __CFString *this@<X0>, void *a2@<X8>)
{
  if (this)
  {
    CFIndex Length = CFStringGetLength(this);
    CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
    operator new[]();
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, "");
}

void sub_224D8A9CC(_Unwind_Exception *a1)
{
  MEMORY[0x22A623E00](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

void QP::getFileSystemRepresentationFromCFURL(QP *this, const __CFURL *a2)
{
}

void sub_224D8AA7C(_Unwind_Exception *a1)
{
  MEMORY[0x22A623E00](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

uint64_t copyStringInsertingSpacesBetweenIdeographCharacters(const __CFString *a1, CFRange a2)
{
  CFIndex length = a2.length;
  CFIndex location = a2.location;
  if (__onceCSetToken != -1) {
    dispatch_once(&__onceCSetToken, &__block_literal_global_813);
  }
  uint64_t v14 = 0;
  v15 = &v14;
  uint64_t v16 = 0x2000000000;
  CFMutableStringRef Mutable = 0;
  CFMutableStringRef Mutable = CFStringCreateMutable(0, 0);
  v12[0] = 0;
  v12[1] = v12;
  v12[2] = 0x2000000000;
  int v13 = 0;
  v10[0] = 0;
  v10[1] = v10;
  v10[2] = 0x2000000000;
  char v11 = 0;
  v8[0] = 0;
  v8[1] = v8;
  v8[2] = 0x2000000000;
  char v9 = 0;
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 0x40000000;
  v7[2] = ___Z51copyStringInsertingSpacesBetweenIdeographCharactersPK10__CFString7CFRange_block_invoke_2;
  v7[3] = &unk_264704E18;
  v7[7] = &v14;
  v7[8] = a1;
  v7[4] = v12;
  v7[5] = v10;
  v7[6] = v8;
  CFEnumerateCharactersInCFString((CFIndex)a1, location, length, (uint64_t)v7);
  uint64_t v5 = v15[3];
  _Block_object_dispose(v8, 8);
  _Block_object_dispose(v10, 8);
  _Block_object_dispose(v12, 8);
  _Block_object_dispose(&v14, 8);
  return v5;
}

void sub_224D8AC08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 128), 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

CFArrayRef ___Z15getValidRegionsv_block_invoke()
{
  v1[257] = *(const void **)MEMORY[0x263EF8340];
  memcpy(v1, off_2647045E8, 0x808uLL);
  CFArrayRef result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], v1, 257, MEMORY[0x263EFFF70]);
  getValidRegions(void)::gRegions = (uint64_t)result;
  return result;
}

CFLocaleRef getLanguageCode(const __CFLocale *result)
{
  if (result) {
    return (const __CFLocale *)CFLocaleGetValue(result, (CFLocaleKey)*MEMORY[0x263EFFCF0]);
  }
  return result;
}

__CFString *getScriptCode(__CFString *result)
{
  if (result)
  {
    CFLocaleRef v1 = (const __CFLocale *)result;
    CFArrayRef result = (__CFString *)CFLocaleGetValue((CFLocaleRef)result, (CFLocaleKey)*MEMORY[0x263EFFCF8]);
    if (!result)
    {
      CFStringRef Value = (const __CFString *)CFLocaleGetValue(v1, (CFLocaleKey)*MEMORY[0x263EFFCF0]);
      int v3 = (__CFString *)CFLocaleGetValue(v1, (CFLocaleKey)*MEMORY[0x263EFFCB0]);
      if (Value) {
        BOOL v4 = v3 == 0;
      }
      else {
        BOOL v4 = 1;
      }
      if (v4)
      {
        return 0;
      }
      else
      {
        uint64_t v5 = v3;
        if (Value == @"zh"
          || (v6 = CFStringCompare(Value, @"zh", 0), CFArrayRef result = 0, v6 == kCFCompareEqualTo))
        {
          if (v5 == @"HK") {
            return @"Hant";
          }
          BOOL v7 = CFEqual(v5, @"HK") || v5 == @"TW";
          if (v7 || CFEqual(v5, @"TW"))
          {
            return @"Hant";
          }
          else
          {
            if (v5 == @"CN") {
              return @"Hans";
            }
            CFComparisonResult v8 = CFStringCompare(v5, @"CN", 0);
            CFArrayRef result = 0;
            if (v8 == kCFCompareEqualTo) {
              return @"Hans";
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL CFStringsAreEqual(CFStringRef theString1, const __CFString *a2)
{
  if (theString1 == a2) {
    return 1;
  }
  BOOL result = 0;
  if (theString1)
  {
    if (a2) {
      return CFEqual(theString1, a2);
    }
  }
  return result;
}

CFLocaleRef copyNormalizedLocaleForIdentifier(CFLocaleIdentifier localeIdentifier)
{
  if (localeIdentifier) {
    CFLocaleRef v1 = CFLocaleCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], localeIdentifier);
  }
  else {
    CFLocaleRef v1 = CFLocaleCopyCurrent();
  }
  CFLocaleRef v2 = v1;
  if (v1)
  {
    CFTypeRef Value = CFLocaleGetValue(v1, (CFLocaleKey)*MEMORY[0x263EFFCB0]);
    if (Value)
    {
      BOOL v4 = Value;
      if (getValidRegions(void)::onceToken != -1) {
        dispatch_once(&getValidRegions(void)::onceToken, &__block_literal_global_0);
      }
      CFArrayRef v5 = (const __CFArray *)getValidRegions(void)::gRegions;
      v13.CFIndex length = CFArrayGetCount((CFArrayRef)getValidRegions(void)::gRegions);
      v13.CFIndex location = 0;
      if (CFArrayContainsValue(v5, v13, v4))
      {
        CFLocaleRef v6 = v2;
LABEL_19:
        CFRelease(v2);
        return v6;
      }
    }
    CFLocaleRef v6 = (const __CFLocale *)CFLocaleGetValue(v2, (CFLocaleKey)*MEMORY[0x263EFFCF0]);
    CFTypeRef v7 = CFLocaleGetValue(v2, (CFLocaleKey)*MEMORY[0x263EFFCF8]);
    if (v6) {
      BOOL v8 = v7 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (v8)
    {
      if (!v6) {
        goto LABEL_19;
      }
      CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      CFStringRef v10 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"%@_US", v6);
    }
    else
    {
      CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      CFStringRef v10 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"%@-%@_US", v6, v7);
    }
    CFStringRef v11 = v10;
    CFLocaleRef v6 = CFLocaleCreate(v9, v10);
    CFRelease(v11);
    goto LABEL_19;
  }
  return 0;
}

CFArrayRef copyNormalizedLanguagesForIdentifiers(const __CFArray *a1)
{
  if (a1)
  {
    CFIndex Count = CFArrayGetCount(a1);
    CFArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
    if (Count >= 1)
    {
      for (CFIndex i = 0; i != Count; ++i)
      {
        CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a1, i);
        CFLocaleRef v6 = copyNormalizedLocaleForIdentifier(ValueAtIndex);
        if (v6)
        {
          CFLocaleRef v7 = v6;
          BOOL v8 = (const void *)MEMORY[0x22A6233E0]();
          v20.CFIndex length = CFArrayGetCount(Mutable);
          v20.CFIndex location = 0;
          if (!CFArrayContainsValue(Mutable, v20, v8)) {
            CFArrayAppendValue(Mutable, v8);
          }
          CFRelease(v7);
        }
      }
    }
  }
  else
  {
    CFArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  }
  if (!CFArrayGetCount(Mutable))
  {
    CFLocaleRef v9 = CFLocaleCopyCurrent();
    if (v9)
    {
      CFLocaleRef v10 = v9;
      CFStringRef v11 = (const __CFString *)MEMORY[0x22A6233E0]();
      CFLocaleRef v12 = copyNormalizedLocaleForIdentifier(v11);
      if (v12)
      {
        CFLocaleRef v13 = v12;
        uint64_t v14 = (const void *)MEMORY[0x22A6233E0]();
        v21.CFIndex length = CFArrayGetCount(Mutable);
        v21.CFIndex location = 0;
        if (!CFArrayContainsValue(Mutable, v21, v14)) {
          CFArrayAppendValue(Mutable, v14);
        }
        CFRelease(v13);
      }
    }
    else
    {
      if (!CFLocaleGetSystem()
        || (CFStringRef v16 = (const __CFString *)MEMORY[0x22A6233E0](), (v17 = copyNormalizedLocaleForIdentifier(v16)) == 0))
      {
LABEL_18:
        if (!CFArrayGetCount(Mutable)) {
          CFArrayAppendValue(Mutable, @"en-US");
        }
        return Mutable;
      }
      CFLocaleRef v10 = v17;
      v18 = (const void *)MEMORY[0x22A6233E0]();
      v22.CFIndex length = CFArrayGetCount(Mutable);
      v22.CFIndex location = 0;
      if (!CFArrayContainsValue(Mutable, v22, v18))
      {
        v19 = (const void *)MEMORY[0x22A6233E0](v10);
        CFArrayAppendValue(Mutable, v19);
      }
    }
    CFRelease(v10);
    goto LABEL_18;
  }
  return Mutable;
}

CFArrayRef copyCurrentPreferredLanguages(void)
{
  CFArrayRef v0 = CFLocaleCopyPreferredLanguages();
  CFArrayRef v1 = copyNormalizedLanguagesForIdentifiers(v0);
  if (v0) {
    CFRelease(v0);
  }
  return v1;
}

CFLocaleRef copyCurrentLocale(void)
{
  CFArrayRef v0 = copyCurrentPreferredLanguages();
  if (!v0) {
    return 0;
  }
  CFArrayRef v1 = v0;
  if (CFArrayGetCount(v0))
  {
    CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v1, 0);
    CFLocaleRef v3 = CFLocaleCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], ValueAtIndex);
  }
  else
  {
    CFLocaleRef v3 = 0;
  }
  CFRelease(v1);
  return v3;
}

__CFCalendar *copyCurrentCalendar(const __CFLocale *a1, const __CFString *a2)
{
  if (!a1) {
    return 0;
  }
  CFStringRef v3 = (const __CFString *)MEMORY[0x22A6233E0]();
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFArrayRef v5 = CFCalendarCreateWithIdentifier((CFAllocatorRef)*MEMORY[0x263EFFB08], v3);
  if (v5 || (CFArrayRef v5 = CFCalendarCopyCurrent()) != 0)
  {
    CFTimeZoneRef v6 = CFTimeZoneCopySystem();
    if (v6)
    {
      CFTimeZoneRef v7 = v6;
      CFCalendarSetTimeZone(v5, v6);
      CFRelease(v7);
    }
    if (a2)
    {
      CFLocaleRef v8 = CFLocaleCreate(v4, a2);
      CFCalendarSetLocale(v5, v8);
      CFRelease(v8);
    }
  }
  return v5;
}

CFAbsoluteTime getCurrentTime(__CFCalendar *a1, const __CFDate *a2)
{
  if (a2) {
    MEMORY[0x22A623240](a2);
  }
  else {
    double Current = CFAbsoluteTimeGetCurrent();
  }
  CFAbsoluteTime at = Current;
  unsigned int v9 = -1;
  unsigned int v10 = -1;
  unsigned int v7 = -1;
  unsigned int v8 = -1;
  unsigned int v6 = -1;
  unsigned int v5 = -1;
  CFCalendarDecomposeAbsoluteTime(a1, Current, "dMyHms", &v10, &v9, &v8, &v7, &v6, &v5);
  CFCalendarComposeAbsoluteTime(a1, &at, "dMyHms", v10, v9, v8, v7, v6, v5);
  return at;
}

CFAbsoluteTime convertAbsoluteTime(__CFCalendar *a1, __CFCalendar *a2, const __CFDate *a3, int a4)
{
  CFAbsoluteTime at = 0.0;
  CFAbsoluteTime v7 = MEMORY[0x22A623240](a3);
  CFStringRef v8 = (const __CFString *)MEMORY[0x22A623110](a2);
  unsigned int v24 = -1;
  unsigned int v25 = -1;
  unsigned int v22 = -1;
  unsigned int v23 = -1;
  unsigned int v21 = -1;
  unsigned int v19 = -1;
  unsigned int v20 = -1;
  unsigned int v17 = -1;
  unsigned int v18 = -1;
  CFCalendarDecomposeAbsoluteTime(a1, v7, "yMdwEFHms", &v23, &v24, &v25, &v21, &v22, &v20, &v19, &v18, &v17);
  CFStringRef v9 = (const __CFString *)*MEMORY[0x263EFFC98];
  if (v8 == (const __CFString *)*MEMORY[0x263EFFC98] || v8 && v9 && CFEqual(v8, v9))
  {
    int v16 = -1;
    CFCalendarComposeAbsoluteTime(a2, &at, "y", v23);
    CFCalendarDecomposeAbsoluteTime(a1, at, "y", &v16);
    unsigned int v23 = v23 - v16 + 1;
  }
  uint64_t v10 = MEMORY[0x22A623100](a1);
  uint64_t v11 = MEMORY[0x22A623100](a2);
  if (a4 != -1 || v10 == v11) {
    CFCalendarComposeAbsoluteTime(a2, &at, "yMdwEFHms", v23, v24, v25, v21, v22, v20, v19, v18, v17);
  }
  else {
    CFCalendarComposeAbsoluteTime(a2, &at, "ywEHms", v23, v21, v22, v19, v18, v17, v13, v14, v15);
  }
  return at;
}

BOOL CFStringContainsString(CFStringRef theString, const __CFString *a2)
{
  if (theString == a2) {
    return 1;
  }
  BOOL result = 0;
  if (theString)
  {
    if (a2) {
      return CFStringFind(theString, a2, 0).location != -1;
    }
  }
  return result;
}

BOOL CFLocaleIsCJ(BOOL result)
{
  if (result)
  {
    CFStringRef v1 = (const __CFString *)MEMORY[0x22A6233E0]();
    return CFStringHasPrefix(v1, @"zh")
        || CFStringHasPrefix(v1, @"yue")
        || CFStringHasPrefix(v1, @"ja") != 0;
  }
  return result;
}

BOOL CFLocalesAreEqual(BOOL result, const __CFLocale *a2)
{
  if (result)
  {
    CFStringRef v3 = (const __CFString *)MEMORY[0x22A6233E0]();
    uint64_t v4 = MEMORY[0x22A6233E0](a2);
    if (v3 == (const __CFString *)v4)
    {
      return 1;
    }
    else
    {
      CFStringRef v5 = (const __CFString *)v4;
      BOOL result = 0;
      if (v3)
      {
        if (v5) {
          return CFEqual(v3, v5);
        }
      }
    }
  }
  return result;
}

CFIndex CFEnumerateCharactersInCFString(CFIndex theString, CFIndex theIndex, uint64_t a3, uint64_t a4)
{
  CFIndex v5 = theIndex;
  CFStringRef v6 = (const __CFString *)theString;
  char v9 = 0;
  CFIndex v7 = theIndex + a3;
  do
  {
    if (v5 >= v7) {
      break;
    }
    CFRange RangeOfComposedCharactersAtIndex = CFStringGetRangeOfComposedCharactersAtIndex(v6, v5);
    theString = RangeOfComposedCharactersAtIndex.location;
    if (RangeOfComposedCharactersAtIndex.location == -1) {
      break;
    }
    theString = (*(uint64_t (**)(uint64_t, CFIndex, CFIndex, char *))(a4 + 16))(a4, RangeOfComposedCharactersAtIndex.location, RangeOfComposedCharactersAtIndex.length, &v9);
    v5 += RangeOfComposedCharactersAtIndex.length;
  }
  while (!v9);
  return theString;
}

uint64_t ___Z51copyStringInsertingSpacesBetweenIdeographCharactersPK10__CFString7CFRange_block_invoke(const __CFString *a1)
{
  uint64_t result = newCharacterSetWithPattern(a1);
  __CSet = result;
  return result;
}

uint64_t newCharacterSetWithPattern(const __CFString *a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  HIDWORD(v5) = 0;
  CFIndex Length = CFStringGetLength(@"[[:Hani:][:Katakana:][:Hiragana:][:Katakana_Or_Hiragana:][\\u30FC]]");
  MEMORY[0x270FA5388]();
  CFStringRef v3 = (UniChar *)((char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!CFStringGetCharactersPtr(@"[[:Hani:][:Katakana:][:Hiragana:][:Katakana_Or_Hiragana:][\\u30FC]]"))
  {
    v7.CFIndex location = 0;
    v7.CFIndex length = Length;
    CFStringGetCharacters(@"[[:Hani:][:Katakana:][:Hiragana:][:Katakana_Or_Hiragana:][\\u30FC]]", v7, v3);
  }
  uint64_t result = uset_openPattern();
  if (SHIDWORD(v5) >= 1)
  {
    if (result)
    {
      uset_close();
      return 0;
    }
  }
  return result;
}

void ___Z51copyStringInsertingSpacesBetweenIdeographCharactersPK10__CFString7CFRange_block_invoke_2(uint64_t a1, CFRange a2)
{
  CFIndex length = a2.length;
  v10[1] = *MEMORY[0x263EF8340];
  uint64_t v4 = (UniChar *)((char *)v10 - ((2 * a2.length + 17) & 0xFFFFFFFFFFFFFFF0));
  CFStringGetCharacters(*(CFStringRef *)(a1 + 64), a2, v4);
  int isWhitespace = u_isWhitespace(*v4);
  int v6 = uset_containsAllCodePoints();
  int v7 = v6;
  if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    BOOL v8 = !*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) || v6 == 0;
    if (!v8 || (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) ? (BOOL v9 = isWhitespace == 0) : (BOOL v9 = 0), v9)) {
      CFStringAppend(*(CFMutableStringRef *)(*(void *)(*(void *)(a1 + 56) + 8) + 24), @" ");
    }
  }
  CFStringAppendCharacters(*(CFMutableStringRef *)(*(void *)(*(void *)(a1 + 56) + 8) + 24), v4, length);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = isWhitespace == 0;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v7 != 0;
  ++*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
}

CFStringRef copyTranslatedRomanNumberFromChineseNumberString(const __CFString *a1)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  values[4] = xmmword_264704E78;
  values[5] = *(_OWORD *)&off_264704E88;
  v29 = @"9";
  values[0] = xmmword_264704E38;
  values[1] = *(_OWORD *)&off_264704E48;
  values[2] = xmmword_264704E58;
  values[3] = *(_OWORD *)&off_264704E68;
  long long v25 = xmmword_264704EE0;
  long long v26 = *(_OWORD *)&off_264704EF0;
  v27 = @"九";
  *(_OWORD *)keys = xmmword_264704EA0;
  long long v22 = *(_OWORD *)&off_264704EB0;
  long long v23 = xmmword_264704EC0;
  long long v24 = *(_OWORD *)&off_264704ED0;
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFDictionaryRef v3 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], (const void **)keys, (const void **)values, 13, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  *(_OWORD *)prefix = xmmword_264704F08;
  unsigned int v20 = @"千";
  CFArrayRef v4 = CFArrayCreate(v2, (const void **)prefix, 3, MEMORY[0x263EFFF70]);
  CFIndex Length = CFStringGetLength(a1);
  if (Length >= 1)
  {
    CFIndex v6 = Length;
    int v7 = 0;
    int v8 = 0;
    int v9 = 0;
    CFIndex v10 = 0;
    while (1)
    {
      v32.CFIndex location = v10;
      v32.CFIndex length = 1;
      CFStringRef v11 = CFStringCreateWithSubstring(v2, a1, v32);
      value = 0;
      if (CFDictionaryGetValueIfPresent(v3, v11, (const void **)&value))
      {
        IntCFTypeRef Value = CFStringGetIntValue((CFStringRef)value);
        int v13 = 10 * v9;
        if (!v7) {
          int v13 = v9;
        }
        int v9 = IntValue + v13;
        ++v7;
      }
      else
      {
        v31.CFIndex length = CFArrayGetCount(v4);
        v31.CFIndex location = 0;
        if (!CFArrayContainsValue(v4, v31, v11))
        {
          CFRelease(v11);
          CFRelease(v3);
          CFRelease(v4);
          return 0;
        }
        int HasPrefix = CFStringHasPrefix(v11, prefix[0]);
        if (v9)
        {
          if (HasPrefix)
          {
            int v15 = 10 * v9;
          }
          else
          {
            int v16 = CFStringHasPrefix(v11, prefix[1]);
            int v15 = 1000 * v9;
            if (v16) {
              int v15 = 100 * v9;
            }
          }
        }
        else if (HasPrefix)
        {
          int v15 = 10;
        }
        else if (CFStringHasPrefix(v11, prefix[1]))
        {
          int v15 = 100;
        }
        else
        {
          int v15 = 1000;
        }
        int v9 = 0;
        int v7 = 0;
        v8 += v15;
      }
      CFRelease(v11);
      if (v6 == ++v10) {
        goto LABEL_22;
      }
    }
  }
  int v9 = 0;
  int v8 = 0;
LABEL_22:
  CFRelease(v3);
  CFRelease(v4);
  return CFStringCreateWithFormat(v2, 0, @"%d", (v8 + v9));
}

uint64_t getIntFromSpelledNumber(const __CFString *a1, const __CFLocale *a2)
{
  IntCFTypeRef Value = 0xFFFFFFFFLL;
  if (a1 && a2 && CFLocaleIsCJ((BOOL)a2))
  {
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings((CFAllocatorRef)*MEMORY[0x263EFFB08], a1, @" ");
    if (ArrayBySeparatingStrings)
    {
      CFArrayRef v6 = ArrayBySeparatingStrings;
      CFStringRef v7 = CFStringCreateByCombiningStrings(v4, ArrayBySeparatingStrings, &stru_26D832058);
      if (v7)
      {
        CFStringRef v8 = v7;
        CFStringRef v9 = copyTranslatedRomanNumberFromChineseNumberString(v7);
        if (v9)
        {
          CFStringRef v10 = v9;
          IntCFTypeRef Value = CFStringGetIntValue(v9);
          CFRelease(v10);
        }
        else
        {
          IntCFTypeRef Value = 0xFFFFFFFFLL;
        }
        CFRelease(v8);
      }
      else
      {
        IntCFTypeRef Value = 0xFFFFFFFFLL;
      }
      CFRelease(v6);
    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  return IntValue;
}

char *QPProcessName(void)
{
  if (QPProcessName(void)::onceToken != -1) {
    dispatch_once(&QPProcessName(void)::onceToken, &__block_literal_global_909);
  }
  return QPProcessName(void)::processName;
}

size_t ___Z13QPProcessNamev_block_invoke()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  size_t result = getpid();
  if (result)
  {
    *(void *)CFAllocatorRef v4 = 0xE00000001;
    int v5 = 1;
    int v6 = result;
    size_t __size = 648;
    size_t result = sysctl(v4, 4u, v2, &__size, 0, 0);
    if (result != -1)
    {
      if (__size) {
        return strlcpy(QPProcessName(void)::processName, v3, __size);
      }
    }
  }
  return result;
}

uint64_t QPCFDictionaryGetInt32ValueIfPresent(uint64_t result, const __CFString *a2, int *a3)
{
  if (result)
  {
    value = 0;
    size_t result = CFDictionaryGetValueIfPresent((CFDictionaryRef)result, a2, (const void **)&value);
    if (result)
    {
      size_t result = (uint64_t)value;
      if (value)
      {
        CFTypeID v4 = CFGetTypeID(value);
        if (v4 == CFNumberGetTypeID())
        {
          CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, a3);
          return 1;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

BOOL SPQueryKindIsSpotlightUISearch(BOOL theString1)
{
  if (theString1)
  {
    CFStringRef v1 = (__CFString *)theString1;
    if ((__CFString *)theString1 == @"com.apple.Spotlight")
    {
      return 1;
    }
    else
    {
      CFComparisonResult v2 = CFStringCompare((CFStringRef)theString1, @"com.apple.Spotlight", 0);
      theString1 = 1;
      if (v1 != @"com.apple.Search.framework")
      {
        if (v2) {
          return CFEqual(v1, @"com.apple.Search.framework");
        }
      }
    }
  }
  return theString1;
}

BOOL SPQueryKindIsSearchToolSearch(CFStringRef theString)
{
  if (SPQueryKindIsSearchToolSearch(__CFString const*)::onceToken == -1)
  {
    if (theString) {
      goto LABEL_3;
    }
    return 0;
  }
  dispatch_once(&SPQueryKindIsSearchToolSearch(__CFString const*)::onceToken, &__block_literal_global_918);
  if (!theString) {
    return 0;
  }
LABEL_3:
  if (SPQueryKindIsSearchToolSearch(__CFString const*)::isSearchToolDebugMode) {
    return 1;
  }
  if (!SPQueryKindIsSearchToolSearch(__CFString const*)::isSearchToolRanking) {
    return 0;
  }
  if (CFStringHasPrefix(theString, @"com.apple.omniSearch")
    || CFStringHasPrefix(theString, @"com.apple.intelligenceflow"))
  {
    return 1;
  }
  return CFStringHasPrefix(theString, @"com.apple.ondeviceeval") != 0;
}

uint64_t ___Z29SPQueryKindIsSearchToolSearchPK10__CFString_block_invoke()
{
  SPQueryKindIsSearchToolSearch(__CFString const*)::isSearchToolRanking = _os_feature_enabled_impl();
  uint64_t result = _os_feature_enabled_impl();
  SPQueryKindIsSearchToolSearch(__CFString const*)::isSearchToolDebugMode = result;
  return result;
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

void std::vector<std::string>::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_264704408, MEMORY[0x263F8C060]);
}

void sub_224D8C138(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C388] + 16);
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a2);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  CFStringRef v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x263F8C208], MEMORY[0x263F8C090]);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v9;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 24;
  }
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      int v5 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        int v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_264704410, MEMORY[0x263F8C068]);
}

void sub_224D8C3F4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
  return result;
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    int v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    int v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  size_t v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    uint64_t v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    size_t v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

BOOL QP::RemindersParserFormatter::isValid(uint64_t a1, void **a2)
{
  uint64_t v2 = *a2;
  return *a2 && *v2 && v2[5] != 0;
}

uint64_t QP::RemindersParserFormatter::setParse(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (std::__shared_weak_count *)a2[1];
  uint64_t v5 = *a2;
  std::string::size_type v6 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = QP::Formatter::setParse(a1, (uint64_t)&v5);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return v3;
}

void sub_224D8C628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void QP::RemindersParserFormatter::updateParseWithDateAttribute(QP::Formatter *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a3 + 8);
  size_t v4 = *(CFRange **)a3;
  uint64_t v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  QP::Formatter::updateParseWithDateAttribute(a1, a2, &v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_224D8C690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void QP::RemindersParserFormatter::updateParseWithAttribute(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a3 + 8);
  size_t v4 = *(CFRange **)a3;
  uint64_t v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  QP::Formatter::updateParseWithAttribute(a1, a2, &v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_224D8C6F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void QP::RemindersParserFormatter::~RemindersParserFormatter(QP::RemindersParserFormatter *this)
{
  QP::Formatter::~Formatter(this);
  JUMPOUT(0x22A623E20);
}

void QP::Formatter::~Formatter(QP::Formatter *this)
{
  *(void *)this = &unk_26D831A18;
  nlp::CFScopedPtr<__CFAttributedString *>::reset((const void **)this + 9, 0);
  nlp::CFScopedPtr<__CFDictionary *>::reset((const void **)this + 8, 0);
  nlp::CFScopedPtr<__CFDictionary *>::reset((const void **)this + 7, 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)this + 6, 0);
  std::unique_ptr<QP::DateFormatter>::reset[abi:ne180100]((const void ***)this + 5, 0);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

{
  uint64_t vars8;

  QP::Formatter::~Formatter(this);
  JUMPOUT(0x22A623E20);
}

void nlp::CFScopedPtr<__CFAttributedString *>::reset(const void **a1, const void *a2)
{
  size_t v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

void nlp::CFScopedPtr<__CFDictionary *>::reset(const void **a1, const void *a2)
{
  size_t v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

void nlp::CFScopedPtr<__CFString const*>::reset(const void **a1, const void *a2)
{
  size_t v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

const void **std::unique_ptr<QP::DateFormatter>::reset[abi:ne180100](const void ***a1, const void **a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    QP::DateFormatter::~DateFormatter(result);
    JUMPOUT(0x22A623E20);
  }
  return result;
}

void QP::DateFormatter::~DateFormatter(const void **this)
{
  nlp::CFScopedPtr<__CFDictionary const*>::reset(this + 7, 0);
  nlp::CFScopedPtr<__CFDateFormatter *>::reset(this + 6, 0);
  nlp::CFScopedPtr<__CFDateFormatter *>::reset(this + 5, 0);
  nlp::CFScopedPtr<__CFDateFormatter *>::reset(this + 4, 0);
  uint64_t v2 = (std::__shared_weak_count *)this[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)this[1];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void nlp::CFScopedPtr<__CFDictionary const*>::reset(const void **a1, const void *a2)
{
  size_t v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

void nlp::CFScopedPtr<__CFDateFormatter *>::reset(const void **a1, const void *a2)
{
  size_t v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

void QP::GeoReference::load(QP::GeoReference *this, const __CFURL *a2)
{
  if (a2)
  {
    CFURLRef PathComponent = CFURLCreateCopyDeletingLastPathComponent((CFAllocatorRef)*MEMORY[0x263EFFB08], a2);
    *(void *)this = SIGeoIndexCreateWithOptions();
    if (PathComponent) {
      CFRelease(PathComponent);
    }
  }
}

void sub_224D8CA10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nlp::CFScopedPtr<__CFURL const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

QP::GeoReference *QP::GeoReference::GeoReference(QP::GeoReference *this, const __CFURL *a2)
{
  *(void *)this = 0;
  QP::GeoReference::load(this, a2);
  return this;
}

void QP::GeoReference::~GeoReference(QP::GeoReference *this)
{
  if (*(void *)this) {
    SIGeoIndexRelease();
  }
}

void QP::GeoReference::lookup(QP::GeoReference *this, CFStringRef theString, const __CFLocale *a3, double *a4, double *a5, double *a6, double *a7)
{
  if (theString)
  {
    if (*(void *)this)
    {
      CFIndex Length = CFStringGetLength(theString);
      if (a7)
      {
        if (a6 && a5 && a4 && Length)
        {
          CFMutableStringRef MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, theString);
          v15.CFIndex length = CFStringGetLength(MutableCopy);
          v15.CFIndex location = 0;
          CFStringFindAndReplace(MutableCopy, @"-", @" ", v15, 0);
          v16.CFIndex length = CFStringGetLength(MutableCopy);
          v16.CFIndex location = 0;
          CFStringFindAndReplace(MutableCopy, @".", &stru_26D832058, v16, 0);
          CFStringLowercase(MutableCopy, a3);
          SIGeoIndexEnumerateGeoIDForString();
          if (MutableCopy) {
            CFRelease(MutableCopy);
          }
        }
      }
    }
  }
}

void sub_224D8CC00(_Unwind_Exception *a1)
{
  nlp::CFScopedPtr<__CFString *>::reset((const void **)(v1 - 72), 0);
  _Unwind_Resume(a1);
}

double ___ZN2QP12GeoReference6lookupEPK10__CFStringPK10__CFLocalePdS7_S7_S7__block_invoke(void **a1, uint64_t a2, unsigned char *a3)
{
  if (SIGeoIndexLookupEntry())
  {
    *a1[6] = 0;
    *a1[7] = 0;
    *a1[8] = 0;
    double result = 0.0;
    *a1[9] = 0;
    *a3 = 1;
  }
  return result;
}

void nlp::CFScopedPtr<__CFURL const*>::reset(const void **a1, const void *a2)
{
  size_t v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

void nlp::CFScopedPtr<__CFString *>::reset(const void **a1, const void *a2)
{
  size_t v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

id startEmbeddingService()
{
  id v0 = (id)[MEMORY[0x263F78CD8] sharedInstance];
  return (id)[MEMORY[0x263F78CD0] sharedInstance];
}

CFAttributedStringRef hasAttributes(const __CFAttributedString *result)
{
  if (result)
  {
    CFAttributedStringRef v1 = result;
    double result = (const __CFAttributedString *)CFAttributedStringGetLength(result);
    if (result)
    {
      v2.CFIndex location = 0;
      v2.CFIndex length = (CFIndex)result;
      double result = CFAttributedStringGetAttributes(v1, 0, &v2);
      if (result) {
        return (const __CFAttributedString *)(CFDictionaryGetCount(result) > 0);
      }
    }
  }
  return result;
}

uint64_t languageSupportedForEmbedding(const __CFDictionary *a1)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  if (!systemListenerIsSemanticSearchEnabled()) {
    return 0;
  }
  uint64_t valuePtr = -1;
  if (!a1)
  {
    if (embeddingGenerationLogger(void)::token != -1) {
      dispatch_once(&embeddingGenerationLogger(void)::token, &__block_literal_global_1);
    }
    size_t v4 = embeddingGenerationLogger(void)::log;
    if (os_log_type_enabled((os_log_t)embeddingGenerationLogger(void)::log, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134217984;
      uint64_t v37 = -1;
      _os_log_impl(&dword_224D85000, v4, OS_LOG_TYPE_INFO, "[QPNLU][qid=%ld] parse option information that includes both keyboard language and locale language is missing. Semantic search is not supported", buf, 0xCu);
    }
    return 0;
  }
  if (CFDictionaryContainsKey(a1, @"queryID"))
  {
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a1, @"queryID");
    CFNumberGetValue(Value, kCFNumberCFIndexType, &valuePtr);
    if (valuePtr == -1) {
      return 0;
    }
  }
  if (CFDictionaryContainsKey(a1, @"keyboardLanguage"))
  {
    uint64_t v3 = CFDictionaryGetValue(a1, @"keyboardLanguage");
  }
  else
  {
    uint64_t v3 = 0;
  }
  if (CFDictionaryContainsKey(a1, @"localeLanguage"))
  {
    uint64_t v5 = CFDictionaryGetValue(a1, @"localeLanguage");
  }
  else
  {
    uint64_t v5 = 0;
  }
  if (![v3 length] && !objc_msgSend(v5, "length"))
  {
    if (embeddingGenerationLogger(void)::token != -1) {
      dispatch_once(&embeddingGenerationLogger(void)::token, &__block_literal_global_1);
    }
    long long v24 = embeddingGenerationLogger(void)::log;
    if (os_log_type_enabled((os_log_t)embeddingGenerationLogger(void)::log, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134217984;
      uint64_t v37 = valuePtr;
      _os_log_impl(&dword_224D85000, v24, OS_LOG_TYPE_INFO, "[QPNLU][qid=%ld] Both keyboard language and locale are missing. Semantic search is not supported", buf, 0xCu);
    }

    return 0;
  }
  if ([v3 length])
  {
    uint64_t v6 = [MEMORY[0x263EFF960] canonicalLanguageIdentifierFromString:v3];

    uint64_t v3 = (void *)v6;
  }
  if ([v5 length])
  {
    uint64_t v7 = [MEMORY[0x263EFF960] canonicalLanguageIdentifierFromString:v5];

    uint64_t v5 = (void *)v7;
  }
  uint64_t v8 = systemListenerGetSupportedSemanticLanguages();
  if ([v8 count])
  {
    if ([v3 length])
    {
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      id v9 = v8;
      uint64_t v10 = [v9 countByEnumeratingWithState:&v31 objects:v43 count:16];
      if (v10)
      {
        uint64_t v11 = *(void *)v32;
        while (2)
        {
          for (uint64_t i = 0; i != v10; ++i)
          {
            if (*(void *)v32 != v11) {
              objc_enumerationMutation(v9);
            }
            if ([v3 hasPrefix:*(void *)(*((void *)&v31 + 1) + 8 * i)])
            {
              if (embeddingGenerationLogger(void)::token != -1) {
                dispatch_once(&embeddingGenerationLogger(void)::token, &__block_literal_global_1);
              }
              long long v23 = embeddingGenerationLogger(void)::log;
              if (os_log_type_enabled((os_log_t)embeddingGenerationLogger(void)::log, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 134218242;
                uint64_t v37 = valuePtr;
                __int16 v38 = 2112;
                v39 = v3;
                _os_log_impl(&dword_224D85000, v23, OS_LOG_TYPE_INFO, "[QPNLU][qid=%ld] Semantic search is supported for keyboard language \"%@\"", buf, 0x16u);
              }

LABEL_75:
              uint64_t v21 = 1;
              goto LABEL_76;
            }
          }
          uint64_t v10 = [v9 countByEnumeratingWithState:&v31 objects:v43 count:16];
          if (v10) {
            continue;
          }
          break;
        }
      }

      if (embeddingGenerationLogger(void)::token != -1) {
        dispatch_once(&embeddingGenerationLogger(void)::token, &__block_literal_global_1);
      }
      char v13 = embeddingGenerationLogger(void)::log;
      if (os_log_type_enabled((os_log_t)embeddingGenerationLogger(void)::log, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134218242;
        uint64_t v37 = valuePtr;
        __int16 v38 = 2112;
        v39 = v3;
        _os_log_impl(&dword_224D85000, v13, OS_LOG_TYPE_INFO, "[QPNLU][qid=%ld] Semantic search is not supported for keyboard language \"%@\"", buf, 0x16u);
      }
    }
    if ([v5 length])
    {
      if (embeddingGenerationLogger(void)::token != -1) {
        dispatch_once(&embeddingGenerationLogger(void)::token, &__block_literal_global_1);
      }
      long long v14 = embeddingGenerationLogger(void)::log;
      if (os_log_type_enabled((os_log_t)embeddingGenerationLogger(void)::log, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        uint64_t v37 = valuePtr;
        _os_log_impl(&dword_224D85000, v14, OS_LOG_TYPE_INFO, "[QPNLU][qid=%ld] Keyboard language is missing or not supported. Relying on locale to determine if semantic search is supported", buf, 0xCu);
      }
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      id v15 = v8;
      uint64_t v16 = [v15 countByEnumeratingWithState:&v27 objects:v42 count:16];
      if (v16)
      {
        uint64_t v17 = *(void *)v28;
        while (2)
        {
          for (uint64_t j = 0; j != v16; ++j)
          {
            if (*(void *)v28 != v17) {
              objc_enumerationMutation(v15);
            }
            if (objc_msgSend(v5, "hasPrefix:", *(void *)(*((void *)&v27 + 1) + 8 * j), (void)v27))
            {
              long long v25 = embeddingGenerationLogger();
              if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 134218242;
                uint64_t v37 = valuePtr;
                __int16 v38 = 2112;
                v39 = v5;
                _os_log_impl(&dword_224D85000, v25, OS_LOG_TYPE_INFO, "[QPNLU][qid=%ld] Semantic search is supported for locale \"%@\"", buf, 0x16u);
              }

              goto LABEL_75;
            }
          }
          uint64_t v16 = [v15 countByEnumeratingWithState:&v27 objects:v42 count:16];
          if (v16) {
            continue;
          }
          break;
        }
      }

      if (embeddingGenerationLogger(void)::token != -1) {
        dispatch_once(&embeddingGenerationLogger(void)::token, &__block_literal_global_1);
      }
      unsigned int v19 = embeddingGenerationLogger(void)::log;
      if (os_log_type_enabled((os_log_t)embeddingGenerationLogger(void)::log, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134218242;
        uint64_t v37 = valuePtr;
        __int16 v38 = 2112;
        v39 = v5;
        _os_log_impl(&dword_224D85000, v19, OS_LOG_TYPE_INFO, "[QPNLU][qid=%ld] Semantic search is not supported for locale language \"%@\"", buf, 0x16u);
      }
    }
    if (embeddingGenerationLogger(void)::token != -1) {
      dispatch_once(&embeddingGenerationLogger(void)::token, &__block_literal_global_1);
    }
    unsigned int v20 = embeddingGenerationLogger(void)::log;
    if (os_log_type_enabled((os_log_t)embeddingGenerationLogger(void)::log, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134218498;
      uint64_t v37 = valuePtr;
      __int16 v38 = 2112;
      v39 = v3;
      __int16 v40 = 2112;
      v41 = v5;
      _os_log_impl(&dword_224D85000, v20, OS_LOG_TYPE_INFO, "[QPNLU][qid=%ld] Semantic search is not supported for this keyboard(\"%@\") and locale languge(\"%@\")", buf, 0x20u);
    }
    uint64_t v21 = 0;
  }
  else
  {
    if (embeddingGenerationLogger(void)::token != -1) {
      dispatch_once(&embeddingGenerationLogger(void)::token, &__block_literal_global_1);
    }
    long long v22 = embeddingGenerationLogger(void)::log;
    uint64_t v21 = 1;
    if (os_log_type_enabled((os_log_t)embeddingGenerationLogger(void)::log, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134217984;
      uint64_t v37 = valuePtr;
      _os_log_impl(&dword_224D85000, v22, OS_LOG_TYPE_INFO, "[QPNLU][qid=%ld] Missing resources for supported languages, skipping language check", buf, 0xCu);
    }
  }
LABEL_76:

  return v21;
}

void sub_224D8D53C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id embeddingGenerationLogger(void)
{
  if (embeddingGenerationLogger(void)::token != -1) {
    dispatch_once(&embeddingGenerationLogger(void)::token, &__block_literal_global_1);
  }
  id v0 = (void *)embeddingGenerationLogger(void)::log;
  return v0;
}

id copyEmbeddingDataForInputs(CFArrayRef theArray, const __CFArray *a2, CFDictionaryRef theDict, const __CFBoolean *a4, void *a5)
{
  uint64_t v86 = *MEMORY[0x263EF8340];
  uint64_t valuePtr = -1;
  if (theDict
    && CFDictionaryContainsKey(theDict, @"queryID")
    && (CFNumberRef v7 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"queryID"),
        CFNumberGetValue(v7, kCFNumberCFIndexType, &valuePtr),
        valuePtr == -1))
  {
    if (embeddingGenerationLogger(void)::token != -1) {
      dispatch_once(&embeddingGenerationLogger(void)::token, &__block_literal_global_1);
    }
    if (os_log_type_enabled((os_log_t)embeddingGenerationLogger(void)::log, OS_LOG_TYPE_ERROR)) {
      copyEmbeddingDataForInputs_cold_6();
    }
  }
  else if (theArray && a2)
  {
    CFIndex Count = CFArrayGetCount(theArray);
    CFIndex v9 = CFArrayGetCount(a2);
    CFIndex v10 = v9;
    if (Count && v9 && Count == v9)
    {
      v69 = (void *)[objc_alloc(MEMORY[0x263EFF980]) initWithCapacity:Count];
      if (Count >= 1)
      {
        CFIndex v11 = 0;
        while (1)
        {
          CFStringRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(theArray, v11);
          char v13 = ValueAtIndex;
          if (!ValueAtIndex)
          {
            if (embeddingGenerationLogger(void)::token != -1) {
              dispatch_once(&embeddingGenerationLogger(void)::token, &__block_literal_global_1);
            }
            uint64_t v17 = embeddingGenerationLogger(void)::log;
            if (os_log_type_enabled((os_log_t)embeddingGenerationLogger(void)::log, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 134218496;
              uint64_t v81 = valuePtr;
              __int16 v82 = 2048;
              dispatch_time_t v83 = v11;
              __int16 v84 = 2048;
              CFIndex v85 = Count;
              _os_log_impl(&dword_224D85000, v17, OS_LOG_TYPE_INFO, "[QPNLU][qid=%ld] Skipping embedding generation for nil embedding input [%ld/%ld]", buf, 0x20u);
            }
            goto LABEL_32;
          }
          CFTypeID v14 = CFGetTypeID(ValueAtIndex);
          if (v14 == CFStringGetTypeID()) {
            break;
          }
          CFTypeID v18 = CFGetTypeID(v13);
          if (v18 == CFAttributedStringGetTypeID())
          {
            if (hasAttributes((const __CFAttributedString *)v13))
            {
              uint64_t v16 = (void *)[objc_alloc(MEMORY[0x263F78CE0]) initWithAttributedString:v13];
              goto LABEL_29;
            }
            id v15 = [v13 string];
            if (![v15 length])
            {
              if (embeddingGenerationLogger(void)::token != -1) {
                dispatch_once(&embeddingGenerationLogger(void)::token, &__block_literal_global_1);
              }
              unsigned int v19 = embeddingGenerationLogger(void)::log;
              if (os_log_type_enabled((os_log_t)embeddingGenerationLogger(void)::log, OS_LOG_TYPE_INFO))
              {
LABEL_26:
                *(_DWORD *)buf = 134218496;
                uint64_t v81 = valuePtr;
                __int16 v82 = 2048;
                dispatch_time_t v83 = v11;
                __int16 v84 = 2048;
                CFIndex v85 = Count;
                _os_log_impl(&dword_224D85000, v19, OS_LOG_TYPE_INFO, "[QPNLU][qid=%ld] Skipping embedding generation for empty embedding input [%ld/%ld]", buf, 0x20u);
              }
LABEL_27:
              uint64_t v16 = 0;
LABEL_28:

LABEL_29:
              if (v16) {
                [v69 addObject:v16];
              }
              goto LABEL_31;
            }
LABEL_14:
            uint64_t v16 = (void *)[objc_alloc(MEMORY[0x263F78CE0]) initWithText:v15];
            goto LABEL_28;
          }
          uint64_t v16 = 0;
LABEL_31:

LABEL_32:
          if (Count == ++v11) {
            goto LABEL_47;
          }
        }
        id v15 = v13;
        if (![v15 length])
        {
          if (embeddingGenerationLogger(void)::token != -1) {
            dispatch_once(&embeddingGenerationLogger(void)::token, &__block_literal_global_1);
          }
          unsigned int v19 = embeddingGenerationLogger(void)::log;
          if (os_log_type_enabled((os_log_t)embeddingGenerationLogger(void)::log, OS_LOG_TYPE_INFO)) {
            goto LABEL_26;
          }
          goto LABEL_27;
        }
        goto LABEL_14;
      }
LABEL_47:
      if (![v69 count])
      {
        if (embeddingGenerationLogger(void)::token != -1) {
          dispatch_once(&embeddingGenerationLogger(void)::token, &__block_literal_global_1);
        }
        if (os_log_type_enabled((os_log_t)embeddingGenerationLogger(void)::log, OS_LOG_TYPE_ERROR)) {
          copyEmbeddingDataForInputs_cold_1();
        }
        id v23 = 0;
        goto LABEL_136;
      }
      unsigned __int8 v75 = 0;
      if (theDict)
      {
        if (CFDictionaryContainsKey(theDict, @"extendedContext"))
        {
          CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"extendedContext");
          CFNumberGetValue(Value, kCFNumberCFIndexType, &v75);
        }
        uint64_t v74 = 100;
        if (CFDictionaryContainsKey(theDict, @"kMDQueryOptionEmbeddingGenerationTimeout"))
        {
          CFNumberRef v22 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"kMDQueryOptionEmbeddingGenerationTimeout");
          if (v22) {
            CFNumberGetValue(v22, kCFNumberCFIndexType, &v74);
          }
        }
      }
      else
      {
        uint64_t v74 = 100;
      }
      if (a4 && CFBooleanGetValue(a4))
      {
        long long v24 = [MEMORY[0x263EFFA40] standardUserDefaults];
        long long v25 = [v24 valueForKey:@"UseCLIPSafetyModel"];

        if (v25 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
        {
          uint64_t v26 = [v25 BOOLValue];
          if (embeddingGenerationLogger(void)::token != -1) {
            dispatch_once(&embeddingGenerationLogger(void)::token, &__block_literal_global_1);
          }
          long long v27 = embeddingGenerationLogger(void)::log;
          if (os_log_type_enabled((os_log_t)embeddingGenerationLogger(void)::log, OS_LOG_TYPE_INFO))
          {
            long long v28 = "FALSE";
            if (v26) {
              long long v28 = "TRUE";
            }
            *(_DWORD *)buf = 136315138;
            uint64_t v81 = (uint64_t)v28;
            _os_log_impl(&dword_224D85000, v27, OS_LOG_TYPE_INFO, "**Info** User Supplied value for Default UseCLIPSafetyModel : %s", buf, 0xCu);
          }
        }
        else
        {
          uint64_t v26 = 1;
        }
      }
      else
      {
        uint64_t v26 = 0;
      }
      dispatch_time_t v64 = dispatch_time(0, 0);
      long long v29 = [MEMORY[0x263F78CD0] sharedInstance];
      id v73 = 0;
      long long v30 = [v29 generateEmbeddingForTextInputs:v69 extendedContextLength:v75 queryID:valuePtr timeout:v74 useCLIPSafety:v26 workCost:0 error:&v73];
      id v68 = v73;

      if (v68)
      {
        *a5 = v68;
      }
      else
      {
        if ([v30 count] == Count)
        {
          CFBooleanRef BOOLeana = a2;
          CFArrayRef theArrayb = (CFArrayRef)[objc_alloc(MEMORY[0x263EFF9A0]) initWithCapacity:Count];
          for (unint64_t i = 0; i < [v30 count]; ++i)
          {
            long long v32 = [v30 objectAtIndexedSubscript:i];
            long long v33 = [v32 embeddingData];
            BOOL v34 = v33 == 0;

            if (v34)
            {
              if (embeddingGenerationLogger(void)::token != -1) {
                dispatch_once(&embeddingGenerationLogger(void)::token, &__block_literal_global_1);
              }
              v53 = embeddingGenerationLogger(void)::log;
              if (os_log_type_enabled((os_log_t)embeddingGenerationLogger(void)::log, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                uint64_t v81 = valuePtr;
                __int16 v82 = 2048;
                dispatch_time_t v83 = i;
              }
            }
            else
            {
              uint64_t v35 = [v32 elementType];
              if (v35 == 2) {
                unsigned int v36 = 0;
              }
              else {
                unsigned int v36 = 3;
              }
              if (v35 == 1) {
                uint64_t v37 = 1;
              }
              else {
                uint64_t v37 = v36;
              }
              uint64_t v38 = [v32 elementCount];
              if (v38 == 768) {
                unsigned int v39 = 2;
              }
              else {
                unsigned int v39 = 3;
              }
              if (v38 == 512) {
                unsigned int v39 = 1;
              }
              if (v38 == 256) {
                uint64_t v40 = 0;
              }
              else {
                uint64_t v40 = v39;
              }
              id v41 = objc_alloc(MEMORY[0x263F02B40]);
              unsigned __int16 v42 = [v32 version];
              v43 = [v32 embeddingData];
              v79 = v43;
              uint64_t v44 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v79 count:1];
              v45 = (void *)[v41 initWithFormat:v37 dimension:v40 version:v42 vectors:v44];

              v77[0] = @"vec_scale";
              v46 = NSNumber;
              [v32 scale];
              v47 = objc_msgSend(v46, "numberWithFloat:");
              v77[1] = @"vec_bias";
              v78[0] = v47;
              v48 = NSNumber;
              [v32 bias];
              v49 = objc_msgSend(v48, "numberWithFloat:");
              v78[1] = v49;
              v50 = [NSDictionary dictionaryWithObjects:v78 forKeys:v77 count:2];
              [v45 setProperties:v50];

              v51 = [v45 encodedData];
              if (v51)
              {
                v52 = [(__CFBoolean *)BOOLeana objectAtIndexedSubscript:i];
                [(__CFArray *)theArrayb setObject:v51 forKeyedSubscript:v52];
              }
              else
              {
                if (embeddingGenerationLogger(void)::token != -1) {
                  dispatch_once(&embeddingGenerationLogger(void)::token, &__block_literal_global_1);
                }
                v54 = embeddingGenerationLogger(void)::log;
                if (os_log_type_enabled((os_log_t)embeddingGenerationLogger(void)::log, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134218240;
                  uint64_t v81 = valuePtr;
                  __int16 v82 = 2048;
                  dispatch_time_t v83 = i;
                }
              }
            }
          }
          id v72 = 0;
          v55 = [MEMORY[0x263F08910] archivedDataWithRootObject:theArrayb requiringSecureCoding:1 error:&v72];
          id v56 = v72;
          if (v56)
          {
            v57 = embeddingGenerationLogger();
            if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR)) {
              copyEmbeddingDataForInputs_cold_2();
            }

            id v23 = 0;
          }
          else
          {
            dispatch_time_t v58 = dispatch_time(0, 0);
            v59 = embeddingGenerationLogger();
            if (os_log_type_enabled(v59, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 134218240;
              uint64_t v81 = valuePtr;
              __int16 v82 = 2048;
              dispatch_time_t v83 = v58 - v64;
              _os_log_impl(&dword_224D85000, v59, OS_LOG_TYPE_INFO, "[QPNLU][qid=%ld] Generated embedding data (time=%.2lldns)", buf, 0x16u);
            }

            id v23 = v55;
          }

          if (!v56) {
            goto LABEL_135;
          }
          goto LABEL_134;
        }
        if (!a5)
        {
          if ([v30 count] == Count)
          {
            if (embeddingGenerationLogger(void)::token != -1) {
              dispatch_once(&embeddingGenerationLogger(void)::token, &__block_literal_global_1);
            }
            if (os_log_type_enabled((os_log_t)embeddingGenerationLogger(void)::log, OS_LOG_TYPE_ERROR)) {
              copyEmbeddingDataForInputs_cold_3();
            }
          }
          else
          {
            if (embeddingGenerationLogger(void)::token != -1) {
              dispatch_once(&embeddingGenerationLogger(void)::token, &__block_literal_global_1);
            }
            v60 = (id)embeddingGenerationLogger(void)::log;
            if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
            {
              uint64_t v62 = valuePtr;
              uint64_t v63 = [v30 count];
              *(_DWORD *)buf = 134218496;
              uint64_t v81 = v62;
              __int16 v82 = 2048;
              dispatch_time_t v83 = v63;
              __int16 v84 = 2048;
              CFIndex v85 = Count;
              _os_log_error_impl(&dword_224D85000, v60, OS_LOG_TYPE_ERROR, "[QPNLU][qid=%ld] Embeddings count (%lu) does not match the inputs count (%lu)", buf, 0x20u);
            }
          }
          goto LABEL_134;
        }
      }
      if (embeddingGenerationLogger(void)::token != -1) {
        dispatch_once(&embeddingGenerationLogger(void)::token, &__block_literal_global_1);
      }
      if (os_log_type_enabled((os_log_t)embeddingGenerationLogger(void)::log, OS_LOG_TYPE_ERROR)) {
        copyEmbeddingDataForInputs_cold_4();
      }
LABEL_134:
      id v23 = 0;
LABEL_135:

LABEL_136:
      return v23;
    }
    if (embeddingGenerationLogger(void)::token != -1) {
      dispatch_once(&embeddingGenerationLogger(void)::token, &__block_literal_global_1);
    }
    unsigned int v20 = embeddingGenerationLogger(void)::log;
    if (os_log_type_enabled((os_log_t)embeddingGenerationLogger(void)::log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218496;
      uint64_t v81 = valuePtr;
      __int16 v82 = 2048;
      dispatch_time_t v83 = Count;
      __int16 v84 = 2048;
      CFIndex v85 = v10;
      _os_log_error_impl(&dword_224D85000, v20, OS_LOG_TYPE_ERROR, "[QPNLU][qid=%ld] Received empty query embedding inputs (count=%ld) or keys (count=%ld); Not generating any query embeddings",
        buf,
        0x20u);
    }
  }
  else
  {
    if (embeddingGenerationLogger(void)::token != -1) {
      dispatch_once(&embeddingGenerationLogger(void)::token, &__block_literal_global_1);
    }
    if (os_log_type_enabled((os_log_t)embeddingGenerationLogger(void)::log, OS_LOG_TYPE_ERROR)) {
      copyEmbeddingDataForInputs_cold_5();
    }
  }
  return 0;
}

void sub_224D8E2CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void embeddingGeneratorPreheatAsync()
{
  id v0 = [MEMORY[0x263EFF910] now];
  CFAttributedStringRef v1 = [MEMORY[0x263F78CD0] sharedInstance];
  v3[0] = MEMORY[0x263EF8330];
  v3[1] = 3221225472;
  v3[2] = __embeddingGeneratorPreheatAsync_block_invoke;
  v3[3] = &unk_264704F88;
  id v2 = v0;
  id v4 = v2;
  [v1 preheatWithCompletionHandler:v3];
}

void sub_224D8E4D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void __embeddingGeneratorPreheatAsync_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  id v3 = a2;
  if (v3)
  {
    if (embeddingGenerationLogger(void)::token != -1) {
      dispatch_once(&embeddingGenerationLogger(void)::token, &__block_literal_global_1);
    }
    id v4 = embeddingGenerationLogger(void)::log;
    if (os_log_type_enabled((os_log_t)embeddingGenerationLogger(void)::log, OS_LOG_TYPE_ERROR)) {
      __embeddingGeneratorPreheatAsync_block_invoke_cold_1((uint64_t)v3, v4, v5, v6, v7, v8, v9, v10);
    }
  }
  else
  {
    if (embeddingGenerationLogger(void)::token != -1) {
      dispatch_once(&embeddingGenerationLogger(void)::token, &__block_literal_global_1);
    }
    CFIndex v11 = (id)embeddingGenerationLogger(void)::log;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      CFLocaleRef v12 = [MEMORY[0x263EFF910] now];
      [v12 timeIntervalSinceDate:*(void *)(a1 + 32)];
      int v14 = 134217984;
      double v15 = v13 * 1000.0;
      _os_log_impl(&dword_224D85000, v11, OS_LOG_TYPE_INFO, "Embedding preheat succeeded (time=%.2fms)", (uint8_t *)&v14, 0xCu);
    }
  }
}

void sub_224D8E650(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void embeddingGeneratorPreheatSync()
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  dispatch_time_t v0 = dispatch_time(0, 0);
  CFAttributedStringRef v1 = dispatch_group_create();
  uint64_t v15 = 0;
  uint64_t v16 = &v15;
  uint64_t v17 = 0x3032000000;
  CFTypeID v18 = __Block_byref_object_copy_;
  unsigned int v19 = __Block_byref_object_dispose_;
  id v20 = 0;
  uint64_t v11 = 0;
  CFLocaleRef v12 = &v11;
  uint64_t v13 = 0x2020000000;
  uint64_t v14 = 0;
  dispatch_group_enter(v1);
  id v2 = [MEMORY[0x263F78CD0] sharedInstance];
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 3221225472;
  v6[2] = __embeddingGeneratorPreheatSync_block_invoke;
  v6[3] = &unk_264704FB0;
  uint64_t v8 = &v15;
  uint64_t v9 = &v11;
  dispatch_time_t v10 = v0;
  id v3 = v1;
  uint64_t v7 = v3;
  [v2 preheatWithCompletionHandler:v6];

  dispatch_group_wait(v3, 0xFFFFFFFFFFFFFFFFLL);
  if (v16[5])
  {
    if (embeddingGenerationLogger(void)::token != -1) {
      dispatch_once(&embeddingGenerationLogger(void)::token, &__block_literal_global_1);
    }
    if (os_log_type_enabled((os_log_t)embeddingGenerationLogger(void)::log, OS_LOG_TYPE_ERROR)) {
      embeddingGeneratorPreheatSync_cold_1();
    }
  }
  else
  {
    if (embeddingGenerationLogger(void)::token != -1) {
      dispatch_once(&embeddingGenerationLogger(void)::token, &__block_literal_global_1);
    }
    id v4 = embeddingGenerationLogger(void)::log;
    if (os_log_type_enabled((os_log_t)embeddingGenerationLogger(void)::log, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = v12[3];
      *(_DWORD *)buf = 134217984;
      uint64_t v22 = v5;
      _os_log_impl(&dword_224D85000, v4, OS_LOG_TYPE_INFO, "Embedding preheat succeeded (time=time=%.2lldns)", buf, 0xCu);
    }
  }

  _Block_object_dispose(&v11, 8);
  _Block_object_dispose(&v15, 8);
}

void sub_224D8E8C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  _Block_object_dispose(&a17, 8);
  _Block_object_dispose(&a21, 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

void __embeddingGeneratorPreheatSync_block_invoke(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  }
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = dispatch_time(0, 0) - *(void *)(a1 + 56);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void embeddingGeneratorCoolDown()
{
  id v0 = [MEMORY[0x263F78CD0] sharedInstance];
  [v0 clear];

  id v1 = [MEMORY[0x263F78CD8] sharedInstance];
  [v1 clear];
}

void sub_224D8EA20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void embeddingGeneratorCancelWithQueryID(uint64_t a1)
{
  id v2 = [MEMORY[0x263F78CD0] sharedInstance];
  [v2 cancelQueryID:a1];
}

void sub_224D8EA90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZL25embeddingGenerationLoggerv_block_invoke()
{
  id v0 = _nlpLoggingSubsystem();
  os_log_t v1 = os_log_create(v0, "QPEmbeddingGeneration");
  id v2 = (void *)embeddingGenerationLogger(void)::log;
  embeddingGenerationLogger(void)::log = (uint64_t)v1;
}

void sub_224D8EBE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_224D8EC78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void localeChangeCallback(__CFNotificationCenter *a1, void *a2, const __CFString *a3, const void *a4, const __CFDictionary *a5)
{
  id v5 = a2;
  if (v5) {
    [v5 updateLocale];
  }
}

void sub_224D8ED68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_224D8F074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id localeKeyForLocale(NSLocale *a1)
{
  os_log_t v1 = a1;
  id v2 = [(NSLocale *)v1 localeIdentifier];
  uint64_t LanguageIDForIdentifier = SILanguagesGetLanguageIDForIdentifier();

  id v4 = [NSNumber numberWithUnsignedInt:LanguageIDForIdentifier];
  id v5 = [v4 stringValue];

  return v5;
}

void sub_224D8F118(_Unwind_Exception *a1)
{
  id v3 = v2;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
}

void sub_224D8F928(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_224D8F9D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_224D8FC0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_224D90118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_224D90328(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_224D907E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_224D9092C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_224D909C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)SystemListener;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

CFURLRef systemListenerCopyResourceFromBundleWithName(CFStringRef resourceName, CFStringRef resourceType, CFStringRef subDirName, CFBundleRef bundle)
{
  if (!resourceName || !resourceType) {
    return 0;
  }
  if (!bundle) {
    bundle = CFBundleGetBundleWithIdentifier(@"com.apple.spotlight.QueryParser");
  }
  return CFBundleCopyResourceURL(bundle, resourceName, resourceType, subDirName);
}

void systemListenerEnableAutoUpdatingLocale(int a1)
{
  id v2 = +[SystemListener defaultListener];
  [v2 setAutoUpdatingLocale:a1 != 0];
}

void sub_224D90BE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void systemListenerEnableForceLoadingAssets(int a1)
{
  id v2 = +[SystemListener defaultListener];
  [v2 setForce:a1 != 0];
}

void sub_224D90C54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL systemListenerResourcesAvailableForLocaleAndContentType(uint64_t a1, void *a2)
{
  id v4 = +[SystemListener defaultListener];
  id v5 = [v4 pathsForContentType:a2 locale:a1];
  if ([a2 isEqualToString:@"QueryParser"]) {
    BOOL v6 = (unint64_t)[v5 count] > 2;
  }
  else {
    BOOL v6 = [v5 count] != 0;
  }

  return v6;
}

void sub_224D90D00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void systemListenerEnumerateResourcesWithContentType(uint64_t a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  id v3 = a2;
  CFLocaleRef v12 = +[SystemListener defaultListener];
  [v12 pathsForContentType:a1 locale:0];
  char v18 = 0;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v5 = [v4 countByEnumeratingWithState:&v14 objects:v19 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v15;
LABEL_3:
    uint64_t v7 = 0;
    while (1)
    {
      if (*(void *)v15 != v6) {
        objc_enumerationMutation(v4);
      }
      uint64_t v8 = *(void *)(*((void *)&v14 + 1) + 8 * v7);
      unsigned __int8 v13 = 0;
      uint64_t v9 = [MEMORY[0x263F08850] defaultManager];
      int v10 = [v9 fileExistsAtPath:v8 isDirectory:&v13];

      if (v10)
      {
        uint64_t v11 = [NSURL fileURLWithPath:v8 isDirectory:v13];
        v3[2](v3, v11, &v18);
      }
      if (v18) {
        break;
      }
      if (v5 == ++v7)
      {
        uint64_t v5 = [v4 countByEnumeratingWithState:&v14 objects:v19 count:16];
        if (v5) {
          goto LABEL_3;
        }
        break;
      }
    }
  }
}

void sub_224D90EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void systemListenerSetLocale(uint64_t a1, uint64_t a2)
{
  id v4 = +[SystemListener defaultListener];
  [v4 updateLocaleWithLocale:a1 preferredLanguages:a2 force:1];
}

void sub_224D90F88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *systemListenerGetLocale()
{
  id v0 = +[SystemListener defaultListener];
  os_log_t v1 = [v0 currentLocale];

  return v1;
}

void sub_224D90FE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *systemListenerGetRegion()
{
  id v0 = +[SystemListener defaultListener];
  os_log_t v1 = [v0 currentRegion];

  return v1;
}

void sub_224D9103C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *systemListenerGetPreferredLanguages()
{
  id v0 = +[SystemListener defaultListener];
  os_log_t v1 = [v0 currentPreferredLanguages];

  return v1;
}

void sub_224D91094(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t systemListenerGetFirstWeekDay()
{
  id v0 = +[SystemListener defaultListener];
  uint64_t v1 = [v0 currentFirstWeekDay];

  return v1;
}

void sub_224D910E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *systemListenerGetSupportedSemanticLanguages()
{
  id v0 = +[SystemListener defaultListener];
  uint64_t v1 = [v0 supportedSemanticLanguages];

  return v1;
}

void sub_224D9113C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t systemListenerIsSemanticSearchEnabled()
{
  id v0 = +[SystemListener defaultListener];
  uint64_t v1 = [v0 semanticSearchEnabled];

  return v1;
}

void sub_224D9118C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t systemListenerHasResourceUpdates()
{
  id v0 = +[SystemListener defaultListener];
  uint64_t v1 = [v0 hasUpdatedResources];
  if (v1) {
    [v0 updateResources];
  }

  return v1;
}

void sub_224D911E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t systemListenerHasLocaleUpdates()
{
  id v0 = +[SystemListener defaultListener];
  uint64_t v1 = [v0 hasUpdatedLocale];

  return v1;
}

void sub_224D91238(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t systemListenerHasFirstWeekDayUpdates()
{
  id v0 = +[SystemListener defaultListener];
  uint64_t v1 = [v0 hasUpdatedFirstWeekDay];

  return v1;
}

void sub_224D91288(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL14listenerLoggerv_block_invoke()
{
  id v0 = _nlpLoggingSubsystem();
  os_log_t v1 = os_log_create(v0, "QueryParserListener");
  id v2 = (void *)listenerLogger(void)::log;
  listenerLogger(void)::log = (uint64_t)v1;
}

uint64_t QP::GraphStructureStack::Node::reduce(unsigned __int16 *a1, long long *a2)
{
  uint64_t v4 = *((void *)a1 + 1);
  if (v4 == -1)
  {
    uint64_t v5 = *(void *)a2;
    if (**(unsigned __int16 **)a2 == *a1)
    {
      *(_OWORD *)(a1 + 4) = *(_OWORD *)(v5 + 8);
      *((void *)a1 + 3) = *(void *)(v5 + 24);
      *((_OWORD *)a1 + 2) = *(_OWORD *)(v5 + 32);
      uint64_t v7 = *(void *)(v5 + 48);
      uint64_t v6 = *(void *)(v5 + 56);
      if (v6) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v8 = (std::__shared_weak_count *)*((void *)a1 + 7);
      *((void *)a1 + 6) = v7;
      *((void *)a1 + 7) = v6;
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
      uint64_t v9 = *(void *)a2;
      uint64_t v41 = 0;
      long long v40 = 0uLL;
      std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__init_with_size[abi:ne180100]<std::shared_ptr<QP::GraphStructureStack::Node>*,std::shared_ptr<QP::GraphStructureStack::Node>*>(&v40, *(void **)(v9 + 64), *(void **)(v9 + 72), (uint64_t)(*(void *)(v9 + 72) - *(void *)(v9 + 64)) >> 4);
      std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__vdeallocate((uint64_t *)a1 + 8);
      *((_OWORD *)a1 + 4) = v40;
      *((void *)a1 + 10) = v41;
      uint64_t v41 = 0;
      long long v40 = 0uLL;
      uint64_t v37 = (void **)&v40;
      std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v37);
      a1[44] = *(_WORD *)(*(void *)a2 + 88);
      int v10 = 0;
      goto LABEL_8;
    }
  }
  uint64_t v13 = *((void *)a1 + 6);
  if (!v13) {
    return 0;
  }
  long long v14 = (std::__shared_weak_count *)*((void *)a1 + 7);
  if (!v14)
  {
    if (*(void *)(v13 + 8) == v4)
    {
      long long v17 = 0;
      goto LABEL_21;
    }
    return 0;
  }
  atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v15 = *(void *)(v13 + 8);
  uint64_t v16 = *((void *)a1 + 1);
  std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  if (v15 != v16) {
    return 0;
  }
  uint64_t v13 = *((void *)a1 + 6);
  long long v17 = (std::__shared_weak_count *)*((void *)a1 + 7);
  if (v17)
  {
    char v18 = 0;
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_22;
  }
LABEL_21:
  char v18 = 1;
LABEL_22:
  if (!*(unsigned char *)(v13 + 88))
  {
    BOOL v21 = 0;
    if (v18) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  uint64_t v20 = *((void *)a1 + 6);
  unsigned int v19 = (std::__shared_weak_count *)*((void *)a1 + 7);
  if (v19)
  {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    BOOL v21 = *(void *)(v20 + 8) + 1 == *(void *)(*(void *)a2 + 8);
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    if (v18) {
      goto LABEL_28;
    }
LABEL_27:
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    goto LABEL_28;
  }
  BOOL v21 = *(void *)(v20 + 8) + 1 == *(void *)(*(void *)a2 + 8);
  if ((v18 & 1) == 0) {
    goto LABEL_27;
  }
LABEL_28:
  if (!v21)
  {
    uint64_t v22 = *((void *)a1 + 6);
    uint64_t v23 = (std::__shared_weak_count *)*((void *)a1 + 7);
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (*(unsigned char *)(v22 + 88))
    {
      BOOL v24 = 0;
    }
    else
    {
      uint64_t v26 = *((void *)a1 + 6);
      long long v25 = (std::__shared_weak_count *)*((void *)a1 + 7);
      if (v25)
      {
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
        BOOL v24 = *(void *)(v26 + 8) < *(void *)(*(void *)a2 + 8);
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      }
      else
      {
        BOOL v24 = *(void *)(v26 + 8) < *(void *)(*(void *)a2 + 8);
      }
    }
    if (v23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    }
    if (!v24) {
      return 0;
    }
  }
  long long v28 = (unsigned __int16 **)*((void *)a1 + 8);
  long long v27 = (unsigned __int16 **)*((void *)a1 + 9);
  if (v28 == v27) {
    return 0;
  }
  long long v29 = *(unsigned __int16 **)a2;
  while (1)
  {
    long long v30 = *v28;
    if (**v28 == **(unsigned __int16 **)a2) {
      break;
    }
    v28 += 2;
    if (v28 == v27) {
      return 0;
    }
  }
  uint64_t v31 = *((void *)v30 + 1);
  if (v31 == -1)
  {
    uint64_t v35 = *((void *)a2 + 1);
    if (v35) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v35 + 8), 1uLL, memory_order_relaxed);
    }
    unsigned int v36 = (std::__shared_weak_count *)v28[1];
    *long long v28 = v29;
    v28[1] = (unsigned __int16 *)v35;
    if (v36) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v36);
    }
    int v10 = *((_DWORD *)*v28 + 1);
    goto LABEL_8;
  }
  if (v31 == *((void *)v29 + 3))
  {
    long long v40 = 0uLL;
    uint64_t v41 = 0;
    std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__init_with_size[abi:ne180100]<std::shared_ptr<QP::GraphStructureStack::Node>*,std::shared_ptr<QP::GraphStructureStack::Node>*>(&v40, *((void **)v30 + 8), *((void **)v30 + 9), (uint64_t)(*((void *)v30 + 9) - *((void *)v30 + 8)) >> 4);
    long long v32 = v40;
    long long v33 = *(unsigned __int16 **)a2;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    uint64_t v37 = 0;
    std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__init_with_size[abi:ne180100]<std::shared_ptr<QP::GraphStructureStack::Node>*,std::shared_ptr<QP::GraphStructureStack::Node>*>(&v37, *((void **)v33 + 8), *((void **)v33 + 9), (uint64_t)(*((void *)v33 + 9) - *((void *)v33 + 8)) >> 4);
    uint64_t v34 = v38 - (void)v37;
    unsigned __int16 v42 = &v37;
    std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
    uint64_t v37 = (void **)&v40;
    std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v37);
    int v10 = *((_DWORD *)*v28 + 1);
    if (*((void *)&v32 + 1) - (void)v32 == v34) {
      goto LABEL_8;
    }
  }
  else
  {
    int v10 = *((_DWORD *)v30 + 1);
  }
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::push_back[abi:ne180100]((uint64_t *)a1 + 8, a2);
LABEL_8:
  if (*((unsigned char *)a1 + 95) || *((unsigned char *)a1 + 90) || *((unsigned char *)a1 + 93) || *((unsigned char *)a1 + 92))
  {
    uint64_t v11 = *(unsigned __int16 **)a2;
    *((void *)a1 + 5) = *(void *)(*(void *)a2 + 32) - *((void *)a1 + 4) + *(void *)(*(void *)a2 + 40);
  }
  else
  {
    uint64_t v11 = *(unsigned __int16 **)a2;
  }
  *((void *)a1 + 3) = *((void *)v11 + 1);
  *((_DWORD *)a1 + 1) = v10;
  return 1;
}

void sub_224D91694(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void **std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  double result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    long long v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>>((uint64_t)result, v13);
    uint64_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)uint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__swap_out_circular_buffer(a1, v18);
    uint64_t v9 = (void *)a1[1];
    double result = std::__split_buffer<std::shared_ptr<QP::GraphStructureStack::Node>>::~__split_buffer(v18);
  }
  else
  {
    *uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_224D917B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<QP::GraphStructureStack::Node>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

double QP::GraphStructureStack::GraphStructureStack(uint64_t a1, void *a2)
{
  uint64_t v2 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  double result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = -1;
  *(void *)(a1 + 96) = -1;
  *(void *)(a1 + 104) = -1;
  return result;
}

BOOL QP::GraphStructureStack::nodeFromNodeId@<W0>(QP::ParserGrammar **this@<X0>, float a2@<S0>, CFRange a3@<0:X5, 8:X6>, unsigned int a4@<W1>, char a5@<W2>, uint64_t a6@<X3>, uint64_t a7@<X4>, void *a8@<X8>)
{
  CFIndex length = a3.length;
  CFIndex location = a3.location;
  long long v17 = (char *)operator new(0x78uLL);
  char v18 = v17;
  *((void *)v17 + 1) = 0;
  *((void *)v17 + 2) = 0;
  *(void *)long long v17 = &unk_26D8305F0;
  *((_WORD *)v17 + 12) = a4;
  *((void *)v17 + 4) = a6;
  *((void *)v17 + 5) = a7;
  *((void *)v17 + 6) = a6;
  *((void *)v17 + 7) = location;
  *((void *)v17 + 8) = length;
  v17[119] = 0;
  *(_OWORD *)(v17 + 102) = 0u;
  *(_OWORD *)(v17 + 72) = 0u;
  *(_OWORD *)(v17 + 88) = 0u;
  *a8 = v17 + 24;
  a8[1] = v17;
  v17[112] = a5;
  *((float *)v17 + 7) = a2;
  if ((unsigned __int16)kQPSymbolIdTerminal == a4) {
    v17[112] = 1;
  }
  v17[114] = QP::ParserGrammar::isInferred(*this, a4);
  v18[115] = QP::ParserGrammar::isCombinable(*this, a4);
  v18[116] = QP::ParserGrammar::isParent(*this, a4);
  v18[117] = QP::ParserGrammar::isExtension(*this, a4);
  v18[118] = QP::ParserGrammar::isExtended(*this, a4);
  BOOL result = QP::ParserGrammar::requiresComplement(*this, a4);
  v18[119] = result;
  return result;
}

void sub_224D91940(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

float QP::GraphStructureStack::addNodeIdToNode@<S0>(QP::ParserGrammar **a1@<X0>, CFRange **a2@<X1>, unsigned int a3@<W2>, char a4@<W3>, uint64_t *a5@<X8>)
{
  QP::GraphStructureStack::nodeFromNodeId(a1, *((float *)&(*a2)->location + 1), (*a2)[2], a3, a4, (*a2)->length, (*a2)[1].location, a5);
  uint64_t v7 = *a5;
  uint64_t v8 = *a2;
  uint64_t v9 = (std::__shared_weak_count *)a2[1];
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *(std::__shared_weak_count **)(v7 + 56);
  *(void *)(v7 + 48) = v8;
  *(void *)(v7 + 56) = v9;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  unint64_t v11 = *a2;
  *(void *)(v7 + 24) = (*a2)[1].length;
  float result = *((float *)&v11->location + 1);
  *(float *)(v7 + 4) = result;
  return result;
}

void QP::GraphStructureStack::shift(uint64_t *a1, unsigned __int16 **a2, char a3, uint64_t a4)
{
  uint64_t v6 = *a1;
  uint64_t v7 = (uint64_t)*a2;
  unsigned int v8 = **a2;
  v10[0] = MEMORY[0x263EF8330];
  v10[1] = 1174405120;
  void v10[2] = ___ZN2QP19GraphStructureStack5shiftENSt3__110shared_ptrINS0_4NodeEEEbU13block_pointerFvS4_bPbE_block_invoke;
  void v10[3] = &unk_26D830540;
  v10[5] = a1;
  v10[6] = v7;
  uint64_t v9 = (std::__shared_weak_count *)a2[1];
  unint64_t v11 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v10[4] = a4;
  char v12 = a3;
  QP::ParserGrammar::expansions(v6, v8, (uint64_t)v10);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
}

void sub_224D91AA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN2QP19GraphStructureStack5shiftENSt3__110shared_ptrINS0_4NodeEEEbU13block_pointerFvS4_bPbE_block_invoke(uint64_t a1, unsigned int a2, void *a3, uint64_t a4)
{
  uint64_t v7 = *(QP::ParserGrammar ***)(a1 + 40);
  unsigned int v8 = *(CFRange **)(a1 + 56);
  v25[0] = *(CFRange **)(a1 + 48);
  v25[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->length, 1uLL, memory_order_relaxed);
  }
  QP::GraphStructureStack::addNodeIdToNode(v7, v25, a2, 0, &v26);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v8);
  }
  unint64_t v11 = (float *)*a3;
  uint64_t v9 = (float *)(a3 + 1);
  uint64_t v10 = v11;
  uint64_t v12 = v26;
  if (v11 == v9)
  {
    float v18 = 0.0;
  }
  else
  {
    double v13 = 0.0;
    do
    {
      v28.CFIndex location = -1;
      v28.CFIndex length = 0;
      QP::GraphStructureStack::nodeFromNodeId(v7, v10[8], v28, *((unsigned __int16 *)v10 + 14), 0, -1, -1, &v24);
      long long v14 = (std::__shared_weak_count *)*((void *)&v24 + 1);
      if (v13 < *(float *)(v24 + 4)) {
        double v13 = *(float *)(v24 + 4);
      }
      long long v23 = v24;
      if (*((void *)&v24 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v24 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::push_back[abi:ne180100]((uint64_t *)(v12 + 64), &v23);
      if (*((void *)&v23 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v23 + 1));
      }
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      uint64_t v15 = (float *)*((void *)v10 + 1);
      if (v15)
      {
        do
        {
          uint64_t v16 = v15;
          uint64_t v15 = *(float **)v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          uint64_t v16 = (float *)*((void *)v10 + 2);
          BOOL v17 = *(void *)v16 == (void)v10;
          uint64_t v10 = v16;
        }
        while (!v17);
      }
      uint64_t v10 = v16;
    }
    while (v16 != v9);
    float v18 = v13;
  }
  *(float *)(v12 + 4) = v18;
  uint64_t v19 = *(void *)(a1 + 32);
  uint64_t v20 = v27;
  uint64_t v21 = v12;
  uint64_t v22 = v27;
  if (v27) {
    atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *, void, uint64_t))(v19 + 16))(v19, &v21, *(unsigned __int8 *)(a1 + 64), a4);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
}

void sub_224D91C74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_48c57_ZTSNSt3__110shared_ptrIN2QP19GraphStructureStack4NodeEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 56);
  *(void *)(result + 48) = *(void *)(a2 + 48);
  *(void *)(result + 56) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_48c57_ZTSNSt3__110shared_ptrIN2QP19GraphStructureStack4NodeEEE(uint64_t a1)
{
  os_log_t v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void QP::GraphStructureStack::shiftReduce(uint64_t a1, long long *a2, int a3, uint64_t a4)
{
  unsigned int v8 = *(uint64_t **)(a1 + 16);
  uint64_t v9 = *(char **)(a1 + 24);
  uint64_t v7 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(v9 - (char *)v8) > 0xF0) {
    return;
  }
  uint64_t v10 = a2;
  uint64_t v11 = *(void *)a2;
  if (**(unsigned __int16 **)a2 == (unsigned __int16)kQPSymbolIdRoot)
  {
    if (a3)
    {
      std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::push_back[abi:ne180100](v7, a2);
    }
    return;
  }
  if (*(unsigned char *)(v11 + 93))
  {
    uint64_t v74 = 0;
    unsigned __int8 v75 = 0;
    uint64_t v76 = 0;
    std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<QP::GraphStructureStack::Node>*>,std::__wrap_iter<std::shared_ptr<QP::GraphStructureStack::Node>*>>((uint64_t *)&v74, 0, v8, v9, (v9 - (char *)v8) >> 4);
    if (*(void *)(a1 + 24) != *(void *)(a1 + 16))
    {
      uint64_t v12 = (uint64_t *)v74;
      double v13 = (uint64_t *)v75;
      if (v74 != v75)
      {
        do
        {
          long long v14 = (std::__shared_weak_count *)v12[1];
          v94[0] = *v12;
          v94[1] = (uint64_t)v14;
          if (v14) {
            atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v15 = (std::__shared_weak_count *)*((void *)v10 + 1);
          v93[0] = *(void *)v10;
          v93[1] = v15;
          if (v15) {
            atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          QP::GraphStructureStack::reduce(a1, v94, v93, a4);
          if (v15) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v15);
          }
          if (v14) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v14);
          }
          v12 += 2;
        }
        while (v12 != v13);
      }
    }
    v89 = (void ***)&v74;
    std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v89);
    return;
  }
  if (!*(unsigned char *)(v11 + 91))
  {
    v89 = 0;
    v90 = &v89;
    uint64_t v91 = 0x2000000000;
    char v92 = 0;
    uint64_t v19 = (uint64_t *)(a1 + 40);
    float v18 = *(uint64_t **)(a1 + 40);
    uint64_t v20 = *(void *)(a1 + 104);
    uint64_t v21 = *(uint64_t **)(a1 + 48);
    if (v21 != v18 && *(void *)(v11 + 8) == v20 + 1 && *(unsigned char *)(v11 + 88))
    {
      int v56 = a3;
      uint64_t v86 = 0;
      v87 = 0;
      uint64_t v88 = 0;
      std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<QP::GraphStructureStack::Node>*>,std::__wrap_iter<std::shared_ptr<QP::GraphStructureStack::Node>*>>((uint64_t *)&v86, 0, v18, v21, ((char *)v21 - (char *)v18) >> 4);
      dispatch_time_t v83 = 0;
      __int16 v84 = 0;
      uint64_t v85 = 0;
      v80 = 0;
      uint64_t v81 = 0;
      uint64_t v82 = 0;
      uint64_t v74 = 0;
      unsigned __int8 v75 = (void ***)&v74;
      uint64_t v76 = 0x4002000000;
      v77 = __Block_byref_object_copy__1;
      v78 = __Block_byref_object_dispose__1;
      memset(v79, 0, sizeof(v79));
      long long v23 = *(long long **)(a1 + 40);
      uint64_t v22 = *(long long **)(a1 + 48);
      while (1)
      {
        if (v23 == v22)
        {
          uint64_t v26 = (uint64_t)v22;
        }
        else
        {
          do
          {
            if (*(void *)(*(void *)v23 + 8) == v20)
            {
              if (QP::ParserGrammar::hasExpansions(*(QP::ParserGrammar **)a1, **(unsigned __int16 **)v23))
              {
                long long v24 = (unsigned __int16 *)*((void *)v23 + 1);
                v73[0] = *(unsigned __int16 **)v23;
                v73[1] = v24;
                if (v24) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)v24 + 1, 1uLL, memory_order_relaxed);
                }
                v70[0] = MEMORY[0x263EF8330];
                v70[1] = 1174405120;
                v70[2] = ___ZN2QP19GraphStructureStack11shiftReduceENSt3__110shared_ptrINS0_4NodeEEEbU13block_pointerFvS4_bPbE_block_invoke;
                v70[3] = &unk_26D8305B0;
                v70[7] = a1;
                memset(v71, 0, 24);
                std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__init_with_size[abi:ne180100]<std::shared_ptr<QP::GraphStructureStack::Node>*,std::shared_ptr<QP::GraphStructureStack::Node>*>(v71, v80, v81, (v81 - v80) >> 4);
                v70[4] = a4;
                v70[5] = &v89;
                long long v25 = (std::__shared_weak_count *)*((void *)v10 + 1);
                v71[3] = *(void *)v10;
                id v72 = v25;
                if (v25) {
                  atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                v70[6] = &v74;
                QP::GraphStructureStack::shift((uint64_t *)a1, v73, 1, (uint64_t)v70);
                if (v24) {
                  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v24);
                }
                if (v72) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v72);
                }
                v67 = (void **)v71;
                std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v67);
              }
            }
            else
            {
              std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::push_back[abi:ne180100]((uint64_t *)&v83, v23);
            }
            ++v23;
          }
          while (v23 != v22);
          uint64_t v26 = *(void *)(a1 + 40);
          uint64_t v22 = *(long long **)(a1 + 48);
        }
        std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::erase((uint64_t)v19, v26, v22);
        std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<QP::GraphStructureStack::Node>*>,std::__wrap_iter<std::shared_ptr<QP::GraphStructureStack::Node>*>>(v19, *(void **)(a1 + 48), v83, v84, (v84 - (char *)v83) >> 4);
        std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::erase((uint64_t)&v83, (uint64_t)v83, (long long *)v84);
        uint64_t v27 = *(void *)(a1 + 40);
        CFRange v28 = *(long long **)(a1 + 48);
        if (v28 == (long long *)v27) {
          break;
        }
        if (v75[6] == v75[5])
        {
          std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::erase((uint64_t)v19, v27, v28);
LABEL_80:
          uint64_t v20 = -1;
          goto LABEL_81;
        }
        uint64_t v20 = *(void *)(*((void *)v28 - 2) + 8);
        std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::erase((uint64_t)&v80, (uint64_t)v80, (long long *)v81);
        std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<QP::GraphStructureStack::Node>*>,std::__wrap_iter<std::shared_ptr<QP::GraphStructureStack::Node>*>>((uint64_t *)&v80, v81, (uint64_t *)v75[5], v75[6], ((char *)v75[6] - (char *)v75[5]) >> 4);
        std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::erase((uint64_t)(v75 + 5), (uint64_t)v75[5], (long long *)v75[6]);
LABEL_81:
        long long v23 = *(long long **)(a1 + 40);
        uint64_t v22 = *(long long **)(a1 + 48);
        if (v22 == v23)
        {
          std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::erase((uint64_t)v19, *(void *)(a1 + 48), *(long long **)(a1 + 48));
          a3 = v56;
          std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<QP::GraphStructureStack::Node>*>,std::__wrap_iter<std::shared_ptr<QP::GraphStructureStack::Node>*>>(v19, *(void **)(a1 + 48), (uint64_t *)v86, v87, (v87 - (char *)v86) >> 4);
          _Block_object_dispose(&v74, 8);
          v67 = (void **)v79;
          std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v67);
          uint64_t v74 = (void ***)&v80;
          std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
          uint64_t v74 = (void ***)&v83;
          std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
          uint64_t v74 = &v86;
          std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
          uint64_t v11 = *(void *)v10;
          uint64_t v20 = *(void *)(a1 + 104);
          goto LABEL_83;
        }
      }
      long long v29 = (unsigned __int16 **)v75[5];
      dispatch_time_t v58 = (unsigned __int16 **)v75[6];
      if (v29 != v58)
      {
        do
        {
          v67 = 0;
          id v68 = 0;
          uint64_t v69 = 0;
          std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<QP::GraphStructureStack::Node>*>,std::__wrap_iter<std::shared_ptr<QP::GraphStructureStack::Node>*>>((uint64_t *)&v67, 0, *(uint64_t **)(a1 + 16), *(void **)(a1 + 24), (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 4);
          long long v30 = v67;
          uint64_t v31 = v68;
          if (v67 == v68) {
            goto LABEL_132;
          }
          char v32 = 0;
          do
          {
            while (1)
            {
              uint64_t v33 = *((void *)*v30 + 3);
              uint64_t v34 = *v29;
              uint64_t v35 = *((void *)*v29 + 1);
              BOOL v36 = v33 == v35 || v33 + 1 == v35;
              if (!v36 && v33 != *((void *)v34 + 3)) {
                break;
              }
              v66[0] = (uint64_t)*v30;
              uint64_t v37 = (std::__shared_weak_count *)v30[1];
              v66[1] = (uint64_t)v37;
              if (v37)
              {
                atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
                uint64_t v34 = *v29;
              }
              uint64_t v38 = (std::__shared_weak_count *)v29[1];
              v65[0] = v34;
              v65[1] = v38;
              if (v38) {
                atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              char v39 = QP::GraphStructureStack::reduce(a1, v66, v65, a4);
              if (v38) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v38);
              }
              if (v37) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v37);
              }
              if ((v39 & 1) == 0) {
                break;
              }
              char v32 = 1;
              *((unsigned char *)v90 + 24) = 1;
              v30 += 2;
              if (v30 == v31) {
                goto LABEL_77;
              }
            }
            v30 += 2;
          }
          while (v30 != v31);
          if ((v32 & 1) == 0)
          {
LABEL_132:
            if (QP::ParserGrammar::hasExpansions(*(QP::ParserGrammar **)a1, **v29))
            {
              long long v40 = v29[1];
              v64[0] = *v29;
              v64[1] = v40;
              if (v40) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)v40 + 1, 1uLL, memory_order_relaxed);
              }
              QP::GraphStructureStack::shift((uint64_t *)a1, v64, 1, a4);
              if (v40) {
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v40);
              }
              if ((unint64_t)((char *)v68 - (char *)v67) < *(void *)(a1 + 24) - *(void *)(a1 + 16)) {
                *((unsigned char *)v90 + 24) = 1;
              }
            }
          }
LABEL_77:
          v95 = &v67;
          std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);
          v29 += 2;
        }
        while (v29 != v58);
        uint64_t v20 = -1;
        uint64_t v19 = (uint64_t *)(a1 + 40);
        uint64_t v10 = a2;
        goto LABEL_81;
      }
      goto LABEL_80;
    }
LABEL_83:
    if (*(void *)(v11 + 8) > v20 + 1)
    {
      uint64_t v41 = *(void *)(a1 + 40);
      unsigned __int16 v42 = *(long long **)(a1 + 48);
      if (v42 != (long long *)v41)
      {
        if (*(unsigned char *)(v11 + 88))
        {
          std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::erase((uint64_t)v19, v41, v42);
          *(void *)(a1 + 104) = -1;
        }
      }
    }
    if (!*((unsigned char *)v90 + 24) && a3)
    {
      uint64_t v74 = 0;
      unsigned __int8 v75 = 0;
      uint64_t v76 = 0;
      std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<QP::GraphStructureStack::Node>*>,std::__wrap_iter<std::shared_ptr<QP::GraphStructureStack::Node>*>>((uint64_t *)&v74, 0, *(uint64_t **)(a1 + 16), *(void **)(a1 + 24), (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 4);
      v43 = *(unsigned __int16 **)v10;
      if (*(void *)(a1 + 24) != *(void *)(a1 + 16) && *((void *)v43 + 1))
      {
        uint64_t v44 = (void **)v74;
        v45 = (void **)v75;
        if (v74 == v75) {
          goto LABEL_122;
        }
        char v46 = 0;
        while (1)
        {
          while (1)
          {
            uint64_t v47 = *((void *)*v44 + 3);
            uint64_t v48 = *(void *)a2;
            uint64_t v49 = *(void *)(*(void *)a2 + 8);
            BOOL v50 = v47 + 1 == v49 || v47 == v49;
            if (v50 || v47 == *(void *)(v48 + 24)) {
              break;
            }
LABEL_112:
            v44 += 2;
            if (v44 == v45)
            {
              if ((v46 & 1) == 0)
              {
                v43 = *(unsigned __int16 **)a2;
LABEL_122:
                if (QP::ParserGrammar::hasExpansions(*(QP::ParserGrammar **)a1, *v43))
                {
                  v55 = (unsigned __int16 *)*((void *)a2 + 1);
                  v60[0] = *(unsigned __int16 **)a2;
                  v60[1] = v55;
                  if (v55) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)v55 + 1, 1uLL, memory_order_relaxed);
                  }
                  QP::GraphStructureStack::shift((uint64_t *)a1, v60, 1, a4);
                  goto LABEL_126;
                }
              }
              goto LABEL_128;
            }
          }
          v63[0] = (uint64_t)*v44;
          v51 = (std::__shared_weak_count *)v44[1];
          v63[1] = (uint64_t)v51;
          if (v51)
          {
            atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v48 = *(void *)a2;
          }
          v52 = (std::__shared_weak_count *)*((void *)a2 + 1);
          v62[0] = v48;
          v62[1] = v52;
          if (v52) {
            atomic_fetch_add_explicit(&v52->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          char v53 = QP::GraphStructureStack::reduce(a1, v63, v62, a4);
          if (v52) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v52);
          }
          if (v51) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v51);
          }
          if ((v53 & 1) == 0)
          {
            if (QP::ParserGrammar::hasExpansions(*(QP::ParserGrammar **)a1, **(unsigned __int16 **)a2))
            {
              v54 = (unsigned __int16 *)*((void *)a2 + 1);
              v61[0] = *(unsigned __int16 **)a2;
              v61[1] = v54;
              if (v54) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)v54 + 1, 1uLL, memory_order_relaxed);
              }
              QP::GraphStructureStack::shift((uint64_t *)a1, v61, 0, a4);
              if (v54) {
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v54);
              }
            }
            goto LABEL_112;
          }
          v44 += 2;
          char v46 = 1;
          if (v44 == v45) {
            goto LABEL_128;
          }
        }
      }
      if (QP::ParserGrammar::hasExpansions(*(QP::ParserGrammar **)a1, *v43))
      {
        v55 = (unsigned __int16 *)*((void *)a2 + 1);
        v59[0] = *(unsigned __int16 **)a2;
        v59[1] = v55;
        if (v55) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)v55 + 1, 1uLL, memory_order_relaxed);
        }
        QP::GraphStructureStack::shift((uint64_t *)a1, v59, 1, a4);
LABEL_126:
        if (v55) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v55);
        }
      }
LABEL_128:
      uint64_t v86 = (void **)&v74;
      std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v86);
    }
    _Block_object_dispose(&v89, 8);
    return;
  }
  if (*(void *)(v11 + 8) > *(void *)(a1 + 104) + 1)
  {
    uint64_t v16 = *(void *)(a1 + 40);
    BOOL v17 = *(long long **)(a1 + 48);
    if (v17 != (long long *)v16)
    {
      std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::erase(a1 + 40, v16, v17);
      *(void *)(a1 + 104) = -1;
    }
  }
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::push_back[abi:ne180100]((uint64_t *)(a1 + 40), v10);
  *(void *)(a1 + 104) = *(void *)(*(void *)v10 + 8);
}

void sub_224D925DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  if (v50) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v50);
  }
  *(void *)(v51 - 200) = &a50;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 200));
  _Block_object_dispose((const void *)(v51 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t QP::GraphStructureStack::reduce(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4)
{
  uint64_t v5 = *a2;
  if (!*a2) {
    return 0;
  }
  if (*(void *)(v5 + 8) == -1) {
    return 0;
  }
  uint64_t v6 = *(unsigned __int8 *)(v5 + 88);
  if (*(unsigned char *)(v5 + 88)) {
    return 0;
  }
  if (a4 && *a3)
  {
    uint64_t v11 = a3[1];
    *(void *)&long long v34 = *a3;
    *((void *)&v34 + 1) = v11;
    if (v11) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    }
    char v12 = QP::GraphStructureStack::Node::reduce((unsigned __int16 *)v5, &v34);
    if (*((void *)&v34 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v34 + 1));
    }
    if ((v12 & 1) == 0)
    {
      uint64_t v13 = *a2;
      char v32 = 0;
      uint64_t v33 = 0;
      uint64_t v31 = 0;
      std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__init_with_size[abi:ne180100]<std::shared_ptr<QP::GraphStructureStack::Node>*,std::shared_ptr<QP::GraphStructureStack::Node>*>(&v31, *(void **)(v13 + 64), *(void **)(v13 + 72), (uint64_t)(*(void *)(v13 + 72) - *(void *)(v13 + 64)) >> 4);
      long long v14 = v31;
      long long v25 = v32;
      if (v31 == v32)
      {
        char v15 = 0;
      }
      else
      {
        char v15 = 0;
        do
        {
          uint64_t v16 = *v14;
          BOOL v17 = (std::__shared_weak_count *)v14[1];
          if (v17)
          {
            atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v29 = v16;
            long long v30 = v17;
            atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          else
          {
            uint64_t v29 = *v14;
            long long v30 = 0;
          }
          float v18 = (std::__shared_weak_count *)a3[1];
          v28[0] = *a3;
          v28[1] = v18;
          if (v18) {
            atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          int v19 = QP::GraphStructureStack::reduce(a1, &v29, v28, a4);
          if (v18) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v18);
          }
          if (v17)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v17);
            if (v19) {
              char v15 = 1;
            }
            std::__shared_weak_count::__release_shared[abi:ne180100](v17);
          }
          else if (v19)
          {
            char v15 = 1;
          }
          v14 += 2;
        }
        while (v14 != v25);
      }
      uint64_t v35 = (void **)&v31;
      std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v35);
      if ((v15 & 1) == 0)
      {
        uint64_t v20 = *(std::__shared_weak_count **)(*a2 + 56);
        v27[0] = *(void *)(*a2 + 48);
        v27[1] = v20;
        if (v20) {
          atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v21 = (std::__shared_weak_count *)a3[1];
        v26[0] = *a3;
        v26[1] = v21;
        if (v21) {
          atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v22 = QP::GraphStructureStack::reduce(a1, v27, v26, a4);
        if (v21) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v21);
        }
        if (v20) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v20);
        }
        if (!v22) {
          return 0;
        }
      }
    }
    long long v23 = (void *)*a2;
    long long v24 = (void *)*a3;
    if (*(unsigned char *)(*a2 + 92)) {
      v23[5] = v24[4] - v23[4] + v24[5];
    }
    v23[3] = v24[3];
    return 1;
  }
  return v6;
}

void sub_224D929C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::erase(uint64_t a1, uint64_t a2, long long *a3)
{
  if ((long long *)a2 != a3)
  {
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<QP::GraphStructureStack::Node> *,std::shared_ptr<QP::GraphStructureStack::Node> *,std::shared_ptr<QP::GraphStructureStack::Node> *>((uint64_t)&v10, a3, *(long long **)(a1 + 8), a2);
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        unsigned int v8 = *(std::__shared_weak_count **)(v7 - 8);
        if (v8) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        }
        v7 -= 16;
      }
      while (v7 != v6);
    }
    *(void *)(a1 + 8) = v6;
  }
  return a2;
}

__n128 __Block_byref_object_copy__1(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
  os_log_t v1 = (void **)(a1 + 40);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void ___ZN2QP19GraphStructureStack11shiftReduceENSt3__110shared_ptrINS0_4NodeEEEbU13block_pointerFvS4_bPbE_block_invoke(uint64_t a1, unsigned __int16 **a2)
{
  uint64_t v5 = *(unsigned __int16 ***)(a1 + 64);
  uint64_t v4 = *(unsigned __int16 ***)(a1 + 72);
  uint64_t v6 = *(void *)(a1 + 56);
  if (v4 == v5)
  {
    uint64_t v17 = *(void *)(a1 + 96);
    v24[0] = *(unsigned __int16 **)(a1 + 88);
    v24[1] = (unsigned __int16 *)v17;
    if (v17) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
    }
    v22[0] = MEMORY[0x263EF8330];
    v22[1] = 1174405120;
    v22[2] = ___ZN2QP19GraphStructureStack11shiftReduceENSt3__110shared_ptrINS0_4NodeEEEbU13block_pointerFvS4_bPbE_block_invoke_2;
    v22[3] = &unk_26D830578;
    int v19 = *a2;
    float v18 = (std::__shared_weak_count *)a2[1];
    v22[6] = v6;
    v22[7] = v19;
    long long v23 = v18;
    if (v18) {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v20 = *(void *)(a1 + 48);
    v22[4] = *(void *)(a1 + 32);
    v22[5] = v20;
    QP::GraphStructureStack::shift((uint64_t *)v6, v24, 1, (uint64_t)v22);
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v17);
    }
    if (v23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    }
  }
  else
  {
    uint64_t v21 = *(unsigned __int16 ***)(a1 + 72);
    do
    {
      uint64_t v7 = (std::__shared_weak_count *)a2[1];
      v33[0] = (uint64_t)*a2;
      v33[1] = (uint64_t)v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unsigned int v8 = (std::__shared_weak_count *)v5[1];
      v32[0] = *v5;
      v32[1] = v8;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v9 = QP::GraphStructureStack::reduce(v6, v33, v32, *(void *)(a1 + 32));
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
      if (v9)
      {
        long long v30 = 0;
        uint64_t v31 = 0;
        uint64_t v29 = 0;
        std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<QP::GraphStructureStack::Node>*>,std::__wrap_iter<std::shared_ptr<QP::GraphStructureStack::Node>*>>((uint64_t *)&v29, 0, *(uint64_t **)(v6 + 16), *(void **)(v6 + 24), (uint64_t)(*(void *)(v6 + 24) - *(void *)(v6 + 16)) >> 4);
        char v10 = v29;
        uint64_t v11 = v30;
        if (v30 == v29)
        {
          uint64_t v16 = a2[1];
          v25[0] = *a2;
          v25[1] = v16;
          if (v16) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)v16 + 1, 1uLL, memory_order_relaxed);
          }
          QP::GraphStructureStack::shift((uint64_t *)v6, v25, 1, *(void *)(a1 + 32));
          if (v16) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v16);
          }
        }
        else
        {
          do
          {
            char v12 = (std::__shared_weak_count *)v10[1];
            v28[0] = *v10;
            v28[1] = (uint64_t)v12;
            if (v12) {
              atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v13 = (std::__shared_weak_count *)a2[1];
            v27[0] = *a2;
            v27[1] = v13;
            if (v13) {
              atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            char v14 = QP::GraphStructureStack::reduce(v6, v28, v27, *(void *)(a1 + 32));
            if (v13) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v13);
            }
            if (v12) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v12);
            }
            if ((v14 & 1) == 0 && QP::ParserGrammar::hasExpansions(*(QP::ParserGrammar **)v6, **v5))
            {
              char v15 = a2[1];
              v26[0] = *a2;
              v26[1] = v15;
              if (v15) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)v15 + 1, 1uLL, memory_order_relaxed);
              }
              QP::GraphStructureStack::shift((uint64_t *)v6, v26, 0, *(void *)(a1 + 32));
              if (v15) {
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v15);
              }
            }
            v10 += 2;
          }
          while (v10 != v11);
        }
        *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
        long long v34 = (void **)&v29;
        std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v34);
        uint64_t v4 = v21;
      }
      v5 += 2;
    }
    while (v5 != v4);
  }
}

void sub_224D92DB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN2QP19GraphStructureStack11shiftReduceENSt3__110shared_ptrINS0_4NodeEEEbU13block_pointerFvS4_bPbE_block_invoke_2(uint64_t *a1, void *a2)
{
  uint64_t v4 = a1 + 7;
  uint64_t v3 = a1[7];
  uint64_t v5 = a1[6];
  uint64_t v6 = (std::__shared_weak_count *)v4[1];
  v11[0] = v3;
  v11[1] = (uint64_t)v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)a2[1];
  v10[0] = *a2;
  v10[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v8 = QP::GraphStructureStack::reduce(v5, v11, v10, a1[4]);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v8)
  {
    int v9 = (uint64_t *)(*(void *)(a1[5] + 8) + 40);
    std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::push_back[abi:ne180100](v9, (long long *)v4);
  }
}

void sub_224D92F10(_Unwind_Exception *exception_object)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_56c57_ZTSNSt3__110shared_ptrIN2QP19GraphStructureStack4NodeEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 64);
  *(void *)(result + 56) = *(void *)(a2 + 56);
  *(void *)(result + 64) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_56c57_ZTSNSt3__110shared_ptrIN2QP19GraphStructureStack4NodeEEE(uint64_t a1)
{
  os_log_t v1 = *(std::__shared_weak_count **)(a1 + 64);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void *__copy_helper_block_e8_64c89_ZTSNSt3__16vectorINS_10shared_ptrIN2QP19GraphStructureStack4NodeEEENS_9allocatorIS5_EEEE88c57_ZTSNSt3__110shared_ptrIN2QP19GraphStructureStack4NodeEEE(void *a1, uint64_t a2)
{
  a1[8] = 0;
  a1[9] = 0;
  uint64_t v3 = a1 + 8;
  a1[10] = 0;
  __n128 result = std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__init_with_size[abi:ne180100]<std::shared_ptr<QP::GraphStructureStack::Node>*,std::shared_ptr<QP::GraphStructureStack::Node>*>(a1 + 8, *(void **)(a2 + 64), *(void **)(a2 + 72), (uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 4);
  uint64_t v5 = *(void *)(a2 + 96);
  v3[3] = *(void *)(a2 + 88);
  void v3[4] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_64c89_ZTSNSt3__16vectorINS_10shared_ptrIN2QP19GraphStructureStack4NodeEEENS_9allocatorIS5_EEEE88c57_ZTSNSt3__110shared_ptrIN2QP19GraphStructureStack4NodeEEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 96);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (void **)(a1 + 64);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void QP::GraphStructureStack::add(QP::GraphStructureStack *this, unsigned int a2, uint64_t a3, uint64_t a4, CFRange a5)
{
  if (a2 && *(void *)this)
  {
    CFIndex length = a5.length;
    CFIndex location = a5.location;
    if (*((void *)this + 11) + 1 < a3) {
      *((void *)this + 11) = a3;
    }
    uint64_t v11 = (char *)operator new(0x78uLL);
    *((void *)v11 + 1) = 0;
    *((void *)v11 + 2) = 0;
    *(void *)uint64_t v11 = &unk_26D8305F0;
    *((_WORD *)v11 + 12) = kQPSymbolIdNone;
    *((void *)v11 + 4) = a3;
    *((void *)v11 + 5) = a4;
    *((void *)v11 + 6) = a3;
    *((void *)v11 + 7) = location;
    *((void *)v11 + 8) = length;
    v11[119] = 0;
    *(_OWORD *)(v11 + 102) = 0u;
    *(_OWORD *)(v11 + 72) = 0u;
    *(_OWORD *)(v11 + 88) = 0u;
    v11[113] = 1;
    v22[0] = (CFRange *)(v11 + 24);
    v22[1] = (CFRange *)v11;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v11 + 1, 1uLL, memory_order_relaxed);
    QP::GraphStructureStack::addNodeIdToNode((QP::ParserGrammar **)this, v22, a2, 1, (uint64_t *)&v23);
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v11);
    uint64_t v16 = 0;
    uint64_t v17 = &v16;
    uint64_t v18 = 0x3002000000;
    int v19 = __Block_byref_object_copy__4;
    uint64_t v20 = __Block_byref_object_dispose__5;
    char v12 = v15;
    v15[0] = MEMORY[0x263EF8330];
    v15[1] = 0x40000000;
    v15[2] = ___ZN2QP19GraphStructureStack3addEtll7CFRange_block_invoke;
    v15[3] = &unk_2647050C0;
    v15[4] = &v16;
    v15[5] = this;
    uint64_t v21 = v15;
    uint64_t v13 = (std::__shared_weak_count *)*((void *)&v23 + 1);
    long long v14 = v23;
    if (*((void *)&v23 + 1))
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v23 + 1) + 8), 1uLL, memory_order_relaxed);
      char v12 = (void *)v17[5];
    }
    QP::GraphStructureStack::shiftReduce((uint64_t)this, &v14, 1, (uint64_t)v12);
    if (*((void *)&v14 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v14 + 1));
    }
    *((void *)this + 12) = a3;
    _Block_object_dispose(&v16, 8);
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v11);
  }
}

void sub_224D931F4(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  _Block_object_dispose(va, 8);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__4(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__5(uint64_t a1)
{
}

{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
}

void ___ZN2QP19GraphStructureStack3addEtll7CFRange_block_invoke(uint64_t a1, void *a2, int a3)
{
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = a2[1];
  *(void *)&long long v6 = *a2;
  *((void *)&v6 + 1) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  QP::GraphStructureStack::shiftReduce(v4, &v6, a3, *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40));
  if (*((void *)&v6 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v6 + 1));
  }
}

void sub_224D932B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void QP::GraphStructureStack::close(QP::GraphStructureStack *this)
{
  uint64_t v3 = (uint64_t *)*((void *)this + 2);
  uint64_t v4 = (long long *)*((void *)this + 3);
  uint64_t v5 = (uint64_t *)((char *)this + 16);
  unint64_t v6 = 126 - 2 * __clz(((char *)v4 - (char *)v3) >> 4);
  char v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = QP::GraphStructureStack::state_greater_than_span;
  if (v4 == (long long *)v3) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = v6;
  }
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*,false>(v3, v4, (uint64_t (**)(uint64_t *, uint64_t *))&v18, v7, 1);
  int v8 = (long long *)*((void *)this + 2);
  int v9 = (long long *)*((void *)this + 3);
  if (v8 == v9)
  {
    uint64_t v14 = *((void *)this + 2);
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = -1;
    do
    {
      if (v11 != -1 && (*(void *)(*(void *)v8 + 32) != v11 || *(void *)(*(void *)v8 + 40) != v10)) {
        break;
      }
      std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::push_back[abi:ne180100]((uint64_t *)&v15, v8);
      uint64_t v13 = *(void *)v8++;
      uint64_t v11 = *(void *)(v13 + 32);
      uint64_t v10 = *(void *)(v13 + 40);
    }
    while (v8 != v9);
    uint64_t v14 = *((void *)this + 2);
    int v8 = (long long *)*((void *)this + 3);
  }
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::erase((uint64_t)v5, v14, v8);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<QP::GraphStructureStack::Node>*>,std::__wrap_iter<std::shared_ptr<QP::GraphStructureStack::Node>*>>(v5, *((void **)this + 3), v15, v16, (v16 - (char *)v15) >> 4);
  int v19 = (void **)&v15;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v19);
}

void sub_224D933D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a10;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

BOOL QP::GraphStructureStack::state_greater_than_span(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  if (*a1 == *a2) {
    return 0;
  }
  uint64_t v4 = *(void *)(v2 + 8);
  uint64_t v5 = *(void *)(v3 + 8);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v7 = *(void *)(v3 + 24);
  if (v4 == v5)
  {
    BOOL v10 = __OFSUB__(v6, v7);
    BOOL v8 = v6 == v7;
    BOOL v9 = v6 - v7 < 0;
    uint64_t v7 = *(void *)(v2 + 24);
    if (!v8) {
      return !(v9 ^ v10 | v8);
    }
  }
  uint64_t v11 = v6 - v4;
  uint64_t v12 = v7 - v5;
  BOOL v10 = __OFSUB__(v11, v12);
  BOOL v8 = v11 == v12;
  BOOL v9 = v11 - v12 < 0;
  if (v11 != v12) {
    return !(v9 ^ v10 | v8);
  }
  uint64_t v13 = *(void *)(v2 + 32);
  uint64_t v14 = *(void *)(v2 + 40);
  uint64_t v15 = *(void *)(v3 + 32);
  uint64_t v16 = *(void *)(v3 + 40);
  if (v13 != v15 || v14 != v16)
  {
    BOOL v10 = __OFSUB__(v14, v16);
    BOOL v8 = v14 == v16;
    BOOL v9 = v14 - v16 < 0;
    if (v14 == v16) {
      return v13 < v15;
    }
    return !(v9 ^ v10 | v8);
  }
  if (v4 != v5) {
    return 0;
  }
  float v19 = *(float *)(v2 + 4);
  float v20 = *(float *)(v3 + 4);
  BOOL v10 = 0;
  BOOL v8 = v19 == v20;
  BOOL v9 = v19 < v20;
  return !(v9 ^ v10 | v8);
}

void QP::GraphStructureStack::traverse(QP::ParserGrammar **a1, long long *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4 = *(unsigned __int16 **)a2;
  if (!*(void *)a2) {
    return;
  }
  if (*((unsigned char *)v4 + 88)) {
    return;
  }
  if (*((void *)v4 + 1) == -1) {
    return;
  }
  unsigned int v6 = *v4;
  if (v6 == (unsigned __int16)kQPSymbolIdTerminal) {
    return;
  }
  BOOL v10 = QP::ParserGrammar::requiresComplement(*a1, v6);
  if (!v10)
  {
LABEL_12:
    BOOL v42 = v10;
    uint64_t v15 = (unsigned __int16 **)*a3;
    uint64_t v14 = (unsigned __int16 **)a3[1];
    v43 = a3;
    if (v14 != (unsigned __int16 **)*a3)
    {
      double v16 = 0.0;
      do
      {
        double v16 = v16 + *((float *)*v15 + 1);
        if (QP::ParserGrammar::hasAttribute(*a1, **v15, **(unsigned __int16 **)a2))
        {
          uint64_t v17 = *((void *)*a1 + 5);
          uint64_t v18 = (long long *)v15;
          if (v17)
          {
            if (*(unsigned char *)(v17 + 30)) {
              uint64_t v18 = a2;
            }
            else {
              uint64_t v18 = (long long *)v15;
            }
          }
          uint64_t v20 = *(void *)v18;
          uint64_t v19 = *((void *)v18 + 1);
          if (v19)
          {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
            uint64_t v17 = *((void *)*a1 + 5);
          }
          uint64_t v21 = a2;
          if (v17)
          {
            if (*(unsigned char *)(v17 + 30)) {
              uint64_t v21 = (long long *)v15;
            }
            else {
              uint64_t v21 = a2;
            }
          }
          uint64_t v22 = *((void *)v21 + 1);
          if (v22) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v51 = 0;
          v52 = 0;
          BOOL v50 = 0;
          long long v23 = *(void **)(*(void *)a2 + 16);
          long long v24 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<long>>((uint64_t)&v52, 1uLL);
          *long long v24 = v23;
          BOOL v50 = v24;
          v52 = &v24[v25];
          uint64_t v51 = v24 + 1;
          uint64_t v26 = *((void *)*a1 + 5);
          if (!v26 || !*(unsigned char *)(v26 + 30))
          {
            for (uint64_t i = *(void *)(v20 + 64); ; i += 16)
            {
              if (i == *(void *)(v20 + 72)) {
                goto LABEL_34;
              }
              if ((*(void *)(*(void *)i + 8) & 0x8000000000000000) == 0) {
                break;
              }
            }
            if (!*(unsigned char *)(v20 + 95))
            {
LABEL_34:
              if (!*(unsigned char *)(v20 + 92) && !*(unsigned char *)(v20 + 94))
              {
                CFRange v28 = *(std::__shared_weak_count **)(v20 + 56);
                if (v28)
                {
                  atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
                  std::__shared_weak_count::__release_shared[abi:ne180100](v28);
                }
              }
            }
          }
          operator new();
        }
        v15 += 2;
      }
      while (v15 != v14);
    }
    std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::push_back[abi:ne180100](a3, a2);
    uint64_t v30 = *(void *)(*(void *)a2 + 48);
    uint64_t v29 = *(std::__shared_weak_count **)(*(void *)a2 + 56);
    if (v29)
    {
      atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
      int v31 = *(unsigned __int8 *)(v30 + 88);
      std::__shared_weak_count::__release_shared[abi:ne180100](v29);
      if (!v31)
      {
        char v32 = *(std::__shared_weak_count **)(*(void *)a2 + 56);
        uint64_t v48 = *(void *)(*(void *)a2 + 48);
        uint64_t v49 = v32;
        if (v32) {
          atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_48;
      }
    }
    else if (!*(unsigned char *)(v30 + 88))
    {
      uint64_t v48 = *(void *)(*(void *)a2 + 48);
      uint64_t v49 = 0;
LABEL_48:
      memset(v47, 0, sizeof(v47));
      std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__init_with_size[abi:ne180100]<std::shared_ptr<QP::GraphStructureStack::Node>*,std::shared_ptr<QP::GraphStructureStack::Node>*>(v47, (void *)*v43, (void *)v43[1], (v43[1] - *v43) >> 4);
      QP::GraphStructureStack::traverse(a1, &v48, v47, a4);
      BOOL v50 = (void **)v47;
      std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v50);
      if (v49) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v49);
      }
    }
    uint64_t v34 = *(void *)(*(void *)a2 + 48);
    uint64_t v33 = *(std::__shared_weak_count **)(*(void *)a2 + 56);
    if (v33) {
      atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (*(unsigned char *)(v34 + 88) || *(unsigned char *)(*(void *)a2 + 92))
    {
      if (v33) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v33);
      }
    }
    else
    {
      if (v33) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v33);
      }
      if (!v42)
      {
        long long v40 = (void *)v43[1];
        uint64_t v41 = (std::__shared_weak_count *)*(v40 - 1);
        if (v41) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v41);
        }
        v43[1] = (uint64_t)(v40 - 2);
      }
    }
    uint64_t v35 = *(void *)a2;
    uint64_t v51 = 0;
    v52 = 0;
    BOOL v50 = 0;
    std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__init_with_size[abi:ne180100]<std::shared_ptr<QP::GraphStructureStack::Node>*,std::shared_ptr<QP::GraphStructureStack::Node>*>(&v50, *(void **)(v35 + 64), *(void **)(v35 + 72), (uint64_t)(*(void *)(v35 + 72) - *(void *)(v35 + 64)) >> 4);
    BOOL v36 = v50;
    for (uint64_t j = v51; v36 != j; v36 += 2)
    {
      uint64_t v38 = *v36;
      char v39 = (std::__shared_weak_count *)v36[1];
      if (v39) {
        atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if ((v38[1] & 0x8000000000000000) == 0 && !*((unsigned char *)v38 + 88))
      {
        v45 = v38;
        char v46 = v39;
        if (v39) {
          atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        memset(v44, 0, sizeof(v44));
        std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__init_with_size[abi:ne180100]<std::shared_ptr<QP::GraphStructureStack::Node>*,std::shared_ptr<QP::GraphStructureStack::Node>*>(v44, (void *)*v43, (void *)v43[1], (v43[1] - *v43) >> 4);
        QP::GraphStructureStack::traverse(a1, &v45, v44, a4);
        v53[0] = (void **)v44;
        std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](v53);
        if (v46) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v46);
        }
      }
      if (v39) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v39);
      }
    }
    v53[0] = (void **)&v50;
    std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](v53);
    return;
  }
  uint64_t v11 = *(void *)a2;
  if (*(void *)(*(void *)a2 + 48))
  {
    uint64_t v12 = *(void *)(v11 + 64);
    uint64_t v13 = *(void *)(v11 + 72);
    while (v12 != v13)
    {
      if ((*(void *)(*(void *)v12 + 8) & 0x8000000000000000) == 0) {
        goto LABEL_12;
      }
      v12 += 16;
    }
  }
}

void sub_224D93A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  *(void *)(v27 - 136) = v26;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 136));
  if (a26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a26);
  }
  _Unwind_Resume(a1);
}

void QP::Branch::addLocation(QP::Branch *this, uint64_t a2)
{
  uint64_t v4 = (char *)this + 56;
  unint64_t v5 = *((void *)this + 7);
  unsigned int v6 = (char *)*((void *)this + 6);
  if ((unint64_t)v6 >= v5)
  {
    BOOL v8 = (char *)*((void *)this + 5);
    uint64_t v9 = (v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = v5 - (void)v8;
    unint64_t v11 = (uint64_t)(v5 - (void)v8) >> 2;
    if (v11 <= v9 + 1) {
      unint64_t v11 = v9 + 1;
    }
    if (v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12)
    {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long>>((uint64_t)v4, v12);
      BOOL v8 = (char *)*((void *)this + 5);
      unsigned int v6 = (char *)*((void *)this + 6);
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[8 * v9];
    uint64_t v15 = &v13[8 * v12];
    *(void *)uint64_t v14 = a2;
    uint64_t v7 = v14 + 8;
    while (v6 != v8)
    {
      uint64_t v16 = *((void *)v6 - 1);
      v6 -= 8;
      *((void *)v14 - 1) = v16;
      v14 -= 8;
    }
    *((void *)this + 5) = v14;
    *((void *)this + 6) = v7;
    *((void *)this + 7) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *(void *)unsigned int v6 = a2;
    uint64_t v7 = v6 + 8;
  }
  *((void *)this + 6) = v7;
}

void QP::GraphStructureStack::enumerateBranchesAtStateIndex(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if ((a2 & 0x8000000000000000) == 0)
  {
    if (a3)
    {
      uint64_t v5 = *(void *)(a1 + 16);
      if ((*(void *)(a1 + 24) - v5) >> 4 > a2)
      {
        unsigned int v6 = (uint64_t *)(v5 + 16 * a2);
        uint64_t v7 = *v6;
        BOOL v8 = (std::__shared_weak_count *)v6[1];
        if (v8)
        {
          atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v11 = 0;
          uint64_t v12 = 0;
          uint64_t v13 = 0;
          *((void *)&v10 + 1) = v8;
          atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        else
        {
          uint64_t v11 = 0;
          uint64_t v12 = 0;
          uint64_t v13 = 0;
          *((void *)&v10 + 1) = 0;
        }
        *(void *)&long long v10 = v7;
        memset(v9, 0, sizeof(v9));
        std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__init_with_size[abi:ne180100]<std::shared_ptr<QP::GraphStructureStack::Node>*,std::shared_ptr<QP::GraphStructureStack::Node>*>(v9, 0, 0, 0);
        QP::GraphStructureStack::traverse((QP::ParserGrammar **)a1, &v10, v9, a3);
        uint64_t v14 = (void **)v9;
        std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v14);
        if (*((void *)&v10 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v10 + 1));
        }
        uint64_t v14 = (void **)&v11;
        std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v14);
        if (v8) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        }
      }
    }
  }
}

void sub_224D93CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, char a15)
{
  *(void *)(v17 - 40) = v16;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v17 - 40));
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  *(void *)(v17 - 40) = &a15;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v17 - 40));
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  _Unwind_Resume(a1);
}

uint64_t QP::GraphStructureStack::clear(QP::GraphStructureStack *this)
{
  os_log_t v1 = this;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::erase((uint64_t)this + 64, *((void *)this + 8), *((long long **)this + 9));
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::erase((uint64_t)v1 + 16, *((void *)v1 + 2), *((long long **)v1 + 3));
  uint64_t v2 = *((void *)v1 + 5);
  uint64_t v3 = (long long *)*((void *)v1 + 6);
  os_log_t v1 = (QP::GraphStructureStack *)((char *)v1 + 40);
  uint64_t result = std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::erase((uint64_t)v1, v2, v3);
  *((void *)v1 + 6) = -1;
  *((void *)v1 + 7) = -1;
  *((void *)v1 + 8) = -1;
  return result;
}

void std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  a1[1] = v2;
}

void std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

uint64_t std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>,std::reverse_iterator<std::shared_ptr<QP::GraphStructureStack::Node>*>,std::reverse_iterator<std::shared_ptr<QP::GraphStructureStack::Node>*>,std::reverse_iterator<std::shared_ptr<QP::GraphStructureStack::Node>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>,std::reverse_iterator<std::shared_ptr<QP::GraphStructureStack::Node>*>,std::reverse_iterator<std::shared_ptr<QP::GraphStructureStack::Node>*>,std::reverse_iterator<std::shared_ptr<QP::GraphStructureStack::Node>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>,std::reverse_iterator<std::shared_ptr<QP::GraphStructureStack::Node>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>,std::reverse_iterator<std::shared_ptr<QP::GraphStructureStack::Node>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>,std::reverse_iterator<std::shared_ptr<QP::GraphStructureStack::Node>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>,std::reverse_iterator<std::shared_ptr<QP::GraphStructureStack::Node>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    v1 += 16;
  }
}

void **std::__split_buffer<std::shared_ptr<QP::GraphStructureStack::Node>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::shared_ptr<QP::GraphStructureStack::Node>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 16;
    uint64_t v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 16;
    }
  }
}

void *std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<QP::GraphStructureStack::Node>*>,std::__wrap_iter<std::shared_ptr<QP::GraphStructureStack::Node>*>>(uint64_t *a1, void *a2, uint64_t *a3, void *a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v7 = a3;
    uint64_t v11 = a1[2];
    long long v9 = a1 + 2;
    uint64_t v10 = v11;
    unint64_t v12 = *(v9 - 1);
    if (a5 <= (uint64_t)(v11 - v12) >> 4)
    {
      uint64_t v19 = v12 - (void)a2;
      uint64_t v20 = (uint64_t)(v12 - (void)a2) >> 4;
      if (v20 >= a5)
      {
        uint64_t v21 = &a3[2 * a5];
      }
      else
      {
        uint64_t v21 = &a3[2 * v20];
        a1[1] = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>,std::shared_ptr<QP::GraphStructureStack::Node>*,std::shared_ptr<QP::GraphStructureStack::Node>*,std::shared_ptr<QP::GraphStructureStack::Node>*>((uint64_t)v9, v21, a4, (void *)*(v9 - 1));
        if (v19 < 1) {
          return v5;
        }
      }
      std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__move_range((uint64_t)a1, v5, v12, (uint64_t)&v5[2 * a5]);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<QP::GraphStructureStack::Node> *,std::shared_ptr<QP::GraphStructureStack::Node> *,std::shared_ptr<QP::GraphStructureStack::Node> *>((uint64_t)v26, v7, v21, v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 + ((uint64_t)(v12 - *a1) >> 4);
      if (v14 >> 60) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v15 = ((uint64_t)a2 - v13) >> 4;
      uint64_t v16 = v10 - v13;
      if (v16 >> 3 > v14) {
        unint64_t v14 = v16 >> 3;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v14;
      }
      v26[4] = v9;
      if (v17) {
        uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>>((uint64_t)v9, v17);
      }
      else {
        uint64_t v18 = 0;
      }
      uint64_t v22 = (uint64_t *)&v18[16 * v15];
      v26[0] = v18;
      v26[1] = v22;
      v26[3] = &v18[16 * v17];
      long long v23 = &v22[2 * a5];
      do
      {
        *uint64_t v22 = *v7;
        uint64_t v24 = v7[1];
        v22[1] = v24;
        if (v24) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
        }
        v22 += 2;
        v7 += 2;
      }
      while (v22 != v23);
      void v26[2] = v23;
      uint64_t v5 = (void *)std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__swap_out_circular_buffer(a1, v26, v5);
      std::__split_buffer<std::shared_ptr<QP::GraphStructureStack::Node>>::~__split_buffer(v26);
    }
  }
  return v5;
}

void sub_224D9420C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void *std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__move_range(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (void *)((char *)a2 + v6 - a4);
  uint64_t v8 = (_OWORD *)v6;
  if ((unint64_t)v7 < a3)
  {
    long long v9 = v7;
    uint64_t v8 = *(_OWORD **)(a1 + 8);
    do
    {
      *v8++ = *(_OWORD *)v9;
      *long long v9 = 0;
      v9[1] = 0;
      v9 += 2;
    }
    while ((unint64_t)v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<QP::GraphStructureStack::Node> *,std::shared_ptr<QP::GraphStructureStack::Node> *,std::shared_ptr<QP::GraphStructureStack::Node> *>((uint64_t)&v11, a2, v7, v6);
}

uint64_t std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__swap_out_circular_buffer(uint64_t *a1, void *a2, void *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>,std::reverse_iterator<std::shared_ptr<QP::GraphStructureStack::Node>*>,std::reverse_iterator<std::shared_ptr<QP::GraphStructureStack::Node>*>,std::reverse_iterator<std::shared_ptr<QP::GraphStructureStack::Node>*>>((uint64_t)(a1 + 2), (uint64_t)a3, a3, *a1, (void *)*a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>,std::shared_ptr<QP::GraphStructureStack::Node>*,std::shared_ptr<QP::GraphStructureStack::Node>*,std::shared_ptr<QP::GraphStructureStack::Node>*>(v7, (uint64_t)a3, a1[1], (_OWORD *)a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>,std::shared_ptr<QP::GraphStructureStack::Node>*,std::shared_ptr<QP::GraphStructureStack::Node>*,std::shared_ptr<QP::GraphStructureStack::Node>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *uint64_t v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>,std::shared_ptr<QP::GraphStructureStack::Node>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>,std::shared_ptr<QP::GraphStructureStack::Node>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>,std::shared_ptr<QP::GraphStructureStack::Node>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>,std::shared_ptr<QP::GraphStructureStack::Node>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 - 8);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    v1 -= 16;
  }
}

void *std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<QP::GraphStructureStack::Node> *,std::shared_ptr<QP::GraphStructureStack::Node> *,std::shared_ptr<QP::GraphStructureStack::Node> *>(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = a3;
    do
    {
      long long v8 = *((_OWORD *)v7 - 1);
      v7 -= 2;
      *uint64_t v7 = 0;
      v7[1] = 0;
      uint64_t v9 = *(std::__shared_weak_count **)(a4 - 8);
      *(_OWORD *)(a4 - 16) = v8;
      a4 -= 16;
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
    }
    while (v7 != a2);
  }
  return a3;
}

uint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<QP::GraphStructureStack::Node> *,std::shared_ptr<QP::GraphStructureStack::Node> *,std::shared_ptr<QP::GraphStructureStack::Node> *>(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    uint64_t v8 = *v5;
    uint64_t v7 = v5[1];
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = (std::__shared_weak_count *)a4[1];
    *a4 = v8;
    a4[1] = v7;
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    a4 += 2;
    v5 += 2;
  }
  while (v5 != v6);
  return v6;
}

_OWORD *std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>,std::shared_ptr<QP::GraphStructureStack::Node>*,std::shared_ptr<QP::GraphStructureStack::Node>*,std::shared_ptr<QP::GraphStructureStack::Node>*>(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v4 = a4;
  uint64_t v9 = a4;
  uint64_t v8 = a4;
  v6[0] = a1;
  v6[1] = &v8;
  v6[2] = &v9;
  if (a2 != a3)
  {
    do
    {
      *v4++ = *(_OWORD *)a2;
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      a2 += 16;
    }
    while (a2 != a3);
    uint64_t v9 = v4;
  }
  char v7 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>,std::shared_ptr<QP::GraphStructureStack::Node>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v6);
  return v4;
}

long long *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<QP::GraphStructureStack::Node> *,std::shared_ptr<QP::GraphStructureStack::Node> *,std::shared_ptr<QP::GraphStructureStack::Node> *>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      long long v7 = *v5;
      *(void *)uint64_t v5 = 0;
      *((void *)v5 + 1) = 0;
      uint64_t v8 = *(std::__shared_weak_count **)(a4 + 8);
      *(_OWORD *)a4 = v7;
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
      ++v5;
      a4 += 16;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void *std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__init_with_size[abi:ne180100]<std::shared_ptr<QP::GraphStructureStack::Node>*,std::shared_ptr<QP::GraphStructureStack::Node>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>,std::shared_ptr<QP::GraphStructureStack::Node>*,std::shared_ptr<QP::GraphStructureStack::Node>*,std::shared_ptr<QP::GraphStructureStack::Node>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_224D94678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*,false>(uint64_t *a1, long long *a2, uint64_t (**a3)(uint64_t *, uint64_t *), uint64_t a4, char a5)
{
LABEL_1:
  uint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = ((char *)a2 - (char *)v11) >> 4;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if ((*a3)((uint64_t *)a2 - 2, v11))
          {
            uint64_t v22 = *v11;
            uint64_t *v11 = *((void *)a2 - 2);
            *((void *)a2 - 2) = v22;
            uint64_t v23 = v11[1];
            v11[1] = *((void *)a2 - 1);
            *((void *)a2 - 1) = v23;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(v11, v11 + 2, (uint64_t *)a2 - 2, a3);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(v11, v11 + 2, v11 + 4, (uint64_t *)a2 - 2, a3);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(v11, v11 + 2, v11 + 4, v11 + 6, (uint64_t *)a2 - 2, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 383) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != (uint64_t *)a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*,std::shared_ptr<QP::GraphStructureStack::Node>*>((uint64_t)v11, (uint64_t)a2, a2, (unsigned int (**)(long long *, uint64_t))a3);
      }
      return;
    }
    unint64_t v16 = v15 >> 1;
    unint64_t v17 = &v11[2 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(v11, &v11[2 * (v15 >> 1)], (uint64_t *)a2 - 2, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(v11 + 2, v17 - 2, (uint64_t *)a2 - 4, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(v11 + 4, &v11[2 * v16 + 2], (uint64_t *)a2 - 6, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(v17 - 2, v17, &v11[2 * v16 + 2], a3);
      long long v18 = *(_OWORD *)v11;
      *(_OWORD *)uint64_t v11 = *(_OWORD *)v17;
      *(_OWORD *)unint64_t v17 = v18;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(&v11[2 * (v15 >> 1)], v11, (uint64_t *)a2 - 2, a3);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (((*a3)(v11 - 2, v11) & 1) == 0)
    {
      uint64_t v11 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<QP::GraphStructureStack::Node> *,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node>&,std::shared_ptr<QP::GraphStructureStack::Node>&)>((long long *)v11, a2, (uint64_t (**)(long long *, void *))a3);
      goto LABEL_18;
    }
LABEL_13:
    uint64_t v19 = (uint64_t *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<QP::GraphStructureStack::Node> *,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node>&,std::shared_ptr<QP::GraphStructureStack::Node>&)>((long long *)v11, a2, (uint64_t (**)(long long *, long long *))a3);
    if ((v20 & 1) == 0) {
      goto LABEL_16;
    }
    BOOL v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(v11, v19, a3);
    uint64_t v11 = v19 + 2;
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(v19 + 2, (uint64_t *)a2, a3))
    {
      a4 = -v13;
      a2 = (long long *)v19;
      if (v21) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_16:
      std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*,false>(a1, v19, a3, -v13, a5 & 1);
      uint64_t v11 = v19 + 2;
LABEL_18:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>((uint64_t)v11, (uint64_t)a2, (uint64_t (**)(long long *, uint64_t))a3);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>((long long *)v11, a2, (uint64_t (**)(long long *, long long *))a3);
  }
}

  uint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = ((char *)a2 - (char *)v11) >> 4;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if ((*a3)((uint64_t *)a2 - 2, v11))
          {
            uint64_t v22 = *v11;
            uint64_t *v11 = *((void *)a2 - 2);
            *((void *)a2 - 2) = v22;
            uint64_t v23 = v11[1];
            v11[1] = *((void *)a2 - 1);
            *((void *)a2 - 1) = v23;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(v11, v11 + 2, (uint64_t *)a2 - 2, a3);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(v11, v11 + 2, v11 + 4, (uint64_t *)a2 - 2, a3);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(v11, v11 + 2, v11 + 4, v11 + 6, (uint64_t *)a2 - 2, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 383) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != (uint64_t *)a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::ParseAttribute> &,std::shared_ptr<QP::ParseAttribute> &),std::shared_ptr<QP::ParseAttribute>*,std::shared_ptr<QP::ParseAttribute>*>((uint64_t)v11, (uint64_t)a2, a2, (unsigned int (**)(long long *, uint64_t))a3);
      }
      return;
    }
    unint64_t v16 = v15 >> 1;
    unint64_t v17 = &v11[2 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(v11, &v11[2 * (v15 >> 1)], (uint64_t *)a2 - 2, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(v11 + 2, v17 - 2, (uint64_t *)a2 - 4, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(v11 + 4, &v11[2 * v16 + 2], (uint64_t *)a2 - 6, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(v17 - 2, v17, &v11[2 * v16 + 2], a3);
      long long v18 = *(_OWORD *)v11;
      *(_OWORD *)uint64_t v11 = *(_OWORD *)v17;
      *(_OWORD *)unint64_t v17 = v18;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(&v11[2 * (v15 >> 1)], v11, (uint64_t *)a2 - 2, a3);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (((*a3)(v11 - 2, v11) & 1) == 0)
    {
      uint64_t v11 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<QP::ParseAttribute> *,BOOL (*&)(std::shared_ptr<QP::ParseAttribute>&,std::shared_ptr<QP::ParseAttribute>&)>((long long *)v11, a2, (uint64_t (**)(long long *, void *))a3);
      goto LABEL_18;
    }
LABEL_13:
    uint64_t v19 = (uint64_t *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<QP::ParseAttribute> *,BOOL (*&)(std::shared_ptr<QP::ParseAttribute>&,std::shared_ptr<QP::ParseAttribute>&)>((long long *)v11, a2, (uint64_t (**)(long long *, long long *))a3);
    if ((v20 & 1) == 0) {
      goto LABEL_16;
    }
    BOOL v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::ParseAttribute> &,std::shared_ptr<QP::ParseAttribute> &),std::shared_ptr<QP::ParseAttribute>*>(v11, v19, a3);
    uint64_t v11 = v19 + 2;
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::ParseAttribute> &,std::shared_ptr<QP::ParseAttribute> &),std::shared_ptr<QP::ParseAttribute>*>(v19 + 2, (uint64_t *)a2, a3))
    {
      a4 = -v13;
      a2 = (long long *)v19;
      if (v21) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_16:
      std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::ParseAttribute> &,std::shared_ptr<QP::ParseAttribute> &),std::shared_ptr<QP::ParseAttribute>*,false>(a1, v19, a3, -v13, a5 & 1);
      uint64_t v11 = v19 + 2;
LABEL_18:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::ParseAttribute> &,std::shared_ptr<QP::ParseAttribute> &),std::shared_ptr<QP::ParseAttribute>*>((uint64_t)v11, (uint64_t)a2, (uint64_t (**)(long long *, uint64_t))a3);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::ParseAttribute> &,std::shared_ptr<QP::ParseAttribute> &),std::shared_ptr<QP::ParseAttribute>*>((long long *)v11, a2, (uint64_t (**)(long long *, long long *))a3);
  }
}

  uint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = ((char *)a2 - (char *)v11) >> 4;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if ((*a3)((uint64_t *)a2 - 2, v11))
          {
            uint64_t v22 = *v11;
            uint64_t *v11 = *((void *)a2 - 2);
            *((void *)a2 - 2) = v22;
            uint64_t v23 = v11[1];
            v11[1] = *((void *)a2 - 1);
            *((void *)a2 - 1) = v23;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(v11, v11 + 2, (uint64_t *)a2 - 2, a3);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(v11, v11 + 2, v11 + 4, (uint64_t *)a2 - 2, a3);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(v11, v11 + 2, v11 + 4, v11 + 6, (uint64_t *)a2 - 2, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 383) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != (uint64_t *)a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Parse> &,std::shared_ptr<QP::Parse> &),std::shared_ptr<QP::Parse>*,std::shared_ptr<QP::Parse>*>((uint64_t)v11, (uint64_t)a2, a2, (unsigned int (**)(long long *, uint64_t))a3);
      }
      return;
    }
    unint64_t v16 = v15 >> 1;
    unint64_t v17 = &v11[2 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(v11, &v11[2 * (v15 >> 1)], (uint64_t *)a2 - 2, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(v11 + 2, v17 - 2, (uint64_t *)a2 - 4, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(v11 + 4, &v11[2 * v16 + 2], (uint64_t *)a2 - 6, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(v17 - 2, v17, &v11[2 * v16 + 2], a3);
      long long v18 = *(_OWORD *)v11;
      *(_OWORD *)uint64_t v11 = *(_OWORD *)v17;
      *(_OWORD *)unint64_t v17 = v18;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(&v11[2 * (v15 >> 1)], v11, (uint64_t *)a2 - 2, a3);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (((*a3)(v11 - 2, v11) & 1) == 0)
    {
      uint64_t v11 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<QP::Parse> *,BOOL (*&)(std::shared_ptr<QP::Parse>&,std::shared_ptr<QP::Parse>&)>((long long *)v11, a2, (uint64_t (**)(long long *, void *))a3);
      goto LABEL_18;
    }
LABEL_13:
    uint64_t v19 = (uint64_t *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<QP::Parse> *,BOOL (*&)(std::shared_ptr<QP::Parse>&,std::shared_ptr<QP::Parse>&)>((long long *)v11, a2, (uint64_t (**)(long long *, long long *))a3);
    if ((v20 & 1) == 0) {
      goto LABEL_16;
    }
    BOOL v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Parse> &,std::shared_ptr<QP::Parse> &),std::shared_ptr<QP::Parse>*>(v11, v19, a3);
    uint64_t v11 = v19 + 2;
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Parse> &,std::shared_ptr<QP::Parse> &),std::shared_ptr<QP::Parse>*>(v19 + 2, (uint64_t *)a2, a3))
    {
      a4 = -v13;
      a2 = (long long *)v19;
      if (v21) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_16:
      std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Parse> &,std::shared_ptr<QP::Parse> &),std::shared_ptr<QP::Parse>*,false>(a1, v19, a3, -v13, a5 & 1);
      uint64_t v11 = v19 + 2;
LABEL_18:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Parse> &,std::shared_ptr<QP::Parse> &),std::shared_ptr<QP::Parse>*>((uint64_t)v11, (uint64_t)a2, (uint64_t (**)(long long *, uint64_t))a3);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Parse> &,std::shared_ptr<QP::Parse> &),std::shared_ptr<QP::Parse>*>((long long *)v11, a2, (uint64_t (**)(long long *, long long *))a3);
  }
}

  uint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = ((char *)a2 - (char *)v11) >> 4;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if ((*a3)((uint64_t *)a2 - 2, v11))
          {
            uint64_t v22 = *v11;
            uint64_t *v11 = *((void *)a2 - 2);
            *((void *)a2 - 2) = v22;
            uint64_t v23 = v11[1];
            v11[1] = *((void *)a2 - 1);
            *((void *)a2 - 1) = v23;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(v11, v11 + 2, (uint64_t *)a2 - 2, a3);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(v11, v11 + 2, v11 + 4, (uint64_t *)a2 - 2, a3);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(v11, v11 + 2, v11 + 4, v11 + 6, (uint64_t *)a2 - 2, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 383) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != (uint64_t *)a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Lexeme> &,std::shared_ptr<QP::Lexeme> &),std::shared_ptr<QP::Lexeme>*,std::shared_ptr<QP::Lexeme>*>((uint64_t)v11, (uint64_t)a2, a2, (unsigned int (**)(long long *, uint64_t))a3);
      }
      return;
    }
    unint64_t v16 = v15 >> 1;
    unint64_t v17 = &v11[2 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(v11, &v11[2 * (v15 >> 1)], (uint64_t *)a2 - 2, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(v11 + 2, v17 - 2, (uint64_t *)a2 - 4, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(v11 + 4, &v11[2 * v16 + 2], (uint64_t *)a2 - 6, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(v17 - 2, v17, &v11[2 * v16 + 2], a3);
      long long v18 = *(_OWORD *)v11;
      *(_OWORD *)uint64_t v11 = *(_OWORD *)v17;
      *(_OWORD *)unint64_t v17 = v18;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(&v11[2 * (v15 >> 1)], v11, (uint64_t *)a2 - 2, a3);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (((*a3)(v11 - 2, v11) & 1) == 0)
    {
      uint64_t v11 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<QP::Lexeme> *,BOOL (*&)(std::shared_ptr<QP::Lexeme>&,std::shared_ptr<QP::Lexeme>&)>((long long *)v11, a2, (uint64_t (**)(long long *, void *))a3);
      goto LABEL_18;
    }
LABEL_13:
    uint64_t v19 = (uint64_t *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<QP::Lexeme> *,BOOL (*&)(std::shared_ptr<QP::Lexeme>&,std::shared_ptr<QP::Lexeme>&)>((long long *)v11, a2, (uint64_t (**)(long long *, long long *))a3);
    if ((v20 & 1) == 0) {
      goto LABEL_16;
    }
    BOOL v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Lexeme> &,std::shared_ptr<QP::Lexeme> &),std::shared_ptr<QP::Lexeme>*>(v11, v19, a3);
    uint64_t v11 = v19 + 2;
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Lexeme> &,std::shared_ptr<QP::Lexeme> &),std::shared_ptr<QP::Lexeme>*>(v19 + 2, (uint64_t *)a2, a3))
    {
      a4 = -v13;
      a2 = (long long *)v19;
      if (v21) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_16:
      std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Lexeme> &,std::shared_ptr<QP::Lexeme> &),std::shared_ptr<QP::Lexeme>*,false>(a1, v19, a3, -v13, a5 & 1);
      uint64_t v11 = v19 + 2;
LABEL_18:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Lexeme> &,std::shared_ptr<QP::Lexeme> &),std::shared_ptr<QP::Lexeme>*>((uint64_t)v11, (uint64_t)a2, (uint64_t (**)(long long *, uint64_t))a3);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Lexeme> &,std::shared_ptr<QP::Lexeme> &),std::shared_ptr<QP::Lexeme>*>((long long *)v11, a2, (uint64_t (**)(long long *, long long *))a3);
  }
}

  uint64_t v10 = (uint64_t)(a2 - 3);
  uint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (uint64_t)a2 - v11;
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v11) >> 3);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          uint64_t v27 = *a3;
          v43 = 0;
          uint64_t v44 = 0;
          BOOL v42 = 0;
          std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v42, (const void *)*(a2 - 3), *(a2 - 2), (uint64_t)(*(a2 - 2) - *(a2 - 3)) >> 4);
          char v39 = 0;
          long long v40 = 0;
          uint64_t v41 = 0;
          std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v39, *(const void **)v11, *(void *)(v11 + 8), (uint64_t)(*(void *)(v11 + 8) - *(void *)v11) >> 4);
          CFRange v28 = v27(&v42, &v39);
          if (v39)
          {
            long long v40 = v39;
            operator delete(v39);
          }
          if (v42)
          {
            v43 = v42;
            operator delete(v42);
          }
          if (v28)
          {
            uint64_t v29 = *(const void **)v11;
            *(void *)uint64_t v11 = *(a2 - 3);
            *(a2 - 3) = v29;
            uint64_t v30 = *(void *)(v11 + 8);
            *(void *)(v11 + 8) = *(a2 - 2);
            *(a2 - 2) = v30;
            int v31 = *(void *)(v11 + 16);
            *(void *)(v11 + 16) = *(a2 - 1);
            *(a2 - 1) = v31;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*>(v11, v11 + 24, v10, a3);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*>(v11, v11 + 24, v11 + 48, v10, a3);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*>(v11, v11 + 24, v11 + 48, v11 + 72, v10, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 575)
    {
      if (a5) {
        std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*>((void *)v11, a2, a3);
      }
      else {
        std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*>(v11, (uint64_t)a2, a3);
      }
      return;
    }
    if (v13 == 1) {
      break;
    }
    unint64_t v16 = v15 >> 1;
    unint64_t v17 = (_OWORD *)(v11 + 24 * (v15 >> 1));
    if ((unint64_t)v14 >= 0xC01)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*>(v11, v11 + 24 * (v15 >> 1), v10, a3);
      long long v18 = v10;
      uint64_t v19 = v11 + 24 * v16;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*>(v11 + 24, v19 - 24, (uint64_t)(a2 - 6), a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*>(v11 + 48, v11 + 24 + 24 * v16, (uint64_t)(a2 - 9), a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*>(v19 - 24, (uint64_t)v17, v11 + 24 + 24 * v16, a3);
      char v20 = *(_OWORD *)v11;
      *(_OWORD *)uint64_t v11 = *v17;
      uint64_t *v17 = v20;
      BOOL v21 = *(void *)(v11 + 16);
      *(void *)(v11 + 16) = *(void *)(v19 + 16);
      *(void *)(v19 + 16) = v21;
      uint64_t v10 = v18;
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*>(v11 + 24 * (v15 >> 1), v11, v10, a3);
    }
    if ((a5 & 1) == 0)
    {
      uint64_t v22 = *a3;
      uint64_t v37 = 0;
      uint64_t v38 = 0;
      BOOL v36 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v36, *(const void **)(v11 - 24), *(void *)(v11 - 16), (uint64_t)(*(void *)(v11 - 16) - *(void *)(v11 - 24)) >> 4);
      __p = 0;
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&__p, *(const void **)v11, *(void *)(v11 + 8), (uint64_t)(*(void *)(v11 + 8) - *(void *)v11) >> 4);
      uint64_t v23 = v22(&v36, &__p);
      if (__p)
      {
        uint64_t v34 = __p;
        operator delete(__p);
      }
      if (v36)
      {
        uint64_t v37 = v36;
        operator delete(v36);
      }
      if ((v23 & 1) == 0)
      {
        uint64_t v11 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<CFRange> *,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>)>(v11, a2, a3);
        goto LABEL_21;
      }
    }
    uint64_t v24 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<CFRange> *,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>)>(v11, a2, a3);
    if ((v25 & 1) == 0) {
      goto LABEL_19;
    }
    uint64_t v26 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*>(v11, (uint64_t)v24, a3);
    uint64_t v11 = (unint64_t)(v24 + 3);
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*>((uint64_t)(v24 + 3), (uint64_t)a2, a3))
    {
      a4 = -v13;
      a2 = v24;
      if (v26) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v26)
    {
LABEL_19:
      std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*,false>(a1, v24, a3, -v13, a5 & 1);
      uint64_t v11 = (unint64_t)(v24 + 3);
LABEL_21:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if ((void *)v11 != a2) {
    std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*,std::vector<CFRange>*>(v11, (uint64_t)a2, (uint64_t)a2, a3);
  }
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(long long *, uint64_t))
{
  if (a1 != a2)
  {
    char v5 = (long long *)(a1 + 16);
    if (a1 + 16 != a2)
    {
      uint64_t v7 = 0;
      uint64_t v8 = a1;
      do
      {
        uint64_t v9 = v8;
        uint64_t v8 = (uint64_t)v5;
        if ((*a3)(v5, v9))
        {
          long long v18 = *(_OWORD *)v8;
          *(void *)uint64_t v8 = 0;
          *(void *)(v8 + 8) = 0;
          uint64_t v10 = v7;
          while (1)
          {
            uint64_t v11 = a1 + v10;
            long long v12 = *(_OWORD *)(a1 + v10);
            *(void *)uint64_t v11 = 0;
            *(void *)(v11 + 8) = 0;
            uint64_t v13 = *(std::__shared_weak_count **)(a1 + v10 + 24);
            *(_OWORD *)(v11 + 16) = v12;
            if (v13) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v13);
            }
            if (!v10) {
              break;
            }
            char v14 = (*a3)(&v18, a1 + v10 - 16);
            v10 -= 16;
            if ((v14 & 1) == 0)
            {
              uint64_t v15 = a1 + v10 + 16;
              goto LABEL_12;
            }
          }
          uint64_t v15 = a1;
LABEL_12:
          long long v16 = v18;
          long long v18 = 0uLL;
          unint64_t v17 = *(std::__shared_weak_count **)(v15 + 8);
          *(_OWORD *)uint64_t v15 = v16;
          if (v17) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v17);
          }
          if (*((void *)&v18 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v18 + 1));
          }
        }
        char v5 = (long long *)(v8 + 16);
        v7 += 16;
      }
      while (v8 + 16 != a2);
    }
  }
}

void sub_224D94BB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(long long *a1, long long *a2, uint64_t (**a3)(long long *, long long *))
{
  if (a1 != a2)
  {
    uint64_t v4 = a1;
    char v5 = a1 + 1;
    if (a1 + 1 != a2)
    {
      uint64_t v7 = a1 - 1;
      do
      {
        uint64_t v8 = v4;
        uint64_t v4 = v5;
        if ((*a3)(v5, v8))
        {
          long long v15 = *v4;
          *(void *)uint64_t v4 = 0;
          *((void *)v4 + 1) = 0;
          uint64_t v9 = v7;
          do
          {
            long long v10 = v9[1];
            *((void *)v9 + 2) = 0;
            *((void *)v9 + 3) = 0;
            uint64_t v11 = (std::__shared_weak_count *)*((void *)v9 + 5);
            v9[2] = v10;
            if (v11) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v11);
            }
            char v12 = (*a3)(&v15, v9--);
          }
          while ((v12 & 1) != 0);
          long long v13 = v15;
          long long v15 = 0uLL;
          char v14 = (std::__shared_weak_count *)*((void *)v9 + 5);
          v9[2] = v13;
          if (v14) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v14);
          }
          if (*((void *)&v15 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v15 + 1));
          }
        }
        char v5 = v4 + 1;
        ++v7;
      }
      while (v4 + 1 != a2);
    }
  }
}

void sub_224D94CB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t (**a4)(uint64_t *, uint64_t *))
{
  char v8 = (*a4)(a2, a1);
  uint64_t result = (*a4)(a3, a2);
  if (v8)
  {
    uint64_t v10 = *a1;
    if (result)
    {
      *a1 = *a3;
      *a3 = v10;
      uint64_t v11 = a3 + 1;
      uint64_t result = 1;
      char v12 = a1 + 1;
LABEL_9:
      long long v15 = v11;
      goto LABEL_10;
    }
    *a1 = *a2;
    *a2 = v10;
    uint64_t v17 = a1[1];
    a1[1] = a2[1];
    a2[1] = v17;
    if ((*a4)(a3, a2))
    {
      uint64_t v18 = *a2;
      *a2 = *a3;
      *a3 = v18;
      uint64_t v11 = a3 + 1;
      uint64_t result = 2;
      char v12 = a2 + 1;
      goto LABEL_9;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    uint64_t v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    long long v15 = a2 + 1;
    uint64_t v14 = a2[1];
    a2[1] = a3[1];
    a3[1] = v14;
    if ((*a4)(a2, a1))
    {
      uint64_t v16 = *a1;
      *a1 = *a2;
      char v12 = a1 + 1;
      *a2 = v16;
      uint64_t result = 2;
LABEL_10:
      uint64_t v19 = *v12;
      *char v12 = *v15;
      uint64_t *v15 = v19;
      return result;
    }
  }
  return 1;
}

void *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<QP::GraphStructureStack::Node> *,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node>&,std::shared_ptr<QP::GraphStructureStack::Node>&)>(long long *a1, void *a2, uint64_t (**a3)(long long *, void *))
{
  uint64_t v4 = a2;
  long long v17 = *a1;
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  if ((*a3)(&v17, a2 - 2))
  {
    char v6 = a1;
    do
      v6 += 2;
    while (((*a3)(&v17, v6) & 1) == 0);
  }
  else
  {
    uint64_t v7 = a1 + 1;
    do
    {
      char v6 = v7;
      if (v7 >= v4) {
        break;
      }
      int v8 = (*a3)(&v17, v7);
      uint64_t v7 = v6 + 2;
    }
    while (!v8);
  }
  if (v6 < v4)
  {
    do
      v4 -= 2;
    while (((*a3)(&v17, v4) & 1) != 0);
  }
  while (v6 < v4)
  {
    uint64_t v9 = *v6;
    void *v6 = *v4;
    *uint64_t v4 = v9;
    uint64_t v10 = v6[1];
    v6[1] = v4[1];
    v4[1] = v10;
    do
      v6 += 2;
    while (!(*a3)(&v17, v6));
    do
      v4 -= 2;
    while (((*a3)(&v17, v4) & 1) != 0);
  }
  uint64_t v11 = (long long *)(v6 - 2);
  if (v6 - 2 != (void *)a1)
  {
    long long v12 = *v11;
    *(void *)uint64_t v11 = 0;
    *(v6 - 1) = 0;
    uint64_t v13 = (std::__shared_weak_count *)*((void *)a1 + 1);
    *a1 = v12;
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
  }
  long long v14 = v17;
  long long v17 = 0uLL;
  long long v15 = (std::__shared_weak_count *)*(v6 - 1);
  *((_OWORD *)v6 - 1) = v14;
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (*((void *)&v17 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v17 + 1));
  }
  return v6;
}

void sub_224D94F78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

long long *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<QP::GraphStructureStack::Node> *,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node>&,std::shared_ptr<QP::GraphStructureStack::Node>&)>(long long *a1, long long *a2, uint64_t (**a3)(long long *, long long *))
{
  uint64_t v6 = 0;
  long long v19 = *a1;
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  do
    char v7 = (*a3)(&a1[++v6], &v19);
  while ((v7 & 1) != 0);
  unint64_t v8 = (unint64_t)&a1[v6];
  if (v6 == 1)
  {
    do
    {
      if (v8 >= (unint64_t)a2) {
        break;
      }
      --a2;
    }
    while (((*a3)(a2, &v19) & 1) == 0);
  }
  else
  {
    do
      --a2;
    while (!(*a3)(a2, &v19));
  }
  uint64_t v9 = &a1[v6];
  if (v8 < (unint64_t)a2)
  {
    uint64_t v10 = a2;
    do
    {
      uint64_t v11 = *(void *)v9;
      *(void *)uint64_t v9 = *(void *)v10;
      *(void *)uint64_t v10 = v11;
      uint64_t v12 = *((void *)v9 + 1);
      *((void *)v9 + 1) = *((void *)v10 + 1);
      *((void *)v10 + 1) = v12;
      do
        ++v9;
      while (((*a3)(v9, &v19) & 1) != 0);
      do
        --v10;
      while (!(*a3)(v10, &v19));
    }
    while (v9 < v10);
  }
  uint64_t v13 = v9 - 1;
  if (v9 - 1 != a1)
  {
    long long v14 = *v13;
    *(void *)uint64_t v13 = 0;
    *((void *)v9 - 1) = 0;
    long long v15 = (std::__shared_weak_count *)*((void *)a1 + 1);
    *a1 = v14;
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
  }
  long long v16 = v19;
  long long v19 = 0uLL;
  long long v17 = (std::__shared_weak_count *)*((void *)v9 - 1);
  *(v9 - 1) = v16;
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (*((void *)&v19 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v19 + 1));
  }
  return v9 - 1;
}

void sub_224D95114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t v6 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if ((*a3)(a2 - 2, a1))
      {
        uint64_t v8 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v8;
        uint64_t v9 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(a1, a1 + 2, a2 - 2, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(a1, a1 + 2, a1 + 4, a2 - 2, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2, a3);
      return 1;
    default:
      uint64_t v10 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(a1, a1 + 2, a1 + 4, a3);
      uint64_t v11 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v11, v10))
    {
      long long v22 = *(_OWORD *)v11;
      uint64_t *v11 = 0;
      v11[1] = 0;
      uint64_t v14 = v12;
      while (1)
      {
        long long v15 = (char *)a1 + v14;
        long long v16 = *(_OWORD *)((char *)a1 + v14 + 32);
        *((void *)v15 + 4) = 0;
        *((void *)v15 + 5) = 0;
        long long v17 = *(std::__shared_weak_count **)((char *)a1 + v14 + 56);
        *((_OWORD *)v15 + 3) = v16;
        if (v17) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v17);
        }
        if (v14 == -32) {
          break;
        }
        char v18 = (*a3)((uint64_t *)&v22, (uint64_t *)((char *)a1 + v14 + 16));
        v14 -= 16;
        if ((v18 & 1) == 0)
        {
          uint64_t v19 = (uint64_t)a1 + v14 + 48;
          goto LABEL_14;
        }
      }
      uint64_t v19 = (uint64_t)a1;
LABEL_14:
      long long v20 = v22;
      long long v22 = 0uLL;
      BOOL v21 = *(std::__shared_weak_count **)(v19 + 8);
      *(_OWORD *)uint64_t v19 = v20;
      if (v21) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v21);
      }
      if (*((void *)&v22 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v22 + 1));
      }
      if (++v13 == 8) {
        return v11 + 2 == a2;
      }
    }
    uint64_t v10 = v11;
    v12 += 16;
    v11 += 2;
    if (v11 == a2) {
      return 1;
    }
  }
}

void sub_224D95340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t (**a5)(uint64_t *, uint64_t *))
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(a1, a2, a3, a5);
  uint64_t result = (*a5)(a4, a3);
  if (result)
  {
    uint64_t v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    uint64_t v12 = a3[1];
    a3[1] = a4[1];
    a4[1] = v12;
    uint64_t result = (*a5)(a3, a2);
    if (result)
    {
      uint64_t v13 = *a2;
      *a2 = *a3;
      *a3 = v13;
      uint64_t v14 = a2[1];
      a2[1] = a3[1];
      a3[1] = v14;
      uint64_t result = (*a5)(a2, a1);
      if (result)
      {
        uint64_t v15 = *a1;
        *a1 = *a2;
        *a2 = v15;
        uint64_t v16 = a1[1];
        a1[1] = a2[1];
        a2[1] = v16;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t (**a6)(uint64_t *, uint64_t *))
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(a1, a2, a3, a4, a6);
  uint64_t result = (*a6)(a5, a4);
  if (result)
  {
    uint64_t v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    uint64_t v14 = a4[1];
    a4[1] = a5[1];
    a5[1] = v14;
    uint64_t result = (*a6)(a4, a3);
    if (result)
    {
      uint64_t v15 = *a3;
      *a3 = *a4;
      *a4 = v15;
      uint64_t v16 = a3[1];
      a3[1] = a4[1];
      a4[1] = v16;
      uint64_t result = (*a6)(a3, a2);
      if (result)
      {
        uint64_t v17 = *a2;
        *a2 = *a3;
        *a3 = v17;
        uint64_t v18 = a2[1];
        a2[1] = a3[1];
        a3[1] = v18;
        uint64_t result = (*a6)(a2, a1);
        if (result)
        {
          uint64_t v19 = *a1;
          *a1 = *a2;
          *a2 = v19;
          uint64_t v20 = a1[1];
          a1[1] = a2[1];
          a2[1] = v20;
        }
      }
    }
  }
  return result;
}

long long *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*,std::shared_ptr<QP::GraphStructureStack::Node>*>(uint64_t a1, uint64_t a2, long long *a3, unsigned int (**a4)(long long *, uint64_t))
{
  if (a1 != a2)
  {
    uint64_t v6 = a2;
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) >> 4;
    if (a2 - a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = (long long *)(a1 + 16 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = v6;
    if ((long long *)v6 != a3)
    {
      uint64_t v14 = (long long *)v6;
      do
      {
        if ((*a4)(v14, a1))
        {
          uint64_t v15 = *(void *)v14;
          *(void *)uint64_t v14 = *(void *)a1;
          *(void *)a1 = v15;
          uint64_t v16 = *((void *)v14 + 1);
          *((void *)v14 + 1) = *(void *)(a1 + 8);
          *(void *)(a1 + 8) = v16;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(a1, a4, v9, (long long *)a1);
        }
        ++v14;
      }
      while (v14 != a3);
      uint64_t v13 = (uint64_t)a3;
    }
    if (v8 >= 17)
    {
      unint64_t v17 = (unint64_t)v8 >> 4;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>((uint64_t *)a1, v6, (unsigned int (**)(uint64_t, uint64_t))a4, v17);
        v6 -= 16;
      }
      while (v17-- > 2);
    }
    return (long long *)v13;
  }
  return a3;
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(uint64_t a1, unsigned int (**a2)(long long *, uint64_t), uint64_t a3, long long *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    char v5 = a4;
    uint64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - a1) >> 4)
    {
      uint64_t v10 = ((uint64_t)a4 - a1) >> 3;
      uint64_t v11 = v10 + 1;
      uint64_t v12 = (long long *)(a1 + 16 * (v10 + 1));
      uint64_t v13 = v10 + 2;
      if (v10 + 2 < a3 && (*a2)(v12, (uint64_t)(v12 + 1)))
      {
        ++v12;
        uint64_t v11 = v13;
      }
      if ((((uint64_t (*)(long long *, long long *))*a2)(v12, v5) & 1) == 0)
      {
        long long v20 = *v5;
        *(void *)char v5 = 0;
        *((void *)v5 + 1) = 0;
        do
        {
          uint64_t v14 = v12;
          long long v15 = *v12;
          *(void *)uint64_t v12 = 0;
          *((void *)v12 + 1) = 0;
          uint64_t v16 = (std::__shared_weak_count *)*((void *)v5 + 1);
          long long *v5 = v15;
          if (v16) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v16);
          }
          if (v7 < v11) {
            break;
          }
          uint64_t v17 = (2 * v11) | 1;
          uint64_t v12 = (long long *)(a1 + 16 * v17);
          uint64_t v11 = 2 * v11 + 2;
          if (v11 >= a3)
          {
            uint64_t v11 = v17;
          }
          else if ((*a2)((long long *)(a1 + 16 * v17), (uint64_t)(v12 + 1)))
          {
            ++v12;
          }
          else
          {
            uint64_t v11 = v17;
          }
          char v5 = v14;
        }
        while (!(*a2)(v12, (uint64_t)&v20));
        long long v18 = v20;
        long long v20 = 0uLL;
        uint64_t v19 = (std::__shared_weak_count *)*((void *)v14 + 1);
        *uint64_t v14 = v18;
        if (v19) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v19);
        }
        if (*((void *)&v20 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
        }
      }
    }
  }
}

void sub_224D95808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(uint64_t *a1, uint64_t a2, unsigned int (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v8 = *a1;
    uint64_t v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v9 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>((uint64_t)a1, a3, a4);
    uint64_t v10 = (void *)v9;
    if (v9 == a2 - 16)
    {
      long long v15 = *(std::__shared_weak_count **)(v9 + 8);
      *uint64_t v10 = v8;
      v10[1] = v7;
      if (v15)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
    }
    else
    {
      long long v11 = *(_OWORD *)(a2 - 16);
      *(void *)(a2 - 16) = 0;
      *(void *)(a2 - 8) = 0;
      uint64_t v12 = *(std::__shared_weak_count **)(v9 + 8);
      *(_OWORD *)uint64_t v10 = v11;
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
      uint64_t v13 = (uint64_t)(v10 + 2);
      uint64_t v14 = *(std::__shared_weak_count **)(a2 - 8);
      *(void *)(a2 - 16) = v8;
      *(void *)(a2 - 8) = v7;
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>((uint64_t)a1, v13, (uint64_t (**)(long long *, long long *))a3, (v13 - (uint64_t)a1) >> 4);
    }
  }
}

void sub_224D95918(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(uint64_t a1, unsigned int (**a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = a1 + 16 * v6 + 16;
    uint64_t v10 = 2 * v6;
    uint64_t v6 = (2 * v6) | 1;
    uint64_t v11 = v10 + 2;
    if (v10 + 2 < a3 && (*a2)(v9, v9 + 16))
    {
      v9 += 16;
      uint64_t v6 = v11;
    }
    long long v12 = *(_OWORD *)v9;
    *(void *)uint64_t v9 = 0;
    *(void *)(v9 + 8) = 0;
    uint64_t v13 = *(std::__shared_weak_count **)(a1 + 8);
    *(_OWORD *)a1 = v12;
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
    a1 = v9;
  }
  while (v6 <= v8);
  return v9;
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(long long *, long long *), uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v7 = v4 >> 1;
    uint64_t v8 = (long long *)(a1 + 16 * (v4 >> 1));
    uint64_t v9 = (long long *)(a2 - 16);
    if ((*a3)(v8, (long long *)(a2 - 16)))
    {
      long long v15 = *v9;
      *(void *)uint64_t v9 = 0;
      *((void *)v9 + 1) = 0;
      do
      {
        uint64_t v10 = v8;
        long long v11 = *v8;
        *(void *)uint64_t v8 = 0;
        *((void *)v8 + 1) = 0;
        long long v12 = (std::__shared_weak_count *)*((void *)v9 + 1);
        *uint64_t v9 = v11;
        if (v12) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        }
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = (long long *)(a1 + 16 * v7);
        uint64_t v9 = v10;
      }
      while (((*a3)(v8, &v15) & 1) != 0);
      long long v13 = v15;
      long long v15 = 0uLL;
      uint64_t v14 = (std::__shared_weak_count *)*((void *)v10 + 1);
      *uint64_t v10 = v13;
      if (v14)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
        if (*((void *)&v15 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v15 + 1));
        }
      }
    }
  }
}

void sub_224D95AC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<long>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a2);
}

void std::__shared_ptr_emplace<QP::GraphStructureStack::Node>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D8305F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QP::GraphStructureStack::Node>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D8305F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A623E20);
}

void std::__shared_ptr_emplace<QP::GraphStructureStack::Node>::__on_zero_shared(uint64_t a1)
{
}

void QP::GraphStructureStack::Node::~Node(QP::GraphStructureStack::Node *this)
{
  uint64_t v3 = (void **)((char *)this + 64);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void std::default_delete<QP::Branch>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(void **)(a2 + 40);
    if (v2)
    {
      *(void *)(a2 + 48) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x22A623E20);
  }
}

void QP::Transcriber::updateLocale(QP::Transcriber *this, const __CFLocale *a2)
{
  if (a2)
  {
    if (!*(void *)this
      || (CFStringRef v4 = (const __CFString *)MEMORY[0x22A6233E0](),
          CFStringRef v5 = (const __CFString *)MEMORY[0x22A6233E0](a2),
          !CFStringsAreEqual(v4, v5)))
    {
      QP::Transcriber::clear(this);
      CFLocaleRef v6 = (const __CFLocale *)CFRetain(a2);
      *(void *)this = v6;
      v8.CFIndex location = 0;
      v8.CFIndex length = 0;
      *((void *)this + 1) = CFStringTokenizerCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], &stru_26D832058, v8, 0x10000uLL, v6);
    }
  }
  else
  {
    QP::Transcriber::clear(this);
  }
}

QP::Transcriber *QP::Transcriber::Transcriber(QP::Transcriber *this, const __CFLocale *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  QP::Transcriber::updateLocale(this, a2);
  return this;
}

void QP::Transcriber::~Transcriber(QP::Transcriber *this)
{
  uint64_t v2 = *(const void **)this;
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)*((void *)this + 1);
  if (v3) {
    CFRelease(v3);
  }
}

void QP::Transcriber::clear(QP::Transcriber *this)
{
  uint64_t v2 = *(const void **)this;
  if (v2)
  {
    CFRelease(v2);
    *(void *)this = 0;
  }
  uint64_t v3 = (const void *)*((void *)this + 1);
  if (v3)
  {
    CFRelease(v3);
    *((void *)this + 1) = 0;
  }
}

void *QP::NumericConverter::localeIdentifier@<X0>(const __CFLocale **this@<X0>, void *a2@<X8>)
{
  CFLocaleRef v3 = *this;
  if (v3)
  {
    CFStringRef Value = (const __CFString *)CFLocaleGetValue(v3, (CFLocaleKey)*MEMORY[0x263EFFCF0]);
    return QP::getUTF8StringFromCFString(Value, a2);
  }
  else
  {
    return std::string::basic_string[abi:ne180100]<0>(a2, "en");
  }
}

void QP::NumericConverter::numericValueForTypeWithValues(QP::NumericConverter *this@<X0>, const __CFString *a2@<X1>, CFDictionaryRef theDict@<X2>, void *a4@<X8>)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (!a2 || !theDict || !*(void *)this)
  {
    *a4 = 0;
    return;
  }
  CFStringRef v25 = 0;
  if (CFDictionaryContainsKey(theDict, @"DIGITS"))
  {
    CFRange v8 = @"DIGITS";
  }
  else if (CFDictionaryContainsKey(theDict, @"NUMBERS"))
  {
    if (!CFLocaleIsCJ(*(void *)this))
    {
      CFStringRef Value = (const __CFString *)CFDictionaryGetValue(theDict, @"SPELLED");
      CFStringRef v10 = copyTranslatedRomanNumberFromChineseNumberString(Value);
      CFStringRef v25 = v10;
      if (v10) {
        goto LABEL_9;
      }
      goto LABEL_7;
    }
    CFRange v8 = @"NUMBERS";
  }
  else
  {
    if (!CFDictionaryContainsKey(theDict, @"DECIMAL"))
    {
      CFStringRef v10 = 0;
      goto LABEL_9;
    }
    CFRange v8 = @"DECIMAL";
  }
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(theDict, v8);
  CFStringRef v10 = 0;
LABEL_7:
  if (Value)
  {
    CFStringRef v10 = (const __CFString *)CFRetain(Value);
    CFStringRef v25 = v10;
  }
LABEL_9:
  CFIndex Count = CFDictionaryGetCount(theDict);
  uint64_t v12 = Count;
  if (!Count) {
    goto LABEL_17;
  }
  MEMORY[0x270FA5388](Count);
  uint64_t v14 = (const void **)((char *)v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  size_t v15 = v13 >= 0x200 ? 512 : v13;
  bzero((char *)v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v15);
  CFDictionaryGetKeysAndValues(theDict, v14, 0);
  if (v12 < 1) {
    goto LABEL_17;
  }
  while (1)
  {
    CFTypeID v16 = CFGetTypeID(*v14);
    if (v16 == CFStringGetTypeID())
    {
      CFStringRef v17 = (const __CFString *)*v14;
      if (CFStringHasSuffix((CFStringRef)*v14, @"Unit")) {
        break;
      }
    }
    ++v14;
    if (!--v12) {
      goto LABEL_17;
    }
  }
  if (v17)
  {
    for (uint64_t i = 0; i != 5; ++i)
    {
      if (CFStringHasPrefix(a2, QP::NumericConverter::numericValueForTypeWithValues(__CFString const*,__CFDictionary const*)const::intTypes[i]))
      {
        QP::getUTF8StringFromCFString(v17, v23);
        UTF8StringFromCFString = QP::getUTF8StringFromCFString(v25, v21);
        QP::NumericConverter::numericIntForType((uint64_t)UTF8StringFromCFString, v20, (uint64_t)v21);
      }
    }
    QP::getUTF8StringFromCFString(v17, v23);
    CFStringRef v10 = v25;
    QP::getUTF8StringFromCFString(v25, v21);
    QP::NumericConverter::numericDoubleForType((const __CFLocale **)this, (uint64_t)v23, a4);
    if (v22 < 0) {
      operator delete(v21[0]);
    }
    if (v24 < 0) {
      operator delete(v23[0]);
    }
  }
  else
  {
LABEL_17:
    *a4 = 0;
  }
  if (v10) {
    CFRelease(v10);
  }
}

void sub_224D960E8(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 121) < 0) {
    operator delete(*(void **)(v1 - 144));
  }
  if (*(char *)(v1 - 97) < 0) {
    operator delete(*(void **)(v1 - 120));
  }
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v1 - 96), 0);
  _Unwind_Resume(a1);
}

void QP::NumericConverter::numericIntForType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __str = *(std::string *)a3;
  }
  std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_str = &__str;
  }
  else {
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
  }
  CFStringRef v10 = ", ";
  CFStringRef v5 = std::remove_if[abi:ne180100]<std::__wrap_iter<char *>,QP::ValidNumChars>((unsigned __int8 *)p_str, (unsigned __int8 *)p_str + size, (unsigned __int8 **)&v10);
  CFLocaleRef v6 = (char *)&__str + HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    unint64_t v7 = &__str;
  }
  else
  {
    CFLocaleRef v6 = (char *)(__str.__r_.__value_.__r.__words[0] + __str.__r_.__value_.__l.__size_);
    unint64_t v7 = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  std::string::erase(&__str, v5 - (unsigned __int8 *)v7, v6 - (char *)v5);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type v8 = __str.__r_.__value_.__l.__size_;
    if (__str.__r_.__value_.__l.__size_)
    {
      uint64_t v9 = (std::string *)__str.__r_.__value_.__r.__words[0];
      goto LABEL_17;
    }
  }
  else
  {
    std::string::size_type v8 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if (*((unsigned char *)&__str.__r_.__value_.__s + 23))
    {
      uint64_t v9 = &__str;
      do
      {
LABEL_17:
        if (v9->__r_.__value_.__s.__data_[0] < 0
          || (*(_DWORD *)(MEMORY[0x263EF8318] + 4 * v9->__r_.__value_.__s.__data_[0] + 60) & 0x400) == 0)
        {
          goto LABEL_21;
        }
        uint64_t v9 = (std::string *)((char *)v9 + 1);
        --v8;
      }
      while (v8);
      std::stoi(&__str, 0, 10);
    }
  }
LABEL_21:
  operator new();
}

void QP::NumericConverter::numericDoubleForType(const __CFLocale **a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  *(void *)pErrorCode = 0;
  MEMORY[0x270FA5388](a1);
  uint64_t v9 = (UChar *)((char *)&v23 - v8);
  int v10 = *(char *)(v7 + 23);
  if (v10 >= 0) {
    long long v11 = (const char *)v7;
  }
  else {
    long long v11 = *(const char **)v7;
  }
  if (v10 >= 0) {
    int32_t v12 = *(unsigned __int8 *)(v7 + 23);
  }
  else {
    int32_t v12 = *(_DWORD *)(v7 + 8);
  }
  u_strFromUTF8(v9, v6, (int32_t *)pErrorCode, v11, v12, &pErrorCode[1]);
  v9[pErrorCode[0]] = 0;
  QP::NumericConverter::localeIdentifier(a1, &v24);
  uint64_t v13 = unum_open();
  if (v25 < 0) {
    operator delete(v24);
  }
  if (pErrorCode[1] < U_ILLEGAL_ARGUMENT_ERROR)
  {
    unum_parseDouble();
    unum_close();
    if (pErrorCode[1] >= U_ILLEGAL_ARGUMENT_ERROR) {
      goto LABEL_13;
    }
    char v14 = *(unsigned char *)(a2 + 23);
    if (v14 >= 0) {
      uint64_t v15 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v15 = *(void *)(a2 + 8);
    }
    if (v14 >= 0) {
      uint64_t v16 = a2;
    }
    else {
      uint64_t v16 = *(void *)a2;
    }
    if (v15 < 4) {
      goto LABEL_35;
    }
    CFStringRef v17 = (char *)(v16 + v15);
    uint64_t v18 = v15;
    uint64_t v19 = (void *)v16;
    while (1)
    {
      uint64_t v20 = (char *)memchr(v19, 102, v18 - 3);
      if (!v20) {
        goto LABEL_28;
      }
      if (*(_DWORD *)v20 == 1952802150) {
        break;
      }
      uint64_t v19 = v20 + 1;
      uint64_t v18 = v17 - (unsigned char *)v19;
      if (v17 - (unsigned char *)v19 < 4) {
        goto LABEL_28;
      }
    }
    if (v20 == v17 || &v20[-v16] == (char *)-1)
    {
LABEL_28:
      BOOL v21 = (void *)v16;
      while (1)
      {
        char v22 = (char *)memchr(v21, 105, v15 - 3);
        if (!v22) {
          goto LABEL_35;
        }
        if (*(_DWORD *)v22 == 1751346793) {
          break;
        }
        BOOL v21 = v22 + 1;
        uint64_t v15 = v17 - (unsigned char *)v21;
        if (v17 - (unsigned char *)v21 < 4) {
          goto LABEL_35;
        }
      }
      if (v22 == v17 || &v22[-v16] == (char *)-1)
      {
LABEL_35:
        if (std::string::find[abi:ne180100]((uint64_t *)a2, "meter", 0) == -1
          && std::string::find[abi:ne180100]((uint64_t *)a2, "centimeter", 0) == -1
          && std::string::find[abi:ne180100]((uint64_t *)a2, "second", 0) == -1
          && std::string::find[abi:ne180100]((uint64_t *)a2, "minute", 0) == -1
          && std::string::find[abi:ne180100]((uint64_t *)a2, "hour", 0) == -1
          && std::string::find[abi:ne180100]((uint64_t *)a2, "Byte", 0) == -1
          && std::string::find[abi:ne180100]((uint64_t *)a2, "Kilobyte", 0) == -1
          && std::string::find[abi:ne180100]((uint64_t *)a2, "Megabyte", 0) == -1)
        {
          std::string::find[abi:ne180100]((uint64_t *)a2, "Gigabyte", 0);
        }
      }
    }
    operator new();
  }
  if (v13) {
    unum_close();
  }
LABEL_13:
  *a3 = 0;
}

void sub_224D96848(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void *)(v2 - 128);
  *(void *)(v2 - 128) = 0;
  if (v4) {
    MEMORY[0x22A623E20](v4, 0x1000C40504FFAC1);
  }
  MEMORY[0x22A623E20](v1, 0x20C40DC1BFBCFLL);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::remove_if[abi:ne180100]<std::__wrap_iter<char *>,QP::ValidNumChars>(unsigned __int8 *result, unsigned __int8 *a2, unsigned __int8 **a3)
{
  if (result == a2) {
    return a2;
  }
  while (1)
  {
    CFLocaleRef v3 = *a3;
    do
    {
      int v5 = *v3++;
      int v4 = v5;
    }
    while (v5 != *result && v4 != 0);
    if (v4) {
      break;
    }
    if (++result == a2)
    {
      uint64_t result = a2;
      break;
    }
  }
  if (result != a2)
  {
    for (uint64_t i = result + 1; i != a2; ++i)
    {
      int v8 = *i;
      uint64_t v9 = *a3;
      do
      {
        int v11 = *v9++;
        int v10 = v11;
      }
      while (v11 != v8 && v10 != 0);
      if (!v10) {
        *result++ = v8;
      }
    }
  }
  return result;
}

unint64_t std::string::find[abi:ne180100](uint64_t *a1, char *__s, unint64_t a3)
{
  uint64_t v5 = (uint64_t)a1;
  if (*((char *)a1 + 23) < 0)
  {
    uint64_t v5 = *a1;
    unint64_t v6 = a1[1];
  }
  else
  {
    unint64_t v6 = *((unsigned __int8 *)a1 + 23);
  }
  size_t v7 = strlen(__s);
  if (v6 < a3) {
    return -1;
  }
  int64_t v8 = v7;
  if (v7)
  {
    uint64_t v9 = (void *)(v5 + a3);
    int v10 = (char *)(v5 + v6);
    int64_t v11 = v6 - a3;
    if ((uint64_t)(v6 - a3) >= v8)
    {
      int v14 = *__s;
      do
      {
        uint64_t v15 = v11 - v8;
        if (v15 == -1) {
          break;
        }
        uint64_t v16 = (char *)memchr(v9, v14, v15 + 1);
        if (!v16) {
          break;
        }
        int32_t v12 = v16;
        if (!memcmp(v16, __s, v8)) {
          goto LABEL_9;
        }
        uint64_t v9 = v12 + 1;
        int64_t v11 = v10 - (v12 + 1);
      }
      while (v11 >= v8);
    }
    int32_t v12 = v10;
LABEL_9:
    if (v12 == v10) {
      return -1;
    }
    else {
      return (unint64_t)&v12[-v5];
    }
  }
  return a3;
}

void std::__shared_ptr_pointer<QP::NumericInterval<int> *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A623E20);
}

uint64_t std::__shared_ptr_pointer<QP::NumericInterval<int> *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    JUMPOUT(0x22A623E20);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<QP::NumericInterval<int> *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

void *QP::NumericValue::NumericValue(void *a1, uint64_t *a2)
{
  *a1 = 0;
  a1[1] = 0;
  std::shared_ptr<QP::NumericInterval<double>>::shared_ptr[abi:ne180100]<QP::NumericInterval<double>,std::default_delete<QP::NumericInterval<double>>,void>(a1 + 2, a2);
  return a1;
}

void sub_224D96B38(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::shared_ptr<QP::NumericInterval<double>>::shared_ptr[abi:ne180100]<QP::NumericInterval<double>,std::default_delete<QP::NumericInterval<double>>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *uint64_t result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

void std::__shared_ptr_pointer<QP::NumericInterval<double> *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A623E20);
}

uint64_t std::__shared_ptr_pointer<QP::NumericInterval<double> *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    JUMPOUT(0x22A623E20);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<QP::NumericInterval<double> *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

BOOL QP::parse_attr_less_than_range(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  unint64_t v3 = *a2;
  if (!*a2) {
    return 0;
  }
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v4 = *(void *)(v2 + 24);
  uint64_t v7 = *(void *)(v3 + 16);
  uint64_t v6 = *(void *)(v3 + 24);
  if (v5 == v7 && v4 == v6) {
    return v2 > v3;
  }
  if (v5 == v7) {
    return v4 > v6;
  }
  return v5 < v7;
}

BOOL QP::best_parse(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  BOOL result = *(void *)(*a1 + 88) != 0;
  uint64_t v4 = *a2;
  if (result == (*(void *)(*a2 + 88) != 0))
  {
    uint64_t v5 = *(void *)(v2 + 32) - *(void *)(v2 + 40);
    uint64_t v6 = *(void *)(v4 + 32) - *(void *)(v4 + 40);
    if (v5 == v6)
    {
      BOOL result = *(unsigned char *)(v2 + 82) != 0;
      if ((*(unsigned char *)(v2 + 82) != 0) == (*(unsigned char *)(v4 + 82) != 0))
      {
        uint64_t v7 = *(void *)(v2 + 56);
        uint64_t v8 = *(void *)(v4 + 56);
        if (v7 == v8)
        {
          int v9 = *(unsigned __int8 *)(v2 + 80);
          BOOL result = v9 != 0;
          if (v9) {
            return !*(unsigned char *)(v4 + 80) && v9 != 0;
          }
        }
        else
        {
          return v7 > v8;
        }
      }
    }
    else
    {
      return v5 < v6;
    }
  }
  return result;
}

void QP::Parse::enumerateParseAttributes(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 8);
  for (uint64_t i = *(uint64_t **)(a1 + 16); v2 != i; v2 += 2)
  {
    uint64_t v5 = *v2;
    uint64_t v6 = (std::__shared_weak_count *)v2[1];
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v8 = v6;
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v8 = 0;
    }
    uint64_t v7 = v5;
    (*(void (**)(uint64_t, uint64_t *))(a2 + 16))(a2, &v7);
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_224D96E08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t QP::Parser::mergeActions(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if ((unint64_t)(v2 - *a2) < 0x20 || v3 == v2) {
    return 1;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  do
  {
    uint64_t v8 = v7;
    int v9 = QP::ParseAttribute::flag(*(QP::ParseAttribute **)v3);
    int v10 = *(QP::ParseAttribute **)v3;
    if (v9 == 10)
    {
      uint64_t v7 = *(std::__shared_weak_count **)(v3 + 8);
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v8) {
        goto LABEL_16;
      }
    }
    else
    {
      if (QP::ParseAttribute::flag(*(QP::ParseAttribute **)v3) != 1) {
        goto LABEL_15;
      }
      int64_t v11 = *(QP::ParseAttribute **)v3;
      if (*(unsigned char *)(*(void *)v3 + 73)) {
        goto LABEL_15;
      }
      if (v6)
      {
        unsigned int v12 = *((unsigned __int16 *)v6 + 16);
        uint64_t v13 = *(void *)(a1 + 16);
        int v14 = std::__shared_weak_count::lock(*((std::__shared_weak_count **)v6 + 14));
        unsigned __int16 v15 = QP::ParserGrammar::symbolID(v13, *((void *)v6 + 13));
        QP::ParseAttribute::addAction(v11, v12, v15);
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
LABEL_15:
        uint64_t v7 = 0;
        int v10 = 0;
        if (!v8) {
          goto LABEL_17;
        }
LABEL_16:
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        goto LABEL_17;
      }
      int v10 = 0;
    }
LABEL_17:
    v3 += 16;
    uint64_t v6 = v10;
  }
  while (v3 != v2);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  return 1;
}

void sub_224D96F58(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(a1);
}

uint64_t QP::ParseAttribute::flag(QP::ParseAttribute *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 14);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *((void *)this + 13);
  if (v4) {
    uint64_t v5 = *(unsigned __int16 *)(v4 + 88);
  }
  else {
    uint64_t v5 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  return v5;
}

uint64_t **QP::ParseAttribute::addAction(QP::ParseAttribute *this, unsigned int a2, unsigned __int16 a3)
{
  unsigned __int16 v19 = a2;
  unsigned __int16 v18 = a3;
  uint64_t v5 = (char *)*((void *)this + 11);
  uint64_t v3 = (char *)this + 88;
  uint64_t v4 = (char **)v5;
  uint64_t v6 = (uint64_t **)(v3 - 8);
  if (!v5) {
    goto LABEL_12;
  }
  uint64_t v7 = v3;
  do
  {
    unsigned int v8 = *((unsigned __int16 *)v4 + 16);
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      int v10 = v4;
    }
    else {
      int v10 = v4 + 1;
    }
    if (v9) {
      uint64_t v7 = (char *)v4;
    }
    uint64_t v4 = (char **)*v10;
  }
  while (*v10);
  if (v7 == v3 || *((unsigned __int16 *)v7 + 16) > a2)
  {
LABEL_12:
    v14[0] = 0;
    v14[1] = 0;
    uint64_t v13 = v14;
    LOWORD(v15) = a2;
    v17[0] = 0;
    v17[1] = 0;
    uint64_t v16 = v17;
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__emplace_unique_key_args<unsigned short,std::pair<unsigned short,std::set<unsigned short>>>((uint64_t)(v3 - 8), (unsigned __int16 *)&v15, (uint64_t)&v15);
    std::__tree<unsigned short>::destroy((uint64_t)&v16, v17[0]);
    std::__tree<unsigned short>::destroy((uint64_t)&v13, v14[0]);
  }
  unsigned __int16 v15 = &v19;
  int64_t v11 = std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(v6, &v19, (uint64_t)&std::piecewise_construct, &v15);
  return std::__tree<unsigned short>::__emplace_unique_key_args<unsigned short,unsigned short const&>(v11 + 5, &v18, &v18);
}

void sub_224D970BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  std::__tree<unsigned short>::destroy(v14, a14);
  std::__tree<unsigned short>::destroy((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

uint64_t QP::Parser::mergeDates(uint64_t a1, QP::ParseAttribute ***a2)
{
  v217[0] = 1;
  uint64_t v3 = *a2;
  uint64_t v2 = (uint64_t *)a2[1];
  if ((unint64_t)((char *)v2 - (char *)*a2) < 0x20)
  {
    if (v3 == (QP::ParseAttribute **)v2) {
      return 1;
    }
    while (1)
    {
      uint64_t v4 = *v3;
      uint64_t v5 = std::__shared_weak_count::lock(*((std::__shared_weak_count **)*v3 + 14));
      if (*(unsigned __int16 *)(*((void *)v4 + 13) + 88) - 1 > 3) {
        goto LABEL_29;
      }
      uint64_t v6 = *v3;
      uint64_t v7 = (std::__shared_weak_count *)*((void *)*v3 + 14);
      if (!v7) {
        goto LABEL_29;
      }
      unsigned int v8 = std::__shared_weak_count::lock(v7);
      if (!v8) {
        goto LABEL_29;
      }
      uint64_t v9 = *((void *)v6 + 13);
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      if (v9) {
        break;
      }
LABEL_30:
      v3 += 2;
      if (v3 == (QP::ParseAttribute **)v2) {
        return 1;
      }
    }
    int v10 = *v3;
    int64_t v11 = std::__shared_weak_count::lock(*((std::__shared_weak_count **)*v3 + 14));
    uint64_t v5 = v11;
    uint64_t v12 = *((void *)v10 + 13);
    uint64_t v13 = *(void *)(v12 + 120);
    uint64_t v14 = *(std::__shared_weak_count **)(v12 + 128);
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v13)
    {
      v172 = v11;
      if ((unsigned __int16)(*(_WORD *)(v13 + 12) - 1) > 7u) {
        int v15 = 0;
      }
      else {
        int v15 = dword_224E1E1B0[(__int16)(*(_WORD *)(v13 + 12) - 1)];
      }
      *(_DWORD *)(v13 + 16) = v15;
      uint64_t v16 = *(void **)(a1 + 32);
      CFStringRef v17 = *v3;
      uint64_t v213 = 0;
      v214 = 0;
      unsigned __int16 v18 = (std::__shared_weak_count *)*((void *)v17 + 14);
      if (v18)
      {
        v214 = std::__shared_weak_count::lock(v18);
        if (v214) {
          uint64_t v213 = *((void *)v17 + 13);
        }
      }
      QP::Lexer::resolve(v16, &v213, *((unsigned __int16 *)*v3 + 18), v217, &v215);
      uint64_t v5 = v172;
      if (v214) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v214);
      }
      uint64_t v19 = v215;
      if (v215)
      {
        uint64_t v20 = *v3;
        BOOL v21 = v216;
        if (v216)
        {
          atomic_fetch_add_explicit(&v216->__shared_owners_, 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit(&v21->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        char v22 = (std::__shared_weak_count *)*((void *)v20 + 14);
        *((void *)v20 + 13) = v19;
        *((void *)v20 + 14) = v21;
        if (v22) {
          std::__shared_weak_count::__release_weak(v22);
        }
        if (v21) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v21);
        }
      }
      if (v216) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v216);
      }
    }
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
LABEL_29:
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    goto LABEL_30;
  }
  if (v3 == (QP::ParseAttribute **)v2)
  {
    v105 = 0;
    v101 = 0;
    v106 = 0;
    v161 = 0;
    v162 = 0;
    v100 = 0;
    v99 = 0;
    v165 = 0;
    v171 = 0;
    v173 = 0;
    uint64_t v27 = 0;
    v167 = 0;
    goto LABEL_398;
  }
  int v168 = 0;
  char v24 = 0;
  v173 = 0;
  v152 = 0;
  v153 = 0;
  v164 = 0;
  v165 = 0;
  v155 = 0;
  v157 = 0;
  v150 = 0;
  v151 = 0;
  v161 = 0;
  v162 = 0;
  v149 = 0;
  v159 = 0;
  v163 = 0;
  char v25 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  v166 = 0;
  v167 = 0;
  do
  {
    CFRange v28 = *v3;
    uint64_t v29 = std::__shared_weak_count::lock(*((std::__shared_weak_count **)*v3 + 14));
    if (*(unsigned __int16 *)(*((void *)v28 + 13) + 88) - 1 <= 3)
    {
      uint64_t v30 = *v3;
      int v31 = (std::__shared_weak_count *)*((void *)*v3 + 14);
      if (v31)
      {
        char v32 = std::__shared_weak_count::lock(v31);
        if (v32)
        {
          uint64_t v33 = *((void *)v30 + 13);
          std::__shared_weak_count::__release_shared[abi:ne180100](v32);
          std::__shared_weak_count::__release_shared[abi:ne180100](v29);
          if (!v33) {
            goto LABEL_63;
          }
          v169 = v24;
          int v34 = QP::ParseAttribute::flag(*v3);
          int v35 = QP::ParseAttribute::flag(*v3);
          BOOL v36 = *v3;
          uint64_t v29 = std::__shared_weak_count::lock(*((std::__shared_weak_count **)*v3 + 14));
          uint64_t v37 = *((void *)v36 + 13);
          uint64_t v38 = *(void *)(v37 + 120);
          char v39 = *(std::__shared_weak_count **)(v37 + 128);
          if (v39) {
            atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (!v38) {
            goto LABEL_119;
          }
          v170 = v25;
          if (v35 == 3)
          {
            if (v26)
            {
              long long v40 = *(void **)(a1 + 32);
              uint64_t v41 = *v3;
              uint64_t v211 = 0;
              v212 = 0;
              BOOL v42 = (std::__shared_weak_count *)*((void *)v41 + 14);
              if (v42)
              {
                v212 = std::__shared_weak_count::lock(v42);
                if (v212) {
                  uint64_t v211 = *((void *)v41 + 13);
                }
              }
              uint64_t v209 = 0;
              v210 = 0;
              v43 = (std::__shared_weak_count *)*((void *)v26 + 14);
              if (v43)
              {
                v210 = std::__shared_weak_count::lock(v43);
                if (v210) {
                  uint64_t v209 = *((void *)v26 + 13);
                }
              }
              QP::Lexer::merge(v40, &v211, &v209, &v215);
              if (v210) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v210);
              }
              if (v212) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v212);
              }
              uint64_t v44 = v215;
              if (v215)
              {
                v45 = v216;
                if (v216)
                {
                  atomic_fetch_add_explicit(&v216->__shared_owners_, 1uLL, memory_order_relaxed);
                  atomic_fetch_add_explicit(&v45->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                }
                char v46 = (std::__shared_weak_count *)*((void *)v26 + 14);
                *((void *)v26 + 13) = v44;
                *((void *)v26 + 14) = v45;
                if (v46) {
                  std::__shared_weak_count::__release_weak(v46);
                }
                if (v45) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v45);
                }
                QP::ParseAttribute::setShouldIgnore((std::string *)*v3, 1);
              }
              else
              {
                v217[0] = 0;
                ++v168;
              }
              char v25 = v170;
              if (v167) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v167);
              }
              if (v216) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v216);
              }
              v166 = 0;
              v167 = 0;
LABEL_119:
              uint64_t v47 = v27;
              uint64_t v48 = v26;
              goto LABEL_120;
            }
            v65 = (std::__shared_weak_count *)v3[1];
            v166 = *v3;
            if (v65) {
              atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v167) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v167);
            }
            uint64_t v48 = 0;
            v167 = v65;
            uint64_t v47 = v27;
            char v25 = v170;
LABEL_112:
            ++v168;
LABEL_120:
            if (v39) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v39);
            }
            char v24 = v169;
            goto LABEL_62;
          }
          if (v34 == 2)
          {
            if (v166)
            {
              uint64_t v49 = *(void **)(a1 + 32);
              BOOL v50 = *v3;
              uint64_t v207 = 0;
              v208 = 0;
              uint64_t v51 = (std::__shared_weak_count *)*((void *)v50 + 14);
              if (v51)
              {
                v208 = std::__shared_weak_count::lock(v51);
                if (v208) {
                  uint64_t v207 = *((void *)v50 + 13);
                }
              }
              uint64_t v205 = 0;
              v206 = 0;
              v52 = (std::__shared_weak_count *)*((void *)v166 + 14);
              if (v52)
              {
                v206 = std::__shared_weak_count::lock(v52);
                if (v206) {
                  uint64_t v205 = *((void *)v166 + 13);
                }
              }
              char v25 = v170;
              QP::Lexer::merge(v49, &v207, &v205, &v215);
              if (v206) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v206);
              }
              if (v208) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v208);
              }
              uint64_t v53 = v215;
              if (v215)
              {
                v54 = *v3;
                v55 = v216;
                if (v216)
                {
                  atomic_fetch_add_explicit(&v216->__shared_owners_, 1uLL, memory_order_relaxed);
                  atomic_fetch_add_explicit(&v55->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                }
                int v56 = (std::__shared_weak_count *)*((void *)v54 + 14);
                *((void *)v54 + 13) = v53;
                *((void *)v54 + 14) = v55;
                if (v56) {
                  std::__shared_weak_count::__release_weak(v56);
                }
                if (v55) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v55);
                }
                QP::ParseAttribute::setShouldIgnore((std::string *)v166, 1);
              }
              else
              {
                v217[0] = 0;
                ++v168;
              }
              if (v167) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v167);
              }
              uint64_t v48 = *v3;
              uint64_t v47 = (std::__shared_weak_count *)v3[1];
              if (v47) {
                atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              if (v27) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v27);
              }
              if (v216) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v216);
              }
              v166 = 0;
              v167 = 0;
              goto LABEL_120;
            }
            if (v163)
            {
              if (v26)
              {
                v66 = *(void **)(a1 + 32);
                uint64_t v203 = 0;
                v204 = 0;
                v67 = (std::__shared_weak_count *)*((void *)v163 + 14);
                if (v67)
                {
                  v204 = std::__shared_weak_count::lock(v67);
                  if (v204) {
                    uint64_t v203 = *((void *)v163 + 13);
                  }
                }
                uint64_t v201 = 0;
                v202 = 0;
                id v68 = (std::__shared_weak_count *)*((void *)v26 + 14);
                if (v68)
                {
                  v202 = std::__shared_weak_count::lock(v68);
                  if (v202) {
                    uint64_t v201 = *((void *)v26 + 13);
                  }
                }
                QP::Lexer::merge(v66, &v203, &v201, &v215);
                if (v202) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v202);
                }
                if (v204) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v204);
                }
                uint64_t v69 = v215;
                if (v215)
                {
                  v70 = v216;
                  if (v216)
                  {
                    atomic_fetch_add_explicit(&v216->__shared_owners_, 1uLL, memory_order_relaxed);
                    atomic_fetch_add_explicit(&v70->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                  }
                  v71 = (std::__shared_weak_count *)*((void *)v163 + 14);
                  *((void *)v163 + 13) = v69;
                  *((void *)v163 + 14) = v70;
                  if (v71) {
                    std::__shared_weak_count::__release_weak(v71);
                  }
                  if (v70) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v70);
                  }
                  QP::ParseAttribute::setShouldIgnore((std::string *)v26, 1);
                }
                else
                {
                  v217[0] = 0;
                  ++v168;
                }
                if (v170) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v170);
                }
                uint64_t v48 = *v3;
                uint64_t v47 = (std::__shared_weak_count *)v3[1];
                if (v47) {
                  atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                if (v27) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v27);
                }
                if (v216) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v216);
                }
                v166 = 0;
                char v25 = 0;
                v163 = 0;
              }
              else
              {
                uint64_t v48 = *v3;
                if (*((unsigned __int16 *)*v3 + 18) > 3u)
                {
                  v93 = (std::__shared_weak_count *)v3[1];
                  if (v93) {
                    atomic_fetch_add_explicit(&v93->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  if (v27) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
                  }
                  v94 = (std::__shared_weak_count *)v3[1];
                  v152 = *v3;
                  if (v94) {
                    atomic_fetch_add_explicit(&v94->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  if (v165) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v165);
                  }
                  uint64_t v27 = v93;
                  v165 = v94;
                  ++v168;
                  v95 = v170;
                }
                else
                {
                  v78 = *(void **)(a1 + 32);
                  uint64_t v199 = 0;
                  v200 = 0;
                  v79 = (std::__shared_weak_count *)*((void *)v163 + 14);
                  if (v79)
                  {
                    v200 = std::__shared_weak_count::lock(v79);
                    if (v200) {
                      uint64_t v199 = *((void *)v163 + 13);
                    }
                  }
                  v80 = *v3;
                  uint64_t v197 = 0;
                  v198 = 0;
                  uint64_t v81 = (std::__shared_weak_count *)*((void *)v80 + 14);
                  if (v81)
                  {
                    v198 = std::__shared_weak_count::lock(v81);
                    if (v198) {
                      uint64_t v197 = *((void *)v80 + 13);
                    }
                  }
                  QP::Lexer::merge(v78, &v199, &v197, &v215);
                  if (v198) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v198);
                  }
                  if (v200) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v200);
                  }
                  uint64_t v82 = v215;
                  if (v215)
                  {
                    dispatch_time_t v83 = v216;
                    if (v216)
                    {
                      atomic_fetch_add_explicit(&v216->__shared_owners_, 1uLL, memory_order_relaxed);
                      atomic_fetch_add_explicit(&v83->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                    }
                    __int16 v84 = (std::__shared_weak_count *)*((void *)v163 + 14);
                    *((void *)v163 + 13) = v82;
                    *((void *)v163 + 14) = v83;
                    if (v84) {
                      std::__shared_weak_count::__release_weak(v84);
                    }
                    if (v83) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v83);
                    }
                    QP::ParseAttribute::setShouldIgnore((std::string *)*v3, 1);
                  }
                  else
                  {
                    v217[0] = 0;
                    ++v168;
                  }
                  v95 = v170;
                  if (v216) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v216);
                  }
                  uint64_t v48 = 0;
                }
                if (v95) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v95);
                }
                v166 = 0;
                char v25 = 0;
                v163 = 0;
                uint64_t v47 = v27;
              }
              goto LABEL_120;
            }
            if (v26)
            {
              if (v27) {
                atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              if (v165) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v165);
              }
              uint64_t v48 = *v3;
              uint64_t v47 = (std::__shared_weak_count *)v3[1];
              if (v47) {
                atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              if (v27)
              {
                std::__shared_weak_count::__release_shared[abi:ne180100](v27);
                v165 = v27;
                v166 = 0;
              }
              else
              {
                v165 = 0;
                v166 = 0;
              }
              v163 = 0;
              v152 = v26;
            }
            else
            {
              uint64_t v48 = *v3;
              uint64_t v47 = (std::__shared_weak_count *)v3[1];
              if (v47) {
                atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              if (v27) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v27);
              }
              char v92 = (std::__shared_weak_count *)v3[1];
              v152 = *v3;
              if (v92) {
                atomic_fetch_add_explicit(&v92->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              if (v165) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v165);
              }
              v165 = v92;
              v166 = 0;
              v163 = 0;
            }
            goto LABEL_112;
          }
          if (v26)
          {
            v57 = *v3;
            if (*((unsigned __int16 *)*v3 + 18) > 3u)
            {
              if (v27) {
                atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              if (v165) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v165);
              }
              v165 = v27;
              v152 = v26;
              ++v168;
            }
            else
            {
              dispatch_time_t v58 = *(void **)(a1 + 32);
              uint64_t v195 = 0;
              v196 = 0;
              v59 = (std::__shared_weak_count *)*((void *)v57 + 14);
              if (v59)
              {
                v196 = std::__shared_weak_count::lock(v59);
                if (v196) {
                  uint64_t v195 = *((void *)v57 + 13);
                }
              }
              uint64_t v193 = 0;
              v194 = 0;
              v60 = (std::__shared_weak_count *)*((void *)v26 + 14);
              if (v60)
              {
                v194 = std::__shared_weak_count::lock(v60);
                if (v194) {
                  uint64_t v193 = *((void *)v26 + 13);
                }
              }
              QP::Lexer::merge(v58, &v195, &v193, &v215);
              if (v194) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v194);
              }
              if (v196) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v196);
              }
              uint64_t v61 = v215;
              if (v215)
              {
                uint64_t v62 = *v3;
                uint64_t v63 = v216;
                if (v216)
                {
                  atomic_fetch_add_explicit(&v216->__shared_owners_, 1uLL, memory_order_relaxed);
                  atomic_fetch_add_explicit(&v63->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                }
                dispatch_time_t v64 = (std::__shared_weak_count *)*((void *)v62 + 14);
                *((void *)v62 + 13) = v61;
                *((void *)v62 + 14) = v63;
                if (v64) {
                  std::__shared_weak_count::__release_weak(v64);
                }
                if (v63) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v63);
                }
                QP::ParseAttribute::setModifier((uint64_t)*v3, *((_WORD *)v26 + 18));
                QP::ParseAttribute::setShouldIgnore((std::string *)v26, 1);
                if (v165) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v165);
                }
                v165 = 0;
                v152 = 0;
              }
              else
              {
                v217[0] = 0;
                ++v168;
              }
              if (v216) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v216);
              }
            }
            if (v27) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v27);
            }
            uint64_t v47 = 0;
          }
          else
          {
            if (v163)
            {
              if (v166)
              {
                id v72 = *(void **)(a1 + 32);
                uint64_t v191 = 0;
                v192 = 0;
                id v73 = (std::__shared_weak_count *)*((void *)v163 + 14);
                if (v73)
                {
                  v192 = std::__shared_weak_count::lock(v73);
                  if (v192) {
                    uint64_t v191 = *((void *)v163 + 13);
                  }
                }
                uint64_t v189 = 0;
                v190 = 0;
                uint64_t v74 = (std::__shared_weak_count *)*((void *)v166 + 14);
                if (v74)
                {
                  v190 = std::__shared_weak_count::lock(v74);
                  if (v190) {
                    uint64_t v189 = *((void *)v166 + 13);
                  }
                }
                QP::Lexer::merge(v72, &v191, &v189, &v215);
                if (v190) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v190);
                }
                if (v192) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v192);
                }
                uint64_t v75 = v215;
                if (v215)
                {
                  uint64_t v76 = v216;
                  if (v216)
                  {
                    atomic_fetch_add_explicit(&v216->__shared_owners_, 1uLL, memory_order_relaxed);
                    atomic_fetch_add_explicit(&v76->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                  }
                  v77 = (std::__shared_weak_count *)*((void *)v163 + 14);
                  *((void *)v163 + 13) = v75;
                  *((void *)v163 + 14) = v76;
                  if (v77) {
                    std::__shared_weak_count::__release_weak(v77);
                  }
                  if (v76) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v76);
                  }
                  QP::ParseAttribute::setShouldIgnore((std::string *)v166, 1);
                }
                else
                {
                  v217[0] = 0;
                  ++v168;
                }
                if (v167) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v167);
                }
                if (v216) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v216);
                }
                v166 = 0;
                v167 = 0;
                uint64_t v47 = v27;
                goto LABEL_230;
              }
              v166 = 0;
            }
            uint64_t v47 = v27;
            ++v168;
          }
LABEL_230:
          char v25 = (std::__shared_weak_count *)v3[1];
          v163 = *v3;
          if (v25) {
            atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v170) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v170);
          }
          uint64_t v48 = 0;
          uint64_t v85 = *v3;
          switch(*((_WORD *)*v3 + 18))
          {
            case 1:
              uint64_t v88 = (std::__shared_weak_count *)v3[1];
              if (v88) {
                atomic_fetch_add_explicit(&v88->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              if (v173) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v173);
              }
              uint64_t v48 = 0;
              v173 = v88;
              v169 = v85;
              break;
            case 2:
            case 3:
              uint64_t v86 = (std::__shared_weak_count *)v3[1];
              if (v86) {
                atomic_fetch_add_explicit(&v86->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              if (v157) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v157);
              }
              uint64_t v48 = 0;
              v157 = v86;
              v153 = v85;
              break;
            case 5:
              v89 = (std::__shared_weak_count *)v3[1];
              if (v89) {
                atomic_fetch_add_explicit(&v89->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              if (v162) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v162);
              }
              uint64_t v48 = 0;
              v162 = v89;
              v151 = (std::string *)v85;
              break;
            case 6:
              v90 = (std::__shared_weak_count *)v3[1];
              if (v90) {
                atomic_fetch_add_explicit(&v90->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              if (v155) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v155);
              }
              uint64_t v48 = 0;
              v155 = v90;
              v149 = v85;
              break;
            case 7:
              v87 = (std::__shared_weak_count *)v3[1];
              if (v87) {
                atomic_fetch_add_explicit(&v87->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              if (v161) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v161);
              }
              uint64_t v48 = 0;
              v161 = v87;
              v150 = v85;
              break;
            case 8:
              uint64_t v91 = (std::__shared_weak_count *)v3[1];
              if (v91) {
                atomic_fetch_add_explicit(&v91->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              if (v159) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v159);
              }
              uint64_t v48 = 0;
              v159 = v91;
              v164 = (std::string *)v85;
              break;
            default:
              goto LABEL_120;
          }
          goto LABEL_120;
        }
      }
    }
    uint64_t v47 = v27;
    uint64_t v48 = v26;
LABEL_62:
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
    uint64_t v27 = v47;
    uint64_t v26 = v48;
LABEL_63:
    v3 += 2;
  }
  while (v3 != (QP::ParseAttribute **)v2);
  if (v163)
  {
    if (v26)
    {
      v96 = *(void **)(a1 + 32);
      uint64_t v187 = 0;
      v188 = 0;
      v97 = (std::__shared_weak_count *)*((void *)v163 + 14);
      if (v97)
      {
        v188 = std::__shared_weak_count::lock(v97);
        if (v188) {
          uint64_t v187 = *((void *)v163 + 13);
        }
      }
      uint64_t v185 = 0;
      v186 = 0;
      v98 = (std::__shared_weak_count *)*((void *)v26 + 14);
      v100 = v155;
      v99 = v157;
      v101 = v159;
      if (v98)
      {
        v186 = std::__shared_weak_count::lock(v98);
        if (v186) {
          uint64_t v185 = *((void *)v26 + 13);
        }
      }
      QP::Lexer::merge(v96, &v187, &v185, &v215);
      if (v186) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v186);
      }
      if (v188) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v188);
      }
      uint64_t v102 = v215;
      if (v215)
      {
        v103 = v216;
        if (v216)
        {
          atomic_fetch_add_explicit(&v216->__shared_owners_, 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit(&v103->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        v104 = (std::__shared_weak_count *)*((void *)v163 + 14);
        *((void *)v163 + 13) = v102;
        *((void *)v163 + 14) = v103;
        if (v104) {
          std::__shared_weak_count::__release_weak(v104);
        }
        if (v103) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v103);
        }
        QP::ParseAttribute::setShouldIgnore((std::string *)v26, 1);
        goto LABEL_333;
      }
LABEL_334:
      v217[0] = 0;
      goto LABEL_335;
    }
    v100 = v155;
    v99 = v157;
    v101 = v159;
    if (v166)
    {
      v107 = *(void **)(a1 + 32);
      uint64_t v183 = 0;
      v184 = 0;
      v108 = (std::__shared_weak_count *)*((void *)v163 + 14);
      if (v108)
      {
        v184 = std::__shared_weak_count::lock(v108);
        if (v184) {
          uint64_t v183 = *((void *)v163 + 13);
        }
      }
      uint64_t v181 = 0;
      v182 = 0;
      v109 = (std::__shared_weak_count *)*((void *)v166 + 14);
      if (v109)
      {
        v182 = std::__shared_weak_count::lock(v109);
        if (v182) {
          uint64_t v181 = *((void *)v166 + 13);
        }
      }
      QP::Lexer::merge(v107, &v183, &v181, &v215);
      if (v182) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v182);
      }
      if (v184) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v184);
      }
      uint64_t v110 = v215;
      if (!v215) {
        goto LABEL_334;
      }
      v111 = v216;
      if (v216)
      {
        atomic_fetch_add_explicit(&v216->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v111->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      v112 = (std::__shared_weak_count *)*((void *)v163 + 14);
      *((void *)v163 + 13) = v110;
      *((void *)v163 + 14) = v111;
      if (v112) {
        std::__shared_weak_count::__release_weak(v112);
      }
      if (v111) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v111);
      }
      QP::ParseAttribute::setShouldIgnore((std::string *)v166, 1);
LABEL_333:
      --v168;
LABEL_335:
      if (v216) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v216);
      }
    }
  }
  else
  {
    v100 = v155;
    v99 = v157;
    v101 = v159;
  }
  v113 = v153;
  v171 = v25;
  if (!v153)
  {
    BOOL v115 = v164 != 0;
    if (v164)
    {
      if (v152)
      {
        if (v165) {
          atomic_fetch_add_explicit(&v165->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (!v101)
        {
          v106 = 0;
          v105 = v165;
          char v24 = v152;
          goto LABEL_375;
        }
        v114 = v101;
        v105 = v165;
        v113 = v152;
        goto LABEL_373;
      }
      if (v150)
      {
        if (v161) {
          atomic_fetch_add_explicit(&v161->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (!v101)
        {
          v106 = 0;
          v105 = v161;
          char v24 = v150;
          goto LABEL_375;
        }
        v114 = v101;
        goto LABEL_470;
      }
      v152 = 0;
LABEL_474:
      if (!v151) {
        goto LABEL_480;
      }
      if (v149)
      {
        if (v100) {
          atomic_fetch_add_explicit(&v100->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v114 = v162;
        if (v162)
        {
          v164 = v151;
          v105 = v100;
          v113 = v149;
          goto LABEL_373;
        }
        v162 = 0;
        v106 = v101;
        v164 = v151;
        v105 = v100;
        char v24 = v149;
        goto LABEL_508;
      }
      if (!v152) {
        goto LABEL_472;
      }
      if (v100) {
        atomic_fetch_add_explicit(&v100->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v165)
      {
        atomic_fetch_add_explicit(&v165->__shared_owners_, 1uLL, memory_order_relaxed);
        v106 = v101;
        v101 = v165;
        v105 = v100;
        goto LABEL_396;
      }
      v165 = 0;
      v106 = v101;
      v105 = v100;
LABEL_492:
      v101 = 0;
      goto LABEL_396;
    }
    if (!v150)
    {
      v164 = 0;
      goto LABEL_474;
    }
    if (v151)
    {
      if (v161) {
        atomic_fetch_add_explicit(&v161->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v114 = v162;
      if (v162)
      {
        v117 = v151;
LABEL_469:
        v164 = v117;
LABEL_470:
        v105 = v161;
        v113 = v150;
        goto LABEL_373;
      }
      v162 = 0;
      v106 = v101;
      v148 = v151;
    }
    else
    {
      BOOL v115 = (int)v152;
      if (!v152) {
        goto LABEL_471;
      }
      if (v161) {
        atomic_fetch_add_explicit(&v161->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v114 = v165;
      if (v165)
      {
        v117 = (std::string *)v152;
        goto LABEL_469;
      }
      v165 = 0;
      v106 = v101;
      v148 = (std::string *)v152;
    }
    v164 = v148;
    v105 = v161;
    char v24 = v150;
    goto LABEL_508;
  }
  if (v164)
  {
    if (v99) {
      atomic_fetch_add_explicit(&v99->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v101)
    {
      v114 = v101;
      goto LABEL_372;
    }
    v106 = 0;
    v105 = v99;
LABEL_374:
    char v24 = v113;
LABEL_375:
    v118 = *(void **)(a1 + 32);
    uint64_t v179 = 0;
    v180 = 0;
    v119 = (std::__shared_weak_count *)*((void *)v24 + 14);
    if (v119)
    {
      v180 = std::__shared_weak_count::lock(v119);
      if (v180) {
        uint64_t v179 = *((void *)v24 + 13);
      }
    }
    std::string::size_type size = 0;
    v178 = 0;
    v120 = (std::__shared_weak_count *)v164[4].__r_.__value_.__r.__words[2];
    if (v120)
    {
      v178 = std::__shared_weak_count::lock(v120);
      if (v178) {
        std::string::size_type size = v164[4].__r_.__value_.__l.__size_;
      }
    }
    QP::Lexer::merge(v118, &v179, (uint64_t *)&size, &v215);
    if (v178) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v178);
    }
    if (v180) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v180);
    }
    uint64_t v121 = v215;
    if (v215)
    {
      v122 = v216;
      if (v216)
      {
        atomic_fetch_add_explicit(&v216->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v122->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      v123 = (std::__shared_weak_count *)*((void *)v24 + 14);
      *((void *)v24 + 13) = v121;
      *((void *)v24 + 14) = v122;
      if (v123) {
        std::__shared_weak_count::__release_weak(v123);
      }
      if (v122) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v122);
      }
      QP::ParseAttribute::setShouldIgnore(v164, 1);
      --v168;
    }
    else
    {
      v217[0] = 0;
    }
    if (v216) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v216);
    }
    goto LABEL_396;
  }
  if (v151)
  {
    if (v99) {
      atomic_fetch_add_explicit(&v99->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v114 = v162;
    if (v162)
    {
      v116 = v151;
LABEL_371:
      v164 = v116;
LABEL_372:
      v105 = v99;
LABEL_373:
      atomic_fetch_add_explicit(&v114->__shared_owners_, 1uLL, memory_order_relaxed);
      v106 = v101;
      v101 = v114;
      goto LABEL_374;
    }
    v162 = 0;
    v106 = v101;
    v147 = v151;
LABEL_496:
    v164 = v147;
    v105 = v99;
    char v24 = v153;
LABEL_508:
    v101 = 0;
    goto LABEL_375;
  }
  BOOL v115 = (int)v152;
  if (v152)
  {
    if (v99) {
      atomic_fetch_add_explicit(&v99->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v114 = v165;
    if (v165)
    {
      v116 = (std::string *)v152;
      goto LABEL_371;
    }
    v165 = 0;
    v106 = v101;
    v147 = (std::string *)v152;
    goto LABEL_496;
  }
LABEL_471:
  v164 = 0;
LABEL_472:
  v152 = 0;
LABEL_480:
  if (!v24) {
    goto LABEL_491;
  }
  if (!v115)
  {
    if (v152)
    {
      if (v173) {
        atomic_fetch_add_explicit(&v173->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v114 = v165;
      if (v165)
      {
        v164 = (std::string *)v152;
        v105 = v173;
        v113 = v24;
        goto LABEL_373;
      }
      v106 = v101;
      v164 = (std::string *)v152;
      v165 = 0;
      v105 = v173;
      goto LABEL_508;
    }
LABEL_491:
    v105 = 0;
    v106 = v101;
    goto LABEL_492;
  }
  if (v173) {
    atomic_fetch_add_explicit(&v173->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v101)
  {
    atomic_fetch_add_explicit(&v101->__shared_owners_, 1uLL, memory_order_relaxed);
    v106 = v101;
  }
  else
  {
    v106 = 0;
  }
  v105 = v173;
  if (v164) {
    goto LABEL_375;
  }
  v105 = v173;
LABEL_396:
  if (v168 >= 2)
  {
    BOOL v23 = 0;
    v217[0] = 0;
    goto LABEL_436;
  }
LABEL_398:
  if (v217[0])
  {
    v160 = v101;
    v125 = (uint64_t *)*a2;
    v124 = (uint64_t *)a2[1];
    if (v124 != (uint64_t *)*a2)
    {
      v156 = v100;
      v158 = v99;
      unsigned __int16 v126 = 0;
      while (1)
      {
        uint64_t v127 = *v125;
        if (!v126) {
          unsigned __int16 v126 = *(_WORD *)(v127 + 36);
        }
        if (!*(unsigned char *)(v127 + 73))
        {
          v128 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v127 + 112));
          if (*(unsigned __int16 *)(*(void *)(v127 + 104) + 88) - 1 <= 3
            && (uint64_t v129 = *v125, (v130 = *(std::__shared_weak_count **)(*v125 + 112)) != 0)
            && (v131 = std::__shared_weak_count::lock(v130)) != 0)
          {
            uint64_t v132 = *(void *)(v129 + 104);
            std::__shared_weak_count::__release_shared[abi:ne180100](v131);
            std::__shared_weak_count::__release_shared[abi:ne180100](v128);
            if (v132)
            {
              uint64_t v133 = *v125;
              v134 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(*v125 + 112));
              uint64_t v135 = *(void *)(v133 + 104);
              uint64_t v136 = *(void *)(v135 + 120);
              v137 = *(std::__shared_weak_count **)(v135 + 128);
              if (v137) {
                atomic_fetch_add_explicit(&v137->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              if (v136)
              {
                v138 = *(void **)(a1 + 32);
                uint64_t v139 = *v125;
                uint64_t v175 = 0;
                v176 = 0;
                v140 = *(std::__shared_weak_count **)(v139 + 112);
                if (v140)
                {
                  v176 = std::__shared_weak_count::lock(v140);
                  if (v176) {
                    uint64_t v175 = *(void *)(v139 + 104);
                  }
                }
                QP::Lexer::resolve(v138, &v175, v126, v217, &v215);
                if (v176) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v176);
                }
                uint64_t v141 = v215;
                if (v215)
                {
                  uint64_t v142 = *v125;
                  v143 = v216;
                  if (v216)
                  {
                    atomic_fetch_add_explicit(&v216->__shared_owners_, 1uLL, memory_order_relaxed);
                    atomic_fetch_add_explicit(&v143->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                  }
                  v144 = *(std::__shared_weak_count **)(v142 + 112);
                  *(void *)(v142 + 104) = v141;
                  *(void *)(v142 + 112) = v143;
                  if (v144) {
                    std::__shared_weak_count::__release_weak(v144);
                  }
                  if (v143) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v143);
                  }
                }
                if (v216) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v216);
                }
                unsigned __int16 v126 = 0;
              }
              BOOL v145 = v217[0];
              if (v137) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v137);
              }
              std::__shared_weak_count::__release_shared[abi:ne180100](v134);
              if (!v145)
              {
LABEL_432:
                BOOL v23 = v217[0];
                v100 = v156;
                v99 = v158;
                goto LABEL_435;
              }
            }
          }
          else
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v128);
          }
        }
        v125 += 2;
        if (v125 == v124) {
          goto LABEL_432;
        }
      }
    }
    BOOL v23 = 1;
LABEL_435:
    v101 = v160;
  }
  else
  {
    BOOL v23 = 0;
  }
LABEL_436:
  if (v101) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v101);
  }
  if (v105) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v105);
  }
  if (v167) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v167);
  }
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if (v171) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v171);
  }
  if (v106) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v106);
  }
  if (v161) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v161);
  }
  if (v100) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v100);
  }
  if (v162) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v162);
  }
  if (v99) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v99);
  }
  if (v165) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v165);
  }
  if (v173) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v173);
  }
  return v23;
}

void sub_224D98670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, std::__shared_weak_count *a17, std::__shared_weak_count *a18, std::__shared_weak_count *a19, std::__shared_weak_count *a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28,std::__shared_weak_count *a29)
{
  int v34 = *(std::__shared_weak_count **)(v32 - 104);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  if (a25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a25);
  }
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  if (a28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a28);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  if (a29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a29);
  }
  _Unwind_Resume(a1);
}

void QP::ParseAttribute::setShouldIgnore(std::string *this, int a2)
{
  this[3].__r_.__value_.__s.__data_[1] = a2;
  if (a2)
  {
    uint64_t v3 = (std::__shared_weak_count *)this[4].__r_.__value_.__r.__words[2];
    if (v3)
    {
      uint64_t v4 = std::__shared_weak_count::lock(v3);
      if (v4)
      {
        std::string::size_type size = this[4].__r_.__value_.__l.__size_;
        if (size)
        {
          if (*(unsigned __int16 *)(size + 88) - 1 <= 3)
          {
            std::string::basic_string[abi:ne180100]<0>(&__str, "kQPDateExtension");
            std::string::operator=(this + 2, &__str);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
LABEL_12:
            std::__shared_weak_count::__release_shared[abi:ne180100](v4);
            return;
          }
        }
      }
    }
    else
    {
      uint64_t v4 = 0;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "kQPExtension");
    std::string::operator=(this + 2, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v4) {
      goto LABEL_12;
    }
  }
}

void sub_224D989D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

void QP::ParseAttribute::setModifier(uint64_t a1, __int16 a2)
{
  *(_WORD *)(a1 + 36) = a2;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 112);
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)(a1 + 104);
      if (v7 && *(unsigned __int16 *)(v7 + 88) - 1 <= 3)
      {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v9 = *(void *)(v7 + 120);
        unsigned int v8 = *(std::__shared_weak_count **)(v7 + 128);
        if (v8) {
          atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v9)
        {
          *(_WORD *)(v9 + 12) = a2;
          if ((unsigned __int16)(a2 - 1) > 7u) {
            int v10 = 0;
          }
          else {
            int v10 = dword_224E1E1B0[(__int16)(a2 - 1)];
          }
          *(_DWORD *)(v9 + 16) = v10;
        }
        if (v8) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

uint64_t QP::Parser::validate(uint64_t a1, uint64_t *a2)
{
  QP::Parser::mergeActions(a1, a2);
  uint64_t result = QP::Parser::mergeDates(a1, (QP::ParseAttribute ***)a2);
  if (result)
  {
    uint64_t v5 = *a2;
    uint64_t v6 = a2[1];
    if (*a2 != v6)
    {
      while (1)
      {
        uint64_t v7 = *(void *)v5;
        unsigned int v8 = *(std::__shared_weak_count **)(*(void *)v5 + 112);
        if (!v8) {
          goto LABEL_27;
        }
        uint64_t v9 = std::__shared_weak_count::lock(v8);
        if (!v9) {
          goto LABEL_27;
        }
        int v10 = v9;
        uint64_t v11 = *(void *)(v7 + 104);
        if (v11)
        {
          if (!*(unsigned char *)(*(void *)v5 + 73) && *(unsigned __int16 *)(v11 + 88) - 1 <= 3) {
            break;
          }
        }
LABEL_26:
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
LABEL_27:
        v5 += 16;
        if (v5 == v6) {
          return 1;
        }
      }
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v12 = *(__CFCalendar **)(*(void *)a1 + 88);
      CFDateRef v13 = *(const __CFDate **)(*(void *)a1 + 72);
      uint64_t v15 = *(void *)(v11 + 120);
      uint64_t v14 = *(std::__shared_weak_count **)(v11 + 128);
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v15)
      {
        uint64_t v16 = *(void *)a1;
        if (*(unsigned char *)(*(void *)a1 + 27) && *(_DWORD *)(v15 + 8) == 2 && *(unsigned char *)(v16 + 28))
        {
          double AbsoluteTime = QP::DateComponents::getAbsoluteTime((QP::DateComponents *)(v15 + 20), v12, v13);
          if (AbsoluteTime > getCurrentTime(v12, v13))
          {
LABEL_21:
            int v20 = 0;
            goto LABEL_23;
          }
          uint64_t v16 = *(void *)a1;
        }
        if (*(unsigned char *)(v16 + 26))
        {
          if (*(_DWORD *)(v15 + 8) == 2 && (*(_DWORD *)(v15 + 16) - 1) >= 2)
          {
            long long v18 = *(_OWORD *)(v15 + 36);
            v21[0] = *(_OWORD *)(v15 + 20);
            v21[1] = v18;
            v21[2] = *(_OWORD *)(v15 + 52);
            int v22 = *(_DWORD *)(v15 + 68);
            if (QP::DateComponents::isConcrete((QP::DateComponents *)v21))
            {
              double v19 = QP::DateComponents::getAbsoluteTime((QP::DateComponents *)v21, v12, v13);
              if (v19 < getCurrentTime(v12, v13)) {
                goto LABEL_21;
              }
            }
          }
        }
      }
      int v20 = 1;
LABEL_23:
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      if (!v20)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
        return 0;
      }
      goto LABEL_26;
    }
    return 1;
  }
  return result;
}

void sub_224D98CE4(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

CFAbsoluteTime QP::DateComponents::getAbsoluteTime(QP::DateComponents *this, __CFCalendar *a2, const __CFDate *a3)
{
  at[0] = 0.0;
  CFAbsoluteTime CurrentTime = getCurrentTime(a2, a3);
  unsigned int v61 = -1;
  unsigned int v62 = -1;
  int v59 = -1;
  unsigned int v60 = -1;
  int v57 = -1;
  unsigned int v58 = -1;
  int v56 = -1;
  int v54 = -1;
  int v55 = -1;
  CFCalendarDecomposeAbsoluteTime(a2, CurrentTime, "yMdwEFHms", &v60, &v61, &v62, &v58, &v59, &v57, &v56, &v55, &v54);
  uint64_t v52 = 0;
  unsigned int v6 = *((_DWORD *)this + 7);
  if ((v6 & 0x80000000) != 0)
  {
    unsigned int v8 = 0;
    unsigned int v7 = 1;
  }
  else if (v6 > 8)
  {
    unsigned int v7 = 0;
    unsigned int v8 = 1;
  }
  else
  {
    unsigned int v7 = (0x10Au >> v6) & 1;
    unsigned int v8 = (0xF5u >> v6) & 1;
  }
  if (QP::DateComponents::isTime(this))
  {
    uint64_t v9 = *((_DWORD *)this + 2) & ~(*((int *)this + 2) >> 31);
    if ((*((_DWORD *)this + 7) & 0x80000000) == 0)
    {
      if (v9 == 12) {
        unsigned int v10 = v7;
      }
      else {
        unsigned int v10 = 0;
      }
      if (v9 == 12) {
        unsigned int v11 = 0;
      }
      else {
        unsigned int v11 = v8;
      }
      if (v10 | v11) {
        v9 += 12;
      }
    }
    CFCalendarComposeAbsoluteTime(a2, at, "dMyHms", v62, v61, v60, v9, *((_DWORD *)this + 1) & ~(*((int *)this + 1) >> 31), *(_DWORD *)this & ~(*(int *)this >> 31));
    return at[0];
  }
  unsigned int v12 = *((_DWORD *)this + 11);
  if ((v12 & 0x80000000) != 0)
  {
    if ((*((_DWORD *)this + 10) & 0x80000000) != 0
      && (*((_DWORD *)this + 9) & 0x80000000) != 0
      && (*((_DWORD *)this + 12) & 0x80000000) != 0)
    {
      uint64_t v30 = *((unsigned int *)this + 8);
      int v31 = *((_DWORD *)this + 3);
      if ((v30 & 0x80000000) != 0 || (v31 & 0x80000000) == 0)
      {
        if (v31 < 0) {
          uint64_t v35 = 1;
        }
        else {
          uint64_t v35 = v31;
        }
        uint64_t v51 = v35;
        int v36 = *((_DWORD *)this + 4);
        if (v36 < 0) {
          uint64_t v37 = 1;
        }
        else {
          uint64_t v37 = v36;
        }
        if (*((int *)this + 5) >= 0) {
          signed int v38 = *((_DWORD *)this + 5);
        }
        else {
          signed int v38 = v60;
        }
        int v39 = *((_DWORD *)this + 1);
        uint64_t v40 = *((_DWORD *)this + 2) & ~(*((int *)this + 2) >> 31);
        int v41 = *(_DWORD *)this;
        if ((*((_DWORD *)this + 7) & 0x80000000) == 0)
        {
          unsigned int v42 = v40 == 12 ? v7 : 0;
          unsigned int v43 = v40 == 12 ? 0 : v8;
          if (v42 | v43) {
            v40 += 12;
          }
        }
        CFStringRef v44 = (const __CFString *)MEMORY[0x22A623110](a2);
        if (CFStringsAreEqual(v44, (const __CFString *)*MEMORY[0x263EFFC98])
          || CFStringsAreEqual(v44, (const __CFString *)*MEMORY[0x263EFFB48]))
        {
          signed int v38 = v60;
        }
        CFCalendarComposeAbsoluteTime(a2, at, "dMy", v51, v37, v38);
        CFCalendarAddComponents(a2, at, 0, "Hms", v40, v39 & ~(v39 >> 31), v41 & ~(v41 >> 31));
        if ((*((_DWORD *)this + 2) & 0x80000000) == 0 && !v40 && v39 <= 0 && v41 <= 0) {
          CFCalendarAddComponents(a2, at, 0, "d", 1, v47, v50);
        }
      }
      else
      {
        uint64_t v32 = *((_DWORD *)this + 2) & ~(*((int *)this + 2) >> 31);
        if ((*((_DWORD *)this + 7) & 0x80000000) == 0)
        {
          unsigned int v33 = v32 == 12 ? v7 : 0;
          unsigned int v34 = v32 == 12 ? 0 : v8;
          if (v33 | v34) {
            v32 += 12;
          }
        }
        CFCalendarComposeAbsoluteTime(a2, at, "EwYHms", v30, v58, v60, v32, *((_DWORD *)this + 1) & ~(*((int *)this + 1) >> 31), *(_DWORD *)this & ~(*(int *)this >> 31));
      }
      return at[0];
    }
    unsigned int v12 = 0;
  }
  int v14 = *((_DWORD *)this + 7);
  int v13 = *((_DWORD *)this + 8);
  uint64_t v15 = v13 & ~(v13 >> 31);
  int v16 = *((_DWORD *)this + 9);
  uint64_t v53 = v12;
  int v17 = *((_DWORD *)this + 12);
  if (v17 < 0) {
    int v17 = v60;
  }
  uint64_t v18 = *((_DWORD *)this + 2) & ~(*((int *)this + 2) >> 31);
  uint64_t v19 = *((_DWORD *)this + 1) & ~(*((int *)this + 1) >> 31);
  uint64_t v20 = *(_DWORD *)this & ~(*(int *)this >> 31);
  if ((v14 & 0x80000000) == 0)
  {
    unsigned int v21 = v18 == 12 ? v7 : 0;
    unsigned int v22 = v18 == 12 ? 0 : v8;
    if (v21 | v22) {
      v18 += 12;
    }
  }
  uint64_t v23 = v17;
  if (v12 || v16 < 1 || v13 < 1)
  {
    if (v13 < 1) {
      CFCalendarComposeAbsoluteTime(a2, at, "wY", v12, v17, v48);
    }
    else {
      CFCalendarComposeAbsoluteTime(a2, at, "EwY", v13 & ~(v13 >> 31), v12, v17);
    }
    CFCalendarAddComponents(a2, at, 0, "Hms", v18, v19, v20);
    CFCalendarDecomposeAbsoluteTime(a2, at[0], "H", &v52);
    if (v18) {
      BOOL v26 = v18 == 24;
    }
    else {
      BOOL v26 = 1;
    }
    uint64_t v27 = v52;
    if (v26) {
      uint64_t v27 = v18;
    }
    uint64_t v52 = v27;
    if (v27 <= v18)
    {
      if (v27 >= v18) {
        return at[0];
      }
      uint64_t v28 = 1;
    }
    else
    {
      uint64_t v28 = 0xFFFFFFFFLL;
    }
    CFCalendarAddComponents(a2, at, 0, "H", v28, v46, v49);
    return at[0];
  }
  uint64_t v24 = v16 & ~(v16 >> 31);
  if (v24 == 0x7FFFFFFF)
  {
    CFCalendarComposeAbsoluteTime(a2, at, "My", v61 + 1, v17);
    CFCalendarDecomposeAbsoluteTime(a2, at[0], "E", &v52);
    uint64_t v25 = v52;
    if (v52 < v15)
    {
      CFCalendarAddComponents(a2, at, 0, "w", 0xFFFFFFFFLL);
      uint64_t v25 = v52;
    }
    CFCalendarAddComponents(a2, at, 0, "E", -v25);
    CFCalendarAddComponents(a2, at, 0, "E", v15, v45);
  }
  else
  {
    CFCalendarComposeAbsoluteTime(a2, at, "My", v61, v17);
    CFCalendarDecomposeAbsoluteTime(a2, at[0], "w", &v53);
    CFCalendarComposeAbsoluteTime(a2, at, "wY", v53, v23);
    CFCalendarAddComponents(a2, at, 0, "FE", v24, v15 - 1);
  }
  CFCalendarAddComponents(a2, at, 0, "Hms", v18, v19, v20);
  return at[0];
}

uint64_t QP::DateComponents::isConcrete(QP::DateComponents *this)
{
  if ((*((_DWORD *)this + 11) & 0x80000000) != 0)
  {
    if ((*((_DWORD *)this + 10) & 0x80000000) != 0
      && (*((_DWORD *)this + 9) & 0x80000000) != 0
      && (*((_DWORD *)this + 12) & 0x80000000) != 0
      && (*((_DWORD *)this + 3) & 0x80000000) == 0
      && (*((_DWORD *)this + 4) & 0x80000000) == 0
      && (*((_DWORD *)this + 5) & 0x80000000) == 0)
    {
      return 1;
    }
  }
  else if ((*((_DWORD *)this + 12) & 0x80000000) == 0)
  {
    return 1;
  }
  return 0;
}

void QP::Parser::retainCurrentString(const void **this)
{
  uint64_t v2 = this + 11;
  nlp::CFScopedPtr<__CFString const*>::reset(this + 11, 0);
  uint64_t v3 = (const void *)*((void *)this[4] + 55);
  if (v3)
  {
    CFTypeRef v4 = CFRetain(v3);
    nlp::CFScopedPtr<__CFString const*>::reset(v2, v4);
  }
}

void QP::Parser::parseLexer(QP::Parser *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 4) + 560) - *(void *)(*((void *)this + 4) + 552);
  if (v1 >= 1)
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    int64_t v5 = v1 / 0x18uLL;
    unsigned int v6 = (const void **)((char *)this + 88);
    unsigned int v7 = (uint64_t *)((char *)this + 104);
    if (v5 <= 1) {
      int64_t v5 = 1;
    }
    int64_t v35 = v5;
    uint64_t v8 = -1;
    while (1)
    {
      v58[0] = 0;
      v58[1] = v58;
      v58[2] = 0x2000000000;
      v58[3] = 0;
      v57[0] = 0;
      v57[1] = v57;
      v57[2] = 0x2000000000;
      v57[3] = -1;
      QP::GraphStructureStack::clear(*((QP::GraphStructureStack **)this + 10));
      uint64_t v9 = (QP::Lexer *)*((void *)this + 4);
      v56[0] = MEMORY[0x263EF8330];
      v56[1] = 0x40000000;
      v56[2] = ___ZN2QP6Parser10parseLexerEv_block_invoke;
      v56[3] = &unk_264705110;
      v56[5] = v58;
      v56[6] = this;
      v56[4] = v57;
      QP::Lexer::enumerateLexemesAtParseIndex(v9, v4, (uint64_t)v56);
      QP::GraphStructureStack::close(*((QP::GraphStructureStack **)this + 10));
      unint64_t v36 = v4;
      uint64_t v10 = *(void *)(*((void *)this + 10) + 24) - *(void *)(*((void *)this + 10) + 16);
      if (v10 >= 1) {
        break;
      }
LABEL_45:
      _Block_object_dispose(v57, 8);
      _Block_object_dispose(v58, 8);
      unint64_t v4 = v36 + 1;
      if (v36 + 1 == v35) {
        return;
      }
    }
    unint64_t v11 = 0;
    uint64_t v38 = v10 >> 4;
    uint64_t v37 = MEMORY[0x263EF8330];
    while (1)
    {
      uint64_t v50 = 0;
      uint64_t v51 = &v50;
      uint64_t v52 = 0x4002000000;
      uint64_t v53 = __Block_byref_object_copy__2;
      int v54 = __Block_byref_object_dispose__2;
      memset(v55, 0, sizeof(v55));
      v47[0] = 0;
      v47[1] = (void **)v47;
      v47[2] = (void **)0x4002000000;
      void v47[3] = (void **)__Block_byref_object_copy__1;
      v47[4] = (void **)__Block_byref_object_dispose__2;
      v49[0] = 0;
      v49[1] = 0;
      uint64_t v48 = v49;
      uint64_t v12 = *((void *)this + 10);
      v46[0] = v37;
      v46[1] = 0x40000000;
      v46[2] = ___ZN2QP6Parser10parseLexerEv_block_invoke_3;
      v46[3] = &unk_264705138;
      v46[5] = &v50;
      v46[6] = this;
      v46[4] = v47;
      QP::GraphStructureStack::enumerateBranchesAtStateIndex(v12, v11, (uint64_t)v46);
      int v13 = (uint64_t *)v51[5];
      int v14 = (long long *)v51[6];
      unint64_t v15 = 126 - 2 * __clz(((char *)v14 - (char *)v13) >> 4);
      v45[0] = (uint64_t (*)(uint64_t *, uint64_t *))QP::parse_attr_less_than_range;
      uint64_t v16 = v14 == (long long *)v13 ? 0 : v15;
      std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::ParseAttribute> &,std::shared_ptr<QP::ParseAttribute> &),std::shared_ptr<QP::ParseAttribute>*,false>(v13, v14, v45, v16, 1);
      memset(v45, 0, sizeof(v45));
      unsigned int v42 = 0;
      unsigned int v43 = 0;
      uint64_t v44 = 0;
      uint64_t v18 = (long long *)v51[5];
      int v17 = (long long *)v51[6];
      if (v18 != v17) {
        break;
      }
LABEL_23:
      QP::updateParseAttributes((uint64_t)&v42, (uint64_t)v45);
      uint64_t v25 = (void **)v42;
      uint64_t v24 = v43;
      while (v25 != v24)
      {
        if (QP::Parser::validate((uint64_t)this, (uint64_t *)v25))
        {
          uint64_t v26 = *(void *)(*((void *)this + 10) + 96);
          uint64_t v27 = v26 >= 0 ? v26 + 1 : 0;
          unint64_t v39 = 0xAAAAAAAAAAAAAAABLL
              * ((uint64_t)(*(void *)(*((void *)this + 4) + 464) - *(void *)(*((void *)this + 4) + 456)) >> 3);
          uint64_t v40 = v27;
          std::allocate_shared[abi:ne180100]<QP::Parse,std::allocator<QP::Parse>,nlp::CFScopedPtr<__CFString const*> &,long,long,std::vector<std::shared_ptr<QP::ParseAttribute>> &,decltype(nullptr),void>(v6, &v40, (uint64_t *)&v39, (void **)v25, &v41);
          if (v8 == -1
            || ((v29 = *(void *)(v41 + 64), v28 = *(void *)(v41 + 72), v8 == v29) ? (BOOL v30 = v3 == v28) : (BOOL v30 = 0),
                (uint64_t v31 = v28 + v29, !v30) ? (v32 = v8 + v3 <= v31) : (v32 = 1),
                v32))
          {
            std::vector<std::shared_ptr<QP::Parse>>::push_back[abi:ne180100](v7, &v41);
            uint64_t v8 = *(void *)(v41 + 64);
            uint64_t v3 = *(void *)(v41 + 72);
            char v33 = 1;
          }
          else
          {
            char v33 = 0;
            unint64_t v11 = v38;
          }
          if (*((void *)&v41 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v41 + 1));
          }
          if ((v33 & 1) == 0) {
            break;
          }
        }
        v25 += 3;
      }
      unint64_t v34 = *((void *)this + 14) - *((void *)this + 13);
      *(void *)&long long v41 = &v42;
      std::vector<std::vector<std::shared_ptr<QP::ParseAttribute>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v41);
      unsigned int v42 = v45;
      std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
      _Block_object_dispose(v47, 8);
      std::__tree<std::string>::destroy((uint64_t)&v48, v49[0]);
      _Block_object_dispose(&v50, 8);
      v47[0] = (void **)v55;
      std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](v47);
      if (v34 <= 0x4F && (uint64_t)++v11 < v38) {
        continue;
      }
      goto LABEL_45;
    }
    uint64_t v19 = 0;
    uint64_t v20 = -1;
    while (1)
    {
      uint64_t v21 = *(void *)(*(void *)v18 + 16);
      uint64_t v22 = *(void *)(*(void *)v18 + 24);
      if (v21 == -1 || v20 != -1 && v22 + v21 <= v20 + v19)
      {
        if (v20 != v21 || v19 != v22) {
          goto LABEL_22;
        }
      }
      else
      {
        QP::updateParseAttributes((uint64_t)&v42, (uint64_t)v45);
      }
      std::vector<std::shared_ptr<QP::ParseAttribute>>::push_back[abi:ne180100]((uint64_t *)v45, v18);
      uint64_t v20 = *(void *)(*(void *)v18 + 16);
      uint64_t v19 = *(void *)(*(void *)v18 + 24);
LABEL_22:
      if (++v18 == v17) {
        goto LABEL_23;
      }
    }
  }
}

void sub_224D99838(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void ___ZN2QP6Parser10parseLexerEv_block_invoke(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, CFIndex a5, CFIndex a6)
{
  uint64_t v11 = a1[6];
  unsigned int v12 = QP::ParserGrammar::symbolID(*(void *)(v11 + 16), *a2);
  v14.CFIndex location = a5;
  v14.CFIndex length = a6;
  QP::GraphStructureStack::add(*(QP::GraphStructureStack **)(v11 + 80), v12, a3, a4, v14);
  uint64_t v13 = *(void *)(a1[4] + 8);
  if (*(void *)(v13 + 24) < a3)
  {
    ++*(void *)(*(void *)(a1[5] + 8) + 24);
    uint64_t v13 = *(void *)(a1[4] + 8);
  }
  *(void *)(v13 + 24) = a3;
}

__n128 __Block_byref_object_copy__2(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__2(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 40);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  std::__tree<std::string>::destroy(a1 + 40, *(char **)(a1 + 48));
}

void *__Block_byref_object_copy__1(void *result, void *a2)
{
  result[5] = a2[5];
  uint64_t v2 = a2 + 6;
  uint64_t v3 = a2[6];
  result[6] = v3;
  unint64_t v4 = result + 6;
  uint64_t v5 = a2[7];
  result[7] = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    a2[5] = v2;
    void *v2 = 0;
    a2[7] = 0;
  }
  else
  {
    result[5] = v4;
  }
  return result;
}

void ___ZN2QP6Parser10parseLexerEv_block_invoke_3(void *a1, _WORD **a2)
{
  uint64_t v4 = a1[6];
  uint64_t v5 = (uint64_t)*a2;
  long long v24 = *(_OWORD *)(*a2 + 12);
  long long v23 = *(_OWORD *)(v5 + 8);
  uint64_t v6 = *(void *)(v4 + 32);
  memset(&__p, 0, sizeof(__p));
  std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>(&__p, *(const void **)(v5 + 40), *(void *)(v5 + 48), (uint64_t)(*(void *)(v5 + 48) - *(void *)(v5 + 40)) >> 3);
  QP::Lexer::lexemeFromLocations(v6, (unint64_t **)&__p, &v21);
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v21)
  {
    uint64_t v7 = (uint64_t)*a2;
    LOWORD(__p.__r_.__value_.__l.__data_) = **a2;
    LOWORD(v17.__r_.__value_.__l.__data_) = *(_WORD *)(v7 + 2);
    std::allocate_shared[abi:ne180100]<QP::ParseAttribute,std::allocator<QP::ParseAttribute>,CFRange &,CFRange &,unsigned short,unsigned short,void>(&v23, &v24, (__int16 *)&__p, (unsigned __int16 *)&v17, &v19);
    uint64_t v8 = v19;
    uint64_t v9 = v21;
    uint64_t v10 = v22;
    if (v22)
    {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v11 = *(std::__shared_weak_count **)(v8 + 112);
    *(void *)(v8 + 104) = v9;
    *(void *)(v8 + 112) = v10;
    if (v11) {
      std::__shared_weak_count::__release_weak(v11);
    }
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    QP::ParserGrammar::attribute(*(QP::ParserGrammar **)(v4 + 16), *(unsigned __int16 *)(v19 + 32), *(unsigned __int16 *)(v19 + 34), &__p);
    unsigned int v12 = (std::string *)v19;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__str, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string __str = __p;
    }
    std::string::operator=(v12 + 2, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    uint64_t v13 = v19;
    __int16 v14 = QP::ParserGrammar::modifier(*(QP::ParserGrammar **)(v4 + 16), *(unsigned __int16 *)(v19 + 32));
    QP::ParseAttribute::setModifier(v13, v14);
    unint64_t v15 = *a2;
    *(void *)(v19 + 40) += (uint64_t)*((float *)*a2 + 1);
    if (QP::ParserGrammar::isInferred(*(QP::ParserGrammar **)(v4 + 16), *v15)
      || QP::ParserGrammar::isInferred(*(QP::ParserGrammar **)(v4 + 16), (unsigned __int16)(*a2)[1]))
    {
      uint64_t v16 = (QP::ParseAttribute *)v19;
      *(unsigned char *)(v19 + 72) = 1;
    }
    else
    {
      uint64_t v16 = (QP::ParseAttribute *)v19;
    }
    QP::ParseAttribute::description(v16, &v17);
    if ((void **)(*(void *)(a1[4] + 8) + 48) == std::__tree<std::string>::find<std::string>(*(void *)(a1[4] + 8) + 40, (void **)&v17.__r_.__value_.__l.__data_))
    {
      std::vector<std::shared_ptr<QP::ParseAttribute>>::push_back[abi:ne180100]((uint64_t *)(*(void *)(a1[5] + 8) + 40), &v19);
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(*(void *)(a1[4] + 8) + 40), (void **)&v17.__r_.__value_.__l.__data_, (uint64_t)&v17);
    }
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (*((void *)&v19 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v19 + 1));
    }
  }
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
}

void sub_224D99C7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,std::__shared_weak_count *a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,std::__shared_weak_count *a31)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  if (a31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a31);
  }
  _Unwind_Resume(exception_object);
}

void QP::ParseAttribute::description(QP::ParseAttribute *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v4 = *((void *)this + 15);
  uint64_t v3 = *((void *)this + 16);
  if (v3 != v4)
  {
    char v5 = 0;
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    while (1)
    {
      uint64_t v7 = *(QP::ParseAttribute **)v4;
      uint64_t v6 = *(std::__shared_weak_count **)(v4 + 8);
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v5) {
        std::string::append(a2, "|", 1uLL);
      }
      QP::ParseAttribute::description((uint64_t *)&v42, v7);
      uint64_t v8 = (v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &v42
         : (std::string *)v42.__r_.__value_.__r.__words[0];
      std::string::size_type v9 = (v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? HIBYTE(v42.__r_.__value_.__r.__words[2])
         : v42.__r_.__value_.__l.__size_;
      std::string::append(a2, (const std::string::value_type *)v8, v9);
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
        break;
      }
      if (v6) {
        goto LABEL_15;
      }
LABEL_16:
      v4 += 16;
      char v5 = 1;
      if (v4 == v3) {
        return;
      }
    }
    operator delete(v42.__r_.__value_.__l.__data_);
    if (!v6) {
      goto LABEL_16;
    }
LABEL_15:
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    goto LABEL_16;
  }
  std::to_string(&v38, *((unsigned __int16 *)this + 16));
  std::to_string(&v37, *((unsigned __int16 *)this + 17));
  if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v11 = &v37;
  }
  else {
    uint64_t v11 = (std::string *)v37.__r_.__value_.__r.__words[0];
  }
  if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v37.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v37.__r_.__value_.__l.__size_;
  }
  uint64_t v13 = std::string::append(&v38, (const std::string::value_type *)v11, size);
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v39.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v36, *((void *)this + 2));
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v15 = &v36;
  }
  else {
    unint64_t v15 = (std::string *)v36.__r_.__value_.__r.__words[0];
  }
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v16 = HIBYTE(v36.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v16 = v36.__r_.__value_.__l.__size_;
  }
  std::string v17 = std::string::append(&v39, (const std::string::value_type *)v15, v16);
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v40.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, *((void *)this + 3));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v20 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v20 = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v21 = std::string::append(&v40, (const std::string::value_type *)p_p, v20);
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v41.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  long long v23 = std::string::append(&v41, "_", 1uLL);
  long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  uint64_t v25 = std::__shared_weak_count::lock(*((std::__shared_weak_count **)this + 14));
  uint64_t v26 = *((void *)this + 13);
  uint64_t v29 = *(const std::string::value_type **)(v26 + 48);
  uint64_t v27 = v26 + 48;
  uint64_t v28 = v29;
  int v30 = *(char *)(v27 + 23);
  if (v30 >= 0) {
    uint64_t v31 = (const std::string::value_type *)v27;
  }
  else {
    uint64_t v31 = v28;
  }
  if (v30 >= 0) {
    std::string::size_type v32 = *(unsigned __int8 *)(v27 + 23);
  }
  else {
    std::string::size_type v32 = *(void *)(v27 + 8);
  }
  char v33 = std::string::append(&v42, v31, v32);
  long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  a2->__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
}

void sub_224D99FEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v45);
  if (*(char *)(v46 - 89) < 0) {
    operator delete(*(void **)(v46 - 112));
  }
  if (*(char *)(v46 - 121) < 0) {
    operator delete(*(void **)(v46 - 144));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(a1);
}

void **std::vector<std::shared_ptr<QP::ParseAttribute>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  __n128 result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    long long v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>>((uint64_t)result, v13);
    unint64_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)unint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<QP::ParseAttribute>>::__swap_out_circular_buffer(a1, v18);
    std::string::size_type v9 = (void *)a1[1];
    __n128 result = std::__split_buffer<std::shared_ptr<QP::GraphStructureStack::Node>>::~__split_buffer(v18);
  }
  else
  {
    *uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    std::string::size_type v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_224D9A1FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<QP::GraphStructureStack::Node>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void QP::updateParseAttributes(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(QP::ParseAttribute ***)a2;
  uint64_t v51 = *(QP::ParseAttribute ***)(a2 + 8);
  if (v51 != *(QP::ParseAttribute ***)a2)
  {
    int v59 = 0;
    unsigned int v60 = 0;
    unint64_t v61 = 0;
    v58[0] = 0;
    v58[1] = 0;
    int v57 = v58;
LABEL_3:
    QP::ParseAttribute::description(*v2, &__p);
    uint64_t v3 = std::__tree<std::string>::__count_unique<std::string>((uint64_t)&v57, (void **)&__p.__r_.__value_.__l.__data_);
    uint64_t v4 = v3;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (v4) {
        goto LABEL_72;
      }
    }
    else if (v3)
    {
      goto LABEL_72;
    }
    QP::ParseAttribute::description(*v2, &__p);
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v57, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    unint64_t v6 = *(uint64_t **)a1;
    unint64_t v5 = *(uint64_t **)(a1 + 8);
    if (v5 == *(uint64_t **)a1)
    {
      std::allocate_shared[abi:ne180100]<QP::ParseAttribute,std::allocator<QP::ParseAttribute>,CFRange &,CFRange &,unsigned short &,unsigned short &,void>(*v2, (long long *)*v2 + 1, (__int16 *)*v2 + 16, (unsigned __int16 *)*v2 + 17, &v55);
      uint64_t v35 = v55;
      std::string v36 = *v2;
      std::string v37 = (std::__shared_weak_count *)*((void *)*v2 + 14);
      if (v37)
      {
        std::string v38 = std::__shared_weak_count::lock(v37);
        std::string v39 = v38;
        if (v38)
        {
          char v40 = 0;
          uint64_t v41 = *((void *)v36 + 13);
          atomic_fetch_add_explicit(&v38->__shared_weak_owners_, 1uLL, memory_order_relaxed);
LABEL_58:
          std::string v42 = *(std::__shared_weak_count **)(v35 + 112);
          *(void *)(v35 + 104) = v41;
          *(void *)(v35 + 112) = v39;
          if (v42) {
            std::__shared_weak_count::__release_weak(v42);
          }
          if ((v40 & 1) == 0) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v39);
          }
          QP::ParseAttribute::setModifier(v55, *((_WORD *)*v2 + 18));
          unsigned int v43 = (std::string *)v55;
          uint64_t v44 = (std::string *)*v2;
          if (*((char *)*v2 + 71) < 0) {
            std::string::__init_copy_ctor_external(&v54, v44[2].__r_.__value_.__l.__data_, v44[2].__r_.__value_.__l.__size_);
          }
          else {
            std::string v54 = v44[2];
          }
          std::string::operator=(v43 + 2, &v54);
          if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v54.__r_.__value_.__l.__data_);
          }
          uint64_t v45 = v55;
          uint64_t v46 = *v2;
          *(unsigned char *)(v55 + 72) = *((unsigned char *)*v2 + 72);
          *(void *)(v45 + 40) += *((void *)v46 + 5);
          memset(&__p, 0, sizeof(__p));
          std::vector<std::shared_ptr<QP::ParseAttribute>>::push_back[abi:ne180100]((uint64_t *)&__p, &v55);
          uint64_t v47 = v60;
          if ((unint64_t)v60 >= v61)
          {
            uint64_t v48 = (void **)std::vector<std::vector<std::shared_ptr<QP::ParseAttribute>>>::__push_back_slow_path<std::vector<std::shared_ptr<QP::ParseAttribute>> const&>((uint64_t *)&v59, &__p);
          }
          else
          {
            std::__shared_weak_count *v60 = 0;
            v47[1] = 0;
            v47[2] = 0;
            std::vector<std::shared_ptr<QP::ParseAttribute>>::__init_with_size[abi:ne180100]<std::shared_ptr<QP::ParseAttribute>*,std::shared_ptr<QP::ParseAttribute>*>(v47, __p.__r_.__value_.__l.__data_, (void *)__p.__r_.__value_.__l.__size_, (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 4);
            uint64_t v48 = v47 + 3;
          }
          unsigned int v60 = v48;
          p_p = &__p;
          std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
          if (*((void *)&v55 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v55 + 1));
          }
          goto LABEL_72;
        }
        uint64_t v41 = 0;
      }
      else
      {
        uint64_t v41 = 0;
        std::string v39 = 0;
      }
      char v40 = 1;
      goto LABEL_58;
    }
LABEL_10:
    memset(&__p, 0, sizeof(__p));
    uint64_t v8 = (std::string **)*v6;
    uint64_t v7 = (std::string **)v6[1];
    while (1)
    {
      if (v8 == v7)
      {
        std::allocate_shared[abi:ne180100]<QP::ParseAttribute,std::allocator<QP::ParseAttribute>,CFRange &,CFRange &,unsigned short &,unsigned short &,void>(*v2, (long long *)*v2 + 1, (__int16 *)*v2 + 16, (unsigned __int16 *)*v2 + 17, &v55);
        uint64_t v21 = v55;
        long long v22 = *v2;
        long long v23 = (std::__shared_weak_count *)*((void *)*v2 + 14);
        if (v23)
        {
          long long v24 = std::__shared_weak_count::lock(v23);
          uint64_t v25 = v24;
          if (v24)
          {
            char v26 = 0;
            uint64_t v27 = *((void *)v22 + 13);
            atomic_fetch_add_explicit(&v24->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            goto LABEL_36;
          }
          uint64_t v27 = 0;
        }
        else
        {
          uint64_t v27 = 0;
          uint64_t v25 = 0;
        }
        char v26 = 1;
LABEL_36:
        uint64_t v28 = *(std::__shared_weak_count **)(v21 + 112);
        *(void *)(v21 + 104) = v27;
        *(void *)(v21 + 112) = v25;
        if (v28) {
          std::__shared_weak_count::__release_weak(v28);
        }
        if ((v26 & 1) == 0) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v25);
        }
        QP::ParseAttribute::setModifier(v55, *((_WORD *)*v2 + 18));
        uint64_t v29 = (std::string *)v55;
        int v30 = (std::string *)*v2;
        if (*((char *)*v2 + 71) < 0) {
          std::string::__init_copy_ctor_external(&v52, v30[2].__r_.__value_.__l.__data_, v30[2].__r_.__value_.__l.__size_);
        }
        else {
          std::string v52 = v30[2];
        }
        std::string::operator=(v29 + 2, &v52);
        if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v52.__r_.__value_.__l.__data_);
        }
        uint64_t v31 = v55;
        std::string::size_type v32 = *v2;
        *(unsigned char *)(v55 + 72) = *((unsigned char *)*v2 + 72);
        *(void *)(v31 + 40) += *((void *)v32 + 5);
        std::vector<std::shared_ptr<QP::ParseAttribute>>::push_back[abi:ne180100]((uint64_t *)&__p, &v55);
        char v33 = v60;
        if ((unint64_t)v60 >= v61)
        {
          long long v34 = (void **)std::vector<std::vector<std::shared_ptr<QP::ParseAttribute>>>::__push_back_slow_path<std::vector<std::shared_ptr<QP::ParseAttribute>> const&>((uint64_t *)&v59, &__p);
        }
        else
        {
          std::__shared_weak_count *v60 = 0;
          v33[1] = 0;
          uint64_t v33[2] = 0;
          std::vector<std::shared_ptr<QP::ParseAttribute>>::__init_with_size[abi:ne180100]<std::shared_ptr<QP::ParseAttribute>*,std::shared_ptr<QP::ParseAttribute>*>(v33, __p.__r_.__value_.__l.__data_, (void *)__p.__r_.__value_.__l.__size_, (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 4);
          long long v34 = v33 + 3;
        }
        unsigned int v60 = v34;
        if (*((void *)&v55 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v55 + 1));
        }
        *(void *)&long long v55 = &__p;
        std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
        v6 += 3;
        if (v6 == v5)
        {
LABEL_72:
          v2 += 2;
          if (v2 == v51)
          {
            std::vector<std::vector<std::shared_ptr<QP::ParseAttribute>>>::erase(a1, *(uint64_t **)a1, *(void *)(a1 + 8));
            std::vector<std::vector<std::shared_ptr<QP::ParseAttribute>>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::vector<std::shared_ptr<QP::ParseAttribute>>*>,std::__wrap_iter<std::vector<std::shared_ptr<QP::ParseAttribute>>*>>((uint64_t *)a1, *(void **)(a1 + 8), v59, v60, 0xAAAAAAAAAAAAAAABLL * (v60 - v59));
            std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::erase(a2, *(void *)a2, *(long long **)(a2 + 8));
            std::__tree<std::string>::destroy((uint64_t)&v57, v58[0]);
            int v57 = (char **)&v59;
            std::vector<std::vector<std::shared_ptr<QP::ParseAttribute>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
            return;
          }
          goto LABEL_3;
        }
        goto LABEL_10;
      }
      std::allocate_shared[abi:ne180100]<QP::ParseAttribute,std::allocator<QP::ParseAttribute>,CFRange &,CFRange &,unsigned short &,unsigned short &,void>(*v8, (long long *)&(*v8)->__r_.__value_.__r.__words[2], (__int16 *)&(*v8)[1].__r_.__value_.__r.__words[1], (unsigned __int16 *)&(*v8)[1].__r_.__value_.__r.__words[1] + 1, &v55);
      uint64_t v9 = v55;
      uint64_t v10 = *v8;
      unint64_t v11 = (std::__shared_weak_count *)(*v8)[4].__r_.__value_.__r.__words[2];
      if (v11)
      {
        uint64_t v12 = std::__shared_weak_count::lock(v11);
        unint64_t v13 = v12;
        if (v12)
        {
          char v14 = 0;
          std::string::size_type size = v10[4].__r_.__value_.__l.__size_;
          atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          goto LABEL_18;
        }
        std::string::size_type size = 0;
      }
      else
      {
        std::string::size_type size = 0;
        unint64_t v13 = 0;
      }
      char v14 = 1;
LABEL_18:
      uint64_t v16 = *(std::__shared_weak_count **)(v9 + 112);
      *(void *)(v9 + 104) = size;
      *(void *)(v9 + 112) = v13;
      if (v16) {
        std::__shared_weak_count::__release_weak(v16);
      }
      if ((v14 & 1) == 0) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      QP::ParseAttribute::setModifier(v55, WORD2((*v8)[1].__r_.__value_.__r.__words[1]));
      long long v17 = (std::string *)v55;
      long long v18 = *v8;
      if (SHIBYTE((*v8)[2].__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&__str, v18[2].__r_.__value_.__l.__data_, v18[2].__r_.__value_.__l.__size_);
      }
      else {
        std::string __str = v18[2];
      }
      std::string::operator=(v17 + 2, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      uint64_t v19 = v55;
      std::string::size_type v20 = *v8;
      *(unsigned char *)(v55 + 72) = (*v8)[3].__r_.__value_.__s.__data_[0];
      *(void *)(v19 + 40) += *((void *)&v20[1].__r_.__value_.__l + 2);
      std::vector<std::shared_ptr<QP::ParseAttribute>>::push_back[abi:ne180100]((uint64_t *)&__p, &v55);
      if (*((void *)&v55 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v55 + 1));
      }
      v8 += 2;
    }
  }
}

void sub_224D9A768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  std::__tree<std::string>::destroy(v40 - 144, *(char **)(v40 - 136));
  *(void *)(v40 - 144) = v40 - 120;
  std::vector<std::vector<std::shared_ptr<QP::ParseAttribute>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v40 - 144));
  _Unwind_Resume(a1);
}

void **std::vector<std::shared_ptr<QP::Parse>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  __n128 result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    char v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>>((uint64_t)result, v13);
    unint64_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)unint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<QP::Parse>>::__swap_out_circular_buffer(a1, v18);
    uint64_t v9 = (void *)a1[1];
    __n128 result = std::__split_buffer<std::shared_ptr<QP::GraphStructureStack::Node>>::~__split_buffer(v18);
  }
  else
  {
    *uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_224D9A984(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<QP::GraphStructureStack::Node>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void QP::Parser::addAndSortParse(QP::Parser *this)
{
  unint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v2 = (uint64_t *)*((void *)this + 13);
  uint64_t v3 = (uint64_t *)*((void *)this + 14);
  uint64_t v4 = (uint64_t *)((char *)this + 104);
  if (v3 == v2)
  {
    memset(v14, 0, sizeof(v14));
    int v12 = 0;
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL
        * ((uint64_t)(*(void *)(*((void *)this + 4) + 464) - *(void *)(*((void *)this + 4) + 456)) >> 3);
    std::allocate_shared[abi:ne180100]<QP::Parse,std::allocator<QP::Parse>,nlp::CFScopedPtr<__CFString const*> &,int,long,std::vector<std::shared_ptr<QP::ParseAttribute>> &,decltype(nullptr),void>((const void **)this + 11, &v12, (uint64_t *)&v11, v14, &v13);
    std::vector<std::shared_ptr<QP::Parse>>::push_back[abi:ne180100]((uint64_t *)&v15, &v13);
    if (*((void *)&v13 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v13 + 1));
    }
    *(void *)&long long v13 = v14;
    std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
  }
  else
  {
    std::vector<std::shared_ptr<QP::Parse>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<QP::Parse>*>,std::__wrap_iter<std::shared_ptr<QP::Parse>*>>((uint64_t *)&v15, 0, v2, v3, ((char *)v3 - (char *)v2) >> 4);
  }
  unint64_t v5 = 126 - 2 * __clz(v16 - v15);
  *(void *)&long long v13 = QP::best_parse;
  if (v16 == v15) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = v5;
  }
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Parse> &,std::shared_ptr<QP::Parse> &),std::shared_ptr<QP::Parse>*,false>((uint64_t *)v15, v16, (uint64_t (**)(uint64_t *, uint64_t *))&v13, v6, 1);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::erase((uint64_t)v4, *((void *)this + 13), *((long long **)this + 14));
  uint64_t v7 = v15;
  uint64_t v8 = v16;
  if (v15 != v16)
  {
    BOOL v9 = 0;
    do
    {
      if (v9 && !*(unsigned char *)(*(void *)v7 + 82)) {
        break;
      }
      std::vector<std::shared_ptr<QP::Parse>>::push_back[abi:ne180100](v4, v7);
      uint64_t v10 = *(void *)v7++;
      BOOL v9 = *(unsigned char *)(v10 + 82) != 0;
    }
    while (v7 != v8);
  }
  v14[0] = (void **)&v15;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](v14);
}

void sub_224D9AB04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void ***a12, std::__shared_weak_count *a13, void **a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  a12 = &a14;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  a14 = (void **)&a17;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void ___ZN2QP6Parser14addCompletionsEv_block_invoke(uint64_t a1, const void *a2)
{
}

void QP::Parser::addU2Parse(QP::Parser *this)
{
  uint64_t v2 = *((void *)this + 6);
  uint64_t v3 = (uint64_t *)*((void *)this + 13);
  if (*((uint64_t **)this + 14) == v3)
  {
    uint64_t v8 = 0;
    BOOL v9 = 0;
  }
  else
  {
    uint64_t v5 = *v3;
    uint64_t v4 = (std::__shared_weak_count *)v3[1];
    uint64_t v8 = v5;
    BOOL v9 = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  QP::U2Parser::parse(v2, (uint64_t)&v8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  uint64_t v6 = *((void *)this + 6);
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 0x40000000;
  v7[2] = ___ZN2QP6Parser10addU2ParseEl_block_invoke;
  void v7[3] = &__block_descriptor_tmp_9;
  v7[4] = this;
  QP::U2Parser::enumerateParses(v6, v7);
}

void sub_224D9AC28(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 - 24);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void **___ZN2QP6Parser10addU2ParseEl_block_invoke(uint64_t a1, long long *a2)
{
  return std::vector<std::shared_ptr<QP::Parse>>::push_back[abi:ne180100]((uint64_t *)(*(void *)(a1 + 32) + 104), a2);
}

void QP::Parser::addLLMParse(QP::Parser *this, const void *a2, const __CFDictionary *a3)
{
  uint64_t v4 = *((void *)this + 8);
  uint64_t v5 = (uint64_t *)*((void *)this + 13);
  if (*((uint64_t **)this + 14) == v5)
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
  }
  else
  {
    uint64_t v7 = *v5;
    uint64_t v6 = (std::__shared_weak_count *)v5[1];
    uint64_t v10 = v7;
    unint64_t v11 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  QP::LLMParser::parse(v4, (uint64_t)&v10, a2, a3);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  uint64_t v8 = *((void *)this + 8);
  v9[0] = MEMORY[0x263EF8330];
  v9[1] = 0x40000000;
  v9[2] = ___ZN2QP6Parser11addLLMParseElPK14__CFDictionary_block_invoke;
  uint64_t v9[3] = &__block_descriptor_tmp_10;
  v9[4] = this;
  QP::LLMParser::enumerateParses(v8, v9);
}

void sub_224D9AD14(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 - 24);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void **___ZN2QP6Parser11addLLMParseElPK14__CFDictionary_block_invoke(uint64_t a1, long long *a2)
{
  return std::vector<std::shared_ptr<QP::Parse>>::push_back[abi:ne180100]((uint64_t *)(*(void *)(a1 + 32) + 104), a2);
}

void QP::Parser::addEntitiyParse(QP::Parser *this)
{
  uint64_t v10 = 0;
  unint64_t v11 = &v10;
  uint64_t v12 = 0x4002000000;
  long long v13 = __Block_byref_object_copy__2;
  char v14 = __Block_byref_object_dispose__2;
  memset(v15, 0, sizeof(v15));
  uint64_t v2 = *((void *)this + 4);
  v9[0] = MEMORY[0x263EF8330];
  v9[1] = 0x40000000;
  v9[2] = ___ZN2QP6Parser15addEntitiyParseEv_block_invoke;
  uint64_t v9[3] = &unk_2647051C0;
  v9[4] = &v10;
  QP::Lexer::enumerateEntityLexemes(v2, (uint64_t)v9);
  if (v11[6] != v11[5])
  {
    if (QP::Parser::validate((uint64_t)this, v11 + 5))
    {
      uint64_t v3 = (v11[6] - v11[5]) >> 4;
      unint64_t v6 = 0xAAAAAAAAAAAAAAABLL
         * ((uint64_t)(*(void *)(*((void *)this + 4) + 464) - *(void *)(*((void *)this + 4) + 456)) >> 3);
      uint64_t v7 = v3;
      uint64_t v5 = 0;
      char v4 = 1;
      std::allocate_shared[abi:ne180100]<QP::Parse,std::allocator<QP::Parse>,nlp::CFScopedPtr<__CFString const*> &,unsigned long,long,std::vector<std::shared_ptr<QP::ParseAttribute>> &,decltype(nullptr),BOOL,void>((const void **)this + 11, &v7, (uint64_t *)&v6, (void **)v11 + 5, (uint64_t)&v5, &v4, &v8);
      std::vector<std::shared_ptr<QP::Parse>>::push_back[abi:ne180100]((uint64_t *)this + 13, &v8);
      if (*((void *)&v8 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v8 + 1));
      }
    }
  }
  _Block_object_dispose(&v10, 8);
  *(void *)&long long v8 = v15;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
}

void sub_224D9AEA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  unint64_t v6 = va_arg(va1, void **);
  long long v8 = va_arg(va1, std::__shared_weak_count *);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  _Block_object_dispose(va1, 8);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void ___ZN2QP6Parser15addEntitiyParseEv_block_invoke(uint64_t a1, void *a2)
{
  char v4 = (long long *)(*a2 + 72);
  long long v12 = *(unint64_t *)v4;
  uint64_t v11 = 0;
  std::allocate_shared[abi:ne180100]<QP::ParseAttribute,std::allocator<QP::ParseAttribute>,CFRange,CFRange&,int,int,void>(&v12, v4, (int *)&v11 + 1, (int *)&v11, &v13);
  uint64_t v5 = v13;
  uint64_t v6 = *a2;
  uint64_t v7 = (std::__shared_weak_count *)a2[1];
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  long long v8 = *(std::__shared_weak_count **)(v5 + 112);
  *(void *)(v5 + 104) = v6;
  *(void *)(v5 + 112) = v7;
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (*(unsigned __int16 *)(*a2 + 88) - 1 <= 3)
  {
    uint64_t v9 = (std::string *)v13;
    std::string::basic_string[abi:ne180100]<0>(&__str, "kQPDate");
    std::string::operator=(v9 + 2, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  std::vector<std::shared_ptr<QP::ParseAttribute>>::push_back[abi:ne180100]((uint64_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), &v13);
  if (*((void *)&v13 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v13 + 1));
  }
}

void sub_224D9AFD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  _Unwind_Resume(exception_object);
}

void QP::Parser::addEmptyParse(QP::Parser *this)
{
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  long long v2 = 0uLL;
  uint64_t v6 = 0;
  std::allocate_shared[abi:ne180100]<QP::Parse,std::allocator<QP::Parse>,nlp::CFScopedPtr<__CFString const*> &,int,int,std::vector<std::shared_ptr<QP::ParseAttribute>>,decltype(nullptr),void>((const void **)this + 11, (int *)&v4 + 1, (int *)&v4, &v2, &v5);
  uint64_t v6 = (void **)&v2;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v6);
  std::vector<std::shared_ptr<QP::Parse>>::push_back[abi:ne180100]((uint64_t *)this + 13, &v5);
  if (*((void *)&v5 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v5 + 1));
  }
}

void sub_224D9B084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

void QP::Parser::addTokenCompletions(QP::Parser *this)
{
  CFStringRef v2 = (const __CFString *)*((void *)this + 11);
  if (v2 && CFStringGetLength(v2))
  {
    CFStringRef MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, *((CFStringRef *)this + 11));
    void v7[5] = MutableCopy;
    uint64_t v4 = *((void *)this + 2);
    v7[0] = MEMORY[0x263EF8330];
    v7[1] = 0x40000000;
    v7[2] = ___ZN2QP6Parser19addTokenCompletionsEv_block_invoke;
    void v7[3] = &__block_descriptor_tmp_15;
    v7[4] = this;
    QP::ParserGrammar::tokenCompletions(v4, MutableCopy, (uint64_t)v7);
    long long v5 = (uint64_t *)*((void *)this + 2);
    v6[0] = MEMORY[0x263EF8330];
    v6[1] = 0x40000000;
    v6[2] = ___ZN2QP6Parser19addTokenCompletionsEv_block_invoke_2;
    void v6[3] = &__block_descriptor_tmp_17;
    void v6[4] = this;
    QP::ParserGrammar::fallbackDateCompletions(v5, MutableCopy, (uint64_t)v6);
    if (MutableCopy) {
      CFRelease(MutableCopy);
    }
  }
}

void sub_224D9B1C8(_Unwind_Exception *a1)
{
  nlp::CFScopedPtr<__CFString *>::reset((const void **)(v1 - 40), 0);
  _Unwind_Resume(a1);
}

void ___ZN2QP6Parser19addTokenCompletionsEv_block_invoke(uint64_t a1, const void *a2, const void *a3, const void *a4, const void *a5, const void *a6, const void *a7, const void *a8, CFTypeRef a9, __int16 a10)
{
  CFTypeRef v17 = a3;
  CFTypeRef v18 = a2;
  CFTypeRef v16 = a4;
  CFTypeRef v14 = a6;
  CFTypeRef v15 = a5;
  CFTypeRef v12 = a8;
  CFTypeRef v13 = a7;
  uint64_t v10 = *(void *)(a1 + 32);
  std::allocate_shared[abi:ne180100]<QP::Completion,std::allocator<QP::Completion>,__CFString const*&,__CFString const*&,__CFString const*&,__CFString const*&,__CFString const*&,__CFString const*&,__CFString const*&,__CFString const*&,QPSymbolFlag &,void>(&v18, &v17, &v16, &v15, &v14, &v13, &v12, &v11, &a9, &a10);
  std::vector<std::shared_ptr<QP::Completion>>::push_back[abi:ne180100]((uint64_t *)(v10 + 128), &v11);
  if (*((void *)&v11 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v11 + 1));
  }
}

void sub_224D9B264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void **std::vector<std::shared_ptr<QP::Completion>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  __n128 result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    CFTypeRef v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>>((uint64_t)result, v13);
    CFTypeRef v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)CFTypeRef v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<QP::Completion>>::__swap_out_circular_buffer(a1, v18);
    uint64_t v9 = (void *)a1[1];
    __n128 result = std::__split_buffer<std::shared_ptr<QP::GraphStructureStack::Node>>::~__split_buffer(v18);
  }
  else
  {
    *uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_224D9B384(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<QP::GraphStructureStack::Node>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void ___ZN2QP6Parser19addTokenCompletionsEv_block_invoke_2(uint64_t a1, const void *a2, const void *a3, const void *a4, const void *a5, const void *a6, const void *a7, const void *a8, CFTypeRef a9, const void *a10, __int16 a11)
{
  unint64_t v11 = a10;
  CFTypeRef v21 = a3;
  CFTypeRef v22 = a2;
  CFTypeRef v19 = a5;
  CFTypeRef v20 = a4;
  CFTypeRef v17 = a7;
  CFTypeRef v18 = a6;
  CFTypeRef v16 = a8;
  uint64_t v12 = *(void *)(a1 + 32);
  std::allocate_shared[abi:ne180100]<QP::Completion,std::allocator<QP::Completion>,__CFString const*&,__CFString const*&,__CFString const*&,__CFString const*&,__CFString const*&,__CFString const*&,__CFString const*&,__CFString const*&,QPSymbolFlag &,void>(&v22, &v21, &v20, &v19, &v18, &v17, &v16, &v15, &a9, &a11);
  uint64_t v13 = v15;
  if (v11) {
    CFTypeRef v14 = CFRetain(v11);
  }
  else {
    CFTypeRef v14 = 0;
  }
  nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)(v13 + 64), v14);
  std::vector<std::shared_ptr<QP::Completion>>::push_back[abi:ne180100]((uint64_t *)(v12 + 128), &v15);
  if (*((void *)&v15 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v15 + 1));
  }
}

void sub_224D9B44C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void QP::Parser::parse(QP::Parser *this, int a2, int a3, int a4, int a5, const void *a6, const __CFDictionary *a7)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  QP::Parser::clear(this);
  QP::Parser::retainCurrentString((const void **)this);
  if (*(unsigned char *)(*(void *)this + 48))
  {
    QP::Parser::parseLexer(this);
    if (a2)
    {
      if (qpparserLogger(void)::token != -1) {
        dispatch_once(&qpparserLogger(void)::token, &__block_literal_global_3);
      }
      CFTypeRef v14 = qpparserLogger(void)::log;
      if (os_log_type_enabled((os_log_t)qpparserLogger(void)::log, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(v18) = 134217984;
        *(void *)((char *)&v18 + 4) = a6;
        _os_log_impl(&dword_224D85000, v14, OS_LOG_TYPE_DEFAULT, "[QPNLU][qid=%ld] using u2parser", (uint8_t *)&v18, 0xCu);
      }
      QP::Parser::addU2Parse(this);
    }
    if (a3)
    {
      if (qpparserLogger(void)::token != -1) {
        dispatch_once(&qpparserLogger(void)::token, &__block_literal_global_3);
      }
      long long v15 = qpparserLogger(void)::log;
      if (os_log_type_enabled((os_log_t)qpparserLogger(void)::log, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(v18) = 134217984;
        *(void *)((char *)&v18 + 4) = a6;
        _os_log_impl(&dword_224D85000, v15, OS_LOG_TYPE_DEFAULT, "[QPNLU][qid=%ld] using llmParser", (uint8_t *)&v18, 0xCu);
      }
      QP::Parser::addLLMParse(this, a6, a7);
    }
    QP::Parser::addAndSortParse(this);
    if (a5)
    {
      uint64_t v16 = *((void *)this + 2);
      CFStringRef v17 = (const __CFString *)*((void *)this + 11);
      *(void *)&long long v18 = MEMORY[0x263EF8330];
      *((void *)&v18 + 1) = 0x40000000;
      CFTypeRef v19 = ___ZN2QP6Parser14addCompletionsEv_block_invoke;
      CFTypeRef v20 = &__block_descriptor_tmp_7;
      CFTypeRef v21 = this;
      QP::ParserGrammar::completions(v16, v17, (uint64_t)&v18);
    }
    if (a4) {
      QP::Parser::addEntitiyParse(this);
    }
  }
  else
  {
    QP::Parser::addEmptyParse(this);
    if (a5)
    {
      QP::Parser::addTokenCompletions(this);
    }
  }
}

void QP::Parser::clear(QP::Parser *this)
{
  QP::GraphStructureStack::clear(*((QP::GraphStructureStack **)this + 10));
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)this + 11, 0);
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  nlp::CFScopedPtr<__CFArray *>::reset((const void **)this + 12, Mutable);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__clear[abi:ne180100]((uint64_t *)this + 13);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__clear[abi:ne180100]((uint64_t *)this + 16);
}

void QP::Parser::enumerateParses(uint64_t a1, uint64_t a2)
{
  char v8 = 0;
  CFStringRef v2 = *(uint64_t **)(a1 + 104);
  for (uint64_t i = *(uint64_t **)(a1 + 112); v2 != i; v2 += 2)
  {
    uint64_t v6 = *v2;
    unint64_t v5 = (std::__shared_weak_count *)v2[1];
    uint64_t v7 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t *, char *))(a2 + 16))(a2, &v6, &v8);
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    if (v8) {
      break;
    }
  }
}

void sub_224D9B7F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

CFIndex QP::Parser::enumerateCompletions(uint64_t a1, uint64_t a2)
{
  char v9 = 0;
  CFIndex result = CFArrayGetCount(*(CFArrayRef *)(a1 + 96));
  CFIndex v5 = result - 1;
  if (result >= 1)
  {
    CFIndex v6 = 0;
    do
    {
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 96), v6);
      CFIndex result = (*(uint64_t (**)(uint64_t, const void *, char *))(a2 + 16))(a2, ValueAtIndex, &v9);
      if (v9) {
        BOOL v8 = 1;
      }
      else {
        BOOL v8 = v5 == v6;
      }
      ++v6;
    }
    while (!v8);
  }
  return result;
}

void QP::Parser::enumerateTokenCompletions(uint64_t a1, uint64_t a2)
{
  char v8 = 0;
  CFStringRef v2 = *(uint64_t **)(a1 + 128);
  for (uint64_t i = *(uint64_t **)(a1 + 136); v2 != i; v2 += 2)
  {
    uint64_t v6 = *v2;
    CFIndex v5 = (std::__shared_weak_count *)v2[1];
    uint64_t v7 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t *, char *))(a2 + 16))(a2, &v6, &v8);
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    if (v8) {
      break;
    }
  }
}

void sub_224D9B93C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

void nlp::CFScopedPtr<__CFArray *>::reset(const void **a1, const void *a2)
{
  uint64_t v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

void QP::Parser::cooldown(QP::Parser *this)
{
  uint64_t v2 = *(void *)this;
  if (*(unsigned char *)(*(void *)this + 55))
  {
    uint64_t v3 = (QP::U2Parser *)*((void *)this + 6);
    if (v3)
    {
      QP::U2Parser::cooldown(v3);
      uint64_t v2 = *(void *)this;
    }
  }
  if (*(unsigned char *)(v2 + 56))
  {
    uint64_t v4 = (QP::LLMParser *)*((void *)this + 8);
    if (v4)
    {
      QP::LLMParser::preheat(v4);
    }
  }
}

void QP::Parser::embeddingString(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  uint64_t v7 = (const CFArrayCallBacks *)MEMORY[0x263EFFF70];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  CFMutableArrayRef v9 = CFArrayCreateMutable(v6, 0, v7);
  uint64_t v10 = v9;
  if (Mutable) {
    BOOL v11 = v9 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11)
  {
    if (qpparserLogger(void)::token != -1) {
      dispatch_once(&qpparserLogger(void)::token, &__block_literal_global_3);
    }
    if (os_log_type_enabled((os_log_t)qpparserLogger(void)::log, OS_LOG_TYPE_ERROR)) {
      QP::Parser::embeddingString();
    }
    if (!Mutable) {
      goto LABEL_128;
    }
    goto LABEL_127;
  }
  uint64_t v12 = *a1;
  if (*(unsigned char *)(*a1 + 56) && a1[8])
  {
    BOOL IsSearchToolSearch = SPQueryKindIsSearchToolSearch(*(CFStringRef *)(v12 + 184));
    uint64_t v12 = *a1;
  }
  else
  {
    BOOL IsSearchToolSearch = 0;
  }
  int v13 = *(unsigned __int8 *)(v12 + 51);
  if (*(void *)(v12 + 8) == 9)
  {
    BOOL v14 = 1;
    if (!*(unsigned char *)(v12 + 51))
    {
      BOOL v16 = 0;
      int v15 = 1;
      goto LABEL_21;
    }
    LOBYTE(v13) = 1;
  }
  else
  {
    BOOL v14 = v13 != 0;
  }
  int v15 = v14;
  BOOL v16 = !SPQueryKindIsSpotlightUISearch(*(void *)(v12 + 184));
  uint64_t v12 = *a1;
  LOBYTE(v14) = v13;
LABEL_21:
  if (!*(unsigned char *)(v12 + 52))
  {
    uint64_t v26 = a1[4];
    if (v26)
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&uint8_t buf[16] = 0x2000000000;
      LOBYTE(v55) = 0;
      v47[0] = MEMORY[0x263EF8330];
      v47[1] = 0x40000000;
      v47[2] = ___ZN2QP6Parser15embeddingStringElU13block_pointerFvPK9__CFArrayS3_NS_23QPQuerySafetyErrorCodesEE_block_invoke;
      void v47[3] = &unk_264705228;
      BOOL v48 = v14;
      v47[4] = buf;
      v47[5] = a1;
      BOOL v49 = v16;
      QP::Lexer::enumerateAnnotations(v26, (uint64_t)v47);
      if (*(unsigned char *)(*(void *)&buf[8] + 24))
      {
        if (qpparserLogger(void)::token != -1) {
          dispatch_once(&qpparserLogger(void)::token, &__block_literal_global_3);
        }
        if (os_log_type_enabled((os_log_t)qpparserLogger(void)::log, OS_LOG_TYPE_ERROR)) {
          QP::Parser::embeddingString();
        }
        os_signpost_id_t v27 = os_signpost_id_generate((os_log_t)qpparserLogger(void)::log);
        if (qpparserLogger(void)::token != -1) {
          dispatch_once(&qpparserLogger(void)::token, &__block_literal_global_3);
        }
        if (v27 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          uint64_t v28 = qpparserLogger(void)::log;
          if (os_signpost_enabled((os_log_t)qpparserLogger(void)::log))
          {
            uint64_t v29 = *(void *)(*a1 + 8);
            *(_DWORD *)uint64_t v50 = 134218240;
            uint64_t v51 = a2;
            __int16 v52 = 2048;
            uint64_t v53 = v29;
            _os_signpost_emit_with_name_impl(&dword_224D85000, v28, OS_SIGNPOST_EVENT, v27, "QPParserSensitiveQuery", "[QPNLU][qid=%ld] sensitive query token for context '%lu', avoid embedding search", v50, 0x16u);
          }
        }
        (*(void (**)(uint64_t, void, void, uint64_t))(a3 + 16))(a3, 0, 0, 1);
        _Block_object_dispose(buf, 8);
        return;
      }
      _Block_object_dispose(buf, 8);
    }
  }
  if (!v15) {
    goto LABEL_85;
  }
  CFStringRef v17 = CFAttributedStringCreateMutable(v6, 0);
  v57.CFIndex location = 0;
  v57.CFIndex length = 0;
  CFAttributedStringReplaceString(v17, v57, (CFStringRef)a1[11]);
  if (IsSearchToolSearch)
  {
    if (qpparserLogger(void)::token != -1) {
      dispatch_once(&qpparserLogger(void)::token, &__block_literal_global_3);
    }
    long long v18 = qpparserLogger(void)::log;
    if (os_log_type_enabled((os_log_t)qpparserLogger(void)::log, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(void *)&uint8_t buf[4] = a2;
      _os_log_impl(&dword_224D85000, v18, OS_LOG_TYPE_DEFAULT, "[QPNLU][qid=%ld] getting embedding string from LLM parser", buf, 0xCu);
    }
    uint64_t EmbeddingString = QP::LLMParser::getEmbeddingString((QP::LLMParser *)a1[8]);
    goto LABEL_29;
  }
  uint64_t v30 = *a1;
  if (!*(unsigned char *)(*a1 + 55) || (uint64_t v31 = (QP::U2Parser *)a1[6]) == 0)
  {
LABEL_76:
    v21.CFIndex length = CFAttributedStringGetLength(v17);
    goto LABEL_77;
  }
  if (!*(unsigned char *)(v30 + 54))
  {
LABEL_68:
    uint64_t v35 = *(void *)(v30 + 8);
    if (v35 == 9 || (unint64_t v37 = __ROR8__(v35, 1), v37 > 6) || ((1 << v37) & 0x71) == 0)
    {
      if (qpparserLogger(void)::token != -1) {
        dispatch_once(&qpparserLogger(void)::token, &__block_literal_global_3);
      }
      std::string v36 = qpparserLogger(void)::log;
      if (os_log_type_enabled((os_log_t)qpparserLogger(void)::log, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        *(void *)&uint8_t buf[4] = a2;
        _os_log_impl(&dword_224D85000, v36, OS_LOG_TYPE_DEFAULT, "[QPNLU][qid=%ld] getting embedding string from U2 parser", buf, 0xCu);
      }
      uint64_t EmbeddingString = QP::U2Parser::getEmbeddingString((QP::U2Parser *)a1[6]);
LABEL_29:
      CFAttributedStringRef v20 = (const __CFAttributedString *)EmbeddingString;
      v21.CFIndex length = CFAttributedStringGetLength(v17);
      if (v20)
      {
        v21.CFIndex location = 0;
        CFAttributedStringReplaceAttributedString(v17, v21, v20);
        if (qpparserLogger(void)::token != -1) {
          dispatch_once(&qpparserLogger(void)::token, &__block_literal_global_3);
        }
        uint64_t v22 = qpparserLogger(void)::log;
        if (os_log_type_enabled((os_log_t)qpparserLogger(void)::log, OS_LOG_TYPE_DEFAULT))
        {
          CFStringRef v23 = (const __CFString *)a1[11];
          if (v23)
          {
            CFIndex Length = CFStringGetLength(v23);
            if (v17)
            {
LABEL_35:
              CFIndex v25 = CFAttributedStringGetLength(v17);
LABEL_66:
              *(_DWORD *)buf = 134218496;
              *(void *)&uint8_t buf[4] = a2;
              *(_WORD *)&buf[12] = 2048;
              *(void *)&buf[14] = Length;
              *(_WORD *)&buf[22] = 2048;
              CFIndex v55 = v25;
              _os_log_impl(&dword_224D85000, v22, OS_LOG_TYPE_DEFAULT, "[QPNLU][qid=%ld] modified photo embedding string (len: %ld) -> (len: %ld)", buf, 0x20u);
              goto LABEL_81;
            }
          }
          else
          {
            CFIndex Length = 0;
            if (v17) {
              goto LABEL_35;
            }
          }
          CFIndex v25 = 0;
          goto LABEL_66;
        }
LABEL_81:
        if (v17)
        {
          CFStringRef String = CFAttributedStringGetString(v17);
          CFStringRef MutableCopy = CFStringCreateMutableCopy(v6, 0, String);
          CFStringRef v40 = MutableCopy;
          if (MutableCopy)
          {
            CFStringTrimWhitespace(MutableCopy);
            if (CFStringGetLength(v40) < 1)
            {
              if (qpparserLogger(void)::token != -1) {
                dispatch_once(&qpparserLogger(void)::token, &__block_literal_global_3);
              }
              if (os_log_type_enabled((os_log_t)qpparserLogger(void)::log, OS_LOG_TYPE_ERROR)) {
                QP::Parser::embeddingString();
              }
              uint64_t v41 = 0;
            }
            else
            {
              CFArrayAppendValue(Mutable, v17);
              CFArrayAppendValue(v10, @"_kMDItemPhotoEmbedding");
              uint64_t v41 = 1;
            }
            CFRelease(v40);
          }
          else
          {
            if (qpparserLogger(void)::token != -1) {
              dispatch_once(&qpparserLogger(void)::token, &__block_literal_global_3);
            }
            if (os_log_type_enabled((os_log_t)qpparserLogger(void)::log, OS_LOG_TYPE_ERROR)) {
              QP::Parser::embeddingString();
            }
            uint64_t v41 = 0;
          }
          CFRelease(v17);
          goto LABEL_98;
        }
LABEL_85:
        uint64_t v41 = 0;
LABEL_98:
        if (v16)
        {
          if (IsSearchToolSearch && *(unsigned char *)(a1[8] + 140))
          {
            if (qpparserLogger(void)::token != -1) {
              dispatch_once(&qpparserLogger(void)::token, &__block_literal_global_3);
            }
            if (os_log_type_enabled((os_log_t)qpparserLogger(void)::log, OS_LOG_TYPE_ERROR)) {
              QP::Parser::embeddingString();
            }
          }
          else
          {
            std::string v42 = CFStringCreateMutableCopy(v6, 0, (CFStringRef)a1[11]);
            CFStringRef v43 = v42;
            if (v42)
            {
              CFStringTrimWhitespace(v42);
              if (CFStringGetLength(v43) < 1)
              {
                if (qpparserLogger(void)::token != -1) {
                  dispatch_once(&qpparserLogger(void)::token, &__block_literal_global_3);
                }
                uint64_t v44 = qpparserLogger(void)::log;
                if (os_log_type_enabled((os_log_t)qpparserLogger(void)::log, OS_LOG_TYPE_ERROR)) {
                  QP::Parser::embeddingString((uint64_t)v43, a2, v44);
                }
              }
              else
              {
                CFArrayAppendValue(Mutable, v43);
                CFArrayAppendValue(v10, @"_kMDItemPrimaryTextEmbedding");
                ++v41;
              }
              CFRelease(v43);
            }
            else
            {
              if (qpparserLogger(void)::token != -1) {
                dispatch_once(&qpparserLogger(void)::token, &__block_literal_global_3);
              }
              if (os_log_type_enabled((os_log_t)qpparserLogger(void)::log, OS_LOG_TYPE_ERROR)) {
                QP::Parser::embeddingString();
              }
            }
          }
        }
        if (v41)
        {
          if (qpparserLogger(void)::token != -1) {
            dispatch_once(&qpparserLogger(void)::token, &__block_literal_global_3);
          }
          uint64_t v45 = qpparserLogger(void)::log;
          if (os_log_type_enabled((os_log_t)qpparserLogger(void)::log, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)&uint8_t buf[4] = a2;
            *(_WORD *)&buf[12] = 2048;
            *(void *)&buf[14] = v41;
            _os_log_impl(&dword_224D85000, v45, OS_LOG_TYPE_DEFAULT, "[QPNLU][qid=%ld] requesting %ld query embeddings", buf, 0x16u);
          }
          (*(void (**)(uint64_t, __CFArray *, __CFArray *, void))(a3 + 16))(a3, Mutable, v10, 0);
        }
        else
        {
          if (qpparserLogger(void)::token != -1) {
            dispatch_once(&qpparserLogger(void)::token, &__block_literal_global_3);
          }
          if (os_log_type_enabled((os_log_t)qpparserLogger(void)::log, OS_LOG_TYPE_ERROR)) {
            QP::Parser::embeddingString();
          }
        }
LABEL_127:
        CFRelease(Mutable);
LABEL_128:
        if (v10) {
          CFRelease(v10);
        }
        return;
      }
LABEL_77:
      v21.CFIndex location = 0;
      CFAttributedStringReplaceString(v17, v21, &stru_26D832058);
      if (qpparserLogger(void)::token != -1) {
        dispatch_once(&qpparserLogger(void)::token, &__block_literal_global_3);
      }
      if (os_log_type_enabled((os_log_t)qpparserLogger(void)::log, OS_LOG_TYPE_ERROR)) {
        QP::Parser::embeddingString();
      }
      goto LABEL_81;
    }
    goto LABEL_76;
  }
  if (!QP::U2Parser::isIntentUnsafe(v31))
  {
    uint64_t v30 = *a1;
    goto LABEL_68;
  }
  if (qpparserLogger(void)::token != -1) {
    dispatch_once(&qpparserLogger(void)::token, &__block_literal_global_3);
  }
  if (os_log_type_enabled((os_log_t)qpparserLogger(void)::log, OS_LOG_TYPE_ERROR)) {
    QP::Parser::embeddingString();
  }
  os_signpost_id_t v32 = os_signpost_id_generate((os_log_t)qpparserLogger(void)::log);
  if (qpparserLogger(void)::token != -1) {
    dispatch_once(&qpparserLogger(void)::token, &__block_literal_global_3);
  }
  if (v32 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    char v33 = qpparserLogger(void)::log;
    if (os_signpost_enabled((os_log_t)qpparserLogger(void)::log))
    {
      uint64_t v34 = *(void *)(*a1 + 8);
      *(_DWORD *)buf = 134218240;
      *(void *)&uint8_t buf[4] = a2;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v34;
      _os_signpost_emit_with_name_impl(&dword_224D85000, v33, OS_SIGNPOST_EVENT, v32, "QPParserUnsafeIntent", "[QPNLU][qid=%ld] unsafe intent for context '%lu', avoid embedding search", buf, 0x16u);
    }
  }
  CFRelease(v17);
  (*(void (**)(uint64_t, void, void, uint64_t))(a3 + 16))(a3, 0, 0, 2);
}

void sub_224D9C49C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN2QP6Parser15embeddingStringElU13block_pointerFvPK9__CFArrayS3_NS_23QPQuerySafetyErrorCodesEE_block_invoke(uint64_t result, __CFString *a2, unsigned char *a3)
{
  uint64_t v5 = result;
  uint64_t v6 = *(void *)(result + 40);
  if (*(unsigned char *)(result + 48))
  {
    CFIndex result = CFStringsAreEqual(@"OFFENSIVE", a2);
    if (result || (CFIndex result = CFStringsAreEqual(@"PHOTOSENSITIVE", a2), result))
    {
      *(unsigned char *)(*(void *)(*(void *)(v5 + 32) + 8) + 24) = 1;
      *a3 = 1;
    }
  }
  if (*(unsigned char *)(v5 + 49))
  {
    if (*(void *)(*(void *)v6 + 8) == 2)
    {
      CFIndex result = CFStringsAreEqual(@"OFFENSIVE", a2);
      if (result || (CFIndex result = CFStringsAreEqual(@"TEXTSENSITIVE", a2), result))
      {
        *(unsigned char *)(*(void *)(*(void *)(v5 + 32) + 8) + 24) = 1;
        *a3 = 1;
      }
    }
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__emplace_unique_key_args<unsigned short,std::pair<unsigned short,std::set<unsigned short>>>(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t **)(a1 + 8);
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    unsigned int v6 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v4;
        unsigned int v8 = *((unsigned __int16 *)v4 + 16);
        if (v6 >= v8) {
          break;
        }
        uint64_t v4 = *v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_10;
        }
      }
      if (v8 >= v6) {
        break;
      }
      uint64_t v4 = v7[1];
      if (!v4)
      {
        uint64_t v5 = v7 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v7 = (uint64_t **)(a1 + 8);
LABEL_10:
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__construct_node<std::pair<unsigned short,std::set<unsigned short>>>(a1, a3, (uint64_t)&v10);
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v7, v5, v10);
    return v10;
  }
  return (uint64_t *)v7;
}

_WORD *std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__construct_node<std::pair<unsigned short,std::set<unsigned short>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  CFIndex result = operator new(0x40uLL);
  *(void *)a3 = result;
  *(void *)(a3 + 8) = v5;
  result[16] = *(_WORD *)a2;
  uint64_t v7 = (void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 16);
  *((void *)result + 5) = *(void *)(a2 + 8);
  *((void *)result + 6) = v8;
  CFMutableArrayRef v9 = (char *)(result + 24);
  uint64_t v10 = *(void *)(a2 + 24);
  *((void *)result + 7) = v10;
  if (v10)
  {
    *(void *)(v8 + 16) = v9;
    *(void *)(a2 + 8) = v7;
    *uint64_t v7 = 0;
    *(void *)(a2 + 24) = 0;
  }
  else
  {
    *((void *)result + 5) = v9;
  }
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  uint64_t v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  CFIndex result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      uint64_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      uint64_t v3 = (uint64_t *)v2[2];
      uint64_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), uint64_t v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            CFMutableArrayRef v9 = (uint64_t **)a2[2];
          }
          else
          {
            CFMutableArrayRef v9 = (uint64_t **)v2[1];
            uint64_t v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              void v10[2] = (uint64_t)v2;
              uint64_t v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            *CFMutableArrayRef v9 = v2;
            v2[2] = (uint64_t)v9;
            uint64_t v3 = v9[2];
            uint64_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          *uint64_t v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), uint64_t v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          uint64_t *v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            uint64_t v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          uint64_t v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        uint64_t *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      unsigned char *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void std::__tree<unsigned short>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<unsigned short>::destroy(a1, *a2);
    std::__tree<unsigned short>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t **std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(uint64_t **a1, unsigned __int16 *a2, uint64_t a3, _WORD **a4)
{
  uint64_t v7 = a1 + 1;
  int v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        CFMutableArrayRef v9 = (uint64_t **)v6;
        unsigned int v10 = *((unsigned __int16 *)v6 + 16);
        if (v8 >= v10) {
          break;
        }
        int v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      int v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    CFMutableArrayRef v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0x40uLL);
    v11[16] = **a4;
    *((void *)v11 + 7) = 0;
    *((void *)v11 + 6) = 0;
    *((void *)v11 + 5) = v11 + 24;
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t **std::__tree<unsigned short>::__emplace_unique_key_args<unsigned short,unsigned short const&>(uint64_t **a1, unsigned __int16 *a2, _WORD *a3)
{
  int v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    unsigned int v7 = *a2;
    while (1)
    {
      while (1)
      {
        unsigned int v8 = (uint64_t **)v5;
        unsigned int v9 = *((unsigned __int16 *)v5 + 13);
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        int v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        int v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unsigned int v8 = a1 + 1;
LABEL_10:
    unsigned int v10 = (uint64_t *)operator new(0x20uLL);
    *((_WORD *)v10 + 13) = *a3;
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

BOOL QP::DateComponents::isTime(QP::DateComponents *this)
{
  return ((*((_DWORD *)this + 2) & 0x80000000) == 0
       || (*((_DWORD *)this + 1) & 0x80000000) == 0
       || (*(_DWORD *)this & 0x80000000) == 0
       || (*((_DWORD *)this + 7) & 0x80000000) == 0)
      && !QP::DateComponents::hasDate(this);
}

BOOL QP::DateComponents::hasDate(QP::DateComponents *this)
{
  return (*((_DWORD *)this + 3) & 0x80000000) == 0
      || (*((_DWORD *)this + 8) & 0x80000000) == 0
      || (*((_DWORD *)this + 4) & 0x80000000) == 0
      || (*((_DWORD *)this + 5) & 0x80000000) == 0
      || (*((_DWORD *)this + 6) & 0x80000000) == 0
      || (*((_DWORD *)this + 11) & 0x80000000) == 0
      || (*((_DWORD *)this + 10) & 0x80000000) == 0
      || (*((_DWORD *)this + 9) & 0x80000000) == 0
      || *((_DWORD *)this + 12) >= 0;
}

void *std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    CFIndex result = std::vector<long>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      CFIndex result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_224D9CB90(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<long>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  CFIndex result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

uint64_t std::vector<std::shared_ptr<QP::ParseAttribute>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<QP::ParseAttribute>>,std::reverse_iterator<std::shared_ptr<QP::ParseAttribute>*>,std::reverse_iterator<std::shared_ptr<QP::ParseAttribute>*>,std::reverse_iterator<std::shared_ptr<QP::ParseAttribute>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<QP::ParseAttribute>>,std::reverse_iterator<std::shared_ptr<QP::ParseAttribute>*>,std::reverse_iterator<std::shared_ptr<QP::ParseAttribute>*>,std::reverse_iterator<std::shared_ptr<QP::ParseAttribute>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<QP::ParseAttribute>>,std::reverse_iterator<std::shared_ptr<QP::ParseAttribute>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<QP::ParseAttribute>>,std::reverse_iterator<std::shared_ptr<QP::ParseAttribute>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>,std::reverse_iterator<std::shared_ptr<QP::GraphStructureStack::Node>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::ParseAttribute> &,std::shared_ptr<QP::ParseAttribute> &),std::shared_ptr<QP::ParseAttribute>*,false>(uint64_t *a1, long long *a2, uint64_t (**a3)(uint64_t *, uint64_t *), uint64_t a4, char a5)
{
void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::ParseAttribute> &,std::shared_ptr<QP::ParseAttribute> &),std::shared_ptr<QP::ParseAttribute>*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(long long *, uint64_t))
{
  if (a1 != a2)
  {
    char v5 = (long long *)(a1 + 16);
    if (a1 + 16 != a2)
    {
      uint64_t v7 = 0;
      uint64_t v8 = a1;
      do
      {
        uint64_t v9 = v8;
        uint64_t v8 = (uint64_t)v5;
        if ((*a3)(v5, v9))
        {
          long long v18 = *(_OWORD *)v8;
          *(void *)uint64_t v8 = 0;
          *(void *)(v8 + 8) = 0;
          uint64_t v10 = v7;
          while (1)
          {
            uint64_t v11 = a1 + v10;
            long long v12 = *(_OWORD *)(a1 + v10);
            *(void *)uint64_t v11 = 0;
            *(void *)(v11 + 8) = 0;
            uint64_t v13 = *(std::__shared_weak_count **)(a1 + v10 + 24);
            *(_OWORD *)(v11 + 16) = v12;
            if (v13) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v13);
            }
            if (!v10) {
              break;
            }
            char v14 = (*a3)(&v18, a1 + v10 - 16);
            v10 -= 16;
            if ((v14 & 1) == 0)
            {
              uint64_t v15 = a1 + v10 + 16;
              goto LABEL_12;
            }
          }
          uint64_t v15 = a1;
LABEL_12:
          long long v16 = v18;
          long long v18 = 0uLL;
          CFStringRef v17 = *(std::__shared_weak_count **)(v15 + 8);
          *(_OWORD *)uint64_t v15 = v16;
          if (v17) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v17);
          }
          if (*((void *)&v18 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v18 + 1));
          }
        }
        char v5 = (long long *)(v8 + 16);
        v7 += 16;
      }
      while (v8 + 16 != a2);
    }
  }
}

void sub_224D9D210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::ParseAttribute> &,std::shared_ptr<QP::ParseAttribute> &),std::shared_ptr<QP::ParseAttribute>*>(long long *a1, long long *a2, uint64_t (**a3)(long long *, long long *))
{
  if (a1 != a2)
  {
    uint64_t v4 = a1;
    char v5 = a1 + 1;
    if (a1 + 1 != a2)
    {
      uint64_t v7 = a1 - 1;
      do
      {
        uint64_t v8 = v4;
        uint64_t v4 = v5;
        if ((*a3)(v5, v8))
        {
          long long v15 = *v4;
          *(void *)uint64_t v4 = 0;
          *((void *)v4 + 1) = 0;
          uint64_t v9 = v7;
          do
          {
            long long v10 = v9[1];
            *((void *)v9 + 2) = 0;
            *((void *)v9 + 3) = 0;
            uint64_t v11 = (std::__shared_weak_count *)*((void *)v9 + 5);
            v9[2] = v10;
            if (v11) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v11);
            }
            char v12 = (*a3)(&v15, v9--);
          }
          while ((v12 & 1) != 0);
          long long v13 = v15;
          long long v15 = 0uLL;
          char v14 = (std::__shared_weak_count *)*((void *)v9 + 5);
          v9[2] = v13;
          if (v14) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v14);
          }
          if (*((void *)&v15 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v15 + 1));
          }
        }
        char v5 = v4 + 1;
        ++v7;
      }
      while (v4 + 1 != a2);
    }
  }
}

void sub_224D9D30C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<QP::ParseAttribute> *,BOOL (*&)(std::shared_ptr<QP::ParseAttribute>&,std::shared_ptr<QP::ParseAttribute>&)>(long long *a1, void *a2, uint64_t (**a3)(long long *, void *))
{
  uint64_t v4 = a2;
  long long v17 = *a1;
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  if ((*a3)(&v17, a2 - 2))
  {
    char v6 = a1;
    do
      v6 += 2;
    while (((*a3)(&v17, v6) & 1) == 0);
  }
  else
  {
    uint64_t v7 = a1 + 1;
    do
    {
      char v6 = v7;
      if (v7 >= v4) {
        break;
      }
      int v8 = (*a3)(&v17, v7);
      uint64_t v7 = v6 + 2;
    }
    while (!v8);
  }
  if (v6 < v4)
  {
    do
      v4 -= 2;
    while (((*a3)(&v17, v4) & 1) != 0);
  }
  while (v6 < v4)
  {
    uint64_t v9 = *v6;
    void *v6 = *v4;
    *uint64_t v4 = v9;
    uint64_t v10 = v6[1];
    v6[1] = v4[1];
    v4[1] = v10;
    do
      v6 += 2;
    while (!(*a3)(&v17, v6));
    do
      v4 -= 2;
    while (((*a3)(&v17, v4) & 1) != 0);
  }
  uint64_t v11 = (long long *)(v6 - 2);
  if (v6 - 2 != (void *)a1)
  {
    long long v12 = *v11;
    *(void *)uint64_t v11 = 0;
    *(v6 - 1) = 0;
    long long v13 = (std::__shared_weak_count *)*((void *)a1 + 1);
    *a1 = v12;
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
  }
  long long v14 = v17;
  long long v17 = 0uLL;
  long long v15 = (std::__shared_weak_count *)*(v6 - 1);
  *((_OWORD *)v6 - 1) = v14;
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (*((void *)&v17 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v17 + 1));
  }
  return v6;
}

void sub_224D9D48C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

long long *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<QP::ParseAttribute> *,BOOL (*&)(std::shared_ptr<QP::ParseAttribute>&,std::shared_ptr<QP::ParseAttribute>&)>(long long *a1, long long *a2, uint64_t (**a3)(long long *, long long *))
{
  uint64_t v6 = 0;
  long long v19 = *a1;
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  do
    char v7 = (*a3)(&a1[++v6], &v19);
  while ((v7 & 1) != 0);
  unint64_t v8 = (unint64_t)&a1[v6];
  if (v6 == 1)
  {
    do
    {
      if (v8 >= (unint64_t)a2) {
        break;
      }
      --a2;
    }
    while (((*a3)(a2, &v19) & 1) == 0);
  }
  else
  {
    do
      --a2;
    while (!(*a3)(a2, &v19));
  }
  uint64_t v9 = &a1[v6];
  if (v8 < (unint64_t)a2)
  {
    uint64_t v10 = a2;
    do
    {
      uint64_t v11 = *(void *)v9;
      *(void *)uint64_t v9 = *(void *)v10;
      *(void *)uint64_t v10 = v11;
      uint64_t v12 = *((void *)v9 + 1);
      *((void *)v9 + 1) = *((void *)v10 + 1);
      *((void *)v10 + 1) = v12;
      do
        ++v9;
      while (((*a3)(v9, &v19) & 1) != 0);
      do
        --v10;
      while (!(*a3)(v10, &v19));
    }
    while (v9 < v10);
  }
  long long v13 = v9 - 1;
  if (v9 - 1 != a1)
  {
    long long v14 = *v13;
    *(void *)long long v13 = 0;
    *((void *)v9 - 1) = 0;
    long long v15 = (std::__shared_weak_count *)*((void *)a1 + 1);
    *a1 = v14;
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
  }
  long long v16 = v19;
  long long v19 = 0uLL;
  long long v17 = (std::__shared_weak_count *)*((void *)v9 - 1);
  *(v9 - 1) = v16;
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (*((void *)&v19 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v19 + 1));
  }
  return v9 - 1;
}

void sub_224D9D628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::ParseAttribute> &,std::shared_ptr<QP::ParseAttribute> &),std::shared_ptr<QP::ParseAttribute>*>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t v6 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if ((*a3)(a2 - 2, a1))
      {
        uint64_t v8 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v8;
        uint64_t v9 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(a1, a1 + 2, a2 - 2, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(a1, a1 + 2, a1 + 4, a2 - 2, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2, a3);
      return 1;
    default:
      uint64_t v10 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(a1, a1 + 2, a1 + 4, a3);
      uint64_t v11 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v11, v10))
    {
      long long v22 = *(_OWORD *)v11;
      uint64_t *v11 = 0;
      v11[1] = 0;
      uint64_t v14 = v12;
      while (1)
      {
        long long v15 = (char *)a1 + v14;
        long long v16 = *(_OWORD *)((char *)a1 + v14 + 32);
        *((void *)v15 + 4) = 0;
        *((void *)v15 + 5) = 0;
        long long v17 = *(std::__shared_weak_count **)((char *)a1 + v14 + 56);
        *((_OWORD *)v15 + 3) = v16;
        if (v17) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v17);
        }
        if (v14 == -32) {
          break;
        }
        char v18 = (*a3)((uint64_t *)&v22, (uint64_t *)((char *)a1 + v14 + 16));
        v14 -= 16;
        if ((v18 & 1) == 0)
        {
          uint64_t v19 = (uint64_t)a1 + v14 + 48;
          goto LABEL_14;
        }
      }
      uint64_t v19 = (uint64_t)a1;
LABEL_14:
      long long v20 = v22;
      long long v22 = 0uLL;
      BOOL v21 = *(std::__shared_weak_count **)(v19 + 8);
      *(_OWORD *)uint64_t v19 = v20;
      if (v21) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v21);
      }
      if (*((void *)&v22 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v22 + 1));
      }
      if (++v13 == 8) {
        return v11 + 2 == a2;
      }
    }
    uint64_t v10 = v11;
    v12 += 16;
    v11 += 2;
    if (v11 == a2) {
      return 1;
    }
  }
}

void sub_224D9D854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

long long *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::ParseAttribute> &,std::shared_ptr<QP::ParseAttribute> &),std::shared_ptr<QP::ParseAttribute>*,std::shared_ptr<QP::ParseAttribute>*>(uint64_t a1, uint64_t a2, long long *a3, unsigned int (**a4)(long long *, uint64_t))
{
  if (a1 != a2)
  {
    uint64_t v6 = a2;
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) >> 4;
    if (a2 - a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = (long long *)(a1 + 16 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::ParseAttribute> &,std::shared_ptr<QP::ParseAttribute> &),std::shared_ptr<QP::ParseAttribute>*>(a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = v6;
    if ((long long *)v6 != a3)
    {
      uint64_t v14 = (long long *)v6;
      do
      {
        if ((*a4)(v14, a1))
        {
          uint64_t v15 = *(void *)v14;
          *(void *)uint64_t v14 = *(void *)a1;
          *(void *)a1 = v15;
          uint64_t v16 = *((void *)v14 + 1);
          *((void *)v14 + 1) = *(void *)(a1 + 8);
          *(void *)(a1 + 8) = v16;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::ParseAttribute> &,std::shared_ptr<QP::ParseAttribute> &),std::shared_ptr<QP::ParseAttribute>*>(a1, a4, v9, (long long *)a1);
        }
        ++v14;
      }
      while (v14 != a3);
      uint64_t v13 = (uint64_t)a3;
    }
    if (v8 >= 17)
    {
      unint64_t v17 = (unint64_t)v8 >> 4;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*)(std::shared_ptr<QP::ParseAttribute> &,std::shared_ptr<QP::ParseAttribute> &),std::shared_ptr<QP::ParseAttribute>*>((uint64_t *)a1, v6, (unsigned int (**)(uint64_t, uint64_t))a4, v17);
        v6 -= 16;
      }
      while (v17-- > 2);
    }
    return (long long *)v13;
  }
  return a3;
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::ParseAttribute> &,std::shared_ptr<QP::ParseAttribute> &),std::shared_ptr<QP::ParseAttribute>*>(uint64_t a1, unsigned int (**a2)(long long *, uint64_t), uint64_t a3, long long *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    char v5 = a4;
    uint64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - a1) >> 4)
    {
      uint64_t v10 = ((uint64_t)a4 - a1) >> 3;
      uint64_t v11 = v10 + 1;
      uint64_t v12 = (long long *)(a1 + 16 * (v10 + 1));
      uint64_t v13 = v10 + 2;
      if (v10 + 2 < a3 && (*a2)(v12, (uint64_t)(v12 + 1)))
      {
        ++v12;
        uint64_t v11 = v13;
      }
      if ((((uint64_t (*)(long long *, long long *))*a2)(v12, v5) & 1) == 0)
      {
        long long v20 = *v5;
        *(void *)char v5 = 0;
        *((void *)v5 + 1) = 0;
        do
        {
          uint64_t v14 = v12;
          long long v15 = *v12;
          *(void *)uint64_t v12 = 0;
          *((void *)v12 + 1) = 0;
          uint64_t v16 = (std::__shared_weak_count *)*((void *)v5 + 1);
          long long *v5 = v15;
          if (v16) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v16);
          }
          if (v7 < v11) {
            break;
          }
          uint64_t v17 = (2 * v11) | 1;
          uint64_t v12 = (long long *)(a1 + 16 * v17);
          uint64_t v11 = 2 * v11 + 2;
          if (v11 >= a3)
          {
            uint64_t v11 = v17;
          }
          else if ((*a2)((long long *)(a1 + 16 * v17), (uint64_t)(v12 + 1)))
          {
            ++v12;
          }
          else
          {
            uint64_t v11 = v17;
          }
          char v5 = v14;
        }
        while (!(*a2)(v12, (uint64_t)&v20));
        long long v18 = v20;
        long long v20 = 0uLL;
        uint64_t v19 = (std::__shared_weak_count *)*((void *)v14 + 1);
        *uint64_t v14 = v18;
        if (v19) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v19);
        }
        if (*((void *)&v20 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
        }
      }
    }
  }
}

void sub_224D9DB1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*)(std::shared_ptr<QP::ParseAttribute> &,std::shared_ptr<QP::ParseAttribute> &),std::shared_ptr<QP::ParseAttribute>*>(uint64_t *a1, uint64_t a2, unsigned int (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v8 = *a1;
    uint64_t v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v9 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>((uint64_t)a1, a3, a4);
    uint64_t v10 = (void *)v9;
    if (v9 == a2 - 16)
    {
      long long v15 = *(std::__shared_weak_count **)(v9 + 8);
      *uint64_t v10 = v8;
      v10[1] = v7;
      if (v15)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
    }
    else
    {
      long long v11 = *(_OWORD *)(a2 - 16);
      *(void *)(a2 - 16) = 0;
      *(void *)(a2 - 8) = 0;
      uint64_t v12 = *(std::__shared_weak_count **)(v9 + 8);
      *(_OWORD *)uint64_t v10 = v11;
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
      uint64_t v13 = (uint64_t)(v10 + 2);
      uint64_t v14 = *(std::__shared_weak_count **)(a2 - 8);
      *(void *)(a2 - 16) = v8;
      *(void *)(a2 - 8) = v7;
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::ParseAttribute> &,std::shared_ptr<QP::ParseAttribute> &),std::shared_ptr<QP::ParseAttribute>*>((uint64_t)a1, v13, (uint64_t (**)(long long *, long long *))a3, (v13 - (uint64_t)a1) >> 4);
    }
  }
}

void sub_224D9DC2C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::ParseAttribute> &,std::shared_ptr<QP::ParseAttribute> &),std::shared_ptr<QP::ParseAttribute>*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(long long *, long long *), uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v7 = v4 >> 1;
    uint64_t v8 = (long long *)(a1 + 16 * (v4 >> 1));
    uint64_t v9 = (long long *)(a2 - 16);
    if ((*a3)(v8, (long long *)(a2 - 16)))
    {
      long long v15 = *v9;
      *(void *)uint64_t v9 = 0;
      *((void *)v9 + 1) = 0;
      do
      {
        uint64_t v10 = v8;
        long long v11 = *v8;
        *(void *)uint64_t v8 = 0;
        *((void *)v8 + 1) = 0;
        uint64_t v12 = (std::__shared_weak_count *)*((void *)v9 + 1);
        *uint64_t v9 = v11;
        if (v12) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        }
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = (long long *)(a1 + 16 * v7);
        uint64_t v9 = v10;
      }
      while (((*a3)(v8, &v15) & 1) != 0);
      long long v13 = v15;
      long long v15 = 0uLL;
      uint64_t v14 = (std::__shared_weak_count *)*((void *)v10 + 1);
      *uint64_t v10 = v13;
      if (v14)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
        if (*((void *)&v15 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v15 + 1));
        }
      }
    }
  }
}

void sub_224D9DD1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<std::vector<std::shared_ptr<QP::ParseAttribute>>>::erase(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (a2 != (uint64_t *)a3)
  {
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::shared_ptr<QP::ParseAttribute>> *,std::vector<std::shared_ptr<QP::ParseAttribute>> *,std::vector<std::shared_ptr<QP::ParseAttribute>> *>((uint64_t)&v9, a3, *(void *)(a1 + 8), a2);
    uint64_t v6 = v5;
    unint64_t v7 = *(void ***)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        v7 -= 3;
        uint64_t v10 = v7;
        std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v10);
      }
      while (v7 != v6);
    }
    *(void *)(a1 + 8) = v6;
  }
  return a2;
}

uint64_t std::__tree<std::string>::__count_unique<std::string>(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  if (v2)
  {
    uint64_t v4 = 1;
    do
    {
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v2 + 4) & 0x80) == 0)
      {
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2 + 4, a2) & 0x80) == 0) {
          return v4;
        }
        ++v2;
      }
      uint64_t v2 = (void **)*v2;
    }
    while (v2);
  }
  return 0;
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, void **a2)
{
  size_t v2 = *((unsigned __int8 *)a1 + 23);
  size_t v3 = a1[1];
  if ((v2 & 0x80u) != 0)
  {
    a1 = (void *)*a1;
    size_t v2 = v3;
  }
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    char v5 = a2;
  }
  else {
    char v5 = *a2;
  }
  if (v4 >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  return std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(a1, v2, v5, v6);
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(const void *a1, size_t a2, void *__s2, size_t a4)
{
  if (a4 >= a2) {
    size_t v7 = a2;
  }
  else {
    size_t v7 = a4;
  }
  int v8 = memcmp(a1, __s2, v7);
  if (v8)
  {
    if ((v8 & 0x80000000) == 0) {
      return 1;
    }
  }
  else
  {
    if (a2 == a4) {
      return 0;
    }
    if (a2 >= a4) {
      return 1;
    }
  }
  return 255;
}

void *std::allocate_shared[abi:ne180100]<QP::ParseAttribute,std::allocator<QP::ParseAttribute>,CFRange &,CFRange &,unsigned short &,unsigned short &,void>@<X0>(_OWORD *a1@<X1>, long long *a2@<X2>, __int16 *a3@<X3>, unsigned __int16 *a4@<X4>, void *a5@<X8>)
{
  uint64_t v10 = operator new(0xA8uLL);
  BOOL result = std::__shared_ptr_emplace<QP::ParseAttribute>::__shared_ptr_emplace[abi:ne180100]<CFRange &,CFRange &,unsigned short &,unsigned short &,std::allocator<QP::ParseAttribute>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_224D9DF24(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<QP::ParseAttribute>::__shared_ptr_emplace[abi:ne180100]<CFRange &,CFRange &,unsigned short &,unsigned short &,std::allocator<QP::ParseAttribute>,0>(void *a1, _OWORD *a2, long long *a3, __int16 *a4, unsigned __int16 *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D830700;
  std::construct_at[abi:ne180100]<QP::ParseAttribute,CFRange &,CFRange &,unsigned short &,unsigned short &,QP::ParseAttribute*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_224D9DF80(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<QP::ParseAttribute>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D830700;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QP::ParseAttribute>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D830700;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A623E20);
}

void std::__shared_ptr_emplace<QP::ParseAttribute>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::construct_at[abi:ne180100]<QP::ParseAttribute,CFRange &,CFRange &,unsigned short &,unsigned short &,QP::ParseAttribute*>(uint64_t a1, _OWORD *a2, long long *a3, __int16 *a4, unsigned __int16 *a5)
{
  __int16 v6 = *a4;
  unsigned __int16 v7 = *a5;
  long long v8 = *a3;
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v8;
  *(_WORD *)(a1 + 32) = v6;
  *(_DWORD *)(a1 + 34) = v7;
  *(void *)(a1 + 40) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 48), "");
  *(_WORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 76) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(void *)(a1 + 136) = 0;
  return a1;
}

void QP::ParseAttribute::~ParseAttribute(QP::ParseAttribute *this)
{
  size_t v3 = (void **)((char *)this + 120);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v3);
  size_t v2 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::destroy((uint64_t)this + 80, *((void **)this + 11));
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
}

void std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::destroy(a1, a2[1]);
    std::__tree<unsigned short>::destroy((uint64_t)(a2 + 5), (void *)a2[6]);
    operator delete(a2);
  }
}

uint64_t std::vector<std::vector<std::shared_ptr<QP::ParseAttribute>>>::__push_back_slow_path<std::vector<std::shared_ptr<QP::ParseAttribute>> const&>(uint64_t *a1, void **a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  long long v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  long long v15 = v11;
  uint64_t v16 = &v10[24 * v9];
  *(void *)long long v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<std::shared_ptr<QP::ParseAttribute>>::__init_with_size[abi:ne180100]<std::shared_ptr<QP::ParseAttribute>*,std::shared_ptr<QP::ParseAttribute>*>(v11, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  v15 += 24;
  std::vector<std::vector<std::shared_ptr<QP::ParseAttribute>>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<std::shared_ptr<QP::ParseAttribute>>>::~__split_buffer(v14);
  return v12;
}

void sub_224D9E25C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<std::shared_ptr<QP::ParseAttribute>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void *std::vector<std::shared_ptr<QP::ParseAttribute>>::__init_with_size[abi:ne180100]<std::shared_ptr<QP::ParseAttribute>*,std::shared_ptr<QP::ParseAttribute>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    __int16 v6 = result;
    std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__vallocate[abi:ne180100](result, a4);
    BOOL result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<QP::ParseAttribute>>,std::shared_ptr<QP::ParseAttribute>*,std::shared_ptr<QP::ParseAttribute>*,std::shared_ptr<QP::ParseAttribute>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_224D9E2D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<QP::ParseAttribute>>,std::shared_ptr<QP::ParseAttribute>*,std::shared_ptr<QP::ParseAttribute>*,std::shared_ptr<QP::ParseAttribute>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  unint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *unint64_t v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<QP::ParseAttribute>>,std::shared_ptr<QP::ParseAttribute>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<QP::ParseAttribute>>,std::shared_ptr<QP::ParseAttribute>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>,std::shared_ptr<QP::GraphStructureStack::Node>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::vector<std::vector<std::shared_ptr<QP::ParseAttribute>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::shared_ptr<QP::ParseAttribute>>>,std::reverse_iterator<std::vector<std::shared_ptr<QP::ParseAttribute>>*>,std::reverse_iterator<std::vector<std::shared_ptr<QP::ParseAttribute>>*>,std::reverse_iterator<std::vector<std::shared_ptr<QP::ParseAttribute>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::shared_ptr<QP::ParseAttribute>>>,std::reverse_iterator<std::vector<std::shared_ptr<QP::ParseAttribute>>*>,std::reverse_iterator<std::vector<std::shared_ptr<QP::ParseAttribute>>*>,std::reverse_iterator<std::vector<std::shared_ptr<QP::ParseAttribute>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  uint64_t v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::shared_ptr<QP::ParseAttribute>>>,std::reverse_iterator<std::vector<std::shared_ptr<QP::ParseAttribute>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::shared_ptr<QP::ParseAttribute>>>,std::reverse_iterator<std::vector<std::shared_ptr<QP::ParseAttribute>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::shared_ptr<QP::ParseAttribute>>>,std::reverse_iterator<std::vector<std::shared_ptr<QP::ParseAttribute>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::shared_ptr<QP::ParseAttribute>>>,std::reverse_iterator<std::vector<std::shared_ptr<QP::ParseAttribute>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  size_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = v1;
    std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::shared_ptr<QP::ParseAttribute>>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<std::shared_ptr<QP::ParseAttribute>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::shared_ptr<QP::ParseAttribute>> *,std::vector<std::shared_ptr<QP::ParseAttribute>> *,std::vector<std::shared_ptr<QP::ParseAttribute>> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__vdeallocate(a4);
    *(_OWORD *)a4 = *(_OWORD *)v5;
    a4[2] = *(void *)(v5 + 16);
    *(void *)uint64_t v5 = 0;
    *(void *)(v5 + 8) = 0;
    *(void *)(v5 + 16) = 0;
    a4 += 3;
    v5 += 24;
  }
  while (v5 != v6);
  return v6;
}

void *std::vector<std::vector<std::shared_ptr<QP::ParseAttribute>>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::vector<std::shared_ptr<QP::ParseAttribute>>*>,std::__wrap_iter<std::vector<std::shared_ptr<QP::ParseAttribute>>*>>(uint64_t *a1, void *a2, uint64_t **a3, void **a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 3)) >= a5)
    {
      uint64_t v20 = v12 - (void)a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (void)a2) >> 3)) >= a5)
      {
        BOOL v21 = &a3[3 * a5];
      }
      else
      {
        BOOL v21 = &a3[(uint64_t)(v12 - (void)a2) >> 3];
        a1[1] = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::shared_ptr<QP::ParseAttribute>>>,std::vector<std::shared_ptr<QP::ParseAttribute>>*,std::vector<std::shared_ptr<QP::ParseAttribute>>*,std::vector<std::shared_ptr<QP::ParseAttribute>>*>(v9, v21, a4, *(void **)(v9 - 8));
        if (v20 < 1) {
          return v5;
        }
      }
      std::vector<std::vector<std::shared_ptr<QP::ParseAttribute>>>::__move_range((uint64_t)a1, v5, v12, (uint64_t)&v5[3 * a5]);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::shared_ptr<QP::ParseAttribute>> *,std::vector<std::shared_ptr<QP::ParseAttribute>> *,std::vector<std::shared_ptr<QP::ParseAttribute>> *>((uint64_t)&v23, a3, v21, (uint64_t)v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v13) >> 3);
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v13) >> 3);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x555555555555555) {
        unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v18 = v17;
      }
      uint64_t v27 = v9;
      if (v18) {
        uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v9, v18);
      }
      else {
        uint64_t v19 = 0;
      }
      uint64_t v23 = v19;
      long long v24 = &v19[24 * v15];
      CFIndex v25 = v24;
      uint64_t v26 = &v19[24 * v18];
      std::__split_buffer<std::vector<std::shared_ptr<QP::ParseAttribute>>>::__construct_at_end_with_size<std::__wrap_iter<std::vector<std::shared_ptr<QP::ParseAttribute>>*>>(&v23, a3, a5);
      uint64_t v5 = (void *)std::vector<std::vector<std::shared_ptr<QP::ParseAttribute>>>::__swap_out_circular_buffer(a1, &v23, v5);
      std::__split_buffer<std::vector<std::shared_ptr<QP::ParseAttribute>>>::~__split_buffer(&v23);
    }
  }
  return v5;
}

void sub_224D9E808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void *std::vector<std::vector<std::shared_ptr<QP::ParseAttribute>>>::__move_range(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (void *)((char *)a2 + v6 - a4);
  long long v8 = (void *)v6;
  if ((unint64_t)v7 < a3)
  {
    uint64_t v9 = v7;
    long long v8 = *(void **)(a1 + 8);
    do
    {
      void *v8 = 0;
      v8[1] = 0;
      v8[2] = 0;
      *(_OWORD *)long long v8 = *(_OWORD *)v9;
      v8[2] = v9[2];
      *uint64_t v9 = 0;
      v9[1] = 0;
      v9[2] = 0;
      v8 += 3;
      v9 += 3;
    }
    while ((unint64_t)v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::shared_ptr<QP::ParseAttribute>> *,std::vector<std::shared_ptr<QP::ParseAttribute>> *,std::vector<std::shared_ptr<QP::ParseAttribute>> *>((uint64_t)&v11, a2, v7, v6);
}

void *std::__split_buffer<std::vector<std::shared_ptr<QP::ParseAttribute>>>::__construct_at_end_with_size<std::__wrap_iter<std::vector<std::shared_ptr<QP::ParseAttribute>>*>>(void *result, void **a2, uint64_t a3)
{
  uint64_t v3 = result;
  unint64_t v4 = (void *)result[2];
  if (a3)
  {
    uint64_t v6 = &v4[3 * a3];
    uint64_t v7 = 24 * a3;
    do
    {
      *unint64_t v4 = 0;
      v4[1] = 0;
      int v4[2] = 0;
      uint64_t result = std::vector<std::shared_ptr<QP::ParseAttribute>>::__init_with_size[abi:ne180100]<std::shared_ptr<QP::ParseAttribute>*,std::shared_ptr<QP::ParseAttribute>*>(v4, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
      v4 += 3;
      a2 += 3;
      v7 -= 24;
    }
    while (v7);
    unint64_t v4 = v6;
  }
  v3[2] = v4;
  return result;
}

void sub_224D9E928(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::shared_ptr<QP::ParseAttribute>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2, void *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::shared_ptr<QP::ParseAttribute>>>,std::reverse_iterator<std::vector<std::shared_ptr<QP::ParseAttribute>>*>,std::reverse_iterator<std::vector<std::shared_ptr<QP::ParseAttribute>>*>,std::reverse_iterator<std::vector<std::shared_ptr<QP::ParseAttribute>>*>>((uint64_t)(a1 + 2), (uint64_t)a3, a3, *a1, (void *)*a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::shared_ptr<QP::ParseAttribute>>>,std::vector<std::shared_ptr<QP::ParseAttribute>>*,std::vector<std::shared_ptr<QP::ParseAttribute>>*,std::vector<std::shared_ptr<QP::ParseAttribute>>*>(v7, (uint64_t)a3, a1[1], (void *)a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::shared_ptr<QP::ParseAttribute>>>,std::vector<std::shared_ptr<QP::ParseAttribute>>*,std::vector<std::shared_ptr<QP::ParseAttribute>>*,std::vector<std::shared_ptr<QP::ParseAttribute>>*>(uint64_t a1, void **a2, void **a3, void *a4)
{
  unint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *unint64_t v4 = 0;
      v4[1] = 0;
      int v4[2] = 0;
      std::vector<std::shared_ptr<QP::ParseAttribute>>::__init_with_size[abi:ne180100]<std::shared_ptr<QP::ParseAttribute>*,std::shared_ptr<QP::ParseAttribute>*>(v4, *v6, v6[1], ((char *)v6[1] - (char *)*v6) >> 4);
      unint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 3;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::shared_ptr<QP::ParseAttribute>>>,std::vector<std::shared_ptr<QP::ParseAttribute>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_224D9EA84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::shared_ptr<QP::ParseAttribute>>>,std::vector<std::shared_ptr<QP::ParseAttribute>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::shared_ptr<QP::ParseAttribute>>>,std::vector<std::shared_ptr<QP::ParseAttribute>>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::shared_ptr<QP::ParseAttribute>>>,std::vector<std::shared_ptr<QP::ParseAttribute>>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void ****)(a1 + 16);
  uint64_t v2 = **(void ****)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 3;
    uint64_t v3 = v1;
    std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
}

void *std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::shared_ptr<QP::ParseAttribute>> *,std::vector<std::shared_ptr<QP::ParseAttribute>> *,std::vector<std::shared_ptr<QP::ParseAttribute>> *>(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v6 = (uint64_t *)(a4 - 24);
    uint64_t v7 = a3;
    do
    {
      std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__vdeallocate(v6);
      long long v8 = *(_OWORD *)(v7 - 3);
      v7 -= 3;
      *(_OWORD *)uint64_t v6 = v8;
      v6[2] = v7[2];
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
      v6 -= 3;
    }
    while (v7 != a2);
  }
  return a3;
}

uint64_t **std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::shared_ptr<QP::ParseAttribute>> *,std::vector<std::shared_ptr<QP::ParseAttribute>> *,std::vector<std::shared_ptr<QP::ParseAttribute>> *>(uint64_t a1, uint64_t **a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (v5 != (uint64_t **)a4) {
        std::vector<std::shared_ptr<QP::ParseAttribute>>::__assign_with_size[abi:ne180100]<std::shared_ptr<QP::ParseAttribute>*,std::shared_ptr<QP::ParseAttribute>*>(a4, *v5, v5[1], ((char *)v5[1] - (char *)*v5) >> 4);
      }
      v5 += 3;
      a4 += 24;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void std::vector<std::shared_ptr<QP::ParseAttribute>>::__assign_with_size[abi:ne180100]<std::shared_ptr<QP::ParseAttribute>*,std::shared_ptr<QP::ParseAttribute>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  char v9 = *(void **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4)
  {
    std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__vdeallocate((uint64_t *)a1);
    if (a4 >> 60) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__vallocate[abi:ne180100]((void *)a1, v12);
    uint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<QP::ParseAttribute>>,std::shared_ptr<QP::ParseAttribute>*,std::shared_ptr<QP::ParseAttribute>*,std::shared_ptr<QP::ParseAttribute>*>(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4;
  if (v14 < a4)
  {
    unint64_t v15 = &a2[2 * v14];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<QP::GraphStructureStack::Node> *,std::shared_ptr<QP::GraphStructureStack::Node> *,std::shared_ptr<QP::GraphStructureStack::Node> *>((uint64_t)&v20, a2, v15, v9);
    uint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<QP::ParseAttribute>>,std::shared_ptr<QP::ParseAttribute>*,std::shared_ptr<QP::ParseAttribute>*,std::shared_ptr<QP::ParseAttribute>*>(v8, v15, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v13;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<QP::GraphStructureStack::Node> *,std::shared_ptr<QP::GraphStructureStack::Node> *,std::shared_ptr<QP::GraphStructureStack::Node> *>((uint64_t)&v21, a2, a3, v9);
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      uint64_t v19 = *(std::__shared_weak_count **)(v18 - 8);
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      v18 -= 16;
    }
    while (v18 != v17);
  }
  *(void *)(a1 + 8) = v17;
}

void sub_224D9ED44(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_224D9ED4C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::shared_ptr<QP::ParseAttribute>>>,std::vector<std::shared_ptr<QP::ParseAttribute>>*,std::vector<std::shared_ptr<QP::ParseAttribute>>*,std::vector<std::shared_ptr<QP::ParseAttribute>>*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v4 = a4;
  char v9 = a4;
  uint64_t v8 = a4;
  v6[0] = a1;
  v6[1] = &v8;
  v6[2] = &v9;
  if (a2 != a3)
  {
    do
    {
      *unint64_t v4 = 0;
      v4[1] = 0;
      int v4[2] = 0;
      *(_OWORD *)unint64_t v4 = *(_OWORD *)a2;
      int v4[2] = *(void *)(a2 + 16);
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      v4 += 3;
      a2 += 24;
    }
    while (a2 != a3);
    char v9 = v4;
  }
  char v7 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::shared_ptr<QP::ParseAttribute>>>,std::vector<std::shared_ptr<QP::ParseAttribute>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v6);
  return v4;
}

uint64_t std::vector<std::shared_ptr<QP::Parse>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<QP::Parse>>,std::reverse_iterator<std::shared_ptr<QP::Parse>*>,std::reverse_iterator<std::shared_ptr<QP::Parse>*>,std::reverse_iterator<std::shared_ptr<QP::Parse>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<QP::Parse>>,std::reverse_iterator<std::shared_ptr<QP::Parse>*>,std::reverse_iterator<std::shared_ptr<QP::Parse>*>,std::reverse_iterator<std::shared_ptr<QP::Parse>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<QP::Parse>>,std::reverse_iterator<std::shared_ptr<QP::Parse>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<QP::Parse>>,std::reverse_iterator<std::shared_ptr<QP::Parse>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>,std::reverse_iterator<std::shared_ptr<QP::GraphStructureStack::Node>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::vector<std::vector<std::shared_ptr<QP::ParseAttribute>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    unint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::vector<std::shared_ptr<QP::Parse>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<QP::Parse>*>,std::__wrap_iter<std::shared_ptr<QP::Parse>*>>(uint64_t *a1, void *a2, uint64_t *a3, void *a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v7 = a3;
    uint64_t v11 = a1[2];
    long long v9 = a1 + 2;
    uint64_t v10 = v11;
    unint64_t v12 = *(v9 - 1);
    if (a5 <= (uint64_t)(v11 - v12) >> 4)
    {
      uint64_t v19 = v12 - (void)a2;
      uint64_t v20 = (uint64_t)(v12 - (void)a2) >> 4;
      if (v20 >= a5)
      {
        char v21 = &a3[2 * a5];
      }
      else
      {
        char v21 = &a3[2 * v20];
        a1[1] = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<QP::Parse>>,std::shared_ptr<QP::Parse>*,std::shared_ptr<QP::Parse>*,std::shared_ptr<QP::Parse>*>((uint64_t)v9, v21, a4, (void *)*(v9 - 1));
        if (v19 < 1) {
          return v5;
        }
      }
      std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__move_range((uint64_t)a1, v5, v12, (uint64_t)&v5[2 * a5]);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<QP::GraphStructureStack::Node> *,std::shared_ptr<QP::GraphStructureStack::Node> *,std::shared_ptr<QP::GraphStructureStack::Node> *>((uint64_t)v26, v7, v21, v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 + ((uint64_t)(v12 - *a1) >> 4);
      if (v14 >> 60) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v15 = ((uint64_t)a2 - v13) >> 4;
      uint64_t v16 = v10 - v13;
      if (v16 >> 3 > v14) {
        unint64_t v14 = v16 >> 3;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v14;
      }
      v26[4] = v9;
      if (v17) {
        uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>>((uint64_t)v9, v17);
      }
      else {
        uint64_t v18 = 0;
      }
      long long v22 = (uint64_t *)&v18[16 * v15];
      v26[0] = v18;
      v26[1] = v22;
      v26[3] = &v18[16 * v17];
      uint64_t v23 = &v22[2 * a5];
      do
      {
        *long long v22 = *v7;
        uint64_t v24 = v7[1];
        v22[1] = v24;
        if (v24) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
        }
        v22 += 2;
        v7 += 2;
      }
      while (v22 != v23);
      void v26[2] = v23;
      uint64_t v5 = (void *)std::vector<std::shared_ptr<QP::Parse>>::__swap_out_circular_buffer(a1, v26, v5);
      std::__split_buffer<std::shared_ptr<QP::GraphStructureStack::Node>>::~__split_buffer(v26);
    }
  }
  return v5;
}

void sub_224D9F128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::shared_ptr<QP::Parse>>::__swap_out_circular_buffer(uint64_t *a1, void *a2, void *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<QP::Parse>>,std::reverse_iterator<std::shared_ptr<QP::Parse>*>,std::reverse_iterator<std::shared_ptr<QP::Parse>*>,std::reverse_iterator<std::shared_ptr<QP::Parse>*>>((uint64_t)(a1 + 2), (uint64_t)a3, a3, *a1, (void *)*a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<QP::Parse>>,std::shared_ptr<QP::Parse>*,std::shared_ptr<QP::Parse>*,std::shared_ptr<QP::Parse>*>(v7, (uint64_t)a3, a1[1], (_OWORD *)a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<QP::Parse>>,std::shared_ptr<QP::Parse>*,std::shared_ptr<QP::Parse>*,std::shared_ptr<QP::Parse>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  unint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *unint64_t v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<QP::Parse>>,std::shared_ptr<QP::Parse>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<QP::Parse>>,std::shared_ptr<QP::Parse>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>,std::shared_ptr<QP::GraphStructureStack::Node>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

_OWORD *std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<QP::Parse>>,std::shared_ptr<QP::Parse>*,std::shared_ptr<QP::Parse>*,std::shared_ptr<QP::Parse>*>(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  unint64_t v4 = a4;
  uint64_t v9 = a4;
  char v8 = a4;
  v6[0] = a1;
  v6[1] = &v8;
  v6[2] = &v9;
  if (a2 != a3)
  {
    do
    {
      *v4++ = *(_OWORD *)a2;
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      a2 += 16;
    }
    while (a2 != a3);
    uint64_t v9 = v4;
  }
  char v7 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<QP::Parse>>,std::shared_ptr<QP::Parse>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v6);
  return v4;
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Parse> &,std::shared_ptr<QP::Parse> &),std::shared_ptr<QP::Parse>*,false>(uint64_t *a1, long long *a2, uint64_t (**a3)(uint64_t *, uint64_t *), uint64_t a4, char a5)
{
void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Parse> &,std::shared_ptr<QP::Parse> &),std::shared_ptr<QP::Parse>*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(long long *, uint64_t))
{
  if (a1 != a2)
  {
    char v5 = (long long *)(a1 + 16);
    if (a1 + 16 != a2)
    {
      uint64_t v7 = 0;
      uint64_t v8 = a1;
      do
      {
        uint64_t v9 = v8;
        uint64_t v8 = (uint64_t)v5;
        if ((*a3)(v5, v9))
        {
          long long v18 = *(_OWORD *)v8;
          *(void *)uint64_t v8 = 0;
          *(void *)(v8 + 8) = 0;
          uint64_t v10 = v7;
          while (1)
          {
            uint64_t v11 = a1 + v10;
            long long v12 = *(_OWORD *)(a1 + v10);
            *(void *)uint64_t v11 = 0;
            *(void *)(v11 + 8) = 0;
            uint64_t v13 = *(std::__shared_weak_count **)(a1 + v10 + 24);
            *(_OWORD *)(v11 + 16) = v12;
            if (v13) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v13);
            }
            if (!v10) {
              break;
            }
            char v14 = (*a3)(&v18, a1 + v10 - 16);
            v10 -= 16;
            if ((v14 & 1) == 0)
            {
              uint64_t v15 = a1 + v10 + 16;
              goto LABEL_12;
            }
          }
          uint64_t v15 = a1;
LABEL_12:
          long long v16 = v18;
          long long v18 = 0uLL;
          unint64_t v17 = *(std::__shared_weak_count **)(v15 + 8);
          *(_OWORD *)uint64_t v15 = v16;
          if (v17) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v17);
          }
          if (*((void *)&v18 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v18 + 1));
          }
        }
        char v5 = (long long *)(v8 + 16);
        v7 += 16;
      }
      while (v8 + 16 != a2);
    }
  }
}

void sub_224D9F814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Parse> &,std::shared_ptr<QP::Parse> &),std::shared_ptr<QP::Parse>*>(long long *a1, long long *a2, uint64_t (**a3)(long long *, long long *))
{
  if (a1 != a2)
  {
    unint64_t v4 = a1;
    char v5 = a1 + 1;
    if (a1 + 1 != a2)
    {
      uint64_t v7 = a1 - 1;
      do
      {
        uint64_t v8 = v4;
        unint64_t v4 = v5;
        if ((*a3)(v5, v8))
        {
          long long v15 = *v4;
          *(void *)unint64_t v4 = 0;
          *((void *)v4 + 1) = 0;
          uint64_t v9 = v7;
          do
          {
            long long v10 = v9[1];
            *((void *)v9 + 2) = 0;
            *((void *)v9 + 3) = 0;
            uint64_t v11 = (std::__shared_weak_count *)*((void *)v9 + 5);
            v9[2] = v10;
            if (v11) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v11);
            }
            char v12 = (*a3)(&v15, v9--);
          }
          while ((v12 & 1) != 0);
          long long v13 = v15;
          long long v15 = 0uLL;
          char v14 = (std::__shared_weak_count *)*((void *)v9 + 5);
          v9[2] = v13;
          if (v14) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v14);
          }
          if (*((void *)&v15 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v15 + 1));
          }
        }
        char v5 = v4 + 1;
        ++v7;
      }
      while (v4 + 1 != a2);
    }
  }
}

void sub_224D9F910(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<QP::Parse> *,BOOL (*&)(std::shared_ptr<QP::Parse>&,std::shared_ptr<QP::Parse>&)>(long long *a1, void *a2, uint64_t (**a3)(long long *, void *))
{
  unint64_t v4 = a2;
  long long v17 = *a1;
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  if ((*a3)(&v17, a2 - 2))
  {
    char v6 = a1;
    do
      v6 += 2;
    while (((*a3)(&v17, v6) & 1) == 0);
  }
  else
  {
    uint64_t v7 = a1 + 1;
    do
    {
      char v6 = v7;
      if (v7 >= v4) {
        break;
      }
      int v8 = (*a3)(&v17, v7);
      uint64_t v7 = v6 + 2;
    }
    while (!v8);
  }
  if (v6 < v4)
  {
    do
      v4 -= 2;
    while (((*a3)(&v17, v4) & 1) != 0);
  }
  while (v6 < v4)
  {
    uint64_t v9 = *v6;
    void *v6 = *v4;
    *unint64_t v4 = v9;
    uint64_t v10 = v6[1];
    v6[1] = v4[1];
    v4[1] = v10;
    do
      v6 += 2;
    while (!(*a3)(&v17, v6));
    do
      v4 -= 2;
    while (((*a3)(&v17, v4) & 1) != 0);
  }
  uint64_t v11 = (long long *)(v6 - 2);
  if (v6 - 2 != (void *)a1)
  {
    long long v12 = *v11;
    *(void *)uint64_t v11 = 0;
    *(v6 - 1) = 0;
    long long v13 = (std::__shared_weak_count *)*((void *)a1 + 1);
    *a1 = v12;
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
  }
  long long v14 = v17;
  long long v17 = 0uLL;
  long long v15 = (std::__shared_weak_count *)*(v6 - 1);
  *((_OWORD *)v6 - 1) = v14;
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (*((void *)&v17 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v17 + 1));
  }
  return v6;
}

void sub_224D9FA90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

long long *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<QP::Parse> *,BOOL (*&)(std::shared_ptr<QP::Parse>&,std::shared_ptr<QP::Parse>&)>(long long *a1, long long *a2, uint64_t (**a3)(long long *, long long *))
{
  uint64_t v6 = 0;
  long long v19 = *a1;
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  do
    char v7 = (*a3)(&a1[++v6], &v19);
  while ((v7 & 1) != 0);
  unint64_t v8 = (unint64_t)&a1[v6];
  if (v6 == 1)
  {
    do
    {
      if (v8 >= (unint64_t)a2) {
        break;
      }
      --a2;
    }
    while (((*a3)(a2, &v19) & 1) == 0);
  }
  else
  {
    do
      --a2;
    while (!(*a3)(a2, &v19));
  }
  uint64_t v9 = &a1[v6];
  if (v8 < (unint64_t)a2)
  {
    uint64_t v10 = a2;
    do
    {
      uint64_t v11 = *(void *)v9;
      *(void *)uint64_t v9 = *(void *)v10;
      *(void *)uint64_t v10 = v11;
      uint64_t v12 = *((void *)v9 + 1);
      *((void *)v9 + 1) = *((void *)v10 + 1);
      *((void *)v10 + 1) = v12;
      do
        ++v9;
      while (((*a3)(v9, &v19) & 1) != 0);
      do
        --v10;
      while (!(*a3)(v10, &v19));
    }
    while (v9 < v10);
  }
  long long v13 = v9 - 1;
  if (v9 - 1 != a1)
  {
    long long v14 = *v13;
    *(void *)long long v13 = 0;
    *((void *)v9 - 1) = 0;
    long long v15 = (std::__shared_weak_count *)*((void *)a1 + 1);
    *a1 = v14;
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
  }
  long long v16 = v19;
  long long v19 = 0uLL;
  long long v17 = (std::__shared_weak_count *)*((void *)v9 - 1);
  *(v9 - 1) = v16;
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (*((void *)&v19 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v19 + 1));
  }
  return v9 - 1;
}

void sub_224D9FC2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Parse> &,std::shared_ptr<QP::Parse> &),std::shared_ptr<QP::Parse>*>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t v6 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if ((*a3)(a2 - 2, a1))
      {
        uint64_t v8 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v8;
        uint64_t v9 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(a1, a1 + 2, a2 - 2, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(a1, a1 + 2, a1 + 4, a2 - 2, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2, a3);
      return 1;
    default:
      uint64_t v10 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(a1, a1 + 2, a1 + 4, a3);
      uint64_t v11 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v11, v10))
    {
      long long v22 = *(_OWORD *)v11;
      uint64_t *v11 = 0;
      v11[1] = 0;
      uint64_t v14 = v12;
      while (1)
      {
        long long v15 = (char *)a1 + v14;
        long long v16 = *(_OWORD *)((char *)a1 + v14 + 32);
        *((void *)v15 + 4) = 0;
        *((void *)v15 + 5) = 0;
        long long v17 = *(std::__shared_weak_count **)((char *)a1 + v14 + 56);
        *((_OWORD *)v15 + 3) = v16;
        if (v17) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v17);
        }
        if (v14 == -32) {
          break;
        }
        char v18 = (*a3)((uint64_t *)&v22, (uint64_t *)((char *)a1 + v14 + 16));
        v14 -= 16;
        if ((v18 & 1) == 0)
        {
          uint64_t v19 = (uint64_t)a1 + v14 + 48;
          goto LABEL_14;
        }
      }
      uint64_t v19 = (uint64_t)a1;
LABEL_14:
      long long v20 = v22;
      long long v22 = 0uLL;
      BOOL v21 = *(std::__shared_weak_count **)(v19 + 8);
      *(_OWORD *)uint64_t v19 = v20;
      if (v21) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v21);
      }
      if (*((void *)&v22 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v22 + 1));
      }
      if (++v13 == 8) {
        return v11 + 2 == a2;
      }
    }
    uint64_t v10 = v11;
    v12 += 16;
    v11 += 2;
    if (v11 == a2) {
      return 1;
    }
  }
}

void sub_224D9FE58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

long long *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Parse> &,std::shared_ptr<QP::Parse> &),std::shared_ptr<QP::Parse>*,std::shared_ptr<QP::Parse>*>(uint64_t a1, uint64_t a2, long long *a3, unsigned int (**a4)(long long *, uint64_t))
{
  if (a1 != a2)
  {
    uint64_t v6 = a2;
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) >> 4;
    if (a2 - a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = (long long *)(a1 + 16 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Parse> &,std::shared_ptr<QP::Parse> &),std::shared_ptr<QP::Parse>*>(a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = v6;
    if ((long long *)v6 != a3)
    {
      uint64_t v14 = (long long *)v6;
      do
      {
        if ((*a4)(v14, a1))
        {
          uint64_t v15 = *(void *)v14;
          *(void *)uint64_t v14 = *(void *)a1;
          *(void *)a1 = v15;
          uint64_t v16 = *((void *)v14 + 1);
          *((void *)v14 + 1) = *(void *)(a1 + 8);
          *(void *)(a1 + 8) = v16;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Parse> &,std::shared_ptr<QP::Parse> &),std::shared_ptr<QP::Parse>*>(a1, a4, v9, (long long *)a1);
        }
        ++v14;
      }
      while (v14 != a3);
      uint64_t v13 = (uint64_t)a3;
    }
    if (v8 >= 17)
    {
      unint64_t v17 = (unint64_t)v8 >> 4;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*)(std::shared_ptr<QP::Parse> &,std::shared_ptr<QP::Parse> &),std::shared_ptr<QP::Parse>*>((uint64_t *)a1, v6, (unsigned int (**)(uint64_t, uint64_t))a4, v17);
        v6 -= 16;
      }
      while (v17-- > 2);
    }
    return (long long *)v13;
  }
  return a3;
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Parse> &,std::shared_ptr<QP::Parse> &),std::shared_ptr<QP::Parse>*>(uint64_t a1, unsigned int (**a2)(long long *, uint64_t), uint64_t a3, long long *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    char v5 = a4;
    uint64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - a1) >> 4)
    {
      uint64_t v10 = ((uint64_t)a4 - a1) >> 3;
      uint64_t v11 = v10 + 1;
      uint64_t v12 = (long long *)(a1 + 16 * (v10 + 1));
      uint64_t v13 = v10 + 2;
      if (v10 + 2 < a3 && (*a2)(v12, (uint64_t)(v12 + 1)))
      {
        ++v12;
        uint64_t v11 = v13;
      }
      if ((((uint64_t (*)(long long *, long long *))*a2)(v12, v5) & 1) == 0)
      {
        long long v20 = *v5;
        *(void *)char v5 = 0;
        *((void *)v5 + 1) = 0;
        do
        {
          uint64_t v14 = v12;
          long long v15 = *v12;
          *(void *)uint64_t v12 = 0;
          *((void *)v12 + 1) = 0;
          uint64_t v16 = (std::__shared_weak_count *)*((void *)v5 + 1);
          long long *v5 = v15;
          if (v16) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v16);
          }
          if (v7 < v11) {
            break;
          }
          uint64_t v17 = (2 * v11) | 1;
          uint64_t v12 = (long long *)(a1 + 16 * v17);
          uint64_t v11 = 2 * v11 + 2;
          if (v11 >= a3)
          {
            uint64_t v11 = v17;
          }
          else if ((*a2)((long long *)(a1 + 16 * v17), (uint64_t)(v12 + 1)))
          {
            ++v12;
          }
          else
          {
            uint64_t v11 = v17;
          }
          char v5 = v14;
        }
        while (!(*a2)(v12, (uint64_t)&v20));
        long long v18 = v20;
        long long v20 = 0uLL;
        uint64_t v19 = (std::__shared_weak_count *)*((void *)v14 + 1);
        *uint64_t v14 = v18;
        if (v19) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v19);
        }
        if (*((void *)&v20 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
        }
      }
    }
  }
}

void sub_224DA0120(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*)(std::shared_ptr<QP::Parse> &,std::shared_ptr<QP::Parse> &),std::shared_ptr<QP::Parse>*>(uint64_t *a1, uint64_t a2, unsigned int (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v8 = *a1;
    uint64_t v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v9 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>((uint64_t)a1, a3, a4);
    uint64_t v10 = (void *)v9;
    if (v9 == a2 - 16)
    {
      long long v15 = *(std::__shared_weak_count **)(v9 + 8);
      *uint64_t v10 = v8;
      v10[1] = v7;
      if (v15)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
    }
    else
    {
      long long v11 = *(_OWORD *)(a2 - 16);
      *(void *)(a2 - 16) = 0;
      *(void *)(a2 - 8) = 0;
      uint64_t v12 = *(std::__shared_weak_count **)(v9 + 8);
      *(_OWORD *)uint64_t v10 = v11;
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
      uint64_t v13 = (uint64_t)(v10 + 2);
      uint64_t v14 = *(std::__shared_weak_count **)(a2 - 8);
      *(void *)(a2 - 16) = v8;
      *(void *)(a2 - 8) = v7;
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Parse> &,std::shared_ptr<QP::Parse> &),std::shared_ptr<QP::Parse>*>((uint64_t)a1, v13, (uint64_t (**)(long long *, long long *))a3, (v13 - (uint64_t)a1) >> 4);
    }
  }
}

void sub_224DA0230(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Parse> &,std::shared_ptr<QP::Parse> &),std::shared_ptr<QP::Parse>*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(long long *, long long *), uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v7 = v4 >> 1;
    uint64_t v8 = (long long *)(a1 + 16 * (v4 >> 1));
    uint64_t v9 = (long long *)(a2 - 16);
    if ((*a3)(v8, (long long *)(a2 - 16)))
    {
      long long v15 = *v9;
      *(void *)uint64_t v9 = 0;
      *((void *)v9 + 1) = 0;
      do
      {
        uint64_t v10 = v8;
        long long v11 = *v8;
        *(void *)uint64_t v8 = 0;
        *((void *)v8 + 1) = 0;
        uint64_t v12 = (std::__shared_weak_count *)*((void *)v9 + 1);
        *uint64_t v9 = v11;
        if (v12) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        }
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = (long long *)(a1 + 16 * v7);
        uint64_t v9 = v10;
      }
      while (((*a3)(v8, &v15) & 1) != 0);
      long long v13 = v15;
      long long v15 = 0uLL;
      uint64_t v14 = (std::__shared_weak_count *)*((void *)v10 + 1);
      *uint64_t v10 = v13;
      if (v14)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
        if (*((void *)&v15 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v15 + 1));
        }
      }
    }
  }
}

void sub_224DA0320(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::shared_ptr<QP::Completion>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<QP::Completion>>,std::reverse_iterator<std::shared_ptr<QP::Completion>*>,std::reverse_iterator<std::shared_ptr<QP::Completion>*>,std::reverse_iterator<std::shared_ptr<QP::Completion>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<QP::Completion>>,std::reverse_iterator<std::shared_ptr<QP::Completion>*>,std::reverse_iterator<std::shared_ptr<QP::Completion>*>,std::reverse_iterator<std::shared_ptr<QP::Completion>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<QP::Completion>>,std::reverse_iterator<std::shared_ptr<QP::Completion>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<QP::Completion>>,std::reverse_iterator<std::shared_ptr<QP::Completion>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>,std::reverse_iterator<std::shared_ptr<QP::GraphStructureStack::Node>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

os_log_t ___ZL14qpparserLoggerv_block_invoke()
{
  id v0 = _nlpLoggingSubsystem();
  os_log_t result = os_log_create(v0, "Parser");
  qpparserLogger(void)::log = (uint64_t)result;
  return result;
}

void std::__tree<std::string>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::string>::destroy(a1, *(void *)a2);
    std::__tree<std::string>::destroy(a1, *((void *)a2 + 1));
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }
}

uint64_t *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t **a1, void **a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v8, a2);
  os_log_t result = *v5;
  if (!*v5)
  {
    std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)a1, a3, (uint64_t)&v7);
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

void *std::__tree<std::string>::__find_equal<std::string>(uint64_t a1, void *a2, void **a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  unint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = v4;
        uint64_t v8 = v4 + 4;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, (void **)v4 + 4) & 0x80) == 0) {
          break;
        }
        unint64_t v4 = (void *)*v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, a3) & 0x80) == 0) {
        break;
      }
      uint64_t v5 = v7 + 1;
      unint64_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void std::__tree<std::string>::__construct_node<std::string const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x38uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v7->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
  }
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_224DA06A4(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::string,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0) {
      operator delete(__p[4]);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void *std::allocate_shared[abi:ne180100]<QP::ParseAttribute,std::allocator<QP::ParseAttribute>,CFRange &,CFRange &,unsigned short,unsigned short,void>@<X0>(_OWORD *a1@<X1>, long long *a2@<X2>, __int16 *a3@<X3>, unsigned __int16 *a4@<X4>, void *a5@<X8>)
{
  uint64_t v10 = operator new(0xA8uLL);
  os_log_t result = std::__shared_ptr_emplace<QP::ParseAttribute>::__shared_ptr_emplace[abi:ne180100]<CFRange &,CFRange &,unsigned short,unsigned short,std::allocator<QP::ParseAttribute>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_224DA0788(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<QP::ParseAttribute>::__shared_ptr_emplace[abi:ne180100]<CFRange &,CFRange &,unsigned short,unsigned short,std::allocator<QP::ParseAttribute>,0>(void *a1, _OWORD *a2, long long *a3, __int16 *a4, unsigned __int16 *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D830700;
  std::construct_at[abi:ne180100]<QP::ParseAttribute,CFRange &,CFRange &,unsigned short &,unsigned short &,QP::ParseAttribute*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_224DA07E4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void **std::__tree<std::string>::find<std::string>(uint64_t a1, void **a2)
{
  uint64_t v2 = (void **)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = (void **)(a1 + 8);
  do
  {
    char v6 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3 + 4, a2);
    if (v6 >= 0) {
      uint64_t v7 = v3;
    }
    else {
      uint64_t v7 = v3 + 1;
    }
    if (v6 >= 0) {
      uint64_t v5 = (void **)v3;
    }
    uint64_t v3 = (void *)*v7;
  }
  while (*v7);
  if (v5 == v2
    || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4) & 0x80) != 0)
  {
    return v2;
  }
  return v5;
}

void *std::allocate_shared[abi:ne180100]<QP::Parse,std::allocator<QP::Parse>,nlp::CFScopedPtr<__CFString const*> &,long,long,std::vector<std::shared_ptr<QP::ParseAttribute>> &,decltype(nullptr),void>@<X0>(const void **a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, void **a4@<X4>, void *a5@<X8>)
{
  uint64_t v10 = operator new(0x78uLL);
  os_log_t result = std::__shared_ptr_emplace<QP::Parse>::__shared_ptr_emplace[abi:ne180100]<nlp::CFScopedPtr<__CFString const*> &,long,long,std::vector<std::shared_ptr<QP::ParseAttribute>> &,decltype(nullptr),std::allocator<QP::Parse>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_224DA08F0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<QP::Parse>::__shared_ptr_emplace[abi:ne180100]<nlp::CFScopedPtr<__CFString const*> &,long,long,std::vector<std::shared_ptr<QP::ParseAttribute>> &,decltype(nullptr),std::allocator<QP::Parse>,0>(void *a1, const void **a2, uint64_t *a3, uint64_t *a4, void **a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D830770;
  std::construct_at[abi:ne180100]<QP::Parse,nlp::CFScopedPtr<__CFString const*> &,long,long,std::vector<std::shared_ptr<QP::ParseAttribute>> &,decltype(nullptr),QP::Parse*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_224DA094C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<QP::Parse>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D830770;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QP::Parse>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D830770;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A623E20);
}

void std::__shared_ptr_emplace<QP::Parse>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::construct_at[abi:ne180100]<QP::Parse,nlp::CFScopedPtr<__CFString const*> &,long,long,std::vector<std::shared_ptr<QP::ParseAttribute>> &,decltype(nullptr),QP::Parse*>(uint64_t a1, const void **a2, uint64_t *a3, uint64_t *a4, void **a5)
{
  char v6 = *a2;
  uint64_t v7 = *a3;
  uint64_t v8 = *a4;
  memset(v10, 0, sizeof(v10));
  std::vector<std::shared_ptr<QP::ParseAttribute>>::__init_with_size[abi:ne180100]<std::shared_ptr<QP::ParseAttribute>*,std::shared_ptr<QP::ParseAttribute>*>(v10, *a5, a5[1], ((char *)a5[1] - (char *)*a5) >> 4);
  QP::Parse::Parse(a1, v6, v7, v8, v10, 0, 0);
  long long v11 = (void **)v10;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v11);
  return a1;
}

void sub_224DA0A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t QP::Parse::Parse(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, void **a5, uint64_t a6, char a7)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<std::shared_ptr<QP::ParseAttribute>>::__init_with_size[abi:ne180100]<std::shared_ptr<QP::ParseAttribute>*,std::shared_ptr<QP::ParseAttribute>*>((void *)(a1 + 8), *a5, a5[1], ((char *)a5[1] - (char *)*a5) >> 4);
  *(void *)(a1 + 88) = a6;
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = a4;
  *(_OWORD *)(a1 + 56) = xmmword_224E1E0D0;
  *(void *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 80) = 0;
  *(unsigned char *)(a1 + 81) = a7;
  if (a2)
  {
    CFTypeRef v14 = CFRetain(a2);
    nlp::CFScopedPtr<__CFString const*>::reset((const void **)a1, v14);
    uint64_t v16 = *(void *)(a1 + 64);
    uint64_t v15 = *(void *)(a1 + 72);
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t v16 = -1;
  }
  long long v18 = *a5;
  uint64_t v17 = a5[1];
  if (v18 != v17)
  {
    do
    {
      uint64_t v19 = v16;
      uint64_t v20 = *v18;
      *(void *)(a1 + 40) += *(void *)(*v18 + 8) + 1;
      *(void *)(a1 + 56) += *(void *)(v20 + 40);
      uint64_t v22 = *(void *)(v20 + 16);
      uint64_t v21 = *(void *)(v20 + 24);
      if (v16 == -1) {
        uint64_t v16 = *(void *)(v20 + 16);
      }
      if (*(unsigned char *)(v20 + 72)) {
        *(unsigned char *)(a1 + 80) = 1;
      }
      if (QP::ParseAttribute::flag((QP::ParseAttribute *)v20) == 4) {
        *(unsigned char *)(a1 + 82) = 1;
      }
      v18 += 2;
    }
    while (v18 != v17);
    uint64_t v23 = v22 - v19;
    if (v19 == -1) {
      uint64_t v23 = 0;
    }
    uint64_t v15 = v21 + v23;
  }
  *(void *)(a1 + 64) = v16;
  *(void *)(a1 + 72) = v15;
  return a1;
}

void sub_224DA0BE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nlp::CFScopedPtr<__CFDictionary const*>::reset(v3, 0);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  nlp::CFScopedPtr<__CFString const*>::reset(v2, 0);
  _Unwind_Resume(a1);
}

void QP::Parse::~Parse(const void **this)
{
  nlp::CFScopedPtr<__CFDictionary const*>::reset(this + 11, 0);
  uint64_t v2 = (void **)(this + 1);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v2);
  nlp::CFScopedPtr<__CFString const*>::reset(this, 0);
}

void *std::allocate_shared[abi:ne180100]<QP::Parse,std::allocator<QP::Parse>,nlp::CFScopedPtr<__CFString const*> &,int,long,std::vector<std::shared_ptr<QP::ParseAttribute>> &,decltype(nullptr),void>@<X0>(const void **a1@<X1>, int *a2@<X2>, uint64_t *a3@<X3>, void **a4@<X4>, void *a5@<X8>)
{
  uint64_t v10 = operator new(0x78uLL);
  os_log_t result = std::__shared_ptr_emplace<QP::Parse>::__shared_ptr_emplace[abi:ne180100]<nlp::CFScopedPtr<__CFString const*> &,int,long,std::vector<std::shared_ptr<QP::ParseAttribute>> &,decltype(nullptr),std::allocator<QP::Parse>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_224DA0CE8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<QP::Parse>::__shared_ptr_emplace[abi:ne180100]<nlp::CFScopedPtr<__CFString const*> &,int,long,std::vector<std::shared_ptr<QP::ParseAttribute>> &,decltype(nullptr),std::allocator<QP::Parse>,0>(void *a1, const void **a2, int *a3, uint64_t *a4, void **a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D830770;
  std::construct_at[abi:ne180100]<QP::Parse,nlp::CFScopedPtr<__CFString const*> &,int,long,std::vector<std::shared_ptr<QP::ParseAttribute>> &,decltype(nullptr),QP::Parse*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_224DA0D44(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<QP::Parse,nlp::CFScopedPtr<__CFString const*> &,int,long,std::vector<std::shared_ptr<QP::ParseAttribute>> &,decltype(nullptr),QP::Parse*>(uint64_t a1, const void **a2, int *a3, uint64_t *a4, void **a5)
{
  char v6 = *a2;
  uint64_t v7 = *a3;
  uint64_t v8 = *a4;
  memset(v10, 0, sizeof(v10));
  std::vector<std::shared_ptr<QP::ParseAttribute>>::__init_with_size[abi:ne180100]<std::shared_ptr<QP::ParseAttribute>*,std::shared_ptr<QP::ParseAttribute>*>(v10, *a5, a5[1], ((char *)a5[1] - (char *)*a5) >> 4);
  QP::Parse::Parse(a1, v6, v7, v8, v10, 0, 0);
  long long v11 = (void **)v10;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v11);
  return a1;
}

void sub_224DA0DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<QP::ParseAttribute,std::allocator<QP::ParseAttribute>,CFRange,CFRange&,int,int,void>@<X0>(_OWORD *a1@<X1>, long long *a2@<X2>, int *a3@<X3>, int *a4@<X4>, void *a5@<X8>)
{
  uint64_t v10 = operator new(0xA8uLL);
  os_log_t result = std::__shared_ptr_emplace<QP::ParseAttribute>::__shared_ptr_emplace[abi:ne180100]<CFRange,CFRange&,int,int,std::allocator<QP::ParseAttribute>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_224DA0E6C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<QP::ParseAttribute>::__shared_ptr_emplace[abi:ne180100]<CFRange,CFRange&,int,int,std::allocator<QP::ParseAttribute>,0>(void *a1, _OWORD *a2, long long *a3, int *a4, int *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D830700;
  std::construct_at[abi:ne180100]<QP::ParseAttribute,CFRange,CFRange&,int,int,QP::ParseAttribute*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_224DA0EC8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<QP::ParseAttribute,CFRange,CFRange&,int,int,QP::ParseAttribute*>(uint64_t a1, _OWORD *a2, long long *a3, int *a4, int *a5)
{
  int v6 = *a4;
  int v7 = *a5;
  long long v8 = *a3;
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v8;
  *(_WORD *)(a1 + 32) = v6;
  *(_DWORD *)(a1 + 34) = (unsigned __int16)v7;
  *(void *)(a1 + 40) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 48), "");
  *(_WORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 76) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(void *)(a1 + 136) = 0;
  return a1;
}

void *std::allocate_shared[abi:ne180100]<QP::Parse,std::allocator<QP::Parse>,nlp::CFScopedPtr<__CFString const*> &,unsigned long,long,std::vector<std::shared_ptr<QP::ParseAttribute>> &,decltype(nullptr),BOOL,void>@<X0>(const void **a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, void **a4@<X4>, uint64_t a5@<X5>, char *a6@<X6>, void *a7@<X8>)
{
  CFTypeRef v14 = operator new(0x78uLL);
  os_log_t result = std::__shared_ptr_emplace<QP::Parse>::__shared_ptr_emplace[abi:ne180100]<nlp::CFScopedPtr<__CFString const*> &,unsigned long,long,std::vector<std::shared_ptr<QP::ParseAttribute>> &,decltype(nullptr),BOOL,std::allocator<QP::Parse>,0>(v14, a1, a2, a3, a4, a5, a6);
  *a7 = v14 + 3;
  a7[1] = v14;
  return result;
}

void sub_224DA0FDC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<QP::Parse>::__shared_ptr_emplace[abi:ne180100]<nlp::CFScopedPtr<__CFString const*> &,unsigned long,long,std::vector<std::shared_ptr<QP::ParseAttribute>> &,decltype(nullptr),BOOL,std::allocator<QP::Parse>,0>(void *a1, const void **a2, uint64_t *a3, uint64_t *a4, void **a5, uint64_t a6, char *a7)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D830770;
  std::construct_at[abi:ne180100]<QP::Parse,nlp::CFScopedPtr<__CFString const*> &,unsigned long,long,std::vector<std::shared_ptr<QP::ParseAttribute>> &,decltype(nullptr),BOOL,QP::Parse*>((uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7);
  return a1;
}

void sub_224DA1038(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<QP::Parse,nlp::CFScopedPtr<__CFString const*> &,unsigned long,long,std::vector<std::shared_ptr<QP::ParseAttribute>> &,decltype(nullptr),BOOL,QP::Parse*>(uint64_t a1, const void **a2, uint64_t *a3, uint64_t *a4, void **a5, uint64_t a6, char *a7)
{
  long long v9 = *a2;
  uint64_t v10 = *a3;
  uint64_t v11 = *a4;
  memset(v13, 0, sizeof(v13));
  std::vector<std::shared_ptr<QP::ParseAttribute>>::__init_with_size[abi:ne180100]<std::shared_ptr<QP::ParseAttribute>*,std::shared_ptr<QP::ParseAttribute>*>(v13, *a5, a5[1], ((char *)a5[1] - (char *)*a5) >> 4);
  QP::Parse::Parse(a1, v9, v10, v11, v13, 0, *a7);
  CFTypeRef v14 = (void **)v13;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v14);
  return a1;
}

void sub_224DA10E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<QP::Parse,std::allocator<QP::Parse>,nlp::CFScopedPtr<__CFString const*> &,int,int,std::vector<std::shared_ptr<QP::ParseAttribute>>,decltype(nullptr),void>@<X0>(const void **a1@<X1>, int *a2@<X2>, int *a3@<X3>, long long *a4@<X4>, void *a5@<X8>)
{
  uint64_t v10 = operator new(0x78uLL);
  os_log_t result = std::__shared_ptr_emplace<QP::Parse>::__shared_ptr_emplace[abi:ne180100]<nlp::CFScopedPtr<__CFString const*> &,int,int,std::vector<std::shared_ptr<QP::ParseAttribute>>,decltype(nullptr),std::allocator<QP::Parse>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_224DA1174(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<QP::Parse>::__shared_ptr_emplace[abi:ne180100]<nlp::CFScopedPtr<__CFString const*> &,int,int,std::vector<std::shared_ptr<QP::ParseAttribute>>,decltype(nullptr),std::allocator<QP::Parse>,0>(void *a1, const void **a2, int *a3, int *a4, long long *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D830770;
  std::construct_at[abi:ne180100]<QP::Parse,nlp::CFScopedPtr<__CFString const*> &,int,int,std::vector<std::shared_ptr<QP::ParseAttribute>>,decltype(nullptr),QP::Parse*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_224DA11D0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<QP::Parse,nlp::CFScopedPtr<__CFString const*> &,int,int,std::vector<std::shared_ptr<QP::ParseAttribute>>,decltype(nullptr),QP::Parse*>(uint64_t a1, const void **a2, int *a3, int *a4, long long *a5)
{
  int v6 = *a2;
  uint64_t v7 = *a3;
  uint64_t v8 = *a4;
  long long v10 = *a5;
  uint64_t v11 = *((void *)a5 + 2);
  *((void *)a5 + 1) = 0;
  *((void *)a5 + 2) = 0;
  *(void *)a5 = 0;
  QP::Parse::Parse(a1, v6, v7, v8, (void **)&v10, 0, 0);
  uint64_t v12 = (void **)&v10;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v12);
  return a1;
}

void sub_224DA1254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<QP::Completion,std::allocator<QP::Completion>,__CFString const*&,__CFString const*&,__CFString const*&,__CFString const*&,__CFString const*&,__CFString const*&,__CFString const*&,__CFString const*&,QPSymbolFlag &,void>@<X0>(CFTypeRef *a1@<X1>, CFTypeRef *a2@<X2>, CFTypeRef *a3@<X3>, CFTypeRef *a4@<X4>, CFTypeRef *a5@<X5>, CFTypeRef *a6@<X6>, CFTypeRef *a7@<X7>, void *a8@<X8>, CFTypeRef *a9, __int16 *a10)
{
  uint64_t v17 = operator new(0x68uLL);
  os_log_t result = std::__shared_ptr_emplace<QP::Completion>::__shared_ptr_emplace[abi:ne180100]<__CFString const*&,__CFString const*&,__CFString const*&,__CFString const*&,__CFString const*&,__CFString const*&,__CFString const*&,__CFString const*&,QPSymbolFlag &,std::allocator<QP::Completion>,0>(v17, a1, a2, a3, a4, a5, a6, a7, a9, a10);
  *a8 = v17 + 3;
  a8[1] = v17;
  return result;
}

void sub_224DA130C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<QP::Completion>::__shared_ptr_emplace[abi:ne180100]<__CFString const*&,__CFString const*&,__CFString const*&,__CFString const*&,__CFString const*&,__CFString const*&,__CFString const*&,__CFString const*&,QPSymbolFlag &,std::allocator<QP::Completion>,0>(void *a1, CFTypeRef *a2, CFTypeRef *a3, CFTypeRef *a4, CFTypeRef *a5, CFTypeRef *a6, CFTypeRef *a7, CFTypeRef *a8, CFTypeRef *a9, __int16 *a10)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D8307C0;
  QP::Completion::Completion((uint64_t)(a1 + 3), *a2, *a3, *a4, *a5, *a6, *a7, *a8, *a9, *a10);
  return a1;
}

void sub_224DA13A0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<QP::Completion>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D8307C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QP::Completion>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D8307C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A623E20);
}

void std::__shared_ptr_emplace<QP::Completion>::__on_zero_shared(uint64_t a1)
{
}

uint64_t QP::Completion::Completion(uint64_t a1, CFTypeRef cf, CFTypeRef a3, CFTypeRef a4, CFTypeRef a5, CFTypeRef a6, CFTypeRef a7, CFTypeRef a8, CFTypeRef cfa, __int16 a10)
{
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v17 = (const void **)(a1 + 16);
  *(_OWORD *)(a1 + 32) = 0u;
  long long v18 = (const void **)(a1 + 32);
  *(_OWORD *)(a1 + 48) = 0u;
  uint64_t v19 = (const void **)(a1 + 48);
  *(void *)(a1 + 64) = 0;
  uint64_t v31 = (const void **)(a1 + 24);
  os_signpost_id_t v32 = (const void **)(a1 + 8);
  uint64_t v29 = (const void **)(a1 + 56);
  uint64_t v30 = (const void **)(a1 + 40);
  *(_OWORD *)a1 = 0u;
  *(_WORD *)(a1 + 72) = a10;
  if (cf)
  {
    CFTypeRef v20 = CFRetain(cf);
    nlp::CFScopedPtr<__CFString const*>::reset((const void **)a1, v20);
  }
  if (a3)
  {
    CFTypeRef v21 = CFRetain(a3);
    nlp::CFScopedPtr<__CFString const*>::reset(v32, v21);
  }
  if (a4)
  {
    CFTypeRef v22 = CFRetain(a4);
    nlp::CFScopedPtr<__CFString const*>::reset(v17, v22);
  }
  if (a5)
  {
    CFTypeRef v23 = CFRetain(a5);
    nlp::CFScopedPtr<__CFString const*>::reset(v31, v23);
  }
  if (a6)
  {
    CFTypeRef v24 = CFRetain(a6);
    nlp::CFScopedPtr<__CFString const*>::reset(v18, v24);
  }
  if (a7)
  {
    CFTypeRef v25 = CFRetain(a7);
    nlp::CFScopedPtr<__CFString const*>::reset(v30, v25);
  }
  if (a8)
  {
    CFTypeRef v26 = CFRetain(a8);
    nlp::CFScopedPtr<__CFString const*>::reset(v19, v26);
  }
  if (cfa)
  {
    CFTypeRef v27 = CFRetain(cfa);
    nlp::CFScopedPtr<__CFString const*>::reset(v29, v27);
  }
  return a1;
}

void sub_224DA159C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void **a9, const void **a10, const void **a11, const void **a12)
{
  nlp::CFScopedPtr<__CFDictionary const*>::reset(v12 + 8, 0);
  nlp::CFScopedPtr<__CFString const*>::reset(a9, 0);
  nlp::CFScopedPtr<__CFString const*>::reset(v15, 0);
  nlp::CFScopedPtr<__CFString const*>::reset(a10, 0);
  nlp::CFScopedPtr<__CFString const*>::reset(v14, 0);
  nlp::CFScopedPtr<__CFString const*>::reset(a11, 0);
  nlp::CFScopedPtr<__CFString const*>::reset(v13, 0);
  nlp::CFScopedPtr<__CFString const*>::reset(a12, 0);
  nlp::CFScopedPtr<__CFString const*>::reset(v12, 0);
  _Unwind_Resume(a1);
}

void QP::Completion::~Completion(const void **this)
{
}

void QPSpotlightCacheRelease(CFArrayRef *a1)
{
  if (a1)
  {
    CFIndex Count = CFArrayGetCount(*a1);
    if (Count >= 1)
    {
      CFIndex v3 = Count;
      for (CFIndex i = 0; i != v3; ++i)
      {
        if (CFArrayGetValueAtIndex(*a1, i)) {
          SIGeneralTrieRelease();
        }
        CFArraySetValueAtIndex(*a1, i, 0);
      }
    }
    CFRelease(*a1);
    *a1 = 0;
  }
}

BOOL QP::PhotosParserFormatter::isValid(uint64_t a1, void **a2)
{
  uint64_t v2 = *a2;
  return *a2 && *v2 && v2[5] != 0;
}

uint64_t QP::PhotosParserFormatter::setParse(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (std::__shared_weak_count *)a2[1];
  uint64_t v5 = *a2;
  int v6 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = QP::Formatter::setParse(a1, (uint64_t)&v5);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return v3;
}

void sub_224DA17C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void QP::PhotosParserFormatter::updateParseWithDateAttribute(QP::Formatter *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a3 + 8);
  unint64_t v4 = *(CFRange **)a3;
  uint64_t v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  QP::Formatter::updateParseWithDateAttribute(a1, a2, &v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_224DA1828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void QP::PhotosParserFormatter::~PhotosParserFormatter(QP::PhotosParserFormatter *this)
{
  QP::Formatter::~Formatter(this);
  JUMPOUT(0x22A623E20);
}

void *QPStringCacheCreateWithOptions(const void *a1, const __CFDictionary *a2)
{
  unint64_t v4 = malloc_type_malloc(0x50uLL, 0x106004038EB2D4CuLL);
  if (v4)
  {
    if (a1) {
      CFTypeRef v5 = CFRetain(a1);
    }
    else {
      CFTypeRef v5 = 0;
    }
    v4[1] = 0;
    *unint64_t v4 = v5;
    int v4[2] = 0;
    v4[3] = 0;
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    v4[4] = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFFA0]);
    uint64_t MutableWithOptions = SIGeneralTrieCreateMutableWithOptions();
    *((_DWORD *)v4 + 14) = 0x7FFFFFFF;
    v4[5] = MutableWithOptions;
    v4[6] = 0;
    v4[8] = 0x3FF0000000000000;
    if (a2)
    {
      if (CFDictionaryContainsKey(a2, @"cacheSize"))
      {
        CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a2, @"cacheSize");
        CFNumberGetValue(Value, kCFNumberCFIndexType, v4 + 7);
      }
      if (CFDictionaryContainsKey(a2, @"cacheGrowthFactor"))
      {
        CFNumberRef v9 = (const __CFNumber *)CFDictionaryGetValue(a2, @"cacheGrowthFactor");
        CFNumberGetValue(v9, kCFNumberDoubleType, v4 + 8);
      }
      if (CFDictionaryContainsKey(a2, @"doNotPruneList"))
      {
        CFArrayRef v10 = (const __CFArray *)CFDictionaryGetValue(a2, @"doNotPruneList");
        CFMutableArrayRef Mutable = CFSetCreateMutable(v6, 0, MEMORY[0x263EFFFA0]);
        CFIndex Count = CFArrayGetCount(v10);
        if (Count >= 1)
        {
          CFIndex v13 = Count;
          for (CFIndex i = 0; i != v13; ++i)
          {
            CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v10, i);
            CFSetAddValue(Mutable, ValueAtIndex);
          }
        }
        int v4[2] = Mutable;
      }
      if (CFDictionaryContainsKey(a2, @"alwaysPruneList"))
      {
        CFArrayRef v16 = (const __CFArray *)CFDictionaryGetValue(a2, @"alwaysPruneList");
        uint64_t v17 = CFSetCreateMutable(v6, 0, MEMORY[0x263EFFFA0]);
        CFIndex v18 = CFArrayGetCount(v16);
        if (v18 >= 1)
        {
          CFIndex v19 = v18;
          for (CFIndex j = 0; j != v19; ++j)
          {
            CFTypeRef v21 = CFArrayGetValueAtIndex(v16, j);
            CFSetAddValue(v17, v21);
          }
        }
        v4[1] = v17;
      }
    }
    *((_DWORD *)v4 + 18) = 1;
  }
  return v4;
}

uint64_t QPStringCacheAddWithCount(uint64_t result, CFStringRef theString, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    uint64_t v4 = result;
    os_log_t result = *(void *)(result + 40);
    if (result)
    {
      __int16 v8 = 0;
      add(result, *(__CFSet **)(v4 + 32), *(const __CFSet **)(v4 + 16), theString, a3, a4, (BOOL *)&v8, (uint64_t)&v8 + 1);
      unsigned int v5 = v8;
      if ((_BYTE)v8 && HIBYTE(v8)) {
        ++*(void *)(v4 + 24);
      }
      uint64_t v6 = *(int *)(v4 + 56);
      if (v6 != 0x7FFFFFFF)
      {
        uint64_t v7 = *(void *)(v4 + 24) + v6 + (uint64_t)(*(double *)(v4 + 64) * (double)(int)v6);
        if (SIGeneralTrieGetCount() > v7) {
          prune(v4);
        }
      }
      if (SIGeneralTrieGetCount() - *(void *)(v4 + 24) > (uint64_t)(*(double *)(v4 + 64) * (double)*(int *)(v4 + 56))) {
        return 1;
      }
      else {
        return v5;
      }
    }
  }
  return result;
}

void add(uint64_t a1, __CFSet *a2, const __CFSet *a3, CFStringRef theString, uint64_t a5, uint64_t a6, BOOL *a7, uint64_t a8)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  int valuePtr = a5;
  if (a1)
  {
    if (theString)
    {
      if (CFStringGetLength(theString))
      {
        CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        CFStringRef v15 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"%d:%@", a5, theString);
        if (v15)
        {
          CFStringRef v16 = v15;
          CFIndex Length = CFStringGetLength(v15);
          CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
          v27[1] = v27;
          MEMORY[0x270FA5388](MaximumSizeForEncoding);
          CFTypeRef v20 = (char *)v27 - v19;
          if (CFStringGetCString(v16, (char *)v27 - v19, v21, 0x8000100u))
          {
            v27[0] = a8;
            strlen(v20);
            int v22 = SIGeneralTrieContainsKey();
            if (a7) {
              *a7 = v22 == 0;
            }
            int v23 = v22;
            SIGeneralTrieAddKeyWithScore();
            CFNumberRef v24 = CFNumberCreate(v14, kCFNumberIntType, &valuePtr);
            CFTypeRef v25 = (unsigned char *)v27[0];
            if (v24)
            {
              CFNumberRef v26 = v24;
              if (a3 && v27[0] && CFSetContainsValue(a3, v24) && !v23) {
                *CFTypeRef v25 = 1;
              }
              CFSetAddValue(a2, v26);
              CFRelease(v26);
            }
          }
          CFRelease(v16);
        }
      }
    }
  }
}

void prune(uint64_t a1)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 40) && !*(void *)a1)
  {
    uint64_t Count = CFSetGetCount(*(CFSetRef *)(a1 + 32));
    CFSetRef v3 = *(const __CFSet **)(a1 + 16);
    if (v3) {
      CFSetRef v3 = (const __CFSet *)CFSetGetCount(v3);
    }
    uint64_t v30 = &v28;
    uint64_t v4 = *(int *)(a1 + 56);
    uint64_t v35 = v4;
    if ((const __CFSet *)Count == v3) {
      uint64_t v5 = 0x7FFFFFFFLL;
    }
    else {
      uint64_t v5 = v4 / (Count - (uint64_t)v3);
    }
    MEMORY[0x270FA5388](v3);
    uint64_t v7 = (const void **)((char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
    if (v6 >= 0x200) {
      size_t v8 = 512;
    }
    else {
      size_t v8 = v6;
    }
    bzero((char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
    CFSetGetValues(*(CFSetRef *)(a1 + 32), v7);
    *(void *)(a1 + 24) = 0;
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], Count, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (Count >= 1)
    {
      CFNumberRef v9 = v7;
      do
      {
        CFArrayRef v10 = *v9;
        CFSetRef v11 = *(const __CFSet **)(a1 + 16);
        if (!v11 || !CFSetContainsValue(v11, *v9))
        {
          uint64_t v12 = (const void *)SITrieCompletionQueueCreate();
          CFDictionarySetValue(Mutable, v10, v12);
          CFRelease(v12);
        }
        ++v9;
        --Count;
      }
      while (Count);
    }
    uint64_t v37 = 0;
    std::string v38 = &v37;
    uint64_t v39 = 0x2000000000;
    uint64_t MutableWithOptions = 0;
    uint64_t MutableWithOptions = SIGeneralTrieCreateMutableWithOptions();
    uint64_t v13 = *(void *)(a1 + 40);
    v36[0] = MEMORY[0x263EF8330];
    v36[1] = 0x40000000;
    v36[2] = ___ZL5pruneP14_QPStringCache_block_invoke;
    v36[3] = &unk_264705298;
    v36[4] = &v37;
    v36[5] = a1;
    CFDictionaryRef v14 = Mutable;
    v36[6] = Mutable;
    v36[7] = v35;
    enumerateCompletions(v13, &stru_26D832058, (uint64_t)v36);
    CFIndex v15 = CFDictionaryGetCount(v14);
    MEMORY[0x270FA5388](v15);
    uint64_t v17 = (const void **)((char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
    if (v16 >= 0x200) {
      size_t v18 = 512;
    }
    else {
      size_t v18 = v16;
    }
    bzero((char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), v18);
    CFDictionaryGetKeysAndValues(v14, v7, v17);
    uint64_t v29 = a1;
    if (v15 >= 1)
    {
      CFIndex v28 = v15 - 1;
      CFIndex v32 = v15;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      if (v5 <= 1) {
        uint64_t v21 = 1;
      }
      else {
        uint64_t v21 = v5;
      }
      uint64_t v33 = v21;
      do
      {
        int v22 = (__CFBinaryHeap *)v17[v19];
        uint64_t v23 = v33;
        uint64_t v34 = v33 + v20;
        while (CFBinaryHeapGetCount(v22) >= 1)
        {
          CFBinaryHeapGetMinimum(v22);
          SITrieCompletionGetCompletion();
          SITrieCompletionGetLength();
          SITrieCompletionGetPayload();
          SITrieCompletionGetScore();
          SIGeneralTrieAddKeyWithScore();
          CFBinaryHeapRemoveMinimumValue(v22);
          ++v20;
          if (!--v23)
          {
            uint64_t v20 = v34;
            break;
          }
        }
        if (v20 >= v35) {
          break;
        }
        ++v19;
      }
      while (v19 != v32);
      CFIndex v24 = v28;
      if (v20 < v35)
      {
        do
        {
          CFIndex v25 = v24;
          CFNumberRef v26 = (__CFBinaryHeap *)*v17;
          if (CFBinaryHeapGetCount((CFBinaryHeapRef)*v17) >= 1)
          {
            CFBinaryHeapGetMinimum(v26);
            SITrieCompletionGetCompletion();
            SITrieCompletionGetLength();
            SITrieCompletionGetPayload();
            SITrieCompletionGetScore();
            SIGeneralTrieAddKeyWithScore();
            CFBinaryHeapRemoveMinimumValue(v26);
            ++v20;
          }
          if (v20 >= v35) {
            break;
          }
          CFIndex v24 = v25 - 1;
          ++v17;
        }
        while (v25);
      }
    }
    CFRelease(Mutable);
    uint64_t v27 = v29;
    SIGeneralTrieRelease();
    *(void *)(v27 + 4nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = v38[3];
    _Block_object_dispose(&v37, 8);
  }
}

void sub_224DA21C8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t QPStringCacheAdd(uint64_t a1, const __CFString *a2, uint64_t a3)
{
  return QPStringCacheAddWithCount(a1, a2, a3, 1);
}

void QPStringCacheRemove(uint64_t a1, CFStringRef theString, unsigned int a3)
{
  if (a1)
  {
    if (*(void *)(a1 + 40)) {
      remove(*(void *)(a1 + 40), *(const __CFSet **)(a1 + 16), theString, a3);
    }
  }
}

void remove(int a1, const __CFSet *a2, CFStringRef theString, unsigned int a4)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  unsigned int valuePtr = a4;
  if (theString && CFStringGetLength(theString))
  {
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFNumberRef v7 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberIntType, &valuePtr);
    if (v7)
    {
      CFNumberRef v8 = v7;
      if (a2)
      {
        int v9 = CFSetContainsValue(a2, v7);
        CFRelease(v8);
        if (v9) {
          return;
        }
      }
      else
      {
        CFRelease(v7);
      }
    }
    CFStringRef v10 = CFStringCreateWithFormat(v6, 0, @"%d:%@", valuePtr, theString);
    if (v10)
    {
      CFStringRef v11 = v10;
      CFIndex Length = CFStringGetLength(v10);
      CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
      MEMORY[0x270FA5388](MaximumSizeForEncoding);
      CFIndex v15 = &v17[-v14];
      if (CFStringGetCString(v11, &v17[-v14], v16, 0x8000100u))
      {
        strlen(v15);
        if (SIGeneralTrieContainsKey()) {
          SIGeneralTrieAddKeyWithScore();
        }
      }
      CFRelease(v11);
    }
  }
}

uint64_t QPStringCacheGetLiveCount(uint64_t a1)
{
  if (a1 && *(void *)(a1 + 40)) {
    return SIGeneralTrieGetCount();
  }
  else {
    return 0;
  }
}

void QPStringCachePrune(uint64_t a1)
{
  if (a1) {
    prune(a1);
  }
}

uint64_t QPStringCacheEnumerateStrings(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v2 = *(void *)(result + 40);
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 0x40000000;
    v3[2] = __QPStringCacheEnumerateStrings_block_invoke;
    v3[3] = &unk_264705270;
    void v3[4] = a2;
    return enumerateCompletions(v2, &stru_26D832058, (uint64_t)v3);
  }
  return result;
}

uint64_t enumerateCompletions(uint64_t result, const __CFString *a2, uint64_t a3)
{
  v8[1] = *MEMORY[0x263EF8340];
  v8[0] = a3;
  if (result && a3)
  {
    if (a2) {
      CFStringRef v3 = a2;
    }
    else {
      CFStringRef v3 = &stru_26D832058;
    }
    CFStringGetLength(v3);
    CFIndex Length = CFStringGetLength(v3);
    CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
    MEMORY[0x270FA5388](MaximumSizeForEncoding);
    os_log_t result = CFStringGetCString(v3, (char *)v8 - v6, v7, 0x8000100u);
    if (result) {
      return SIGeneralTrieSearch();
    }
  }
  return result;
}

void __QPStringCacheEnumerateStrings_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (SITrieCompletionGetPayload())
  {
    uint64_t Completion = SITrieCompletionGetCompletion();
    int Length = SITrieCompletionGetLength();
    uint64_t v7 = 0;
    if (Length)
    {
      while (1)
      {
        int v8 = *(unsigned __int8 *)(Completion + v7++);
        if (v8 == 58) {
          break;
        }
        if (Length == v7) {
          return;
        }
      }
    }
    if (v7 != Length)
    {
      int v9 = (const char *)(Completion + v7);
      CFStringRef v10 = Completion ? v9 : "";
      CFStringRef v11 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x263EFFB08], v10, 0x8000100u);
      if (v11)
      {
        CFStringRef v12 = v11;
        uint64_t v13 = *(void *)(a1 + 32);
        uint64_t Payload = SITrieCompletionGetPayload();
        (*(void (**)(uint64_t, CFStringRef, uint64_t, uint64_t))(v13 + 16))(v13, v12, Payload, a3);
        CFRelease(v12);
      }
    }
  }
}

BOOL QPStringCacheHasPrefixWithValue(BOOL result, uint64_t a2, uint64_t a3)
{
  if (result) {
    return containsPrefixWithValue(*(void *)(result + 40), a2, a3);
  }
  return result;
}

BOOL containsPrefixWithValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFStringRef v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"%d:%@", a3, a2);
  if (!v4) {
    return 0;
  }
  CFStringRef v5 = v4;
  uint64_t v9 = 0;
  CFStringRef v10 = &v9;
  uint64_t v11 = 0x2000000000;
  char v12 = 0;
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 0x40000000;
  void v8[2] = ___ZL23containsPrefixWithValueP14_SIGeneralTriePKS_PK10__CFStringj_block_invoke;
  void v8[3] = &unk_2647052C0;
  v8[4] = &v9;
  enumerateCompletions(a1, v4, (uint64_t)v8);
  CFRelease(v5);
  BOOL v6 = *((unsigned char *)v10 + 24) != 0;
  _Block_object_dispose(&v9, 8);
  return v6;
}

void sub_224DA2798(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void QPStringCacheRelease(_DWORD *a1)
{
  if (a1)
  {
    int v2 = a1[18] - 1;
    a1[18] = v2;
    if (!v2)
    {
      CFStringRef v3 = *(const void **)a1;
      if (*(void *)a1) {
        CFRelease(v3);
      }
      CFStringRef v4 = (const void *)*((void *)a1 + 4);
      if (v4) {
        CFRelease(v4);
      }
      CFStringRef v5 = (const void *)*((void *)a1 + 1);
      if (v5) {
        CFRelease(v5);
      }
      BOOL v6 = (const void *)*((void *)a1 + 2);
      if (v6) {
        CFRelease(v6);
      }
      if (*((void *)a1 + 5)) {
        SIGeneralTrieRelease();
      }
      if (*((void *)a1 + 6)) {
        SIGeneralTrieRelease();
      }
      free(a1);
    }
  }
}

void ___ZL5pruneP14_QPStringCache_block_invoke(uint64_t a1, const void *a2)
{
  int valuePtr = SITrieCompletionGetPayload();
  CFNumberRef v4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberIntType, &valuePtr);
  if (SITrieCompletionGetPayload())
  {
    CFSetRef v5 = *(const __CFSet **)(*(void *)(a1 + 40) + 16);
    if (!v5 || !CFSetContainsValue(v5, v4))
    {
      CFNumberRef Value = (__CFBinaryHeap *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 48), v4);
      if (*(void *)(a1 + 56) <= (uint64_t)CFBinaryHeapGetCount(Value))
      {
        CFBinaryHeapGetMinimum(Value);
        SITrieCompletionGetScore();
        double v9 = v8;
        SITrieCompletionGetScore();
        if (v9 <= v10) {
          goto LABEL_9;
        }
        CFBinaryHeapRemoveMinimumValue(Value);
      }
      CFBinaryHeapAddValue(Value, a2);
      goto LABEL_9;
    }
    SITrieCompletionGetCompletion();
    SITrieCompletionGetLength();
    SITrieCompletionGetPayload();
    SITrieCompletionGetScore();
    SIGeneralTrieAddKeyWithScore();
    SITrieCompletionGetScore();
    *(void *)(*(void *)(a1 + 40) + 24) = (uint64_t)(v6 + (double)*(uint64_t *)(*(void *)(a1 + 40) + 24));
  }
LABEL_9:
  CFRelease(v4);
}

uint64_t completionCallback(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t ___ZL23containsPrefixWithValueP14_SIGeneralTriePKS_PK10__CFStringj_block_invoke(uint64_t result, uint64_t a2, unsigned char *a3)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  *a3 = 1;
  return result;
}

uint64_t QP::ParserGrammar::ParserGrammar(uint64_t a1, void *a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v3 = a2[1];
  *(void *)(a1 + 4nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = *a2;
  *(void *)(a1 + 48) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 56) = 0uLL;
  *(_OWORD *)(a1 + 72) = 0uLL;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 88), kQPSymbolNone[0]);
  *(void *)(a1 + 12nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = 0;
  *(void *)(a1 + 112) = a1 + 120;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 136) = a1 + 144;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 16nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = a1 + 168;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 184) = a1 + 192;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 20nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = 0;
  *(void *)(a1 + 208) = a1 + 216;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 24nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = 0;
  *(void *)(a1 + 232) = a1 + 240;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = a1 + 264;
  *(void *)(a1 + 28nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = a1 + 288;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 32nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = a1 + 312;
  *(void *)(a1 + 328) = a1 + 336;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 36nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = a1 + 360;
  *(void *)(a1 + 376) = a1 + 384;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 40nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = a1 + 408;
  *(void *)(a1 + 424) = a1 + 432;
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 456) = 0;
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 44nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = 0;
  *(void *)(a1 + 448) = a1 + 456;
  *(void *)(a1 + 472) = a1 + 480;
  *(void *)(a1 + 48nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = 0;
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 488) = 0;
  *(void *)(a1 + 496) = a1 + 504;
  *(void *)(a1 + 536) = 0;
  *(void *)(a1 + 528) = 0;
  *(void *)(a1 + 52nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = a1 + 528;
  *(void *)(a1 + 56nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = 0;
  *(void *)(a1 + 552) = 0;
  *(void *)(a1 + 544) = a1 + 552;
  *(void *)(a1 + 584) = 0;
  *(void *)(a1 + 576) = 0;
  *(void *)(a1 + 568) = a1 + 576;
  *(void *)(a1 + 608) = 0;
  *(void *)(a1 + 60nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = 0;
  *(void *)(a1 + 592) = a1 + 600;
  *(void *)(a1 + 632) = 0;
  *(void *)(a1 + 624) = 0;
  *(void *)(a1 + 616) = a1 + 624;
  *(void *)(a1 + 656) = 0;
  *(void *)(a1 + 648) = 0;
  *(void *)(a1 + 64nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = a1 + 648;
  *(void *)(a1 + 68nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = 0;
  *(void *)(a1 + 672) = 0;
  *(void *)(a1 + 664) = a1 + 672;
  *(void *)(a1 + 704) = 0;
  *(void *)(a1 + 696) = 0;
  *(void *)(a1 + 688) = a1 + 696;
  *(void *)(a1 + 728) = 0;
  *(void *)(a1 + 72nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = 0;
  *(void *)(a1 + 712) = a1 + 720;
  *(void *)(a1 + 752) = 0;
  *(void *)(a1 + 744) = 0;
  *(void *)(a1 + 736) = a1 + 744;
  *(void *)(a1 + 776) = 0;
  *(void *)(a1 + 768) = 0;
  *(void *)(a1 + 76nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = a1 + 768;
  *(void *)(a1 + 80nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = 0;
  *(void *)(a1 + 792) = 0;
  *(void *)(a1 + 784) = a1 + 792;
  *(void *)(a1 + 824) = 0;
  *(void *)(a1 + 816) = 0;
  *(void *)(a1 + 808) = a1 + 816;
  *(void *)(a1 + 848) = 0;
  *(void *)(a1 + 84nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = 0;
  *(void *)(a1 + 832) = a1 + 840;
  *(void *)(a1 + 872) = 0;
  *(void *)(a1 + 864) = 0;
  *(void *)(a1 + 856) = a1 + 864;
  *(void *)(a1 + 88nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = 850045863;
  *(void *)(a1 + 936) = 0;
  *(_OWORD *)(a1 + 92nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  QP::ParserGrammar::clearResources((QP::ParserGrammar *)a1);
  return a1;
}

void sub_224DA2D28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  std::mutex::~mutex(v37);
  std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::map<unsigned short,float>>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::map<unsigned short,float>>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::map<unsigned short,float>>>>>::destroy(v32, *(void **)(v29 + 864));
  std::__tree<unsigned short>::destroy(v36, *(void **)(v29 + 840));
  std::__tree<unsigned short>::destroy(v35, *(void **)(v29 + 816));
  std::__tree<unsigned short>::destroy(v34, *(void **)(v29 + 792));
  std::__tree<unsigned short>::destroy(v31, *(void **)(v29 + 768));
  std::__tree<unsigned short>::destroy(v33, *(void **)(v29 + 744));
  std::__tree<unsigned short>::destroy(a11, *(void **)(v29 + 720));
  std::__tree<unsigned short>::destroy(a12, *(void **)(v29 + 696));
  std::__tree<unsigned short>::destroy(a13, *(void **)(v29 + 672));
  std::__tree<unsigned short>::destroy(a14, *(void **)(v29 + 648));
  std::__tree<unsigned short>::destroy(a15, *(void **)(v29 + 624));
  std::__tree<unsigned short>::destroy(a16, *(void **)(v29 + 600));
  std::__tree<unsigned short>::destroy(a17, *(void **)(v29 + 576));
  std::__tree<unsigned short>::destroy(a18, *(void **)(v29 + 552));
  std::__tree<unsigned short>::destroy(a19, *(void **)(v29 + 528));
  std::__tree<unsigned short>::destroy(a20, *(void **)(v29 + 504));
  std::__tree<std::__value_type<unsigned short,std::map<std::string,std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<std::string,std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<std::string,std::string>>>>::destroy(a21, *(void **)(v29 + 480));
  std::__tree<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>>>::destroy(a22, *(void **)(v29 + 456));
  std::__tree<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>>>::destroy(a23, *(void **)(v29 + 432));
  std::__tree<std::__value_type<std::string,std::set<unsigned short>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned short>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned short>>>>::destroy(a24, *(void **)(v29 + 408));
  std::__tree<std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>>>::destroy(a25, *(void **)(v29 + 384));
  std::__tree<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>>>::destroy(a26, *(void **)(v29 + 360));
  std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::string>>>>::destroy(a27, *(void **)(v29 + 336));
  std::__tree<unsigned short>::destroy(a28, *(void **)(v29 + 312));
  std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::destroy(a29, *(void **)(v29 + 288));
  std::__tree<std::__value_type<unsigned short,std::set<std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<std::string>>>>::destroy(*(void *)(v39 - 152), *(void **)(v29 + 264));
  std::__tree<std::__value_type<unsigned short,std::set<std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<std::string>>>>::destroy(v38, *(void **)(v29 + 240));
  std::__tree<std::__value_type<unsigned short,std::set<std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<std::string>>>>::destroy(*(void *)(v39 - 144), *(void **)(v29 + 216));
  std::__tree<unsigned short>::destroy(*(void *)(v39 - 136), *(void **)(v29 + 192));
  std::__tree<std::string>::destroy(*(void *)(v39 - 128), *(char **)(v29 + 168));
  std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy(*(void *)(v39 - 120), *(char **)(v29 + 144));
  std::__tree<std::string>::destroy(*(void *)(v39 - 112), *(char **)(v29 + 120));
  if (*(char *)(v29 + 111) < 0) {
    operator delete(**(void ***)(v39 - 104));
  }
  nlp::CFScopedPtr<__CFDictionary const*>::reset(v30 + 3, 0);
  nlp::CFScopedPtr<__CFDictionary const*>::reset(*(const void ***)(v39 - 96), 0);
  nlp::CFScopedPtr<__CFDictionary const*>::reset(v30 + 1, 0);
  nlp::CFScopedPtr<__CFURL const*>::reset(v30, 0);
  CFStringRef v40 = *(std::__shared_weak_count **)(v29 + 48);
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)(v29 + 32), 0);
  nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)(v29 + 24), 0);
  nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)(v29 + 16), 0);
  nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)v29, 0);
  _Unwind_Resume(a1);
}

void QP::ParserGrammar::clearResources(QP::ParserGrammar *this)
{
  int v2 = (std::mutex *)((char *)this + 880);
  std::mutex::lock((std::mutex *)((char *)this + 880));
  nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)this, 0);
  uint64_t v3 = (char *)*((void *)this + 1);
  if (v3)
  {
    nlp::BurstTrieRelease(v3);
    *((void *)this + 1) = 0;
  }
  nlp::BurstTrieCreateMutable((nlp *)v3);
  *((void *)this + 1) = v4;
  nlp::CFScopedPtr<__CFURL const*>::reset((const void **)this + 7, 0);
  nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)this + 2, 0);
  nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)this + 3, 0);
  nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)this + 4, 0);
  nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)this + 8, 0);
  nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)this + 9, 0);
  nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)this + 10, 0);
  std::__tree<std::string>::destroy((uint64_t)this + 112, *((char **)this + 15));
  *((void *)this + 14) = (char *)this + 120;
  *((void *)this + 16) = 0;
  *((void *)this + 15) = 0;
  std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy((uint64_t)this + 136, *((char **)this + 18));
  *((void *)this + 17) = (char *)this + 144;
  *((void *)this + 19) = 0;
  *((void *)this + 18) = 0;
  std::__tree<std::string>::destroy((uint64_t)this + 160, *((char **)this + 21));
  *((void *)this + 2nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = (char *)this + 168;
  *((void *)this + 22) = 0;
  *((void *)this + 21) = 0;
  std::__tree<unsigned short>::destroy((uint64_t)this + 184, *((void **)this + 24));
  *((void *)this + 23) = (char *)this + 192;
  *((void *)this + 25) = 0;
  *((void *)this + 24) = 0;
  std::__tree<std::__value_type<unsigned short,std::set<std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<std::string>>>>::destroy((uint64_t)this + 208, *((void **)this + 27));
  *((void *)this + 26) = (char *)this + 216;
  *((void *)this + 27) = 0;
  CFSetRef v5 = (void *)*((void *)this + 30);
  *((void *)this + 28) = 0;
  std::__tree<std::__value_type<unsigned short,std::set<std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<std::string>>>>::destroy((uint64_t)this + 232, v5);
  *((void *)this + 29) = (char *)this + 240;
  *((void *)this + 3nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = 0;
  *((void *)this + 31) = 0;
  std::__tree<std::__value_type<unsigned short,std::set<std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<std::string>>>>::destroy((uint64_t)this + 256, *((void **)this + 33));
  *((void *)this + 33) = 0;
  *((void *)this + 34) = 0;
  *((void *)this + 32) = (char *)this + 264;
  std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::destroy((uint64_t)this + 280, *((void **)this + 36));
  *((void *)this + 36) = 0;
  *((void *)this + 37) = 0;
  *((void *)this + 35) = (char *)this + 288;
  std::__tree<unsigned short>::destroy((uint64_t)this + 304, *((void **)this + 39));
  *((void *)this + 39) = 0;
  *((void *)this + 4nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = 0;
  *((void *)this + 38) = (char *)this + 312;
  std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::string>>>>::destroy((uint64_t)this + 328, *((void **)this + 42));
  *((void *)this + 42) = 0;
  *((void *)this + 43) = 0;
  *((void *)this + 41) = (char *)this + 336;
  std::__tree<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>>>::destroy((uint64_t)this + 352, *((void **)this + 45));
  *((void *)this + 45) = 0;
  *((void *)this + 46) = 0;
  *((void *)this + 44) = (char *)this + 360;
  std::__tree<std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>>>::destroy((uint64_t)this + 376, *((void **)this + 48));
  *((void *)this + 48) = 0;
  *((void *)this + 49) = 0;
  *((void *)this + 47) = (char *)this + 384;
  std::__tree<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>>>::destroy((uint64_t)this + 424, *((void **)this + 54));
  *((void *)this + 54) = 0;
  *((void *)this + 55) = 0;
  *((void *)this + 53) = (char *)this + 432;
  std::__tree<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>>>::destroy((uint64_t)this + 448, *((void **)this + 57));
  *((void *)this + 57) = 0;
  *((void *)this + 58) = 0;
  *((void *)this + 56) = (char *)this + 456;
  std::__tree<std::__value_type<unsigned short,std::map<std::string,std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<std::string,std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<std::string,std::string>>>>::destroy((uint64_t)this + 472, *((void **)this + 60));
  *((void *)this + 6nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = 0;
  *((void *)this + 61) = 0;
  *((void *)this + 59) = (char *)this + 480;
  std::__tree<unsigned short>::destroy((uint64_t)this + 496, *((void **)this + 63));
  *((void *)this + 63) = 0;
  *((void *)this + 64) = 0;
  *((void *)this + 62) = (char *)this + 504;
  std::__tree<unsigned short>::destroy((uint64_t)this + 520, *((void **)this + 66));
  *((void *)this + 66) = 0;
  *((void *)this + 67) = 0;
  *((void *)this + 65) = (char *)this + 528;
  std::__tree<unsigned short>::destroy((uint64_t)this + 544, *((void **)this + 69));
  *((void *)this + 69) = 0;
  *((void *)this + 7nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = 0;
  *((void *)this + 68) = (char *)this + 552;
  std::__tree<unsigned short>::destroy((uint64_t)this + 568, *((void **)this + 72));
  *((void *)this + 72) = 0;
  *((void *)this + 73) = 0;
  *((void *)this + 71) = (char *)this + 576;
  std::__tree<unsigned short>::destroy((uint64_t)this + 592, *((void **)this + 75));
  *((void *)this + 75) = 0;
  *((void *)this + 76) = 0;
  *((void *)this + 74) = (char *)this + 600;
  std::__tree<unsigned short>::destroy((uint64_t)this + 616, *((void **)this + 78));
  *((void *)this + 78) = 0;
  *((void *)this + 79) = 0;
  *((void *)this + 77) = (char *)this + 624;
  std::__tree<unsigned short>::destroy((uint64_t)this + 640, *((void **)this + 81));
  *((void *)this + 81) = 0;
  *((void *)this + 82) = 0;
  *((void *)this + 8nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = (char *)this + 648;
  std::__tree<unsigned short>::destroy((uint64_t)this + 664, *((void **)this + 84));
  *((void *)this + 84) = 0;
  *((void *)this + 85) = 0;
  *((void *)this + 83) = (char *)this + 672;
  std::__tree<unsigned short>::destroy((uint64_t)this + 688, *((void **)this + 87));
  *((void *)this + 87) = 0;
  *((void *)this + 88) = 0;
  *((void *)this + 86) = (char *)this + 696;
  std::__tree<unsigned short>::destroy((uint64_t)this + 712, *((void **)this + 90));
  *((void *)this + 9nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = 0;
  *((void *)this + 91) = 0;
  *((void *)this + 89) = (char *)this + 720;
  std::__tree<unsigned short>::destroy((uint64_t)this + 736, *((void **)this + 93));
  *((void *)this + 93) = 0;
  *((void *)this + 94) = 0;
  *((void *)this + 92) = (char *)this + 744;
  std::__tree<unsigned short>::destroy((uint64_t)this + 760, *((void **)this + 96));
  *((void *)this + 95) = (char *)this + 768;
  *((void *)this + 97) = 0;
  *((void *)this + 96) = 0;
  std::__tree<unsigned short>::destroy((uint64_t)this + 832, *((void **)this + 105));
  *((void *)this + 104) = (char *)this + 840;
  *((void *)this + 106) = 0;
  *((void *)this + 105) = 0;
  std::__tree<unsigned short>::destroy((uint64_t)this + 784, *((void **)this + 99));
  *((void *)this + 98) = (char *)this + 792;
  *((void *)this + 10nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = 0;
  *((void *)this + 99) = 0;
  std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::map<unsigned short,float>>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::map<unsigned short,float>>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::map<unsigned short,float>>>>>::destroy((uint64_t)this + 856, *((void **)this + 108));
  *((void *)this + 107) = (char *)this + 864;
  *((void *)this + 109) = 0;
  *((void *)this + 108) = 0;
  std::string::basic_string[abi:ne180100]<0>(v34, kQPSymbolNone[0]);
  QP::ParserGrammar::addSymbol((uint64_t)this, (uint64_t)v34);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v32, kQPSymbolRoot[0]);
  QP::ParserGrammar::addSymbol((uint64_t)this, (uint64_t)v32);
  if (v33 < 0) {
    operator delete(v32[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v30, kQPSymbolTerminal[0]);
  QP::ParserGrammar::addSymbol((uint64_t)this, (uint64_t)v30);
  if (v31 < 0) {
    operator delete(v30[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v28, kQPSymbolAirline[0]);
  QP::ParserGrammar::addSymbol((uint64_t)this, (uint64_t)v28);
  if (v29 < 0) {
    operator delete(v28[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v26, kQPSymbolAirport[0]);
  QP::ParserGrammar::addSymbol((uint64_t)this, (uint64_t)v26);
  if (v27 < 0) {
    operator delete(v26[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v24, kQPSymbolAirportCode[0]);
  QP::ParserGrammar::addSymbol((uint64_t)this, (uint64_t)v24);
  if (v25 < 0) {
    operator delete(v24[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, kQPSymbolAppName[0]);
  QP::ParserGrammar::addSymbol((uint64_t)this, (uint64_t)__p);
  if (v23 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v20, kQPSymbolBundle[0]);
  QP::ParserGrammar::addSymbol((uint64_t)this, (uint64_t)v20);
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v18, kQPSymbolCities[0]);
  QP::ParserGrammar::addSymbol((uint64_t)this, (uint64_t)v18);
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v16, kQPSymbolField[0]);
  QP::ParserGrammar::addSymbol((uint64_t)this, (uint64_t)v16);
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v14, kQPSymbolFlightCode[0]);
  QP::ParserGrammar::addSymbol((uint64_t)this, (uint64_t)v14);
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v12, kQPSymbolPerson[0]);
  QP::ParserGrammar::addSymbol((uint64_t)this, (uint64_t)v12);
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v10, kQPSymbolLocation[0]);
  QP::ParserGrammar::addSymbol((uint64_t)this, (uint64_t)v10);
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, kQPSymbolActionDefault[0]);
  QP::ParserGrammar::addSymbol((uint64_t)this, (uint64_t)v8);
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, kQPSymbolDefault);
  QP::ParserGrammar::addSymbol((uint64_t)this, (uint64_t)v6);
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::mutex::unlock(v2);
}

void sub_224DA35D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::mutex::unlock(v63);
  _Unwind_Resume(a1);
}

void QP::ParserGrammar::~ParserGrammar(QP::ParserGrammar *this)
{
  int v2 = (char *)*((void *)this + 1);
  if (v2) {
    nlp::BurstTrieRelease(v2);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 880));
  std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::map<unsigned short,float>>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::map<unsigned short,float>>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::map<unsigned short,float>>>>>::destroy((uint64_t)this + 856, *((void **)this + 108));
  std::__tree<unsigned short>::destroy((uint64_t)this + 832, *((void **)this + 105));
  std::__tree<unsigned short>::destroy((uint64_t)this + 808, *((void **)this + 102));
  std::__tree<unsigned short>::destroy((uint64_t)this + 784, *((void **)this + 99));
  std::__tree<unsigned short>::destroy((uint64_t)this + 760, *((void **)this + 96));
  std::__tree<unsigned short>::destroy((uint64_t)this + 736, *((void **)this + 93));
  std::__tree<unsigned short>::destroy((uint64_t)this + 712, *((void **)this + 90));
  std::__tree<unsigned short>::destroy((uint64_t)this + 688, *((void **)this + 87));
  std::__tree<unsigned short>::destroy((uint64_t)this + 664, *((void **)this + 84));
  std::__tree<unsigned short>::destroy((uint64_t)this + 640, *((void **)this + 81));
  std::__tree<unsigned short>::destroy((uint64_t)this + 616, *((void **)this + 78));
  std::__tree<unsigned short>::destroy((uint64_t)this + 592, *((void **)this + 75));
  std::__tree<unsigned short>::destroy((uint64_t)this + 568, *((void **)this + 72));
  std::__tree<unsigned short>::destroy((uint64_t)this + 544, *((void **)this + 69));
  std::__tree<unsigned short>::destroy((uint64_t)this + 520, *((void **)this + 66));
  std::__tree<unsigned short>::destroy((uint64_t)this + 496, *((void **)this + 63));
  std::__tree<std::__value_type<unsigned short,std::map<std::string,std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<std::string,std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<std::string,std::string>>>>::destroy((uint64_t)this + 472, *((void **)this + 60));
  std::__tree<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>>>::destroy((uint64_t)this + 448, *((void **)this + 57));
  std::__tree<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>>>::destroy((uint64_t)this + 424, *((void **)this + 54));
  std::__tree<std::__value_type<std::string,std::set<unsigned short>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned short>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned short>>>>::destroy((uint64_t)this + 400, *((void **)this + 51));
  std::__tree<std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>>>::destroy((uint64_t)this + 376, *((void **)this + 48));
  std::__tree<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>>>::destroy((uint64_t)this + 352, *((void **)this + 45));
  std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::string>>>>::destroy((uint64_t)this + 328, *((void **)this + 42));
  std::__tree<unsigned short>::destroy((uint64_t)this + 304, *((void **)this + 39));
  std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::destroy((uint64_t)this + 280, *((void **)this + 36));
  std::__tree<std::__value_type<unsigned short,std::set<std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<std::string>>>>::destroy((uint64_t)this + 256, *((void **)this + 33));
  std::__tree<std::__value_type<unsigned short,std::set<std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<std::string>>>>::destroy((uint64_t)this + 232, *((void **)this + 30));
  std::__tree<std::__value_type<unsigned short,std::set<std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<std::string>>>>::destroy((uint64_t)this + 208, *((void **)this + 27));
  std::__tree<unsigned short>::destroy((uint64_t)this + 184, *((void **)this + 24));
  std::__tree<std::string>::destroy((uint64_t)this + 160, *((char **)this + 21));
  std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy((uint64_t)this + 136, *((char **)this + 18));
  std::__tree<std::string>::destroy((uint64_t)this + 112, *((char **)this + 15));
  if (*((char *)this + 111) < 0) {
    operator delete(*((void **)this + 11));
  }
  nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)this + 10, 0);
  nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)this + 9, 0);
  nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)this + 8, 0);
  nlp::CFScopedPtr<__CFURL const*>::reset((const void **)this + 7, 0);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)this + 4, 0);
  nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)this + 3, 0);
  nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)this + 2, 0);
  nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)this, 0);
}

void QP::ParserGrammar::loadParserGrammarResource(QP::ParserGrammar *this, CFURLRef anURL, __CFError **a3, __CFError **a4)
{
  int v4 = (int)a3;
  if (anURL)
  {
    char v7 = (CFURLRef *)((char *)this + 56);
    if (*((void *)this + 7))
    {
      CFStringRef v8 = CFURLGetString(anURL);
      CFStringRef v9 = CFURLGetString(*v7);
      if (CFStringsAreEqual(v8, v9)) {
        return;
      }
    }
    CFTypeRef v10 = CFRetain(anURL);
    nlp::CFScopedPtr<__CFURL const*>::reset((const void **)this + 7, v10);
  }
  QP::ParserGrammar::loadResources(this, v4, a3, a4);
}

void QP::ParserGrammar::loadResources(QP::ParserGrammar *this, int a2, __CFError **a3, __CFError **a4)
{
  v72[1] = *(CFErrorRef *)MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)this + 5);
  if (!v4) {
    return;
  }
  if (!*(void *)(v4 + 176)) {
    return;
  }
  double v6 = (nlp *)*((void *)this + 7);
  if (!v6) {
    return;
  }
  v72[0] = 0;
  CFPropertyListRef DictionaryWithContentsOfURL = nlp::createDictionaryWithContentsOfURL(v6, v72, a3, a4);
  v71[1] = DictionaryWithContentsOfURL;
  if (!v72[0])
  {
    if (!DictionaryWithContentsOfURL) {
      goto LABEL_6;
    }
    QP::ParserGrammar::loadUTIs(this, (CFDictionaryRef)DictionaryWithContentsOfURL, @"com.apple.query.parser");
    QP::ParserGrammar::loadFileExtensions(this, (CFDictionaryRef)DictionaryWithContentsOfURL, @"com.apple.query.parser");
    QP::ParserGrammar::loadCFG(this, (CFDictionaryRef)DictionaryWithContentsOfURL, *(const __CFString **)(*((void *)this + 5) + 176));
    QP::ParserGrammar::loadAttributes(this, (CFDictionaryRef)DictionaryWithContentsOfURL, *(const __CFString **)(*((void *)this + 5) + 176));
    QP::ParserGrammar::loadValues(this, (CFDictionaryRef)DictionaryWithContentsOfURL, *(const __CFString **)(*((void *)this + 5) + 176));
    QP::ParserGrammar::loadCategories(this, (CFDictionaryRef)DictionaryWithContentsOfURL);
    QP::ParserGrammar::loadTokens((const void **)this, (CFDictionaryRef)DictionaryWithContentsOfURL, *(const __CFString **)(*((void *)this + 5) + 176));
    QP::ParserGrammar::loadProperties((uint64_t **)this, (CFDictionaryRef)DictionaryWithContentsOfURL, *(const __CFString **)(*((void *)this + 5) + 176));
    QP::ParserGrammar::loadActions(this, (CFDictionaryRef)DictionaryWithContentsOfURL, *(const __CFString **)(*((void *)this + 5) + 176));
    QP::ParserGrammar::loadIntentActions(this, (CFDictionaryRef)DictionaryWithContentsOfURL, *(const __CFString **)(*((void *)this + 5) + 176));
    QP::ParserGrammar::loadU2ArgActions(this, (CFDictionaryRef)DictionaryWithContentsOfURL, *(const __CFString **)(*((void *)this + 5) + 176));
    QP::ParserGrammar::loadLLMArgsMap(this, (CFDictionaryRef)DictionaryWithContentsOfURL, *(const __CFString **)(*((void *)this + 5) + 176));
    QP::ParserGrammar::loadTranslations((const void **)this, (CFDictionaryRef)DictionaryWithContentsOfURL, *(const __CFString **)(*((void *)this + 5) + 176));
    QP::ParserGrammar::loadIgnoredTerms(this, (CFDictionaryRef)DictionaryWithContentsOfURL, *(const __CFString **)(*((void *)this + 5) + 176));
    QP::ParserGrammar::loadReplacements(this, (CFDictionaryRef)DictionaryWithContentsOfURL, *(const __CFString **)(*((void *)this + 5) + 176));
    size_t v18 = (void *)*((void *)this + 5);
    BundleWithIdentifier = (__CFString *)v18[24];
    if (BundleWithIdentifier)
    {
      BundleWithIdentifier = (__CFString *)CFBundleGetBundleWithIdentifier(BundleWithIdentifier);
      unsigned int v58 = BundleWithIdentifier;
      size_t v18 = (void *)*((void *)this + 5);
    }
    else
    {
      unsigned int v58 = 0;
    }
    if (v18[1] == 2) {
      CFStringRef v20 = @"Mail";
    }
    else {
      CFStringRef v20 = @"Search";
    }
    CFStringRef v21 = (const __CFString *)v18[17];
    uint64_t v56 = (QP::ParserGrammar *)QP::ParserGrammar::fallbackCompletionKeys((QP::ParserGrammar *)BundleWithIdentifier, v20);
    CFArrayRef v57 = (CFArrayRef)QP::ParserGrammar::fallbackTokenKeys(v56, v20);
    if (!v56 || !v57) {
      goto LABEL_78;
    }
    CFPropertyListRef v54 = DictionaryWithContentsOfURL;
    CFAllocatorRef v22 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    v71[0] = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable(v22, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    int v53 = a2;
    uint64_t v69 = CFDictionaryCreateMutable(v22, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    CFIndex Count = CFArrayGetCount(v56);
    unint64_t v23 = (unint64_t)v58;
    if (Count < 1) {
      goto LABEL_72;
    }
    CFIndex v24 = 0;
    while (1)
    {
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v56, v24);
      CFStringRef v68 = copyLocalizedStringForDomain(v23, v20, @"Completions", ValueAtIndex, v21);
      CFStringRef v67 = copyLocalizedStringForDomain(v23, v20, @"Suggestions", ValueAtIndex, v21);
      CFStringRef v26 = copyLocalizedStringForDomain(v23, v20, @"Tokens", ValueAtIndex, v21);
      CFStringRef v66 = v26;
      if (v68)
      {
        if (v67)
        {
          CFDictionaryAddValue((CFMutableDictionaryRef)v71[0], ValueAtIndex, v67);
          if (v66) {
            CFDictionarySetValue(v69, ValueAtIndex, v66);
          }
          CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(v22, v68, @" | ");
          CFArrayRef v65 = ArrayBySeparatingStrings;
          CFIndex v28 = CFArrayGetCount(ArrayBySeparatingStrings);
          if (v28)
          {
            unsigned int valuePtr = v24 + 1;
            CFNumberRef v29 = CFNumberCreate(v22, kCFNumberIntType, &valuePtr);
            CFNumberRef v63 = v29;
            CFDictionarySetValue(Mutable, v29, ValueAtIndex);
            if (v28 >= 1)
            {
              CFIndex v30 = 0;
              while (1)
              {
                CFStringRef v31 = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, v30);
                CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(v22, 0, v31);
                CFMutableStringRef v62 = MutableCopy;
                CFStringLowercase(MutableCopy, *(CFLocaleRef *)(*((void *)this + 5) + 104));
                v73.CFIndex length = CFStringGetLength(MutableCopy);
                v73.CFIndex location = 0;
                CFStringFindAndReplace(MutableCopy, @"’", @"'", v73, 0);
                QP::getUTF8StringFromCFString(MutableCopy, &p_isa);
                char v33 = (v61 & 0x80u) == 0 ? (void **)&p_isa : p_isa;
                int v34 = (v61 & 0x80u) == 0 ? v61 : v60;
                nlp::BurstTrieAdd(*((void *)this + 1), (uint64_t)v33, v34, valuePtr);
                if (((char)v61 & 0x80000000) == 0) {
                  break;
                }
                operator delete(p_isa);
                if (MutableCopy) {
                  goto LABEL_55;
                }
LABEL_56:
                if (v28 == ++v30) {
                  goto LABEL_57;
                }
              }
              if (!MutableCopy) {
                goto LABEL_56;
              }
LABEL_55:
              CFRelease(MutableCopy);
              goto LABEL_56;
            }
LABEL_57:
            if (v29) {
              CFRelease(v29);
            }
          }
          if (ArrayBySeparatingStrings) {
            CFRelease(ArrayBySeparatingStrings);
          }
          CFStringRef v26 = v66;
          unint64_t v23 = (unint64_t)v58;
        }
      }
      else if (!v67)
      {
        nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v66, 0);
        nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v67, 0);
        nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v68, 0);
LABEL_72:
        CFDictionaryRef Copy = CFDictionaryCreateCopy(v22, Mutable);
        nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)this + 2, Copy);
        CFDictionaryRef v36 = CFDictionaryCreateCopy(v22, (CFDictionaryRef)v71[0]);
        nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)this + 3, v36);
        CFIndex v37 = CFArrayGetCount(v57);
        if (v37 >= 1)
        {
          for (CFIndex i = 0; i != v37; ++i)
          {
            CFStringRef v39 = (const __CFString *)CFArrayGetValueAtIndex(v57, i);
            CFStringRef v40 = copyLocalizedStringForDomain((unint64_t)v58, v20, @"Tokens", v39, v21);
            p_isa = &v40->isa;
            if (v40)
            {
              CFDictionaryAddValue(v69, v39, v40);
              CFRelease(v40);
            }
          }
        }
        CFDictionaryRef v41 = CFDictionaryCreateCopy(v22, v69);
        nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)this + 4, v41);
        nlp::CFScopedPtr<__CFDictionary *>::reset((const void **)&v69, 0);
        nlp::CFScopedPtr<__CFDictionary *>::reset((const void **)&Mutable, 0);
        nlp::CFScopedPtr<__CFDictionary *>::reset(v71, 0);
        CFPropertyListRef DictionaryWithContentsOfURL = v54;
        LOBYTE(a2) = v53;
LABEL_78:
        if ((a2 & 1) == 0)
        {
          QP::ParserGrammar::loadSuggestions(this, (CFDictionaryRef)DictionaryWithContentsOfURL, *(const __CFString **)(*((void *)this + 5) + 176));
          QP::ParserGrammar::loadCompletions(this, (CFDictionaryRef)DictionaryWithContentsOfURL, *(const __CFString **)(*((void *)this + 5) + 176));
        }
        uint64_t v42 = *((void *)this + 5);
        CFDictionaryRef v43 = *(const __CFDictionary **)(v42 + 224);
        if (!v43) {
          goto LABEL_6;
        }
        CFIndex v44 = CFDictionaryGetCount(*(CFDictionaryRef *)(v42 + 224));
        MEMORY[0x270FA5388](v44);
        uint64_t v46 = (const void **)&v52[-((v45 + 15) & 0xFFFFFFFFFFFFFFF0)];
        size_t v47 = v45 >= 0x200 ? 512 : v45;
        bzero(&v52[-((v45 + 15) & 0xFFFFFFFFFFFFFFF0)], v47);
        CFDictionaryGetKeysAndValues(v43, v46, 0);
        if (v44 < 1) {
          goto LABEL_6;
        }
        CFAllocatorRef v48 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        while (2)
        {
          CFMutableStringRef v49 = CFStringCreateMutableCopy(v48, 0, (CFStringRef)*v46);
          v71[0] = v49;
          CFStringLowercase(v49, *(CFLocaleRef *)(*((void *)this + 5) + 104));
          QP::getUTF8StringFromCFString(v49, &p_isa);
          if ((v61 & 0x80u) == 0) {
            p_p_isa = &p_isa;
          }
          else {
            p_p_isa = (void ***)p_isa;
          }
          if ((v61 & 0x80u) == 0) {
            int v51 = v61;
          }
          else {
            int v51 = v60;
          }
          nlp::BurstTrieAdd(*((void *)this + 1), (uint64_t)p_p_isa, v51, 1);
          if ((char)v61 < 0)
          {
            operator delete(p_isa);
            if (!v49) {
              goto LABEL_97;
            }
          }
          else if (!v49)
          {
LABEL_97:
            ++v46;
            if (!--v44) {
              goto LABEL_6;
            }
            continue;
          }
          break;
        }
        CFRelease(v49);
        goto LABEL_97;
      }
      if (v26) {
        CFRelease(v26);
      }
      if (v67) {
        CFRelease(v67);
      }
      if (v68) {
        CFRelease(v68);
      }
      if (++v24 == Count) {
        goto LABEL_72;
      }
    }
  }
  CFRelease(v72[0]);
LABEL_6:
  CFStringRef v9 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  CFTypeRef v10 = v9;
  uint64_t v11 = *((void *)this + 5);
  char v12 = *(const void **)(v11 + 176);
  if (v12)
  {
    CFDictionarySetValue(v9, kQPQueryParserOptionContextIdentifierKey, v12);
    uint64_t v11 = *((void *)this + 5);
  }
  char v13 = *(const void **)(v11 + 104);
  if (v13)
  {
    CFDictionarySetValue(v10, kQPQueryParserOptionLocaleKey, v13);
    uint64_t v11 = *((void *)this + 5);
  }
  uint64_t v14 = *(const void **)(v11 + 160);
  if (v14)
  {
    CFDictionarySetValue(v10, kQPQueryParserOptionPreferredLanguagesKey, v14);
    uint64_t v11 = *((void *)this + 5);
  }
  char v15 = *(const void **)(v11 + 88);
  if (v15)
  {
    CFDictionarySetValue(v10, kQPQueryParserOptionReferenceCalendarKey, v15);
    uint64_t v11 = *((void *)this + 5);
  }
  CFIndex v16 = *(const void **)(v11 + 72);
  if (v16)
  {
    CFDictionarySetValue(v10, kQPQueryParserOptionReferenceDateKey, v16);
    uint64_t v11 = *((void *)this + 5);
  }
  char v17 = (const void **)MEMORY[0x263EFFB40];
  if (*(unsigned char *)(v11 + 23))
  {
    CFDictionarySetValue(v10, kQPQueryParserOptionIgnoreFutureDatesKey, (const void *)*MEMORY[0x263EFFB40]);
    uint64_t v11 = *((void *)this + 5);
  }
  if (*(unsigned char *)(v11 + 24))
  {
    CFDictionarySetValue(v10, kQPQueryParserOptionIgnorePastDatesKey, *v17);
    uint64_t v11 = *((void *)this + 5);
  }
  if (*(unsigned char *)(v11 + 26))
  {
    CFDictionarySetValue(v10, kQPQueryParserOptionResolveDatesInFutureKey, *v17);
    uint64_t v11 = *((void *)this + 5);
  }
  if (*(unsigned char *)(v11 + 27)) {
    CFDictionarySetValue(v10, kQPQueryParserOptionResolveDatesInPastKey, *v17);
  }
  nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)this, v10);
  if (DictionaryWithContentsOfURL) {
    CFRelease(DictionaryWithContentsOfURL);
  }
}

void sub_224DA42C8(_Unwind_Exception *a1)
{
  nlp::CFScopedPtr<__CFDictionary *>::reset((const void **)(v1 - 128), 0);
  nlp::CFScopedPtr<__CFDictionary *>::reset((const void **)(v1 - 120), 0);
  nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)(v1 - 112), 0);
  _Unwind_Resume(a1);
}

uint64_t QP::ParserGrammar::loadCFG(QP::ParserGrammar *this, CFDictionaryRef theDict, const __CFString *key)
{
  valuePtr[1] = *(double *)MEMORY[0x263EF8340];
  uint64_t result = CFDictionaryContainsKey(theDict, key);
  if (result)
  {
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, key);
    uint64_t result = CFDictionaryContainsKey(Value, @"CFG");
    if (result)
    {
      CFDictionaryRef v8 = (const __CFDictionary *)CFDictionaryGetValue(Value, @"CFG");
      uint64_t v28 = (uint64_t)&v28;
      CFIndex Count = CFDictionaryGetCount(v8);
      MEMORY[0x270FA5388](Count);
      uint64_t v11 = (const void **)((char *)&v28 - v10);
      if (v9 >= 0x200) {
        size_t v12 = 512;
      }
      else {
        size_t v12 = v9;
      }
      bzero((char *)&v28 - v10, v12);
      CFNumberRef v29 = v11;
      CFDictionaryRef v30 = v8;
      CFDictionaryGetKeysAndValues(v8, v11, 0);
      if (Count >= 1)
      {
        uint64_t v13 = 0;
        do
        {
          uint64_t v33 = v13;
          CFStringRef v14 = (const __CFString *)v29[v13];
          CFDictionaryRef v35 = (CFDictionaryRef)CFDictionaryGetValue(v30, v14);
          CFIndex v34 = CFDictionaryGetCount(v35);
          uint64_t v32 = &v28;
          MEMORY[0x270FA5388](v34);
          CFIndex v16 = (const void **)((char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
          if (v15 >= 0x200) {
            size_t v17 = 512;
          }
          else {
            size_t v17 = v15;
          }
          bzero((char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v17);
          CFDictionaryGetKeysAndValues(v35, v16, 0);
          if (v34 >= 1)
          {
            for (uint64_t i = 0; i != v34; ++i)
            {
              CFStringRef v19 = (const __CFString *)v16[i];
              CFDictionaryRef v20 = (const __CFDictionary *)CFDictionaryGetValue(v35, v19);
              CFIndex v21 = CFDictionaryGetCount(v20);
              MEMORY[0x270FA5388](v21);
              unint64_t v23 = (const void **)((char *)&v28 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
              if (v22 >= 0x200) {
                size_t v24 = 512;
              }
              else {
                size_t v24 = v22;
              }
              bzero((char *)&v28 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0), v24);
              CFDictionaryGetKeysAndValues(v20, v23, 0);
              if (v21 >= 1)
              {
                do
                {
                  CFStringRef v25 = (const __CFString *)*v23;
                  CFNumberRef v26 = (const __CFNumber *)CFDictionaryGetValue(v20, *v23);
                  valuePtr[0] = 0.0;
                  CFNumberGetValue(v26, kCFNumberDoubleType, valuePtr);
                  QP::getUTF8StringFromCFString(v14, v40);
                  QP::getUTF8StringFromCFString(v19, v38);
                  QP::getUTF8StringFromCFString(v25, v36);
                  float v27 = valuePtr[0];
                  QP::ParserGrammar::addRule((uint64_t)this, (unsigned __int8 *)v40, (unsigned __int8 *)v38, (unsigned __int8 *)v36, v27);
                  if (v37 < 0) {
                    operator delete(v36[0]);
                  }
                  if (v39 < 0) {
                    operator delete(v38[0]);
                  }
                  if (v41 < 0) {
                    operator delete(v40[0]);
                  }
                  ++v23;
                  --v21;
                }
                while (v21);
              }
            }
          }
          uint64_t v13 = v33 + 1;
        }
        while (v33 + 1 != Count);
      }
      return 1;
    }
  }
  return result;
}

void sub_224DA4788(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 153) < 0) {
    operator delete(*(void **)(v1 - 176));
  }
  if (*(char *)(v1 - 129) < 0) {
    operator delete(*(void **)(v1 - 152));
  }
  if (*(char *)(v1 - 105) < 0) {
    operator delete(*(void **)(v1 - 128));
  }
  _Unwind_Resume(exception_object);
}

void QP::ParserGrammar::addRule(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4, float a5)
{
  unsigned int SymbolID = QP::ParserGrammar::getSymbolID(a1, (uint64_t)a2);
  unsigned int v11 = QP::ParserGrammar::getSymbolID(a1, (uint64_t)a3);
  unsigned int v12 = QP::ParserGrammar::getSymbolID(a1, (uint64_t)a4);
  uint64_t v13 = (uint64_t *)(a1 + 864);
  uint64_t v14 = *(void *)(a1 + 864);
  if (!v14) {
    goto LABEL_12;
  }
  uint64_t v15 = a1 + 864;
  uint64_t v16 = *(void *)(a1 + 864);
  do
  {
    unsigned int v17 = *(unsigned __int16 *)(v16 + 32);
    BOOL v18 = v17 >= v11;
    if (v17 >= v11) {
      CFStringRef v19 = (uint64_t *)v16;
    }
    else {
      CFStringRef v19 = (uint64_t *)(v16 + 8);
    }
    if (v18) {
      uint64_t v15 = v16;
    }
    uint64_t v16 = *v19;
  }
  while (*v19);
  if ((uint64_t *)v15 == v13 || v11 < *(unsigned __int16 *)(v15 + 32))
  {
LABEL_12:
    int v53 = 0;
    uint64_t v54 = 0;
    __int16 v52 = &v53;
    LOWORD(v55) = v11;
    CFArrayRef v57 = 0;
    uint64_t v58 = 0;
    uint64_t v56 = &v57;
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__emplace_unique_key_args<unsigned short,std::pair<unsigned short,std::set<unsigned short>>>(a1 + 856, (unsigned __int16 *)&v55, (uint64_t)&v55);
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::destroy((uint64_t)&v56, v57);
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::destroy((uint64_t)&v52, v53);
    uint64_t v14 = *v13;
  }
  if (!v14) {
    goto LABEL_24;
  }
  uint64_t v20 = a1 + 864;
  uint64_t v21 = v14;
  do
  {
    unsigned int v22 = *(unsigned __int16 *)(v21 + 32);
    BOOL v23 = v22 >= v11;
    if (v22 >= v11) {
      size_t v24 = (uint64_t *)v21;
    }
    else {
      size_t v24 = (uint64_t *)(v21 + 8);
    }
    if (v23) {
      uint64_t v20 = v21;
    }
    uint64_t v21 = *v24;
  }
  while (*v24);
  if ((uint64_t *)v20 == v13 || v11 < *(unsigned __int16 *)(v20 + 32)) {
LABEL_24:
  }
    uint64_t v20 = a1 + 864;
  uint64_t v27 = *(void *)(v20 + 48);
  uint64_t v25 = v20 + 48;
  uint64_t v26 = v27;
  if (!v27) {
    goto LABEL_36;
  }
  uint64_t v28 = v25;
  do
  {
    unsigned int v29 = *(unsigned __int16 *)(v26 + 32);
    BOOL v30 = v29 >= SymbolID;
    if (v29 >= SymbolID) {
      CFStringRef v31 = (uint64_t *)v26;
    }
    else {
      CFStringRef v31 = (uint64_t *)(v26 + 8);
    }
    if (v30) {
      uint64_t v28 = v26;
    }
    uint64_t v26 = *v31;
  }
  while (*v31);
  if (v28 == v25 || SymbolID < *(unsigned __int16 *)(v28 + 32)) {
LABEL_36:
  }
    uint64_t v28 = v25;
  if (!v14) {
    goto LABEL_48;
  }
  uint64_t v32 = a1 + 864;
  uint64_t v33 = v14;
  do
  {
    unsigned int v34 = *(unsigned __int16 *)(v33 + 32);
    BOOL v35 = v34 >= v11;
    if (v34 >= v11) {
      CFDictionaryRef v36 = (uint64_t *)v33;
    }
    else {
      CFDictionaryRef v36 = (uint64_t *)(v33 + 8);
    }
    if (v35) {
      uint64_t v32 = v33;
    }
    uint64_t v33 = *v36;
  }
  while (*v36);
  if ((uint64_t *)v32 == v13 || v11 < *(unsigned __int16 *)(v32 + 32)) {
LABEL_48:
  }
    uint64_t v32 = a1 + 864;
  if (v28 == v32 + 48)
  {
    if (!v14) {
      goto LABEL_63;
    }
    uint64_t v37 = a1 + 864;
    do
    {
      unsigned int v38 = *(unsigned __int16 *)(v14 + 32);
      BOOL v39 = v38 >= v11;
      if (v38 >= v11) {
        CFStringRef v40 = (uint64_t *)v14;
      }
      else {
        CFStringRef v40 = (uint64_t *)(v14 + 8);
      }
      if (v39) {
        uint64_t v37 = v14;
      }
      uint64_t v14 = *v40;
    }
    while (*v40);
    if ((uint64_t *)v37 == v13 || v11 < *(unsigned __int16 *)(v37 + 32)) {
LABEL_63:
    }
      uint64_t v37 = a1 + 864;
    int v53 = 0;
    uint64_t v54 = 0;
    __int16 v52 = &v53;
    LOWORD(v55) = SymbolID;
    CFArrayRef v57 = 0;
    uint64_t v58 = 0;
    uint64_t v56 = &v57;
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__emplace_unique_key_args<unsigned short,std::pair<unsigned short,std::set<unsigned short>>>(v37 + 40, (unsigned __int16 *)&v55, (uint64_t)&v55);
    std::__tree<unsigned short>::destroy((uint64_t)&v56, v57);
    std::__tree<unsigned short>::destroy((uint64_t)&v52, v53);
    uint64_t v14 = *v13;
    if (!*v13) {
      goto LABEL_75;
    }
  }
  else if (!v14)
  {
LABEL_75:
    uint64_t v41 = a1 + 864;
    goto LABEL_76;
  }
  uint64_t v41 = a1 + 864;
  do
  {
    unsigned int v42 = *(unsigned __int16 *)(v14 + 32);
    BOOL v43 = v42 >= v11;
    if (v42 >= v11) {
      CFIndex v44 = (uint64_t *)v14;
    }
    else {
      CFIndex v44 = (uint64_t *)(v14 + 8);
    }
    if (v43) {
      uint64_t v41 = v14;
    }
    uint64_t v14 = *v44;
  }
  while (*v44);
  if ((uint64_t *)v41 == v13 || v11 < *(unsigned __int16 *)(v41 + 32)) {
    goto LABEL_75;
  }
LABEL_76:
  uint64_t v47 = *(void *)(v41 + 48);
  uint64_t v45 = v41 + 48;
  uint64_t v46 = v47;
  if (!v47) {
    goto LABEL_87;
  }
  uint64_t v48 = v45;
  do
  {
    unsigned int v49 = *(unsigned __int16 *)(v46 + 32);
    BOOL v50 = v49 >= SymbolID;
    if (v49 >= SymbolID) {
      int v51 = (uint64_t *)v46;
    }
    else {
      int v51 = (uint64_t *)(v46 + 8);
    }
    if (v50) {
      uint64_t v48 = v46;
    }
    uint64_t v46 = *v51;
  }
  while (*v51);
  if (v48 == v45 || SymbolID < *(unsigned __int16 *)(v48 + 32)) {
LABEL_87:
  }
    uint64_t v48 = v45;
  unint64_t v55 = v12 | ((unint64_t)LODWORD(a5) << 32);
  std::__tree<std::__value_type<unsigned short,float>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,float>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,float>>>::__emplace_unique_key_args<unsigned short,std::pair<unsigned short,float>>((uint64_t **)(v48 + 40), (unsigned __int16 *)&v55, (uint64_t)&v55);
  QP::ParserGrammar::setModifier(a1, a2);
  QP::ParserGrammar::setModifier(a1, a3);
  QP::ParserGrammar::setModifier(a1, a4);
}

void sub_224DA4B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  std::__tree<unsigned short>::destroy(v15, a15);
  std::__tree<unsigned short>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t QP::ParserGrammar::loadUTIs(QP::ParserGrammar *this, CFDictionaryRef theDict, const __CFString *key)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t result = CFDictionaryContainsKey(theDict, key);
  if (result)
  {
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, key);
    uint64_t result = CFDictionaryContainsKey(Value, @"UTI-CORE");
    if (result)
    {
      CFDictionaryRef v8 = (const __CFDictionary *)CFDictionaryGetValue(Value, @"UTI-CORE");
      CFIndex Count = CFDictionaryGetCount(v8);
      uint64_t v21 = (uint64_t)&v21;
      MEMORY[0x270FA5388](Count);
      unint64_t v10 = (8 * Count + 15) & 0xFFFFFFFFFFFFFFF0;
      unsigned int v11 = (char *)&v22[-1] - v10;
      if ((unint64_t)(8 * Count) >= 0x200) {
        size_t v12 = 512;
      }
      else {
        size_t v12 = 8 * Count;
      }
      bzero((char *)&v22[-1] - v10, v12);
      MEMORY[0x270FA5388](v13);
      uint64_t v14 = (char *)&v22[-1] - v10;
      bzero((char *)&v22[-1] - v10, v12);
      CFDictionaryGetKeysAndValues(v8, (const void **)((char *)&v22[-1] - v10), (const void **)((char *)&v22[-1] - v10));
      if (Count >= 1)
      {
        for (uint64_t i = 0; i != Count; ++i)
        {
          CFStringRef v16 = *(const __CFString **)&v11[8 * i];
          CFArrayRef v17 = *(const __CFArray **)&v14[8 * i];
          CFIndex v18 = CFArrayGetCount(v17);
          if (v18 >= 1)
          {
            for (CFIndex j = 0; j != v18; ++j)
            {
              CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v17, j);
              QP::getUTF8StringFromCFString(v16, v24);
              QP::getUTF8StringFromCFString(ValueAtIndex, v22);
              QP::ParserGrammar::addUTI((uint64_t)this, (uint64_t)v24, v22);
              if (v23 < 0) {
                operator delete(v22[0]);
              }
              if (v25 < 0) {
                operator delete(v24[0]);
              }
            }
          }
        }
      }
      return 1;
    }
  }
  return result;
}

void sub_224DA4D5C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 113) < 0) {
    operator delete(*(void **)(v1 - 136));
  }
  if (*(char *)(v1 - 89) < 0) {
    operator delete(*(void **)(v1 - 112));
  }
  _Unwind_Resume(exception_object);
}

uint64_t *QP::ParserGrammar::addUTI(uint64_t a1, uint64_t a2, void **a3)
{
  unsigned int SymbolID = QP::ParserGrammar::getSymbolID(a1, a2);
  unsigned int v6 = SymbolID;
  unint64_t v9 = *(uint64_t **)(a1 + 216);
  CFDictionaryRef v8 = (uint64_t **)(a1 + 216);
  char v7 = v9;
  if (!v9) {
    goto LABEL_12;
  }
  unint64_t v10 = v8;
  unsigned int v11 = v7;
  do
  {
    unsigned int v12 = *((unsigned __int16 *)v11 + 16);
    BOOL v13 = v12 >= SymbolID;
    if (v12 >= SymbolID) {
      uint64_t v14 = (uint64_t **)v11;
    }
    else {
      uint64_t v14 = (uint64_t **)(v11 + 1);
    }
    if (v13) {
      unint64_t v10 = (uint64_t **)v11;
    }
    unsigned int v11 = *v14;
  }
  while (*v14);
  if (v10 == v8 || SymbolID < *((unsigned __int16 *)v10 + 16))
  {
LABEL_12:
    v21[0] = 0;
    v21[1] = 0;
    uint64_t v20 = v21;
    unsigned __int16 v22 = SymbolID;
    v24[0] = 0;
    v24[1] = 0;
    char v23 = v24;
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__emplace_unique_key_args<unsigned short,std::pair<unsigned short,std::set<unsigned short>>>((uint64_t)(v8 - 1), &v22, (uint64_t)&v22);
    std::__tree<std::string>::destroy((uint64_t)&v23, v24[0]);
    std::__tree<std::string>::destroy((uint64_t)&v20, v21[0]);
    char v7 = *v8;
  }
  if (!v7) {
    goto LABEL_24;
  }
  uint64_t v15 = v8;
  do
  {
    unsigned int v16 = *((unsigned __int16 *)v7 + 16);
    BOOL v17 = v16 >= v6;
    if (v16 >= v6) {
      CFIndex v18 = v7;
    }
    else {
      CFIndex v18 = v7 + 1;
    }
    if (v17) {
      uint64_t v15 = (uint64_t **)v7;
    }
    char v7 = (uint64_t *)*v18;
  }
  while (*v18);
  if (v15 == v8 || v6 < *((unsigned __int16 *)v15 + 16)) {
LABEL_24:
  }
    uint64_t v15 = v8;
  return std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v15 + 5, a3, (uint64_t)a3);
}

void sub_224DA4EB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11, uint64_t a12, uint64_t a13, uint64_t a14, char *a15)
{
  std::__tree<std::string>::destroy(v15, a15);
  std::__tree<std::string>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t QP::ParserGrammar::loadLLMArgsMap(QP::ParserGrammar *this, CFDictionaryRef theDict, const __CFString *key)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  uint64_t result = CFDictionaryContainsKey(theDict, key);
  if (result)
  {
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, key);
    uint64_t result = CFDictionaryContainsKey(Value, @"LLMARGSMAP");
    if (result)
    {
      CFDictionaryRef v8 = (const __CFDictionary *)CFDictionaryGetValue(Value, @"LLMARGSMAP");
      v30[1] = v30;
      CFIndex Count = CFDictionaryGetCount(v8);
      unint64_t v9 = 8 * Count;
      MEMORY[0x270FA5388](Count);
      unint64_t v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
      if (v9 >= 0x200) {
        size_t v11 = 512;
      }
      else {
        size_t v11 = v9;
      }
      bzero((char *)v30 - v10, v11);
      MEMORY[0x270FA5388](v12);
      bzero((char *)v30 - v10, v11);
      uint64_t v32 = (char *)v30 - v10;
      CFStringRef v31 = (char *)v30 - v10;
      CFDictionaryGetKeysAndValues(v8, (const void **)((char *)v30 - v10), (const void **)((char *)v30 - v10));
      if (Count >= 1)
      {
        uint64_t v13 = 0;
        do
        {
          CFStringRef v14 = *(const __CFString **)&v32[8 * v13];
          uint64_t v35 = v13;
          CFDictionaryRef v15 = *(const __CFDictionary **)&v31[8 * v13];
          CFIndex v36 = CFDictionaryGetCount(v15);
          unsigned int v34 = v30;
          unint64_t v16 = 8 * v36;
          MEMORY[0x270FA5388](v36);
          unint64_t v17 = (v16 + 15) & 0xFFFFFFFFFFFFFFF0;
          CFIndex v18 = (char *)v30 - v17;
          if (v16 >= 0x200) {
            size_t v19 = 512;
          }
          else {
            size_t v19 = v16;
          }
          bzero((char *)v30 - v17, v19);
          MEMORY[0x270FA5388](v20);
          uint64_t v21 = (char *)v30 - v17;
          bzero((char *)v30 - v17, v19);
          CFDictionaryGetKeysAndValues(v15, (const void **)((char *)v30 - v17), (const void **)((char *)v30 - v17));
          if (v36 >= 1)
          {
            for (uint64_t i = 0; i != v36; ++i)
            {
              CFStringRef v23 = *(const __CFString **)&v18[8 * i];
              CFArrayRef v24 = *(const __CFArray **)&v21[8 * i];
              CFIndex v25 = CFArrayGetCount(v24);
              CFIndex v26 = v25;
              if (v25)
              {
                if (v25 >= 1)
                {
                  CFIndex v27 = 0;
                  do
                  {
                    CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v24, v27);
                    QP::getUTF8StringFromCFString(v14, &v41);
                    QP::getUTF8StringFromCFString(v23, v39);
                    QP::getUTF8StringFromCFString(ValueAtIndex, v37);
                    QP::ParserGrammar::addLLMArgMap((uint64_t)this, &v41, v39, v37);
                    if (v38 < 0) {
                      operator delete(v37[0]);
                    }
                    if (v40 < 0) {
                      operator delete(v39[0]);
                    }
                    if (v42 < 0) {
                      operator delete((void *)v41);
                    }
                    ++v27;
                  }
                  while (v26 != v27);
                }
              }
              else
              {
                CFStringRef v29 = CFStringCreateWithCString(0, "", 0x8000100u);
                QP::getUTF8StringFromCFString(v14, &v47);
                QP::getUTF8StringFromCFString(v23, v45);
                QP::getUTF8StringFromCFString(v29, v43);
                QP::ParserGrammar::addLLMArgMap((uint64_t)this, &v47, v45, v43);
                if (v44 < 0) {
                  operator delete(v43[0]);
                }
                if (v46 < 0) {
                  operator delete(v45[0]);
                }
                if (v48 < 0) {
                  operator delete((void *)v47);
                }
              }
            }
          }
          uint64_t v13 = v35 + 1;
        }
        while (v35 + 1 != Count);
      }
      return 1;
    }
  }
  return result;
}

void sub_224DA5290(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 145) < 0) {
    operator delete(*(void **)(v1 - 168));
  }
  if (*(char *)(v1 - 121) < 0) {
    operator delete(*(void **)(v1 - 144));
  }
  if (*(char *)(v1 - 97) < 0) {
    operator delete(*(void **)(v1 - 120));
  }
  _Unwind_Resume(exception_object);
}

uint64_t *QP::ParserGrammar::addLLMArgMap(uint64_t a1, long long *a2, void **a3, void **a4)
{
  char v7 = (uint64_t **)(a1 + 424);
  if ((void **)(a1 + 432) == std::__tree<std::string>::find<std::string>(a1 + 424, (void **)a2))
  {
    CFDictionaryRef v15 = 0;
    uint64_t v16 = 0;
    CFStringRef v14 = &v15;
    std::pair<std::string,std::map<std::string,std::set<std::string>>>::pair[abi:ne180100]<std::string const&,std::map<std::string,std::set<std::string>>,0>(&__p, a2, (std::string::size_type *)&v14);
    std::__tree<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::map<std::string,std::set<std::string>>>>(v7, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
    std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy((uint64_t)&v18, v19);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy((uint64_t)&v14, v15);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    CFDictionaryRef v8 = std::__tree<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, (void **)a2, (uint64_t)&std::piecewise_construct, (long long **)&__p);
    unint64_t v9 = (uint64_t *)std::__tree<std::string>::find<std::string>((uint64_t)(v8 + 7), a3);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    if (std::__tree<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, (void **)a2, (uint64_t)&std::piecewise_construct, (long long **)&__p)+ 8 != v9)
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
      goto LABEL_7;
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    uint64_t v13 = std::__tree<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, (void **)a2, (uint64_t)&std::piecewise_construct, (long long **)&__p);
    CFDictionaryRef v15 = 0;
    uint64_t v16 = 0;
    CFStringRef v14 = &v15;
    std::pair<std::string,std::map<std::string,std::set<std::string>>>::pair[abi:ne180100]<std::string const&,std::map<std::string,std::set<std::string>>,0>(&__p, (long long *)a3, (std::string::size_type *)&v14);
    std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::set<std::string>>>((uint64_t **)v13 + 7, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
    std::__tree<std::string>::destroy((uint64_t)&v18, v19);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::__tree<std::string>::destroy((uint64_t)&v14, v15);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
LABEL_7:
  unint64_t v10 = std::__tree<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, (void **)a2, (uint64_t)&std::piecewise_construct, (long long **)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  size_t v11 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v10 + 7, a3, (uint64_t)&std::piecewise_construct, (long long **)&__p);
  return std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)v11 + 7, a4, (uint64_t)a4);
}

void sub_224DA551C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  CFSetRef v5 = va_arg(va1, char *);
  uint64_t v6 = va_arg(va1, void);
  std::pair<std::string,std::set<std::string>>::~pair((uint64_t)va1);
  std::__tree<std::string>::destroy((uint64_t)va, v5);
  _Unwind_Resume(a1);
}

uint64_t QP::ParserGrammar::loadIntentActions(QP::ParserGrammar *this, CFDictionaryRef theDict, const __CFString *key)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t result = CFDictionaryContainsKey(theDict, key);
  if (result)
  {
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, key);
    uint64_t result = CFDictionaryContainsKey(Value, @"INTENTS");
    if (result)
    {
      CFDictionaryRef v8 = (const __CFDictionary *)CFDictionaryGetValue(Value, @"INTENTS");
      uint64_t result = CFDictionaryContainsKey(v8, @"ACTIONS");
      if (result)
      {
        CFDictionaryRef v9 = (const __CFDictionary *)CFDictionaryGetValue(v8, @"ACTIONS");
        v26[1] = v26;
        CFIndex Count = CFDictionaryGetCount(v9);
        MEMORY[0x270FA5388](Count);
        uint64_t v12 = (const void **)((char *)v26 - v11);
        if (v10 >= 0x200) {
          size_t v13 = 512;
        }
        else {
          size_t v13 = v10;
        }
        bzero((char *)v26 - v11, v13);
        CFIndex v27 = v12;
        CFDictionaryRef v28 = v9;
        CFDictionaryGetKeysAndValues(v9, v12, 0);
        if (Count >= 1)
        {
          uint64_t v14 = 0;
          do
          {
            uint64_t v31 = v14;
            CFStringRef v15 = (const __CFString *)v27[v14];
            CFDictionaryRef v32 = (CFDictionaryRef)CFDictionaryGetValue(v28, v15);
            CFIndex v16 = CFDictionaryGetCount(v32);
            BOOL v30 = v26;
            MEMORY[0x270FA5388](v16);
            uint64_t v18 = (const void **)((char *)v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
            if (v17 >= 0x200) {
              size_t v19 = 512;
            }
            else {
              size_t v19 = v17;
            }
            bzero((char *)v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), v19);
            CFDictionaryGetKeysAndValues(v32, v18, 0);
            if (v16 >= 1)
            {
              for (uint64_t i = 0; i != v16; ++i)
              {
                CFStringRef v21 = (const __CFString *)v18[i];
                CFArrayRef v22 = (const __CFArray *)CFDictionaryGetValue(v32, v21);
                CFIndex v23 = CFArrayGetCount(v22);
                if (v23 >= 1)
                {
                  for (CFIndex j = 0; j != v23; ++j)
                  {
                    CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v22, j);
                    QP::getUTF8StringFromCFString(v15, &v37);
                    QP::getUTF8StringFromCFString(v21, v35);
                    QP::getUTF8StringFromCFString(ValueAtIndex, v33);
                    QP::ParserGrammar::addIntentAction((uint64_t)this, &v37, (uint64_t)v35, (uint64_t)v33);
                    if (v34 < 0) {
                      operator delete(v33[0]);
                    }
                    if (v36 < 0) {
                      operator delete(v35[0]);
                    }
                    if (v38 < 0) {
                      operator delete((void *)v37);
                    }
                  }
                }
              }
            }
            uint64_t v14 = v31 + 1;
          }
          while (v31 + 1 != Count);
        }
        return 1;
      }
    }
  }
  return result;
}

void sub_224DA5824(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 137) < 0) {
    operator delete(*(void **)(v1 - 160));
  }
  if (*(char *)(v1 - 113) < 0) {
    operator delete(*(void **)(v1 - 136));
  }
  if (*(char *)(v1 - 89) < 0) {
    operator delete(*(void **)(v1 - 112));
  }
  _Unwind_Resume(exception_object);
}

uint64_t **QP::ParserGrammar::addIntentAction(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  unsigned __int16 v18 = QP::ParserGrammar::symbolID(a1, a3);
  unsigned __int16 v17 = QP::ParserGrammar::symbolID(a1, a4);
  char v7 = (uint64_t **)(a1 + 376);
  if ((void **)(a1 + 384) == std::__tree<std::string>::find<std::string>(a1 + 376, (void **)a2))
  {
    size_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v12 = &v13;
    std::pair<std::string,std::map<std::string,std::set<std::string>>>::pair[abi:ne180100]<std::string const&,std::map<std::string,std::set<std::string>>,0>(&__p, a2, (std::string::size_type *)&v12);
    std::__tree<std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::map<unsigned short,std::set<unsigned short>>>>(v7, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::destroy((uint64_t)v16, (void *)v16[1]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::destroy((uint64_t)&v12, v13);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    CFDictionaryRef v8 = std::__tree<std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, (void **)a2, (uint64_t)&std::piecewise_construct, (long long **)&__p);
    size_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v12 = &v13;
    LOWORD(__p.__r_.__value_.__l.__data_) = v18;
    __p.__r_.__value_.__r.__words[2] = 0;
    v16[0] = 0;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)&__p.__r_.__value_.__r.__words[2];
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__emplace_unique_key_args<unsigned short,std::pair<unsigned short,std::set<unsigned short>>>((uint64_t)(v8 + 7), (unsigned __int16 *)&__p, (uint64_t)&__p);
    std::__tree<unsigned short>::destroy((uint64_t)&__p.__r_.__value_.__l.__size_, (void *)__p.__r_.__value_.__r.__words[2]);
    std::__tree<unsigned short>::destroy((uint64_t)&v12, v13);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  CFDictionaryRef v9 = std::__tree<std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, (void **)a2, (uint64_t)&std::piecewise_construct, (long long **)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  unint64_t v10 = std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>((uint64_t **)v9 + 7, &v18, (uint64_t)&std::piecewise_construct, &__p);
  return std::__tree<unsigned short>::__emplace_unique_key_args<unsigned short,unsigned short const&>(v10 + 5, &v17, &v17);
}

void sub_224DA5A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  std::__tree<unsigned short>::destroy(v14, a14);
  std::__tree<unsigned short>::destroy((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

uint64_t QP::ParserGrammar::loadU2ArgActions(QP::ParserGrammar *this, CFDictionaryRef theDict, const __CFString *key)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (CFDictionaryContainsKey(theDict, key))
  {
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, key);
    if (CFDictionaryContainsKey(Value, @"U2ARGACTIONS"))
    {
      CFDictionaryRef v7 = (const __CFDictionary *)CFDictionaryGetValue(Value, @"U2ARGACTIONS");
      CFIndex Count = CFDictionaryGetCount(v7);
      uint64_t v20 = (uint64_t)&v20;
      MEMORY[0x270FA5388](Count);
      uint64_t v11 = (const void **)((char *)&v21[-1] - v10);
      size_t v12 = v9 >= 0x200 ? 512 : v9;
      bzero((char *)&v21[-1] - v10, v12);
      CFDictionaryGetKeysAndValues(v7, v11, 0);
      if (Count >= 1)
      {
        for (uint64_t i = 0; i != Count; ++i)
        {
          CFStringRef v14 = (const __CFString *)v11[i];
          CFArrayRef v15 = (const __CFArray *)CFDictionaryGetValue(v7, v14);
          CFIndex v16 = CFArrayGetCount(v15);
          if (v16 >= 1)
          {
            for (CFIndex j = 0; j != v16; ++j)
            {
              CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v15, j);
              QP::getUTF8StringFromCFString(v14, &v23);
              QP::getUTF8StringFromCFString(ValueAtIndex, v21);
              QP::ParserGrammar::addU2ArgAction((uint64_t)this, &v23, (uint64_t)v21);
              if (v22 < 0) {
                operator delete(v21[0]);
              }
              if (v24 < 0) {
                operator delete((void *)v23);
              }
            }
          }
        }
      }
    }
  }
  return 0;
}

void sub_224DA5C24(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 113) < 0) {
    operator delete(*(void **)(v1 - 136));
  }
  if (*(char *)(v1 - 89) < 0) {
    operator delete(*(void **)(v1 - 112));
  }
  _Unwind_Resume(exception_object);
}

uint64_t **QP::ParserGrammar::addU2ArgAction(uint64_t a1, long long *a2, uint64_t a3)
{
  unsigned __int16 SymbolID = QP::ParserGrammar::getSymbolID(a1, a3);
  CFSetRef v5 = (uint64_t **)(a1 + 400);
  if ((void **)(a1 + 408) == std::__tree<std::string>::find<std::string>(a1 + 400, (void **)a2))
  {
    v9[0] = 0;
    v9[1] = 0;
    CFDictionaryRef v8 = v9;
    std::pair<std::string,std::map<std::string,std::set<std::string>>>::pair[abi:ne180100]<std::string const&,std::map<std::string,std::set<std::string>>,0>(&__p, a2, (std::string::size_type *)&v8);
    std::__tree<std::__value_type<std::string,std::set<unsigned short>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned short>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned short>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::set<unsigned short>>>(v5, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
    std::__tree<unsigned short>::destroy((uint64_t)v11, v11[1]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::__tree<unsigned short>::destroy((uint64_t)&v8, v9[0]);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  uint64_t v6 = std::__tree<std::__value_type<std::string,std::set<unsigned short>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned short>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned short>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, (void **)a2, (uint64_t)&std::piecewise_construct, (long long **)&__p);
  return std::__tree<unsigned short>::__emplace_unique_key_args<unsigned short,unsigned short const&>((uint64_t **)v6 + 7, &SymbolID, &SymbolID);
}

void sub_224DA5D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, char a12)
{
}

uint64_t QP::ParserGrammar::loadActions(QP::ParserGrammar *this, CFDictionaryRef theDict, const __CFString *key)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  uint64_t result = CFDictionaryContainsKey(theDict, key);
  if (result)
  {
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, key);
    uint64_t result = CFDictionaryContainsKey(Value, @"ACTIONS");
    if (result)
    {
      CFDictionaryRef v8 = (const __CFDictionary *)CFDictionaryGetValue(Value, @"ACTIONS");
      v29[1] = v29;
      CFIndex Count = CFDictionaryGetCount(v8);
      MEMORY[0x270FA5388](Count);
      uint64_t v11 = (const void **)((char *)v29 - v10);
      if (v9 >= 0x200) {
        size_t v12 = 512;
      }
      else {
        size_t v12 = v9;
      }
      bzero((char *)v29 - v10, v12);
      CFDictionaryRef v31 = v8;
      BOOL v30 = v11;
      CFDictionaryGetKeysAndValues(v8, v11, 0);
      if (Count >= 1)
      {
        uint64_t v13 = 0;
        do
        {
          uint64_t v34 = v13;
          CFStringRef v14 = (const __CFString *)v30[v13];
          CFDictionaryRef v37 = (CFDictionaryRef)CFDictionaryGetValue(v31, v14);
          CFIndex v36 = CFDictionaryGetCount(v37);
          uint64_t v33 = v29;
          MEMORY[0x270FA5388](v36);
          CFIndex v16 = (const void **)((char *)v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
          if (v15 >= 0x200) {
            size_t v17 = 512;
          }
          else {
            size_t v17 = v15;
          }
          bzero((char *)v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v17);
          uint64_t v35 = v16;
          CFDictionaryGetKeysAndValues(v37, v16, 0);
          if (v36 >= 1)
          {
            uint64_t v18 = 0;
            do
            {
              uint64_t v39 = v18;
              CFStringRef v19 = (const __CFString *)v35[v18];
              CFDictionaryRef v41 = (CFDictionaryRef)CFDictionaryGetValue(v37, v19);
              CFIndex v40 = CFDictionaryGetCount(v41);
              char v38 = v29;
              MEMORY[0x270FA5388](v40);
              CFStringRef v21 = (const void **)((char *)v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
              if (v20 >= 0x200) {
                size_t v22 = 512;
              }
              else {
                size_t v22 = v20;
              }
              bzero((char *)v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0), v22);
              CFDictionaryGetKeysAndValues(v41, v21, 0);
              if (v40 >= 1)
              {
                for (uint64_t i = 0; i != v40; ++i)
                {
                  CFStringRef v24 = (const __CFString *)v21[i];
                  CFArrayRef v25 = (const __CFArray *)CFDictionaryGetValue(v41, v24);
                  CFIndex v26 = CFArrayGetCount(v25);
                  if (v26 >= 1)
                  {
                    for (CFIndex j = 0; j != v26; ++j)
                    {
                      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v25, j);
                      QP::getUTF8StringFromCFString(v14, &v48);
                      QP::getUTF8StringFromCFString(v19, v46);
                      QP::getUTF8StringFromCFString(v24, v44);
                      QP::getUTF8StringFromCFString(ValueAtIndex, v42);
                      QP::ParserGrammar::addAction((uint64_t)this, &v48, (uint64_t)v46, (uint64_t)v44, v42);
                      if (v43 < 0) {
                        operator delete(v42[0]);
                      }
                      if (v45 < 0) {
                        operator delete(v44[0]);
                      }
                      if (v47 < 0) {
                        operator delete(v46[0]);
                      }
                      if (v49 < 0) {
                        operator delete((void *)v48);
                      }
                    }
                  }
                }
              }
              uint64_t v18 = v39 + 1;
            }
            while (v39 + 1 != v36);
          }
          uint64_t v13 = v34 + 1;
        }
        while (v34 + 1 != Count);
      }
      return 1;
    }
  }
  return result;
}

void sub_224DA611C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 169) < 0) {
    operator delete(*(void **)(v1 - 192));
  }
  if (*(char *)(v1 - 145) < 0) {
    operator delete(*(void **)(v1 - 168));
  }
  if (*(char *)(v1 - 121) < 0) {
    operator delete(*(void **)(v1 - 144));
  }
  if (*(char *)(v1 - 97) < 0) {
    operator delete(*(void **)(v1 - 120));
  }
  _Unwind_Resume(exception_object);
}

uint64_t *QP::ParserGrammar::addAction(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, void **a5)
{
  unsigned __int16 SymbolID = QP::ParserGrammar::getSymbolID(a1, a3);
  unsigned __int16 v22 = QP::ParserGrammar::getSymbolID(a1, a4);
  unint64_t v9 = (uint64_t **)(a1 + 352);
  if ((void **)(a1 + 360) == std::__tree<std::string>::find<std::string>(a1 + 352, (void **)a2))
  {
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    size_t v17 = &v18;
    std::pair<std::string,std::map<std::string,std::set<std::string>>>::pair[abi:ne180100]<std::string const&,std::map<std::string,std::set<std::string>>,0>(&__p, a2, (std::string::size_type *)&v17);
    std::__tree<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>>(v9, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
    std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>>>::destroy((uint64_t)v21, (void *)v21[1]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>>>::destroy((uint64_t)&v17, v18);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    uint64_t v11 = std::__tree<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, (void **)a2, (uint64_t)&std::piecewise_construct, (long long **)&__p);
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    size_t v17 = &v18;
    LOWORD(__p.__r_.__value_.__l.__data_) = SymbolID;
    __p.__r_.__value_.__r.__words[2] = 0;
    v21[0] = 0;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)&__p.__r_.__value_.__r.__words[2];
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__emplace_unique_key_args<unsigned short,std::pair<unsigned short,std::set<unsigned short>>>((uint64_t)(v11 + 7), (unsigned __int16 *)&__p, (uint64_t)&__p);
    std::__tree<std::__value_type<unsigned short,std::set<std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<std::string>>>>::destroy((uint64_t)&__p.__r_.__value_.__l.__size_, (void *)__p.__r_.__value_.__r.__words[2]);
    std::__tree<std::__value_type<unsigned short,std::set<std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<std::string>>>>::destroy((uint64_t)&v17, v18);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    size_t v12 = std::__tree<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, (void **)a2, (uint64_t)&std::piecewise_construct, (long long **)&__p);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&SymbolID;
    uint64_t v13 = std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>((uint64_t **)v12 + 7, &SymbolID, (uint64_t)&std::piecewise_construct, &__p);
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    size_t v17 = &v18;
    LOWORD(__p.__r_.__value_.__l.__data_) = v22;
    __p.__r_.__value_.__r.__words[2] = 0;
    v21[0] = 0;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)&__p.__r_.__value_.__r.__words[2];
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__emplace_unique_key_args<unsigned short,std::pair<unsigned short,std::set<unsigned short>>>((uint64_t)(v13 + 5), (unsigned __int16 *)&__p, (uint64_t)&__p);
    std::__tree<std::string>::destroy((uint64_t)&__p.__r_.__value_.__l.__size_, (char *)__p.__r_.__value_.__r.__words[2]);
    std::__tree<std::string>::destroy((uint64_t)&v17, v18);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    uint64_t v10 = (uint64_t **)(std::__tree<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, (void **)a2, (uint64_t)&std::piecewise_construct, (long long **)&__p)+ 7);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&SymbolID;
  }
  else
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    uint64_t v10 = (uint64_t **)(std::__tree<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, (void **)a2, (uint64_t)&std::piecewise_construct, (long long **)&__p)+ 7);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&SymbolID;
  }
  CFStringRef v14 = std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(v10, &SymbolID, (uint64_t)&std::piecewise_construct, &__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v22;
  unint64_t v15 = std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(v14 + 5, &v22, (uint64_t)&std::piecewise_construct, &__p);
  return std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v15 + 5, a5, (uint64_t)a5);
}

void sub_224DA6418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10, uint64_t a11, uint64_t a12, uint64_t a13, char *a14)
{
  std::__tree<std::string>::destroy(v14, a14);
  std::__tree<std::string>::destroy((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

uint64_t QP::ParserGrammar::loadProperties(uint64_t **this, CFDictionaryRef theDict, const __CFString *key)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  uint64_t result = CFDictionaryContainsKey(theDict, key);
  if (result)
  {
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, key);
    uint64_t result = CFDictionaryContainsKey(Value, @"PROPS");
    if (result)
    {
      CFDictionaryRef v8 = (const __CFDictionary *)CFDictionaryGetValue(Value, @"PROPS");
      CFIndex Count = CFDictionaryGetCount(v8);
      v36[1] = v36;
      MEMORY[0x270FA5388](Count);
      size_t v12 = (const void **)((char *)v36 - v11);
      if (v10 >= 0x200) {
        size_t v13 = 512;
      }
      else {
        size_t v13 = v10;
      }
      bzero((char *)v36 - v11, v13);
      CFDictionaryRef v38 = v8;
      CFDictionaryGetKeysAndValues(v8, v12, 0);
      if (Count >= 1)
      {
        uint64_t v14 = 0;
        CFDictionaryRef v37 = this + 92;
        do
        {
          CFStringRef v15 = (const __CFString *)v12[v14];
          if (CFStringsAreEqual(v15, @"RequiresComplement"))
          {
            CFDictionaryRef v16 = (const __CFDictionary *)CFDictionaryGetValue(v38, v15);
            CFIndex v17 = CFDictionaryGetCount(v16);
            MEMORY[0x270FA5388](v17);
            uint64_t v19 = (const void **)((char *)v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
            if (v18 >= 0x200) {
              size_t v20 = 512;
            }
            else {
              size_t v20 = v18;
            }
            bzero((char *)v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), v20);
            CFDictionaryGetKeysAndValues(v16, v19, 0);
            if (v17 >= 1)
            {
              do
              {
                QP::getUTF8StringFromCFString((const __CFString *)*v19, v45);
                unsigned __int16 SymbolID = QP::ParserGrammar::getSymbolID((uint64_t)this, (uint64_t)v45);
                std::__tree<unsigned short>::__emplace_unique_key_args<unsigned short,unsigned short const&>(this + 95, &SymbolID, &SymbolID);
                if (v46 < 0) {
                  operator delete(v45[0]);
                }
                ++v19;
                --v17;
              }
              while (v17);
            }
          }
          else if (CFStringsAreEqual(v15, @"IsExtended"))
          {
            CFDictionaryRef v21 = (const __CFDictionary *)CFDictionaryGetValue(v38, v15);
            CFIndex v22 = CFDictionaryGetCount(v21);
            MEMORY[0x270FA5388](v22);
            CFStringRef v24 = (const void **)((char *)v36 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
            if (v23 >= 0x200) {
              size_t v25 = 512;
            }
            else {
              size_t v25 = v23;
            }
            bzero((char *)v36 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0), v25);
            CFDictionaryGetKeysAndValues(v21, v24, 0);
            if (v22 >= 1)
            {
              do
              {
                QP::getUTF8StringFromCFString((const __CFString *)*v24, v43);
                unsigned __int16 SymbolID = QP::ParserGrammar::getSymbolID((uint64_t)this, (uint64_t)v43);
                std::__tree<unsigned short>::__emplace_unique_key_args<unsigned short,unsigned short const&>(this + 104, &SymbolID, &SymbolID);
                if (v44 < 0) {
                  operator delete(v43[0]);
                }
                ++v24;
                --v22;
              }
              while (v22);
            }
          }
          else if (CFStringsAreEqual(v15, @"IsParent"))
          {
            CFDictionaryRef v26 = (const __CFDictionary *)CFDictionaryGetValue(v38, v15);
            CFIndex v27 = CFDictionaryGetCount(v26);
            MEMORY[0x270FA5388](v27);
            CFStringRef v29 = (const void **)((char *)v36 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
            if (v28 >= 0x200) {
              size_t v30 = 512;
            }
            else {
              size_t v30 = v28;
            }
            bzero((char *)v36 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0), v30);
            CFDictionaryGetKeysAndValues(v26, v29, 0);
            if (v27 >= 1)
            {
              do
              {
                QP::getUTF8StringFromCFString((const __CFString *)*v29, v41);
                unsigned __int16 SymbolID = QP::ParserGrammar::getSymbolID((uint64_t)this, (uint64_t)v41);
                std::__tree<unsigned short>::__emplace_unique_key_args<unsigned short,unsigned short const&>(this + 104, &SymbolID, &SymbolID);
                if (v42 < 0) {
                  operator delete(v41[0]);
                }
                ++v29;
                --v27;
              }
              while (v27);
            }
          }
          else if (CFStringsAreEqual(v15, @"IsCombinable"))
          {
            CFDictionaryRef v31 = (const __CFDictionary *)CFDictionaryGetValue(v38, v15);
            CFIndex v32 = CFDictionaryGetCount(v31);
            MEMORY[0x270FA5388](v32);
            uint64_t v34 = (const void **)((char *)v36 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
            size_t v35 = v33 >= 0x200 ? 512 : v33;
            bzero((char *)v36 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0), v35);
            CFDictionaryGetKeysAndValues(v31, v34, 0);
            if (v32 >= 1)
            {
              do
              {
                QP::getUTF8StringFromCFString((const __CFString *)*v34, v39);
                unsigned __int16 SymbolID = QP::ParserGrammar::getSymbolID((uint64_t)this, (uint64_t)v39);
                std::__tree<unsigned short>::__emplace_unique_key_args<unsigned short,unsigned short const&>(v37, &SymbolID, &SymbolID);
                if (v40 < 0) {
                  operator delete(v39[0]);
                }
                ++v34;
                --v32;
              }
              while (v32);
            }
          }
          ++v14;
        }
        while (v14 != Count);
      }
      return 1;
    }
  }
  return result;
}

void sub_224DA692C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 169) < 0) {
    operator delete(*(void **)(v1 - 192));
  }
  _Unwind_Resume(exception_object);
}

uint64_t QP::ParserGrammar::loadFileExtensions(QP::ParserGrammar *this, CFDictionaryRef theDict, const __CFString *key)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t result = CFDictionaryContainsKey(theDict, key);
  if (result)
  {
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, key);
    uint64_t result = CFDictionaryContainsKey(Value, @"FILE-EXTENSIONS");
    if (result)
    {
      CFDictionaryRef v8 = (const __CFDictionary *)CFDictionaryGetValue(Value, @"FILE-EXTENSIONS");
      CFIndex Count = CFDictionaryGetCount(v8);
      uint64_t v21 = (uint64_t)&v21;
      MEMORY[0x270FA5388](Count);
      unint64_t v10 = (8 * Count + 15) & 0xFFFFFFFFFFFFFFF0;
      uint64_t v11 = (char *)&v22[-1] - v10;
      if ((unint64_t)(8 * Count) >= 0x200) {
        size_t v12 = 512;
      }
      else {
        size_t v12 = 8 * Count;
      }
      bzero((char *)&v22[-1] - v10, v12);
      MEMORY[0x270FA5388](v13);
      uint64_t v14 = (char *)&v22[-1] - v10;
      bzero((char *)&v22[-1] - v10, v12);
      CFDictionaryGetKeysAndValues(v8, (const void **)((char *)&v22[-1] - v10), (const void **)((char *)&v22[-1] - v10));
      if (Count >= 1)
      {
        for (uint64_t i = 0; i != Count; ++i)
        {
          CFStringRef v16 = *(const __CFString **)&v11[8 * i];
          CFArrayRef v17 = *(const __CFArray **)&v14[8 * i];
          CFIndex v18 = CFArrayGetCount(v17);
          if (v18 >= 1)
          {
            for (CFIndex j = 0; j != v18; ++j)
            {
              CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v17, j);
              QP::getUTF8StringFromCFString(v16, v24);
              QP::getUTF8StringFromCFString(ValueAtIndex, v22);
              QP::ParserGrammar::addFileExtension((uint64_t)this, (uint64_t)v24, v22);
              if (v23 < 0) {
                operator delete(v22[0]);
              }
              if (v25 < 0) {
                operator delete(v24[0]);
              }
            }
          }
        }
      }
      return 1;
    }
  }
  return result;
}

void sub_224DA6B88(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 113) < 0) {
    operator delete(*(void **)(v1 - 136));
  }
  if (*(char *)(v1 - 89) < 0) {
    operator delete(*(void **)(v1 - 112));
  }
  _Unwind_Resume(exception_object);
}

uint64_t *QP::ParserGrammar::addFileExtension(uint64_t a1, uint64_t a2, void **a3)
{
  unsigned int SymbolID = QP::ParserGrammar::getSymbolID(a1, a2);
  unsigned int v6 = SymbolID;
  CFDictionaryRef v7 = (uint64_t *)(a1 + 264);
  uint64_t v8 = *(void *)(a1 + 264);
  if (!v8) {
    goto LABEL_12;
  }
  uint64_t v9 = a1 + 264;
  uint64_t v10 = *(void *)(a1 + 264);
  do
  {
    unsigned int v11 = *(unsigned __int16 *)(v10 + 32);
    BOOL v12 = v11 >= SymbolID;
    if (v11 >= SymbolID) {
      uint64_t v13 = (uint64_t *)v10;
    }
    else {
      uint64_t v13 = (uint64_t *)(v10 + 8);
    }
    if (v12) {
      uint64_t v9 = v10;
    }
    uint64_t v10 = *v13;
  }
  while (*v13);
  if ((uint64_t *)v9 == v7 || SymbolID < *(unsigned __int16 *)(v9 + 32))
  {
LABEL_12:
    v20[0] = 0;
    v20[1] = 0;
    uint64_t v19 = v20;
    unsigned __int16 v21 = SymbolID;
    v23[0] = 0;
    v23[1] = 0;
    CFIndex v22 = v23;
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__emplace_unique_key_args<unsigned short,std::pair<unsigned short,std::set<unsigned short>>>(a1 + 256, &v21, (uint64_t)&v21);
    std::__tree<std::string>::destroy((uint64_t)&v22, v23[0]);
    std::__tree<std::string>::destroy((uint64_t)&v19, v20[0]);
    uint64_t v8 = *v7;
  }
  if (!v8) {
    goto LABEL_24;
  }
  uint64_t v14 = a1 + 264;
  do
  {
    unsigned int v15 = *(unsigned __int16 *)(v8 + 32);
    BOOL v16 = v15 >= v6;
    if (v15 >= v6) {
      CFArrayRef v17 = (uint64_t *)v8;
    }
    else {
      CFArrayRef v17 = (uint64_t *)(v8 + 8);
    }
    if (v16) {
      uint64_t v14 = v8;
    }
    uint64_t v8 = *v17;
  }
  while (*v17);
  if ((uint64_t *)v14 == v7 || v6 < *(unsigned __int16 *)(v14 + 32)) {
LABEL_24:
  }
    uint64_t v14 = a1 + 264;
  return std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(v14 + 40), a3, (uint64_t)a3);
}

void sub_224DA6CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11, uint64_t a12, uint64_t a13, uint64_t a14, char *a15)
{
  std::__tree<std::string>::destroy(v15, a15);
  std::__tree<std::string>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t QP::ParserGrammar::loadValues(QP::ParserGrammar *this, CFDictionaryRef theDict, const __CFString *key)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t result = CFDictionaryContainsKey(theDict, key);
  if (result)
  {
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, key);
    uint64_t result = CFDictionaryContainsKey(Value, @"VALUES");
    if (result)
    {
      CFDictionaryRef v8 = (const __CFDictionary *)CFDictionaryGetValue(Value, @"VALUES");
      uint64_t v26 = (uint64_t)&v26;
      CFIndex Count = CFDictionaryGetCount(v8);
      unint64_t v9 = 8 * Count;
      MEMORY[0x270FA5388](Count);
      unint64_t v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
      unsigned int v11 = (const void **)((char *)&v26 - v10);
      if (v9 >= 0x200) {
        size_t v12 = 512;
      }
      else {
        size_t v12 = v9;
      }
      bzero((char *)&v26 - v10, v12);
      MEMORY[0x270FA5388](v13);
      uint64_t v14 = (char *)&v26 - v10;
      bzero(v14, v12);
      CFIndex v27 = v14;
      unint64_t v28 = v11;
      CFDictionaryGetKeysAndValues(v8, v11, (const void **)v14);
      if (Count >= 1)
      {
        for (uint64_t i = 0; i != Count; ++i)
        {
          CFStringRef v16 = (const __CFString *)v28[i];
          CFDictionaryRef v17 = *(const __CFDictionary **)&v27[8 * i];
          CFIndex v18 = CFDictionaryGetCount(v17);
          MEMORY[0x270FA5388](v18);
          unint64_t v19 = (8 * v18 + 15) & 0xFFFFFFFFFFFFFFF0;
          size_t v20 = (const __CFString **)((char *)&v26 - v19);
          if ((unint64_t)(8 * v18) >= 0x200) {
            size_t v21 = 512;
          }
          else {
            size_t v21 = 8 * v18;
          }
          bzero((char *)&v26 - v19, v21);
          MEMORY[0x270FA5388](v22);
          char v23 = (const __CFString **)((char *)&v26 - v19);
          bzero((char *)&v26 - v19, v21);
          CFDictionaryGetKeysAndValues(v17, (const void **)((char *)&v26 - v19), (const void **)((char *)&v26 - v19));
          if (v18 >= 1)
          {
            do
            {
              CFStringRef v24 = *v20;
              CFStringRef v25 = *v23;
              QP::getUTF8StringFromCFString(v16, v33);
              QP::getUTF8StringFromCFString(v24, v31);
              QP::getUTF8StringFromCFString(v25, &v30);
              QP::ParserGrammar::addValue((uint64_t)this, (uint64_t)v33, v31, &v30);
              if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v30.__r_.__value_.__l.__data_);
              }
              if (v32 < 0) {
                operator delete(v31[0]);
              }
              if (v34 < 0) {
                operator delete(v33[0]);
              }
              ++v23;
              ++v20;
              --v18;
            }
            while (v18);
          }
        }
      }
      return 1;
    }
  }
  return result;
}

void sub_224DA6FB4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 137) < 0) {
    operator delete(*(void **)(v1 - 160));
  }
  if (*(char *)(v1 - 113) < 0) {
    operator delete(*(void **)(v1 - 136));
  }
  if (*(char *)(v1 - 89) < 0) {
    operator delete(*(void **)(v1 - 112));
  }
  _Unwind_Resume(exception_object);
}

void QP::ParserGrammar::addValue(uint64_t a1, uint64_t a2, void *a3, const std::string *a4)
{
  unsigned int SymbolID = QP::ParserGrammar::getSymbolID(a1, a2);
  unsigned __int16 v27 = SymbolID;
  uint64_t v9 = *(void *)(a1 + 480);
  if (!v9) {
    goto LABEL_12;
  }
  uint64_t v10 = a1 + 480;
  do
  {
    unsigned int v11 = *(unsigned __int16 *)(v9 + 32);
    BOOL v12 = v11 >= SymbolID;
    if (v11 >= SymbolID) {
      uint64_t v13 = (uint64_t *)v9;
    }
    else {
      uint64_t v13 = (uint64_t *)(v9 + 8);
    }
    if (v12) {
      uint64_t v10 = v9;
    }
    uint64_t v9 = *v13;
  }
  while (*v13);
  if (v10 == a1 + 480 || SymbolID < *(unsigned __int16 *)(v10 + 32))
  {
LABEL_12:
    *(_OWORD *)&v24.__r_.__value_.__r.__words[1] = 0uLL;
    v24.__r_.__value_.__r.__words[0] = (std::string::size_type)&v24.__r_.__value_.__l.__size_;
    LOWORD(__p[0]) = SymbolID;
    v26[0] = 0;
    v26[1] = 0;
    __p[1] = v26;
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__emplace_unique_key_args<unsigned short,std::pair<unsigned short,std::set<unsigned short>>>(a1 + 472, (unsigned __int16 *)__p, (uint64_t)__p);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&__p[1], v26[0]);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v24, (void *)v24.__r_.__value_.__l.__size_);
  }
  __p[0] = &v27;
  uint64_t v14 = std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>((uint64_t **)(a1 + 472), &v27, (uint64_t)&std::piecewise_construct, (_WORD **)__p);
  __p[0] = a3;
  uint64_t v15 = &v24;
  CFStringRef v16 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v14 + 5, (void **)a3, (uint64_t)&std::piecewise_construct, (long long **)__p);
  std::string::operator=((std::string *)(v16 + 7), a4);
  if (*(char *)(a2 + 23) >= 0) {
    size_t v17 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v17 = *(void *)(a2 + 8);
  }
  std::string::basic_string[abi:ne180100]((uint64_t)&v24, v17 + 1);
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v15 = (std::string *)v24.__r_.__value_.__r.__words[0];
  }
  if (v17)
  {
    if (*(char *)(a2 + 23) >= 0) {
      CFIndex v18 = (const void *)a2;
    }
    else {
      CFIndex v18 = *(const void **)a2;
    }
    memmove(v15, v18, v17);
  }
  *(_WORD *)((char *)&v15->__r_.__value_.__l.__data_ + v17) = 45;
  int v19 = *((char *)a3 + 23);
  if (v19 >= 0) {
    size_t v20 = (const std::string::value_type *)a3;
  }
  else {
    size_t v20 = (const std::string::value_type *)*a3;
  }
  if (v19 >= 0) {
    std::string::size_type v21 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    std::string::size_type v21 = a3[1];
  }
  uint64_t v22 = std::string::append(&v24, v20, v21);
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v26[0] = (void *)v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  QP::ParserGrammar::getSymbolID(a1, (uint64_t)__p);
  if (SHIBYTE(v26[0]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_224DA71FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, void *a18)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v18, a18);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t QP::ParserGrammar::loadCategories(QP::ParserGrammar *this, CFDictionaryRef theDict)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t result = CFDictionaryContainsKey(theDict, @"com.apple.spotlight");
  if (result)
  {
    if (*(_DWORD *)(*((void *)this + 5) + 16) == 1)
    {
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"com.apple.spotlight");
      uint64_t result = CFDictionaryContainsKey(Value, @"GROUPINGS");
      if (result)
      {
        CFDictionaryRef v6 = (const __CFDictionary *)CFDictionaryGetValue(Value, @"GROUPINGS");
        uint64_t result = CFDictionaryContainsKey(v6, @"ios");
        if (result)
        {
          uint64_t result = (uint64_t)CFDictionaryGetValue(v6, @"ios");
          if (result)
          {
            CFDictionaryRef v7 = (const __CFDictionary *)result;
            CFIndex Count = CFDictionaryGetCount((CFDictionaryRef)result);
            uint64_t v20 = (uint64_t)&v20;
            MEMORY[0x270FA5388](Count);
            unint64_t v9 = (8 * Count + 15) & 0xFFFFFFFFFFFFFFF0;
            uint64_t v10 = (char *)&v21[-1] - v9;
            if ((unint64_t)(8 * Count) >= 0x200) {
              size_t v11 = 512;
            }
            else {
              size_t v11 = 8 * Count;
            }
            bzero((char *)&v21[-1] - v9, v11);
            MEMORY[0x270FA5388](v12);
            uint64_t v13 = (char *)&v21[-1] - v9;
            bzero((char *)&v21[-1] - v9, v11);
            CFDictionaryGetKeysAndValues(v7, (const void **)((char *)&v21[-1] - v9), (const void **)((char *)&v21[-1] - v9));
            if (Count >= 1)
            {
              for (uint64_t i = 0; i != Count; ++i)
              {
                CFStringRef v15 = *(const __CFString **)&v10[8 * i];
                CFArrayRef v16 = *(const __CFArray **)&v13[8 * i];
                CFIndex v17 = CFArrayGetCount(v16);
                if (v17 >= 1)
                {
                  for (CFIndex j = 0; j != v17; ++j)
                  {
                    CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v16, j);
                    QP::getUTF8StringFromCFString(v15, v23);
                    QP::getUTF8StringFromCFString(ValueAtIndex, v21);
                    QP::ParserGrammar::addCategory((uint64_t)this, (uint64_t)v23, v21);
                    if (v22 < 0) {
                      operator delete(v21[0]);
                    }
                    if (v24 < 0) {
                      operator delete(v23[0]);
                    }
                  }
                }
              }
            }
            return 1;
          }
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_224DA7488(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 113) < 0) {
    operator delete(*(void **)(v1 - 136));
  }
  if (*(char *)(v1 - 89) < 0) {
    operator delete(*(void **)(v1 - 112));
  }
  _Unwind_Resume(exception_object);
}

uint64_t *QP::ParserGrammar::addCategory(uint64_t a1, uint64_t a2, void **a3)
{
  unsigned int SymbolID = QP::ParserGrammar::getSymbolID(a1, a2);
  unsigned int v6 = SymbolID;
  unint64_t v9 = *(uint64_t **)(a1 + 240);
  CFDictionaryRef v8 = (uint64_t **)(a1 + 240);
  CFDictionaryRef v7 = v9;
  if (!v9) {
    goto LABEL_12;
  }
  uint64_t v10 = v8;
  size_t v11 = v7;
  do
  {
    unsigned int v12 = *((unsigned __int16 *)v11 + 16);
    BOOL v13 = v12 >= SymbolID;
    if (v12 >= SymbolID) {
      uint64_t v14 = (uint64_t **)v11;
    }
    else {
      uint64_t v14 = (uint64_t **)(v11 + 1);
    }
    if (v13) {
      uint64_t v10 = (uint64_t **)v11;
    }
    size_t v11 = *v14;
  }
  while (*v14);
  if (v10 == v8 || SymbolID < *((unsigned __int16 *)v10 + 16))
  {
LABEL_12:
    v21[0] = 0;
    v21[1] = 0;
    uint64_t v20 = v21;
    unsigned __int16 v22 = SymbolID;
    v24[0] = 0;
    v24[1] = 0;
    long long v23 = v24;
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__emplace_unique_key_args<unsigned short,std::pair<unsigned short,std::set<unsigned short>>>((uint64_t)(v8 - 1), &v22, (uint64_t)&v22);
    std::__tree<std::string>::destroy((uint64_t)&v23, v24[0]);
    std::__tree<std::string>::destroy((uint64_t)&v20, v21[0]);
    CFDictionaryRef v7 = *v8;
  }
  if (!v7) {
    goto LABEL_24;
  }
  CFStringRef v15 = v8;
  do
  {
    unsigned int v16 = *((unsigned __int16 *)v7 + 16);
    BOOL v17 = v16 >= v6;
    if (v16 >= v6) {
      uint64_t v18 = v7;
    }
    else {
      uint64_t v18 = v7 + 1;
    }
    if (v17) {
      CFStringRef v15 = (uint64_t **)v7;
    }
    CFDictionaryRef v7 = (uint64_t *)*v18;
  }
  while (*v18);
  if (v15 == v8 || v6 < *((unsigned __int16 *)v15 + 16)) {
LABEL_24:
  }
    CFStringRef v15 = v8;
  return std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v15 + 5, a3, (uint64_t)a3);
}

void sub_224DA75E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11, uint64_t a12, uint64_t a13, uint64_t a14, char *a15)
{
  std::__tree<std::string>::destroy(v15, a15);
  std::__tree<std::string>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t QP::ParserGrammar::loadCompletions(QP::ParserGrammar *this, CFDictionaryRef theDict, const __CFString *key)
{
  if (CFDictionaryContainsKey(theDict, key))
  {
    CFDictionaryRef Value = CFDictionaryGetValue(theDict, key);
    CFTypeID v7 = CFGetTypeID(Value);
    if (v7 == CFDictionaryGetTypeID())
    {
      CFArrayRef v8 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)Value, @"COMPLETIONS");
      if (v8)
      {
        CFArrayRef v9 = v8;
        CFTypeID v10 = CFGetTypeID(v8);
        if (v10 == CFArrayGetTypeID())
        {
          CFIndex Count = CFArrayGetCount(v9);
          if (Count >= 1)
          {
            CFIndex v12 = Count;
            CFIndex v13 = 0;
            CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
            while (1)
            {
              CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v9, v13);
              CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(v14, 0, ValueAtIndex);
              CFMutableStringRef v23 = MutableCopy;
              CFStringLowercase(MutableCopy, *(CFLocaleRef *)(*((void *)this + 5) + 104));
              v24.CFIndex length = CFStringGetLength(MutableCopy);
              v24.CFIndex location = 0;
              CFStringFindAndReplace(MutableCopy, @"’", @"'", v24, 0);
              QP::getUTF8StringFromCFString(MutableCopy, &__p);
              BOOL v17 = (v22 & 0x80u) == 0 ? &__p : (void **)__p;
              int v18 = (v22 & 0x80u) == 0 ? v22 : v21;
              nlp::BurstTrieAdd(*((void *)this + 1), (uint64_t)v17, v18, 1);
              if (((char)v22 & 0x80000000) == 0) {
                break;
              }
              operator delete(__p);
              if (MutableCopy) {
                goto LABEL_17;
              }
LABEL_18:
              if (v12 == ++v13) {
                return 0;
              }
            }
            if (!MutableCopy) {
              goto LABEL_18;
            }
LABEL_17:
            CFRelease(MutableCopy);
            goto LABEL_18;
          }
        }
      }
    }
  }
  return 0;
}

void sub_224DA77AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, const void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  nlp::CFScopedPtr<__CFString *>::reset(&a15, 0);
  _Unwind_Resume(a1);
}

uint64_t QP::ParserGrammar::loadTokens(const void **this, CFDictionaryRef theDict, const __CFString *key)
{
  uint64_t result = CFDictionaryContainsKey(theDict, key);
  if (result)
  {
    CFDictionaryRef Value = CFDictionaryGetValue(theDict, key);
    CFTypeID v8 = CFGetTypeID(Value);
    if (v8 == CFDictionaryGetTypeID())
    {
      uint64_t result = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)Value, @"TOKEN_INFO");
      if (!result) {
        return result;
      }
      CFDictionaryRef v9 = (const __CFDictionary *)result;
      CFTypeID v10 = CFGetTypeID((CFTypeRef)result);
      if (v10 == CFDictionaryGetTypeID())
      {
        CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        CFDictionaryRef Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], v9);
        nlp::CFScopedPtr<__CFDictionary const*>::reset(this + 9, Copy);
        CFDictionaryRef v13 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)Value, @"TOKEN_TEXT");
        if (v13)
        {
          CFDictionaryRef v14 = v13;
          CFTypeID v15 = CFGetTypeID(v13);
          if (v15 == CFDictionaryGetTypeID())
          {
            CFDictionaryRef v16 = CFDictionaryCreateCopy(v11, v14);
            nlp::CFScopedPtr<__CFDictionary const*>::reset(this + 10, v16);
            return 1;
          }
        }
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v11, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
        nlp::CFScopedPtr<__CFDictionary const*>::reset(this + 10, Mutable);
      }
    }
    return 0;
  }
  return result;
}

uint64_t QP::ParserGrammar::loadAttributes(QP::ParserGrammar *this, CFDictionaryRef theDict, const __CFString *key)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  uint64_t result = CFDictionaryContainsKey(theDict, key);
  if (result)
  {
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, key);
    uint64_t result = CFDictionaryContainsKey(Value, @"ATTRIBUTES");
    if (result)
    {
      CFDictionaryRef v8 = (const __CFDictionary *)CFDictionaryGetValue(Value, @"ATTRIBUTES");
      v26[1] = v26;
      CFIndex Count = CFDictionaryGetCount(v8);
      unint64_t v9 = 8 * Count;
      MEMORY[0x270FA5388](Count);
      unint64_t v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
      if (v9 >= 0x200) {
        size_t v11 = 512;
      }
      else {
        size_t v11 = v9;
      }
      bzero((char *)v26 - v10, v11);
      MEMORY[0x270FA5388](v12);
      bzero((char *)v26 - v10, v11);
      unsigned __int16 v27 = (char *)v26 - v10;
      CFDictionaryRef v28 = v8;
      CFDictionaryGetKeysAndValues(v8, (const void **)((char *)v26 - v10), (const void **)((char *)v26 - v10));
      if (Count >= 1)
      {
        uint64_t v13 = 0;
        do
        {
          uint64_t v31 = v13;
          CFStringRef v14 = *(const __CFString **)&v27[8 * v13];
          CFDictionaryRef v32 = (CFDictionaryRef)CFDictionaryGetValue(v28, v14);
          CFIndex v15 = CFDictionaryGetCount(v32);
          std::string v30 = v26;
          MEMORY[0x270FA5388](v15);
          unint64_t v16 = (8 * v15 + 15) & 0xFFFFFFFFFFFFFFF0;
          BOOL v17 = (char *)v26 - v16;
          if ((unint64_t)(8 * v15) >= 0x200) {
            size_t v18 = 512;
          }
          else {
            size_t v18 = 8 * v15;
          }
          bzero((char *)v26 - v16, v18);
          MEMORY[0x270FA5388](v19);
          bzero((char *)v26 - v16, v18);
          CFDictionaryGetKeysAndValues(v32, (const void **)((char *)v26 - v16), (const void **)((char *)v26 - v16));
          if (v15 >= 1)
          {
            for (uint64_t i = 0; i != v15; ++i)
            {
              CFStringRef v21 = *(const __CFString **)&v17[8 * i];
              CFArrayRef v22 = (const __CFArray *)CFDictionaryGetValue(v32, v21);
              CFIndex v23 = CFArrayGetCount(v22);
              if (v23 >= 1)
              {
                for (CFIndex j = 0; j != v23; ++j)
                {
                  CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v22, j);
                  QP::getUTF8StringFromCFString(v21, v36);
                  QP::getUTF8StringFromCFString(ValueAtIndex, v34);
                  QP::getUTF8StringFromCFString(v14, &v33);
                  QP::ParserGrammar::setAttribute((uint64_t)this, (uint64_t)v36, (uint64_t)v34, &v33);
                  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v33.__r_.__value_.__l.__data_);
                  }
                  if (v35 < 0) {
                    operator delete(v34[0]);
                  }
                  if (v37 < 0) {
                    operator delete(v36[0]);
                  }
                }
              }
            }
          }
          uint64_t v13 = v31 + 1;
        }
        while (v31 + 1 != Count);
      }
      return 1;
    }
  }
  return result;
}

void sub_224DA7C14(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 137) < 0) {
    operator delete(*(void **)(v1 - 160));
  }
  if (*(char *)(v1 - 113) < 0) {
    operator delete(*(void **)(v1 - 136));
  }
  if (*(char *)(v1 - 89) < 0) {
    operator delete(*(void **)(v1 - 112));
  }
  _Unwind_Resume(exception_object);
}

std::string *QP::ParserGrammar::setAttribute(uint64_t a1, uint64_t a2, uint64_t a3, const std::string *a4)
{
  unsigned int v7 = QP::ParserGrammar::symbolID(a1, a2);
  unsigned __int16 v26 = QP::ParserGrammar::symbolID(a1, a3);
  CFDictionaryRef v8 = (uint64_t *)(a1 + 336);
  uint64_t v9 = *(void *)(a1 + 336);
  if (!v9) {
    goto LABEL_12;
  }
  uint64_t v10 = a1 + 336;
  uint64_t v11 = *(void *)(a1 + 336);
  do
  {
    unsigned int v12 = *(unsigned __int16 *)(v11 + 32);
    BOOL v13 = v12 >= v7;
    if (v12 >= v7) {
      CFStringRef v14 = (uint64_t *)v11;
    }
    else {
      CFStringRef v14 = (uint64_t *)(v11 + 8);
    }
    if (v13) {
      uint64_t v10 = v11;
    }
    uint64_t v11 = *v14;
  }
  while (*v14);
  if ((uint64_t *)v10 == v8 || v7 < *(unsigned __int16 *)(v10 + 32))
  {
LABEL_12:
    v22[0] = 0;
    v22[1] = 0;
    CFStringRef v21 = v22;
    LOWORD(v23) = v7;
    v25[0] = 0;
    v25[1] = 0;
    CFRange v24 = v25;
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__emplace_unique_key_args<unsigned short,std::pair<unsigned short,std::set<unsigned short>>>(a1 + 328, (unsigned __int16 *)&v23, (uint64_t)&v23);
    std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy((uint64_t)&v24, v25[0]);
    std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy((uint64_t)&v21, v22[0]);
    uint64_t v9 = *v8;
  }
  if (!v9) {
    goto LABEL_24;
  }
  uint64_t v15 = a1 + 336;
  do
  {
    unsigned int v16 = *(unsigned __int16 *)(v9 + 32);
    BOOL v17 = v16 >= v7;
    if (v16 >= v7) {
      size_t v18 = (uint64_t *)v9;
    }
    else {
      size_t v18 = (uint64_t *)(v9 + 8);
    }
    if (v17) {
      uint64_t v15 = v9;
    }
    uint64_t v9 = *v18;
  }
  while (*v18);
  if ((uint64_t *)v15 == v8 || v7 < *(unsigned __int16 *)(v15 + 32)) {
LABEL_24:
  }
    uint64_t v15 = a1 + 336;
  CFIndex v23 = &v26;
  uint64_t v19 = std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>((uint64_t **)(v15 + 40), &v26, (uint64_t)&std::piecewise_construct, &v23);
  return std::string::operator=((std::string *)(v19 + 5), a4);
}

void sub_224DA7DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10, uint64_t a11, uint64_t a12, uint64_t a13, char *a14)
{
  std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy(v14, a14);
  std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

uint64_t QP::ParserGrammar::loadSuggestions(QP::ParserGrammar *this, CFDictionaryRef theDict, const __CFString *key)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  uint64_t result = CFDictionaryContainsKey(theDict, key);
  if (result)
  {
    char v45 = this;
    uint64_t v7 = *((void *)this + 5);
    uint64_t v8 = *(void *)(v7 + 152);
    uint64_t v9 = 144;
    if (!*(void *)(v7 + 144)) {
      uint64_t v9 = 128;
    }
    char v49 = *(const void **)(v7 + v9);
    uint64_t v10 = 152;
    if (!v8) {
      uint64_t v10 = 136;
    }
    uint64_t v11 = *(const void **)(v7 + v10);
    uint64_t result = (uint64_t)CFDictionaryGetValue(theDict, key);
    if (result)
    {
      CFDictionaryRef v12 = (const __CFDictionary *)result;
      CFTypeID v13 = CFGetTypeID((CFTypeRef)result);
      if (v13 != CFDictionaryGetTypeID()) {
        return 0;
      }
      uint64_t result = CFDictionaryContainsKey(v12, @"SUGGESTIONS");
      if (!result) {
        return result;
      }
      uint64_t result = (uint64_t)CFDictionaryGetValue(v12, @"SUGGESTIONS");
      if (!result) {
        return result;
      }
      CFDictionaryRef v14 = (const __CFDictionary *)result;
      CFTypeID v15 = CFGetTypeID((CFTypeRef)result);
      if (v15 != CFDictionaryGetTypeID()) {
        return 0;
      }
      v40[0] = v40;
      CFIndex Count = CFDictionaryGetCount(v14);
      MEMORY[0x270FA5388](Count);
      BOOL v17 = (const void **)((char *)v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
      if (v16 >= 0x200) {
        size_t v18 = 512;
      }
      else {
        size_t v18 = v16;
      }
      bzero((char *)v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), v18);
      CFDictionaryRef v42 = v14;
      CFDictionaryRef v41 = v17;
      CFDictionaryGetKeysAndValues(v14, v17, 0);
      if (Count >= 1)
      {
        uint64_t v19 = 0;
        while (1)
        {
          uint64_t v44 = v19;
          CFStringRef v46 = (const __CFString *)v41[v19];
          CFTypeRef Value = CFDictionaryGetValue(v42, v46);
          CFTypeID v20 = CFGetTypeID(Value);
          if (v20 == CFDictionaryGetTypeID())
          {
            CFIndex v48 = CFDictionaryGetCount((CFDictionaryRef)Value);
            v40[1] = v40;
            MEMORY[0x270FA5388](v48);
            CFArrayRef v22 = (const void **)((char *)v40 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
            size_t v23 = v21 >= 0x200 ? 512 : v21;
            bzero((char *)v40 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0), v23);
            char v47 = v22;
            CFDictionaryGetKeysAndValues((CFDictionaryRef)Value, v22, 0);
            if (v48 >= 1) {
              break;
            }
          }
LABEL_46:
          uint64_t v19 = v44 + 1;
          if (v44 + 1 == Count) {
            return 1;
          }
        }
        uint64_t v24 = 0;
        while (1)
        {
          CFStringRef v25 = (const __CFString *)v47[v24];
          CFDictionaryRef v26 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)Value, v25);
          CFDictionaryRef v27 = v26;
          if (v26)
          {
            CFTypeID v28 = CFGetTypeID(v26);
            if (v28 == CFDictionaryGetTypeID())
            {
              CFIndex v29 = CFDictionaryGetCount(v27);
              MEMORY[0x270FA5388](v29);
              uint64_t v31 = (const void **)((char *)v40 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
              size_t v32 = v30 >= 0x200 ? 512 : v30;
              bzero((char *)v40 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0), v32);
              CFDictionaryGetKeysAndValues(v27, v31, 0);
              if (v29 >= 1) {
                break;
              }
            }
          }
LABEL_45:
          if (++v24 == v48) {
            goto LABEL_46;
          }
        }
        while (1)
        {
          CFStringRef v33 = (const __CFString *)*v31;
          CFDictionaryRef v34 = (const __CFDictionary *)CFDictionaryGetValue(v27, *v31);
          CFDictionaryRef v35 = v34;
          if (v34)
          {
            CFTypeID v36 = CFGetTypeID(v34);
            if (v36 == CFDictionaryGetTypeID())
            {
              if (CFDictionaryContainsKey(v35, v11))
              {
                CFStringRef v37 = (const __CFString *)CFDictionaryGetValue(v35, v11);
                CFStringRef v38 = v37;
                if (v37) {
                  goto LABEL_35;
                }
              }
              else if (CFDictionaryContainsKey(v35, v49))
              {
                CFStringRef v37 = (const __CFString *)CFDictionaryGetValue(v35, v49);
                CFStringRef v38 = v37;
                if (v37)
                {
LABEL_35:
                  CFTypeID v39 = CFGetTypeID(v37);
                  if (v39 == CFStringGetTypeID())
                  {
                    QP::getUTF8StringFromCFString(v46, &v57);
                    QP::getUTF8StringFromCFString(v25, v55);
                    QP::getUTF8StringFromCFString(v33, v53);
                    QP::getUTF8StringFromCFString(v38, v51);
                    QP::ParserGrammar::setSuggestion((uint64_t)v45, &v57, (uint64_t)v55, (uint64_t)v53, (uint64_t)v51);
                    if (v52 < 0) {
                      operator delete(v51[0]);
                    }
                    if (v54 < 0) {
                      operator delete(v53[0]);
                    }
                    if (v56 < 0) {
                      operator delete(v55[0]);
                    }
                    if (v58 < 0) {
                      operator delete((void *)v57);
                    }
                  }
                }
              }
            }
          }
          ++v31;
          if (!--v29) {
            goto LABEL_45;
          }
        }
      }
      return 1;
    }
  }
  return result;
}

void sub_224DA826C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 169) < 0) {
    operator delete(*(void **)(v1 - 192));
  }
  if (*(char *)(v1 - 145) < 0) {
    operator delete(*(void **)(v1 - 168));
  }
  if (*(char *)(v1 - 121) < 0) {
    operator delete(*(void **)(v1 - 144));
  }
  if (*(char *)(v1 - 97) < 0) {
    operator delete(*(void **)(v1 - 120));
  }
  _Unwind_Resume(exception_object);
}

void QP::ParserGrammar::setSuggestion(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int16 v23 = QP::ParserGrammar::symbolID(a1, a3);
  unsigned __int16 v9 = QP::ParserGrammar::symbolID(a1, a4);
  unsigned __int16 v22 = v9;
  uint64_t v10 = (uint64_t **)(a1 + 448);
  if ((void **)(a1 + 456) == std::__tree<std::string>::find<std::string>(a1 + 448, (void **)a2))
  {
    size_t v18 = 0;
    uint64_t v19 = 0;
    BOOL v17 = &v18;
    std::pair<std::string,std::map<std::string,std::set<std::string>>>::pair[abi:ne180100]<std::string const&,std::map<std::string,std::set<std::string>>,0>(&__p, a2, (std::string::size_type *)&v17);
    std::__tree<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>>(v10, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
    std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::string>>>>::destroy((uint64_t)v21, (void *)v21[1]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::string>>>>::destroy((uint64_t)&v17, v18);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    CFDictionaryRef v14 = std::__tree<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, (void **)a2, (uint64_t)&std::piecewise_construct, (long long **)&__p);
    size_t v18 = 0;
    uint64_t v19 = 0;
    BOOL v17 = &v18;
    LOWORD(__p.__r_.__value_.__l.__data_) = v23;
    __p.__r_.__value_.__r.__words[2] = 0;
    v21[0] = 0;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)&__p.__r_.__value_.__r.__words[2];
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__emplace_unique_key_args<unsigned short,std::pair<unsigned short,std::set<unsigned short>>>((uint64_t)(v14 + 7), (unsigned __int16 *)&__p, (uint64_t)&__p);
    std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy((uint64_t)&__p.__r_.__value_.__l.__size_, (char *)__p.__r_.__value_.__r.__words[2]);
    std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy((uint64_t)&v17, v18);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    CFTypeID v15 = std::__tree<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, (void **)a2, (uint64_t)&std::piecewise_construct, (long long **)&__p);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v23;
    unint64_t v16 = std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>((uint64_t **)v15 + 7, &v23, (uint64_t)&std::piecewise_construct, &__p)+ 5;
    LOWORD(__p.__r_.__value_.__l.__data_) = v9;
    if (*(char *)(a5 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p.__r_.__value_.__r.__words[1], *(const std::string::value_type **)a5, *(void *)(a5 + 8));
    }
    else
    {
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = *(_OWORD *)a5;
      v21[0] = *(void *)(a5 + 16);
    }
    std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::__emplace_unique_key_args<unsigned short,std::pair<unsigned short,std::string>>(v16, (unsigned __int16 *)&__p, (uint64_t)&__p);
    if (SHIBYTE(v21[0]) < 0) {
      operator delete((void *)__p.__r_.__value_.__l.__size_);
    }
  }
  else
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    uint64_t v11 = std::__tree<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 448), (void **)a2, (uint64_t)&std::piecewise_construct, (long long **)&__p);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v23;
    CFDictionaryRef v12 = std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>((uint64_t **)v11 + 7, &v23, (uint64_t)&std::piecewise_construct, &__p);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v22;
    CFTypeID v13 = std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(v12 + 5, &v22, (uint64_t)&std::piecewise_construct, &__p);
    std::string::operator=((std::string *)(v13 + 5), (const std::string *)a5);
  }
}

void sub_224DA8534(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t QP::ParserGrammar::loadTranslations(const void **this, CFDictionaryRef theDict, const __CFString *key)
{
  uint64_t result = CFDictionaryContainsKey(theDict, key);
  if (result)
  {
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, key);
    uint64_t result = CFDictionaryContainsKey(Value, @"TRANSLATIONS");
    if (result)
    {
      CFDictionaryRef v8 = (const __CFDictionary *)CFDictionaryGetValue(Value, @"TRANSLATIONS");
      CFDictionaryRef Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], v8);
      nlp::CFScopedPtr<__CFDictionary const*>::reset(this + 8, Copy);
      return 1;
    }
  }
  return result;
}

uint64_t QP::ParserGrammar::loadReplacements(QP::ParserGrammar *this, CFDictionaryRef theDict, const __CFString *key)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t result = CFDictionaryContainsKey(theDict, key);
  if (result)
  {
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, key);
    uint64_t result = CFDictionaryContainsKey(Value, @"REPLACEMENTS");
    if (result)
    {
      uint64_t result = (uint64_t)CFDictionaryGetValue(Value, @"REPLACEMENTS");
      if (result)
      {
        CFDictionaryRef v8 = (const __CFDictionary *)result;
        CFTypeID v9 = CFGetTypeID((CFTypeRef)result);
        if (v9 == CFDictionaryGetTypeID())
        {
          CFIndex Count = CFDictionaryGetCount(v8);
          MEMORY[0x270FA5388](Count);
          unint64_t v11 = (8 * Count + 15) & 0xFFFFFFFFFFFFFFF0;
          CFDictionaryRef v12 = (const __CFString **)((char *)&v18[-1] - v11);
          if ((unint64_t)(8 * Count) >= 0x200) {
            size_t v13 = 512;
          }
          else {
            size_t v13 = 8 * Count;
          }
          bzero((char *)&v18[-1] - v11, v13);
          MEMORY[0x270FA5388](v14);
          CFTypeID v15 = (const __CFString **)((char *)&v18[-1] - v11);
          bzero((char *)&v18[-1] - v11, v13);
          CFDictionaryGetKeysAndValues(v8, (const void **)((char *)&v18[-1] - v11), (const void **)((char *)&v18[-1] - v11));
          if (Count >= 1)
          {
            do
            {
              CFStringRef v16 = *v15;
              QP::getUTF8StringFromCFString(*v12, v20);
              QP::getUTF8StringFromCFString(v16, v18);
              QP::ParserGrammar::setReplacement((uint64_t)this, (uint64_t)v20, (uint64_t)v18);
              if (v19 < 0) {
                operator delete(v18[0]);
              }
              if (v21 < 0) {
                operator delete(v20[0]);
              }
              ++v15;
              ++v12;
              --Count;
            }
            while (Count);
          }
          return 1;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

void sub_224DA8800(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 97) < 0) {
    operator delete(*(void **)(v1 - 120));
  }
  if (*(char *)(v1 - 73) < 0) {
    operator delete(*(void **)(v1 - 96));
  }
  _Unwind_Resume(exception_object);
}

uint64_t **QP::ParserGrammar::setReplacement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int SymbolID = QP::ParserGrammar::getSymbolID(a1, a2);
  unsigned int v7 = SymbolID | (QP::ParserGrammar::getSymbolID(a1, a3) << 16);
  return std::__tree<std::__value_type<unsigned short,unsigned short>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,unsigned short>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,unsigned short>>>::__emplace_unique_key_args<unsigned short,std::pair<unsigned short,unsigned short>>((uint64_t **)(a1 + 304), (unsigned __int16 *)&v7, &v7);
}

uint64_t QP::ParserGrammar::loadIgnoredTerms(QP::ParserGrammar *this, CFDictionaryRef theDict, const __CFString *key)
{
  uint64_t result = CFDictionaryContainsKey(theDict, key);
  if (result)
  {
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, key);
    uint64_t result = CFDictionaryContainsKey(Value, @"IGNORE");
    if (result)
    {
      CFArrayRef v8 = (const __CFArray *)CFDictionaryGetValue(Value, @"IGNORE");
      CFIndex Count = CFArrayGetCount(v8);
      if (Count >= 1)
      {
        CFIndex v10 = Count;
        CFIndex v11 = 0;
        CFDictionaryRef v12 = (uint64_t **)((char *)this + 112);
        do
        {
          CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v8, v11);
          QP::getUTF8StringFromCFString(ValueAtIndex, __p);
          unint64_t v14 = v17;
          unsigned __int8 v15 = v17;
          if ((v17 & 0x80u) != 0) {
            unint64_t v14 = (unint64_t)__p[1];
          }
          if (v14)
          {
            std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v12, __p, (uint64_t)__p);
            unsigned __int8 v15 = v17;
          }
          if ((v15 & 0x80) != 0) {
            operator delete(__p[0]);
          }
          ++v11;
        }
        while (v10 != v11);
      }
      return 1;
    }
  }
  return result;
}

void sub_224DA8990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

const void *QP::ParserGrammar::fallbackCompletionKeys(QP::ParserGrammar *this, const __CFString *key)
{
  if (QP::ParserGrammar::fallbackCompletionKeys(__CFString const*)const::onceToken == -1)
  {
    if (!key) {
      return 0;
    }
  }
  else
  {
    dispatch_once(&QP::ParserGrammar::fallbackCompletionKeys(__CFString const*)const::onceToken, &__block_literal_global_4);
    if (!key) {
      return 0;
    }
  }
  if (!CFDictionaryContainsKey((CFDictionaryRef)QP::ParserGrammar::fallbackCompletionKeys(__CFString const*)const::gCompletionKeys, key))return 0; {
  CFDictionaryRef v3 = (const __CFDictionary *)QP::ParserGrammar::fallbackCompletionKeys(__CFString const*)const::gCompletionKeys;
  }
  return CFDictionaryGetValue(v3, key);
}

void ___ZNK2QP13ParserGrammar22fallbackCompletionKeysEPK10__CFString_block_invoke()
{
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  CFArrayAppendValue(Mutable, @"kQPTokenDate:kQPDate:ANYDATE:RelativeTodayDate");
  CFArrayAppendValue(Mutable, @"kQPTokenDate:kQPDate:ANYDATE:RelativeYesterdayDate");
  CFArrayAppendValue(Mutable, @"kQPTokenDate:kQPDate:ANYDATE:RelativeThisWeekDate");
  CFArrayAppendValue(Mutable, @"kQPTokenDate:kQPDate:ANYDATE:RelativeLastWeekDate");
  CFArrayAppendValue(Mutable, @"kQPTokenDate:kQPDate:ANYDATE:RelativeThisMonthDate");
  CFArrayAppendValue(Mutable, @"kQPTokenDate:kQPDate:ANYDATE:RelativeLastMonthDate");
  CFArrayAppendValue(Mutable, @"kQPTokenDate:kQPDate:ANYDATE:RelativeThisYearDate");
  CFArrayAppendValue(Mutable, @"kQPTokenDate:kQPDate:ANYDATE:RelativeLastYearDate");
  CFArrayAppendValue(Mutable, @"kQPTokenDate:kQPDate:ANYDATE:RelativeMonthDate1");
  CFArrayAppendValue(Mutable, @"kQPTokenDate:kQPDate:ANYDATE:RelativeMonthDate2");
  CFArrayAppendValue(Mutable, @"kQPTokenDate:kQPDate:ANYDATE:RelativeMonthDate3");
  CFArrayAppendValue(Mutable, @"kQPTokenDate:kQPDate:ANYDATE:RelativeMonthDate4");
  CFArrayAppendValue(Mutable, @"kQPTokenDate:kQPDate:ANYDATE:RelativeMonthDate5");
  CFArrayAppendValue(Mutable, @"kQPTokenDate:kQPDate:ANYDATE:RelativeMonthDate6");
  CFArrayAppendValue(Mutable, @"kQPTokenDate:kQPDate:ANYDATE:RelativeMonthDate7");
  CFArrayAppendValue(Mutable, @"kQPTokenDate:kQPDate:ANYDATE:RelativeMonthDate8");
  CFArrayAppendValue(Mutable, @"kQPTokenDate:kQPDate:ANYDATE:RelativeMonthDate9");
  CFArrayAppendValue(Mutable, @"kQPTokenDate:kQPDate:ANYDATE:RelativeMonthDate10");
  CFArrayAppendValue(Mutable, @"kQPTokenDate:kQPDate:ANYDATE:RelativeMonthDate11");
  CFArrayAppendValue(Mutable, @"kQPTokenDate:kQPDate:ANYDATE:RelativeMonthDate12");
  CFMutableStringRef MutableCopy = CFArrayCreateMutableCopy(v0, 0, Mutable);
  CFArrayAppendValue(MutableCopy, @"kQPTokenFlagColorAction:kQPFlagColorAction:PROACTION:FlagColorStatus-0");
  CFArrayAppendValue(MutableCopy, @"kQPTokenFlagColorAction:kQPFlagColorAction:PROACTION:FlagColorStatus-1");
  CFArrayAppendValue(MutableCopy, @"kQPTokenFlagColorAction:kQPFlagColorAction:PROACTION:FlagColorStatus-2");
  CFArrayAppendValue(MutableCopy, @"kQPTokenFlagColorAction:kQPFlagColorAction:PROACTION:FlagColorStatus-3");
  CFArrayAppendValue(MutableCopy, @"kQPTokenFlagColorAction:kQPFlagColorAction:PROACTION:FlagColorStatus-4");
  CFArrayAppendValue(MutableCopy, @"kQPTokenFlagColorAction:kQPFlagColorAction:PROACTION:FlagColorStatus-5");
  CFArrayAppendValue(MutableCopy, @"kQPTokenFlagColorAction:kQPFlagColorAction:PROACTION:FlagColorStatus-6");
  CFArrayAppendValue(MutableCopy, @"kQPTokenFlaggedAction:kQPFlaggedAction:PROACTION:FlaggedStatus-0");
  CFArrayAppendValue(MutableCopy, @"kQPTokenFlaggedAction:kQPFlaggedAction:PROACTION:FlaggedStatus-1");
  CFArrayAppendValue(MutableCopy, @"kQPTokenRepliedAction:kQPRepliedAction:PROACTION:RepliedStatus-0");
  CFArrayAppendValue(MutableCopy, @"kQPTokenRepliedAction:kQPRepliedAction:PROACTION:RepliedStatus-1");
  CFArrayAppendValue(MutableCopy, @"kQPTokenReadAction:kQPReadAction:PROACTION:ReadStatus-0");
  CFArrayAppendValue(MutableCopy, @"kQPTokenReadAction:kQPReadAction:PROACTION:ReadStatus-1");
  CFArrayAppendValue(MutableCopy, @"kQPTokenSubjectAction:kQPSubjectAction:PROACTION:SubjectStatus-1");
  CFArrayAppendValue(MutableCopy, @"kQPTokenSubjectAction:kQPSubjectAction:PROACTION:SubjectStatus-0");
  CFArrayAppendValue(MutableCopy, @"kQPTokenIgnoredAction:kQPIgnoredAction:PROACTION:ActionIgnored");
  CFArrayAppendValue(MutableCopy, @"kQPTokenMessage:kQPKind:KIND:KindMail");
  CFArrayAppendValue(MutableCopy, @"kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindAudio");
  CFArrayAppendValue(MutableCopy, @"kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindAudiobook");
  CFArrayAppendValue(MutableCopy, @"kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindAudioFormatAac");
  CFArrayAppendValue(MutableCopy, @"kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindAudioFormatAiff");
  CFArrayAppendValue(MutableCopy, @"kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindAudioFormatMp3");
  CFArrayAppendValue(MutableCopy, @"kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindBook");
  CFArrayAppendValue(MutableCopy, @"kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindContacts");
  CFArrayAppendValue(MutableCopy, @"kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindContactsFormatVcf");
  CFArrayAppendValue(MutableCopy, @"kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindDocument");
  CFArrayAppendValue(MutableCopy, @"kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindDocumentFormatDoc");
  CFArrayAppendValue(MutableCopy, @"kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindDocumentFormatIwork");
  CFArrayAppendValue(MutableCopy, @"kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindDocumentFormatPages");
  CFArrayAppendValue(MutableCopy, @"kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindDocumentFormatPass");
  CFArrayAppendValue(MutableCopy, @"kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindDocumentFormatPdf");
  CFArrayAppendValue(MutableCopy, @"kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindEventFormatIcs");
  CFArrayAppendValue(MutableCopy, @"kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindFile");
  CFArrayAppendValue(MutableCopy, @"kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindFileFormatDat");
  CFArrayAppendValue(MutableCopy, @"kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindFileFormatPatch");
  CFArrayAppendValue(MutableCopy, @"kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindFileFormatTar");
  CFArrayAppendValue(MutableCopy, @"kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindImage");
  CFArrayAppendValue(MutableCopy, @"kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindImageFormatGif");
  CFArrayAppendValue(MutableCopy, @"kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindImageFormatHeic");
  CFArrayAppendValue(MutableCopy, @"kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindImageFormatJpg");
  CFArrayAppendValue(MutableCopy, @"kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindImageFormatPng");
  CFArrayAppendValue(MutableCopy, @"kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindImageFormatRaw");
  CFArrayAppendValue(MutableCopy, @"kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindImageFormatTiff");
  CFArrayAppendValue(MutableCopy, @"kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindPresentation");
  CFArrayAppendValue(MutableCopy, @"kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindPresentationFormatKey");
  CFArrayAppendValue(MutableCopy, @"kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindPresentationFormatPpt");
  CFArrayAppendValue(MutableCopy, @"kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindSource");
  CFArrayAppendValue(MutableCopy, @"kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindSourceFormatJava");
  CFArrayAppendValue(MutableCopy, @"kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindSpreadsheet");
  CFArrayAppendValue(MutableCopy, @"kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindSpreadsheetFormatNumbers");
  CFArrayAppendValue(MutableCopy, @"kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindSpreadsheetFormatXls");
  CFArrayAppendValue(MutableCopy, @"kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindTextFormatRtf");
  CFArrayAppendValue(MutableCopy, @"kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindTextFormatTxt");
  CFArrayAppendValue(MutableCopy, @"kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindVideo");
  CFArrayAppendValue(MutableCopy, @"kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindVideoFormatMov");
  CFArrayAppendValue(MutableCopy, @"kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindVideoFormatMp4");
  CFArrayAppendValue(MutableCopy, @"kQPTokenAttachment:kQPAttachedKind:PROATTACHED:KindVideoFormatQuicktime");
  CFArrayAppendValue(MutableCopy, @"kQPTokenAttachmentAny:kQPAttachment:PROATTACHMOD:KindAttachment");
  CFDictionaryRef v3 = CFDictionaryCreateMutable(v0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  CFDictionarySetValue(v3, @"Search", Mutable);
  CFDictionarySetValue(v3, @"Mail", MutableCopy);
  QP::ParserGrammar::fallbackCompletionKeys(__CFString const*)const::gCompletionKeys = (uint64_t)v3;
}

const void *QP::ParserGrammar::fallbackTokenKeys(QP::ParserGrammar *this, const __CFString *key)
{
  if (QP::ParserGrammar::fallbackTokenKeys(__CFString const*)const::onceToken == -1)
  {
    if (!key) {
      return 0;
    }
  }
  else
  {
    dispatch_once(&QP::ParserGrammar::fallbackTokenKeys(__CFString const*)const::onceToken, &__block_literal_global_320);
    if (!key) {
      return 0;
    }
  }
  if (!CFDictionaryContainsKey((CFDictionaryRef)QP::ParserGrammar::fallbackTokenKeys(__CFString const*)const::gTokenKeys, key))return 0; {
  CFDictionaryRef v3 = (const __CFDictionary *)QP::ParserGrammar::fallbackTokenKeys(__CFString const*)const::gTokenKeys;
  }
  return CFDictionaryGetValue(v3, key);
}

void ___ZNK2QP13ParserGrammar17fallbackTokenKeysEPK10__CFString_block_invoke()
{
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  CFArrayAppendValue(Mutable, @"TOKEN:kQPTokenDate");
  CFMutableStringRef MutableCopy = CFArrayCreateMutableCopy(v0, 0, Mutable);
  CFArrayAppendValue(MutableCopy, @"TOKEN:kQPTokenAttachment");
  CFArrayAppendValue(MutableCopy, @"TOKEN:kQPTokenAttachmentAny");
  CFArrayAppendValue(MutableCopy, @"TOKEN:kQPTokenMessage");
  CFArrayAppendValue(MutableCopy, @"TOKEN:kQPTokenFlagColorAction");
  CFArrayAppendValue(MutableCopy, @"TOKEN:kQPTokenFlaggedAction");
  CFArrayAppendValue(MutableCopy, @"TOKEN:kQPTokenReadAction");
  CFArrayAppendValue(MutableCopy, @"TOKEN:kQPTokenRepliedAction");
  CFArrayAppendValue(MutableCopy, @"TOKEN:kQPTokenSubjectAction");
  CFArrayAppendValue(MutableCopy, @"TOKEN:kQPTokenIgnoredAction");
  CFDictionaryRef v3 = CFDictionaryCreateMutable(v0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  CFDictionarySetValue(v3, @"Search", Mutable);
  CFDictionarySetValue(v3, @"Mail", MutableCopy);
  QP::ParserGrammar::fallbackTokenKeys(__CFString const*)const::gTokenKeys = (uint64_t)v3;
}

void QP::ParserGrammar::addSymbol(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    if (!*(void *)(a2 + 8)) {
      return;
    }
  }
  else if (!*(unsigned char *)(a2 + 23))
  {
    return;
  }
  if ((void **)(a1 + 168) == std::__tree<std::string>::find<std::string>(a1 + 160, (void **)a2))
  {
    __int16 v4 = *(_WORD *)(a1 + 152);
    int v5 = *(char *)(a2 + 23);
    std::string::size_type v6 = *(void *)(a2 + 8);
    if (v5 >= 0) {
      size_t v7 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      size_t v7 = *(void *)(a2 + 8);
    }
    if (v7 == strlen(kQPSymbolNone[0]))
    {
      CFArrayRef v8 = v5 >= 0 ? (const void *)a2 : *(const void **)a2;
      if (!memcmp(v8, kQPSymbolNone[0], v7)) {
        __int16 v4 = kQPSymbolIdNone;
      }
    }
    if (v7 == strlen(kQPSymbolRoot[0]))
    {
      CFTypeID v9 = v5 >= 0 ? (const void *)a2 : *(const void **)a2;
      if (!memcmp(v9, kQPSymbolRoot[0], v7)) {
        __int16 v4 = kQPSymbolIdRoot;
      }
    }
    if (v7 == strlen(kQPSymbolTerminal[0]))
    {
      CFIndex v10 = v5 >= 0 ? (const void *)a2 : *(const void **)a2;
      if (!memcmp(v10, kQPSymbolTerminal[0], v7)) {
        __int16 v4 = kQPSymbolIdTerminal;
      }
    }
    if (v7 == strlen(kQPSymbolAirline[0]))
    {
      CFIndex v11 = v5 >= 0 ? (const void *)a2 : *(const void **)a2;
      if (!memcmp(v11, kQPSymbolAirline[0], v7)) {
        __int16 v4 = kQPSymbolIdAirline;
      }
    }
    if (v7 == strlen(kQPSymbolAirport[0]))
    {
      CFDictionaryRef v12 = v5 >= 0 ? (const void *)a2 : *(const void **)a2;
      if (!memcmp(v12, kQPSymbolAirport[0], v7)) {
        __int16 v4 = kQPSymbolIdAirport;
      }
    }
    if (v7 == strlen(kQPSymbolAirportCode[0]))
    {
      size_t v13 = v5 >= 0 ? (const void *)a2 : *(const void **)a2;
      if (!memcmp(v13, kQPSymbolAirportCode[0], v7)) {
        __int16 v4 = kQPSymbolIdAirportCode;
      }
    }
    if (v7 == strlen(kQPSymbolAppName[0]))
    {
      unint64_t v14 = v5 >= 0 ? (const void *)a2 : *(const void **)a2;
      if (!memcmp(v14, kQPSymbolAppName[0], v7)) {
        __int16 v4 = kQPSymbolIdAppName;
      }
    }
    if (v7 == strlen(kQPSymbolBundle[0]))
    {
      unsigned __int8 v15 = v5 >= 0 ? (const void *)a2 : *(const void **)a2;
      if (!memcmp(v15, kQPSymbolBundle[0], v7)) {
        __int16 v4 = kQPSymbolIdBundle;
      }
    }
    if (v7 == strlen(kQPSymbolCities[0]))
    {
      CFStringRef v16 = v5 >= 0 ? (const void *)a2 : *(const void **)a2;
      if (!memcmp(v16, kQPSymbolCities[0], v7)) {
        __int16 v4 = kQPSymbolIdCities;
      }
    }
    if (v7 == strlen(kQPSymbolField[0]))
    {
      unsigned __int8 v17 = v5 >= 0 ? (const void *)a2 : *(const void **)a2;
      if (!memcmp(v17, kQPSymbolField[0], v7)) {
        __int16 v4 = kQPSymbolIdField;
      }
    }
    if (v7 == strlen(kQPSymbolFlightCode[0]))
    {
      size_t v18 = v5 >= 0 ? (const void *)a2 : *(const void **)a2;
      if (!memcmp(v18, kQPSymbolFlightCode[0], v7)) {
        __int16 v4 = kQPSymbolIdFlightCode;
      }
    }
    if (v7 == strlen(kQPSymbolPerson[0]))
    {
      char v19 = v5 >= 0 ? (const void *)a2 : *(const void **)a2;
      if (!memcmp(v19, kQPSymbolPerson[0], v7)) {
        __int16 v4 = kQPSymbolIdPerson;
      }
    }
    if (v7 == strlen(kQPSymbolLocation[0]))
    {
      CFTypeID v20 = v5 >= 0 ? (const void *)a2 : *(const void **)a2;
      if (!memcmp(v20, kQPSymbolLocation[0], v7)) {
        __int16 v4 = kQPSymbolIdLocation;
      }
    }
    if (v7 == strlen(kQPSymbolActionDefault[0]))
    {
      char v21 = v5 >= 0 ? (const void *)a2 : *(const void **)a2;
      if (!memcmp(v21, kQPSymbolActionDefault[0], v7)) {
        __int16 v4 = kQPSymbolIdActionDefault;
      }
    }
    if (v7 == strlen(kQPSymbolDefault))
    {
      uint64_t v22 = v5 >= 0 ? (const void *)a2 : *(const void **)a2;
      if (!memcmp(v22, kQPSymbolDefault, v7)) {
        __int16 v4 = kQPSymbolIdDefault;
      }
    }
    if (v5 < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v174, *(const std::string::value_type **)a2, v6);
    }
    else
    {
      *(_OWORD *)&v174.__first_ = *(_OWORD *)a2;
      v174.__end_ = *(std::__split_buffer<std::string>::pointer *)(a2 + 16);
    }
    LOWORD(v174.__end_cap_.__value_) = v4;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__emplace_unique_key_args<std::string,std::pair<std::string,unsigned short>>((uint64_t **)(a1 + 160), (void **)&v174.__first_, (uint64_t)&v174);
    if (SHIBYTE(v174.__end_) < 0) {
      operator delete(v174.__first_);
    }
    LOWORD(v174.__first_) = v4;
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v174.__begin_, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&v174.__begin_ = *(_OWORD *)a2;
      v174.__end_cap_.__value_ = *(std::string **)(a2 + 16);
    }
    std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::__emplace_unique_key_args<unsigned short,std::pair<unsigned short,std::string>>((uint64_t **)(a1 + 136), (unsigned __int16 *)&v174, (uint64_t)&v174);
    if (SHIBYTE(v174.__end_cap_.__value_) < 0) {
      operator delete(v174.__begin_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v174, "Time");
    BOOL v23 = QP::endswith((uint64_t *)a2, (uint64_t *)&v174);
    BOOL v24 = v23;
    if (SHIBYTE(v174.__end_) < 0)
    {
      operator delete(v174.__first_);
      if (v24)
      {
LABEL_111:
        if (*(char *)(a2 + 23) < 0) {
          std::string::__init_copy_ctor_external(&v173, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
        }
        else {
          std::string v173 = *(std::string *)a2;
        }
        LOWORD(v174.__first_) = 0;
        LOWORD(v174.__first_) = QP::ParserGrammar::getSymbolID(a1, (uint64_t)&v173);
        std::__tree<unsigned short>::__emplace_unique_key_args<unsigned short,unsigned short const&>((uint64_t **)(a1 + 544), (unsigned __int16 *)&v174, &v174);
        if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
        {
          CFDictionaryRef v27 = &v173;
LABEL_169:
          operator delete(v27->__r_.__value_.__l.__data_);
          goto LABEL_170;
        }
        goto LABEL_170;
      }
    }
    else if (v23)
    {
      goto LABEL_111;
    }
    std::string::basic_string[abi:ne180100]<0>(&v174, "Period");
    BOOL v25 = QP::endswith((uint64_t *)a2, (uint64_t *)&v174);
    BOOL v26 = v25;
    if (SHIBYTE(v174.__end_) < 0)
    {
      operator delete(v174.__first_);
      if (v26)
      {
LABEL_116:
        if (*(char *)(a2 + 23) < 0) {
          std::string::__init_copy_ctor_external(&v172, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
        }
        else {
          std::string v172 = *(std::string *)a2;
        }
        LOWORD(v174.__first_) = 0;
        LOWORD(v174.__first_) = QP::ParserGrammar::getSymbolID(a1, (uint64_t)&v172);
        std::__tree<unsigned short>::__emplace_unique_key_args<unsigned short,unsigned short const&>((uint64_t **)(a1 + 568), (unsigned __int16 *)&v174, &v174);
        if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0)
        {
          CFDictionaryRef v27 = &v172;
          goto LABEL_169;
        }
LABEL_170:
        std::string::basic_string[abi:ne180100]<0>(&v174, "Extension");
        BOOL v33 = QP::endswith((uint64_t *)a2, (uint64_t *)&v174);
        BOOL v34 = v33;
        if (SHIBYTE(v174.__end_) < 0)
        {
          operator delete(v174.__first_);
          if (!v34)
          {
LABEL_179:
            memset(&__p, 0, sizeof(__p));
            std::string::basic_string[abi:ne180100]<0>(v163, "IsBy");
            std::vector<std::string>::pointer end = __p.__end_;
            if (__p.__end_ >= __p.__end_cap_.__value_)
            {
              unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
              unint64_t v38 = v37 + 1;
              if (v37 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              }
              if (0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) > v38) {
                unint64_t v38 = 0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) >= 0x555555555555555) {
                unint64_t v39 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v39 = v38;
              }
              v174.__end_cap_.__value_ = (std::allocator<std::string> *)&__p.__end_cap_;
              if (v39) {
                char v40 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p.__end_cap_, v39);
              }
              else {
                char v40 = 0;
              }
              CFDictionaryRef v41 = v40 + v37;
              v174.__first_ = v40;
              v174.__begin_ = v41;
              v174.__end_cap_.__value_ = &v40[v39];
              long long v42 = *(_OWORD *)v163;
              v41->__r_.__value_.__r.__words[2] = v164;
              *(_OWORD *)&v41->__r_.__value_.__l.__data_ = v42;
              v163[1] = 0;
              std::string::size_type v164 = 0;
              v163[0] = 0;
              v174.__end_ = v41 + 1;
              std::vector<std::string>::__swap_out_circular_buffer(&__p, &v174);
              char v43 = __p.__end_;
              std::__split_buffer<std::string>::~__split_buffer(&v174);
              __p.__end_ = v43;
              if (SHIBYTE(v164) < 0) {
                operator delete(v163[0]);
              }
            }
            else
            {
              long long v36 = *(_OWORD *)v163;
              __p.__end_->__r_.__value_.__r.__words[2] = v164;
              *(_OWORD *)&end->__r_.__value_.__l.__data_ = v36;
              __p.__end_ = end + 1;
            }
            std::string::basic_string[abi:ne180100]<0>(v163, "IsIn");
            std::vector<std::string>::pointer v44 = __p.__end_;
            if (__p.__end_ >= __p.__end_cap_.__value_)
            {
              unint64_t v46 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
              unint64_t v47 = v46 + 1;
              if (v46 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              }
              if (0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) > v47) {
                unint64_t v47 = 0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) >= 0x555555555555555) {
                unint64_t v48 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v48 = v47;
              }
              v174.__end_cap_.__value_ = (std::allocator<std::string> *)&__p.__end_cap_;
              if (v48) {
                char v49 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p.__end_cap_, v48);
              }
              else {
                char v49 = 0;
              }
              uint64_t v50 = v49 + v46;
              v174.__first_ = v49;
              v174.__begin_ = v50;
              v174.__end_cap_.__value_ = &v49[v48];
              long long v51 = *(_OWORD *)v163;
              v50->__r_.__value_.__r.__words[2] = v164;
              *(_OWORD *)&v50->__r_.__value_.__l.__data_ = v51;
              v163[1] = 0;
              std::string::size_type v164 = 0;
              v163[0] = 0;
              v174.__end_ = v50 + 1;
              std::vector<std::string>::__swap_out_circular_buffer(&__p, &v174);
              char v52 = __p.__end_;
              std::__split_buffer<std::string>::~__split_buffer(&v174);
              __p.__end_ = v52;
              if (SHIBYTE(v164) < 0) {
                operator delete(v163[0]);
              }
            }
            else
            {
              long long v45 = *(_OWORD *)v163;
              __p.__end_->__r_.__value_.__r.__words[2] = v164;
              *(_OWORD *)&v44->__r_.__value_.__l.__data_ = v45;
              __p.__end_ = v44 + 1;
            }
            std::string::basic_string[abi:ne180100]<0>(v163, "IsOf");
            std::vector<std::string>::pointer v53 = __p.__end_;
            if (__p.__end_ >= __p.__end_cap_.__value_)
            {
              unint64_t v55 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
              unint64_t v56 = v55 + 1;
              if (v55 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              }
              if (0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) > v56) {
                unint64_t v56 = 0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) >= 0x555555555555555) {
                unint64_t v57 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v57 = v56;
              }
              v174.__end_cap_.__value_ = (std::allocator<std::string> *)&__p.__end_cap_;
              if (v57) {
                char v58 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p.__end_cap_, v57);
              }
              else {
                char v58 = 0;
              }
              uint64_t v59 = v58 + v55;
              v174.__first_ = v58;
              v174.__begin_ = v59;
              v174.__end_cap_.__value_ = &v58[v57];
              long long v60 = *(_OWORD *)v163;
              v59->__r_.__value_.__r.__words[2] = v164;
              *(_OWORD *)&v59->__r_.__value_.__l.__data_ = v60;
              v163[1] = 0;
              std::string::size_type v164 = 0;
              v163[0] = 0;
              v174.__end_ = v59 + 1;
              std::vector<std::string>::__swap_out_circular_buffer(&__p, &v174);
              unsigned __int8 v61 = __p.__end_;
              std::__split_buffer<std::string>::~__split_buffer(&v174);
              __p.__end_ = v61;
              if (SHIBYTE(v164) < 0) {
                operator delete(v163[0]);
              }
            }
            else
            {
              long long v54 = *(_OWORD *)v163;
              __p.__end_->__r_.__value_.__r.__words[2] = v164;
              *(_OWORD *)&v53->__r_.__value_.__l.__data_ = v54;
              __p.__end_ = v53 + 1;
            }
            std::string::basic_string[abi:ne180100]<0>(v163, "IsOn");
            std::vector<std::string>::pointer v62 = __p.__end_;
            if (__p.__end_ >= __p.__end_cap_.__value_)
            {
              unint64_t v64 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
              unint64_t v65 = v64 + 1;
              if (v64 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              }
              if (0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) > v65) {
                unint64_t v65 = 0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) >= 0x555555555555555) {
                unint64_t v66 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v66 = v65;
              }
              v174.__end_cap_.__value_ = (std::allocator<std::string> *)&__p.__end_cap_;
              if (v66) {
                CFStringRef v67 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p.__end_cap_, v66);
              }
              else {
                CFStringRef v67 = 0;
              }
              CFStringRef v68 = v67 + v64;
              v174.__first_ = v67;
              v174.__begin_ = v68;
              v174.__end_cap_.__value_ = &v67[v66];
              long long v69 = *(_OWORD *)v163;
              v68->__r_.__value_.__r.__words[2] = v164;
              *(_OWORD *)&v68->__r_.__value_.__l.__data_ = v69;
              v163[1] = 0;
              std::string::size_type v164 = 0;
              v163[0] = 0;
              v174.__end_ = v68 + 1;
              std::vector<std::string>::__swap_out_circular_buffer(&__p, &v174);
              v70 = __p.__end_;
              std::__split_buffer<std::string>::~__split_buffer(&v174);
              __p.__end_ = v70;
              if (SHIBYTE(v164) < 0) {
                operator delete(v163[0]);
              }
            }
            else
            {
              long long v63 = *(_OWORD *)v163;
              __p.__end_->__r_.__value_.__r.__words[2] = v164;
              *(_OWORD *)&v62->__r_.__value_.__l.__data_ = v63;
              __p.__end_ = v62 + 1;
            }
            std::string::basic_string[abi:ne180100]<0>(v163, "IsAt");
            std::vector<std::string>::pointer v71 = __p.__end_;
            if (__p.__end_ >= __p.__end_cap_.__value_)
            {
              unint64_t v73 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
              unint64_t v74 = v73 + 1;
              if (v73 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              }
              if (0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) > v74) {
                unint64_t v74 = 0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) >= 0x555555555555555) {
                unint64_t v75 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v75 = v74;
              }
              v174.__end_cap_.__value_ = (std::allocator<std::string> *)&__p.__end_cap_;
              if (v75) {
                uint64_t v76 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p.__end_cap_, v75);
              }
              else {
                uint64_t v76 = 0;
              }
              v77 = v76 + v73;
              v174.__first_ = v76;
              v174.__begin_ = v77;
              v174.__end_cap_.__value_ = &v76[v75];
              long long v78 = *(_OWORD *)v163;
              v77->__r_.__value_.__r.__words[2] = v164;
              *(_OWORD *)&v77->__r_.__value_.__l.__data_ = v78;
              v163[1] = 0;
              std::string::size_type v164 = 0;
              v163[0] = 0;
              v174.__end_ = v77 + 1;
              std::vector<std::string>::__swap_out_circular_buffer(&__p, &v174);
              v79 = __p.__end_;
              std::__split_buffer<std::string>::~__split_buffer(&v174);
              __p.__end_ = v79;
              if (SHIBYTE(v164) < 0) {
                operator delete(v163[0]);
              }
            }
            else
            {
              long long v72 = *(_OWORD *)v163;
              __p.__end_->__r_.__value_.__r.__words[2] = v164;
              *(_OWORD *)&v71->__r_.__value_.__l.__data_ = v72;
              __p.__end_ = v71 + 1;
            }
            std::string::basic_string[abi:ne180100]<0>(v163, "IsFrom");
            std::vector<std::string>::pointer v80 = __p.__end_;
            if (__p.__end_ >= __p.__end_cap_.__value_)
            {
              unint64_t v82 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
              unint64_t v83 = v82 + 1;
              if (v82 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              }
              if (0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) > v83) {
                unint64_t v83 = 0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) >= 0x555555555555555) {
                unint64_t v84 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v84 = v83;
              }
              v174.__end_cap_.__value_ = (std::allocator<std::string> *)&__p.__end_cap_;
              if (v84) {
                uint64_t v85 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p.__end_cap_, v84);
              }
              else {
                uint64_t v85 = 0;
              }
              uint64_t v86 = v85 + v82;
              v174.__first_ = v85;
              v174.__begin_ = v86;
              v174.__end_cap_.__value_ = &v85[v84];
              long long v87 = *(_OWORD *)v163;
              v86->__r_.__value_.__r.__words[2] = v164;
              *(_OWORD *)&v86->__r_.__value_.__l.__data_ = v87;
              v163[1] = 0;
              std::string::size_type v164 = 0;
              v163[0] = 0;
              v174.__end_ = v86 + 1;
              std::vector<std::string>::__swap_out_circular_buffer(&__p, &v174);
              uint64_t v88 = __p.__end_;
              std::__split_buffer<std::string>::~__split_buffer(&v174);
              __p.__end_ = v88;
              if (SHIBYTE(v164) < 0) {
                operator delete(v163[0]);
              }
            }
            else
            {
              long long v81 = *(_OWORD *)v163;
              __p.__end_->__r_.__value_.__r.__words[2] = v164;
              *(_OWORD *)&v80->__r_.__value_.__l.__data_ = v81;
              __p.__end_ = v80 + 1;
            }
            std::string::basic_string[abi:ne180100]<0>(v163, "IsFor");
            std::vector<std::string>::pointer v89 = __p.__end_;
            if (__p.__end_ >= __p.__end_cap_.__value_)
            {
              unint64_t v91 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
              unint64_t v92 = v91 + 1;
              if (v91 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              }
              if (0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) > v92) {
                unint64_t v92 = 0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) >= 0x555555555555555) {
                unint64_t v93 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v93 = v92;
              }
              v174.__end_cap_.__value_ = (std::allocator<std::string> *)&__p.__end_cap_;
              if (v93) {
                v94 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p.__end_cap_, v93);
              }
              else {
                v94 = 0;
              }
              v95 = v94 + v91;
              v174.__first_ = v94;
              v174.__begin_ = v95;
              v174.__end_cap_.__value_ = &v94[v93];
              long long v96 = *(_OWORD *)v163;
              v95->__r_.__value_.__r.__words[2] = v164;
              *(_OWORD *)&v95->__r_.__value_.__l.__data_ = v96;
              v163[1] = 0;
              std::string::size_type v164 = 0;
              v163[0] = 0;
              v174.__end_ = v95 + 1;
              std::vector<std::string>::__swap_out_circular_buffer(&__p, &v174);
              v97 = __p.__end_;
              std::__split_buffer<std::string>::~__split_buffer(&v174);
              __p.__end_ = v97;
              if (SHIBYTE(v164) < 0) {
                operator delete(v163[0]);
              }
            }
            else
            {
              long long v90 = *(_OWORD *)v163;
              __p.__end_->__r_.__value_.__r.__words[2] = v164;
              *(_OWORD *)&v89->__r_.__value_.__l.__data_ = v90;
              __p.__end_ = v89 + 1;
            }
            std::string::basic_string[abi:ne180100]<0>(v163, "IsWith");
            std::vector<std::string>::pointer v98 = __p.__end_;
            if (__p.__end_ >= __p.__end_cap_.__value_)
            {
              unint64_t v100 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
              unint64_t v101 = v100 + 1;
              if (v100 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              }
              if (0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) > v101) {
                unint64_t v101 = 0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) >= 0x555555555555555) {
                unint64_t v102 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v102 = v101;
              }
              v174.__end_cap_.__value_ = (std::allocator<std::string> *)&__p.__end_cap_;
              if (v102) {
                v103 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p.__end_cap_, v102);
              }
              else {
                v103 = 0;
              }
              v104 = v103 + v100;
              v174.__first_ = v103;
              v174.__begin_ = v104;
              v174.__end_cap_.__value_ = &v103[v102];
              long long v105 = *(_OWORD *)v163;
              v104->__r_.__value_.__r.__words[2] = v164;
              *(_OWORD *)&v104->__r_.__value_.__l.__data_ = v105;
              v163[1] = 0;
              std::string::size_type v164 = 0;
              v163[0] = 0;
              v174.__end_ = v104 + 1;
              std::vector<std::string>::__swap_out_circular_buffer(&__p, &v174);
              v106 = __p.__end_;
              std::__split_buffer<std::string>::~__split_buffer(&v174);
              __p.__end_ = v106;
              if (SHIBYTE(v164) < 0) {
                operator delete(v163[0]);
              }
            }
            else
            {
              long long v99 = *(_OWORD *)v163;
              __p.__end_->__r_.__value_.__r.__words[2] = v164;
              *(_OWORD *)&v98->__r_.__value_.__l.__data_ = v99;
              __p.__end_ = v98 + 1;
            }
            std::string::basic_string[abi:ne180100]<0>(v163, "IsTo");
            std::vector<std::string>::pointer v107 = __p.__end_;
            if (__p.__end_ >= __p.__end_cap_.__value_)
            {
              unint64_t v109 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
              unint64_t v110 = v109 + 1;
              if (v109 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              }
              if (0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) > v110) {
                unint64_t v110 = 0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) >= 0x555555555555555) {
                unint64_t v111 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v111 = v110;
              }
              v174.__end_cap_.__value_ = (std::allocator<std::string> *)&__p.__end_cap_;
              if (v111) {
                v112 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p.__end_cap_, v111);
              }
              else {
                v112 = 0;
              }
              v113 = v112 + v109;
              v174.__first_ = v112;
              v174.__begin_ = v113;
              v174.__end_cap_.__value_ = &v112[v111];
              long long v114 = *(_OWORD *)v163;
              v113->__r_.__value_.__r.__words[2] = v164;
              *(_OWORD *)&v113->__r_.__value_.__l.__data_ = v114;
              v163[1] = 0;
              std::string::size_type v164 = 0;
              v163[0] = 0;
              v174.__end_ = v113 + 1;
              std::vector<std::string>::__swap_out_circular_buffer(&__p, &v174);
              BOOL v115 = __p.__end_;
              std::__split_buffer<std::string>::~__split_buffer(&v174);
              __p.__end_ = v115;
              if (SHIBYTE(v164) < 0) {
                operator delete(v163[0]);
              }
            }
            else
            {
              long long v108 = *(_OWORD *)v163;
              __p.__end_->__r_.__value_.__r.__words[2] = v164;
              *(_OWORD *)&v107->__r_.__value_.__l.__data_ = v108;
              __p.__end_ = v107 + 1;
            }
            std::string::basic_string[abi:ne180100]<0>(v163, "IsSince");
            std::vector<std::string>::pointer v116 = __p.__end_;
            if (__p.__end_ >= __p.__end_cap_.__value_)
            {
              unint64_t v118 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
              unint64_t v119 = v118 + 1;
              if (v118 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              }
              if (0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) > v119) {
                unint64_t v119 = 0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) >= 0x555555555555555) {
                unint64_t v120 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v120 = v119;
              }
              v174.__end_cap_.__value_ = (std::allocator<std::string> *)&__p.__end_cap_;
              if (v120) {
                uint64_t v121 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p.__end_cap_, v120);
              }
              else {
                uint64_t v121 = 0;
              }
              v122 = v121 + v118;
              v174.__first_ = v121;
              v174.__begin_ = v122;
              v174.__end_cap_.__value_ = &v121[v120];
              long long v123 = *(_OWORD *)v163;
              v122->__r_.__value_.__r.__words[2] = v164;
              *(_OWORD *)&v122->__r_.__value_.__l.__data_ = v123;
              v163[1] = 0;
              std::string::size_type v164 = 0;
              v163[0] = 0;
              v174.__end_ = v122 + 1;
              std::vector<std::string>::__swap_out_circular_buffer(&__p, &v174);
              v124 = __p.__end_;
              std::__split_buffer<std::string>::~__split_buffer(&v174);
              __p.__end_ = v124;
              if (SHIBYTE(v164) < 0) {
                operator delete(v163[0]);
              }
            }
            else
            {
              long long v117 = *(_OWORD *)v163;
              __p.__end_->__r_.__value_.__r.__words[2] = v164;
              *(_OWORD *)&v116->__r_.__value_.__l.__data_ = v117;
              __p.__end_ = v116 + 1;
            }
            std::string::basic_string[abi:ne180100]<0>(v163, "IsUntil");
            std::vector<std::string>::pointer v125 = __p.__end_;
            if (__p.__end_ >= __p.__end_cap_.__value_)
            {
              unint64_t v127 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
              unint64_t v128 = v127 + 1;
              if (v127 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              }
              if (0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) > v128) {
                unint64_t v128 = 0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) >= 0x555555555555555) {
                unint64_t v129 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v129 = v128;
              }
              v174.__end_cap_.__value_ = (std::allocator<std::string> *)&__p.__end_cap_;
              if (v129) {
                v130 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p.__end_cap_, v129);
              }
              else {
                v130 = 0;
              }
              v131 = v130 + v127;
              v174.__first_ = v130;
              v174.__begin_ = v131;
              v174.__end_cap_.__value_ = &v130[v129];
              long long v132 = *(_OWORD *)v163;
              v131->__r_.__value_.__r.__words[2] = v164;
              *(_OWORD *)&v131->__r_.__value_.__l.__data_ = v132;
              v163[1] = 0;
              std::string::size_type v164 = 0;
              v163[0] = 0;
              v174.__end_ = v131 + 1;
              std::vector<std::string>::__swap_out_circular_buffer(&__p, &v174);
              uint64_t v133 = __p.__end_;
              std::__split_buffer<std::string>::~__split_buffer(&v174);
              __p.__end_ = v133;
              if (SHIBYTE(v164) < 0) {
                operator delete(v163[0]);
              }
            }
            else
            {
              long long v126 = *(_OWORD *)v163;
              __p.__end_->__r_.__value_.__r.__words[2] = v164;
              *(_OWORD *)&v125->__r_.__value_.__l.__data_ = v126;
              __p.__end_ = v125 + 1;
            }
            std::string::basic_string[abi:ne180100]<0>(v163, "IsBefore");
            std::vector<std::string>::pointer v134 = __p.__end_;
            if (__p.__end_ >= __p.__end_cap_.__value_)
            {
              unint64_t v136 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
              unint64_t v137 = v136 + 1;
              if (v136 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              }
              if (0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) > v137) {
                unint64_t v137 = 0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) >= 0x555555555555555) {
                unint64_t v138 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v138 = v137;
              }
              v174.__end_cap_.__value_ = (std::allocator<std::string> *)&__p.__end_cap_;
              if (v138) {
                uint64_t v139 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p.__end_cap_, v138);
              }
              else {
                uint64_t v139 = 0;
              }
              v140 = v139 + v136;
              v174.__first_ = v139;
              v174.__begin_ = v140;
              v174.__end_cap_.__value_ = &v139[v138];
              long long v141 = *(_OWORD *)v163;
              v140->__r_.__value_.__r.__words[2] = v164;
              *(_OWORD *)&v140->__r_.__value_.__l.__data_ = v141;
              v163[1] = 0;
              std::string::size_type v164 = 0;
              v163[0] = 0;
              v174.__end_ = v140 + 1;
              std::vector<std::string>::__swap_out_circular_buffer(&__p, &v174);
              uint64_t v142 = __p.__end_;
              std::__split_buffer<std::string>::~__split_buffer(&v174);
              __p.__end_ = v142;
              if (SHIBYTE(v164) < 0) {
                operator delete(v163[0]);
              }
            }
            else
            {
              long long v135 = *(_OWORD *)v163;
              __p.__end_->__r_.__value_.__r.__words[2] = v164;
              *(_OWORD *)&v134->__r_.__value_.__l.__data_ = v135;
              __p.__end_ = v134 + 1;
            }
            std::string::basic_string[abi:ne180100]<0>(v163, "IsAfter");
            std::vector<std::string>::pointer v143 = __p.__end_;
            if (__p.__end_ >= __p.__end_cap_.__value_)
            {
              unint64_t v145 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
              unint64_t v146 = v145 + 1;
              if (v145 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              }
              if (0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) > v146) {
                unint64_t v146 = 0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) >= 0x555555555555555) {
                unint64_t v147 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v147 = v146;
              }
              v174.__end_cap_.__value_ = (std::allocator<std::string> *)&__p.__end_cap_;
              if (v147) {
                v148 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p.__end_cap_, v147);
              }
              else {
                v148 = 0;
              }
              v149 = v148 + v145;
              v174.__first_ = v148;
              v174.__begin_ = v149;
              v174.__end_cap_.__value_ = &v148[v147];
              long long v150 = *(_OWORD *)v163;
              v149->__r_.__value_.__r.__words[2] = v164;
              *(_OWORD *)&v149->__r_.__value_.__l.__data_ = v150;
              v163[1] = 0;
              std::string::size_type v164 = 0;
              v163[0] = 0;
              v174.__end_ = v149 + 1;
              std::vector<std::string>::__swap_out_circular_buffer(&__p, &v174);
              v151 = __p.__end_;
              std::__split_buffer<std::string>::~__split_buffer(&v174);
              __p.__end_ = v151;
              if (SHIBYTE(v164) < 0) {
                operator delete(v163[0]);
              }
            }
            else
            {
              long long v144 = *(_OWORD *)v163;
              __p.__end_->__r_.__value_.__r.__words[2] = v164;
              *(_OWORD *)&v143->__r_.__value_.__l.__data_ = v144;
              __p.__end_ = v143 + 1;
            }
            std::string::basic_string[abi:ne180100]<0>(v163, "IsAbout");
            std::vector<std::string>::pointer v152 = __p.__end_;
            if (__p.__end_ >= __p.__end_cap_.__value_)
            {
              unint64_t v155 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
              unint64_t v156 = v155 + 1;
              if (v155 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              }
              if (0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) > v156) {
                unint64_t v156 = 0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) >= 0x555555555555555) {
                unint64_t v157 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v157 = v156;
              }
              v174.__end_cap_.__value_ = (std::allocator<std::string> *)&__p.__end_cap_;
              if (v157) {
                v158 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p.__end_cap_, v157);
              }
              else {
                v158 = 0;
              }
              v159 = v158 + v155;
              v174.__first_ = v158;
              v174.__begin_ = v159;
              v174.__end_cap_.__value_ = &v158[v157];
              long long v160 = *(_OWORD *)v163;
              v159->__r_.__value_.__r.__words[2] = v164;
              *(_OWORD *)&v159->__r_.__value_.__l.__data_ = v160;
              v163[1] = 0;
              std::string::size_type v164 = 0;
              v163[0] = 0;
              v174.__end_ = v159 + 1;
              std::vector<std::string>::__swap_out_circular_buffer(&__p, &v174);
              v154 = __p.__end_;
              std::__split_buffer<std::string>::~__split_buffer(&v174);
              __p.__end_ = v154;
              if (SHIBYTE(v164) < 0)
              {
                operator delete(v163[0]);
                v154 = __p.__end_;
              }
            }
            else
            {
              long long v153 = *(_OWORD *)v163;
              __p.__end_->__r_.__value_.__r.__words[2] = v164;
              *(_OWORD *)&v152->__r_.__value_.__l.__data_ = v153;
              v154 = v152 + 1;
              __p.__end_ = v152 + 1;
            }
            v161 = (std::string *)std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>((uint64_t)__p.__begin_, (uint64_t)v154, (unsigned __int8 **)a2);
            if (v161 != __p.__end_)
            {
              if (*(char *)(a2 + 23) < 0) {
                std::string::__init_copy_ctor_external(&v162, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
              }
              else {
                std::string v162 = *(std::string *)a2;
              }
              LOWORD(v174.__first_) = 0;
              LOWORD(v174.__first_) = QP::ParserGrammar::getSymbolID(a1, (uint64_t)&v162);
              std::__tree<unsigned short>::__emplace_unique_key_args<unsigned short,unsigned short const&>((uint64_t **)(a1 + 688), (unsigned __int16 *)&v174, &v174);
              if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v162.__r_.__value_.__l.__data_);
              }
            }
            v174.__first_ = (std::__split_buffer<std::string>::pointer)&__p;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v174);
            return;
          }
        }
        else if (!v33)
        {
          goto LABEL_179;
        }
        if (*(char *)(a2 + 23) < 0) {
          std::string::__init_copy_ctor_external(&v165, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
        }
        else {
          std::string v165 = *(std::string *)a2;
        }
        LOWORD(v174.__first_) = 0;
        LOWORD(v174.__first_) = QP::ParserGrammar::getSymbolID(a1, (uint64_t)&v165);
        std::__tree<unsigned short>::__emplace_unique_key_args<unsigned short,unsigned short const&>((uint64_t **)(a1 + 784), (unsigned __int16 *)&v174, &v174);
        if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v165.__r_.__value_.__l.__data_);
        }
        goto LABEL_179;
      }
    }
    else if (v25)
    {
      goto LABEL_116;
    }
    std::string::basic_string[abi:ne180100]<0>(&v174, "Date");
    BOOL v28 = QP::endswith((uint64_t *)a2, (uint64_t *)&v174);
    if (SHIBYTE(v174.__end_) < 0) {
      operator delete(v174.__first_);
    }
    if (v28)
    {
      if (*(char *)(a2 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v171, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else {
        std::string v171 = *(std::string *)a2;
      }
      LOWORD(v174.__first_) = 0;
      LOWORD(v174.__first_) = QP::ParserGrammar::getSymbolID(a1, (uint64_t)&v171);
      std::__tree<unsigned short>::__emplace_unique_key_args<unsigned short,unsigned short const&>((uint64_t **)(a1 + 520), (unsigned __int16 *)&v174, &v174);
      if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
      {
        CFDictionaryRef v27 = &v171;
        goto LABEL_169;
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v174, "Kind");
      BOOL v29 = QP::endswith((uint64_t *)a2, (uint64_t *)&v174);
      if (SHIBYTE(v174.__end_) < 0) {
        operator delete(v174.__first_);
      }
      if (v29)
      {
        if (*(char *)(a2 + 23) < 0) {
          std::string::__init_copy_ctor_external(&v170, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
        }
        else {
          std::string v170 = *(std::string *)a2;
        }
        QP::ParserGrammar::setIsKind(a1, (uint64_t)&v170);
        if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
        {
          CFDictionaryRef v27 = &v170;
          goto LABEL_169;
        }
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v174, "Text");
        if (QP::endswith((uint64_t *)a2, (uint64_t *)&v174))
        {
          BOOL v30 = 1;
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "TOPIC");
          BOOL v30 = QP::startswith((unsigned __int8 *)a2, (unsigned __int8 *)&__p);
          if (SHIBYTE(__p.__end_cap_.__value_) < 0) {
            operator delete(__p.__begin_);
          }
        }
        if (SHIBYTE(v174.__end_) < 0) {
          operator delete(v174.__first_);
        }
        if (v30)
        {
          if (*(char *)(a2 + 23) < 0) {
            std::string::__init_copy_ctor_external(&v168, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
          }
          else {
            std::string v168 = *(std::string *)a2;
          }
          QP::ParserGrammar::setIsInferred(a1, (uint64_t)&v168);
          if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
          {
            CFDictionaryRef v27 = &v168;
            goto LABEL_169;
          }
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(&v174, "UserAction");
          BOOL v31 = QP::startswith((unsigned __int8 *)a2, (unsigned __int8 *)&v174);
          if (SHIBYTE(v174.__end_) < 0) {
            operator delete(v174.__first_);
          }
          if (v31)
          {
            if (*(char *)(a2 + 23) < 0) {
              std::string::__init_copy_ctor_external(&v167, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
            }
            else {
              std::string v167 = *(std::string *)a2;
            }
            QP::ParserGrammar::setIsUserAction(a1, (uint64_t)&v167);
            if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
            {
              CFDictionaryRef v27 = &v167;
              goto LABEL_169;
            }
          }
          else
          {
            std::string::basic_string[abi:ne180100]<0>(&v174, "Action");
            BOOL v32 = QP::startswith((unsigned __int8 *)a2, (unsigned __int8 *)&v174);
            if (SHIBYTE(v174.__end_) < 0) {
              operator delete(v174.__first_);
            }
            if (v32)
            {
              if (*(char *)(a2 + 23) < 0) {
                std::string::__init_copy_ctor_external(&v166, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
              }
              else {
                std::string v166 = *(std::string *)a2;
              }
              QP::ParserGrammar::setIsAction(a1, (uint64_t)&v166);
              if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
              {
                CFDictionaryRef v27 = &v166;
                goto LABEL_169;
              }
            }
          }
        }
      }
    }
    goto LABEL_170;
  }
}

void sub_224DAAA0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_224DAABF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    JUMPOUT(0x224DAAB44);
  }
  JUMPOUT(0x224DAAB84);
}

std::string *QP::ParserGrammar::symbol@<X0>(QP::ParserGrammar *this@<X0>, unsigned int a2@<W1>, std::string *a3@<X8>)
{
  uint64_t result = (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, kQPSymbolNone[0]);
  CFTypeID v9 = (char *)*((void *)this + 18);
  CFArrayRef v8 = (char *)this + 144;
  size_t v7 = (char **)v9;
  if (v9)
  {
    CFIndex v10 = v8;
    CFIndex v11 = v7;
    do
    {
      unsigned int v12 = *((unsigned __int16 *)v11 + 16);
      BOOL v13 = v12 >= a2;
      if (v12 >= a2) {
        unint64_t v14 = v11;
      }
      else {
        unint64_t v14 = v11 + 1;
      }
      if (v13) {
        CFIndex v10 = (char *)v11;
      }
      CFIndex v11 = (char **)*v14;
    }
    while (*v14);
    if (v10 != v8 && *((unsigned __int16 *)v10 + 16) <= a2)
    {
      unsigned __int8 v15 = v8;
      do
      {
        unsigned int v16 = *((unsigned __int16 *)v7 + 16);
        BOOL v17 = v16 >= a2;
        if (v16 >= a2) {
          size_t v18 = v7;
        }
        else {
          size_t v18 = v7 + 1;
        }
        if (v17) {
          unsigned __int8 v15 = (char *)v7;
        }
        size_t v7 = (char **)*v18;
      }
      while (*v18);
      if (v15 == v8 || *((unsigned __int16 *)v15 + 16) > a2) {
        unsigned __int8 v15 = v8;
      }
      return std::string::operator=(a3, (const std::string *)(v15 + 40));
    }
  }
  return result;
}

void sub_224DAACD4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t QP::ParserGrammar::symbolID(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(a2 + 8);
  }
  if (!v2) {
    return 0;
  }
  uint64_t v4 = a1 + 160;
  if ((void **)(a1 + 168) == std::__tree<std::string>::find<std::string>(a1 + 160, (void **)a2)) {
    return (unsigned __int16)kQPSymbolIdNone;
  }
  else {
    return *((unsigned __int16 *)std::__tree<std::string>::find<std::string>(v4, (void **)a2) + 28);
  }
}

uint64_t QP::ParserGrammar::replacementID(QP::ParserGrammar *this, uint64_t a2)
{
  uint64_t v2 = (char **)*((void *)this + 39);
  if (v2)
  {
    CFDictionaryRef v3 = (char **)((char *)this + 312);
    uint64_t v4 = (char **)((char *)this + 312);
    int v5 = (char **)*((void *)this + 39);
    do
    {
      unsigned int v6 = *((unsigned __int16 *)v5 + 13);
      BOOL v7 = v6 >= a2;
      if (v6 >= a2) {
        CFArrayRef v8 = v5;
      }
      else {
        CFArrayRef v8 = v5 + 1;
      }
      if (v7) {
        uint64_t v4 = v5;
      }
      int v5 = (char **)*v8;
    }
    while (*v8);
    if (v4 != v3 && *((unsigned __int16 *)v4 + 13) <= a2)
    {
      CFTypeID v9 = (char **)((char *)this + 312);
      do
      {
        unsigned int v10 = *((unsigned __int16 *)v2 + 13);
        BOOL v11 = v10 >= a2;
        if (v10 >= a2) {
          unsigned int v12 = v2;
        }
        else {
          unsigned int v12 = v2 + 1;
        }
        if (v11) {
          CFTypeID v9 = v2;
        }
        uint64_t v2 = (char **)*v12;
      }
      while (*v12);
      if (v9 == v3 || *((unsigned __int16 *)v9 + 13) > a2) {
        CFTypeID v9 = (char **)((char *)this + 312);
      }
      return *((unsigned __int16 *)v9 + 14);
    }
  }
  return a2;
}

BOOL QP::ParserGrammar::hasExpansions(QP::ParserGrammar *this, unsigned int a2)
{
  uint64_t v2 = (char **)*((void *)this + 108);
  if (!v2) {
    return 0;
  }
  CFDictionaryRef v3 = (char **)((char *)this + 864);
  uint64_t v4 = (char **)((char *)this + 864);
  int v5 = (char **)*((void *)this + 108);
  do
  {
    unsigned int v6 = *((unsigned __int16 *)v5 + 16);
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      CFArrayRef v8 = v5;
    }
    else {
      CFArrayRef v8 = v5 + 1;
    }
    if (v7) {
      uint64_t v4 = v5;
    }
    int v5 = (char **)*v8;
  }
  while (*v8);
  if (v4 == v3 || *((unsigned __int16 *)v4 + 16) > a2) {
    return 0;
  }
  CFTypeID v9 = (char **)((char *)this + 864);
  do
  {
    unsigned int v10 = *((unsigned __int16 *)v2 + 16);
    BOOL v11 = v10 >= a2;
    if (v10 >= a2) {
      unsigned int v12 = v2;
    }
    else {
      unsigned int v12 = v2 + 1;
    }
    if (v11) {
      CFTypeID v9 = v2;
    }
    uint64_t v2 = (char **)*v12;
  }
  while (*v12);
  if (v9 == v3 || *((unsigned __int16 *)v9 + 16) > a2) {
    CFTypeID v9 = (char **)((char *)this + 864);
  }
  return v9[7] != 0;
}

void QP::ParserGrammar::expansions(uint64_t a1, unsigned int a2, uint64_t a3)
{
  char v23 = 0;
  uint64_t v3 = *(void *)(a1 + 864);
  if (v3)
  {
    uint64_t v5 = a1 + 864;
    uint64_t v6 = a1 + 864;
    uint64_t v7 = *(void *)(a1 + 864);
    do
    {
      unsigned int v8 = *(unsigned __int16 *)(v7 + 32);
      BOOL v9 = v8 >= a2;
      if (v8 >= a2) {
        unsigned int v10 = (uint64_t *)v7;
      }
      else {
        unsigned int v10 = (uint64_t *)(v7 + 8);
      }
      if (v9) {
        uint64_t v6 = v7;
      }
      uint64_t v7 = *v10;
    }
    while (*v10);
    if (v6 != v5 && *(unsigned __int16 *)(v6 + 32) <= a2)
    {
      uint64_t v11 = a1 + 864;
      do
      {
        unsigned int v12 = *(unsigned __int16 *)(v3 + 32);
        BOOL v13 = v12 >= a2;
        if (v12 >= a2) {
          unint64_t v14 = (uint64_t *)v3;
        }
        else {
          unint64_t v14 = (uint64_t *)(v3 + 8);
        }
        if (v13) {
          uint64_t v11 = v3;
        }
        uint64_t v3 = *v14;
      }
      while (*v14);
      if (v11 == v5 || *(unsigned __int16 *)(v11 + 32) > a2) {
        uint64_t v11 = a1 + 864;
      }
      std::map<unsigned short,std::map<unsigned short,float>>::map[abi:ne180100]((uint64_t *)&v21, v11 + 40);
      unsigned __int8 v15 = v21;
      if (v21 != v22)
      {
        do
        {
          uint64_t v16 = *((unsigned __int16 *)v15 + 16);
          std::map<unsigned short,float>::map[abi:ne180100](v20, (uint64_t)(v15 + 5));
          (*(void (**)(uint64_t, uint64_t, uint64_t *, char *))(a3 + 16))(a3, v16, v20, &v23);
          std::__tree<unsigned short>::destroy((uint64_t)v20, (void *)v20[1]);
          if (v23) {
            break;
          }
          BOOL v17 = v15[1];
          if (v17)
          {
            do
            {
              size_t v18 = (void **)v17;
              BOOL v17 = (void *)*v17;
            }
            while (v17);
          }
          else
          {
            do
            {
              size_t v18 = (void **)v15[2];
              BOOL v19 = *v18 == v15;
              unsigned __int8 v15 = v18;
            }
            while (!v19);
          }
          unsigned __int8 v15 = v18;
        }
        while (v18 != v22);
      }
      std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::destroy((uint64_t)&v21, v22[0]);
    }
  }
}

void sub_224DAAFEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11, uint64_t a12, char a13, void *a14)
{
}

BOOL QP::ParserGrammar::hasFileExtensions(QP::ParserGrammar *this, unsigned int a2)
{
  uint64_t v2 = (char **)*((void *)this + 33);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = (char **)((char *)this + 264);
  uint64_t v4 = (char **)((char *)this + 264);
  uint64_t v5 = (char **)*((void *)this + 33);
  do
  {
    unsigned int v6 = *((unsigned __int16 *)v5 + 16);
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      unsigned int v8 = v5;
    }
    else {
      unsigned int v8 = v5 + 1;
    }
    if (v7) {
      uint64_t v4 = v5;
    }
    uint64_t v5 = (char **)*v8;
  }
  while (*v8);
  if (v4 == v3 || *((unsigned __int16 *)v4 + 16) > a2) {
    return 0;
  }
  BOOL v9 = (char **)((char *)this + 264);
  do
  {
    unsigned int v10 = *((unsigned __int16 *)v2 + 16);
    BOOL v11 = v10 >= a2;
    if (v10 >= a2) {
      unsigned int v12 = v2;
    }
    else {
      unsigned int v12 = v2 + 1;
    }
    if (v11) {
      BOOL v9 = v2;
    }
    uint64_t v2 = (char **)*v12;
  }
  while (*v12);
  if (v9 == v3 || *((unsigned __int16 *)v9 + 16) > a2) {
    BOOL v9 = (char **)((char *)this + 264);
  }
  return v9[7] != 0;
}

BOOL QP::ParserGrammar::hasValue(uint64_t a1, unsigned int a2, void **a3)
{
  uint64_t v3 = *(void *)(a1 + 480);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = a1 + 480;
  do
  {
    unsigned int v5 = *(unsigned __int16 *)(v3 + 32);
    BOOL v6 = v5 >= a2;
    if (v5 >= a2) {
      BOOL v7 = (uint64_t *)v3;
    }
    else {
      BOOL v7 = (uint64_t *)(v3 + 8);
    }
    if (v6) {
      uint64_t v4 = v3;
    }
    uint64_t v3 = *v7;
  }
  while (*v7);
  return v4 != a1 + 480
      && *(unsigned __int16 *)(v4 + 32) <= a2
      && (void **)(v4 + 48) != std::__tree<std::string>::find<std::string>(v4 + 40, a3);
}

void QP::ParserGrammar::value(uint64_t a1@<X0>, unsigned int a2@<W1>, void **a3@<X2>, std::string *a4@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 480);
  if (!v5) {
    goto LABEL_15;
  }
  uint64_t v6 = a1 + 480;
  do
  {
    unsigned int v7 = *(unsigned __int16 *)(v5 + 32);
    BOOL v8 = v7 >= a2;
    if (v7 >= a2) {
      BOOL v9 = (uint64_t *)v5;
    }
    else {
      BOOL v9 = (uint64_t *)(v5 + 8);
    }
    if (v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 == a1 + 480
    || *(unsigned __int16 *)(v6 + 32) > a2
    || (unsigned int v10 = std::__tree<std::string>::find<std::string>(v6 + 40, a3), (void **)(v6 + 48) == v10))
  {
LABEL_15:
    unsigned int v12 = kQPSymbolNone[0];
    std::string::basic_string[abi:ne180100]<0>(a4, v12);
  }
  else if (*((char *)v10 + 79) < 0)
  {
    BOOL v13 = (const std::string::value_type *)v10[7];
    std::string::size_type v14 = (std::string::size_type)v10[8];
    std::string::__init_copy_ctor_external(a4, v13, v14);
  }
  else
  {
    long long v11 = *(_OWORD *)(v10 + 7);
    a4->__r_.__value_.__r.__words[2] = (std::string::size_type)v10[9];
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = v11;
  }
}

BOOL QP::ParserGrammar::hasCategories(QP::ParserGrammar *this, unsigned int a2)
{
  uint64_t v4 = (char *)*((void *)this + 30);
  uint64_t v2 = (char *)this + 240;
  uint64_t v3 = (char **)v4;
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v2;
  uint64_t v6 = v3;
  do
  {
    unsigned int v7 = *((unsigned __int16 *)v6 + 16);
    BOOL v8 = v7 >= a2;
    if (v7 >= a2) {
      BOOL v9 = v6;
    }
    else {
      BOOL v9 = v6 + 1;
    }
    if (v8) {
      uint64_t v5 = (char *)v6;
    }
    uint64_t v6 = (char **)*v9;
  }
  while (*v9);
  if (v5 == v2 || *((unsigned __int16 *)v5 + 16) > a2) {
    return 0;
  }
  unsigned int v10 = v2;
  do
  {
    unsigned int v11 = *((unsigned __int16 *)v3 + 16);
    BOOL v12 = v11 >= a2;
    if (v11 >= a2) {
      BOOL v13 = v3;
    }
    else {
      BOOL v13 = v3 + 1;
    }
    if (v12) {
      unsigned int v10 = (char *)v3;
    }
    uint64_t v3 = (char **)*v13;
  }
  while (*v13);
  if (v10 == v2 || *((unsigned __int16 *)v10 + 16) > a2) {
    unsigned int v10 = v2;
  }
  return *((void *)v10 + 7) != 0;
}

void QP::ParserGrammar::categories(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 240);
  uint64_t v3 = a1 + 240;
  uint64_t v4 = v5;
  if (v5)
  {
    uint64_t v7 = v3;
    uint64_t v8 = v4;
    do
    {
      unsigned int v9 = *(unsigned __int16 *)(v8 + 32);
      BOOL v10 = v9 >= a2;
      if (v9 >= a2) {
        unsigned int v11 = (uint64_t *)v8;
      }
      else {
        unsigned int v11 = (uint64_t *)(v8 + 8);
      }
      if (v10) {
        uint64_t v7 = v8;
      }
      uint64_t v8 = *v11;
    }
    while (*v11);
    if (v7 != v3 && *(unsigned __int16 *)(v7 + 32) <= a2)
    {
      uint64_t v12 = v3;
      do
      {
        unsigned int v13 = *(unsigned __int16 *)(v4 + 32);
        BOOL v14 = v13 >= a2;
        if (v13 >= a2) {
          unsigned __int8 v15 = (uint64_t *)v4;
        }
        else {
          unsigned __int8 v15 = (uint64_t *)(v4 + 8);
        }
        if (v14) {
          uint64_t v12 = v4;
        }
        uint64_t v4 = *v15;
      }
      while (*v15);
      if (v12 == v3 || *(unsigned __int16 *)(v12 + 32) > a2) {
        uint64_t v12 = v3;
      }
      uint64_t v16 = *(void **)(v12 + 40);
      BOOL v17 = (void *)(v12 + 48);
      if (v16 != (void *)(v12 + 48))
      {
        do
        {
          if (*((char *)v16 + 55) < 0) {
            std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v16[4], v16[5]);
          }
          else {
            std::string __p = *(std::string *)(v16 + 4);
          }
          (*(void (**)(uint64_t, std::string *))(a3 + 16))(a3, &__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          size_t v18 = (void *)v16[1];
          if (v18)
          {
            do
            {
              BOOL v19 = v18;
              size_t v18 = (void *)*v18;
            }
            while (v18);
          }
          else
          {
            do
            {
              BOOL v19 = (void *)v16[2];
              BOOL v20 = *v19 == (void)v16;
              uint64_t v16 = v19;
            }
            while (!v20);
          }
          uint64_t v16 = v19;
        }
        while (v19 != v17);
      }
    }
  }
}

void sub_224DAB3E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void QP::ParserGrammar::tokens(uint64_t a1, const __CFString *a2, const __CFString *a3, const __CFString *a4, uint64_t a5)
{
  v80[1] = *(const void **)MEMORY[0x263EF8340];
  if (!a2) {
    return;
  }
  CFDictionaryRef v6 = *(const __CFDictionary **)(a1 + 72);
  if (!v6 || !*(void *)(a1 + 80)) {
    return;
  }
  uint64_t v11 = *(void *)(a1 + 40);
  uint64_t v12 = 144;
  if (!*(void *)(v11 + 144)) {
    uint64_t v12 = 128;
  }
  unint64_t v13 = *(void *)(v11 + v12);
  uint64_t v14 = 152;
  if (!*(void *)(v11 + 152)) {
    uint64_t v14 = 136;
  }
  unint64_t v15 = *(void *)(v11 + v14);
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v6, a2);
  if (!Value) {
    return;
  }
  CFDictionaryRef v17 = Value;
  CFTypeID v18 = CFGetTypeID(Value);
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!a3) {
    return;
  }
  if (v18 != TypeID) {
    return;
  }
  CFTypeRef v77 = CFDictionaryGetValue(v17, @"TYPE");
  if (!v77) {
    return;
  }
  CFTypeID v20 = CFGetTypeID(v77);
  if (v20 != CFStringGetTypeID()) {
    return;
  }
  CFStringRef v21 = (const __CFString *)CFDictionaryGetValue(v17, @"ROOT");
  if (v21)
  {
    CFStringRef v22 = v21;
    CFTypeID v23 = CFGetTypeID(v21);
    if (v23 == CFStringGetTypeID()) {
      CFStringRef v24 = v22;
    }
    else {
      CFStringRef v24 = 0;
    }
    CFStringRef v75 = v24;
  }
  else
  {
    CFStringRef v75 = 0;
  }
  CFStringRef v25 = (const __CFString *)CFDictionaryGetValue(v17, @"TOKEN");
  if (v25)
  {
    CFStringRef v26 = v25;
    CFTypeID v27 = CFGetTypeID(v25);
    if (v27 == CFStringGetTypeID()) {
      CFStringRef v28 = v26;
    }
    else {
      CFStringRef v28 = 0;
    }
    CFStringRef v76 = v28;
  }
  else
  {
    CFStringRef v76 = 0;
  }
  CFDictionaryRef v29 = (const __CFDictionary *)CFDictionaryGetValue(v17, a3);
  if (v29)
  {
    CFDictionaryRef v30 = v29;
    CFTypeID v31 = CFGetTypeID(v29);
    CFTypeID v32 = CFDictionaryGetTypeID();
    if (a4)
    {
      if (v31 == v32)
      {
        BOOL v33 = CFDictionaryGetValue(v17, @"TOKEN");
        CFStringRef v76 = (const __CFString *)CFDictionaryGetValue(v17, @"ROOT");
        if (v33)
        {
          CFTypeID v34 = CFGetTypeID(v33);
          if (v34 == CFStringGetTypeID())
          {
            if (v76)
            {
              CFTypeID v35 = CFGetTypeID(v76);
              if (v35 == CFStringGetTypeID())
              {
                CFArrayRef v36 = (const __CFArray *)CFDictionaryGetValue(v30, a4);
                if (v36)
                {
                  CFArrayRef v37 = v36;
                  CFTypeID v38 = CFGetTypeID(v36);
                  if (v38 == CFArrayGetTypeID())
                  {
                    v80[0] = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"%@-%@", a3, a4);
                    CFStringRef v79 = _copyTokenText(a2, v76, (const __CFString *)v80[0], v13, v15, *(CFDictionaryRef *)(a1 + 80));
                    CFAllocatorRef v39 = _copyTranslationStringWithContent(a4, v37);
                    CFAllocatorRef v78 = v39;
                    if (v39)
                    {
                      if (v79) {
                        (*(void (**)(uint64_t, const void *, CFStringRef, CFTypeRef, const __CFAllocator *))(a5 + 16))(a5, v33, v79, v77, v39);
                      }
                    }
                    nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v78, 0);
                    nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v79, 0);
LABEL_84:
                    nlp::CFScopedPtr<__CFString const*>::reset(v80, 0);
                    return;
                  }
                }
              }
            }
          }
        }
        return;
      }
    }
  }
  CFDictionaryRef v40 = (const __CFDictionary *)CFDictionaryGetValue(v17, @"Tokens");
  if (v40)
  {
    CFDictionaryRef v41 = v40;
    CFTypeID v42 = CFGetTypeID(v40);
    if (v42 == CFDictionaryGetTypeID())
    {
      char v43 = CFDictionaryGetValue(v17, @"ROOT");
      if (!v43) {
        return;
      }
      CFTypeID v44 = CFGetTypeID(v43);
      if (v44 != CFStringGetTypeID()) {
        return;
      }
      CFArrayRef v74 = (CFArrayRef)CFDictionaryGetValue(v41, a3);
      if (!v74) {
        return;
      }
      CFTypeID v45 = CFGetTypeID(v74);
      if (v45 != CFArrayGetTypeID()) {
        return;
      }
      CFIndex Count = CFArrayGetCount(v74);
      if (Count < 1) {
        return;
      }
      CFIndex v46 = 0;
      v72[1] = a5 + 16;
      while (1)
      {
        CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v74, v46);
        CFTypeID v48 = CFGetTypeID(ValueAtIndex);
        if (v48 == CFDictionaryGetTypeID())
        {
          CFIndex v49 = CFDictionaryGetCount((CFDictionaryRef)ValueAtIndex);
          v72[2] = v72;
          MEMORY[0x270FA5388]();
          unint64_t v50 = (8 * v49 + 15) & 0xFFFFFFFFFFFFFFF0;
          long long v51 = (const void **)((char *)v72 - v50);
          if ((unint64_t)(8 * v49) >= 0x200) {
            size_t v52 = 512;
          }
          else {
            size_t v52 = 8 * v49;
          }
          bzero((char *)v72 - v50, v52);
          MEMORY[0x270FA5388]();
          std::vector<std::string>::pointer v53 = (CFTypeRef *)((char *)v72 - v50);
          bzero(v53, v52);
          CFDictionaryGetKeysAndValues((CFDictionaryRef)ValueAtIndex, v51, v53);
          if (v49 < 1)
          {
            if (!a4 || !v76 || !v77) {
              goto LABEL_78;
            }
            v70 = 0;
            v80[0] = 0;
          }
          else
          {
            CFStringRef v75 = 0;
            CFStringRef v54 = 0;
            do
            {
              CFStringRef v55 = (const __CFString *)*v51;
              CFTypeID v56 = CFGetTypeID(*v51);
              if (v56 == CFStringGetTypeID()) {
                CFStringRef v54 = v55;
              }
              if (CFStringsAreEqual(@"TOKEN", v54))
              {
                CFStringRef v57 = (const __CFString *)*v53;
                CFTypeID v58 = CFGetTypeID(*v53);
                CFTypeID v59 = CFStringGetTypeID();
                CFStringRef v60 = v76;
                if (v58 == v59) {
                  CFStringRef v60 = v57;
                }
                CFStringRef v76 = v60;
              }
              else if (CFStringsAreEqual(@"TYPE", v54))
              {
                CFTypeRef v61 = *v53;
                CFTypeID v62 = CFGetTypeID(*v53);
                CFTypeID v63 = CFStringGetTypeID();
                CFTypeRef v64 = v77;
                if (v62 == v63) {
                  CFTypeRef v64 = v61;
                }
                CFTypeRef v77 = v64;
              }
              else if (CFStringsAreEqual(@"TRANSLATIONS", v54))
              {
                CFStringRef v65 = (const __CFString *)*v53;
                CFTypeID v66 = CFGetTypeID(*v53);
                CFTypeID v67 = CFArrayGetTypeID();
                CFStringRef v68 = v75;
                if (v66 == v67) {
                  CFStringRef v68 = v65;
                }
                CFStringRef v75 = v68;
              }
              ++v53;
              ++v51;
              --v49;
            }
            while (v49);
            if (!a4 || !v76 || !v77) {
              goto LABEL_78;
            }
            v80[0] = 0;
            if (v75)
            {
              CFAllocatorRef v69 = _copyTranslationStringWithContent(0, (const __CFArray *)v75);
              nlp::CFScopedPtr<__CFString const*>::reset(v80, v69);
              v70 = v80[0];
            }
            else
            {
              v70 = 0;
            }
          }
          (*(void (**)(uint64_t, const __CFString *, const __CFString *, CFTypeRef, const void *))(a5 + 16))(a5, v76, a4, v77, v70);
          nlp::CFScopedPtr<__CFString const*>::reset(v80, 0);
        }
LABEL_78:
        if (++v46 == Count) {
          return;
        }
      }
    }
  }
  if (v75 && v76)
  {
    CFStringRef v71 = _copyTokenText(a2, v75, a3, v13, v15, *(CFDictionaryRef *)(a1 + 80));
    v80[0] = v71;
    if (v71) {
      (*(void (**)(uint64_t, const __CFString *, CFStringRef, CFTypeRef, void))(a5 + 16))(a5, v76, v71, v77, 0);
    }
    goto LABEL_84;
  }
}

void sub_224DABA1C(_Unwind_Exception *a1)
{
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v1 - 112), 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v1 - 104), 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v1 - 96), 0);
  _Unwind_Resume(a1);
}

CFStringRef _copyTokenText(const __CFString *key, const __CFString *a2, const __CFString *a3, unint64_t a4, unint64_t a5, CFDictionaryRef theDict)
{
  if (!a3) {
    return 0;
  }
  if (!theDict) {
    return 0;
  }
  if (!(a4 | a5)) {
    return 0;
  }
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, key);
  if (!Value) {
    return 0;
  }
  CFDictionaryRef v11 = Value;
  CFTypeID v12 = CFGetTypeID(Value);
  if (v12 != CFDictionaryGetTypeID()) {
    return 0;
  }
  CFDictionaryRef v13 = (const __CFDictionary *)CFDictionaryGetValue(v11, a2);
  if (!v13) {
    return 0;
  }
  CFDictionaryRef v14 = v13;
  CFTypeID v15 = CFGetTypeID(v13);
  if (v15 != CFDictionaryGetTypeID()) {
    return 0;
  }
  CFDictionaryRef v16 = (const __CFDictionary *)CFDictionaryGetValue(v14, a3);
  if (!v16) {
    return 0;
  }
  CFDictionaryRef v17 = v16;
  CFTypeID v18 = CFGetTypeID(v16);
  if (v18 != CFDictionaryGetTypeID()) {
    return 0;
  }
  if (a5 && CFDictionaryContainsKey(v17, (const void *)a5))
  {
    CFDictionaryRef v19 = v17;
    CFStringRef v20 = (const __CFString *)a5;
  }
  else
  {
    if (!a4 || !CFDictionaryContainsKey(v17, (const void *)a4)) {
      return 0;
    }
    CFDictionaryRef v19 = v17;
    CFStringRef v20 = (const __CFString *)a4;
  }
  CFStringRef v21 = (const __CFString *)CFDictionaryGetValue(v19, v20);
  if (!v21) {
    return 0;
  }
  CFStringRef v22 = v21;
  CFTypeID v23 = CFGetTypeID(v21);
  if (v23 != CFStringGetTypeID()) {
    return 0;
  }
  CFAllocatorRef v24 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  return CFStringCreateCopy(v24, v22);
}

CFAllocatorRef _copyTranslationStringWithContent(const __CFString *a1, const __CFArray *a2)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  CFIndex Count = CFArrayGetCount(a2);
  if (Count >= 1)
  {
    for (CFIndex i = 0; i != Count; ++i)
    {
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a2, i);
      CFTypeID v9 = CFGetTypeID(ValueAtIndex);
      if (v9 == CFStringGetTypeID())
      {
        CFStringRef MutableCopy = CFStringCreateMutableCopy(v4, 0, ValueAtIndex);
        CFDictionaryRef v11 = (__CFString *)MutableCopy;
        if (a1)
        {
          v14.CFIndex length = CFStringGetLength(MutableCopy);
          v14.CFIndex location = 0;
          CFStringFindAndReplace(v11, @"%@v", a1, v14, 0);
        }
        CFArrayAppendValue(Mutable, v11);
        if (v11) {
          CFRelease(v11);
        }
      }
    }
  }
  CFIndex v12 = CFArrayGetCount(Mutable);
  if (!v12)
  {
    if (!Mutable) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  CFAllocatorRef v4 = (const __CFAllocator *)CFStringCreateByCombiningStrings(v4, Mutable, @" && ");
  if (Mutable) {
LABEL_13:
  }
    CFRelease(Mutable);
LABEL_14:
  if (v12) {
    return v4;
  }
  else {
    return 0;
  }
}

void sub_224DABD28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nlp::CFScopedPtr<__CFArray *>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

void QP::ParserGrammar::tokenCompletions(uint64_t a1, CFStringRef theString, uint64_t a3)
{
  v49[4] = *MEMORY[0x263EF8340];
  if (theString
    && CFStringGetLength(theString)
    && *(void *)(a1 + 8)
    && *(void *)(a1 + 16)
    && *(void *)(a1 + 32)
    && *(void *)(a1 + 24))
  {
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    CFAllocatorRef v39 = v6;
    CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(v6, 0, theString);
    CFStringLowercase(MutableCopy, *(CFLocaleRef *)(*(void *)(a1 + 40) + 104));
    QP::getUTF8StringFromCFString(MutableCopy, &v45);
    uint64_t v36 = a3;
    uint64_t v8 = *(nlp **)(a1 + 8);
    if ((v47 & 0x80u) == 0) {
      CFTypeID v9 = (void **)&v45;
    }
    else {
      CFTypeID v9 = v45;
    }
    v49[0] = &unk_26D831E60;
    v49[1] = searchCompletions;
    v49[3] = v49;
    if ((v47 & 0x80u) == 0) {
      uint64_t v10 = v47;
    }
    else {
      uint64_t v10 = v46;
    }
    nlp::BurstTrieSearch(v8, v9, v10, (uint64_t)Mutable, (uint64_t)v49, -1);
    std::__function::__value_func<void ()(void *,nlp::_TrieCompletion *,BOOL *)>::~__value_func[abi:ne180100](v49);
    CFIndex Count = CFDictionaryGetCount(Mutable);
    CFTypeID v34 = &v31;
    MEMORY[0x270FA5388](Count);
    unint64_t v12 = (8 * Count + 15) & 0xFFFFFFFFFFFFFFF0;
    if ((unint64_t)(8 * Count) >= 0x200) {
      size_t v13 = 512;
    }
    else {
      size_t v13 = 8 * Count;
    }
    bzero((char *)&v31 - v12, v13);
    MEMORY[0x270FA5388](v14);
    CFTypeID v15 = (const void **)((char *)&v31 - v12);
    bzero((char *)&v31 - v12, v13);
    CFDictionaryGetKeysAndValues(Mutable, (const void **)((char *)&v31 - v12), (const void **)((char *)&v31 - v12));
    CFDictionaryRef v35 = Mutable;
    CFDictionaryRef v40 = CFSetCreateMutable(v39, 0, MEMORY[0x263EFFFA0]);
    CFTypeID v44 = v40;
    if (Count >= 1)
    {
      uint64_t v31 = v36 + 16;
      while (1)
      {
        CFDictionaryRef v16 = *v15;
        CFStringRef Value = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), *v15);
        CFTypeID v18 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), Value);
        CFDictionaryRef v19 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), Value);
        if (!Value) {
          break;
        }
        CFStringRef v20 = v19;
        if (!CFSetContainsValue(v40, Value))
        {
          CFSetSetValue(v40, Value);
          CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(v39, Value, @":");
          CFArrayRef v22 = ArrayBySeparatingStrings;
          CFArrayRef v43 = ArrayBySeparatingStrings;
          if (ArrayBySeparatingStrings)
          {
            if (CFArrayGetCount(ArrayBySeparatingStrings) == 4)
            {
              CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v22, 0);
              CFTypeID v38 = CFArrayGetValueAtIndex(v22, 1);
              CFArrayRef v37 = CFArrayGetValueAtIndex(v22, 2);
              CFStringRef v24 = (const __CFString *)CFArrayGetValueAtIndex(v22, 3);
              CFArrayRef v25 = CFStringCreateArrayBySeparatingStrings(v39, v24, @"-");
              CFArrayRef v42 = v25;
              if (CFArrayGetCount(v25) == 2)
              {
                CFStringRef v24 = (const __CFString *)CFArrayGetValueAtIndex(v25, 0);
                BOOL v33 = CFArrayGetValueAtIndex(v25, 1);
                int v32 = 5;
              }
              else
              {
                int v32 = 0;
                BOOL v33 = 0;
              }
              CFStringRef v26 = ValueAtIndex;
              CFStringRef v27 = CFStringCreateWithFormat(v39, 0, @"TOKEN:%@", ValueAtIndex);
              CFStringRef v41 = v27;
              CFStringRef v28 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), v27);
              if (v20 && v18 && v26 && v38 && v37 && v24)
              {
                LOWORD(v3nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = v32;
                (*(void (**)(uint64_t, const void *, const void *, const void *, const void *, const void *, const void *, const __CFString *, const void *, int, uint64_t))(v36 + 16))(v36, v20, v28, v18, v26, v38, v37, v24, v33, v30, v31);
              }
              if (v27) {
                CFRelease(v27);
              }
              if (v25) {
                CFRelease(v25);
              }
            }
            CFRelease(v22);
          }
        }
        ++v15;
        if (!--Count) {
          goto LABEL_43;
        }
      }
      if (grammarLogger(void)::token != -1) {
        dispatch_once(&grammarLogger(void)::token, &__block_literal_global_531);
      }
      CFDictionaryRef v29 = grammarLogger(void)::log;
      if (os_log_type_enabled((os_log_t)grammarLogger(void)::log, OS_LOG_TYPE_FAULT)) {
        QP::ParserGrammar::tokenCompletions((uint64_t)v16, v29);
      }
    }
LABEL_43:
    CFRelease(v35);
    if (v40) {
      CFRelease(v40);
    }
    if ((char)v47 < 0) {
      operator delete(v45);
    }
    if (MutableCopy) {
      CFRelease(MutableCopy);
    }
  }
}

void sub_224DAC224(_Unwind_Exception *exception_object)
{
}

void searchCompletions(__CFDictionary *a1, uint64_t a2)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  uint64_t Completion = (const UInt8 *)nlp::TrieCompletionGetCompletion(a2);
  unsigned int Length = nlp::TrieCompletionGetLength(a2);
  CFStringRef v7 = CFStringCreateWithBytes(v4, Completion, Length, 0x8000100u, 0);
  int valuePtr = nlp::TrieCompletionGetPayload(a2);
  CFNumberRef v8 = CFNumberCreate(v4, kCFNumberIntType, &valuePtr);
  CFDictionarySetValue(a1, v7, v8);
  CFRelease(v7);
  CFRelease(v8);
}

void QP::ParserGrammar::fallbackDateCompletions(uint64_t *a1, CFStringRef theString, uint64_t a3)
{
  if (theString && CFStringGetLength(theString))
  {
    CFStringRef BundleWithIdentifier = *(const __CFString **)(a1[5] + 192);
    if (BundleWithIdentifier) {
      CFStringRef BundleWithIdentifier = (const __CFString *)CFBundleGetBundleWithIdentifier(BundleWithIdentifier);
    }
    uint64_t v7 = *a1;
    v8[0] = MEMORY[0x263EF8330];
    v8[1] = 0x40000000;
    void v8[2] = ___ZNK2QP13ParserGrammar23fallbackDateCompletionsEPK10__CFStringU13block_pointerFvS3_S3_S3_S3_S3_S3_S3_S3_PK14__CFDictionary12QPSymbolFlagE_block_invoke;
    void v8[3] = &unk_264705328;
    void v8[5] = a1;
    v8[6] = BundleWithIdentifier;
    v8[4] = a3;
    QPDataDetectorsEnumerateDatesInString((uint64_t)theString, v7, v8);
  }
}

void ___ZNK2QP13ParserGrammar23fallbackDateCompletionsEPK10__CFStringU13block_pointerFvS3_S3_S3_S3_S3_S3_S3_S3_PK14__CFDictionary12QPSymbolFlagE_block_invoke(void *a1, CFDictionaryRef theDict)
{
  uint64_t v4 = a1[5];
  CFStringRef Value = CFDictionaryGetValue(theDict, @"kQPDateDisplay");
  CFAllocatorRef v6 = CFDictionaryGetValue(theDict, @"kQPDateComponents");
  uint64_t v7 = *(void *)(v4 + 40);
  if (*(void *)(v7 + 8) == 2) {
    CFStringRef v8 = @"Mail";
  }
  else {
    CFStringRef v8 = @"Search";
  }
  CFStringRef v9 = copyLocalizedStringForDomain(a1[6], v8, @"Tokens", @"TOKEN:kQPTokenDate", *(const __CFString **)(v7 + 136));
  CFStringRef v10 = v9;
  if (Value && v6)
  {
    if (!v9) {
      return;
    }
    (*(void (**)(void, const void *, const __CFString *, const void *))(a1[4] + 16))(a1[4], Value, v9, Value);
  }
  else if (!v9)
  {
    return;
  }
  CFRelease(v10);
}

void sub_224DAC588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

void QP::ParserGrammar::completions(uint64_t a1, CFStringRef theString, uint64_t a3)
{
  v24[4] = *MEMORY[0x263EF8340];
  if (theString)
  {
    CFIndex Length = CFStringGetLength(theString);
    if (Length)
    {
      if (*(void *)(a1 + 8))
      {
        CFIndex v7 = Length;
        CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
        CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(v8, 0, theString);
        CFMutableStringRef v23 = MutableCopy;
        CFStringLowercase(MutableCopy, *(CFLocaleRef *)(*(void *)(a1 + 40) + 104));
        v25.CFIndex location = 0;
        v25.CFIndex length = v7;
        CFStringFindAndReplace(MutableCopy, @"’", @"'", v25, 0);
        QP::getUTF8StringFromCFString(MutableCopy, &v20);
        CFDictionaryRef v11 = *(nlp **)(a1 + 8);
        if ((v22 & 0x80u) == 0) {
          unint64_t v12 = (void **)&v20;
        }
        else {
          unint64_t v12 = v20;
        }
        v24[0] = &unk_26D831E60;
        v24[1] = searchCompletions;
        v24[3] = v24;
        if ((v22 & 0x80u) == 0) {
          uint64_t v13 = v22;
        }
        else {
          uint64_t v13 = v21;
        }
        nlp::BurstTrieSearch(v11, v12, v13, (uint64_t)Mutable, (uint64_t)v24, -1);
        std::__function::__value_func<void ()(void *,nlp::_TrieCompletion *,BOOL *)>::~__value_func[abi:ne180100](v24);
        CFIndex Count = CFDictionaryGetCount(Mutable);
        MEMORY[0x270FA5388](Count);
        CFDictionaryRef v16 = (const void **)((char *)&v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
        if (v15 >= 0x200) {
          size_t v17 = 512;
        }
        else {
          size_t v17 = v15;
        }
        bzero((char *)&v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v17);
        CFDictionaryGetKeysAndValues(Mutable, v16, 0);
        if (Count >= 1)
        {
          do
          {
            CFTypeID v18 = *v16;
            if (CFStringGetLength((CFStringRef)*v16) > v7) {
              (*(void (**)(uint64_t, const void *))(a3 + 16))(a3, v18);
            }
            ++v16;
            --Count;
          }
          while (Count);
        }
        CFRelease(Mutable);
        if ((char)v22 < 0)
        {
          operator delete(v20);
          if (!MutableCopy) {
            return;
          }
        }
        else if (!MutableCopy)
        {
          return;
        }
        CFRelease(MutableCopy);
      }
    }
  }
}

void sub_224DAC7F8(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void QP::ParserGrammar::fileExtensions(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 264);
  if (v3)
  {
    uint64_t v5 = a1 + 264;
    uint64_t v6 = a1 + 264;
    uint64_t v7 = *(void *)(a1 + 264);
    do
    {
      unsigned int v8 = *(unsigned __int16 *)(v7 + 32);
      BOOL v9 = v8 >= a2;
      if (v8 >= a2) {
        CFStringRef v10 = (uint64_t *)v7;
      }
      else {
        CFStringRef v10 = (uint64_t *)(v7 + 8);
      }
      if (v9) {
        uint64_t v6 = v7;
      }
      uint64_t v7 = *v10;
    }
    while (*v10);
    if (v6 != v5 && *(unsigned __int16 *)(v6 + 32) <= a2)
    {
      uint64_t v11 = a1 + 264;
      do
      {
        unsigned int v12 = *(unsigned __int16 *)(v3 + 32);
        BOOL v13 = v12 >= a2;
        if (v12 >= a2) {
          uint64_t v14 = (uint64_t *)v3;
        }
        else {
          uint64_t v14 = (uint64_t *)(v3 + 8);
        }
        if (v13) {
          uint64_t v11 = v3;
        }
        uint64_t v3 = *v14;
      }
      while (*v14);
      if (v11 == v5 || *(unsigned __int16 *)(v11 + 32) > a2) {
        uint64_t v11 = a1 + 264;
      }
      unint64_t v15 = *(void **)(v11 + 40);
      CFDictionaryRef v16 = (void *)(v11 + 48);
      if (v15 != (void *)(v11 + 48))
      {
        do
        {
          if (*((char *)v15 + 55) < 0) {
            std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v15[4], v15[5]);
          }
          else {
            std::string __p = *(std::string *)(v15 + 4);
          }
          (*(void (**)(uint64_t, std::string *))(a3 + 16))(a3, &__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          size_t v17 = (void *)v15[1];
          if (v17)
          {
            do
            {
              CFTypeID v18 = v17;
              size_t v17 = (void *)*v17;
            }
            while (v17);
          }
          else
          {
            do
            {
              CFTypeID v18 = (void *)v15[2];
              BOOL v19 = *v18 == (void)v15;
              unint64_t v15 = v18;
            }
            while (!v19);
          }
          unint64_t v15 = v18;
        }
        while (v18 != v16);
      }
    }
  }
}

void sub_224DAC994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL QP::ParserGrammar::hasUTIs(QP::ParserGrammar *this, unsigned int a2)
{
  uint64_t v4 = (char *)*((void *)this + 27);
  uint64_t v2 = (char *)this + 216;
  uint64_t v3 = (char **)v4;
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v2;
  uint64_t v6 = v3;
  do
  {
    unsigned int v7 = *((unsigned __int16 *)v6 + 16);
    BOOL v8 = v7 >= a2;
    if (v7 >= a2) {
      BOOL v9 = v6;
    }
    else {
      BOOL v9 = v6 + 1;
    }
    if (v8) {
      uint64_t v5 = (char *)v6;
    }
    uint64_t v6 = (char **)*v9;
  }
  while (*v9);
  if (v5 == v2 || *((unsigned __int16 *)v5 + 16) > a2) {
    return 0;
  }
  CFStringRef v10 = v2;
  do
  {
    unsigned int v11 = *((unsigned __int16 *)v3 + 16);
    BOOL v12 = v11 >= a2;
    if (v11 >= a2) {
      BOOL v13 = v3;
    }
    else {
      BOOL v13 = v3 + 1;
    }
    if (v12) {
      CFStringRef v10 = (char *)v3;
    }
    uint64_t v3 = (char **)*v13;
  }
  while (*v13);
  if (v10 == v2 || *((unsigned __int16 *)v10 + 16) > a2) {
    CFStringRef v10 = v2;
  }
  return *((void *)v10 + 7) != 0;
}

void QP::ParserGrammar::UTIs(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 216);
  uint64_t v3 = a1 + 216;
  uint64_t v4 = v5;
  if (v5)
  {
    uint64_t v7 = v3;
    uint64_t v8 = v4;
    do
    {
      unsigned int v9 = *(unsigned __int16 *)(v8 + 32);
      BOOL v10 = v9 >= a2;
      if (v9 >= a2) {
        unsigned int v11 = (uint64_t *)v8;
      }
      else {
        unsigned int v11 = (uint64_t *)(v8 + 8);
      }
      if (v10) {
        uint64_t v7 = v8;
      }
      uint64_t v8 = *v11;
    }
    while (*v11);
    if (v7 != v3 && *(unsigned __int16 *)(v7 + 32) <= a2)
    {
      uint64_t v12 = v3;
      do
      {
        unsigned int v13 = *(unsigned __int16 *)(v4 + 32);
        BOOL v14 = v13 >= a2;
        if (v13 >= a2) {
          unint64_t v15 = (uint64_t *)v4;
        }
        else {
          unint64_t v15 = (uint64_t *)(v4 + 8);
        }
        if (v14) {
          uint64_t v12 = v4;
        }
        uint64_t v4 = *v15;
      }
      while (*v15);
      if (v12 == v3 || *(unsigned __int16 *)(v12 + 32) > a2) {
        uint64_t v12 = v3;
      }
      CFDictionaryRef v16 = *(void **)(v12 + 40);
      size_t v17 = (void *)(v12 + 48);
      if (v16 != (void *)(v12 + 48))
      {
        do
        {
          if (*((char *)v16 + 55) < 0) {
            std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v16[4], v16[5]);
          }
          else {
            std::string __p = *(std::string *)(v16 + 4);
          }
          (*(void (**)(uint64_t, std::string *))(a3 + 16))(a3, &__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          CFTypeID v18 = (void *)v16[1];
          if (v18)
          {
            do
            {
              BOOL v19 = v18;
              CFTypeID v18 = (void *)*v18;
            }
            while (v18);
          }
          else
          {
            do
            {
              BOOL v19 = (void *)v16[2];
              BOOL v20 = *v19 == (void)v16;
              CFDictionaryRef v16 = v19;
            }
            while (!v20);
          }
          CFDictionaryRef v16 = v19;
        }
        while (v19 != v17);
      }
    }
  }
}

void sub_224DACB80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL QP::ParserGrammar::hasTranslations(uint64_t a1, uint64_t a2)
{
  CFStringFromCFStringRef String = QP::createCFStringFromString(a2);
  CFDictionaryRef v4 = *(const __CFDictionary **)(a1 + 64);
  if (v4 && CFDictionaryContainsKey(v4, CFStringFromString))
  {
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), CFStringFromString);
    BOOL v6 = CFArrayGetCount(Value) != 0;
    if (!CFStringFromString) {
      return v6;
    }
    goto LABEL_6;
  }
  BOOL v6 = 0;
  if (CFStringFromString) {
LABEL_6:
  }
    CFRelease(CFStringFromString);
  return v6;
}

void sub_224DACC20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

void QP::ParserGrammar::translations(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFStringFromCFStringRef String = QP::createCFStringFromString(a2);
  CFDictionaryRef v6 = *(const __CFDictionary **)(a1 + 64);
  if (v6)
  {
    if (CFDictionaryContainsKey(v6, CFStringFromString))
    {
      CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), CFStringFromString);
      CFIndex Count = CFArrayGetCount(Value);
      if (Count >= 1)
      {
        CFIndex v9 = 0;
        do
        {
          CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(Value, v9);
          (*(void (**)(uint64_t, const void *))(a3 + 16))(a3, ValueAtIndex);
          ++v9;
        }
        while (Count != v9);
      }
    }
  }
  if (CFStringFromString) {
    CFRelease(CFStringFromString);
  }
}

void sub_224DACCF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t QP::ParserGrammar::symbolFlag(QP::ParserGrammar *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 66);
  if (v2)
  {
    uint64_t v3 = (unsigned __int16 *)((char *)this + 528);
    do
    {
      unsigned int v4 = *(unsigned __int16 *)(v2 + 26);
      BOOL v5 = v4 >= a2;
      if (v4 >= a2) {
        CFDictionaryRef v6 = (uint64_t *)v2;
      }
      else {
        CFDictionaryRef v6 = (uint64_t *)(v2 + 8);
      }
      if (v5) {
        uint64_t v3 = (unsigned __int16 *)v2;
      }
      uint64_t v2 = *v6;
    }
    while (*v6);
    if (v3 != (unsigned __int16 *)((char *)this + 528) && v3[13] <= a2) {
      return 1;
    }
  }
  uint64_t v7 = *((void *)this + 69);
  if (v7)
  {
    uint64_t v8 = (unsigned __int16 *)((char *)this + 552);
    do
    {
      unsigned int v9 = *(unsigned __int16 *)(v7 + 26);
      BOOL v10 = v9 >= a2;
      if (v9 >= a2) {
        unsigned int v11 = (uint64_t *)v7;
      }
      else {
        unsigned int v11 = (uint64_t *)(v7 + 8);
      }
      if (v10) {
        uint64_t v8 = (unsigned __int16 *)v7;
      }
      uint64_t v7 = *v11;
    }
    while (*v11);
    if (v8 != (unsigned __int16 *)((char *)this + 552) && v8[13] <= a2) {
      return 2;
    }
  }
  uint64_t v12 = *((void *)this + 72);
  if (v12)
  {
    unsigned int v13 = (unsigned __int16 *)((char *)this + 576);
    do
    {
      unsigned int v14 = *(unsigned __int16 *)(v12 + 26);
      BOOL v15 = v14 >= a2;
      if (v14 >= a2) {
        CFDictionaryRef v16 = (uint64_t *)v12;
      }
      else {
        CFDictionaryRef v16 = (uint64_t *)(v12 + 8);
      }
      if (v15) {
        unsigned int v13 = (unsigned __int16 *)v12;
      }
      uint64_t v12 = *v16;
    }
    while (*v16);
    if (v13 != (unsigned __int16 *)((char *)this + 576) && v13[13] <= a2) {
      return 3;
    }
  }
  uint64_t v17 = *((void *)this + 81);
  if (v17)
  {
    CFTypeID v18 = (unsigned __int16 *)((char *)this + 648);
    do
    {
      unsigned int v19 = *(unsigned __int16 *)(v17 + 26);
      BOOL v20 = v19 >= a2;
      if (v19 >= a2) {
        unsigned int v21 = (uint64_t *)v17;
      }
      else {
        unsigned int v21 = (uint64_t *)(v17 + 8);
      }
      if (v20) {
        CFTypeID v18 = (unsigned __int16 *)v17;
      }
      uint64_t v17 = *v21;
    }
    while (*v21);
    if (v18 != (unsigned __int16 *)((char *)this + 648) && v18[13] <= a2) {
      return 10;
    }
  }
  uint64_t v22 = *((void *)this + 87);
  if (v22)
  {
    CFMutableStringRef v23 = (unsigned __int16 *)((char *)this + 696);
    do
    {
      unsigned int v24 = *(unsigned __int16 *)(v22 + 26);
      BOOL v25 = v24 >= a2;
      if (v24 >= a2) {
        CFStringRef v26 = (uint64_t *)v22;
      }
      else {
        CFStringRef v26 = (uint64_t *)(v22 + 8);
      }
      if (v25) {
        CFMutableStringRef v23 = (unsigned __int16 *)v22;
      }
      uint64_t v22 = *v26;
    }
    while (*v26);
    if (v23 != (unsigned __int16 *)((char *)this + 696) && v23[13] <= a2) {
      return 11;
    }
  }
  uint64_t v27 = *((void *)this + 84);
  if (v27)
  {
    CFStringRef v28 = (unsigned __int16 *)((char *)this + 672);
    do
    {
      unsigned int v29 = *(unsigned __int16 *)(v27 + 26);
      BOOL v30 = v29 >= a2;
      if (v29 >= a2) {
        uint64_t v31 = (uint64_t *)v27;
      }
      else {
        uint64_t v31 = (uint64_t *)(v27 + 8);
      }
      if (v30) {
        CFStringRef v28 = (unsigned __int16 *)v27;
      }
      uint64_t v27 = *v31;
    }
    while (*v31);
    if (v28 != (unsigned __int16 *)((char *)this + 672) && v28[13] <= a2) {
      return 15;
    }
  }
  uint64_t v32 = *((void *)this + 99);
  if (v32)
  {
    BOOL v33 = (unsigned __int16 *)((char *)this + 792);
    do
    {
      unsigned int v34 = *(unsigned __int16 *)(v32 + 26);
      BOOL v35 = v34 >= a2;
      if (v34 >= a2) {
        uint64_t v36 = (uint64_t *)v32;
      }
      else {
        uint64_t v36 = (uint64_t *)(v32 + 8);
      }
      if (v35) {
        BOOL v33 = (unsigned __int16 *)v32;
      }
      uint64_t v32 = *v36;
    }
    while (*v36);
    if (v33 != (unsigned __int16 *)((char *)this + 792) && v33[13] <= a2) {
      return 11;
    }
  }
  if ((unsigned __int16)kQPSymbolIdLocation == a2) {
    return 17;
  }
  else {
    return 0;
  }
}

BOOL QP::ParserGrammar::isInferred(QP::ParserGrammar *this, unsigned int a2)
{
  uint64_t v2 = (char **)((char *)this + 672);
  uint64_t v3 = (char **)*((void *)this + 84);
  if (!v3) {
    goto LABEL_12;
  }
  unsigned int v4 = (char **)((char *)this + 672);
  do
  {
    unsigned int v5 = *((unsigned __int16 *)v3 + 13);
    BOOL v6 = v5 >= a2;
    if (v5 >= a2) {
      uint64_t v7 = v3;
    }
    else {
      uint64_t v7 = v3 + 1;
    }
    if (v6) {
      unsigned int v4 = v3;
    }
    uint64_t v3 = (char **)*v7;
  }
  while (*v7);
  if (v4 == v2 || *((unsigned __int16 *)v4 + 13) > a2) {
LABEL_12:
  }
    unsigned int v4 = (char **)((char *)this + 672);
  return v4 != v2;
}

BOOL QP::ParserGrammar::isExtension(QP::ParserGrammar *this, unsigned int a2)
{
  uint64_t v2 = (char **)((char *)this + 792);
  uint64_t v3 = (char **)*((void *)this + 99);
  if (!v3) {
    goto LABEL_12;
  }
  unsigned int v4 = (char **)((char *)this + 792);
  do
  {
    unsigned int v5 = *((unsigned __int16 *)v3 + 13);
    BOOL v6 = v5 >= a2;
    if (v5 >= a2) {
      uint64_t v7 = v3;
    }
    else {
      uint64_t v7 = v3 + 1;
    }
    if (v6) {
      unsigned int v4 = v3;
    }
    uint64_t v3 = (char **)*v7;
  }
  while (*v7);
  if (v4 == v2 || *((unsigned __int16 *)v4 + 13) > a2) {
LABEL_12:
  }
    unsigned int v4 = (char **)((char *)this + 792);
  return v4 != v2;
}

BOOL QP::ParserGrammar::isCombinable(QP::ParserGrammar *this, unsigned int a2)
{
  uint64_t v2 = (char **)((char *)this + 744);
  uint64_t v3 = (char **)*((void *)this + 93);
  if (!v3) {
    goto LABEL_12;
  }
  unsigned int v4 = (char **)((char *)this + 744);
  do
  {
    unsigned int v5 = *((unsigned __int16 *)v3 + 13);
    BOOL v6 = v5 >= a2;
    if (v5 >= a2) {
      uint64_t v7 = v3;
    }
    else {
      uint64_t v7 = v3 + 1;
    }
    if (v6) {
      unsigned int v4 = v3;
    }
    uint64_t v3 = (char **)*v7;
  }
  while (*v7);
  if (v4 == v2 || *((unsigned __int16 *)v4 + 13) > a2) {
LABEL_12:
  }
    unsigned int v4 = (char **)((char *)this + 744);
  return v4 != v2;
}

BOOL QP::ParserGrammar::isParent(QP::ParserGrammar *this, unsigned int a2)
{
  uint64_t v2 = (char **)((char *)this + 840);
  uint64_t v3 = (char **)*((void *)this + 105);
  if (!v3) {
    goto LABEL_12;
  }
  unsigned int v4 = (char **)((char *)this + 840);
  do
  {
    unsigned int v5 = *((unsigned __int16 *)v3 + 13);
    BOOL v6 = v5 >= a2;
    if (v5 >= a2) {
      uint64_t v7 = v3;
    }
    else {
      uint64_t v7 = v3 + 1;
    }
    if (v6) {
      unsigned int v4 = v3;
    }
    uint64_t v3 = (char **)*v7;
  }
  while (*v7);
  if (v4 == v2 || *((unsigned __int16 *)v4 + 13) > a2) {
LABEL_12:
  }
    unsigned int v4 = (char **)((char *)this + 840);
  return v4 != v2;
}

BOOL QP::ParserGrammar::requiresComplement(QP::ParserGrammar *this, unsigned int a2)
{
  uint64_t v2 = (char **)((char *)this + 768);
  uint64_t v3 = (char **)*((void *)this + 96);
  if (!v3) {
    goto LABEL_12;
  }
  unsigned int v4 = (char **)((char *)this + 768);
  do
  {
    unsigned int v5 = *((unsigned __int16 *)v3 + 13);
    BOOL v6 = v5 >= a2;
    if (v5 >= a2) {
      uint64_t v7 = v3;
    }
    else {
      uint64_t v7 = v3 + 1;
    }
    if (v6) {
      unsigned int v4 = v3;
    }
    uint64_t v3 = (char **)*v7;
  }
  while (*v7);
  if (v4 == v2 || *((unsigned __int16 *)v4 + 13) > a2) {
LABEL_12:
  }
    unsigned int v4 = (char **)((char *)this + 768);
  return v4 != v2;
}

BOOL QP::ParserGrammar::isExtended(QP::ParserGrammar *this, unsigned int a2)
{
  uint64_t v2 = (char **)((char *)this + 816);
  uint64_t v3 = (char **)*((void *)this + 102);
  if (!v3) {
    goto LABEL_12;
  }
  unsigned int v4 = (char **)((char *)this + 816);
  do
  {
    unsigned int v5 = *((unsigned __int16 *)v3 + 13);
    BOOL v6 = v5 >= a2;
    if (v5 >= a2) {
      uint64_t v7 = v3;
    }
    else {
      uint64_t v7 = v3 + 1;
    }
    if (v6) {
      unsigned int v4 = v3;
    }
    uint64_t v3 = (char **)*v7;
  }
  while (*v7);
  if (v4 == v2 || *((unsigned __int16 *)v4 + 13) > a2) {
LABEL_12:
  }
    unsigned int v4 = (char **)((char *)this + 816);
  return v4 != v2;
}

uint64_t QP::ParserGrammar::getSymbolID(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  QP::ParserGrammar::addSymbol(a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((void **)(a1 + 168) == std::__tree<std::string>::find<std::string>(a1 + 160, (void **)a2)) {
    return (unsigned __int16)kQPSymbolIdNone;
  }
  else {
    return *((unsigned __int16 *)std::__tree<std::string>::find<std::string>(a1 + 160, (void **)a2) + 28);
  }
}

void sub_224DAD1C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void QP::ParserGrammar::setModifier(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int16 v29 = QP::ParserGrammar::symbolID(a1, (uint64_t)a2);
  std::string::basic_string[abi:ne180100]<0>(v27, "DATE");
  if (QP::endswith((uint64_t *)a2, (uint64_t *)v27))
  {
    BOOL v4 = 1;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v25, "PERIOD");
    if (QP::endswith((uint64_t *)a2, (uint64_t *)v25))
    {
      BOOL v4 = 1;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v23, "TIME");
      if (QP::endswith((uint64_t *)a2, (uint64_t *)v23))
      {
        std::string::basic_string[abi:ne180100]<0>(v21, "MIN");
        if (QP::startswith(a2, (unsigned __int8 *)v21))
        {
          BOOL v4 = 0;
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "MAX");
          BOOL v4 = !QP::startswith(a2, (unsigned __int8 *)__p);
          if (v20 < 0) {
            operator delete(__p[0]);
          }
        }
        if (v22 < 0) {
          operator delete(v21[0]);
        }
      }
      else
      {
        BOOL v4 = 0;
      }
      if (v24 < 0) {
        operator delete(v23[0]);
      }
    }
    if (v26 < 0) {
      operator delete(v25[0]);
    }
  }
  if (v28 < 0)
  {
    operator delete(v27[0]);
    if (!v4) {
      return;
    }
  }
  else if (!v4)
  {
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(v27, "ANY");
  BOOL v5 = QP::startswith(a2, (unsigned __int8 *)v27);
  if (v28 < 0) {
    operator delete(v27[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v27, "ON");
  BOOL v6 = QP::startswith(a2, (unsigned __int8 *)v27);
  if (v28 < 0) {
    operator delete(v27[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v27, "IN");
  BOOL v7 = QP::startswith(a2, (unsigned __int8 *)v27);
  if (v28 < 0) {
    operator delete(v27[0]);
  }
  if (v7 || v6) {
    int v8 = 2;
  }
  else {
    int v8 = v5;
  }
  std::string::basic_string[abi:ne180100]<0>(v27, "FROM");
  BOOL v9 = QP::startswith(a2, (unsigned __int8 *)v27);
  if (v28 < 0) {
    operator delete(v27[0]);
  }
  if (v9) {
    int v8 = 3;
  }
  std::string::basic_string[abi:ne180100]<0>(v27, "START");
  if (QP::startswith(a2, (unsigned __int8 *)v27))
  {
    BOOL v10 = 1;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v25, "SINCE");
    BOOL v10 = QP::startswith(a2, (unsigned __int8 *)v25);
    if (v26 < 0) {
      operator delete(v25[0]);
    }
  }
  if (v28 < 0) {
    operator delete(v27[0]);
  }
  if (v10) {
    int v8 = 7;
  }
  std::string::basic_string[abi:ne180100]<0>(v27, "END");
  if (QP::startswith(a2, (unsigned __int8 *)v27))
  {
    BOOL v11 = 1;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v25, "TO");
    BOOL v11 = QP::startswith(a2, (unsigned __int8 *)v25);
    if (v26 < 0) {
      operator delete(v25[0]);
    }
  }
  if (v28 < 0) {
    operator delete(v27[0]);
  }
  if (v11) {
    int v8 = 8;
  }
  std::string::basic_string[abi:ne180100]<0>(v27, "BEFORE");
  BOOL v12 = QP::startswith(a2, (unsigned __int8 *)v27);
  if (v28 < 0) {
    operator delete(v27[0]);
  }
  if (v12) {
    int v8 = 5;
  }
  std::string::basic_string[abi:ne180100]<0>(v27, "AFTER");
  BOOL v13 = QP::startswith(a2, (unsigned __int8 *)v27);
  if (v28 < 0) {
    operator delete(v27[0]);
  }
  if (v13) {
    int v8 = 6;
  }
  std::string::basic_string[abi:ne180100]<0>(v27, "BY");
  BOOL v14 = QP::startswith(a2, (unsigned __int8 *)v27);
  if (v28 < 0) {
    operator delete(v27[0]);
  }
  if (v14) {
    int v8 = 9;
  }
  std::string::basic_string[abi:ne180100]<0>(v27, "AT");
  BOOL v15 = QP::startswith(a2, (unsigned __int8 *)v27);
  if (v28 < 0) {
    operator delete(v27[0]);
  }
  if (v15) {
    int v16 = 10;
  }
  else {
    int v16 = v8;
  }
  std::string::basic_string[abi:ne180100]<0>(v27, "AROUND");
  BOOL v17 = QP::startswith(a2, (unsigned __int8 *)v27);
  if (v28 < 0) {
    operator delete(v27[0]);
  }
  if (v17) {
    int v18 = 11;
  }
  else {
    int v18 = v16;
  }
  if (v18)
  {
    v27[0] = &v29;
    *((_WORD *)std::__tree<std::__value_type<unsigned short,QPModifier>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,QPModifier>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,QPModifier>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>((uint64_t **)(a1 + 184), &v29, (uint64_t)&std::piecewise_construct, v27)+ 14) = v18;
  }
}

void sub_224DAD658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (*(char *)(v32 - 57) < 0) {
    operator delete(*(void **)(v32 - 80));
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::string,std::map<std::string,std::set<std::string>>>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::pair<std::string,std::set<std::string>>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::pair<std::string,std::map<unsigned short,std::set<unsigned short>>>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::pair<std::string,std::set<unsigned short>>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::pair<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void QP::ParserGrammar::actions(uint64_t a1, void **a2, unsigned int a3, unsigned int a4, uint64_t a5)
{
  uint64_t v9 = a1 + 352;
  if ((void **)(a1 + 360) != std::__tree<std::string>::find<std::string>(a1 + 352, a2))
  {
    BOOL v10 = std::__tree<std::string>::find<std::string>(v9, a2);
    std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>::map[abi:ne180100](&v42, (uint64_t)(v10 + 7));
    uint64_t v11 = v43[0];
    if (v43[0])
    {
      BOOL v12 = v43;
      BOOL v13 = (uint64_t *)v43[0];
      do
      {
        BOOL v14 = v13;
        BOOL v15 = v12;
        unsigned int v16 = *((unsigned __int16 *)v13 + 16);
        if (v16 >= a3) {
          BOOL v12 = v13;
        }
        else {
          ++v13;
        }
        BOOL v13 = (uint64_t *)*v13;
      }
      while (v13);
      if (v12 != v43)
      {
        if (v16 < a3) {
          BOOL v14 = v15;
        }
        if (*((unsigned __int16 *)v14 + 16) <= a3)
        {
          BOOL v17 = v43;
          do
          {
            int v18 = (void *)v11;
            unsigned int v19 = v17;
            unsigned int v20 = *(unsigned __int16 *)(v11 + 32);
            if (v20 >= a3) {
              unsigned int v21 = (uint64_t *)v11;
            }
            else {
              unsigned int v21 = (uint64_t *)(v11 + 8);
            }
            if (v20 >= a3) {
              BOOL v17 = (void *)v11;
            }
            uint64_t v11 = *v21;
          }
          while (*v21);
          if (v17 == v43) {
            goto LABEL_23;
          }
          if (v20 < a3) {
            int v18 = v19;
          }
          if (*((unsigned __int16 *)v18 + 16) > a3) {
LABEL_23:
          }
            BOOL v17 = v43;
          std::map<unsigned short,std::set<std::string>>::map[abi:ne180100](&v40, (uint64_t)(v17 + 5));
          uint64_t v22 = v41[0];
          if (v41[0])
          {
            CFMutableStringRef v23 = v41;
            char v24 = (uint64_t *)v41[0];
            do
            {
              BOOL v25 = v24;
              char v26 = v23;
              unsigned int v27 = *((unsigned __int16 *)v24 + 16);
              if (v27 >= a4) {
                CFMutableStringRef v23 = v24;
              }
              else {
                ++v24;
              }
              char v24 = (uint64_t *)*v24;
            }
            while (v24);
            if (v23 != v41)
            {
              if (v27 < a4) {
                BOOL v25 = v26;
              }
              if (*((unsigned __int16 *)v25 + 16) <= a4)
              {
                char v28 = v41;
                do
                {
                  unsigned __int16 v29 = (void *)v22;
                  BOOL v30 = v28;
                  unsigned int v31 = *(unsigned __int16 *)(v22 + 32);
                  if (v31 >= a4) {
                    uint64_t v32 = (uint64_t *)v22;
                  }
                  else {
                    uint64_t v32 = (uint64_t *)(v22 + 8);
                  }
                  if (v31 >= a4) {
                    char v28 = (void *)v22;
                  }
                  uint64_t v22 = *v32;
                }
                while (*v32);
                if (v28 == v41) {
                  goto LABEL_45;
                }
                if (v31 < a4) {
                  unsigned __int16 v29 = v30;
                }
                if (*((unsigned __int16 *)v29 + 16) > a4) {
LABEL_45:
                }
                  char v28 = v41;
                std::set<std::string>::set[abi:ne180100]((uint64_t *)&v38, (uint64_t)(v28 + 5));
                BOOL v33 = v38;
                if (v38 != v39)
                {
                  do
                  {
                    if (*((char *)v33 + 55) < 0) {
                      std::string::__init_copy_ctor_external(&__p, v33[4], (std::string::size_type)v33[5]);
                    }
                    else {
                      std::string __p = *(std::string *)(v33 + 4);
                    }
                    (*(void (**)(uint64_t, std::string *))(a5 + 16))(a5, &__p);
                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(__p.__r_.__value_.__l.__data_);
                    }
                    unsigned int v34 = v33[1];
                    if (v34)
                    {
                      do
                      {
                        BOOL v35 = (char **)v34;
                        unsigned int v34 = *(char **)v34;
                      }
                      while (v34);
                    }
                    else
                    {
                      do
                      {
                        BOOL v35 = (char **)v33[2];
                        BOOL v36 = *v35 == (char *)v33;
                        BOOL v33 = v35;
                      }
                      while (!v36);
                    }
                    BOOL v33 = v35;
                  }
                  while (v35 != v39);
                }
                std::__tree<std::string>::destroy((uint64_t)&v38, v39[0]);
                uint64_t v22 = v41[0];
              }
            }
          }
          std::__tree<std::__value_type<unsigned short,std::set<std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<std::string>>>>::destroy((uint64_t)&v40, (void *)v22);
          uint64_t v11 = v43[0];
        }
      }
    }
    std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>>>::destroy((uint64_t)&v42, (void *)v11);
  }
}

void sub_224DADAF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18, void *a19, uint64_t a20,char a21,void *a22)
{
}

uint64_t QP::ParserGrammar::hasAttribute(QP::ParserGrammar *this, unsigned int a2, unsigned int a3)
{
  uint64_t v3 = (char **)*((void *)this + 42);
  if (v3)
  {
    BOOL v5 = (char **)((char *)this + 336);
    BOOL v6 = (char **)((char *)this + 336);
    BOOL v7 = (char **)*((void *)this + 42);
    do
    {
      unsigned int v8 = *((unsigned __int16 *)v7 + 16);
      BOOL v9 = v8 >= a2;
      if (v8 >= a2) {
        BOOL v10 = v7;
      }
      else {
        BOOL v10 = v7 + 1;
      }
      if (v9) {
        BOOL v6 = v7;
      }
      BOOL v7 = (char **)*v10;
    }
    while (*v10);
    if (v6 != v5 && *((unsigned __int16 *)v6 + 16) <= a2)
    {
      uint64_t v11 = (char **)((char *)this + 336);
      do
      {
        unsigned int v12 = *((unsigned __int16 *)v3 + 16);
        BOOL v13 = v12 >= a2;
        if (v12 >= a2) {
          BOOL v14 = v3;
        }
        else {
          BOOL v14 = v3 + 1;
        }
        if (v13) {
          uint64_t v11 = v3;
        }
        uint64_t v3 = (char **)*v14;
      }
      while (*v14);
      if (v11 == v5 || *((unsigned __int16 *)v11 + 16) > a2) {
        uint64_t v11 = (char **)((char *)this + 336);
      }
      std::map<unsigned short,std::string>::map[abi:ne180100](&v22, (uint64_t)(v11 + 5));
      if (v23[0])
      {
        BOOL v15 = v23;
        unsigned int v16 = v23[0];
        do
        {
          BOOL v17 = v16;
          int v18 = v15;
          unsigned int v19 = *((unsigned __int16 *)v16 + 16);
          if (v19 >= a3) {
            BOOL v15 = (char **)v16;
          }
          else {
            v16 += 8;
          }
          unsigned int v16 = *(char **)v16;
        }
        while (v16);
        if (v15 != v23)
        {
          unsigned int v20 = v19 >= a3 ? v17 : (char *)v18;
          if (*((unsigned __int16 *)v20 + 16) <= a3)
          {
            std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy((uint64_t)&v22, v23[0]);
            return 1;
          }
        }
      }
      std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy((uint64_t)&v22, v23[0]);
    }
  }
  return 0;
}

void QP::ParserGrammar::attribute(QP::ParserGrammar *this@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, std::string *a4@<X8>)
{
  BOOL v6 = (char **)*((void *)this + 42);
  if (!v6) {
    goto LABEL_34;
  }
  unsigned int v8 = (char **)((char *)this + 336);
  BOOL v9 = (char **)((char *)this + 336);
  BOOL v10 = (char **)*((void *)this + 42);
  do
  {
    unsigned int v11 = *((unsigned __int16 *)v10 + 16);
    BOOL v12 = v11 >= a2;
    if (v11 >= a2) {
      BOOL v13 = v10;
    }
    else {
      BOOL v13 = v10 + 1;
    }
    if (v12) {
      BOOL v9 = v10;
    }
    BOOL v10 = (char **)*v13;
  }
  while (*v13);
  if (v9 == v8 || *((unsigned __int16 *)v9 + 16) > a2) {
    goto LABEL_34;
  }
  BOOL v14 = (char **)((char *)this + 336);
  do
  {
    unsigned int v15 = *((unsigned __int16 *)v6 + 16);
    BOOL v16 = v15 >= a2;
    if (v15 >= a2) {
      BOOL v17 = v6;
    }
    else {
      BOOL v17 = v6 + 1;
    }
    if (v16) {
      BOOL v14 = v6;
    }
    BOOL v6 = (char **)*v17;
  }
  while (*v17);
  if (v14 == v8 || *((unsigned __int16 *)v14 + 16) > a2) {
    BOOL v14 = (char **)((char *)this + 336);
  }
  std::map<unsigned short,std::string>::map[abi:ne180100](&v30, (uint64_t)(v14 + 5));
  int v18 = v31[0];
  if (!v31[0]) {
    goto LABEL_33;
  }
  unsigned int v19 = v31;
  unsigned int v20 = v31[0];
  do
  {
    unsigned int v21 = v20;
    uint64_t v22 = v19;
    unsigned int v23 = *((unsigned __int16 *)v20 + 16);
    if (v23 >= a3) {
      unsigned int v19 = (char **)v20;
    }
    else {
      v20 += 8;
    }
    unsigned int v20 = *(char **)v20;
  }
  while (v20);
  if (v19 == v31) {
    goto LABEL_33;
  }
  if (v23 < a3) {
    unsigned int v21 = (char *)v22;
  }
  if (*((unsigned __int16 *)v21 + 16) > a3)
  {
LABEL_33:
    std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy((uint64_t)&v30, v31[0]);
LABEL_34:
    if (*((char *)this + 111) < 0)
    {
      std::string::__init_copy_ctor_external(a4, *((const std::string::value_type **)this + 11), *((void *)this + 12));
    }
    else
    {
      *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 88);
      a4->__r_.__value_.__r.__words[2] = *((void *)this + 13);
    }
    return;
  }
  char v24 = v31;
  BOOL v25 = v31[0];
  do
  {
    char v26 = v25;
    unsigned int v27 = v24;
    unsigned int v28 = *((unsigned __int16 *)v25 + 16);
    if (v28 >= a3) {
      char v24 = (char **)v25;
    }
    else {
      v25 += 8;
    }
    BOOL v25 = *(char **)v25;
  }
  while (v25);
  if (v24 == v31) {
    goto LABEL_47;
  }
  if (v28 < a3) {
    char v26 = (char *)v27;
  }
  if (*((unsigned __int16 *)v26 + 16) > a3) {
LABEL_47:
  }
    char v24 = v31;
  if (*((char *)v24 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(a4, v24[5], (std::string::size_type)v24[6]);
    int v18 = v31[0];
  }
  else
  {
    long long v29 = *(_OWORD *)(v24 + 5);
    a4->__r_.__value_.__r.__words[2] = (std::string::size_type)v24[7];
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = v29;
  }
  std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy((uint64_t)&v30, v18);
}

void sub_224DADE40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

uint64_t std::pair<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t QP::ParserGrammar::isValidSuggestionKey(QP::ParserGrammar *this, CFStringRef theString, unsigned int a3, unsigned int a4)
{
  if (!theString || CFStringHasPrefix(theString, @"kQPLocation")) {
    return 0;
  }
  if (CFStringHasSuffix(theString, @"SearchAction")
    || CFStringHasSuffix(theString, @"Owner")
    || CFStringHasSuffix(theString, @"DatedAction")
    || CFStringHasSuffix(theString, @"CreatedAction")
    || CFStringHasSuffix(theString, @"ModifiedAction")
    || CFStringHasSuffix(theString, @"ViewedAction")
    || CFStringHasSuffix(theString, @"DownloadedAction")
    || CFStringHasSuffix(theString, @"PrintedAction")
    || CFStringHasSuffix(theString, @"SentAction")
    || CFStringHasSuffix(theString, @"ReceivedAction")
    || CFStringHasSuffix(theString, @"FavoritedAction")
    || CFStringHasSuffix(theString, @"ReadAction")
    || CFStringHasSuffix(theString, @"RepliedAction")
    || CFStringHasSuffix(theString, @"IgnoredAction")
    || CFStringHasSuffix(theString, @"FlaggedAction")
    || CFStringHasSuffix(theString, @"FlagColorAction"))
  {
    return 1;
  }
  if (CFStringHasSuffix(theString, @"FacebookAction") || CFStringHasSuffix(theString, @"TwitterAction")) {
    return 0;
  }
  if (CFStringHasSuffix(theString, @"Subject")) {
    return 1;
  }
  if (CFStringHasSuffix(theString, @"Topic")) {
    return 0;
  }
  return QP::ParserGrammar::hasSuggestion(this, theString, a3, a4);
}

uint64_t QP::ParserGrammar::hasSuggestion(QP::ParserGrammar *this, const __CFString *a2, unsigned int a3, unsigned int a4)
{
  if (!a2) {
    return 0;
  }
  QP::getUTF8StringFromCFString(a2, __p);
  if ((void **)((char *)this + 456) == std::__tree<std::string>::find<std::string>((uint64_t)this + 448, __p)) {
    goto LABEL_36;
  }
  BOOL v7 = std::__tree<std::string>::find<std::string>((uint64_t)this + 448, __p);
  std::map<unsigned short,std::map<unsigned short,std::string>>::map[abi:ne180100](&v30, (uint64_t)(v7 + 7));
  unsigned int v8 = v31[0];
  if (!v31[0]) {
    goto LABEL_35;
  }
  BOOL v9 = v31;
  BOOL v10 = v31[0];
  do
  {
    unsigned int v11 = v10;
    BOOL v12 = v9;
    unsigned int v13 = *((unsigned __int16 *)v10 + 16);
    if (v13 >= a3) {
      BOOL v9 = (void **)v10;
    }
    else {
      ++v10;
    }
    BOOL v10 = (void *)*v10;
  }
  while (v10);
  if (v9 == v31) {
    goto LABEL_35;
  }
  if (v13 < a3) {
    unsigned int v11 = v12;
  }
  if (*((unsigned __int16 *)v11 + 16) > a3)
  {
LABEL_35:
    std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::string>>>>::destroy((uint64_t)&v30, v31[0]);
LABEL_36:
    uint64_t v26 = 0;
    goto LABEL_37;
  }
  BOOL v14 = v31;
  do
  {
    unsigned int v15 = v8;
    BOOL v16 = v14;
    unsigned int v17 = *((unsigned __int16 *)v8 + 16);
    int v18 = v8 + 1;
    if (v17 >= a3)
    {
      int v18 = v15;
      BOOL v14 = (void **)v15;
    }
    unsigned int v8 = (void *)*v18;
  }
  while (v8);
  if (v14 == v31 || (v17 >= a3 ? (unsigned int v19 = v15) : (unsigned int v19 = v16), *((unsigned __int16 *)v19 + 16) > a3)) {
    BOOL v14 = v31;
  }
  std::map<unsigned short,std::string>::map[abi:ne180100](&v28, (uint64_t)(v14 + 5));
  if (!v29[0]) {
    goto LABEL_34;
  }
  unsigned int v20 = v29;
  unsigned int v21 = v29[0];
  do
  {
    uint64_t v22 = v21;
    unsigned int v23 = v20;
    unsigned int v24 = *((unsigned __int16 *)v21 + 16);
    if (v24 >= a4) {
      unsigned int v20 = (char **)v21;
    }
    else {
      v21 += 8;
    }
    unsigned int v21 = *(char **)v21;
  }
  while (v21);
  if (v20 == v29 || (v24 >= a4 ? (BOOL v25 = (unsigned __int16 *)v22) : (BOOL v25 = (unsigned __int16 *)v23), v25[16] > a4))
  {
LABEL_34:
    std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy((uint64_t)&v28, v29[0]);
    goto LABEL_35;
  }
  std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy((uint64_t)&v28, v29[0]);
  std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::string>>>>::destroy((uint64_t)&v30, v31[0]);
  uint64_t v26 = 1;
LABEL_37:
  if (v33 < 0) {
    operator delete(__p[0]);
  }
  return v26;
}

void sub_224DAE280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, void *a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void QP::ParserGrammar::suggestion(QP::ParserGrammar *this@<X0>, const __CFString *a2@<X1>, unsigned int a3@<W2>, unsigned int a4@<W3>, std::string *a5@<X8>)
{
  if (a2)
  {
    QP::getUTF8StringFromCFString(a2, __p);
    if ((void **)((char *)this + 456) != std::__tree<std::string>::find<std::string>((uint64_t)this + 448, __p))
    {
      BOOL v9 = std::__tree<std::string>::find<std::string>((uint64_t)this + 448, __p);
      std::map<unsigned short,std::map<unsigned short,std::string>>::map[abi:ne180100](&v37, (uint64_t)(v9 + 7));
      BOOL v10 = v38[0];
      if (v38[0])
      {
        unsigned int v11 = v38;
        BOOL v12 = v38[0];
        do
        {
          unsigned int v13 = v12;
          BOOL v14 = v11;
          unsigned int v15 = *((unsigned __int16 *)v12 + 16);
          if (v15 >= a3) {
            unsigned int v11 = (void **)v12;
          }
          else {
            ++v12;
          }
          BOOL v12 = (void *)*v12;
        }
        while (v12);
        if (v11 != v38)
        {
          if (v15 < a3) {
            unsigned int v13 = v14;
          }
          if (*((unsigned __int16 *)v13 + 16) <= a3)
          {
            BOOL v16 = v38;
            do
            {
              unsigned int v17 = v10;
              int v18 = v16;
              unsigned int v19 = *((unsigned __int16 *)v10 + 16);
              if (v19 >= a3) {
                unsigned int v20 = (void **)v10;
              }
              else {
                unsigned int v20 = (void **)(v10 + 1);
              }
              if (v19 >= a3) {
                BOOL v16 = (void **)v10;
              }
              BOOL v10 = *v20;
            }
            while (*v20);
            if (v16 == v38) {
              goto LABEL_24;
            }
            if (v19 < a3) {
              unsigned int v17 = v18;
            }
            if (*((unsigned __int16 *)v17 + 16) > a3) {
LABEL_24:
            }
              BOOL v16 = v38;
            std::map<unsigned short,std::string>::map[abi:ne180100](&v35, (uint64_t)(v16 + 5));
            unsigned int v21 = v36[0];
            if (v36[0])
            {
              uint64_t v22 = v36;
              unsigned int v23 = v36[0];
              do
              {
                unsigned int v24 = v23;
                BOOL v25 = v22;
                unsigned int v26 = *((unsigned __int16 *)v23 + 16);
                if (v26 >= a4) {
                  uint64_t v22 = (char **)v23;
                }
                else {
                  v23 += 8;
                }
                unsigned int v23 = *(char **)v23;
              }
              while (v23);
              if (v22 != v36)
              {
                if (v26 < a4) {
                  unsigned int v24 = (char *)v25;
                }
                if (*((unsigned __int16 *)v24 + 16) <= a4)
                {
                  long long v29 = v36;
                  uint64_t v30 = v36[0];
                  do
                  {
                    unsigned int v31 = v30;
                    uint64_t v32 = v29;
                    unsigned int v33 = *((unsigned __int16 *)v30 + 16);
                    if (v33 >= a4) {
                      long long v29 = (char **)v30;
                    }
                    else {
                      v30 += 8;
                    }
                    uint64_t v30 = *(char **)v30;
                  }
                  while (v30);
                  if (v29 == v36) {
                    goto LABEL_57;
                  }
                  if (v33 < a4) {
                    unsigned int v31 = (char *)v32;
                  }
                  if (*((unsigned __int16 *)v31 + 16) > a4) {
LABEL_57:
                  }
                    long long v29 = v36;
                  if (*((char *)v29 + 63) < 0)
                  {
                    std::string::__init_copy_ctor_external(a5, v29[5], (std::string::size_type)v29[6]);
                    unsigned int v21 = v36[0];
                  }
                  else
                  {
                    long long v34 = *(_OWORD *)(v29 + 5);
                    a5->__r_.__value_.__r.__words[2] = (std::string::size_type)v29[7];
                    *(_OWORD *)&a5->__r_.__value_.__l.__data_ = v34;
                  }
                  std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy((uint64_t)&v35, v21);
                  std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::string>>>>::destroy((uint64_t)&v37, v38[0]);
                  goto LABEL_42;
                }
              }
            }
            std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy((uint64_t)&v35, v36[0]);
            BOOL v10 = v38[0];
          }
        }
      }
      std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::string>>>>::destroy((uint64_t)&v37, v10);
    }
    if (*((char *)this + 111) < 0)
    {
      std::string::__init_copy_ctor_external(a5, *((const std::string::value_type **)this + 11), *((void *)this + 12));
    }
    else
    {
      *(_OWORD *)&a5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 88);
      a5->__r_.__value_.__r.__words[2] = *((void *)this + 13);
    }
LABEL_42:
    if (v40 < 0) {
      operator delete(__p[0]);
    }
    return;
  }
  if (*((char *)this + 111) < 0)
  {
    unsigned int v27 = (const std::string::value_type *)*((void *)this + 11);
    std::string::size_type v28 = *((void *)this + 12);
    std::string::__init_copy_ctor_external(a5, v27, v28);
  }
  else
  {
    *(_OWORD *)&a5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 88);
    a5->__r_.__value_.__r.__words[2] = *((void *)this + 13);
  }
}

void sub_224DAE574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, char *a11, uint64_t a12, char a13, void *a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t QP::ParserGrammar::modifier(QP::ParserGrammar *this, unsigned int a2)
{
  BOOL v4 = (char *)*((void *)this + 24);
  uint64_t v2 = (char *)this + 192;
  uint64_t v3 = (char **)v4;
  if (!v4) {
    return 0;
  }
  BOOL v5 = v2;
  BOOL v6 = v3;
  do
  {
    unsigned int v7 = *((unsigned __int16 *)v6 + 13);
    BOOL v8 = v7 >= a2;
    if (v7 >= a2) {
      BOOL v9 = v6;
    }
    else {
      BOOL v9 = v6 + 1;
    }
    if (v8) {
      BOOL v5 = (char *)v6;
    }
    BOOL v6 = (char **)*v9;
  }
  while (*v9);
  if (v5 == v2 || *((unsigned __int16 *)v5 + 13) > a2) {
    return 0;
  }
  unsigned int v11 = v2;
  do
  {
    unsigned int v12 = *((unsigned __int16 *)v3 + 13);
    BOOL v13 = v12 >= a2;
    if (v12 >= a2) {
      BOOL v14 = v3;
    }
    else {
      BOOL v14 = v3 + 1;
    }
    if (v13) {
      unsigned int v11 = (char *)v3;
    }
    uint64_t v3 = (char **)*v14;
  }
  while (*v14);
  if (v11 == v2 || *((unsigned __int16 *)v11 + 13) > a2) {
    unsigned int v11 = v2;
  }
  return *((unsigned __int16 *)v11 + 14);
}

uint64_t **QP::ParserGrammar::setIsKind(uint64_t a1, uint64_t a2)
{
  unsigned __int16 SymbolID = QP::ParserGrammar::getSymbolID(a1, a2);
  return std::__tree<unsigned short>::__emplace_unique_key_args<unsigned short,unsigned short const&>((uint64_t **)(a1 + 496), &SymbolID, &SymbolID);
}

uint64_t **QP::ParserGrammar::setIsInferred(uint64_t a1, uint64_t a2)
{
  unsigned __int16 SymbolID = QP::ParserGrammar::getSymbolID(a1, a2);
  return std::__tree<unsigned short>::__emplace_unique_key_args<unsigned short,unsigned short const&>((uint64_t **)(a1 + 664), &SymbolID, &SymbolID);
}

uint64_t **QP::ParserGrammar::setIsUserAction(uint64_t a1, uint64_t a2)
{
  unsigned __int16 SymbolID = QP::ParserGrammar::getSymbolID(a1, a2);
  return std::__tree<unsigned short>::__emplace_unique_key_args<unsigned short,unsigned short const&>((uint64_t **)(a1 + 616), &SymbolID, &SymbolID);
}

uint64_t **QP::ParserGrammar::setIsAction(uint64_t a1, uint64_t a2)
{
  unsigned __int16 SymbolID = QP::ParserGrammar::getSymbolID(a1, a2);
  return std::__tree<unsigned short>::__emplace_unique_key_args<unsigned short,unsigned short const&>((uint64_t **)(a1 + 640), &SymbolID, &SymbolID);
}

BOOL QP::ParserGrammar::isValidType(QP::ParserGrammar *this, CFStringRef theString)
{
  if (!theString) {
    return 0;
  }
  unint64_t v3 = __ROR8__(*(void *)(*((void *)this + 5) + 8), 1);
  if (v3 < 7 && ((0x71u >> v3) & 1) != 0) {
    return 1;
  }
  if (CFStringHasPrefix(theString, @"LocationHome") || CFStringHasPrefix(theString, @"LocationWork")) {
    return 0;
  }
  return CFStringHasPrefix(theString, @"LocationVehicle") == 0;
}

BOOL QP::ParserGrammar::isIgnoredTerm(QP::ParserGrammar *this, CFStringRef theString)
{
  if (!theString || !CFStringGetLength(theString)) {
    return 0;
  }
  CFMutableStringRef MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, theString);
  CFMutableStringRef v9 = MutableCopy;
  CFStringLowercase(MutableCopy, *(CFLocaleRef *)(*((void *)this + 5) + 104));
  QP::getUTF8StringFromCFString(MutableCopy, __p);
  BOOL v5 = (void *)((char *)this + 120) != std::__find_impl[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::string,std::__identity>(*((void **)this + 14), (void *)this + 15, (unsigned __int8 **)__p);
  if ((v8 & 0x80000000) == 0)
  {
    if (!MutableCopy) {
      return v5;
    }
    goto LABEL_8;
  }
  operator delete(__p[0]);
  if (MutableCopy) {
LABEL_8:
  }
    CFRelease(MutableCopy);
  return v5;
}

void sub_224DAE8B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, const void *a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  nlp::CFScopedPtr<__CFString *>::reset(&a16, 0);
  _Unwind_Resume(a1);
}

os_log_t ___ZL13grammarLoggerv_block_invoke()
{
  CFAllocatorRef v0 = _nlpLoggingSubsystem();
  os_log_t result = os_log_create(v0, "QPSpotlightKnowledgeSource");
  grammarLogger(void)::log = (uint64_t)result;
  return result;
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    BOOL v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

std::string *std::pair<std::string,std::map<std::string,std::set<std::string>>>::pair[abi:ne180100]<std::string const&,std::map<std::string,std::set<std::string>>,0>(std::string *this, long long *a2, std::string::size_type *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  this[1].__r_.__value_.__r.__words[0] = *a3;
  BOOL v6 = a3 + 1;
  std::string::size_type v7 = a3[1];
  this[1].__r_.__value_.__l.__size_ = v7;
  char v8 = &this[1].__r_.__value_.__s.__data_[8];
  std::string::size_type v9 = a3[2];
  this[1].__r_.__value_.__r.__words[2] = v9;
  if (v9)
  {
    *(void *)(v7 + 16) = v8;
    *a3 = (std::string::size_type)v6;
    void *v6 = 0;
    a3[2] = 0;
  }
  else
  {
    this[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
  }
  return this;
}

uint64_t std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    char v5 = *((unsigned char *)a3 + 23);
    if (v5 >= 0) {
      BOOL v6 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    }
    else {
      BOOL v6 = a3[1];
    }
    if (v5 >= 0) {
      std::string::size_type v7 = (unsigned __int8 *)a3;
    }
    else {
      std::string::size_type v7 = *a3;
    }
    do
    {
      uint64_t v8 = *(unsigned __int8 *)(v3 + 23);
      if ((v8 & 0x80u) == 0) {
        std::string::size_type v9 = (unsigned __int8 *)*(unsigned __int8 *)(v3 + 23);
      }
      else {
        std::string::size_type v9 = *(unsigned __int8 **)(v3 + 8);
      }
      if (v9 == v6)
      {
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v3, v7, *(void *)(v3 + 8))) {
            return v3;
          }
        }
        else
        {
          if (!*(unsigned char *)(v3 + 23)) {
            return v3;
          }
          uint64_t v10 = 0;
          while (*(unsigned __int8 *)(v3 + v10) == v7[v10])
          {
            if (v8 == ++v10) {
              return v3;
            }
          }
        }
      }
      v3 += 24;
    }
    while (v3 != a2);
    return a2;
  }
  return v3;
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

void *std::__find_impl[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::string,std::__identity>(void *a1, void *a2, unsigned __int8 **a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    char v5 = *((unsigned char *)a3 + 23);
    if (v5 >= 0) {
      BOOL v6 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    }
    else {
      BOOL v6 = a3[1];
    }
    if (v5 >= 0) {
      std::string::size_type v7 = (unsigned __int8 *)a3;
    }
    else {
      std::string::size_type v7 = *a3;
    }
    do
    {
      uint64_t v8 = *((unsigned __int8 *)v3 + 55);
      if ((v8 & 0x80u) == 0) {
        std::string::size_type v9 = (unsigned __int8 *)*((unsigned __int8 *)v3 + 55);
      }
      else {
        std::string::size_type v9 = (unsigned __int8 *)v3[5];
      }
      if (v9 == v6)
      {
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp((const void *)v3[4], v7, v3[5])) {
            return v3;
          }
        }
        else
        {
          if (!*((unsigned char *)v3 + 55)) {
            return v3;
          }
          uint64_t v10 = 0;
          while (*((unsigned __int8 *)v3 + v10 + 32) == v7[v10])
          {
            if (v8 == ++v10) {
              return v3;
            }
          }
        }
      }
      unsigned int v11 = (void *)v3[1];
      if (v11)
      {
        do
        {
          unsigned int v12 = v11;
          unsigned int v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          unsigned int v12 = (void *)v3[2];
          BOOL v13 = *v12 == (void)v3;
          uint64_t v3 = v12;
        }
        while (!v13);
      }
      uint64_t v3 = v12;
    }
    while (v12 != a2);
    return a2;
  }
  return v3;
}

void nlp::CFScopedPtr<__CFArray const*>::reset(const void **a1, const void *a2)
{
  uint64_t v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

void std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy(a1, *((void *)a2 + 1));
    if (a2[63] < 0) {
      operator delete(*((void **)a2 + 5));
    }
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<unsigned short,std::set<std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<std::string>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned short,std::set<std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<std::string>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned short,std::set<std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<std::string>>>>::destroy(a1, a2[1]);
    std::__tree<std::string>::destroy((uint64_t)(a2 + 5), (char *)a2[6]);
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::string>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::string>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::string>>>>::destroy(a1, a2[1]);
    std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy((uint64_t)(a2 + 5), (char *)a2[6]);
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,0>(uint64_t a1)
{
  std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>>>::destroy(a1 + 24, *(void **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::__tree<std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<unsigned short,std::set<unsigned short>>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<unsigned short,std::set<unsigned short>>>,0>(uint64_t a1)
{
  std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::destroy(a1 + 24, *(void **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::__tree<std::__value_type<std::string,std::set<unsigned short>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned short>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned short>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::set<unsigned short>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned short>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned short>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::set<unsigned short>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned short>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned short>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<unsigned short>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<unsigned short>>,0>(uint64_t a1)
{
  std::__tree<unsigned short>::destroy(a1 + 24, *(void **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::__tree<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,std::set<std::string>>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,std::set<std::string>>>,0>(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(a1 + 24, *(void **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::__tree<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<unsigned short,std::map<unsigned short,std::string>>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<unsigned short,std::map<unsigned short,std::string>>>,0>(uint64_t a1)
{
  std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::string>>>>::destroy(a1 + 24, *(void **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::__tree<std::__value_type<unsigned short,std::map<std::string,std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<std::string,std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<std::string,std::string>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned short,std::map<std::string,std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<std::string,std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<std::string,std::string>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned short,std::map<std::string,std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<std::string,std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<std::string,std::string>>>>::destroy(a1, a2[1]);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(a2 + 5), (void *)a2[6]);
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::map<unsigned short,float>>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::map<unsigned short,float>>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::map<unsigned short,float>>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::map<unsigned short,float>>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::map<unsigned short,float>>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::map<unsigned short,float>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::map<unsigned short,float>>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::map<unsigned short,float>>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::map<unsigned short,float>>>>>::destroy(a1, a2[1]);
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::destroy((uint64_t)(a2 + 5), (void *)a2[6]);
    operator delete(a2);
  }
}

void nlp::CFScopedPtr<__CFNumber const*>::reset(const void **a1, const void *a2)
{
  uint64_t v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

uint64_t *std::map<unsigned short,std::map<unsigned short,float>>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<unsigned short,std::map<unsigned short,float>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned short,std::map<unsigned short,float>>,std::__tree_node<std::__value_type<unsigned short,std::map<unsigned short,float>>,void *> *,long>>>(a1, *(unsigned __int16 **)a2, (unsigned __int16 *)(a2 + 8));
  return a1;
}

void sub_224DAF26C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<unsigned short,std::map<unsigned short,float>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned short,std::map<unsigned short,float>>,std::__tree_node<std::__value_type<unsigned short,std::map<unsigned short,float>>,void *> *,long>>>(uint64_t *result, unsigned __int16 *a2, unsigned __int16 *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    char v5 = (uint64_t **)result;
    BOOL v6 = result + 1;
    do
    {
      os_log_t result = std::__tree<std::__value_type<unsigned short,std::map<unsigned short,float>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,float>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,float>>>>::__emplace_hint_unique_key_args<unsigned short,std::pair<unsigned short const,std::map<unsigned short,float>> const&>(v5, v6, v4 + 16, v4 + 16);
      std::string::size_type v7 = (unsigned __int16 *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          std::string::size_type v7 = *(unsigned __int16 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (unsigned __int16 *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned short,std::map<unsigned short,float>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,float>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,float>>>>::__emplace_hint_unique_key_args<unsigned short,std::pair<unsigned short const,std::map<unsigned short,float>> const&>(uint64_t **a1, uint64_t *a2, unsigned __int16 *a3, _WORD *a4)
{
  BOOL v6 = (uint64_t **)std::__tree<std::__value_type<unsigned short,std::map<unsigned short,float>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,float>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,float>>>>::__find_equal<unsigned short>(a1, a2, &v10, &v9, a3);
  os_log_t result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<unsigned short,std::map<unsigned short,float>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,float>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,float>>>>::__construct_node<std::pair<unsigned short const,std::map<unsigned short,float>> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned short,std::map<unsigned short,float>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,float>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,float>>>>::__find_equal<unsigned short>(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned __int16 *a5)
{
  char v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, unsigned int v7 = *((unsigned __int16 *)a2 + 16), v6 < v7))
  {
    uint64_t v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      uint64_t v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        uint64_t v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      BOOL v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        BOOL v13 = v10;
      }
      while (v14);
    }
    unsigned int v15 = *a5;
    if (*((unsigned __int16 *)v10 + 16) < v15) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          unsigned int v17 = (uint64_t *)v16;
          unsigned int v18 = *(unsigned __int16 *)(v16 + 32);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          char v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        char v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      unsigned int v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    unsigned int v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      unsigned int v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    unsigned int v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      unsigned int v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((unsigned __int16 *)a4 + 16))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          unsigned int v21 = (uint64_t *)v20;
          unsigned int v22 = *(unsigned __int16 *)(v20 + 32);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          char v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        char v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      unsigned int v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t *std::__tree<std::__value_type<unsigned short,std::map<unsigned short,float>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,float>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,float>>>>::__construct_node<std::pair<unsigned short const,std::map<unsigned short,float>> const&>@<X0>(uint64_t a1@<X0>, _WORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unsigned int v6 = operator new(0x40uLL);
  *(void *)(a3 + 8) = v5;
  *(void *)a3 = v6;
  *(unsigned char *)(a3 + 16) = 0;
  *((_WORD *)v6 + 16) = *a2;
  os_log_t result = std::map<unsigned short,float>::map[abi:ne180100]((uint64_t *)v6 + 5, (uint64_t)(a2 + 4));
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_224DAF5AC(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned short,std::map<unsigned short,float>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned short,std::map<unsigned short,float>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    std::__tree<unsigned short>::destroy((uint64_t)(a2 + 5), a2[6]);
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

uint64_t *std::map<unsigned short,float>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<unsigned short,float>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned short,float>,std::__tree_node<std::__value_type<unsigned short,float>,void *> *,long>>>(a1, *(unsigned __int16 **)a2, (unsigned __int16 *)(a2 + 8));
  return a1;
}

void sub_224DAF664(_Unwind_Exception *a1)
{
  std::__tree<unsigned short>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<unsigned short,float>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned short,float>,std::__tree_node<std::__value_type<unsigned short,float>,void *> *,long>>>(uint64_t *result, unsigned __int16 *a2, unsigned __int16 *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    unsigned int v6 = result + 1;
    do
    {
      os_log_t result = std::__tree<std::__value_type<unsigned short,float>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,float>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,float>>>::__emplace_hint_unique_key_args<unsigned short,std::pair<unsigned short const,float> const&>(v5, v6, v4 + 14, (uint64_t *)(v4 + 14));
      unsigned int v7 = (unsigned __int16 *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          unsigned int v7 = *(unsigned __int16 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (unsigned __int16 *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned short,float>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,float>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,float>>>::__emplace_hint_unique_key_args<unsigned short,std::pair<unsigned short const,float> const&>(uint64_t **a1, uint64_t *a2, unsigned __int16 *a3, uint64_t *a4)
{
  unsigned int v6 = std::__tree<std::__value_type<unsigned short,float>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,float>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,float>>>::__find_equal<unsigned short>(a1, a2, &v11, &v10, a3);
  unsigned int v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    unsigned int v7 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v7 + 28) = *a4;
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<unsigned short,float>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,float>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,float>>>::__find_equal<unsigned short>(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned __int16 *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, unsigned int v7 = *((unsigned __int16 *)a2 + 14), v6 < v7))
  {
    uint64_t v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      BOOL v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        BOOL v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      BOOL v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        BOOL v13 = v10;
      }
      while (v14);
    }
    unsigned int v15 = *a5;
    if (*((unsigned __int16 *)v10 + 14) < v15) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          unsigned int v17 = (uint64_t *)v16;
          unsigned int v18 = *(unsigned __int16 *)(v16 + 28);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          uint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        uint64_t v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      unsigned int v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    unsigned int v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      unsigned int v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    unsigned int v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      unsigned int v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((unsigned __int16 *)a4 + 14))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          unsigned int v21 = (uint64_t *)v20;
          unsigned int v22 = *(unsigned __int16 *)(v20 + 28);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          uint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        uint64_t v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      unsigned int v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void std::__function::__func<void (*)(void *,nlp::_TrieCompletion *,BOOL *),std::allocator<void (*)(void *,nlp::_TrieCompletion *,BOOL *)>,void ()(void *,nlp::_TrieCompletion *,BOOL *)>::~__func()
{
}

void *std::__function::__func<void (*)(void *,nlp::_TrieCompletion *,BOOL *),std::allocator<void (*)(void *,nlp::_TrieCompletion *,BOOL *)>,void ()(void *,nlp::_TrieCompletion *,BOOL *)>::__clone(uint64_t a1)
{
  os_log_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *os_log_t result = &unk_26D831E60;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(void *,nlp::_TrieCompletion *,BOOL *),std::allocator<void (*)(void *,nlp::_TrieCompletion *,BOOL *)>,void ()(void *,nlp::_TrieCompletion *,BOOL *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D831E60;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(void *,nlp::_TrieCompletion *,BOOL *),std::allocator<void (*)(void *,nlp::_TrieCompletion *,BOOL *)>,void ()(void *,nlp::_TrieCompletion *,BOOL *)>::operator()(uint64_t a1, void *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(void *,nlp::_TrieCompletion *,BOOL *),std::allocator<void (*)(void *,nlp::_TrieCompletion *,BOOL *)>,void ()(void *,nlp::_TrieCompletion *,BOOL *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void (*)(void *,nlp::_TrieCompletion *,BOOL *),std::allocator<void (*)(void *,nlp::_TrieCompletion *,BOOL *)>,void ()(void *,nlp::_TrieCompletion *,BOOL *)>::target_type()
{
}

void *std::__function::__value_func<void ()(void *,nlp::_TrieCompletion *,BOOL *)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void nlp::CFScopedPtr<__CFSet *>::reset(const void **a1, const void *a2)
{
  uint64_t v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

uint64_t **std::__tree<std::__value_type<unsigned short,float>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,float>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,float>>>::__emplace_unique_key_args<unsigned short,std::pair<unsigned short,float>>(uint64_t **a1, unsigned __int16 *a2, uint64_t a3)
{
  unsigned int v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    unsigned int v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        unsigned int v9 = *((unsigned __int16 *)v5 + 14);
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        unsigned int v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        unsigned int v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = operator new(0x28uLL);
    v10[14] = *(_WORD *)a3;
    *((_DWORD *)v10 + 8) = *(_DWORD *)(a3 + 4);
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at(a1, (uint64_t)v8, v6, (uint64_t *)v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, long long **a4)
{
  unsigned int v6 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  unsigned int v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at(a1, v11, v8, v10[0]);
    unsigned int v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unsigned int v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  unsigned int v7 = (std::string *)(v6 + 4);
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_224DAFD84(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned short,std::set<std::string>>,void *>>>::operator()[abi:ne180100](uint64_t a1, char **a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    std::__tree<std::string>::destroy((uint64_t)(a2 + 5), a2[6]);
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

void std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<std::string>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<std::string>>,0>(uint64_t a1)
{
  std::__tree<std::string>::destroy(a1 + 24, *(char **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::map<std::string,std::set<std::string>>>>(uint64_t **a1, void **a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v10, a2);
  unsigned int v6 = *v5;
  if (!*v5)
  {
    unsigned int v7 = v5;
    std::__tree<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>>>::__construct_node<std::pair<std::string,std::map<std::string,std::set<std::string>>>>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at(a1, v10, v7, v9[0]);
    unsigned int v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

_OWORD *std::__tree<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>>>::__construct_node<std::pair<std::string,std::map<std::string,std::set<std::string>>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  os_log_t result = operator new(0x50uLL);
  *(void *)a3 = result;
  *(void *)(a3 + 8) = v5;
  result[2] = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  *(void *)(a2 + 16) = 0;
  long long v9 = (void *)(a2 + 32);
  uint64_t v10 = *(void *)(a2 + 32);
  *((void *)result + 6) = v7;
  *((void *)result + 7) = v8;
  *((void *)result + 8) = v10;
  uint64_t v11 = (char *)(result + 4);
  uint64_t v12 = *(void *)(a2 + 40);
  *((void *)result + 9) = v12;
  if (v12)
  {
    *(void *)(v10 + 16) = v11;
    *(void *)(a2 + 24) = v9;
    *long long v9 = 0;
    *(void *)(a2 + 4nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = 0;
  }
  else
  {
    *((void *)result + 7) = v11;
  }
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,std::set<std::string>>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, long long **a4)
{
  unsigned int v6 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    std::__tree<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unsigned int v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 4);
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[8] = 0;
  v6[9] = 0;
  v6[7] = v6 + 8;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_224DB01A4(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::set<std::string>>>(uint64_t **a1, void **a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v10, a2);
  unsigned int v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = v5;
    std::__tree<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>>>::__construct_node<std::pair<std::string,std::map<std::string,std::set<std::string>>>>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at(a1, v10, v7, v9[0]);
    unsigned int v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<std::string>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, long long **a4)
{
  unsigned int v6 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unsigned int v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 4);
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[8] = 0;
  v6[9] = 0;
  v6[7] = v6 + 8;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_224DB03D4(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::map<unsigned short,std::set<unsigned short>>>>(uint64_t **a1, void **a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v10, a2);
  unsigned int v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = v5;
    std::__tree<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>>>::__construct_node<std::pair<std::string,std::map<std::string,std::set<std::string>>>>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at(a1, v10, v7, v9[0]);
    unsigned int v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<unsigned short,std::set<unsigned short>>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, long long **a4)
{
  unsigned int v6 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    std::__tree<std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unsigned int v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 4);
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[8] = 0;
  v6[9] = 0;
  v6[7] = v6 + 8;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_224DB0604(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<unsigned short,std::set<unsigned short>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::set<unsigned short>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned short>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned short>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::set<unsigned short>>>(uint64_t **a1, void **a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v10, a2);
  unsigned int v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = v5;
    std::__tree<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>>>::__construct_node<std::pair<std::string,std::map<std::string,std::set<std::string>>>>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at(a1, v10, v7, v9[0]);
    unsigned int v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<unsigned short>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<unsigned short>>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<unsigned short>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<unsigned short>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<unsigned short>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::set<unsigned short>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned short>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned short>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, long long **a4)
{
  unsigned int v6 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    std::__tree<std::__value_type<std::string,std::set<unsigned short>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned short>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned short>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<unsigned short>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<unsigned short>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::set<unsigned short>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned short>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned short>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unsigned int v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 4);
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[8] = 0;
  v6[9] = 0;
  v6[7] = v6 + 8;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_224DB0834(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<unsigned short>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<unsigned short>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>>>::destroy(a1, a2[1]);
    std::__tree<std::__value_type<unsigned short,std::set<std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<std::string>>>>::destroy((uint64_t)(a2 + 5), (void *)a2[6]);
    operator delete(a2);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>>(uint64_t **a1, void **a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v10, a2);
  unsigned int v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = v5;
    std::__tree<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>>>::__construct_node<std::pair<std::string,std::map<std::string,std::set<std::string>>>>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at(a1, v10, v7, v9[0]);
    unsigned int v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, long long **a4)
{
  unsigned int v6 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    std::__tree<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unsigned int v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 4);
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[8] = 0;
  v6[9] = 0;
  v6[7] = v6 + 8;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_224DB0AC4(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    std::__tree<std::__value_type<unsigned short,std::set<std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<std::string>>>>::destroy((uint64_t)(a2 + 5), a2[6]);
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

uint64_t *std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>,std::__tree_node<std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>,void *> *,long>>>(a1, *(unsigned __int16 **)a2, (unsigned __int16 *)(a2 + 8));
  return a1;
}

void sub_224DB0B78(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<unsigned short,std::map<unsigned short,std::set<std::string>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>,std::__tree_node<std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>,void *> *,long>>>(uint64_t *result, unsigned __int16 *a2, unsigned __int16 *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    unsigned int v6 = result + 1;
    do
    {
      os_log_t result = std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>>>::__emplace_hint_unique_key_args<unsigned short,std::pair<unsigned short const,std::map<unsigned short,std::set<std::string>>> const&>(v5, v6, v4 + 16, v4 + 16);
      uint64_t v7 = (unsigned __int16 *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = *(unsigned __int16 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (unsigned __int16 *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>>>::__emplace_hint_unique_key_args<unsigned short,std::pair<unsigned short const,std::map<unsigned short,std::set<std::string>>> const&>(uint64_t **a1, uint64_t *a2, unsigned __int16 *a3, _WORD *a4)
{
  unsigned int v6 = (uint64_t **)std::__tree<std::__value_type<unsigned short,std::map<unsigned short,float>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,float>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,float>>>>::__find_equal<unsigned short>(a1, a2, &v10, &v9, a3);
  os_log_t result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>>>::__construct_node<std::pair<unsigned short const,std::map<unsigned short,std::set<std::string>>> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>>>::__construct_node<std::pair<unsigned short const,std::map<unsigned short,std::set<std::string>>> const&>@<X0>(uint64_t a1@<X0>, _WORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unsigned int v6 = operator new(0x40uLL);
  *(void *)(a3 + 8) = v5;
  *(void *)a3 = v6;
  *(unsigned char *)(a3 + 16) = 0;
  *((_WORD *)v6 + 16) = *a2;
  os_log_t result = std::map<unsigned short,std::set<std::string>>::map[abi:ne180100]((uint64_t *)v6 + 5, (uint64_t)(a2 + 4));
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_224DB0D10(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned short,std::map<unsigned short,std::set<std::string>>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *std::map<unsigned short,std::set<std::string>>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<unsigned short,std::set<std::string>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned short,std::set<std::string>>,std::__tree_node<std::__value_type<unsigned short,std::set<std::string>>,void *> *,long>>>(a1, *(unsigned __int16 **)a2, (unsigned __int16 *)(a2 + 8));
  return a1;
}

void sub_224DB0D6C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<unsigned short,std::set<std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<std::string>>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<unsigned short,std::set<std::string>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned short,std::set<std::string>>,std::__tree_node<std::__value_type<unsigned short,std::set<std::string>>,void *> *,long>>>(uint64_t *result, unsigned __int16 *a2, unsigned __int16 *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    unsigned int v6 = result + 1;
    do
    {
      os_log_t result = std::__tree<std::__value_type<unsigned short,std::set<std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<std::string>>>>::__emplace_hint_unique_key_args<unsigned short,std::pair<unsigned short const,std::set<std::string>> const&>(v5, v6, v4 + 16, v4 + 16);
      uint64_t v7 = (unsigned __int16 *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = *(unsigned __int16 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (unsigned __int16 *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned short,std::set<std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<std::string>>>>::__emplace_hint_unique_key_args<unsigned short,std::pair<unsigned short const,std::set<std::string>> const&>(uint64_t **a1, uint64_t *a2, unsigned __int16 *a3, _WORD *a4)
{
  unsigned int v6 = (uint64_t **)std::__tree<std::__value_type<unsigned short,std::map<unsigned short,float>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,float>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,float>>>>::__find_equal<unsigned short>(a1, a2, &v10, &v9, a3);
  os_log_t result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<unsigned short,std::set<std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<std::string>>>>::__construct_node<std::pair<unsigned short const,std::set<std::string>> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned short,std::set<std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<std::string>>>>::__construct_node<std::pair<unsigned short const,std::set<std::string>> const&>@<X0>(uint64_t a1@<X0>, _WORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unsigned int v6 = operator new(0x40uLL);
  *(void *)(a3 + 8) = v5;
  *(void *)a3 = v6;
  *(unsigned char *)(a3 + 16) = 0;
  *((_WORD *)v6 + 16) = *a2;
  os_log_t result = std::set<std::string>::set[abi:ne180100]((uint64_t *)v6 + 5, (uint64_t)(a2 + 4));
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_224DB0F04(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned short,std::set<std::string>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *std::set<std::string>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(a1, *(void ***)a2, (void **)(a2 + 8));
  return a1;
}

void sub_224DB0F60(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(uint64_t *result, void **a2, void **a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = (uint64_t)(result + 1);
    do
    {
      os_log_t result = std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      uint64_t v7 = (void **)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = (void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void **)v4[2];
          BOOL v9 = *v8 == v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(uint64_t **a1, uint64_t a2, void **a3, uint64_t a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  os_log_t result = *v6;
  if (!*v6)
  {
    std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

void **std::__tree<std::string>::__find_equal<std::string>(void *a1, uint64_t a2, void ***a3, uint64_t *a4, void **a5)
{
  uint64_t v9 = (void **)(a1 + 1);
  if (a1 + 1 == (void *)a2
    || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, (void **)(a2 + 32)) & 0x80) != 0)
  {
    if (*a1 == a2)
    {
      uint64_t v12 = (void *)a2;
    }
    else
    {
      uint64_t v11 = *(void **)a2;
      if (*(void *)a2)
      {
        do
        {
          uint64_t v12 = v11;
          uint64_t v11 = (void *)v11[1];
        }
        while (v11);
      }
      else
      {
        uint64_t v16 = (void *)a2;
        do
        {
          uint64_t v12 = (void *)v16[2];
          BOOL v17 = *v12 == (void)v16;
          uint64_t v16 = v12;
        }
        while (v17);
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v12 + 4, a5) & 0x80) == 0) {
        goto LABEL_17;
      }
    }
    if (*(void *)a2)
    {
      *a3 = (void **)v12;
      return (void **)(v12 + 1);
    }
    else
    {
      *a3 = (void **)a2;
      return (void **)a2;
    }
  }
  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a2 + 32), a5) & 0x80) == 0)
  {
    *a3 = (void **)a2;
    *a4 = a2;
    return (void **)a4;
  }
  a4 = (uint64_t *)(a2 + 8);
  uint64_t v13 = *(void *)(a2 + 8);
  if (v13)
  {
    BOOL v14 = *(void ***)(a2 + 8);
    do
    {
      unsigned int v15 = v14;
      BOOL v14 = (void **)*v14;
    }
    while (v14);
  }
  else
  {
    unsigned int v19 = (void **)a2;
    do
    {
      unsigned int v15 = (void **)v19[2];
      BOOL v17 = *v15 == v19;
      unsigned int v19 = v15;
    }
    while (!v17);
  }
  if (v15 == v9)
  {
LABEL_29:
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (void **)a2;
    }
    return (void **)a4;
  }
  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, v15 + 4) & 0x80) != 0)
  {
    uint64_t v13 = *a4;
    goto LABEL_29;
  }
LABEL_17:
  return (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, a3, a5);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned short,std::map<unsigned short,std::string>>,void *>>>::operator()[abi:ne180100](uint64_t a1, char **a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy((uint64_t)(a2 + 5), a2[6]);
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

uint64_t **std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(uint64_t **a1, unsigned __int16 *a2, uint64_t a3, _WORD **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unsigned int v10 = *((unsigned __int16 *)v6 + 16);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0x40uLL);
    v11[16] = **a4;
    *((void *)v11 + 6) = 0;
    *((void *)v11 + 7) = 0;
    *((void *)v11 + 5) = 0;
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned short,std::string>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 63) < 0) {
      operator delete(__p[5]);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t *std::map<unsigned short,std::string>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<unsigned short,std::string>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned short,std::string>,std::__tree_node<std::__value_type<unsigned short,std::string>,void *> *,long>>>(a1, *(unsigned __int16 **)a2, (unsigned __int16 *)(a2 + 8));
  return a1;
}

void sub_224DB13E4(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<unsigned short,std::string>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned short,std::string>,std::__tree_node<std::__value_type<unsigned short,std::string>,void *> *,long>>>(uint64_t *result, unsigned __int16 *a2, unsigned __int16 *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      os_log_t result = std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::__emplace_hint_unique_key_args<unsigned short,std::pair<unsigned short const,std::string> const&>(v5, v6, v4 + 16, (uint64_t)(v4 + 16));
      uint64_t v7 = (unsigned __int16 *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          unsigned int v8 = v7;
          uint64_t v7 = *(unsigned __int16 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unsigned int v8 = (unsigned __int16 *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::__emplace_hint_unique_key_args<unsigned short,std::pair<unsigned short const,std::string> const&>(uint64_t **a1, uint64_t *a2, unsigned __int16 *a3, uint64_t a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<unsigned short,std::map<unsigned short,float>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,float>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,float>>>>::__find_equal<unsigned short>(a1, a2, &v10, &v9, a3);
  os_log_t result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::__construct_node<std::pair<unsigned short const,std::string> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

void std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::__construct_node<std::pair<unsigned short const,std::string> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *(void *)(a3 + 8) = v5;
  *(void *)a3 = v6;
  *(unsigned char *)(a3 + 16) = 0;
  *((_WORD *)v6 + 16) = *(_WORD *)a2;
  uint64_t v7 = (std::string *)(v6 + 40);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 8);
    v7->__r_.__value_.__r.__words[2] = *(void *)(a2 + 24);
  }
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_224DB159C(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned short,std::string>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>>(uint64_t **a1, void **a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v10, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = v5;
    std::__tree<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>>>::__construct_node<std::pair<std::string,std::map<std::string,std::set<std::string>>>>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at(a1, v10, v7, v9[0]);
    uint64_t v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<unsigned short,std::map<unsigned short,std::string>>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    unsigned int v8 = v6;
    std::__tree<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 4);
  unsigned int v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[8] = 0;
  v6[9] = 0;
  v6[7] = v6 + 8;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_224DB17D0(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<unsigned short,std::map<unsigned short,std::string>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::__emplace_unique_key_args<unsigned short,std::pair<unsigned short,std::string>>(uint64_t **a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    unsigned int v7 = *a2;
    while (1)
    {
      while (1)
      {
        unsigned int v8 = (uint64_t **)v5;
        unsigned int v9 = *((unsigned __int16 *)v5 + 16);
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unsigned int v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (char *)operator new(0x40uLL);
    *((_WORD *)v10 + 16) = *(_WORD *)a3;
    *(_OWORD *)(v10 + 4nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = *(_OWORD *)(a3 + 8);
    *((void *)v10 + 7) = *(void *)(a3 + 24);
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at(a1, (uint64_t)v8, v6, (uint64_t *)v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t *std::map<unsigned short,std::map<unsigned short,std::string>>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<unsigned short,std::map<unsigned short,std::string>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::__tree_node<std::__value_type<unsigned short,std::map<unsigned short,std::string>>,void *> *,long>>>(a1, *(unsigned __int16 **)a2, (unsigned __int16 *)(a2 + 8));
  return a1;
}

void sub_224DB18FC(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::string>>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<unsigned short,std::map<unsigned short,std::string>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::__tree_node<std::__value_type<unsigned short,std::map<unsigned short,std::string>>,void *> *,long>>>(uint64_t *result, unsigned __int16 *a2, unsigned __int16 *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      os_log_t result = std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::string>>>>::__emplace_hint_unique_key_args<unsigned short,std::pair<unsigned short const,std::map<unsigned short,std::string>> const&>(v5, v6, v4 + 16, v4 + 16);
      unsigned int v7 = (unsigned __int16 *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          unsigned int v8 = v7;
          unsigned int v7 = *(unsigned __int16 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unsigned int v8 = (unsigned __int16 *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::string>>>>::__emplace_hint_unique_key_args<unsigned short,std::pair<unsigned short const,std::map<unsigned short,std::string>> const&>(uint64_t **a1, uint64_t *a2, unsigned __int16 *a3, _WORD *a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<unsigned short,std::map<unsigned short,float>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,float>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,float>>>>::__find_equal<unsigned short>(a1, a2, &v10, &v9, a3);
  os_log_t result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::string>>>>::__construct_node<std::pair<unsigned short const,std::map<unsigned short,std::string>> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::map<unsigned short,std::string>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::map<unsigned short,std::string>>>>::__construct_node<std::pair<unsigned short const,std::map<unsigned short,std::string>> const&>@<X0>(uint64_t a1@<X0>, _WORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x40uLL);
  *(void *)(a3 + 8) = v5;
  *(void *)a3 = v6;
  *(unsigned char *)(a3 + 16) = 0;
  *((_WORD *)v6 + 16) = *a2;
  os_log_t result = std::map<unsigned short,std::string>::map[abi:ne180100]((uint64_t *)v6 + 5, (uint64_t)(a2 + 4));
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_224DB1A94(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned short,std::map<unsigned short,std::string>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<unsigned short,QPModifier>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,QPModifier>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,QPModifier>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(uint64_t **a1, unsigned __int16 *a2, uint64_t a3, unsigned __int16 **a4)
{
  unsigned int v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unsigned int v10 = *((unsigned __int16 *)v6 + 13);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        unsigned int v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        unsigned int v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = (char *)operator new(0x20uLL);
    *(_DWORD *)(v11 + 26) = **a4;
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

_OWORD *std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__emplace_unique_key_args<std::string,std::pair<std::string,unsigned short>>(uint64_t **a1, void **a2, uint64_t a3)
{
  uint64_t v5 = (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    unsigned int v7 = (uint64_t **)v5;
    uint64_t v6 = operator new(0x40uLL);
    v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *((_WORD *)v6 + 28) = *(_WORD *)(a3 + 24);
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

uint64_t **std::__tree<std::__value_type<unsigned short,unsigned short>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,unsigned short>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,unsigned short>>>::__emplace_unique_key_args<unsigned short,std::pair<unsigned short,unsigned short>>(uint64_t **a1, unsigned __int16 *a2, _DWORD *a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    unsigned int v7 = *a2;
    while (1)
    {
      while (1)
      {
        unsigned int v8 = (uint64_t **)v5;
        unsigned int v9 = *((unsigned __int16 *)v5 + 13);
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unsigned int v8 = a1 + 1;
LABEL_10:
    unsigned int v10 = (char *)operator new(0x20uLL);
    *(_DWORD *)(v10 + 26) = *a3;
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at(a1, (uint64_t)v8, v6, (uint64_t *)v10);
    return (uint64_t **)v10;
  }
  return v8;
}

BOOL QP::lexeme_ordered_range(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  uint64_t v3 = *a2;
  if (!*a2) {
    return 0;
  }
  uint64_t v4 = *(void *)(v2 + 72);
  uint64_t v5 = *(void *)(v2 + 80);
  uint64_t v6 = *(void *)(v3 + 72);
  uint64_t v7 = *(void *)(v3 + 80);
  if (v4 != v6 || v5 + v4 < v7 + v6) {
    return v4 < v6;
  }
  if (v5 != v7) {
    return v5 > v7;
  }
  unsigned int v10 = *(unsigned __int16 *)(v2 + 88);
  unsigned int v11 = *(unsigned __int16 *)(v3 + 88);
  BOOL v12 = v10 >= v11;
  if (v10 == v11)
  {
    if (*(char *)(v2 + 71) < 0) {
      unint64_t v13 = *(void *)(v2 + 56);
    }
    else {
      unint64_t v13 = *(unsigned __int8 *)(v2 + 71);
    }
    if (*(char *)(v3 + 71) < 0) {
      unint64_t v14 = *(void *)(v3 + 56);
    }
    else {
      unint64_t v14 = *(unsigned __int8 *)(v3 + 71);
    }
    BOOL v12 = v13 >= v14;
  }
  return !v12;
}

uint64_t QP::lexeme_less_than_range(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (result)
  {
    uint64_t v5 = *a2;
    if (v5)
    {
      uint64_t v6 = *(void *)(result + 72);
      uint64_t v7 = *(void *)(v5 + 72);
      if (v6 == v7)
      {
        uint64_t v8 = *(void *)(result + 80);
        uint64_t v9 = *(void *)(v5 + 80);
        if (v8 == v9)
        {
          uint64_t v10 = *(unsigned __int8 *)(result + 23);
          int v11 = (char)v10;
          if ((v10 & 0x80u) != 0) {
            uint64_t v10 = *(void *)(result + 8);
          }
          if (v10 != 6
            || (v11 >= 0 ? (uint64_t v12 = result) : (uint64_t v12 = *(void *)result),
                (v13 = *(_DWORD *)v12, int v14 = *(unsigned __int16 *)(v12 + 4), v13 == 1934979913)
              ? (BOOL v15 = v14 == 29285)
              : (BOOL v15 = 0),
                !v15))
          {
            uint64_t v16 = *(unsigned __int8 *)(v5 + 23);
            int v17 = (char)v16;
            if ((v16 & 0x80u) != 0) {
              uint64_t v16 = *(void *)(v5 + 8);
            }
            if (v16 != 6) {
              return *(unsigned __int16 *)(result + 88) < *(unsigned __int16 *)(v5 + 88);
            }
            unsigned int v18 = v17 >= 0 ? (int *)v5 : *(int **)v5;
            int v19 = *v18;
            int v20 = *((unsigned __int16 *)v18 + 2);
            if (v19 != 1934979913 || v20 != 29285) {
              return *(unsigned __int16 *)(result + 88) < *(unsigned __int16 *)(v5 + 88);
            }
          }
          BOOL v22 = QP::equals((void *)result, (void *)v5);
          uint64_t result = *a1;
          if (v22)
          {
            uint64_t v5 = *a2;
            return *(unsigned __int16 *)(result + 88) < *(unsigned __int16 *)(v5 + 88);
          }
          uint64_t v23 = *(unsigned __int8 *)(result + 23);
          int v24 = (char)v23;
          if ((v23 & 0x80u) != 0) {
            uint64_t v23 = *(void *)(result + 8);
          }
          if (v23 == 6)
          {
            if (v24 >= 0) {
              uint64_t v25 = *a1;
            }
            else {
              uint64_t v25 = *(void *)result;
            }
            int v26 = *(_DWORD *)v25;
            int v27 = *(unsigned __int16 *)(v25 + 4);
            return v26 != 1934979913 || v27 != 29285;
          }
          else
          {
            return 1;
          }
        }
        else
        {
          return v8 > v9;
        }
      }
      else
      {
        return v6 < v7;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL QP::ranges_greater_than_range(void *a1, void *a2)
{
  return a1[1] - *a1 > a2[1] - *a2;
}

void QP::Lexer::Lexer(uint64_t a1, void *a2, void *a3)
{
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = 0u;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 184) = a1 + 192;
  *(void *)(a1 + 20nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = 0;
  *(_OWORD *)(a1 + 8nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 208) = a1 + 216;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 24nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = 0;
  *(void *)(a1 + 232) = a1 + 240;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 304) = 0;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(void *)(a1 + 312) = *a2;
  uint64_t v3 = a2[1];
  *(void *)(a1 + 32nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 328) = *a3;
  uint64_t v4 = a3[1];
  *(void *)(a1 + 336) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  operator new();
}

void sub_224DB2320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, QP::LexemeConverter **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, const void **a15, const void **a16, const void **a17, const void **a18, const void **a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  nlp::CFScopedPtr<__CFArray *>::reset((const void **)(v30 - 96), 0);
  *(void *)(v30 - 96) = v24 + 552;
  std::vector<std::vector<CFRange>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 96));
  *(void *)(v30 - 96) = v24 + 528;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 96));
  *(void *)(v30 - 96) = v24 + 504;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 96));
  *(void *)(v30 - 96) = v24 + 480;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 96));
  unsigned int v31 = *(void **)(v24 + 456);
  if (v31)
  {
    *(void *)(v24 + 464) = v31;
    operator delete(v31);
  }
  nlp::CFScopedPtr<__CFAttributedString *>::reset(v25, 0);
  nlp::CFScopedPtr<__CFString const*>::reset(v29, 0);
  nlp::CFScopedPtr<__CFArray *>::reset((const void **)(v24 + 408), 0);
  nlp::CFScopedPtr<__CFCharacterSet const*>::reset(v28, 0);
  nlp::CFScopedPtr<__CFCharacterSet const*>::reset(v27, 0);
  nlp::CFScopedPtr<__CFCharacterSet const*>::reset(a16, 0);
  nlp::CFScopedPtr<__CFCharacterSet const*>::reset(a17, 0);
  nlp::CFScopedPtr<__CFCharacterSet const*>::reset(a18, 0);
  nlp::CFScopedPtr<__CFCharacterSet const*>::reset(a19, 0);
  nlp::CFScopedPtr<__CFSet const*>::reset(a15, 0);
  std::unique_ptr<QP::LexemeConverter>::reset[abi:ne180100](a10, 0);
  uint64_t v32 = *(std::__shared_weak_count **)(v24 + 336);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  unsigned int v33 = *(std::__shared_weak_count **)(v24 + 320);
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  long long v34 = (void **)(v26 + 192);
  nlp::CFScopedPtr<__CFDictionary *>::reset((const void **)(v26 + 240), 0);
  uint64_t v35 = *(void **)(v24 + 280);
  if (v35)
  {
    *(void *)(v24 + 288) = v35;
    operator delete(v35);
  }
  BOOL v36 = *v34;
  if (*v34)
  {
    *(void *)(v24 + 264) = v36;
    operator delete(v36);
  }
  std::__tree<std::string>::destroy(a11, *(char **)(v24 + 240));
  std::__tree<std::string>::destroy(a12, *(char **)(v24 + 216));
  std::__tree<std::string>::destroy(a13, *(char **)(v24 + 192));
  *(void *)(v30 - 96) = a14;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 96));
  *(void *)(v30 - 96) = v26 + 72;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 96));
  uint64_t v37 = *(void **)(v24 + 112);
  if (v37)
  {
    *(void *)(v24 + 12nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = v37;
    operator delete(v37);
  }
  CFTypeID v38 = *(void **)(v24 + 88);
  if (v38)
  {
    *(void *)(v24 + 96) = v38;
    operator delete(v38);
  }
  CFAllocatorRef v39 = *(void **)v26;
  if (*(void *)v26)
  {
    *(void *)(v24 + 72) = v39;
    operator delete(v39);
  }
  _Unwind_Resume(a1);
}

void QP::taggerSchemes(void *a1@<X0>, __CFArray **a2@<X8>)
{
  CFDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  *a2 = Mutable;
  CFArrayAppendValue(Mutable, (const void *)*MEMORY[0x263F36880]);
  uint64_t v5 = (unsigned char *)*a1;
  if (*a1)
  {
    if (v5[29])
    {
      CFArrayAppendValue(Mutable, (const void *)*MEMORY[0x263F36870]);
      uint64_t v5 = (unsigned char *)*a1;
    }
    if (v5[63] || v5[56]) {
      CFArrayAppendValue(Mutable, (const void *)*MEMORY[0x263F36868]);
    }
  }
}

void sub_224DB25E0(_Unwind_Exception *a1)
{
  nlp::CFScopedPtr<__CFArray *>::reset(v1, 0);
  _Unwind_Resume(a1);
}

void nlp::CFScopedPtr<__CFCharacterSet const*>::reset(const void **a1, const void *a2)
{
  uint64_t v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

void nlp::CFScopedPtr<__CFSet const*>::reset(const void **a1, const void *a2)
{
  uint64_t v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

void ___ZN2QP5LexerC2ENSt3__110shared_ptrINS_19ParserConfigurationEEENS2_INS_13ParserGrammarEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (lexerLogger(void)::token != -1) {
      dispatch_once(&lexerLogger(void)::token, &__block_literal_global_139);
    }
    uint64_t v2 = lexerLogger(void)::log;
    if (os_log_type_enabled((os_log_t)lexerLogger(void)::log, OS_LOG_TYPE_ERROR)) {
      ___ZN2QP5LexerC2ENSt3__110shared_ptrINS_19ParserConfigurationEEENS2_INS_13ParserGrammarEEE_block_invoke_cold_1(v2);
    }
  }
}

void QP::Lexer::~Lexer(QP::Lexer *this)
{
  dispatch_sync(*((dispatch_queue_t *)this + 75), &__block_literal_global_22);
  dispatch_sync(*((dispatch_queue_t *)this + 74), &__block_literal_global_25);
  uint64_t v2 = (_DWORD *)*((void *)this + 73);
  if (v2) {
    QPDataDetectorRelease(v2);
  }
  if (*((void *)this + 52)) {
    SILocalizationRelease();
  }
  uint64_t v3 = *((void *)this + 74);
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = *((void *)this + 75);
  if (v4) {
    dispatch_release(v4);
  }
  uint64_t v5 = (const void *)*((void *)this + 53);
  if (v5) {
    CFRelease(v5);
  }
  int v14 = (void **)((char *)this + 552);
  std::vector<std::vector<CFRange>>::__destroy_vector::operator()[abi:ne180100](&v14);
  int v14 = (void **)((char *)this + 528);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v14);
  int v14 = (void **)((char *)this + 504);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v14);
  int v14 = (void **)((char *)this + 480);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v14);
  uint64_t v6 = (void *)*((void *)this + 57);
  if (v6)
  {
    *((void *)this + 58) = v6;
    operator delete(v6);
  }
  nlp::CFScopedPtr<__CFAttributedString *>::reset((const void **)this + 56, 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)this + 55, 0);
  nlp::CFScopedPtr<__CFArray *>::reset((const void **)this + 51, 0);
  nlp::CFScopedPtr<__CFCharacterSet const*>::reset((const void **)this + 50, 0);
  nlp::CFScopedPtr<__CFCharacterSet const*>::reset((const void **)this + 49, 0);
  nlp::CFScopedPtr<__CFCharacterSet const*>::reset((const void **)this + 48, 0);
  nlp::CFScopedPtr<__CFCharacterSet const*>::reset((const void **)this + 47, 0);
  nlp::CFScopedPtr<__CFCharacterSet const*>::reset((const void **)this + 46, 0);
  nlp::CFScopedPtr<__CFCharacterSet const*>::reset((const void **)this + 45, 0);
  nlp::CFScopedPtr<__CFSet const*>::reset((const void **)this + 44, 0);
  std::unique_ptr<QP::LexemeConverter>::reset[abi:ne180100]((QP::LexemeConverter **)this + 43, 0);
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 42);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  nlp::CFScopedPtr<__CFDictionary *>::reset((const void **)this + 38, 0);
  uint64_t v9 = (void *)*((void *)this + 35);
  if (v9)
  {
    *((void *)this + 36) = v9;
    operator delete(v9);
  }
  uint64_t v10 = (void *)*((void *)this + 32);
  if (v10)
  {
    *((void *)this + 33) = v10;
    operator delete(v10);
  }
  std::__tree<std::string>::destroy((uint64_t)this + 232, *((char **)this + 30));
  std::__tree<std::string>::destroy((uint64_t)this + 208, *((char **)this + 27));
  std::__tree<std::string>::destroy((uint64_t)this + 184, *((char **)this + 24));
  int v14 = (void **)((char *)this + 160);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v14);
  int v14 = (void **)((char *)this + 136);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v14);
  int v11 = (void *)*((void *)this + 14);
  if (v11)
  {
    *((void *)this + 15) = v11;
    operator delete(v11);
  }
  uint64_t v12 = (void *)*((void *)this + 11);
  if (v12)
  {
    *((void *)this + 12) = v12;
    operator delete(v12);
  }
  int v13 = (void *)*((void *)this + 8);
  if (v13)
  {
    *((void *)this + 9) = v13;
    operator delete(v13);
  }
}

uint64_t QP::Lexer::useKnowledgeSource(uint64_t result, uint64_t a2)
{
  *(void *)(result + 576) = a2;
  return result;
}

uint64_t QP::Lexer::enumerateAnnotations(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 448);
  if (result)
  {
    char v8 = 0;
    uint64_t result = CFAttributedStringGetLength((CFAttributedStringRef)result);
    if (result >= 1)
    {
      CFIndex v5 = result;
      CFIndex v6 = 0;
      do
      {
        uint64_t result = (uint64_t)CFAttributedStringGetAttributes(*(CFAttributedStringRef *)(a1 + 448), v6, &effectiveRange);
        if (result)
        {
          uint64_t result = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)result, kQPInputAttributeAnnotationKey);
          if (result)
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, char *))(a2 + 16))(a2, result, &v8);
            if (v8) {
              break;
            }
          }
        }
        CFIndex v6 = effectiveRange.length + effectiveRange.location;
      }
      while (effectiveRange.length + effectiveRange.location < v5);
    }
  }
  return result;
}

CFIndex QP::Lexer::enumerateLastTokenCompletedQueries(uint64_t a1, uint64_t a2)
{
  char v9 = 0;
  CFIndex result = CFArrayGetCount(*(CFArrayRef *)(a1 + 408));
  CFIndex v5 = result - 1;
  if (result >= 1)
  {
    CFIndex v6 = 0;
    do
    {
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 408), v6);
      CFIndex result = (*(uint64_t (**)(uint64_t, const void *, char *))(a2 + 16))(a2, ValueAtIndex, &v9);
      if (v9) {
        BOOL v8 = 1;
      }
      else {
        BOOL v8 = v5 == v6;
      }
      ++v6;
    }
    while (!v8);
  }
  return result;
}

void QP::Lexer::lockedDetectorUpdate(QP::Lexer *this, int a2)
{
  uint64_t v2 = *((void *)this + 72);
  if (v2 && *((void *)this + 73))
  {
    (*(void (**)(void))(v2 + 48))(*(void *)v2);
    if (!*((unsigned char *)this + 434) || a2 != 0)
    {
      *((unsigned char *)this + 434) = 1;
      uint64_t v54 = 0;
      CFStringRef v55 = &v54;
      uint64_t v56 = 0x2000000000;
      uint64_t v57 = 0;
      uint64_t v50 = 0;
      long long v51 = &v50;
      uint64_t v52 = 0x2000000000;
      uint64_t v53 = 0;
      uint64_t v46 = 0;
      unsigned __int8 v47 = &v46;
      uint64_t v48 = 0x2000000000;
      uint64_t v49 = 0;
      uint64_t v42 = 0;
      CFArrayRef v43 = &v42;
      uint64_t v44 = 0x2000000000;
      uint64_t v45 = 0;
      uint64_t v38 = 0;
      CFAllocatorRef v39 = &v38;
      uint64_t v40 = 0x2000000000;
      uint64_t v41 = 0;
      uint64_t v34 = 0;
      uint64_t v35 = &v34;
      uint64_t v36 = 0x2000000000;
      uint64_t v37 = 0;
      uint64_t v30 = 0;
      unsigned int v31 = &v30;
      uint64_t v32 = 0x2000000000;
      uint64_t v33 = 0;
      uint64_t v26 = 0;
      int v27 = &v26;
      uint64_t v28 = 0x2000000000;
      uint64_t v29 = 0;
      if (*(void *)(*((void *)this + 72) + 32))
      {
        CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
        v55[3] = (uint64_t)Mutable;
        CFMutableArrayRef v8 = CFArrayCreateMutable(v6, 0, MEMORY[0x263EFFF70]);
        v51[3] = (uint64_t)v8;
        CFMutableArrayRef v9 = CFArrayCreateMutable(v6, 0, MEMORY[0x263EFFF70]);
        void v47[3] = (uint64_t)v9;
        CFMutableArrayRef v10 = CFArrayCreateMutable(v6, 0, MEMORY[0x263EFFF70]);
        v43[3] = (uint64_t)v10;
        CFMutableArrayRef v11 = CFArrayCreateMutable(v6, 0, MEMORY[0x263EFFF70]);
        v39[3] = (uint64_t)v11;
        CFMutableArrayRef v12 = CFArrayCreateMutable(v6, 0, MEMORY[0x263EFFF70]);
        v35[3] = (uint64_t)v12;
        CFMutableArrayRef v13 = CFArrayCreateMutable(v6, 0, MEMORY[0x263EFFF70]);
        v31[3] = (uint64_t)v13;
        CFMutableArrayRef v14 = CFArrayCreateMutable(v6, 0, MEMORY[0x263EFFF70]);
        v27[3] = (uint64_t)v14;
        BOOL v15 = (uint64_t *)*((void *)this + 72);
        uint64_t v16 = (void (*)(uint64_t, void *))v15[4];
        uint64_t v17 = *v15;
        v25[0] = MEMORY[0x263EF8330];
        v25[1] = 0x40000000;
        v25[2] = ___ZN2QP5Lexer20lockedDetectorUpdateEb_block_invoke;
        v25[3] = &unk_2647053D0;
        v25[4] = &v54;
        v25[5] = &v50;
        v25[6] = &v46;
        v25[7] = &v42;
        v25[8] = &v38;
        v25[9] = &v34;
        v25[10] = &v30;
        v25[11] = &v26;
        v16(v17, v25);
      }
      if (a2)
      {
        unsigned int v18 = *((void *)this + 74);
        block[0] = MEMORY[0x263EF8330];
        block[1] = 0x40000000;
        block[2] = ___ZN2QP5Lexer20lockedDetectorUpdateEb_block_invoke_2;
        block[3] = &unk_2647053F8;
        block[4] = &v54;
        block[5] = &v50;
        block[6] = &v42;
        block[7] = &v46;
        block[8] = &v38;
        block[9] = &v34;
        block[10] = &v30;
        block[11] = &v26;
        block[12] = this;
        dispatch_sync(v18, block);
      }
      else
      {
        int v19 = dispatch_group_create();
        int v20 = *((void *)this + 74);
        v23[0] = MEMORY[0x263EF8330];
        v23[1] = 0x40000000;
        v23[2] = ___ZN2QP5Lexer20lockedDetectorUpdateEb_block_invoke_3;
        v23[3] = &unk_264705420;
        v23[4] = &v54;
        v23[5] = &v50;
        v23[6] = &v42;
        v23[7] = &v46;
        v23[8] = &v38;
        v23[9] = &v34;
        v23[10] = &v30;
        v23[11] = &v26;
        v23[12] = this;
        dispatch_group_async(v19, v20, v23);
        unsigned int v21 = *((void *)this + 74);
        v22[0] = MEMORY[0x263EF8330];
        v22[1] = 0x40000000;
        v22[2] = ___ZN2QP5Lexer20lockedDetectorUpdateEb_block_invoke_4;
        v22[3] = &__block_descriptor_tmp_54;
        v22[4] = this;
        v22[5] = v19;
        dispatch_group_notify(v19, v21, v22);
      }
      _Block_object_dispose(&v26, 8);
      _Block_object_dispose(&v30, 8);
      _Block_object_dispose(&v34, 8);
      _Block_object_dispose(&v38, 8);
      _Block_object_dispose(&v42, 8);
      _Block_object_dispose(&v46, 8);
      _Block_object_dispose(&v50, 8);
      _Block_object_dispose(&v54, 8);
    }
  }
}

void sub_224DB2E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  _Block_object_dispose(&a53, 8);
  _Block_object_dispose(&a57, 8);
  _Block_object_dispose((const void *)(v57 - 256), 8);
  _Block_object_dispose((const void *)(v57 - 224), 8);
  _Block_object_dispose((const void *)(v57 - 192), 8);
  _Block_object_dispose((const void *)(v57 - 160), 8);
  _Block_object_dispose((const void *)(v57 - 128), 8);
  _Block_object_dispose((const void *)(v57 - 96), 8);
  _Unwind_Resume(a1);
}

void ___ZN2QP5Lexer20lockedDetectorUpdateEb_block_invoke(void *a1, CFStringRef theString, const __CFString *a3)
{
  if (theString && CFStringGetLength(theString))
  {
    if (CFStringCompare(a3, @"Person", 0))
    {
      if (CFStringCompare(a3, @"Location", 0))
      {
        if (CFStringCompare(a3, @"AppName", 0))
        {
          if (CFStringCompare(a3, @"Bundle", 0))
          {
            if (CFStringCompare(a3, @"Field", 0))
            {
              if (CFStringCompare(a3, @"Airline", 0))
              {
                if (CFStringCompare(a3, @"Airport", 0))
                {
                  if (CFStringCompare(a3, @"HotelName", 0)) {
                    return;
                  }
                  uint64_t v6 = a1[11];
                }
                else
                {
                  uint64_t v6 = a1[10];
                }
              }
              else
              {
                uint64_t v6 = a1[9];
              }
            }
            else
            {
              uint64_t v6 = a1[8];
            }
          }
          else
          {
            uint64_t v6 = a1[7];
          }
        }
        else
        {
          uint64_t v6 = a1[6];
        }
      }
      else
      {
        uint64_t v6 = a1[5];
      }
    }
    else
    {
      uint64_t v6 = a1[4];
    }
    uint64_t v7 = *(__CFArray **)(*(void *)(v6 + 8) + 24);
    CFArrayAppendValue(v7, theString);
  }
}

void ___ZN2QP5Lexer20lockedDetectorUpdateEb_block_invoke_2(void *a1)
{
  uint64_t v2 = a1[12];
  *(unsigned char *)(v2 + 434) = 0;
  QPDataDetectorSetDynamicSources(*(void *)(v2 + 584));
  (*(void (**)(void))(*(void *)(v2 + 576) + 56))(**(void **)(v2 + 576));
  uint64_t v3 = *(const void **)(*(void *)(a1[4] + 8) + 24);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *(const void **)(*(void *)(a1[5] + 8) + 24);
  if (v4) {
    CFRelease(v4);
  }
  CFIndex v5 = *(const void **)(*(void *)(a1[6] + 8) + 24);
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = *(const void **)(*(void *)(a1[7] + 8) + 24);
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v7 = *(const void **)(*(void *)(a1[8] + 8) + 24);
  if (v7) {
    CFRelease(v7);
  }
  CFMutableArrayRef v8 = *(const void **)(*(void *)(a1[9] + 8) + 24);
  if (v8) {
    CFRelease(v8);
  }
  CFMutableArrayRef v9 = *(const void **)(*(void *)(a1[10] + 8) + 24);
  if (v9) {
    CFRelease(v9);
  }
  CFMutableArrayRef v10 = *(const void **)(*(void *)(a1[11] + 8) + 24);
  if (v10)
  {
    CFRelease(v10);
  }
}

void ___ZN2QP5Lexer20lockedDetectorUpdateEb_block_invoke_3(void *a1)
{
  QPDataDetectorSetDynamicSources(*(void *)(a1[12] + 584));
  uint64_t v2 = *(const void **)(*(void *)(a1[4] + 8) + 24);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(*(void *)(a1[5] + 8) + 24);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *(const void **)(*(void *)(a1[6] + 8) + 24);
  if (v4) {
    CFRelease(v4);
  }
  CFIndex v5 = *(const void **)(*(void *)(a1[7] + 8) + 24);
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = *(const void **)(*(void *)(a1[8] + 8) + 24);
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v7 = *(const void **)(*(void *)(a1[9] + 8) + 24);
  if (v7) {
    CFRelease(v7);
  }
  CFMutableArrayRef v8 = *(const void **)(*(void *)(a1[10] + 8) + 24);
  if (v8) {
    CFRelease(v8);
  }
  CFMutableArrayRef v9 = *(const void **)(*(void *)(a1[11] + 8) + 24);
  if (v9)
  {
    CFRelease(v9);
  }
}

void ___ZN2QP5Lexer20lockedDetectorUpdateEb_block_invoke_4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  *(unsigned char *)(v2 + 434) = 0;
  uint64_t v3 = *(void *)(v2 + 576);
  if (v3) {
    (*(void (**)(void))(v3 + 56))(*(void *)v3);
  }
  uint64_t v4 = *(NSObject **)(a1 + 40);
  dispatch_release(v4);
}

void QP::Lexer::updateWithKnowledgeSource(QP::Lexer *this, char a2, int a3)
{
  if (*((void *)this + 73))
  {
    uint64_t v4 = *((void *)this + 72);
    if (v4)
    {
      if ((a2 & 1) != 0 || a3)
      {
        uint64_t v6 = *((void *)this + 75);
        block[0] = MEMORY[0x263EF8330];
        block[1] = 0x40000000;
        block[2] = ___ZN2QP5Lexer25updateWithKnowledgeSourceEbb_block_invoke;
        block[3] = &__block_descriptor_tmp_55;
        block[4] = this;
        char v10 = a3;
        dispatch_sync(v6, block);
      }
      else if ((*(unsigned int (**)(void))(v4 + 40))(*(void *)v4))
      {
        CFIndex v5 = *((void *)this + 75);
        v7[0] = MEMORY[0x263EF8330];
        v7[1] = 0x40000000;
        v7[2] = ___ZN2QP5Lexer25updateWithKnowledgeSourceEbb_block_invoke_2;
        void v7[3] = &__block_descriptor_tmp_56;
        v7[4] = this;
        char v8 = 0;
        dispatch_async(v5, v7);
      }
    }
  }
}

void ___ZN2QP5Lexer25updateWithKnowledgeSourceEbb_block_invoke(uint64_t a1)
{
}

void ___ZN2QP5Lexer25updateWithKnowledgeSourceEbb_block_invoke_2(uint64_t a1)
{
}

void QP::Lexer::updateResources(QP::Lexer *this)
{
}

void QP::Lexer::updateTagger(QP::Lexer *this)
{
  if (*(unsigned char *)(*((void *)this + 39) + 63))
  {
    uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 40);
    v4[0] = *((void *)this + 39);
    v4[1] = v2;
    if (v2) {
      atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    QP::taggerSchemes(v4, (__CFArray **)&cf);
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
    uint64_t v3 = (const void *)*((void *)this + 53);
    if (v3) {
      CFRelease(v3);
    }
    *((void *)this + 53) = NLTaggerCreate();
    if (cf) {
      CFRelease(cf);
    }
  }
}

void sub_224DB3508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(exception_object);
}

void QP::Lexer::clearResources(QP::DateConverter ***this)
{
  QP::LexemeConverter::clearResources(this[43]);
  uint64_t v2 = this[74];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZN2QP5Lexer14clearResourcesEv_block_invoke;
  block[3] = &__block_descriptor_tmp_57;
  block[4] = this;
  dispatch_sync(v2, block);
  *((unsigned char *)this + 432) = 0;
}

void ___ZN2QP5Lexer14clearResourcesEv_block_invoke(uint64_t a1)
{
}

void QP::Lexer::clear(QP::Lexer *this)
{
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)this + 55, 0);
  CFAttributedStringRef v2 = (const __CFAttributedString *)*((void *)this + 56);
  v5.CFIndex length = CFAttributedStringGetLength(v2);
  v5.CFIndex location = 0;
  CFAttributedStringReplaceString(v2, v5, &stru_26D832058);
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  nlp::CFScopedPtr<__CFArray *>::reset((const void **)this + 51, Mutable);
  *((void *)this + 58) = *((void *)this + 57);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__clear[abi:ne180100]((uint64_t *)this + 60);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__clear[abi:ne180100]((uint64_t *)this + 63);
  std::vector<std::vector<CFRange>>::__clear[abi:ne180100]((uint64_t *)this + 69);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__clear[abi:ne180100]((uint64_t *)this + 66);
}

void QP::Lexer::loadLexerResource(QP::Lexer *this, CFURLRef url)
{
  if (url)
  {
    CFStringRef PathComponent = CFURLCopyLastPathComponent(url);
    CFStringRef v14 = PathComponent;
    CFStringRef v5 = CFURLCopyPathExtension(url);
    CFStringRef v13 = v5;
    if (CFStringsAreEqual(v5, @"plist"))
    {
      if (QP::LexemeConverter::loadResourceURL(*((QP::DateConverter ***)this + 43), url)) {
        *((unsigned char *)this + 432) = 1;
      }
    }
    else if (CFStringsAreEqual(PathComponent, @"geobase.map") {
           || CFStringsAreEqual(PathComponent, @"reference.mdplist"))
    }
    {
      QP::LexemeConverter::loadResourceURL(*((QP::DateConverter ***)this + 43), url);
    }
    else if (CFStringsAreEqual(v5, @"cache"))
    {
      uint64_t v9 = 0;
      char v10 = &v9;
      uint64_t v11 = 0x2000000000;
      char v12 = 1;
      uint64_t v6 = *((void *)this + 74);
      block[0] = MEMORY[0x263EF8330];
      block[1] = 0x40000000;
      block[2] = ___ZN2QP5Lexer17loadLexerResourceEPK7__CFURL_block_invoke;
      block[3] = &unk_2647054C8;
      void block[5] = this;
      block[6] = url;
      block[4] = &v9;
      dispatch_sync(v6, block);
      int v7 = *((unsigned __int8 *)v10 + 24);
      *((unsigned char *)this + 432) = v7;
      if (v7 && CFStringHasSuffix(PathComponent, @"lexicon.cache")) {
        QP::Lexer::updateWithKnowledgeSource(this, 1, *(unsigned __int8 *)(*((void *)this + 39) + 34));
      }
      _Block_object_dispose(&v9, 8);
    }
    if (v5) {
      CFRelease(v5);
    }
    if (PathComponent) {
      CFRelease(PathComponent);
    }
  }
}

void sub_224DB3818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v9 - 48), 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v9 - 40), 0);
  _Unwind_Resume(a1);
}

uint64_t ___ZN2QP5Lexer17loadLexerResourceEPK7__CFURL_block_invoke(uint64_t a1)
{
  uint64_t result = QPDataDetectorLoadResources(*(const void ***)(*(void *)(a1 + 40) + 584), *(CFURLRef *)(a1 + 48));
  if (!result) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
  return result;
}

BOOL QP::Lexer::hasResources(QP::Lexer *this)
{
  return *((void *)this + 39)
      && *((void *)this + 41)
      && *((void *)this + 73)
      && *((void *)this + 53)
      && (uint64_t v1 = (void *)*((void *)this + 43)) != 0
      && *v1
      && v1[2]
      && v1[4]
      && v1[5]
      && v1[6]
      && *((unsigned char *)this + 432) != 0;
}

void QP::Lexer::setString(const void **this, const __CFString *a2, int a3, const void *a4)
{
  QP::Lexer::clear((QP::Lexer *)this);
  if (a2)
  {
    CFTypeRef v8 = CFRetain(a2);
    nlp::CFScopedPtr<__CFString const*>::reset(this + 55, v8);
    CFAttributedStringRef v9 = (const __CFAttributedString *)this[56];
    v12.CFIndex length = CFAttributedStringGetLength(v9);
    v12.CFIndex location = 0;
    CFAttributedStringReplaceString(v9, v12, (CFStringRef)this[55]);
  }
  QP::Lexer::parse((QP::Lexer *)this, a3, a4);
  int v10 = *((unsigned __int8 *)this[39] + 34);
  QP::Lexer::updateWithKnowledgeSource((QP::Lexer *)this, 0, v10);
}

void QP::Lexer::parse(QP::Lexer *this, int a2, const void *a3)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  if (!QP::Lexer::shouldSkipParsing(this))
  {
    QP::Lexer::resetParseVariables(this);
    uint64_t v22 = 0;
    uint64_t v23 = &v22;
    uint64_t v24 = 0x2000000000;
    CFMutableStringRef Mutable = 0;
    CFMutableStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
    if (v23[3])
    {
      v19[0] = 0;
      v19[1] = v19;
      v19[2] = 0x3802000000;
      v19[3] = __Block_byref_object_copy__95;
      uint64_t v20 = 0;
      CFIndex v21 = 0;
      v19[4] = __Block_byref_object_dispose__96;
      CFIndex Length = CFStringGetLength(*((CFStringRef *)this + 55));
      uint64_t v20 = 0;
      CFIndex v21 = Length;
      uint64_t v15 = 0;
      uint64_t v16 = &v15;
      uint64_t v17 = 0x2000000000;
      uint64_t v18 = 0;
      v14[0] = 0;
      v14[1] = v14;
      v14[2] = 0x2000000000;
      v14[3] = &v30;
      NLTaggerSetString();
      NLTaggerSetLocaleForRange();
      NLTaggerEnumerateTokens();
      int v7 = (long long *)*((void *)this + 20);
      for (uint64_t i = (long long *)*((void *)this + 21); v7 != i; ++v7)
      {
        CFAttributedStringRef v9 = *(std::string **)v7;
        if (*(char *)(*(void *)v7 + 71) < 0) {
          std::string::__init_copy_ctor_external(&block, v9[2].__r_.__value_.__l.__data_, v9[2].__r_.__value_.__l.__size_);
        }
        else {
          std::string block = v9[2];
        }
        if ((void **)((char *)this + 192) == std::__tree<std::string>::find<std::string>((uint64_t)this + 184, (void **)&block.__r_.__value_.__l.__data_))
        {
          std::vector<std::shared_ptr<QP::Lexeme>>::push_back[abi:ne180100]((uint64_t *)this + 17, v7);
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)this + 23, (void **)&block.__r_.__value_.__l.__data_, (uint64_t)&block);
        }
        if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(block.__r_.__value_.__l.__data_);
        }
      }
      QP::Lexer::selectPersonLexemes(this);
      QP::Lexer::selectLocationLexemes(this);
      uint64_t v10 = v23[3];
      block.__r_.__value_.__r.__words[0] = MEMORY[0x263EF8330];
      block.__r_.__value_.__l.__size_ = 0x40000000;
      block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN2QP5Lexer19selectEntityLexemesEP10__CFString_block_invoke;
      int v27 = &__block_descriptor_tmp_119;
      uint64_t v28 = this;
      QPDataDetectorsEnumerateEntitiesInString(v10, 0, &block);
      uint64_t v11 = v23[3];
      CFRange v12 = *((void *)this + 74);
      block.__r_.__value_.__r.__words[0] = MEMORY[0x263EF8330];
      block.__r_.__value_.__l.__size_ = 0x40000000;
      block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN2QP5Lexer20selectDefaultLexemesEP10__CFString_block_invoke;
      int v27 = &__block_descriptor_tmp_127;
      uint64_t v28 = this;
      uint64_t v29 = v11;
      dispatch_sync(v12, &block);
      QP::Lexer::selectKnowledgeSourceLexemes(this, &v30, v16[3], a2, a3);
      QP::Lexer::sortLexemes(this);
      QP::Lexer::addLexemes(this);
      if (*(unsigned char *)(*((void *)this + 39) + 62)) {
        QP::Lexer::addEntityLexemes(this);
      }
      CFStringRef v13 = (const void *)v23[3];
      if (v13) {
        CFRelease(v13);
      }
      _Block_object_dispose(v14, 8);
      _Block_object_dispose(&v15, 8);
      _Block_object_dispose(v19, 8);
    }
    _Block_object_dispose(&v22, 8);
  }
}

void sub_224DB3D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
}

uint64_t QP::Lexer::lexemeFromLocations@<X0>(uint64_t result@<X0>, unint64_t **a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *a2;
  CFStringRef v5 = a2[1];
  uint64_t v6 = v5 - *a2;
  if (!v6) {
    goto LABEL_15;
  }
  if (v6 != 1)
  {
    if (v4 != v5)
    {
      uint64_t v9 = -1;
      while (1)
      {
        unint64_t v10 = *v4;
        if ((*v4 & 0x8000000000000000) != 0) {
          break;
        }
        uint64_t v11 = *(void *)(result + 504);
        if (v10 >= (*(void *)(result + 512) - v11) >> 4) {
          break;
        }
        uint64_t v12 = *(void *)(v11 + 16 * v10);
        if (v9 == -1) {
          uint64_t v9 = *(void *)(v12 + 72);
        }
        if (++v4 == v5)
        {
          if (v9 != -1) {
            operator new();
          }
          goto LABEL_15;
        }
      }
    }
    goto LABEL_15;
  }
  unint64_t v7 = *v4;
  if ((v7 & 0x8000000000000000) != 0 || (uint64_t v8 = *(void *)(result + 504), v7 >= (*(void *)(result + 512) - v8) >> 4))
  {
LABEL_15:
    *a3 = 0;
    a3[1] = 0;
    return result;
  }
  long long v13 = *(_OWORD *)(v8 + 16 * v7);
  *(_OWORD *)a3 = v13;
  if (*((void *)&v13 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_224DB4030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void **a16, void *a17)
{
}

uint64_t QP::Lexer::lexemeAtLocation@<X0>(uint64_t this@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  if ((a2 & 0x8000000000000000) != 0 || (uint64_t v3 = *(void *)(this + 504), a2 >= (*(void *)(this + 512) - v3) >> 4))
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    long long v4 = *(_OWORD *)(v3 + 16 * a2);
    *(_OWORD *)a3 = v4;
    if (*((void *)&v4 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v4 + 1) + 8), 1uLL, memory_order_relaxed);
    }
  }
  return this;
}

void QP::Lexer::enumerateLexemesAtParseIndex(QP::Lexer *this, unint64_t a2, uint64_t a3)
{
  if ((a2 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = *((void *)this + 69);
    if (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 70) - v5) >> 3) > a2 && QP::Lexer::hasResources(this))
    {
      uint64_t v7 = *(void *)(*((void *)this + 41) + 40);
      if (v7 && *(unsigned char *)(v7 + 30))
      {
        uint64_t v8 = *(void *)(v5 + 24 * a2);
        uint64_t v9 = *(void *)(v5 + 24 * a2 + 8);
        if (v9 != v8)
        {
          uint64_t v10 = -1;
          uint64_t v11 = 24 * a2;
          do
          {
            if (v10 == -1) {
              uint64_t v10 = *(void *)(v9 - 16);
            }
            uint64_t v12 = *(void *)(v9 - 8);
            long long v13 = (uint64_t *)(*((void *)this + 63) + 16 * v12);
            uint64_t v14 = *v13;
            uint64_t v15 = (std::__shared_weak_count *)v13[1];
            if (v15)
            {
              atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
              uint64_t v26 = v15;
              atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
              uint64_t v12 = *(void *)(v9 - 8);
            }
            else
            {
              uint64_t v26 = 0;
            }
            uint64_t v25 = v14;
            (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, void, void))(a3 + 16))(a3, &v25, v10 - *(void *)(v9 - 16), v12, *(void *)(v14 + 72), *(void *)(v14 + 80));
            if (v26) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v26);
            }
            if (v15) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v15);
            }
            v9 -= 16;
          }
          while (v9 != *(void *)(*((void *)this + 69) + v11));
        }
      }
      else
      {
        uint64_t v16 = (void *)(v5 + 24 * a2);
        uint64_t v17 = (void *)*v16;
        uint64_t v18 = (void *)v16[1];
        if ((void *)*v16 != v18)
        {
          do
          {
            uint64_t v19 = v17[1];
            uint64_t v20 = (uint64_t *)(*((void *)this + 63) + 16 * v19);
            uint64_t v21 = *v20;
            uint64_t v22 = (std::__shared_weak_count *)v20[1];
            if (v22)
            {
              atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
              uint64_t v24 = v22;
              atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
              uint64_t v19 = v17[1];
            }
            else
            {
              uint64_t v24 = 0;
            }
            uint64_t v23 = v21;
            (*(void (**)(uint64_t, uint64_t *, void, uint64_t, void, void))(a3 + 16))(a3, &v23, *v17, v19, *(void *)(v21 + 72), *(void *)(v21 + 80));
            if (v24) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v24);
            }
            if (v22) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v22);
            }
            v17 += 2;
          }
          while (v17 != v18);
        }
      }
    }
  }
}

void sub_224DB42AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(exception_object);
}

void QP::Lexer::enumerateEntityLexemes(uint64_t a1, uint64_t a2)
{
  char v8 = 0;
  CFAttributedStringRef v2 = *(uint64_t **)(a1 + 528);
  for (uint64_t i = *(uint64_t **)(a1 + 536); v2 != i; v2 += 2)
  {
    uint64_t v6 = *v2;
    uint64_t v5 = (std::__shared_weak_count *)v2[1];
    uint64_t v7 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t *, char *))(a2 + 16))(a2, &v6, &v8);
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    if (v8) {
      break;
    }
  }
}

void sub_224DB4384(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

void QP::Lexer::getExternalTypesForRange(uint64_t a1@<X0>, CFIndex a2@<X1>, CFIndex a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X8>)
{
  v67.CFIndex location = a2;
  v67.CFIndex length = a3;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  CFTypeRef v64 = 0;
  CFStringRef v65 = 0;
  uint64_t v66 = 0;
  CFTypeRef v61 = 0;
  CFTypeID v62 = 0;
  uint64_t v63 = 0;
  memset(&v60, 0, sizeof(v60));
  uint64_t v7 = (CFAllocatorRef *)MEMORY[0x263EFFB08];
  if (*(void *)(a1 + 576))
  {
    CFStringRef v8 = *(const __CFString **)(a1 + 440);
    if (v8)
    {
      BOOL v9 = a3 + a2 >= CFStringGetLength(v8);
      CFStringRef v10 = CFStringCreateWithSubstring(*v7, *(CFStringRef *)(a1 + 440), v67);
      *(void *)&long long v54 = v10;
      if (!QP::ParserGrammar::isIgnoredTerm(*(QP::ParserGrammar **)(a1 + 328), v10))
      {
        v69.CFIndex length = CFStringGetLength(v10);
        v69.CFIndex location = 0;
        CFStringRef v11 = (const __CFString *)copyStringInsertingSpacesBetweenIdeographCharacters(v10, v69);
        CFStringRef v59 = v11;
        CFArrayRef v12 = (const __CFArray *)(*(uint64_t (**)(void, const __CFString *, BOOL))(*(void *)(a1 + 576)
                                                                                               + 8))(**(void **)(a1 + 576), v11, v9);
        CFArrayRef v13 = v12;
        CFArrayRef v58 = v12;
        if (v12)
        {
          CFIndex Count = CFArrayGetCount(v12);
          if (Count >= 1)
          {
            for (CFIndex i = 0; i != Count; ++i)
            {
              CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v13, i);
              QP::getUTF8StringFromCFString(ValueAtIndex, &__v);
              std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,std::string &,CFRange &,void>((uint64_t)&__v, (uint64_t)&v67, __p);
              unsigned int v17 = QP::ParserGrammar::symbolID(*(void *)(a1 + 328), (uint64_t)&__v);
              uint64_t v18 = __p[0];
              v18[44] = QP::ParserGrammar::symbolFlag(*(QP::ParserGrammar **)(a1 + 328), v17);
              std::vector<std::shared_ptr<QP::Lexeme>>::push_back[abi:ne180100]((uint64_t *)&v61, (long long *)__p);
              std::vector<std::string>::pointer end = v60.__end_;
              if (v60.__end_ >= v60.__end_cap_.__value_)
              {
                uint64_t v21 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v60, (long long *)&__v);
              }
              else
              {
                if (SHIBYTE(__v.__end_) < 0)
                {
                  std::string::__init_copy_ctor_external(v60.__end_, (const std::string::value_type *)__v.__first_, (std::string::size_type)__v.__begin_);
                }
                else
                {
                  long long v20 = *(_OWORD *)&__v.__first_;
                  v60.__end_->__r_.__value_.__r.__words[2] = (std::string::size_type)__v.__end_;
                  *(_OWORD *)&end->__r_.__value_.__l.__data_ = v20;
                }
                uint64_t v21 = end + 1;
              }
              v60.__end_ = v21;
              if (__p[1]) {
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
              }
              if (SHIBYTE(__v.__end_) < 0) {
                operator delete(__v.__first_);
              }
            }
          }
          if (Count)
          {
            std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,char const(&)[5],CFRange &,void>("Text", (uint64_t)&v67, &v57);
            uint64_t v22 = *(void *)(a1 + 328);
            std::string::basic_string[abi:ne180100]<0>(&__v, "Text");
            unsigned int v23 = QP::ParserGrammar::symbolID(v22, (uint64_t)&__v);
            if (SHIBYTE(__v.__end_) < 0) {
              operator delete(__v.__first_);
            }
            CFIndex location = v57.location;
            *(_WORD *)(location + 88) = QP::ParserGrammar::symbolFlag(*(QP::ParserGrammar **)(a1 + 328), v23);
            std::vector<std::shared_ptr<QP::Lexeme>>::push_back[abi:ne180100]((uint64_t *)&v61, (long long *)&v57.location);
            std::string::basic_string[abi:ne180100]<0>(__p, "Text");
            std::vector<std::string>::pointer v25 = v60.__end_;
            if (v60.__end_ >= v60.__end_cap_.__value_)
            {
              unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * (((char *)v60.__end_ - (char *)v60.__begin_) >> 3);
              unint64_t v28 = v27 + 1;
              if (v27 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              }
              if (0x5555555555555556 * (((char *)v60.__end_cap_.__value_ - (char *)v60.__begin_) >> 3) > v28) {
                unint64_t v28 = 0x5555555555555556 * (((char *)v60.__end_cap_.__value_ - (char *)v60.__begin_) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v60.__end_cap_.__value_ - (char *)v60.__begin_) >> 3) >= 0x555555555555555) {
                unint64_t v29 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v29 = v28;
              }
              __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v60.__end_cap_;
              if (v29) {
                CFRange v30 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v60.__end_cap_, v29);
              }
              else {
                CFRange v30 = 0;
              }
              uint64_t v31 = v30 + v27;
              __v.__first_ = v30;
              __v.__begin_ = v31;
              __v.__end_cap_.__value_ = &v30[v29];
              long long v32 = *(_OWORD *)__p;
              v31->__r_.__value_.__r.__words[2] = v56;
              *(_OWORD *)&v31->__r_.__value_.__l.__data_ = v32;
              __p[1] = 0;
              std::string::size_type v56 = 0;
              __p[0] = 0;
              __v.__end_ = v31 + 1;
              std::vector<std::string>::__swap_out_circular_buffer(&v60, &__v);
              uint64_t v33 = v60.__end_;
              std::__split_buffer<std::string>::~__split_buffer(&__v);
              v60.__end_ = v33;
              if (SHIBYTE(v56) < 0) {
                operator delete(__p[0]);
              }
            }
            else
            {
              long long v26 = *(_OWORD *)__p;
              v60.__end_->__r_.__value_.__r.__words[2] = v56;
              *(_OWORD *)&v25->__r_.__value_.__l.__data_ = v26;
              v60.__end_ = v25 + 1;
            }
            if (v57.length) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v57.length);
            }
          }
          CFRelease(v13);
        }
        if (v11) {
          CFRelease(v11);
        }
      }
      if (v10) {
        CFRelease(v10);
      }
    }
  }
  uint64_t v34 = v7;
  uint64_t v35 = (unsigned __int8 ***)*a4;
  uint64_t v36 = (unsigned __int8 ***)a4[1];
  if ((unsigned __int8 ***)*a4 != v36)
  {
    CFAllocatorRef v37 = *v34;
    do
    {
      uint64_t v38 = (std::string *)std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>((uint64_t)v60.__begin_, (uint64_t)v60.__end_, *v35);
      if (v38 == v60.__end_)
      {
        std::vector<std::shared_ptr<QP::Lexeme>>::push_back[abi:ne180100](a5, (long long *)v35);
      }
      else
      {
        long long v39 = *(_OWORD *)&v61[2 * (int)(-1431655765 * ((unint64_t)((char *)v38 - (char *)v60.__begin_) >> 3))];
        *(_OWORD *)std::string __p = v39;
        if (*((void *)&v39 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v39 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        CFIndex v40 = v67.location;
        CFIndex length = v67.length;
        v57.CFIndex location = (CFIndex)(*v35)[9];
        v57.CFIndex length = v67.location - v57.location + v67.length;
        BOOL v42 = v40 + length >= CFStringGetLength(*(CFStringRef *)(a1 + 440));
        CFStringRef v43 = CFStringCreateWithSubstring(v37, *(CFStringRef *)(a1 + 440), v57);
        CFStringRef v59 = v43;
        if (!QP::ParserGrammar::isIgnoredTerm(*(QP::ParserGrammar **)(a1 + 328), v43))
        {
          CFArrayRef v44 = (const __CFArray *)(*(uint64_t (**)(void, const __CFString *, BOOL))(*(void *)(a1 + 576)
                                                                                                 + 8))(**(void **)(a1 + 576), v43, v42);
          CFArrayRef v45 = v44;
          CFArrayRef v58 = v44;
          if (v44)
          {
            CFIndex v46 = CFArrayGetCount(v44);
            CFIndex v47 = v46;
            if (v46)
            {
              if (v46 >= 1)
              {
                CFIndex v48 = 0;
                do
                {
                  CFStringRef v49 = (const __CFString *)CFArrayGetValueAtIndex(v45, v48);
                  QP::getUTF8StringFromCFString(v49, &__v);
                  std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,std::string &,CFRange &,void>((uint64_t)&__v, (uint64_t)&v57, &v54);
                  unsigned int v50 = QP::ParserGrammar::symbolID(*(void *)(a1 + 328), (uint64_t)&__v);
                  uint64_t v51 = v54;
                  *(_WORD *)(v51 + 88) = QP::ParserGrammar::symbolFlag(*(QP::ParserGrammar **)(a1 + 328), v50);
                  std::vector<std::shared_ptr<QP::Lexeme>>::push_back[abi:ne180100]((uint64_t *)&v64, &v54);
                  if (*((void *)&v54 + 1)) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v54 + 1));
                  }
                  if (SHIBYTE(__v.__end_) < 0) {
                    operator delete(__v.__first_);
                  }
                  ++v48;
                }
                while (v47 != v48);
              }
            }
            else
            {
              std::vector<std::shared_ptr<QP::Lexeme>>::push_back[abi:ne180100](a5, (long long *)__p);
            }
            CFRelease(v45);
          }
        }
        if (v43) {
          CFRelease(v43);
        }
        if (__p[1]) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
        }
      }
      v35 += 2;
    }
    while (v35 != v36);
  }
  uint64_t v52 = a4;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__clear[abi:ne180100](a4);
  std::vector<std::shared_ptr<QP::Lexeme>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<QP::Lexeme>*>,std::__wrap_iter<std::shared_ptr<QP::Lexeme>*>>(v52, (void *)v52[1], v61, v62, (v62 - (char *)v61) >> 4);
  std::vector<std::shared_ptr<QP::Lexeme>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<QP::Lexeme>*>,std::__wrap_iter<std::shared_ptr<QP::Lexeme>*>>(v52, (void *)v52[1], v64, v65, (v65 - (char *)v64) >> 4);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v60;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v61;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v64;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
}

void sub_224DB4970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, const void *a11, uint64_t a12, uint64_t ***__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,const void *a22,const void *a23,uint64_t **a24,uint64_t a25,uint64_t a26,uint64_t *a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)(v30 - 136));
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  nlp::CFScopedPtr<__CFArray const*>::reset(&a22, 0);
  nlp::CFScopedPtr<__CFString const*>::reset(&a23, 0);
  nlp::CFScopedPtr<__CFString const*>::reset(&a11, 0);
  std::string __p = &a24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a24 = &a27;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  a27 = &a30;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a27);
  a30 = a10;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  _Unwind_Resume(a1);
}

void **std::vector<std::shared_ptr<QP::Lexeme>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>>((uint64_t)result, v13);
    uint64_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)uint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<QP::Lexeme>>::__swap_out_circular_buffer(a1, v18);
    BOOL v9 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::shared_ptr<QP::GraphStructureStack::Node>>::~__split_buffer(v18);
  }
  else
  {
    *uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    BOOL v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_224DB4C34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<QP::GraphStructureStack::Node>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t QP::Lexer::containsLegacyQuerySyntax(QP::Lexer *this)
{
  if (*((void *)this + 55) && (CFSetRef v2 = (const __CFSet *)*((void *)this + 44)) != 0 && CFSetGetCount(v2))
  {
    CFIndex Length = CFStringGetLength(*((CFStringRef *)this + 55));
    char v4 = 0;
    v6.CFIndex location = 0;
    CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    v6.CFIndex length = Length;
    do
    {
      if (v6.location >= Length) {
        break;
      }
      int CharacterFromSet = CFStringFindCharacterFromSet(*((CFStringRef *)this + 55), *((CFCharacterSetRef *)this + 48), v6, 0, &result);
      CFIndex location = result.location;
      if (!CharacterFromSet || result.location < 1) {
        break;
      }
      while (location >= 2)
      {
        if (CFStringGetCharacterAtIndex(*((CFStringRef *)this + 55), --location) == 32)
        {
          v10.CFIndex location = location + 1;
          goto LABEL_14;
        }
      }
      v10.CFIndex location = 0;
LABEL_14:
      CFIndex v11 = result.location;
      v10.CFIndex length = result.location - v10.location;
      CFStringRef v12 = CFStringCreateWithSubstring(v5, *((CFStringRef *)this + 55), v10);
      if (v12)
      {
        CFStringRef v13 = v12;
        v4 |= CFSetContainsValue(*((CFSetRef *)this + 44), v12) != 0;
        if (v4) {
          int v14 = 3;
        }
        else {
          int v14 = 0;
        }
        CFRelease(v13);
      }
      else
      {
        if (v4)
        {
          char v4 = 1;
          return v4 & 1;
        }
        int v14 = 0;
        char v4 = 0;
      }
      v6.CFIndex location = v11 + 1;
      v6.CFIndex length = Length - v11;
    }
    while (!v14);
  }
  else
  {
    char v4 = 0;
  }
  return v4 & 1;
}

void sub_224DB4D9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

BOOL QP::Lexer::containsBlocklistedString(QP::Lexer *this)
{
  CFStringRef v2 = (const __CFString *)*((void *)this + 55);
  return v2 && CFStringGetLength(v2) == 3 && CFStringsAreEqual(*((CFStringRef *)this + 55), @"app");
}

void QP::Lexer::expand(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  CFIndex Length = CFStringGetLength(*(CFStringRef *)(a1 + 440));
  uint64_t v7 = *(uint64_t **)a3;
  uint64_t v8 = *(long long **)(a3 + 8);
  unint64_t v9 = 126 - 2 * __clz(((uint64_t)v8 - *(void *)a3) >> 4);
  BOOL v63 = v8 == *(long long **)a3;
  v104 = QP::lexeme_less_than_range;
  if (v63) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = v9;
  }
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Lexeme> &,std::shared_ptr<QP::Lexeme> &),std::shared_ptr<QP::Lexeme>*,false>(v7, v8, &v104, v10, 1);
  v104 = 0;
  long long v105 = &v104;
  uint64_t v106 = 0x4002000000;
  std::vector<std::string>::pointer v107 = __Block_byref_object_copy__3;
  long long v108 = __Block_byref_object_dispose__3;
  memset(v109, 0, 24);
  long long v96 = 0;
  v97 = &v96;
  uint64_t v98 = 0x4002000000;
  long long v99 = __Block_byref_object_copy__81;
  unint64_t v100 = __Block_byref_object_dispose__82;
  unint64_t v101 = 0;
  unint64_t v102 = 0;
  uint64_t v103 = 0;
  uint64_t v13 = a3;
  CFStringRef v12 = *(long long **)a3;
  CFIndex v11 = *(long long **)(v13 + 8);
  CFIndex v87 = Length;
  if (v11 == v12)
  {
    uint64_t v42 = *(void *)(a1 + 344);
    CFStringRef v43 = *(const __CFString **)(a1 + 440);
    v95[0] = MEMORY[0x263EF8330];
    v95[1] = 0x40000000;
    v95[2] = ___ZN2QP5Lexer6expandERNSt3__13setINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_4lessIS8_EENS6_IS8_EEEERNS1_6vectorINS1_10shared_ptrINS_6LexemeEEENS6_ISH_EEEESK__block_invoke;
    v95[3] = &unk_2647054F0;
    v95[4] = &v96;
    v95[5] = &v104;
    QP::LexemeConverter::enumerateEntitiesWithString(v42, v43, 0, 0, Length, 0, Length, (uint64_t)v95);
    CFIndex v14 = 0;
  }
  else
  {
    CFIndex v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = -1;
    do
    {
      uint64_t v17 = *(void *)(*(void *)v12 + 72);
      if (v16 == -1
        || ((uint64_t v18 = *(void *)(*(void *)v12 + 80) + v17, v19 = v16 + v15, v17 >= v16)
          ? (BOOL v20 = v18 < v19)
          : (BOOL v20 = 0),
            !v20 && (v17 > v16 ? (BOOL v21 = v18 <= v19) : (BOOL v21 = 0), !v21))
        || *(unsigned char *)(*(void *)(a1 + 312) + 67))
      {
        CFIndex v22 = v17 - v14;
        if (v17 > v14)
        {
          v110.CFIndex location = v14;
          v110.CFIndex length = v17 - v14;
          CFIndex v24 = QP::Lexer::contentRangeFromRange((QP::Lexer *)a1, v110);
          if (v24 != -1)
          {
            CFIndex v25 = v23;
            uint64_t v26 = *(void *)(a1 + 344);
            CFStringRef v27 = *(const __CFString **)(a1 + 440);
            v94[0] = MEMORY[0x263EF8330];
            v94[1] = 0x40000000;
            uint64_t v94[2] = ___ZN2QP5Lexer6expandERNSt3__13setINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_4lessIS8_EENS6_IS8_EEEERNS1_6vectorINS1_10shared_ptrINS_6LexemeEEENS6_ISH_EEEESK__block_invoke_2;
            v94[3] = &unk_264705518;
            v94[4] = &v96;
            v94[5] = &v104;
            QP::LexemeConverter::enumerateEntitiesWithString(v26, v27, 0, v24, v25, v14, v22, (uint64_t)v94);
          }
        }
        unint64_t v28 = v105;
        if (*(_WORD *)(*(void *)v12 + 88) == 15)
        {
          unint64_t v29 = v97;
          uint64_t v30 = ((char *)v105[6] - (char *)v105[5]) >> 4;
          uint64_t v31 = (uint64_t *)v97[6];
          long long v32 = v97[7];
          if (v31 >= (uint64_t *)v32)
          {
            uint64_t v34 = v97[5];
            uint64_t v35 = ((char *)v31 - (char *)v34) >> 3;
            if ((unint64_t)(v35 + 1) >> 61) {
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v36 = (char *)v32 - (char *)v34;
            unint64_t v37 = ((char *)v32 - (char *)v34) >> 2;
            if (v37 <= v35 + 1) {
              unint64_t v37 = v35 + 1;
            }
            if (v36 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v38 = v37;
            }
            if (v38)
            {
              long long v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long>>((uint64_t)(v97 + 7), v38);
              uint64_t v34 = v29[5];
              uint64_t v31 = (uint64_t *)v29[6];
            }
            else
            {
              long long v39 = 0;
            }
            CFIndex v40 = (uint64_t *)&v39[8 * v35];
            *CFIndex v40 = v30;
            uint64_t v33 = (void **)(v40 + 1);
            while (v31 != (uint64_t *)v34)
            {
              uint64_t v41 = *--v31;
              *--CFIndex v40 = v41;
            }
            v29[5] = (void **)v40;
            v29[6] = v33;
            v29[7] = (void **)&v39[8 * v38];
            if (v34) {
              operator delete(v34);
            }
          }
          else
          {
            *uint64_t v31 = v30;
            uint64_t v33 = (void **)(v31 + 1);
          }
          v29[6] = v33;
          unint64_t v28 = v105;
        }
        std::vector<std::shared_ptr<QP::Lexeme>>::push_back[abi:ne180100]((uint64_t *)v28 + 5, v12);
        uint64_t v16 = *(void *)(*(void *)v12 + 72);
        uint64_t v15 = *(void *)(*(void *)v12 + 80);
        CFIndex v14 = v15 + v16;
      }
      ++v12;
    }
    while (v12 != v11);
  }
  CFIndex v44 = v87;
  if (v87 > v14)
  {
    v111.CFIndex location = v14;
    v111.CFIndex length = v87 - v14;
    CFIndex v46 = QP::Lexer::contentRangeFromRange((QP::Lexer *)a1, v111);
    if (v46 != -1)
    {
      CFIndex v47 = v45;
      uint64_t v48 = *(void *)(a1 + 344);
      CFStringRef v49 = *(const __CFString **)(a1 + 440);
      v93[0] = MEMORY[0x263EF8330];
      v93[1] = 0x40000000;
      void v93[2] = ___ZN2QP5Lexer6expandERNSt3__13setINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_4lessIS8_EENS6_IS8_EEEERNS1_6vectorINS1_10shared_ptrINS_6LexemeEEENS6_ISH_EEEESK__block_invoke_3;
      v93[3] = &unk_264705540;
      v93[4] = &v96;
      v93[5] = &v104;
      QP::LexemeConverter::enumerateEntitiesWithString(v48, v49, 0, v46, v47, v14, v87 - v14, (uint64_t)v93);
    }
  }
  if (!*(unsigned char *)(*(void *)(a1 + 312) + 30))
  {
    unsigned int v50 = v97[5];
    uint64_t v85 = v97[6];
    if (v50 != v85)
    {
      do
      {
        uint64_t v86 = v50;
        uint64_t v51 = *v50;
        uint64_t v52 = *v50;
        uint64_t v88 = *v50;
        do
        {
          uint64_t v53 = (char *)v52 + 1;
          long long v54 = v105[5];
          if ((unint64_t)v52 + 1 >= ((char *)v105[6] - (char *)v54) >> 4) {
            break;
          }
          CFStringRef v55 = (uint64_t *)((char *)v54 + 16 * (void)v52);
          uint64_t v56 = *v55;
          CFRange v57 = (std::__shared_weak_count *)v55[1];
          if (v57)
          {
            atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
            long long v54 = v105[5];
          }
          CFArrayRef v58 = (uint64_t *)((char *)v54 + 16 * (void)v53);
          uint64_t v59 = *v58;
          std::vector<std::string> v60 = (std::__shared_weak_count *)v58[1];
          if (v60) {
            atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (!*(_WORD *)(v59 + 88)
            && *(_WORD *)(v56 + 88)
            && ((uint64_t v62 = *(void *)(v59 + 80) + *(void *)(v59 + 72), v62 == v44) ? (v63 = v51 == 0) : (v63 = 1), v63))
          {
            CFIndex v64 = *(void *)(v56 + 72);
            uint64_t v65 = *(void *)(a1 + 344);
            CFStringRef v66 = *(const __CFString **)(a1 + 440);
            v92[0] = MEMORY[0x263EF8330];
            v92[1] = 0x40000000;
            v92[2] = ___ZN2QP5Lexer6expandERNSt3__13setINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_4lessIS8_EENS6_IS8_EEEERNS1_6vectorINS1_10shared_ptrINS_6LexemeEEENS6_ISH_EEEESK__block_invoke_4;
            v92[3] = &unk_264705568;
            v92[4] = &v104;
            v92[5] = a2;
            QP::LexemeConverter::enumerateEntitiesWithString(v65, v66, 0, v64, v62 - v64, v64, v62 - v64, (uint64_t)v92);
            uint64_t v67 = 16 * (void)v52;
            uint64_t v68 = (uint64_t)v52 + 1;
            while (1)
            {
              CFRange v69 = v105[5];
              if (++v68 >= (unint64_t)(((char *)v105[6] - (char *)v69) >> 4))
              {
                char v61 = 1;
                uint64_t v52 = v53;
                CFIndex v44 = v87;
                uint64_t v51 = v88;
                goto LABEL_55;
              }
              v70 = (char *)v69 + v67;
              uint64_t v72 = *((void *)v70 + 4);
              CFStringRef v71 = (std::__shared_weak_count *)*((void *)v70 + 5);
              if (v71) {
                atomic_fetch_add_explicit(&v71->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              if (v60) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v60);
              }
              CFIndex v73 = *(void *)(v56 + 72);
              uint64_t v74 = *(void *)(v72 + 72);
              if (*(_WORD *)(v72 + 88)) {
                break;
              }
              v67 += 16;
              CFIndex v75 = v74 - v73 + *(void *)(v72 + 80);
              uint64_t v76 = *(void *)(a1 + 344);
              CFStringRef v77 = *(const __CFString **)(a1 + 440);
              v91[0] = MEMORY[0x263EF8330];
              v91[1] = 0x40000000;
              v91[2] = ___ZN2QP5Lexer6expandERNSt3__13setINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_4lessIS8_EENS6_IS8_EEEERNS1_6vectorINS1_10shared_ptrINS_6LexemeEEENS6_ISH_EEEESK__block_invoke_5;
              v91[3] = &unk_264705590;
              v91[4] = &v104;
              v91[5] = a2;
              QP::LexemeConverter::enumerateEntitiesWithString(v76, v77, 0, v73, v75, v73, v75, (uint64_t)v91);
              std::vector<std::string> v60 = v71;
            }
            v112.CFIndex length = v74 - v73;
            v112.CFIndex location = *(void *)(v56 + 72);
            CFIndex v79 = QP::Lexer::contentRangeFromRange((QP::Lexer *)a1, v112);
            CFIndex v80 = v78;
            BOOL v81 = *(void *)(v56 + 72) == v79 && *(void *)(v56 + 80) == v78;
            CFIndex v44 = v87;
            uint64_t v51 = v88;
            if (!v81)
            {
              uint64_t v82 = *(void *)(a1 + 344);
              CFStringRef v83 = *(const __CFString **)(a1 + 440);
              v90[0] = MEMORY[0x263EF8330];
              v90[1] = 0x40000000;
              v90[2] = ___ZN2QP5Lexer6expandERNSt3__13setINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_4lessIS8_EENS6_IS8_EEEERNS1_6vectorINS1_10shared_ptrINS_6LexemeEEENS6_ISH_EEEESK__block_invoke_6;
              v90[3] = &unk_2647055B8;
              v90[4] = &v104;
              v90[5] = a2;
              QP::LexemeConverter::enumerateEntitiesWithString(v82, v83, 0, v79, v80, v79, v80, (uint64_t)v90);
            }
            char v61 = 1;
            std::vector<std::string> v60 = v71;
            uint64_t v52 = v53;
          }
          else
          {
            char v61 = 0;
          }
LABEL_55:
          if (v60) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v60);
          }
          if (v57) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v57);
          }
        }
        while ((v61 & 1) != 0);
        unsigned int v50 = v86 + 1;
      }
      while (v86 + 1 != v85);
    }
  }
  std::vector<std::shared_ptr<QP::Lexeme>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<QP::Lexeme>*>,std::__wrap_iter<std::shared_ptr<QP::Lexeme>*>>(a4, (void *)*a4, (uint64_t *)v105[5], v105[6], ((char *)v105[6] - (char *)v105[5]) >> 4);
  _Block_object_dispose(&v96, 8);
  if (v101)
  {
    unint64_t v102 = v101;
    operator delete(v101);
  }
  _Block_object_dispose(&v104, 8);
  long long v96 = (void **)v109;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v96);
}

void sub_224DB5568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _Block_object_dispose((const void *)(v10 - 232), 8);
  CFStringRef v12 = *(void **)(v10 - 192);
  if (v12)
  {
    *(void *)(v10 - 184) = v12;
    operator delete(v12);
  }
  _Block_object_dispose((const void *)(v10 - 168), 8);
  *(void *)(v10 - 232) = a10;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v10 - 232));
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__3(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 4nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 40);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

__n128 __Block_byref_object_copy__81(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 4nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__82(uint64_t a1)
{
  CFStringRef v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void *___ZN2QP5Lexer6expandERNSt3__13setINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_4lessIS8_EENS6_IS8_EEEERNS1_6vectorINS1_10shared_ptrINS_6LexemeEEENS6_ISH_EEEESK__block_invoke(uint64_t a1, long long *a2)
{
  if (*(_WORD *)(*(void *)a2 + 88) == 15)
  {
    char v4 = *(void **)(*(void *)(a1 + 32) + 8);
    uint64_t v5 = (uint64_t)(*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 48)
                 - *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)) >> 4;
    CFRange v6 = (uint64_t *)v4[6];
    unint64_t v7 = v4[7];
    if ((unint64_t)v6 >= v7)
    {
      unint64_t v9 = (uint64_t *)v4[5];
      uint64_t v10 = v6 - v9;
      if ((unint64_t)(v10 + 1) >> 61) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v11 = v7 - (void)v9;
      unint64_t v12 = (uint64_t)(v7 - (void)v9) >> 2;
      if (v12 <= v10 + 1) {
        unint64_t v12 = v10 + 1;
      }
      if (v11 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v12;
      }
      if (v13)
      {
        CFIndex v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long>>((uint64_t)(v4 + 7), v13);
        unint64_t v9 = (uint64_t *)v4[5];
        CFRange v6 = (uint64_t *)v4[6];
      }
      else
      {
        CFIndex v14 = 0;
      }
      uint64_t v15 = (uint64_t *)&v14[8 * v10];
      uint64_t v16 = &v14[8 * v13];
      uint64_t *v15 = v5;
      uint64_t v8 = v15 + 1;
      while (v6 != v9)
      {
        uint64_t v17 = *--v6;
        *--uint64_t v15 = v17;
      }
      v4[5] = v15;
      v4[6] = v8;
      v4[7] = v16;
      if (v9) {
        operator delete(v9);
      }
    }
    else
    {
      uint64_t *v6 = v5;
      uint64_t v8 = v6 + 1;
    }
    v4[6] = v8;
  }
  uint64_t v18 = (uint64_t *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  return std::vector<std::shared_ptr<QP::Lexeme>>::emplace_back<std::shared_ptr<QP::Lexeme>&>(v18, a2);
}

void *std::vector<std::shared_ptr<QP::Lexeme>>::emplace_back<std::shared_ptr<QP::Lexeme>&>(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  char v4 = a1 + 2;
  unint64_t v5 = v6;
  unint64_t v7 = (void *)*(v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v19[4] = v4;
    CFIndex v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>>((uint64_t)v4, v13);
    uint64_t v15 = &v14[16 * v10];
    v19[0] = v14;
    v19[1] = v15;
    v19[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)uint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v19[2] = v15 + 16;
    std::vector<std::shared_ptr<QP::Lexeme>>::__swap_out_circular_buffer(a1, v19);
    unint64_t v9 = (void *)a1[1];
    std::__split_buffer<std::shared_ptr<QP::GraphStructureStack::Node>>::~__split_buffer(v19);
  }
  else
  {
    *unint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return v9 - 2;
}

void sub_224DB58C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<QP::GraphStructureStack::Node>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t QP::Lexer::contentRangeFromRange(QP::Lexer *this, CFRange a2)
{
  CFStringRef v2 = (CFIndex *)*((void *)this + 57);
  uint64_t v3 = (CFIndex *)*((void *)this + 58);
  if (v3 == v2 || !*((void *)this + 55)) {
    return -1;
  }
  CFIndex length = a2.length;
  CFIndex location = a2.location;
  if (a2.length != 1) {
    goto LABEL_6;
  }
  CFCharacterSetRef Predefined = CFCharacterSetGetPredefined(kCFCharacterSetWhitespace);
  v38.CFIndex location = location;
  v38.CFIndex length = 1;
  if (CFStringFindCharacterFromSet(*((CFStringRef *)this + 55), Predefined, v38, 0, 0)) {
    return -1;
  }
  CFStringRef v2 = (CFIndex *)*((void *)this + 57);
  uint64_t v3 = (CFIndex *)*((void *)this + 58);
LABEL_6:
  uint64_t v8 = -1;
  if (v3 == v2) {
    return v8;
  }
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (v3 - v2);
  uint64_t v10 = v2;
  unint64_t v11 = v9;
  do
  {
    unint64_t v12 = v11 >> 1;
    unint64_t v13 = &v10[3 * (v11 >> 1)];
    CFIndex v15 = *v13;
    CFIndex v16 = v13[1];
    CFIndex v14 = v13 + 3;
    v11 += ~(v11 >> 1);
    if (v16 + v15 <= location) {
      uint64_t v10 = v14;
    }
    else {
      unint64_t v11 = v12;
    }
  }
  while (v11);
  if (v10 == v3) {
    return -1;
  }
  CFIndex v17 = 0;
  CFIndex v18 = location + length;
  uint64_t v8 = -1;
  do
  {
    CFIndex v19 = *v10;
    CFIndex v20 = v10[1];
    if (location != *v10 || length != v20)
    {
      CFIndex v22 = v20 + v19;
      if ((v19 < location || v22 >= v18) && (v19 <= location || v22 > v18)) {
        break;
      }
    }
    if ((*((unsigned char *)v10 + 17) & 8) == 0)
    {
      CFIndex v17 = v10[1];
      uint64_t v8 = *v10;
      break;
    }
    v10 += 3;
    uint64_t v8 = v19;
    CFIndex v17 = v20;
  }
  while (v10 != v3);
  if (v8 != -1 && v8 + v17 != v18)
  {
    do
    {
      unint64_t v26 = v9 >> 1;
      CFStringRef v27 = &v3[-3 * (v9 >> 1)];
      uint64_t v29 = *(v27 - 3);
      uint64_t v30 = *(v27 - 2);
      unint64_t v28 = v27 - 3;
      v9 += ~(v9 >> 1);
      if (v30 + v29 > v18) {
        uint64_t v3 = v28;
      }
      else {
        unint64_t v9 = v26;
      }
    }
    while (v9);
    if (v2 != v3)
    {
      uint64_t v31 = v3;
      while (1)
      {
        CFIndex v32 = *(v31 - 3);
        uint64_t v33 = *(v31 - 2);
        v31 -= 3;
        if (location != v32 || length != v33)
        {
          CFIndex v35 = v33 + v32;
          if ((v32 < location || v35 >= v18) && (v32 <= location || v35 > v18)) {
            break;
          }
        }
        if ((*((unsigned char *)v3 - 7) & 8) != 0)
        {
          uint64_t v3 = v31;
          if (v31 != v2) {
            continue;
          }
        }
        return v8;
      }
      CFStringGetLength(*((CFStringRef *)this + 55));
    }
  }
  return v8;
}

void *___ZN2QP5Lexer6expandERNSt3__13setINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_4lessIS8_EENS6_IS8_EEEERNS1_6vectorINS1_10shared_ptrINS_6LexemeEEENS6_ISH_EEEESK__block_invoke_2(uint64_t a1, long long *a2)
{
  if (*(_WORD *)(*(void *)a2 + 88) == 15)
  {
    char v4 = *(void **)(*(void *)(a1 + 32) + 8);
    uint64_t v5 = (uint64_t)(*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 48)
                 - *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)) >> 4;
    unint64_t v6 = (uint64_t *)v4[6];
    unint64_t v7 = v4[7];
    if ((unint64_t)v6 >= v7)
    {
      unint64_t v9 = (uint64_t *)v4[5];
      uint64_t v10 = v6 - v9;
      if ((unint64_t)(v10 + 1) >> 61) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v11 = v7 - (void)v9;
      unint64_t v12 = (uint64_t)(v7 - (void)v9) >> 2;
      if (v12 <= v10 + 1) {
        unint64_t v12 = v10 + 1;
      }
      if (v11 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v12;
      }
      if (v13)
      {
        CFIndex v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long>>((uint64_t)(v4 + 7), v13);
        unint64_t v9 = (uint64_t *)v4[5];
        unint64_t v6 = (uint64_t *)v4[6];
      }
      else
      {
        CFIndex v14 = 0;
      }
      CFIndex v15 = (uint64_t *)&v14[8 * v10];
      CFIndex v16 = &v14[8 * v13];
      uint64_t *v15 = v5;
      uint64_t v8 = v15 + 1;
      while (v6 != v9)
      {
        uint64_t v17 = *--v6;
        *--CFIndex v15 = v17;
      }
      v4[5] = v15;
      v4[6] = v8;
      v4[7] = v16;
      if (v9) {
        operator delete(v9);
      }
    }
    else
    {
      uint64_t *v6 = v5;
      uint64_t v8 = v6 + 1;
    }
    v4[6] = v8;
  }
  CFIndex v18 = (uint64_t *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  return std::vector<std::shared_ptr<QP::Lexeme>>::emplace_back<std::shared_ptr<QP::Lexeme>&>(v18, a2);
}

void *___ZN2QP5Lexer6expandERNSt3__13setINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_4lessIS8_EENS6_IS8_EEEERNS1_6vectorINS1_10shared_ptrINS_6LexemeEEENS6_ISH_EEEESK__block_invoke_3(uint64_t a1, long long *a2)
{
  if (*(_WORD *)(*(void *)a2 + 88) == 15)
  {
    char v4 = *(void **)(*(void *)(a1 + 32) + 8);
    uint64_t v5 = (uint64_t)(*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 48)
                 - *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)) >> 4;
    unint64_t v6 = (uint64_t *)v4[6];
    unint64_t v7 = v4[7];
    if ((unint64_t)v6 >= v7)
    {
      unint64_t v9 = (uint64_t *)v4[5];
      uint64_t v10 = v6 - v9;
      if ((unint64_t)(v10 + 1) >> 61) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v11 = v7 - (void)v9;
      unint64_t v12 = (uint64_t)(v7 - (void)v9) >> 2;
      if (v12 <= v10 + 1) {
        unint64_t v12 = v10 + 1;
      }
      if (v11 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v12;
      }
      if (v13)
      {
        CFIndex v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long>>((uint64_t)(v4 + 7), v13);
        unint64_t v9 = (uint64_t *)v4[5];
        unint64_t v6 = (uint64_t *)v4[6];
      }
      else
      {
        CFIndex v14 = 0;
      }
      CFIndex v15 = (uint64_t *)&v14[8 * v10];
      CFIndex v16 = &v14[8 * v13];
      uint64_t *v15 = v5;
      uint64_t v8 = v15 + 1;
      while (v6 != v9)
      {
        uint64_t v17 = *--v6;
        *--CFIndex v15 = v17;
      }
      v4[5] = v15;
      v4[6] = v8;
      v4[7] = v16;
      if (v9) {
        operator delete(v9);
      }
    }
    else
    {
      uint64_t *v6 = v5;
      uint64_t v8 = v6 + 1;
    }
    v4[6] = v8;
  }
  CFIndex v18 = (uint64_t *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  return std::vector<std::shared_ptr<QP::Lexeme>>::emplace_back<std::shared_ptr<QP::Lexeme>&>(v18, a2);
}

void ___ZN2QP5Lexer6expandERNSt3__13setINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_4lessIS8_EENS6_IS8_EEEERNS1_6vectorINS1_10shared_ptrINS_6LexemeEEENS6_ISH_EEEESK__block_invoke_4(uint64_t a1, long long *a2)
{
  uint64_t v4 = *(void *)a2;
  if (*(char *)(*(void *)a2 + 71) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v4 + 48), *(void *)(v4 + 56));
  }
  else {
    std::string __p = *(std::string *)(v4 + 48);
  }
  if ((void **)(*(void *)(a1 + 40) + 8) == std::__tree<std::string>::find<std::string>(*(void *)(a1 + 40), (void **)&__p.__r_.__value_.__l.__data_))
  {
    std::vector<std::shared_ptr<QP::Lexeme>>::emplace_back<std::shared_ptr<QP::Lexeme>&>((uint64_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a2);
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(*(uint64_t ***)(a1 + 40), (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_224DB5DE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN2QP5Lexer6expandERNSt3__13setINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_4lessIS8_EENS6_IS8_EEEERNS1_6vectorINS1_10shared_ptrINS_6LexemeEEENS6_ISH_EEEESK__block_invoke_5(uint64_t a1, long long *a2)
{
  uint64_t v4 = *(void *)a2;
  if (*(char *)(*(void *)a2 + 71) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v4 + 48), *(void *)(v4 + 56));
  }
  else {
    std::string __p = *(std::string *)(v4 + 48);
  }
  if ((void **)(*(void *)(a1 + 40) + 8) == std::__tree<std::string>::find<std::string>(*(void *)(a1 + 40), (void **)&__p.__r_.__value_.__l.__data_))
  {
    std::vector<std::shared_ptr<QP::Lexeme>>::emplace_back<std::shared_ptr<QP::Lexeme>&>((uint64_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a2);
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(*(uint64_t ***)(a1 + 40), (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_224DB5EB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN2QP5Lexer6expandERNSt3__13setINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_4lessIS8_EENS6_IS8_EEEERNS1_6vectorINS1_10shared_ptrINS_6LexemeEEENS6_ISH_EEEESK__block_invoke_6(uint64_t a1, long long *a2)
{
  uint64_t v4 = *(void *)a2;
  if (*(char *)(*(void *)a2 + 71) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v4 + 48), *(void *)(v4 + 56));
  }
  else {
    std::string __p = *(std::string *)(v4 + 48);
  }
  if ((void **)(*(void *)(a1 + 40) + 8) == std::__tree<std::string>::find<std::string>(*(void *)(a1 + 40), (void **)&__p.__r_.__value_.__l.__data_))
  {
    std::vector<std::shared_ptr<QP::Lexeme>>::emplace_back<std::shared_ptr<QP::Lexeme>&>((uint64_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a2);
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(*(uint64_t ***)(a1 + 40), (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_224DB5F78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL QP::Lexer::shouldSkipParsing(QP::Lexer *this)
{
  if (*(_DWORD *)(*((void *)this + 39) + 16) == 1 && QP::Lexer::containsBlocklistedString(this)) {
    return 1;
  }
  CFStringRef v2 = (const __CFString *)*((void *)this + 55);
  return !v2 || !CFStringGetLength(v2) || !QP::Lexer::hasResources(this);
}

void QP::Lexer::resetParseVariables(QP::Lexer *this)
{
  *(_OWORD *)this = xmmword_224E1E2D0;
  *((_OWORD *)this + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = xmmword_224E1E2D0;
  *((_OWORD *)this + 2) = xmmword_224E1E2D0;
  *((_OWORD *)this + 3) = xmmword_224E1E2D0;
  *((void *)this + 9) = *((void *)this + 8);
  *((void *)this + 12) = *((void *)this + 11);
  *((void *)this + 15) = *((void *)this + 14);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__clear[abi:ne180100]((uint64_t *)this + 17);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__clear[abi:ne180100]((uint64_t *)this + 20);
  std::__tree<std::string>::destroy((uint64_t)this + 184, *((char **)this + 24));
  *((void *)this + 23) = (char *)this + 192;
  *((void *)this + 25) = 0;
  *((void *)this + 24) = 0;
  std::__tree<std::string>::destroy((uint64_t)this + 208, *((char **)this + 27));
  *((void *)this + 26) = (char *)this + 216;
  *((void *)this + 27) = 0;
  uint64_t v3 = (char *)*((void *)this + 30);
  CFStringRef v2 = (char *)this + 240;
  *((void *)v2 - 2) = 0;
  std::__tree<std::string>::destroy((uint64_t)(v2 - 8), v3);
  *((void *)v2 - QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = v2;
  *(void *)CFStringRef v2 = 0;
  *((void *)v2 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  nlp::CFScopedPtr<__CFDictionary *>::reset((const void **)v2 + 8, Mutable);
}

void QP::Lexer::tokenize(int a1, CFStringRef theString)
{
  if (theString)
  {
    if (CFStringGetLength(theString))
    {
      NLTaggerSetString();
      NLTaggerSetLocaleForRange();
      NLTaggerEnumerateTokens();
    }
  }
}

uint64_t ___ZN2QP5Lexer8tokenizeEPK10__CFStringU13block_pointerFv7NLTokenPbE_block_invoke(uint64_t result, long long *a2, uint64_t a3)
{
  if ((*((unsigned char *)a2 + 17) & 0xC) == 0)
  {
    uint64_t v3 = *(void *)(result + 32);
    uint64_t v5 = *((void *)a2 + 2);
    long long v4 = *a2;
    return (*(uint64_t (**)(uint64_t, long long *, uint64_t))(v3 + 16))(v3, &v4, a3);
  }
  return result;
}

void QP::Lexer::tagTokenWhitespace(uint64_t *a1, uint64_t *a2, CFMutableStringRef theString)
{
  if (!*((unsigned char *)a1 + 433)) {
    goto LABEL_27;
  }
  uint64_t v54 = 0;
  if ((*((unsigned char *)a2 + 17) & 4) == 0)
  {
    unint64_t v6 = (const void *)NLTaggerCopyTagForCurrentToken();
    unint64_t v7 = (const void *)*MEMORY[0x263F367E8];
    uint64_t v54 = (uint64_t)v6;
    uint64_t v8 = *a1;
    if (v6 == v7)
    {
      if (v8 == -1)
      {
        long long v9 = *(_OWORD *)a2;
        goto LABEL_19;
      }
      a1[1] = *a2 - v8 + a2[1];
    }
    else if (v8 != -1)
    {
      QP::Lexer::selectPersonLexemes((QP::Lexer *)a1);
      long long v9 = xmmword_224E1E2D0;
LABEL_19:
      *(_OWORD *)a1 = v9;
    }
    unint64_t v13 = (long long *)(a1 + 2);
    uint64_t v19 = a1[2];
    if (v6 == (const void *)*MEMORY[0x263F367F0])
    {
      if (v19 != -1)
      {
        a1[3] = *a2 - v19 + a2[1];
        if (!v6) {
          goto LABEL_27;
        }
        goto LABEL_26;
      }
      long long v20 = *(_OWORD *)a2;
      goto LABEL_24;
    }
    if (v19 == -1) {
      goto LABEL_25;
    }
    QP::Lexer::selectLocationLexemes((QP::Lexer *)a1);
LABEL_23:
    long long v20 = xmmword_224E1E2D0;
LABEL_24:
    long long *v13 = v20;
    goto LABEL_25;
  }
  uint64_t v10 = NLTaggerCopyTagForCurrentToken();
  unint64_t v6 = (const void *)v10;
  uint64_t v11 = *MEMORY[0x263F367E0];
  uint64_t v54 = v10;
  if (v10 == v11)
  {
    *((_OWORD *)a1 + 2) = *(_OWORD *)a2;
    a1[6] = a2[1] + *a2;
    if (!v10) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  if (v10 == *MEMORY[0x263F367D8])
  {
    unint64_t v13 = (long long *)(a1 + 4);
    uint64_t v12 = a1[4];
    if (v12 != -1)
    {
      v14.CFIndex location = a1[6];
      if (v14.location != -1)
      {
        uint64_t v15 = *a2;
        a1[5] = *a2 - v12 + a2[1];
        v14.CFIndex length = v15 - v14.location;
        a1[7] = v15 - v14.location;
        CFStringRef v16 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x263EFFB08], (CFStringRef)a1[55], v14);
        CFStringRef v53 = v16;
        QP::getUTF8StringFromCFString(v16, &__p);
        std::allocate_shared[abi:ne180100]<QP::LexemeQuotedText,std::allocator<QP::LexemeQuotedText>,CFRange &,std::string,void>(a1 + 4, (uint64_t)&__p, v49);
        uint64_t v17 = (char *)v49[0];
        long long v52 = *(_OWORD *)v49;
        v49[0] = 0;
        v49[1] = 0;
        CFIndex v18 = v17;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          CFIndex v18 = (char *)v52;
        }
        if (v18[71] < 0) {
          std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v18 + 6), *((void *)v18 + 7));
        }
        else {
          std::string __p = *(std::string *)(v18 + 2);
        }
        if (a1 + 24 == (uint64_t *)std::__tree<std::string>::find<std::string>((uint64_t)(a1 + 23), (void **)&__p.__r_.__value_.__l.__data_))
        {
          std::vector<std::shared_ptr<QP::Lexeme>>::push_back[abi:ne180100](a1 + 17, &v52);
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)a1 + 23, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
          std::to_string(&v48, a1[4]);
          std::to_string(&v47, a1[5]);
          if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            CFStringRef v43 = &v47;
          }
          else {
            CFStringRef v43 = (std::string *)v47.__r_.__value_.__r.__words[0];
          }
          if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v47.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v47.__r_.__value_.__l.__size_;
          }
          CFIndex v45 = std::string::append(&v48, (const std::string::value_type *)v43, size);
          long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
          std::string::size_type v50 = v45->__r_.__value_.__r.__words[2];
          *(_OWORD *)CFStringRef v49 = v46;
          v45->__r_.__value_.__l.__size_ = 0;
          v45->__r_.__value_.__r.__words[2] = 0;
          v45->__r_.__value_.__r.__words[0] = 0;
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)a1 + 26, v49, (uint64_t)v49);
          if (SHIBYTE(v50) < 0) {
            operator delete(v49[0]);
          }
          if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v47.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v48.__r_.__value_.__l.__data_);
          }
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (*((void *)&v52 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v52 + 1));
        }
        if (v16) {
          CFRelease(v16);
        }
      }
    }
    goto LABEL_23;
  }
LABEL_25:
  if (v6) {
LABEL_26:
  }
    CFRelease(v6);
LABEL_27:
  uint64_t v21 = *(void *)(a1[41] + 40);
  if (v21)
  {
    if (!*(unsigned char *)(v21 + 31))
    {
      uint64_t v35 = a1[58];
      if (v35 != a1[57])
      {
        uint64_t v36 = *(void *)(v35 - 8);
        if ((v36 & 0x800) == 0 && ((*((_DWORD *)a2 + 4) | v36) & 0x80) != 0) {
          CFStringAppend(theString, @" ");
        }
      }
    }
  }
  CFIndex v22 = (unsigned char *)a1[39];
  if (v22[62] && v22[63] || v22[56])
  {
    CFStringRef v23 = (const __CFString *)NLTaggerCopyTagForCurrentToken();
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
    CFStringRef v24 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x263EFFB08], (CFStringRef)a1[55], *(CFRange *)a2);
    v49[0] = (void *)v24;
    if (v23 && CFStringCompare(v23, v24, 1uLL)) {
      CFDictionarySetValue((CFMutableDictionaryRef)a1[38], v24, v23);
    }
    if (v24) {
      CFRelease(v24);
    }
    if (v23) {
      CFRelease(v23);
    }
  }
  unint64_t v26 = (CFRange *)a1[58];
  unint64_t v25 = a1[59];
  if ((unint64_t)v26 >= v25)
  {
    uint64_t v29 = a1[57];
    unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v26 - v29) >> 3);
    unint64_t v31 = v30 + 1;
    if (v30 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - v29) >> 3);
    if (2 * v32 > v31) {
      unint64_t v31 = 2 * v32;
    }
    if (v32 >= 0x555555555555555) {
      unint64_t v33 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v33 = v31;
    }
    if (v33) {
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a1 + 59), v33);
    }
    else {
      uint64_t v34 = 0;
    }
    unint64_t v37 = (CFRange *)&v34[24 * v30];
    CFRange v38 = &v34[24 * v33];
    CFRange v39 = *(CFRange *)a2;
    v37[1].CFIndex location = a2[2];
    *unint64_t v37 = v39;
    p_CFIndex length = &v37[1].length;
    uint64_t v41 = (char *)a1[57];
    CFIndex v40 = (char *)a1[58];
    if (v40 != v41)
    {
      do
      {
        long long v42 = *(_OWORD *)(v40 - 24);
        v37[-1].CFIndex length = *((void *)v40 - 1);
        *(_OWORD *)&v37[-2].CFIndex length = v42;
        unint64_t v37 = (CFRange *)((char *)v37 - 24);
        v40 -= 24;
      }
      while (v40 != v41);
      CFIndex v40 = (char *)a1[57];
    }
    a1[57] = (uint64_t)v37;
    a1[58] = (uint64_t)p_length;
    a1[59] = (uint64_t)v38;
    if (v40) {
      operator delete(v40);
    }
  }
  else
  {
    CFRange v27 = *(CFRange *)a2;
    v26[1].CFIndex location = a2[2];
    *unint64_t v26 = v27;
    p_CFIndex length = &v26[1].length;
  }
  a1[58] = (uint64_t)p_length;
}

void sub_224DB6744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  uint64_t v35 = *(std::__shared_weak_count **)(v33 - 88);
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v33 - 80), 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v33 - 72), 0);
  _Unwind_Resume(a1);
}

void QP::Lexer::selectPersonLexemes(QP::Lexer *this)
{
  if (*(void *)this != -1)
  {
    std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,char const(&)[7],CFRange &,void>("Person", (uint64_t)this, &v11);
    if (*(char *)(v11 + 71) < 0) {
      std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)(v11 + 48), *(void *)(v11 + 56));
    }
    else {
      std::string v10 = *(std::string *)(v11 + 48);
    }
    if ((void **)((char *)this + 192) == std::__tree<std::string>::find<std::string>((uint64_t)this + 184, (void **)&v10.__r_.__value_.__l.__data_))
    {
      std::vector<std::shared_ptr<QP::Lexeme>>::push_back[abi:ne180100]((uint64_t *)this + 17, &v11);
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)this + 23, (void **)&v10.__r_.__value_.__l.__data_, (uint64_t)&v10);
      std::to_string(&v7, *(void *)this);
      std::to_string(&v6, *((void *)this + 1));
      if ((v6.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        CFStringRef v2 = &v6;
      }
      else {
        CFStringRef v2 = (std::string *)v6.__r_.__value_.__r.__words[0];
      }
      if ((v6.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v6.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v6.__r_.__value_.__l.__size_;
      }
      long long v4 = std::string::append(&v7, (const std::string::value_type *)v2, size);
      long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
      std::string::size_type v9 = v4->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v5;
      v4->__r_.__value_.__l.__size_ = 0;
      v4->__r_.__value_.__r.__words[2] = 0;
      v4->__r_.__value_.__r.__words[0] = 0;
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 29, __p, (uint64_t)__p);
      if (SHIBYTE(v9) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v6.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v7.__r_.__value_.__l.__data_);
      }
    }
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v10.__r_.__value_.__l.__data_);
    }
    if (*((void *)&v11 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v11 + 1));
    }
  }
}

void sub_224DB699C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (*(char *)(v26 - 41) < 0) {
    operator delete(*(void **)(v26 - 64));
  }
  unint64_t v28 = *(std::__shared_weak_count **)(v26 - 24);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  _Unwind_Resume(exception_object);
}

void QP::Lexer::selectLocationLexemes(QP::Lexer *this)
{
  if (*((void *)this + 2) != -1)
  {
    std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,char const(&)[9],CFRange &,void>("Location", (uint64_t)this + 16, &v11);
    if (*(char *)(v11 + 71) < 0) {
      std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)(v11 + 48), *(void *)(v11 + 56));
    }
    else {
      std::string v10 = *(std::string *)(v11 + 48);
    }
    if ((void **)((char *)this + 192) == std::__tree<std::string>::find<std::string>((uint64_t)this + 184, (void **)&v10.__r_.__value_.__l.__data_))
    {
      std::vector<std::shared_ptr<QP::Lexeme>>::push_back[abi:ne180100]((uint64_t *)this + 17, &v11);
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)this + 23, (void **)&v10.__r_.__value_.__l.__data_, (uint64_t)&v10);
      std::to_string(&v7, *((void *)this + 2));
      std::to_string(&v6, *((void *)this + 3));
      if ((v6.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        CFStringRef v2 = &v6;
      }
      else {
        CFStringRef v2 = (std::string *)v6.__r_.__value_.__r.__words[0];
      }
      if ((v6.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v6.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v6.__r_.__value_.__l.__size_;
      }
      long long v4 = std::string::append(&v7, (const std::string::value_type *)v2, size);
      long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
      std::string::size_type v9 = v4->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v5;
      v4->__r_.__value_.__l.__size_ = 0;
      v4->__r_.__value_.__r.__words[2] = 0;
      v4->__r_.__value_.__r.__words[0] = 0;
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 29, __p, (uint64_t)__p);
      if (SHIBYTE(v9) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v6.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v7.__r_.__value_.__l.__data_);
      }
    }
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v10.__r_.__value_.__l.__data_);
    }
    if (*((void *)&v11 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v11 + 1));
    }
  }
}

void sub_224DB6B80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (*(char *)(v26 - 41) < 0) {
    operator delete(*(void **)(v26 - 64));
  }
  unint64_t v28 = *(std::__shared_weak_count **)(v26 - 24);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  _Unwind_Resume(exception_object);
}

void QP::Lexer::tagTokenSingleQuote(uint64_t a1, CFIndex *a2, __CFString *a3)
{
  v150[0] = 0;
  v150[1] = v150;
  v150[2] = 0x2000000000;
  int v151 = 0;
  v148[0] = 0;
  v148[1] = v148;
  v148[2] = 0x2000000000;
  char v149 = 0;
  uint64_t v141 = 0;
  uint64_t v142 = &v141;
  uint64_t v143 = 0x3802000000;
  long long v144 = __Block_byref_object_copy__95;
  CFIndex v6 = *a2;
  unint64_t v145 = __Block_byref_object_dispose__96;
  CFIndex v146 = v6;
  uint64_t v147 = 0;
  v140[0] = 0;
  v140[1] = v140;
  v140[2] = 0x3802000000;
  v140[3] = __Block_byref_object_copy__95;
  v140[4] = __Block_byref_object_dispose__96;
  v140[5] = v6;
  v140[6] = 0;
  uint64_t v134 = 0;
  long long v135 = &v134;
  uint64_t v136 = 0x3802000000;
  unint64_t v137 = __Block_byref_object_copy__95;
  unint64_t v138 = __Block_byref_object_dispose__96;
  long long v139 = xmmword_224E1E2D0;
  CFIndex v7 = *(void *)(a1 + 440);
  v131[0] = MEMORY[0x263EF8330];
  v131[1] = 0x40000000;
  v131[2] = ___ZN2QP5Lexer19tagTokenSingleQuoteE7NLTokenP10__CFString_block_invoke;
  v131[3] = &unk_264705608;
  v131[4] = &v134;
  v131[5] = v148;
  v131[9] = a1;
  v131[10] = a3;
  v131[6] = &v141;
  v131[7] = v140;
  long long v8 = *(_OWORD *)a2;
  uint64_t v9 = a2[1];
  CFIndex v133 = a2[2];
  long long v132 = v8;
  v131[8] = v150;
  CFEnumerateCharactersInCFString(v7, v6, v9, (uint64_t)v131);
  v152.CFIndex location = v142[5];
  v152.CFIndex length = a2[1] + *a2 - v152.location;
  v142[6] = v152.length;
  if (CFStringFindCharacterFromSet(*(CFStringRef *)(a1 + 440), *(CFCharacterSetRef *)(a1 + 368), v152, 0, (CFRange *)(v135 + 5)))
  {
    std::string v10 = v135;
    uint64_t v11 = v135[5];
    if (v11)
    {
      uint64_t v12 = v142;
      v142[6] = *a2 - v11 + a2[1];
      unint64_t v13 = *(void *)(a1 + 80);
      CFRange v14 = *(char **)(a1 + 72);
      if ((unint64_t)v14 >= v13)
      {
        CFIndex v18 = *(char **)(a1 + 64);
        uint64_t v19 = (v14 - v18) >> 3;
        if ((unint64_t)(v19 + 1) >> 61) {
          goto LABEL_159;
        }
        unint64_t v20 = v13 - (void)v18;
        unint64_t v21 = (uint64_t)(v13 - (void)v18) >> 2;
        if (v21 <= v19 + 1) {
          unint64_t v21 = v19 + 1;
        }
        if (v20 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        if (v22)
        {
          CFStringRef v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long>>(a1 + 80, v22);
          CFIndex v18 = *(char **)(a1 + 64);
          CFRange v14 = *(char **)(a1 + 72);
        }
        else
        {
          CFStringRef v23 = 0;
        }
        CFStringRef v24 = &v23[8 * v19];
        unint64_t v25 = &v23[8 * v22];
        *(void *)CFStringRef v24 = v12[5];
        uint64_t v15 = v24 + 8;
        while (v14 != v18)
        {
          uint64_t v26 = *((void *)v14 - 1);
          v14 -= 8;
          *((void *)v24 - QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = v26;
          v24 -= 8;
        }
        *(void *)(a1 + 64) = v24;
        *(void *)(a1 + 72) = v15;
        *(void *)(a1 + 8nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = v25;
        if (v18) {
          operator delete(v18);
        }
      }
      else
      {
        *(void *)CFRange v14 = v12[5];
        uint64_t v15 = v14 + 8;
      }
      unint64_t v27 = *(void *)(a1 + 104);
      *(void *)(a1 + 72) = v15;
      unint64_t v28 = *(_OWORD **)(a1 + 96);
      if ((unint64_t)v28 >= v27)
      {
        uint64_t v30 = *(void *)(a1 + 88);
        uint64_t v31 = ((uint64_t)v28 - v30) >> 4;
        unint64_t v32 = v31 + 1;
        if ((unint64_t)(v31 + 1) >> 60) {
          goto LABEL_158;
        }
        uint64_t v33 = v27 - v30;
        if (v33 >> 3 > v32) {
          unint64_t v32 = v33 >> 3;
        }
        if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v34 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v34 = v32;
        }
        if (v34) {
          uint64_t v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>>(a1 + 104, v34);
        }
        else {
          uint64_t v35 = 0;
        }
        uint64_t v36 = &v35[16 * v31];
        unint64_t v37 = &v35[16 * v34];
        *(_OWORD *)uint64_t v36 = *(_OWORD *)a2;
        uint64_t v29 = v36 + 16;
        CFRange v39 = *(char **)(a1 + 88);
        CFRange v38 = *(char **)(a1 + 96);
        if (v38 != v39)
        {
          do
          {
            *((_OWORD *)v36 - QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = *((_OWORD *)v38 - 1);
            v36 -= 16;
            v38 -= 16;
          }
          while (v38 != v39);
          CFRange v38 = *(char **)(a1 + 88);
        }
        *(void *)(a1 + 88) = v36;
        *(void *)(a1 + 96) = v29;
        *(void *)(a1 + 104) = v37;
        if (v38) {
          operator delete(v38);
        }
      }
      else
      {
        *unint64_t v28 = *(_OWORD *)a2;
        uint64_t v29 = v28 + 1;
      }
      unint64_t v40 = *(void *)(a1 + 128);
      *(void *)(a1 + 96) = v29;
      uint64_t v41 = v142 + 5;
      long long v42 = *(_OWORD **)(a1 + 120);
      if ((unint64_t)v42 >= v40)
      {
        uint64_t v44 = *(void *)(a1 + 112);
        uint64_t v45 = ((uint64_t)v42 - v44) >> 4;
        unint64_t v46 = v45 + 1;
        if ((unint64_t)(v45 + 1) >> 60) {
          goto LABEL_158;
        }
        uint64_t v47 = v40 - v44;
        if (v47 >> 3 > v46) {
          unint64_t v46 = v47 >> 3;
        }
        if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v48 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v48 = v46;
        }
        if (v48) {
          CFStringRef v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>>(a1 + 128, v48);
        }
        else {
          CFStringRef v49 = 0;
        }
        std::string::size_type v50 = &v49[16 * v45];
        uint64_t v51 = &v49[16 * v48];
        *(_OWORD *)std::string::size_type v50 = *v41;
        CFStringRef v43 = v50 + 16;
        CFStringRef v53 = *(char **)(a1 + 112);
        long long v52 = *(char **)(a1 + 120);
        if (v52 != v53)
        {
          do
          {
            *((_OWORD *)v50 - QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = *((_OWORD *)v52 - 1);
            v50 -= 16;
            v52 -= 16;
          }
          while (v52 != v53);
          long long v52 = *(char **)(a1 + 112);
        }
        *(void *)(a1 + 112) = v50;
        *(void *)(a1 + 12nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = v43;
        *(void *)(a1 + 128) = v51;
        if (v52) {
          operator delete(v52);
        }
      }
      else
      {
        *long long v42 = *v41;
        CFStringRef v43 = v42 + 1;
      }
      *(void *)(a1 + 12nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = v43;
      CFStringRef v54 = (const __CFString *)copyStringInsertingSpacesBetweenIdeographCharacters(*(const __CFString **)(a1 + 440), *(CFRange *)(v142 + 5));
      CFStringAppend(a3, v54);
      std::string v10 = v135;
      *(_OWORD *)(v142 + 5) = *(_OWORD *)(v135 + 5);
      if (v54)
      {
        CFRelease(v54);
        std::string v10 = v135;
      }
    }
    unint64_t v55 = *(void *)(a1 + 80);
    uint64_t v56 = *(char **)(a1 + 72);
    if ((unint64_t)v56 >= v55)
    {
      CFArrayRef v58 = *(char **)(a1 + 64);
      uint64_t v59 = (v56 - v58) >> 3;
      if ((unint64_t)(v59 + 1) >> 61) {
        goto LABEL_159;
      }
      unint64_t v60 = v55 - (void)v58;
      unint64_t v61 = (uint64_t)(v55 - (void)v58) >> 2;
      if (v61 <= v59 + 1) {
        unint64_t v61 = v59 + 1;
      }
      if (v60 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v62 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v62 = v61;
      }
      if (v62)
      {
        BOOL v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long>>(a1 + 80, v62);
        CFArrayRef v58 = *(char **)(a1 + 64);
        uint64_t v56 = *(char **)(a1 + 72);
      }
      else
      {
        BOOL v63 = 0;
      }
      CFIndex v64 = &v63[8 * v59];
      uint64_t v65 = &v63[8 * v62];
      *(void *)CFIndex v64 = v10[5];
      CFRange v57 = v64 + 8;
      while (v56 != v58)
      {
        uint64_t v66 = *((void *)v56 - 1);
        v56 -= 8;
        *((void *)v64 - QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = v66;
        v64 -= 8;
      }
      *(void *)(a1 + 64) = v64;
      *(void *)(a1 + 72) = v57;
      *(void *)(a1 + 8nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = v65;
      if (v58) {
        operator delete(v58);
      }
    }
    else
    {
      *(void *)uint64_t v56 = v10[5];
      CFRange v57 = v56 + 8;
    }
    unint64_t v67 = *(void *)(a1 + 104);
    *(void *)(a1 + 72) = v57;
    uint64_t v68 = *(_OWORD **)(a1 + 96);
    if ((unint64_t)v68 >= v67)
    {
      uint64_t v70 = *(void *)(a1 + 88);
      uint64_t v71 = ((uint64_t)v68 - v70) >> 4;
      unint64_t v72 = v71 + 1;
      if ((unint64_t)(v71 + 1) >> 60) {
        goto LABEL_158;
      }
      uint64_t v73 = v67 - v70;
      if (v73 >> 3 > v72) {
        unint64_t v72 = v73 >> 3;
      }
      if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v74 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v74 = v72;
      }
      if (v74) {
        CFIndex v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>>(a1 + 104, v74);
      }
      else {
        CFIndex v75 = 0;
      }
      uint64_t v76 = &v75[16 * v71];
      CFStringRef v77 = &v75[16 * v74];
      *(_OWORD *)uint64_t v76 = *(_OWORD *)a2;
      CFRange v69 = v76 + 16;
      CFIndex v79 = *(char **)(a1 + 88);
      CFIndex v78 = *(char **)(a1 + 96);
      if (v78 != v79)
      {
        do
        {
          *((_OWORD *)v76 - QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = *((_OWORD *)v78 - 1);
          v76 -= 16;
          v78 -= 16;
        }
        while (v78 != v79);
        CFIndex v78 = *(char **)(a1 + 88);
      }
      *(void *)(a1 + 88) = v76;
      *(void *)(a1 + 96) = v69;
      *(void *)(a1 + 104) = v77;
      if (v78) {
        operator delete(v78);
      }
    }
    else
    {
      *uint64_t v68 = *(_OWORD *)a2;
      CFRange v69 = v68 + 1;
    }
    unint64_t v80 = *(void *)(a1 + 128);
    *(void *)(a1 + 96) = v69;
    BOOL v81 = *(char **)(a1 + 120);
    if ((unint64_t)v81 >= v80)
    {
      CFStringRef v83 = *(char **)(a1 + 112);
      uint64_t v84 = (v81 - v83) >> 4;
      unint64_t v85 = v84 + 1;
      if ((unint64_t)(v84 + 1) >> 60) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v86 = v80 - (void)v83;
      if (v86 >> 3 > v85) {
        unint64_t v85 = v86 >> 3;
      }
      if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v87 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v87 = v85;
      }
      if (v87)
      {
        uint64_t v88 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>>(a1 + 128, v87);
        CFStringRef v83 = *(char **)(a1 + 112);
        BOOL v81 = *(char **)(a1 + 120);
      }
      else
      {
        uint64_t v88 = 0;
      }
      std::vector<std::string>::pointer v89 = &v88[16 * v84];
      long long v90 = &v88[16 * v87];
      uint64_t v82 = v89 + 16;
      *(void *)std::vector<std::string>::pointer v89 = 0;
      *((void *)v89 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = 0;
      if (v81 != v83)
      {
        do
        {
          *((_OWORD *)v89 - QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = *((_OWORD *)v81 - 1);
          v89 -= 16;
          v81 -= 16;
        }
        while (v81 != v83);
        CFStringRef v83 = *(char **)(a1 + 112);
      }
      *(void *)(a1 + 112) = v89;
      *(void *)(a1 + 12nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = v82;
      *(void *)(a1 + 128) = v90;
      if (v83) {
        operator delete(v83);
      }
    }
    else
    {
      uint64_t v82 = v81 + 16;
      *(void *)BOOL v81 = 0;
      *((void *)v81 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = 0;
    }
    *(void *)(a1 + 12nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = v82;
    if (CFStringGetLength(a3)) {
      CFStringAppend(a3, @" ");
    }
    uint64_t v17 = v135[6] + v135[5];
    CFStringRef v16 = v142;
    v142[5] = v17;
    v16[6] = *a2 - v17 + a2[1];
  }
  else
  {
    CFStringRef v16 = v142;
    uint64_t v17 = v142[5];
  }
  if (v17 == -1 || !v16[6]) {
    goto LABEL_157;
  }
  unint64_t v91 = *(void *)(a1 + 80);
  unint64_t v92 = *(char **)(a1 + 72);
  if ((unint64_t)v92 < v91)
  {
    *(void *)unint64_t v92 = v17;
    unint64_t v93 = v92 + 8;
    goto LABEL_123;
  }
  v94 = *(char **)(a1 + 64);
  uint64_t v95 = (v92 - v94) >> 3;
  if ((unint64_t)(v95 + 1) >> 61) {
LABEL_159:
  }
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  unint64_t v96 = v91 - (void)v94;
  unint64_t v97 = (uint64_t)(v91 - (void)v94) >> 2;
  if (v97 <= v95 + 1) {
    unint64_t v97 = v95 + 1;
  }
  if (v96 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v98 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v98 = v97;
  }
  if (v98)
  {
    long long v99 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long>>(a1 + 80, v98);
    v94 = *(char **)(a1 + 64);
    unint64_t v92 = *(char **)(a1 + 72);
    uint64_t v17 = v16[5];
  }
  else
  {
    long long v99 = 0;
  }
  unint64_t v100 = &v99[8 * v95];
  unint64_t v101 = &v99[8 * v98];
  *(void *)unint64_t v100 = v17;
  unint64_t v93 = v100 + 8;
  while (v92 != v94)
  {
    uint64_t v102 = *((void *)v92 - 1);
    v92 -= 8;
    *((void *)v100 - QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = v102;
    v100 -= 8;
  }
  *(void *)(a1 + 64) = v100;
  *(void *)(a1 + 72) = v93;
  *(void *)(a1 + 8nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = v101;
  if (v94) {
    operator delete(v94);
  }
LABEL_123:
  unint64_t v103 = *(void *)(a1 + 104);
  *(void *)(a1 + 72) = v93;
  v104 = *(_OWORD **)(a1 + 96);
  if ((unint64_t)v104 >= v103)
  {
    uint64_t v106 = *(void *)(a1 + 88);
    uint64_t v107 = ((uint64_t)v104 - v106) >> 4;
    unint64_t v108 = v107 + 1;
    if ((unint64_t)(v107 + 1) >> 60) {
      goto LABEL_158;
    }
    uint64_t v109 = v103 - v106;
    if (v109 >> 3 > v108) {
      unint64_t v108 = v109 >> 3;
    }
    if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v110 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v110 = v108;
    }
    if (v110) {
      CFRange v111 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>>(a1 + 104, v110);
    }
    else {
      CFRange v111 = 0;
    }
    CFRange v112 = &v111[16 * v107];
    v113 = &v111[16 * v110];
    *(_OWORD *)CFRange v112 = *(_OWORD *)a2;
    long long v105 = v112 + 16;
    BOOL v115 = *(char **)(a1 + 88);
    long long v114 = *(char **)(a1 + 96);
    if (v114 != v115)
    {
      do
      {
        *((_OWORD *)v112 - QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = *((_OWORD *)v114 - 1);
        v112 -= 16;
        v114 -= 16;
      }
      while (v114 != v115);
      long long v114 = *(char **)(a1 + 88);
    }
    *(void *)(a1 + 88) = v112;
    *(void *)(a1 + 96) = v105;
    *(void *)(a1 + 104) = v113;
    if (v114) {
      operator delete(v114);
    }
  }
  else
  {
    _OWORD *v104 = *(_OWORD *)a2;
    long long v105 = v104 + 1;
  }
  unint64_t v116 = *(void *)(a1 + 128);
  *(void *)(a1 + 96) = v105;
  long long v117 = v142 + 5;
  unint64_t v118 = *(_OWORD **)(a1 + 120);
  if ((unint64_t)v118 >= v116)
  {
    uint64_t v120 = *(void *)(a1 + 112);
    uint64_t v121 = ((uint64_t)v118 - v120) >> 4;
    unint64_t v122 = v121 + 1;
    if (!((unint64_t)(v121 + 1) >> 60))
    {
      uint64_t v123 = v116 - v120;
      if (v123 >> 3 > v122) {
        unint64_t v122 = v123 >> 3;
      }
      if ((unint64_t)v123 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v124 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v124 = v122;
      }
      if (v124) {
        std::vector<std::string>::pointer v125 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>>(a1 + 128, v124);
      }
      else {
        std::vector<std::string>::pointer v125 = 0;
      }
      long long v126 = &v125[16 * v121];
      unint64_t v127 = &v125[16 * v124];
      *(_OWORD *)long long v126 = *v117;
      unint64_t v119 = v126 + 16;
      unint64_t v129 = *(char **)(a1 + 112);
      unint64_t v128 = *(char **)(a1 + 120);
      if (v128 != v129)
      {
        do
        {
          *((_OWORD *)v126 - QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = *((_OWORD *)v128 - 1);
          v126 -= 16;
          v128 -= 16;
        }
        while (v128 != v129);
        unint64_t v128 = *(char **)(a1 + 112);
      }
      *(void *)(a1 + 112) = v126;
      *(void *)(a1 + 12nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = v119;
      *(void *)(a1 + 128) = v127;
      if (v128) {
        operator delete(v128);
      }
      goto LABEL_155;
    }
LABEL_158:
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  _OWORD *v118 = *v117;
  unint64_t v119 = v118 + 1;
LABEL_155:
  *(void *)(a1 + 12nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = v119;
  CFStringRef v130 = (const __CFString *)copyStringInsertingSpacesBetweenIdeographCharacters(*(const __CFString **)(a1 + 440), *(CFRange *)(v142 + 5));
  CFStringAppend(a3, v130);
  if (v130) {
    CFRelease(v130);
  }
LABEL_157:
  _Block_object_dispose(&v134, 8);
  _Block_object_dispose(v140, 8);
  _Block_object_dispose(&v141, 8);
  _Block_object_dispose(v148, 8);
  _Block_object_dispose(v150, 8);
}

void sub_224DB75F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0);
  _Block_object_dispose(&a24, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 184), 8);
  _Block_object_dispose((const void *)(v31 - 128), 8);
  _Block_object_dispose((const void *)(v31 - 96), 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__95(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 4nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = result;
  return result;
}

void ___ZN2QP5Lexer19tagTokenSingleQuoteE7NLTokenP10__CFString_block_invoke(uint64_t a1, CFRange rangeToSearch)
{
  CFIndex length = rangeToSearch.length;
  CFIndex location = rangeToSearch.location;
  uint64_t v5 = *(void *)(a1 + 72);
  v98.CFIndex location = rangeToSearch.location;
  v98.CFIndex length = length;
  int CharacterFromSet = CFStringFindCharacterFromSet(*(CFStringRef *)(v5 + 440), *(CFCharacterSetRef *)(v5 + 368), v98, 0, (CFRange *)(*(void *)(*(void *)(a1 + 32) + 8) + 40));
  int v7 = CharacterFromSet;
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    if (*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 48))
    {
      CFIndex v97 = location;
      CFIndex v8 = CFStringGetLength(*(CFStringRef *)(a1 + 80));
      CFIndex v9 = v8;
      CFIndex v10 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 48);
      unint64_t v11 = *(void *)(v5 + 80);
      uint64_t v12 = (void **)(v5 + 64);
      unint64_t v13 = *(char **)(v5 + 72);
      uint64_t v95 = (void **)(v5 + 64);
      if ((unint64_t)v13 >= v11)
      {
        uint64_t v19 = (char *)*v12;
        uint64_t v20 = (v13 - (unsigned char *)*v12) >> 3;
        unint64_t v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 61) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v22 = v11 - (void)v19;
        if (v22 >> 2 > v21) {
          unint64_t v21 = v22 >> 2;
        }
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v23 = v21;
        }
        if (v23)
        {
          CFStringRef v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long>>(v5 + 80, v23);
          uint64_t v19 = *(char **)(v5 + 64);
          unint64_t v13 = *(char **)(v5 + 72);
        }
        else
        {
          CFStringRef v24 = 0;
        }
        uint64_t v26 = (CFIndex *)&v24[8 * v20];
        unint64_t v27 = &v24[8 * v23];
        *uint64_t v26 = v9;
        CFRange v14 = v26 + 1;
        while (v13 != v19)
        {
          CFIndex v28 = *((void *)v13 - 1);
          v13 -= 8;
          *--uint64_t v26 = v28;
        }
        *(void *)(v5 + 64) = v26;
        *(void *)(v5 + 72) = v14;
        *(void *)(v5 + 8nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = v27;
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        *(void *)unint64_t v13 = v8;
        CFRange v14 = v13 + 8;
      }
      unint64_t v29 = *(void *)(v5 + 104);
      *(void *)(v5 + 72) = v14;
      uint64_t v30 = (char **)(v5 + 88);
      uint64_t v31 = (_OWORD *)(a1 + 88);
      unint64_t v32 = *(_OWORD **)(v5 + 96);
      if ((unint64_t)v32 >= v29)
      {
        uint64_t v34 = ((char *)v32 - *v30) >> 4;
        unint64_t v35 = v34 + 1;
        if ((unint64_t)(v34 + 1) >> 60) {
          goto LABEL_108;
        }
        uint64_t v36 = v29 - (void)*v30;
        if (v36 >> 3 > v35) {
          unint64_t v35 = v36 >> 3;
        }
        if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v37 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v37 = v35;
        }
        if (v37) {
          CFRange v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>>(v5 + 104, v37);
        }
        else {
          CFRange v38 = 0;
        }
        CFRange v39 = &v38[16 * v34];
        unint64_t v40 = &v38[16 * v37];
        *(_OWORD *)CFRange v39 = *v31;
        uint64_t v33 = v39 + 16;
        long long v42 = *(char **)(v5 + 88);
        uint64_t v41 = *(char **)(v5 + 96);
        if (v41 != v42)
        {
          do
          {
            *((_OWORD *)v39 - QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = *((_OWORD *)v41 - 1);
            v39 -= 16;
            v41 -= 16;
          }
          while (v41 != v42);
          uint64_t v41 = *v30;
        }
        *(void *)(v5 + 88) = v39;
        *(void *)(v5 + 96) = v33;
        *(void *)(v5 + 104) = v40;
        if (v41) {
          operator delete(v41);
        }
      }
      else
      {
        _OWORD *v32 = *v31;
        uint64_t v33 = v32 + 1;
      }
      unint64_t v96 = (char **)(v5 + 88);
      unint64_t v43 = *(void *)(v5 + 128);
      *(void *)(v5 + 96) = v33;
      uint64_t v44 = (void **)(v5 + 112);
      uint64_t v45 = *(char **)(v5 + 120);
      if ((unint64_t)v45 >= v43)
      {
        unint64_t v46 = (void **)(v5 + 112);
        unint64_t v48 = (char *)*v44;
        uint64_t v49 = (v45 - (unsigned char *)*v44) >> 4;
        unint64_t v50 = v49 + 1;
        if ((unint64_t)(v49 + 1) >> 60) {
          goto LABEL_108;
        }
        uint64_t v51 = v43 - (void)v48;
        if (v51 >> 3 > v50) {
          unint64_t v50 = v51 >> 3;
        }
        if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v52 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v52 = v50;
        }
        if (v52)
        {
          CFStringRef v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>>(v5 + 128, v52);
          unint64_t v48 = *(char **)(v5 + 112);
          uint64_t v45 = *(char **)(v5 + 120);
        }
        else
        {
          CFStringRef v53 = 0;
        }
        CFStringRef v54 = (CFIndex *)&v53[16 * v49];
        unint64_t v55 = &v53[16 * v52];
        CFIndex *v54 = v9;
        v54[1] = v10;
        uint64_t v47 = v54 + 2;
        if (v45 != v48)
        {
          do
          {
            *((_OWORD *)v54 - QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = *((_OWORD *)v45 - 1);
            v54 -= 2;
            v45 -= 16;
          }
          while (v45 != v48);
          unint64_t v48 = (char *)*v46;
        }
        *(void *)(v5 + 112) = v54;
        *(void *)(v5 + 12nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = v47;
        *(void *)(v5 + 128) = v55;
        if (v48) {
          operator delete(v48);
        }
      }
      else
      {
        unint64_t v46 = (void **)(v5 + 112);
        *(void *)uint64_t v45 = v9;
        *((void *)v45 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = v10;
        uint64_t v47 = v45 + 16;
      }
      *(void *)(v5 + 12nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = v47;
      uint64_t v56 = *(void *)(*(void *)(a1 + 32) + 8);
      CFArrayRef v58 = *(char **)(v5 + 72);
      unint64_t v57 = *(void *)(v5 + 80);
      if ((unint64_t)v58 >= v57)
      {
        unint64_t v60 = (char *)*v95;
        uint64_t v61 = (v58 - (unsigned char *)*v95) >> 3;
        unint64_t v62 = v61 + 1;
        if ((unint64_t)(v61 + 1) >> 61) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v63 = v57 - (void)v60;
        if (v63 >> 2 > v62) {
          unint64_t v62 = v63 >> 2;
        }
        if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v64 = v62;
        }
        if (v64)
        {
          uint64_t v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long>>(v5 + 80, v64);
          unint64_t v60 = *(char **)(v5 + 64);
          CFArrayRef v58 = *(char **)(v5 + 72);
        }
        else
        {
          uint64_t v65 = 0;
        }
        uint64_t v66 = &v65[8 * v61];
        unint64_t v67 = &v65[8 * v64];
        *(void *)uint64_t v66 = *(void *)(v56 + 40);
        uint64_t v59 = v66 + 8;
        while (v58 != v60)
        {
          uint64_t v68 = *((void *)v58 - 1);
          v58 -= 8;
          *((void *)v66 - QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = v68;
          v66 -= 8;
        }
        *(void *)(v5 + 64) = v66;
        *(void *)(v5 + 72) = v59;
        *(void *)(v5 + 8nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = v67;
        if (v60) {
          operator delete(v60);
        }
      }
      else
      {
        *(void *)CFArrayRef v58 = *(void *)(v56 + 40);
        uint64_t v59 = v58 + 8;
      }
      *(void *)(v5 + 72) = v59;
      uint64_t v70 = *(_OWORD **)(v5 + 96);
      unint64_t v69 = *(void *)(v5 + 104);
      if ((unint64_t)v70 >= v69)
      {
        uint64_t v72 = ((char *)v70 - *v96) >> 4;
        unint64_t v73 = v72 + 1;
        if ((unint64_t)(v72 + 1) >> 60) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v74 = v69 - (void)*v96;
        if (v74 >> 3 > v73) {
          unint64_t v73 = v74 >> 3;
        }
        if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v75 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v75 = v73;
        }
        if (v75) {
          uint64_t v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>>(v5 + 104, v75);
        }
        else {
          uint64_t v76 = 0;
        }
        CFStringRef v77 = &v76[16 * v72];
        CFIndex v78 = &v76[16 * v75];
        *(_OWORD *)CFStringRef v77 = *v31;
        uint64_t v71 = v77 + 16;
        unint64_t v80 = *(char **)(v5 + 88);
        CFIndex v79 = *(char **)(v5 + 96);
        if (v79 != v80)
        {
          do
          {
            *((_OWORD *)v77 - QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = *((_OWORD *)v79 - 1);
            v77 -= 16;
            v79 -= 16;
          }
          while (v79 != v80);
          CFIndex v79 = *v96;
        }
        *(void *)(v5 + 88) = v77;
        *(void *)(v5 + 96) = v71;
        *(void *)(v5 + 104) = v78;
        if (v79) {
          operator delete(v79);
        }
      }
      else
      {
        _OWORD *v70 = *v31;
        uint64_t v71 = v70 + 1;
      }
      *(void *)(v5 + 96) = v71;
      uint64_t v82 = *(char **)(v5 + 120);
      unint64_t v81 = *(void *)(v5 + 128);
      if ((unint64_t)v82 < v81)
      {
        CFStringRef v83 = v82 + 16;
        *(void *)uint64_t v82 = 0;
        *((void *)v82 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = 0;
        CFIndex v84 = v97;
LABEL_105:
        *(void *)(v5 + 12nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = v83;
        CFStringRef v93 = (const __CFString *)copyStringInsertingSpacesBetweenIdeographCharacters(*(const __CFString **)(v5 + 440), *(CFRange *)(*(void *)(*(void *)(a1 + 56) + 8) + 40));
        CFStringAppend(*(CFMutableStringRef *)(a1 + 80), v93);
        CFStringAppend(*(CFMutableStringRef *)(a1 + 80), @" ");
        uint64_t v94 = *(void *)(*(void *)(a1 + 56) + 8);
        *(void *)(v94 + 4nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = v84;
        *(void *)(v94 + 48) = 0;
        *(_OWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 4nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = *(_OWORD *)(*(void *)(*(void *)(a1 + 56) + 8)
                                                                                + 40);
        if (v93) {
          CFRelease(v93);
        }
        goto LABEL_107;
      }
      unint64_t v85 = (char *)*v46;
      uint64_t v86 = (v82 - (unsigned char *)*v46) >> 4;
      unint64_t v87 = v86 + 1;
      if (!((unint64_t)(v86 + 1) >> 60))
      {
        uint64_t v88 = v81 - (void)v85;
        if (v88 >> 3 > v87) {
          unint64_t v87 = v88 >> 3;
        }
        if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v89 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v89 = v87;
        }
        if (v89)
        {
          long long v90 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>>(v5 + 128, v89);
          unint64_t v85 = *(char **)(v5 + 112);
          uint64_t v82 = *(char **)(v5 + 120);
        }
        else
        {
          long long v90 = 0;
        }
        unint64_t v91 = &v90[16 * v86];
        unint64_t v92 = &v90[16 * v89];
        CFStringRef v83 = v91 + 16;
        *(void *)unint64_t v91 = 0;
        *((void *)v91 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = 0;
        if (v82 != v85)
        {
          do
          {
            *((_OWORD *)v91 - QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = *((_OWORD *)v82 - 1);
            v91 -= 16;
            v82 -= 16;
          }
          while (v82 != v85);
          unint64_t v85 = (char *)*v46;
        }
        *(void *)(v5 + 112) = v91;
        *(void *)(v5 + 12nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = v83;
        *(void *)(v5 + 128) = v92;
        CFIndex v84 = v97;
        if (v85) {
          operator delete(v85);
        }
        goto LABEL_105;
      }
LABEL_108:
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = *(void *)(*(void *)(a1 + 56) + 8);
    *(void *)(v15 + 4nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = location;
    *(void *)(v15 + 48) = length;
    uint64_t v16 = *(void *)(*(void *)(a1 + 48) + 8);
    v17.CFIndex length = *(void *)(v16 + 48);
    if (v17.length)
    {
      v17.CFIndex location = *(void *)(v16 + 40);
      CFStringRef v18 = (const __CFString *)copyStringInsertingSpacesBetweenIdeographCharacters(*(const __CFString **)(v5 + 440), v17);
      CFStringAppend(*(CFMutableStringRef *)(a1 + 80), v18);
      CFStringAppend(*(CFMutableStringRef *)(a1 + 80), @" ");
      *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 48) = location
                                                                  + length
                                                                  - *(void *)(*(void *)(*(void *)(a1 + 48) + 8)
                                                                              + 40);
      if (v18) {
        CFRelease(v18);
      }
    }
    else
    {
      CFStringAppend(*(CFMutableStringRef *)(a1 + 80), @" ");
      uint64_t v25 = *(void *)(*(void *)(a1 + 48) + 8);
      *(void *)(v25 + 4nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = location;
      *(void *)(v25 + 48) = length;
    }
  }
  else if (!CharacterFromSet)
  {
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 48) = location
                                                                + length
                                                                - *(void *)(*(void *)(*(void *)(a1 + 48) + 8)
                                                                            + 40);
    *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 48) = location
                                                                + length
                                                                - *(void *)(*(void *)(*(void *)(a1 + 56) + 8)
                                                                            + 40);
  }
LABEL_107:
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v7 != 0;
  ++*(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 8) + 24);
}

void sub_224DB7D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

void QP::Lexer::tagTokenPunctuation(uint64_t a1, uint64_t a2, __CFString *theString, uint64_t a4, uint64_t a5)
{
  CFIndex Length = CFStringGetLength(theString);
  CFStringRef v10 = (const __CFString *)copyStringInsertingSpacesBetweenIdeographCharacters(*(const __CFString **)(a1 + 440), *(CFRange *)a2);
  CFStringRef v72 = v10;
  CFStringAppend(theString, v10);
  if ((*(unsigned char *)(a2 + 17) & 8) != 0) {
    goto LABEL_93;
  }
  CFIndex v11 = CFStringGetLength(theString);
  unint64_t v12 = *(void *)(a1 + 80);
  unint64_t v13 = *(char **)(a1 + 72);
  if ((unint64_t)v13 >= v12)
  {
    uint64_t v15 = *(char **)(a1 + 64);
    uint64_t v16 = (v13 - v15) >> 3;
    if ((unint64_t)(v16 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v17 = v12 - (void)v15;
    unint64_t v18 = (uint64_t)(v12 - (void)v15) >> 2;
    if (v18 <= v16 + 1) {
      unint64_t v18 = v16 + 1;
    }
    if (v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v19 = v18;
    }
    if (v19)
    {
      uint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long>>(a1 + 80, v19);
      uint64_t v15 = *(char **)(a1 + 64);
      unint64_t v13 = *(char **)(a1 + 72);
    }
    else
    {
      uint64_t v20 = 0;
    }
    unint64_t v21 = (CFIndex *)&v20[8 * v16];
    uint64_t v22 = &v20[8 * v19];
    *unint64_t v21 = Length;
    CFRange v14 = v21 + 1;
    while (v13 != v15)
    {
      CFIndex v23 = *((void *)v13 - 1);
      v13 -= 8;
      *--unint64_t v21 = v23;
    }
    *(void *)(a1 + 64) = v21;
    *(void *)(a1 + 72) = v14;
    *(void *)(a1 + 8nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = v22;
    if (v15) {
      operator delete(v15);
    }
  }
  else
  {
    *(void *)unint64_t v13 = Length;
    CFRange v14 = v13 + 8;
  }
  unint64_t v24 = *(void *)(a1 + 104);
  *(void *)(a1 + 72) = v14;
  uint64_t v25 = *(_OWORD **)(a1 + 96);
  if ((unint64_t)v25 >= v24)
  {
    uint64_t v27 = *(void *)(a1 + 88);
    uint64_t v28 = ((uint64_t)v25 - v27) >> 4;
    unint64_t v29 = v28 + 1;
    if ((unint64_t)(v28 + 1) >> 60) {
      goto LABEL_96;
    }
    uint64_t v30 = v24 - v27;
    if (v30 >> 3 > v29) {
      unint64_t v29 = v30 >> 3;
    }
    if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v31 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v31 = v29;
    }
    if (v31) {
      unint64_t v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>>(a1 + 104, v31);
    }
    else {
      unint64_t v32 = 0;
    }
    uint64_t v33 = &v32[16 * v28];
    uint64_t v34 = &v32[16 * v31];
    *(_OWORD *)uint64_t v33 = *(_OWORD *)a2;
    uint64_t v26 = v33 + 16;
    uint64_t v36 = *(char **)(a1 + 88);
    unint64_t v35 = *(char **)(a1 + 96);
    if (v35 != v36)
    {
      do
      {
        *((_OWORD *)v33 - QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = *((_OWORD *)v35 - 1);
        v33 -= 16;
        v35 -= 16;
      }
      while (v35 != v36);
      unint64_t v35 = *(char **)(a1 + 88);
    }
    *(void *)(a1 + 88) = v33;
    *(void *)(a1 + 96) = v26;
    *(void *)(a1 + 104) = v34;
    if (v35) {
      operator delete(v35);
    }
  }
  else
  {
    *uint64_t v25 = *(_OWORD *)a2;
    uint64_t v26 = v25 + 1;
  }
  CFIndex v37 = v11 - Length;
  unint64_t v38 = *(void *)(a1 + 128);
  *(void *)(a1 + 96) = v26;
  CFRange v39 = *(char **)(a1 + 120);
  if ((unint64_t)v39 < v38)
  {
    *(void *)CFRange v39 = Length;
    *((void *)v39 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = v37;
    unint64_t v40 = v39 + 16;
    goto LABEL_50;
  }
  uint64_t v41 = *(char **)(a1 + 112);
  uint64_t v42 = (v39 - v41) >> 4;
  unint64_t v43 = v42 + 1;
  if ((unint64_t)(v42 + 1) >> 60) {
LABEL_96:
  }
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  uint64_t v44 = v38 - (void)v41;
  if (v44 >> 3 > v43) {
    unint64_t v43 = v44 >> 3;
  }
  if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v45 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v45 = v43;
  }
  if (v45)
  {
    unint64_t v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>>(a1 + 128, v45);
    uint64_t v41 = *(char **)(a1 + 112);
    CFRange v39 = *(char **)(a1 + 120);
  }
  else
  {
    unint64_t v46 = 0;
  }
  uint64_t v47 = (CFIndex *)&v46[16 * v42];
  unint64_t v48 = &v46[16 * v45];
  CFIndex *v47 = Length;
  v47[1] = v37;
  unint64_t v40 = v47 + 2;
  if (v39 != v41)
  {
    do
    {
      *((_OWORD *)v47 - QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = *((_OWORD *)v39 - 1);
      v47 -= 2;
      v39 -= 16;
    }
    while (v39 != v41);
    uint64_t v41 = *(char **)(a1 + 112);
  }
  *(void *)(a1 + 112) = v47;
  *(void *)(a1 + 12nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = v40;
  *(void *)(a1 + 128) = v48;
  if (v41) {
    operator delete(v41);
  }
LABEL_50:
  *(void *)(a1 + 12nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = v40;
  v49.CFIndex location = *(void *)a2;
  CFIndex v50 = *(void *)(a2 + 8);
  if (v50 + *(void *)a2 != a5) {
    goto LABEL_93;
  }
  if (*(void *)(*(void *)(a1 + 312) + 8) == 9)
  {
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 408));
    v49.CFIndex location = *(void *)a2;
    CFIndex v50 = *(void *)(a2 + 8);
    if (!Count)
    {
      v49.CFIndex length = *(void *)(a2 + 8);
      CFStringRef v52 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x263EFFB08], *(CFStringRef *)(a1 + 440), v49);
      v64.__r_.__value_.__r.__words[0] = (std::string::size_type)v52;
      uint64_t v53 = *(void *)(a1 + 328);
      v69[0] = MEMORY[0x263EF8330];
      v69[1] = 0x40000000;
      v69[2] = ___ZN2QP5Lexer19tagTokenPunctuationE7NLTokenP10__CFString7CFRange_block_invoke;
      v69[3] = &__block_descriptor_tmp_100;
      v69[4] = a1;
      CFRange v70 = *(CFRange *)a2;
      uint64_t v71 = *(void *)(a2 + 16);
      QP::ParserGrammar::completions(v53, v52, (uint64_t)v69);
      QP::getUTF8StringFromCFString(v52, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      if (size)
      {
        uint64_t v56 = (std::string *)((char *)p_p + size);
        while ((p_p->__r_.__value_.__s.__data_[0] & 0x80000000) == 0
             && (*(_DWORD *)(MEMORY[0x263EF8318] + 4 * p_p->__r_.__value_.__s.__data_[0] + 60) & 0x400) != 0)
        {
          p_p = (std::string *)((char *)p_p + 1);
          if (!--size)
          {
            p_p = v56;
            break;
          }
        }
      }
      if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        if (__p.__r_.__value_.__l.__size_
          && __p.__r_.__value_.__l.__size_ <= 3
          && p_p == (std::string *)(__p.__r_.__value_.__r.__words[0] + __p.__r_.__value_.__l.__size_))
        {
          std::string::__init_copy_ctor_external(&v67, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          goto LABEL_73;
        }
      }
      else if (HIBYTE(__p.__r_.__value_.__r.__words[2]) - 1 <= 2 {
             && p_p == (std::string *)((char *)&__p + HIBYTE(__p.__r_.__value_.__r.__words[2])))
      }
      {
        std::string v67 = __p;
LABEL_73:
        CFRange v65 = *(CFRange *)a2;
        uint64_t v66 = *(void *)(a2 + 16);
        YearRangeuint64_t Completion = QP::Lexer::generateYearRangeCompletion(a1, (uint64_t)&v67, &v65.location);
        if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v67.__r_.__value_.__l.__data_);
        }
        if (CFStringGetLength(YearRangeCompletion) >= 1) {
          CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 408), YearRangeCompletion);
        }
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v52) {
        CFRelease(v52);
      }
      v49.CFIndex location = *(void *)a2;
      CFIndex v50 = *(void *)(a2 + 8);
    }
  }
  QP::Lexer::getExternalTypesForRange(a1, v49.location, v50, (uint64_t *)(a1 + 160), (uint64_t *)&__p);
  std::string::size_type v59 = __p.__r_.__value_.__l.__size_;
  CFArrayRef v58 = (long long *)__p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0] != __p.__r_.__value_.__l.__size_)
  {
    unint64_t v60 = (uint64_t **)(a1 + 184);
    uint64_t v61 = (void **)(a1 + 192);
    unint64_t v62 = (uint64_t *)(a1 + 136);
    do
    {
      uint64_t v63 = *(void *)v58;
      if (*(char *)(*(void *)v58 + 71) < 0) {
        std::string::__init_copy_ctor_external(&v64, *(const std::string::value_type **)(v63 + 48), *(void *)(v63 + 56));
      }
      else {
        std::string v64 = *(std::string *)(v63 + 48);
      }
      if (v61 == std::__tree<std::string>::find<std::string>((uint64_t)v60, (void **)&v64.__r_.__value_.__l.__data_))
      {
        std::vector<std::shared_ptr<QP::Lexeme>>::push_back[abi:ne180100](v62, v58);
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v60, (void **)&v64.__r_.__value_.__l.__data_, (uint64_t)&v64);
      }
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v64.__r_.__value_.__l.__data_);
      }
      ++v58;
    }
    while (v58 != (long long *)v59);
  }
  v64.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v64);
LABEL_93:
  if (v10) {
    CFRelease(v10);
  }
}

void sub_224DB82E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)&a9, 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v32 - 88), 0);
  _Unwind_Resume(a1);
}

void ___ZN2QP5Lexer19tagTokenPunctuationE7NLTokenP10__CFString7CFRange_block_invoke(uint64_t a1, const __CFString *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  v6.CFIndex length = *(void *)(a1 + 40);
  v6.CFIndex location = 0;
  CFStringRef v4 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x263EFFB08], *(CFStringRef *)(v3 + 440), v6);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(0, 0);
  CFStringAppend(Mutable, v4);
  CFStringAppend(Mutable, a2);
  if (Mutable != *(__CFString **)(v3 + 440)) {
    CFArrayAppendValue(*(CFMutableArrayRef *)(v3 + 408), Mutable);
  }
  if (v4) {
    CFRelease(v4);
  }
}

void sub_224DB842C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

__CFString *QP::Lexer::generateYearRangeCompletion(uint64_t a1, uint64_t a2, CFIndex *a3)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(0, 0);
  uint64_t v7 = *(void *)(a1 + 312);
  CFIndex v8 = *(__CFCalendar **)(v7 + 80);
  if (!v8) {
    return Mutable;
  }
  int v24 = -1;
  CFAbsoluteTime CurrentTime = getCurrentTime(v8, *(const __CFDate **)(v7 + 72));
  CFCalendarDecomposeAbsoluteTime(v8, CurrentTime, "y", &v24);
  std::to_string(&v23, v24);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&i, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      goto LABEL_6;
    }
  }
  else
  {
    std::string __str = *(std::string *)a2;
  }
  for (std::string i = *(std::string *)a2; ; std::string::append(&i, "9", 1uLL))
  {
LABEL_6:
    std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __str.__r_.__value_.__l.__size_;
    }
    if (size > 3) {
      break;
    }
    std::string::append(&__str, "0", 1uLL);
  }
  int v11 = std::stoi(&__str, 0, 10);
  if (v11 <= v24)
  {
    int v12 = std::stoi(&i, 0, 10);
    if (v12 <= v24) {
      p_std::string i = &i;
    }
    else {
      p_std::string i = &v23;
    }
    std::string::operator=(&i, p_i);
    v25.CFIndex length = *a3;
    v25.CFIndex location = 0;
    CFStringRef v14 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x263EFFB08], *(CFStringRef *)(a1 + 440), v25);
    CFStringAppend(Mutable, v14);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_str = &__str;
    }
    else {
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    CFStringRef v16 = CFStringCreateWithCString(0, (const char *)p_str, 0x8000100u);
    CFStringAppend(Mutable, v16);
    CFStringRef v17 = CFStringCreateWithCString(0, " to ", 0x8000100u);
    CFStringAppend(Mutable, v17);
    if ((i.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v18 = &i;
    }
    else {
      unint64_t v18 = (std::string *)i.__r_.__value_.__r.__words[0];
    }
    CFStringRef v19 = CFStringCreateWithCString(0, (const char *)v18, 0x8000100u);
    CFStringAppend(Mutable, v19);
  }
  if (SHIBYTE(i.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(i.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  return Mutable;
}

void sub_224DB86A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

void QP::Lexer::selectKnowledgeSourceLexemes(QP::Lexer *this, const CFRange *a2, uint64_t a3, int a4, const void *a5)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  if (a4)
  {
    if (*(unsigned char *)(*((void *)this + 39) + 54))
    {
      uint64_t v6 = *((void *)this + 72);
      if (v6)
      {
        if (*(void *)(v6 + 24))
        {
          uint64_t v21 = 0;
          uint64_t v22 = &v21;
          uint64_t v23 = 0x2000000000;
          uint64_t v24 = -1;
          uint64_t v15 = 0;
          CFStringRef v16 = &v15;
          uint64_t v17 = 0x3802000000;
          unint64_t v18 = __Block_byref_object_copy__95;
          CFStringRef v19 = __Block_byref_object_dispose__96;
          long long v20 = xmmword_224E1E2D0;
          if (QP::Lexer::selectKnowledgeSourceLexemes(CFRange const*,long,BOOL,long)::onceToken != -1) {
            dispatch_once(&QP::Lexer::selectKnowledgeSourceLexemes(CFRange const*,long,BOOL,long)::onceToken, &__block_literal_global_107);
          }
          v14[0] = MEMORY[0x263EF8330];
          v14[1] = 0x40000000;
          v14[2] = ___ZN2QP5Lexer28selectKnowledgeSourceLexemesEPK7CFRangelbl_block_invoke_3;
          v14[3] = &unk_264705680;
          void v14[4] = &v21;
          v14[5] = &v15;
          v14[6] = this;
          v14[7] = v14;
          (*(void (**)(void, void))(*((void *)this + 72) + 24))(**((void **)this + 72), *((void *)this + 55));
          CFIndex v8 = v22[3];
          if (v8 != -1)
          {
            Identifier = QPAnnotationsGetIdentifier(v8);
            if (Identifier)
            {
              if (lexerLogger(void)::token != -1) {
                dispatch_once(&lexerLogger(void)::token, &__block_literal_global_139);
              }
              CFStringRef v10 = lexerLogger(void)::log;
              if (os_log_type_enabled((os_log_t)lexerLogger(void)::log, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v12 = v16[5];
                uint64_t v11 = v16[6];
                *(_DWORD *)buf = 138412802;
                uint64_t v26 = Identifier;
                __int16 v27 = 2048;
                uint64_t v28 = v12;
                __int16 v29 = 2048;
                uint64_t v30 = v11;
                _os_log_impl(&dword_224D85000, v10, OS_LOG_TYPE_DEFAULT, "safety: found annotation type:%@ range:{%ld, %ld}", buf, 0x20u);
              }
              CFAttributedStringSetAttribute(*((CFMutableAttributedStringRef *)this + 56), *(CFRange *)(v16 + 5), kQPInputAttributeAnnotationKey, Identifier);
            }
          }
          if (!(*(unsigned int (**)(void))(*((void *)this + 72) + 16))(**((void **)this + 72)))
          {
            if (lexerLogger(void)::token != -1) {
              dispatch_once(&lexerLogger(void)::token, &__block_literal_global_139);
            }
            unint64_t v13 = lexerLogger(void)::log;
            if (os_log_type_enabled((os_log_t)lexerLogger(void)::log, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 134217984;
              uint64_t v26 = a5;
              _os_log_impl(&dword_224D85000, v13, OS_LOG_TYPE_DEFAULT, "[QPNLU][qid=%ld] disabled query embedding generation because annotations resources were not found", buf, 0xCu);
            }
            QP::ParserConfiguration::setCanUseEmbeddings(*((void *)this + 39), (const __CFBoolean *)*MEMORY[0x263EFFB38]);
          }
          _Block_object_dispose(&v15, 8);
          _Block_object_dispose(&v21, 8);
        }
      }
    }
  }
}

void sub_224DB8A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

CFSetRef ___ZN2QP5Lexer28selectKnowledgeSourceLexemesEPK7CFRangelbl_block_invoke_2()
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  long long v1 = xmmword_264705668;
  CFSetRef result = CFSetCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], (const void **)&v1, 2, MEMORY[0x263EFFFA0]);
  QP::Lexer::selectKnowledgeSourceLexemes(CFRange const*,long,BOOL,long)::sIgnoreAnnotations = (uint64_t)result;
  return result;
}

uint64_t ___ZN2QP5Lexer28selectKnowledgeSourceLexemesEPK7CFRangelbl_block_invoke_3(void *a1, uint64_t a2, uint64_t a3, const __CFString *value)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  CFIndex v8 = *(void *)(*(void *)(a1[4] + 8) + 24);
  if (v8 != -1)
  {
    uint64_t v9 = *(void *)(a1[5] + 8);
    uint64_t v11 = *(void *)(v9 + 40);
    uint64_t v10 = *(void *)(v9 + 48);
    if (v11 != a2 || v10 != a3)
    {
      uint64_t v13 = a1[6];
      Identifier = QPAnnotationsGetIdentifier(v8);
      if (Identifier)
      {
        uint64_t v15 = Identifier;
        if (lexerLogger(void)::token != -1) {
          dispatch_once(&lexerLogger(void)::token, &__block_literal_global_139);
        }
        uint64_t v16 = lexerLogger(void)::log;
        if (os_log_type_enabled((os_log_t)lexerLogger(void)::log, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v17 = *(void *)(a1[5] + 8);
          uint64_t v19 = *(void *)(v17 + 40);
          uint64_t v18 = *(void *)(v17 + 48);
          int v25 = 138412802;
          uint64_t v26 = v15;
          __int16 v27 = 2048;
          uint64_t v28 = v19;
          __int16 v29 = 2048;
          uint64_t v30 = v18;
          _os_log_impl(&dword_224D85000, v16, OS_LOG_TYPE_DEFAULT, "safety: found annotation type:%@ range:{%ld, %ld}", (uint8_t *)&v25, 0x20u);
        }
        CFAttributedStringSetAttribute(*(CFMutableAttributedStringRef *)(v13 + 448), *(CFRange *)(*(void *)(a1[5] + 8) + 40), kQPInputAttributeAnnotationKey, v15);
      }
      *(void *)(*(void *)(a1[4] + 8) + 24) = -1;
      *(_OWORD *)(*(void *)(a1[5] + 8) + 4nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = xmmword_224E1E2D0;
    }
  }
  uint64_t result = CFSetContainsValue((CFSetRef)QP::Lexer::selectKnowledgeSourceLexemes(CFRange const*,long,BOOL,long)::sIgnoreAnnotations, value);
  if (!result)
  {
    uint64_t result = QPAnnotationsGetID(value);
    uint64_t v21 = *(void *)(a1[4] + 8);
    uint64_t v22 = *(void *)(v21 + 24);
    if (v22 == -1 || result < v22)
    {
      *(void *)(v21 + 24) = result;
      uint64_t v24 = *(void *)(a1[5] + 8);
      *(void *)(v24 + 4nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = a2;
      *(void *)(v24 + 48) = a3;
    }
  }
  return result;
}

void ___ZN2QP5Lexer19selectEntityLexemesEP10__CFString_block_invoke(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t v7 = *(void **)(a1 + 32);
  CFIndex v8 = (void *)v7[8];
  uint64_t v9 = (void *)v7[9];
  uint64_t v10 = v8;
  if (v8 != v9)
  {
    while (*v10 != a3)
    {
      if (++v10 == v9)
      {
        uint64_t v10 = (void *)v7[9];
        break;
      }
    }
  }
  if (v10 != v9)
  {
    unint64_t v11 = v10 - v8;
    uint64_t v12 = v7[14];
    uint64_t v13 = (void *)(v12 + 16 * v11);
    if (v13[1] + *v13 >= a3 + a4)
    {
      unint64_t v17 = v11;
    }
    else
    {
      uint64_t v14 = v7[15] - v12;
      if (v11 <= v14 >> 4) {
        uint64_t v15 = v14 >> 4;
      }
      else {
        uint64_t v15 = v11;
      }
      uint64_t v16 = v13 + 3;
      unint64_t v17 = v11;
      while (v15 != v17)
      {
        ++v17;
        uint64_t v18 = *(v16 - 1) + *v16;
        v16 += 2;
        if (v18 >= a3 + a4) {
          goto LABEL_16;
        }
      }
      unint64_t v17 = v15;
    }
LABEL_16:
    uint64_t v19 = v7[11];
    CFIndex v20 = *(void *)(v19 + 16 * v11);
    CFIndex v21 = *(void *)(v19 + 16 * v17) - v20 + *(void *)(v19 + 16 * v17 + 8);
    uint64_t v22 = (QP::ParserGrammar **)v7[43];
    CFStringRef v23 = (const __CFString *)v7[55];
    v24[0] = MEMORY[0x263EF8330];
    v24[1] = 0x40000000;
    v24[2] = ___ZN2QP5Lexer19selectEntityLexemesEP10__CFString_block_invoke_2;
    v24[3] = &__block_descriptor_tmp_117;
    v24[4] = v7;
    void v24[5] = v20;
    v24[6] = v21;
    QP::LexemeConverter::enumerateEntitiesWithTypeAndValues(v22, v23, v20, v21, a2, a5, (uint64_t)v24);
  }
}

void ___ZN2QP5Lexer19selectEntityLexemesEP10__CFString_block_invoke_2(void *a1, long long *a2)
{
  uint64_t v4 = a1[4];
  uint64_t v5 = *(std::string **)a2;
  if (*(char *)(*(void *)a2 + 71) < 0) {
    std::string::__init_copy_ctor_external(&v14, v5[2].__r_.__value_.__l.__data_, v5[2].__r_.__value_.__l.__size_);
  }
  else {
    std::string v14 = v5[2];
  }
  if ((void **)(v4 + 192) == std::__tree<std::string>::find<std::string>(v4 + 184, (void **)&v14.__r_.__value_.__l.__data_))
  {
    std::vector<std::shared_ptr<QP::Lexeme>>::push_back[abi:ne180100]((uint64_t *)(v4 + 136), a2);
    std::to_string(&v11, a1[5]);
    std::to_string(&v10, a1[6]);
    if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v6 = &v10;
    }
    else {
      uint64_t v6 = (std::string *)v10.__r_.__value_.__r.__words[0];
    }
    if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v10.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v10.__r_.__value_.__l.__size_;
    }
    CFIndex v8 = std::string::append(&v11, (const std::string::value_type *)v6, size);
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    std::string::size_type v13 = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)(v4 + 232), __p, (uint64_t)__p);
    if (SHIBYTE(v13) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v10.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v11.__r_.__value_.__l.__data_);
    }
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(v4 + 184), (void **)&v14.__r_.__value_.__l.__data_, (uint64_t)&v14);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
}

void sub_224DB8F2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (*(char *)(v26 - 41) < 0) {
    operator delete(*(void **)(v26 - 64));
  }
  _Unwind_Resume(exception_object);
}

void ___ZN2QP5Lexer20selectDefaultLexemesEP10__CFString_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v47 = 0;
  unint64_t v48 = &v47;
  uint64_t v49 = 0x2000000000;
  char v50 = 0;
  uint64_t v41 = 0;
  uint64_t v42 = &v41;
  uint64_t v43 = 0x4002000000;
  uint64_t v44 = __Block_byref_object_copy__120;
  unint64_t v45 = __Block_byref_object_dispose__121;
  unint64_t v3 = (uint64_t)(*(void *)(v2 + 72) - *(void *)(v2 + 64)) >> 3;
  LOBYTE(v35) = 1;
  std::vector<BOOL>::vector(&v46, v3, (unsigned __int8 *)&v35);
  uint64_t v35 = 0;
  uint64_t v36 = &v35;
  uint64_t v37 = 0x4002000000;
  unint64_t v38 = __Block_byref_object_copy__3;
  CFRange v39 = __Block_byref_object_dispose__3;
  memset(v40, 0, sizeof(v40));
  uint64_t v4 = *(void **)(v2 + 584);
  uint64_t v5 = *(void *)(a1 + 40);
  v34[0] = MEMORY[0x263EF8330];
  v34[1] = 0x40000000;
  v34[2] = ___ZN2QP5Lexer20selectDefaultLexemesEP10__CFString_block_invoke_122;
  v34[3] = &unk_264705710;
  v34[4] = &v47;
  v34[5] = &v35;
  v34[6] = &v41;
  v34[7] = v2;
  QPDataDetectorEnumerateResults(v4, v5, (uint64_t)v34);
  if (*((unsigned char *)v48 + 24))
  {
    long long v32 = 0uLL;
    std::string::basic_string[abi:ne180100]<0>(&v31, "Location");
    unsigned int v6 = QP::ParserGrammar::symbolID(*(void *)(v2 + 328), (uint64_t)&v31);
    __int16 v7 = QP::ParserGrammar::symbolFlag(*(QP::ParserGrammar **)(v2 + 328), v6);
    CFIndex v8 = v42;
    if (v42[6])
    {
      __int16 v9 = v7;
      uint64_t v10 = 0;
      unint64_t v11 = 0;
      do
      {
        if ((*(void *)(v8[5] + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v11))
        {
          *(_OWORD *)__val = *(_OWORD *)(*(void *)(v2 + 88) + v10);
          std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,std::string &,CFRange &,void>((uint64_t)&v31, (uint64_t)__val, __p);
          long long v12 = *(_OWORD *)__p;
          __p[0] = 0;
          __p[1] = 0;
          std::string::size_type v13 = (std::__shared_weak_count *)*((void *)&v32 + 1);
          long long v32 = v12;
          if (v13)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
            if (__p[1]) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
            }
          }
          *(_WORD *)(v32 + 88) = v9;
          std::vector<std::shared_ptr<QP::Lexeme>>::push_back[abi:ne180100](v36 + 5, &v32);
          CFIndex v8 = v42;
        }
        ++v11;
        v10 += 16;
      }
      while (v8[6] > v11);
    }
    __val[0] = -1;
    __val[1] = -1;
    std::string v14 = (const std::string **)v36[5];
    uint64_t v15 = (const std::string **)v36[6];
    if (v14 != v15)
    {
      do
      {
        uint64_t v16 = *v14;
        unint64_t v17 = (std::__shared_weak_count *)v14[1];
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (__val[1] == -1)
        {
          *(_OWORD *)__val = *(_OWORD *)&v16[3].__r_.__value_.__l.__data_;
          std::string::operator=(&v31, v16);
        }
        else
        {
          uint64_t data = (uint64_t)v16[3].__r_.__value_.__l.__data_;
          if (__val[0] + __val[1] < data) {
            __val[1] = data - __val[0] + v16[3].__r_.__value_.__l.__size_;
          }
        }
        if (v17) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v17);
        }
        v14 += 2;
      }
      while (v14 != v15);
      if (__val[1] != -1)
      {
        std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,std::string &,CFRange &,void>((uint64_t)&v31, (uint64_t)__val, __p);
        long long v19 = *(_OWORD *)__p;
        __p[0] = 0;
        __p[1] = 0;
        CFIndex v20 = (std::__shared_weak_count *)*((void *)&v32 + 1);
        long long v32 = v19;
        if (v20)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v20);
          if (__p[1]) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
          }
        }
        unsigned int v21 = QP::ParserGrammar::symbolID(*(void *)(v2 + 328), (uint64_t)&v31);
        __int16 v22 = QP::ParserGrammar::symbolFlag(*(QP::ParserGrammar **)(v2 + 328), v21);
        *(_WORD *)(v32 + 88) = v22;
        std::vector<std::shared_ptr<QP::Lexeme>>::push_back[abi:ne180100]((uint64_t *)(v2 + 136), &v32);
        std::to_string(&v28, __val[0]);
        std::to_string(&v27, __val[1]);
        if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          CFStringRef v23 = &v27;
        }
        else {
          CFStringRef v23 = (std::string *)v27.__r_.__value_.__r.__words[0];
        }
        if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v27.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v27.__r_.__value_.__l.__size_;
        }
        int v25 = std::string::append(&v28, (const std::string::value_type *)v23, size);
        long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        std::string::size_type v30 = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)(v2 + 232), __p, (uint64_t)__p);
        if (SHIBYTE(v30) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v27.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v28.__r_.__value_.__l.__data_);
        }
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(v2 + 184), (void **)(v32 + 48), v32 + 48);
      }
    }
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v31.__r_.__value_.__l.__data_);
    }
    if (*((void *)&v32 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v32 + 1));
    }
  }
  _Block_object_dispose(&v35, 8);
  v31.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
  _Block_object_dispose(&v41, 8);
  if (v46) {
    operator delete(v46);
  }
  _Block_object_dispose(&v47, 8);
}

void sub_224DB93C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,std::__shared_weak_count *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a34);
  }
  _Block_object_dispose(&a45, 8);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a27);
  _Block_object_dispose((const void *)(v45 - 176), 8);
  uint64_t v47 = *(void **)(v45 - 136);
  if (v47) {
    operator delete(v47);
  }
  _Block_object_dispose((const void *)(v45 - 112), 8);
  _Unwind_Resume(a1);
}

void *__Block_byref_object_copy__120(void *result, void *a2)
{
  uint64_t v2 = a2[6];
  result[5] = a2[5];
  result[6] = v2;
  result[7] = a2[7];
  a2[5] = 0;
  a2[6] = 0;
  a2[7] = 0;
  return result;
}

void __Block_byref_object_dispose__121(uint64_t a1)
{
  long long v1 = *(void **)(a1 + 40);
  if (v1) {
    operator delete(v1);
  }
}

void ___ZN2QP5Lexer20selectDefaultLexemesEP10__CFString_block_invoke_122(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  CFIndex v8 = *(void **)(a1 + 56);
  __int16 v9 = (char *)v8[8];
  uint64_t v10 = (char *)v8[9];
  unint64_t v11 = v9;
  if (v9 != v10)
  {
    while (*(void *)v11 != a3)
    {
      v11 += 8;
      if (v11 == v10)
      {
        unint64_t v11 = (char *)v8[9];
        break;
      }
    }
  }
  if (v11 != v10)
  {
    uint64_t v12 = v11 - v9;
    unint64_t v13 = v12 >> 3;
    uint64_t v14 = v8[14];
    uint64_t v15 = (void *)(v14 + 16 * (v12 >> 3));
    if (v15[1] + *v15 >= a3 + a4)
    {
      uint64_t v19 = v12 >> 3;
    }
    else
    {
      uint64_t v16 = v8[15] - v14;
      if (v13 <= v16 >> 4) {
        uint64_t v17 = v16 >> 4;
      }
      else {
        uint64_t v17 = v12 >> 3;
      }
      uint64_t v18 = v15 + 3;
      uint64_t v19 = v12 >> 3;
      while (v17 != v19)
      {
        ++v19;
        uint64_t v20 = *(v18 - 1) + *v18;
        v18 += 2;
        if (v20 >= a3 + a4) {
          goto LABEL_16;
        }
      }
      uint64_t v19 = v17;
    }
LABEL_16:
    unint64_t v21 = (unint64_t)v12 >> 3;
    uint64_t v22 = v8[11];
    CFIndex v23 = *(void *)(v22 + 16 * v13);
    CFIndex v24 = *(void *)(v22 + 16 * v19) - v23 + *(void *)(v22 + 16 * v19 + 8);
    int v25 = (QP::ParserGrammar **)v8[43];
    CFStringRef v26 = (const __CFString *)v8[55];
    v28[0] = MEMORY[0x263EF8330];
    v28[1] = 0x40000000;
    uint64_t v28[2] = ___ZN2QP5Lexer20selectDefaultLexemesEP10__CFString_block_invoke_2;
    v28[3] = &unk_2647056E8;
    long long v29 = *(_OWORD *)(a1 + 32);
    std::string::size_type v30 = v8;
    CFIndex v31 = v23;
    CFIndex v32 = v24;
    QP::LexemeConverter::enumerateEntitiesWithTypeAndValues(v25, v26, v23, v24, a2, a5, (uint64_t)v28);
    uint64_t v27 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    *(void *)(v27 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v21);
  }
}

void ___ZN2QP5Lexer20selectDefaultLexemesEP10__CFString_block_invoke_2(void *a1, long long *a2)
{
  uint64_t v4 = a1[6];
  uint64_t v5 = *(std::string **)a2;
  if (*(char *)(*(void *)a2 + 71) < 0) {
    std::string::__init_copy_ctor_external(&v30, v5[2].__r_.__value_.__l.__data_, v5[2].__r_.__value_.__l.__size_);
  }
  else {
    std::string v30 = v5[2];
  }
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int64_t size = HIBYTE(v30.__r_.__value_.__r.__words[2]);
  }
  else {
    int64_t size = v30.__r_.__value_.__l.__size_;
  }
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    __int16 v7 = &v30;
  }
  else {
    __int16 v7 = (std::string *)v30.__r_.__value_.__r.__words[0];
  }
  CFIndex v8 = (char *)v7 + size;
  if (size >= 10)
  {
    int64_t v9 = size;
    uint64_t v10 = v7;
    do
    {
      unint64_t v11 = (char *)memchr(v10, 73, v9 - 9);
      if (!v11) {
        break;
      }
      if (*(void *)v11 == 0x6F7A656D69547349 && *((_WORD *)v11 + 4) == 25966)
      {
        if (v11 - (char *)v7 != -1 && v11 != v8 || size < 6) {
          goto LABEL_39;
        }
        goto LABEL_19;
      }
      uint64_t v10 = (std::string *)(v11 + 1);
      int64_t v9 = v8 - (char *)v10;
    }
    while (v8 - (char *)v10 >= 10);
  }
  if (size >= 6)
  {
LABEL_19:
    int64_t v13 = size;
    uint64_t v14 = v7;
    do
    {
      uint64_t v15 = (char *)memchr(v14, 73, v13 - 5);
      if (!v15) {
        break;
      }
      if (*(_DWORD *)v15 == 1767142217 && *((_WORD *)v15 + 2) == 25965)
      {
        if (v15 != v8 && v15 - (char *)v7 != -1) {
          *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = 1;
        }
        break;
      }
      uint64_t v14 = (std::string *)(v15 + 1);
      int64_t v13 = v8 - (char *)v14;
    }
    while (v8 - (char *)v14 >= 6);
  }
LABEL_39:
  if (*(unsigned char *)(*(void *)(a1[4] + 8) + 24)) {
    BOOL v19 = size < 8;
  }
  else {
    BOOL v19 = 1;
  }
  if (!v19)
  {
    uint64_t v20 = v7;
    do
    {
      unint64_t v21 = (char *)memchr(v20, 76, size - 7);
      if (!v21) {
        break;
      }
      if (*(void *)v21 == 0x6E6F697461636F4CLL)
      {
        if (v21 != v8 && v21 - (char *)v7 != -1)
        {
          std::vector<std::shared_ptr<QP::Lexeme>>::push_back[abi:ne180100]((uint64_t *)(*(void *)(a1[5] + 8) + 40), a2);
          goto LABEL_67;
        }
        break;
      }
      uint64_t v20 = (std::string *)(v21 + 1);
      int64_t size = v8 - (char *)v20;
    }
    while (v8 - (char *)v20 >= 8);
  }
  if ((void **)(v4 + 192) == std::__tree<std::string>::find<std::string>(v4 + 184, (void **)&v30.__r_.__value_.__l.__data_)&& (*(_WORD *)(*(void *)a2 + 88) != 3 || *(void *)(*(void *)(v4 + 312) + 8) != 9))
  {
    std::vector<std::shared_ptr<QP::Lexeme>>::push_back[abi:ne180100]((uint64_t *)(v4 + 136), a2);
    std::to_string(&v27, a1[7]);
    std::to_string(&v26, a1[8]);
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v22 = &v26;
    }
    else {
      uint64_t v22 = (std::string *)v26.__r_.__value_.__r.__words[0];
    }
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v23 = HIBYTE(v26.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v23 = v26.__r_.__value_.__l.__size_;
    }
    CFIndex v24 = std::string::append(&v27, (const std::string::value_type *)v22, v23);
    long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    std::string::size_type v29 = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)(v4 + 232), __p, (uint64_t)__p);
    if (SHIBYTE(v29) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v26.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(v4 + 184), (void **)&v30.__r_.__value_.__l.__data_, (uint64_t)&v30);
  }
LABEL_67:
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
}

void sub_224DB9974(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  _Unwind_Resume(exception_object);
}

void QP::Lexer::sortLexemes(QP::Lexer *this)
{
  unint64_t v3 = (uint64_t *)*((void *)this + 17);
  uint64_t v4 = (long long *)*((void *)this + 18);
  uint64_t v5 = (char *)this + 136;
  unint64_t v6 = 126 - 2 * __clz(((char *)v4 - (char *)v3) >> 4);
  uint64_t v12 = 0;
  int64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = (uint64_t (*)(uint64_t *, uint64_t *))QP::lexeme_ordered_range;
  if (v4 == (long long *)v3) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = v6;
  }
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Lexeme> &,std::shared_ptr<QP::Lexeme> &),std::shared_ptr<QP::Lexeme>*,false>(v3, v4, &v15, v7, 1);
  QP::Lexer::expand((uint64_t)this, (uint64_t)this + 184, (uint64_t)v5, (uint64_t *)&v12);
  std::vector<std::shared_ptr<QP::Lexeme>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<QP::Lexeme>*>,std::__wrap_iter<std::shared_ptr<QP::Lexeme>*>>((uint64_t *)this + 63, *((void **)this + 63), v12, v13, (v13 - (char *)v12) >> 4);
  CFIndex v8 = (uint64_t *)*((void *)this + 63);
  int64_t v9 = (long long *)*((void *)this + 64);
  unint64_t v10 = 126 - 2 * __clz(((char *)v9 - (char *)v8) >> 4);
  uint64_t v15 = QP::lexeme_less_than_range;
  if (v9 == (long long *)v8) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = v10;
  }
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Lexeme> &,std::shared_ptr<QP::Lexeme> &),std::shared_ptr<QP::Lexeme>*,false>(v8, v9, &v15, v11, 1);
  uint64_t v16 = (void **)&v12;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v16);
}

void sub_224DB9AC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  *(void *)(v10 - 24) = &a10;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v10 - 24));
  _Unwind_Resume(a1);
}

void QP::Lexer::addLexemes(QP::Lexer *this)
{
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  CFIndex v31 = 0;
  CFIndex v32 = 0;
  uint64_t v33 = 0;
  CFStringRef v2 = (const __CFString *)*((void *)this + 55);
  CFIndex Length = CFStringGetLength(v2);
  CFCharacterSetRef v4 = (const __CFCharacterSet *)*((void *)this + 50);
  memset(v30, 0, sizeof(v30));
  std::vector<std::shared_ptr<QP::Lexeme>>::__init_with_size[abi:ne180100]<std::shared_ptr<QP::Lexeme>*,std::shared_ptr<QP::Lexeme>*>(v30, *((void **)this + 63), *((void **)this + 64), (uint64_t)(*((void *)this + 64) - *((void *)this + 63)) >> 4);
  QP::subtokenize(v2, 0, Length, v4, (uint64_t)&v34, (uint64_t *)&v31, v30);
  uint64_t v22 = (uint64_t ***)v30;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
  unint64_t v5 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (v32 - v31));
  v37[0] = (void **)QP::ranges_greater_than_range;
  if (v32 == v31) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = v5;
  }
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*,false>((unint64_t)v31, v32, (uint64_t (**)(void **, void **))v37, v6, 1);
  uint64_t v7 = v31;
  uint64_t v18 = v32;
  if (v31 != v32)
  {
    uint64_t v17 = (uint64_t *)((char *)this + 552);
    do
    {
      uint64_t v22 = 0;
      std::string::size_type v23 = (void ***)&v22;
      uint64_t v24 = 0x4002000000;
      long long v25 = __Block_byref_object_copy__128;
      std::string v26 = __Block_byref_object_dispose__129;
      std::string v28 = 0;
      uint64_t v29 = 0;
      std::string __p = 0;
      int64_t v9 = *v7;
      CFIndex v8 = v7[1];
      if (*v7 == v8)
      {
        int64_t v13 = (void ***)&v22;
      }
      else
      {
        BOOL v19 = v7;
        uint64_t v10 = 0;
        do
        {
          uint64_t v11 = *v9;
          uint64_t v12 = v9[1];
          memset(v21, 0, sizeof(v21));
          std::vector<std::shared_ptr<QP::Lexeme>>::__init_with_size[abi:ne180100]<std::shared_ptr<QP::Lexeme>*,std::shared_ptr<QP::Lexeme>*>(v21, *((void **)this + 63), *((void **)this + 64), (uint64_t)(*((void *)this + 64) - *((void *)this + 63)) >> 4);
          v20[0] = MEMORY[0x263EF8330];
          v20[1] = 0x40000000;
          v20[2] = ___ZN2QP5Lexer10addLexemesEv_block_invoke;
          uint64_t v20[3] = &unk_264705758;
          v20[5] = this;
          v20[6] = v10;
          v20[4] = &v22;
          QP::enumerateIndexesOfRange(v21, v11, v12, (uint64_t)v20);
          v37[0] = (void **)v21;
          std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](v37);
          ++v10;
          v9 += 2;
        }
        while (v9 != v8);
        int64_t v13 = v23;
        uint64_t v7 = v19;
      }
      uint64_t v14 = (uint64_t)(v13 + 5);
      unint64_t v15 = *((void *)this + 70);
      if (v15 >= *((void *)this + 71))
      {
        uint64_t v16 = std::vector<std::vector<CFRange>>::__push_back_slow_path<std::vector<CFRange> const&>(v17, v14);
      }
      else
      {
        std::vector<std::vector<CFRange>>::__construct_one_at_end[abi:ne180100]<std::vector<CFRange> const&>((uint64_t)v17, v14);
        uint64_t v16 = v15 + 24;
      }
      *((void *)this + 7nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = v16;
      _Block_object_dispose(&v22, 8);
      if (__p)
      {
        std::string v28 = __p;
        operator delete(__p);
      }
      v7 += 3;
    }
    while (v7 != v18);
  }
  uint64_t v22 = &v31;
  std::vector<std::vector<CFRange>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
  if (v34)
  {
    uint64_t v35 = v34;
    operator delete(v34);
  }
}

void sub_224DB9DA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  a26 = v32 - 160;
  std::vector<std::vector<CFRange>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  uint64_t v34 = *(void **)(v32 - 136);
  if (v34)
  {
    *(void *)(v32 - 128) = v34;
    operator delete(v34);
  }
  _Unwind_Resume(a1);
}

void QP::subtokenize(const __CFString *a1, CFIndex a2, uint64_t a3, const __CFCharacterSet *a4, uint64_t a5, uint64_t *a6, void **a7)
{
  if (a3 < 1) {
    return;
  }
  CFIndex v13 = 1;
  while (1)
  {
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    std::vector<std::shared_ptr<QP::Lexeme>>::__init_with_size[abi:ne180100]<std::shared_ptr<QP::Lexeme>*,std::shared_ptr<QP::Lexeme>*>(&v42, *a7, a7[1], ((char *)a7[1] - (char *)*a7) >> 4);
    char v50 = 0;
    uint64_t v51 = &v50;
    uint64_t v52 = 0x2000000000;
    char v53 = 0;
    if (a1)
    {
      CFRange result = (CFRange)xmmword_224E1E2D0;
      v55.CFIndex location = a2;
      v55.CFIndex length = v13;
      if (CFStringFindCharacterFromSet(a1, a4, v55, 0, &result) && result.location == a2 && v13 == result.length)
      {
        int v14 = 1;
        int v15 = 1;
      }
      else
      {
        memset(v48, 0, sizeof(v48));
        std::vector<std::shared_ptr<QP::Lexeme>>::__init_with_size[abi:ne180100]<std::shared_ptr<QP::Lexeme>*,std::shared_ptr<QP::Lexeme>*>(v48, v42, v43, (v43 - v42) >> 4);
        std::string __p = (void *)MEMORY[0x263EF8330];
        unint64_t v46 = 0x40000000;
        v47[0] = ___ZN2QPL13containsRangeEPK10__CFString7CFRangePK16__CFCharacterSetNSt3__16vectorINS7_10shared_ptrINS_6LexemeEEENS7_9allocatorISB_EEEEPb_block_invoke;
        v47[1] = &unk_2647057C8;
        v47[2] = &v50;
        QP::enumerateIndexesOfRange(v48, a2, v13, (uint64_t)&__p);
        CFStringRef v54 = (void **)v48;
        std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v54);
        int v14 = 0;
        int v15 = *((unsigned __int8 *)v51 + 24);
      }
    }
    else
    {
      int v14 = 0;
      int v15 = 0;
    }
    _Block_object_dispose(&v50, 8);
    std::string __p = &v42;
    std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    if (v15) {
      break;
    }
LABEL_32:
    if (a3 == v13++) {
      return;
    }
  }
  if (a3 != v13)
  {
    std::string __p = 0;
    unint64_t v46 = 0;
    v47[0] = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&__p, *(const void **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 4);
    if (!v14)
    {
      uint64_t v16 = (void *)v46;
      if (v46 >= v47[0])
      {
        uint64_t v18 = __p;
        uint64_t v19 = (uint64_t)(v46 - (void)__p) >> 4;
        unint64_t v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v21 = v47[0] - (void)__p;
        if ((uint64_t)(v47[0] - (void)__p) >> 3 > v20) {
          unint64_t v20 = v21 >> 3;
        }
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v20;
        }
        if (v22)
        {
          std::string::size_type v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>>((uint64_t)v47, v22);
          uint64_t v18 = __p;
          uint64_t v16 = (void *)v46;
        }
        else
        {
          std::string::size_type v23 = 0;
        }
        uint64_t v24 = (CFIndex *)&v23[16 * v19];
        *uint64_t v24 = a2;
        v24[1] = v13;
        long long v25 = v24;
        if (v16 != v18)
        {
          do
          {
            *((_OWORD *)v25 - QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = *((_OWORD *)v16 - 1);
            v25 -= 2;
            v16 -= 2;
          }
          while (v16 != v18);
          uint64_t v18 = __p;
        }
        uint64_t v17 = v24 + 2;
        std::string __p = v25;
        unint64_t v46 = (unint64_t)(v24 + 2);
        v47[0] = &v23[16 * v22];
        if (v18) {
          operator delete(v18);
        }
      }
      else
      {
        *(void *)unint64_t v46 = a2;
        v16[1] = v13;
        uint64_t v17 = v16 + 2;
      }
      unint64_t v46 = (unint64_t)v17;
    }
    memset(v41, 0, sizeof(v41));
    std::vector<std::shared_ptr<QP::Lexeme>>::__init_with_size[abi:ne180100]<std::shared_ptr<QP::Lexeme>*,std::shared_ptr<QP::Lexeme>*>(v41, *a7, a7[1], ((char *)a7[1] - (char *)*a7) >> 4);
    QP::subtokenize(a1, v13 + a2, a3 - v13, a4, &__p, a6, v41);
    char v50 = (void **)v41;
    std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v50);
    if (__p)
    {
      unint64_t v46 = (unint64_t)__p;
      operator delete(__p);
    }
    goto LABEL_32;
  }
  if (!v14)
  {
    unint64_t v27 = *(void *)(a5 + 16);
    std::string v28 = *(CFIndex **)(a5 + 8);
    if ((unint64_t)v28 >= v27)
    {
      std::string v30 = *(CFIndex **)a5;
      uint64_t v31 = ((uint64_t)v28 - *(void *)a5) >> 4;
      unint64_t v32 = v31 + 1;
      if ((unint64_t)(v31 + 1) >> 60) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v33 = v27 - (void)v30;
      if (v33 >> 3 > v32) {
        unint64_t v32 = v33 >> 3;
      }
      if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v34 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v34 = v32;
      }
      if (v34)
      {
        uint64_t v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>>(a5 + 16, v34);
        std::string v30 = *(CFIndex **)a5;
        std::string v28 = *(CFIndex **)(a5 + 8);
      }
      else
      {
        uint64_t v35 = 0;
      }
      uint64_t v36 = (CFIndex *)&v35[16 * v31];
      uint64_t v37 = &v35[16 * v34];
      CFIndex *v36 = a2;
      v36[1] = a3;
      uint64_t v29 = v36 + 2;
      if (v28 != v30)
      {
        do
        {
          *((_OWORD *)v36 - QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = *((_OWORD *)v28 - 1);
          v36 -= 2;
          v28 -= 2;
        }
        while (v28 != v30);
        std::string v30 = *(CFIndex **)a5;
      }
      *(void *)a5 = v36;
      *(void *)(a5 + 8) = v29;
      *(void *)(a5 + 16) = v37;
      if (v30) {
        operator delete(v30);
      }
    }
    else
    {
      *std::string v28 = a2;
      v28[1] = a3;
      uint64_t v29 = v28 + 2;
    }
    *(void *)(a5 + 8) = v29;
  }
  unint64_t v38 = a6[1];
  if (v38 >= a6[2])
  {
    uint64_t v39 = std::vector<std::vector<CFRange>>::__push_back_slow_path<std::vector<CFRange> const&>(a6, a5);
  }
  else
  {
    std::vector<std::vector<CFRange>>::__construct_one_at_end[abi:ne180100]<std::vector<CFRange> const&>((uint64_t)a6, a5);
    uint64_t v39 = v38 + 24;
  }
  a6[1] = v39;
}

void sub_224DBA24C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 __Block_byref_object_copy__128(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 4nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__129(uint64_t a1)
{
  CFStringRef v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

uint64_t *QP::enumerateIndexesOfRange(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = result;
  char v25 = 0;
  uint64_t v7 = (void *)result[1];
  if (a2)
  {
    int64_t v9 = (void *)*result;
    if (v7 != (void *)*result)
    {
      unint64_t v10 = ((uint64_t)v7 - *result) >> 4;
      do
      {
        unint64_t v11 = v10 >> 1;
        uint64_t v12 = &v9[2 * (v10 >> 1)];
        uint64_t v14 = *v12;
        CFIndex v13 = v12 + 2;
        v10 += ~(v10 >> 1);
        if (*(void *)(v14 + 80) + *(void *)(v14 + 72) <= a2) {
          int64_t v9 = v13;
        }
        else {
          unint64_t v10 = v11;
        }
      }
      while (v10);
    }
    if (v9 != v7)
    {
      int v15 = v9;
      do
      {
        uint64_t v16 = *(void *)(*v15 + 72);
        if (v16 == a2 && *(void *)(*v15 + 80) == a3)
        {
          __n128 result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, char *))(a4 + 16))(a4, ((uint64_t)v15 - *v6) >> 4, &v25);
          if (v25) {
            return result;
          }
          uint64_t v7 = (void *)v6[1];
        }
        else if (v16 > a2)
        {
          return result;
        }
        v9 += 2;
        v15 += 2;
      }
      while (v9 != v7);
    }
  }
  else
  {
    uint64_t v18 = *result;
    if (v7 != (void *)*result)
    {
      uint64_t v19 = 0;
      unint64_t v20 = 0;
      do
      {
        uint64_t v21 = *(void *)(v18 + v19);
        uint64_t v22 = *(void *)(v21 + 72);
        uint64_t v23 = *(void *)(v21 + 80);
        if (v22) {
          BOOL v24 = 0;
        }
        else {
          BOOL v24 = v23 == a3;
        }
        if (v24)
        {
          __n128 result = (uint64_t *)(*(uint64_t (**)(uint64_t, unint64_t, char *))(a4 + 16))(a4, v20, &v25);
          if (v25) {
            return result;
          }
          uint64_t v18 = *v6;
          uint64_t v7 = (void *)v6[1];
        }
        else if (v22 > 0)
        {
          return result;
        }
        ++v20;
        v19 += 16;
      }
      while (v20 < ((uint64_t)v7 - v18) >> 4);
    }
  }
  return result;
}

void ___ZN2QP5Lexer10addLexemesEv_block_invoke(void *a1, uint64_t a2)
{
  unint64_t v3 = *(std::__shared_weak_count **)(*(void *)(a1[5] + 504) + 16 * a2 + 8);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = a1[6];
  unint64_t v5 = *(void **)(a1[4] + 8);
  uint64_t v6 = (char *)v5[6];
  unint64_t v7 = v5[7];
  if ((unint64_t)v6 >= v7)
  {
    int64_t v9 = (char *)v5[5];
    uint64_t v10 = (v6 - v9) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v7 - (void)v9;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>>((uint64_t)(v5 + 7), v13);
      int64_t v9 = (char *)v5[5];
      uint64_t v6 = (char *)v5[6];
    }
    else
    {
      uint64_t v14 = 0;
    }
    int v15 = &v14[16 * v10];
    uint64_t v16 = &v14[16 * v13];
    *(void *)int v15 = v4;
    *((void *)v15 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = a2;
    CFIndex v8 = v15 + 16;
    if (v6 != v9)
    {
      do
      {
        *((_OWORD *)v15 - QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = *((_OWORD *)v6 - 1);
        v15 -= 16;
        v6 -= 16;
      }
      while (v6 != v9);
      int64_t v9 = (char *)v5[5];
    }
    v5[5] = v15;
    v5[6] = v8;
    v5[7] = v16;
    if (v9) {
      operator delete(v9);
    }
  }
  else
  {
    *(void *)uint64_t v6 = v4;
    *((void *)v6 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = a2;
    CFIndex v8 = v6 + 16;
  }
  v5[6] = v8;
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_224DBA5C4(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void QP::Lexer::addEntityLexemes(QP::Lexer *this)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  valuePtr[0] = 0;
  valuePtr[1] = Mutable;
  uint64_t v4 = *((void *)this + 17);
  uint64_t v5 = *((void *)this + 18);
  while (v4 != v5)
  {
    CFNumberRef v6 = CFNumberCreate(v2, kCFNumberCFIndexType, (const void *)(*(void *)v4 + 72));
    v32.CFIndex location = (CFIndex)v6;
    cf[0] = CFNumberCreate(v2, kCFNumberIntType, valuePtr);
    if (*(unsigned __int16 *)(*(void *)v4 + 88) - 1 > 3) {
      goto LABEL_11;
    }
    value[0] = 0;
    if (CFDictionaryGetValueIfPresent(Mutable, v6, (const void **)value)
      && (__p.__r_.__value_.__r.__words[0] = 0,
          CFNumberGetValue((CFNumberRef)value[0], kCFNumberSInt64Type, &__p),
          *(void *)(*(void *)(*((void *)this + 17) + 16 * __p.__r_.__value_.__r.__words[0]) + 80) > *(void *)(*(void *)v4 + 80)))
    {
      char v7 = 0;
      ++valuePtr[0];
    }
    else
    {
      CFDictionarySetValue(Mutable, (const void *)v32.location, cf[0]);
      char v7 = 1;
    }
    if (value[0]) {
      CFRelease(value[0]);
    }
    if (v7) {
LABEL_11:
    }
      ++valuePtr[0];
    if (cf[0]) {
      CFRelease(cf[0]);
    }
    if (v32.location) {
      CFRelease((CFTypeRef)v32.location);
    }
    v4 += 16;
  }
  CFIndex v8 = (CFRange *)*((void *)this + 57);
  int64_t v9 = (CFRange *)*((void *)this + 58);
  if (v8 != v9)
  {
    uint64_t v10 = (uint64_t *)((char *)this + 528);
    CFIndex v11 = -1;
    do
    {
      CFRange v12 = *v8;
      CFIndex location = v8[1].location;
      CFRange v32 = v12;
      CFNumberRef v13 = CFNumberCreate(v2, kCFNumberCFIndexType, &v32);
      v31[0] = 0;
      v31[1] = v13;
      if (CFDictionaryGetValueIfPresent(Mutable, v13, (const void **)v31))
      {
        value[0] = 0;
        CFNumberGetValue((CFNumberRef)v31[0], kCFNumberSInt64Type, value);
        long long v14 = *(_OWORD *)(*((void *)this + 17) + 16 * (uint64_t)value[0]);
        *(_OWORD *)CFTypeRef cf = v14;
        if (*((void *)&v14 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v14 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        std::vector<std::shared_ptr<QP::Lexeme>>::push_back[abi:ne180100](v10, (long long *)cf);
        uint64_t v15 = *((void *)cf[0] + 9);
        if (*((void *)cf[0] + 10) + v15 > v11) {
          CFIndex v11 = *((void *)cf[0] + 10) + v15;
        }
        if (cf[1]) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf[1]);
        }
      }
      else if (v11 <= v32.location || v11 < v32.length + v32.location)
      {
        std::string::basic_string[abi:ne180100]<0>(cf, "Text");
        if ((location & 0x400) != 0)
        {
          if (v30 < 0)
          {
            cf[1] = (CFTypeRef)11;
            uint64_t v16 = (char *)cf[0];
          }
          else
          {
            char v30 = 11;
            uint64_t v16 = (char *)cf;
          }
          strcpy(v16, "Punctuation");
        }
        CFStringRef v17 = CFStringCreateWithSubstring(v2, *((CFStringRef *)this + 55), v32);
        CFStringRef v28 = v17;
        QP::getUTF8StringFromCFString(v17, value);
        if (*((void *)this + 52))
        {
          if ((v27 & 0x80u) == 0) {
            uint64_t v18 = (char *)value;
          }
          else {
            uint64_t v18 = (char *)value[0];
          }
          if ((v27 & 0x80u) == 0) {
            size_t v19 = v27;
          }
          else {
            size_t v19 = (size_t)value[1];
          }
          memset(&__p, 0, sizeof(__p));
          std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>((char *)&__p, v18, &v18[v19], v19);
          CFStringGetLength(v17);
          uint64_t v10 = (uint64_t *)((char *)this + 528);
          if (SILocalizationGetTokenType() == 5)
          {
            if (v30 < 0)
            {
              cf[1] = (CFTypeRef)8;
              unint64_t v20 = (char *)cf[0];
            }
            else
            {
              char v30 = 8;
              unint64_t v20 = (char *)cf;
            }
            strcpy(v20, "Stopword");
          }
          if (__p.__r_.__value_.__r.__words[0])
          {
            __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,std::string &,CFRange &,void>((uint64_t)cf, (uint64_t)&v32, &v24);
        uint64_t v23 = 0;
        if (CFDictionaryGetValueIfPresent(*((CFDictionaryRef *)this + 38), v17, (const void **)&v23))
        {
          QP::getUTF8StringFromCFString((const __CFString *)v23, &__p);
          uint64_t v21 = (std::string *)v24;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&__str, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          }
          else {
            std::string __str = __p;
          }
          std::string::operator=(v21 + 4, &__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        std::vector<std::shared_ptr<QP::Lexeme>>::push_back[abi:ne180100](v10, &v24);
        if (*((void *)&v24 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v24 + 1));
        }
        if ((char)v27 < 0)
        {
          operator delete(value[0]);
          if (!v17) {
            goto LABEL_62;
          }
        }
        else if (!v17)
        {
LABEL_62:
          if (v30 < 0) {
            operator delete((void *)cf[0]);
          }
          goto LABEL_64;
        }
        CFRelease(v17);
        goto LABEL_62;
      }
LABEL_64:
      if (v31[0]) {
        CFRelease(v31[0]);
      }
      if (v13) {
        CFRelease(v13);
      }
      CFIndex v8 = (CFRange *)((char *)v8 + 24);
    }
    while (v8 != v9);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
}

void sub_224DBAA9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,const void *a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  nlp::CFScopedPtr<__CFString const*>::reset(&a33, 0);
  if (a39 < 0) {
    operator delete(a34);
  }
  nlp::CFScopedPtr<__CFNumber const*>::reset((const void **)(v39 - 144), 0);
  nlp::CFScopedPtr<__CFNumber const*>::reset((const void **)(v39 - 136), 0);
  nlp::CFScopedPtr<__CFDictionary *>::reset((const void **)(v39 - 96), 0);
  _Unwind_Resume(a1);
}

void ___ZN2QP5Lexer5parseEbl_block_invoke(void *a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v5 = a1[8];
  if ((*(unsigned char *)(a2 + 17) & 8) == 0)
  {
    CFRange v14 = *(CFRange *)a2;
    uint64_t v15 = *(void *)(a2 + 16);
    QP::Lexer::tagTokenWhitespace((uint64_t *)v5, &v14.location, *(CFMutableStringRef *)(*(void *)(a1[4] + 8) + 24));
    uint64_t v7 = *(void *)(*(void *)(a1[5] + 8) + 24);
    uint64_t v8 = *(void *)(a1[6] + 8);
    uint64_t v9 = *(void *)(v8 + 24);
    *(void *)(v8 + 24) = v9 + 1;
    *(_OWORD *)(v7 + 16 * v9) = *(_OWORD *)a2;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v5 + 464) - *(void *)(v5 + 456)) >> 3) >= a1[9]) {
      *a3 = 1;
    }
  }
  if (CFStringFindCharacterFromSet(*(CFStringRef *)(v5 + 440), *(CFCharacterSetRef *)(v5 + 368), *(CFRange *)a2, 0, 0))
  {
    CFRange v12 = *(CFRange *)a2;
    uint64_t v13 = *(void *)(a2 + 16);
    QP::Lexer::tagTokenSingleQuote(v5, &v12.location, *(__CFString **)(*(void *)(a1[4] + 8) + 24));
  }
  else if (!CFStringFindCharacterFromSet(*(CFStringRef *)(v5 + 440), *(CFCharacterSetRef *)(v5 + 392), *(CFRange *)a2, 0, 0))
  {
    CFRange v10 = *(CFRange *)a2;
    uint64_t v11 = *(void *)(a2 + 16);
    QP::Lexer::tagTokenPunctuation(v5, (uint64_t)&v10, *(__CFString **)(*(void *)(a1[4] + 8) + 24), *(void *)(*(void *)(a1[7] + 8) + 40), *(void *)(*(void *)(a1[7] + 8) + 48));
  }
}

void QP::Lexer::merge(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t v6 = a1[43];
  uint64_t v7 = (std::__shared_weak_count *)a2[1];
  uint64_t v14 = *a2;
  uint64_t v15 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (std::__shared_weak_count *)a3[1];
  uint64_t v12 = *a3;
  uint64_t v13 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  QP::LexemeConverter::merge(v6, &v14, &v12, (uint64_t)&v16);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if ((void)v16) {
    std::vector<std::shared_ptr<QP::Lexeme>>::push_back[abi:ne180100](a1 + 63, &v16);
  }
  uint64_t v9 = a1[64];
  uint64_t v11 = *(void *)(v9 - 16);
  uint64_t v10 = *(void *)(v9 - 8);
  *a4 = v11;
  a4[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  if (*((void *)&v16 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v16 + 1));
  }
}

void sub_224DBADFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

void QP::Lexer::resolve(void *a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, BOOL *a4@<X3>, void *a5@<X8>)
{
  uint64_t v7 = a1[43];
  uint64_t v8 = (std::__shared_weak_count *)a2[1];
  uint64_t v12 = *a2;
  uint64_t v13 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  QP::LexemeConverter::resolve(v7, &v12, a3, a4, (uint64_t)&v14);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if ((void)v14)
  {
    std::vector<std::shared_ptr<QP::Lexeme>>::push_back[abi:ne180100](a1 + 63, &v14);
    uint64_t v9 = a1[64];
    uint64_t v11 = *(void *)(v9 - 16);
    uint64_t v10 = *(void *)(v9 - 8);
    *a5 = v11;
    a5[1] = v10;
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a5 = 0;
    a5[1] = 0;
  }
  if (*((void *)&v14 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v14 + 1));
  }
}

void sub_224DBAED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

os_log_t ___ZL11lexerLoggerv_block_invoke()
{
  CFAllocatorRef v0 = _nlpLoggingSubsystem();
  os_log_t result = os_log_create(v0, "QueryParserLexer");
  lexerLogger(void)::log = (uint64_t)result;
  return result;
}

void std::vector<std::vector<CFRange>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  CFAllocatorRef v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<CFRange>>::__clear[abi:ne180100]((uint64_t *)v2);
    unint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::vector<CFRange>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      uint64_t v6 = *(void **)(v4 - 24);
      v4 -= 24;
      uint64_t v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

std::string *QP::Lexeme::Lexeme(std::string *this, long long *a2, uint64_t a3, std::string::size_type a4)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v8 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v8;
  }
  std::string::basic_string[abi:ne180100]<0>(this[1].__r_.__value_.__r.__words, "");
  std::to_string(&v20, a3);
  int v9 = *((char *)a2 + 23);
  if (v9 >= 0) {
    uint64_t v10 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v10 = *(const std::string::value_type **)a2;
  }
  if (v9 >= 0) {
    std::string::size_type v11 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    std::string::size_type v11 = *((void *)a2 + 1);
  }
  uint64_t v12 = std::string::insert(&v20, 0, v10, v11);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, a4);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  long long v16 = std::string::append(&v21, (const std::string::value_type *)p_p, size);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  this[2].__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  this[3].__r_.__value_.__r.__words[0] = a3;
  this[3].__r_.__value_.__l.__size_ = a4;
  LOWORD(this[3].__r_.__value_.__r.__words[2]) = 0;
  std::string::basic_string[abi:ne180100]<0>(this[4].__r_.__value_.__r.__words, "");
  return this;
}

void sub_224DBB134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (*(char *)(v26 + 71) < 0) {
    operator delete(*v28);
  }
  if (*(char *)(v26 + 47) < 0) {
    operator delete(*v27);
  }
  if (*(char *)(v26 + 23) < 0) {
    operator delete(*(void **)v26);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::shared_ptr<QP::Lexeme>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<QP::Lexeme>>,std::reverse_iterator<std::shared_ptr<QP::Lexeme>*>,std::reverse_iterator<std::shared_ptr<QP::Lexeme>*>,std::reverse_iterator<std::shared_ptr<QP::Lexeme>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<QP::Lexeme>>,std::reverse_iterator<std::shared_ptr<QP::Lexeme>*>,std::reverse_iterator<std::shared_ptr<QP::Lexeme>*>,std::reverse_iterator<std::shared_ptr<QP::Lexeme>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<QP::Lexeme>>,std::reverse_iterator<std::shared_ptr<QP::Lexeme>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<QP::Lexeme>>,std::reverse_iterator<std::shared_ptr<QP::Lexeme>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>,std::reverse_iterator<std::shared_ptr<QP::GraphStructureStack::Node>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::vector<std::string>::__push_back_slow_path<std::string const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9) {
    uint64_t v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  std::__split_buffer<std::string>::pointer end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    std::__split_buffer<std::string>::pointer end = __v.__end_;
  }
  else
  {
    long long v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  uint64_t v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_224DBB418(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void *std::vector<std::shared_ptr<QP::Lexeme>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<QP::Lexeme>*>,std::__wrap_iter<std::shared_ptr<QP::Lexeme>*>>(uint64_t *a1, void *a2, uint64_t *a3, void *a4, uint64_t a5)
{
  unint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v7 = a3;
    uint64_t v11 = a1[2];
    unint64_t v9 = a1 + 2;
    uint64_t v10 = v11;
    unint64_t v12 = *(v9 - 1);
    if (a5 <= (uint64_t)(v11 - v12) >> 4)
    {
      uint64_t v19 = v12 - (void)a2;
      uint64_t v20 = (uint64_t)(v12 - (void)a2) >> 4;
      if (v20 >= a5)
      {
        std::string v21 = &a3[2 * a5];
      }
      else
      {
        std::string v21 = &a3[2 * v20];
        a1[1] = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<QP::Lexeme>>,std::shared_ptr<QP::Lexeme>*,std::shared_ptr<QP::Lexeme>*,std::shared_ptr<QP::Lexeme>*>((uint64_t)v9, v21, a4, (void *)*(v9 - 1));
        if (v19 < 1) {
          return v5;
        }
      }
      std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__move_range((uint64_t)a1, v5, v12, (uint64_t)&v5[2 * a5]);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<QP::GraphStructureStack::Node> *,std::shared_ptr<QP::GraphStructureStack::Node> *,std::shared_ptr<QP::GraphStructureStack::Node> *>((uint64_t)v26, v7, v21, v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 + ((uint64_t)(v12 - *a1) >> 4);
      if (v14 >> 60) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v15 = ((uint64_t)a2 - v13) >> 4;
      uint64_t v16 = v10 - v13;
      if (v16 >> 3 > v14) {
        unint64_t v14 = v16 >> 3;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v14;
      }
      v26[4] = v9;
      if (v17) {
        uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>>((uint64_t)v9, v17);
      }
      else {
        uint64_t v18 = 0;
      }
      uint64_t v22 = (uint64_t *)&v18[16 * v15];
      v26[0] = v18;
      v26[1] = v22;
      v26[3] = &v18[16 * v17];
      uint64_t v23 = &v22[2 * a5];
      do
      {
        *uint64_t v22 = *v7;
        uint64_t v24 = v7[1];
        v22[1] = v24;
        if (v24) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
        }
        v22 += 2;
        v7 += 2;
      }
      while (v22 != v23);
      void v26[2] = v23;
      unint64_t v5 = (void *)std::vector<std::shared_ptr<QP::Lexeme>>::__swap_out_circular_buffer(a1, v26, v5);
      std::__split_buffer<std::shared_ptr<QP::GraphStructureStack::Node>>::~__split_buffer(v26);
    }
  }
  return v5;
}

void sub_224DBB5B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::shared_ptr<QP::Lexeme>>::__swap_out_circular_buffer(uint64_t *a1, void *a2, void *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<QP::Lexeme>>,std::reverse_iterator<std::shared_ptr<QP::Lexeme>*>,std::reverse_iterator<std::shared_ptr<QP::Lexeme>*>,std::reverse_iterator<std::shared_ptr<QP::Lexeme>*>>((uint64_t)(a1 + 2), (uint64_t)a3, a3, *a1, (void *)*a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<QP::Lexeme>>,std::shared_ptr<QP::Lexeme>*,std::shared_ptr<QP::Lexeme>*,std::shared_ptr<QP::Lexeme>*>(v7, (uint64_t)a3, a1[1], (_OWORD *)a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<QP::Lexeme>>,std::shared_ptr<QP::Lexeme>*,std::shared_ptr<QP::Lexeme>*,std::shared_ptr<QP::Lexeme>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  unint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *unint64_t v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<QP::Lexeme>>,std::shared_ptr<QP::Lexeme>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<QP::Lexeme>>,std::shared_ptr<QP::Lexeme>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>,std::shared_ptr<QP::GraphStructureStack::Node>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

_OWORD *std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<QP::Lexeme>>,std::shared_ptr<QP::Lexeme>*,std::shared_ptr<QP::Lexeme>*,std::shared_ptr<QP::Lexeme>*>(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  unint64_t v4 = a4;
  uint64_t v9 = a4;
  char v8 = a4;
  v6[0] = a1;
  v6[1] = &v8;
  v6[2] = &v9;
  if (a2 != a3)
  {
    do
    {
      *v4++ = *(_OWORD *)a2;
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      a2 += 16;
    }
    while (a2 != a3);
    uint64_t v9 = v4;
  }
  char v7 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<QP::Lexeme>>,std::shared_ptr<QP::Lexeme>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v6);
  return v4;
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Lexeme> &,std::shared_ptr<QP::Lexeme> &),std::shared_ptr<QP::Lexeme>*,false>(uint64_t *a1, long long *a2, uint64_t (**a3)(uint64_t *, uint64_t *), uint64_t a4, char a5)
{
void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Lexeme> &,std::shared_ptr<QP::Lexeme> &),std::shared_ptr<QP::Lexeme>*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(long long *, uint64_t))
{
  if (a1 != a2)
  {
    char v5 = (long long *)(a1 + 16);
    if (a1 + 16 != a2)
    {
      uint64_t v7 = 0;
      uint64_t v8 = a1;
      do
      {
        uint64_t v9 = v8;
        uint64_t v8 = (uint64_t)v5;
        if ((*a3)(v5, v9))
        {
          long long v18 = *(_OWORD *)v8;
          *(void *)uint64_t v8 = 0;
          *(void *)(v8 + 8) = 0;
          uint64_t v10 = v7;
          while (1)
          {
            uint64_t v11 = a1 + v10;
            long long v12 = *(_OWORD *)(a1 + v10);
            *(void *)uint64_t v11 = 0;
            *(void *)(v11 + 8) = 0;
            uint64_t v13 = *(std::__shared_weak_count **)(a1 + v10 + 24);
            *(_OWORD *)(v11 + 16) = v12;
            if (v13) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v13);
            }
            if (!v10) {
              break;
            }
            char v14 = (*a3)(&v18, a1 + v10 - 16);
            v10 -= 16;
            if ((v14 & 1) == 0)
            {
              uint64_t v15 = a1 + v10 + 16;
              goto LABEL_12;
            }
          }
          uint64_t v15 = a1;
LABEL_12:
          long long v16 = v18;
          long long v18 = 0uLL;
          unint64_t v17 = *(std::__shared_weak_count **)(v15 + 8);
          *(_OWORD *)uint64_t v15 = v16;
          if (v17) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v17);
          }
          if (*((void *)&v18 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v18 + 1));
          }
        }
        char v5 = (long long *)(v8 + 16);
        v7 += 16;
      }
      while (v8 + 16 != a2);
    }
  }
}

void sub_224DBBCA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Lexeme> &,std::shared_ptr<QP::Lexeme> &),std::shared_ptr<QP::Lexeme>*>(long long *a1, long long *a2, uint64_t (**a3)(long long *, long long *))
{
  if (a1 != a2)
  {
    unint64_t v4 = a1;
    char v5 = a1 + 1;
    if (a1 + 1 != a2)
    {
      uint64_t v7 = a1 - 1;
      do
      {
        uint64_t v8 = v4;
        unint64_t v4 = v5;
        if ((*a3)(v5, v8))
        {
          long long v15 = *v4;
          *(void *)unint64_t v4 = 0;
          *((void *)v4 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = 0;
          uint64_t v9 = v7;
          do
          {
            long long v10 = v9[1];
            *((void *)v9 + 2) = 0;
            *((void *)v9 + 3) = 0;
            uint64_t v11 = (std::__shared_weak_count *)*((void *)v9 + 5);
            v9[2] = v10;
            if (v11) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v11);
            }
            char v12 = (*a3)(&v15, v9--);
          }
          while ((v12 & 1) != 0);
          long long v13 = v15;
          long long v15 = 0uLL;
          char v14 = (std::__shared_weak_count *)*((void *)v9 + 5);
          v9[2] = v13;
          if (v14) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v14);
          }
          if (*((void *)&v15 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v15 + 1));
          }
        }
        char v5 = v4 + 1;
        ++v7;
      }
      while (v4 + 1 != a2);
    }
  }
}

void sub_224DBBDA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<QP::Lexeme> *,BOOL (*&)(std::shared_ptr<QP::Lexeme>&,std::shared_ptr<QP::Lexeme>&)>(long long *a1, void *a2, uint64_t (**a3)(long long *, void *))
{
  unint64_t v4 = a2;
  long long v17 = *a1;
  *(void *)a1 = 0;
  *((void *)a1 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = 0;
  if ((*a3)(&v17, a2 - 2))
  {
    char v6 = a1;
    do
      v6 += 2;
    while (((*a3)(&v17, v6) & 1) == 0);
  }
  else
  {
    uint64_t v7 = a1 + 1;
    do
    {
      char v6 = v7;
      if (v7 >= v4) {
        break;
      }
      int v8 = (*a3)(&v17, v7);
      uint64_t v7 = v6 + 2;
    }
    while (!v8);
  }
  if (v6 < v4)
  {
    do
      v4 -= 2;
    while (((*a3)(&v17, v4) & 1) != 0);
  }
  while (v6 < v4)
  {
    uint64_t v9 = *v6;
    void *v6 = *v4;
    *unint64_t v4 = v9;
    uint64_t v10 = v6[1];
    v6[1] = v4[1];
    v4[1] = v10;
    do
      v6 += 2;
    while (!(*a3)(&v17, v6));
    do
      v4 -= 2;
    while (((*a3)(&v17, v4) & 1) != 0);
  }
  uint64_t v11 = (long long *)(v6 - 2);
  if (v6 - 2 != (void *)a1)
  {
    long long v12 = *v11;
    *(void *)uint64_t v11 = 0;
    *(v6 - QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = 0;
    long long v13 = (std::__shared_weak_count *)*((void *)a1 + 1);
    *a1 = v12;
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
  }
  long long v14 = v17;
  long long v17 = 0uLL;
  long long v15 = (std::__shared_weak_count *)*(v6 - 1);
  *((_OWORD *)v6 - QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = v14;
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (*((void *)&v17 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v17 + 1));
  }
  return v6;
}

void sub_224DBBF20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

long long *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<QP::Lexeme> *,BOOL (*&)(std::shared_ptr<QP::Lexeme>&,std::shared_ptr<QP::Lexeme>&)>(long long *a1, long long *a2, uint64_t (**a3)(long long *, long long *))
{
  uint64_t v6 = 0;
  long long v19 = *a1;
  *(void *)a1 = 0;
  *((void *)a1 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = 0;
  do
    char v7 = (*a3)(&a1[++v6], &v19);
  while ((v7 & 1) != 0);
  unint64_t v8 = (unint64_t)&a1[v6];
  if (v6 == 1)
  {
    do
    {
      if (v8 >= (unint64_t)a2) {
        break;
      }
      --a2;
    }
    while (((*a3)(a2, &v19) & 1) == 0);
  }
  else
  {
    do
      --a2;
    while (!(*a3)(a2, &v19));
  }
  uint64_t v9 = &a1[v6];
  if (v8 < (unint64_t)a2)
  {
    uint64_t v10 = a2;
    do
    {
      uint64_t v11 = *(void *)v9;
      *(void *)uint64_t v9 = *(void *)v10;
      *(void *)uint64_t v10 = v11;
      uint64_t v12 = *((void *)v9 + 1);
      *((void *)v9 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = *((void *)v10 + 1);
      *((void *)v10 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = v12;
      do
        ++v9;
      while (((*a3)(v9, &v19) & 1) != 0);
      do
        --v10;
      while (!(*a3)(v10, &v19));
    }
    while (v9 < v10);
  }
  long long v13 = v9 - 1;
  if (v9 - 1 != a1)
  {
    long long v14 = *v13;
    *(void *)long long v13 = 0;
    *((void *)v9 - QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = 0;
    long long v15 = (std::__shared_weak_count *)*((void *)a1 + 1);
    *a1 = v14;
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
  }
  long long v16 = v19;
  long long v19 = 0uLL;
  long long v17 = (std::__shared_weak_count *)*((void *)v9 - 1);
  *(v9 - QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = v16;
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (*((void *)&v19 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v19 + 1));
  }
  return v9 - 1;
}

void sub_224DBC0BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Lexeme> &,std::shared_ptr<QP::Lexeme> &),std::shared_ptr<QP::Lexeme>*>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t v6 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if ((*a3)(a2 - 2, a1))
      {
        uint64_t v8 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v8;
        uint64_t v9 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(a1, a1 + 2, a2 - 2, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(a1, a1 + 2, a1 + 4, a2 - 2, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2, a3);
      return 1;
    default:
      uint64_t v10 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>(a1, a1 + 2, a1 + 4, a3);
      uint64_t v11 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v11, v10))
    {
      long long v22 = *(_OWORD *)v11;
      uint64_t *v11 = 0;
      v11[1] = 0;
      uint64_t v14 = v12;
      while (1)
      {
        long long v15 = (char *)a1 + v14;
        long long v16 = *(_OWORD *)((char *)a1 + v14 + 32);
        *((void *)v15 + 4) = 0;
        *((void *)v15 + 5) = 0;
        long long v17 = *(std::__shared_weak_count **)((char *)a1 + v14 + 56);
        *((_OWORD *)v15 + 3) = v16;
        if (v17) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v17);
        }
        if (v14 == -32) {
          break;
        }
        char v18 = (*a3)((uint64_t *)&v22, (uint64_t *)((char *)a1 + v14 + 16));
        v14 -= 16;
        if ((v18 & 1) == 0)
        {
          uint64_t v19 = (uint64_t)a1 + v14 + 48;
          goto LABEL_14;
        }
      }
      uint64_t v19 = (uint64_t)a1;
LABEL_14:
      long long v20 = v22;
      long long v22 = 0uLL;
      BOOL v21 = *(std::__shared_weak_count **)(v19 + 8);
      *(_OWORD *)uint64_t v19 = v20;
      if (v21) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v21);
      }
      if (*((void *)&v22 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v22 + 1));
      }
      if (++v13 == 8) {
        return v11 + 2 == a2;
      }
    }
    uint64_t v10 = v11;
    v12 += 16;
    v11 += 2;
    if (v11 == a2) {
      return 1;
    }
  }
}

void sub_224DBC2E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

long long *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Lexeme> &,std::shared_ptr<QP::Lexeme> &),std::shared_ptr<QP::Lexeme>*,std::shared_ptr<QP::Lexeme>*>(uint64_t a1, uint64_t a2, long long *a3, unsigned int (**a4)(long long *, uint64_t))
{
  if (a1 != a2)
  {
    uint64_t v6 = a2;
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) >> 4;
    if (a2 - a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = (long long *)(a1 + 16 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Lexeme> &,std::shared_ptr<QP::Lexeme> &),std::shared_ptr<QP::Lexeme>*>(a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = v6;
    if ((long long *)v6 != a3)
    {
      uint64_t v14 = (long long *)v6;
      do
      {
        if ((*a4)(v14, a1))
        {
          uint64_t v15 = *(void *)v14;
          *(void *)uint64_t v14 = *(void *)a1;
          *(void *)a1 = v15;
          uint64_t v16 = *((void *)v14 + 1);
          *((void *)v14 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = *(void *)(a1 + 8);
          *(void *)(a1 + 8) = v16;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Lexeme> &,std::shared_ptr<QP::Lexeme> &),std::shared_ptr<QP::Lexeme>*>(a1, a4, v9, (long long *)a1);
        }
        ++v14;
      }
      while (v14 != a3);
      uint64_t v13 = (uint64_t)a3;
    }
    if (v8 >= 17)
    {
      unint64_t v17 = (unint64_t)v8 >> 4;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*)(std::shared_ptr<QP::Lexeme> &,std::shared_ptr<QP::Lexeme> &),std::shared_ptr<QP::Lexeme>*>((uint64_t *)a1, v6, (unsigned int (**)(uint64_t, uint64_t))a4, v17);
        v6 -= 16;
      }
      while (v17-- > 2);
    }
    return (long long *)v13;
  }
  return a3;
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Lexeme> &,std::shared_ptr<QP::Lexeme> &),std::shared_ptr<QP::Lexeme>*>(uint64_t a1, unsigned int (**a2)(long long *, uint64_t), uint64_t a3, long long *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    char v5 = a4;
    uint64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - a1) >> 4)
    {
      uint64_t v10 = ((uint64_t)a4 - a1) >> 3;
      uint64_t v11 = v10 + 1;
      uint64_t v12 = (long long *)(a1 + 16 * (v10 + 1));
      uint64_t v13 = v10 + 2;
      if (v10 + 2 < a3 && (*a2)(v12, (uint64_t)(v12 + 1)))
      {
        ++v12;
        uint64_t v11 = v13;
      }
      if ((((uint64_t (*)(long long *, long long *))*a2)(v12, v5) & 1) == 0)
      {
        long long v20 = *v5;
        *(void *)char v5 = 0;
        *((void *)v5 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = 0;
        do
        {
          uint64_t v14 = v12;
          long long v15 = *v12;
          *(void *)uint64_t v12 = 0;
          *((void *)v12 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = 0;
          uint64_t v16 = (std::__shared_weak_count *)*((void *)v5 + 1);
          long long *v5 = v15;
          if (v16) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v16);
          }
          if (v7 < v11) {
            break;
          }
          uint64_t v17 = (2 * v11) | 1;
          uint64_t v12 = (long long *)(a1 + 16 * v17);
          uint64_t v11 = 2 * v11 + 2;
          if (v11 >= a3)
          {
            uint64_t v11 = v17;
          }
          else if ((*a2)((long long *)(a1 + 16 * v17), (uint64_t)(v12 + 1)))
          {
            ++v12;
          }
          else
          {
            uint64_t v11 = v17;
          }
          char v5 = v14;
        }
        while (!(*a2)(v12, (uint64_t)&v20));
        long long v18 = v20;
        long long v20 = 0uLL;
        uint64_t v19 = (std::__shared_weak_count *)*((void *)v14 + 1);
        *uint64_t v14 = v18;
        if (v19) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v19);
        }
        if (*((void *)&v20 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
        }
      }
    }
  }
}

void sub_224DBC5B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*)(std::shared_ptr<QP::Lexeme> &,std::shared_ptr<QP::Lexeme> &),std::shared_ptr<QP::Lexeme>*>(uint64_t *a1, uint64_t a2, unsigned int (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v8 = *a1;
    uint64_t v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v9 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::GraphStructureStack::Node> &,std::shared_ptr<QP::GraphStructureStack::Node> &),std::shared_ptr<QP::GraphStructureStack::Node>*>((uint64_t)a1, a3, a4);
    uint64_t v10 = (void *)v9;
    if (v9 == a2 - 16)
    {
      long long v15 = *(std::__shared_weak_count **)(v9 + 8);
      *uint64_t v10 = v8;
      v10[1] = v7;
      if (v15)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
    }
    else
    {
      long long v11 = *(_OWORD *)(a2 - 16);
      *(void *)(a2 - 16) = 0;
      *(void *)(a2 - 8) = 0;
      uint64_t v12 = *(std::__shared_weak_count **)(v9 + 8);
      *(_OWORD *)uint64_t v10 = v11;
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
      uint64_t v13 = (uint64_t)(v10 + 2);
      uint64_t v14 = *(std::__shared_weak_count **)(a2 - 8);
      *(void *)(a2 - 16) = v8;
      *(void *)(a2 - 8) = v7;
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Lexeme> &,std::shared_ptr<QP::Lexeme> &),std::shared_ptr<QP::Lexeme>*>((uint64_t)a1, v13, (uint64_t (**)(long long *, long long *))a3, (v13 - (uint64_t)a1) >> 4);
    }
  }
}

void sub_224DBC6C0(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<QP::Lexeme> &,std::shared_ptr<QP::Lexeme> &),std::shared_ptr<QP::Lexeme>*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(long long *, long long *), uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v7 = v4 >> 1;
    uint64_t v8 = (long long *)(a1 + 16 * (v4 >> 1));
    uint64_t v9 = (long long *)(a2 - 16);
    if ((*a3)(v8, (long long *)(a2 - 16)))
    {
      long long v15 = *v9;
      *(void *)uint64_t v9 = 0;
      *((void *)v9 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = 0;
      do
      {
        uint64_t v10 = v8;
        long long v11 = *v8;
        *(void *)uint64_t v8 = 0;
        *((void *)v8 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = 0;
        uint64_t v12 = (std::__shared_weak_count *)*((void *)v9 + 1);
        *uint64_t v9 = v11;
        if (v12) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        }
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = (long long *)(a1 + 16 * v7);
        uint64_t v9 = v10;
      }
      while (((*a3)(v8, &v15) & 1) != 0);
      long long v13 = v15;
      long long v15 = 0uLL;
      uint64_t v14 = (std::__shared_weak_count *)*((void *)v10 + 1);
      *uint64_t v10 = v13;
      if (v14)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
        if (*((void *)&v15 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v15 + 1));
        }
      }
    }
  }
}

void sub_224DBC7B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<BOOL>::vector(void *a1, unint64_t a2, unsigned __int8 *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, a2);
    int v6 = *a3;
    unint64_t v7 = a1[1];
    unint64_t v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      unint64_t v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        uint64_t v13 = *a1 + 8 * (v7 >> 6);
        int v14 = v7 & 0x3F;
        if (v6) {
          std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v13, a2);
        }
        else {
          std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v13, a2);
        }
        return a1;
      }
    }
    else
    {
      unint64_t v9 = v8 - 1;
    }
    unint64_t v10 = v9 >> 6;
    if (v8 >= 0x41) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = 0;
    }
    *(void *)(*a1 + 8 * v1QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = 0;
    goto LABEL_10;
  }
  return a1;
}

void *std::vector<BOOL>::__vallocate[abi:ne180100](void *a1, uint64_t a2)
{
  if (a2 < 0) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  BOOL result = std::__allocate_at_least[abi:ne180100]<std::allocator<long>>((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void *std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(void *result, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v3 = result;
  int v4 = *((_DWORD *)result + 2);
  char v5 = (void *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    unint64_t v2 = a2 - v6;
    *BOOL result = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    BOOL result = memset(v5, 255, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    unint64_t v8 = &v5[v7];
    *uint64_t v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  int v4 = *(_DWORD *)(a1 + 8);
  char v5 = *(void **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    unint64_t v2 = a2 - v6;
    *(void *)a1 = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    bzero(v5, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    unint64_t v8 = &v5[v7];
    *(void *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

uint64_t ___ZN2QPL13containsRangeEPK10__CFString7CFRangePK16__CFCharacterSetNSt3__16vectorINS7_10shared_ptrINS_6LexemeEEENS7_9allocatorISB_EEEEPb_block_invoke(uint64_t result, uint64_t a2, unsigned char *a3)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  *a3 = 1;
  return result;
}

void *std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    BOOL result = std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      BOOL result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_224DBCAC0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::shared_ptr<QP::Lexeme>>::__init_with_size[abi:ne180100]<std::shared_ptr<QP::Lexeme>*,std::shared_ptr<QP::Lexeme>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__vallocate[abi:ne180100](result, a4);
    BOOL result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<QP::Lexeme>>,std::shared_ptr<QP::Lexeme>*,std::shared_ptr<QP::Lexeme>*,std::shared_ptr<QP::Lexeme>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_224DBCB44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*,false>(unint64_t a1, void *a2, uint64_t (**a3)(void **, void **), uint64_t a4, char a5)
{
void sub_224DBCF48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a22) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*>(void *a1, void *a2, uint64_t (**a3)(void **, void **))
{
  if (a1 == a2) {
    return;
  }
  uint64_t v3 = a2;
  int v4 = a1 + 3;
  if (a1 + 3 == a2) {
    return;
  }
  uint64_t v5 = 0;
  char v6 = a1;
  do
  {
    uint64_t v7 = v4;
    size_t v8 = *a3;
    CFRange v32 = 0;
    uint64_t v33 = 0;
    uint64_t v31 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v31, (const void *)v6[3], v6[4], (uint64_t)(v6[4] - v6[3]) >> 4);
    std::string __p = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&__p, (const void *)*v6, v6[1], (uint64_t)(v6[1] - *v6) >> 4);
    int v9 = v8(&v31, &__p);
    if (__p)
    {
      uint64_t v29 = __p;
      operator delete(__p);
    }
    if (v31)
    {
      CFRange v32 = v31;
      operator delete(v31);
    }
    if (!v9) {
      goto LABEL_24;
    }
    uint64_t v10 = (const void *)v6[3];
    long long v19 = *((_OWORD *)v6 + 2);
    *uint64_t v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    std::vector<CFRange>::__move_assign((uint64_t)v7, (__n128 *)v6);
    unint64_t v11 = a1;
    if (v6 == a1) {
      goto LABEL_21;
    }
    uint64_t v12 = v5;
    while (1)
    {
      uint64_t v13 = *a3;
      BOOL v26 = 0;
      uint64_t v27 = 0;
      char v25 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v25, v10, v19, (uint64_t)(v19 - (void)v10) >> 4);
      uint64_t v14 = *(const void **)((char *)a1 + v12 - 24);
      uint64_t v15 = *(void *)((char *)a1 + v12 - 16);
      long long v22 = 0;
      char v23 = 0;
      uint64_t v24 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v22, v14, v15, (v15 - (uint64_t)v14) >> 4);
      int v16 = v13(&v25, &v22);
      if (v22)
      {
        char v23 = v22;
        operator delete(v22);
      }
      if (v25)
      {
        BOOL v26 = v25;
        operator delete(v25);
        if ((v16 & 1) == 0)
        {
          unint64_t v11 = v6;
          goto LABEL_20;
        }
        goto LABEL_17;
      }
      if (!v16) {
        break;
      }
LABEL_17:
      v6 -= 3;
      std::vector<CFRange>::__move_assign((uint64_t)a1 + v12, (__n128 *)((char *)a1 + v12 - 24));
      v12 -= 24;
      if (!v12)
      {
        unint64_t v11 = a1;
        goto LABEL_20;
      }
    }
    unint64_t v11 = (void *)((char *)a1 + v12);
LABEL_20:
    uint64_t v3 = a2;
LABEL_21:
    uint64_t v17 = (void *)*v11;
    if (*v11)
    {
      v11[1] = v17;
      operator delete(v17);
      void *v11 = 0;
      v11[1] = 0;
      uint64_t v11[2] = 0;
    }
    void *v11 = v10;
    *(_OWORD *)(v11 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = v19;
LABEL_24:
    int v4 = v7 + 3;
    v5 += 24;
    char v6 = v7;
  }
  while (v7 + 3 != v3);
}

void sub_224DBD1E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  uint64_t v24 = *(void **)(v22 - 104);
  if (v24)
  {
    *(void *)(v22 - 96) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(void **, void **))
{
  if (a1 != a2)
  {
    uint64_t v4 = a1;
    uint64_t v5 = a1 + 24;
    if (a1 + 24 != a2)
    {
      do
      {
        uint64_t v7 = v5;
        size_t v8 = *a3;
        uint64_t v30 = 0;
        uint64_t v31 = 0;
        uint64_t v29 = 0;
        std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v29, *(const void **)(v4 + 24), *(void *)(v4 + 32), (uint64_t)(*(void *)(v4 + 32) - *(void *)(v4 + 24)) >> 4);
        std::string __p = 0;
        uint64_t v27 = 0;
        uint64_t v28 = 0;
        std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&__p, *(const void **)v4, *(void *)(v4 + 8), (uint64_t)(*(void *)(v4 + 8) - *(void *)v4) >> 4);
        int v9 = v8(&v29, &__p);
        if (__p)
        {
          uint64_t v27 = __p;
          operator delete(__p);
        }
        if (v29)
        {
          uint64_t v30 = v29;
          operator delete(v29);
        }
        if (v9)
        {
          uint64_t v10 = *(const void **)v7;
          long long v11 = *(_OWORD *)(v4 + 32);
          *(void *)(v7 + 8) = 0;
          *(void *)(v7 + 16) = 0;
          *(void *)uint64_t v7 = 0;
          long long v19 = v11;
          uint64_t v12 = v11;
          unint64_t v13 = (uint64_t)(v11 - (void)v10) >> 4;
          uint64_t v14 = v7;
          do
          {
            uint64_t v15 = v14 - 24;
            std::vector<CFRange>::__move_assign(v14, (__n128 *)(v14 - 24));
            int v16 = *a3;
            uint64_t v24 = 0;
            uint64_t v25 = 0;
            char v23 = 0;
            std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v23, v10, v12, v13);
            long long v20 = 0;
            uint64_t v21 = 0;
            uint64_t v22 = 0;
            std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v20, *(const void **)(v14 - 48), *(void *)(v14 - 40), (uint64_t)(*(void *)(v14 - 40) - *(void *)(v14 - 48)) >> 4);
            char v17 = v16(&v23, &v20);
            if (v20)
            {
              uint64_t v21 = v20;
              operator delete(v20);
            }
            if (v23)
            {
              uint64_t v24 = v23;
              operator delete(v23);
            }
            v14 -= 24;
          }
          while ((v17 & 1) != 0);
          uint64_t v18 = *(void **)v15;
          if (*(void *)v15)
          {
            *(void *)(v15 + 8) = v18;
            operator delete(v18);
            *(void *)uint64_t v15 = 0;
            *(void *)(v15 + 8) = 0;
            *(void *)(v15 + 16) = 0;
          }
          *(void *)uint64_t v15 = v10;
          *(_OWORD *)(v15 + 8) = v19;
        }
        uint64_t v5 = v7 + 24;
        uint64_t v4 = v7;
      }
      while (v7 + 24 != a2);
    }
  }
}

void sub_224DBD408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void **, void **))
{
  size_t v8 = *a4;
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  unint64_t v60 = 0;
  std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v60, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  unint64_t v57 = 0;
  CFArrayRef v58 = 0;
  uint64_t v59 = 0;
  std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v57, *(const void **)a1, *(void *)(a1 + 8), (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4);
  char v9 = v8(&v60, &v57);
  if (v57)
  {
    CFArrayRef v58 = v57;
    operator delete(v57);
  }
  if (v60)
  {
    uint64_t v61 = v60;
    operator delete(v60);
  }
  uint64_t v10 = *a4;
  if (v9)
  {
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v42, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 4);
    std::string __p = 0;
    unint64_t v40 = 0;
    uint64_t v41 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&__p, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
    int v11 = v10(&v42, &__p);
    if (__p)
    {
      unint64_t v40 = __p;
      operator delete(__p);
    }
    if (v42)
    {
      uint64_t v43 = v42;
      operator delete(v42);
    }
    unint64_t v13 = (uint64_t *)(a1 + 16);
    uint64_t v12 = *(const void **)a1;
    if (v11)
    {
      *(void *)a1 = *(void *)a3;
      *(void *)a3 = v12;
      uint64_t v14 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = *(void *)(a3 + 8);
      *(void *)(a3 + 8) = v14;
      uint64_t v15 = (uint64_t *)(a3 + 16);
      uint64_t result = 1;
LABEL_30:
      uint64_t v32 = *v13;
      uint64_t *v13 = *v15;
      uint64_t *v15 = v32;
      return result;
    }
    *(void *)a1 = *(void *)a2;
    *(void *)a2 = v12;
    uint64_t v25 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    unint64_t v13 = (uint64_t *)(a2 + 16);
    uint64_t v26 = *(void *)(a2 + 16);
    *(void *)(a2 + 8) = v25;
    uint64_t v27 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26;
    *(void *)(a2 + 16) = v27;
    uint64_t v28 = *a4;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    uint64_t v36 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v36, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 4);
    uint64_t v33 = 0;
    unint64_t v34 = 0;
    uint64_t v35 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v33, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
    int v29 = v28(&v36, &v33);
    if (v33)
    {
      unint64_t v34 = v33;
      operator delete(v33);
    }
    if (v36)
    {
      uint64_t v37 = v36;
      operator delete(v36);
    }
    if (v29)
    {
      uint64_t v30 = *(const void **)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v30;
      uint64_t v31 = *(void *)(a2 + 8);
      *(void *)(a2 + 8) = *(void *)(a3 + 8);
      *(void *)(a3 + 8) = v31;
      uint64_t v15 = (uint64_t *)(a3 + 16);
      goto LABEL_29;
    }
  }
  else
  {
    CFStringRef v54 = 0;
    CFRange v55 = 0;
    uint64_t v56 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v54, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 4);
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v51, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
    char v17 = v10(&v54, &v51);
    if (v51)
    {
      uint64_t v52 = v51;
      operator delete(v51);
    }
    if (v54)
    {
      CFRange v55 = v54;
      operator delete(v54);
    }
    if ((v17 & 1) == 0) {
      return 0;
    }
    uint64_t v18 = *(const void **)a2;
    *(void *)a2 = *(void *)a3;
    *(void *)a3 = v18;
    uint64_t v19 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = *(void *)(a3 + 8);
    *(void *)(a3 + 8) = v19;
    uint64_t v15 = (uint64_t *)(a2 + 16);
    uint64_t v20 = *(void *)(a2 + 16);
    *(void *)(a2 + 16) = *(void *)(a3 + 16);
    *(void *)(a3 + 16) = v20;
    uint64_t v21 = *a4;
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    unint64_t v48 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v48, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
    uint64_t v45 = 0;
    unint64_t v46 = 0;
    uint64_t v47 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v45, *(const void **)a1, *(void *)(a1 + 8), (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4);
    int v22 = v21(&v48, &v45);
    if (v45)
    {
      unint64_t v46 = v45;
      operator delete(v45);
    }
    if (v48)
    {
      uint64_t v49 = v48;
      operator delete(v48);
    }
    if (v22)
    {
      char v23 = *(const void **)a1;
      *(void *)a1 = *(void *)a2;
      *(void *)a2 = v23;
      uint64_t v24 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)(a2 + 8) = v24;
      unint64_t v13 = (uint64_t *)(a1 + 16);
LABEL_29:
      uint64_t result = 2;
      goto LABEL_30;
    }
  }
  return 1;
}

void sub_224DBD7FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<CFRange> *,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>)>(uint64_t a1, void *a2, uint64_t (**a3)(void **, void **))
{
  char v6 = *(const void **)a1;
  long long v7 = *(_OWORD *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  size_t v8 = *a3;
  std::string v64 = 0;
  uint64_t v65 = 0;
  uint64_t v63 = 0;
  long long v29 = v7;
  uint64_t v9 = v7;
  unint64_t v10 = (uint64_t)(v7 - (void)v6) >> 4;
  std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v63, v6, v7, v10);
  unint64_t v60 = 0;
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v60, (const void *)*(a2 - 3), *(a2 - 2), (uint64_t)(*(a2 - 2) - *(a2 - 3)) >> 4);
  char v11 = v8(&v63, &v60);
  if (v60)
  {
    uint64_t v61 = v60;
    operator delete(v60);
  }
  if (v63)
  {
    std::string v64 = v63;
    operator delete(v63);
  }
  if (v11)
  {
    unint64_t i = a1;
    do
    {
      unint64_t v13 = *a3;
      CFArrayRef v58 = 0;
      uint64_t v59 = 0;
      unint64_t v57 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v57, v6, v9, v10);
      CFStringRef v54 = 0;
      CFRange v55 = 0;
      uint64_t v56 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v54, *(const void **)(i + 24), *(void *)(i + 32), (uint64_t)(*(void *)(i + 32) - *(void *)(i + 24)) >> 4);
      char v14 = v13(&v57, &v54);
      if (v54)
      {
        CFRange v55 = v54;
        operator delete(v54);
      }
      if (v57)
      {
        CFArrayRef v58 = v57;
        operator delete(v57);
      }
      i += 24;
    }
    while ((v14 & 1) == 0);
  }
  else
  {
    for (unint64_t i = a1 + 24; i < (unint64_t)a2; i += 24)
    {
      uint64_t v27 = *a3;
      uint64_t v52 = 0;
      uint64_t v53 = 0;
      uint64_t v51 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v51, v6, v9, v10);
      unint64_t v48 = 0;
      uint64_t v49 = 0;
      uint64_t v50 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v48, *(const void **)i, *(void *)(i + 8), (uint64_t)(*(void *)(i + 8) - *(void *)i) >> 4);
      char v28 = v27(&v51, &v48);
      if (v48)
      {
        uint64_t v49 = v48;
        operator delete(v48);
      }
      if (v51)
      {
        uint64_t v52 = v51;
        operator delete(v51);
      }
      if (v28) {
        break;
      }
    }
  }
  if (i < (unint64_t)a2)
  {
    do
    {
      uint64_t v15 = *a3;
      unint64_t v46 = 0;
      uint64_t v47 = 0;
      uint64_t v45 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v45, v6, v9, v10);
      std::string __p = 0;
      uint64_t v43 = 0;
      uint64_t v44 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&__p, (const void *)*(a2 - 3), *(a2 - 2), (uint64_t)(*(a2 - 2) - *(a2 - 3)) >> 4);
      char v16 = v15(&v45, &__p);
      if (__p)
      {
        uint64_t v43 = __p;
        operator delete(__p);
      }
      if (v45)
      {
        unint64_t v46 = v45;
        operator delete(v45);
      }
      a2 -= 3;
    }
    while ((v16 & 1) != 0);
  }
  while (i < (unint64_t)a2)
  {
    char v17 = *(const void **)i;
    *(void *)unint64_t i = *a2;
    *a2 = v17;
    uint64_t v18 = *(void *)(i + 8);
    *(void *)(i + 8) = a2[1];
    a2[1] = v18;
    uint64_t v19 = *(void *)(i + 16);
    *(void *)(i + 16) = a2[2];
    a2[2] = v19;
    do
    {
      uint64_t v20 = *a3;
      unint64_t v40 = 0;
      uint64_t v41 = 0;
      uint64_t v39 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v39, v6, v9, v10);
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v38 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v36, *(const void **)(i + 24), *(void *)(i + 32), (uint64_t)(*(void *)(i + 32) - *(void *)(i + 24)) >> 4);
      int v21 = v20(&v39, &v36);
      if (v36)
      {
        uint64_t v37 = v36;
        operator delete(v36);
      }
      if (v39)
      {
        unint64_t v40 = v39;
        operator delete(v39);
      }
      i += 24;
    }
    while (!v21);
    do
    {
      int v22 = *a3;
      unint64_t v34 = 0;
      uint64_t v35 = 0;
      uint64_t v33 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v33, v6, v9, v10);
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v30, (const void *)*(a2 - 3), *(a2 - 2), (uint64_t)(*(a2 - 2) - *(a2 - 3)) >> 4);
      char v23 = v22(&v33, &v30);
      if (v30)
      {
        uint64_t v31 = v30;
        operator delete(v30);
      }
      if (v33)
      {
        unint64_t v34 = v33;
        operator delete(v33);
      }
      a2 -= 3;
    }
    while ((v23 & 1) != 0);
  }
  uint64_t v24 = (void **)(i - 24);
  if (i - 24 != a1) {
    std::vector<CFRange>::__move_assign(a1, (__n128 *)(i - 24));
  }
  uint64_t v25 = *v24;
  if (*v24)
  {
    *(void *)(i - 16) = v25;
    operator delete(v25);
    *uint64_t v24 = 0;
    *(void *)(i - 16) = 0;
    *(void *)(i - 8) = 0;
  }
  *(void *)(i - 24) = v6;
  *(_OWORD *)(i - 16) = v29;
  return i;
}

void sub_224DBDCA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v36 = *(void **)(v34 - 128);
  if (v36)
  {
    *(void *)(v34 - 12nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = v36;
    operator delete(v36);
  }
  uint64_t v37 = *(void **)(v34 - 104);
  if (v37)
  {
    *(void *)(v34 - 96) = v37;
    operator delete(v37);
  }
  if (v33) {
    operator delete(v33);
  }
  _Unwind_Resume(exception_object);
}

void *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<CFRange> *,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>)>(uint64_t a1, void *a2, uint64_t (**a3)(void **, void **))
{
  uint64_t v6 = 0;
  long long v7 = *(const void **)a1;
  long long v8 = *(_OWORD *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  long long v39 = v8;
  uint64_t v9 = v8;
  unint64_t v10 = (uint64_t)(v8 - (void)v7) >> 4;
  do
  {
    char v11 = *a3;
    uint64_t v68 = 0;
    uint64_t v69 = 0;
    std::string v67 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v67, *(const void **)(a1 + v6 + 24), *(void *)(a1 + v6 + 32), (uint64_t)(*(void *)(a1 + v6 + 32) - *(void *)(a1 + v6 + 24)) >> 4);
    std::string v64 = 0;
    uint64_t v65 = 0;
    uint64_t v66 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v64, v7, v9, v10);
    char v12 = v11(&v67, &v64);
    if (v64)
    {
      uint64_t v65 = v64;
      operator delete(v64);
    }
    if (v67)
    {
      uint64_t v68 = v67;
      operator delete(v67);
    }
    v6 += 24;
  }
  while ((v12 & 1) != 0);
  unint64_t v13 = a1 + v6;
  if (v6 == 24)
  {
    if (v13 < (unint64_t)a2)
    {
      do
      {
        uint64_t v18 = *a3;
        uint64_t v62 = 0;
        uint64_t v63 = 0;
        uint64_t v61 = 0;
        uint64_t v19 = (const void *)*(a2 - 3);
        uint64_t v20 = *(a2 - 2);
        a2 -= 3;
        std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v61, v19, v20, (v20 - (uint64_t)v19) >> 4);
        CFArrayRef v58 = 0;
        uint64_t v59 = 0;
        uint64_t v60 = 0;
        std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v58, v7, v9, v10);
        char v21 = v18(&v61, &v58);
        if (v58)
        {
          uint64_t v59 = v58;
          operator delete(v58);
        }
        if (v61)
        {
          uint64_t v62 = v61;
          operator delete(v61);
        }
        if (v13 >= (unint64_t)a2) {
          char v22 = 1;
        }
        else {
          char v22 = v21;
        }
      }
      while ((v22 & 1) == 0);
    }
  }
  else
  {
    do
    {
      char v14 = (const void *)*(a2 - 3);
      uint64_t v15 = *(a2 - 2);
      a2 -= 3;
      char v16 = *a3;
      uint64_t v56 = 0;
      uint64_t v57 = 0;
      CFRange v55 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v55, v14, v15, (v15 - (uint64_t)v14) >> 4);
      std::string __p = 0;
      uint64_t v53 = 0;
      uint64_t v54 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&__p, v7, v9, v10);
      char v17 = v16(&v55, &__p);
      if (__p)
      {
        uint64_t v53 = __p;
        operator delete(__p);
      }
      if (v55)
      {
        uint64_t v56 = v55;
        operator delete(v55);
      }
    }
    while ((v17 & 1) == 0);
  }
  char v23 = (void *)(a1 + v6);
  if (v13 < (unint64_t)a2)
  {
    uint64_t v24 = a2;
    do
    {
      uint64_t v25 = *v23;
      *char v23 = *v24;
      *uint64_t v24 = v25;
      uint64_t v26 = v23[1];
      v23[1] = v24[1];
      v24[1] = v26;
      uint64_t v27 = v23[2];
      v23[2] = v24[2];
      v24[2] = v27;
      do
      {
        uint64_t v50 = 0;
        uint64_t v51 = 0;
        uint64_t v49 = 0;
        char v28 = (const void *)v23[3];
        uint64_t v29 = v23[4];
        v23 += 3;
        uint64_t v30 = *a3;
        std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v49, v28, v29, (v29 - (uint64_t)v28) >> 4);
        unint64_t v46 = 0;
        uint64_t v47 = 0;
        uint64_t v48 = 0;
        std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v46, v7, v9, v10);
        char v31 = v30(&v49, &v46);
        if (v46)
        {
          uint64_t v47 = v46;
          operator delete(v46);
        }
        if (v49)
        {
          uint64_t v50 = v49;
          operator delete(v49);
        }
      }
      while ((v31 & 1) != 0);
      do
      {
        uint64_t v44 = 0;
        uint64_t v45 = 0;
        uint64_t v43 = 0;
        uint64_t v32 = (const void *)*(v24 - 3);
        uint64_t v33 = *(v24 - 2);
        v24 -= 3;
        uint64_t v34 = *a3;
        std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v43, v32, v33, (v33 - (uint64_t)v32) >> 4);
        unint64_t v40 = 0;
        uint64_t v41 = 0;
        uint64_t v42 = 0;
        std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v40, v7, v9, v10);
        int v35 = v34(&v43, &v40);
        if (v40)
        {
          uint64_t v41 = v40;
          operator delete(v40);
        }
        if (v43)
        {
          uint64_t v44 = v43;
          operator delete(v43);
        }
      }
      while (!v35);
    }
    while (v23 < v24);
  }
  uint64_t v36 = (void **)(v23 - 3);
  if (v23 - 3 != (void *)a1) {
    std::vector<CFRange>::__move_assign(a1, (__n128 *)(v23 - 3));
  }
  uint64_t v37 = *v36;
  if (*v36)
  {
    *(v23 - 2) = v37;
    operator delete(v37);
    void *v36 = 0;
    *(v23 - 2) = 0;
    *(v23 - QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = 0;
  }
  *(v23 - 3) = v7;
  *((_OWORD *)v23 - QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = v39;
  return v23 - 3;
}

void sub_224DBE134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v34 = *(void **)(v32 - 160);
  if (v34)
  {
    *(void *)(v32 - 152) = v34;
    operator delete(v34);
  }
  if (v31) {
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(void **, void **))
{
  uint64_t v3 = a2;
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v6 = *a3;
      uint64_t v45 = 0;
      uint64_t v46 = 0;
      uint64_t v44 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v44, *(const void **)(a2 - 24), *(void *)(a2 - 16), (uint64_t)(*(void *)(a2 - 16) - *(void *)(a2 - 24)) >> 4);
      uint64_t v41 = 0;
      uint64_t v42 = 0;
      uint64_t v43 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v41, *(const void **)a1, *(void *)(a1 + 8), (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4);
      int v7 = v6(&v44, &v41);
      if (v41)
      {
        uint64_t v42 = v41;
        operator delete(v41);
      }
      if (v44)
      {
        uint64_t v45 = v44;
        operator delete(v44);
      }
      if (v7)
      {
        long long v8 = *(const void **)a1;
        *(void *)a1 = *(void *)(v3 - 24);
        *(void *)(v3 - 24) = v8;
        uint64_t v9 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = *(void *)(v3 - 16);
        *(void *)(v3 - 16) = v9;
        uint64_t v10 = *(void *)(a1 + 16);
        *(void *)(a1 + 16) = *(void *)(v3 - 8);
        *(void *)(v3 - 8) = v10;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*>(a1, a1 + 24, a2 - 24, a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*>(a1, a1 + 24, a1 + 48, a2 - 24, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*>(a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24, a3);
      return 1;
    default:
      uint64_t v11 = a1 + 48;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*>(a1, a1 + 24, a1 + 48, a3);
      uint64_t v12 = a1 + 72;
      if (a1 + 72 == v3) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      uint64_t v25 = v3;
      break;
  }
  do
  {
    uint64_t v15 = *a3;
    long long v39 = 0;
    uint64_t v40 = 0;
    uint64_t v38 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v38, *(const void **)v12, *(void *)(v12 + 8), (uint64_t)(*(void *)(v12 + 8) - *(void *)v12) >> 4);
    std::string __p = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&__p, *(const void **)v11, *(void *)(v11 + 8), (uint64_t)(*(void *)(v11 + 8) - *(void *)v11) >> 4);
    int v16 = v15(&v38, &__p);
    if (__p)
    {
      uint64_t v36 = __p;
      operator delete(__p);
    }
    if (v38)
    {
      long long v39 = v38;
      operator delete(v38);
    }
    if (!v16) {
      goto LABEL_31;
    }
    char v17 = *(const void **)v12;
    long long v26 = *(_OWORD *)(v12 + 8);
    *(void *)(v12 + 8) = 0;
    *(void *)(v12 + 16) = 0;
    *(void *)uint64_t v12 = 0;
    std::vector<CFRange>::__move_assign(v12, (__n128 *)v11);
    uint64_t v18 = a1;
    if (v11 == a1) {
      goto LABEL_28;
    }
    uint64_t v19 = v13;
    while (1)
    {
      uint64_t v20 = *a3;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      uint64_t v32 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v32, v17, v26, (uint64_t)(v26 - (void)v17) >> 4);
      char v21 = *(const void **)(a1 + v19 + 24);
      uint64_t v22 = *(void *)(a1 + v19 + 32);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v29, v21, v22, (v22 - (uint64_t)v21) >> 4);
      int v23 = v20(&v32, &v29);
      if (v29)
      {
        uint64_t v30 = v29;
        operator delete(v29);
      }
      if (v32)
      {
        uint64_t v33 = v32;
        operator delete(v32);
        if ((v23 & 1) == 0)
        {
          uint64_t v18 = v11;
          goto LABEL_27;
        }
        goto LABEL_24;
      }
      if (!v23) {
        break;
      }
LABEL_24:
      v11 -= 24;
      std::vector<CFRange>::__move_assign(a1 + v19 + 48, (__n128 *)(a1 + v19 + 24));
      v19 -= 24;
      if (v19 == -48)
      {
        uint64_t v18 = a1;
        goto LABEL_27;
      }
    }
    uint64_t v18 = a1 + v19 + 48;
LABEL_27:
    uint64_t v3 = v25;
LABEL_28:
    uint64_t v24 = *(void **)v18;
    if (*(void *)v18)
    {
      *(void *)(v18 + 8) = v24;
      operator delete(v24);
      *(void *)uint64_t v18 = 0;
      *(void *)(v18 + 8) = 0;
      *(void *)(v18 + 16) = 0;
    }
    *(void *)uint64_t v18 = v17;
    *(_OWORD *)(v18 + 8) = v26;
    if (++v14 == 8) {
      return v12 + 24 == v3;
    }
LABEL_31:
    uint64_t v11 = v12;
    v13 += 24;
    v12 += 24;
  }
  while (v12 != v3);
  return 1;
}

void sub_224DBE5D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  char v28 = *(void **)(v26 - 136);
  if (v28)
  {
    *(void *)(v26 - 128) = v28;
    operator delete(v28);
  }
  uint64_t v29 = *(void **)(v26 - 112);
  if (v29)
  {
    *(void *)(v26 - 104) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(exception_object);
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(void **, void **))
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*>(a1, a2, a3, a5);
  uint64_t v10 = *a5;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v40 = 0;
  std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v40, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 4);
  std::string __p = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&__p, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 4);
  int v11 = v10(&v40, &__p);
  if (__p)
  {
    uint64_t v38 = __p;
    operator delete(__p);
  }
  if (v40)
  {
    uint64_t v41 = v40;
    operator delete(v40);
  }
  if (v11)
  {
    uint64_t v12 = *(const void **)a3;
    *(void *)a3 = *(void *)a4;
    *(void *)a4 = v12;
    uint64_t v13 = *(void *)(a3 + 8);
    *(void *)(a3 + 8) = *(void *)(a4 + 8);
    *(void *)(a4 + 8) = v13;
    uint64_t v14 = *(void *)(a3 + 16);
    *(void *)(a3 + 16) = *(void *)(a4 + 16);
    *(void *)(a4 + 16) = v14;
    uint64_t v15 = *a5;
    int v35 = 0;
    uint64_t v36 = 0;
    uint64_t v34 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v34, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 4);
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v31, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
    int v16 = v15(&v34, &v31);
    if (v31)
    {
      uint64_t v32 = v31;
      operator delete(v31);
    }
    if (v34)
    {
      int v35 = v34;
      operator delete(v34);
    }
    if (v16)
    {
      char v17 = *(const void **)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v17;
      uint64_t v18 = *(void *)(a2 + 8);
      *(void *)(a2 + 8) = *(void *)(a3 + 8);
      *(void *)(a3 + 8) = v18;
      uint64_t v19 = *(void *)(a2 + 16);
      *(void *)(a2 + 16) = *(void *)(a3 + 16);
      *(void *)(a3 + 16) = v19;
      uint64_t v20 = *a5;
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      char v28 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v28, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      uint64_t v27 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v25, *(const void **)a1, *(void *)(a1 + 8), (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4);
      int v21 = v20(&v28, &v25);
      if (v25)
      {
        uint64_t v26 = v25;
        operator delete(v25);
      }
      if (v28)
      {
        uint64_t v29 = v28;
        operator delete(v28);
      }
      if (v21)
      {
        uint64_t v22 = *(const void **)a1;
        *(void *)a1 = *(void *)a2;
        *(void *)a2 = v22;
        uint64_t v23 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(void *)(a2 + 8) = v23;
        uint64_t v24 = *(void *)(a1 + 16);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a2 + 16) = v24;
      }
    }
  }
}

void sub_224DBE8B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (**a6)(void **, void **))
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*>(a1, a2, a3, a4, a6);
  uint64_t v12 = *a6;
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  uint64_t v53 = 0;
  std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v53, *(const void **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 4);
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v50, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 4);
  int v13 = v12(&v53, &v50);
  if (v50)
  {
    uint64_t v51 = v50;
    operator delete(v50);
  }
  if (v53)
  {
    uint64_t v54 = v53;
    operator delete(v53);
  }
  if (v13)
  {
    uint64_t v14 = *(const void **)a4;
    *(void *)a4 = *(void *)a5;
    *(void *)a5 = v14;
    uint64_t v15 = *(void *)(a4 + 8);
    *(void *)(a4 + 8) = *(void *)(a5 + 8);
    *(void *)(a5 + 8) = v15;
    uint64_t v16 = *(void *)(a4 + 16);
    *(void *)(a4 + 16) = *(void *)(a5 + 16);
    *(void *)(a5 + 16) = v16;
    char v17 = *a6;
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    uint64_t v47 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v47, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 4);
    std::string __p = 0;
    uint64_t v45 = 0;
    uint64_t v46 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&__p, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 4);
    int v18 = v17(&v47, &__p);
    if (__p)
    {
      uint64_t v45 = __p;
      operator delete(__p);
    }
    if (v47)
    {
      uint64_t v48 = v47;
      operator delete(v47);
    }
    if (v18)
    {
      uint64_t v19 = *(const void **)a3;
      *(void *)a3 = *(void *)a4;
      *(void *)a4 = v19;
      uint64_t v20 = *(void *)(a3 + 8);
      *(void *)(a3 + 8) = *(void *)(a4 + 8);
      *(void *)(a4 + 8) = v20;
      uint64_t v21 = *(void *)(a3 + 16);
      *(void *)(a3 + 16) = *(void *)(a4 + 16);
      *(void *)(a4 + 16) = v21;
      uint64_t v22 = *a6;
      uint64_t v42 = 0;
      uint64_t v43 = 0;
      uint64_t v41 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v41, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 4);
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v38, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
      int v23 = v22(&v41, &v38);
      if (v38)
      {
        uint64_t v39 = v38;
        operator delete(v38);
      }
      if (v41)
      {
        uint64_t v42 = v41;
        operator delete(v41);
      }
      if (v23)
      {
        uint64_t v24 = *(const void **)a2;
        *(void *)a2 = *(void *)a3;
        *(void *)a3 = v24;
        uint64_t v25 = *(void *)(a2 + 8);
        *(void *)(a2 + 8) = *(void *)(a3 + 8);
        *(void *)(a3 + 8) = v25;
        uint64_t v26 = *(void *)(a2 + 16);
        *(void *)(a2 + 16) = *(void *)(a3 + 16);
        *(void *)(a3 + 16) = v26;
        uint64_t v27 = *a6;
        uint64_t v36 = 0;
        uint64_t v37 = 0;
        int v35 = 0;
        std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v35, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
        uint64_t v32 = 0;
        uint64_t v33 = 0;
        uint64_t v34 = 0;
        std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v32, *(const void **)a1, *(void *)(a1 + 8), (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4);
        int v28 = v27(&v35, &v32);
        if (v32)
        {
          uint64_t v33 = v32;
          operator delete(v32);
        }
        if (v35)
        {
          uint64_t v36 = v35;
          operator delete(v35);
        }
        if (v28)
        {
          uint64_t v29 = *(const void **)a1;
          *(void *)a1 = *(void *)a2;
          *(void *)a2 = v29;
          uint64_t v30 = *(void *)(a1 + 8);
          *(void *)(a1 + 8) = *(void *)(a2 + 8);
          *(void *)(a2 + 8) = v30;
          uint64_t v31 = *(void *)(a1 + 16);
          *(void *)(a1 + 16) = *(void *)(a2 + 16);
          *(void *)(a2 + 16) = v31;
        }
      }
    }
  }
}

void sub_224DBEC24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::vector<CFRange>::__move_assign(uint64_t a1, __n128 *a2)
{
  uint64_t v4 = *(void **)a1;
  if (v4)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  __n128 result = *a2;
  *(__n128 *)a1 = *a2;
  *(void *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*,std::vector<CFRange>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void **, void **))
{
  if (a1 != a2)
  {
    uint64_t v6 = a2;
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) / 24;
    if (a2 - a1 >= 25)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = a1 + 24 * v10;
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*>(a1, a4, v9, v12);
        v12 -= 24;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = v6;
    if (v6 != a3)
    {
      uint64_t v14 = v6;
      do
      {
        uint64_t v15 = *a4;
        uint64_t v27 = 0;
        uint64_t v28 = 0;
        uint64_t v26 = 0;
        std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v26, *(const void **)v14, *(void *)(v14 + 8), (uint64_t)(*(void *)(v14 + 8) - *(void *)v14) >> 4);
        std::string __p = 0;
        uint64_t v24 = 0;
        uint64_t v25 = 0;
        std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&__p, *(const void **)a1, *(void *)(a1 + 8), (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4);
        int v16 = v15(&v26, &__p);
        if (__p)
        {
          uint64_t v24 = __p;
          operator delete(__p);
        }
        if (v26)
        {
          uint64_t v27 = v26;
          operator delete(v26);
        }
        if (v16)
        {
          char v17 = *(const void **)v14;
          *(void *)uint64_t v14 = *(void *)a1;
          *(void *)a1 = v17;
          uint64_t v18 = *(void *)(v14 + 8);
          *(void *)(v14 + 8) = *(void *)(a1 + 8);
          *(void *)(a1 + 8) = v18;
          uint64_t v19 = *(void *)(v14 + 16);
          *(void *)(v14 + 16) = *(void *)(a1 + 16);
          *(void *)(a1 + 16) = v19;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*>(a1, a4, v9, a1);
        }
        v14 += 24;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 25)
    {
      unint64_t v20 = v8 / 0x18uLL;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*>((uint64_t *)a1, v6, a4, v20);
        v6 -= 24;
      }
      while (v20-- > 2);
    }
    return v13;
  }
  return a3;
}

void sub_224DBEEFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*>(uint64_t a1, uint64_t (**a2)(void **, void **), uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 < 2) {
    return result;
  }
  uint64_t v5 = a4;
  uint64_t v34 = v4 >> 1;
  if ((uint64_t)(v4 >> 1) < (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((a4 - a1) >> 3))) {
    return result;
  }
  uint64_t v8 = (0x5555555555555556 * ((a4 - a1) >> 3)) | 1;
  uint64_t v9 = a1 + 24 * v8;
  uint64_t v10 = 0x5555555555555556 * ((a4 - a1) >> 3) + 2;
  if (v10 < a3)
  {
    unint64_t v11 = *a2;
    CFArrayRef v58 = 0;
    uint64_t v59 = 0;
    uint64_t v57 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v57, *(const void **)v9, *(void *)(a1 + 24 * v8 + 8), (uint64_t)(*(void *)(a1 + 24 * v8 + 8) - *(void *)v9) >> 4);
    uint64_t v12 = *(const void **)(v9 + 24);
    uint64_t v13 = *(void *)(v9 + 32);
    uint64_t v54 = 0;
    uint64_t v55 = 0;
    uint64_t v56 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v54, v12, v13, (v13 - (uint64_t)v12) >> 4);
    int v14 = v11(&v57, &v54);
    if (v54)
    {
      uint64_t v55 = v54;
      operator delete(v54);
    }
    if (v57)
    {
      CFArrayRef v58 = v57;
      operator delete(v57);
      if ((v14 & 1) == 0) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
    if (v14)
    {
LABEL_8:
      v9 += 24;
      uint64_t v8 = v10;
    }
  }
LABEL_9:
  uint64_t v15 = *a2;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  uint64_t v51 = 0;
  std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v51, *(const void **)v9, *(void *)(v9 + 8), (uint64_t)(*(void *)(v9 + 8) - *(void *)v9) >> 4);
  std::string __p = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&__p, *(const void **)v5, *(void *)(v5 + 8), (uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 4);
  char v16 = v15(&v51, &__p);
  if (__p)
  {
    uint64_t v49 = __p;
    operator delete(__p);
  }
  if (v51)
  {
    uint64_t v52 = v51;
    operator delete(v51);
  }
  if ((v16 & 1) == 0)
  {
    uint64_t v18 = *(const void **)v5;
    long long v19 = *(_OWORD *)(v5 + 8);
    *(void *)(v5 + 8) = 0;
    *(void *)(v5 + 16) = 0;
    *(void *)uint64_t v5 = 0;
    __n128 v31 = (__n128)v19;
    uint64_t v20 = v19;
    uint64_t v33 = v18;
    unint64_t v32 = (uint64_t)(v19 - (void)v18) >> 4;
    while (1)
    {
      uint64_t v21 = v9;
      std::vector<CFRange>::__move_assign(v5, (__n128 *)v9);
      if (v34 < v8)
      {
LABEL_30:
        uint64_t v30 = *(void **)v21;
        if (*(void *)v21)
        {
          *(void *)(v21 + 8) = v30;
          operator delete(v30);
          *(void *)uint64_t v21 = 0;
          *(void *)(v21 + 8) = 0;
          *(void *)(v21 + 16) = 0;
        }
        *(void *)uint64_t v21 = v33;
        __n128 result = v31;
        *(__n128 *)(v21 + 8) = v31;
        return result;
      }
      uint64_t v22 = (2 * v8) | 1;
      uint64_t v9 = a1 + 24 * v22;
      uint64_t v23 = 2 * v8 + 2;
      if (v23 >= a3)
      {
        uint64_t v8 = (2 * v8) | 1;
      }
      else
      {
        uint64_t v24 = *a2;
        uint64_t v46 = 0;
        uint64_t v47 = 0;
        uint64_t v45 = 0;
        std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v45, *(const void **)v9, *(void *)(a1 + 24 * v22 + 8), (uint64_t)(*(void *)(a1 + 24 * v22 + 8) - *(void *)v9) >> 4);
        uint64_t v25 = *(const void **)(v9 + 24);
        uint64_t v26 = *(void *)(v9 + 32);
        uint64_t v42 = 0;
        uint64_t v43 = 0;
        uint64_t v44 = 0;
        std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v42, v25, v26, (v26 - (uint64_t)v25) >> 4);
        int v27 = v24(&v45, &v42);
        if (v42)
        {
          uint64_t v43 = v42;
          operator delete(v42);
        }
        if (v45)
        {
          uint64_t v46 = v45;
          operator delete(v45);
          uint64_t v8 = (2 * v8) | 1;
          if ((v27 & 1) == 0) {
            goto LABEL_25;
          }
LABEL_24:
          v9 += 24;
          uint64_t v8 = v23;
          goto LABEL_25;
        }
        uint64_t v8 = (2 * v8) | 1;
        if (v27) {
          goto LABEL_24;
        }
      }
LABEL_25:
      uint64_t v28 = *a2;
      uint64_t v40 = 0;
      uint64_t v41 = 0;
      uint64_t v39 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v39, *(const void **)v9, *(void *)(v9 + 8), (uint64_t)(*(void *)(v9 + 8) - *(void *)v9) >> 4);
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v38 = 0;
      std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v36, v33, v20, v32);
      int v29 = v28(&v39, &v36);
      if (v36)
      {
        uint64_t v37 = v36;
        operator delete(v36);
      }
      if (v39)
      {
        uint64_t v40 = v39;
        operator delete(v39);
      }
      uint64_t v5 = v21;
      if (v29) {
        goto LABEL_30;
      }
    }
  }
  return result;
}

void sub_224DBF274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29)
{
  __n128 v31 = *(void **)(v29 - 136);
  if (v31)
  {
    *(void *)(v29 - 128) = v31;
    operator delete(v31);
  }
  __pa = *(void **)(v29 - 112);
  if (__pa)
  {
    *(void *)(v29 - 104) = __pa;
    operator delete(__pa);
  }
  _Unwind_Resume(exception_object);
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*>(uint64_t *a1, uint64_t a2, uint64_t (**a3)(void **, void **), uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v7 = *a1;
    uint64_t v8 = a1[1];
    uint64_t v9 = a1[2];
    a1[1] = 0;
    a1[2] = 0;
    *a1 = 0;
    uint64_t v10 = (void *)std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*>((uint64_t)a1, a3, a4);
    unint64_t v11 = v10;
    uint64_t v12 = (void **)(a2 - 24);
    if (v10 == (void *)(a2 - 24))
    {
      uint64_t v15 = (void *)*v10;
      if (*v11)
      {
        v11[1] = v15;
        operator delete(v15);
        void *v11 = 0;
        v11[1] = 0;
        uint64_t v11[2] = 0;
      }
      void *v11 = v7;
      v11[1] = v8;
      uint64_t v11[2] = v9;
    }
    else
    {
      std::vector<CFRange>::__move_assign((uint64_t)v10, (__n128 *)(a2 - 24));
      uint64_t v13 = (uint64_t)(v11 + 3);
      int v14 = *v12;
      if (*v12)
      {
        *(void *)(a2 - 16) = v14;
        operator delete(v14);
        *uint64_t v12 = 0;
        *(void *)(a2 - 16) = 0;
        *(void *)(a2 - 8) = 0;
      }
      *(void *)(a2 - 24) = v7;
      *(void *)(a2 - 16) = v8;
      *(void *)(a2 - 8) = v9;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*>((uint64_t)a1, v13, a3, 0xAAAAAAAAAAAAAAABLL * ((v13 - (uint64_t)a1) >> 3));
    }
  }
}

void sub_224DBF460(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*>(uint64_t a1, uint64_t (**a2)(void **, void **), uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = a1;
    uint64_t v10 = v6 + 1;
    a1 += 24 * (v6 + 1);
    uint64_t v11 = 2 * v6;
    uint64_t v6 = (2 * v6) | 1;
    uint64_t v12 = v11 + 2;
    if (v11 + 2 >= a3) {
      goto LABEL_10;
    }
    uint64_t v13 = *a2;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    long long v19 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v19, *(const void **)a1, *(void *)(v9 + 24 * v10 + 8), (uint64_t)(*(void *)(v9 + 24 * v10 + 8) - *(void *)a1) >> 4);
    std::string __p = 0;
    char v17 = 0;
    uint64_t v18 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&__p, *(const void **)(a1 + 24), *(void *)(a1 + 32), (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 4);
    int v14 = v13(&v19, &__p);
    if (__p)
    {
      char v17 = __p;
      operator delete(__p);
    }
    if (v19)
    {
      uint64_t v20 = v19;
      operator delete(v19);
      if ((v14 & 1) == 0) {
        goto LABEL_10;
      }
LABEL_9:
      a1 += 24;
      uint64_t v6 = v12;
      goto LABEL_10;
    }
    if (v14) {
      goto LABEL_9;
    }
LABEL_10:
    std::vector<CFRange>::__move_assign(v9, (__n128 *)a1);
  }
  while (v6 <= v8);
  return a1;
}

void sub_224DBF5B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::vector<CFRange>,std::vector<CFRange>),std::vector<CFRange>*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(void **, void **), uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v8 = v4 >> 1;
    uint64_t v9 = a1 + 24 * (v4 >> 1);
    uint64_t v10 = *a3;
    int v35 = 0;
    uint64_t v36 = 0;
    uint64_t v34 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v34, *(const void **)v9, *(void *)(v9 + 8), (uint64_t)(*(void *)(v9 + 8) - *(void *)v9) >> 4);
    uint64_t v11 = *(const void **)(a2 - 24);
    uint64_t v12 = *(void *)(a2 - 16);
    uint64_t v13 = (void *)(a2 - 24);
    std::string __p = 0;
    unint64_t v32 = 0;
    uint64_t v33 = 0;
    std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&__p, v11, v12, (v12 - (uint64_t)v11) >> 4);
    int v14 = v10(&v34, &__p);
    if (__p)
    {
      unint64_t v32 = __p;
      operator delete(__p);
    }
    if (v34)
    {
      int v35 = v34;
      operator delete(v34);
    }
    if (v14)
    {
      char v16 = *(const void **)(a2 - 24);
      long long v17 = *(_OWORD *)(a2 - 16);
      void *v13 = 0;
      *(void *)(a2 - 16) = 0;
      *(void *)(a2 - 8) = 0;
      __n128 v24 = (__n128)v17;
      uint64_t v18 = v17;
      unint64_t v19 = (uint64_t)(v17 - (void)v16) >> 4;
      do
      {
        uint64_t v20 = (void *)v9;
        std::vector<CFRange>::__move_assign((uint64_t)v13, (__n128 *)v9);
        if (!v8) {
          break;
        }
        unint64_t v8 = (v8 - 1) >> 1;
        uint64_t v9 = a1 + 24 * v8;
        uint64_t v21 = *a3;
        uint64_t v29 = 0;
        uint64_t v30 = 0;
        uint64_t v28 = 0;
        std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v28, *(const void **)v9, *(void *)(v9 + 8), (uint64_t)(*(void *)(v9 + 8) - *(void *)v9) >> 4);
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(&v25, v16, v18, v19);
        char v22 = v21(&v28, &v25);
        if (v25)
        {
          uint64_t v26 = v25;
          operator delete(v25);
        }
        if (v28)
        {
          uint64_t v29 = v28;
          operator delete(v28);
        }
        uint64_t v13 = v20;
      }
      while ((v22 & 1) != 0);
      uint64_t v23 = (void *)*v20;
      if (*v20)
      {
        v20[1] = v23;
        operator delete(v23);
        *uint64_t v20 = 0;
        v20[1] = 0;
        v20[2] = 0;
      }
      *uint64_t v20 = v16;
      __n128 result = v24;
      *(__n128 *)(v20 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = v24;
    }
  }
  return result;
}

void sub_224DBF798(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  if (a20) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::vector<CFRange>>::__construct_one_at_end[abi:ne180100]<std::vector<CFRange> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  *uint64_t v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  __n128 result = std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(v3, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  *(void *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_224DBF858(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<CFRange>>::__push_back_slow_path<std::vector<CFRange> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  long long v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  char v16 = &v10[24 * v9];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(v11, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  v15 += 24;
  std::vector<std::vector<CFRange>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<CFRange>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_224DBF964(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<CFRange>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<CFRange>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<CFRange>>,std::reverse_iterator<std::vector<CFRange>*>,std::reverse_iterator<std::vector<CFRange>*>,std::reverse_iterator<std::vector<CFRange>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<CFRange>>,std::reverse_iterator<std::vector<CFRange>*>,std::reverse_iterator<std::vector<CFRange>*>,std::reverse_iterator<std::vector<CFRange>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  uint64_t v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<CFRange>>,std::reverse_iterator<std::vector<CFRange>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<CFRange>>,std::reverse_iterator<std::vector<CFRange>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<CFRange>>,std::reverse_iterator<std::vector<CFRange>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<CFRange>>,std::reverse_iterator<std::vector<CFRange>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t std::__split_buffer<std::vector<CFRange>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<CFRange>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    uint64_t v5 = *(void **)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

char *std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(char *result, char *a2, char *a3, size_t __sz)
{
  if (__sz)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    uint64_t v7 = (unsigned char *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      char v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = v7;
  }
  return result;
}

void sub_224DBFC00(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned char>::__vallocate[abi:ne180100](void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000) != 0) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

QP::LexemeConverter *std::unique_ptr<QP::LexemeConverter>::reset[abi:ne180100](QP::LexemeConverter **a1, QP::LexemeConverter *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    QP::LexemeConverter::~LexemeConverter(result);
    JUMPOUT(0x22A623E20);
  }
  return result;
}

void QP::LexemeConverter::~LexemeConverter(QP::LexemeConverter *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::unique_ptr<QP::Transcriber>::reset[abi:ne180100]((QP::Transcriber **)this + 6, 0);
  uint64_t v3 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3) {
    MEMORY[0x22A623E20](v3, 0x60C4044C4A2DFLL);
  }
  std::unique_ptr<QP::DateConverter>::reset[abi:ne180100]((QP::DateConverter **)this + 4, 0);
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

QP::Transcriber *std::unique_ptr<QP::Transcriber>::reset[abi:ne180100](QP::Transcriber **a1, QP::Transcriber *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    QP::Transcriber::~Transcriber(result);
    JUMPOUT(0x22A623E20);
  }
  return result;
}

QP::DateConverter *std::unique_ptr<QP::DateConverter>::reset[abi:ne180100](QP::DateConverter **a1, QP::DateConverter *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    QP::DateConverter::~DateConverter(result);
    JUMPOUT(0x22A623E20);
  }
  return result;
}

void QP::DateConverter::~DateConverter(QP::DateConverter *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void **std::unique_ptr<QP::Lexeme>::reset[abi:ne180100](void ***a1, void **a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    QP::Lexeme::~Lexeme(result);
    JUMPOUT(0x22A623E20);
  }
  return result;
}

void QP::Lexeme::~Lexeme(void **this)
{
  if (*((char *)this + 119) < 0) {
    operator delete(this[12]);
  }
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void std::__shared_ptr_pointer<QP::Lexeme  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A623E20);
}

void **std::__shared_ptr_pointer<QP::Lexeme  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void ***)(a1 + 24);
  if (result)
  {
    QP::Lexeme::~Lexeme(result);
    JUMPOUT(0x22A623E20);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<QP::Lexeme  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

std::string *std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,std::string &,CFRange &,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = (std::string *)operator new(0x90uLL);
  uint64_t result = std::__shared_ptr_emplace<QP::Lexeme>::__shared_ptr_emplace[abi:ne180100]<std::string &,CFRange &,std::allocator<QP::Lexeme>,0>(v6, a1, a2);
  *a3 = v6 + 1;
  a3[1] = v6;
  return result;
}

void sub_224DBFFD8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<QP::Lexeme>::__shared_ptr_emplace[abi:ne180100]<std::string &,CFRange &,std::allocator<QP::Lexeme>,0>(std::string *a1, uint64_t a2, uint64_t a3)
{
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26D830A40;
  std::construct_at[abi:ne180100]<QP::Lexeme,std::string &,CFRange &,QP::Lexeme*>(a1 + 1, a2, a3);
  return a1;
}

void sub_224DC0034(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<QP::Lexeme>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D830A40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QP::Lexeme>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D830A40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A623E20);
}

void std::__shared_ptr_emplace<QP::Lexeme>::__on_zero_shared(uint64_t a1)
{
}

std::string *std::construct_at[abi:ne180100]<QP::Lexeme,std::string &,CFRange &,QP::Lexeme*>(std::string *this, uint64_t a2, uint64_t a3)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  QP::Lexeme::Lexeme(this, (long long *)&__p, *(void *)a3, *(void *)(a3 + 8));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return this;
}

void sub_224DC0144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,char const(&)[5],CFRange &,void>@<X0>(char *a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = (std::string *)operator new(0x90uLL);
  uint64_t result = std::__shared_ptr_emplace<QP::Lexeme>::__shared_ptr_emplace[abi:ne180100]<char const(&)[5],CFRange &,std::allocator<QP::Lexeme>,0>(v6, a1, a2);
  *a3 = v6 + 1;
  a3[1] = v6;
  return result;
}

void sub_224DC01B0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<QP::Lexeme>::__shared_ptr_emplace[abi:ne180100]<char const(&)[5],CFRange &,std::allocator<QP::Lexeme>,0>(std::string *a1, char *a2, uint64_t a3)
{
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26D830A40;
  std::construct_at[abi:ne180100]<QP::Lexeme,char const(&)[5],CFRange &,QP::Lexeme*>(a1 + 1, a2, a3);
  return a1;
}

void sub_224DC020C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

std::string *std::construct_at[abi:ne180100]<QP::Lexeme,char const(&)[5],CFRange &,QP::Lexeme*>(std::string *a1, char *a2, uint64_t a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  QP::Lexeme::Lexeme(a1, (long long *)__p, *(void *)a3, *(void *)(a3 + 8));
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_224DC0278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::allocate_shared[abi:ne180100]<QP::LexemeQuotedText,std::allocator<QP::LexemeQuotedText>,CFRange &,std::string,void>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = (std::string *)operator new(0xA8uLL);
  uint64_t result = std::__shared_ptr_emplace<QP::LexemeQuotedText>::__shared_ptr_emplace[abi:ne180100]<CFRange &,std::string,std::allocator<QP::LexemeQuotedText>,0>(v6, a1, a2);
  *a3 = v6 + 1;
  a3[1] = v6;
  return result;
}

void sub_224DC02E4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<QP::LexemeQuotedText>::__shared_ptr_emplace[abi:ne180100]<CFRange &,std::string,std::allocator<QP::LexemeQuotedText>,0>(std::string *a1, uint64_t *a2, uint64_t a3)
{
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26D830A90;
  std::construct_at[abi:ne180100]<QP::LexemeQuotedText,CFRange &,std::string,QP::LexemeQuotedText*>(a1 + 1, a2, a3);
  return a1;
}

void sub_224DC0340(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<QP::LexemeQuotedText>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D830A90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QP::LexemeQuotedText>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D830A90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A623E20);
}

void std::__shared_ptr_emplace<QP::LexemeQuotedText>::__on_zero_shared(uint64_t a1)
{
}

std::string *std::construct_at[abi:ne180100]<QP::LexemeQuotedText,CFRange &,std::string,QP::LexemeQuotedText*>(std::string *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  std::string::size_type v5 = a2[1];
  *(_OWORD *)std::string __p = *(_OWORD *)a3;
  uint64_t v8 = *(void *)(a3 + 16);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  QP::LexemeQuotedText::LexemeQuotedText(a1, v4, v5, (long long *)__p);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_224DC043C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *QP::LexemeQuotedText::LexemeQuotedText(std::string *a1, uint64_t a2, std::string::size_type a3, long long *a4)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "QuotedText");
  QP::Lexeme::Lexeme(a1, (long long *)__p, a2, a3);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v8 = a1 + 5;
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v9 = *a4;
    a1[5].__r_.__value_.__r.__words[2] = *((void *)a4 + 2);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  return a1;
}

void sub_224DC04F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  QP::Lexeme::~Lexeme(v15);
  _Unwind_Resume(a1);
}

void std::__destroy_at[abi:ne180100]<QP::LexemeQuotedText,0>(void **this)
{
  if (*((char *)this + 143) < 0) {
    operator delete(this[15]);
  }
  QP::Lexeme::~Lexeme(this);
}

_OWORD *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(uint64_t **a1, void **a2, uint64_t a3)
{
  std::string::size_type v5 = (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    char v7 = (uint64_t **)v5;
    uint64_t v6 = operator new(0x38uLL);
    v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

std::string *std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,char const(&)[7],CFRange &,void>@<X0>(char *a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = (std::string *)operator new(0x90uLL);
  uint64_t result = std::__shared_ptr_emplace<QP::Lexeme>::__shared_ptr_emplace[abi:ne180100]<char const(&)[7],CFRange &,std::allocator<QP::Lexeme>,0>(v6, a1, a2);
  *a3 = v6 + 1;
  a3[1] = v6;
  return result;
}

void sub_224DC0648(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<QP::Lexeme>::__shared_ptr_emplace[abi:ne180100]<char const(&)[7],CFRange &,std::allocator<QP::Lexeme>,0>(std::string *a1, char *a2, uint64_t a3)
{
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26D830A40;
  std::construct_at[abi:ne180100]<QP::Lexeme,char const(&)[7],CFRange &,QP::Lexeme*>(a1 + 1, a2, a3);
  return a1;
}

void sub_224DC06A4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

std::string *std::construct_at[abi:ne180100]<QP::Lexeme,char const(&)[7],CFRange &,QP::Lexeme*>(std::string *a1, char *a2, uint64_t a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  QP::Lexeme::Lexeme(a1, (long long *)__p, *(void *)a3, *(void *)(a3 + 8));
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_224DC0710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,char const(&)[9],CFRange &,void>@<X0>(char *a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = (std::string *)operator new(0x90uLL);
  uint64_t result = std::__shared_ptr_emplace<QP::Lexeme>::__shared_ptr_emplace[abi:ne180100]<char const(&)[9],CFRange &,std::allocator<QP::Lexeme>,0>(v6, a1, a2);
  *a3 = v6 + 1;
  a3[1] = v6;
  return result;
}

void sub_224DC077C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<QP::Lexeme>::__shared_ptr_emplace[abi:ne180100]<char const(&)[9],CFRange &,std::allocator<QP::Lexeme>,0>(std::string *a1, char *a2, uint64_t a3)
{
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26D830A40;
  std::construct_at[abi:ne180100]<QP::Lexeme,char const(&)[9],CFRange &,QP::Lexeme*>(a1 + 1, a2, a3);
  return a1;
}

void sub_224DC07D8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

std::string *std::construct_at[abi:ne180100]<QP::Lexeme,char const(&)[9],CFRange &,QP::Lexeme*>(std::string *a1, char *a2, uint64_t a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  QP::Lexeme::Lexeme(a1, (long long *)__p, *(void *)a3, *(void *)(a3 + 8));
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_224DC0844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id QP::localeIdentifierAliases(void *a1)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  id v1 = a1;
  uint64_t v2 = [MEMORY[0x263EFF9C0] set];
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v3 = v1;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v13;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v13 != v5) {
          objc_enumerationMutation(v3);
        }
        char v7 = *(void **)(*((void *)&v12 + 1) + 8 * i);
        objc_msgSend(v2, "addObject:", v7, (void)v12);
        uint64_t v8 = [v7 stringByReplacingOccurrencesOfString:@"_" withString:@"-"];
        [v2 addObject:v8];

        uint64_t v9 = [v7 stringByReplacingOccurrencesOfString:@"-" withString:@"_"];
        [v2 addObject:v9];
      }
      uint64_t v4 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v4);
  }

  uint64_t v10 = (void *)[v2 copy];
  return v10;
}

void sub_224DC0A04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t QP::isECRSupportedLocale(QP *this, NSLocale *a2)
{
  uint64_t v2 = [(QP *)this localeIdentifier];
  if ([v2 length])
  {
    if (QP::isECRSupportedLocale(NSLocale *)::onceToken != -1) {
      dispatch_once(&QP::isECRSupportedLocale(NSLocale *)::onceToken, &__block_literal_global_6);
    }
    uint64_t v3 = [(id)QP::isECRSupportedLocale(NSLocale *)::supportedLocaleIdentifiers containsObject:v2];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void sub_224DC0AD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN2QP20isECRSupportedLocaleEP8NSLocale_block_invoke()
{
  uint64_t v0 = QP::localeIdentifierAliases(&unk_26D83EBA8);
  id v1 = (void *)QP::isECRSupportedLocale(NSLocale *)::supportedLocaleIdentifiers;
  QP::isECRSupportedLocale(NSLocale *)::supportedLocaleIdentifiers = v0;
}

id QP::normalizeTimeString(QP *this, NSString *a2)
{
  uint64_t v2 = this;
  if (QP::normalizeTimeString(NSString *)::onceToken != -1) {
    dispatch_once(&QP::normalizeTimeString(NSString *)::onceToken, &__block_literal_global_51);
  }
  uint64_t v3 = objc_msgSend((id)QP::normalizeTimeString(NSString *)::regex, "stringByReplacingMatchesInString:options:range:withTemplate:", v2, 0, 0, -[QP length](v2, "length"), @"$1");

  return v3;
}

void sub_224DC0BBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN2QP19normalizeTimeStringEP8NSString_block_invoke()
{
  uint64_t v0 = [MEMORY[0x263F08AE8] regularExpressionWithPattern:@"(\\d+)(st|nd|rd|th)" options:1 error:0];
  id v1 = (void *)QP::normalizeTimeString(NSString *)::regex;
  QP::normalizeTimeString(NSString *)::regex = v0;
}

id QP::normalizeQueryToken(QP *this, NSString *a2)
{
  uint64_t v2 = this;
  if (QP::normalizeQueryToken(NSString *)::onceToken != -1) {
    dispatch_once(&QP::normalizeQueryToken(NSString *)::onceToken, &__block_literal_global_60);
  }
  uint64_t v3 = objc_msgSend((id)QP::normalizeQueryToken(NSString *)::apostropheSRegex, "stringByReplacingMatchesInString:options:range:withTemplate:", v2, 0, 0, -[QP length](v2, "length"), &stru_26D832058);

  return v3;
}

void sub_224DC0CB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN2QP19normalizeQueryTokenEP8NSString_block_invoke()
{
  id v3 = 0;
  uint64_t v0 = [MEMORY[0x263F08AE8] regularExpressionWithPattern:@"[’']s\\b" options:0 error:&v3];
  id v1 = v3;
  uint64_t v2 = (void *)QP::normalizeQueryToken(NSString *)::apostropheSRegex;
  QP::normalizeQueryToken(NSString *)::apostropheSRegex = v0;

  if (v1)
  {
    if (llmParserLogger(void)::token != -1) {
      dispatch_once(&llmParserLogger(void)::token, &__block_literal_global_175);
    }
    if (os_log_type_enabled((os_log_t)llmParserLogger(void)::log, OS_LOG_TYPE_ERROR)) {
      ___ZN2QP19normalizeQueryTokenEP8NSString_block_invoke_cold_1();
    }
  }
}

id llmParserLogger(void)
{
  if (llmParserLogger(void)::token != -1) {
    dispatch_once(&llmParserLogger(void)::token, &__block_literal_global_175);
  }
  uint64_t v0 = (void *)llmParserLogger(void)::log;
  return v0;
}

void QP::getVisualIdsAndScores(void *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v33 = a2;
  uint64_t v47 = *MEMORY[0x263EF8340];
  id v2 = a1;
  memset(&v44, 0, sizeof(v44));
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  obCFIndex j = [v2 allKeys];
  uint64_t v3 = [obj countByEnumeratingWithState:&v37 objects:v46 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v38;
    do
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v38 != v4) {
          objc_enumerationMutation(obj);
        }
        CFStringRef v6 = *(const __CFString **)(*((void *)&v37 + 1) + 8 * i);
        char v7 = objc_msgSend(v2, "objectForKeyedSubscript:", v6, v33);
        uint64_t v8 = [v7 firstObject];
        [v8 doubleValue];
        uint64_t v10 = v9;

        uint64_t v11 = [v7 lastObject];
        [v11 doubleValue];
        uint64_t v13 = v12;

        QP::getUTF8StringFromCFString(v6, __p);
        std::vector<std::string>::pointer end = v44.__end_;
        if (v44.__end_ >= v44.__end_cap_.__value_)
        {
          unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)v44.__end_ - (char *)v44.__begin_) >> 3);
          unint64_t v17 = v16 + 1;
          if (v16 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * (((char *)v44.__end_cap_.__value_ - (char *)v44.__begin_) >> 3) > v17) {
            unint64_t v17 = 0x5555555555555556 * (((char *)v44.__end_cap_.__value_ - (char *)v44.__begin_) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v44.__end_cap_.__value_ - (char *)v44.__begin_) >> 3) >= 0x555555555555555) {
            unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v18 = v17;
          }
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v44.__end_cap_;
          if (v18) {
            unint64_t v19 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v44.__end_cap_, v18);
          }
          else {
            unint64_t v19 = 0;
          }
          uint64_t v20 = v19 + v16;
          __v.__first_ = v19;
          __v.__begin_ = v20;
          __v.__end_cap_.__value_ = &v19[v18];
          long long v21 = *(_OWORD *)__p;
          v20->__r_.__value_.__r.__words[2] = v36;
          *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v21;
          __p[1] = 0;
          std::string::size_type v36 = 0;
          __p[0] = 0;
          __v.__end_ = v20 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(&v44, &__v);
          char v22 = v44.__end_;
          std::__split_buffer<std::string>::~__split_buffer(&__v);
          v44.__end_ = v22;
          if (SHIBYTE(v36) < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          long long v15 = *(_OWORD *)__p;
          v44.__end_->__r_.__value_.__r.__words[2] = v36;
          *(_OWORD *)&end->__r_.__value_.__l.__data_ = v15;
          v44.__end_ = end + 1;
        }
        uint64_t v23 = v42;
        if (v42 >= v43)
        {
          uint64_t v25 = (char *)v41;
          uint64_t v26 = (v42 - (unsigned char *)v41) >> 4;
          unint64_t v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) >> 60) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v28 = v43 - (unsigned char *)v41;
          if ((v43 - (unsigned char *)v41) >> 3 > v27) {
            unint64_t v27 = v28 >> 3;
          }
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v29 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v29 = v27;
          }
          if (v29)
          {
            uint64_t v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>>((uint64_t)&v43, v29);
            uint64_t v25 = (char *)v41;
            uint64_t v23 = v42;
          }
          else
          {
            uint64_t v30 = 0;
          }
          __n128 v31 = &v30[16 * v26];
          *(void *)__n128 v31 = v10;
          *((void *)v31 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = v13;
          unint64_t v32 = v31;
          if (v23 != v25)
          {
            do
            {
              *((_OWORD *)v32 - QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = *((_OWORD *)v23 - 1);
              v32 -= 16;
              v23 -= 16;
            }
            while (v23 != v25);
            uint64_t v25 = (char *)v41;
          }
          __n128 v24 = v31 + 16;
          uint64_t v41 = v32;
          uint64_t v42 = v31 + 16;
          uint64_t v43 = &v30[16 * v29];
          if (v25) {
            operator delete(v25);
          }
        }
        else
        {
          *(void *)uint64_t v42 = v10;
          *((void *)v23 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = v13;
          __n128 v24 = v23 + 16;
        }
        uint64_t v42 = v24;
      }
      uint64_t v3 = [obj countByEnumeratingWithState:&v37 objects:v46 count:16];
    }
    while (v3);
  }

  std::pair<std::vector<std::string>,std::vector<std::pair<double,double>>>::pair[abi:ne180100]<std::vector<std::string>&,std::vector<std::pair<double,double>>&,0>(v33, (long long **)&v44, (long long **)&v41);
  if (v41)
  {
    uint64_t v42 = (char *)v41;
    operator delete(v41);
  }
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v44;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
}

void sub_224DC1160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, int a6, __int16 a7, char a8, char a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,char a22,uint64_t a23,std::__split_buffer<std::string> *__pa,std::__split_buffer<std::string> *a25,uint64_t a26,char a27)
{
  if (__pa)
  {
    a25 = __pa;
    operator delete(__pa);
  }
  __pa = (std::__split_buffer<std::string> *)&a27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);

  _Unwind_Resume(a1);
}

double QP::LLMParser::LLMParser(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v5 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = a4[1];
  *(void *)(a1 + 16) = *a4;
  *(void *)(a1 + 24) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = a5[1];
  *(void *)(a1 + 32) = *a5;
  *(void *)(a1 + 4nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = a3[1];
  *(void *)(a1 + 48) = *a3;
  *(void *)(a1 + 56) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  double result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 8nlp::CFScopedPtr<__CFString const*>::reset(this, 0) = 0u;
  return result;
}

uint64_t QP::LLMParser::getEmbeddingString(QP::LLMParser *this)
{
  return *((void *)this + 15);
}

void QP::LLMParser::enumerateParses(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  char v9 = 0;
  uint64_t v5 = *(uint64_t **)(a1 + 72);
  for (uint64_t i = *(uint64_t **)(a1 + 80); v5 != i; v5 += 2)
  {
    uint64_t v7 = *v5;
    uint64_t v6 = (std::__shared_weak_count *)v5[1];
    uint64_t v8 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v3[2](v3, &v7, &v9);
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    if (v9) {
      break;
    }
  }
}

void sub_224DC1340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }

  _Unwind_Resume(a1);
}

CFStringRef QP::LLMParser::getDisplayDate(QP::LLMParser *this)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  ISO8601Formatter = CFDateFormatterCreateISO8601Formatter((CFAllocatorRef)*MEMORY[0x263EFFB08], 0x333uLL);
  CFAbsoluteTime CurrentTime = getCurrentTime(*(__CFCalendar **)(*(void *)this + 88), *(const __CFDate **)(*(void *)this + 72));
  CFDateRef v5 = CFDateCreate(v2, CurrentTime);
  if (v5)
  {
    CFStringRef StringWithDate = CFDateFormatterCreateStringWithDate(v2, ISO8601Formatter, v5);
    CFRelease(v5);
    if (!ISO8601Formatter) {
      return StringWithDate;
    }
    goto LABEL_5;
  }
  CFStringRef StringWithDate = 0;
  if (ISO8601Formatter) {
LABEL_5:
  }
    CFRelease(ISO8601Formatter);
  return StringWithDate;
}

void sub_224DC1414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
}

void QP::LLMParser::safeMakeGroupAttribute(void *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  uint64_t v3 = *a2;
  if (*a1)
  {
    if (v3)
    {
      uint64_t v4 = a1[1];
      *(void *)&long long v9 = *a1;
      *((void *)&v9 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = v4;
      if (v4)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
        uint64_t v3 = *a2;
      }
      uint64_t v5 = a2[1];
      *(void *)&long long v8 = v3;
      *((void *)&v8 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      QP::ParseAttribute::makeGroupAttribute(&v9, &v8, a3);
      if (*((void *)&v8 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v8 + 1));
      }
      if (*((void *)&v9 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v9 + 1));
      }
    }
    else
    {
      uint64_t v7 = a1[1];
      *a3 = *a1;
      a3[1] = v7;
      *a1 = 0;
      a1[1] = 0;
    }
  }
  else
  {
    uint64_t v6 = a2[1];
    *a3 = v3;
    a3[1] = v6;
    *a2 = 0;
    a2[1] = 0;
  }
}

void sub_224DC14F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void **QP::ParseAttribute::makeGroupAttribute@<X0>(long long *a1@<X0>, long long *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = *(uint64_t **)a1;
  uint64_t v7 = *(uint64_t **)a2;
  uint64_t v8 = **(void **)a1;
  uint64_t v9 = **(void **)a2;
  uint64_t v10 = *(void *)(*(void *)a2 + 8);
  if (v8 >= v9) {
    uint64_t v11 = **(void **)a2;
  }
  else {
    uint64_t v11 = **(void **)a1;
  }
  uint64_t v12 = *(void *)(*(void *)a1 + 8) + v8;
  if (v12 <= v10 + v9) {
    uint64_t v12 = v10 + v9;
  }
  *(void *)&long long v31 = v11;
  *((void *)&v31 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = v12 - v11;
  uint64_t v14 = v6[2];
  uint64_t v13 = v6[3];
  uint64_t v16 = v7[2];
  uint64_t v15 = v7[3];
  if (v14 >= v16) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = v14;
  }
  uint64_t v18 = v13 + v14;
  if (v13 + v14 <= v15 + v16) {
    uint64_t v18 = v15 + v16;
  }
  uint64_t v19 = v18 - v17;
  if (v16 == -1) {
    uint64_t v17 = v14;
  }
  else {
    uint64_t v13 = v19;
  }
  BOOL v20 = v14 == -1;
  if (v14 == -1) {
    uint64_t v21 = v16;
  }
  else {
    uint64_t v21 = v17;
  }
  if (v20) {
    uint64_t v13 = v15;
  }
  *(void *)&long long v30 = v21;
  *((void *)&v30 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = v13;
  uint64_t v29 = 0;
  std::allocate_shared[abi:ne180100]<QP::ParseAttribute,std::allocator<QP::ParseAttribute>,CFRange &,CFRange,int,int,void>(&v31, &v30, (int *)&v29 + 1, (int *)&v29, a3);
  char v22 = *(uint64_t **)(*(void *)a1 + 120);
  uint64_t v23 = *(uint64_t **)(*(void *)a1 + 128);
  uint64_t v24 = *a3;
  if (v23 == v22)
  {
    std::vector<std::shared_ptr<QP::ParseAttribute>>::push_back[abi:ne180100]((uint64_t *)(v24 + 120), a1);
  }
  else if (v24 != *(void *)a1)
  {
    std::vector<std::shared_ptr<QP::ParseAttribute>>::__assign_with_size[abi:ne180100]<std::shared_ptr<QP::ParseAttribute>*,std::shared_ptr<QP::ParseAttribute>*>(v24 + 120, v22, v23, ((char *)v23 - (char *)v22) >> 4);
  }
  uint64_t v25 = *(uint64_t **)(*(void *)a2 + 120);
  uint64_t v26 = *(uint64_t **)(*(void *)a2 + 128);
  unint64_t v27 = (uint64_t *)(*a3 + 120);
  if (v26 == v25) {
    return std::vector<std::shared_ptr<QP::ParseAttribute>>::push_back[abi:ne180100](v27, a2);
  }
  else {
    return (void **)std::vector<std::shared_ptr<QP::ParseAttribute>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<QP::ParseAttribute>*>,std::__wrap_iter<std::shared_ptr<QP::ParseAttribute>*>>(v27, *(void **)(*a3 + 128), v25, v26, ((char *)v26 - (char *)v25) >> 4);
  }
}

void sub_224DC1648(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void QP::LLMParser::retrieveLexemeWithTextRange(QP::LLMParser *this@<X0>, CFRange a2@<0:X1, 8:X2>, CFRange a3@<0:X3, 8:X4>, const __CFString *a4@<X5>, const __CFString *a5@<X6>, const __CFString *a6@<X7>, uint64_t **a7@<X8>)
{
  CFIndex length = a2.length;
  CFIndex location = a2.location;
  CFRange v43 = a3;
  *a7 = 0;
  a7[1] = 0;
  QP::Lexer::lexemeAtLocation(*((void *)this + 2), 0, v41);
  uint64_t v14 = (uint64_t *)v41[0];
  uint64_t v15 = (std::__shared_weak_count *)v41[1];
  *a7 = (uint64_t *)v41[0];
  a7[1] = (uint64_t *)v15;
  if (v14)
  {
    CFStringRef v36 = a5;
    long long v37 = 0;
    uint64_t v16 = 0;
    CFIndex v17 = location + length;
    unint64_t v18 = 1;
    while (1)
    {
      if (CFStringsAreEqual(a4, kQPParseAttributeDateKey))
      {
        if (*((unsigned __int16 *)v14 + 44) - 1 <= 3)
        {
          CFIndex v19 = v14[9];
          CFIndex v20 = v14[10] + v19;
          BOOL v21 = location > v19 || v17 < v20;
          if (!v21 || v19 <= location && v20 >= v17) {
            goto LABEL_61;
          }
        }
      }
      else if (CFStringsAreEqual(a4, kQPParseAttributeMediaKey) || CFStringsAreEqual(a4, kQPParseAttributeKindKey))
      {
        if (std::string::starts_with[abi:ne180100](v14, "Media")) {
          goto LABEL_61;
        }
        if (!v16)
        {
          if (std::string::starts_with[abi:ne180100](v14, "Kind"))
          {
            if (v15) {
              atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v37) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v37);
            }
            uint64_t v16 = v14;
            long long v37 = v15;
          }
          else
          {
            uint64_t v16 = 0;
          }
        }
      }
      else
      {
        CFIndex v22 = v14[9];
        if (v22 <= location && v14[10] + v22 >= v17)
        {
          QP::getUTF8StringFromCFString(v36, v41);
          uint64_t v23 = (v42 & 0x80u) == 0 ? v41 : (void **)v41[0];
          uint64_t v24 = (v42 & 0x80u) == 0 ? (void *)v42 : v41[1];
          if (*((char *)v14 + 23) < 0)
          {
            uint64_t v26 = (void *)*v14;
            size_t v25 = v14[1];
          }
          else
          {
            size_t v25 = *((unsigned __int8 *)v14 + 23);
            uint64_t v26 = v14;
          }
          std::string __p = v26;
          size_t v39 = v25;
          if (std::string_view::starts_with[abi:ne180100](&__p, v23, (size_t)v24))
          {
            QP::getUTF8StringFromCFString(a6, &__p);
            if ((v40 & 0x80u) == 0) {
              p_p = &__p;
            }
            else {
              p_p = __p;
            }
            if ((v40 & 0x80u) == 0) {
              size_t v28 = v40;
            }
            else {
              size_t v28 = v39;
            }
            if (*((char *)v14 + 23) < 0)
            {
              long long v31 = v14;
              uint64_t v14 = (uint64_t *)*v14;
              uint64_t v29 = v31[1];
            }
            else
            {
              uint64_t v29 = *((unsigned __int8 *)v14 + 23);
            }
            v44[0] = v14;
            v44[1] = v29;
            BOOL v30 = std::string_view::ends_with[abi:ne180100](v44, p_p, v28);
            if ((char)v40 < 0) {
              operator delete(__p);
            }
          }
          else
          {
            BOOL v30 = 0;
          }
          if ((char)v42 < 0) {
            operator delete(v41[0]);
          }
          if (v30)
          {
LABEL_61:
            uint64_t v33 = v37;
            if (!v16) {
              goto LABEL_67;
            }
LABEL_62:
            if (v33)
            {
              atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
              uint64_t v15 = (std::__shared_weak_count *)a7[1];
            }
            *a7 = v16;
            a7[1] = (uint64_t *)v33;
            if (v15)
            {
              int v35 = v15;
              goto LABEL_66;
            }
            goto LABEL_67;
          }
        }
      }
      QP::Lexer::lexemeAtLocation(*((void *)this + 2), v18, v41);
      uint64_t v14 = (uint64_t *)v41[0];
      uint64_t v15 = (std::__shared_weak_count *)v41[1];
      v41[0] = 0;
      v41[1] = 0;
      unint64_t v32 = (std::__shared_weak_count *)a7[1];
      *a7 = v14;
      a7[1] = (uint64_t *)v15;
      if (v32)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v32);
        if (v41[1]) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v41[1]);
        }
      }
      ++v18;
      if (!v14)
      {
        uint64_t v33 = v37;
        if (!v16) {
          goto LABEL_58;
        }
        goto LABEL_62;
      }
    }
  }
  uint64_t v33 = 0;
LABEL_58:
  std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,char const*&,CFRange &,void>((char **)&QP::kLexemeTextType, (uint64_t)&v43, v41);
  long long v34 = *(_OWORD *)v41;
  v41[0] = 0;
  v41[1] = 0;
  *(_OWORD *)a7 = v34;
  if (v15)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    int v35 = (std::__shared_weak_count *)v41[1];
    if (v41[1]) {
LABEL_66:
    }
      std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
LABEL_67:
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
}

void sub_224DC197C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  CFIndex v22 = *(std::__shared_weak_count **)(v20 + 8);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  _Unwind_Resume(exception_object);
}

BOOL std::string::starts_with[abi:ne180100](uint64_t *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    uint64_t v6 = a1;
    a1 = (uint64_t *)*a1;
    uint64_t v5 = v6[1];
  }
  else
  {
    uint64_t v5 = *((unsigned __int8 *)a1 + 23);
  }
  v8[0] = a1;
  v8[1] = v5;
  return std::string_view::starts_with[abi:ne180100](v8, __s, v4);
}

void QP::LLMParser::createAttribute(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, const __CFString *a6@<X5>, std::string **a7@<X8>)
{
  *(void *)&long long v20 = a3;
  *((void *)&v20 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = a4;
  long long v19 = a2;
  LODWORD(v17.__r_.__value_.__l.__data_) = 0;
  int v18 = 0;
  std::allocate_shared[abi:ne180100]<QP::ParseAttribute,std::allocator<QP::ParseAttribute>,CFRange &,CFRange &,int,int,void>(&v19, &v20, (int *)&v17, &v18, a7);
  uint64_t v11 = *a7;
  std::string::size_type v12 = *(void *)a5;
  uint64_t v13 = *(std::__shared_weak_count **)(a5 + 8);
  if (v13)
  {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = (std::__shared_weak_count *)v11[4].__r_.__value_.__r.__words[2];
  v11[4].__r_.__value_.__l.__size_ = v12;
  v11[4].__r_.__value_.__r.__words[2] = (std::string::size_type)v13;
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  std::vector<std::shared_ptr<QP::Lexeme>>::push_back[abi:ne180100]((uint64_t *)(a1 + 96), (long long *)a5);
  QP::getUTF8StringFromCFString(a6, &v17);
  uint64_t v15 = *a7;
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v17.__r_.__value_.__l.__data_, v17.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v17;
  }
  std::string::operator=(v15 + 2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
}

void sub_224DC1B48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  CFIndex v22 = *(std::__shared_weak_count **)(v20 + 8);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  _Unwind_Resume(exception_object);
}

void QP::LLMParser::gatherAttributes(QP::LLMParser *this@<X0>, const __CFString *DisplayDate@<X1>, CFRange a3@<0:X3, 8:X4>, CFRange a4@<0:X5, 8:X6>, CFStringRef theString1@<X7>, unint64_t a6@<X2>, void *a7@<X8>, const __CFString *a8, const __CFArray *a9, const __CFArray *a10, const __CFDictionary *a11)
{
  CFIndex length = a4.length;
  CFIndex location = a4.location;
  uint64_t v121 = *MEMORY[0x263EF8340];
  CFRange v119 = a3;
  *a7 = 0;
  a7[1] = 0;
  memset(&v118, 0, sizeof(v118));
  if (!CFStringsAreEqual(theString1, kQPParseAttributeFlightLocationKey)
    && !CFStringsAreEqual(theString1, kQPParseAttributeFlightArrivalLocationKey)
    && !CFStringsAreEqual(theString1, kQPParseAttributeFlightDepartureLocationKey)
    && !CFStringsAreEqual(theString1, kQPParseAttributeRestaurantActionKey)
    && !CFStringsAreEqual(theString1, kQPParseAttributeFlightActionKey)
    && !CFStringsAreEqual(theString1, kQPParseAttributeHotelActionKey)
    && !CFStringsAreEqual(theString1, kQPParseAttributeEarliestActionKey)
    && !CFStringsAreEqual(theString1, kQPParseAttributeLatestActionKey))
  {
    if (CFStringsAreEqual(theString1, kQPParseAttributeDateKey)
      || CFStringsAreEqual(theString1, kQPParseAttributeMediaKey)
      || CFStringsAreEqual(theString1, kQPParseAttributeKindKey)
      || CFStringsAreEqual(theString1, kQPParseAttributeAttachedKindKey)
      || CFStringsAreEqual(theString1, kQPParseAttributeTaggedKey)
      || CFStringsAreEqual(theString1, kQPParseAttributeFlagColorKey)
      || CFStringsAreEqual(theString1, kQPParseAttributePrintedActionKey)
      || CFStringsAreEqual(theString1, kQPParseAttributeCreatedActionKey)
      || CFStringsAreEqual(theString1, kQPParseAttributeModifiedActionKey))
    {
      if (CFStringsAreEqual(theString1, kQPParseAttributeAttachedKindKey))
      {
        CFStringRef v24 = @"Kind";
LABEL_38:
        CFStringRef v25 = &stru_26D832058;
        goto LABEL_44;
      }
      if (CFStringsAreEqual(theString1, kQPParseAttributeTaggedKey))
      {
        CFStringRef v24 = @"Tag";
      }
      else
      {
        if (!CFStringsAreEqual(theString1, kQPParseAttributeFlagColorKey))
        {
          if (CFStringsAreEqual(theString1, kQPParseAttributePrintedActionKey)
            || CFStringsAreEqual(theString1, kQPParseAttributeCreatedActionKey)
            || CFStringsAreEqual(theString1, kQPParseAttributeModifiedActionKey))
          {
            CFStringRef v24 = @"Action";
            goto LABEL_38;
          }
          CFStringRef v25 = 0;
          CFStringRef v24 = 0;
LABEL_44:
          v122.CFIndex location = location;
          v122.CFIndex length = length;
          QP::LLMParser::retrieveLexemeWithTextRange(this, v122, v119, theString1, v24, v25, (uint64_t **)&__p);
          std::string::size_type size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
          uint64_t v109 = 0;
          unint64_t v110 = 0;
          CFIndex v26 = v119.location;
          CFIndex v27 = v119.length;
          long long v106 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          if (__p.__r_.__value_.__l.__size_) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(__p.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
          }
          QP::LLMParser::createAttribute((uint64_t)this, a6, v26, v27, (uint64_t)&v106, theString1, &v107);
          QP::LLMParser::safeMakeGroupAttribute(&v109, (uint64_t *)&v107, &__p);
          long long v28 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
          *(_OWORD *)a7 = v28;
          if (v108) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v108);
          }
          if (*((void *)&v106 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v106 + 1));
          }
          uint64_t v23 = v110;
          if (v110) {
            goto LABEL_21;
          }
          goto LABEL_22;
        }
        CFStringRef v24 = @"Flag";
      }
      CFStringRef v25 = @"Status";
      goto LABEL_44;
    }
    if (CFStringsAreEqual(theString1, kQPParseAttributeGroundedPersonKey))
    {
      CFDictionaryRef v29 = a11;
      if ([(__CFDictionary *)v29 count])
      {
        if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
        {
          v118.__r_.__value_.__l.__size_ = 14;
          BOOL v30 = (std::string *)v118.__r_.__value_.__r.__words[0];
        }
        else
        {
          *((unsigned char *)&v118.__r_.__value_.__s + 23) = 14;
          BOOL v30 = &v118;
        }
        strcpy((char *)v30, "GroundedPerson");
        QP::getVisualIdsAndScores(v29, &__p);
        std::allocate_shared[abi:ne180100]<QP::LexemeGroundedPerson,std::allocator<QP::LexemeGroundedPerson>,std::string &,std::vector<std::string> &,std::vector<std::pair<double,double>> &,CFRange &,void>((uint64_t)&v118, (long long **)&__p, &v105, (uint64_t)&v119, &v117);
        std::string::size_type size = (std::__shared_weak_count *)*((void *)&v117 + 1);
        unint64_t v42 = v117;
        *(_WORD *)(v117 + 88) = 16;
        uint64_t v102 = 0;
        unint64_t v103 = 0;
        CFIndex v43 = v119.location;
        CFIndex v44 = v119.length;
        unsigned long long v99 = __PAIR128__((unint64_t)size, v42);
        if (size) {
          atomic_fetch_add_explicit(&size->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        QP::LLMParser::createAttribute((uint64_t)this, a6, v43, v44, (uint64_t)&v99, theString1, &v100);
        QP::LLMParser::safeMakeGroupAttribute(&v102, (uint64_t *)&v100, &v117);
        long long v45 = v117;
        long long v117 = 0uLL;
        *(_OWORD *)a7 = v45;
        if (v101) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v101);
        }
        if (*((void *)&v99 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v99 + 1));
        }
        if (v103) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v103);
        }
        std::pair<std::vector<std::string>,std::vector<std::pair<double,double>>>::~pair((uint64_t)&__p);
      }
      else
      {
        std::string::size_type size = 0;
      }

      goto LABEL_22;
    }
    if (CFStringsAreEqual(theString1, kQPParseAttributeSenderKey)
      || CFStringsAreEqual(theString1, kQPParseAttributeRecipientKey)
      || CFStringsAreEqual(theString1, kQPParseAttributeSenderHandleKey)
      || CFStringsAreEqual(theString1, kQPParseAttributeRecipientHandleKey)
      || CFStringsAreEqual(theString1, kQPParseAttributeTaggedPersonKey))
    {
      if (!CFStringsAreEqual(theString1, kQPParseAttributeSenderKey)
        && !CFStringsAreEqual(theString1, kQPParseAttributeRecipientKey)
        && !CFStringsAreEqual(theString1, kQPParseAttributeTaggedPersonKey))
      {
        a9 = a10;
      }
      CFArrayRef v71 = a9;
      if ([(__CFArray *)v71 count])
      {
        long long v97 = 0u;
        long long v98 = 0u;
        long long v95 = 0u;
        long long v96 = 0u;
        obCFIndex j = v71;
        unint64_t v32 = 0;
        uint64_t v33 = [(__CFArray *)obj countByEnumeratingWithState:&v95 objects:v120 count:16];
        if (v33)
        {
          uint64_t v34 = *(void *)v96;
          do
          {
            uint64_t v35 = 0;
            CFStringRef v36 = v32;
            do
            {
              if (*(void *)v96 != v34) {
                objc_enumerationMutation(obj);
              }
              QP::getUTF8StringFromCFString(*(const __CFString **)(*((void *)&v95 + 1) + 8 * v35), &__p);
              std::allocate_shared[abi:ne180100]<QP::LexemeValue,std::allocator<QP::LexemeValue>,std::string &,std::string,CFRange &,void>((uint64_t)&v118, (uint64_t)&__p, (uint64_t)&v119, &v117);
              unint64_t v32 = (std::__shared_weak_count *)*((void *)&v117 + 1);
              uint64_t v37 = v117;
              long long v117 = 0uLL;
              if (v36)
              {
                std::__shared_weak_count::__release_shared[abi:ne180100](v36);
                if (*((void *)&v117 + 1)) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v117 + 1));
                }
              }
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              *(_WORD *)(v37 + 88) = 6;
              long long v38 = (std::__shared_weak_count *)a7[1];
              uint64_t v93 = *a7;
              uint64_t v94 = v38;
              if (v38) {
                atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              CFIndex v39 = v119.location;
              CFIndex v40 = v119.length;
              uint64_t v89 = v37;
              long long v90 = v32;
              if (v32) {
                atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              QP::LLMParser::createAttribute((uint64_t)this, a6, v39, v40, (uint64_t)&v89, theString1, &v91);
              QP::LLMParser::safeMakeGroupAttribute(&v93, (uint64_t *)&v91, &__p);
              long long v41 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
              *(_OWORD *)a7 = v41;
              if (v38)
              {
                std::__shared_weak_count::__release_shared[abi:ne180100](v38);
                if (__p.__r_.__value_.__l.__size_) {
                  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
                }
              }
              if (v92) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v92);
              }
              if (v90) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v90);
              }
              if (v94) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v94);
              }
              ++v35;
              CFStringRef v36 = v32;
            }
            while (v33 != v35);
            uint64_t v33 = [(__CFArray *)obj countByEnumeratingWithState:&v95 objects:v120 count:16];
          }
          while (v33);
        }
      }
      else
      {
        unint64_t v32 = 0;
      }
      if (CFStringsAreEqual(theString1, kQPParseAttributeTaggedPersonKey))
      {
        if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
        {
          v118.__r_.__value_.__l.__size_ = 12;
          uint64_t v46 = (std::string *)v118.__r_.__value_.__r.__words[0];
        }
        else
        {
          *((unsigned char *)&v118.__r_.__value_.__s + 23) = 12;
          uint64_t v46 = &v118;
        }
        LODWORD(v46->__r_.__value_.__r.__words[1]) = 1852797810;
        v46->__r_.__value_.__r.__words[0] = *(void *)"TaggedPerson";
        uint64_t v48 = &v46->__r_.__value_.__s.__data_[12];
      }
      else
      {
        if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
        {
          v118.__r_.__value_.__l.__size_ = 6;
          uint64_t v47 = (std::string *)v118.__r_.__value_.__r.__words[0];
        }
        else
        {
          *((unsigned char *)&v118.__r_.__value_.__s + 23) = 6;
          uint64_t v47 = &v118;
        }
        WORD2(v47->__r_.__value_.__r.__words[0]) = 28271;
        LODWORD(v47->__r_.__value_.__l.__data_) = 1936876880;
        uint64_t v48 = &v47->__r_.__value_.__s.__data_[6];
      }
      std::string::value_type *v48 = 0;
      std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,std::string &,CFRange &,void>((uint64_t)&v118, (uint64_t)&v119, &__p);
      std::string::size_type size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      std::string::size_type v49 = __p.__r_.__value_.__r.__words[0];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
      if (v32)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v32);
        if (__p.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
        }
      }
      uint64_t v50 = (std::__shared_weak_count *)a7[1];
      uint64_t v87 = *a7;
      uint64_t v88 = v50;
      if (v50) {
        atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      CFIndex v51 = v119.location;
      CFIndex v52 = v119.length;
      std::string::size_type v83 = v49;
      CFIndex v84 = size;
      if (size) {
        atomic_fetch_add_explicit(&size->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      QP::LLMParser::createAttribute((uint64_t)this, a6, v51, v52, (uint64_t)&v83, theString1, &v85);
      QP::LLMParser::safeMakeGroupAttribute(&v87, (uint64_t *)&v85, &__p);
      long long v53 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
      *(_OWORD *)a7 = v53;
      if (v50)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v50);
        if (__p.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
        }
      }
      if (v86) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v86);
      }
      if (v84) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v84);
      }
      if (v88) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v88);
      }

      goto LABEL_22;
    }
    if (CFStringsAreEqual(theString1, kQPParseAttributeReadKey)
      || CFStringsAreEqual(theString1, kQPParseAttributeUnreadKey)
      || CFStringsAreEqual(theString1, kQPParseAttributeFlaggedKey)
      || CFStringsAreEqual(theString1, kQPParseAttributeRepliedKey)
      || CFStringsAreEqual(theString1, kQPParseAttributeSharedKey))
    {
      *(void *)&long long v117 = 0;
      if (CFStringsAreEqual(theString1, kQPParseAttributeReadKey))
      {
        if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
        {
          v118.__r_.__value_.__l.__size_ = 10;
          uint64_t v54 = (std::string *)v118.__r_.__value_.__r.__words[0];
        }
        else
        {
          *((unsigned char *)&v118.__r_.__value_.__s + 23) = 10;
          uint64_t v54 = &v118;
        }
        strcpy((char *)v54, "ReadStatus");
      }
      else
      {
        if (CFStringsAreEqual(theString1, kQPParseAttributeUnreadKey))
        {
          if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
          {
            v118.__r_.__value_.__l.__size_ = 10;
            uint64_t v55 = (std::string *)v118.__r_.__value_.__r.__words[0];
          }
          else
          {
            *((unsigned char *)&v118.__r_.__value_.__s + 23) = 10;
            uint64_t v55 = &v118;
          }
          strcpy((char *)v55, "ReadStatus");
          uint64_t v56 = "0";
          goto LABEL_155;
        }
        if (CFStringsAreEqual(theString1, kQPParseAttributeFlaggedKey))
        {
          if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
          {
            v118.__r_.__value_.__l.__size_ = 13;
            uint64_t v57 = (std::string *)v118.__r_.__value_.__r.__words[0];
          }
          else
          {
            *((unsigned char *)&v118.__r_.__value_.__s + 23) = 13;
            uint64_t v57 = &v118;
          }
          uint64_t v62 = "FlaggedStatus";
        }
        else
        {
          if (!CFStringsAreEqual(theString1, kQPParseAttributeRepliedKey))
          {
            if (!CFStringsAreEqual(theString1, kQPParseAttributeSharedKey))
            {
LABEL_156:
              std::allocate_shared[abi:ne180100]<QP::LexemeStatus,std::allocator<QP::LexemeStatus>,std::string &,char const*&,CFRange &,void>((uint64_t)&v118, (char **)&v117, (uint64_t)&v119, &__p);
              std::string::size_type size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
              std::string::size_type v58 = __p.__r_.__value_.__r.__words[0];
              *(_WORD *)(__p.__r_.__value_.__r.__words[0] + 88) = 5;
              uint64_t v81 = 0;
              uint64_t v82 = 0;
              CFIndex v59 = v119.location;
              CFIndex v60 = v119.length;
              unsigned long long v78 = __PAIR128__((unint64_t)size, v58);
              if (size) {
                atomic_fetch_add_explicit(&size->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              QP::LLMParser::createAttribute((uint64_t)this, a6, v59, v60, (uint64_t)&v78, theString1, &v79);
              QP::LLMParser::safeMakeGroupAttribute(&v81, (uint64_t *)&v79, &__p);
              long long v61 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
              *(_OWORD *)a7 = v61;
              if (v80) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v80);
              }
              if (*((void *)&v78 + 1)) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v78 + 1));
              }
              uint64_t v23 = v82;
              if (v82) {
                goto LABEL_21;
              }
              goto LABEL_22;
            }
            if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
            {
              v118.__r_.__value_.__l.__size_ = 12;
              uint64_t v63 = (std::string *)v118.__r_.__value_.__r.__words[0];
            }
            else
            {
              *((unsigned char *)&v118.__r_.__value_.__s + 23) = 12;
              uint64_t v63 = &v118;
            }
            strcpy((char *)v63, "SharedStatus");
            goto LABEL_149;
          }
          if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
          {
            v118.__r_.__value_.__l.__size_ = 13;
            uint64_t v57 = (std::string *)v118.__r_.__value_.__r.__words[0];
          }
          else
          {
            *((unsigned char *)&v118.__r_.__value_.__s + 23) = 13;
            uint64_t v57 = &v118;
          }
          uint64_t v62 = "RepliedStatus";
        }
        v57->__r_.__value_.__r.__words[0] = *(void *)v62;
        *(std::string::size_type *)((char *)v57->__r_.__value_.__r.__words + 5) = *(void *)(v62 + 5);
        v57->__r_.__value_.__s.__data_[13] = 0;
      }
LABEL_149:
      uint64_t v56 = "1";
LABEL_155:
      *(void *)&long long v117 = v56;
      goto LABEL_156;
    }
    if (CFStringsAreEqual(theString1, kQPParseAttributeAttachmentKey))
    {
      if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
      {
        v118.__r_.__value_.__l.__size_ = 10;
        std::string v64 = (std::string *)v118.__r_.__value_.__r.__words[0];
      }
      else
      {
        *((unsigned char *)&v118.__r_.__value_.__s + 23) = 10;
        std::string v64 = &v118;
      }
      LOWORD(v64->__r_.__value_.__r.__words[1]) = 29806;
      uint64_t v66 = "Attachment";
    }
    else
    {
      if (CFStringsAreEqual(theString1, kQPParseAttributeReceivedKey))
      {
        if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
        {
          v118.__r_.__value_.__l.__size_ = 14;
          uint64_t v65 = (std::string *)v118.__r_.__value_.__r.__words[0];
        }
        else
        {
          *((unsigned char *)&v118.__r_.__value_.__s + 23) = 14;
          uint64_t v65 = &v118;
        }
        qmemcpy(v65, "ReceivedAction", 14);
        std::string v67 = &v65->__r_.__value_.__s.__data_[14];
        goto LABEL_191;
      }
      if (!CFStringsAreEqual(theString1, kQPParseAttributeSentKey))
      {
        std::string::__assign_external(&v118, (const std::string::value_type *)QP::kLexemeTextType);
LABEL_192:
        std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,std::string &,CFRange &,void>((uint64_t)&v118, (uint64_t)&v119, &__p);
        std::string::size_type size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        uint64_t v76 = 0;
        CFStringRef v77 = 0;
        CFIndex v68 = v119.location;
        CFIndex v69 = v119.length;
        long long v73 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        if (__p.__r_.__value_.__l.__size_) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(__p.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
        }
        QP::LLMParser::createAttribute((uint64_t)this, a6, v68, v69, (uint64_t)&v73, theString1, &v74);
        QP::LLMParser::safeMakeGroupAttribute(&v76, (uint64_t *)&v74, &__p);
        long long v70 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
        *(_OWORD *)a7 = v70;
        if (v75) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v75);
        }
        if (*((void *)&v73 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v73 + 1));
        }
        uint64_t v23 = v77;
        if (v77) {
          goto LABEL_21;
        }
        goto LABEL_22;
      }
      if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
      {
        v118.__r_.__value_.__l.__size_ = 10;
        std::string v64 = (std::string *)v118.__r_.__value_.__r.__words[0];
      }
      else
      {
        *((unsigned char *)&v118.__r_.__value_.__s + 23) = 10;
        std::string v64 = &v118;
      }
      LOWORD(v64->__r_.__value_.__r.__words[1]) = 28271;
      uint64_t v66 = "SentAction";
    }
    v64->__r_.__value_.__r.__words[0] = *(void *)v66;
    std::string v67 = &v64->__r_.__value_.__s.__data_[10];
LABEL_191:
    std::string::value_type *v67 = 0;
    goto LABEL_192;
  }
  std::string::__assign_external(&v118, (const std::string::value_type *)QP::kLexemeTextType);
  if (CFStringsAreEqual(theString1, kQPParseAttributeEarliestActionKey)
    || CFStringsAreEqual(theString1, kQPParseAttributeLatestActionKey))
  {
    DisplayDate = QP::LLMParser::getDisplayDate(this);
  }
  QP::getUTF8StringFromCFString(DisplayDate, &__p);
  std::allocate_shared[abi:ne180100]<QP::LexemeValue,std::allocator<QP::LexemeValue>,std::string &,std::string,CFRange &,void>((uint64_t)&v118, (uint64_t)&__p, (uint64_t)&v119, &v117);
  std::string::size_type size = (std::__shared_weak_count *)*((void *)&v117 + 1);
  uint64_t v19 = v117;
  long long v117 = 0uLL;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(_WORD *)(v19 + 88) = 6;
  uint64_t v115 = 0;
  unint64_t v116 = 0;
  CFIndex v20 = v119.location;
  CFIndex v21 = v119.length;
  uint64_t v111 = v19;
  CFRange v112 = size;
  if (size) {
    atomic_fetch_add_explicit(&size->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  QP::LLMParser::createAttribute((uint64_t)this, a6, v20, v21, (uint64_t)&v111, theString1, &v113);
  QP::LLMParser::safeMakeGroupAttribute(&v115, (uint64_t *)&v113, &__p);
  long long v22 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  *(_OWORD *)a7 = v22;
  if (v114) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v114);
  }
  if (v112) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v112);
  }
  uint64_t v23 = v116;
  if (v116) {
LABEL_21:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
LABEL_22:
  if (size) {
    std::__shared_weak_count::__release_shared[abi:ne180100](size);
  }
  if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v118.__r_.__value_.__l.__data_);
  }
}

void sub_224DC29EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (v73) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v73);
  }
  if (a72 < 0) {
    operator delete(__p);
  }
  unint64_t v75 = *(std::__shared_weak_count **)(v72 + 8);
  if (v75) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v75);
  }
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::vector<std::string>,std::vector<std::pair<double,double>>>::~pair(uint64_t a1)
{
  CFAllocatorRef v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  size_t v4 = (void **)a1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  return a1;
}

void QP::LLMParser::parse(uint64_t a1, uint64_t a2, const void *a3, const __CFDictionary *a4)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (llmParserLogger(void)::token != -1) {
    dispatch_once(&llmParserLogger(void)::token, &__block_literal_global_175);
  }
  uint64_t v8 = llmParserLogger(void)::log;
  if (os_log_type_enabled((os_log_t)llmParserLogger(void)::log, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = 134217984;
    uint64_t v13 = a3;
    _os_log_impl(&dword_224D85000, v8, OS_LOG_TYPE_DEFAULT, "[QPNLU][qid=%ld] Parsing using LLMParse", (uint8_t *)&v12, 0xCu);
  }
  uint64_t v10 = *(std::__shared_weak_count **)(a2 + 8);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  QP::LLMParser::parseInternal(a1, v9, a3, a4);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (llmParserLogger(void)::token != -1) {
    dispatch_once(&llmParserLogger(void)::token, &__block_literal_global_175);
  }
  uint64_t v11 = llmParserLogger(void)::log;
  if (os_log_type_enabled((os_log_t)llmParserLogger(void)::log, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = 134217984;
    uint64_t v13 = a3;
    _os_log_impl(&dword_224D85000, v11, OS_LOG_TYPE_DEFAULT, "[QPNLU][qid=%ld] Finished Parsing using LLMParse", (uint8_t *)&v12, 0xCu);
  }
}

void sub_224DC2E1C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void QP::LLMParser::parseInternal(uint64_t a1, uint64_t a2, const void *a3, const __CFDictionary *a4)
{
  uint64_t v106 = *MEMORY[0x263EF8340];
  if (QP::LLMParser::parseInternal(std::shared_ptr<QP::Parse>,long,__CFDictionary const*)::onceToken != -1) {
    dispatch_once(&QP::LLMParser::parseInternal(std::shared_ptr<QP::Parse>,long,__CFDictionary const*)::onceToken, &__block_literal_global_110);
  }
  uint64_t v6 = (const void **)(a1 + 64);
  CFStringRef v5 = *(const __CFString **)(a1 + 64);
  if (v5)
  {
    CFStringRef v7 = *(const __CFString **)(*(void *)(a1 + 16) + 440);
    if (v7)
    {
      if (CFStringsAreEqual(v5, v7) && *(unsigned char *)(a1 + 136))
      {
        if (llmParserLogger(void)::token != -1) {
          dispatch_once(&llmParserLogger(void)::token, &__block_literal_global_175);
        }
        uint64_t v8 = llmParserLogger(void)::log;
        if (os_log_type_enabled((os_log_t)llmParserLogger(void)::log, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134217984;
          *(void *)&uint8_t buf[4] = a3;
          _os_log_impl(&dword_224D85000, v8, OS_LOG_TYPE_DEFAULT, "[QPNLU][qid=%ld] Skip parsing the query because query is already parsed", buf, 0xCu);
        }
        return;
      }
    }
  }
  QP::LLMParser::clear((QP::LLMParser *)a1);
  nlp::CFScopedPtr<__CFString const*>::reset(v6, 0);
  uint64_t v9 = *(const void **)(*(void *)(a1 + 16) + 440);
  if (v9)
  {
    CFTypeRef v10 = CFRetain(v9);
    nlp::CFScopedPtr<__CFString const*>::reset(v6, v10);
  }
  if (*v6)
  {
    CFDictionaryRef Length = (const __CFDictionary *)CFStringGetLength((CFStringRef)*v6);
    if (Length)
    {
      if (a4)
      {
        CFDictionaryRef Length = (const __CFDictionary *)CFDictionaryGetValue(a4, @"kMDQueryOptionSPQUParse");
        a4 = Length;
        if (Length)
        {
          CFTypeID v12 = CFGetTypeID(Length);
          CFDictionaryRef Length = (const __CFDictionary *)CFDictionaryGetTypeID();
          if ((const __CFDictionary *)v12 != Length) {
            a4 = 0;
          }
        }
      }
      if (QP::LLMParser::parseInternal(std::shared_ptr<QP::Parse>,long,__CFDictionary const*)::readFromGrountruth)
      {
        CFDictionaryRef GroundTruthDataRef = (const __CFDictionary *)QP::LLMParser::getGroundTruthDataRef(Length, (uint64_t)a3);
        CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(GroundTruthDataRef, *v6);
        if (Value)
        {
          a4 = Value;
          if (llmParserLogger(void)::token != -1) {
            dispatch_once(&llmParserLogger(void)::token, &__block_literal_global_175);
          }
          uint64_t v15 = llmParserLogger(void)::log;
          if (os_log_type_enabled((os_log_t)llmParserLogger(void)::log, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134217984;
            *(void *)&uint8_t buf[4] = a3;
            _os_log_impl(&dword_224D85000, v15, OS_LOG_TYPE_DEFAULT, "[QPNLU][qid=%ld] Successfully got non-empty prediction from ground Truth json file", buf, 0xCu);
          }
          if (llmParserLogger(void)::token != -1) {
            dispatch_once(&llmParserLogger(void)::token, &__block_literal_global_175);
          }
          if (os_log_type_enabled((os_log_t)llmParserLogger(void)::log, OS_LOG_TYPE_DEBUG)) {
            QP::LLMParser::parseInternal();
          }
LABEL_38:
          std::map<std::string,std::map<std::string,std::set<std::string>>>::map[abi:ne180100](v89, *(void *)(a1 + 48) + 424);
          uint64_t v86 = 0;
          uint64_t v87 = 0;
          uint64_t v88 = 0;
          CFIndex v85 = 0;
          uint64_t v74 = CFDictionaryGetValue(a4, @"isPQA");
          if (!v74)
          {
            uint64_t v74 = [NSNumber numberWithInt:0xFFFFFFFFLL];
          }
          CFArrayRef v71 = CFDictionaryGetValue(a4, @"intentLabel");
          long long v73 = [NSNumber numberWithInteger:getEnumValueFromIntentString((uint64_t)v71)];
          CFArrayRef v17 = (const __CFArray *)CFDictionaryGetValue(a4, @"arguments");
          uint64_t Count = CFArrayGetCount(v17);
          uint64_t v84 = Count;
          CFAllocatorRef v19 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
          CFMutableStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
          CFTypeRef cf = Mutable;
          CFMutableArrayRef v21 = CFArrayCreateMutable(v19, Count, MEMORY[0x263EFFF70]);
          CFAllocatorRef alloc = v19;
          CFMutableDictionaryRef v22 = CFDictionaryCreateMutable(v19, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
          if (Count >= 1)
          {
            for (int64_t i = 0; i < Count; ++i)
            {
              CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v17, i);
              CFStringRef v25 = (__CFString *)CFDictionaryGetValue(ValueAtIndex, @"text");
              CFIndex v26 = CFDictionaryGetValue(ValueAtIndex, @"textLabel");
              CFIndex v27 = CFDictionaryGetValue(ValueAtIndex, @"textRange");
              CFIndex v28 = [v27 rangeValue];
              QP::LLMParser::parseArgument((const void ***)a1, v25, v26, v28, v29, &v85, *(void **)(*(void *)a1 + 104), Mutable, v22, v21, i, (uint64_t)v89, (uint64_t *)&v86, a3);
            }
          }
          BOOL v30 = (uint64_t *)a1;
          if (!*(unsigned char *)(a1 + 137) && !*(unsigned char *)(a1 + 138) && !*(unsigned char *)(a1 + 139))
          {
            if (v73)
            {
              int v65 = [v73 intValue];
              BOOL v30 = (uint64_t *)a1;
              if (v65 != 2)
              {
                int v66 = [v73 intValue];
                BOOL v30 = (uint64_t *)a1;
                if (v66 != 3)
                {
                  *(unsigned char *)(a1 + 14nlp::CFScopedPtr<__CFDate const*>::reset(&a9, 0) = 1;
                  std::string v67 = llmParserLogger();
                  if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR)) {
                    QP::LLMParser::parseInternal();
                  }

                  BOOL v30 = (uint64_t *)a1;
                }
              }
            }
          }
          long long v31 = (std::__shared_weak_count *)v30[1];
          uint64_t v77 = *v30;
          if (v31) {
            atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          long long v70 = v31;
          CFIndex v69 = v21;
          CFMutableDictionaryRef theDict = v22;
          unint64_t v32 = [MEMORY[0x263EFFA40] standardUserDefaults];
          uint64_t v72 = [v32 objectForKey:@"EnablePersonalizedEmbedding"];

          if (v72)
          {
            uint64_t v33 = [MEMORY[0x263EFFA40] standardUserDefaults];
            int v79 = [v33 BOOLForKey:@"EnablePersonalizedEmbedding"];
          }
          else
          {
            int v79 = 0;
          }
          if (llmParserLogger(void)::token != -1) {
            dispatch_once(&llmParserLogger(void)::token, &__block_literal_global_175);
          }
          uint64_t v34 = llmParserLogger(void)::log;
          if (os_log_type_enabled((os_log_t)llmParserLogger(void)::log, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)&uint8_t buf[4] = a3;
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v79;
            _os_log_impl(&dword_224D85000, v34, OS_LOG_TYPE_DEFAULT, "[QPNLU][qid=%ld] personalized embedding: %d", buf, 0x12u);
          }
          CFAttributedStringRef aStr = (CFAttributedStringRef)objc_alloc_init(MEMORY[0x263F089B8]);
          uint64_t v82 = [MEMORY[0x263EFF9C0] set];
          long long v92 = 0u;
          long long v93 = 0u;
          long long v90 = 0u;
          long long v91 = 0u;
          uint64_t v35 = v69;
          obuint64_t j = v35;
          uint64_t v36 = [(__CFArray *)v35 countByEnumeratingWithState:&v90 objects:buf count:16];
          if (v36)
          {
            uint64_t v37 = *(void *)v91;
            do
            {
              for (uint64_t j = 0; j != v36; ++j)
              {
                if (*(void *)v91 != v37) {
                  objc_enumerationMutation(obj);
                }
                CFIndex v39 = *(void **)(*((void *)&v90 + 1) + 8 * j);
                CFIndex v40 = [v39 valueForKey:kQPQUOutputTokenRawTextKey];
                long long v41 = [v39 valueForKey:kQPQUOutputTokenKey];
                unint64_t v42 = [v39 valueForKey:kQPQUOutputTokenArgIdsKey];
                if (([v82 containsObject:v40] & 1) == 0 && objc_msgSend(v42, "count"))
                {
                  CFIndex v43 = [v42 objectAtIndex:0];
                  CFIndex v44 = v43;
                  if (v79
                    && [v43 isEqual:&unk_26D83EE60]
                    && ([(__CFDictionary *)theDict objectForKeyedSubscript:v41],
                        long long v45 = objc_claimAutoreleasedReturnValue(),
                        BOOL v46 = v45 == 0,
                        v45,
                        !v46))
                  {
                    uint64_t v47 = [(__CFDictionary *)theDict objectForKeyedSubscript:v41];
                    uint64_t v48 = [v47 allKeys];
                    std::string::size_type v49 = [v48 firstObject];

                    if (v49)
                    {
                      id v50 = objc_alloc(MEMORY[0x263F086A0]);
                      unint64_t v103 = @"kMDItemPhotosPeoplePersonIdentifiers";
                      v104 = v49;
                      CFIndex v51 = [NSDictionary dictionaryWithObjects:&v104 forKeys:&v103 count:1];
                      CFIndex v52 = (void *)[v50 initWithString:v40 attributes:v51];
                    }
                    else
                    {
                      CFIndex v52 = 0;
                    }
                  }
                  else if ([v44 isEqual:&unk_26D83EE78])
                  {
                    CFIndex v52 = (void *)[objc_alloc(MEMORY[0x263F086A0]) initWithString:v40];
                  }
                  else
                  {
                    CFIndex v52 = 0;
                  }
                  [v82 addObject:v40];
                  if (v52)
                  {
                    if ([(__CFAttributedString *)aStr length] && *(unsigned char *)(v77 + 31))
                    {
                      long long v53 = (void *)[objc_alloc(MEMORY[0x263F086A0]) initWithString:@" "];
                      [(__CFAttributedString *)aStr appendAttributedString:v53];
                    }
                    [(__CFAttributedString *)aStr appendAttributedString:v52];
                  }
                }
              }
              uint64_t v35 = obj;
              uint64_t v36 = [(__CFArray *)obj countByEnumeratingWithState:&v90 objects:buf count:16];
            }
            while (v36);
          }

          if (llmParserLogger(void)::token != -1) {
            dispatch_once(&llmParserLogger(void)::token, &__block_literal_global_175);
          }
          uint64_t v54 = llmParserLogger(void)::log;
          if (os_log_type_enabled((os_log_t)llmParserLogger(void)::log, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)unint64_t v100 = 134218242;
            *(void *)&v100[4] = a3;
            __int16 v101 = 2112;
            CFAttributedStringRef v102 = aStr;
            _os_log_impl(&dword_224D85000, v54, OS_LOG_TYPE_DEFAULT, "[QPNLU][qid=%ld] embedding string - (%@)", v100, 0x16u);
          }
          CFAttributedStringRef Copy = CFAttributedStringCreateCopy(alloc, aStr);

          nlp::CFScopedPtr<__CFAttributedString const*>::reset((const void **)(a1 + 120), Copy);
          if (v70) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v70);
          }
          MeCardData = getMeCardData();
          CFDictionarySetValue(theDict, @"me", MeCardData);
          *(void *)&long long v90 = 0;
          v98[0] = kQPParseResultEcrGroundedKey;
          v98[1] = kQPQUOutputIsPQAKey;
          v99[0] = theDict;
          v99[1] = v74;
          v99[2] = kQPQUParseTypeLLM;
          v98[2] = kQPQUOutputParseTypeKey;
          v98[3] = kQPQUOutputIntentIdsKey;
          long long v97 = v73;
          uint64_t v57 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v97 count:1];
          v99[3] = v57;
          v98[4] = kQPQUOutputIntentLabelsKey;
          long long v96 = v71;
          std::string::size_type v58 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v96 count:1];
          v99[4] = v58;
          v98[5] = kQPQUOutputIntentScoresKey;
          CFIndex v59 = [NSNumber numberWithInt:1];
          long long v95 = v59;
          CFIndex v60 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v95 count:1];
          v99[5] = v60;
          v98[6] = kQPQUOutputIsUnsafeKey;
          long long v61 = [NSNumber numberWithBool:0];
          v99[6] = v61;
          v98[7] = kQPQUOutputUnsafeConfidenceScoreKey;
          uint64_t v62 = [NSNumber numberWithInt:0];
          uint64_t v94 = v62;
          uint64_t v63 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v94 count:1];
          v99[7] = v63;
          v99[8] = obj;
          v98[8] = kQPQUOutputTokenInfoKey;
          v98[9] = @"debugDescription";
          v99[9] = @"LLM QU";
          uint64_t v64 = [NSDictionary dictionaryWithObjects:v99 forKeys:v98 count:10];

          *(void *)&long long v90 = v64;
          *(void *)unint64_t v100 = (v87 - (uint64_t)v86) >> 4;
          std::allocate_shared[abi:ne180100]<QP::Parse,std::allocator<QP::Parse>,__CFString *&,unsigned long,long &,std::vector<std::shared_ptr<QP::ParseAttribute>> &,__CFDictionary const*&,void>(&cf, (uint64_t *)v100, &v84, &v86, (uint64_t *)&v90, buf);
          std::vector<std::shared_ptr<QP::Parse>>::push_back[abi:ne180100]((uint64_t *)(a1 + 72), (long long *)buf);
          *(unsigned char *)(a1 + 136) = 1;
          CFRelease(cf);
          if (*(void *)&buf[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
          }

          *(void *)buf = &v86;
          std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
          std::__tree<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>>>::destroy((uint64_t)v89, (void *)v89[1]);
          return;
        }
        if (llmParserLogger(void)::token != -1) {
          dispatch_once(&llmParserLogger(void)::token, &__block_literal_global_175);
        }
        if (os_log_type_enabled((os_log_t)llmParserLogger(void)::log, OS_LOG_TYPE_ERROR)) {
          QP::LLMParser::parseInternal();
        }
      }
      else
      {
        if (a4)
        {
          if (llmParserLogger(void)::token != -1) {
            dispatch_once(&llmParserLogger(void)::token, &__block_literal_global_175);
          }
          uint64_t v16 = llmParserLogger(void)::log;
          if (os_log_type_enabled((os_log_t)llmParserLogger(void)::log, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134217984;
            *(void *)&uint8_t buf[4] = a3;
            _os_log_impl(&dword_224D85000, v16, OS_LOG_TYPE_DEFAULT, "[QPNLU][qid=%ld] Got non-empty QU Parse from LLM spQUParse", buf, 0xCu);
          }
          if (llmParserLogger(void)::token != -1) {
            dispatch_once(&llmParserLogger(void)::token, &__block_literal_global_175);
          }
          if (os_log_type_enabled((os_log_t)llmParserLogger(void)::log, OS_LOG_TYPE_DEBUG)) {
            QP::LLMParser::parseInternal();
          }
          goto LABEL_38;
        }
        if (llmParserLogger(void)::token != -1) {
          dispatch_once(&llmParserLogger(void)::token, &__block_literal_global_175);
        }
        if (os_log_type_enabled((os_log_t)llmParserLogger(void)::log, OS_LOG_TYPE_ERROR)) {
          QP::LLMParser::parseInternal();
        }
      }
    }
  }
}

void sub_224DC3BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,_Unwind_Exception *exception_objecta,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  a71 = (uint64_t)&a33;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a71);
  std::__tree<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>>>::destroy((uint64_t)&a36, (void *)a37);
  _Unwind_Resume(a1);
}

void sub_224DC3D2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, std::__shared_weak_count *a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,void *a27,void *a28,void *a29)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  JUMPOUT(0x224DC3CF0);
}

void sub_224DC3D44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,void *a27,void *a28,void *a29)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  JUMPOUT(0x224DC3CF0);
}

void sub_224DC3D58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, std::__shared_weak_count *a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,void *a27,void *a28,void *a29)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  JUMPOUT(0x224DC3CF0);
}

void sub_224DC3D70()
{
}

void sub_224DC3D78()
{
}

void sub_224DC3D80()
{
}

void sub_224DC3D88()
{
}

void sub_224DC3D90()
{
  JUMPOUT(0x224DC3D98);
}

void QP::LLMParser::addTokenInfoAndAttr(QP::LLMParser *a1, void *a2, void *a3, void *a4, void *a5, CFIndex a6, CFIndex a7, CFIndex *a8, __CFString *theString, void *a10, void *a11, void *a12, unint64_t a13, uint64_t a14, uint64_t *a15, uint64_t a16)
{
  v91.CFIndex location = a6;
  v91.CFIndex length = a7;
  v142[1] = *MEMORY[0x263EF8340];
  id v20 = a5;
  id v81 = a12;
  id v90 = v20;
  EnumValueFromIntentArgCFStringRef String = getEnumValueFromIntentArgString((uint64_t)v20);
  uint64_t v82 = [NSNumber numberWithInteger:EnumValueFromIntentArgString];
  if (!*((unsigned char *)a1 + 137) && EnumValueFromIntentArgString == 1) {
    *((unsigned char *)a1 + 137) = 1;
  }
  if (*((unsigned char *)a1 + 138)
    || (unint64_t)(EnumValueFromIntentArgString - 64) > 0x28
    || ((1 << (EnumValueFromIntentArgString - 64)) & 0x10000000007) == 0)
  {
    if (!*((unsigned char *)a1 + 139) && EnumValueFromIntentArgString == 5) {
      *((unsigned char *)a1 + 139) = 1;
    }
  }
  else
  {
    *((unsigned char *)a1 + 138) = 1;
  }
  long long v93 = [MEMORY[0x263EFF9A0] dictionary];
  id v86 = a11;
  CFIndex v85 = a10;
  CFMutableDictionaryRef v22 = a2;
  id v83 = a4;
  id v84 = a3;
  long long v92 = v22;
  if ([v20 isEqualToString:@"QUPP_ARG_TIME"])
  {
    uint64_t v24 = QP::normalizeTimeString(v22, v23);

    CFMutableDictionaryRef v22 = (QP *)v24;
  }
  v94.CFIndex location = *a8;
  appendedCFStringRef String = (__CFString *)v22;
  v94.CFIndex length = [(QP *)v22 length];
  *a8 += v94.length + 1;
  if (CFStringGetLength(theString) >= 1 && *(unsigned char *)(*(void *)a1 + 31)) {
    CFStringAppend(theString, @" ");
  }
  CFStringAppend(theString, (CFStringRef)v22);
  if (QP::isECRSupportedLocale(v85, v25)
    && (([v20 isEqualToString:@"QUPP_ARG_PERSON"] & 1) != 0
     || ([v20 isEqualToString:@"QUPP_ARG_PERSON_SENDER"] & 1) != 0
     || [v20 isEqualToString:@"QUPP_ARG_PERSON_RECEIVER"]))
  {
    CFIndex v26 = [v86 objectForKeyedSubscript:v22];

    if (v26)
    {
      CFIndex v27 = [v86 objectForKeyedSubscript:v22];
      CFIndex v28 = v27;
      if (v27)
      {
        CFIndex v26 = [v27 objectForKey:@"visualIdentifier"];
        CFIndex v29 = [v28 objectForKey:@"personNames"];
        long long v97 = [v28 objectForKey:@"personEmails"];
      }
      else
      {
        long long v97 = 0;
        CFIndex v29 = 0;
        CFIndex v26 = 0;
      }
    }
    else
    {
      long long v97 = 0;
      CFIndex v29 = 0;
      CFIndex v28 = 0;
    }
    id v89 = 0;
    long long v95 = v26;
    if (v26 || v29 || v97)
    {
      id v87 = v28;
    }
    else
    {
      uint64_t v31 = *(void *)a1;
      BOOL v30 = (std::__shared_weak_count *)*((void *)a1 + 1);
      if (v30) {
        atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v32 = appendedString;
      *(void *)&long long v131 = 0;
      *((void *)&v131 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = &v131;
      uint64_t v132 = 0x3032000000;
      CFIndex v133 = __Block_byref_object_copy__4;
      uint64_t v134 = __Block_byref_object_dispose__4;
      id v135 = 0;
      uint64_t v125 = 0;
      long long v126 = &v125;
      uint64_t v127 = 0x3032000000;
      unint64_t v128 = __Block_byref_object_copy__4;
      unint64_t v129 = __Block_byref_object_dispose__4;
      id v130 = 0;
      dispatch_semaphore_t v33 = dispatch_semaphore_create(0);
      qos_class_t v34 = qos_class_self();
      uint64_t v35 = dispatch_get_global_queue(v34, 0);
      *(void *)&long long block = MEMORY[0x263EF8330];
      *((void *)&block + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = 3321888768;
      uint64_t v115 = ___ZN2QPL28visualIdentifiersWithTimeoutEP8NSStringb27QPECRClientEntityFilterTypebNSt3__110shared_ptrINS_19ParserConfigurationEEEPU15__autoreleasingP7NSError_block_invoke;
      unint64_t v116 = &unk_26D830B78;
      uint64_t v121 = v31;
      CFRange v122 = v30;
      if (v30) {
        atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      CFRange v119 = &v131;
      uint64_t v36 = v32;
      __int16 v124 = 256;
      uint64_t v123 = 1;
      long long v117 = v36;
      uint64_t v120 = &v125;
      uint64_t v37 = v33;
      std::string v118 = v37;
      dispatch_async(v35, &block);

      if (*(unsigned char *)(v31 + 34)) {
        dispatch_time_t v38 = -1;
      }
      else {
        dispatch_time_t v38 = dispatch_time(0, 100000000);
      }
      if (dispatch_semaphore_wait(v37, v38))
      {
        unint64_t v80 = (__CFString *)100;
        CFIndex v39 = [NSString stringWithFormat:@"ECR timed out after %dms"];
        CFIndex v40 = (void *)MEMORY[0x263F087E8];
        uint64_t v141 = *MEMORY[0x263F08320];
        v142[0] = v39;
        long long v41 = [NSDictionary dictionaryWithObjects:v142 forKeys:&v141 count:1];
        uint64_t v42 = [v40 errorWithDomain:@"com.apple.QueryParser.QueryUnderstandingError" code:-2002 userInfo:v41];
        CFIndex v43 = (void *)v126[5];
        v126[5] = v42;
      }
      id v44 = (id) v126[5];
      id v87 = *(id *)(*((void *)&v131 + 1) + 40);

      if (v122) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v122);
      }

      _Block_object_dispose(&v125, 8);
      _Block_object_dispose(&v131, 8);

      id v89 = v44;
      if (v30) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v30);
      }
      if (v87)
      {
        uint64_t v45 = [v87 objectForKey:@"visualIdentifier"];
        CFIndex v29 = [v87 objectForKey:@"personNames"];
        long long v97 = [v87 objectForKey:@"personEmails"];
        long long v95 = (void *)v45;
      }
      else
      {
        long long v97 = 0;
        CFIndex v29 = 0;
        long long v95 = 0;
      }
      if (v89)
      {
        if (llmParserLogger(void)::token != -1) {
          dispatch_once(&llmParserLogger(void)::token, &__block_literal_global_175);
        }
        BOOL v46 = (id)llmParserLogger(void)::log;
        if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR)) {
          QP::LLMParser::addTokenInfoAndAttr();
        }

        if (atomic_fetch_add(&sQUECRErrorCount, 1u) == 25)
        {
          if (llmParserLogger(void)::token != -1) {
            dispatch_once(&llmParserLogger(void)::token, &__block_literal_global_175);
          }
          uint64_t v47 = (id)llmParserLogger(void)::log;
          if (os_log_type_enabled(v47, OS_LOG_TYPE_FAULT)) {
            QP::LLMParser::addTokenInfoAndAttr();
          }
        }
      }
      else
      {
        id v89 = 0;
      }
    }
    if ([v95 count] || objc_msgSend(v29, "count"))
    {
      [v86 setObject:v87 forKeyedSubscript:appendedString];
      uint64_t v48 = +[QPEntityResolutionPrefixCache sharedCache];
      [v48 cacheGroundedToken:appendedString];

      if (llmParserLogger(void)::token != -1) {
        dispatch_once(&llmParserLogger(void)::token, &__block_literal_global_175);
      }
      std::string::size_type v49 = (id)llmParserLogger(void)::log;
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG)) {
        QP::LLMParser::addTokenInfoAndAttr();
      }
    }
  }
  else
  {
    id v89 = 0;
    long long v97 = 0;
    CFIndex v29 = 0;
    long long v95 = 0;
    id v87 = 0;
  }
  if ([v90 isEqualToString:@"QUPP_ARG_PERSON_SELF"])
  {
    id v50 = getMeCardData();
    CFIndex v51 = v50;
    if (v50)
    {
      long long v96 = [v50 objectForKey:@"personNames"];

      uint64_t v52 = [v51 objectForKey:@"personEmails"];

      long long v97 = (__CFArray *)v52;
    }
    else
    {
      long long v96 = (__CFArray *)v29;
    }
  }
  else
  {
    long long v96 = (__CFArray *)v29;
  }
  id v99 = objc_alloc_init(MEMORY[0x263EFF980]);
  if ([(__CFArray *)v96 count])
  {
    long long v112 = 0u;
    long long v113 = 0u;
    long long v110 = 0u;
    long long v111 = 0u;
    obuint64_t j = v96;
    uint64_t v53 = [(__CFArray *)obj countByEnumeratingWithState:&v110 objects:v140 count:16];
    if (v53)
    {
      uint64_t v54 = *(void *)v111;
      do
      {
        for (uint64_t i = 0; i != v53; ++i)
        {
          if (*(void *)v111 != v54) {
            objc_enumerationMutation(obj);
          }
          CFStringRef v56 = *(const __CFString **)(*((void *)&v110 + 1) + 8 * i);
          id v57 = objc_alloc_init(MEMORY[0x263EFF980]);
          uint64_t v58 = *((void *)a1 + 4);
          uint64_t v104 = MEMORY[0x263EF8330];
          uint64_t v105 = 3221225472;
          uint64_t v106 = ___ZN2QP9LLMParser19addTokenInfoAndAttrEPK10__CFStringS3_S3_S3_7CFRangePlPS1_PK10__CFLocaleP14__CFDictionaryP9__CFArraylRNSt3__13mapINSE_12basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEENSF_ISL_NSE_3setISL_NSE_4lessISL_EENSJ_ISL_EEEESO_NSJ_INSE_4pairIKSL_SQ_EEEEEESO_NSJ_INSR_ISS_SV_EEEEEERNSE_6vectorINSE_10shared_ptrINS_14ParseAttributeEEENSJ_IS13_EEEEl_block_invoke;
          uint64_t v107 = &unk_2647057F0;
          CFStringRef v108 = v56;
          id v59 = v57;
          id v109 = v59;
          QP::Lexer::tokenize(v58, v56);
          if ([v59 count]) {
            [v99 addObject:v59];
          }
        }
        uint64_t v53 = [(__CFArray *)obj countByEnumeratingWithState:&v110 objects:v140 count:16];
      }
      while (v53);
    }
  }
  [v93 setObject:v83 forKeyedSubscript:kQPQUOutputTokenRawTextKey];
  [v93 setObject:v99 forKeyedSubscript:kQPQUOutputECRGroundNamesTokenKey];
  if (v96) {
    CFIndex v60 = v96;
  }
  else {
    CFIndex v60 = (__CFArray *)MEMORY[0x263EFFA68];
  }
  [v93 setObject:v60 forKeyedSubscript:kQPQUOutputECRGroundNamesKey];
  [v93 setObject:appendedString forKeyedSubscript:kQPQUOutputTokenKey];
  [v93 setObject:v84 forKeyedSubscript:kQPQUOutputLemmaKey];
  long long v139 = v82;
  long long v61 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v139 count:1];
  [v93 setObject:v61 forKeyedSubscript:kQPQUOutputTokenArgIdsKey];

  id v138 = v90;
  uint64_t v62 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v138 count:1];
  [v93 setObject:v62 forKeyedSubscript:kQPQUOutputTokenArgLabelsKey];

  uint64_t v63 = [NSNumber numberWithInt:1];
  unint64_t v137 = v63;
  uint64_t v64 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v137 count:1];
  [v93 setObject:v64 forKeyedSubscript:kQPQUOutputTokenArgScoresKey];

  int v65 = [MEMORY[0x263F08D40] valueWithRange:v94];
  [v93 setObject:v65 forKeyedSubscript:kQPQUOutputTokenRangeKey];

  [v93 setObject:MEMORY[0x263EFFA68] forKeyedSubscript:kQPQUOutputSpanTypesKey];
  int v66 = [NSNumber numberWithLong:a13];
  uint64_t v136 = v66;
  std::string v67 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v136 count:1];
  [v93 setObject:v67 forKeyedSubscript:kQPQUOutputTokenAttributeIndexesKey];

  CFIndex v68 = (void *)[v93 copy];
  [v81 addObject:v68];

  long long v131 = 0uLL;
  id v69 = v90;
  std::string::basic_string[abi:ne180100]<0>(&block, (char *)[v69 UTF8String]);
  long long v70 = std::__tree<std::string>::find<std::string>(a14, (void **)&block);
  if (SHIBYTE(v115) < 0) {
    operator delete((void *)block);
  }
  if ((void **)(a14 + 8) != v70)
  {
    CFArrayRef v71 = (void **)v70[7];
    if (v71 != v70 + 8)
    {
      CFAllocatorRef v72 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      do
      {
        long long v73 = (const char *)(v71 + 4);
        if (*((char *)v71 + 55) < 0) {
          long long v73 = *(const char **)v73;
        }
        CFStringRef v74 = CFStringCreateWithCString(v72, v73, 0x8000100u);
        long long v103 = v131;
        if (*((void *)&v131 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v131 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        QP::LLMParser::gatherAttributes(a1, (const __CFString *)v92, v94, v91, v74, a13, &v101, v80, v96, v97, (const __CFDictionary *)v95);
        QP::LLMParser::safeMakeGroupAttribute(&v103, &v101, &block);
        long long v75 = block;
        long long block = 0uLL;
        uint64_t v76 = (std::__shared_weak_count *)*((void *)&v131 + 1);
        long long v131 = v75;
        if (v76)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v76);
          if (*((void *)&block + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&block + 1));
          }
        }
        if (v102) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v102);
        }
        if (*((void *)&v103 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v103 + 1));
        }
        CFRelease(v74);
        uint64_t v77 = (void **)v71[1];
        if (v77)
        {
          do
          {
            unsigned long long v78 = v77;
            uint64_t v77 = (void **)*v77;
          }
          while (v77);
        }
        else
        {
          do
          {
            unsigned long long v78 = (void **)v71[2];
            BOOL v79 = *v78 == v71;
            CFArrayRef v71 = v78;
          }
          while (!v79);
        }
        CFArrayRef v71 = v78;
      }
      while (v78 != v70 + 8);
    }
    std::vector<std::shared_ptr<QP::ParseAttribute>>::push_back[abi:ne180100](a15, &v131);
    if (*((void *)&v131 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v131 + 1));
    }
  }
}

void sub_224DC4C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, uint64_t a19, void *a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,void *a58,uint64_t a59,uint64_t a60,uint64_t a61,std::__shared_weak_count *a62,uint64_t a63)
{
  if (a62) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a62);
  }

  _Block_object_dispose(&a65, 8);
  _Block_object_dispose(&a71, 8);

  if (v72) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v72);
  }

  _Unwind_Resume(a1);
}

void ___ZN2QP9LLMParser19addTokenInfoAndAttrEPK10__CFStringS3_S3_S3_7CFRangePlPS1_PK10__CFLocaleP14__CFDictionaryP9__CFArraylRNSt3__13mapINSE_12basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEENSF_ISL_NSE_3setISL_NSE_4lessISL_EENSJ_ISL_EEEESO_NSJ_INSE_4pairIKSL_SQ_EEEEEESO_NSJ_INSR_ISS_SV_EEEEEERNSE_6vectorINSE_10shared_ptrINS_14ParseAttributeEEENSJ_IS13_EEEEl_block_invoke(uint64_t a1, CFRange *a2)
{
  CFStringRef v3 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x263EFFB08], *(CFStringRef *)(a1 + 32), *a2);
  if (v3)
  {
    CFStringRef v4 = v3;
    [*(id *)(a1 + 40) addObject:v3];
    CFRelease(v4);
  }
}

void QP::LLMParser::parseArgument(const void ***a1, __CFString *a2, void *a3, CFIndex a4, CFIndex a5, CFIndex *a6, void *a7, __CFString *a8, void *a9, void *a10, unint64_t a11, uint64_t a12, uint64_t *a13, const void *a14)
{
  QP::Lexer::setString(a1[4], a2, 0, a14);
  uint64_t v16 = a1[4];
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v32 = 0;
  std::vector<NLToken>::__init_with_size[abi:ne180100]<NLToken*,NLToken*>(&v32, v16[57], (uint64_t)v16[58], 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)v16[58] - (unsigned char *)v16[57]) >> 3));
  uint64_t v18 = v32;
  uint64_t v17 = v33;
  if (v32 != v33)
  {
    CFDictionaryRef v19 = (const __CFDictionary *)a1[4][38];
    CFAllocatorRef v20 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    do
    {
      if ((*(unsigned char *)(v18 + 17) & 0xC) == 0)
      {
        CFMutableArrayRef v21 = (QP *)CFStringCreateWithSubstring(v20, a2, *(CFRange *)v18);
        uint64_t v23 = v21;
        if (v21)
        {
          CFStringRef Token = (const __CFString *)QP::normalizeQueryToken(v21, v22);
          if (Token)
          {
            if (CFStringGetLength(Token) >= 1)
            {
              CFDictionaryRef Value = (void *)CFDictionaryGetValue(v19, v23);
              QP::LLMParser::addTokenInfoAndAttr((QP::LLMParser *)a1, v23, Value, a2, a3, a4, a5, a6, a8, a7, a9, a10, a11, a12, a13, (uint64_t)a14);
            }
          }
        }
        CFRelease(v23);
      }
      v18 += 24;
    }
    while (v18 != v17);
    uint64_t v18 = v32;
  }
  if (v18)
  {
    uint64_t v33 = v18;
    operator delete((void *)v18);
  }
}

void sub_224DC5160(_Unwind_Exception *exception_object)
{
  CFStringRef v3 = *(void **)(v1 - 112);
  if (v3)
  {
    *(void *)(v1 - 104) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN2QP9LLMParser13parseInternalENSt3__110shared_ptrINS_5ParseEEElPK14__CFDictionary_block_invoke()
{
  uint64_t result = _os_feature_enabled_impl();
  QP::LLMParser::parseInternal(std::shared_ptr<QP::Parse>,long,__CFDictionary const*)::readFromGrountruth = result;
  return result;
}

void QP::LLMParser::clear(QP::LLMParser *this)
{
  *((unsigned char *)this + 136) = 0;
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)this + 8, 0);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__clear[abi:ne180100]((uint64_t *)this + 9);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__clear[abi:ne180100]((uint64_t *)this + 12);
  *(_DWORD *)((char *)this + 137) = 0;
}

void nlp::CFScopedPtr<__CFAttributedString const*>::reset(const void **a1, const void *a2)
{
  CFStringRef v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

uint64_t QP::LLMParser::getGroundTruthDataRef(QP::LLMParser *this, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  {
    QP::LLMParser::getGroundTruthDataRef(long)::_groundTruthDataRef = (uint64_t)CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  }
  if (llmParserLogger(void)::token != -1) {
    dispatch_once(&llmParserLogger(void)::token, &__block_literal_global_175);
  }
  CFStringRef v3 = llmParserLogger(void)::log;
  if (os_log_type_enabled((os_log_t)llmParserLogger(void)::log, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    uint64_t v7 = a2;
    _os_log_impl(&dword_224D85000, v3, OS_LOG_TYPE_DEFAULT, "[QPNLU][qid=%ld] started loading groundTruth predictions", buf, 0xCu);
  }
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = ___ZN2QP9LLMParser21getGroundTruthDataRefEl_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = a2;
  if (QP::LLMParser::getGroundTruthDataRef(long)::onceToken != -1) {
    dispatch_once(&QP::LLMParser::getGroundTruthDataRef(long)::onceToken, block);
  }
  return QP::LLMParser::getGroundTruthDataRef(long)::_groundTruthDataRef;
}

void sub_224DC53C4(_Unwind_Exception *a1)
{
}

void ___ZN2QP9LLMParser21getGroundTruthDataRefEl_block_invoke(uint64_t a1)
{
  uint64_t v72 = *MEMORY[0x263EF8340];
  CFIndex v39 = [MEMORY[0x263F086E0] bundleWithIdentifier:@"com.apple.QueryUnderstanding"];
  CFIndex v40 = [v39 pathForResource:@"groundTruth" ofType:@"json"];
  if (llmParserLogger(void)::token != -1) {
    dispatch_once(&llmParserLogger(void)::token, &__block_literal_global_175);
  }
  if (os_log_type_enabled((os_log_t)llmParserLogger(void)::log, OS_LOG_TYPE_DEBUG)) {
    ___ZN2QP9LLMParser21getGroundTruthDataRefEl_block_invoke_cold_6();
  }
  if (v40)
  {
    id v64 = 0;
    uint64_t v1 = [NSString stringWithContentsOfFile:v40 encoding:4 error:&v64];
    id v37 = v64;
    dispatch_time_t v38 = v1;
    if (v1)
    {
      if (llmParserLogger(void)::token != -1) {
        dispatch_once(&llmParserLogger(void)::token, &__block_literal_global_175);
      }
      if (os_log_type_enabled((os_log_t)llmParserLogger(void)::log, OS_LOG_TYPE_DEBUG)) {
        ___ZN2QP9LLMParser21getGroundTruthDataRefEl_block_invoke_cold_5();
      }
      uint64_t v36 = [v1 componentsSeparatedByString:@"\n"];
      uint64_t v48 = [MEMORY[0x263EFF980] array];
      long long v62 = 0u;
      long long v63 = 0u;
      long long v60 = 0u;
      long long v61 = 0u;
      obuint64_t j = v36;
      uint64_t v2 = [obj countByEnumeratingWithState:&v60 objects:v71 count:16];
      if (v2)
      {
        uint64_t v3 = *(void *)v61;
        do
        {
          uint64_t v4 = 0;
          do
          {
            if (*(void *)v61 != v3) {
              objc_enumerationMutation(obj);
            }
            CFStringRef v5 = *(void **)(*((void *)&v60 + 1) + 8 * v4);
            if ([v5 length])
            {
              uint64_t v6 = [v5 dataUsingEncoding:4];
              id v59 = 0;
              uint64_t v7 = [MEMORY[0x263F08900] JSONObjectWithData:v6 options:0 error:&v59];
              id v8 = v59;
              if (v8)
              {
                if (llmParserLogger(void)::token != -1) {
                  dispatch_once(&llmParserLogger(void)::token, &__block_literal_global_175);
                }
                uint64_t v9 = (id)llmParserLogger(void)::log;
                if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
                {
                  uint64_t v10 = *(void *)(a1 + 32);
                  uint64_t v11 = [v8 localizedDescription];
                  *(_DWORD *)buf = 134218242;
                  uint64_t v68 = v10;
                  __int16 v69 = 2112;
                  long long v70 = v11;
                  _os_log_error_impl(&dword_224D85000, v9, OS_LOG_TYPE_ERROR, "[QPNLU][qid=%ld] Error parsing JSON: %@", buf, 0x16u);
                }
              }
              else
              {
                [v48 addObject:v7];
              }
            }
            ++v4;
          }
          while (v2 != v4);
          uint64_t v2 = [obj countByEnumeratingWithState:&v60 objects:v71 count:16];
        }
        while (v2);
      }

      if (v48)
      {
        if (llmParserLogger(void)::token != -1) {
          dispatch_once(&llmParserLogger(void)::token, &__block_literal_global_175);
        }
        if (os_log_type_enabled((os_log_t)llmParserLogger(void)::log, OS_LOG_TYPE_DEBUG)) {
          ___ZN2QP9LLMParser21getGroundTruthDataRefEl_block_invoke_cold_4();
        }
        long long v57 = 0u;
        long long v58 = 0u;
        long long v55 = 0u;
        long long v56 = 0u;
        id v41 = v48;
        uint64_t v45 = [v41 countByEnumeratingWithState:&v55 objects:v66 count:16];
        if (v45)
        {
          uint64_t v44 = *(void *)v56;
          do
          {
            for (uint64_t i = 0; i != v45; ++i)
            {
              if (*(void *)v56 != v44) {
                objc_enumerationMutation(v41);
              }
              uint64_t v47 = *(void **)(*((void *)&v55 + 1) + 8 * i);
              CFIndex v43 = [v47 objectForKeyedSubscript:@"arguments"];
              CFTypeID v12 = objc_opt_new();
              long long v53 = 0u;
              long long v54 = 0u;
              long long v51 = 0u;
              long long v52 = 0u;
              id v50 = v43;
              uint64_t v13 = [v50 countByEnumeratingWithState:&v51 objects:v65 count:16];
              if (v13)
              {
                uint64_t v14 = *(void *)v52;
                do
                {
                  for (uint64_t j = 0; j != v13; ++j)
                  {
                    if (*(void *)v52 != v14) {
                      objc_enumerationMutation(v50);
                    }
                    uint64_t v16 = *(void **)(*((void *)&v51 + 1) + 8 * j);
                    uint64_t v17 = objc_opt_new();
                    uint64_t v18 = [v16 objectForKeyedSubscript:@"start_char_index"];
                    int v19 = [v18 intValue];

                    CFAllocatorRef v20 = [v16 objectForKeyedSubscript:@"end_char_index"];
                    LODWORD(v18) = [v20 intValue];

                    CFMutableArrayRef v21 = [v16 objectForKeyedSubscript:@"label"];
                    [v17 setValue:v21 forKey:@"textLabel"];

                    CFMutableDictionaryRef v22 = [v16 objectForKeyedSubscript:@"text"];
                    [v17 setValue:v22 forKey:@"text"];

                    uint64_t v23 = objc_msgSend(MEMORY[0x263F08D40], "valueWithRange:", v19, (int)v18 - (uint64_t)v19);
                    [v17 setValue:v23 forKey:@"textRange"];

                    [v12 addObject:v17];
                  }
                  uint64_t v13 = [v50 countByEnumeratingWithState:&v51 objects:v65 count:16];
                }
                while (v13);
              }

              uint64_t v24 = objc_opt_new();
              CFStringRef v25 = [v47 objectForKeyedSubscript:@"intent"];
              [v24 setValue:v25 forKey:@"intentLabel"];

              CFIndex v26 = [v47 objectForKeyedSubscript:@"isPQA"];
              [v24 setValue:v26 forKey:@"isPQA"];

              [v24 setValue:v12 forKey:@"arguments"];
              CFIndex v27 = (__CFDictionary *)QP::LLMParser::getGroundTruthDataRef(long)::_groundTruthDataRef;
              CFIndex v28 = [v47 objectForKeyedSubscript:@"query"];
              CFDictionarySetValue(v27, v28, v24);
            }
            uint64_t v45 = [v41 countByEnumeratingWithState:&v55 objects:v66 count:16];
          }
          while (v45);
        }

        if (llmParserLogger(void)::token != -1) {
          dispatch_once(&llmParserLogger(void)::token, &__block_literal_global_175);
        }
        CFIndex v29 = llmParserLogger(void)::log;
        if (os_log_type_enabled((os_log_t)llmParserLogger(void)::log, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v30 = *(void *)(a1 + 32);
          *(_DWORD *)buf = 134217984;
          uint64_t v68 = v30;
          _os_log_impl(&dword_224D85000, v29, OS_LOG_TYPE_DEFAULT, "[QPNLU][qid=%ld] Sucessfully loaded groundTruth predictions and parsed them to jsonObjects", buf, 0xCu);
        }
      }
      else
      {
        if (llmParserLogger(void)::token != -1) {
          dispatch_once(&llmParserLogger(void)::token, &__block_literal_global_175);
        }
        uint64_t v33 = (id)llmParserLogger(void)::log;
        if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
        {
          uint64_t v34 = *(void *)(a1 + 32);
          uint64_t v35 = [v37 localizedDescription];
          ___ZN2QP9LLMParser21getGroundTruthDataRefEl_block_invoke_cold_3(v35, (uint64_t)buf, v34);
        }
      }
    }
    else
    {
      if (llmParserLogger(void)::token != -1) {
        dispatch_once(&llmParserLogger(void)::token, &__block_literal_global_175);
      }
      obuint64_t j = (id)llmParserLogger(void)::log;
      if (os_log_type_enabled(obj, OS_LOG_TYPE_ERROR))
      {
        uint64_t v31 = *(void *)(a1 + 32);
        uint64_t v32 = [v37 localizedDescription];
        ___ZN2QP9LLMParser21getGroundTruthDataRefEl_block_invoke_cold_2(v32, (uint64_t)buf, v31);
      }
    }
  }
  else
  {
    if (llmParserLogger(void)::token != -1) {
      dispatch_once(&llmParserLogger(void)::token, &__block_literal_global_175);
    }
    if (os_log_type_enabled((os_log_t)llmParserLogger(void)::log, OS_LOG_TYPE_ERROR)) {
      ___ZN2QP9LLMParser21getGroundTruthDataRefEl_block_invoke_cold_1();
    }
  }
}

void sub_224DC5C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  _Unwind_Resume(a1);
}

void ___ZL15llmParserLoggerv_block_invoke()
{
  uint64_t v0 = _nlpLoggingSubsystem();
  os_log_t v1 = os_log_create(v0, "LLMParser");
  uint64_t v2 = (void *)llmParserLogger(void)::log;
  llmParserLogger(void)::log = (uint64_t)v1;
}

std::string *std::pair<std::vector<std::string>,std::vector<std::pair<double,double>>>::pair[abi:ne180100]<std::vector<std::string>&,std::vector<std::pair<double,double>>&,0>(std::string *a1, long long **a2, long long **a3)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a1, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  a1[1].__r_.__value_.__r.__words[0] = 0;
  a1[1].__r_.__value_.__l.__size_ = 0;
  a1[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::pair<double,double>>::__init_with_size[abi:ne180100]<std::pair<double,double>*,std::pair<double,double>*>((char *)&a1[1], *a3, a3[1], a3[1] - *a3);
  return a1;
}

void sub_224DC5EB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_224DC5F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::string>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  uint64_t v4 = this;
  uint64_t v11 = this;
  CFTypeID v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        uint64_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      uint64_t v6 = (long long *)((char *)v6 + 24);
      CFTypeID v12 = ++v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_224DC6058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0) {
      operator delete(*(void **)(v1 - 24));
    }
    v1 -= 24;
  }
}

char *std::vector<std::pair<double,double>>::__init_with_size[abi:ne180100]<std::pair<double,double>*,std::pair<double,double>*>(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__vallocate[abi:ne180100](result, a4);
    long long v7 = (_OWORD *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = v7;
  }
  return result;
}

void sub_224DC6144(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<QP::ParseAttribute,std::allocator<QP::ParseAttribute>,CFRange &,CFRange,int,int,void>@<X0>(_OWORD *a1@<X1>, long long *a2@<X2>, int *a3@<X3>, int *a4@<X4>, void *a5@<X8>)
{
  char v10 = operator new(0xA8uLL);
  uint64_t result = std::__shared_ptr_emplace<QP::ParseAttribute>::__shared_ptr_emplace[abi:ne180100]<CFRange &,CFRange,int,int,std::allocator<QP::ParseAttribute>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_224DC61C8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<QP::ParseAttribute>::__shared_ptr_emplace[abi:ne180100]<CFRange &,CFRange,int,int,std::allocator<QP::ParseAttribute>,0>(void *a1, _OWORD *a2, long long *a3, int *a4, int *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D830700;
  std::construct_at[abi:ne180100]<QP::ParseAttribute,CFRange,CFRange&,int,int,QP::ParseAttribute*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_224DC6224(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void *std::vector<std::shared_ptr<QP::ParseAttribute>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<QP::ParseAttribute>*>,std::__wrap_iter<std::shared_ptr<QP::ParseAttribute>*>>(uint64_t *a1, void *a2, uint64_t *a3, void *a4, uint64_t a5)
{
  CFStringRef v5 = a2;
  if (a5 >= 1)
  {
    long long v7 = a3;
    uint64_t v11 = a1[2];
    uint64_t v9 = a1 + 2;
    uint64_t v10 = v11;
    unint64_t v12 = *(v9 - 1);
    if (a5 <= (uint64_t)(v11 - v12) >> 4)
    {
      uint64_t v19 = v12 - (void)a2;
      uint64_t v20 = (uint64_t)(v12 - (void)a2) >> 4;
      if (v20 >= a5)
      {
        CFMutableArrayRef v21 = &a3[2 * a5];
      }
      else
      {
        CFMutableArrayRef v21 = &a3[2 * v20];
        a1[1] = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<QP::ParseAttribute>>,std::shared_ptr<QP::ParseAttribute>*,std::shared_ptr<QP::ParseAttribute>*,std::shared_ptr<QP::ParseAttribute>*>((uint64_t)v9, v21, a4, (void *)*(v9 - 1));
        if (v19 < 1) {
          return v5;
        }
      }
      std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__move_range((uint64_t)a1, v5, v12, (uint64_t)&v5[2 * a5]);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<QP::GraphStructureStack::Node> *,std::shared_ptr<QP::GraphStructureStack::Node> *,std::shared_ptr<QP::GraphStructureStack::Node> *>((uint64_t)v26, v7, v21, v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 + ((uint64_t)(v12 - *a1) >> 4);
      if (v14 >> 60) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v15 = ((uint64_t)a2 - v13) >> 4;
      uint64_t v16 = v10 - v13;
      if (v16 >> 3 > v14) {
        unint64_t v14 = v16 >> 3;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v14;
      }
      v26[4] = v9;
      if (v17) {
        uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>>((uint64_t)v9, v17);
      }
      else {
        uint64_t v18 = 0;
      }
      CFMutableDictionaryRef v22 = (uint64_t *)&v18[16 * v15];
      v26[0] = v18;
      v26[1] = v22;
      v26[3] = &v18[16 * v17];
      uint64_t v23 = &v22[2 * a5];
      do
      {
        *CFMutableDictionaryRef v22 = *v7;
        uint64_t v24 = v7[1];
        v22[1] = v24;
        if (v24) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
        }
        v22 += 2;
        v7 += 2;
      }
      while (v22 != v23);
      void v26[2] = v23;
      CFStringRef v5 = (void *)std::vector<std::shared_ptr<QP::ParseAttribute>>::__swap_out_circular_buffer(a1, v26, v5);
      std::__split_buffer<std::shared_ptr<QP::GraphStructureStack::Node>>::~__split_buffer(v26);
    }
  }
  return v5;
}

void sub_224DC63C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::shared_ptr<QP::ParseAttribute>>::__swap_out_circular_buffer(uint64_t *a1, void *a2, void *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<QP::ParseAttribute>>,std::reverse_iterator<std::shared_ptr<QP::ParseAttribute>*>,std::reverse_iterator<std::shared_ptr<QP::ParseAttribute>*>,std::reverse_iterator<std::shared_ptr<QP::ParseAttribute>*>>((uint64_t)(a1 + 2), (uint64_t)a3, a3, *a1, (void *)*a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<QP::ParseAttribute>>,std::shared_ptr<QP::ParseAttribute>*,std::shared_ptr<QP::ParseAttribute>*,std::shared_ptr<QP::ParseAttribute>*>(v7, (uint64_t)a3, a1[1], (_OWORD *)a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

_OWORD *std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<QP::ParseAttribute>>,std::shared_ptr<QP::ParseAttribute>*,std::shared_ptr<QP::ParseAttribute>*,std::shared_ptr<QP::ParseAttribute>*>(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v4 = a4;
  uint64_t v9 = a4;
  uint64_t v8 = a4;
  v6[0] = a1;
  v6[1] = &v8;
  v6[2] = &v9;
  if (a2 != a3)
  {
    do
    {
      *v4++ = *(_OWORD *)a2;
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      a2 += 16;
    }
    while (a2 != a3);
    uint64_t v9 = v4;
  }
  char v7 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<QP::ParseAttribute>>,std::shared_ptr<QP::ParseAttribute>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v6);
  return v4;
}

BOOL std::string_view::starts_with[abi:ne180100](void *a1, void *__s2, size_t a3)
{
  return a1[1] >= a3 && std::string_view::compare[abi:ne180100](a1, 0, a3, __s2, a3) == 0;
}

uint64_t std::string_view::compare[abi:ne180100](void *a1, unint64_t a2, size_t a3, void *__s2, size_t a5)
{
  unint64_t v5 = a1[1];
  BOOL v6 = v5 >= a2;
  size_t v7 = v5 - a2;
  if (!v6) {
    std::__throw_out_of_range[abi:ne180100]("string_view::substr");
  }
  uint64_t v9 = (const void *)(*a1 + a2);
  if (v7 >= a3) {
    size_t v10 = a3;
  }
  else {
    size_t v10 = v7;
  }
  if (a5 >= v10) {
    size_t v11 = v10;
  }
  else {
    size_t v11 = a5;
  }
  LODWORD(result) = memcmp(v9, __s2, v11);
  if (v10 < a5) {
    unsigned int v13 = -1;
  }
  else {
    unsigned int v13 = 1;
  }
  if (v10 == a5) {
    unsigned int v13 = 0;
  }
  if (result) {
    return result;
  }
  else {
    return v13;
  }
}

BOOL std::string_view::ends_with[abi:ne180100](void *a1, void *__s2, size_t a3)
{
  size_t v3 = a1[1];
  return v3 >= a3
      && std::string_view::compare[abi:ne180100](a1, v3 - a3, 0xFFFFFFFFFFFFFFFFLL, __s2, a3) == 0;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    unint64_t v10 = this->__r_.__value_.__r.__words[2];
    unint64_t v9 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < __n)
    {
      std::string::size_type size = this->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    unint64_t v6 = HIBYTE(v10);
    size_t v7 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    size_t v7 = this;
    if (__n > 0x16)
    {
      std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      unint64_t v9 = 22;
LABEL_6:
      std::string::__grow_by_and_replace(this, v9, __n - v9, size, 0, size, __n, __s);
      return this;
    }
  }
  if (__n)
  {
    memmove(v7, __s, __n);
    LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0) {
    this->__r_.__value_.__l.__size_ = __n;
  }
  else {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
  }
  v7->__r_.__value_.__s.__data_[__n] = 0;
  return this;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s)
{
  std::string::size_type v4 = strlen(__s);
  return std::string::__assign_external(this, __s, v4);
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4nlp::CFScopedPtr<__CFDate const*>::reset(&a9, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4nlp::CFScopedPtr<__CFDate const*>::reset(&a9, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__4(uint64_t a1)
{
}

void ___ZN2QPL28visualIdentifiersWithTimeoutEP8NSStringb27QPECRClientEntityFilterTypebNSt3__110shared_ptrINS_19ParserConfigurationEEEPU15__autoreleasingP7NSError_block_invoke(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)(a1 + 64) + 57)) {
    uint64_t v2 = off_264704398;
  }
  else {
    uint64_t v2 = &off_2647043A0;
  }
  size_t v3 = [(__objc2_class *)*v2 sharedClient];
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 88);
  uint64_t v6 = *(void *)(a1 + 80);
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(a1 + 64) + 59);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 89);
  id v16 = 0;
  uint64_t v9 = [v3 visualIdentifiersWithText:v4 allowPrefixSearch:v5 entityFilterType:v6 includeInferredNames:v7 allowGroundingToNamesAndEmails:v8 error:&v16];
  id v10 = v16;
  uint64_t v11 = *(void *)(*(void *)(a1 + 48) + 8);
  unint64_t v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 4nlp::CFScopedPtr<__CFDate const*>::reset(&a9, 0) = v9;

  uint64_t v13 = *(void *)(*(void *)(a1 + 56) + 8);
  unint64_t v14 = *(void **)(v13 + 40);
  *(void *)(v13 + 4nlp::CFScopedPtr<__CFDate const*>::reset(&a9, 0) = v10;
  id v15 = v10;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_224DC6804(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_64c52_ZTSNSt3__110shared_ptrIN2QP19ParserConfigurationEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 72);
  *(void *)(result + 64) = *(void *)(a2 + 64);
  *(void *)(result + 72) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_ea8_64c52_ZTSNSt3__110shared_ptrIN2QP19ParserConfigurationEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 72);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void *std::vector<NLToken>::__init_with_size[abi:ne180100]<NLToken*,NLToken*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_224DC68A0(_Unwind_Exception *exception_object)
{
  size_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void nlp::CFScopedPtr<__CFDate const*>::reset(const void **a1, const void *a2)
{
  uint64_t v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

std::string *std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,char const*&,CFRange &,void>@<X0>(char **a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = (std::string *)operator new(0x90uLL);
  uint64_t result = std::__shared_ptr_emplace<QP::Lexeme>::__shared_ptr_emplace[abi:ne180100]<char const*&,CFRange &,std::allocator<QP::Lexeme>,0>(v6, a1, a2);
  *a3 = v6 + 1;
  a3[1] = v6;
  return result;
}

void sub_224DC6944(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<QP::Lexeme>::__shared_ptr_emplace[abi:ne180100]<char const*&,CFRange &,std::allocator<QP::Lexeme>,0>(std::string *a1, char **a2, uint64_t a3)
{
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26D830A40;
  std::construct_at[abi:ne180100]<QP::Lexeme,char const*&,CFRange &,QP::Lexeme*>(a1 + 1, a2, a3);
  return a1;
}

void sub_224DC69A0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

std::string *std::construct_at[abi:ne180100]<QP::Lexeme,char const*&,CFRange &,QP::Lexeme*>(std::string *a1, char **a2, uint64_t a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, *a2);
  QP::Lexeme::Lexeme(a1, (long long *)__p, *(void *)a3, *(void *)(a3 + 8));
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_224DC6A10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<QP::ParseAttribute,std::allocator<QP::ParseAttribute>,CFRange &,CFRange &,int,int,void>@<X0>(_OWORD *a1@<X1>, long long *a2@<X2>, int *a3@<X3>, int *a4@<X4>, void *a5@<X8>)
{
  id v10 = operator new(0xA8uLL);
  uint64_t result = std::__shared_ptr_emplace<QP::ParseAttribute>::__shared_ptr_emplace[abi:ne180100]<CFRange &,CFRange &,int,int,std::allocator<QP::ParseAttribute>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_224DC6A94(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<QP::ParseAttribute>::__shared_ptr_emplace[abi:ne180100]<CFRange &,CFRange &,int,int,std::allocator<QP::ParseAttribute>,0>(void *a1, _OWORD *a2, long long *a3, int *a4, int *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D830700;
  std::construct_at[abi:ne180100]<QP::ParseAttribute,CFRange,CFRange&,int,int,QP::ParseAttribute*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_224DC6AF0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

std::string *std::allocate_shared[abi:ne180100]<QP::LexemeValue,std::allocator<QP::LexemeValue>,std::string &,std::string,CFRange &,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  size_t v8 = (std::string *)operator new(0xA8uLL);
  uint64_t result = std::__shared_ptr_emplace<QP::LexemeValue>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::string,CFRange &,std::allocator<QP::LexemeValue>,0>(v8, a1, a2, a3);
  *a4 = v8 + 1;
  a4[1] = v8;
  return result;
}

void sub_224DC6B64(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<QP::LexemeValue>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::string,CFRange &,std::allocator<QP::LexemeValue>,0>(std::string *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26D830BB8;
  std::construct_at[abi:ne180100]<QP::LexemeValue,std::string &,std::string,CFRange &,QP::LexemeValue*>(a1 + 1, a2, a3, a4);
  return a1;
}

void sub_224DC6BC0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<QP::LexemeValue>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D830BB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QP::LexemeValue>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D830BB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A623E20);
}

void std::__shared_ptr_emplace<QP::LexemeValue>::__on_zero_shared(uint64_t a1)
{
}

std::string *std::construct_at[abi:ne180100]<QP::LexemeValue,std::string &,std::string,CFRange &,QP::LexemeValue*>(std::string *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v10 = *(std::string *)a2;
  }
  *(_OWORD *)std::string __p = *(_OWORD *)a3;
  uint64_t v9 = *(void *)(a3 + 16);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  QP::LexemeValue::LexemeValue(this, (uint64_t)&v10, (long long *)__p, *(void *)a4, *(void *)(a4 + 8));
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  return this;
}

void sub_224DC6D08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::construct_at[abi:ne180100]<QP::LexemeValue,std::string &,std::string,CFRange &,QP::LexemeValue*>((uint64_t)&a16);
  _Unwind_Resume(a1);
}

std::string *QP::LexemeValue::LexemeValue(std::string *this, uint64_t a2, long long *a3, uint64_t a4, std::string::size_type a5)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  QP::Lexeme::Lexeme(this, (long long *)&__p, a4, a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v9 = this + 5;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v10 = *a3;
    this[5].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  return this;
}

void sub_224DC6DE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  QP::Lexeme::~Lexeme(v14);
  _Unwind_Resume(a1);
}

std::string *std::allocate_shared[abi:ne180100]<QP::LexemeGroundedPerson,std::allocator<QP::LexemeGroundedPerson>,std::string &,std::vector<std::string> &,std::vector<std::pair<double,double>> &,CFRange &,void>@<X0>(uint64_t a1@<X1>, long long **a2@<X2>, long long **a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  long long v10 = (std::string *)operator new(0xC0uLL);
  uint64_t result = std::__shared_ptr_emplace<QP::LexemeGroundedPerson>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::vector<std::string> &,std::vector<std::pair<double,double>> &,CFRange &,std::allocator<QP::LexemeGroundedPerson>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 1;
  a5[1] = v10;
  return result;
}

void sub_224DC6E78(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<QP::LexemeGroundedPerson>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::vector<std::string> &,std::vector<std::pair<double,double>> &,CFRange &,std::allocator<QP::LexemeGroundedPerson>,0>(std::string *a1, uint64_t a2, long long **a3, long long **a4, uint64_t a5)
{
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26D830C08;
  std::construct_at[abi:ne180100]<QP::LexemeGroundedPerson,std::string &,std::vector<std::string> &,std::vector<std::pair<double,double>> &,CFRange &,QP::LexemeGroundedPerson*>(a1 + 1, a2, a3, a4, a5);
  return a1;
}

void sub_224DC6ED4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<QP::LexemeGroundedPerson>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D830C08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QP::LexemeGroundedPerson>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D830C08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A623E20);
}

void std::__shared_ptr_emplace<QP::LexemeGroundedPerson>::__on_zero_shared(uint64_t a1)
{
}

std::string *std::construct_at[abi:ne180100]<QP::LexemeGroundedPerson,std::string &,std::vector<std::string> &,std::vector<std::pair<double,double>> &,CFRange &,QP::LexemeGroundedPerson*>(std::string *a1, uint64_t a2, long long **a3, long long **a4, uint64_t a5)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v14 = *(std::string *)a2;
  }
  memset(&v13, 0, sizeof(v13));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v13, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  std::string __p = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  std::vector<std::pair<double,double>>::__init_with_size[abi:ne180100]<std::pair<double,double>*,std::pair<double,double>*>((char *)&__p, *a4, a4[1], a4[1] - *a4);
  QP::LexemeGroundedPerson::LexemeGroundedPerson(a1, (uint64_t)&v14, (long long **)&v13, (long long **)&__p, *(void *)a5, *(void *)(a5 + 8));
  if (__p)
  {
    uint64_t v11 = __p;
    operator delete(__p);
  }
  id v15 = &v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_224DC7060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (__p) {
    operator delete(__p);
  }
  *(void *)(v20 - 4nlp::CFScopedPtr<__CFDate const*>::reset(&a9, 0) = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v20 - 40));
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(a1);
}

std::string *QP::LexemeGroundedPerson::LexemeGroundedPerson(std::string *this, uint64_t a2, long long **a3, long long **a4, uint64_t a5, std::string::size_type a6)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  QP::Lexeme::Lexeme(this, (long long *)&__p, a5, a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  this[5].__r_.__value_.__r.__words[0] = 0;
  this[5].__r_.__value_.__l.__size_ = 0;
  this[5].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(this + 5, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  this[6].__r_.__value_.__r.__words[0] = 0;
  this[6].__r_.__value_.__l.__size_ = 0;
  this[6].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::pair<double,double>>::__init_with_size[abi:ne180100]<std::pair<double,double>*,std::pair<double,double>*>((char *)&this[6], *a4, a4[1], a4[1] - *a4);
  return this;
}

void sub_224DC7190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  QP::Lexeme::~Lexeme(v15);
  _Unwind_Resume(a1);
}

void std::__destroy_at[abi:ne180100]<QP::LexemeGroundedPerson,0>(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 144);
  if (v2)
  {
    *(void *)(a1 + 152) = v2;
    operator delete(v2);
  }
  size_t v3 = (void **)(a1 + 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  QP::Lexeme::~Lexeme((void **)a1);
}

std::string *std::allocate_shared[abi:ne180100]<QP::LexemeStatus,std::allocator<QP::LexemeStatus>,std::string &,char const*&,CFRange &,void>@<X0>(uint64_t a1@<X1>, char **a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  size_t v8 = (std::string *)operator new(0xA8uLL);
  uint64_t result = std::__shared_ptr_emplace<QP::LexemeStatus>::__shared_ptr_emplace[abi:ne180100]<std::string &,char const*&,CFRange &,std::allocator<QP::LexemeStatus>,0>(v8, a1, a2, a3);
  *a4 = v8 + 1;
  a4[1] = v8;
  return result;
}

void sub_224DC7280(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<QP::LexemeStatus>::__shared_ptr_emplace[abi:ne180100]<std::string &,char const*&,CFRange &,std::allocator<QP::LexemeStatus>,0>(std::string *a1, uint64_t a2, char **a3, uint64_t a4)
{
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26D830C58;
  std::construct_at[abi:ne180100]<QP::LexemeStatus,std::string &,char const*&,CFRange &,QP::LexemeStatus*>(a1 + 1, a2, a3, a4);
  return a1;
}

void sub_224DC72DC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<QP::LexemeStatus>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D830C58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QP::LexemeStatus>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D830C58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A623E20);
}

void std::__shared_ptr_emplace<QP::LexemeStatus>::__on_zero_shared(uint64_t a1)
{
}

std::string *std::construct_at[abi:ne180100]<QP::LexemeStatus,std::string &,char const*&,CFRange &,QP::LexemeStatus*>(std::string *a1, uint64_t a2, char **a3, uint64_t a4)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v10 = *(std::string *)a2;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, *a3);
  QP::LexemeStatus::LexemeStatus(a1, (uint64_t)&v10, (long long *)__p, *(void *)a4, *(void *)(a4 + 8));
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_224DC7418(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

std::string *QP::LexemeStatus::LexemeStatus(std::string *this, uint64_t a2, long long *a3, uint64_t a4, std::string::size_type a5)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  QP::Lexeme::Lexeme(this, (long long *)&__p, a4, a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  char v9 = this + 5;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v10 = *a3;
    this[5].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  return this;
}

void sub_224DC7504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  QP::Lexeme::~Lexeme(v14);
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::map<std::string,std::set<std::string>>>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,std::map<std::string,std::set<std::string>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::__tree_node<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,void *> *,long>>>(a1, *(void ***)a2, (void **)(a2 + 8));
  return a1;
}

void sub_224DC7570(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::map<std::string,std::set<std::string>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::__tree_node<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,void *> *,long>>>(uint64_t *result, void **a2, void **a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = (uint64_t)(result + 1);
    do
    {
      uint64_t result = std::__tree<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::map<std::string,std::set<std::string>>> const&>(v5, v6, v4 + 4, (long long *)v4 + 2);
      char v7 = (void **)v4[1];
      if (v7)
      {
        do
        {
          size_t v8 = v7;
          char v7 = (void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          size_t v8 = (void **)v4[2];
          BOOL v9 = *v8 == v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::map<std::string,std::set<std::string>>> const&>(uint64_t **a1, uint64_t a2, void **a3, long long *a4)
{
  uint64_t v6 = std::__tree<std::string>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  char v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    size_t v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>>>::__construct_node<std::pair<std::string const,std::map<std::string,std::set<std::string>>> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    char v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>>>::__construct_node<std::pair<std::string const,std::map<std::string,std::set<std::string>>> const&>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = std::pair<std::string const,std::map<std::string,std::set<std::string>>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_224DC7700(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::set<std::string>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::map<std::string,std::set<std::string>>>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::map<std::string,std::set<std::string>>::map[abi:ne180100]((uint64_t *)&this[1], (uint64_t)a2 + 24);
  return this;
}

void sub_224DC7774(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::map<std::string,std::set<std::string>>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,std::set<std::string>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::set<std::string>>,std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *> *,long>>>(a1, *(void ***)a2, (void **)(a2 + 8));
  return a1;
}

void sub_224DC77D0(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::set<std::string>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::set<std::string>>,std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *> *,long>>>(uint64_t *result, void **a2, void **a3)
{
  if (a2 != a3)
  {
    long long v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = (uint64_t)(result + 1);
    do
    {
      uint64_t result = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::set<std::string>> const&>(v5, v6, v4 + 4, (long long *)v4 + 2);
      char v7 = (void **)v4[1];
      if (v7)
      {
        do
        {
          size_t v8 = v7;
          char v7 = (void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          size_t v8 = (void **)v4[2];
          BOOL v9 = *v8 == v4;
          long long v4 = v8;
        }
        while (!v9);
      }
      long long v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::set<std::string>> const&>(uint64_t **a1, uint64_t a2, void **a3, long long *a4)
{
  uint64_t v6 = std::__tree<std::string>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  char v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    size_t v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__construct_node<std::pair<std::string const,std::set<std::string>> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    char v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__construct_node<std::pair<std::string const,std::set<std::string>> const&>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = std::pair<std::string const,std::set<std::string>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_224DC7960(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::set<std::string>>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::set<std::string>::set[abi:ne180100]((uint64_t *)&this[1], (uint64_t)a2 + 24);
  return this;
}

void sub_224DC79D4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<QP::Parse,std::allocator<QP::Parse>,__CFString *&,unsigned long,long &,std::vector<std::shared_ptr<QP::ParseAttribute>> &,__CFDictionary const*&,void>@<X0>(const void **a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, void **a4@<X4>, uint64_t *a5@<X5>, void *a6@<X8>)
{
  uint64_t v12 = operator new(0x78uLL);
  uint64_t result = std::__shared_ptr_emplace<QP::Parse>::__shared_ptr_emplace[abi:ne180100]<__CFString *&,unsigned long,long &,std::vector<std::shared_ptr<QP::ParseAttribute>> &,__CFDictionary const*&,std::allocator<QP::Parse>,0>(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;
  return result;
}

void sub_224DC7A68(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<QP::Parse>::__shared_ptr_emplace[abi:ne180100]<__CFString *&,unsigned long,long &,std::vector<std::shared_ptr<QP::ParseAttribute>> &,__CFDictionary const*&,std::allocator<QP::Parse>,0>(void *a1, const void **a2, uint64_t *a3, uint64_t *a4, void **a5, uint64_t *a6)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D830770;
  std::construct_at[abi:ne180100]<QP::Parse,__CFString *&,unsigned long,long &,std::vector<std::shared_ptr<QP::ParseAttribute>> &,__CFDictionary const*&,QP::Parse*>((uint64_t)(a1 + 3), a2, a3, a4, a5, a6);
  return a1;
}

void sub_224DC7AC4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<QP::Parse,__CFString *&,unsigned long,long &,std::vector<std::shared_ptr<QP::ParseAttribute>> &,__CFDictionary const*&,QP::Parse*>(uint64_t a1, const void **a2, uint64_t *a3, uint64_t *a4, void **a5, uint64_t *a6)
{
  size_t v8 = *a2;
  uint64_t v9 = *a3;
  uint64_t v10 = *a4;
  memset(v12, 0, sizeof(v12));
  std::vector<std::shared_ptr<QP::ParseAttribute>>::__init_with_size[abi:ne180100]<std::shared_ptr<QP::ParseAttribute>*,std::shared_ptr<QP::ParseAttribute>*>(v12, *a5, a5[1], ((char *)a5[1] - (char *)*a5) >> 4);
  QP::Parse::Parse(a1, v8, v9, v10, v12, *a6, 0);
  std::string v13 = (void **)v12;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v13);
  return a1;
}

void sub_224DC7B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t OUTLINED_FUNCTION_5(uint64_t result, uint64_t a2, uint64_t a3, float a4)
{
  *(float *)a2 = a4;
  *(void *)(a2 + 4) = a3;
  *(_WORD *)(a2 + 12) = 2112;
  *(void *)(a2 + 14) = result;
  return result;
}

void OUTLINED_FUNCTION_6(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_7(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void OUTLINED_FUNCTION_8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x16u);
}

uint64_t QP::DateFormatter::DateFormatter(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = a3[1];
  *(void *)(a1 + 16) = *a3;
  *(void *)(a1 + 24) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  CFDateFormatterRef ISO8601Formatter = CFDateFormatterCreateISO8601Formatter((CFAllocatorRef)*MEMORY[0x263EFFB08], 0x333uLL);
  nlp::CFScopedPtr<__CFDateFormatter *>::reset((const void **)(a1 + 32), ISO8601Formatter);
  QP::DateFormatter::update((const void **)a1);
  return a1;
}

void sub_224DC7C88(_Unwind_Exception *a1)
{
  nlp::CFScopedPtr<__CFDictionary const*>::reset(v5, 0);
  nlp::CFScopedPtr<__CFDateFormatter *>::reset(v4, 0);
  nlp::CFScopedPtr<__CFDateFormatter *>::reset(v3, 0);
  nlp::CFScopedPtr<__CFDateFormatter *>::reset(v2, 0);
  char v7 = *(std::__shared_weak_count **)(v1 + 24);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  size_t v8 = *(std::__shared_weak_count **)(v1 + 8);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  _Unwind_Resume(a1);
}

void QP::DateFormatter::update(const void **this)
{
  if (*this)
  {
    CFLocaleRef v1 = (const __CFLocale *)*((void *)*this + 13);
    if (v1)
    {
      size_t v3 = this + 6;
      CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      CFDateFormatterRef v5 = CFDateFormatterCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], v1, kCFDateFormatterShortStyle, kCFDateFormatterShortStyle);
      nlp::CFScopedPtr<__CFDateFormatter *>::reset(v3, v5);
      CFDateFormatterRef v6 = CFDateFormatterCreate(v4, *((CFLocaleRef *)*this + 13), kCFDateFormatterNoStyle, kCFDateFormatterNoStyle);
      nlp::CFScopedPtr<__CFDateFormatter *>::reset(this + 5, v6);
    }
  }
}

BOOL QP::DateFormatter::loadDateFormatterResource(QP::DateFormatter *this, const __CFURL *a2)
{
  return a2 != 0;
}

void QP::DateFormatter::clearResources(const void **this)
{
}

CFStringRef QP::DateFormatter::copyWeekdayDisplayForDate(CFDateFormatterRef *a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(*(void *)a2 + 20);
  long long v4 = *(_OWORD *)(*(void *)a2 + 36);
  long long v5 = *(_OWORD *)(*(void *)a2 + 52);
  int v25 = *(_DWORD *)(*(void *)a2 + 68);
  v23[1] = v4;
  long long v24 = v5;
  v23[0] = v3;
  if ((QP::DateComponents::isEmpty((QP::DateComponents *)v23) & 1) != 0 || (v24 & 0x80000000) != 0) {
    return 0;
  }
  *(void *)&long long v6 = -1;
  *((void *)&v6 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = -1;
  *(_OWORD *)uint64_t v20 = v6;
  long long v21 = v6;
  long long v19 = v6;
  int v22 = -1;
  LODWORD(v2QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = v24;
  CFAbsoluteTime AbsoluteTime = QP::DateComponents::getAbsoluteTime((QP::DateComponents *)&v19, *((__CFCalendar **)*a1 + 10), *((const __CFDate **)*a1 + 9));
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFDateRef v8 = CFDateCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], AbsoluteTime);
  CFDateRef v17 = v8;
  uint64_t v9 = (__CFCalendar *)*((void *)*a1 + 11);
  if (v9)
  {
    CFAbsoluteTime AbsoluteTime = convertAbsoluteTime(*((__CFCalendar **)*a1 + 10), v9, v8, v20[0]);
    CFDateRef v10 = CFDateCreate(v7, AbsoluteTime);
    if (v8) {
      CFRelease(v8);
    }
    CFDateRef v17 = v10;
    CFDateRef v8 = v10;
  }
  QP::DateComponents::getShortFormatWithOptions((QP::DateComponents *)&v19, 0, &__p);
  CFStringFromCFStringRef String = QP::createCFStringFromString((uint64_t)&__p);
  CFStringRef DateFormatFromTemplate = CFDateFormatterCreateDateFormatFromTemplate(0, CFStringFromString, 0, *((CFLocaleRef *)*a1 + 13));
  CFStringRef StringWithDate = 0;
  std::string v14 = a1[6];
  if (v14 && v8)
  {
    CFDateFormatterSetFormat(v14, DateFormatFromTemplate);
    CFStringRef StringWithDate = CFDateFormatterCreateStringWithDate(v7, a1[6], v8);
  }
  if (DateFormatFromTemplate) {
    CFRelease(DateFormatFromTemplate);
  }
  if (CFStringFromString) {
    CFRelease(CFStringFromString);
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!v8) {
      return StringWithDate;
    }
    goto LABEL_19;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (v8) {
LABEL_19:
  }
    CFRelease(v8);
  return StringWithDate;
}

void sub_224DC7F64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, const void *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, const void *a18)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  nlp::CFScopedPtr<__CFDate const*>::reset(&a18, 0);
  _Unwind_Resume(a1);
}

uint64_t QP::DateComponents::isEmpty(QP::DateComponents *this)
{
  if (!QP::DateComponents::hasDate(this)
    && (*((_DWORD *)this + 2) & 0x80000000) != 0
    && (*((_DWORD *)this + 1) & 0x80000000) != 0
    && (*(_DWORD *)this & 0x80000000) != 0)
  {
    return *((_DWORD *)this + 7) >> 31;
  }
  else
  {
    return 0;
  }
}

CFStringRef QP::DateFormatter::copyDateDisplayForDate(CFDateFormatterRef *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  long long v4 = *(_OWORD *)(*a2 + 20);
  long long v5 = *(_OWORD *)(*a2 + 52);
  *(_OWORD *)long long v21 = *(_OWORD *)(*a2 + 36);
  *(_OWORD *)int v22 = v5;
  *(_DWORD *)&v22[16] = *(_DWORD *)(v3 + 68);
  long long v20 = v4;
  if (QP::DateComponents::isEmpty((QP::DateComponents *)&v20)) {
    return 0;
  }
  *(void *)&long long v20 = -1;
  *(void *)&v22[12] = -1;
  DWORD2(v2nlp::CFScopedPtr<__CFDictionary const*>::reset(this + 7, 0) = -1;
  v21[1] = -1;
  if (QP::DateComponents::isEmpty((QP::DateComponents *)&v20)) {
    return 0;
  }
  CFAbsoluteTime AbsoluteTime = QP::DateComponents::getAbsoluteTime((QP::DateComponents *)&v20, *((__CFCalendar **)*a1 + 10), *((const __CFDate **)*a1 + 9));
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFDateRef v9 = CFDateCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], AbsoluteTime);
  CFDateRef v18 = v9;
  CFDateRef v10 = (__CFCalendar **)*a1;
  uint64_t v11 = (__CFCalendar *)*((void *)*a1 + 11);
  if (v11)
  {
    CFAbsoluteTime AbsoluteTime = convertAbsoluteTime(v10[10], v11, v9, v21[0]);
    CFDateRef v12 = CFDateCreate(v8, AbsoluteTime);
    if (v9) {
      CFRelease(v9);
    }
    CFDateRef v18 = v12;
    CFDateRef v10 = (__CFCalendar **)*a1;
    CFDateRef v9 = v12;
  }
  char v13 = QP::ParserConfiguration::useEra((QP::ParserConfiguration *)v10);
  QP::DateComponents::getShortFormatWithOptions((QP::DateComponents *)&v20, v13, &__p);
  CFStringFromCFStringRef String = QP::createCFStringFromString((uint64_t)&__p);
  CFStringRef DateFormatFromTemplate = CFDateFormatterCreateDateFormatFromTemplate(0, CFStringFromString, 0, *((CFLocaleRef *)*a1 + 13));
  CFStringRef StringWithDate = 0;
  id v16 = a1[6];
  if (v16 && v9)
  {
    CFDateFormatterSetFormat(v16, DateFormatFromTemplate);
    CFStringRef StringWithDate = CFDateFormatterCreateStringWithDate(v8, a1[6], v9);
  }
  if (DateFormatFromTemplate) {
    CFRelease(DateFormatFromTemplate);
  }
  if (CFStringFromString) {
    CFRelease(CFStringFromString);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v9) {
    CFRelease(v9);
  }
  return StringWithDate;
}

void sub_224DC81D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, const void *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, const void *a18)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  nlp::CFScopedPtr<__CFDate const*>::reset(&a18, 0);
  _Unwind_Resume(a1);
}

void QP::DateComponents::getShortFormatWithOptions(QP::DateComponents *this@<X0>, char a2@<W1>, std::string *a3@<X8>)
{
  if (QP::DateComponents::isTime(this))
  {
    std::string::basic_string[abi:ne180100]<0>(a3, "hma");
    return;
  }
  if ((*((_DWORD *)this + 11) & 0x80000000) != 0
    && (*((_DWORD *)this + 10) & 0x80000000) != 0
    && (*((_DWORD *)this + 9) & 0x80000000) != 0
    && (*((_DWORD *)this + 12) & 0x80000000) != 0)
  {
    uint64_t v13 = 0;
    std::string v14 = &v13;
    uint64_t v15 = 0x4002000000;
    id v16 = __Block_byref_object_copy__5;
    CFDateRef v17 = __Block_byref_object_dispose__5;
    std::string __p = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    v11[0] = MEMORY[0x263EF8330];
    v11[1] = 0x40000000;
    uint64_t v11[2] = ___ZNK2QP14DateComponents25getShortFormatWithOptionsEbPd_block_invoke;
    void v11[3] = &unk_264705838;
    v11[4] = &v13;
    char v12 = a2;
    QP::DateComponents::enumerate((unsigned int *)this, (uint64_t)v11);
    CFAllocatorRef v7 = v14;
    if ((*((char *)v14 + 63) & 0x80000000) == 0) {
      goto LABEL_10;
    }
    std::string::__init_copy_ctor_external(a3, (const std::string::value_type *)v14[5], v14[6]);
  }
  else
  {
    uint64_t v13 = 0;
    std::string v14 = &v13;
    uint64_t v15 = 0x4002000000;
    id v16 = __Block_byref_object_copy__5;
    CFDateRef v17 = __Block_byref_object_dispose__5;
    std::string __p = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    v9[0] = MEMORY[0x263EF8330];
    v9[1] = 0x40000000;
    v9[2] = ___ZNK2QP14DateComponents25getShortFormatWithOptionsEbPd_block_invoke_2;
    void v9[3] = &unk_264705860;
    v9[4] = &v13;
    char v10 = a2;
    QP::DateComponents::enumerate((unsigned int *)this, (uint64_t)v9);
    CFAllocatorRef v7 = v14;
    if ((*((char *)v14 + 63) & 0x80000000) == 0)
    {
LABEL_10:
      long long v8 = *(_OWORD *)(v7 + 5);
      a3->__r_.__value_.__r.__words[2] = v7[7];
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v8;
      goto LABEL_12;
    }
    std::string::__init_copy_ctor_external(a3, (const std::string::value_type *)v14[5], v14[6]);
  }
LABEL_12:
  _Block_object_dispose(&v13, 8);
  if (SHIBYTE(v20) < 0) {
    operator delete(__p);
  }
}

void sub_224DC8450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

CFStringRef QP::DateFormatter::copyTimeDisplayForDate(CFDateFormatterRef *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  long long v4 = *(_OWORD *)(*a2 + 20);
  long long v5 = *(_OWORD *)(*a2 + 52);
  long long v25 = *(_OWORD *)(*a2 + 36);
  long long v26 = v5;
  int v27 = *(_DWORD *)(v3 + 68);
  long long v24 = v4;
  if (QP::DateComponents::isEmpty((QP::DateComponents *)&v24)) {
    return 0;
  }
  v6.i64[0] = *(void *)((char *)&v24 + 4);
  v6.i64[1] = __PAIR64__(HIDWORD(v25), v24);
  v7.i64[0] = -1;
  v7.i64[1] = -1;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vcgtq_s32(v6, v7))) & 1) == 0) {
    return 0;
  }
  int32x4_t v22 = v7;
  uint64_t v23 = -1;
  *(int32x4_t *)long long v21 = v7;
  v20[0] = v24;
  v20[1] = v24;
  v20[2] = DWORD2(v24);
  v22.i32[0] = HIDWORD(v25);
  CFAbsoluteTime AbsoluteTime = QP::DateComponents::getAbsoluteTime((QP::DateComponents *)v20, *((__CFCalendar **)*a1 + 10), *((const __CFDate **)*a1 + 9));
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFDateRef v9 = CFDateCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], AbsoluteTime);
  CFDateRef v18 = v9;
  char v10 = (__CFCalendar *)*((void *)*a1 + 11);
  if (v10)
  {
    CFAbsoluteTime AbsoluteTime = convertAbsoluteTime(*((__CFCalendar **)*a1 + 10), v10, v9, v21[1]);
    CFDateRef v11 = CFDateCreate(v8, AbsoluteTime);
    if (v9) {
      CFRelease(v9);
    }
    CFDateRef v18 = v11;
    CFDateRef v9 = v11;
  }
  QP::DateComponents::getShortFormatWithOptions((QP::DateComponents *)v20, 0, &__p);
  CFStringFromCFStringRef String = QP::createCFStringFromString((uint64_t)&__p);
  CFStringRef DateFormatFromTemplate = CFDateFormatterCreateDateFormatFromTemplate(0, CFStringFromString, 0, *((CFLocaleRef *)*a1 + 13));
  CFStringRef StringWithDate = 0;
  uint64_t v15 = a1[6];
  if (v15 && v9)
  {
    CFDateFormatterSetFormat(v15, DateFormatFromTemplate);
    CFStringRef StringWithDate = CFDateFormatterCreateStringWithDate(v8, a1[6], v9);
  }
  if (DateFormatFromTemplate) {
    CFRelease(DateFormatFromTemplate);
  }
  if (CFStringFromString) {
    CFRelease(CFStringFromString);
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!v9) {
      return StringWithDate;
    }
    goto LABEL_19;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (v9) {
LABEL_19:
  }
    CFRelease(v9);
  return StringWithDate;
}

void sub_224DC866C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, const void *a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  nlp::CFScopedPtr<__CFDate const*>::reset(&a17, 0);
  _Unwind_Resume(a1);
}

CFStringRef QP::DateFormatter::copyShortDisplayForDate(CFDateFormatterRef *a1, uint64_t a2, int a3, uint64_t a4)
{
  long long v8 = *(_OWORD *)(*(void *)a2 + 20);
  long long v9 = *(_OWORD *)(*(void *)a2 + 36);
  long long v10 = *(_OWORD *)(*(void *)a2 + 52);
  int v46 = *(_DWORD *)(*(void *)a2 + 68);
  long long v44 = v9;
  long long v45 = v10;
  long long v43 = v8;
  if ((QP::DateComponents::isEmpty((QP::DateComponents *)&v43) & 1) == 0)
  {
    if (a3)
    {
      unint64_t v12 = __ROR8__(*((void *)*a1 + 1), 1);
      QP::updateDateComponentsWithRelativeDateOffset(*((void *)*a1 + 11), *((void *)*a1 + 13), *((const __CFDate **)*a1 + 9), (QP::DateComponents *)&v43, *(_DWORD *)(*(void *)a2 + 8), 1, (v12 > 6) | (0xEu >> v12) & 1, a4);
    }
    unsigned int v13 = *(_DWORD *)(*(void *)a2 + 8);
    if ((int)v13 < 91 || v13 == 102)
    {
      v36.__r_.__value_.__r.__words[0] = 0;
      v36.__r_.__value_.__r.__words[0] = QP::DateComponents::getAbsoluteTime((QP::DateComponents *)&v43, *((__CFCalendar **)*a1 + 10), *((const __CFDate **)*a1 + 9));
      CFAllocatorRef v17 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      CFDateRef v18 = CFDateCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], *(CFAbsoluteTime *)&v36.__r_.__value_.__l.__data_);
      *(void *)&CFAbsoluteTime AbsoluteTime = v18;
      uint64_t v19 = (__CFCalendar **)*a1;
      uint64_t v20 = (__CFCalendar *)*((void *)*a1 + 11);
      if (v20)
      {
        v36.__r_.__value_.__r.__words[0] = convertAbsoluteTime(v19[10], v20, v18, v44);
        CFDateRef v21 = CFDateCreate(v17, *(CFAbsoluteTime *)&v36.__r_.__value_.__l.__data_);
        if (v18) {
          CFRelease(v18);
        }
        *(void *)&CFAbsoluteTime AbsoluteTime = v21;
        uint64_t v19 = (__CFCalendar **)*a1;
        CFDateRef v18 = v21;
      }
      char v22 = QP::ParserConfiguration::useEra((QP::ParserConfiguration *)v19);
      QP::DateComponents::getShortFormatWithOptions((QP::DateComponents *)&v43, v22, (std::string *)__p);
      CFStringFromCFStringRef String = QP::createCFStringFromString((uint64_t)__p);
      id v37 = (void *)CFStringFromString;
      CFStringRef DateFormatFromTemplate = CFDateFormatterCreateDateFormatFromTemplate(0, CFStringFromString, 0, *((CFLocaleRef *)*a1 + 13));
      CFStringRef StringWithDate = 0;
      long long v25 = a1[6];
      if (v25 && v18)
      {
        CFDateFormatterSetFormat(v25, DateFormatFromTemplate);
        CFStringRef StringWithDate = CFDateFormatterCreateStringWithDate(v17, a1[6], v18);
      }
      if (DateFormatFromTemplate) {
        CFRelease(DateFormatFromTemplate);
      }
      if (CFStringFromString) {
        CFRelease(CFStringFromString);
      }
      if (SHIBYTE(v40[1]) < 0)
      {
        operator delete(__p[0]);
        if (!v18) {
          return StringWithDate;
        }
      }
      else if (!v18)
      {
        return StringWithDate;
      }
      CFRelease(v18);
      return StringWithDate;
    }
    int v42 = -1;
    v14.i64[0] = -1;
    v14.i64[1] = -1;
    *(int32x4_t *)CFIndex v40 = v14;
    int32x4_t v41 = v14;
    *(int32x4_t *)std::string __p = v14;
    v15.i64[0] = *(void *)((char *)&v43 + 4);
    v15.i64[1] = __PAIR64__(HIDWORD(v44), v43);
    if (vmaxv_u16((uint16x4_t)vmovn_s32(vcgtq_s32(v15, v14))))
    {
      LODWORD(__p[0]) = v43;
      if (v13 >= 0x5D)
      {
        HIDWORD(__p[0]) = DWORD1(v43);
        if (v13 != 93)
        {
          LODWORD(__p[1]) = DWORD2(v43);
          void v40[3] = HIDWORD(v44);
          if (v13 >= 0x5F)
          {
            HIDWORD(__p[1]) = HIDWORD(v43);
            if (v13 != 95)
            {
              v41.i32[0] = v45;
              if (v13 >= 0x64)
              {
                v40[0] = v44;
                if (v13 != 100)
                {
                  int v16 = DWORD1(v44);
LABEL_38:
                  v40[1] = v16;
                }
              }
            }
          }
        }
      }
    }
    else
    {
      if (v13 == 96)
      {
        v41.i32[0] = v45;
        goto LABEL_39;
      }
      if ((v45 & 0x80000000) == 0) {
        v41.i32[0] = v45;
      }
      if ((v44 & 0x80000000) == 0)
      {
        v40[0] = v44;
        goto LABEL_39;
      }
      int v16 = DWORD1(v44);
      if ((DWORD1(v44) & 0x80000000) == 0) {
        goto LABEL_38;
      }
    }
LABEL_39:
    CFAbsoluteTime AbsoluteTime = 0.0;
    CFAbsoluteTime AbsoluteTime = QP::DateComponents::getAbsoluteTime((QP::DateComponents *)__p, *((__CFCalendar **)*a1 + 10), *((const __CFDate **)*a1 + 9));
    CFAllocatorRef v26 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFDateRef v27 = CFDateCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], AbsoluteTime);
    id v37 = v27;
    CFIndex v28 = (__CFCalendar **)*a1;
    CFIndex v29 = (__CFCalendar *)*((void *)*a1 + 11);
    if (v29)
    {
      CFAbsoluteTime AbsoluteTime = convertAbsoluteTime(v28[10], v29, v27, v40[0]);
      CFDateRef v30 = CFDateCreate(v26, AbsoluteTime);
      if (v27) {
        CFRelease(v27);
      }
      id v37 = v30;
      CFIndex v28 = (__CFCalendar **)*a1;
      CFDateRef v27 = v30;
    }
    char v31 = QP::ParserConfiguration::useEra((QP::ParserConfiguration *)v28);
    QP::DateComponents::getShortFormatWithOptions((QP::DateComponents *)&v43, v31, &v36);
    CFStringRef v32 = QP::createCFStringFromString((uint64_t)&v36);
    CFStringRef v33 = CFDateFormatterCreateDateFormatFromTemplate(0, v32, 0, *((CFLocaleRef *)*a1 + 13));
    CFStringRef StringWithDate = 0;
    uint64_t v34 = a1[6];
    if (v34 && v27)
    {
      CFDateFormatterSetFormat(v34, v33);
      CFStringRef StringWithDate = CFDateFormatterCreateStringWithDate(v26, a1[6], v27);
    }
    if (v33) {
      CFRelease(v33);
    }
    if (v32) {
      CFRelease(v32);
    }
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v36.__r_.__value_.__l.__data_);
      if (!v27) {
        return StringWithDate;
      }
    }
    else if (!v27)
    {
      return StringWithDate;
    }
    CFRelease(v27);
    return StringWithDate;
  }
  return 0;
}

void sub_224DC8B00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, const void *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, const void *a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  nlp::CFScopedPtr<__CFDate const*>::reset(&a18, 0);
  _Unwind_Resume(a1);
}

__CFString *QP::DateFormatter::copyISODisplayForStartDate(uint64_t *a1, uint64_t *a2, int a3, char a4, int a5, uint64_t a6)
{
  if ((a4 & 1) != 0 || (CFStringRef StringWithDate = @"0", a3 != 5) && a3 != 8)
  {
    uint64_t v11 = *a2;
    long long v12 = *(_OWORD *)(*a2 + 20);
    long long v13 = *(_OWORD *)(*a2 + 52);
    long long v38 = *(_OWORD *)(*a2 + 36);
    long long v39 = v13;
    int v40 = *(_DWORD *)(v11 + 68);
    long long v37 = v12;
    long long v14 = *(_OWORD *)(v11 + 88);
    long long v33 = *(_OWORD *)(v11 + 72);
    long long v34 = v14;
    long long v35 = *(_OWORD *)(v11 + 104);
    int v36 = *(_DWORD *)(v11 + 120);
    long long v15 = *(_OWORD *)(v11 + 140);
    v31[0] = *(_OWORD *)(v11 + 124);
    v31[1] = v15;
    v31[2] = *(_OWORD *)(v11 + 156);
    int v32 = *(_DWORD *)(v11 + 172);
    if (a5)
    {
      int v16 = *(_DWORD *)(v11 + 8);
      unint64_t v17 = __ROR8__(*(void *)(*a1 + 8), 1);
      QP::updateDateComponentsWithRelativeDateOffset(*(void *)(*a1 + 88), *(void *)(*a1 + 104), *(const __CFDate **)(*a1 + 72), (QP::DateComponents *)&v37, v16, 1, (v17 > 6) | (0xEu >> v17) & 1, a6);
    }
    CFDateRef v18 = (std::__shared_weak_count *)a1[1];
    uint64_t v29 = *a1;
    CFDateRef v30 = v18;
    if (v18) {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    QP::DateConverter::resolveDateComponentsAsRange((uint64_t)&v29, a3, *(_DWORD *)(*a2 + 8), &v37, &v33, (uint64_t)v31, a5);
    if (v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v30);
    }
    long long v25 = v37;
    long long v26 = v38;
    long long v27 = v39;
    int v28 = v40;
    if (QP::DateComponents::isEmpty((QP::DateComponents *)&v37)
      && (QP::DateComponents::isEmpty((QP::DateComponents *)&v33) & 1) == 0)
    {
      long long v25 = v33;
      long long v26 = v34;
      long long v27 = v35;
      int v28 = v36;
    }
    if (QP::DateComponents::isEmpty((QP::DateComponents *)&v25))
    {
      return @"0";
    }
    else
    {
      char isEmpty = QP::DateComponents::isEmpty((QP::DateComponents *)&v33);
      if (a3 == 6) {
        char v20 = isEmpty;
      }
      else {
        char v20 = 1;
      }
      if ((v20 & 1) == 0)
      {
        long long v25 = v33;
        long long v26 = v34;
        long long v27 = v35;
        int v28 = v36;
        QP::updateDateComponentsWithUnitOffset(*(__CFCalendar **)(*a1 + 88), *(void *)(*a1 + 104), *(const __CFDate **)(*a1 + 72), (QP::DateComponents *)&v25, *(_DWORD *)(*a2 + 8), 1);
      }
      CFAbsoluteTime AbsoluteTime = QP::DateComponents::getAbsoluteTime((QP::DateComponents *)&v25, *(__CFCalendar **)(*a1 + 88), *(const __CFDate **)(*a1 + 72));
      CFAllocatorRef v22 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      CFDateRef v23 = CFDateCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], AbsoluteTime);
      if (v23)
      {
        CFStringRef StringWithDate = CFDateFormatterCreateStringWithDate(v22, (CFDateFormatterRef)a1[4], v23);
        CFRelease(v23);
      }
      else
      {
        return 0;
      }
    }
  }
  return (__CFString *)StringWithDate;
}

void sub_224DC8E1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nlp::CFScopedPtr<__CFDate const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

__CFString *QP::DateFormatter::copyISODisplayForEndDate(uint64_t *a1, uint64_t *a2, int a3, int a4, int a5, uint64_t a6)
{
  if ((a3 & 0xFFFE) == 6 && !a4) {
    return @"2147483647";
  }
  uint64_t v10 = *a2;
  long long v11 = *(_OWORD *)(*a2 + 20);
  long long v12 = *(_OWORD *)(*a2 + 52);
  long long v36 = *(_OWORD *)(*a2 + 36);
  long long v37 = v12;
  int v38 = *(_DWORD *)(v10 + 68);
  long long v35 = v11;
  long long v13 = *(_OWORD *)(v10 + 88);
  long long v31 = *(_OWORD *)(v10 + 72);
  long long v32 = v13;
  long long v33 = *(_OWORD *)(v10 + 104);
  int v34 = *(_DWORD *)(v10 + 120);
  long long v14 = *(_OWORD *)(v10 + 140);
  v29[0] = *(_OWORD *)(v10 + 124);
  v29[1] = v14;
  void v29[2] = *(_OWORD *)(v10 + 156);
  int v30 = *(_DWORD *)(v10 + 172);
  if (a5)
  {
    int v15 = *(_DWORD *)(v10 + 8);
    unint64_t v16 = __ROR8__(*(void *)(*a1 + 8), 1);
    QP::updateDateComponentsWithRelativeDateOffset(*(void *)(*a1 + 88), *(void *)(*a1 + 104), *(const __CFDate **)(*a1 + 72), (QP::DateComponents *)&v35, v15, 1, (v16 > 6) | (0xEu >> v16) & 1, a6);
  }
  unint64_t v17 = (std::__shared_weak_count *)a1[1];
  uint64_t v27 = *a1;
  int v28 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  QP::DateConverter::resolveDateComponentsAsRange((uint64_t)&v27, a3, *(_DWORD *)(*a2 + 8), &v35, &v31, (uint64_t)v29, a5);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  long long v23 = v31;
  long long v24 = v32;
  long long v25 = v33;
  int v26 = v34;
  if (QP::DateComponents::isEmpty((QP::DateComponents *)&v31)
    && (QP::DateComponents::isEmpty((QP::DateComponents *)&v35) & 1) == 0)
  {
    long long v23 = v35;
    long long v24 = v36;
    long long v25 = v37;
    int v26 = v38;
  }
  if (QP::DateComponents::isEmpty((QP::DateComponents *)&v23)) {
    return @"2147483647";
  }
  if ((QP::DateComponents::isEmpty((QP::DateComponents *)&v35) & 1) == 0) {
    QP::updateDateComponentsWithUnitOffset(*(__CFCalendar **)(*a1 + 88), *(void *)(*a1 + 104), *(const __CFDate **)(*a1 + 72), (QP::DateComponents *)&v23, *(_DWORD *)(*a2 + 8), 1);
  }
  CFAbsoluteTime AbsoluteTime = QP::DateComponents::getAbsoluteTime((QP::DateComponents *)&v23, *(__CFCalendar **)(*a1 + 88), *(const __CFDate **)(*a1 + 72));
  CFAllocatorRef v21 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFDateRef v22 = CFDateCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], AbsoluteTime);
  if (!v22) {
    return 0;
  }
  CFStringRef StringWithDate = CFDateFormatterCreateStringWithDate(v21, (CFDateFormatterRef)a1[4], v22);
  CFRelease(v22);
  return (__CFString *)StringWithDate;
}

void sub_224DC908C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nlp::CFScopedPtr<__CFDate const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

__CFString *QP::DateFormatter::copyDisplayForPeriodWithKey(CFDateFormatterRef *a1, void *a2, const __CFString *a3, unsigned int a4, unsigned int a5, uint64_t a6, uint64_t a7)
{
  int32x4_t v7 = (__CFString *)a3;
  if (!a3) {
    return v7;
  }
  CFStringRef v156 = 0;
  unint64_t v157 = 0;
  if (CFStringFind(a3, @"::", 0).location != -1)
  {
    CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings((CFAllocatorRef)*MEMORY[0x263EFFB08], v7, @"::");
    CFStringRef v155 = (const __CFString *)ArrayBySeparatingStrings;
    if (CFArrayGetCount(ArrayBySeparatingStrings) != 2) {
      goto LABEL_64;
    }
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 0);
    long long v14 = CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 1);
    uint64_t v15 = *a2;
    long long v16 = *(_OWORD *)(*a2 + 20);
    long long v17 = *(_OWORD *)(*a2 + 52);
    long long v152 = *(_OWORD *)(*a2 + 36);
    long long v153 = v17;
    int v154 = *(_DWORD *)(v15 + 68);
    long long v151 = v16;
    long long v18 = *(_OWORD *)(v15 + 88);
    long long v147 = *(_OWORD *)(v15 + 72);
    long long v148 = v18;
    long long v149 = *(_OWORD *)(v15 + 104);
    int v150 = *(_DWORD *)(v15 + 120);
    long long v19 = *(_OWORD *)(v15 + 140);
    v145[0] = *(_OWORD *)(v15 + 124);
    v145[1] = v19;
    v145[2] = *(_OWORD *)(v15 + 156);
    int v146 = *(_DWORD *)(v15 + 172);
    char v20 = (std::__shared_weak_count *)a1[1];
    CFDateFormatterRef v143 = *a1;
    long long v144 = v20;
    if (v20)
    {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v15 = *a2;
    }
    QP::DateConverter::resolveDateComponentsAsRange((uint64_t)&v143, a4, *(_DWORD *)(v15 + 8), &v151, &v147, (uint64_t)v145, a6);
    if (v144) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v144);
    }
    CFAllocatorRef alloc = v11;
    CFAllocatorRef v21 = (char *)operator new(0xC8uLL);
    long long v22 = v152;
    *(_OWORD *)(v21 + 44) = v151;
    *((void *)v21 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = 0;
    *((void *)v21 + 2) = 0;
    *(void *)CFAllocatorRef v21 = &unk_26D830CA8;
    *((void *)v21 + 3) = 0;
    *((_WORD *)v21 + 18) = 0;
    *((_DWORD *)v21 + 1nlp::CFScopedPtr<__CFString const*>::reset((const void **)&a9, 0) = 0;
    *(_OWORD *)(v21 + 6nlp::CFScopedPtr<__CFString const*>::reset((const void **)&a9, 0) = v22;
    *(_OWORD *)(v21 + 76) = v153;
    *((_DWORD *)v21 + 23) = v154;
    *(void *)&long long v23 = -1;
    *((void *)&v23 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = -1;
    *((_OWORD *)v21 + 6) = v23;
    *((_OWORD *)v21 + 7) = v23;
    *((_OWORD *)v21 + 8) = v23;
    *((_OWORD *)v21 + 9) = v23;
    *((_OWORD *)v21 + 1nlp::CFScopedPtr<__CFString const*>::reset((const void **)&a9, 0) = v23;
    *((_OWORD *)v21 + 1QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = v23;
    *((void *)v21 + 24) = -1;
    *((_DWORD *)v21 + 8) = 2;
    QP::DatePeriod::setDisplayKey((const void **)v21 + 3, @"FORMATTED");
    CFRange v122 = v14;
    long long v24 = (char *)operator new(0xC8uLL);
    long long v25 = v148;
    *(_OWORD *)(v24 + 44) = v147;
    *((void *)v24 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = 0;
    *((void *)v24 + 2) = 0;
    *(void *)long long v24 = &unk_26D830CA8;
    *((void *)v24 + 3) = 0;
    *((_WORD *)v24 + 18) = 0;
    *((_DWORD *)v24 + 1nlp::CFScopedPtr<__CFString const*>::reset((const void **)&a9, 0) = 0;
    *(_OWORD *)(v24 + 6nlp::CFScopedPtr<__CFString const*>::reset((const void **)&a9, 0) = v25;
    *(_OWORD *)(v24 + 76) = v149;
    *((_DWORD *)v24 + 23) = v150;
    *(void *)&long long v26 = -1;
    *((void *)&v26 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = -1;
    *((_OWORD *)v24 + 6) = v26;
    *((_OWORD *)v24 + 7) = v26;
    *((_OWORD *)v24 + 8) = v26;
    *((_OWORD *)v24 + 9) = v26;
    *((_OWORD *)v24 + 1nlp::CFScopedPtr<__CFString const*>::reset((const void **)&a9, 0) = v26;
    *((_OWORD *)v24 + 1QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = v26;
    *((void *)v24 + 24) = -1;
    *((_DWORD *)v24 + 8) = 2;
    QP::DatePeriod::setDisplayKey((const void **)v24 + 3, @"FORMATTED");
    v141[0] = v21 + 24;
    v141[1] = v21;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v21 + 1, 1uLL, memory_order_relaxed);
    CFStringRef v27 = (const __CFString *)QP::DateFormatter::copyDisplayForPeriodWithKey(a1, v141, ValueAtIndex, a4, a5, a6, a7);
    theCFStringRef String = v27;
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v21);
    v139[0] = v24 + 24;
    v139[1] = v24;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v24 + 1, 1uLL, memory_order_relaxed);
    CFStringRef v28 = (const __CFString *)QP::DateFormatter::copyDisplayForPeriodWithKey(a1, v139, v122, a4, a5, a6, a7);
    CFStringRef v140 = v28;
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v24);
    if (v27)
    {
      if (!v28) {
        goto LABEL_62;
      }
      if (QP::DateComponents::isEmpty((QP::DateComponents *)v145))
      {
        CFDateFormatterRef v29 = *a1;
        CFStringRef BundleWithIdentifier = (__CFString *)*((void *)*a1 + 24);
        if (BundleWithIdentifier)
        {
          CFStringRef BundleWithIdentifier = (__CFString *)CFBundleGetBundleWithIdentifier(BundleWithIdentifier);
          CFDateFormatterRef v29 = *a1;
        }
        CFStringRef v31 = copyLocalizedString((__CFBundle *)BundleWithIdentifier, @"Dates", @"FROM_DATE_TO_DATE", *((const __CFString **)v29 + 17));
        CFStringRef v138 = v31;
        CFStringRef v32 = CFStringCreateWithFormat(alloc, 0, v31, v27, v28);
        if (v156) {
          CFRelease(v156);
        }
        CFStringRef v156 = v32;
        if (v31) {
LABEL_60:
        }
          CFRelease(v31);
      }
      else
      {
        CFDateFormatterRef v59 = *a1;
        long long v60 = (__CFString *)*((void *)*a1 + 24);
        if (v60)
        {
          long long v60 = (__CFString *)CFBundleGetBundleWithIdentifier(v60);
          CFDateFormatterRef v59 = *a1;
        }
        CFStringRef v31 = copyLocalizedString((__CFBundle *)v60, @"Dates", @"EVERY_DATE_TO_DATE", *((const __CFString **)v59 + 17));
        CFStringRef v138 = v31;
        CFStringRef v61 = CFStringCreateWithFormat(alloc, 0, v31, v27, v28);
        if (v156) {
          CFRelease(v156);
        }
        CFStringRef v156 = v61;
        if (v31) {
          goto LABEL_60;
        }
      }
    }
    else if (!v28)
    {
      goto LABEL_63;
    }
    CFRelease(v28);
    if (!v27)
    {
LABEL_63:
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v24);
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v21);
LABEL_64:
      if (ArrayBySeparatingStrings) {
        CFRelease(ArrayBySeparatingStrings);
      }
      goto LABEL_148;
    }
LABEL_62:
    CFRelease(v27);
    goto LABEL_63;
  }
  if (CFStringFind(v7, @":", 0).location != -1)
  {
    uint64_t v33 = a6;
    CFAllocatorRef v34 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFArrayRef v35 = CFStringCreateArrayBySeparatingStrings((CFAllocatorRef)*MEMORY[0x263EFFB08], v7, @":");
    *(void *)&long long v151 = v35;
    if (CFArrayGetCount(v35) != 2) {
      goto LABEL_146;
    }
    unsigned int v36 = *(_DWORD *)(*a2 + 8) - 94;
    if (v36 <= 0x18)
    {
      if (((1 << v36) & 0x8001) != 0)
      {
        id v64 = (std::__shared_weak_count *)a2[1];
        v134[0] = *a2;
        v134[1] = (uint64_t)v64;
        if (v64) {
          atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        *(void *)&long long v147 = QP::DateFormatter::copyTimeDisplayForDate(a1, v134);
        if (v64) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v64);
        }
        int v65 = CFArrayGetValueAtIndex(v35, 1);
        int v66 = (std::__shared_weak_count *)a2[1];
        v133[0] = *a2;
        v133[1] = v66;
        if (v66) {
          atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        CFStringRef v67 = (const __CFString *)QP::DateFormatter::copyDisplayForPeriodWithKey(a1, v133, v65, a4, a5, a6, a7);
        *(void *)&v145[0] = v67;
        if (v66) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v66);
        }
        if (!(void)v147) {
          goto LABEL_145;
        }
        CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(v34, 0, v67);
        CFStringRef v155 = MutableCopy;
        CFStringRef v69 = (const __CFString *)v147;
        v160.CFIndex length = CFStringGetLength(MutableCopy);
        v160.CFIndex location = 0;
        CFStringFindAndReplace(MutableCopy, @"<date>", v69, v160, 0);
        CFStringRef Copy = CFStringCreateCopy(v34, v155);
LABEL_118:
        nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v156, Copy);
        nlp::CFScopedPtr<__CFString *>::reset((const void **)&v155, 0);
LABEL_145:
        nlp::CFScopedPtr<__CFString const*>::reset((const void **)v145, 0);
        nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v147, 0);
LABEL_146:
        if (v35) {
          CFRelease(v35);
        }
        goto LABEL_148;
      }
      if (((1 << v36) & 0x20004) != 0)
      {
        CFArrayRef v71 = (std::__shared_weak_count *)a2[1];
        v137[0] = *a2;
        v137[1] = v71;
        if (v71) {
          atomic_fetch_add_explicit(&v71->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        CFStringRef v72 = QP::DateFormatter::copyWeekdayDisplayForDate(a1, (uint64_t)v137);
        *(void *)&long long v147 = v72;
        if (v71) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v71);
        }
        long long v73 = (std::__shared_weak_count *)a2[1];
        v136[0] = *a2;
        v136[1] = (uint64_t)v73;
        if (v73) {
          atomic_fetch_add_explicit(&v73->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        CFStringRef v74 = QP::DateFormatter::copyTimeDisplayForDate(a1, v136);
        *(void *)&v145[0] = v74;
        if (v73) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v73);
        }
        CFStringRef v75 = (const __CFString *)CFArrayGetValueAtIndex(v35, 1);
        uint64_t v76 = (std::__shared_weak_count *)a2[1];
        v135[0] = *a2;
        v135[1] = v76;
        if (v76) {
          atomic_fetch_add_explicit(&v76->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        CFStringRef v77 = (const __CFString *)QP::DateFormatter::copyDisplayForPeriodWithKey(a1, v135, v75, a4, a5, v33, a7);
        CFStringRef v78 = v72;
        CFStringRef v155 = v77;
        if (v76) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v76);
        }
        CFMutableStringRef v79 = CFStringCreateMutableCopy(v34, 0, v77);
        theCFStringRef String = v79;
        v161.CFIndex length = CFStringGetLength(v79);
        v161.CFIndex location = 0;
        CFStringFindAndReplace(v79, @"<date>", v78, v161, 0);
        CFStringRef v80 = CFStringCreateCopy(v34, v79);
        if (v156) {
          CFRelease(v156);
        }
        CFStringRef v156 = v80;
        if (v74)
        {
          if (CFStringHasPrefix(v75, @"VAL_1"))
          {
            CFDateFormatterRef v81 = *a1;
            uint64_t v82 = (__CFString *)*((void *)*a1 + 24);
            if (v82)
            {
              uint64_t v82 = (__CFString *)CFBundleGetBundleWithIdentifier(v82);
              CFDateFormatterRef v81 = *a1;
            }
            CFStringRef v140 = copyLocalizedString((__CFBundle *)v82, @"Dates", @"ORDINAL_WEEKDAY_AT_TIME_S", *((const __CFString **)v81 + 17));
            CFStringRef v83 = CFStringCreateWithFormat(v34, 0, v140, v156, v74);
          }
          else
          {
            CFDateFormatterRef v102 = *a1;
            long long v103 = (__CFString *)*((void *)*a1 + 24);
            if (v103)
            {
              long long v103 = (__CFString *)CFBundleGetBundleWithIdentifier(v103);
              CFDateFormatterRef v102 = *a1;
            }
            CFStringRef v140 = copyLocalizedString((__CFBundle *)v103, @"Dates", @"ORDINAL_WEEKDAY_AT_TIME_P", *((const __CFString **)v102 + 17));
            CFStringRef v83 = CFStringCreateWithFormat(v34, 0, v140, v156, v74);
          }
          nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v156, v83);
          nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v140, 0);
        }
        if (v79) {
          CFRelease(v79);
        }
        if (v77) {
          CFRelease(v77);
        }
        if (v74) {
          CFRelease(v74);
        }
        if (v78) {
          CFRelease(v78);
        }
        goto LABEL_146;
      }
      if (((1 << v36) & 0x1000200) != 0)
      {
        long long v37 = (std::__shared_weak_count *)a2[1];
        v132[0] = *a2;
        v132[1] = (uint64_t)v37;
        if (v37) {
          atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        *(void *)&long long v147 = QP::DateFormatter::copyDateDisplayForDate(a1, v132);
        if (v37) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v37);
        }
        int v38 = (std::__shared_weak_count *)a2[1];
        v131[0] = *a2;
        v131[1] = (uint64_t)v38;
        if (v38) {
          atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        *(void *)&v145[0] = QP::DateFormatter::copyTimeDisplayForDate(a1, v131);
        if (v38) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v38);
        }
        CFStringRef v39 = (const __CFString *)CFArrayGetValueAtIndex(v35, 1);
        int v40 = (std::__shared_weak_count *)a2[1];
        v130[0] = *a2;
        v130[1] = v40;
        if (v40) {
          atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        CFStringRef v41 = (const __CFString *)QP::DateFormatter::copyDisplayForPeriodWithKey(a1, v130, v39, a4, a5, a6, a7);
        CFStringRef v155 = v41;
        if (v40) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v40);
        }
        if ((void)v147)
        {
          CFMutableStringRef v42 = CFStringCreateMutableCopy(v34, 0, v41);
          theCFStringRef String = v42;
          CFStringRef v43 = (const __CFString *)v147;
          v159.CFIndex length = CFStringGetLength(v42);
          v159.CFIndex location = 0;
          CFStringFindAndReplace(v42, @"<date>", v43, v159, 0);
          CFStringRef v44 = CFStringCreateCopy(v34, theString);
          nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v156, v44);
          if (!*(void *)&v145[0])
          {
LABEL_143:
            nlp::CFScopedPtr<__CFString *>::reset((const void **)&theString, 0);
            goto LABEL_144;
          }
          if (CFStringHasPrefix(v39, @"VAL_1"))
          {
            CFDateFormatterRef v45 = *a1;
            int v46 = (__CFString *)*((void *)*a1 + 24);
            if (v46)
            {
              int v46 = (__CFString *)CFBundleGetBundleWithIdentifier(v46);
              CFDateFormatterRef v45 = *a1;
            }
            CFStringRef v140 = copyLocalizedString((__CFBundle *)v46, @"Dates", @"ORDINAL_WEEKDAY_AT_TIME_S", *((const __CFString **)v45 + 17));
            CFStringRef v47 = CFStringCreateWithFormat(v34, 0, v140, v156, *(void *)&v145[0]);
          }
          else
          {
            CFDateFormatterRef v105 = *a1;
            uint64_t v106 = (__CFString *)*((void *)*a1 + 24);
            if (v106)
            {
              uint64_t v106 = (__CFString *)CFBundleGetBundleWithIdentifier(v106);
              CFDateFormatterRef v105 = *a1;
            }
            CFStringRef v140 = copyLocalizedString((__CFBundle *)v106, @"Dates", @"ORDINAL_WEEKDAY_AT_TIME_P", *((const __CFString **)v105 + 17));
            CFStringRef v47 = CFStringCreateWithFormat(v34, 0, v140, v156, *(void *)&v145[0]);
          }
          nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v156, v47);
          uint64_t v101 = &v140;
          CFStringRef v100 = 0;
        }
        else
        {
          if (!*(void *)&v145[0])
          {
LABEL_144:
            nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v155, 0);
            goto LABEL_145;
          }
          CFMutableStringRef v98 = CFStringCreateMutableCopy(v34, 0, v41);
          theCFStringRef String = v98;
          CFStringRef v99 = *(const __CFString **)&v145[0];
          v163.CFIndex length = CFStringGetLength(v98);
          v163.CFIndex location = 0;
          CFStringFindAndReplace(v98, @"<date>", v99, v163, 0);
          CFStringRef v100 = CFStringCreateCopy(v34, theString);
          uint64_t v101 = &v156;
        }
        nlp::CFScopedPtr<__CFString const*>::reset((const void **)v101, v100);
        goto LABEL_143;
      }
    }
    CFRange v91 = CFArrayGetValueAtIndex(v35, 0);
    long long v92 = (std::__shared_weak_count *)a2[1];
    v129[0] = *a2;
    v129[1] = v92;
    if (v92) {
      atomic_fetch_add_explicit(&v92->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(void *)&long long v147 = QP::DateFormatter::copyDisplayForPeriodWithKey(a1, v129, v91, a4, a5, a6, a7);
    if (v92) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v92);
    }
    long long v93 = CFArrayGetValueAtIndex(v35, 1);
    CFRange v94 = (std::__shared_weak_count *)a2[1];
    v128[0] = *a2;
    v128[1] = v94;
    if (v94) {
      atomic_fetch_add_explicit(&v94->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    CFStringRef v95 = (const __CFString *)QP::DateFormatter::copyDisplayForPeriodWithKey(a1, v128, v93, a4, a5, a6, a7);
    *(void *)&v145[0] = v95;
    if (v94) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v94);
    }
    if (!(void)v147 || !v95) {
      goto LABEL_145;
    }
    CFMutableStringRef v96 = CFStringCreateMutableCopy(v34, 0, v95);
    CFStringRef v155 = v96;
    CFStringRef v97 = (const __CFString *)v147;
    v162.CFIndex length = CFStringGetLength(v96);
    v162.CFIndex location = 0;
    CFStringFindAndReplace(v96, @"<date>", v97, v162, 0);
    CFStringRef Copy = CFStringCreateCopy(v34, v155);
    goto LABEL_118;
  }
  if (CFStringHasPrefix(v7, @"VAL"))
  {
    CFAllocatorRef v48 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFArrayRef v49 = CFStringCreateArrayBySeparatingStrings((CFAllocatorRef)*MEMORY[0x263EFFB08], v7, @"-");
    CFArrayRef v50 = v49;
    *(void *)&long long v151 = v49;
    if (v49)
    {
      *(void *)&long long v147 = 0;
      if (CFArrayGetCount(v49) == 2)
      {
        long long v51 = CFArrayGetValueAtIndex(v50, 1);
        CFTypeRef v52 = CFRetain(v51);
        nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v147, v52);
        CFStringRef v53 = (const __CFString *)CFArrayGetValueAtIndex(v50, 0);
        v158.CFIndex length = CFStringGetLength(v53) - 4;
        v158.CFIndex location = 4;
        *(void *)&v145[0] = CFStringCreateWithSubstring(v48, v53, v158);
        IntCFDictionaryRef Value = CFStringGetIntValue(*(CFStringRef *)&v145[0]);
        CFDateFormatterRef v55 = *a1;
        long long v56 = (__CFString *)*((void *)*a1 + 24);
        if (v56)
        {
          long long v56 = (__CFString *)CFBundleGetBundleWithIdentifier(v56);
          CFDateFormatterRef v55 = *a1;
        }
        CFStringRef v57 = copyLocalizedString((__CFBundle *)v56, @"Dates", (const __CFString *)v147, *((const __CFString **)v55 + 17));
        CFStringRef v155 = v57;
        if (v57 && IntValue)
        {
          CFStringRef v58 = CFStringCreateWithFormat(v48, 0, v57, IntValue);
          nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v156, v58);
        }
        nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v155, 0);
        nlp::CFScopedPtr<__CFString const*>::reset((const void **)v145, 0);
      }
      if ((void)v147) {
        CFRelease((CFTypeRef)v147);
      }
      CFRelease(v50);
    }
    goto LABEL_148;
  }
  if (!CFStringHasPrefix(v7, @"FORMATTED"))
  {
    if (CFStringHasSuffix(v7, @"ORDINAL_WEEKDAY"))
    {
      uint64_t v84 = *(unsigned int *)(*a2 + 52);
      if ((v84 & 0x80000000) == 0)
      {
        CFAllocatorRef v85 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        *(void *)&long long v151 = CFStringCreateArrayBySeparatingStrings((CFAllocatorRef)*MEMORY[0x263EFFB08], v7, @"_");
        id v86 = CFArrayGetValueAtIndex((CFArrayRef)v151, 0);
        CFStringRef v87 = CFStringCreateWithFormat(v85, 0, @"%@_%d_ORDINAL_WEEKDAY", v86, v84);
        *(void *)&long long v147 = v87;
        CFDateFormatterRef v88 = *a1;
        id v89 = (__CFString *)*((void *)*a1 + 24);
        if (v89)
        {
          id v89 = (__CFString *)CFBundleGetBundleWithIdentifier(v89);
          CFStringRef v87 = (const __CFString *)v147;
          CFDateFormatterRef v88 = *a1;
        }
        CFStringRef v90 = copyLocalizedString((__CFBundle *)v89, @"Dates", v87, *((const __CFString **)v88 + 17));
        nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v156, v90);
        nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v147, 0);
        nlp::CFScopedPtr<__CFArray const*>::reset((const void **)&v151, 0);
        goto LABEL_148;
      }
      CFDateFormatterRef v118 = *a1;
      CFRange v119 = (__CFString *)*((void *)*a1 + 24);
      if (v119)
      {
        CFRange v119 = (__CFString *)CFBundleGetBundleWithIdentifier(v119);
        CFDateFormatterRef v118 = *a1;
      }
    }
    else
    {
      if (CFStringHasPrefix(v7, @"holiday"))
      {
        long long v62 = (std::__shared_weak_count *)a2[1];
        v126[0] = *a2;
        v126[1] = v62;
        if (v62) {
          atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        CFStringRef v104 = QP::DateFormatter::copyShortDisplayForDate(a1, (uint64_t)v126, a6, a7);
        nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v156, v104);
        if (v62) {
          goto LABEL_72;
        }
        goto LABEL_148;
      }
      CFDateFormatterRef v118 = *a1;
      CFRange v119 = (__CFString *)*((void *)*a1 + 24);
      if (v119)
      {
        CFRange v119 = (__CFString *)CFBundleGetBundleWithIdentifier(v119);
        CFDateFormatterRef v118 = *a1;
      }
    }
    CFStringRef v120 = copyLocalizedString((__CFBundle *)v119, @"Dates", v7, *((const __CFString **)v118 + 17));
    nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v156, v120);
    goto LABEL_148;
  }
  long long v62 = (std::__shared_weak_count *)a2[1];
  v127[0] = *a2;
  v127[1] = v62;
  if (v62) {
    atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CFStringRef v63 = QP::DateFormatter::copyShortDisplayForDate(a1, (uint64_t)v127, a6, a7);
  if (v156) {
    CFRelease(v156);
  }
  CFStringRef v156 = v63;
  if (v62) {
LABEL_72:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v62);
LABEL_148:
  *(void *)&long long v151 = 0;
  if ((a5 & 1) == 0)
  {
    switch(a4)
    {
      case 5u:
        CFDateFormatterRef v107 = *a1;
        CFStringRef v108 = (__CFString *)*((void *)*a1 + 24);
        if (v108)
        {
          CFStringRef v108 = (__CFString *)CFBundleGetBundleWithIdentifier(v108);
          CFDateFormatterRef v107 = *a1;
        }
        CFStringRef v109 = copyLocalizedString((__CFBundle *)v108, @"Dates", @"BEFORE_DATE", *((const __CFString **)v107 + 17));
        break;
      case 6u:
        CFDateFormatterRef v110 = *a1;
        long long v111 = (__CFString *)*((void *)*a1 + 24);
        if (v111)
        {
          long long v111 = (__CFString *)CFBundleGetBundleWithIdentifier(v111);
          CFDateFormatterRef v110 = *a1;
        }
        CFStringRef v109 = copyLocalizedString((__CFBundle *)v111, @"Dates", @"AFTER_DATE", *((const __CFString **)v110 + 17));
        break;
      case 7u:
        CFDateFormatterRef v112 = *a1;
        long long v113 = (__CFString *)*((void *)*a1 + 24);
        if (v113)
        {
          long long v113 = (__CFString *)CFBundleGetBundleWithIdentifier(v113);
          CFDateFormatterRef v112 = *a1;
        }
        CFStringRef v109 = copyLocalizedString((__CFBundle *)v113, @"Dates", @"SINCE_DATE", *((const __CFString **)v112 + 17));
        break;
      case 8u:
        CFDateFormatterRef v114 = *a1;
        uint64_t v115 = (__CFString *)*((void *)*a1 + 24);
        if (v115)
        {
          uint64_t v115 = (__CFString *)CFBundleGetBundleWithIdentifier(v115);
          CFDateFormatterRef v114 = *a1;
        }
        CFStringRef v109 = copyLocalizedString((__CFBundle *)v115, @"Dates", @"TO_DATE", *((const __CFString **)v114 + 17));
        break;
      default:
        goto LABEL_165;
    }
    CFStringRef v116 = v109;
    *(void *)&long long v151 = v109;
    if (v109)
    {
      int32x4_t v7 = (__CFString *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, v109, v156);
      if (v157) {
        CFRelease(v157);
      }
      goto LABEL_169;
    }
  }
LABEL_165:
  if (v156)
  {
    int32x4_t v7 = (__CFString *)CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], v156);
    if (v157) {
      CFRelease(v157);
    }
    CFStringRef v116 = 0;
LABEL_169:
    unint64_t v157 = v7;
    if (!v7) {
      goto LABEL_173;
    }
    goto LABEL_172;
  }
  CFStringRef v116 = 0;
  int32x4_t v7 = v157;
  if (v157)
  {
LABEL_172:
    int32x4_t v7 = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, v7);
    v164.CFIndex length = CFStringGetLength(v7);
    v164.CFIndex location = 0;
    CFStringFindAndReplace(v7, @" ", @" ", v164, 0);
  }
LABEL_173:
  if (v116) {
    CFRelease(v116);
  }
  if (v156) {
    CFRelease(v156);
  }
  if (v157) {
    CFRelease(v157);
  }
  return v7;
}

void sub_224DCA1C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,const void *a43,uint64_t a44,uint64_t a45,const void *a46,uint64_t a47,uint64_t a48,const void *a49)
{
  nlp::CFScopedPtr<__CFString const*>::reset(&a43, 0);
  nlp::CFScopedPtr<__CFString *>::reset(&a46, 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v49 - 120), 0);
  nlp::CFScopedPtr<__CFString const*>::reset(&a49, 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v49 - 240), 0);
  nlp::CFScopedPtr<__CFArray const*>::reset((const void **)(v49 - 176), 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v49 - 112), 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v49 - 104), 0);
  _Unwind_Resume(a1);
}

void QP::DatePeriod::setDisplayKey(const void **this, const __CFString *a2)
{
  nlp::CFScopedPtr<__CFString const*>::reset(this, 0);
  if (a2)
  {
    CFTypeRef v4 = CFRetain(a2);
    nlp::CFScopedPtr<__CFString const*>::reset(this, v4);
  }
}

__CFString *QP::DateFormatter::copyDisplayForDate(CFDateFormatterRef *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *a2;
  long long v5 = (std::__shared_weak_count *)a2[1];
  v8[0] = *a2;
  v8[1] = v5;
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v4 = *a2;
  }
  int32x4_t v6 = QP::DateFormatter::copyDisplayForPeriodWithKey(a1, v8, *(const __CFString **)v4, *(unsigned __int16 *)(v4 + 12), 0, a3, a4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v6;
}

void sub_224DCA558(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

__CFString *QP::DateFormatter::copyDisplayForDate(CFDateFormatterRef *a1, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  int32x4_t v6 = *(const __CFString ***)a2;
  int32x4_t v7 = *(std::__shared_weak_count **)(a2 + 8);
  v10[0] = *(void *)a2;
  v10[1] = v7;
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    int32x4_t v6 = *(const __CFString ***)a2;
  }
  long long v8 = QP::DateFormatter::copyDisplayForPeriodWithKey(a1, v10, *v6, a3, a4, a5, a6);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  return v8;
}

void sub_224DCA5E0(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

__CFDictionary *QP::DateFormatter::copyStartComponentsForDate(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  long long v4 = *(_OWORD *)(*a2 + 20);
  long long v5 = *(_OWORD *)(*a2 + 52);
  v16[1] = *(_OWORD *)(*a2 + 36);
  v16[2] = v5;
  int v17 = *(_DWORD *)(v3 + 68);
  v16[0] = v4;
  long long v6 = *(_OWORD *)(v3 + 88);
  v14[0] = *(_OWORD *)(v3 + 72);
  v14[1] = v6;
  void v14[2] = *(_OWORD *)(v3 + 104);
  int v15 = *(_DWORD *)(v3 + 120);
  long long v7 = *(_OWORD *)(v3 + 140);
  v12[0] = *(_OWORD *)(v3 + 124);
  v12[1] = v7;
  v12[2] = *(_OWORD *)(v3 + 156);
  int v13 = *(_DWORD *)(v3 + 172);
  long long v8 = (std::__shared_weak_count *)a1[1];
  uint64_t v10 = *a1;
  CFAllocatorRef v11 = v8;
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v3 = *a2;
  }
  QP::DateConverter::resolveDateComponentsAsRange((uint64_t)&v10, *(unsigned __int16 *)(v3 + 12), *(_DWORD *)(v3 + 8), v16, v14, (uint64_t)v12, 1);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (QP::DateComponents::isEmpty((QP::DateComponents *)v16)) {
    return 0;
  }
  else {
    return QP::copyDateComponentsDictionary(*(QP **)(*a1 + 80), *(__CFCalendar **)(*a1 + 72), (const __CFDate *)v16, 0);
  }
}

void sub_224DCA6E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

__CFDictionary *QP::copyDateComponentsDictionary(QP *this, __CFCalendar *a2, const __CFDate *a3, const QP::DateComponents *a4)
{
  int v4 = (int)a4;
  double AbsoluteTime = QP::DateComponents::getAbsoluteTime(a3, this, a2);
  int v31 = -1;
  int valuePtr = -1;
  int v29 = -1;
  int v30 = -1;
  int v27 = -1;
  int v28 = -1;
  int v25 = -1;
  int v26 = -1;
  int v23 = -1;
  int v24 = -1;
  int v22 = -1;
  if (v4)
  {
    if ((*((_DWORD *)a3 + 3) & 0x80000000) == 0) {
      int valuePtr = *((_DWORD *)a3 + 3);
    }
    if ((*((_DWORD *)a3 + 4) & 0x80000000) == 0) {
      int v31 = *((_DWORD *)a3 + 4);
    }
    if ((*((_DWORD *)a3 + 5) & 0x80000000) == 0) {
      int v30 = *((_DWORD *)a3 + 5);
    }
    if ((*((_DWORD *)a3 + 8) & 0x80000000) == 0) {
      int v24 = *((_DWORD *)a3 + 8);
    }
    if ((*((_DWORD *)a3 + 9) & 0x80000000) == 0) {
      int v23 = *((_DWORD *)a3 + 9);
    }
    if ((*((_DWORD *)a3 + 10) & 0x80000000) == 0) {
      int v25 = *((_DWORD *)a3 + 10);
    }
    if ((*((_DWORD *)a3 + 11) & 0x80000000) == 0) {
      int v26 = *((_DWORD *)a3 + 11);
    }
    if ((*((_DWORD *)a3 + 2) & 0x80000000) == 0) {
      int v29 = *((_DWORD *)a3 + 2);
    }
    if ((*((_DWORD *)a3 + 1) & 0x80000000) == 0) {
      int v28 = *((_DWORD *)a3 + 1);
    }
    if ((*(_DWORD *)a3 & 0x80000000) == 0) {
      int v27 = *(_DWORD *)a3;
    }
  }
  else
  {
    if ((*((_DWORD *)a3 + 9) & 0x80000000) == 0) {
      int v23 = *((_DWORD *)a3 + 9);
    }
    CFCalendarDecomposeAbsoluteTime(this, AbsoluteTime, "dMyEwWYHms", &valuePtr, &v31, &v30, &v24, &v26, &v25, &v22, &v29, &v28, &v27);
    if (v23 == 0x7FFFFFFF) {
      int v23 = -1;
    }
  }
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableStringRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if ((*((_DWORD *)a3 + 3) & 0x80000000) == 0)
  {
    CFNumberRef v10 = CFNumberCreate(v8, kCFNumberIntType, &valuePtr);
    CFDictionarySetValue(Mutable, @"d", v10);
    if (v10) {
      CFRelease(v10);
    }
  }
  if ((*((_DWORD *)a3 + 4) & 0x80000000) == 0)
  {
    CFNumberRef v11 = CFNumberCreate(v8, kCFNumberIntType, &v31);
    CFDictionarySetValue(Mutable, @"M", v11);
    if (v11) {
      CFRelease(v11);
    }
  }
  if ((*((_DWORD *)a3 + 5) & 0x80000000) == 0)
  {
    CFNumberRef v12 = CFNumberCreate(v8, kCFNumberIntType, &v30);
    CFDictionarySetValue(Mutable, @"y", v12);
    if (v12) {
      CFRelease(v12);
    }
  }
  if ((*((_DWORD *)a3 + 8) & 0x80000000) == 0)
  {
    CFNumberRef v13 = CFNumberCreate(v8, kCFNumberIntType, &v24);
    CFDictionarySetValue(Mutable, @"E", v13);
    if (v13) {
      CFRelease(v13);
    }
  }
  if ((*((_DWORD *)a3 + 9) & 0x80000000) == 0)
  {
    CFNumberRef v14 = CFNumberCreate(v8, kCFNumberIntType, &v23);
    CFDictionarySetValue(Mutable, @"F", v14);
    if (v14) {
      CFRelease(v14);
    }
  }
  if ((*((_DWORD *)a3 + 10) & 0x80000000) == 0)
  {
    CFNumberRef v15 = CFNumberCreate(v8, kCFNumberIntType, &v25);
    CFDictionarySetValue(Mutable, @"W", v15);
    if (v15) {
      CFRelease(v15);
    }
  }
  if ((*((_DWORD *)a3 + 11) & 0x80000000) == 0)
  {
    CFNumberRef v16 = CFNumberCreate(v8, kCFNumberIntType, &v26);
    CFDictionarySetValue(Mutable, @"w", v16);
    if (v16) {
      CFRelease(v16);
    }
  }
  if ((*((_DWORD *)a3 + 12) & 0x80000000) == 0)
  {
    CFNumberRef v17 = CFNumberCreate(v8, kCFNumberIntType, &v22);
    CFDictionarySetValue(Mutable, @"Y", v17);
    if (v17) {
      CFRelease(v17);
    }
  }
  if ((*((_DWORD *)a3 + 2) & 0x80000000) == 0)
  {
    CFNumberRef v18 = CFNumberCreate(v8, kCFNumberIntType, &v29);
    CFDictionarySetValue(Mutable, @"H", v18);
    if (v18) {
      CFRelease(v18);
    }
  }
  if ((*((_DWORD *)a3 + 1) & 0x80000000) == 0)
  {
    CFNumberRef v19 = CFNumberCreate(v8, kCFNumberIntType, (char *)a3 + 4);
    CFDictionarySetValue(Mutable, @"m", v19);
    if (v19) {
      CFRelease(v19);
    }
  }
  if ((*(_DWORD *)a3 & 0x80000000) == 0)
  {
    CFNumberRef v20 = CFNumberCreate(v8, kCFNumberIntType, a3);
    CFDictionarySetValue(Mutable, @"s", v20);
    if (v20) {
      CFRelease(v20);
    }
  }
  return Mutable;
}

void sub_224DCAB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  nlp::CFScopedPtr<__CFNumber const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

__CFDictionary *QP::DateFormatter::copyEndComponentsForDate(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  long long v4 = *(_OWORD *)(*a2 + 20);
  long long v5 = *(_OWORD *)(*a2 + 52);
  v16[1] = *(_OWORD *)(*a2 + 36);
  v16[2] = v5;
  int v17 = *(_DWORD *)(v3 + 68);
  v16[0] = v4;
  long long v6 = *(_OWORD *)(v3 + 88);
  v14[0] = *(_OWORD *)(v3 + 72);
  v14[1] = v6;
  void v14[2] = *(_OWORD *)(v3 + 104);
  int v15 = *(_DWORD *)(v3 + 120);
  long long v7 = *(_OWORD *)(v3 + 140);
  v12[0] = *(_OWORD *)(v3 + 124);
  v12[1] = v7;
  v12[2] = *(_OWORD *)(v3 + 156);
  int v13 = *(_DWORD *)(v3 + 172);
  CFAllocatorRef v8 = (std::__shared_weak_count *)a1[1];
  uint64_t v10 = *a1;
  CFNumberRef v11 = v8;
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v3 = *a2;
  }
  QP::DateConverter::resolveDateComponentsAsRange((uint64_t)&v10, *(unsigned __int16 *)(v3 + 12), *(_DWORD *)(v3 + 8), v16, v14, (uint64_t)v12, 1);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (QP::DateComponents::isEmpty((QP::DateComponents *)v14)) {
    return 0;
  }
  else {
    return QP::copyDateComponentsDictionary(*(QP **)(*a1 + 80), *(__CFCalendar **)(*a1 + 72), (const __CFDate *)v14, 0);
  }
}

void sub_224DCACA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

__CFDictionary *QP::DateFormatter::copyFreqComponentsForDate(uint64_t a1, uint64_t a2)
{
  if (QP::DateComponents::isEmpty((QP::DateComponents *)(*(void *)a2 + 124))) {
    return 0;
  }
  long long v6 = *(__CFCalendar **)(*(void *)a1 + 72);
  long long v5 = *(QP **)(*(void *)a1 + 80);
  CFDateRef v7 = (const __CFDate *)(*(void *)a2 + 124);
  return QP::copyDateComponentsDictionary(v5, v6, v7, (const QP::DateComponents *)1);
}

CFStringRef QP::DateFormatter::copyDisplayStringWithStartAndEndDateForRange(QP::DateFormatter *this, const __CFString *a2, CFDictionaryRef theDict, const __CFString *a4, const __CFDictionary *a5)
{
  CFStringRef v5 = 0;
  if (a2)
  {
    if (theDict)
    {
      int v11 = CFDictionaryContainsKey(theDict, kQPParseAttributeValueDateTemporalModifierKey);
      CFStringRef v5 = 0;
      if (a5)
      {
        if (a4 && v11)
        {
          if (CFDictionaryContainsKey(a5, kQPParseAttributeValueDateTemporalModifierKey))
          {
            CFTypeRef cf = 0;
            CFTypeRef v30 = 0;
            CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, kQPParseAttributeValueDateTemporalModifierKey);
            CFNumberRef v13 = (const __CFNumber *)CFDictionaryGetValue(a5, kQPParseAttributeValueDateTemporalModifierKey);
            int valuePtr = 0;
            CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
            int v27 = 0;
            CFNumberGetValue(v13, kCFNumberIntType, &v27);
            if (valuePtr == 3)
            {
              uint64_t v14 = *(void *)this;
              CFStringRef BundleWithIdentifier = *(__CFString **)(*(void *)this + 192);
              if (BundleWithIdentifier)
              {
                CFStringRef BundleWithIdentifier = (__CFString *)CFBundleGetBundleWithIdentifier(BundleWithIdentifier);
                uint64_t v14 = *(void *)this;
              }
              CFStringRef v16 = copyLocalizedString((__CFBundle *)BundleWithIdentifier, @"Dates", @"FROM_DATE", *(const __CFString **)(v14 + 136));
              if (v16)
              {
                CFStringRef Copy = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, v16, a2);
                CFTypeRef v30 = Copy;
                CFRelease(v16);
              }
              else
              {
                CFStringRef Copy = 0;
              }
            }
            else
            {
              CFStringRef Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], a2);
              CFTypeRef v30 = Copy;
            }
            if (v27 == 3)
            {
              uint64_t v18 = *(void *)this;
              CFNumberRef v19 = *(__CFString **)(*(void *)this + 192);
              if (v19)
              {
                CFNumberRef v19 = (__CFString *)CFBundleGetBundleWithIdentifier(v19);
                uint64_t v18 = *(void *)this;
              }
              CFStringRef v20 = copyLocalizedString((__CFBundle *)v19, @"Dates", @"TO_DATE", *(const __CFString **)(v18 + 136));
              if (v20)
              {
                CFStringRef v21 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, v20, a4);
                CFTypeRef cf = v21;
                CFRelease(v20);
              }
              else
              {
                CFStringRef v21 = 0;
              }
            }
            else
            {
              CFStringRef v21 = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], a4);
              CFTypeRef cf = v21;
            }
            uint64_t v22 = *(void *)this;
            int v23 = *(__CFString **)(*(void *)this + 192);
            if (v23)
            {
              int v23 = (__CFString *)CFBundleGetBundleWithIdentifier(v23);
              uint64_t v22 = *(void *)this;
            }
            CFStringRef v24 = copyLocalizedString((__CFBundle *)v23, @"Dates", @"DATE1_DATE2", *(const __CFString **)(v22 + 136));
            CFStringRef v26 = v24;
            CFStringRef v5 = 0;
            if (v24)
            {
              if (!Copy
                || !v21
                || (CFStringRef v5 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, v24, Copy, v21),
                    (CFStringRef v24 = v26) != 0))
              {
                CFRelease(v24);
              }
            }
            if (cf) {
              CFRelease(cf);
            }
            if (v30) {
              CFRelease(v30);
            }
          }
          else
          {
            return 0;
          }
        }
      }
    }
  }
  return v5;
}

void sub_224DCAFC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  long long v4 = va_arg(va1, const void *);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  CFDateRef v7 = va_arg(va2, const void *);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va1, 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va2, 0);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__5(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(__n128 *)(a1 + 4nlp::CFScopedPtr<__CFString const*>::reset((const void **)&a9, 0) = result;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 4nlp::CFScopedPtr<__CFString const*>::reset((const void **)&a9, 0) = 0;
  return result;
}

void QP::DateComponents::enumerate(unsigned int *a1, uint64_t a2)
{
  if ((a1[3] & 0x80000000) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v33, "d");
    (*(void (**)(uint64_t, void **, void))(a2 + 16))(a2, v33, a1[3]);
    if (v34 < 0) {
      operator delete(v33[0]);
    }
  }
  if ((a1[4] & 0x80000000) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v31, "MMMM");
    (*(void (**)(uint64_t, void **, void))(a2 + 16))(a2, v31, a1[4]);
    if (v32 < 0) {
      operator delete(v31[0]);
    }
  }
  if ((a1[5] & 0x80000000) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v29, "y");
    (*(void (**)(uint64_t, void **, void))(a2 + 16))(a2, v29, a1[5]);
    if (v30 < 0) {
      operator delete(v29[0]);
    }
  }
  if ((a1[2] & 0x80000000) == 0 || (a1[1] & 0x80000000) == 0 || (*a1 & 0x80000000) == 0)
  {
    if ((a1[7] & 0x80000000) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "H");
      (*(void (**)(uint64_t, void **, void))(a2 + 16))(a2, __p, a1[2] & ~((int)a1[2] >> 31));
      if (v20 < 0) {
        operator delete(__p[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(v17, "m");
      (*(void (**)(uint64_t, void **, void))(a2 + 16))(a2, v17, a1[1] & ~((int)a1[1] >> 31));
      if (v18 < 0) {
        operator delete(v17[0]);
      }
      if ((*a1 & 0x80000000) == 0)
      {
        std::string::basic_string[abi:ne180100]<0>(v15, "s");
        (*(void (**)(uint64_t, void *, void))(a2 + 16))(a2, v15, *a1);
        if (v16 < 0)
        {
          uint64_t v6 = (void **)v15;
LABEL_34:
          operator delete(*v6);
        }
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v27, "h");
      (*(void (**)(uint64_t, void **, void))(a2 + 16))(a2, v27, a1[2] & ~((int)a1[2] >> 31));
      if (v28 < 0) {
        operator delete(v27[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(v25, "m");
      (*(void (**)(uint64_t, void **, void))(a2 + 16))(a2, v25, a1[1] & ~((int)a1[1] >> 31));
      if (v26 < 0) {
        operator delete(v25[0]);
      }
      if ((*a1 & 0x80000000) == 0)
      {
        std::string::basic_string[abi:ne180100]<0>(v23, "s");
        (*(void (**)(uint64_t, void **, void))(a2 + 16))(a2, v23, *a1);
        if (v24 < 0) {
          operator delete(v23[0]);
        }
      }
      std::string::basic_string[abi:ne180100]<0>(v21, "a");
      unsigned int v4 = a1[7];
      BOOL v5 = v4 > 8 || ((1 << v4) & 0x10A) == 0;
      (*(void (**)(uint64_t, void *, BOOL))(a2 + 16))(a2, v21, v5);
      if (v22 < 0)
      {
        uint64_t v6 = (void **)v21;
        goto LABEL_34;
      }
    }
  }
  if ((a1[8] & 0x80000000) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v13, "EEEE");
    (*(void (**)(uint64_t, void **, void))(a2 + 16))(a2, v13, a1[8]);
    if (v14 < 0) {
      operator delete(v13[0]);
    }
  }
  if ((a1[11] & 0x80000000) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v11, "w");
    (*(void (**)(uint64_t, void **, void))(a2 + 16))(a2, v11, a1[11]);
    if (v12 < 0) {
      operator delete(v11[0]);
    }
  }
  if ((a1[10] & 0x80000000) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v9, "W");
    (*(void (**)(uint64_t, void **, void))(a2 + 16))(a2, v9, a1[10]);
    if (v10 < 0) {
      operator delete(v9[0]);
    }
  }
  if ((a1[12] & 0x80000000) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "Y");
    (*(void (**)(uint64_t, void **, void))(a2 + 16))(a2, v7, a1[12]);
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
}

void sub_224DCB42C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,char a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (a38 < 0) {
    operator delete(a33);
  }
  _Unwind_Resume(exception_object);
}

void ___ZNK2QP14DateComponents25getShortFormatWithOptionsEbPd_block_invoke(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(v15, "w");
  if (QP::equals((void *)a2, v15))
  {
    BOOL v4 = 0;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v13, "Y");
    if (QP::equals((void *)a2, v13))
    {
      BOOL v4 = 0;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "F");
      BOOL v4 = !QP::equals((void *)a2, __p);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
    }
    if (v14 < 0) {
      operator delete(v13[0]);
    }
  }
  if (v16 < 0)
  {
    operator delete(v15[0]);
    if (!v4) {
      return;
    }
LABEL_13:
    std::string::basic_string[abi:ne180100]<0>(v15, "h");
    if (QP::equals((void *)a2, v15))
    {
      BOOL v5 = 1;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v13, "H");
      BOOL v5 = QP::equals((void *)a2, v13);
      if (v14 < 0) {
        operator delete(v13[0]);
      }
    }
    if (v16 < 0)
    {
      operator delete(v15[0]);
      if (v5) {
        goto LABEL_19;
      }
    }
    else if (v5)
    {
LABEL_19:
      uint64_t v6 = (std::string *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
      CFDateRef v7 = "ha";
      std::string::size_type v8 = 2;
LABEL_34:
      std::string::append(v6, v7, v8);
      return;
    }
    std::string::basic_string[abi:ne180100]<0>(v15, "y");
    if (QP::equals((void *)a2, v15))
    {
      int v9 = *(unsigned __int8 *)(a1 + 40);
      if (v16 < 0) {
        operator delete(v15[0]);
      }
      if (v9)
      {
        uint64_t v6 = (std::string *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
        CFDateRef v7 = "GGGGyy";
        std::string::size_type v8 = 6;
        goto LABEL_34;
      }
    }
    else if (v16 < 0)
    {
      operator delete(v15[0]);
    }
    uint64_t v6 = (std::string *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
    int v10 = *(char *)(a2 + 23);
    if (v10 >= 0) {
      CFDateRef v7 = (const std::string::value_type *)a2;
    }
    else {
      CFDateRef v7 = *(const std::string::value_type **)a2;
    }
    if (v10 >= 0) {
      std::string::size_type v8 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      std::string::size_type v8 = *(void *)(a2 + 8);
    }
    goto LABEL_34;
  }
  if (v4) {
    goto LABEL_13;
  }
}

void sub_224DCB748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZNK2QP14DateComponents25getShortFormatWithOptionsEbPd_block_invoke_2(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "w");
  BOOL v4 = QP::equals((void *)a2, __p);
  BOOL v5 = v4;
  if (v19 < 0)
  {
    operator delete(__p[0]);
    if (v5) {
      goto LABEL_3;
    }
  }
  else if (v4)
  {
LABEL_3:
    uint64_t v6 = (std::string *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
    CFDateRef v7 = "d";
    std::string::size_type v8 = 1;
LABEL_37:
    std::string::append(v6, v7, v8);
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "Y");
  BOOL v9 = QP::equals((void *)a2, __p);
  BOOL v10 = v9;
  if (v19 < 0)
  {
    operator delete(__p[0]);
    if (v10)
    {
LABEL_7:
      uint64_t v6 = (std::string *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
      if (*(unsigned char *)(a1 + 40))
      {
        CFDateRef v7 = "MMMMGy";
        std::string::size_type v8 = 6;
      }
      else
      {
        CFDateRef v7 = "MMMMy";
        std::string::size_type v8 = 5;
      }
      goto LABEL_37;
    }
  }
  else if (v9)
  {
    goto LABEL_7;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "d");
  if (QP::equals((void *)a2, __p))
  {
    BOOL v11 = 0;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v16, "M");
    if (QP::equals((void *)a2, v16))
    {
      BOOL v11 = 0;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v14, "y");
      BOOL v11 = !QP::equals((void *)a2, v14);
      if (v15 < 0) {
        operator delete(v14[0]);
      }
    }
    if (v17 < 0) {
      operator delete(v16[0]);
    }
  }
  if (v19 < 0)
  {
    operator delete(__p[0]);
    if (!v11) {
      return;
    }
    goto LABEL_23;
  }
  if (v11)
  {
LABEL_23:
    std::string::basic_string[abi:ne180100]<0>(__p, "h");
    if (QP::equals((void *)a2, __p))
    {
      BOOL v12 = 1;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v16, "H");
      BOOL v12 = QP::equals((void *)a2, v16);
      if (v17 < 0) {
        operator delete(v16[0]);
      }
    }
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v6 = (std::string *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
    if (v12)
    {
      CFDateRef v7 = "ha";
      std::string::size_type v8 = 2;
    }
    else
    {
      int v13 = *(char *)(a2 + 23);
      if (v13 >= 0) {
        CFDateRef v7 = (const std::string::value_type *)a2;
      }
      else {
        CFDateRef v7 = *(const std::string::value_type **)a2;
      }
      if (v13 >= 0) {
        std::string::size_type v8 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        std::string::size_type v8 = *(void *)(a2 + 8);
      }
    }
    goto LABEL_37;
  }
}

void sub_224DCB9F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<QP::DatePeriod>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D830CA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QP::DatePeriod>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D830CA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A623E20);
}

void std::__shared_ptr_emplace<QP::DatePeriod>::__on_zero_shared(uint64_t a1)
{
}

uint64_t QP::SpotlightFormatter::isValid(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (*a2)
  {
    if (*(void *)result) {
      return *(void *)(result + 88) || QP::Parse::isValid((CFStringRef *)result);
    }
    else {
      return 0;
    }
  }
  return result;
}

BOOL QP::Parse::isValid(CFStringRef *this)
{
  if (!*this) {
    return 0;
  }
  CFMutableStringRef MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, *this);
  CFStringTrimWhitespace(MutableCopy);
  CFStringRef v4 = this[8];
  CFStringRef v3 = this[9];
  CFIndex Length = CFStringGetLength(MutableCopy);
  BOOL v6 = 0;
  if (!v4 && v3 == (CFStringRef)Length) {
    BOOL v6 = this[5] == this[4];
  }
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  return v6;
}

void sub_224DCBBAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nlp::CFScopedPtr<__CFString *>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t QP::SpotlightFormatter::setCompletion(QP::SpotlightFormatter *a1, const void ***a2)
{
  QP::SpotlightFormatter::clear(a1);
  QP::Formatter::clear((const void **)a1);
  CFStringRef v4 = (std::__shared_weak_count *)a2[1];
  unint64_t v129 = *a2;
  id v130 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v5 = QP::Formatter::setCompletion((const void **)a1);
  if (v130) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v130);
  }
  if (!v5) {
    return 0;
  }
  BOOL v6 = *a2;
  if (!**a2 || !v6[2] || !v6[3] || !v6[5] || !v6[6]) {
    return 0;
  }
  QP::getUTF8StringFromCFString((const __CFString *)v6[4], v127);
  QP::getUTF8StringFromCFString((const __CFString *)(*a2)[5], v125);
  QP::getUTF8StringFromCFString((const __CFString *)(*a2)[6], v123);
  QP::ParserGrammar::symbolID(*((void *)a1 + 3), (uint64_t)v125);
  unsigned int v7 = QP::ParserGrammar::symbolID(*((void *)a1 + 3), (uint64_t)v123);
  uint64_t v117 = 0;
  CFDateFormatterRef v118 = &v117;
  uint64_t v119 = 0x3002000000;
  CFStringRef v120 = __Block_byref_object_copy__6;
  uint64_t v121 = __Block_byref_object_dispose__6;
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  __int16 v9 = *((_WORD *)*a2 + 36);
  uint64_t v10 = (uint64_t)(*a2)[7];
  v116[0] = MEMORY[0x263EF8330];
  v116[1] = 0x40000000;
  v116[2] = ___ZN2QP18SpotlightFormatter13setCompletionENSt3__110shared_ptrINS_10CompletionEEE_block_invoke;
  v116[3] = &unk_264705888;
  v116[4] = &v117;
  QP::SpotlightFormatter::_parseAttributeKey((uint64_t)a1, (uint64_t)v127, 0, v7, v9, v10, 0, 0, 0, 0, 0, 0, (uint64_t)v116);
  uint64_t v110 = 0;
  long long v111 = (const void **)&v110;
  uint64_t v112 = 0x3002000000;
  long long v113 = __Block_byref_object_copy__1_0;
  CFDateFormatterRef v114 = __Block_byref_object_dispose__2_0;
  CFTypeRef v115 = 0;
  CFIndex Count = CFArrayGetCount((CFArrayRef)v118[5]);
  if (Count)
  {
    CFStringRef v12 = CFStringCreateByCombiningStrings(v8, (CFArrayRef)v118[5], @" || ");
    __p[0] = (void *)v12;
    if (CFStringGetLength(v12))
    {
      int v13 = v111;
      if (Count <= 1) {
        CFStringRef v14 = CFStringCreateWithFormat(v8, 0, @"%@", v12);
      }
      else {
        CFStringRef v14 = CFStringCreateWithFormat(v8, 0, @"(%@)", v12);
      }
      nlp::CFScopedPtr<__CFString const*>::reset(v13 + 5, v14);
    }
    if (v12) {
      CFRelease(v12);
    }
  }
  uint64_t v104 = 0;
  CFDateFormatterRef v105 = &v104;
  uint64_t v106 = 0x3002000000;
  CFDateFormatterRef v107 = __Block_byref_object_copy__6;
  CFStringRef v108 = __Block_byref_object_dispose__6;
  CFTypeRef v109 = CFArrayCreateMutable(v8, 1, MEMORY[0x263EFFF70]);
  CFMutableDictionaryRef v15 = CFDictionaryCreateMutable(v8, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  CFDateFormatterRef v102 = 0;
  CFTypeRef v103 = v15;
  if (!v111[5]) {
    goto LABEL_41;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "kQPDate");
  BOOL v16 = QP::startswith((unsigned __int8 *)v127, (unsigned __int8 *)__p);
  if (SBYTE7(v96) < 0) {
    operator delete(__p[0]);
  }
  if (!v16)
  {
    if (v111[5])
    {
      CFDictionarySetValue(v15, @"TEXT", (*a2)[2]);
      CFDictionarySetValue(v15, @"QUERY", v111[5]);
      char v22 = *a2;
      CFStringRef v23 = (const __CFString *)(*a2)[1];
      if (v23)
      {
        CFIndex Length = CFStringGetLength(v23);
        char v22 = *a2;
        if (Length)
        {
          CFDictionarySetValue(v15, @"TOKEN", v22[1]);
          char v22 = *a2;
        }
      }
      if (*((_WORD *)v22 + 36) == 5)
      {
        int v25 = v22[7];
        if (v25) {
          CFDictionarySetValue(v15, @"STATUS", v25);
        }
      }
      CFArrayAppendValue((CFMutableArrayRef)v105[5], v15);
    }
    goto LABEL_41;
  }
  if (!(*a2)[1] || !(*a2)[2])
  {
LABEL_41:
    char v26 = 0;
    goto LABEL_42;
  }
  CFAbsoluteTime at = getCurrentTime(*(__CFCalendar **)(*((void *)a1 + 1) + 80), *(const __CFDate **)(*((void *)a1 + 1) + 72));
  uint64_t v99 = 0;
  uint64_t v100 = 0;
  int v98 = 0;
  CFCalendarDecomposeAbsoluteTime(*(CFCalendarRef *)(*((void *)a1 + 1) + 80), at, "dMywE", (char *)&v100 + 4, &v100, (char *)&v99 + 4, &v99, &v98);
  *(_DWORD *)&v97[16] = -1;
  *(void *)&long long v17 = -1;
  *((void *)&v17 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = -1;
  long long v96 = v17;
  *(_OWORD *)CFStringRef v97 = v17;
  *(_OWORD *)std::string __p = v17;
  int v94 = -1;
  long long v92 = v17;
  *(_OWORD *)CFTypeRef cf = v17;
  long long v91 = v17;
  std::string::basic_string[abi:ne180100]<0>(valuePtr, "RelativeMonthDate");
  BOOL v18 = QP::startswith((unsigned __int8 *)v123, (unsigned __int8 *)valuePtr);
  if (v90 < 0) {
    operator delete(valuePtr[0]);
  }
  if (!v18)
  {
    std::string::basic_string[abi:ne180100]<0>(valuePtr, "RelativeTodayDate");
    BOOL v33 = QP::endswith((uint64_t *)v123, (uint64_t *)valuePtr);
    if (v90 < 0) {
      operator delete(valuePtr[0]);
    }
    if (v33)
    {
      HIDWORD(__p[1]) = HIDWORD(v100);
      *(void *)&long long v96 = __PAIR64__(HIDWORD(v99), v100);
      int v34 = 7;
      CFStringRef v35 = @"TODAY";
      goto LABEL_191;
    }
    std::string::basic_string[abi:ne180100]<0>(valuePtr, "RelativeYesterdayDate");
    BOOL v37 = QP::endswith((uint64_t *)v123, (uint64_t *)valuePtr);
    if (v90 < 0) {
      operator delete(valuePtr[0]);
    }
    if (v37)
    {
      CFCalendarAddComponents(*(CFCalendarRef *)(*((void *)a1 + 1) + 80), &at, 0, "d", 0xFFFFFFFFLL);
      CFCalendarDecomposeAbsoluteTime(*(CFCalendarRef *)(*((void *)a1 + 1) + 80), at, "dMy", (char *)&v100 + 4, &v100, (char *)&v99 + 4);
      HIDWORD(__p[1]) = HIDWORD(v100);
      *(void *)&long long v96 = __PAIR64__(HIDWORD(v99), v100);
      int v34 = 19;
      CFStringRef v35 = @"YESTERDAY";
      goto LABEL_191;
    }
    std::string::basic_string[abi:ne180100]<0>(valuePtr, "RelativeThisWeekDate");
    BOOL v39 = QP::endswith((uint64_t *)v123, (uint64_t *)valuePtr);
    if (v90 < 0) {
      operator delete(valuePtr[0]);
    }
    if (v39)
    {
      *(void *)&v97[12] = v99;
      int v34 = 12;
      CFStringRef v35 = @"THIS_WEEK";
      goto LABEL_191;
    }
    std::string::basic_string[abi:ne180100]<0>(valuePtr, "RelativeLastWeekDate");
    BOOL v41 = QP::endswith((uint64_t *)v123, (uint64_t *)valuePtr);
    if (v90 < 0) {
      operator delete(valuePtr[0]);
    }
    if (v41)
    {
      CFCalendarAddComponents(*(CFCalendarRef *)(*((void *)a1 + 1) + 80), &at, 0, "w", 0xFFFFFFFFLL);
      CFCalendarDecomposeAbsoluteTime(*(CFCalendarRef *)(*((void *)a1 + 1) + 80), at, "wY", &v99, (char *)&v99 + 4);
      *(void *)&v97[12] = v99;
      int v34 = 24;
      CFStringRef v35 = @"LAST_WEEK";
      goto LABEL_191;
    }
    std::string::basic_string[abi:ne180100]<0>(valuePtr, "RelativeThisMonthDate");
    BOOL v43 = QP::endswith((uint64_t *)v123, (uint64_t *)valuePtr);
    if (v90 < 0) {
      operator delete(valuePtr[0]);
    }
    if (v43)
    {
      *(void *)&long long v96 = __PAIR64__(HIDWORD(v99), v100);
      int v34 = 13;
      CFStringRef v35 = @"THIS_MONTH";
      goto LABEL_191;
    }
    std::string::basic_string[abi:ne180100]<0>(valuePtr, "RelativeLastMonthDate");
    BOOL v45 = QP::endswith((uint64_t *)v123, (uint64_t *)valuePtr);
    if (v90 < 0) {
      operator delete(valuePtr[0]);
    }
    if (v45)
    {
      CFCalendarAddComponents(*(CFCalendarRef *)(*((void *)a1 + 1) + 80), &at, 0, "M", 0xFFFFFFFFLL);
      CFCalendarDecomposeAbsoluteTime(*(CFCalendarRef *)(*((void *)a1 + 1) + 80), at, "My", &v100, (char *)&v99 + 4);
      *(void *)&long long v96 = __PAIR64__(HIDWORD(v99), v100);
      int v34 = 25;
      CFStringRef v35 = @"LAST_MONTH";
      goto LABEL_191;
    }
    std::string::basic_string[abi:ne180100]<0>(valuePtr, "RelativeThisYearDate");
    BOOL v47 = QP::endswith((uint64_t *)v123, (uint64_t *)valuePtr);
    if (v90 < 0) {
      operator delete(valuePtr[0]);
    }
    if (v47)
    {
      DWORD1(v96) = HIDWORD(v99);
      int v34 = 14;
      CFStringRef v35 = @"THIS_YEAR";
      goto LABEL_191;
    }
    std::string::basic_string[abi:ne180100]<0>(valuePtr, "RelativeLastYearDate");
    BOOL v49 = QP::endswith((uint64_t *)v123, (uint64_t *)valuePtr);
    if (v90 < 0) {
      operator delete(valuePtr[0]);
    }
    if (v49)
    {
      CFCalendarAddComponents(*(CFCalendarRef *)(*((void *)a1 + 1) + 80), &at, 0, "y", 0xFFFFFFFFLL);
      CFCalendarDecomposeAbsoluteTime(*(CFCalendarRef *)(*((void *)a1 + 1) + 80), at, "y", (char *)&v99 + 4);
      DWORD1(v96) = HIDWORD(v99);
      int v34 = 26;
      CFStringRef v35 = @"LAST_YEAR";
      goto LABEL_191;
    }
    std::string::basic_string[abi:ne180100]<0>(valuePtr, "CalendarDate");
    if (QP::endswith((uint64_t *)v123, (uint64_t *)valuePtr))
    {
      long long v51 = (*a2)[8];
      if (v90 < 0) {
        operator delete(valuePtr[0]);
      }
      if (v51)
      {
        CFDictionaryRef v52 = (const __CFDictionary *)(*a2)[8];
        LODWORD(valuePtr[0]) = 0;
        CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v52, @"d");
        if (Value)
        {
          CFNumberGetValue(Value, kCFNumberIntType, valuePtr);
          HIDWORD(__p[1]) = valuePtr[0];
        }
        CFNumberRef v54 = (const __CFNumber *)CFDictionaryGetValue(v52, @"M");
        if (v54)
        {
          CFNumberGetValue(v54, kCFNumberIntType, valuePtr);
          LODWORD(v96) = valuePtr[0];
        }
        CFNumberRef v55 = (const __CFNumber *)CFDictionaryGetValue(v52, @"y");
        if (v55)
        {
          CFNumberGetValue(v55, kCFNumberIntType, valuePtr);
          DWORD1(v96) = valuePtr[0];
        }
        CFNumberRef v56 = (const __CFNumber *)CFDictionaryGetValue(v52, @"E");
        if (v56)
        {
          CFNumberGetValue(v56, kCFNumberIntType, valuePtr);
          *(_DWORD *)CFStringRef v97 = valuePtr[0];
        }
        CFNumberRef v57 = (const __CFNumber *)CFDictionaryGetValue(v52, @"w");
        if (v57)
        {
          CFNumberGetValue(v57, kCFNumberIntType, valuePtr);
          *(_DWORD *)&v97[12] = valuePtr[0];
        }
        CFNumberRef v58 = (const __CFNumber *)CFDictionaryGetValue(v52, @"Y");
        if (v58)
        {
          CFNumberGetValue(v58, kCFNumberIntType, valuePtr);
          *(_DWORD *)&v97[16] = valuePtr[0];
        }
        CFNumberRef v59 = (const __CFNumber *)CFDictionaryGetValue(v52, @"H");
        if (v59)
        {
          CFNumberGetValue(v59, kCFNumberIntType, valuePtr);
          LODWORD(__p[1]) = valuePtr[0];
        }
        CFNumberRef v60 = (const __CFNumber *)CFDictionaryGetValue(v52, @"m");
        if (v60)
        {
          CFNumberGetValue(v60, kCFNumberIntType, valuePtr);
          HIDWORD(__p[0]) = valuePtr[0];
        }
        CFNumberRef v61 = (const __CFNumber *)CFDictionaryGetValue(v52, @"s");
        if (v61)
        {
          CFNumberGetValue(v61, kCFNumberIntType, valuePtr);
          LODWORD(__p[0]) = valuePtr[0];
        }
        int v34 = 2;
        goto LABEL_190;
      }
    }
    else if (v90 < 0)
    {
      operator delete(valuePtr[0]);
    }
    goto LABEL_209;
  }
  std::string::basic_string[abi:ne180100]<0>(valuePtr, "1");
  if (QP::endswith((uint64_t *)v123, (uint64_t *)valuePtr))
  {
    std::string::basic_string[abi:ne180100]<0>(v87, "11");
    BOOL v19 = !QP::endswith((uint64_t *)v123, (uint64_t *)v87);
    if (v88 < 0) {
      operator delete(v87[0]);
    }
  }
  else
  {
    BOOL v19 = 0;
  }
  if (v90 < 0) {
    operator delete(valuePtr[0]);
  }
  if (!v19)
  {
    std::string::basic_string[abi:ne180100]<0>(valuePtr, "2");
    if (QP::endswith((uint64_t *)v123, (uint64_t *)valuePtr))
    {
      std::string::basic_string[abi:ne180100]<0>(v87, "12");
      BOOL v38 = !QP::endswith((uint64_t *)v123, (uint64_t *)v87);
      if (v88 < 0) {
        operator delete(v87[0]);
      }
    }
    else
    {
      BOOL v38 = 0;
    }
    if (v90 < 0) {
      operator delete(valuePtr[0]);
    }
    if (v38)
    {
      int v36 = 2;
      goto LABEL_189;
    }
    std::string::basic_string[abi:ne180100]<0>(valuePtr, "3");
    BOOL v40 = QP::endswith((uint64_t *)v123, (uint64_t *)valuePtr);
    if (v90 < 0) {
      operator delete(valuePtr[0]);
    }
    if (v40)
    {
      int v36 = 3;
      goto LABEL_189;
    }
    std::string::basic_string[abi:ne180100]<0>(valuePtr, "4");
    BOOL v42 = QP::endswith((uint64_t *)v123, (uint64_t *)valuePtr);
    if (v90 < 0) {
      operator delete(valuePtr[0]);
    }
    if (v42)
    {
      int v36 = 4;
      goto LABEL_189;
    }
    std::string::basic_string[abi:ne180100]<0>(valuePtr, "5");
    BOOL v44 = QP::endswith((uint64_t *)v123, (uint64_t *)valuePtr);
    if (v90 < 0) {
      operator delete(valuePtr[0]);
    }
    if (v44)
    {
      int v36 = 5;
      goto LABEL_189;
    }
    std::string::basic_string[abi:ne180100]<0>(valuePtr, "6");
    BOOL v46 = QP::endswith((uint64_t *)v123, (uint64_t *)valuePtr);
    if (v90 < 0) {
      operator delete(valuePtr[0]);
    }
    if (v46)
    {
      int v36 = 6;
      goto LABEL_189;
    }
    std::string::basic_string[abi:ne180100]<0>(valuePtr, "7");
    BOOL v48 = QP::endswith((uint64_t *)v123, (uint64_t *)valuePtr);
    if (v90 < 0) {
      operator delete(valuePtr[0]);
    }
    if (v48)
    {
      int v36 = 7;
      goto LABEL_189;
    }
    std::string::basic_string[abi:ne180100]<0>(valuePtr, "8");
    BOOL v50 = QP::endswith((uint64_t *)v123, (uint64_t *)valuePtr);
    if (v90 < 0) {
      operator delete(valuePtr[0]);
    }
    if (v50)
    {
      int v36 = 8;
      goto LABEL_189;
    }
    std::string::basic_string[abi:ne180100]<0>(valuePtr, "9");
    BOOL v62 = QP::endswith((uint64_t *)v123, (uint64_t *)valuePtr);
    if (v90 < 0) {
      operator delete(valuePtr[0]);
    }
    if (v62)
    {
      int v36 = 9;
      goto LABEL_189;
    }
    std::string::basic_string[abi:ne180100]<0>(valuePtr, "10");
    BOOL v63 = QP::endswith((uint64_t *)v123, (uint64_t *)valuePtr);
    if (v90 < 0) {
      operator delete(valuePtr[0]);
    }
    if (v63)
    {
      int v36 = 10;
      goto LABEL_189;
    }
    std::string::basic_string[abi:ne180100]<0>(valuePtr, "11");
    BOOL v64 = QP::endswith((uint64_t *)v123, (uint64_t *)valuePtr);
    if (v90 < 0) {
      operator delete(valuePtr[0]);
    }
    if (v64)
    {
      int v36 = 11;
      goto LABEL_189;
    }
    std::string::basic_string[abi:ne180100]<0>(valuePtr, "12");
    BOOL v65 = QP::endswith((uint64_t *)v123, (uint64_t *)valuePtr);
    if (v90 < 0) {
      operator delete(valuePtr[0]);
    }
    if (v65)
    {
      int v36 = 12;
      goto LABEL_189;
    }
LABEL_209:
    uint64_t v20 = 0;
    goto LABEL_65;
  }
  int v36 = 1;
LABEL_189:
  LODWORD(v96) = v36;
  int v34 = 6;
LABEL_190:
  CFStringRef v35 = @"FORMATTED";
LABEL_191:
  int v66 = (char *)operator new(0xC8uLL);
  *((void *)v66 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = 0;
  *((void *)v66 + 2) = 0;
  *(void *)int v66 = &unk_26D830CA8;
  *((void *)v66 + 3) = 0;
  long long v67 = v96;
  *(_OWORD *)(v66 + 44) = *(_OWORD *)__p;
  *(_OWORD *)(v66 + 6nlp::CFScopedPtr<__CFString const*>::reset((const void **)&a9, 0) = v67;
  *(_OWORD *)(v66 + 76) = *(_OWORD *)v97;
  *((_DWORD *)v66 + 23) = *(_DWORD *)&v97[16];
  *((_DWORD *)v66 + 36) = v94;
  long long v68 = *(_OWORD *)cf;
  long long v69 = v91;
  *((_OWORD *)v66 + 7) = v92;
  *((_OWORD *)v66 + 8) = v68;
  *((_OWORD *)v66 + 6) = v69;
  *((_DWORD *)v66 + 49) = -1;
  *(void *)&long long v70 = -1;
  *((void *)&v70 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = -1;
  *(_OWORD *)(v66 + 18nlp::CFScopedPtr<__CFString const*>::reset((const void **)&a9, 0) = v70;
  *(_OWORD *)(v66 + 164) = v70;
  *(_OWORD *)(v66 + 148) = v70;
  *((_DWORD *)v66 + 8) = v34;
  *((_WORD *)v66 + 18) = 1;
  *((_DWORD *)v66 + 1nlp::CFScopedPtr<__CFString const*>::reset((const void **)&a9, 0) = 3;
  QP::DatePeriod::setDisplayKey((const void **)v66 + 3, v35);
  if (QP::DateComponents::isConcreteType(__p, *((_DWORD *)v66 + 8))
    && (QP::DateComponents::isEmpty((QP::DateComponents *)&v91) & 1) == 0)
  {
    QP::DateComponents::isConcreteType(&v91, *((_DWORD *)v66 + 8));
  }
  uint64_t v71 = 0;
  if (QP::DateComponents::isEmpty((QP::DateComponents *)&v91)
    && (DWORD1(v96) & 0x80000000) != 0
    && (*(_DWORD *)&v97[16] & 0x80000000) != 0)
  {
    double AbsoluteTime = QP::DateComponents::getAbsoluteTime((QP::DateComponents *)__p, *(__CFCalendar **)(*((void *)a1 + 1) + 88), *(const __CFDate **)(*((void *)a1 + 1) + 72));
    if (AbsoluteTime <= getCurrentTime(*(__CFCalendar **)(*((void *)a1 + 1) + 88), *(const __CFDate **)(*((void *)a1 + 1) + 72)))uint64_t v71 = 0; {
    else
    }
      uint64_t v71 = 0xFFFFFFFFLL;
  }
  long long v73 = (CFDateFormatterRef *)*((void *)a1 + 5);
  CFAllocatorRef v85 = v66 + 24;
  id v86 = (std::__shared_weak_count *)v66;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v66 + 1, 1uLL, memory_order_relaxed);
  char v26 = QP::DateFormatter::copyDisplayForDate(v73, (uint64_t *)&v85, 1, v71);
  CFDateFormatterRef v102 = v26;
  if (v86) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v86);
  }
  uint64_t v74 = *((void *)a1 + 3);
  CFStringRef v75 = *a2;
  CFStringRef v76 = (const __CFString *)(*a2)[2];
  v80[0] = MEMORY[0x263EF8330];
  v80[1] = 1174405120;
  v80[2] = ___ZN2QP18SpotlightFormatter13setCompletionENSt3__110shared_ptrINS_10CompletionEEE_block_invoke_101;
  v80[3] = &unk_26D830CF0;
  v80[6] = a1;
  v80[7] = v66 + 24;
  v80[4] = &v104;
  CFDateFormatterRef v81 = (std::__shared_weak_count *)v66;
  uint64_t v82 = v75;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v66 + 1, 1uLL, memory_order_relaxed);
  int v84 = v71;
  v80[5] = &v110;
  CFStringRef v77 = (std::__shared_weak_count *)a2[1];
  CFStringRef v83 = v77;
  if (v77) {
    atomic_fetch_add_explicit(&v77->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  QP::ParserGrammar::tokens(v74, @"kQPDate", @"0", v76, (uint64_t)v80);
  if (v83) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v83);
  }
  if (v81) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v81);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v66);
LABEL_42:
  CFStringRef v27 = (const __CFString *)v111[5];
  if (!v27 || !CFStringGetLength(v27))
  {
    uint64_t v20 = 0;
    if (!v26) {
      goto LABEL_65;
    }
    goto LABEL_64;
  }
  if (v26) {
    QP::Formatter::setSuggestionValue(a1, kQPSuggestionResultSuggestionKey, v26);
  }
  else {
    QP::Formatter::setSuggestionValue(a1, kQPSuggestionResultSuggestionKey, **a2);
  }
  QP::Formatter::setSuggestionValue(a1, kQPSuggestionResultDescriptionKey, v111[5]);
  QP::Formatter::setSuggestionValue(a1, kQPSuggestionResultTokensKey, (const void *)v105[5]);
  QP::Formatter::setSuggestionValue(a1, kQPSuggestionResultTypeKey, (*a2)[3]);
  __p[0] = 0;
  __p[1] = __p;
  *(void *)&long long v96 = 0x3002000000;
  *((void *)&v96 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = __Block_byref_object_copy__128_0;
  *(void *)CFStringRef v97 = __Block_byref_object_dispose__129_0;
  *(void *)&v97[8] = CFDictionaryCreateMutable(v8, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  BOOL v28 = CFStringsAreEqual((CFStringRef)(*a2)[5], @"KIND");
  if (CFStringsAreEqual((CFStringRef)(*a2)[5], @"ATTACH"))
  {
    BOOL v29 = 1;
  }
  else
  {
    int HasPrefix = CFStringHasPrefix((CFStringRef)(*a2)[5], @"PROATTACH");
    BOOL v29 = HasPrefix != 0;
    if (!(v28 | HasPrefix)) {
      goto LABEL_61;
    }
  }
  if (v28)
  {
    valuePtr[0] = (void *)1;
    *(void *)&long long v91 = 0;
    *((void *)&v91 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = &v91;
    *(void *)&long long v92 = 0x3002000000;
    *((void *)&v92 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = __Block_byref_object_copy__139;
    cf[0] = __Block_byref_object_dispose__140;
    cf[1] = CFNumberCreate(v8, kCFNumberCFIndexType, valuePtr);
    if (*(void *)(*((void *)&v91 + 1) + 40))
    {
      uint64_t v31 = *((void *)a1 + 3);
      v79[0] = MEMORY[0x263EF8330];
      v79[1] = 0x40000000;
      v79[2] = ___ZN2QP18SpotlightFormatter13setCompletionENSt3__110shared_ptrINS_10CompletionEEE_block_invoke_141;
      void v79[3] = &unk_2647058B0;
      v79[4] = __p;
      v79[5] = &v91;
      QP::ParserGrammar::categories(v31, v7, (uint64_t)v79);
    }
    _Block_object_dispose(&v91, 8);
    if (cf[1]) {
      CFRelease(cf[1]);
    }
  }
  if (v29)
  {
    valuePtr[0] = (void *)2;
    *(void *)&long long v91 = 0;
    *((void *)&v91 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = &v91;
    *(void *)&long long v92 = 0x3002000000;
    *((void *)&v92 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = __Block_byref_object_copy__139;
    cf[0] = __Block_byref_object_dispose__140;
    cf[1] = CFNumberCreate(v8, kCFNumberCFIndexType, valuePtr);
    if (*(void *)(*((void *)&v91 + 1) + 40))
    {
      uint64_t v32 = *((void *)a1 + 3);
      v78[0] = MEMORY[0x263EF8330];
      v78[1] = 0x40000000;
      void v78[2] = ___ZN2QP18SpotlightFormatter13setCompletionENSt3__110shared_ptrINS_10CompletionEEE_block_invoke_2;
      v78[3] = &unk_2647058D8;
      v78[4] = __p;
      v78[5] = &v91;
      QP::ParserGrammar::categories(v32, v7, (uint64_t)v78);
    }
    _Block_object_dispose(&v91, 8);
    nlp::CFScopedPtr<__CFNumber const*>::reset(&cf[1], 0);
  }
LABEL_61:
  QP::Formatter::setSuggestionValue(a1, kQPSuggestionResultRankCategoriesKey, *((const void **)__p[1] + 5));
  _Block_object_dispose(__p, 8);
  if (*(void *)&v97[8]) {
    CFRelease(*(CFTypeRef *)&v97[8]);
  }
  uint64_t v20 = 1;
  if (!v26) {
    goto LABEL_65;
  }
LABEL_64:
  CFRelease(v26);
LABEL_65:
  if (v103) {
    CFRelease(v103);
  }
  _Block_object_dispose(&v104, 8);
  if (v109) {
    CFRelease(v109);
  }
  _Block_object_dispose(&v110, 8);
  if (v115) {
    CFRelease(v115);
  }
  _Block_object_dispose(&v117, 8);
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v124 < 0) {
    operator delete(v123[0]);
  }
  if (v126 < 0) {
    operator delete(v125[0]);
  }
  if (v128 < 0) {
    operator delete(v127[0]);
  }
  return v20;
}

void sub_224DCCF4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a49 < 0) {
    operator delete(__p);
  }
  nlp::CFScopedPtr<__CFString const*>::reset(&a69, 0);
  nlp::CFScopedPtr<__CFDictionary *>::reset(&a70, 0);
  _Block_object_dispose(&a71, 8);
  nlp::CFScopedPtr<__CFArray *>::reset((const void **)(v72 + 40), 0);
  _Block_object_dispose(&STACK[0x208], 8);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)&STACK[0x230], 0);
  _Block_object_dispose((const void *)(v73 - 256), 8);
  nlp::CFScopedPtr<__CFArray *>::reset((const void **)(v71 + 40), 0);
  if (*(char *)(v73 - 185) < 0) {
    operator delete(*(void **)(v73 - 208));
  }
  if (*(char *)(v73 - 161) < 0) {
    operator delete(*(void **)(v73 - 184));
  }
  if (*(char *)(v73 - 137) < 0) {
    operator delete(*(void **)(v73 - 160));
  }
  _Unwind_Resume(a1);
}

void QP::SpotlightFormatter::clear(QP::SpotlightFormatter *this)
{
  uint64_t v2 = (const void **)((char *)this + 88);
  CFStringRef v3 = (CFAllocatorRef *)MEMORY[0x263EFFB08];
  if (*((void *)this + 11))
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
    nlp::CFScopedPtr<__CFArray *>::reset(v2, Mutable);
  }
  if (*((void *)this + 12))
  {
    CFMutableArrayRef v5 = CFArrayCreateMutable(*v3, 0, MEMORY[0x263EFFF70]);
    nlp::CFScopedPtr<__CFArray *>::reset((const void **)this + 12, v5);
  }
  if (*((void *)this + 13))
  {
    CFMutableArrayRef v6 = CFArrayCreateMutable(*v3, 0, MEMORY[0x263EFFF70]);
    nlp::CFScopedPtr<__CFArray *>::reset((const void **)this + 13, v6);
  }
  if (*((void *)this + 14))
  {
    CFMutableArrayRef v7 = CFArrayCreateMutable(*v3, 0, MEMORY[0x263EFFF70]);
    nlp::CFScopedPtr<__CFArray *>::reset((const void **)this + 14, v7);
  }
  if (*((void *)this + 15))
  {
    CFMutableArrayRef v8 = CFArrayCreateMutable(*v3, 0, MEMORY[0x263EFFF70]);
    nlp::CFScopedPtr<__CFArray *>::reset((const void **)this + 15, v8);
  }
  if (*((void *)this + 16))
  {
    CFMutableArrayRef v9 = CFArrayCreateMutable(*v3, 0, MEMORY[0x263EFFF70]);
    nlp::CFScopedPtr<__CFArray *>::reset((const void **)this + 16, v9);
  }
  if (*((void *)this + 17))
  {
    CFMutableArrayRef v10 = CFArrayCreateMutable(*v3, 0, MEMORY[0x263EFFF70]);
    nlp::CFScopedPtr<__CFArray *>::reset((const void **)this + 17, v10);
  }
  if (*((void *)this + 18))
  {
    CFMutableArrayRef v11 = CFArrayCreateMutable(*v3, 0, MEMORY[0x263EFFF70]);
    nlp::CFScopedPtr<__CFArray *>::reset((const void **)this + 18, v11);
  }
  *((_WORD *)this + 96) = 0;
}

uint64_t __Block_byref_object_copy__6(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a2 + 4nlp::CFScopedPtr<__CFString const*>::reset((const void **)&a9, 0) = 0;
  *(void *)(result + 4nlp::CFScopedPtr<__CFString const*>::reset((const void **)&a9, 0) = v2;
  return result;
}

void __Block_byref_object_dispose__6(uint64_t a1)
{
}

void QP::SpotlightFormatter::_parseAttributeKey(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4, __int16 a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (QP::ParserGrammar::hasTranslations(*(void *)(a1 + 24), a2))
  {
    uint64_t v20 = *(void *)(a1 + 24);
    v21[0] = MEMORY[0x263EF8330];
    v21[1] = 0x40000000;
    void v21[2] = ___ZN2QP18SpotlightFormatter18_parseAttributeKeyERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEtt12QPSymbolFlagPK10__CFStringPK9__CFArraySG_SD_SD_SD_SD_U13block_pointerFvSD_E_block_invoke;
    uint64_t v21[3] = &unk_2647059F0;
    __int16 v22 = a4;
    int v21[4] = a13;
    v21[5] = a1;
    v21[6] = a9;
    v21[7] = a11;
    v21[8] = a10;
    v21[9] = a12;
    __int16 v23 = a5;
    v21[10] = a6;
    v21[11] = a7;
    v21[12] = a8;
    v21[13] = a2;
    QP::ParserGrammar::translations(v20, a2, (uint64_t)v21);
  }
}

void ___ZN2QP18SpotlightFormatter13setCompletionENSt3__110shared_ptrINS_10CompletionEEE_block_invoke(uint64_t a1, const void *a2)
{
}

uint64_t __Block_byref_object_copy__1_0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a2 + 4nlp::CFScopedPtr<__CFString const*>::reset((const void **)&a9, 0) = 0;
  *(void *)(result + 4nlp::CFScopedPtr<__CFString const*>::reset((const void **)&a9, 0) = v2;
  return result;
}

void __Block_byref_object_dispose__2_0(uint64_t a1)
{
}

uint64_t QP::DateComponents::isConcreteType(_DWORD *a1, int a2)
{
  if ((a2 - 6) < 0x55) {
    return 1;
  }
  if (a2 != 3)
  {
    if ((a1[11] & 0x80000000) != 0)
    {
      if ((a1[10] & 0x80000000) == 0
        || (a1[9] & 0x80000000) == 0
        || (a1[12] & 0x80000000) == 0
        || (a1[3] & 0x80000000) != 0
        || (a1[4] & 0x80000000) != 0
        || (a1[5] & 0x80000000) != 0)
      {
        return 0;
      }
    }
    else if ((a1[12] & 0x80000000) != 0)
    {
      return 0;
    }
    return 1;
  }
  return 0;
}

void ___ZN2QP18SpotlightFormatter13setCompletionENSt3__110shared_ptrINS_10CompletionEEE_block_invoke_101(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFString *a5)
{
  uint64_t v7 = *(void *)(a1 + 48);
  if (!CFArrayGetCount(*(CFArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)))
  {
    CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    int v34 = Mutable;
    CFMutableArrayRef v10 = *(uint64_t **)(v7 + 40);
    uint64_t v11 = *(void *)(a1 + 56);
    CFStringRef v12 = *(std::__shared_weak_count **)(a1 + 64);
    uint64_t v31 = v11;
    uint64_t v32 = v12;
    if (v12)
    {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v11 = *(void *)(a1 + 56);
    }
    started = QP::DateFormatter::copyISODisplayForStartDate(v10, &v31, *(unsigned __int16 *)(v11 + 12), 0, 1, *(unsigned int *)(a1 + 88));
    BOOL v33 = started;
    if (v32) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v32);
    }
    CFStringRef v14 = *(uint64_t **)(v7 + 40);
    uint64_t v15 = *(void *)(a1 + 56);
    BOOL v16 = *(std::__shared_weak_count **)(a1 + 64);
    uint64_t v28 = v15;
    BOOL v29 = v16;
    if (v16)
    {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v15 = *(void *)(a1 + 56);
    }
    long long v17 = QP::DateFormatter::copyISODisplayForEndDate(v14, &v28, *(unsigned __int16 *)(v15 + 12), 0, 1, *(unsigned int *)(a1 + 88));
    char v30 = v17;
    if (v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v29);
    }
    if (a5)
    {
      CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(v8, 0, a5);
      CFMutableStringRef v27 = MutableCopy;
      v35.CFIndex length = CFStringGetLength(MutableCopy);
      v35.CFIndex location = 0;
      CFStringFindAndReplace(MutableCopy, @"%1@", started, v35, 0);
      v36.CFIndex length = CFStringGetLength(MutableCopy);
      v36.CFIndex location = 0;
      CFStringFindAndReplace(MutableCopy, @"%2@", v17, v36, 0);
      CFDictionarySetValue(Mutable, @"QUERY", MutableCopy);
      uint64_t v19 = *(void *)(*(void *)(a1 + 40) + 8);
      CFStringRef Copy = CFStringCreateCopy(v8, MutableCopy);
      nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v19 + 40), Copy);
      if (MutableCopy) {
        CFRelease(MutableCopy);
      }
    }
    else
    {
      nlp::CFScopedPtr<__CFString const*>::reset((const void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40), 0);
    }
    if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40))
    {
      CFStringRef v21 = *(CFDateFormatterRef **)(v7 + 40);
      uint64_t v22 = *(void *)(a1 + 56);
      __int16 v23 = *(std::__shared_weak_count **)(a1 + 64);
      uint64_t v25 = v22;
      char v26 = v23;
      if (v23)
      {
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v22 = *(void *)(a1 + 56);
      }
      char v24 = QP::DateFormatter::copyDisplayForDate(v21, (uint64_t)&v25, *(unsigned __int16 *)(v22 + 12), 1u, 1, *(unsigned int *)(a1 + 88));
      CFMutableStringRef v27 = v24;
      if (v26) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      }
      if (v24) {
        CFDictionarySetValue(Mutable, @"TEXT", v24);
      }
      else {
        CFDictionarySetValue(Mutable, @"TEXT", *(const void **)(*(void *)(a1 + 72) + 16));
      }
      CFDictionarySetValue(Mutable, @"TOKEN", *(const void **)(*(void *)(a1 + 72) + 8));
      CFDictionarySetValue(Mutable, @"DATE_FROM", started);
      CFDictionarySetValue(Mutable, @"DATE_TO", v17);
      CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), Mutable);
      if (v24) {
        CFRelease(v24);
      }
    }
    if (v17) {
      CFRelease(v17);
    }
    if (started) {
      CFRelease(started);
    }
    if (Mutable) {
      CFRelease(Mutable);
    }
  }
}

void sub_224DCD880(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, const void *);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v11 = va_arg(va2, const void *);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va1, 0);
  nlp::CFScopedPtr<__CFDictionary *>::reset((const void **)va2, 0);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_56c43_ZTSNSt3__110shared_ptrIN2QP10DatePeriodEEE72c43_ZTSNSt3__110shared_ptrIN2QP10CompletionEEE(void *result, void *a2)
{
  uint64_t v2 = a2[8];
  result[7] = a2[7];
  result[8] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[10];
  result[9] = a2[9];
  result[10] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_56c43_ZTSNSt3__110shared_ptrIN2QP10DatePeriodEEE72c43_ZTSNSt3__110shared_ptrIN2QP10CompletionEEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 64);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

uint64_t __Block_byref_object_copy__128_0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a2 + 4nlp::CFScopedPtr<__CFString const*>::reset((const void **)&a9, 0) = 0;
  *(void *)(result + 4nlp::CFScopedPtr<__CFString const*>::reset((const void **)&a9, 0) = v2;
  return result;
}

void __Block_byref_object_dispose__129_0(uint64_t a1)
{
}

uint64_t __Block_byref_object_copy__139(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a2 + 4nlp::CFScopedPtr<__CFString const*>::reset((const void **)&a9, 0) = 0;
  *(void *)(result + 4nlp::CFScopedPtr<__CFString const*>::reset((const void **)&a9, 0) = v2;
  return result;
}

void __Block_byref_object_dispose__140(uint64_t a1)
{
}

void ___ZN2QP18SpotlightFormatter13setCompletionENSt3__110shared_ptrINS_10CompletionEEE_block_invoke_141(uint64_t a1, uint64_t a2)
{
  CFStringFromCFStringRef String = QP::createCFStringFromString(a2);
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), CFStringFromString, *(const void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
  if (CFStringFromString) {
    CFRelease(CFStringFromString);
  }
}

void sub_224DCDA34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

void ___ZN2QP18SpotlightFormatter13setCompletionENSt3__110shared_ptrINS_10CompletionEEE_block_invoke_2(uint64_t a1, uint64_t a2)
{
  CFStringFromCFStringRef String = QP::createCFStringFromString(a2);
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), CFStringFromString, *(const void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
  if (CFStringFromString) {
    CFRelease(CFStringFromString);
  }
}

void sub_224DCDAB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

void QP::SpotlightFormatter::setDefaultParse(uint64_t a1, uint64_t a2)
{
  QP::SpotlightFormatter::clear((QP::SpotlightFormatter *)a1);
  CFStringRef v4 = *(std::__shared_weak_count **)(a2 + 8);
  int v13 = *(__CFString ***)a2;
  CFStringRef v14 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  QP::Formatter::setDefaultParse(a1, (const __CFString ***)&v13);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  CFMutableArrayRef v5 = &stru_26D832058;
  if (*(void *)a2 && **(void **)a2) {
    CFMutableArrayRef v5 = **(__CFString ***)a2;
  }
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFStringRef v7 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"(** = \"%@*\"cdw)", v5);
  valuePtr[1] = v7;
  QP::Formatter::setResultValue((QP::Formatter *)a1, kQPParseResultDescriptionKey, v7);
  uint64_t v8 = *(void *)(a1 + 8);
  if (*(void *)(v8 + 200) && *(void *)(v8 + 104))
  {
    if (*(unsigned char *)(v8 + 33)) {
      uint64_t v9 = (const void **)(a1 + 160);
    }
    else {
      uint64_t v9 = (const void **)(a1 + 152);
    }
  }
  else
  {
    uint64_t v9 = (const void **)(a1 + 152);
  }
  QP::Formatter::setResultValue((QP::Formatter *)a1, kQPParseResultConfidenceKey, *v9);
  valuePtr[0] = 0;
  CFNumberRef v10 = CFNumberCreate(v6, kCFNumberCFIndexType, valuePtr);
  if (v10) {
    QP::Formatter::setResultValue((QP::Formatter *)a1, kQPParseResultAttributeCountKey, v10);
  }
  CFDictionaryRef Copy = CFDictionaryCreateCopy(v6, *(CFDictionaryRef *)(a1 + 176));
  QP::Formatter::setResultValue((QP::Formatter *)a1, kQPParseResultRankCategoriesKey, Copy);
  QP::Formatter::setResultValue((QP::Formatter *)a1, kQPParseResultSuggestionKey, &stru_26D832058);
  QP::SpotlightFormatter::updateWithLastSuggestionFragment((CFArrayRef *)a1);
  if (Copy) {
    CFRelease(Copy);
  }
  if (v10) {
    CFRelease(v10);
  }
  if (v7) {
    CFRelease(v7);
  }
}

void sub_224DCDC90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  CFMutableArrayRef v5 = va_arg(va1, const void *);
  uint64_t v7 = va_arg(va1, void);
  nlp::CFScopedPtr<__CFNumber const*>::reset((const void **)va, 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va1, 0);
  _Unwind_Resume(a1);
}

void QP::SpotlightFormatter::updateWithLastSuggestionFragment(CFArrayRef *this)
{
  CFIndex Count = CFArrayGetCount(this[13]);
  if (Count)
  {
    CFIndex v3 = Count;
    CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(this[13], Count - 1);
    if (v3 == CFArrayGetCount(this[12])) {
      theCFStringRef String = (CFStringRef)CFArrayGetValueAtIndex(this[12], v3 - 1);
    }
    else {
      theCFStringRef String = 0;
    }
    if (v3 == CFArrayGetCount(this[15])) {
      uint64_t v19 = (__CFString *)CFArrayGetValueAtIndex(this[15], v3 - 1);
    }
    else {
      uint64_t v19 = 0;
    }
    if (v3 == CFArrayGetCount(this[14])) {
      CFArrayRef theArray = (CFArrayRef)CFArrayGetValueAtIndex(this[14], v3 - 1);
    }
    else {
      CFArrayRef theArray = 0;
    }
    if (v3 == CFArrayGetCount(this[16])) {
      CFArrayRef v5 = (const __CFArray *)CFArrayGetValueAtIndex(this[16], v3 - 1);
    }
    else {
      CFArrayRef v5 = 0;
    }
    if (v3 == CFArrayGetCount(this[17]))
    {
      CFArrayRef v6 = (const __CFArray *)CFArrayGetValueAtIndex(this[17], v3 - 1);
      if (!ValueAtIndex) {
        return;
      }
    }
    else
    {
      CFArrayRef v6 = 0;
      if (!ValueAtIndex) {
        return;
      }
    }
    if (CFStringGetLength(ValueAtIndex)
      && theArray
      && CFArrayGetCount(theArray)
      && v19
      && theString
      && CFStringGetLength(theString))
    {
      CFStringRef v18 = ValueAtIndex;
      CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      valuePtr[1] = Mutable;
      if (v5)
      {
        CFIndex v9 = CFArrayGetCount(v5);
        if (v9 >= 1)
        {
          CFIndex v10 = 0;
          do
          {
            uint64_t v11 = CFArrayGetValueAtIndex(v5, v10);
            valuePtr[0] = 1;
            CFNumberRef v12 = CFNumberCreate(v7, kCFNumberCFIndexType, valuePtr);
            if (v12)
            {
              CFDictionarySetValue(Mutable, v11, v12);
              CFRelease(v12);
            }
            ++v10;
          }
          while (v9 != v10);
        }
      }
      if (v6)
      {
        CFIndex v13 = CFArrayGetCount(v6);
        if (v13 >= 1)
        {
          CFIndex v14 = 0;
          do
          {
            uint64_t v15 = CFArrayGetValueAtIndex(v6, v14);
            if (!CFDictionaryContainsKey(Mutable, v15))
            {
              valuePtr[0] = 2;
              CFNumberRef v16 = CFNumberCreate(v7, kCFNumberCFIndexType, valuePtr);
              if (v16)
              {
                CFDictionarySetValue(Mutable, v15, v16);
                CFRelease(v16);
              }
            }
            ++v14;
          }
          while (v13 != v14);
        }
      }
      CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(v7, 0, v18);
      valuePtr[0] = MutableCopy;
      CFStringTrimWhitespace(MutableCopy);
      QP::Formatter::setSuggestionValue((QP::Formatter *)this, kQPSuggestionResultSuggestionKey, MutableCopy);
      QP::Formatter::setSuggestionValue((QP::Formatter *)this, kQPSuggestionResultDescriptionKey, theString);
      QP::Formatter::setSuggestionValue((QP::Formatter *)this, kQPSuggestionResultRankCategoriesKey, Mutable);
      if (CFArrayGetCount(theArray)) {
        QP::Formatter::setSuggestionValue((QP::Formatter *)this, kQPSuggestionResultTokensKey, theArray);
      }
      else {
        uint64_t v19 = @"kQPSuggestion";
      }
      QP::Formatter::setSuggestionValue((QP::Formatter *)this, kQPSuggestionResultTypeKey, v19);
      if (MutableCopy) {
        CFRelease(MutableCopy);
      }
      if (Mutable) {
        CFRelease(Mutable);
      }
    }
  }
}

void sub_224DCE060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  nlp::CFScopedPtr<__CFDictionary *>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t QP::SpotlightFormatter::setParse(uint64_t a1, const __CFString ***a2)
{
  QP::SpotlightFormatter::clear((QP::SpotlightFormatter *)a1);
  QP::Formatter::clear((const void **)a1);
  CFStringRef v4 = (std::__shared_weak_count *)a2[1];
  long long v70 = *a2;
  uint64_t v71 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v5 = QP::Formatter::setParse(a1, (uint64_t)&v70);
  if (v71) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v71);
  }
  long long v69 = 0;
  if (v5 && CFArrayGetCount(*(CFArrayRef *)(a1 + 96)))
  {
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
    int valuePtr = Mutable;
    if (!(*a2)[11])
    {
      CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 96));
      if (Count >= 1)
      {
        for (CFIndex i = 0; i != Count; ++i)
        {
          CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 96), i);
          if (CFStringGetLength(ValueAtIndex)) {
            CFArrayAppendValue(Mutable, ValueAtIndex);
          }
        }
      }
    }
    uint64_t v11 = *(const void **)(a1 + 168);
    CFStringRef v12 = CFStringCreateByCombiningStrings(v6, Mutable, @" && ");
    CFTypeRef cf = v12;
    if (CFArrayGetCount(Mutable) < 2)
    {
      if (!CFArrayGetCount(Mutable))
      {
        CFStringRef v47 = **a2;
        if (v47 && CFStringGetLength(v47))
        {
          uint64_t v15 = (__CFString *)CFStringCreateWithFormat(v6, 0, @"(** = \"%@*\"cwd)", **a2);
          uint64_t v48 = *(void *)(a1 + 8);
          uint64_t v49 = *(void *)(v48 + 200);
          long long v69 = v15;
          if (v49 && *(void *)(v48 + 104))
          {
            if (*(unsigned char *)(v48 + 33)) {
              BOOL v50 = (const void **)(a1 + 160);
            }
            else {
              BOOL v50 = (const void **)(a1 + 152);
            }
          }
          else
          {
            BOOL v50 = (const void **)(a1 + 152);
          }
          uint64_t v11 = *v50;
          goto LABEL_24;
        }
        uint64_t v15 = @"(true)";
LABEL_23:
        long long v69 = v15;
LABEL_24:
        QP::Formatter::setResultValue((QP::Formatter *)a1, kQPParseResultDescriptionKey, v15);
        QP::Formatter::setResultValue((QP::Formatter *)a1, kQPParseResultConfidenceKey, v11);
        if (v12) {
          CFRelease(v12);
        }
        if (Mutable) {
          CFRelease(Mutable);
        }
        int v5 = 1;
        goto LABEL_29;
      }
      CFStringRef Copy = CFStringCreateCopy(v6, v12);
    }
    else
    {
      CFStringRef Copy = CFStringCreateWithFormat(v6, 0, @"(%@)", v12);
    }
    uint64_t v15 = (__CFString *)Copy;
    goto LABEL_23;
  }
  CFIndex v14 = (std::__shared_weak_count *)a2[1];
  long long v67 = *a2;
  long long v68 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, const __CFString ***))(*(void *)a1 + 40))(a1, &v67);
  if (v68) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v68);
  }
  uint64_t v15 = 0;
LABEL_29:
  CFNumberRef v16 = *a2;
  int valuePtr = (__CFArray *)(*a2)[5];
  if (valuePtr == (__CFArray *)1 && *(unsigned char *)(a1 + 192))
  {
    long long v17 = (std::__shared_weak_count *)a2[1];
    BOOL v63 = v16;
    BOOL v64 = v17;
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, const __CFString ***))(*(void *)a1 + 40))(a1, &v63);
    if (v64) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v64);
    }
    uint64_t v18 = 0;
    if (!v15) {
      return v18;
    }
LABEL_66:
    CFRelease(v15);
    return v18;
  }
  CFAllocatorRef v19 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFNumberRef v20 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberCFIndexType, &valuePtr);
  CFTypeRef cf = v20;
  if (v20) {
    QP::Formatter::setResultValue((QP::Formatter *)a1, kQPParseResultAttributeCountKey, v20);
  }
  CFStringRef v21 = (*a2)[11];
  if (v21) {
    QP::Formatter::setResultValue((QP::Formatter *)a1, kQPParseResultQUOutputKey, v21);
  }
  uint64_t v22 = CFDictionaryCreateMutable(v19, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  unsigned int v60 = v5;
  v62[1] = v22;
  CFNumberRef v61 = (QP::Formatter *)a1;
  CFIndex v23 = CFArrayGetCount(*(CFArrayRef *)(a1 + 128));
  if (v23 >= 1)
  {
    for (CFIndex j = 0; j != v23; ++j)
    {
      CFArrayRef v25 = (const __CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 128), j);
      CFIndex v26 = CFArrayGetCount(v25);
      if (v26 >= 1)
      {
        for (CFIndex k = 0; k != v26; ++k)
        {
          uint64_t v28 = CFArrayGetValueAtIndex(v25, k);
          v62[0] = 1;
          CFNumberRef v29 = CFNumberCreate(v19, kCFNumberCFIndexType, v62);
          if (v29)
          {
            CFDictionarySetValue(v22, v28, v29);
            CFRelease(v29);
          }
        }
      }
    }
  }
  CFIndex v30 = CFArrayGetCount(*(CFArrayRef *)(a1 + 136));
  if (v30 >= 1)
  {
    for (CFIndex m = 0; m != v30; ++m)
    {
      CFArrayRef v32 = (const __CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 136), m);
      CFIndex v33 = CFArrayGetCount(v32);
      if (v33 >= 1)
      {
        for (CFIndex n = 0; n != v33; ++n)
        {
          CFRange v35 = CFArrayGetValueAtIndex(v32, n);
          if (!CFDictionaryContainsKey(v22, v35))
          {
            v62[0] = 2;
            CFNumberRef v36 = CFNumberCreate(v19, kCFNumberCFIndexType, v62);
            if (v36)
            {
              CFDictionarySetValue(v22, v35, v36);
              CFRelease(v36);
            }
          }
        }
      }
    }
  }
  QP::Formatter::setResultValue((QP::Formatter *)a1, kQPParseResultRankCategoriesKey, v22);
  uint64_t v37 = *(void *)(a1 + 8);
  if (!*(unsigned char *)(v37 + 65) || *(unsigned char *)(a1 + 193))
  {
    QP::Formatter::setResultValue((QP::Formatter *)a1, kQPParseResultSuggestionKey, &stru_26D832058);
    QP::SpotlightFormatter::updateWithLastSuggestionFragment((CFArrayRef *)a1);
    goto LABEL_61;
  }
  v62[0] = 0;
  if (*(unsigned char *)(v37 + 31)) {
    CFStringRef v39 = @" ";
  }
  else {
    CFStringRef v39 = &stru_26D832058;
  }
  CFStringRef v40 = CFStringCreateByCombiningStrings(v19, *(CFArrayRef *)(a1 + 104), v39);
  v62[0] = v40;
  CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(v19, 0, v40);
  CFStringLowercase(MutableCopy, *(CFLocaleRef *)(*(void *)(a1 + 8) + 104));
  if (CFStringGetLength(MutableCopy))
  {
    v72.CFIndex length = CFStringGetLength(MutableCopy);
    v72.CFIndex location = 0;
    CFStringFindAndReplace(MutableCopy, @"  ", @" ", v72, 0);
    CFStringTrimWhitespace(MutableCopy);
    QP::Formatter::setResultValue((QP::Formatter *)a1, kQPParseResultSuggestionKey, MutableCopy);
    CFIndex v42 = CFArrayGetCount(*(CFArrayRef *)(a1 + 88));
    CFIndex v43 = CFArrayGetCount(*(CFArrayRef *)(a1 + 112));
    if (v42 < 1)
    {
      uint64_t v45 = 0;
    }
    else
    {
      CFIndex v44 = 0;
      uint64_t v45 = 0;
      do
      {
        CFDictionaryRef v46 = (const __CFDictionary *)CFArrayGetValueAtIndex(*((CFArrayRef *)v61 + 11), v44);
        if (CFDictionaryGetCount(v46)) {
          ++v45;
        }
        ++v44;
      }
      while (v42 != v44);
    }
    if (v43 < 1)
    {
      BOOL v58 = 0;
      char v52 = 0;
    }
    else
    {
      CFIndex v51 = 0;
      char v52 = 0;
      uint64_t v53 = 0;
      do
      {
        CFDictionaryRef v54 = (const __CFDictionary *)CFArrayGetValueAtIndex(*((CFArrayRef *)v61 + 14), v51);
        CFIndex v55 = CFDictionaryGetCount(v54);
        BOOL v56 = v55 != 0;
        if (v55) {
          ++v53;
        }
        CFIndex v57 = v51 + 1;
        if (v43 - 1 != v51) {
          BOOL v56 = 0;
        }
        v52 |= v56;
        ++v51;
      }
      while (v43 != v57);
      BOOL v58 = v53 != 0;
      if (v45 == 1)
      {
        CFNumberRef v59 = (CFArrayRef *)v61;
        if (v53)
        {
LABEL_99:
          if ((v52 & 1) != 0 && v58) {
            QP::SpotlightFormatter::updateWithLastSuggestionFragment(v59);
          }
          goto LABEL_102;
        }
LABEL_98:
        QP::Formatter::setSuggestionValue((QP::Formatter *)v59, kQPSuggestionResultSuggestionKey, MutableCopy);
        QP::Formatter::setSuggestionValue((QP::Formatter *)v59, kQPSuggestionResultDescriptionKey, v69);
        QP::Formatter::setSuggestionValue((QP::Formatter *)v59, kQPSuggestionResultRankCategoriesKey, v22);
        QP::Formatter::setSuggestionValue((QP::Formatter *)v59, kQPSuggestionResultTypeKey, @"kQPSuggestion");
        goto LABEL_99;
      }
    }
    CFNumberRef v59 = (CFArrayRef *)v61;
    goto LABEL_98;
  }
LABEL_102:
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  if (v40) {
    CFRelease(v40);
  }
LABEL_61:
  if (v22) {
    CFRelease(v22);
  }
  uint64_t v18 = v60;
  if (cf) {
    CFRelease(cf);
  }
  uint64_t v15 = (__CFString *)v69;
  if (v69) {
    goto LABEL_66;
  }
  return v18;
}

void sub_224DCE868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va4, a5);
  va_start(va3, a5);
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  CFAllocatorRef v6 = va_arg(va1, const void *);
  va_copy(va2, va1);
  uint64_t v8 = va_arg(va2, const void *);
  va_copy(va3, va2);
  CFIndex v10 = va_arg(va3, const void *);
  uint64_t v12 = va_arg(va3, void);
  uint64_t v13 = va_arg(va3, void);
  va_copy(va4, va3);
  CFIndex v14 = va_arg(va4, const void *);
  uint64_t v16 = va_arg(va4, void);
  uint64_t v17 = va_arg(va4, void);
  uint64_t v18 = va_arg(va4, void);
  nlp::CFScopedPtr<__CFString *>::reset((const void **)va, 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va1, 0);
  nlp::CFScopedPtr<__CFDictionary *>::reset((const void **)va2, 0);
  nlp::CFScopedPtr<__CFNumber const*>::reset((const void **)va3, 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va4, 0);
  _Unwind_Resume(a1);
}

void QP::SpotlightFormatter::updateParseWithDateAttribute(QP::Formatter *a1, const __CFString *a2, CFRange **a3)
{
  CFStringRef v4 = *a3;
  CFIndex location = (std::__shared_weak_count *)(*a3)[7].location;
  if (location)
  {
    uint64_t v8 = std::__shared_weak_count::lock(location);
    if (v8)
    {
      CFIndex v9 = v8;
      CFIndex length = v4[6].length;
      if (!length)
      {
LABEL_125:
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
        return;
      }
      CFTypeRef v152 = 0;
      v153[0] = 0;
      uint64_t v147 = 0;
      long long v148 = (const void **)&v147;
      uint64_t v149 = 0x3002000000;
      int v150 = __Block_byref_object_copy__1_0;
      long long v151 = __Block_byref_object_dispose__2_0;
      CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      CFArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
      CFArrayRef v146 = Mutable;
      CFArrayRef v13 = CFArrayCreateMutable(v11, 0, MEMORY[0x263EFFF70]);
      CFArrayRef v145 = v13;
      CFIndex v14 = CFDictionaryCreateMutable(v11, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      long long v144 = v14;
      uint64_t v138 = 0;
      long long v139 = &v138;
      uint64_t v140 = 0x3002000000;
      uint64_t v141 = __Block_byref_object_copy__6;
      uint64_t v142 = __Block_byref_object_dispose__6;
      CFMutableArrayRef v143 = CFArrayCreateMutable(v11, 0, MEMORY[0x263EFFF70]);
      uint64_t v134 = 0;
      id v135 = &v134;
      uint64_t v136 = 0x2000000000;
      unint64_t v137 = @"kQPDate";
      if (*(void *)(*((void *)a1 + 1) + 8))
      {
        if (getDateActionFilters(void)::onceToken != -1) {
          dispatch_once(&getDateActionFilters(void)::onceToken, &__block_literal_global_7);
        }
        uint64_t v15 = getDateActionFilters(void)::gDateActionFilters;
      }
      else
      {
        uint64_t v15 = 0;
      }
      if (QP::ParserGrammar::hasTranslations(*((void *)a1 + 3), (uint64_t)&(*a3)[3]))
      {
        CFTypeRef v57 = (CFTypeRef)v15;
        CFMutableDictionaryRef v16 = CFDictionaryCreateMutable(v11, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
        CFMutableDictionaryRef v133 = v16;
        uint64_t v18 = *(void *)(length + 120);
        uint64_t v17 = *(std::__shared_weak_count **)(length + 128);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        CFMutableDictionaryRef v59 = v16;
        unsigned int v60 = v17;
        if (!v18 || BYTE1((*a3)[4].length)) {
          goto LABEL_106;
        }
        long long v19 = *(_OWORD *)(v18 + 140);
        *(_OWORD *)std::string __p = *(_OWORD *)(v18 + 124);
        long long v130 = v19;
        long long v131 = *(_OWORD *)(v18 + 156);
        int v132 = *(_DWORD *)(v18 + 172);
        long long v20 = *(_OWORD *)(v18 + 36);
        long long v125 = *(_OWORD *)(v18 + 20);
        long long v126 = v20;
        long long v127 = *(_OWORD *)(v18 + 52);
        int v128 = *(_DWORD *)(v18 + 68);
        long long v21 = *(_OWORD *)(v18 + 88);
        v123[0] = *(_OWORD *)(v18 + 72);
        v123[1] = v21;
        v123[2] = *(_OWORD *)(v18 + 104);
        int v124 = *(_DWORD *)(v18 + 120);
        long long v22 = *(_OWORD *)(v18 + 36);
        v121[0] = *(_OWORD *)(v18 + 20);
        v121[1] = v22;
        v121[2] = *(_OWORD *)(v18 + 52);
        int v122 = *(_DWORD *)(v18 + 68);
        long long v23 = *(_OWORD *)(v18 + 88);
        v119[0] = *(_OWORD *)(v18 + 72);
        v119[1] = v23;
        v119[2] = *(_OWORD *)(v18 + 104);
        int v120 = *(_DWORD *)(v18 + 120);
        long long v24 = *(_OWORD *)(v18 + 140);
        v117[0] = *(_OWORD *)(v18 + 124);
        v117[1] = v24;
        v117[2] = *(_OWORD *)(v18 + 156);
        int v118 = *(_DWORD *)(v18 + 172);
        CFArrayRef v25 = (std::__shared_weak_count *)*((void *)a1 + 2);
        uint64_t v115 = *((void *)a1 + 1);
        CFStringRef v116 = v25;
        if (v25) {
          atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        QP::DateConverter::resolveDateComponentsAsRange((uint64_t)&v115, *(unsigned __int16 *)(v18 + 12), *(_DWORD *)(v18 + 8), v121, v119, (uint64_t)v117, 1);
        if (v116) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v116);
        }
        BOOL v26 = QP::DateComponents::isConcreteType(&v125, *(_DWORD *)(v18 + 8))
           && QP::DateComponents::isEmpty((QP::DateComponents *)__p)
           && ((QP::DateComponents::isEmpty((QP::DateComponents *)v123) & 1) != 0
            || (QP::DateComponents::isConcreteType(v123, *(_DWORD *)(v18 + 8)) & 1) != 0);
        if ((*(_DWORD *)(v18 + 16) - 1) < 2) {
          BOOL v26 = 1;
        }
        BOOL v54 = v26;
        unsigned int v56 = 0;
        if (QP::DateComponents::isEmpty((QP::DateComponents *)v123)
          && (DWORD1(v126) & 0x80000000) != 0
          && v128 < 0)
        {
          double AbsoluteTime = QP::DateComponents::getAbsoluteTime((QP::DateComponents *)&v125, *(__CFCalendar **)(*((void *)a1 + 1) + 88), *(const __CFDate **)(*((void *)a1 + 1) + 72));
          if (AbsoluteTime <= getCurrentTime(*(__CFCalendar **)(*((void *)a1 + 1) + 88), *(const __CFDate **)(*((void *)a1 + 1) + 72)))int v32 = 0; {
          else
          }
            int v32 = -1;
          unsigned int v56 = v32;
        }
        uint64_t v109 = 0;
        uint64_t v110 = &v109;
        uint64_t v111 = 0x3002000000;
        uint64_t v112 = __Block_byref_object_copy__6;
        long long v113 = __Block_byref_object_dispose__6;
        CFTypeRef v114 = CFArrayCreateMutable(v11, 0, MEMORY[0x263EFFF70]);
        v107[0] = 0;
        v107[1] = v107;
        v107[2] = 0x3002000000;
        v107[3] = __Block_byref_object_copy__6;
        v107[4] = __Block_byref_object_dispose__6;
        CFTypeRef v108 = CFArrayCreateMutable(v11, 0, MEMORY[0x263EFFF70]);
        uint64_t v101 = 0;
        CFDateFormatterRef v102 = &v101;
        uint64_t v103 = 0x3002000000;
        uint64_t v104 = __Block_byref_object_copy__1_0;
        CFDateFormatterRef v105 = __Block_byref_object_dispose__2_0;
        CFIndex v33 = (uint64_t *)*((void *)a1 + 5);
        uint64_t v99 = v18;
        uint64_t v100 = v60;
        if (v60) {
          atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        CFTypeRef started = QP::DateFormatter::copyISODisplayForStartDate(v33, &v99, *(unsigned __int16 *)(v18 + 12), 0, 1, v56);
        if (v100) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v100);
        }
        int v94 = &v93;
        uint64_t v95 = 0x3002000000;
        long long v96 = __Block_byref_object_copy__1_0;
        CFStringRef v97 = __Block_byref_object_dispose__2_0;
        int v34 = (uint64_t *)*((void *)a1 + 5);
        uint64_t v91 = v18;
        long long v92 = v60;
        uint64_t v93 = 0;
        if (v60) {
          atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        CFTypeRef v98 = QP::DateFormatter::copyISODisplayForEndDate(v34, &v91, *(unsigned __int16 *)(v18 + 12), 0, 1, v56);
        if (v92) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v92);
        }
        if (v102[5] && v94[5])
        {
          CFTypeRef value = CFStringCreateWithFormat(v11, 0, @"$time.iso(%@)", v102[5]);
          CFTypeRef v67 = CFStringCreateWithFormat(v11, 0, @"$time.iso(%@)", v94[5]);
          QP::Formatter::setParseAttribute(a1, @"kQPDateStart", value, (*a3)[1]);
          QP::Formatter::setParseAttribute(a1, @"kQPDateEnd", v67, (*a3)[1]);
          nlp::CFScopedPtr<__CFString const*>::reset(&v67, 0);
          nlp::CFScopedPtr<__CFString const*>::reset(&value, 0);
        }
        v89[0] = 0;
        v89[1] = v89;
        v89[2] = 0x2000000000;
        char v90 = 0;
        uint64_t v35 = *((void *)a1 + 3);
        CFNumberRef v36 = *a3;
        uint64_t v37 = (uint64_t)&(*a3)[3];
        v83[0] = MEMORY[0x263EF8330];
        v83[1] = 1174405120;
        v83[2] = ___ZN2QP18SpotlightFormatter28updateParseWithDateAttributeEPK10__CFStringNSt3__110shared_ptrINS_14ParseAttributeEEE_block_invoke;
        v83[3] = &unk_26D830DD0;
        v83[10] = a1;
        v83[11] = v36;
        BOOL v38 = (std::__shared_weak_count *)a3[1];
        int v84 = v38;
        if (v38) {
          atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v83[4] = &v101;
        v83[5] = &v93;
        CFTypeRef v85 = v57;
        uint64_t v86 = v18;
        v83[6] = &v109;
        BOOL v88 = v54;
        CFStringRef v87 = v60;
        if (v60) {
          atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v83[7] = v107;
        v83[8] = v89;
        v83[9] = &v134;
        QP::ParserGrammar::translations(v35, v37, (uint64_t)v83);
        CFStringRef v82 = CFStringCreateWithSubstring(v11, a2, *(CFRange *)(length + 72));
        CFStringRef v58 = v82;
        QP::Formatter::setParseAttribute(a1, kQPParseAttributeDateKey, v82, (*a3)[1]);
        CFIndex Count = CFArrayGetCount((CFArrayRef)v110[5]);
        if (Count)
        {
          CFStringRef v40 = CFStringCreateByCombiningStrings(v11, (CFArrayRef)v110[5], @" || ");
          CFTypeRef value = v40;
          if (CFStringGetLength(v40))
          {
            CFIndex v55 = v148;
            if (Count <= 1) {
              CFStringRef v41 = CFStringCreateWithFormat(v11, 0, @"%@", v40);
            }
            else {
              CFStringRef v41 = CFStringCreateWithFormat(v11, 0, @"(%@)", v40);
            }
            nlp::CFScopedPtr<__CFString const*>::reset(v55 + 5, v41);
            if (CFStringGetLength((CFStringRef)v148[5])) {
              QP::Formatter::setParseAttribute(a1, kQPParseAttributeDescriptionKey, v148[5], (*a3)[1]);
            }
            ++*((void *)a1 + 10);
          }
          if (v40) {
            CFRelease(v40);
          }
        }
        CFIndex v42 = (CFDateFormatterRef *)*((void *)a1 + 5);
        uint64_t v79 = v18;
        CFStringRef v80 = v60;
        if (v60) {
          atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        CFIndex v43 = QP::DateFormatter::copyDisplayForDate(v42, &v79, 1, v56);
        CFDateFormatterRef v81 = v43;
        if (v80) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v80);
        }
        if (!v43)
        {
LABEL_92:
          if (v58) {
            CFRelease(v58);
          }
          if (v87) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v87);
          }
          if (v84) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v84);
          }
          _Block_object_dispose(v89, 8);
          _Block_object_dispose(&v93, 8);
          if (v98) {
            CFRelease(v98);
          }
          _Block_object_dispose(&v101, 8);
          if (started) {
            CFRelease(started);
          }
          _Block_object_dispose(v107, 8);
          if (v108) {
            CFRelease(v108);
          }
          _Block_object_dispose(&v109, 8);
          if (v114) {
            CFRelease(v114);
          }
LABEL_106:
          if (v60) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v60);
          }
          if (v59) {
            CFRelease(v59);
          }
          goto LABEL_110;
        }
        CFTypeRef value = 0;
        p_CFTypeRef value = &value;
        uint64_t v75 = 0x3002000000;
        CFStringRef v76 = __Block_byref_object_copy__1_0;
        CFStringRef v77 = __Block_byref_object_dispose__2_0;
        CFTypeRef v78 = 0;
        CFTypeRef v67 = 0;
        long long v68 = &v67;
        uint64_t v69 = 0x3002000000;
        long long v70 = __Block_byref_object_copy__1_0;
        uint64_t v71 = __Block_byref_object_dispose__2_0;
        CFTypeRef cf = 0;
        CFIndex v44 = *a3;
        v66[0] = MEMORY[0x263EF8330];
        v66[1] = 0x40000000;
        uint64_t v66[2] = ___ZN2QP18SpotlightFormatter28updateParseWithDateAttributeEPK10__CFStringNSt3__110shared_ptrINS_14ParseAttributeEEE_block_invoke_199;
        v66[3] = &unk_264705950;
        v66[5] = &v67;
        v66[6] = a1;
        v66[4] = &value;
        QP::ParseAttribute::actionsForRoot((uint64_t)v44, (uint64_t)v66);
        CFStringRef v45 = (const __CFString *)p_value[5];
        if (v45)
        {
          CFStringRef v46 = CFStringCreateWithFormat(v11, 0, v45, v43);
          nlp::CFScopedPtr<__CFString const*>::reset(v153, v46);
          QP::SpotlightFormatter::addDisplay(a1, (__CFString *)v153[0], (*a3)[1]);
          CFDictionarySetValue(v14, @"kQPDisplay", v153[0]);
          v135[3] = @"kQPDateSpecial";
          if (!v148[5]) {
            goto LABEL_87;
          }
          if (!v102[5]) {
            goto LABEL_87;
          }
          if (!v94[5]) {
            goto LABEL_87;
          }
          if (!v68[5]) {
            goto LABEL_87;
          }
          uint64_t v47 = *((void *)a1 + 1);
          if (!*(unsigned char *)(v47 + 65)) {
            goto LABEL_87;
          }
          CFStringRef BundleWithIdentifier = *(const __CFString **)(v47 + 192);
          if (BundleWithIdentifier)
          {
            CFStringRef BundleWithIdentifier = (const __CFString *)CFBundleGetBundleWithIdentifier(BundleWithIdentifier);
            uint64_t v47 = *((void *)a1 + 1);
          }
          if (*(void *)(v47 + 8) == 2) {
            CFStringRef v49 = @"Mail";
          }
          else {
            CFStringRef v49 = @"Search";
          }
          CFStringRef v65 = copyLocalizedStringForDomain((unint64_t)BundleWithIdentifier, v49, @"Tokens", @"TOKEN:kQPTokenDate", *(const __CFString **)(v47 + 136));
          if (v65)
          {
            CFMutableDictionaryRef theDict = CFDictionaryCreateMutable(v11, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
            CFDictionarySetValue(theDict, @"QUERY", v148[5]);
            CFDictionarySetValue(theDict, @"TOKEN", v68[5]);
            CFDictionarySetValue(theDict, @"TEXT", v43);
            CFDictionarySetValue(theDict, @"DATE_FROM", (const void *)v102[5]);
            CFDictionarySetValue(theDict, @"DATE_TO", (const void *)v94[5]);
            CFArrayAppendValue((CFMutableArrayRef)v139[5], theDict);
            nlp::CFScopedPtr<__CFDictionary *>::reset((const void **)&theDict, 0);
          }
        }
        else
        {
          CFStringRef Copy = CFStringCreateCopy(v11, v43);
          nlp::CFScopedPtr<__CFString const*>::reset(v153, Copy);
          QP::SpotlightFormatter::addDisplay(a1, v43, (*a3)[1]);
          CFDictionarySetValue(v14, @"kQPDisplay", v43);
          CFStringRef v51 = CFStringCreateWithFormat(v11, 0, @"%d", WORD2((*a3)[2].location));
          CFStringRef v65 = v51;
          uint64_t v52 = *((void *)a1 + 3);
          v61[0] = MEMORY[0x263EF8330];
          v61[1] = 1174405120;
          v61[2] = ___ZN2QP18SpotlightFormatter28updateParseWithDateAttributeEPK10__CFStringNSt3__110shared_ptrINS_14ParseAttributeEEE_block_invoke_2_222;
          v61[3] = &unk_26D830E08;
          v61[6] = a1;
          v61[7] = v18;
          BOOL v62 = v60;
          if (v60) {
            atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          unsigned int v63 = v56;
          v61[4] = &v147;
          v61[5] = &v138;
          QP::ParserGrammar::tokens(v52, @"kQPDate", v51, v43, (uint64_t)v61);
          if (v62) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v62);
          }
        }
        nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v65, 0);
LABEL_87:
        _Block_object_dispose(&v67, 8);
        if (cf) {
          CFRelease(cf);
        }
        _Block_object_dispose(&value, 8);
        if (v78) {
          CFRelease(v78);
        }
        CFRelease(v43);
        goto LABEL_92;
      }
      CFMutableStringRef v27 = *a3;
      std::string::basic_string[abi:ne180100]<0>(__p, "kQPDateExtension");
      BOOL v28 = QP::equals(&v27[3].location, __p);
      BOOL v29 = v28;
      if (SBYTE7(v130) < 0)
      {
        operator delete(__p[0]);
        if (!v29)
        {
LABEL_110:
          if (CFArrayGetCount((CFArrayRef)v139[5]))
          {
            uint64_t v53 = @"kQPTokenDate";
            v135[3] = @"kQPTokenDate";
          }
          else
          {
            uint64_t v53 = (__CFString *)v135[3];
          }
          QP::SpotlightFormatter::addTokens(a1, v53, (const __CFArray *)v139[5]);
          QP::SpotlightFormatter::addSuggestion(a1, (__CFString *)v153[0]);
          QP::SpotlightFormatter::addDescription(a1, (__CFString *)v148[5]);
          QP::SpotlightFormatter::addAttributes(a1, v14);
          QP::SpotlightFormatter::addPrimaryCategories(a1, Mutable);
          QP::SpotlightFormatter::addSecondaryCategory(a1, v13);
          _Block_object_dispose(&v134, 8);
          _Block_object_dispose(&v138, 8);
          if (v143) {
            CFRelease(v143);
          }
          if (v14) {
            CFRelease(v14);
          }
          if (v13) {
            CFRelease(v13);
          }
          if (Mutable) {
            CFRelease(Mutable);
          }
          _Block_object_dispose(&v147, 8);
          if (v152) {
            CFRelease(v152);
          }
          if (v153[0]) {
            CFRelease(v153[0]);
          }
          goto LABEL_125;
        }
      }
      else if (!v28)
      {
        goto LABEL_110;
      }
      CFStringRef v30 = CFStringCreateWithSubstring(v11, a2, *(CFRange *)(length + 72));
      __p[0] = (void *)v30;
      QP::Formatter::setParseAttribute(a1, kQPParseAttributeDateExtensionKey, v30, (*a3)[1]);
      ++*((void *)a1 + 10);
      v135[3] = @"kQPDateExtension";
      if (v30) {
        CFRelease(v30);
      }
      goto LABEL_110;
    }
  }
}

void sub_224DCF7B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,const void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,const void *a45,uint64_t a46,uint64_t a47,const void *a48,const void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  nlp::CFScopedPtr<__CFString const*>::reset(&a26, 0);
  _Block_object_dispose(&a34, 8);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v68 + 40), 0);
  _Block_object_dispose(&a40, 8);
  nlp::CFScopedPtr<__CFString const*>::reset(&a45, 0);
  nlp::CFScopedPtr<__CFString const*>::reset(&a48, 0);
  nlp::CFScopedPtr<__CFString const*>::reset(&a49, 0);
  if (a65) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a65);
  }
  if (a62) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a62);
  }
  _Block_object_dispose(&a67, 8);
  _Block_object_dispose(&STACK[0x200], 8);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)&STACK[0x228], 0);
  _Block_object_dispose(&STACK[0x240], 8);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)&STACK[0x268], 0);
  _Block_object_dispose(&STACK[0x270], 8);
  nlp::CFScopedPtr<__CFArray *>::reset((const void **)&STACK[0x298], 0);
  _Block_object_dispose(&STACK[0x2A0], 8);
  nlp::CFScopedPtr<__CFArray *>::reset((const void **)&STACK[0x2C8], 0);
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  nlp::CFScopedPtr<__CFDictionary *>::reset((const void **)&STACK[0x460], 0);
  _Block_object_dispose(&STACK[0x468], 8);
  _Block_object_dispose((const void *)(v69 - 248), 8);
  nlp::CFScopedPtr<__CFArray *>::reset((const void **)(v69 - 208), 0);
  nlp::CFScopedPtr<__CFDictionary *>::reset((const void **)(v69 - 200), 0);
  nlp::CFScopedPtr<__CFArray *>::reset((const void **)(v69 - 192), 0);
  nlp::CFScopedPtr<__CFArray *>::reset((const void **)(v69 - 184), 0);
  _Block_object_dispose((const void *)(v69 - 176), 8);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v69 - 136), 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v69 - 128), 0);
  std::__shared_weak_count::__release_shared[abi:ne180100](v67);
  _Unwind_Resume(a1);
}

void ___ZN2QP18SpotlightFormatter28updateParseWithDateAttributeEPK10__CFStringNSt3__110shared_ptrINS_14ParseAttributeEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 80);
  uint64_t v4 = *(void *)(a1 + 88);
  v23[0] = MEMORY[0x263EF8330];
  v23[1] = 1174405120;
  _OWORD v23[2] = ___ZN2QP18SpotlightFormatter28updateParseWithDateAttributeEPK10__CFStringNSt3__110shared_ptrINS_14ParseAttributeEEE_block_invoke_2;
  v23[3] = &unk_26D830D60;
  uint64_t v27 = v5;
  uint64_t v28 = v4;
  CFAllocatorRef v6 = *(std::__shared_weak_count **)(a1 + 96);
  BOOL v29 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v24 = *(_OWORD *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v30 = a2;
  uint64_t v25 = v7;
  char v33 = *(unsigned char *)(a1 + 128);
  long long v31 = *(_OWORD *)(a1 + 104);
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 120);
  int v32 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v26 = *(_OWORD *)(a1 + 56);
  QP::ParseAttribute::actionsForRoot(v4, (uint64_t)v23);
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24))
  {
    uint64_t v9 = *(void *)(v5 + 24);
    CFIndex v10 = (void **)(*(void *)(a1 + 88) + 48);
    v14[0] = MEMORY[0x263EF8330];
    v14[1] = 1174405120;
    void v14[2] = ___ZN2QP18SpotlightFormatter28updateParseWithDateAttributeEPK10__CFStringNSt3__110shared_ptrINS_14ParseAttributeEEE_block_invoke_188;
    long long v14[3] = &unk_26D830D98;
    uint64_t v18 = v5;
    uint64_t v19 = a2;
    long long v15 = *(_OWORD *)(a1 + 32);
    uint64_t v16 = *(void *)(a1 + 48);
    char v22 = *(unsigned char *)(a1 + 128);
    long long v20 = *(_OWORD *)(a1 + 104);
    CFAllocatorRef v11 = *(std::__shared_weak_count **)(a1 + 120);
    long long v21 = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v17 = *(void *)(a1 + 56);
    QP::ParserGrammar::actions(v9, v10, (unsigned __int16)kQPSymbolIdDefault, (unsigned __int16)kQPSymbolIdActionDefault, (uint64_t)v14);
    int v12 = *(_DWORD *)(*(void *)(a1 + 112) + 16);
    if (v12 == 1)
    {
      CFArrayRef v13 = @"kQPDateDistantPast";
    }
    else
    {
      if (v12 != 2) {
        goto LABEL_13;
      }
      CFArrayRef v13 = @"kQPDateDistantFuture";
    }
    *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = v13;
LABEL_13:
    if (v21) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v21);
    }
  }
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
}

void sub_224DCFD08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,std::__shared_weak_count *a35,uint64_t a36,uint64_t a37,uint64_t a38,std::__shared_weak_count *a39)
{
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  if (a39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a39);
  }
  if (a35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a35);
  }
  _Unwind_Resume(exception_object);
}

void QP::ParseAttribute::actionsForRoot(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 80);
  CFIndex v3 = (void *)(a1 + 88);
  if (v2 != (void *)(a1 + 88))
  {
    do
    {
      std::set<unsigned short>::set[abi:ne180100]((uint64_t *)&v11, (uint64_t)(v2 + 5));
      uint64_t v5 = v11;
      if (v11 != v12)
      {
        do
        {
          (*(void (**)(uint64_t, void, void))(a2 + 16))(a2, *((unsigned __int16 *)v2 + 16), *((unsigned __int16 *)v5 + 13));
          CFAllocatorRef v6 = v5[1];
          if (v6)
          {
            do
            {
              uint64_t v7 = (void **)v6;
              CFAllocatorRef v6 = (void *)*v6;
            }
            while (v6);
          }
          else
          {
            do
            {
              uint64_t v7 = (void **)v5[2];
              BOOL v8 = *v7 == v5;
              uint64_t v5 = v7;
            }
            while (!v8);
          }
          uint64_t v5 = v7;
        }
        while (v7 != v12);
      }
      std::__tree<unsigned short>::destroy((uint64_t)&v11, v12[0]);
      uint64_t v9 = (void *)v2[1];
      if (v9)
      {
        do
        {
          CFIndex v10 = v9;
          uint64_t v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          CFIndex v10 = (void *)v2[2];
          BOOL v8 = *v10 == (void)v2;
          uint64_t v2 = v10;
        }
        while (!v8);
      }
      uint64_t v2 = v10;
    }
    while (v10 != v3);
  }
}

void sub_224DCFE3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

void ___ZN2QP18SpotlightFormatter28updateParseWithDateAttributeEPK10__CFStringNSt3__110shared_ptrINS_14ParseAttributeEEE_block_invoke_2(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(a1 + 72);
  uint64_t v7 = *(void *)(a1 + 80);
  uint64_t v8 = *(void *)(v6 + 24);
  uint64_t v9 = (void **)(v7 + 48);
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 1174405120;
  v12[2] = ___ZN2QP18SpotlightFormatter28updateParseWithDateAttributeEPK10__CFStringNSt3__110shared_ptrINS_14ParseAttributeEEE_block_invoke_3;
  _OWORD v12[3] = &unk_26D830D28;
  long long v13 = *(_OWORD *)(a1 + 32);
  long long v17 = *(_OWORD *)(a1 + 96);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v16 = v6;
  uint64_t v14 = v10;
  char v20 = *(unsigned char *)(a1 + 128);
  CFAllocatorRef v11 = *(std::__shared_weak_count **)(a1 + 120);
  uint64_t v18 = *(void *)(a1 + 112);
  uint64_t v19 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v15 = *(_OWORD *)(a1 + 56);
  QP::ParserGrammar::actions(v8, v9, a2, a3, (uint64_t)v12);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
}

void sub_224DCFF2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23)
{
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN2QP18SpotlightFormatter28updateParseWithDateAttributeEPK10__CFStringNSt3__110shared_ptrINS_14ParseAttributeEEE_block_invoke_3(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 72);
  CFStringFromCFStringRef String = QP::createCFStringFromString(a2);
  CFStringRef v23 = CFStringFromString;
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFStringRef v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, *(CFStringRef *)(a1 + 80), CFStringFromString, *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
  CFStringRef v22 = v6;
  CFDictionaryRef v7 = *(const __CFDictionary **)(a1 + 88);
  if (v7)
  {
    CFNumberRef Value = CFDictionaryGetValue(v7, CFStringFromString);
    if (Value)
    {
      CFStringRef v9 = CFStringCreateWithFormat(v5, 0, @"(%@ && %@)", v6, Value);
      if (v6) {
        CFRelease(v6);
      }
      CFStringRef v22 = v9;
      CFStringRef v6 = v9;
    }
  }
  CFArrayRef v10 = *(const __CFArray **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
  v24.CFIndex length = CFArrayGetCount(v10);
  v24.CFIndex location = 0;
  if (!CFArrayContainsValue(v10, v24, v6)) {
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v6);
  }
  if (*(unsigned char *)(a1 + 112) || !CFStringHasPrefix(CFStringFromString, @"kMDItem"))
  {
    CFStringRef v11 = v6;
  }
  else
  {
    uint64_t v12 = *(void *)(v3 + 8);
    CFDateRef v14 = *(const __CFDate **)(v12 + 72);
    long long v13 = *(__CFCalendar **)(v12 + 80);
    CFDictionaryRef v15 = *(const __CFDictionary **)(a1 + 88);
    uint64_t v16 = *(void *)(a1 + 96);
    int v17 = *(unsigned __int16 *)(v16 + 12);
    v21[0] = MEMORY[0x263EF8330];
    v21[1] = 0x40000000;
    void v21[2] = ___ZN2QP18SpotlightFormatter28updateParseWithDateAttributeEPK10__CFStringNSt3__110shared_ptrINS_14ParseAttributeEEE_block_invoke_4;
    uint64_t v21[3] = &unk_264705900;
    int v21[4] = *(void *)(a1 + 56);
    QP::enumerateQueryWithAction(v13, v14, CFStringFromString, v15, v17, (unsigned int *)(v16 + 20), (unsigned int *)(v16 + 72), (uint64_t)v21);
    CFStringRef v18 = CFStringCreateByCombiningStrings(v5, *(CFArrayRef *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), @" && ");
    if (CFArrayGetCount(*(CFArrayRef *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)) < 2)
    {
      CFArrayRef v20 = *(const __CFArray **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
      v26.CFIndex length = CFArrayGetCount(v20);
      v26.CFIndex location = 0;
      if (!CFArrayContainsValue(v20, v26, v18)) {
        CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v18);
      }
      CFStringRef v11 = v6;
    }
    else
    {
      CFStringRef v11 = CFStringCreateWithFormat(v5, 0, @"(%@)", v18);
      if (v6) {
        CFRelease(v6);
      }
      CFStringRef v22 = v11;
      CFArrayRef v19 = *(const __CFArray **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
      v25.CFIndex length = CFArrayGetCount(v19);
      v25.CFIndex location = 0;
      if (!CFArrayContainsValue(v19, v25, v11)) {
        CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v11);
      }
    }
    if (v18) {
      CFRelease(v18);
    }
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 1;
  if (v11)
  {
    CFRelease(v11);
    CFStringFromCFStringRef String = v23;
  }
  if (CFStringFromString) {
    CFRelease(CFStringFromString);
  }
}

void sub_224DD0220(_Unwind_Exception *a1)
{
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v1 - 64), 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v1 - 56), 0);
  _Unwind_Resume(a1);
}

void ___ZN2QP18SpotlightFormatter28updateParseWithDateAttributeEPK10__CFStringNSt3__110shared_ptrINS_14ParseAttributeEEE_block_invoke_4(uint64_t a1, const void *a2)
{
  CFArrayRef v4 = *(const __CFArray **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  v7.CFIndex length = CFArrayGetCount(v4);
  v7.CFIndex location = 0;
  if (!CFArrayContainsValue(v4, v7, a2))
  {
    CFAllocatorRef v5 = *(__CFArray **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
    CFArrayAppendValue(v5, a2);
  }
}

uint64_t __copy_helper_block_e8_96c43_ZTSNSt3__110shared_ptrIN2QP10DatePeriodEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 104);
  *(void *)(result + 96) = *(void *)(a2 + 96);
  *(void *)(result + 104) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_96c43_ZTSNSt3__110shared_ptrIN2QP10DatePeriodEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 104);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void *__copy_helper_block_e8_80c47_ZTSNSt3__110shared_ptrIN2QP14ParseAttributeEEE112c43_ZTSNSt3__110shared_ptrIN2QP10DatePeriodEEE(void *result, void *a2)
{
  uint64_t v2 = a2[11];
  result[10] = a2[10];
  result[11] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[15];
  result[14] = a2[14];
  result[15] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_80c47_ZTSNSt3__110shared_ptrIN2QP14ParseAttributeEEE112c43_ZTSNSt3__110shared_ptrIN2QP10DatePeriodEEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 120);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 88);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void ___ZN2QP18SpotlightFormatter28updateParseWithDateAttributeEPK10__CFStringNSt3__110shared_ptrINS_14ParseAttributeEEE_block_invoke_188(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 64);
  CFStringFromCFStringRef String = QP::createCFStringFromString(a2);
  CFStringRef v23 = CFStringFromString;
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFStringRef v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, *(CFStringRef *)(a1 + 72), CFStringFromString, *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
  CFStringRef v22 = v6;
  CFDictionaryRef v7 = *(const __CFDictionary **)(a1 + 80);
  if (v7)
  {
    CFNumberRef Value = CFDictionaryGetValue(v7, CFStringFromString);
    if (Value)
    {
      CFStringRef v9 = CFStringCreateWithFormat(v5, 0, @"(%@ && %@)", v6, Value);
      if (v6) {
        CFRelease(v6);
      }
      CFStringRef v22 = v9;
      CFStringRef v6 = v9;
    }
  }
  CFArrayRef v10 = *(const __CFArray **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
  v24.CFIndex length = CFArrayGetCount(v10);
  v24.CFIndex location = 0;
  if (!CFArrayContainsValue(v10, v24, v6)) {
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v6);
  }
  if (*(unsigned char *)(a1 + 104) || !CFStringHasPrefix(CFStringFromString, @"kMDItem"))
  {
    CFStringRef v11 = v6;
  }
  else
  {
    uint64_t v12 = *(void *)(v3 + 8);
    CFDateRef v14 = *(const __CFDate **)(v12 + 72);
    long long v13 = *(__CFCalendar **)(v12 + 80);
    CFDictionaryRef v15 = *(const __CFDictionary **)(a1 + 80);
    uint64_t v16 = *(void *)(a1 + 88);
    int v17 = *(unsigned __int16 *)(v16 + 12);
    v21[0] = MEMORY[0x263EF8330];
    v21[1] = 0x40000000;
    void v21[2] = ___ZN2QP18SpotlightFormatter28updateParseWithDateAttributeEPK10__CFStringNSt3__110shared_ptrINS_14ParseAttributeEEE_block_invoke_2_189;
    uint64_t v21[3] = &unk_264705928;
    int v21[4] = *(void *)(a1 + 56);
    QP::enumerateQueryWithAction(v13, v14, CFStringFromString, v15, v17, (unsigned int *)(v16 + 20), (unsigned int *)(v16 + 72), (uint64_t)v21);
    CFStringRef v18 = CFStringCreateByCombiningStrings(v5, *(CFArrayRef *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), @" && ");
    if (CFArrayGetCount(*(CFArrayRef *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)) < 2)
    {
      CFArrayRef v20 = *(const __CFArray **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
      v26.CFIndex length = CFArrayGetCount(v20);
      v26.CFIndex location = 0;
      if (!CFArrayContainsValue(v20, v26, v18)) {
        CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v18);
      }
      CFStringRef v11 = v6;
    }
    else
    {
      CFStringRef v11 = CFStringCreateWithFormat(v5, 0, @"(%@)", v18);
      if (v6) {
        CFRelease(v6);
      }
      CFStringRef v22 = v11;
      CFArrayRef v19 = *(const __CFArray **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
      v25.CFIndex length = CFArrayGetCount(v19);
      v25.CFIndex location = 0;
      if (!CFArrayContainsValue(v19, v25, v11)) {
        CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v11);
      }
    }
    CFArrayRemoveAllValues(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 56) + 8) + 40));
    if (v18) {
      CFRelease(v18);
    }
  }
  if (v11)
  {
    CFRelease(v11);
    CFStringFromCFStringRef String = v23;
  }
  if (CFStringFromString) {
    CFRelease(CFStringFromString);
  }
}

void sub_224DD0684(_Unwind_Exception *a1)
{
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v1 - 64), 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v1 - 56), 0);
  _Unwind_Resume(a1);
}

void ___ZN2QP18SpotlightFormatter28updateParseWithDateAttributeEPK10__CFStringNSt3__110shared_ptrINS_14ParseAttributeEEE_block_invoke_2_189(uint64_t a1, const void *a2)
{
  CFArrayRef v4 = *(const __CFArray **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  v7.CFIndex length = CFArrayGetCount(v4);
  v7.CFIndex location = 0;
  if (!CFArrayContainsValue(v4, v7, a2))
  {
    CFAllocatorRef v5 = *(__CFArray **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
    CFArrayAppendValue(v5, a2);
  }
}

uint64_t __copy_helper_block_e8_88c43_ZTSNSt3__110shared_ptrIN2QP10DatePeriodEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 96);
  *(void *)(result + 88) = *(void *)(a2 + 88);
  *(void *)(result + 96) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_88c43_ZTSNSt3__110shared_ptrIN2QP10DatePeriodEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 96);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void *__copy_helper_block_e8_88c47_ZTSNSt3__110shared_ptrIN2QP14ParseAttributeEEE112c43_ZTSNSt3__110shared_ptrIN2QP10DatePeriodEEE(void *result, void *a2)
{
  uint64_t v2 = a2[12];
  result[11] = a2[11];
  result[12] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[15];
  result[14] = a2[14];
  result[15] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_88c47_ZTSNSt3__110shared_ptrIN2QP14ParseAttributeEEE112c43_ZTSNSt3__110shared_ptrIN2QP10DatePeriodEEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 120);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 96);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void ___ZN2QP18SpotlightFormatter28updateParseWithDateAttributeEPK10__CFStringNSt3__110shared_ptrINS_14ParseAttributeEEE_block_invoke_199(void *a1, unsigned int a2, unsigned int a3)
{
  if (!*(void *)(*(void *)(a1[4] + 8) + 40))
  {
    uint64_t v6 = a1[6];
    if (QP::ParserGrammar::hasSuggestion(*(QP::ParserGrammar **)(v6 + 24), kQPParseAttributeDateKey, a2, a3))
    {
      uint64_t v7 = *(void *)(a1[4] + 8);
      QP::ParserGrammar::suggestion(*(QP::ParserGrammar **)(v6 + 24), kQPParseAttributeDateKey, a2, a3, &__p);
      CFStringFromCFStringRef String = QP::createCFStringFromString((uint64_t)&__p);
      nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v7 + 40), CFStringFromString);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      QP::ParserGrammar::symbol(*(QP::ParserGrammar **)(v6 + 24), a3, &__p);
      CFStringRef v9 = QP::createCFStringFromString((uint64_t)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v10 = *(void *)(a1[5] + 8);
      CFStringRef v11 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"TOKEN:%@", v9);
      nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v10 + 40), v11);
      uint64_t v12 = *(void *)(a1[5] + 8);
      uint64_t v13 = *(void *)(v6 + 8);
      CFStringRef BundleWithIdentifier = *(const __CFString **)(v13 + 192);
      if (BundleWithIdentifier)
      {
        CFStringRef BundleWithIdentifier = (const __CFString *)CFBundleGetBundleWithIdentifier(BundleWithIdentifier);
        uint64_t v13 = *(void *)(v6 + 8);
      }
      if (*(void *)(v13 + 8) == 2) {
        CFStringRef v15 = @"Mail";
      }
      else {
        CFStringRef v15 = @"Search";
      }
      CFStringRef v16 = copyLocalizedStringForDomain((unint64_t)BundleWithIdentifier, v15, @"Token", *(const __CFString **)(*(void *)(a1[5] + 8) + 40), *(const __CFString **)(v13 + 136));
      nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v12 + 40), v16);
      if (v9) {
        CFRelease(v9);
      }
    }
  }
}

void sub_224DD09A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void QP::SpotlightFormatter::addDisplay(QP::SpotlightFormatter *this, __CFString *theString, CFRange a3)
{
  if (a3.location != -1)
  {
    CFIndex length = a3.length;
    if (a3.length)
    {
      CFIndex location = a3.location;
      CFAllocatorRef v5 = theString;
      if (!theString || !CFStringGetLength(theString)) {
        CFAllocatorRef v5 = &stru_26D832058;
      }
      CFStringRef v7 = kQPParseAttributeDisplayKey;
      v8.CFIndex location = location;
      v8.CFIndex length = length;
      QP::Formatter::setParseAttribute(this, v7, v5, v8);
    }
  }
}

void ___ZN2QP18SpotlightFormatter28updateParseWithDateAttributeEPK10__CFStringNSt3__110shared_ptrINS_14ParseAttributeEEE_block_invoke_2_222(uint64_t a1, const void *a2, int a3, CFStringRef str, const __CFString *a5)
{
  uint64_t v8 = *(void *)(a1 + 48);
  IntCFNumberRef Value = CFStringGetIntValue(str);
  if (IntValue == 6)
  {
    uint64_t v10 = *(QP::DatePeriod **)(a1 + 56);
    if ((*((_DWORD *)v10 + 2) - 6) < 0xD
      || QP::DatePeriod::hasTodayReference(v10, *(__CFCalendar **)(*(void *)(v8 + 8) + 80), *(const __CFDate **)(*(void *)(v8 + 8) + 72)))
    {
      return;
    }
  }
  CFStringRef v11 = *(CFDateFormatterRef **)(v8 + 40);
  uint64_t v12 = *(std::__shared_weak_count **)(a1 + 64);
  uint64_t v30 = *(void *)(a1 + 56);
  long long v31 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = QP::DateFormatter::copyDisplayForDate(v11, (uint64_t)&v30, IntValue, 1u, 1, *(unsigned int *)(a1 + 72));
  int v32 = v13;
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  BOOL v29 = Mutable;
  CFStringRef v16 = *(uint64_t **)(v8 + 40);
  int v17 = *(std::__shared_weak_count **)(a1 + 64);
  uint64_t v26 = *(void *)(a1 + 56);
  uint64_t v27 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CFTypeRef started = QP::DateFormatter::copyISODisplayForStartDate(v16, &v26, IntValue, 0, 1, *(unsigned int *)(a1 + 72));
  uint64_t v28 = started;
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  CFArrayRef v19 = *(uint64_t **)(v8 + 40);
  CFArrayRef v20 = *(std::__shared_weak_count **)(a1 + 64);
  uint64_t v23 = *(void *)(a1 + 56);
  CFRange v24 = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v21 = QP::DateFormatter::copyISODisplayForEndDate(v19, &v23, IntValue, 0, 1, *(unsigned int *)(a1 + 72));
  CFRange v25 = v21;
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  if (a5)
  {
    CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(v14, 0, a5);
    v33.CFIndex length = CFStringGetLength(MutableCopy);
    v33.CFIndex location = 0;
    CFStringFindAndReplace(MutableCopy, @"%1@", started, v33, 0);
    v34.CFIndex length = CFStringGetLength(MutableCopy);
    v34.CFIndex location = 0;
    CFStringFindAndReplace(MutableCopy, @"%2@", v21, v34, 0);
    CFDictionarySetValue(Mutable, @"QUERY", MutableCopy);
    if (MutableCopy) {
      CFRelease(MutableCopy);
    }
  }
  else
  {
    CFDictionarySetValue(Mutable, @"QUERY", *(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40));
  }
  if (a2 && v13 && started)
  {
    if (!v21)
    {
LABEL_28:
      CFRelease(started);
      goto LABEL_29;
    }
    CFDictionarySetValue(Mutable, @"TOKEN", a2);
    CFDictionarySetValue(Mutable, @"TEXT", v13);
    CFDictionarySetValue(Mutable, @"DATE_FROM", started);
    CFDictionarySetValue(Mutable, @"DATE_TO", v21);
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), Mutable);
  }
  else if (!v21)
  {
    goto LABEL_27;
  }
  CFRelease(v21);
LABEL_27:
  if (started) {
    goto LABEL_28;
  }
LABEL_29:
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v13) {
    CFRelease(v13);
  }
}

void sub_224DD0D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va3, a5);
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, const void *);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v10 = va_arg(va2, const void *);
  va_copy(va3, va2);
  uint64_t v12 = va_arg(va3, const void *);
  uint64_t v14 = va_arg(va3, void);
  uint64_t v15 = va_arg(va3, void);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va1, 0);
  nlp::CFScopedPtr<__CFDictionary *>::reset((const void **)va2, 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va3, 0);
  _Unwind_Resume(a1);
}

BOOL QP::DatePeriod::hasTodayReference(QP::DatePeriod *this, __CFCalendar *a2, const __CFDate *a3)
{
  CFAbsoluteTime CurrentTime = getCurrentTime(a2, a3);
  int v8 = -1;
  int v9 = -1;
  int v7 = -1;
  CFCalendarDecomposeAbsoluteTime(a2, CurrentTime, "yMd", &v7, &v8, &v9);
  return *((_DWORD *)this + 2) == 2
      && (*((_DWORD *)this + 10) == v7 && *((_DWORD *)this + 9) == v8 && *((_DWORD *)this + 8) == v9
       || *((_DWORD *)this + 23) == v7 && *((_DWORD *)this + 22) == v8 && *((_DWORD *)this + 21) == v9);
}

uint64_t __copy_helper_block_e8_56c43_ZTSNSt3__110shared_ptrIN2QP10DatePeriodEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 64);
  *(void *)(result + 56) = *(void *)(a2 + 56);
  *(void *)(result + 64) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_56c43_ZTSNSt3__110shared_ptrIN2QP10DatePeriodEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 64);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void QP::SpotlightFormatter::addTokens(QP::SpotlightFormatter *this, __CFString *a2, const __CFArray *a3)
{
  CFArrayRef v4 = (__CFArray *)*((void *)this + 14);
  if (v4 && *((void *)this + 15))
  {
    if (a3) {
      CFArrayRef v6 = a3;
    }
    else {
      CFArrayRef v6 = (const __CFArray *)*((void *)this + 23);
    }
    CFArrayAppendValue(v4, v6);
    int v7 = (__CFArray *)*((void *)this + 15);
    if (a2) {
      int v8 = a2;
    }
    else {
      int v8 = @"kQPSuggestion";
    }
    CFArrayAppendValue(v7, v8);
  }
}

void QP::SpotlightFormatter::addSuggestion(QP::SpotlightFormatter *this, __CFString *theString)
{
  uint64_t v3 = (__CFArray *)*((void *)this + 13);
  if (v3)
  {
    if (theString && (Length = CFStringGetLength(theString), uint64_t v3 = (__CFArray *)*((void *)this + 13), Length)) {
      CFArrayRef v6 = theString;
    }
    else {
      CFArrayRef v6 = &stru_26D832058;
    }
    CFArrayAppendValue(v3, v6);
  }
}

void QP::SpotlightFormatter::addDescription(QP::SpotlightFormatter *this, __CFString *theString)
{
  uint64_t v3 = (__CFArray *)*((void *)this + 12);
  if (v3)
  {
    if (theString && (Length = CFStringGetLength(theString), uint64_t v3 = (__CFArray *)*((void *)this + 12), Length)) {
      CFArrayRef v6 = theString;
    }
    else {
      CFArrayRef v6 = &stru_26D832058;
    }
    CFArrayAppendValue(v3, v6);
  }
}

void QP::SpotlightFormatter::addAttributes(QP::SpotlightFormatter *this, const __CFDictionary *a2)
{
  uint64_t v3 = (__CFArray *)*((void *)this + 11);
  if (v3)
  {
    if (!a2) {
      a2 = (const __CFDictionary *)*((void *)this + 22);
    }
    CFArrayAppendValue(v3, a2);
  }
}

void QP::SpotlightFormatter::addPrimaryCategories(QP::SpotlightFormatter *this, const __CFArray *a2)
{
  uint64_t v3 = (__CFArray *)*((void *)this + 16);
  if (v3)
  {
    if (!a2) {
      a2 = (const __CFArray *)*((void *)this + 23);
    }
    CFArrayAppendValue(v3, a2);
  }
}

void QP::SpotlightFormatter::addSecondaryCategory(QP::SpotlightFormatter *this, const __CFArray *a2)
{
  uint64_t v3 = (__CFArray *)*((void *)this + 17);
  if (v3)
  {
    if (!a2) {
      a2 = (const __CFArray *)*((void *)this + 23);
    }
    CFArrayAppendValue(v3, a2);
  }
}

void ___ZN2QP18SpotlightFormatter18_parseAttributeKeyERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEtt12QPSymbolFlagPK10__CFStringPK9__CFArraySG_SD_SD_SD_SD_U13block_pointerFvSD_E_block_invoke(uint64_t a1, CFStringRef theString)
{
  uint64_t v4 = *(void *)(a1 + 40);
  if (CFStringContainsString(theString, @"%@u"))
  {
    if (QP::ParserGrammar::hasUTIs(*(QP::ParserGrammar **)(v4 + 24), *(unsigned __int16 *)(a1 + 112)))
    {
      uint64_t v5 = *(void *)(v4 + 24);
      unsigned int v6 = *(unsigned __int16 *)(a1 + 112);
      v59[0] = MEMORY[0x263EF8330];
      v59[1] = 0x40000000;
      v59[2] = ___ZN2QP18SpotlightFormatter18_parseAttributeKeyERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEtt12QPSymbolFlagPK10__CFStringPK9__CFArraySG_SD_SD_SD_SD_U13block_pointerFvSD_E_block_invoke_2;
      v59[3] = &unk_264705978;
      v59[4] = *(void *)(a1 + 32);
      v59[5] = theString;
      QP::ParserGrammar::UTIs(v5, v6, (uint64_t)v59);
    }
    return;
  }
  if (!CFStringContainsString(theString, @"%@ad"))
  {
    if (CFStringContainsString(theString, @"%@pn"))
    {
      if (*(void *)(a1 + 48))
      {
        if (*(void *)(a1 + 56))
        {
          CFMutableStringRef MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, theString);
          theStringa[0] = MutableCopy;
          CFStringRef v10 = *(const __CFString **)(a1 + 56);
          v63.CFIndex length = CFStringGetLength(MutableCopy);
          v63.CFIndex location = 0;
          CFStringFindAndReplace(MutableCopy, @"%@pns", v10, v63, 0);
          CFStringRef v11 = *(const __CFString **)(a1 + 48);
          v64.CFIndex length = CFStringGetLength(MutableCopy);
          v64.CFIndex location = 0;
          CFStringFindAndReplace(MutableCopy, @"%@pn", v11, v64, 0);
          (*(void (**)(void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32));
          if (MutableCopy) {
            goto LABEL_8;
          }
        }
      }
      return;
    }
    if (CFStringContainsString(theString, @"%@flg"))
    {
      if (!*(void *)(a1 + 48) || !*(void *)(a1 + 56)) {
        return;
      }
      theStringa[0] = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, theString);
      CFStringRef v12 = *(const __CFString **)(a1 + 56);
      v65.CFIndex length = CFStringGetLength(theStringa[0]);
      v65.CFIndex location = 0;
      CFStringFindAndReplace((CFMutableStringRef)theStringa[0], @"%@flgs", v12, v65, 0);
      CFStringRef v13 = *(const __CFString **)(a1 + 48);
      v66.CFIndex length = CFStringGetLength(theStringa[0]);
      v66.CFIndex location = 0;
      CFStringFindAndReplace((CFMutableStringRef)theStringa[0], @"%@flg", v13, v66, 0);
      (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    }
    else if (CFStringContainsString(theString, @"%@lnk"))
    {
      if (!*(void *)(a1 + 48) || !*(void *)(a1 + 56)) {
        return;
      }
      theStringa[0] = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, theString);
      CFStringRef v14 = *(const __CFString **)(a1 + 56);
      v67.CFIndex length = CFStringGetLength(theStringa[0]);
      v67.CFIndex location = 0;
      CFStringFindAndReplace((CFMutableStringRef)theStringa[0], @"%@lnks", v14, v67, 0);
      CFStringRef v15 = *(const __CFString **)(a1 + 48);
      v68.CFIndex length = CFStringGetLength(theStringa[0]);
      v68.CFIndex location = 0;
      CFStringFindAndReplace((CFMutableStringRef)theStringa[0], @"%@lnk", v15, v68, 0);
      (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    }
    else if (CFStringContainsString(theString, @"%@trck"))
    {
      if (!*(void *)(a1 + 48) || !*(void *)(a1 + 56)) {
        return;
      }
      theStringa[0] = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, theString);
      CFStringRef v16 = *(const __CFString **)(a1 + 56);
      v69.CFIndex length = CFStringGetLength(theStringa[0]);
      v69.CFIndex location = 0;
      CFStringFindAndReplace((CFMutableStringRef)theStringa[0], @"%@trcks", v16, v69, 0);
      CFStringRef v17 = *(const __CFString **)(a1 + 48);
      v70.CFIndex length = CFStringGetLength(theStringa[0]);
      v70.CFIndex location = 0;
      CFStringFindAndReplace((CFMutableStringRef)theStringa[0], @"%@trck", v17, v70, 0);
      (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    }
    else if (CFStringContainsString(theString, @"%@cur"))
    {
      if (!*(void *)(a1 + 48) || !*(void *)(a1 + 56) || !*(void *)(a1 + 64)) {
        return;
      }
      theStringa[0] = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, theString);
      CFStringRef v19 = *(const __CFString **)(a1 + 56);
      v71.CFIndex length = CFStringGetLength(theStringa[0]);
      v71.CFIndex location = 0;
      CFStringFindAndReplace((CFMutableStringRef)theStringa[0], @"%@curl", v19, v71, 0);
      CFStringRef v20 = *(const __CFString **)(a1 + 48);
      v72.CFIndex length = CFStringGetLength(theStringa[0]);
      v72.CFIndex location = 0;
      CFStringFindAndReplace((CFMutableStringRef)theStringa[0], @"%@curh", v20, v72, 0);
      CFStringRef v21 = *(const __CFString **)(a1 + 64);
      v73.CFIndex length = CFStringGetLength(theStringa[0]);
      v73.CFIndex location = 0;
      CFStringFindAndReplace((CFMutableStringRef)theStringa[0], @"%@curv", v21, v73, 0);
      (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    }
    else if (CFStringContainsString(theString, @"%@lat") && CFStringContainsString(theString, @"%@lng"))
    {
      if (!*(void *)(a1 + 48) || !*(void *)(a1 + 56) || !*(void *)(a1 + 64) || !*(void *)(a1 + 72)) {
        return;
      }
      theStringa[0] = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, theString);
      CFStringRef v22 = *(const __CFString **)(a1 + 56);
      v74.CFIndex length = CFStringGetLength(theStringa[0]);
      v74.CFIndex location = 0;
      CFStringFindAndReplace((CFMutableStringRef)theStringa[0], @"%@lat1", v22, v74, 0);
      CFStringRef v23 = *(const __CFString **)(a1 + 48);
      v75.CFIndex length = CFStringGetLength(theStringa[0]);
      v75.CFIndex location = 0;
      CFStringFindAndReplace((CFMutableStringRef)theStringa[0], @"%@lat2", v23, v75, 0);
      CFStringRef v24 = *(const __CFString **)(a1 + 72);
      v76.CFIndex length = CFStringGetLength(theStringa[0]);
      v76.CFIndex location = 0;
      CFStringFindAndReplace((CFMutableStringRef)theStringa[0], @"%@lng1", v24, v76, 0);
      CFStringRef v25 = *(const __CFString **)(a1 + 64);
      v77.CFIndex length = CFStringGetLength(theStringa[0]);
      v77.CFIndex location = 0;
      CFStringFindAndReplace((CFMutableStringRef)theStringa[0], @"%@lng2", v25, v77, 0);
      (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    }
    else if (CFStringContainsString(theString, @"%@l") {
           || CFStringContainsString(theString, @"%@h")
    }
           || CFStringContainsString(theString, @"%@n"))
    {
      if (!*(void *)(a1 + 48) || !*(void *)(a1 + 56) || !*(void *)(a1 + 64)) {
        return;
      }
      theStringa[0] = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, theString);
      CFStringRef v26 = *(const __CFString **)(a1 + 56);
      v78.CFIndex length = CFStringGetLength(theStringa[0]);
      v78.CFIndex location = 0;
      CFStringFindAndReplace((CFMutableStringRef)theStringa[0], @"%@l", v26, v78, 0);
      CFStringRef v27 = *(const __CFString **)(a1 + 48);
      v79.CFIndex length = CFStringGetLength(theStringa[0]);
      v79.CFIndex location = 0;
      CFStringFindAndReplace((CFMutableStringRef)theStringa[0], @"%@h", v27, v79, 0);
      CFStringRef v28 = *(const __CFString **)(a1 + 64);
      v80.CFIndex length = CFStringGetLength(theStringa[0]);
      v80.CFIndex location = 0;
      CFStringFindAndReplace((CFMutableStringRef)theStringa[0], @"%@n", v28, v80, 0);
      (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    }
    else
    {
      if (CFStringContainsString(theString, @"%@e"))
      {
        if (QP::ParserGrammar::hasFileExtensions(*(QP::ParserGrammar **)(v4 + 24), *(unsigned __int16 *)(a1 + 112)))
        {
          uint64_t v29 = *(void *)(v4 + 24);
          unsigned int v30 = *(unsigned __int16 *)(a1 + 112);
          v58[0] = MEMORY[0x263EF8330];
          v58[1] = 0x40000000;
          v58[2] = ___ZN2QP18SpotlightFormatter18_parseAttributeKeyERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEtt12QPSymbolFlagPK10__CFStringPK9__CFArraySG_SD_SD_SD_SD_U13block_pointerFvSD_E_block_invoke_3;
          v58[3] = &unk_2647059A0;
          void v58[4] = *(void *)(a1 + 32);
          v58[5] = theString;
          QP::ParserGrammar::fileExtensions(v29, v30, (uint64_t)v58);
        }
        return;
      }
      if (CFStringContainsString(theString, @"%@c"))
      {
        if (QP::ParserGrammar::hasCategories(*(QP::ParserGrammar **)(v4 + 24), *(unsigned __int16 *)(a1 + 112)))
        {
          uint64_t v31 = *(void *)(v4 + 24);
          unsigned int v32 = *(unsigned __int16 *)(a1 + 112);
          v57[0] = MEMORY[0x263EF8330];
          v57[1] = 0x40000000;
          v57[2] = ___ZN2QP18SpotlightFormatter18_parseAttributeKeyERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEtt12QPSymbolFlagPK10__CFStringPK9__CFArraySG_SD_SD_SD_SD_U13block_pointerFvSD_E_block_invoke_4;
          v57[3] = &unk_2647059C8;
          void v57[4] = *(void *)(a1 + 32);
          v57[5] = theString;
          QP::ParserGrammar::categories(v31, v32, (uint64_t)v57);
        }
        return;
      }
      if (CFStringContainsString(theString, @"%@m"))
      {
        if (!*(void *)(a1 + 72)) {
          return;
        }
        theStringa[0] = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, theString);
        CFStringRef v33 = *(const __CFString **)(a1 + 72);
        v81.CFIndex length = CFStringGetLength(theStringa[0]);
        v81.CFIndex location = 0;
        CFStringFindAndReplace((CFMutableStringRef)theStringa[0], @"%@m", v33, v81, 0);
        (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
      }
      else
      {
        int v34 = *(unsigned __int16 *)(a1 + 114);
        if (v34 == 16)
        {
          if (*(void *)(a1 + 88) && CFStringContainsString(theString, @"%@i"))
          {
            if (CFArrayGetCount(*(CFArrayRef *)(a1 + 88)) >= 1)
            {
              CFIndex v36 = 0;
              CFAllocatorRef v37 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
              do
              {
                CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 88), v36);
                CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 96), v36);
                CFMutableStringRef v39 = CFStringCreateMutableCopy(v37, 0, theString);
                theStringa[0] = v39;
                v83.CFIndex length = CFStringGetLength(v39);
                v83.CFIndex location = 0;
                CFStringFindAndReplace(v39, @"%@i", ValueAtIndex, v83, 0);
                (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
                nlp::CFScopedPtr<__CFString *>::reset((const void **)theStringa, 0);
                ++v36;
              }
              while (v36 < CFArrayGetCount(*(CFArrayRef *)(a1 + 88)));
            }
            return;
          }
          if (!*(void *)(a1 + 80)) {
            return;
          }
          theStringa[0] = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, theString);
          CFStringRef v50 = *(const __CFString **)(a1 + 80);
          v86.CFIndex length = CFStringGetLength(theStringa[0]);
          v86.CFIndex location = 0;
          CFStringFindAndReplace((CFMutableStringRef)theStringa[0], @"%@v", v50, v86, 0);
          (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
        }
        else
        {
          if (v34 != 5)
          {
            if (!*(void *)(a1 + 80))
            {
              CFStringRef v51 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
              v51();
              return;
            }
            CFStringRef v56 = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, theString);
            CFStringRef v40 = *(void **)(a1 + 104);
            std::string::basic_string[abi:ne180100]<0>(theStringa, "kQPMe");
            BOOL v41 = QP::equals(v40, theStringa);
            if (v55 < 0) {
              operator delete((void *)theStringa[0]);
            }
            if (v41)
            {
              CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(v4 + 144));
              if (Count)
              {
                CFIndex v43 = (__CFString *)v56;
                CFIndex v44 = Count - 1;
                CFArrayRef v45 = (const __CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v4 + 144), Count - 1);
                CFStringRef v46 = (const __CFString *)CFArrayGetValueAtIndex(v45, 0);
                v84.CFIndex length = CFStringGetLength(v56);
                v84.CFIndex location = 0;
                CFStringFindAndReplace(v43, @"%@a", v46, v84, 0);
                uint64_t v47 = (__CFString *)v56;
                CFArrayRef v48 = (const __CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v4 + 144), v44);
                CFStringRef v49 = (const __CFString *)CFArrayGetValueAtIndex(v48, 1);
                v85.CFIndex length = CFStringGetLength(v56);
                v85.CFIndex location = 0;
                CFStringFindAndReplace(v47, @"%@x", v49, v85, 0);
                (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
              }
            }
            else
            {
              uint64_t v52 = (__CFString *)v56;
              CFStringRef v53 = *(const __CFString **)(a1 + 80);
              v87.CFIndex length = CFStringGetLength(v56);
              v87.CFIndex location = 0;
              CFStringFindAndReplace(v52, @"%@v", v53, v87, 0);
              (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
            }
            CFStringRef v18 = (const void **)&v56;
LABEL_27:
            nlp::CFScopedPtr<__CFString *>::reset(v18, 0);
            return;
          }
          if (!*(void *)(a1 + 80)) {
            return;
          }
          theStringa[0] = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, theString);
          CFStringRef v35 = *(const __CFString **)(a1 + 80);
          v82.CFIndex length = CFStringGetLength(theStringa[0]);
          v82.CFIndex location = 0;
          CFStringFindAndReplace((CFMutableStringRef)theStringa[0], @"%@s", v35, v82, 0);
          (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
        }
      }
    }
    CFStringRef v18 = (const void **)theStringa;
    goto LABEL_27;
  }
  if (*(void *)(a1 + 48))
  {
    if (*(void *)(a1 + 56))
    {
      CFMutableStringRef MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, theString);
      theStringa[0] = MutableCopy;
      CFStringRef v8 = *(const __CFString **)(a1 + 56);
      v61.CFIndex length = CFStringGetLength(MutableCopy);
      v61.CFIndex location = 0;
      CFStringFindAndReplace(MutableCopy, @"%@ads", v8, v61, 0);
      CFStringRef v9 = *(const __CFString **)(a1 + 48);
      v62.CFIndex length = CFStringGetLength(MutableCopy);
      v62.CFIndex location = 0;
      CFStringFindAndReplace(MutableCopy, @"%@ad", v9, v62, 0);
      (*(void (**)(void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32));
      if (MutableCopy) {
LABEL_8:
      }
        CFRelease(MutableCopy);
    }
  }
}

void sub_224DD1D2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, const void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  nlp::CFScopedPtr<__CFString *>::reset(&a15, 0);
  _Unwind_Resume(a1);
}

void ___ZN2QP18SpotlightFormatter18_parseAttributeKeyERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEtt12QPSymbolFlagPK10__CFStringPK9__CFArraySG_SD_SD_SD_SD_U13block_pointerFvSD_E_block_invoke_2(uint64_t a1, uint64_t a2)
{
  CFMutableStringRef MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, *(CFStringRef *)(a1 + 40));
  CFStringFromCFStringRef String = QP::createCFStringFromString(a2);
  v6.CFIndex length = CFStringGetLength(MutableCopy);
  v6.CFIndex location = 0;
  CFStringFindAndReplace(MutableCopy, @"%@u", CFStringFromString, v6, 0);
  (*(void (**)(void, CFMutableStringRef))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), MutableCopy);
  if (CFStringFromString) {
    CFRelease(CFStringFromString);
  }
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
}

void sub_224DD1E64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nlp::CFScopedPtr<__CFString *>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

void ___ZN2QP18SpotlightFormatter18_parseAttributeKeyERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEtt12QPSymbolFlagPK10__CFStringPK9__CFArraySG_SD_SD_SD_SD_U13block_pointerFvSD_E_block_invoke_3(uint64_t a1, uint64_t a2)
{
  CFMutableStringRef MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, *(CFStringRef *)(a1 + 40));
  CFStringFromCFStringRef String = QP::createCFStringFromString(a2);
  v6.CFIndex length = CFStringGetLength(MutableCopy);
  v6.CFIndex location = 0;
  CFStringFindAndReplace(MutableCopy, @"%@e", CFStringFromString, v6, 0);
  (*(void (**)(void, CFMutableStringRef))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), MutableCopy);
  if (CFStringFromString) {
    CFRelease(CFStringFromString);
  }
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
}

void sub_224DD1F50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nlp::CFScopedPtr<__CFString *>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

void ___ZN2QP18SpotlightFormatter18_parseAttributeKeyERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEtt12QPSymbolFlagPK10__CFStringPK9__CFArraySG_SD_SD_SD_SD_U13block_pointerFvSD_E_block_invoke_4(uint64_t a1, uint64_t a2)
{
  CFMutableStringRef MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, *(CFStringRef *)(a1 + 40));
  CFStringFromCFStringRef String = QP::createCFStringFromString(a2);
  v6.CFIndex length = CFStringGetLength(MutableCopy);
  v6.CFIndex location = 0;
  CFStringFindAndReplace(MutableCopy, @"%@c", CFStringFromString, v6, 0);
  (*(void (**)(void, CFMutableStringRef))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), MutableCopy);
  if (CFStringFromString) {
    CFRelease(CFStringFromString);
  }
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
}

void sub_224DD203C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nlp::CFScopedPtr<__CFString *>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

void QP::SpotlightFormatter::updateParseWithAnyAttribute(CFArrayRef *a1, uint64_t a2, uint64_t *a3)
{
  if (*(void *)(*a3 + 128) == *(void *)(*a3 + 120))
  {
    CFStringRef v16 = (std::__shared_weak_count *)a3[1];
    uint64_t v17 = *a3;
    CFStringRef v18 = v16;
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    QP::Formatter::updateParseWithAnyAttribute((uint64_t)a1, a2, (uint64_t)&v17);
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
  }
  else
  {
    CFIndex Count = CFArrayGetCount(a1[12]);
    uint64_t v30 = 0;
    uint64_t v31 = &v30;
    uint64_t v32 = 0x3002000000;
    CFStringRef v33 = __Block_byref_object_copy__6;
    int v34 = __Block_byref_object_dispose__6;
    CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFStringRef v8 = (const CFArrayCallBacks *)MEMORY[0x263EFFF70];
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
    uint64_t v24 = 0;
    CFStringRef v25 = &v24;
    uint64_t v26 = 0x3002000000;
    CFStringRef v27 = __Block_byref_object_copy__6;
    CFStringRef v28 = __Block_byref_object_dispose__6;
    CFTypeRef cf = CFArrayCreateMutable(v7, 0, v8);
    uint64_t v9 = *a3;
    CFIndex v10 = *(void *)(*a3 + 16);
    CFIndex v11 = *(void *)(v9 + 24);
    v22[0] = 0;
    v22[1] = v22;
    v22[2] = 0x2000000000;
    char v23 = 0;
    v21[0] = MEMORY[0x263EF8330];
    v21[1] = 0x40000000;
    void v21[2] = ___ZN2QP18SpotlightFormatter27updateParseWithAnyAttributeEPK10__CFStringNSt3__110shared_ptrINS_14ParseAttributeEEE_block_invoke;
    uint64_t v21[3] = &unk_264705A18;
    v21[8] = v10;
    v21[9] = v11;
    v21[10] = a2;
    int v21[4] = v22;
    void v21[5] = &v24;
    v21[6] = &v30;
    v21[7] = a1;
    QP::ParseAttribute::enumerateAttributes(v9, (uint64_t)v21);
    if (CFArrayGetCount((CFArrayRef)v25[5]))
    {
      CFStringRef v12 = CFStringCreateByCombiningStrings(v7, (CFArrayRef)v25[5], @"|");
      CFStringRef v20 = v12;
      v37.CFIndex location = v10;
      v37.CFIndex length = v11;
      QP::Formatter::setParseAttribute((QP::Formatter *)a1, kQPParseAttributeDisplayKey, v12, v37);
      if (v12) {
        CFRelease(v12);
      }
    }
    CFIndex v13 = CFArrayGetCount(a1[12]);
    if (CFArrayGetCount((CFArrayRef)v31[5]))
    {
      CFStringRef v14 = CFStringCreateByCombiningStrings(v7, (CFArrayRef)v31[5], @" || ");
      CFStringRef v20 = v14;
      CFStringRef v15 = CFStringCreateWithFormat(v7, 0, @"(%@)", v14);
      newValues[1] = (void *)v15;
      v38.CFIndex location = v10;
      v38.CFIndex length = v11;
      QP::Formatter::setParseAttribute((QP::Formatter *)a1, kQPParseAttributeDescriptionKey, v15, v38);
      newValues[0] = (void *)v15;
      v36.CFIndex length = v13 - Count;
      v36.CFIndex location = Count;
      CFArrayReplaceValues(a1[12], v36, (const void **)newValues, 1);
      if (v15) {
        CFRelease(v15);
      }
      if (v14) {
        CFRelease(v14);
      }
    }
    _Block_object_dispose(v22, 8);
    _Block_object_dispose(&v24, 8);
    if (cf) {
      CFRelease(cf);
    }
    _Block_object_dispose(&v30, 8);
    if (Mutable) {
      CFRelease(Mutable);
    }
  }
}

void sub_224DD2390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void QP::ParseAttribute::enumerateAttributes(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 120);
  for (CFIndex i = *(uint64_t **)(a1 + 128); v2 != i; v2 += 2)
  {
    uint64_t v5 = *v2;
    CFRange v6 = (std::__shared_weak_count *)v2[1];
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      CFStringRef v8 = v6;
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      CFStringRef v8 = 0;
    }
    uint64_t v7 = v5;
    (*(void (**)(uint64_t, uint64_t *))(a2 + 16))(a2, &v7);
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_224DD24E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN2QP18SpotlightFormatter27updateParseWithAnyAttributeEPK10__CFStringNSt3__110shared_ptrINS_14ParseAttributeEEE_block_invoke(CFRange *a1, CFRange **a2)
{
  CFIndex length = (QP::Formatter *)a1[3].length;
  uint64_t v5 = *a2 + 3;
  std::string::basic_string[abi:ne180100]<0>(__p, "kQPGroundedPerson");
  BOOL v6 = QP::equals(v5, __p);
  BOOL v7 = v6;
  if ((v19 & 0x80000000) == 0)
  {
    if (!v6) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7) {
LABEL_3:
  }
    *(unsigned char *)(*(void *)(a1[2].location + 8) + 24) = 1;
LABEL_4:
  if (*(unsigned char *)(*(void *)(a1[2].location + 8) + 24))
  {
    CFStringRef v8 = *a2 + 3;
    std::string::basic_string[abi:ne180100]<0>(__p, "kQPPerson");
    BOOL v9 = !QP::equals(v8, __p) || *(void *)(*((void *)length + 1) + 8) != 9;
    if (v19 < 0)
    {
      operator delete(__p[0]);
      if (!v9) {
        return;
      }
    }
    else if (!v9)
    {
      return;
    }
  }
  *(CFRange *)std::string __p = (*a2)[1];
  QP::Formatter::removeParseAttribute(length, kQPParseAttributeDisplayKey, a1[4]);
  QP::Formatter::removeParseAttribute(length, kQPParseAttributeDescriptionKey, a1[4]);
  (*a2)[1] = a1[4];
  uint64_t location = a1[5].location;
  CFIndex v11 = (std::__shared_weak_count *)a2[1];
  CFStringRef v16 = *a2;
  uint64_t v17 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  QP::Formatter::updateParseWithAnyAttribute((uint64_t)length, location, (uint64_t)&v16);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  (*a2)[1] = *(CFRange *)__p;
  CFStringRef ParseAttribute = (const __CFString *)QP::Formatter::getParseAttribute(length, kQPParseAttributeDisplayKey, a1[4]);
  if (ParseAttribute)
  {
    CFStringRef v13 = ParseAttribute;
    if (CFStringGetLength(ParseAttribute)) {
      CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(a1[2].length + 8) + 40), v13);
    }
  }
  CFStringRef v14 = (const __CFString *)QP::Formatter::getParseAttribute(length, kQPParseAttributeDescriptionKey, a1[4]);
  if (v14)
  {
    CFStringRef v15 = v14;
    if (CFStringGetLength(v14)) {
      CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(a1[3].location + 8) + 40), v15);
    }
  }
}

void sub_224DD26F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void QP::SpotlightFormatter::updateParseWithAttribute(uint64_t a1, const __CFString *a2, CFRange **a3)
{
  uint64_t v195 = 0;
  v196 = &v195;
  uint64_t v197 = 0x3002000000;
  v198 = __Block_byref_object_copy__6;
  uint64_t v199 = __Block_byref_object_dispose__6;
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  BOOL v7 = (const CFArrayCallBacks *)MEMORY[0x263EFFF70];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  uint64_t v189 = 0;
  v190 = &v189;
  uint64_t v191 = 0x3002000000;
  v192 = __Block_byref_object_copy__6;
  uint64_t v193 = __Block_byref_object_dispose__6;
  CFMutableArrayRef v194 = CFArrayCreateMutable(v6, 0, v7);
  uint64_t v183 = 0;
  v184 = &v183;
  uint64_t v185 = 0x3002000000;
  v186 = __Block_byref_object_copy__6;
  uint64_t v187 = __Block_byref_object_dispose__6;
  CFMutableArrayRef v188 = CFArrayCreateMutable(v6, 0, MEMORY[0x263EFFF70]);
  uint64_t v177 = 0;
  v178 = &v177;
  uint64_t v179 = 0x3002000000;
  v180 = __Block_byref_object_copy__6;
  uint64_t v181 = __Block_byref_object_dispose__6;
  CFTypeRef v182 = CFArrayCreateMutable(v6, 0, MEMORY[0x263EFFF70]);
  CFMutableDictionaryRef theDict = CFDictionaryCreateMutable(v6, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  CFTypeRef v175 = 0;
  uint64_t v169 = 0;
  std::string v170 = (const void **)&v169;
  uint64_t v171 = 0x3002000000;
  std::string v172 = __Block_byref_object_copy__1_0;
  std::string v173 = __Block_byref_object_dispose__2_0;
  CFTypeRef v174 = 0;
  CFTypeRef v168 = 0;
  CFTypeRef v167 = 0;
  CFTypeRef v166 = 0;
  CFTypeRef v165 = 0;
  CFTypeRef v164 = 0;
  CFTypeRef v163 = 0;
  CFTypeRef v162 = 0;
  uint64_t v156 = 0;
  unint64_t v157 = (const void **)&v156;
  uint64_t v158 = 0x3002000000;
  CFRange v159 = __Block_byref_object_copy__1_0;
  CFRange v160 = __Block_byref_object_dispose__2_0;
  CFTypeRef v161 = 0;
  uint64_t v150 = 0;
  long long v151 = &v150;
  uint64_t v152 = 0x3002000000;
  long long v153 = __Block_byref_object_copy__1_0;
  int v154 = __Block_byref_object_dispose__2_0;
  CFTypeRef v155 = 0;
  uint64_t v144 = 0;
  CFArrayRef v145 = (const void **)&v144;
  uint64_t v146 = 0x3002000000;
  uint64_t v147 = __Block_byref_object_copy__1_0;
  long long v148 = __Block_byref_object_dispose__2_0;
  CFTypeRef v149 = 0;
  CFTypeRef cf = QP::createCFStringFromString((uint64_t)&(*a3)[3]);
  CFStringRef v8 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "kQPMe");
  BOOL v9 = QP::equals(&v8[3].location, &__p);
  BOOL v10 = v9;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v10) {
      goto LABEL_15;
    }
LABEL_5:
    uint64_t v11 = *(void *)(a1 + 8);
    if (*(unsigned char *)(v11 + 36))
    {
      CFDictionaryRef v12 = *(const __CFDictionary **)(v11 + 216);
      if (!v12 || !CFDictionaryContainsKey(*(CFDictionaryRef *)(v11 + 216), @"meContent")) {
        goto LABEL_13;
      }
      CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(v12, @"meContent");
    }
    else
    {
      CFArrayRef Value = (const __CFArray *)getContentsArray();
    }
    CFArrayRef v14 = Value;
    if (Value && CFArrayGetCount(Value))
    {
      CFIndex Count = CFArrayGetCount(v14);
      CFMutableArrayRef MutableCopy = CFArrayCreateMutableCopy(v6, Count, v14);
LABEL_14:
      nlp::CFScopedPtr<__CFArray *>::reset((const void **)(a1 + 144), MutableCopy);
      goto LABEL_15;
    }
LABEL_13:
    CFMutableArrayRef MutableCopy = CFArrayCreateMutable(v6, 0, MEMORY[0x263EFFF70]);
    goto LABEL_14;
  }
  if (v9) {
    goto LABEL_5;
  }
LABEL_15:
  uint64_t v17 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "kQPAttachment");
  BOOL v18 = QP::startswith((unsigned __int8 *)&v17[3], (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  long long v131 = (QP::SpotlightFormatter *)a1;
  if (v18)
  {
    char v19 = kQPParseAttributeAttachmentKey;
    CFTypeRef v20 = cf;
    if (cf) {
      goto LABEL_39;
    }
    goto LABEL_40;
  }
  CFStringRef v21 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "kQPAttached");
  BOOL v22 = QP::startswith((unsigned __int8 *)&v21[3], (unsigned __int8 *)&__p);
  BOOL v23 = v22;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v23)
    {
LABEL_22:
      char v19 = kQPParseAttributeAttachmentKindKey;
      CFTypeRef v20 = cf;
      if (cf) {
        goto LABEL_39;
      }
      goto LABEL_40;
    }
  }
  else if (v22)
  {
    goto LABEL_22;
  }
  uint64_t v24 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "kQPFileExtension");
  BOOL v25 = QP::equals(&v24[3].location, &__p);
  BOOL v26 = v25;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v26)
    {
LABEL_27:
      char v19 = kQPParseAttributeKindKey;
      CFTypeRef v20 = cf;
      if (cf) {
        goto LABEL_39;
      }
      goto LABEL_40;
    }
  }
  else if (v25)
  {
    goto LABEL_27;
  }
  CFStringRef v27 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "TaggedPerson");
  BOOL v28 = QP::endswith(&v27[3].location, (uint64_t *)&__p);
  BOOL v29 = v28;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v29)
    {
LABEL_32:
      char v19 = kQPParseAttributeTaggedPersonKey;
      CFTypeRef v20 = cf;
      if (cf) {
        goto LABEL_39;
      }
      goto LABEL_40;
    }
  }
  else if (v28)
  {
    goto LABEL_32;
  }
  uint64_t v30 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "GroundedPerson");
  BOOL v31 = QP::endswith(&v30[3].location, (uint64_t *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v31)
  {
    char v19 = kQPParseAttributeGroundedPersonKey;
    CFTypeRef v20 = cf;
    if (cf) {
LABEL_39:
    }
      CFRelease(v20);
LABEL_40:
    CFTypeRef cf = v19;
    goto LABEL_41;
  }
  CFIndex v44 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "Person");
  BOOL v45 = QP::endswith(&v44[3].location, (uint64_t *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v45)
  {
    CFStringRef v46 = &kQPParseAttributePersonKey;
LABEL_270:
    nlp::CFScopedPtr<__CFString const*>::reset(&cf, *v46);
    goto LABEL_41;
  }
  CFRange v74 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "Recipient");
  if (QP::endswith(&v74[3].location, (uint64_t *)&__p))
  {
    BOOL v75 = 1;
  }
  else
  {
    id v89 = *a3;
    std::string::basic_string[abi:ne180100]<0>(&v142, "RecipientHandle");
    BOOL v75 = QP::endswith(&v89[3].location, (uint64_t *)&v142);
    if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v142.__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v75)
  {
    CFStringRef v46 = &kQPParseAttributeRecipientKey;
    goto LABEL_270;
  }
  char v90 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "Sender");
  if (QP::endswith(&v90[3].location, (uint64_t *)&__p))
  {
    BOOL v91 = 1;
  }
  else
  {
    int v122 = *a3;
    std::string::basic_string[abi:ne180100]<0>(&v142, "SenderHandle");
    BOOL v91 = QP::endswith(&v122[3].location, (uint64_t *)&v142);
    if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v142.__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v91)
  {
    CFStringRef v46 = &kQPParseAttributeSenderKey;
    goto LABEL_270;
  }
LABEL_41:
  uint64_t v32 = *a3;
  uint64_t location = (std::__shared_weak_count *)(*a3)[7].location;
  if (location)
  {
    int v34 = std::__shared_weak_count::lock(location);
    if (v34)
    {
      CFStringRef v35 = v34;
      uint64_t length = v32[6].length;
      if (length)
      {
        CFRange v37 = v170;
        CFStringRef str = a2;
        CFStringRef v38 = CFStringCreateWithSubstring(v6, a2, *(CFRange *)(length + 72));
        nlp::CFScopedPtr<__CFString const*>::reset(v37 + 5, v38);
        CFStringFromCFStringRef String = QP::createCFStringFromString(length);
        uint64_t location_low = LOWORD((*a3)[2].location);
        BOOL v41 = *(QP::ParserGrammar **)(a1 + 24);
        CFTypeRef v175 = CFStringFromString;
        unsigned int v127 = QP::ParserGrammar::replacementID(v41, location_low);
        unsigned int v130 = QP::ParserGrammar::symbolID(*(void *)(a1 + 24), length);
        char v42 = 0;
        int v128 = QP::ParseAttribute::flag((QP::ParseAttribute *)*a3);
        switch(v128)
        {
          case 5:
            atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
            CFIndex v43 = (_OWORD *)(length + 120);
            if (*(char *)(length + 143) < 0)
            {
              std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(length + 120), *(void *)(length + 128));
            }
            else
            {
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v43;
              __p.__r_.__value_.__r.__words[2] = *(void *)(length + 136);
            }
            if (QP::ParserGrammar::hasValue(*(void *)(a1 + 24), v130, (void **)&__p.__r_.__value_.__l.__data_))
            {
              CFRange v76 = v170;
              QP::ParserGrammar::value(*(void *)(a1 + 24), v130, (void **)&__p.__r_.__value_.__l.__data_, &v142);
              CFStringRef v77 = QP::createCFStringFromString((uint64_t)&v142);
              nlp::CFScopedPtr<__CFString const*>::reset(v76 + 5, v77);
              if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v142.__r_.__value_.__l.__data_);
              }
            }
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            QP::LexemeStatus::suggestionKey((QP::LexemeStatus *)length, &__p);
            CFStringRef v125 = QP::createCFStringFromString((uint64_t)&__p);
            v201[0] = &v125->isa;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            uint64_t v78 = *(void *)(a1 + 24);
            QP::LexemeStatus::suggestionKey((QP::LexemeStatus *)length, &__p);
            unsigned int v79 = QP::ParserGrammar::symbolID(v78, (uint64_t)&__p);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (QP::ParserGrammar::isValidSuggestionKey(*(QP::ParserGrammar **)(a1 + 24), (CFStringRef)cf, v127, v79)&& QP::ParserGrammar::hasSuggestion(*(QP::ParserGrammar **)(a1 + 24), (const __CFString *)cf, v127, v79))
            {
              CFRange v80 = v145;
              QP::ParserGrammar::suggestion(*(QP::ParserGrammar **)(a1 + 24), (const __CFString *)cf, v127, v79, &__p);
              CFStringRef v81 = QP::createCFStringFromString((uint64_t)&__p);
              nlp::CFScopedPtr<__CFString const*>::reset(v80 + 5, v81);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              QP::SpotlightFormatter::addDisplay((QP::SpotlightFormatter *)a1, (__CFString *)v145[5], (*a3)[1]);
              CFDictionarySetValue(theDict, @"kQPDisplay", v145[5]);
              char v42 = 1;
            }
            else
            {
              char v42 = 0;
              *(unsigned char *)(a1 + 193) = 1;
            }
            __p.__r_.__value_.__r.__words[0] = 0;
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)&__p;
            __p.__r_.__value_.__r.__words[2] = 0x3002000000;
            long long v139 = __Block_byref_object_copy__1_0;
            uint64_t v140 = __Block_byref_object_dispose__2_0;
            if (*(char *)(length + 143) < 0)
            {
              std::string::__init_copy_ctor_external(&v142, *(const std::string::value_type **)(length + 120), *(void *)(length + 128));
            }
            else
            {
              *(_OWORD *)&v142.__r_.__value_.__l.__data_ = *v43;
              v142.__r_.__value_.__r.__words[2] = *(void *)(length + 136);
            }
            CFTypeRef v141 = QP::createCFStringFromString((uint64_t)&v142);
            if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v142.__r_.__value_.__l.__data_);
            }
            uint64_t v87 = *(void *)(a1 + 24);
            CFStringRef v88 = *(const __CFString **)(__p.__r_.__value_.__l.__size_ + 40);
            v137[0] = MEMORY[0x263EF8330];
            v137[1] = 0x40000000;
            void v137[2] = ___ZN2QP18SpotlightFormatter24updateParseWithAttributeEPK10__CFStringNSt3__110shared_ptrINS_14ParseAttributeEEE_block_invoke;
            v137[3] = &unk_264705A40;
            v137[4] = &v150;
            v137[5] = &v156;
            v137[6] = &__p;
            v137[7] = &v189;
            QP::ParserGrammar::tokens(v87, (const __CFString *)cf, CFStringFromString, v88, (uint64_t)v137);
            _Block_object_dispose(&__p, 8);
            if (v141) {
              CFRelease(v141);
            }
            if (v125) {
              CFRelease(v125);
            }
            goto LABEL_180;
          case 6:
            atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v47 = v170;
            if (*(char *)(length + 143) < 0) {
              std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(length + 120), *(void *)(length + 128));
            }
            else {
              std::string __p = *(std::string *)(length + 120);
            }
            CFStringRef v82 = QP::createCFStringFromString((uint64_t)&__p);
            nlp::CFScopedPtr<__CFString const*>::reset(v47 + 5, v82);
            goto LABEL_124;
          case 7:
            atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
            CFArrayRef v48 = *(double ***)(length + 120);
            CFStringRef v49 = *(std::__shared_weak_count **)(length + 128);
            if (v49) {
              atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v48)
            {
              QP::NumericValue::upper((QP::NumericValue *)v48, &__p);
              CFStringRef v50 = QP::createCFStringFromString((uint64_t)&__p);
              nlp::CFScopedPtr<__CFString const*>::reset(&v167, v50);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              QP::NumericValue::lower((QP::NumericValue *)v48, &__p);
              CFStringRef v51 = QP::createCFStringFromString((uint64_t)&__p);
              nlp::CFScopedPtr<__CFString const*>::reset(&v165, v51);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              QP::NumericValue::value((int **)v48, &__p);
              CFStringRef v52 = QP::createCFStringFromString((uint64_t)&__p);
              nlp::CFScopedPtr<__CFString const*>::reset(&v166, v52);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              if (*v48) {
                double v53 = (double)*(int *)*v48;
              }
              else {
                double v53 = *v48[2];
              }
              CFStringRef v94 = CFStringCreateWithFormat(v6, 0, @"%.f", *(void *)&v53);
              nlp::CFScopedPtr<__CFString const*>::reset(&v164, v94);
            }
            goto LABEL_177;
          case 16:
            atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
            BOOL v54 = CFArrayCreateMutable(v6, 0, MEMORY[0x263EFFF70]);
            BOOL v123 = v10;
            int v124 = a3;
            char v55 = CFArrayCreateMutable(v6, 0, MEMORY[0x263EFFF70]);
            uint64_t v56 = 0;
            uint64_t v57 = 0;
            for (unint64_t i = 0; ; ++i)
            {
              memset(&__p, 0, sizeof(__p));
              std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&__p, *(long long **)(length + 120), *(long long **)(length + 128), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(length + 128) - *(void *)(length + 120)) >> 3));
              unint64_t v59 = 0xAAAAAAAAAAAAAAABLL
                  * ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3);
              v142.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v142);
              if (v59 <= i) {
                break;
              }
              memset(&v142, 0, sizeof(v142));
              std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v142, *(long long **)(length + 120), *(long long **)(length + 128), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(length + 128) - *(void *)(length + 120)) >> 3));
              unsigned int v60 = (long long *)(v142.__r_.__value_.__r.__words[0] + v57);
              if (*(char *)(v142.__r_.__value_.__r.__words[0] + v57 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v60, *((void *)v60 + 1));
              }
              else
              {
                long long v61 = *v60;
                __p.__r_.__value_.__r.__words[2] = *((void *)v60 + 2);
                *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v61;
              }
              v201[0] = (void **)&v142;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v201);
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                p_p = &__p;
              }
              else {
                p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              CFStringRef v63 = CFStringCreateWithCString(v6, (const char *)p_p, 0x8000100u);
              CFArrayAppendValue(v54, v63);
              CFRelease(v63);
              memset(&v142, 0, sizeof(v142));
              std::vector<std::pair<double,double>>::__init_with_size[abi:ne180100]<std::pair<double,double>*,std::pair<double,double>*>((char *)&v142, *(long long **)(length + 144), *(long long **)(length + 152), (uint64_t)(*(void *)(length + 152) - *(void *)(length + 144)) >> 4);
              uint64_t v64 = *(void *)(v142.__r_.__value_.__r.__words[0] + v56);
              v142.__r_.__value_.__l.__size_ = v142.__r_.__value_.__r.__words[0];
              operator delete(v142.__r_.__value_.__l.__data_);
              CFStringRef v65 = CFStringCreateWithFormat(v6, 0, @"W(%.2g, 0)", v64);
              CFArrayAppendValue(v55, v65);
              CFRelease(v65);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              v57 += 24;
              v56 += 16;
            }
            char v42 = 0;
            CFTypeRef v163 = v54;
            CFTypeRef v162 = v55;
            a3 = v124;
            a1 = (uint64_t)v131;
            BOOL v10 = v123;
            goto LABEL_180;
          case 17:
            atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
            std::to_string(&__p, *(double *)(length + 128));
            CFStringRef v66 = QP::createCFStringFromString((uint64_t)&__p);
            if (v167) {
              CFRelease(v167);
            }
            CFTypeRef v167 = v66;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            std::to_string(&__p, *(double *)(length + 120));
            CFStringRef v67 = QP::createCFStringFromString((uint64_t)&__p);
            if (v165) {
              CFRelease(v165);
            }
            CFTypeRef v165 = v67;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            std::to_string(&__p, *(double *)(length + 144));
            CFStringRef v68 = QP::createCFStringFromString((uint64_t)&__p);
            if (v166) {
              CFRelease(v166);
            }
            CFTypeRef v166 = v68;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            std::to_string(&__p, *(double *)(length + 136));
            CFStringRef v69 = QP::createCFStringFromString((uint64_t)&__p);
            if (v164) {
              CFRelease(v164);
            }
            CFTypeRef v164 = v69;
LABEL_124:
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_179;
            }
            CFRange v83 = (void *)__p.__r_.__value_.__r.__words[0];
            break;
          case 18:
            atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
            if (*(char *)(length + 143) < 0) {
              std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(length + 120), *(void *)(length + 128));
            }
            else {
              std::string __p = *(std::string *)(length + 120);
            }
            CFStringRef v84 = QP::createCFStringFromString((uint64_t)&__p);
            if (v167) {
              CFRelease(v167);
            }
            CFTypeRef v167 = v84;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            CFRange v85 = (_OWORD *)(length + 144);
            if (*(char *)(length + 167) < 0)
            {
              std::string::__init_copy_ctor_external(&v142, *(const std::string::value_type **)(length + 144), *(void *)(length + 152));
            }
            else
            {
              *(_OWORD *)&v142.__r_.__value_.__l.__data_ = *v85;
              v142.__r_.__value_.__r.__words[2] = *(void *)(length + 160);
            }
            std::string::size_type size = HIBYTE(v142.__r_.__value_.__r.__words[2]);
            if ((v142.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type size = v142.__r_.__value_.__l.__size_;
            }
            if (size)
            {
              if (*(char *)(length + 167) < 0)
              {
                std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(length + 144), *(void *)(length + 152));
              }
              else
              {
                *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v85;
                __p.__r_.__value_.__r.__words[2] = *(void *)(length + 160);
              }
            }
            else
            {
              std::string::basic_string[abi:ne180100]<0>(&__p, "*");
            }
            CFStringRef v92 = QP::createCFStringFromString((uint64_t)&__p);
            if (v165) {
              CFRelease(v165);
            }
            CFTypeRef v165 = v92;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if ((SHIBYTE(v142.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_179;
            }
            CFRange v83 = (void *)v142.__r_.__value_.__r.__words[0];
            break;
          case 19:
            atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
            CFRange v70 = *(QP::NumericValue **)(length + 120);
            CFStringRef v49 = *(std::__shared_weak_count **)(length + 128);
            if (v49) {
              atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v70)
            {
              QP::NumericValue::upper(v70, &__p);
              CFStringRef v71 = QP::createCFStringFromString((uint64_t)&__p);
              nlp::CFScopedPtr<__CFString const*>::reset(&v167, v71);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              QP::NumericValue::lower(v70, &__p);
              CFStringRef v72 = QP::createCFStringFromString((uint64_t)&__p);
              nlp::CFScopedPtr<__CFString const*>::reset(&v165, v72);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              CFRange v73 = (_OWORD *)(length + 136);
              if (*(char *)(length + 159) < 0)
              {
                std::string::__init_copy_ctor_external(&v142, *(const std::string::value_type **)(length + 136), *(void *)(length + 144));
              }
              else
              {
                *(_OWORD *)&v142.__r_.__value_.__l.__data_ = *v73;
                v142.__r_.__value_.__r.__words[2] = *(void *)(length + 152);
              }
              std::string::size_type v93 = HIBYTE(v142.__r_.__value_.__r.__words[2]);
              if ((v142.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                std::string::size_type v93 = v142.__r_.__value_.__l.__size_;
              }
              if (v93)
              {
                if (*(char *)(length + 159) < 0)
                {
                  std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(length + 136), *(void *)(length + 144));
                }
                else
                {
                  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v73;
                  __p.__r_.__value_.__r.__words[2] = *(void *)(length + 152);
                }
              }
              else
              {
                std::string::basic_string[abi:ne180100]<0>(&__p, "*");
              }
              CFStringRef v95 = QP::createCFStringFromString((uint64_t)&__p);
              nlp::CFScopedPtr<__CFString const*>::reset(&v166, v95);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v142.__r_.__value_.__l.__data_);
              }
            }
LABEL_177:
            if (v49) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v49);
            }
            goto LABEL_179;
          default:
            goto LABEL_181;
        }
        operator delete(v83);
LABEL_179:
        char v42 = 0;
LABEL_180:
        std::__shared_weak_count::__release_shared[abi:ne180100](v35);
LABEL_181:
        uint64_t v96 = (uint64_t)&(*a3)[3];
        uint64_t v97 = (uint64_t)v170[5];
        v136[0] = MEMORY[0x263EF8330];
        v136[1] = 0x40000000;
        uint64_t v136[2] = ___ZN2QP18SpotlightFormatter24updateParseWithAttributeEPK10__CFStringNSt3__110shared_ptrINS_14ParseAttributeEEE_block_invoke_2;
        v136[3] = &unk_264705A68;
        v136[4] = &v195;
        QP::SpotlightFormatter::_parseAttributeKey(a1, v96, 0, v130, v128, v97, (uint64_t)v163, (uint64_t)v162, (uint64_t)v167, (uint64_t)v166, (uint64_t)v165, (uint64_t)v164, (uint64_t)v136);
        if (v128 == 15) {
          *((unsigned char *)v131 + 192) = 1;
        }
        CFTypeRef v98 = v170;
        CFStringRef v99 = CFStringCreateWithSubstring(v6, str, *(CFRange *)(length + 72));
        nlp::CFScopedPtr<__CFString const*>::reset(v98 + 5, v99);
        if (cf && CFStringGetLength((CFStringRef)cf))
        {
          CFIndex v100 = CFArrayGetCount((CFArrayRef)v196[5]);
          if (v100)
          {
            CFStringRef v101 = CFStringCreateByCombiningStrings(v6, (CFArrayRef)v196[5], @" || ");
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v101;
            if (CFStringGetLength(v101))
            {
              CFDateFormatterRef v102 = v157;
              if (v100 <= 1) {
                CFStringRef v103 = CFStringCreateWithFormat(v6, 0, @"%@", v101);
              }
              else {
                CFStringRef v103 = CFStringCreateWithFormat(v6, 0, @"(%@)", v101);
              }
              nlp::CFScopedPtr<__CFString const*>::reset(v102 + 5, v103);
              if (CFStringGetLength((CFStringRef)v157[5])) {
                QP::Formatter::setParseAttribute(v131, kQPParseAttributeDescriptionKey, v157[5], (*a3)[1]);
              }
              QP::Formatter::setParseAttribute(v131, (CFStringRef)cf, v170[5], (*a3)[1]);
              ++*((void *)v131 + 10);
              if (CFStringsAreEqual((CFStringRef)cf, kQPParseAttributeKindKey)
                || CFStringsAreEqual((CFStringRef)cf, kQPParseAttributeApplicationKey))
              {
                uint64_t v104 = *((void *)v131 + 3);
                v135[0] = MEMORY[0x263EF8330];
                v135[1] = 0x40000000;
                void v135[2] = ___ZN2QP18SpotlightFormatter24updateParseWithAttributeEPK10__CFStringNSt3__110shared_ptrINS_14ParseAttributeEEE_block_invoke_3;
                v135[3] = &unk_264705A90;
                v135[4] = &v183;
                QP::ParserGrammar::categories(v104, v130, (uint64_t)v135);
              }
              if (CFStringsAreEqual((CFStringRef)cf, kQPParseAttributeAttachmentKey)
                || CFStringsAreEqual((CFStringRef)cf, kQPParseAttributeAttachmentKindKey))
              {
                uint64_t v105 = *((void *)v131 + 3);
                v134[0] = MEMORY[0x263EF8330];
                v134[1] = 0x40000000;
                uint64_t v134[2] = ___ZN2QP18SpotlightFormatter24updateParseWithAttributeEPK10__CFStringNSt3__110shared_ptrINS_14ParseAttributeEEE_block_invoke_4;
                v134[3] = &unk_264705AB8;
                v134[4] = &v177;
                QP::ParserGrammar::categories(v105, v130, (uint64_t)v134);
              }
            }
            if (v101) {
              CFRelease(v101);
            }
          }
          else
          {
            QP::Formatter::setParseAttribute(v131, (CFStringRef)cf, &stru_26D832058, (*a3)[1]);
            QP::SpotlightFormatter::addDisplay(v131, &stru_26D832058, (*a3)[1]);
          }
          if ((v42 & 1) == 0)
          {
            long long v126 = v35;
            QP::ParserGrammar::symbol(*((QP::ParserGrammar **)v131 + 3), v130, &v142);
            if (QP::ParserGrammar::isValidSuggestionKey(*((QP::ParserGrammar **)v131 + 3), (CFStringRef)cf, v127, v130))
            {
              if (QP::ParserGrammar::hasSuggestion(*((QP::ParserGrammar **)v131 + 3), (const __CFString *)cf, v127, v130))
              {
                QP::ParserGrammar::suggestion(*((QP::ParserGrammar **)v131 + 3), (const __CFString *)cf, v127, v130, &__p);
                CFStringRef v106 = QP::createCFStringFromString((uint64_t)&__p);
                v201[0] = &v106->isa;
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(__p.__r_.__value_.__l.__data_);
                  CFStringRef v106 = (CFStringRef)v201[0];
                }
                CFDateFormatterRef v107 = v145;
                CFStringRef v108 = CFStringCreateWithFormat(v6, 0, v106, v170[5]);
                nlp::CFScopedPtr<__CFString const*>::reset(v107 + 5, v108);
                QP::SpotlightFormatter::addDisplay(v131, (__CFString *)v145[5], (*a3)[1]);
                CFDictionarySetValue(theDict, @"kQPDisplay", v145[5]);
                nlp::CFScopedPtr<__CFString const*>::reset((const void **)v201, 0);
              }
              else
              {
                QP::SpotlightFormatter::addDisplay(v131, &stru_26D832058, (*a3)[1]);
              }
            }
            else
            {
              QP::SpotlightFormatter::addDisplay(v131, &stru_26D832058, (*a3)[1]);
              *((unsigned char *)v131 + 193) = 1;
            }
            if (v10)
            {
              CFIndex v109 = CFArrayGetCount(*((CFArrayRef *)v131 + 18));
              if (v109)
              {
                uint64_t v110 = (const void **)(v151 + 5);
                if (!v151[5])
                {
                  CFStringRef Copy = CFStringCreateCopy(v6, @"kQPTokenMe");
                  nlp::CFScopedPtr<__CFString const*>::reset(v110, Copy);
                }
                if (v109 >= 2)
                {
                  CFIndex v112 = 0;
                  CFIndex v113 = v109 - 1;
                  do
                  {
                    CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(*((CFArrayRef *)v131 + 18), v112);
                    CFStringRef v115 = (const __CFString *)CFArrayGetValueAtIndex(ValueAtIndex, 0);
                    CFStringRef v116 = CFArrayGetValueAtIndex(ValueAtIndex, 1);
                    uint64_t v117 = CFArrayGetValueAtIndex(ValueAtIndex, 2);
                    int v118 = CFArrayGetValueAtIndex(ValueAtIndex, 3);
                    uint64_t v119 = CFArrayGetValueAtIndex(ValueAtIndex, 4);
                    __p.__r_.__value_.__r.__words[0] = 0;
                    __p.__r_.__value_.__l.__size_ = (std::string::size_type)&__p;
                    __p.__r_.__value_.__r.__words[2] = 0x3002000000;
                    long long v139 = __Block_byref_object_copy__6;
                    uint64_t v140 = __Block_byref_object_dispose__6;
                    CFTypeRef v141 = CFArrayCreateMutable(v6, 0, MEMORY[0x263EFFF70]);
                    uint64_t v120 = *((void *)v131 + 3);
                    v133[0] = MEMORY[0x263EF8330];
                    v133[1] = 0x40000000;
                    void v133[2] = ___ZN2QP18SpotlightFormatter24updateParseWithAttributeEPK10__CFStringNSt3__110shared_ptrINS_14ParseAttributeEEE_block_invoke_5;
                    v133[3] = &unk_264705AE0;
                    v133[6] = v119;
                    v133[7] = v118;
                    v133[8] = v116;
                    v133[9] = v117;
                    v133[4] = &v156;
                    v133[5] = &__p;
                    QP::ParserGrammar::tokens(v120, (const __CFString *)cf, (const __CFString *)v175, v115, (uint64_t)v133);
                    if (CFArrayGetCount(*(CFArrayRef *)(__p.__r_.__value_.__l.__size_ + 40))) {
                      CFArrayAppendValue((CFMutableArrayRef)v190[5], *(const void **)(__p.__r_.__value_.__l.__size_ + 40));
                    }
                    _Block_object_dispose(&__p, 8);
                    if (v141) {
                      CFRelease(v141);
                    }
                    ++v112;
                  }
                  while (v113 != v112);
                }
              }
            }
            else
            {
              __p.__r_.__value_.__r.__words[0] = 0;
              __p.__r_.__value_.__l.__size_ = (std::string::size_type)&__p;
              __p.__r_.__value_.__r.__words[2] = 0x2000000000;
              long long v139 = *(uint64_t (**)(uint64_t, uint64_t))(*((void *)v131 + 1) + 224);
              uint64_t v121 = *((void *)v131 + 3);
              v132[0] = MEMORY[0x263EF8330];
              v132[1] = 0x40000000;
              uint64_t v132[2] = ___ZN2QP18SpotlightFormatter24updateParseWithAttributeEPK10__CFStringNSt3__110shared_ptrINS_14ParseAttributeEEE_block_invoke_6;
              v132[3] = &unk_264705B08;
              v132[4] = &v150;
              v132[5] = &v169;
              v132[6] = &v156;
              v132[7] = &__p;
              v132[8] = &v144;
              v132[9] = &v189;
              v132[10] = v131;
              QP::ParserGrammar::tokens(v121, (const __CFString *)cf, (const __CFString *)v175, 0, (uint64_t)v132);
              _Block_object_dispose(&__p, 8);
            }
            if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v142.__r_.__value_.__l.__data_);
            }
            CFStringRef v35 = v126;
          }
        }
        QP::SpotlightFormatter::addTokens(v131, (__CFString *)v151[5], (const __CFArray *)v190[5]);
        QP::SpotlightFormatter::addSuggestion(v131, (__CFString *)v145[5]);
        QP::SpotlightFormatter::addDescription(v131, (__CFString *)v157[5]);
        QP::SpotlightFormatter::addAttributes(v131, theDict);
        QP::SpotlightFormatter::addPrimaryCategories(v131, (const __CFArray *)v184[5]);
        QP::SpotlightFormatter::addSecondaryCategory(v131, (const __CFArray *)v178[5]);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v35);
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  _Block_object_dispose(&v144, 8);
  if (v149) {
    CFRelease(v149);
  }
  _Block_object_dispose(&v150, 8);
  if (v155) {
    CFRelease(v155);
  }
  _Block_object_dispose(&v156, 8);
  if (v161) {
    CFRelease(v161);
  }
  if (v162) {
    CFRelease(v162);
  }
  if (v163) {
    CFRelease(v163);
  }
  if (v164) {
    CFRelease(v164);
  }
  if (v165) {
    CFRelease(v165);
  }
  if (v166) {
    CFRelease(v166);
  }
  if (v167) {
    CFRelease(v167);
  }
  if (v168) {
    CFRelease(v168);
  }
  _Block_object_dispose(&v169, 8);
  if (v174) {
    CFRelease(v174);
  }
  if (v175) {
    CFRelease(v175);
  }
  if (theDict) {
    CFRelease(theDict);
  }
  _Block_object_dispose(&v177, 8);
  if (v182) {
    CFRelease(v182);
  }
  _Block_object_dispose(&v183, 8);
  if (v188) {
    CFRelease(v188);
  }
  _Block_object_dispose(&v189, 8);
  if (v194) {
    CFRelease(v194);
  }
  _Block_object_dispose(&v195, 8);
  if (Mutable) {
    CFRelease(Mutable);
  }
}

void sub_224DD4044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x217]) < 0) {
    operator delete((void *)STACK[0x200]);
  }
  if (a72 < 0) {
    operator delete(a67);
  }
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)&STACK[0x220], 0);
  _Block_object_dispose(&STACK[0x228], 8);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)&STACK[0x250], 0);
  _Block_object_dispose(&STACK[0x258], 8);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)&STACK[0x280], 0);
  _Block_object_dispose(&STACK[0x288], 8);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)&STACK[0x2B0], 0);
  nlp::CFScopedPtr<__CFArray const*>::reset((const void **)&STACK[0x2B8], 0);
  nlp::CFScopedPtr<__CFArray const*>::reset((const void **)&STACK[0x2C0], 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)&STACK[0x2C8], 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)&STACK[0x2D0], 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)&STACK[0x2D8], 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)&STACK[0x2E0], 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)&STACK[0x2E8], 0);
  _Block_object_dispose(&STACK[0x2F0], 8);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)&STACK[0x318], 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)&STACK[0x320], 0);
  nlp::CFScopedPtr<__CFDictionary *>::reset((const void **)&STACK[0x328], 0);
  _Block_object_dispose(&STACK[0x330], 8);
  nlp::CFScopedPtr<__CFArray *>::reset((const void **)&STACK[0x358], 0);
  _Block_object_dispose((const void *)(v72 - 256), 8);
  nlp::CFScopedPtr<__CFArray *>::reset((const void **)(v72 - 216), 0);
  _Block_object_dispose((const void *)(v72 - 208), 8);
  nlp::CFScopedPtr<__CFArray *>::reset((const void **)(v72 - 168), 0);
  _Block_object_dispose((const void *)(v72 - 160), 8);
  nlp::CFScopedPtr<__CFArray *>::reset((const void **)(v72 - 120), 0);
  _Unwind_Resume(a1);
}

std::string *QP::NumericValue::upper@<X0>(QP::NumericValue *this@<X0>, std::string *a2@<X8>)
{
  if (*(void *)this) {
    return std::to_string(a2, *(_DWORD *)(*(void *)this + 8));
  }
  uint64_t v3 = *((void *)this + 2);
  if (v3) {
    return std::to_string(a2, *(double *)(v3 + 16));
  }
  else {
    return (std::string *)std::string::basic_string[abi:ne180100]<0>(a2, "");
  }
}

std::string *QP::NumericValue::lower@<X0>(QP::NumericValue *this@<X0>, std::string *a2@<X8>)
{
  if (*(void *)this) {
    return std::to_string(a2, *(_DWORD *)(*(void *)this + 4));
  }
  uint64_t v3 = *((void *)this + 2);
  if (v3) {
    return std::to_string(a2, *(double *)(v3 + 8));
  }
  else {
    return (std::string *)std::string::basic_string[abi:ne180100]<0>(a2, "");
  }
}

std::string *QP::NumericValue::value@<X0>(int **this@<X0>, std::string *a2@<X8>)
{
  if (*this) {
    return std::to_string(a2, **this);
  }
  uint64_t v3 = (double *)this[2];
  if (v3) {
    return std::to_string(a2, *v3);
  }
  else {
    return (std::string *)std::string::basic_string[abi:ne180100]<0>(a2, "");
  }
}

void QP::LexemeStatus::suggestionKey(QP::LexemeStatus *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) >= 0) {
    size_t v4 = *((unsigned __int8 *)this + 23);
  }
  else {
    size_t v4 = *((void *)this + 1);
  }
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v4 + 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v4)
  {
    if (*((char *)this + 23) >= 0) {
      CFAllocatorRef v6 = this;
    }
    else {
      CFAllocatorRef v6 = *(QP::LexemeStatus **)this;
    }
    memmove(p_p, v6, v4);
  }
  *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v4) = 45;
  BOOL v9 = (const std::string::value_type *)*((void *)this + 15);
  CFStringRef v8 = (char *)this + 120;
  BOOL v7 = v9;
  int v10 = v8[23];
  if (v10 >= 0) {
    uint64_t v11 = v8;
  }
  else {
    uint64_t v11 = v7;
  }
  if (v10 >= 0) {
    std::string::size_type v12 = v8[23];
  }
  else {
    std::string::size_type v12 = *((void *)v8 + 1);
  }
  CFStringRef v13 = std::string::append(&__p, v11, v12);
  *a2 = *v13;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_224DD4788(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN2QP18SpotlightFormatter24updateParseWithAttributeEPK10__CFStringNSt3__110shared_ptrINS_14ParseAttributeEEE_block_invoke(void *a1, const void *a2, const void *a3, const __CFString *a4, const void *a5)
{
  CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  uint64_t v12 = *(void *)(a1[4] + 8);
  uint64_t v14 = *(void *)(v12 + 40);
  CFStringRef v13 = (const void **)(v12 + 40);
  if (!v14)
  {
    CFStringRef Copy = CFStringCreateCopy(v10, a4);
    nlp::CFScopedPtr<__CFString const*>::reset(v13, Copy);
  }
  CFDictionarySetValue(Mutable, @"TOKEN", a2);
  CFDictionarySetValue(Mutable, @"TEXT", a3);
  if (a5) {
    CFDictionarySetValue(Mutable, @"QUERY", a5);
  }
  else {
    CFDictionarySetValue(Mutable, @"QUERY", *(const void **)(*(void *)(a1[5] + 8) + 40));
  }
  CFStringRef v16 = *(const void **)(*(void *)(a1[6] + 8) + 40);
  if (v16) {
    CFDictionarySetValue(Mutable, @"STATUS", v16);
  }
  CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(a1[7] + 8) + 40), Mutable);
  if (Mutable) {
    CFRelease(Mutable);
  }
}

void sub_224DD48F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nlp::CFScopedPtr<__CFDictionary *>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

void ___ZN2QP18SpotlightFormatter24updateParseWithAttributeEPK10__CFStringNSt3__110shared_ptrINS_14ParseAttributeEEE_block_invoke_2(uint64_t a1, const void *a2)
{
}

void ___ZN2QP18SpotlightFormatter24updateParseWithAttributeEPK10__CFStringNSt3__110shared_ptrINS_14ParseAttributeEEE_block_invoke_3(uint64_t a1, uint64_t a2)
{
  CFStringFromCFStringRef String = QP::createCFStringFromString(a2);
  CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), CFStringFromString);
  if (CFStringFromString) {
    CFRelease(CFStringFromString);
  }
}

void sub_224DD4974(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

void ___ZN2QP18SpotlightFormatter24updateParseWithAttributeEPK10__CFStringNSt3__110shared_ptrINS_14ParseAttributeEEE_block_invoke_4(uint64_t a1, uint64_t a2)
{
  CFStringFromCFStringRef String = QP::createCFStringFromString(a2);
  CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), CFStringFromString);
  if (CFStringFromString) {
    CFRelease(CFStringFromString);
  }
}

void sub_224DD49E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

void ___ZN2QP18SpotlightFormatter24updateParseWithAttributeEPK10__CFStringNSt3__110shared_ptrINS_14ParseAttributeEEE_block_invoke_5(uint64_t a1, const void *a2, const void *a3, const __CFString *a4, const __CFString *a5)
{
  CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  char v19 = Mutable;
  CFDictionarySetValue(Mutable, @"TOKEN", a2);
  CFDictionarySetValue(Mutable, @"TEXT", a3);
  CFDictionarySetValue(Mutable, @"EMAILS", *(const void **)(a1 + 48));
  if (a5)
  {
    CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(v10, 0, a5);
    CFMutableStringRef v18 = MutableCopy;
    if (CFStringsAreEqual(a4, @"0"))
    {
      CFStringReplaceAll(MutableCopy, *(CFStringRef *)(a1 + 56));
      int v13 = 3;
    }
    else
    {
      CFStringRef v14 = *(const __CFString **)(a1 + 64);
      v20.uint64_t length = CFStringGetLength(MutableCopy);
      v20.uint64_t location = 0;
      CFStringFindAndReplace(MutableCopy, @"%@a", v14, v20, 0);
      CFStringRef v15 = *(const __CFString **)(a1 + 72);
      v21.uint64_t length = CFStringGetLength(MutableCopy);
      v21.uint64_t location = 0;
      CFStringFindAndReplace(MutableCopy, @"%@x", v15, v21, 0);
      if (CFStringsAreEqual(a4, @"3")) {
        int v13 = 1;
      }
      else {
        int v13 = 2;
      }
    }
    int valuePtr = v13;
    CFNumberRef v16 = CFNumberCreate(v10, kCFNumberIntType, &valuePtr);
    CFDictionarySetValue(Mutable, @"TYPE", v16);
    CFDictionarySetValue(Mutable, @"QUERY", MutableCopy);
    if (MutableCopy) {
      CFRelease(MutableCopy);
    }
  }
  else
  {
    CFDictionarySetValue(Mutable, @"QUERY", *(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40));
  }
  CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), Mutable);
  if (Mutable) {
    CFRelease(Mutable);
  }
}

void sub_224DD4C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  nlp::CFScopedPtr<__CFDictionary *>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

void ___ZN2QP18SpotlightFormatter24updateParseWithAttributeEPK10__CFStringNSt3__110shared_ptrINS_14ParseAttributeEEE_block_invoke_6(void *a1, const void *a2, const __CFString *a3, const __CFString *a4, const void *a5)
{
  uint64_t v10 = a1[10];
  CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  uint64_t v13 = *(void *)(a1[4] + 8);
  uint64_t v15 = *(void *)(v13 + 40);
  CFStringRef v14 = (const void **)(v13 + 40);
  if (!v15)
  {
    CFStringRef Copy = CFStringCreateCopy(v11, a4);
    nlp::CFScopedPtr<__CFString const*>::reset(v14, Copy);
  }
  if (a3 && *(void *)(*(void *)(a1[5] + 8) + 40)) {
    uint64_t v17 = (void *)CFStringCreateWithFormat(v11, 0, a3, *(void *)(*(void *)(a1[5] + 8) + 40));
  }
  else {
    uint64_t v17 = (void *)CFRetain(a3);
  }
  CFMutableStringRef v18 = v17;
  uint64_t v32 = v17;
  CFDictionarySetValue(Mutable, @"TOKEN", a2);
  CFDictionarySetValue(Mutable, @"TEXT", v18);
  if (a5) {
    CFDictionarySetValue(Mutable, @"QUERY", a5);
  }
  else {
    CFDictionarySetValue(Mutable, @"QUERY", *(const void **)(*(void *)(a1[6] + 8) + 40));
  }
  CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(v11, 0, *(CFStringRef *)(*(void *)(a1[5] + 8) + 40));
  CFStringLowercase(MutableCopy, *(CFLocaleRef *)(*(void *)(v10 + 8) + 104));
  CFDictionaryRef v20 = *(const __CFDictionary **)(*(void *)(a1[7] + 8) + 24);
  if (v20 && CFDictionaryContainsKey(v20, MutableCopy))
  {
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(*(void *)(a1[7] + 8) + 24), MutableCopy);
    CFDictionarySetValue(Mutable, @"TEXT", *(const void **)(*(void *)(a1[5] + 8) + 40));
    BOOL v22 = CFDictionaryGetValue(Value, @"ORIGINAL_TEXT");
    BOOL v23 = CFDictionaryGetValue(Value, @"ATTRIBUTE");
    uint64_t v24 = CFDictionaryGetValue(Value, @"STATUS");
    BOOL v25 = CFDictionaryGetValue(Value, @"TOKEN");
    if (v22)
    {
      CFDictionarySetValue(Mutable, @"TEXT", v22);
      uint64_t v26 = *(void *)(a1[8] + 8);
      CFTypeRef v27 = CFRetain(v22);
      nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v26 + 40), v27);
    }
    if (v24) {
      CFDictionarySetValue(Mutable, @"STATUS", v24);
    }
    if (v25) {
      CFDictionarySetValue(Mutable, @"TOKEN", v25);
    }
    if (v23 && v24)
    {
      BOOL v28 = CFArrayCreateMutable(v11, 0, MEMORY[0x263EFFF70]);
      CFArrayAppendValue(v28, v23);
      CFArrayAppendValue(v28, v24);
      CFStringRef v29 = CFStringCreateByCombiningStrings(v11, v28, @"=");
      CFDictionarySetValue(Mutable, @"QUERY", v29);
      uint64_t v30 = *(void *)(a1[6] + 8);
      CFStringRef v31 = CFStringCreateWithFormat(v11, 0, @"%@", v29, v29, v28, MutableCopy, v32, Mutable);
      nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v30 + 40), v31);
      if (v29) {
        CFRelease(v29);
      }
      if (v28) {
        CFRelease(v28);
      }
    }
  }
  CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(a1[9] + 8) + 40), Mutable);
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  if (v18) {
    CFRelease(v18);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
}

void sub_224DD4FA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  size_t v4 = va_arg(va1, const void *);
  va_copy(va2, va1);
  CFAllocatorRef v6 = va_arg(va2, const void *);
  va_copy(va3, va2);
  CFStringRef v8 = va_arg(va3, const void *);
  nlp::CFScopedPtr<__CFArray *>::reset((const void **)va, 0);
  nlp::CFScopedPtr<__CFString *>::reset((const void **)va1, 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va2, 0);
  nlp::CFScopedPtr<__CFDictionary *>::reset((const void **)va3, 0);
  _Unwind_Resume(a1);
}

void QP::SpotlightFormatter::~SpotlightFormatter(const void **this)
{
  QP::SpotlightFormatter::~SpotlightFormatter(this);
  JUMPOUT(0x22A623E20);
}

{
  const void **v2;
  uint64_t vars8;

  *this = &unk_26D830E48;
  uint64_t v2 = this + 11;
  nlp::CFScopedPtr<__CFArray const*>::reset(this + 23, 0);
  nlp::CFScopedPtr<__CFDictionary const*>::reset(this + 22, 0);
  nlp::CFScopedPtr<__CFNumber const*>::reset(this + 21, 0);
  nlp::CFScopedPtr<__CFNumber const*>::reset(this + 20, 0);
  nlp::CFScopedPtr<__CFNumber const*>::reset(this + 19, 0);
  nlp::CFScopedPtr<__CFArray *>::reset(this + 18, 0);
  nlp::CFScopedPtr<__CFArray *>::reset(this + 17, 0);
  nlp::CFScopedPtr<__CFArray *>::reset(this + 16, 0);
  nlp::CFScopedPtr<__CFArray *>::reset(this + 15, 0);
  nlp::CFScopedPtr<__CFArray *>::reset(this + 14, 0);
  nlp::CFScopedPtr<__CFArray *>::reset(this + 13, 0);
  nlp::CFScopedPtr<__CFArray *>::reset(this + 12, 0);
  nlp::CFScopedPtr<__CFArray *>::reset(v2, 0);
  QP::Formatter::~Formatter((QP::Formatter *)this);
}

void ___ZL20getDateActionFiltersv_block_invoke()
{
  keys[1] = *(void **)MEMORY[0x263EF8340];
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  uint64_t v1 = (__CFString *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"_kMDItemBundleID == %s", "com.apple.mobilesafari");
  values = v1;
  keys[0] = @"kMDItemUsedDates";
  getDateActionFilters(void)::gDateActionFilters = (uint64_t)CFDictionaryCreate(v0, (const void **)keys, (const void **)&values, 1, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (v1) {
    CFRelease(v1);
  }
}

void sub_224DD5138(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::set<unsigned short>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<unsigned short>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned short,std::__tree_node<unsigned short,void *> *,long>>(a1, *(unsigned __int16 **)a2, (unsigned __int16 *)(a2 + 8));
  return a1;
}

void sub_224DD51A0(_Unwind_Exception *a1)
{
  std::__tree<unsigned short>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<unsigned short>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned short,std::__tree_node<unsigned short,void *> *,long>>(uint64_t *result, unsigned __int16 *a2, unsigned __int16 *a3)
{
  if (a2 != a3)
  {
    size_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    CFAllocatorRef v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<unsigned short>::__emplace_hint_unique_key_args<unsigned short,unsigned short const&>(v5, v6, v4 + 13, v4 + 13);
      BOOL v7 = (unsigned __int16 *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          CFStringRef v8 = v7;
          BOOL v7 = *(unsigned __int16 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          CFStringRef v8 = (unsigned __int16 *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          size_t v4 = v8;
        }
        while (!v9);
      }
      size_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<unsigned short>::__emplace_hint_unique_key_args<unsigned short,unsigned short const&>(uint64_t **a1, uint64_t *a2, unsigned __int16 *a3, _WORD *a4)
{
  CFAllocatorRef v6 = std::__tree<unsigned short>::__find_equal<unsigned short>(a1, a2, &v11, &v10, a3);
  BOOL v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    CFStringRef v8 = (uint64_t **)v6;
    BOOL v7 = (uint64_t *)operator new(0x20uLL);
    *((_WORD *)v7 + 13) = *a4;
    std::__tree<std::__value_type<unsigned short,std::set<unsigned short>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::set<unsigned short>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::set<unsigned short>>>>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<unsigned short>::__find_equal<unsigned short>(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned __int16 *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, unsigned int v7 = *((unsigned __int16 *)a2 + 13), v6 < v7))
  {
    CFStringRef v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      BOOL v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        BOOL v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      uint64_t v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        uint64_t v13 = v10;
      }
      while (v14);
    }
    unsigned int v15 = *a5;
    if (*((unsigned __int16 *)v10 + 13) < v15) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v17 = (uint64_t *)v16;
          unsigned int v18 = *(unsigned __int16 *)(v16 + 26);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          uint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        uint64_t v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      uint64_t v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    uint64_t v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      uint64_t v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    char v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      char v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((unsigned __int16 *)a4 + 13))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          CFRange v21 = (uint64_t *)v20;
          unsigned int v22 = *(unsigned __int16 *)(v20 + 26);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          uint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        uint64_t v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      CFRange v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

QP::SpellCheckWrapper *QP::SpellCheckWrapper::SpellCheckWrapper(QP::SpellCheckWrapper *this, __CFString *a2)
{
  size_t v4 = [MEMORY[0x263EFF960] preferredLanguages];
  uint64_t v5 = [v4 firstObject];

  if (a2)
  {
    CFStringRef v6 = a2;

    uint64_t v5 = (void *)v6;
  }
  objc_storeStrong((id *)&QP::m_preferred_language, v5);
  uint64_t v13 = 0;
  BOOL v14 = &v13;
  uint64_t v15 = 0x2050000000;
  unsigned int v7 = (void *)getUITextCheckerClass(void)::softClass;
  uint64_t v16 = getUITextCheckerClass(void)::softClass;
  if (!getUITextCheckerClass(void)::softClass)
  {
    v12[0] = MEMORY[0x263EF8330];
    v12[1] = 3221225472;
    v12[2] = ___ZL21getUITextCheckerClassv_block_invoke;
    _OWORD v12[3] = &unk_264705B50;
    void v12[4] = &v13;
    ___ZL21getUITextCheckerClassv_block_invoke((uint64_t)v12);
    unsigned int v7 = (void *)v14[3];
  }
  CFStringRef v8 = v7;
  _Block_object_dispose(&v13, 8);
  id v9 = objc_alloc_init(v8);
  uint64_t v10 = (void *)QP::m_text_checker;
  QP::m_text_checker = (uint64_t)v9;

  return this;
}

void sub_224DD5694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t QP::SpellCheckWrapper::spellCheck(QP::SpellCheckWrapper *this, __CFString *a2, int a3)
{
  size_t v4 = a2;
  uint64_t v5 = (void *)QP::m_text_checker;
  uint64_t v6 = [(__CFString *)v4 length];
  if (objc_msgSend(v5, "rangeOfMisspelledWordInString:range:startingAt:wrap:language:", v4, 0, v6, 0, 0, QP::m_preferred_language)|| v7 != -[__CFString length](v4, "length"))
  {
    uint64_t v11 = 0;
LABEL_9:
    uint64_t v12 = 0;
    goto LABEL_10;
  }
  CFStringRef v8 = (void *)QP::m_text_checker;
  uint64_t v9 = [(__CFString *)v4 length];
  uint64_t v10 = objc_msgSend(v8, "guessesForWordRange:inString:language:", 0, v9, v4, QP::m_preferred_language);
  uint64_t v11 = v10;
  if (!v10 || ![v10 count]) {
    goto LABEL_9;
  }
  if ((unint64_t)[v11 count] <= 0xA) {
    a3 = [v11 count];
  }
  uint64_t v12 = objc_msgSend(v11, "subarrayWithRange:", 0, a3);
LABEL_10:

  return v12;
}

void sub_224DD57E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

Class ___ZL21getUITextCheckerClassv_block_invoke(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!UIKitLibraryCore(char **)::frameworkLibrary)
  {
    v4[1] = MEMORY[0x263EF8330];
    void v4[2] = 3221225472;
    v4[3] = ___ZL16UIKitLibraryCorePPc_block_invoke;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_264705B70;
    uint64_t v6 = 0;
    UIKitLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
    uint64_t v2 = (void *)v4[0];
    if (!UIKitLibraryCore(char **)::frameworkLibrary)
    {
      abort_report_np();
      goto LABEL_7;
    }
    if (v4[0]) {
      goto LABEL_8;
    }
  }
  while (1)
  {
    Class result = objc_getClass("UITextChecker");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      break;
    }
LABEL_7:
    uint64_t v2 = (void *)___ZL21getUITextCheckerClassv_block_invoke_cold_1();
LABEL_8:
    free(v2);
  }
  getUITextCheckerClass(void)::softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t ___ZL16UIKitLibraryCorePPc_block_invoke()
{
  uint64_t result = _sl_dlopen();
  UIKitLibraryCore(char **)::frameworkLibrary = result;
  return result;
}

void *QP::U2Parser::addArgActions(uint64_t a1, void **a2)
{
  uint64_t v4 = *(void *)(a1 + 112);
  uint64_t result = std::__tree<std::string>::find<std::string>(v4 + 400, a2);
  if ((void *)(v4 + 408) != result)
  {
    uint64_t result = std::__tree<std::string>::find<std::string>(v4 + 400, a2);
    uint64_t v6 = (unsigned __int16 *)result[7];
    uint64_t v7 = (unsigned __int16 *)(result + 8);
    if (v6 != (unsigned __int16 *)(result + 8))
    {
      CFStringRef v8 = (uint64_t **)(a1 + 128);
      do
      {
        uint64_t result = std::__tree<unsigned short>::__emplace_unique_key_args<unsigned short,unsigned short const&>(v8, v6 + 13, v6 + 13);
        uint64_t v9 = (unsigned __int16 *)*((void *)v6 + 1);
        if (v9)
        {
          do
          {
            uint64_t v10 = v9;
            uint64_t v9 = *(unsigned __int16 **)v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            uint64_t v10 = (unsigned __int16 *)*((void *)v6 + 2);
            BOOL v11 = *(void *)v10 == (void)v6;
            uint64_t v6 = v10;
          }
          while (!v11);
        }
        uint64_t v6 = v10;
      }
      while (v10 != v7);
    }
  }
  return result;
}

void QP::U2Parser::addArgActionstoTimeAttr(uint64_t *a1, QP::ParseAttribute ***a2)
{
  uint64_t v4 = a1[14];
  std::string::basic_string[abi:ne180100]<0>(__p, "ACTION");
  unsigned int v5 = QP::ParserGrammar::symbolID(v4, (uint64_t)__p);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  if (v7 != v6)
  {
    CFStringRef v8 = a1 + 17;
    do
    {
      if (QP::ParseAttribute::flag(*v7) == 1 && !*((unsigned char *)*v7 + 73))
      {
        uint64_t v9 = (void *)a1[16];
        if (v9 != v8)
        {
          do
          {
            QP::ParseAttribute::addAction(*v7, v5, *((_WORD *)v9 + 13));
            uint64_t v10 = (void *)v9[1];
            if (v10)
            {
              do
              {
                BOOL v11 = v10;
                uint64_t v10 = (void *)*v10;
              }
              while (v10);
            }
            else
            {
              do
              {
                BOOL v11 = (void *)v9[2];
                BOOL v12 = *v11 == (void)v9;
                uint64_t v9 = v11;
              }
              while (!v12);
            }
            uint64_t v9 = v11;
          }
          while (v11 != v8);
        }
      }
      v7 += 2;
    }
    while (v7 != v6);
  }
}

void sub_224DD5B68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t QP::U2Parser::mergeActionsforSearchtoolPersonalAnswers(uint64_t a1, uint64_t *a2, QP::ParseAttribute ***a3)
{
  uint64_t result = SPQueryKindIsSearchToolSearch(*(CFStringRef *)(*(void *)(a1 + 80) + 184));
  if (result)
  {
    uint64_t result = std::string::starts_with[abi:ne180100](a2, "INTENT_FLIGHT");
    if ((result & 1) != 0
      || (uint64_t result = std::string::starts_with[abi:ne180100](a2, "INTENT_HOTEL"), (result & 1) != 0)
      || (uint64_t result = std::string::starts_with[abi:ne180100](a2, "INTENT_RESTAURANT"), result))
    {
      uint64_t v7 = *a3;
      CFStringRef v8 = a3[1];
      if (*a3 != v8)
      {
        uint64_t v9 = *(void *)(a1 + 112);
        uint64_t v10 = v9 + 376;
        uint64_t v11 = v9 + 384;
        do
        {
          uint64_t result = QP::ParseAttribute::flag(*v7);
          if (result == 1 && !*((unsigned char *)*v7 + 73))
          {
            uint64_t result = (uint64_t)std::__tree<std::string>::find<std::string>(v10, (void **)a2);
            if (v11 != result)
            {
              BOOL v12 = *(void **)(result + 56);
              uint64_t v13 = (void *)(result + 64);
              if (v12 != (void *)(result + 64))
              {
                do
                {
                  char v14 = (void *)v12[5];
                  if (v14 != v12 + 6)
                  {
                    unsigned int v15 = *((unsigned __int16 *)v12 + 16);
                    do
                    {
                      uint64_t result = (uint64_t)QP::ParseAttribute::addAction(*v7, v15, *((_WORD *)v14 + 13));
                      uint64_t v16 = (void *)v14[1];
                      if (v16)
                      {
                        do
                        {
                          uint64_t v17 = v16;
                          uint64_t v16 = (void *)*v16;
                        }
                        while (v16);
                      }
                      else
                      {
                        do
                        {
                          uint64_t v17 = (void *)v14[2];
                          BOOL v18 = *v17 == (void)v14;
                          char v14 = v17;
                        }
                        while (!v18);
                      }
                      char v14 = v17;
                    }
                    while (v17 != v12 + 6);
                  }
                  char v19 = (void *)v12[1];
                  if (v19)
                  {
                    do
                    {
                      uint64_t v20 = v19;
                      char v19 = (void *)*v19;
                    }
                    while (v19);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v20 = (void *)v12[2];
                      BOOL v18 = *v20 == (void)v12;
                      BOOL v12 = v20;
                    }
                    while (!v18);
                  }
                  BOOL v12 = v20;
                }
                while (v20 != v13);
              }
            }
          }
          v7 += 2;
        }
        while (v7 != v8);
      }
    }
  }
  return result;
}

id QP::localIdentifierAliases(void *a1)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  id v1 = a1;
  uint64_t v2 = [MEMORY[0x263EFF9C0] set];
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v3 = v1;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v13;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v13 != v5) {
          objc_enumerationMutation(v3);
        }
        uint64_t v7 = *(void **)(*((void *)&v12 + 1) + 8 * i);
        objc_msgSend(v2, "addObject:", v7, (void)v12);
        CFStringRef v8 = [v7 stringByReplacingOccurrencesOfString:@"_" withString:@"-"];
        [v2 addObject:v8];

        uint64_t v9 = [v7 stringByReplacingOccurrencesOfString:@"-" withString:@"_"];
        [v2 addObject:v9];
      }
      uint64_t v4 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v4);
  }

  uint64_t v10 = (void *)[v2 copy];
  return v10;
}

void sub_224DD5EBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN2QP19isSupportedQULocaleEP8NSLocale_block_invoke()
{
  id v2 = (id)[&unk_26D83EBC0 mutableCopy];
  if (_os_feature_enabled_impl()) {
    [v2 addObjectsFromArray:&unk_26D83EBD8];
  }
  uint64_t v0 = QP::localIdentifierAliases(v2);
  id v1 = (void *)QP::isSupportedQULocale(NSLocale *)::supportedLocaleIdentifiers;
  QP::isSupportedQULocale(NSLocale *)::supportedLocaleIdentifiers = v0;
}

void sub_224DD5F98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZN2QP20isSupportedECRLocaleEP8NSLocale_block_invoke()
{
  uint64_t v0 = QP::localIdentifierAliases(&unk_26D83EBF0);
  id v1 = (void *)QP::isSupportedECRLocale(NSLocale *)::supportedLocaleIdentifiers;
  QP::isSupportedECRLocale(NSLocale *)::supportedLocaleIdentifiers = v0;
}

uint64_t QP::isAllowedPeopleSpanToken(QP *this, NSString *a2)
{
  id v2 = this;
  if (QP::isAllowedPeopleSpanToken(NSString *)::onceToken != -1) {
    dispatch_once(&QP::isAllowedPeopleSpanToken(NSString *)::onceToken, &__block_literal_global_77);
  }
  id v3 = (void *)QP::isAllowedPeopleSpanToken(NSString *)::disallowedTokens;
  uint64_t v4 = [(QP *)v2 localizedLowercaseString];
  uint64_t v5 = [v3 containsObject:v4] ^ 1;

  return v5;
}

void sub_224DD6074(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN2QP24isAllowedPeopleSpanTokenEP8NSString_block_invoke()
{
  uint64_t v0 = [MEMORY[0x263EFFA08] setWithArray:&unk_26D83EC08];
  id v1 = (void *)QP::isAllowedPeopleSpanToken(NSString *)::disallowedTokens;
  QP::isAllowedPeopleSpanToken(NSString *)::disallowedTokens = v0;
}

uint64_t QP::U2Parser::U2Parser(uint64_t a1, void *a2, void *a3, uint64_t *a4)
{
  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4nlp::CFScopedPtr<__CFString const*>::reset((const void **)&a9, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 8nlp::CFScopedPtr<__CFString const*>::reset((const void **)&a9, 0) = *a2;
  uint64_t v5 = a2[1];
  *(void *)(a1 + 88) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *a4;
  uint64_t v6 = a4[1];
  *(void *)(a1 + 104) = v6;
  *(void *)(a1 + 96) = v7;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 112) = *a3;
  uint64_t v8 = a3[1];
  *(void *)(a1 + 12nlp::CFScopedPtr<__CFString const*>::reset((const void **)&a9, 0) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 128) = a1 + 136;
  *(void *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 152) = 0uLL;
  *(_OWORD *)(a1 + 168) = 0uLL;
  *(_OWORD *)(a1 + 184) = 0uLL;
  *(_OWORD *)(a1 + 20nlp::CFScopedPtr<__CFString const*>::reset((const void **)&a9, 0) = 0uLL;
  [MEMORY[0x263F628E8] setUseSpotlightResources:*(unsigned __int8 *)(*(void *)(a1 + 80) + 66)];
  return a1;
}

void sub_224DD61D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  nlp::CFScopedPtr<__CFAttributedString const*>::reset((const void **)(v10 + 208), 0);
  a10 = (void **)(v10 + 184);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = (void **)(v10 + 160);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&a10);
  nlp::CFScopedPtr<__CFString const*>::reset(v14, 0);
  std::__tree<unsigned short>::destroy(v13, *(void **)(v10 + 136));
  uint64_t v16 = *(std::__shared_weak_count **)(v10 + 120);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  QP::U2Parser::U2Parser(v12, v11, v10);
  _Unwind_Resume(a1);
}

__CFArray *QP::U2Parser::createPeopleNameRangesFromPersonLexemes(QP::U2Parser *this)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  id v3 = *(void **)(*((void *)this + 10) + 232);
  if (v3)
  {
    id v4 = *((id *)this + 19);
    if ([v4 length])
    {
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      id v5 = v3;
      uint64_t v6 = [v5 countByEnumeratingWithState:&v28 objects:v33 count:16];
      if (v6)
      {
        uint64_t v7 = *(void *)v29;
        do
        {
          for (uint64_t i = 0; i != v6; ++i)
          {
            if (*(void *)v29 != v7) {
              objc_enumerationMutation(v5);
            }
            uint64_t v9 = *(void **)(*((void *)&v28 + 1) + 8 * i);
            if ([v9 length])
            {
              uint64_t v11 = objc_msgSend(v4, "rangeOfString:options:range:locale:", v9, 0, 0, objc_msgSend(v4, "length"), *(void *)(*((void *)this + 10) + 104));
              if (v11 != 0x7FFFFFFFFFFFFFFFLL)
              {
                long long v12 = objc_msgSend(MEMORY[0x263F08D40], "valueWithRange:", v11, v10);
                CFArrayAppendValue(Mutable, v12);
              }
            }
          }
          uint64_t v6 = [v5 countByEnumeratingWithState:&v28 objects:v33 count:16];
        }
        while (v6);
      }
    }
    return Mutable;
  }
  QP::Lexer::lexemeAtLocation(*((void *)this + 12), 0, &__p);
  long long v14 = __p;
  uint64_t v13 = v26;
  if (__p)
  {
    unint64_t v15 = 1;
    while (1)
    {
      QP::getUTF8StringFromCFString(@"Person", &__p);
      uint64_t v16 = (v27 & 0x80u) == 0 ? &__p : (void **)__p;
      uint64_t v17 = (v27 & 0x80u) == 0 ? (std::__shared_weak_count *)v27 : v26;
      if (*((char *)v14 + 23) < 0)
      {
        char v19 = (void *)*v14;
        uint64_t v18 = v14[1];
      }
      else
      {
        uint64_t v18 = *((unsigned __int8 *)v14 + 23);
        char v19 = v14;
      }
      v32[0] = v19;
      v32[1] = v18;
      BOOL v20 = std::string_view::starts_with[abi:ne180100](v32, v16, (size_t)v17);
      BOOL v21 = v20;
      if ((char)v27 < 0) {
        break;
      }
      if (v20) {
        goto LABEL_30;
      }
LABEL_31:
      QP::Lexer::lexemeAtLocation(*((void *)this + 12), v15, &__p);
      long long v14 = __p;
      BOOL v23 = v26;
      std::string __p = 0;
      uint64_t v26 = 0;
      if (v13)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        if (v26) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v26);
        }
      }
      ++v15;
      uint64_t v13 = v23;
      if (!v14)
      {
        if (v23) {
          goto LABEL_36;
        }
        return Mutable;
      }
    }
    operator delete(__p);
    if (!v21) {
      goto LABEL_31;
    }
LABEL_30:
    unsigned int v22 = objc_msgSend(MEMORY[0x263F08D40], "valueWithRange:", v14[9], v14[10]);
    CFArrayAppendValue(Mutable, v22);

    goto LABEL_31;
  }
  BOOL v23 = v26;
  if (v26) {
LABEL_36:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  return Mutable;
}

void sub_224DD6504(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__CFArray *QP::U2Parser::createLocationNameRangesFromLocationLexemes(QP::U2Parser *this)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  QP::Lexer::lexemeAtLocation(*((void *)this + 12), 0, &__p);
  id v4 = __p;
  id v3 = v16;
  if (__p)
  {
    unint64_t v5 = 1;
    while (1)
    {
      QP::getUTF8StringFromCFString(@"Location", &__p);
      uint64_t v6 = (v17 & 0x80u) == 0 ? &__p : (void **)__p;
      uint64_t v7 = (v17 & 0x80u) == 0 ? (std::__shared_weak_count *)v17 : v16;
      if (*((char *)v4 + 23) < 0)
      {
        uint64_t v9 = (void *)*v4;
        uint64_t v8 = v4[1];
      }
      else
      {
        uint64_t v8 = *((unsigned __int8 *)v4 + 23);
        uint64_t v9 = v4;
      }
      v18[0] = v9;
      v18[1] = v8;
      BOOL v10 = std::string_view::starts_with[abi:ne180100](v18, v6, (size_t)v7);
      BOOL v11 = v10;
      if ((char)v17 < 0) {
        break;
      }
      if (v10) {
        goto LABEL_16;
      }
LABEL_17:
      QP::Lexer::lexemeAtLocation(*((void *)this + 12), v5, &__p);
      id v4 = __p;
      uint64_t v13 = v16;
      std::string __p = 0;
      uint64_t v16 = 0;
      if (v3)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v3);
        if (v16) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v16);
        }
      }
      ++v5;
      id v3 = v13;
      if (!v4)
      {
        if (v13) {
          goto LABEL_22;
        }
        return Mutable;
      }
    }
    operator delete(__p);
    if (!v11) {
      goto LABEL_17;
    }
LABEL_16:
    long long v12 = objc_msgSend(MEMORY[0x263F08D40], "valueWithRange:", v4[9], v4[10]);
    CFArrayAppendValue(Mutable, v12);

    goto LABEL_17;
  }
  uint64_t v13 = v16;
  if (v16) {
LABEL_22:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  return Mutable;
}

void sub_224DD66E4(_Unwind_Exception *a1)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(a1);
}

__CFAttributedString *QP::U2Parser::createAnnotations(QP::U2Parser *this)
{
  CFMutableArrayRef Mutable = CFAttributedStringCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
  v30.uint64_t location = 0;
  v30.uint64_t length = 0;
  CFAttributedStringReplaceString(Mutable, v30, *((CFStringRef *)this + 19));
  QP::Lexer::lexemeAtLocation(*((void *)this + 12), 0, &__p);
  id v4 = (unsigned __int8 *)__p;
  id v3 = v26;
  if (!__p)
  {
    BOOL v23 = v26;
    if (!v26) {
      return Mutable;
    }
    goto LABEL_45;
  }
  unint64_t v5 = 1;
  uint64_t v6 = (const void *)MEMORY[0x263EFFA78];
  do
  {
    QP::getUTF8StringFromCFString(@"Person", &__p);
    if ((v27 & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if ((v27 & 0x80u) == 0) {
      size_t v8 = v27;
    }
    else {
      size_t v8 = (size_t)v26;
    }
    if ((char)v4[23] < 0)
    {
      BOOL v10 = *(unsigned __int8 **)v4;
      uint64_t v9 = *((void *)v4 + 1);
    }
    else
    {
      uint64_t v9 = v4[23];
      BOOL v10 = v4;
    }
    long long v28 = v10;
    uint64_t v29 = v9;
    BOOL v11 = std::string_view::starts_with[abi:ne180100](&v28, p_p, v8);
    if ((char)v27 < 0) {
      operator delete(__p);
    }
    CFStringRef v12 = @"kQPQUPersonSpan";
    if (v11) {
      goto LABEL_39;
    }
    QP::getUTF8StringFromCFString(@"Location", &__p);
    if ((v27 & 0x80u) == 0) {
      uint64_t v13 = &__p;
    }
    else {
      uint64_t v13 = __p;
    }
    if ((v27 & 0x80u) == 0) {
      size_t v14 = v27;
    }
    else {
      size_t v14 = (size_t)v26;
    }
    if ((char)v4[23] < 0)
    {
      uint64_t v16 = *(unsigned __int8 **)v4;
      uint64_t v15 = *((void *)v4 + 1);
    }
    else
    {
      uint64_t v15 = v4[23];
      uint64_t v16 = v4;
    }
    long long v28 = v16;
    uint64_t v29 = v15;
    BOOL v17 = std::string_view::starts_with[abi:ne180100](&v28, v13, v14);
    if ((char)v27 < 0) {
      operator delete(__p);
    }
    CFStringRef v12 = @"kQPQULocationSpan";
    if (v17) {
      goto LABEL_39;
    }
    QP::getUTF8StringFromCFString(@"Holiday", &__p);
    if ((v27 & 0x80u) == 0) {
      uint64_t v18 = &__p;
    }
    else {
      uint64_t v18 = __p;
    }
    if ((v27 & 0x80u) == 0) {
      size_t v19 = v27;
    }
    else {
      size_t v19 = (size_t)v26;
    }
    if ((char)v4[23] < 0)
    {
      BOOL v21 = *(unsigned __int8 **)v4;
      uint64_t v20 = *((void *)v4 + 1);
    }
    else
    {
      uint64_t v20 = v4[23];
      BOOL v21 = v4;
    }
    long long v28 = v21;
    uint64_t v29 = v20;
    BOOL v22 = std::string_view::starts_with[abi:ne180100](&v28, v18, v19);
    if ((char)v27 < 0) {
      operator delete(__p);
    }
    CFStringRef v12 = @"kQPQUHolidaySpan";
    if (v22) {
LABEL_39:
    }
      CFAttributedStringSetAttribute(Mutable, *(CFRange *)(v4 + 72), v12, v6);
    QP::Lexer::lexemeAtLocation(*((void *)this + 12), v5, &__p);
    id v4 = (unsigned __int8 *)__p;
    BOOL v23 = v26;
    std::string __p = 0;
    uint64_t v26 = 0;
    if (v3)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
      if (v26) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      }
    }
    ++v5;
    id v3 = v23;
  }
  while (v4);
  if (v23) {
LABEL_45:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  return Mutable;
}

void sub_224DD695C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

__CFArray *QP::U2Parser::createTokenOutputSpans(QP::U2Parser *this, const __CFAttributedString *a2, CFRange a3)
{
  CFIndex length = a3.length;
  CFIndex location = a3.location;
  v18[1] = *MEMORY[0x263EF8340];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  if (location != -1 && length >= 1)
  {
    CFDictionaryRef Attributes = CFAttributedStringGetAttributes(a2, location, 0);
    if (Attributes)
    {
      CFDictionaryRef v8 = Attributes;
      CFIndex Count = CFDictionaryGetCount(Attributes);
      MEMORY[0x270FA5388](Count);
      BOOL v11 = (const void **)((char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
      size_t v12 = v10 >= 0x200 ? 512 : v10;
      bzero((char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
      CFDictionaryGetKeysAndValues(v8, v11, 0);
      if (Count >= 1)
      {
        do
        {
          BOOL v13 = CFStringsAreEqual(@"kQPQUPersonSpan", (const __CFString *)*v11);
          size_t v14 = @"Person";
          if (v13
            || (BOOL v15 = CFStringsAreEqual(@"kQPQULocationSpan", (const __CFString *)*v11),
                size_t v14 = @"Location",
                v15)
            || (v16 = CFStringsAreEqual(@"kQPQUHolidaySpan", (const __CFString *)*v11), size_t v14 = @"Holiday",
                                                                                              v16))
          {
            CFArrayAppendValue(Mutable, v14);
          }
          ++v11;
          --Count;
        }
        while (Count);
      }
    }
  }
  return Mutable;
}

void QP::U2Parser::lexemeForTokenWithRange(QP::U2Parser *this@<X0>, const __CFString *a2@<X1>, CFRange a3@<0:X2, 8:X3>, const __CFString **a4@<X4>, const __CFString *a5@<X5>, const __CFString *a6@<X6>, void *a7@<X8>)
{
  CFIndex length = a3.length;
  CFIndex location = a3.location;
  uint64_t v42 = *MEMORY[0x263EF8340];
  CFRange v38 = a3;
  QP::Lexer::lexemeAtLocation(*((void *)this + 12), 0, buf);
  uint64_t v34 = a4;
  uint64_t v14 = *(void *)buf;
  BOOL v15 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)buf)
  {
    CFIndex v16 = length + location;
    unint64_t v17 = 1;
    while (1)
    {
      CFIndex v18 = *(void *)(v14 + 72);
      if (v18 <= location && *(void *)(v14 + 80) + v18 >= v16)
      {
        QP::getUTF8StringFromCFString(a5, buf);
        uint64_t v20 = (v41 & 0x80u) == 0 ? buf : *(unsigned char **)buf;
        size_t v21 = (v41 & 0x80u) == 0 ? v41 : *(void *)&buf[8];
        if (*(char *)(v14 + 23) < 0)
        {
          BOOL v23 = *(void **)v14;
          size_t v22 = *(void *)(v14 + 8);
        }
        else
        {
          size_t v22 = *(unsigned __int8 *)(v14 + 23);
          BOOL v23 = (void *)v14;
        }
        std::string __p = v23;
        size_t v36 = v22;
        if (std::string_view::starts_with[abi:ne180100](&__p, v20, v21))
        {
          QP::getUTF8StringFromCFString(a6, &__p);
          if ((v37 & 0x80u) == 0) {
            p_p = &__p;
          }
          else {
            p_p = __p;
          }
          if ((v37 & 0x80u) == 0) {
            size_t v25 = v37;
          }
          else {
            size_t v25 = v36;
          }
          if (*(char *)(v14 + 23) < 0)
          {
            unsigned __int8 v27 = *(void **)v14;
            uint64_t v26 = *(void *)(v14 + 8);
          }
          else
          {
            uint64_t v26 = *(unsigned __int8 *)(v14 + 23);
            unsigned __int8 v27 = (void *)v14;
          }
          v39[0] = v27;
          v39[1] = v26;
          BOOL v28 = std::string_view::ends_with[abi:ne180100](v39, p_p, v25);
          if ((char)v37 < 0) {
            operator delete(__p);
          }
        }
        else
        {
          BOOL v28 = 0;
        }
        if ((char)v41 < 0) {
          operator delete(*(void **)buf);
        }
        if (v28) {
          break;
        }
      }
      QP::Lexer::lexemeAtLocation(*((void *)this + 12), v17, buf);
      uint64_t v14 = *(void *)buf;
      uint64_t v29 = *(std::__shared_weak_count **)&buf[8];
      *(void *)buf = 0;
      *(void *)&buf[8] = 0;
      if (v15)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
        if (*(void *)&buf[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
        }
      }
      ++v17;
      BOOL v15 = v29;
      if (!v14) {
        goto LABEL_38;
      }
    }
    if (u2ParserLogger(void)::token != -1) {
      dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_245);
    }
    long long v31 = u2ParserLogger(void)::log;
    if (os_log_type_enabled((os_log_t)u2ParserLogger(void)::log, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v32 = (void *)v14;
      if (*(char *)(v14 + 23) < 0) {
        uint64_t v32 = *(void **)v14;
      }
      *(_DWORD *)buf = 138412546;
      *(void *)&uint8_t buf[4] = a2;
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = v32;
      _os_log_debug_impl(&dword_224D85000, v31, OS_LOG_TYPE_DEBUG, "Found matching lexeme for %@ with type %s", buf, 0x16u);
    }
    *a7 = v14;
    a7[1] = v15;
  }
  else
  {
    uint64_t v29 = *(std::__shared_weak_count **)&buf[8];
LABEL_38:
    if (u2ParserLogger(void)::token != -1) {
      dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_245);
    }
    CFRange v30 = u2ParserLogger(void)::log;
    if (os_log_type_enabled((os_log_t)u2ParserLogger(void)::log, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      *(void *)&uint8_t buf[4] = a2;
      _os_log_impl(&dword_224D85000, v30, OS_LOG_TYPE_DEFAULT, "Unable to find a Kind* or Media lexeme for %@; falling back to Text",
        buf,
        0xCu);
    }
    std::__shared_weak_count *v34 = kQPParseAttributeKeywordKey;
    std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,char const*&,CFRange &,void>((char **)&QP::kLexemeTextType, (uint64_t)&v38, a7);
    if (v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v29);
    }
  }
}

void sub_224DD6E64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  _Unwind_Resume(exception_object);
}

id u2ParserLogger(void)
{
  if (u2ParserLogger(void)::token != -1) {
    dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_245);
  }
  uint64_t v0 = (void *)u2ParserLogger(void)::log;
  return v0;
}

void QP::U2Parser::lexemeForArgMediaTypeWithRange(QP::U2Parser *this@<X0>, const __CFString *a2@<X1>, CFRange a3@<0:X2, 8:X3>, const __CFString **a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  CFRange v23 = a3;
  QP::Lexer::lexemeAtLocation(*((void *)this + 12), 0, buf);
  uint64_t v9 = *(void *)buf;
  unint64_t v10 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)buf)
  {
    CFStringRef v21 = a2;
    size_t v22 = a4;
    BOOL v11 = 0;
    uint64_t v12 = 0;
    unint64_t v13 = 1;
    while (1)
    {
      uint64_t v14 = v10;
      CFIndex v15 = *(void *)(v9 + 72);
      if (v15 > v23.location || *(void *)(v9 + 80) + v15 < v23.length + v23.location) {
        goto LABEL_19;
      }
      if (std::string::starts_with[abi:ne180100]((uint64_t *)v9, "Media"))
      {
        if (u2ParserLogger(void)::token != -1) {
          dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_245);
        }
        size_t v19 = u2ParserLogger(void)::log;
        if (os_log_type_enabled((os_log_t)u2ParserLogger(void)::log, OS_LOG_TYPE_DEBUG)) {
          QP::U2Parser::lexemeForArgMediaTypeWithRange((uint64_t *)v9, (uint64_t)v21, v19);
        }
        *size_t v22 = kQPParseAttributeMediaKey;
        *a5 = v9;
        a5[1] = (uint64_t)v10;
        goto LABEL_44;
      }
      if (v12) {
        goto LABEL_19;
      }
      if (std::string::starts_with[abi:ne180100]((uint64_t *)v9, "Kind")) {
        break;
      }
      uint64_t v12 = 0;
LABEL_19:
      QP::Lexer::lexemeAtLocation(*((void *)this + 12), v13, buf);
      uint64_t v9 = *(void *)buf;
      unint64_t v10 = *(std::__shared_weak_count **)&buf[8];
      *(void *)buf = 0;
      *(void *)&buf[8] = 0;
      if (v14)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
        if (*(void *)&buf[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
        }
      }
      ++v13;
      if (!v9)
      {
        if (v12)
        {
          *size_t v22 = kQPParseAttributeKindKey;
          *a5 = v12;
          a5[1] = (uint64_t)v11;
          BOOL v11 = 0;
          goto LABEL_42;
        }
        a2 = v21;
        a4 = v22;
        goto LABEL_37;
      }
    }
    if (u2ParserLogger(void)::token != -1) {
      dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_245);
    }
    unint64_t v17 = u2ParserLogger(void)::log;
    if (os_log_type_enabled((os_log_t)u2ParserLogger(void)::log, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v18 = v9;
      if (*(char *)(v9 + 23) < 0) {
        uint64_t v18 = *(void *)v9;
      }
      *(_DWORD *)buf = 138412546;
      *(void *)&uint8_t buf[4] = v21;
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = v18;
      _os_log_debug_impl(&dword_224D85000, v17, OS_LOG_TYPE_DEBUG, "Found matching Kind lexeme for %@ with type %s", buf, 0x16u);
      if (!v14) {
        goto LABEL_15;
      }
    }
    else if (!v14)
    {
LABEL_15:
      if (v11) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
      uint64_t v12 = v9;
      BOOL v11 = v14;
      goto LABEL_19;
    }
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_15;
  }
  BOOL v11 = 0;
LABEL_37:
  if (u2ParserLogger(void)::token != -1) {
    dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_245);
  }
  uint64_t v20 = u2ParserLogger(void)::log;
  if (os_log_type_enabled((os_log_t)u2ParserLogger(void)::log, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    *(void *)&uint8_t buf[4] = a2;
    _os_log_impl(&dword_224D85000, v20, OS_LOG_TYPE_DEFAULT, "[QPNLU] Unable to find a Kind* or Media lexeme for %@; falling back to Text",
      buf,
      0xCu);
  }
  *a4 = kQPParseAttributeKeywordKey;
  std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,char const*&,CFRange &,void>((char **)&QP::kLexemeTextType, (uint64_t)&v23, a5);
LABEL_42:
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
LABEL_44:
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
}

void sub_224DD725C(_Unwind_Exception *exception_object)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void QP::U2Parser::parse(uint64_t a1, uint64_t a2)
{
  if (u2ParserLogger(void)::token != -1) {
    dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_245);
  }
  id v4 = (id)u2ParserLogger(void)::log;
  if (u2ParserLogger(void)::token != -1) {
    dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_245);
  }
  os_signpost_id_t v5 = os_signpost_id_make_with_pointer((os_log_t)u2ParserLogger(void)::log, *(const void **)(*(void *)(a1 + 96) + 440));
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    os_signpost_id_t v6 = v5;
    if (os_signpost_enabled(v4))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_224D85000, v4, OS_SIGNPOST_INTERVAL_BEGIN, v6, "U2Parser.parse", "", buf, 2u);
    }
  }

  uint64_t v7 = *(std::__shared_weak_count **)(a2 + 8);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  QP::U2Parser::parseInternal(a1);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (u2ParserLogger(void)::token != -1) {
    dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_245);
  }
  CFDictionaryRef v8 = (id)u2ParserLogger(void)::log;
  if (u2ParserLogger(void)::token != -1) {
    dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_245);
  }
  os_signpost_id_t v9 = os_signpost_id_make_with_pointer((os_log_t)u2ParserLogger(void)::log, *(const void **)(*(void *)(a1 + 96) + 440));
  if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    os_signpost_id_t v10 = v9;
    if (os_signpost_enabled(v8))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_224D85000, v8, OS_SIGNPOST_INTERVAL_END, v10, "U2Parser.parse", "", buf, 2u);
    }
  }
}

void sub_224DD7488(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void QP::U2Parser::parseInternal(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  uint64_t v3 = v2;
  v536 = v4;
  uint64_t v5 = v1;
  uint64_t v876 = *MEMORY[0x263EF8340];
  memset(&v874[4], 0, 48);
  long long v6 = *(_OWORD *)&v874[16];
  *(_OWORD *)(v1 + 4) = *(_OWORD *)v874;
  *(_DWORD *)uint64_t v1 = 0;
  *(_OWORD *)(v1 + 2nlp::CFScopedPtr<__CFString const*>::reset((const void **)&a9, 0) = v6;
  *(_OWORD *)(v1 + 36) = *(_OWORD *)&v874[32];
  *(_DWORD *)(v1 + 52) = *(_DWORD *)&v874[48];
  uint64_t v7 = (std::string *)(v1 + 56);
  if (*(char *)(v1 + 79) < 0) {
    operator delete(v7->__r_.__value_.__l.__data_);
  }
  v7->__r_.__value_.__r.__words[0] = 0;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  uint64_t v540 = mach_absolute_time();
  CFStringRef v8 = *(const __CFString **)(v5 + 152);
  v545 = (const void **)(v5 + 152);
  if (v8)
  {
    CFStringRef v9 = *(const __CFString **)(*(void *)(v5 + 96) + 440);
    if (v9)
    {
      if (CFStringsAreEqual(v8, v9) && !*(unsigned char *)(*(void *)(v5 + 80) + 36) && *(unsigned char *)(v5 + 216))
      {
        if (u2ParserLogger(void)::token != -1) {
          dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_245);
        }
        unsigned __int8 v37 = u2ParserLogger(void)::log;
        if (os_log_type_enabled((os_log_t)u2ParserLogger(void)::log, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v874 = 0;
          _os_log_impl(&dword_224D85000, v37, OS_LOG_TYPE_DEFAULT, "[QPNLU] lexer string and current string same not parsing", v874, 2u);
        }
        return;
      }
    }
  }
  QP::U2Parser::clear((QP::U2Parser *)v5);
  nlp::CFScopedPtr<__CFString const*>::reset(v545, 0);
  os_signpost_id_t v10 = *(const void **)(*(void *)(v5 + 96) + 440);
  if (v10)
  {
    CFTypeRef v11 = CFRetain(v10);
    nlp::CFScopedPtr<__CFString const*>::reset(v545, v11);
  }
  uint64_t v12 = (QP *)*(id *)(*(void *)(v5 + 80) + 104);
  v553 = v12;
  if (!v12)
  {
    *(_DWORD *)uint64_t v5 = 2;
    if (*(char *)(v5 + 79) < 0)
    {
      *(void *)(v5 + 64) = 13;
      uint64_t v7 = *(std::string **)(v5 + 56);
    }
    else
    {
      *(unsigned char *)(v5 + 79) = 13;
    }
    strcpy((char *)v7, "no locale set");
    if (u2ParserLogger(void)::token != -1) {
      dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_245);
    }
    if (os_log_type_enabled((os_log_t)u2ParserLogger(void)::log, OS_LOG_TYPE_ERROR)) {
      QP::U2Parser::parseInternal();
    }
    goto LABEL_992;
  }
  if ((QP::isSupportedQULocale(v12, v13) & 1) == 0)
  {
    *(_DWORD *)uint64_t v5 = 2;
    if (*(char *)(v5 + 79) < 0)
    {
      *(void *)(v5 + 64) = 18;
      uint64_t v7 = *(std::string **)(v5 + 56);
    }
    else
    {
      *(unsigned char *)(v5 + 79) = 18;
    }
    strcpy((char *)v7, "unsupported locale");
    if (u2ParserLogger(void)::token != -1) {
      dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_245);
    }
    size_t v19 = u2ParserLogger(void)::log;
    if (os_log_type_enabled((os_log_t)u2ParserLogger(void)::log, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v874 = 134217984;
      *(void *)&v874[4] = v3;
      _os_log_impl(&dword_224D85000, v19, OS_LOG_TYPE_DEFAULT, "[QPNLU][qid=%ld] Unsupported locale", v874, 0xCu);
    }
    goto LABEL_992;
  }
  v542 = (QP::U2Parser *)v5;
  v527 = v7;
  if (u2ParserLogger(void)::token != -1) {
    dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_245);
  }
  uint64_t v528 = v3;
  uint64_t v14 = (id)u2ParserLogger(void)::log;
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
    QP::U2Parser::parseInternal();
  }

  uint64_t v15 = *(void *)(*((void *)v542 + 10) + 8);
  uint64_t v522 = v15;
  BOOL v17 = v15 != 13 && v15 != 9;
  char v521 = v17;
  CFStringRef v18 = (const __CFString *)*((void *)v542 + 19);
  if (v18) {
    CFIndex Length = CFStringGetLength(v18);
  }
  else {
    CFIndex Length = 0;
  }
  if (u2ParserLogger(void)::token != -1) {
    dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_245);
  }
  uint64_t v20 = (id)u2ParserLogger(void)::log;
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v21 = *((void *)v542 + 10);
    uint64_t v22 = *(void *)(v21 + 176);
    uint64_t v23 = *(void *)(v21 + 8);
    *(_DWORD *)v874 = 138412546;
    *(void *)&v874[4] = v22;
    *(_WORD *)&v874[12] = 2048;
    *(void *)&v874[14] = v23;
    _os_log_impl(&dword_224D85000, v20, OS_LOG_TYPE_DEFAULT, "config loaded identifier(%@) context(%ld)", v874, 0x16u);
  }

  uint64_t v24 = *((void *)v542 + 10);
  if (*(unsigned char *)(v24 + 34))
  {
    uint64_t v25 = 0xFFFFFFFFLL;
  }
  else
  {
    uint64_t v25 = *(unsigned int *)(v24 + 44);
    if (!v25)
    {
      if (Length <= 2) {
        uint64_t v25 = 0;
      }
      else {
        uint64_t v25 = 150;
      }
    }
  }
  uint64_t v26 = [MEMORY[0x263F628E8] sharedInstance];
  v533 = [v26 getModelForLocale:v553 withTimeoutMS:v25];

  uint64_t v27 = mach_absolute_time();
  if (QPTimingNanosecondsSinceAbsoluteTime(unsigned long long)::onceToken != -1) {
    dispatch_once(&QPTimingNanosecondsSinceAbsoluteTime(unsigned long long)::onceToken, &__block_literal_global_272);
  }
  unint64_t v28 = (v27 - v540)
      * QPTimingNanosecondsSinceAbsoluteTime(unsigned long long)::sTimebaseInfo
      / *(unsigned int *)algn_26AA70AE4;
  *((void *)v542 + 2) = v28;
  if (!v533)
  {
    *(_DWORD *)v542 = 2;
    long long v31 = [MEMORY[0x263F628E8] sharedInstance];
    uint64_t v32 = [v31 loadError];
    id v33 = [v32 description];
    uint64_t v34 = [v33 UTF8String];
    if (v34) {
      CFStringRef v35 = (const std::string::value_type *)v34;
    }
    else {
      CFStringRef v35 = "timeout";
    }
    std::string::__assign_external(v527, v35);

    if (u2ParserLogger(void)::token != -1) {
      dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_245);
    }
    size_t v36 = (id)u2ParserLogger(void)::log;
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      unint64_t v157 = [(QP *)v553 localeIdentifier];
      uint64_t v158 = [MEMORY[0x263F628E8] sharedInstance];
      CFRange v159 = [v158 loadError];
      *(_DWORD *)v874 = 134218754;
      *(void *)&v874[4] = v528;
      *(_WORD *)&v874[12] = 2112;
      *(void *)&v874[14] = v157;
      *(_WORD *)&v874[22] = 1024;
      *(_DWORD *)&v874[24] = v25;
      *(_WORD *)&v874[28] = 2112;
      *(void *)&v874[30] = v159;
      _os_log_error_impl(&dword_224D85000, v36, OS_LOG_TYPE_ERROR, "[QPNLU][qid=%ld] Unable to load %@ U2 model with timeout:%dms lastError:%@", v874, 0x26u);
    }
    goto LABEL_991;
  }
  if (!Length)
  {
    *(_DWORD *)v542 = 1;
    if (u2ParserLogger(void)::token != -1) {
      dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_245);
    }
    uint64_t v29 = u2ParserLogger(void)::log;
    if (!os_log_type_enabled((os_log_t)u2ParserLogger(void)::log, OS_LOG_TYPE_INFO)) {
      goto LABEL_991;
    }
    *(_DWORD *)v874 = 134217984;
    *(void *)&v874[4] = v3;
    CFRange v30 = "[QPNLU][qid=%ld] Skipping parse for empty input";
LABEL_74:
    _os_log_impl(&dword_224D85000, v29, OS_LOG_TYPE_INFO, v30, v874, 0xCu);
    goto LABEL_991;
  }
  unint64_t v513 = v28;
  if (QP::Lexer::containsLegacyQuerySyntax(*((QP::Lexer **)v542 + 12)))
  {
    *(_DWORD *)v542 = 1;
    if (u2ParserLogger(void)::token != -1) {
      dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_245);
    }
    uint64_t v29 = u2ParserLogger(void)::log;
    if (!os_log_type_enabled((os_log_t)u2ParserLogger(void)::log, OS_LOG_TYPE_INFO)) {
      goto LABEL_991;
    }
    *(_DWORD *)v874 = 134217984;
    *(void *)&v874[4] = v3;
    CFRange v30 = "[QPNLU][qid=%ld] Skipping parse for legacy query syntax input";
    goto LABEL_74;
  }
  uint64_t v38 = [MEMORY[0x263EFF9A0] dictionary];
  id v519 = objc_alloc_init(MEMORY[0x263F628F0]);
  uint64_t v39 = *((void *)v542 + 10);
  if (*(unsigned char *)(v39 + 58) || *(unsigned char *)(v39 + 61))
  {
    v549 = (void *)v38;
    uint64_t v40 = mach_absolute_time();
    unsigned __int8 v41 = (void *)*((void *)v542 + 19);
    uint64_t v43 = *((void *)v542 + 10);
    uint64_t v42 = (std::__shared_weak_count *)*((void *)v542 + 11);
    if (v42) {
      atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    id v44 = v41;
    *(void *)v866 = 0;
    *(void *)&v866[8] = v866;
    *(void *)&v866[16] = 0x3032000000;
    v867 = __Block_byref_object_copy__273;
    v868 = __Block_byref_object_dispose__274;
    id v869 = 0;
    *(void *)&long long v841 = 0;
    *((void *)&v841 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = &v841;
    *(void *)&long long v842 = 0x3032000000;
    *((void *)&v842 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = __Block_byref_object_copy__273;
    *(void *)&long long v843 = __Block_byref_object_dispose__274;
    *((void *)&v843 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = 0;
    ptr = (void *)v40;
    if (u2ParserLogger(void)::token != -1) {
      dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_245);
    }
    BOOL v45 = (id)u2ParserLogger(void)::log;
    if (u2ParserLogger(void)::token != -1) {
      dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_245);
    }
    os_signpost_id_t v46 = os_signpost_id_make_with_pointer((os_log_t)u2ParserLogger(void)::log, v44);
    if (v46 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      os_signpost_id_t v47 = v46;
      if (os_signpost_enabled(v45))
      {
        *(_WORD *)v874 = 0;
        _os_signpost_emit_with_name_impl(&dword_224D85000, v45, OS_SIGNPOST_INTERVAL_BEGIN, v47, "U2Parser.ECR", "", v874, 2u);
      }
    }

    dispatch_semaphore_t v48 = dispatch_semaphore_create(0);
    qos_class_t v49 = qos_class_self();
    CFStringRef v50 = dispatch_get_global_queue(v49, 0);
    *(void *)v874 = MEMORY[0x263EF8330];
    *(void *)&v874[8] = 3321888768;
    *(void *)&v874[16] = ___ZN2QPL31allVisualIdentifiersWithTimeoutEP8NSStringNSt3__110shared_ptrINS_19ParserConfigurationEEEPU15__autoreleasingP7NSError_block_invoke;
    *(void *)&v874[24] = &unk_26D830F78;
    *(void *)&long long v875 = v43;
    *((void *)&v875 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = v42;
    if (v42) {
      atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(void *)&v874[48] = v866;
    id v51 = v44;
    *(void *)&v874[32] = v51;
    *(void *)&v874[56] = &v841;
    CFStringRef v52 = v48;
    *(void *)&v874[40] = v52;
    dispatch_async(v50, v874);

    if (*(unsigned char *)(v43 + 34)) {
      dispatch_time_t v53 = -1;
    }
    else {
      dispatch_time_t v53 = dispatch_time(0, 200000000);
    }
    if (dispatch_semaphore_wait(v52, v53))
    {
      BOOL v54 = objc_msgSend(NSString, "stringWithFormat:", @"ECR timed out after %dms", 200);
      char v55 = (void *)MEMORY[0x263F087E8];
      v862 = (long long *)*MEMORY[0x263F08320];
      *(void *)&long long __s = v54;
      uint64_t v56 = [NSDictionary dictionaryWithObjects:&__s forKeys:&v862 count:1];
      uint64_t v57 = [v55 errorWithDomain:@"com.apple.QueryParser.QueryUnderstandingError" code:-2002 userInfo:v56];
      CFStringRef v58 = *(void **)(*((void *)&v841 + 1) + 40);
      *(void *)(*((void *)&v841 + 1) + 4nlp::CFScopedPtr<__CFString const*>::reset((const void **)&a9, 0) = v57;
    }
    id v59 = *(id *)(*((void *)&v841 + 1) + 40);
    if (u2ParserLogger(void)::token != -1) {
      dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_245);
    }
    unsigned int v60 = (id)u2ParserLogger(void)::log;
    if (u2ParserLogger(void)::token != -1) {
      dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_245);
    }
    os_signpost_id_t v61 = os_signpost_id_make_with_pointer((os_log_t)u2ParserLogger(void)::log, v51);
    if (v61 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      os_signpost_id_t v62 = v61;
      if (os_signpost_enabled(v60))
      {
        LOWORD(buf.location) = 0;
        _os_signpost_emit_with_name_impl(&dword_224D85000, v60, OS_SIGNPOST_INTERVAL_END, v62, "U2Parser.ECR", "", (uint8_t *)&buf, 2u);
      }
    }

    id v63 = *(id *)(*(void *)&v866[8] + 40);
    if (*((void *)&v875 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v875 + 1));
    }

    _Block_object_dispose(&v841, 8);
    _Block_object_dispose(v866, 8);

    id v538 = v59;
    v554 = (void *)[v63 mutableCopy];

    if (v42) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v42);
    }
    uint64_t v531 = mach_absolute_time();
    if (QPTimingNanosecondsSinceAbsoluteTime(unsigned long long)::onceToken != -1) {
      dispatch_once(&QPTimingNanosecondsSinceAbsoluteTime(unsigned long long)::onceToken, &__block_literal_global_272);
    }
    uint64_t v524 = QPTimingNanosecondsSinceAbsoluteTime(unsigned long long)::sTimebaseInfo;
    unint64_t v529 = *(unsigned int *)algn_26AA70AE4;
    if (v538)
    {
      if (u2ParserLogger(void)::token != -1) {
        dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_245);
      }
      uint64_t v64 = (id)u2ParserLogger(void)::log;
      if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR)) {
        QP::U2Parser::parseInternal();
      }

      int v509 = 1;
    }
    else
    {
      int v509 = 0;
    }
    v550 = [MEMORY[0x263EFF980] array];
    long long v839 = 0u;
    long long v840 = 0u;
    long long v837 = 0u;
    long long v838 = 0u;
    CFStringRef v65 = [v554 allKeys];
    obuint64_t j = v65;
    uint64_t v66 = [v65 countByEnumeratingWithState:&v837 objects:v865 count:16];
    if (v66)
    {
      uint64_t v546 = *(void *)v838;
      do
      {
        for (uint64_t i = 0; i != v66; ++i)
        {
          if (*(void *)v838 != v546) {
            objc_enumerationMutation(obj);
          }
          uint64_t v68 = *(void *)(*((void *)&v837 + 1) + 8 * i);
          CFStringRef v69 = [v554 objectForKeyedSubscript:v68];
          BOOL v70 = [v69 count] == 0;

          if (!v70)
          {
            id v71 = (id)*v545;
            unint64_t v72 = 0;
            do
            {
              uint64_t v74 = objc_msgSend(v71, "rangeOfString:options:range:locale:", v68, 129, v72, objc_msgSend(v71, "length") - v72, v553);
              if (v74 == 0x7FFFFFFFFFFFFFFFLL) {
                break;
              }
              uint64_t v75 = v73;
              objc_msgSend(v71, "substringWithRange:", v74, v73);
              CFRange v76 = (QP *)objc_claimAutoreleasedReturnValue();
              if (QP::isAllowedPeopleSpanToken(v76, v77))
              {
                uint64_t v78 = objc_msgSend(MEMORY[0x263F08D40], "valueWithRange:", v74, v75);
                [v550 addObject:v78];
              }
              if (([(QP *)v76 isEqualToString:v68] & 1) == 0)
              {
                unsigned int v79 = [v554 objectForKeyedSubscript:v68];
                [v554 setObject:v79 forKeyedSubscript:v76];
              }
              v72 += v75 + v74;
            }
            while (v72 < [v71 length]);
          }
        }
        CFStringRef v65 = obj;
        uint64_t v66 = [obj countByEnumeratingWithState:&v837 objects:v865 count:16];
      }
      while (v66);
    }

    uint64_t v80 = *((void *)v542 + 10);
    if (*(void *)(v80 + 232) || !*(unsigned char *)(v80 + 58))
    {
      PeopleNameRangesFromPersonLexemes = QP::U2Parser::createPeopleNameRangesFromPersonLexemes(v542);
      [v519 setPeopleNameRanges:PeopleNameRangesFromPersonLexemes];
      CFRelease(PeopleNameRangesFromPersonLexemes);
    }
    else
    {
      [v519 setPeopleNameRanges:v550];
    }

    int v512 = 1;
    unint64_t v511 = (v531 - (unint64_t)ptr) * v524 / v529;
  }
  else
  {
    uint64_t v119 = QP::U2Parser::createPeopleNameRangesFromPersonLexemes(v542);
    LocationNameRangesFromLocationLexemes = QP::U2Parser::createLocationNameRangesFromLocationLexemes(v542);
    [v519 setPeopleNameRanges:v119];
    [v519 setLocationNameRanges:LocationNameRangesFromLocationLexemes];
    CFRelease(v119);
    CFRelease(LocationNameRangesFromLocationLexemes);
    int v509 = 0;
    int v512 = 0;
    unint64_t v511 = 0;
    v554 = (void *)v38;
  }
  id v551 = (id)*v545;
  id v82 = v519;
  CFRange v83 = [MEMORY[0x263F089D8] string];
  [v83 appendFormat:@"People names:\n"];
  CFStringRef v84 = [v82 peopleNameRanges];
  BOOL v85 = [v84 count] == 0;

  if (v85)
  {
    [v83 appendFormat:@"  none\n"];
  }
  else
  {
    long long v843 = 0u;
    long long v844 = 0u;
    long long v841 = 0u;
    long long v842 = 0u;
    CFRange v86 = [v82 peopleNameRanges];
    uint64_t v87 = [v86 countByEnumeratingWithState:&v841 objects:v874 count:16];
    if (v87)
    {
      uint64_t v88 = *(void *)v842;
      do
      {
        for (uint64_t j = 0; j != v87; ++j)
        {
          if (*(void *)v842 != v88) {
            objc_enumerationMutation(v86);
          }
          char v90 = *(void **)(*((void *)&v841 + 1) + 8 * j);
          [v90 rangeValue];
          [v83 appendFormat:@"  %@\n", v90];
        }
        uint64_t v87 = [v86 countByEnumeratingWithState:&v841 objects:v874 count:16];
      }
      while (v87);
    }
  }
  [v83 appendFormat:@"Location names:\n"];
  BOOL v91 = [v82 locationNameRanges];
  BOOL v92 = [v91 count] == 0;

  if (v92)
  {
    [v83 appendFormat:@"  none\n"];
  }
  else
  {
    long long v872 = 0u;
    long long v873 = 0u;
    long long __s = 0u;
    long long v871 = 0u;
    std::string::size_type v93 = [v82 locationNameRanges];
    uint64_t v94 = [v93 countByEnumeratingWithState:&__s objects:v866 count:16];
    if (v94)
    {
      uint64_t v95 = *(void *)v871;
      do
      {
        for (uint64_t k = 0; k != v94; ++k)
        {
          if (*(void *)v871 != v95) {
            objc_enumerationMutation(v93);
          }
          uint64_t v97 = [*(id *)(*((void *)&__s + 1) + 8 * k) rangeValue];
          CFStringRef v99 = objc_msgSend(v551, "substringWithRange:", v97, v98);
          [v83 appendFormat:@"  %@\n", v99];
        }
        uint64_t v94 = [v93 countByEnumeratingWithState:&__s objects:v866 count:16];
      }
      while (v94);
    }
  }
  if (u2ParserLogger(void)::token != -1) {
    dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_245);
  }
  CFIndex v100 = (id)u2ParserLogger(void)::log;
  if (os_log_type_enabled(v100, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v874 = 134218242;
    *(void *)&v874[4] = v528;
    *(_WORD *)&v874[12] = 2112;
    *(void *)&v874[14] = v83;
    _os_log_impl(&dword_224D85000, v100, OS_LOG_TYPE_DEFAULT, "[QPNLU][qid=%ld] QU model input spans\n%@", v874, 0x16u);
  }

  if (u2ParserLogger(void)::token != -1) {
    dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_245);
  }
  CFStringRef v101 = (id)u2ParserLogger(void)::log;
  if (u2ParserLogger(void)::token != -1) {
    dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_245);
  }
  CFDateFormatterRef v102 = (id)u2ParserLogger(void)::log;
  os_signpost_id_t v103 = os_signpost_id_make_with_pointer(v102, *(const void **)(*((void *)v542 + 12) + 440));

  if (v103 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v101))
  {
    *(_WORD *)v874 = 0;
    _os_signpost_emit_with_name_impl(&dword_224D85000, v101, OS_SIGNPOST_INTERVAL_BEGIN, v103, "U2Parser.inference", "", v874, 2u);
  }

  CFStringRef v104 = (const __CFString *)*((void *)v542 + 19);
  uint64_t v105 = *((void *)v542 + 10);
  int v106 = *(unsigned __int8 *)(v105 + 35);
  unsigned int v107 = *(_DWORD *)(v105 + 44);
  id v108 = v533;
  id v520 = v82;
  if (CFStringHasSuffix(v104, @"."))
  {
    if (u2ParserLogger(void)::token != -1) {
      dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_245);
    }
    CFIndex v109 = u2ParserLogger(void)::log;
    if (os_log_type_enabled((os_log_t)u2ParserLogger(void)::log, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v874 = 0;
      _os_log_impl(&dword_224D85000, v109, OS_LOG_TYPE_DEFAULT, "[QPNLU] Stripping trailing '.' from input string", v874, 2u);
    }
    v877.CFIndex length = CFStringGetLength(v104) - 1;
    v877.CFIndex location = 0;
    CFStringRef v104 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x263EFFB08], v104, v877);
  }
  else
  {
    CFRetain(v104);
  }
  *(void *)v866 = 0;
  *(void *)&v866[8] = v866;
  *(void *)&v866[16] = 0x3032000000;
  v867 = __Block_byref_object_copy__273;
  v868 = __Block_byref_object_dispose__274;
  id v869 = 0;
  *(void *)&long long v841 = 0;
  *((void *)&v841 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = &v841;
  *(void *)&long long v842 = 0x3032000000;
  *((void *)&v842 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = __Block_byref_object_copy__273;
  *(void *)&long long v843 = __Block_byref_object_dispose__274;
  *((void *)&v843 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = 0;
  uint64_t v110 = dispatch_group_create();
  dispatch_group_enter(v110);
  *(void *)v874 = MEMORY[0x263EF8330];
  *(void *)&v874[8] = 3221225472;
  *(void *)&v874[16] = ___ZN2QPL26u2UnderstandingWithTimeoutEPU31objcproto20QUUnderstandingModel11objc_objectPK10__CFStringP7QUSpansbjPU15__autoreleasingP7NSError_block_invoke;
  *(void *)&v874[24] = &unk_264705BE0;
  *(void *)&v874[56] = v104;
  *(void *)&v874[40] = &v841;
  *(void *)&v874[48] = v866;
  uint64_t v111 = v110;
  *(void *)&v874[32] = v111;
  [v108 getUnderstandingForQueryString:v104 spans:v520 withCompletionHandler:v874];
  if (v107) {
    unsigned int v112 = v107;
  }
  else {
    unsigned int v112 = 100;
  }
  dispatch_time_t v113 = dispatch_time(0, 1000000 * v112);
  if (v106) {
    dispatch_time_t v114 = -1;
  }
  else {
    dispatch_time_t v114 = v113;
  }
  if (dispatch_group_wait(v111, v114))
  {
    if (u2ParserLogger(void)::token != -1) {
      dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_245);
    }
    CFStringRef v115 = u2ParserLogger(void)::log;
    if (os_log_type_enabled((os_log_t)u2ParserLogger(void)::log, OS_LOG_TYPE_ERROR)) {
      QP::U2Parser::parseInternal(v115);
    }
    id v116 = [MEMORY[0x263F087E8] errorWithDomain:@"com.apple.QueryParser.QueryUnderstandingError" code:-2001 userInfo:0];
    if (atomic_fetch_add(QP::sQUInferenceTimeoutCount, 1u) == 25)
    {
      if (u2ParserLogger(void)::token != -1) {
        dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_245);
      }
      uint64_t v117 = u2ParserLogger(void)::log;
      if (os_log_type_enabled((os_log_t)u2ParserLogger(void)::log, OS_LOG_TYPE_FAULT)) {
        QP::U2Parser::parseInternal(v117);
      }
    }
  }
  else
  {
    int v118 = *(void **)(*((void *)&v841 + 1) + 40);
    if (v118) {
      id v116 = v118;
    }
    else {
      id v116 = 0;
    }
  }
  id obja = *(id *)(*(void *)&v866[8] + 40);

  _Block_object_dispose(&v841, 8);
  _Block_object_dispose(v866, 8);

  id v552 = v116;
  if (u2ParserLogger(void)::token != -1) {
    dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_245);
  }
  uint64_t v121 = (id)u2ParserLogger(void)::log;
  if (u2ParserLogger(void)::token != -1) {
    dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_245);
  }
  int v122 = (id)u2ParserLogger(void)::log;
  os_signpost_id_t v123 = os_signpost_id_make_with_pointer(v122, *(const void **)(*((void *)v542 + 12) + 440));

  if (v123 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v121))
  {
    *(_WORD *)v874 = 0;
    _os_signpost_emit_with_name_impl(&dword_224D85000, v121, OS_SIGNPOST_INTERVAL_END, v123, "U2Parser.inference", "", v874, 2u);
  }

  if (!obja)
  {
    *(_DWORD *)v542 = 3;
    id v146 = [v552 description];
    uint64_t v147 = [v146 UTF8String];
    if (v147) {
      long long v148 = (const std::string::value_type *)v147;
    }
    else {
      long long v148 = "timeout";
    }
    std::string::__assign_external(v527, v148);

    if (u2ParserLogger(void)::token != -1) {
      dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_245);
    }
    CFTypeRef v149 = (id)u2ParserLogger(void)::log;
    if (os_log_type_enabled(v149, OS_LOG_TYPE_ERROR)) {
      QP::U2Parser::parseInternal();
    }

    uint64_t v150 = [v552 domain];
    if ([v150 isEqualToString:@"com.apple.QueryParser.QueryUnderstandingError"])
    {
      BOOL v151 = [v552 code] == -2001;

      uint64_t v152 = 0;
      if (v151) {
        goto LABEL_990;
      }
    }
    else
    {
    }
    int v154 = [MEMORY[0x263F628E8] sharedInstance];
    [v154 releaseModel];

    CFTypeRef v155 = [MEMORY[0x263F628E8] sharedInstance];
    id v156 = (id)[v155 getModelForLocale:v553 withTimeoutMS:0];

    goto LABEL_989;
  }
  *((void *)v542 + 3) = [obja predictionTime];
  *((void *)v542 + 5) = [obja embeddingsTime];
  int v124 = [obja tokens];
  uint64_t v125 = [v124 count];
  long long v126 = [obja argIds];
  LOBYTE(v125) = v125 == [v126 count];

  if ((v125 & 1) == 0)
  {
    *(_DWORD *)v542 = 4;
    long long v153 = (char *)v527;
    if (*((char *)v542 + 79) < 0)
    {
      *((void *)v542 + 8) = 17;
      long long v153 = (char *)*((void *)v542 + 7);
    }
    else
    {
      *((unsigned char *)v542 + 79) = 17;
    }
    strcpy(v153, "Invalid U2 output");
    CFRange v160 = u2ParserLogger();
    if (os_log_type_enabled(v160, OS_LOG_TYPE_ERROR)) {
      QP::U2Parser::parseInternal();
    }

    goto LABEL_989;
  }
  long long v841 = 0uLL;
  *(void *)&long long v842 = 0;
  CFAllocatorRef alloc = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings((CFAllocatorRef)*MEMORY[0x263EFFB08], (CFStringRef)*v545, @" ");
  int v128 = [obja intentId];
  CFArrayRef theArray = ArrayBySeparatingStrings;
  int v516 = [v128 intValue];

  unint64_t v129 = (char *)intentLabel();
  std::string::basic_string[abi:ne180100]<0>(&__s, v129);
  unsigned int v130 = [obja safetyScore];
  [v130 floatValue];
  float v132 = v131;

  CFMutableDictionaryRef v133 = [v108 modelMetadata];
  uint64_t v134 = [v133 objectForKeyedSubscript:@"safety_threshold"];
  [v134 floatValue];
  float v501 = v135;

  uint64_t v136 = (void *)MEMORY[0x263EFF980];
  unint64_t v137 = [obja tokens];
  v517 = objc_msgSend(v136, "arrayWithCapacity:", objc_msgSend(v137, "count"));

  v863 = 0;
  v862 = 0;
  unint64_t v864 = 0;
  uint64_t v138 = [obja tokens];
  uint64_t v525 = [v138 count];

  CFTypeRef cf = QP::U2Parser::createAnnotations(v542);
  long long v139 = obja;
  if (*(unsigned char *)(*((void *)v542 + 10) + 58))
  {
    if (v525 < 1) {
      goto LABEL_955;
    }
    uint64_t v140 = 0;
    while (1)
    {
      CFTypeRef v141 = [v139 tokens];
      std::string v142 = [v141 objectAtIndexedSubscript:v140];

      if (!QP::isAllowedPeopleSpanToken(v142, v143)) {
        break;
      }
      uint64_t v144 = [v554 objectForKeyedSubscript:v142];
      BOOL v145 = [v144 count] == 0;

      if (v145) {
        break;
      }

      ++v140;
      long long v139 = obja;
      if (v525 == v140)
      {
        char v503 = 1;
        goto LABEL_228;
      }
    }

    char v503 = 0;
    long long v139 = obja;
  }
  else
  {
    char v503 = 0;
  }
LABEL_228:
  if (v525 < 1)
  {
LABEL_955:
    char v470 = 0;
LABEL_956:
    v471 = v862;
    v472 = v863;
    while (v471 != v472)
      std::vector<std::shared_ptr<QP::ParseAttribute>>::push_back[abi:ne180100]((uint64_t *)&v841, v471++);
    goto LABEL_965;
  }
  unint64_t v532 = 0;
  char v497 = 0;
  char v502 = 0;
  uint64_t v547 = 0;
  uint64_t v505 = 0;
  unsigned int v498 = v516 & 0xFFFFFFFD;
  uint64_t v507 = -1;
  uint64_t v504 = -1;
  do
  {
    v539 = [MEMORY[0x263EFF9A0] dictionary];
    CFTypeRef v161 = [v139 tokens];
    ptra = [v161 objectAtIndexedSubscript:v547];

    CFTypeRef v162 = [obja tokenRanges];
    v523 = [v162 objectAtIndexedSubscript:v547];

    CFIndex v164 = [v523 rangeValue];
    buf.CFIndex location = 0;
    if (v164 == 0x7FFFFFFFFFFFFFFFLL)
    {
      CFIndex v163 = 0;
      buf.CFIndex location = -1;
    }
    else
    {
      buf.CFIndex location = v164;
    }
    buf.CFIndex length = v163;
    CFTypeRef v165 = [obja argIdsForTokens];
    CFTypeRef v166 = [v165 objectAtIndexedSubscript:v547];
    CFTypeRef v167 = [v166 firstObject];
    int v530 = [v167 intValue];

    [v539 setObject:ptra forKeyedSubscript:kQPQUOutputTokenKey];
    CFTypeRef v168 = [obja argIdsForTokens];
    uint64_t v169 = [v168 objectAtIndexedSubscript:v547];
    [v539 setObject:v169 forKeyedSubscript:kQPQUOutputTokenArgIdsKey];

    std::string v170 = [MEMORY[0x263EFF980] array];
    long long v834 = 0u;
    long long v835 = 0u;
    long long v832 = 0u;
    long long v833 = 0u;
    uint64_t v171 = [obja argIdsForTokens];
    std::string v172 = [v171 objectAtIndexedSubscript:v547];

    uint64_t v173 = [v172 countByEnumeratingWithState:&v832 objects:v861 count:16];
    if (v173)
    {
      uint64_t v174 = *(void *)v833;
      do
      {
        for (uint64_t m = 0; m != v173; ++m)
        {
          if (*(void *)v833 != v174) {
            objc_enumerationMutation(v172);
          }
          v176 = NSString;
          [*(id *)(*((void *)&v832 + 1) + 8 * m) intValue];
          uint64_t v177 = [v176 stringWithUTF8String:intentArgLabel()];
          [v170 addObject:v177];
        }
        uint64_t v173 = [v172 countByEnumeratingWithState:&v832 objects:v861 count:16];
      }
      while (v173);
    }

    v178 = (void *)[v170 copy];
    [v539 setObject:v178 forKeyedSubscript:kQPQUOutputTokenArgLabelsKey];

    uint64_t v179 = [obja argScoresForTokens];
    v180 = [v179 objectAtIndexedSubscript:v547];
    [v539 setObject:v180 forKeyedSubscript:kQPQUOutputTokenArgScoresKey];

    uint64_t v181 = (QP::U2Parser *)[v539 setObject:v523 forKeyedSubscript:kQPQUOutputTokenRangeKey];
    TokenOutputSpans = QP::U2Parser::createTokenOutputSpans(v181, cf, buf);
    [v539 setObject:TokenOutputSpans forKeyedSubscript:kQPQUOutputSpanTypesKey];
    CFRelease(TokenOutputSpans);
    if (v164 == 0x7FFFFFFFFFFFFFFFLL)
    {
      *(_DWORD *)v542 = 4;
      std::string::__assign_external(v527, "Token not found in user query", 0x1DuLL);
      if (u2ParserLogger(void)::token != -1) {
        dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_245);
      }
      v473 = (id)u2ParserLogger(void)::log;
      if (os_log_type_enabled(v473, OS_LOG_TYPE_ERROR)) {
        QP::U2Parser::parseInternal();
      }

      goto LABEL_985;
    }
    if (v547 <= v507)
    {
      if (u2ParserLogger(void)::token != -1) {
        dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_245);
      }
      uint64_t v185 = (id)u2ParserLogger(void)::log;
      if (os_log_type_enabled(v185, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v874 = 134217984;
        *(void *)&v874[4] = v528;
        _os_log_debug_impl(&dword_224D85000, v185, OS_LOG_TYPE_DEBUG, "[QPNLU][qid=%ld] Skipping token that was part of a previous token group", v874, 0xCu);
      }

      v186 = [NSNumber numberWithLong:v532 - 1];
      v860 = v186;
      uint64_t v187 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v860 count:1];
      [v539 setObject:v187 forKeyedSubscript:kQPQUOutputTokenAttributeIndexesKey];

      CFMutableArrayRef v188 = (void *)[v539 copy];
      [v517 addObject:v188];

      goto LABEL_935;
    }
    if (!QP::isSupportedECRLocale(v553, v183))
    {
LABEL_274:
      v510 = 0;
      v515 = 0;
      v518 = 0;
      v508 = 0;
      goto LABEL_275;
    }
    if ((QP::tokenHasArgIdAsTopPredictionOrWithScore(obja, v547, 2, 0.3) & 1) != 0
      || (QP::tokenHasArgIdAsTopPredictionOrWithScore(obja, v547, 3, 0.3) & 1) != 0)
    {
      int HasArgIdAsTopPredictionOrWithScore = 1;
    }
    else
    {
      int HasArgIdAsTopPredictionOrWithScore = QP::tokenHasArgIdAsTopPredictionOrWithScore(obja, v547, 4, 0.3);
    }
    if (*(unsigned char *)(*((void *)v542 + 10) + 60)) {
      int v189 = QP::tokenHasArgIdAsTopPredictionOrWithScore(obja, v547, 6, 0.3);
    }
    else {
      int v189 = 0;
    }
    int v506 = 0;
    if (((HasArgIdAsTopPredictionOrWithScore | v189) & 1) == 0 && v547 == v525 - 1)
    {
      v190 = +[QPEntityResolutionPrefixCache sharedCache];
      int v506 = [v190 hasPreviouslyGroundedPrefixOfToken:ptra];
    }
    uint64_t v191 = [v554 objectForKeyedSubscript:ptra];

    if ((v503 & 1) != 0 || (uint64_t v192 = *((void *)v542 + 10), *(unsigned char *)(v192 + 61)))
    {
      if (v191) {
        int v193 = 1;
      }
      else {
        int v193 = v189;
      }
      if ((v193 | HasArgIdAsTopPredictionOrWithScore | v506) != 1) {
        goto LABEL_274;
      }
      uint64_t v192 = *((void *)v542 + 10);
    }
    else if ((v189 | HasArgIdAsTopPredictionOrWithScore | v506) != 1)
    {
      goto LABEL_274;
    }
    BOOL v194 = *(unsigned char *)(v192 + 60) == 0;
    int v195 = v189 ^ 1;
    if (v194) {
      int v195 = 1;
    }
    if (v195 | HasArgIdAsTopPredictionOrWithScore) {
      uint64_t v196 = v194;
    }
    else {
      uint64_t v196 = 2;
    }
    if (v191)
    {
      v518 = [v554 objectForKeyedSubscript:ptra];
      v510 = 0;
      v515 = 0;
      uint64_t v197 = 0;
      uint64_t v198 = [(__CFDictionary *)v518 count];
    }
    else
    {
      v225 = u2ParserLogger();
      v226 = u2ParserLogger();
      os_signpost_id_t v227 = os_signpost_id_make_with_pointer(v226, ptra);

      if (v227 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v225))
      {
        *(_WORD *)v874 = 0;
        _os_signpost_emit_with_name_impl(&dword_224D85000, v225, OS_SIGNPOST_INTERVAL_BEGIN, v227, "U2Parser.ECR", "", v874, 2u);
      }

      uint64_t v228 = mach_absolute_time();
      v229 = (std::__shared_weak_count *)*((void *)v542 + 11);
      uint64_t v830 = *((void *)v542 + 10);
      v831 = v229;
      if (v229) {
        atomic_fetch_add_explicit(&v229->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      id v829 = 0;
      v230 = QP::visualIdentifiersWithTimeout(ptra, v196, v521, &v830, &v829);
      id v231 = v829;
      if (v831) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v831);
      }
      if (v230)
      {
        uint64_t v232 = [v230 objectForKey:@"visualIdentifier"];
        uint64_t v233 = [v230 objectForKey:@"personNames"];
        v510 = [v230 objectForKey:@"personEmails"];
        v515 = (__CFArray *)v233;
        v518 = (__CFDictionary *)v232;
      }
      else
      {
        v510 = 0;
        v515 = 0;
        v518 = 0;
      }
      unint64_t v247 = QPTimingNanosecondsSinceAbsoluteTime(v228);
      uint64_t v197 = v230;
      v248 = u2ParserLogger();
      v249 = u2ParserLogger();
      os_signpost_id_t v250 = os_signpost_id_make_with_pointer(v249, ptra);

      if (v250 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v248))
      {
        *(_WORD *)v874 = 0;
        _os_signpost_emit_with_name_impl(&dword_224D85000, v248, OS_SIGNPOST_INTERVAL_END, v250, "U2Parser.ECR", "", v874, 2u);
      }

      if (v231)
      {
        v251 = u2ParserLogger();
        if (os_log_type_enabled(v251, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v874 = 134218242;
          *(void *)&v874[4] = v528;
          *(_WORD *)&v874[12] = 2112;
          *(void *)&v874[14] = v231;
          _os_log_error_impl(&dword_224D85000, v251, OS_LOG_TYPE_ERROR, "[QPNLU][qid=%ld] Unable to lookup visual identifiers: %@", v874, 0x16u);
        }

        ++v509;
        if (atomic_fetch_add(QP::sQUECRErrorCount, 1u) == 25)
        {
          v252 = u2ParserLogger();
          if (os_log_type_enabled(v252, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)v874 = 134218240;
            *(void *)&v874[4] = v528;
            *(_WORD *)&v874[12] = 1024;
            *(_DWORD *)&v874[14] = 25;
            _os_log_fault_impl(&dword_224D85000, v252, OS_LOG_TYPE_FAULT, "[QPNLU][qid=%ld] [Recurring Failure] ECR failed %d times", v874, 0x12u);
          }
        }
      }

      ++v512;
      v511 += v247;
      uint64_t v198 = [(__CFDictionary *)v518 count];
    }
    v508 = v197;
    if (!v198 && ![(__CFArray *)v515 count])
    {
      if ((v506 & 1) == 0) {
        goto LABEL_275;
      }
      v259 = u2ParserLogger();
      if (os_log_type_enabled(v259, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v874 = 134218242;
        *(void *)&v874[4] = v528;
        *(_WORD *)&v874[12] = 2112;
        *(void *)&v874[14] = ptra;
        _os_log_debug_impl(&dword_224D85000, v259, OS_LOG_TYPE_DEBUG, "[QPNLU][qid=%ld] Not boosting ARG_PERSON labeling for %@", v874, 0x16u);
      }
      goto LABEL_366;
    }
    [v554 setObject:v518 forKeyedSubscript:ptra];
    v253 = +[QPEntityResolutionPrefixCache sharedCache];
    [v253 cacheGroundedToken:ptra];

    v254 = u2ParserLogger();
    if (os_log_type_enabled(v254, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)v874 = 134217984;
      *(void *)&v874[4] = v528;
      _os_log_debug_impl(&dword_224D85000, v254, OS_LOG_TYPE_DEBUG, "[QPNLU][qid=%ld] Successfully grounded person", v874, 0xCu);
    }

    if (v506)
    {
      [v539 setObject:&unk_26D83EC20 forKeyedSubscript:kQPQUOutputTokenArgIdsKey];
      v255 = [NSString stringWithUTF8String:intentArgLabel()];
      v859 = v255;
      v256 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v859 count:1];
      [v539 setObject:v256 forKeyedSubscript:kQPQUOutputTokenArgLabelsKey];

      [v539 setObject:&unk_26D83EC38 forKeyedSubscript:kQPQUOutputTokenArgScoresKey];
      v257 = [obja argIds];
      v258 = [v257 objectAtIndexedSubscript:v547];
      [v258 intValue];

      v259 = u2ParserLogger();
      char v497 = 1;
      if (os_log_type_enabled(v259, OS_LOG_TYPE_INFO))
      {
        id v260 = [NSString stringWithUTF8String:intentArgLabel()];
        *(_DWORD *)v874 = 134218498;
        *(void *)&v874[4] = v528;
        *(_WORD *)&v874[12] = 2112;
        *(void *)&v874[14] = ptra;
        *(_WORD *)&v874[22] = 2112;
        *(void *)&v874[24] = v260;
        _os_log_impl(&dword_224D85000, v259, OS_LOG_TYPE_INFO, "[QPNLU][qid=%ld] boosting ARG_PERSON labeling for %@ originally labeled %@", v874, 0x20u);

        char v497 = 1;
      }
LABEL_366:
    }
LABEL_275:
    *((void *)v542 + 4) = v511;
    *((_DWORD *)v542 + 12) = v512;
    *((_DWORD *)v542 + 13) = v509;
    *(void *)v874 = 0;
    *(void *)&v874[8] = v874;
    *(void *)&v874[16] = 0x4012000000;
    *(void *)&v874[24] = __Block_byref_object_copy__7;
    *(void *)&v874[32] = __Block_byref_object_dispose__7;
    *(void *)&v874[40] = &unk_224E37267;
    *(void *)&v874[48] = 0;
    *(void *)&v874[56] = 0;
    if (!QP::tokenHasArgIdAsTopPredictionOrWithScore(obja, v547, 8, 0.2)) {
      goto LABEL_370;
    }
    unint64_t v199 = v547;
    if (v547 <= v504 + v505) {
      uint64_t v200 = v504;
    }
    else {
      uint64_t v200 = v547;
    }
    uint64_t v201 = v547 + 1;
    if (v547 + 1 < v525)
    {
      do
      {
        if ((QP::tokenHasArgIdAsTopPredictionOrWithScore(obja, v201, 8, 0.2) & 1) == 0
          && !QP::tokenHasArgIdAsTopPredictionOrWithScore(obja, v201, 0, 0.97))
        {
          break;
        }
        ++v201;
      }
      while (v525 != v201);
      unint64_t v199 = v201 - 1;
    }
    v202 = [obja tokenRanges];
    uint64_t v203 = [v202 objectAtIndexedSubscript:v200];
    uint64_t v204 = [v203 rangeValue];

    uint64_t v205 = [obja tokenRanges];
    v206 = [v205 objectAtIndexedSubscript:v199];
    uint64_t v207 = [v206 rangeValue];
    uint64_t v209 = v208;

    if (v204 != -1)
    {
      uint64_t v210 = *v536;
      if (*v536)
      {
        v828[0] = MEMORY[0x263EF8330];
        v828[1] = 3221225472;
        v828[2] = ___ZN2QP8U2Parser13parseInternalENSt3__110shared_ptrINS_5ParseEEEl_block_invoke;
        v828[3] = &unk_264705BB8;
        v828[6] = v204;
        v828[7] = v209 - v204 + v207;
        v828[5] = v542;
        v828[4] = v874;
        QP::Parse::enumerateParseAttributes(v210, (uint64_t)v828);
      }
      uint64_t v211 = *(CFRange **)(*(void *)&v874[8] + 48);
      if (v211) {
        goto LABEL_337;
      }
      v212 = kQPParseAttributeKeywordKey;
      QP::Lexer::lexemeAtLocation(*((void *)v542 + 12), 0, v866);
      uint64_t v213 = *(void *)v866;
      if (*(void *)v866)
      {
        uint64_t v214 = v209 + v207;
        unint64_t v215 = 1;
        while (1)
        {
          if (*(unsigned __int16 *)(v213 + 88) - 1 <= 3)
          {
            uint64_t v216 = *(void *)(v213 + 72);
            uint64_t v217 = *(void *)(v213 + 80) + v216;
            if (v204 <= v216 && v214 >= v217) {
              break;
            }
            if (v216 <= v204 && v217 >= v214) {
              break;
            }
          }
          QP::Lexer::lexemeAtLocation(*((void *)v542 + 12), v215, &v827);
          long long v220 = v827;
          long long v827 = 0uLL;
          v221 = *(std::__shared_weak_count **)&v866[8];
          *(_OWORD *)v866 = v220;
          if (v221)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v221);
            if (*((void *)&v827 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v827 + 1));
            }
            uint64_t v213 = *(void *)v866;
          }
          else
          {
            uint64_t v213 = v220;
          }
          ++v215;
          if (!v213) {
            goto LABEL_307;
          }
        }
        p_CFRange buf = (CFRange *)(v213 + 72);
        v212 = kQPParseAttributeDateKey;
      }
      else
      {
LABEL_307:
        p_CFRange buf = &buf;
      }
      CFIndex location = p_buf->location;
      CFIndex v235 = p_buf->length;
      v236 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
      uint64_t v825 = *(void *)(*(void *)&v874[8] + 48);
      v826 = v236;
      if (v236) {
        atomic_fetch_add_explicit(&v236->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v237 = *(std::__shared_weak_count **)&v866[8];
      v822[0] = v213;
      v822[1] = *(void *)&v866[8];
      if (*(void *)&v866[8]) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v866[8] + 8), 1uLL, memory_order_relaxed);
      }
      QP::U2Parser::makeAttribute((uint64_t *)v542, ptra, v532, location, v235, v212, (uint64_t)v822, v530, &v823);
      QP::operator+(&v825, (uint64_t *)&v823, &v827);
      long long v238 = v827;
      long long v827 = 0uLL;
      v239 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
      *(_OWORD *)(*(void *)&v874[8] + 48) = v238;
      if (v239)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v239);
        if (*((void *)&v827 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v827 + 1));
        }
      }
      if (v824) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v824);
      }
      if (v237) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v237);
      }
      if (v826) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v826);
      }
      if (*(void *)&v866[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v866[8]);
      }
      uint64_t v211 = *(CFRange **)(*(void *)&v874[8] + 48);
      if (v211)
      {
LABEL_337:
        CFRange v240 = v211[1];
        if (v240 != buf)
        {
          *(void *)&long long v827 = CFStringCreateWithSubstring(alloc, (CFStringRef)*v545, v240);
          v241 = u2ParserLogger();
          if (os_log_type_enabled(v241, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)v866 = 134218242;
            *(void *)&v866[4] = v528;
            *(_WORD *)&v866[12] = 2112;
            *(void *)&v866[14] = v827;
            _os_log_impl(&dword_224D85000, v241, OS_LOG_TYPE_INFO, "[QPNLU][qid=%ld] Grounded date phrase %@", v866, 0x16u);
          }

          if (v199 > v547)
          {
            while (1)
            {
              v242 = [obja tokenRanges];
              v243 = [v242 objectAtIndexedSubscript:v199];
              uint64_t v244 = [v243 rangeValue];
              uint64_t v246 = v245;

              if (v244 + v246 == *(void *)(*(void *)(*(void *)&v874[8] + 48) + 24)
                                + *(void *)(*(void *)(*(void *)&v874[8] + 48) + 16))
                break;
              if ((uint64_t)--v199 <= v547) {
                goto LABEL_368;
              }
            }
            uint64_t v507 = v199;
          }
LABEL_368:
          nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v827, 0);
        }
      }
      char v502 = 1;
LABEL_370:
      uint64_t v261 = *(void *)&v874[8];
      uint64_t v262 = *(void *)(*(void *)&v874[8] + 48);
      if (v262)
      {
        if (*(void *)(v262 + 16) != buf.location || *(void *)(v262 + 24) != buf.length)
        {
LABEL_924:
          std::vector<std::shared_ptr<QP::ParseAttribute>>::push_back[abi:ne180100]((uint64_t *)&v841, (long long *)(v261 + 48));
          v460 = [NSNumber numberWithLong:v532];
          v858 = v460;
          v461 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v858 count:1];
          [v539 setObject:v461 forKeyedSubscript:kQPQUOutputTokenAttributeIndexesKey];

          ++v532;
          goto LABEL_931;
        }
      }
      if (v522 == 13)
      {
        if ([(__CFDictionary *)v518 count])
        {
          v265 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
          uint64_t v820 = *(void *)(*(void *)&v874[8] + 48);
          v821 = v265;
          if (v265) {
            atomic_fetch_add_explicit(&v265->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          QP::U2Parser::makeVisualIdentifierAttribute(v542, buf, v518, v532, &v818);
          QP::operator+(&v820, &v818, v866);
          long long v266 = *(_OWORD *)v866;
          *(void *)&v866[8] = 0;
          *(void *)v866 = 0;
          v267 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
          *(_OWORD *)(*(void *)&v874[8] + 48) = v266;
          if (v267)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v267);
            if (*(void *)&v866[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v866[8]);
            }
          }
          if (v819) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v819);
          }
          v268 = v821;
          if (v821) {
            goto LABEL_463;
          }
        }
        else if ((QP::tokenHasArgIdWithScore(obja, v547, 2) & 1) != 0 {
               || (QP::tokenHasArgIdWithScore(obja, v547, 3) & 1) != 0
        }
               || QP::tokenHasArgIdWithScore(obja, v547, 4))
        {
          v269 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
          uint64_t v816 = *(void *)(*(void *)&v874[8] + 48);
          v817 = v269;
          if (v269) {
            atomic_fetch_add_explicit(&v269->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          QP::U2Parser::makeIdentifierAttribute(v542, buf, kQPParseAttributeTaggedPersonKey, 0, 0, v532, &v814);
          QP::operator+(&v816, &v814, v866);
          long long v270 = *(_OWORD *)v866;
          *(void *)&v866[8] = 0;
          *(void *)v866 = 0;
          v271 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
          *(_OWORD *)(*(void *)&v874[8] + 48) = v270;
          if (v271)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v271);
            if (*(void *)&v866[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v866[8]);
            }
          }
          if (v815) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v815);
          }
          v268 = v817;
          if (v817) {
            goto LABEL_463;
          }
        }
      }
      else
      {
        if (v530 == 4)
        {
          char v264 = QP::tokenHasArgIdAsTopPredictionOrWithScore(obja, v547, 4, 0.3);
LABEL_403:
          if ((v264 & 1) == 0)
          {
            uint64_t v261 = *(void *)&v874[8];
            uint64_t v262 = *(void *)(*(void *)&v874[8] + 48);
            goto LABEL_405;
          }
        }
        else
        {
          if (v530 == 3)
          {
            char v264 = QP::tokenHasArgIdAsTopPredictionOrWithScore(obja, v547, 3, 0.3);
            goto LABEL_403;
          }
LABEL_405:
          v272 = *(std::__shared_weak_count **)(v261 + 56);
          uint64_t v812 = v262;
          v813 = v272;
          if (v272) {
            atomic_fetch_add_explicit(&v272->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          QP::U2Parser::makeVisualIdentifierAttribute(v542, buf, v518, v532, &v810);
          QP::operator+(&v812, &v810, v866);
          long long v273 = *(_OWORD *)v866;
          *(void *)&v866[8] = 0;
          *(void *)v866 = 0;
          v274 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
          *(_OWORD *)(*(void *)&v874[8] + 48) = v273;
          if (v274)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v274);
            if (*(void *)&v866[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v866[8]);
            }
          }
          if (v811) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v811);
          }
          if (v813) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v813);
          }
        }
        if (QP::tokenHasArgIdAsTopPredictionOrWithScore(obja, v547, 2, 0.3))
        {
          v275 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
          uint64_t v808 = *(void *)(*(void *)&v874[8] + 48);
          v809 = v275;
          if (v275) {
            atomic_fetch_add_explicit(&v275->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          QP::U2Parser::makeIdentifierAttribute(v542, buf, kQPParseAttributePersonKey, v515, 0, v532, &v806);
          QP::operator+(&v808, &v806, v866);
          long long v276 = *(_OWORD *)v866;
          *(void *)&v866[8] = 0;
          *(void *)v866 = 0;
          v277 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
          *(_OWORD *)(*(void *)&v874[8] + 48) = v276;
          if (v277)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v277);
            if (*(void *)&v866[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v866[8]);
            }
          }
          if (v807) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v807);
          }
          if (v809) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v809);
          }
        }
        if (QP::tokenHasArgIdAsTopPredictionOrWithScore(obja, v547, 3, 0.3))
        {
          v278 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
          uint64_t v804 = *(void *)(*(void *)&v874[8] + 48);
          v805 = v278;
          if (v278) {
            atomic_fetch_add_explicit(&v278->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          QP::U2Parser::makeIdentifierAttribute(v542, buf, kQPParseAttributeSenderKey, v515, 0, v532, &v802);
          QP::operator+(&v804, &v802, v866);
          long long v279 = *(_OWORD *)v866;
          *(void *)&v866[8] = 0;
          *(void *)v866 = 0;
          v280 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
          *(_OWORD *)(*(void *)&v874[8] + 48) = v279;
          if (v280)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v280);
            if (*(void *)&v866[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v866[8]);
            }
          }
          if (v803) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v803);
          }
          if (v805) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v805);
          }
          if (!v498)
          {
            v281 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
            uint64_t v800 = *(void *)(*(void *)&v874[8] + 48);
            v801 = v281;
            if (v281) {
              atomic_fetch_add_explicit(&v281->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            QP::U2Parser::makeIdentifierAttribute(v542, buf, kQPParseAttributeSenderHandleKey, 0, v510, v532, &v798);
            QP::operator+(&v800, &v798, v866);
            long long v282 = *(_OWORD *)v866;
            *(void *)&v866[8] = 0;
            *(void *)v866 = 0;
            v283 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
            *(_OWORD *)(*(void *)&v874[8] + 48) = v282;
            if (v283)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](v283);
              if (*(void *)&v866[8]) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v866[8]);
              }
            }
            if (v799) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v799);
            }
            if (v801) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v801);
            }
          }
        }
        if (QP::tokenHasArgIdAsTopPredictionOrWithScore(obja, v547, 4, 0.3))
        {
          v284 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
          uint64_t v796 = *(void *)(*(void *)&v874[8] + 48);
          v797 = v284;
          if (v284) {
            atomic_fetch_add_explicit(&v284->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          QP::U2Parser::makeIdentifierAttribute(v542, buf, kQPParseAttributeRecipientKey, v515, 0, v532, &v794);
          QP::operator+(&v796, &v794, v866);
          long long v285 = *(_OWORD *)v866;
          *(void *)&v866[8] = 0;
          *(void *)v866 = 0;
          v286 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
          *(_OWORD *)(*(void *)&v874[8] + 48) = v285;
          if (v286)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v286);
            if (*(void *)&v866[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v866[8]);
            }
          }
          if (v795) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v795);
          }
          if (v797) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v797);
          }
          if (!v498)
          {
            v287 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
            uint64_t v792 = *(void *)(*(void *)&v874[8] + 48);
            v793 = v287;
            if (v287) {
              atomic_fetch_add_explicit(&v287->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            QP::U2Parser::makeIdentifierAttribute(v542, buf, kQPParseAttributeRecipientHandleKey, 0, v510, v532, &v790);
            QP::operator+(&v792, &v790, v866);
            long long v288 = *(_OWORD *)v866;
            *(void *)&v866[8] = 0;
            *(void *)v866 = 0;
            v289 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
            *(_OWORD *)(*(void *)&v874[8] + 48) = v288;
            if (v289)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](v289);
              if (*(void *)&v866[8]) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v866[8]);
              }
            }
            if (v791) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v791);
            }
            v268 = v793;
            if (v793) {
LABEL_463:
            }
              std::__shared_weak_count::__release_shared[abi:ne180100](v268);
          }
        }
      }
      if (QP::tokenHasArgIdAsTopPredictionOrWithScore(obja, v547, 1, 0.3))
      {
        v290 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
        uint64_t v788 = *(void *)(*(void *)&v874[8] + 48);
        v789 = v290;
        if (v290) {
          atomic_fetch_add_explicit(&v290->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v785[1] = 0;
        v785[0] = 0;
        QP::U2Parser::makeAttribute((uint64_t *)v542, ptra, v532, buf.location, buf.length, kQPParseAttributeKindKey, (uint64_t)v785, v530, &v786);
        QP::operator+(&v788, (uint64_t *)&v786, v866);
        long long v291 = *(_OWORD *)v866;
        *(void *)&v866[8] = 0;
        *(void *)v866 = 0;
        v292 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
        *(_OWORD *)(*(void *)&v874[8] + 48) = v291;
        if (v292)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v292);
          if (*(void *)&v866[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v866[8]);
          }
        }
        if (v787) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v787);
        }
        if (v789) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v789);
        }
      }
      if (QP::tokenHasArgIdAsTopPredictionOrWithScore(obja, v547, 21, 0.9))
      {
        v293 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
        uint64_t v783 = *(void *)(*(void *)&v874[8] + 48);
        v784 = v293;
        if (v293) {
          atomic_fetch_add_explicit(&v293->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v780[1] = 0;
        v780[0] = 0;
        QP::U2Parser::makeAttribute((uint64_t *)v542, ptra, v532, buf.location, buf.length, kQPParseAttributeFavoritedKey, (uint64_t)v780, v530, &v781);
        QP::operator+(&v783, (uint64_t *)&v781, v866);
        long long v294 = *(_OWORD *)v866;
        *(void *)&v866[8] = 0;
        *(void *)v866 = 0;
        v295 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
        *(_OWORD *)(*(void *)&v874[8] + 48) = v294;
        if (v295)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v295);
          if (*(void *)&v866[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v866[8]);
          }
        }
        if (v782) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v782);
        }
        if (v784) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v784);
        }
      }
      if (QP::tokenHasArgIdAsTopPredictionOrWithScore(obja, v547, 16, 0.8))
      {
        if (v516)
        {
          if (v516 != 5)
          {
            if (v516 != 2) {
              goto LABEL_506;
            }
            v296 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
            uint64_t v778 = *(void *)(*(void *)&v874[8] + 48);
            v779 = v296;
            if (v296) {
              atomic_fetch_add_explicit(&v296->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            v775[1] = 0;
            v775[0] = 0;
            QP::U2Parser::makeAttribute((uint64_t *)v542, ptra, v532, buf.location, buf.length, kQPParseAttributeFlaggedKey, (uint64_t)v775, v530, &v776);
            QP::operator+(&v778, (uint64_t *)&v776, v866);
            long long v297 = *(_OWORD *)v866;
            *(void *)&v866[8] = 0;
            *(void *)v866 = 0;
            v298 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
            *(_OWORD *)(*(void *)&v874[8] + 48) = v297;
            if (v298)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](v298);
              if (*(void *)&v866[8]) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v866[8]);
              }
            }
            if (v777) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v777);
            }
            v299 = v779;
            if (!v779) {
              goto LABEL_506;
            }
LABEL_505:
            std::__shared_weak_count::__release_shared[abi:ne180100](v299);
            goto LABEL_506;
          }
          v300 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
          uint64_t v773 = *(void *)(*(void *)&v874[8] + 48);
          v774 = v300;
          if (v300) {
            atomic_fetch_add_explicit(&v300->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          v770[1] = 0;
          v770[0] = 0;
          QP::U2Parser::makeAttribute((uint64_t *)v542, ptra, v532, buf.location, buf.length, kQPParseAttributeTaggedKey, (uint64_t)v770, v530, &v771);
          QP::operator+(&v773, (uint64_t *)&v771, v866);
          long long v301 = *(_OWORD *)v866;
          *(void *)&v866[8] = 0;
          *(void *)v866 = 0;
          v302 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
          *(_OWORD *)(*(void *)&v874[8] + 48) = v301;
          if (v302)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v302);
            if (*(void *)&v866[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v866[8]);
            }
          }
          if (v772) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v772);
          }
          v299 = v774;
          if (v774) {
            goto LABEL_505;
          }
        }
        else
        {
          v464 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
          uint64_t v768 = *(void *)(*(void *)&v874[8] + 48);
          v769 = v464;
          if (v464) {
            atomic_fetch_add_explicit(&v464->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          v765[1] = 0;
          v765[0] = 0;
          QP::U2Parser::makeAttribute((uint64_t *)v542, ptra, v532, buf.location, buf.length, kQPParseAttributeFlaggedKey, (uint64_t)v765, v530, &v766);
          QP::operator+(&v768, (uint64_t *)&v766, v866);
          long long v465 = *(_OWORD *)v866;
          *(void *)&v866[8] = 0;
          *(void *)v866 = 0;
          v466 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
          *(_OWORD *)(*(void *)&v874[8] + 48) = v465;
          if (v466)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v466);
            if (*(void *)&v866[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v866[8]);
            }
          }
          if (v767) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v767);
          }
          if (v769) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v769);
          }
          v467 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
          uint64_t v763 = *(void *)(*(void *)&v874[8] + 48);
          v764 = v467;
          if (v467) {
            atomic_fetch_add_explicit(&v467->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          v760[1] = 0;
          v760[0] = 0;
          QP::U2Parser::makeAttribute((uint64_t *)v542, ptra, v532, buf.location, buf.length, kQPParseAttributeTaggedKey, (uint64_t)v760, v530, &v761);
          QP::operator+(&v763, (uint64_t *)&v761, v866);
          long long v468 = *(_OWORD *)v866;
          *(void *)&v866[8] = 0;
          *(void *)v866 = 0;
          v469 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
          *(_OWORD *)(*(void *)&v874[8] + 48) = v468;
          if (v469)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v469);
            if (*(void *)&v866[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v866[8]);
            }
          }
          if (v762) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v762);
          }
          v299 = v764;
          if (v764) {
            goto LABEL_505;
          }
        }
      }
LABEL_506:
      if (QP::tokenHasArgIdAsTopPredictionOrWithScore(obja, v547, 17, 0.8))
      {
        if (v516 == 2)
        {
          v303 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
          uint64_t v758 = *(void *)(*(void *)&v874[8] + 48);
          v759 = v303;
          if (v303) {
            atomic_fetch_add_explicit(&v303->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          v755[1] = 0;
          v755[0] = 0;
          QP::U2Parser::makeAttribute((uint64_t *)v542, ptra, v532, buf.location, buf.length, kQPParseAttributeFlaggedKey, (uint64_t)v755, v530, &v756);
          QP::operator+(&v758, (uint64_t *)&v756, v866);
          long long v304 = *(_OWORD *)v866;
          *(void *)&v866[8] = 0;
          *(void *)v866 = 0;
          v305 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
          *(_OWORD *)(*(void *)&v874[8] + 48) = v304;
          if (v305)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v305);
            if (*(void *)&v866[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v866[8]);
            }
          }
          if (v757) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v757);
          }
          v306 = v759;
          if (v759) {
            goto LABEL_516;
          }
        }
        else
        {
          v399 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
          uint64_t v753 = *(void *)(*(void *)&v874[8] + 48);
          v754 = v399;
          if (v399) {
            atomic_fetch_add_explicit(&v399->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          v750[1] = 0;
          v750[0] = 0;
          QP::U2Parser::makeAttribute((uint64_t *)v542, ptra, v532, buf.location, buf.length, kQPParseAttributeTaggedKey, (uint64_t)v750, v530, &v751);
          QP::operator+(&v753, (uint64_t *)&v751, v866);
          long long v400 = *(_OWORD *)v866;
          *(void *)&v866[8] = 0;
          *(void *)v866 = 0;
          v401 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
          *(_OWORD *)(*(void *)&v874[8] + 48) = v400;
          if (v401)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v401);
            if (*(void *)&v866[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v866[8]);
            }
          }
          if (v752) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v752);
          }
          v306 = v754;
          if (v754) {
LABEL_516:
          }
            std::__shared_weak_count::__release_shared[abi:ne180100](v306);
        }
      }
      if (QP::tokenHasArgIdAsTopPredictionOrWithScore(obja, v547, 44, 0.8))
      {
        v307 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
        uint64_t v748 = *(void *)(*(void *)&v874[8] + 48);
        v749 = v307;
        if (v307) {
          atomic_fetch_add_explicit(&v307->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v745[1] = 0;
        v745[0] = 0;
        QP::U2Parser::makeAttribute((uint64_t *)v542, ptra, v532, buf.location, buf.length, kQPParseAttributeFlagColorKey, (uint64_t)v745, v530, &v746);
        QP::operator+(&v748, (uint64_t *)&v746, v866);
        long long v308 = *(_OWORD *)v866;
        *(void *)&v866[8] = 0;
        *(void *)v866 = 0;
        v309 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
        *(_OWORD *)(*(void *)&v874[8] + 48) = v308;
        if (v309)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v309);
          if (*(void *)&v866[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v866[8]);
          }
        }
        if (v747) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v747);
        }
        if (v749) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v749);
        }
      }
      if (QP::tokenHasArgIdAsTopPredictionOrWithScore(obja, v547, 43, 0.8))
      {
        v310 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
        uint64_t v743 = *(void *)(*(void *)&v874[8] + 48);
        v744 = v310;
        if (v310) {
          atomic_fetch_add_explicit(&v310->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v740[1] = 0;
        v740[0] = 0;
        QP::U2Parser::makeAttribute((uint64_t *)v542, ptra, v532, buf.location, buf.length, kQPParseAttributeTagColorKey, (uint64_t)v740, v530, &v741);
        QP::operator+(&v743, (uint64_t *)&v741, v866);
        long long v311 = *(_OWORD *)v866;
        *(void *)&v866[8] = 0;
        *(void *)v866 = 0;
        v312 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
        *(_OWORD *)(*(void *)&v874[8] + 48) = v311;
        if (v312)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v312);
          if (*(void *)&v866[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v866[8]);
          }
        }
        if (v742) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v742);
        }
        if (v744) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v744);
        }
      }
      if (QP::tokenHasArgIdAsTopPredictionOrWithScore(obja, v547, 24, 0.8))
      {
        v313 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
        uint64_t v738 = *(void *)(*(void *)&v874[8] + 48);
        v739 = v313;
        if (v313) {
          atomic_fetch_add_explicit(&v313->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v735[1] = 0;
        v735[0] = 0;
        QP::U2Parser::makeAttribute((uint64_t *)v542, ptra, v532, buf.location, buf.length, kQPParseAttributeRepliedKey, (uint64_t)v735, v530, &v736);
        QP::operator+(&v738, (uint64_t *)&v736, v866);
        long long v314 = *(_OWORD *)v866;
        *(void *)&v866[8] = 0;
        *(void *)v866 = 0;
        v315 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
        *(_OWORD *)(*(void *)&v874[8] + 48) = v314;
        if (v315)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v315);
          if (*(void *)&v866[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v866[8]);
          }
        }
        if (v737) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v737);
        }
        if (v739) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v739);
        }
      }
      if (QP::tokenHasArgIdAsTopPredictionOrWithScore(obja, v547, 28, 0.6))
      {
        v316 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
        uint64_t v733 = *(void *)(*(void *)&v874[8] + 48);
        v734 = v316;
        if (v316) {
          atomic_fetch_add_explicit(&v316->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v730[1] = 0;
        v730[0] = 0;
        QP::U2Parser::makeAttribute((uint64_t *)v542, ptra, v532, buf.location, buf.length, kQPParseAttributeReadKey, (uint64_t)v730, v530, &v731);
        QP::operator+(&v733, (uint64_t *)&v731, v866);
        long long v317 = *(_OWORD *)v866;
        *(void *)&v866[8] = 0;
        *(void *)v866 = 0;
        v318 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
        *(_OWORD *)(*(void *)&v874[8] + 48) = v317;
        if (v318)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v318);
          if (*(void *)&v866[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v866[8]);
          }
        }
        if (v732) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v732);
        }
        if (v734) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v734);
        }
        v319 = (char *)intentArgLabel();
        std::string::basic_string[abi:ne180100]<0>(__p, v319);
        QP::U2Parser::addArgActions((uint64_t)v542, __p);
        if (v729 < 0) {
          operator delete(__p[0]);
        }
      }
      if (QP::tokenHasArgIdAsTopPredictionOrWithScore(obja, v547, 29, 0.6))
      {
        v320 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
        uint64_t v726 = *(void *)(*(void *)&v874[8] + 48);
        v727 = v320;
        if (v320) {
          atomic_fetch_add_explicit(&v320->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v723[1] = 0;
        v723[0] = 0;
        QP::U2Parser::makeAttribute((uint64_t *)v542, ptra, v532, buf.location, buf.length, kQPParseAttributeUnreadKey, (uint64_t)v723, v530, &v724);
        QP::operator+(&v726, (uint64_t *)&v724, v866);
        long long v321 = *(_OWORD *)v866;
        *(void *)&v866[8] = 0;
        *(void *)v866 = 0;
        v322 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
        *(_OWORD *)(*(void *)&v874[8] + 48) = v321;
        if (v322)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v322);
          if (*(void *)&v866[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v866[8]);
          }
        }
        if (v725) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v725);
        }
        if (v727) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v727);
        }
      }
      if (QP::tokenHasArgIdAsTopPredictionOrWithScore(obja, v547, 22, 0.8))
      {
        v323 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
        uint64_t v721 = *(void *)(*(void *)&v874[8] + 48);
        v722 = v323;
        if (v323) {
          atomic_fetch_add_explicit(&v323->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v718[1] = 0;
        v718[0] = 0;
        QP::U2Parser::makeAttribute((uint64_t *)v542, ptra, v532, buf.location, buf.length, kQPParseAttributeSentKey, (uint64_t)v718, v530, &v719);
        QP::operator+(&v721, (uint64_t *)&v719, v866);
        long long v324 = *(_OWORD *)v866;
        *(void *)&v866[8] = 0;
        *(void *)v866 = 0;
        v325 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
        *(_OWORD *)(*(void *)&v874[8] + 48) = v324;
        if (v325)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v325);
          if (*(void *)&v866[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v866[8]);
          }
        }
        if (v720) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v720);
        }
        if (v722) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v722);
        }
        v326 = (char *)intentArgLabel();
        std::string::basic_string[abi:ne180100]<0>(v716, v326);
        QP::U2Parser::addArgActions((uint64_t)v542, v716);
        if (v717 < 0) {
          operator delete(v716[0]);
        }
      }
      if (QP::tokenHasArgIdAsTopPredictionOrWithScore(obja, v547, 36, 0.8))
      {
        v327 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
        uint64_t v714 = *(void *)(*(void *)&v874[8] + 48);
        v715 = v327;
        if (v327) {
          atomic_fetch_add_explicit(&v327->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v711[1] = 0;
        v711[0] = 0;
        QP::U2Parser::makeAttribute((uint64_t *)v542, ptra, v532, buf.location, buf.length, kQPParseAttributeSharedKey, (uint64_t)v711, v530, &v712);
        QP::operator+(&v714, (uint64_t *)&v712, v866);
        long long v328 = *(_OWORD *)v866;
        *(void *)&v866[8] = 0;
        *(void *)v866 = 0;
        v329 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
        *(_OWORD *)(*(void *)&v874[8] + 48) = v328;
        if (v329)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v329);
          if (*(void *)&v866[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v866[8]);
          }
        }
        if (v713) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v713);
        }
        if (v715) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v715);
        }
      }
      if (QP::tokenHasArgIdAsTopPredictionOrWithScore(obja, v547, 23, 0.8))
      {
        v330 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
        uint64_t v709 = *(void *)(*(void *)&v874[8] + 48);
        v710 = v330;
        if (v330) {
          atomic_fetch_add_explicit(&v330->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v706[1] = 0;
        v706[0] = 0;
        QP::U2Parser::makeAttribute((uint64_t *)v542, ptra, v532, buf.location, buf.length, kQPParseAttributeReceivedKey, (uint64_t)v706, v530, &v707);
        QP::operator+(&v709, (uint64_t *)&v707, v866);
        long long v331 = *(_OWORD *)v866;
        *(void *)&v866[8] = 0;
        *(void *)v866 = 0;
        v332 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
        *(_OWORD *)(*(void *)&v874[8] + 48) = v331;
        if (v332)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v332);
          if (*(void *)&v866[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v866[8]);
          }
        }
        if (v708) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v708);
        }
        if (v710) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v710);
        }
        v333 = (char *)intentArgLabel();
        std::string::basic_string[abi:ne180100]<0>(v704, v333);
        QP::U2Parser::addArgActions((uint64_t)v542, v704);
        if (v705 < 0) {
          operator delete(v704[0]);
        }
      }
      if (QP::tokenHasArgIdAsTopPredictionOrWithScore(obja, v547, 18, 0.8))
      {
        v334 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
        uint64_t v702 = *(void *)(*(void *)&v874[8] + 48);
        v703 = v334;
        if (v334) {
          atomic_fetch_add_explicit(&v334->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v699[1] = 0;
        v699[0] = 0;
        QP::U2Parser::makeAttribute((uint64_t *)v542, ptra, v532, buf.location, buf.length, kQPParseAttributeAttachmentKey, (uint64_t)v699, v530, &v700);
        QP::operator+(&v702, (uint64_t *)&v700, v866);
        long long v335 = *(_OWORD *)v866;
        *(void *)&v866[8] = 0;
        *(void *)v866 = 0;
        v336 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
        *(_OWORD *)(*(void *)&v874[8] + 48) = v335;
        if (v336)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v336);
          if (*(void *)&v866[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v866[8]);
          }
        }
        if (v701) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v701);
        }
        if (v703) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v703);
        }
      }
      if (QP::tokenHasArgIdAsTopPredictionOrWithScore(obja, v547, 19, 0.8))
      {
        v337 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
        uint64_t v697 = *(void *)(*(void *)&v874[8] + 48);
        v698 = v337;
        if (v337) {
          atomic_fetch_add_explicit(&v337->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v694[1] = 0;
        v694[0] = 0;
        QP::U2Parser::makeAttribute((uint64_t *)v542, ptra, v532, buf.location, buf.length, kQPParseAttributeAttachedKindKey, (uint64_t)v694, v530, &v695);
        QP::operator+(&v697, (uint64_t *)&v695, v866);
        long long v338 = *(_OWORD *)v866;
        *(void *)&v866[8] = 0;
        *(void *)v866 = 0;
        v339 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
        *(_OWORD *)(*(void *)&v874[8] + 48) = v338;
        if (v339)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v339);
          if (*(void *)&v866[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v866[8]);
          }
        }
        if (v696) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v696);
        }
        if (v698) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v698);
        }
      }
      if (QP::tokenHasArgIdAsTopPredictionOrWithScore(obja, v547, 20, 0.8))
      {
        v340 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
        uint64_t v692 = *(void *)(*(void *)&v874[8] + 48);
        v693 = v340;
        if (v340) {
          atomic_fetch_add_explicit(&v340->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v689[1] = 0;
        v689[0] = 0;
        QP::U2Parser::makeAttribute((uint64_t *)v542, ptra, v532, buf.location, buf.length, kQPParseAttributeAttachedNameKey, (uint64_t)v689, v530, &v690);
        QP::operator+(&v692, (uint64_t *)&v690, v866);
        long long v341 = *(_OWORD *)v866;
        *(void *)&v866[8] = 0;
        *(void *)v866 = 0;
        v342 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
        *(_OWORD *)(*(void *)&v874[8] + 48) = v341;
        if (v342)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v342);
          if (*(void *)&v866[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v866[8]);
          }
        }
        if (v691) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v691);
        }
        if (v693) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v693);
        }
      }
      if (QP::tokenHasArgIdAsTopPredictionOrWithScore(obja, v547, 37, 0.6))
      {
        uint64_t v343 = *v536;
        if (*v536)
        {
          v687[0] = MEMORY[0x263EF8330];
          v687[1] = 3221225472;
          v687[2] = ___ZN2QP8U2Parser13parseInternalENSt3__110shared_ptrINS_5ParseEEEl_block_invoke_204;
          v687[3] = &unk_264705BB8;
          CFRange v688 = buf;
          v687[5] = v542;
          v687[4] = v874;
          QP::Parse::enumerateParseAttributes(v343, (uint64_t)v687);
        }
        if (!*(void *)(*(void *)&v874[8] + 48))
        {
          v344 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
          uint64_t v685 = 0;
          v686 = v344;
          if (v344) {
            atomic_fetch_add_explicit(&v344->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          v682[1] = 0;
          v682[0] = 0;
          QP::U2Parser::makeAttribute((uint64_t *)v542, ptra, v532, buf.location, buf.length, kQPParseAttributeTransportActionKey, (uint64_t)v682, v530, &v683);
          QP::operator+(&v685, (uint64_t *)&v683, v866);
          long long v345 = *(_OWORD *)v866;
          *(void *)&v866[8] = 0;
          *(void *)v866 = 0;
          v346 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
          *(_OWORD *)(*(void *)&v874[8] + 48) = v345;
          if (v346)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v346);
            if (*(void *)&v866[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v866[8]);
            }
          }
          if (v684) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v684);
          }
          if (v686) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v686);
          }
        }
      }
      if (QP::tokenHasArgIdAsTopPredictionOrWithScore(obja, v547, 38, 0.6))
      {
        v347 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
        uint64_t v680 = *(void *)(*(void *)&v874[8] + 48);
        v681 = v347;
        if (v347) {
          atomic_fetch_add_explicit(&v347->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v677[1] = 0;
        v677[0] = 0;
        QP::U2Parser::makeAttribute((uint64_t *)v542, ptra, v532, buf.location, buf.length, kQPParseAttributePrintedActionKey, (uint64_t)v677, v530, &v678);
        QP::operator+(&v680, (uint64_t *)&v678, v866);
        long long v348 = *(_OWORD *)v866;
        *(void *)&v866[8] = 0;
        *(void *)v866 = 0;
        v349 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
        *(_OWORD *)(*(void *)&v874[8] + 48) = v348;
        if (v349)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v349);
          if (*(void *)&v866[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v866[8]);
          }
        }
        if (v679) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v679);
        }
        if (v681) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v681);
        }
        v350 = (char *)intentArgLabel();
        std::string::basic_string[abi:ne180100]<0>(v675, v350);
        QP::U2Parser::addArgActions((uint64_t)v542, v675);
        if (v676 < 0) {
          operator delete(v675[0]);
        }
      }
      if (QP::tokenHasArgIdAsTopPredictionOrWithScore(obja, v547, 35, 0.6))
      {
        v351 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
        uint64_t v673 = *(void *)(*(void *)&v874[8] + 48);
        v674 = v351;
        if (v351) {
          atomic_fetch_add_explicit(&v351->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v670[1] = 0;
        v670[0] = 0;
        QP::U2Parser::makeAttribute((uint64_t *)v542, ptra, v532, buf.location, buf.length, kQPParseAttributeModifiedActionKey, (uint64_t)v670, v530, &v671);
        QP::operator+(&v673, (uint64_t *)&v671, v866);
        long long v352 = *(_OWORD *)v866;
        *(void *)&v866[8] = 0;
        *(void *)v866 = 0;
        v353 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
        *(_OWORD *)(*(void *)&v874[8] + 48) = v352;
        if (v353)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v353);
          if (*(void *)&v866[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v866[8]);
          }
        }
        if (v672) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v672);
        }
        if (v674) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v674);
        }
        v354 = (char *)intentArgLabel();
        std::string::basic_string[abi:ne180100]<0>(v668, v354);
        QP::U2Parser::addArgActions((uint64_t)v542, v668);
        if (v669 < 0) {
          operator delete(v668[0]);
        }
      }
      if (QP::tokenHasArgIdAsTopPredictionOrWithScore(obja, v547, 32, 0.6))
      {
        v355 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
        uint64_t v666 = *(void *)(*(void *)&v874[8] + 48);
        v667 = v355;
        if (v355) {
          atomic_fetch_add_explicit(&v355->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v663[1] = 0;
        v663[0] = 0;
        QP::U2Parser::makeAttribute((uint64_t *)v542, ptra, v532, buf.location, buf.length, kQPParseAttributeCreatedActionKey, (uint64_t)v663, v530, &v664);
        QP::operator+(&v666, (uint64_t *)&v664, v866);
        long long v356 = *(_OWORD *)v866;
        *(void *)&v866[8] = 0;
        *(void *)v866 = 0;
        v357 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
        *(_OWORD *)(*(void *)&v874[8] + 48) = v356;
        if (v357)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v357);
          if (*(void *)&v866[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v866[8]);
          }
        }
        if (v665) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v665);
        }
        if (v667) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v667);
        }
        v358 = (char *)intentArgLabel();
        std::string::basic_string[abi:ne180100]<0>(v661, v358);
        QP::U2Parser::addArgActions((uint64_t)v542, v661);
        if (v662 < 0) {
          operator delete(v661[0]);
        }
      }
      if (QP::tokenHasArgIdAsTopPredictionOrWithScore(obja, v547, 58, 0.6))
      {
        v359 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
        uint64_t v659 = *(void *)(*(void *)&v874[8] + 48);
        v660 = v359;
        if (v359) {
          atomic_fetch_add_explicit(&v359->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v656[1] = 0;
        v656[0] = 0;
        QP::U2Parser::makeAttribute((uint64_t *)v542, ptra, v532, buf.location, buf.length, kQPParseAttributeFlightActionKey, (uint64_t)v656, v530, &v657);
        QP::operator+(&v659, (uint64_t *)&v657, v866);
        long long v360 = *(_OWORD *)v866;
        *(void *)&v866[8] = 0;
        *(void *)v866 = 0;
        v361 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
        *(_OWORD *)(*(void *)&v874[8] + 48) = v360;
        if (v361)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v361);
          if (*(void *)&v866[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v866[8]);
          }
        }
        if (v658) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v658);
        }
        if (v660) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v660);
        }
      }
      if ((QP::tokenHasArgIdAsTopPredictionOrWithScore(obja, v547, 62, 0.6) & 1) != 0
        || (QP::tokenHasArgIdAsTopPredictionOrWithScore(obja, v547, 54, 0.6) & 1) != 0
        || QP::tokenHasArgIdAsTopPredictionOrWithScore(obja, v547, 55, 0.6))
      {
        v362 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
        uint64_t v654 = *(void *)(*(void *)&v874[8] + 48);
        v655 = v362;
        if (v362) {
          atomic_fetch_add_explicit(&v362->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v651[1] = 0;
        v651[0] = 0;
        QP::U2Parser::makeAttribute((uint64_t *)v542, ptra, v532, buf.location, buf.length, kQPParseAttributeFlightArrivalLocationKey, (uint64_t)v651, v530, &v652);
        QP::operator+(&v654, (uint64_t *)&v652, v866);
        long long v363 = *(_OWORD *)v866;
        *(void *)&v866[8] = 0;
        *(void *)v866 = 0;
        v364 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
        *(_OWORD *)(*(void *)&v874[8] + 48) = v363;
        if (v364)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v364);
          if (*(void *)&v866[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v866[8]);
          }
        }
        if (v653) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v653);
        }
        if (v655) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v655);
        }
      }
      if ((QP::tokenHasArgIdAsTopPredictionOrWithScore(obja, v547, 61, 0.6) & 1) != 0
        || (QP::tokenHasArgIdAsTopPredictionOrWithScore(obja, v547, 56, 0.6) & 1) != 0
        || QP::tokenHasArgIdAsTopPredictionOrWithScore(obja, v547, 57, 0.6))
      {
        v365 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
        uint64_t v649 = *(void *)(*(void *)&v874[8] + 48);
        v650 = v365;
        if (v365) {
          atomic_fetch_add_explicit(&v365->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v646[1] = 0;
        v646[0] = 0;
        QP::U2Parser::makeAttribute((uint64_t *)v542, ptra, v532, buf.location, buf.length, kQPParseAttributeFlightDepartureLocationKey, (uint64_t)v646, v530, &v647);
        QP::operator+(&v649, (uint64_t *)&v647, v866);
        long long v366 = *(_OWORD *)v866;
        *(void *)&v866[8] = 0;
        *(void *)v866 = 0;
        v367 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
        *(_OWORD *)(*(void *)&v874[8] + 48) = v366;
        if (v367)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v367);
          if (*(void *)&v866[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v866[8]);
          }
        }
        if (v648) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v648);
        }
        if (v650) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v650);
        }
      }
      if ((QP::tokenHasArgIdAsTopPredictionOrWithScore(obja, v547, 59, 0.6) & 1) != 0
        || QP::tokenHasArgIdAsTopPredictionOrWithScore(obja, v547, 60, 0.6))
      {
        v368 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
        uint64_t v644 = *(void *)(*(void *)&v874[8] + 48);
        v645 = v368;
        if (v368) {
          atomic_fetch_add_explicit(&v368->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v641[1] = 0;
        v641[0] = 0;
        QP::U2Parser::makeAttribute((uint64_t *)v542, ptra, v532, buf.location, buf.length, kQPParseAttributeFlightCarrierKey, (uint64_t)v641, v530, &v642);
        QP::operator+(&v644, (uint64_t *)&v642, v866);
        long long v369 = *(_OWORD *)v866;
        *(void *)&v866[8] = 0;
        *(void *)v866 = 0;
        v370 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
        *(_OWORD *)(*(void *)&v874[8] + 48) = v369;
        if (v370)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v370);
          if (*(void *)&v866[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v866[8]);
          }
        }
        if (v643) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v643);
        }
        if (v645) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v645);
        }
      }
      if (QP::tokenHasArgIdAsTopPredictionOrWithScore(obja, v547, 53, 0.6))
      {
        v371 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
        uint64_t v639 = *(void *)(*(void *)&v874[8] + 48);
        v640 = v371;
        if (v371) {
          atomic_fetch_add_explicit(&v371->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v636[1] = 0;
        v636[0] = 0;
        QP::U2Parser::makeAttribute((uint64_t *)v542, ptra, v532, buf.location, buf.length, kQPParseAttributeFlightLocationKey, (uint64_t)v636, v530, &v637);
        QP::operator+(&v639, (uint64_t *)&v637, v866);
        long long v372 = *(_OWORD *)v866;
        *(void *)&v866[8] = 0;
        *(void *)v866 = 0;
        v373 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
        *(_OWORD *)(*(void *)&v874[8] + 48) = v372;
        if (v373)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v373);
          if (*(void *)&v866[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v866[8]);
          }
        }
        if (v638) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v638);
        }
        if (v640) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v640);
        }
      }
      if (QP::tokenHasArgIdAsTopPredictionOrWithScore(obja, v547, 64, 0.6))
      {
        v374 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
        uint64_t v634 = *(void *)(*(void *)&v874[8] + 48);
        v635 = v374;
        if (v374) {
          atomic_fetch_add_explicit(&v374->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v631[1] = 0;
        v631[0] = 0;
        QP::U2Parser::makeAttribute((uint64_t *)v542, ptra, v532, buf.location, buf.length, kQPParseAttributeHotelActionKey, (uint64_t)v631, v530, &v632);
        QP::operator+(&v634, (uint64_t *)&v632, v866);
        long long v375 = *(_OWORD *)v866;
        *(void *)&v866[8] = 0;
        *(void *)v866 = 0;
        v376 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
        *(_OWORD *)(*(void *)&v874[8] + 48) = v375;
        if (v376)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v376);
          if (*(void *)&v866[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v866[8]);
          }
        }
        if (v633) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v633);
        }
        if (v635) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v635);
        }
      }
      if (QP::tokenHasArgIdAsTopPredictionOrWithScore(obja, v547, 66, 0.6))
      {
        v377 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
        uint64_t v629 = *(void *)(*(void *)&v874[8] + 48);
        v630 = v377;
        if (v377) {
          atomic_fetch_add_explicit(&v377->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v626[1] = 0;
        v626[0] = 0;
        QP::U2Parser::makeAttribute((uint64_t *)v542, ptra, v532, buf.location, buf.length, kQPParseAttributeHotelNameKey, (uint64_t)v626, v530, &v627);
        QP::operator+(&v629, (uint64_t *)&v627, v866);
        long long v378 = *(_OWORD *)v866;
        *(void *)&v866[8] = 0;
        *(void *)v866 = 0;
        v379 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
        *(_OWORD *)(*(void *)&v874[8] + 48) = v378;
        if (v379)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v379);
          if (*(void *)&v866[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v866[8]);
          }
        }
        if (v628) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v628);
        }
        if (v630) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v630);
        }
      }
      if (QP::tokenHasArgIdAsTopPredictionOrWithScore(obja, v547, 65, 0.6))
      {
        v380 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
        uint64_t v624 = *(void *)(*(void *)&v874[8] + 48);
        v625 = v380;
        if (v380) {
          atomic_fetch_add_explicit(&v380->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v621[1] = 0;
        v621[0] = 0;
        QP::U2Parser::makeAttribute((uint64_t *)v542, ptra, v532, buf.location, buf.length, kQPParseAttributeHotelProviderKey, (uint64_t)v621, v530, &v622);
        QP::operator+(&v624, (uint64_t *)&v622, v866);
        long long v381 = *(_OWORD *)v866;
        *(void *)&v866[8] = 0;
        *(void *)v866 = 0;
        v382 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
        *(_OWORD *)(*(void *)&v874[8] + 48) = v381;
        if (v382)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v382);
          if (*(void *)&v866[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v866[8]);
          }
        }
        if (v623) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v623);
        }
        if (v625) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v625);
        }
      }
      if (QP::tokenHasArgIdAsTopPredictionOrWithScore(obja, v547, 67, 0.6))
      {
        v383 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
        uint64_t v619 = *(void *)(*(void *)&v874[8] + 48);
        v620 = v383;
        if (v383) {
          atomic_fetch_add_explicit(&v383->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v616[1] = 0;
        v616[0] = 0;
        QP::U2Parser::makeAttribute((uint64_t *)v542, ptra, v532, buf.location, buf.length, kQPParseAttributeRestaurantActionKey, (uint64_t)v616, v530, &v617);
        QP::operator+(&v619, (uint64_t *)&v617, v866);
        long long v384 = *(_OWORD *)v866;
        *(void *)&v866[8] = 0;
        *(void *)v866 = 0;
        v385 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
        *(_OWORD *)(*(void *)&v874[8] + 48) = v384;
        if (v385)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v385);
          if (*(void *)&v866[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v866[8]);
          }
        }
        if (v618) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v618);
        }
        if (v620) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v620);
        }
      }
      if (QP::tokenHasArgIdAsTopPredictionOrWithScore(obja, v547, 68, 0.6))
      {
        v386 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
        uint64_t v614 = *(void *)(*(void *)&v874[8] + 48);
        v615 = v386;
        if (v386) {
          atomic_fetch_add_explicit(&v386->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v611[1] = 0;
        v611[0] = 0;
        QP::U2Parser::makeAttribute((uint64_t *)v542, ptra, v532, buf.location, buf.length, kQPParseAttributeRestaurantNameKey, (uint64_t)v611, v530, &v612);
        QP::operator+(&v614, (uint64_t *)&v612, v866);
        long long v387 = *(_OWORD *)v866;
        *(void *)&v866[8] = 0;
        *(void *)v866 = 0;
        v388 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
        *(_OWORD *)(*(void *)&v874[8] + 48) = v387;
        if (v388)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v388);
          if (*(void *)&v866[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v866[8]);
          }
        }
        if (v613) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v613);
        }
        if (v615) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v615);
        }
      }
      if (QP::tokenHasArgIdAsTopPredictionOrWithScore(obja, v547, 49, 0.6))
      {
        v389 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
        uint64_t v609 = *(void *)(*(void *)&v874[8] + 48);
        v610 = v389;
        if (v389) {
          atomic_fetch_add_explicit(&v389->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v606[1] = 0;
        v606[0] = 0;
        QP::U2Parser::makeAttribute((uint64_t *)v542, ptra, v532, buf.location, buf.length, kQPParseAttributeReadingListActionKey, (uint64_t)v606, v530, &v607);
        QP::operator+(&v609, (uint64_t *)&v607, v866);
        long long v390 = *(_OWORD *)v866;
        *(void *)&v866[8] = 0;
        *(void *)v866 = 0;
        v391 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
        *(_OWORD *)(*(void *)&v874[8] + 48) = v390;
        if (v391)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v391);
          if (*(void *)&v866[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v866[8]);
          }
        }
        if (v608) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v608);
        }
        if (v610) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v610);
        }
      }
      if (QP::tokenHasArgIdAsTopPredictionOrWithScore(obja, v547, 9, 0.6))
      {
        if (v516 == 23)
        {
          v392 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
          uint64_t v604 = *(void *)(*(void *)&v874[8] + 48);
          v605 = v392;
          if (v392) {
            atomic_fetch_add_explicit(&v392->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          v601[1] = 0;
          v601[0] = 0;
          QP::U2Parser::makeAttribute((uint64_t *)v542, ptra, v532, buf.location, buf.length, kQPParseAttributeEventKindKey, (uint64_t)v601, v530, &v602);
          QP::operator+(&v604, (uint64_t *)&v602, v866);
          long long v393 = *(_OWORD *)v866;
          *(void *)&v866[8] = 0;
          *(void *)v866 = 0;
          v394 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
          *(_OWORD *)(*(void *)&v874[8] + 48) = v393;
          if (v394)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v394);
            if (*(void *)&v866[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v866[8]);
            }
          }
          if (v603) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v603);
          }
          v395 = v605;
          if (v605) {
            goto LABEL_807;
          }
        }
        else
        {
          v402 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
          uint64_t v599 = *(void *)(*(void *)&v874[8] + 48);
          v600 = v402;
          if (v402) {
            atomic_fetch_add_explicit(&v402->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          v596[1] = 0;
          v596[0] = 0;
          QP::U2Parser::makeAttribute((uint64_t *)v542, ptra, v532, buf.location, buf.length, kQPParseAttributeKeywordKey, (uint64_t)v596, v530, &v597);
          QP::operator+(&v599, (uint64_t *)&v597, v866);
          long long v403 = *(_OWORD *)v866;
          *(void *)&v866[8] = 0;
          *(void *)v866 = 0;
          v404 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
          *(_OWORD *)(*(void *)&v874[8] + 48) = v403;
          if (v404)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v404);
            if (*(void *)&v866[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v866[8]);
            }
          }
          if (v598) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v598);
          }
          v395 = v600;
          if (v600) {
LABEL_807:
          }
            std::__shared_weak_count::__release_shared[abi:ne180100](v395);
        }
      }
      int v396 = QP::tokenHasArgIdAsTopPredictionOrWithScore(obja, v547, 51, 0.6);
      if (v516 == 23) {
        int v397 = v396;
      }
      else {
        int v397 = 0;
      }
      if (v397 == 1)
      {
        v595[1] = 0;
        v595[0] = 0;
        QP::U2Parser::makeAttribute((uint64_t *)v542, ptra, v532, buf.location, buf.length, kQPParseAttributeEarliestActionKey, (uint64_t)v595, v530, (std::string **)&v827);
        v398 = v863;
        if ((unint64_t)v863 >= v864)
        {
          uint64_t v405 = v863 - v862;
          unint64_t v406 = v405 + 1;
          if ((unint64_t)(v405 + 1) >> 60) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v407 = v864 - (void)v862;
          if ((uint64_t)(v864 - (void)v862) >> 3 > v406) {
            unint64_t v406 = v407 >> 3;
          }
          if ((unint64_t)v407 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v408 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v408 = v406;
          }
          v868 = (void (*)(uint64_t))&v864;
          v409 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>>((uint64_t)&v864, v408);
          v410 = &v409[16 * v405];
          *(void *)v866 = v409;
          *(void *)&v866[8] = v410;
          v867 = (uint64_t (*)(uint64_t, uint64_t))&v409[16 * v411];
          *(_OWORD *)v410 = v827;
          long long v827 = 0uLL;
          *(void *)&v866[16] = v410 + 16;
          std::vector<std::shared_ptr<QP::ParseAttribute>>::__swap_out_circular_buffer((uint64_t *)&v862, v866);
          v412 = v863;
          std::__split_buffer<std::shared_ptr<QP::GraphStructureStack::Node>>::~__split_buffer((void **)v866);
          v863 = v412;
          if (*((void *)&v827 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v827 + 1));
          }
        }
        else
        {
          long long *v863 = v827;
          v863 = v398 + 1;
        }
      }
      int v413 = QP::tokenHasArgIdAsTopPredictionOrWithScore(obja, v547, 52, 0.6);
      if (v516 == 23) {
        int v414 = v413;
      }
      else {
        int v414 = 0;
      }
      if (v414 == 1)
      {
        v594[1] = 0;
        v594[0] = 0;
        QP::U2Parser::makeAttribute((uint64_t *)v542, ptra, v532, buf.location, buf.length, kQPParseAttributeLatestActionKey, (uint64_t)v594, v530, (std::string **)&v827);
        v415 = v863;
        if ((unint64_t)v863 >= v864)
        {
          uint64_t v416 = v863 - v862;
          unint64_t v417 = v416 + 1;
          if ((unint64_t)(v416 + 1) >> 60) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v418 = v864 - (void)v862;
          if ((uint64_t)(v864 - (void)v862) >> 3 > v417) {
            unint64_t v417 = v418 >> 3;
          }
          if ((unint64_t)v418 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v419 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v419 = v417;
          }
          v868 = (void (*)(uint64_t))&v864;
          v420 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>>((uint64_t)&v864, v419);
          v421 = &v420[16 * v416];
          *(void *)v866 = v420;
          *(void *)&v866[8] = v421;
          v867 = (uint64_t (*)(uint64_t, uint64_t))&v420[16 * v422];
          *(_OWORD *)v421 = v827;
          long long v827 = 0uLL;
          *(void *)&v866[16] = v421 + 16;
          std::vector<std::shared_ptr<QP::ParseAttribute>>::__swap_out_circular_buffer((uint64_t *)&v862, v866);
          v423 = v863;
          std::__split_buffer<std::shared_ptr<QP::GraphStructureStack::Node>>::~__split_buffer((void **)v866);
          v863 = v423;
          if (*((void *)&v827 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v827 + 1));
          }
        }
        else
        {
          long long *v863 = v827;
          v863 = v415 + 1;
        }
      }
      if (QP::tokenHasArgIdAsTopPredictionOrWithScore(obja, v547, 34, 0.6))
      {
        v424 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
        uint64_t v592 = *(void *)(*(void *)&v874[8] + 48);
        v593 = v424;
        if (v424) {
          atomic_fetch_add_explicit(&v424->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v589[1] = 0;
        v589[0] = 0;
        QP::U2Parser::makeAttribute((uint64_t *)v542, ptra, v532, buf.location, buf.length, kQPParseAttributeCompletedActionKey, (uint64_t)v589, v530, &v590);
        QP::operator+(&v592, (uint64_t *)&v590, v866);
        long long v425 = *(_OWORD *)v866;
        *(void *)&v866[8] = 0;
        *(void *)v866 = 0;
        v426 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
        *(_OWORD *)(*(void *)&v874[8] + 48) = v425;
        if (v426)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v426);
          if (*(void *)&v866[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v866[8]);
          }
        }
        if (v591) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v591);
        }
        if (v593) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v593);
        }
        v427 = (char *)intentArgLabel();
        std::string::basic_string[abi:ne180100]<0>(v587, v427);
        QP::U2Parser::addArgActions((uint64_t)v542, v587);
        if (v588 < 0) {
          operator delete(v587[0]);
        }
      }
      if (QP::tokenHasArgIdAsTopPredictionOrWithScore(obja, v547, 33, 0.6))
      {
        v428 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
        uint64_t v585 = *(void *)(*(void *)&v874[8] + 48);
        v586 = v428;
        if (v428) {
          atomic_fetch_add_explicit(&v428->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v582[1] = 0;
        v582[0] = 0;
        QP::U2Parser::makeAttribute((uint64_t *)v542, ptra, v532, buf.location, buf.length, kQPParseAttributeDueActionKey, (uint64_t)v582, v530, &v583);
        QP::operator+(&v585, (uint64_t *)&v583, v866);
        long long v429 = *(_OWORD *)v866;
        *(void *)&v866[8] = 0;
        *(void *)v866 = 0;
        v430 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
        *(_OWORD *)(*(void *)&v874[8] + 48) = v429;
        if (v430)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v430);
          if (*(void *)&v866[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v866[8]);
          }
        }
        if (v584) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v584);
        }
        if (v586) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v586);
        }
        v431 = (char *)intentArgLabel();
        std::string::basic_string[abi:ne180100]<0>(v580, v431);
        QP::U2Parser::addArgActions((uint64_t)v542, v580);
        if (v581 < 0) {
          operator delete(v580[0]);
        }
      }
      if (QP::tokenHasArgIdAsTopPredictionOrWithScore(obja, v547, 27, 0.6))
      {
        v432 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
        uint64_t v578 = *(void *)(*(void *)&v874[8] + 48);
        v579 = v432;
        if (v432) {
          atomic_fetch_add_explicit(&v432->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v575[1] = 0;
        v575[0] = 0;
        QP::U2Parser::makeAttribute((uint64_t *)v542, ptra, v532, buf.location, buf.length, kQPParseAttributeDraftActionKey, (uint64_t)v575, v530, &v576);
        QP::operator+(&v578, (uint64_t *)&v576, v866);
        long long v433 = *(_OWORD *)v866;
        *(void *)&v866[8] = 0;
        *(void *)v866 = 0;
        v434 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
        *(_OWORD *)(*(void *)&v874[8] + 48) = v433;
        if (v434)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v434);
          if (*(void *)&v866[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v866[8]);
          }
        }
        if (v577) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v577);
        }
        if (v579) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v579);
        }
      }
      if (QP::tokenHasArgIdAsTopPredictionOrWithScore(obja, v547, 31, 0.6))
      {
        v435 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
        uint64_t v573 = *(void *)(*(void *)&v874[8] + 48);
        v574 = v435;
        if (v435) {
          atomic_fetch_add_explicit(&v435->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v570[1] = 0;
        v570[0] = 0;
        QP::U2Parser::makeAttribute((uint64_t *)v542, ptra, v532, buf.location, buf.length, kQPParseAttributeJunkActionKey, (uint64_t)v570, v530, &v571);
        QP::operator+(&v573, (uint64_t *)&v571, v866);
        long long v436 = *(_OWORD *)v866;
        *(void *)&v866[8] = 0;
        *(void *)v866 = 0;
        v437 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
        *(_OWORD *)(*(void *)&v874[8] + 48) = v436;
        if (v437)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v437);
          if (*(void *)&v866[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v866[8]);
          }
        }
        if (v572) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v572);
        }
        if (v574) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v574);
        }
      }
      if (QP::tokenHasArgIdAsTopPredictionOrWithScore(obja, v547, 26, 0.6))
      {
        v438 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
        uint64_t v568 = *(void *)(*(void *)&v874[8] + 48);
        v569 = v438;
        if (v438) {
          atomic_fetch_add_explicit(&v438->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v565[1] = 0;
        v565[0] = 0;
        QP::U2Parser::makeAttribute((uint64_t *)v542, ptra, v532, buf.location, buf.length, kQPParseAttributeArchiveActionKey, (uint64_t)v565, v530, &v566);
        QP::operator+(&v568, (uint64_t *)&v566, v866);
        long long v439 = *(_OWORD *)v866;
        *(void *)&v866[8] = 0;
        *(void *)v866 = 0;
        v440 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
        *(_OWORD *)(*(void *)&v874[8] + 48) = v439;
        if (v440)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v440);
          if (*(void *)&v866[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v866[8]);
          }
        }
        if (v567) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v567);
        }
        if (v569) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v569);
        }
      }
      v441 = [MEMORY[0x263EFFA08] setWithArray:&unk_26D83EC50];
      id v442 = obja;
      id v443 = v441;
      unint64_t v444 = 0;
      do
      {
        v445 = [v442 argIdsForTokens];
        v446 = [v445 objectAtIndexedSubscript:v547];
        BOOL v447 = v444 < [v446 count];

        if (!v447) {
          goto LABEL_922;
        }
        if (v444)
        {
          v448 = [v442 argScoresForTokens];
          v449 = [v448 objectAtIndexedSubscript:v547];
          v450 = [v449 objectAtIndexedSubscript:v444];
          [v450 floatValue];
          BOOL v452 = v451 < 0.3;

          if (v452)
          {
LABEL_922:

            goto LABEL_923;
          }
        }
        v453 = [v442 argIdsForTokens];
        v454 = [v453 objectAtIndexedSubscript:v547];
        v455 = [v454 objectAtIndexedSubscript:v444];
        char v456 = [v443 containsObject:v455];

        ++v444;
      }
      while ((v456 & 1) == 0);

      v457 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
      uint64_t v563 = *(void *)(*(void *)&v874[8] + 48);
      v564 = v457;
      if (v457) {
        atomic_fetch_add_explicit(&v457->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v560[1] = 0;
      v560[0] = 0;
      QP::U2Parser::makeAttribute((uint64_t *)v542, ptra, v532, buf.location, buf.length, kQPParseAttributeKeywordKey, (uint64_t)v560, v530, &v561);
      QP::operator+(&v563, (uint64_t *)&v561, v866);
      long long v458 = *(_OWORD *)v866;
      *(void *)&v866[8] = 0;
      *(void *)v866 = 0;
      v459 = *(std::__shared_weak_count **)(*(void *)&v874[8] + 56);
      *(_OWORD *)(*(void *)&v874[8] + 48) = v458;
      if (v459)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v459);
        if (*(void *)&v866[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v866[8]);
        }
      }
      if (v562) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v562);
      }
      if (v564) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v564);
      }
LABEL_923:

      uint64_t v261 = *(void *)&v874[8];
      if (*(void *)(*(void *)&v874[8] + 48)) {
        goto LABEL_924;
      }
      uint64_t v462 = v504;
      if (v547 <= v504 + v505) {
        uint64_t v463 = v505 + 1;
      }
      else {
        uint64_t v463 = 1;
      }
      if (v547 > v504 + v505) {
        uint64_t v462 = v547;
      }
      uint64_t v504 = v462;
      uint64_t v505 = v463;
LABEL_931:
      v223 = [v539 copy];
      [v517 addObject:v223];
      int v224 = 1;
      goto LABEL_932;
    }
    *(_DWORD *)v542 = 4;
    std::string::__assign_external(v527, "Unable to find range for ARG_TIME group", 0x27uLL);
    v223 = u2ParserLogger();
    if (os_log_type_enabled(v223, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v866 = 134217984;
      *(void *)&v866[4] = v528;
      _os_log_error_impl(&dword_224D85000, v223, OS_LOG_TYPE_ERROR, "[QPNLU][qid=%ld] Unable to parse: unable to find range for ARG_TIME group", v866, 0xCu);
    }
    int v224 = 0;
    char v502 = 1;
LABEL_932:

    _Block_object_dispose(v874, 8);
    if (*(void *)&v874[56]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v874[56]);
    }

    if (!v224) {
      goto LABEL_986;
    }
LABEL_935:
    ++v547;
    long long v139 = obja;
  }
  while (v547 != v525);
  char v470 = v497;
  if ((v502 & 1) == 0) {
    goto LABEL_956;
  }
LABEL_965:
  v539 = QP::debugDescriptionWithQUOutput((void *)*v545, v139, v517, v554, v470 & 1);
  unint64_t v474 = QPTimingNanosecondsSinceAbsoluteTime(v540);
  v475 = u2ParserLogger();
  if (os_log_type_enabled(v475, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v476 = [v139 embeddingsTime];
    unint64_t v477 = [v139 predictionTime];
    unint64_t v478 = [v139 embeddingsTime];
    *(_DWORD *)v874 = 134219778;
    *(void *)&v874[4] = v528;
    *(_WORD *)&v874[12] = 2048;
    *(double *)&v874[14] = (float)((float)v474 / 1000000.0);
    *(_WORD *)&v874[22] = 2048;
    *(double *)&v874[24] = (float)((float)v513 / 1000000.0);
    *(_WORD *)&v874[32] = 2048;
    *(double *)&v874[34] = (float)((float)v476 / 1000000.0);
    *(_WORD *)&v874[42] = 2048;
    *(double *)&v874[44] = (float)((float)((float)v477 - (float)v478) / 1000000.0);
    *(_WORD *)&v874[52] = 2048;
    *(double *)&v874[54] = (float)((float)v511 / 1000000.0);
    *(_WORD *)&v874[62] = 1024;
    LODWORD(v875) = v512;
    WORD2(v875) = 2112;
    *(void *)((char *)&v875 + 6) = v539;
    _os_log_impl(&dword_224D85000, v475, OS_LOG_TYPE_DEFAULT, "[QPNLU][qid=%ld] QU parsed in %.1fms (load:%.1f; nlx:%.1f; u2:%.1f; ecr:%.1f(%u))\n%@",
      v874,
      0x4Eu);
  }

  *((void *)v542 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = v474;
  *(_DWORD *)v542 = 1;
  uint64_t v479 = *((void *)v542 + 10);
  if (!*(unsigned char *)(v479 + 36) && !*(unsigned char *)(v479 + 34))
  {
    v480 = QPProcessName();
    int v481 = strcmp("searchd", v480);
    if (Length >= 3 && !v481) {
      QP::logQueryUnderstandingOverviewCAEvent(obja, v553, Length, v525, [v554 count] != 0);
    }
  }
  memset(v559, 0, sizeof(v559));
  std::vector<std::shared_ptr<QP::Lexeme>>::__init_with_size[abi:ne180100]<std::shared_ptr<QP::Lexeme>*,std::shared_ptr<QP::Lexeme>*>(v559, *((void **)v542 + 23), *((void **)v542 + 24), (uint64_t)(*((void *)v542 + 24) - *((void *)v542 + 23)) >> 4);
  v482 = (std::__shared_weak_count *)*((void *)v542 + 11);
  v558[0] = *((void *)v542 + 10);
  v558[1] = v482;
  if (v482) {
    atomic_fetch_add_explicit(&v482->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CFAttributedStringRef EmbeddingString = QP::createEmbeddingString(v517, obja, v554, v559, (uint64_t)v558, *((void **)v542 + 19), *(const __CFAttributedString **)(*((void *)v542 + 12) + 448), v528);
  nlp::CFScopedPtr<__CFAttributedString const*>::reset((const void **)v542 + 26, EmbeddingString);
  if (v482) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v482);
  }
  *(void *)v874 = v559;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)v874);
  *(void *)v866 = 0;
  v484 = (void *)MEMORY[0x263EFFA78];
  if (v554) {
    v484 = v554;
  }
  v850 = v484;
  v849[0] = kQPParseResultEcrGroundedKey;
  v849[1] = kQPQUOutputIntentIdsKey;
  uint64_t v848 = [obja intentId];
  v541 = (void *)v848;
  uint64_t v851 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v848 count:1];
  v849[2] = kQPQUOutputIntentLabelsKey;
  v485 = NSString;
  v548 = (void *)v851;
  v486 = [obja intentId];
  [v486 intValue];
  v487 = [v485 stringWithUTF8String:intentLabel()];
  v847 = v487;
  v537 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v847 count:1];
  v852 = v537;
  v849[3] = kQPQUOutputIntentScoresKey;
  v488 = [obja confidenceScore];
  v846 = v488;
  v489 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v846 count:1];
  v853 = v489;
  v849[4] = kQPQUOutputIsUnsafeKey;
  v490 = [NSNumber numberWithBool:v132 >= v501];
  v854 = v490;
  v849[5] = kQPQUOutputUnsafeConfidenceScoreKey;
  *(float *)&double v491 = v132;
  v492 = [NSNumber numberWithFloat:v491];
  v845 = v492;
  v493 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v845 count:1];
  v494 = v486;
  v855 = v493;
  v849[6] = kQPQUOutputTokenInfoKey;
  v495 = (void *)[v517 copy];
  v849[7] = @"debugDescription";
  v856 = v495;
  v857 = v539;
  uint64_t v496 = [NSDictionary dictionaryWithObjects:&v850 forKeys:v849 count:8];

  *(void *)v866 = v496;
  CFRelease(cf);
  memset(v557, 0, sizeof(v557));
  std::vector<std::shared_ptr<QP::ParseAttribute>>::__init_with_size[abi:ne180100]<std::shared_ptr<QP::ParseAttribute>*,std::shared_ptr<QP::ParseAttribute>*>(v557, (void *)v841, *((void **)&v841 + 1), (uint64_t)(*((void *)&v841 + 1) - v841) >> 4);
  QP::U2Parser::addArgActionstoTimeAttr((uint64_t *)v542, v557);
  *(void *)v874 = v557;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)v874);
  if (SBYTE7(v871) < 0)
  {
    std::string::__init_copy_ctor_external(&v556, (const std::string::value_type *)__s, *((std::string::size_type *)&__s + 1));
  }
  else
  {
    *(_OWORD *)&v556.__r_.__value_.__l.__data_ = __s;
    v556.__r_.__value_.__r.__words[2] = v871;
  }
  memset(v555, 0, sizeof(v555));
  std::vector<std::shared_ptr<QP::ParseAttribute>>::__init_with_size[abi:ne180100]<std::shared_ptr<QP::ParseAttribute>*,std::shared_ptr<QP::ParseAttribute>*>(v555, (void *)v841, *((void **)&v841 + 1), (uint64_t)(*((void *)&v841 + 1) - v841) >> 4);
  QP::U2Parser::mergeActionsforSearchtoolPersonalAnswers((uint64_t)v542, (uint64_t *)&v556, v555);
  *(void *)v874 = v555;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)v874);
  if (SHIBYTE(v556.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v556.__r_.__value_.__l.__data_);
  }
  buf.CFIndex location = (uint64_t)(*((void *)&v841 + 1) - v841) >> 4;
  *(void *)&long long v827 = CFArrayGetCount(theArray);
  std::allocate_shared[abi:ne180100]<QP::Parse,std::allocator<QP::Parse>,nlp::CFScopedPtr<__CFString const*> &,unsigned long,long,std::vector<std::shared_ptr<QP::ParseAttribute>> &,__CFDictionary const*&,void>(v545, &buf.location, (uint64_t *)&v827, (void **)&v841, (uint64_t *)v866, v874);
  std::vector<std::shared_ptr<QP::Parse>>::push_back[abi:ne180100]((uint64_t *)v542 + 20, (long long *)v874);
  *((unsigned char *)v542 + 216) = 1;
  CFRelease(theArray);
  if (*(void *)&v874[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v874[8]);
  }
LABEL_985:

LABEL_986:
  *(void *)v874 = &v862;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)v874);

  if (SBYTE7(v871) < 0) {
    operator delete((void *)__s);
  }
  *(void *)v874 = &v841;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)v874);
LABEL_989:
  uint64_t v152 = obja;
LABEL_990:

LABEL_991:
LABEL_992:
}

void sub_224DDD634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,void *a47,void *a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60,void *a61,uint64_t a62,void *a63)
{
  if (STACK[0xBB8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0xBB8]);
  }
  if (STACK[0xBC8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0xBC8]);
  }
  _Block_object_dispose(&STACK[0x1080], 8);
  if (STACK[0x10B8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x10B8]);
  }

  STACK[0x1080] = (unint64_t)&STACK[0xF28];
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x1080]);

  if (SLOBYTE(STACK[0x1057]) < 0) {
    operator delete((void *)STACK[0x1040]);
  }
  STACK[0x1080] = (unint64_t)&STACK[0xDA0];
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x1080]);

  _Unwind_Resume(a1);
}

void QP::operator+(void *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = *a2;
  if (*a1)
  {
    if (v3)
    {
      uint64_t v4 = a1[1];
      *(void *)&long long v9 = *a1;
      *((void *)&v9 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = v4;
      if (v4)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
        uint64_t v3 = *a2;
      }
      uint64_t v5 = a2[1];
      *(void *)&long long v8 = v3;
      *((void *)&v8 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      QP::ParseAttribute::makeGroupAttribute(&v9, &v8, a3);
      if (*((void *)&v8 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v8 + 1));
      }
      if (*((void *)&v9 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v9 + 1));
      }
    }
    else
    {
      uint64_t v7 = a1[1];
      *a3 = *a1;
      a3[1] = v7;
      *a1 = 0;
      a1[1] = 0;
    }
  }
  else
  {
    uint64_t v6 = a2[1];
    *a3 = v3;
    a3[1] = v6;
    *a2 = 0;
    a2[1] = 0;
  }
}

void sub_224DDE8C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void QP::U2Parser::makePersonAttribute(QP::U2Parser *this@<X0>, CFRange a2@<0:X3, 8:X4>, const __CFString *a3@<X5>, const __CFString *a4@<X6>, unint64_t a5@<X2>, std::string **a6@<X8>)
{
  CFRange v34 = a2;
  long long v33 = a5;
  LODWORD(v35.__r_.__value_.__l.__data_) = 0;
  LODWORD(__p[0]) = 0;
  LODWORD(v3nlp::CFScopedPtr<__CFString const*>::reset((const void **)&a9, 0) = 2;
  std::allocate_shared[abi:ne180100]<QP::ParseAttribute,std::allocator<QP::ParseAttribute>,CFRange &,CFRange &,int,int,QUIntentArgType,void>(&v33, (long long *)&v34.location, (int *)&v35, (int *)__p, (int *)&v30, a6);
  std::string::basic_string[abi:ne180100]<0>(__p, "Person");
  QP::getUTF8StringFromCFString(a4, &v35);
  std::allocate_shared[abi:ne180100]<QP::LexemeValue,std::allocator<QP::LexemeValue>,std::string &,std::string,CFRange &,void>((uint64_t)__p, (uint64_t)&v35, (uint64_t)&v34, &v30);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  long long v11 = v30;
  *(_WORD *)(v30 + 88) = 6;
  uint64_t v12 = *a6;
  if (*((void *)&v11 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v11 + 1) + 16), 1uLL, memory_order_relaxed);
  }
  unint64_t v13 = (std::__shared_weak_count *)v12[4].__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12[4].__r_.__value_.__r.__words[1] = v11;
  if (v13) {
    std::__shared_weak_count::__release_weak(v13);
  }
  if (*((void *)&v11 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v11 + 1));
  }
  long long v14 = v30;
  uint64_t v15 = *((void *)&v30 + 1);
  if (*((void *)&v30 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v30 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v16 = *((void *)this + 25);
  BOOL v17 = (void *)*((void *)this + 24);
  if ((unint64_t)v17 >= v16)
  {
    long long v28 = v14;
    uint64_t v19 = *((void *)this + 23);
    uint64_t v20 = ((uint64_t)v17 - v19) >> 4;
    unint64_t v21 = v20 + 1;
    if ((unint64_t)(v20 + 1) >> 60) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v22 = v16 - v19;
    if (v22 >> 3 > v21) {
      unint64_t v21 = v22 >> 3;
    }
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v23 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v23 = v21;
    }
    unsigned __int8 v37 = (char *)this + 200;
    uint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>>((uint64_t)this + 200, v23);
    uint64_t v25 = &v24[16 * v20];
    v35.__r_.__value_.__r.__words[0] = (std::string::size_type)v24;
    v35.__r_.__value_.__l.__size_ = (std::string::size_type)v25;
    size_t v36 = &v24[16 * v26];
    *(_OWORD *)uint64_t v25 = v28;
    v35.__r_.__value_.__r.__words[2] = (std::string::size_type)(v25 + 16);
    std::vector<std::shared_ptr<QP::Lexeme>>::__swap_out_circular_buffer((uint64_t *)this + 23, &v35);
    CFStringRef v18 = (void *)*((void *)this + 24);
    std::__split_buffer<std::shared_ptr<QP::GraphStructureStack::Node>>::~__split_buffer((void **)&v35.__r_.__value_.__l.__data_);
  }
  else
  {
    void *v17 = v14;
    v17[1] = v15;
    CFStringRef v18 = v17 + 2;
    *((void *)this + 24) = v17 + 2;
  }
  *((void *)this + 24) = v18;
  QP::getUTF8StringFromCFString(a3, &v35);
  uint64_t v27 = *a6;
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__str, v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_);
  }
  else {
    std::string __str = v35;
  }
  std::string::operator=(v27 + 2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  if (*((void *)&v30 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v30 + 1));
  }
  if (v32 < 0) {
    operator delete(__p[0]);
  }
}

void sub_224DDEB38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (*(char *)(v27 - 65) < 0) {
    operator delete(*(void **)(v27 - 88));
  }
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  if (a26 < 0) {
    operator delete(__p);
  }
  uint64_t v29 = *(std::__shared_weak_count **)(v26 + 8);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  _Unwind_Resume(exception_object);
}

void QP::U2Parser::makeVisualIdentifierAttribute(QP::U2Parser *this@<X0>, CFRange a2@<0:X2, 8:X3>, const __CFDictionary *a3@<X4>, unint64_t a4@<X1>, uint64_t *a5@<X8>)
{
  uint64_t v76 = *MEMORY[0x263EF8340];
  CFRange v73 = a2;
  *a5 = 0;
  a5[1] = 0;
  BOOL v70 = 0;
  uint64_t v71 = 0;
  uint64_t v72 = 0;
  long long v69 = 0uLL;
  CFDictionaryRef v50 = a3;
  if ([(__CFDictionary *)v50 count])
  {
    long long v68 = a4;
    LODWORD(__v.__first_) = 0;
    LODWORD(v65.__begin_) = 0;
    LODWORD(v62) = 2;
    std::allocate_shared[abi:ne180100]<QP::ParseAttribute,std::allocator<QP::ParseAttribute>,CFRange &,CFRange &,int,int,QUIntentArgType,void>(&v68, (long long *)&v73.location, (int *)&__v, (int *)&v65, (int *)&v62, &v66);
    if (SHIBYTE(v72) < 0)
    {
      uint64_t v71 = 14;
      uint64_t v6 = (char *)v70;
    }
    else
    {
      HIBYTE(v72) = 14;
      uint64_t v6 = (char *)&v70;
    }
    strcpy(v6, "GroundedPerson");
    memset(&v65, 0, sizeof(v65));
    os_signpost_id_t v62 = 0;
    id v63 = 0;
    uint64_t v64 = 0;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    obuint64_t j = [(__CFDictionary *)v50 allKeys];
    uint64_t v7 = [obj countByEnumeratingWithState:&v58 objects:v75 count:16];
    if (v7)
    {
      uint64_t v8 = *(void *)v59;
      do
      {
        for (uint64_t i = 0; i != v7; ++i)
        {
          if (*(void *)v59 != v8) {
            objc_enumerationMutation(obj);
          }
          CFStringRef v10 = *(const __CFString **)(*((void *)&v58 + 1) + 8 * i);
          long long v11 = [(__CFDictionary *)v50 objectForKeyedSubscript:v10];
          uint64_t v12 = [v11 firstObject];
          [v12 doubleValue];
          uint64_t v14 = v13;

          uint64_t v15 = [v11 lastObject];
          [v15 doubleValue];
          uint64_t v17 = v16;

          QP::getUTF8StringFromCFString(v10, __p);
          std::vector<std::string>::pointer end = v65.__end_;
          if (v65.__end_ >= v65.__end_cap_.__value_)
          {
            unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * (((char *)v65.__end_ - (char *)v65.__begin_) >> 3);
            unint64_t v21 = v20 + 1;
            if (v20 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            }
            if (0x5555555555555556 * (((char *)v65.__end_cap_.__value_ - (char *)v65.__begin_) >> 3) > v21) {
              unint64_t v21 = 0x5555555555555556 * (((char *)v65.__end_cap_.__value_ - (char *)v65.__begin_) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v65.__end_cap_.__value_ - (char *)v65.__begin_) >> 3) >= 0x555555555555555) {
              unint64_t v22 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v22 = v21;
            }
            __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v65.__end_cap_;
            if (v22) {
              unint64_t v23 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v65.__end_cap_, v22);
            }
            else {
              unint64_t v23 = 0;
            }
            uint64_t v24 = v23 + v20;
            __v.__first_ = v23;
            __v.__begin_ = v24;
            __v.__end_cap_.__value_ = &v23[v22];
            long long v25 = *(_OWORD *)__p;
            v24->__r_.__value_.__r.__words[2] = v57;
            *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v25;
            __p[1] = 0;
            std::string::size_type v57 = 0;
            __p[0] = 0;
            __v.__end_ = v24 + 1;
            std::vector<std::string>::__swap_out_circular_buffer(&v65, &__v);
            uint64_t v26 = v65.__end_;
            std::__split_buffer<std::string>::~__split_buffer(&__v);
            v65.__end_ = v26;
            if (SHIBYTE(v57) < 0) {
              operator delete(__p[0]);
            }
          }
          else
          {
            long long v19 = *(_OWORD *)__p;
            v65.__end_->__r_.__value_.__r.__words[2] = v57;
            *(_OWORD *)&end->__r_.__value_.__l.__data_ = v19;
            v65.__end_ = end + 1;
          }
          uint64_t v27 = v63;
          if (v63 >= v64)
          {
            uint64_t v29 = (char *)v62;
            uint64_t v30 = (v63 - (unsigned char *)v62) >> 4;
            unint64_t v31 = v30 + 1;
            if ((unint64_t)(v30 + 1) >> 60) {
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v32 = v64 - (unsigned char *)v62;
            if ((v64 - (unsigned char *)v62) >> 3 > v31) {
              unint64_t v31 = v32 >> 3;
            }
            if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v33 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v33 = v31;
            }
            if (v33)
            {
              CFRange v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>>((uint64_t)&v64, v33);
              uint64_t v29 = (char *)v62;
              uint64_t v27 = v63;
            }
            else
            {
              CFRange v34 = 0;
            }
            std::string v35 = &v34[16 * v30];
            *(void *)std::string v35 = v14;
            *((void *)v35 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = v17;
            size_t v36 = v35;
            if (v27 != v29)
            {
              do
              {
                *((_OWORD *)v36 - QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = *((_OWORD *)v27 - 1);
                v36 -= 16;
                v27 -= 16;
              }
              while (v27 != v29);
              uint64_t v29 = (char *)v62;
            }
            long long v28 = v35 + 16;
            os_signpost_id_t v62 = v36;
            id v63 = v35 + 16;
            uint64_t v64 = &v34[16 * v33];
            if (v29) {
              operator delete(v29);
            }
          }
          else
          {
            *(void *)id v63 = v14;
            *((void *)v27 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = v17;
            long long v28 = v27 + 16;
          }
          id v63 = v28;
        }
        uint64_t v7 = [obj countByEnumeratingWithState:&v58 objects:v75 count:16];
      }
      while (v7);
    }

    std::allocate_shared[abi:ne180100]<QP::LexemeGroundedPerson,std::allocator<QP::LexemeGroundedPerson>,std::string &,std::vector<std::string> &,std::vector<std::pair<double,double>> &,CFRange &,void>((uint64_t)&v70, (long long **)&v65, (long long **)&v62, (uint64_t)&v73, &__v);
    std::__split_buffer<std::string>::pointer first = __v.__first_;
    begiCFIndex n = (std::__shared_weak_count *)__v.__begin_;
    __v.__first_ = 0;
    __v.__begin_ = 0;
    uint64_t v39 = (std::__shared_weak_count *)*((void *)&v69 + 1);
    *(void *)&long long v69 = first;
    *((void *)&v69 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = begin;
    if (v39)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v39);
      if (__v.__begin_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__v.__begin_);
      }
      begiCFIndex n = (std::__shared_weak_count *)*((void *)&v69 + 1);
    }
    uint64_t v40 = v69;
    *(_WORD *)(v69 + 88) = 16;
    uint64_t v41 = v66;
    if (begin)
    {
      atomic_fetch_add_explicit(&begin->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&begin->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v42 = *(std::__shared_weak_count **)(v41 + 112);
    *(void *)(v41 + 104) = v40;
    *(void *)(v41 + 112) = begin;
    if (v42) {
      std::__shared_weak_count::__release_weak(v42);
    }
    if (begin) {
      std::__shared_weak_count::__release_shared[abi:ne180100](begin);
    }
    std::vector<std::shared_ptr<QP::Lexeme>>::push_back[abi:ne180100]((uint64_t *)this + 23, &v69);
    QP::getUTF8StringFromCFString((const __CFString *)v46, &__v);
    uint64_t v43 = (std::string *)v66;
    if (SHIBYTE(__v.__end_) < 0)
    {
      std::string::__init_copy_ctor_external(&__str, (const std::string::value_type *)__v.__first_, (std::string::size_type)__v.__begin_);
    }
    else
    {
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)&__v.__first_;
      __str.__r_.__value_.__r.__words[2] = (std::string::size_type)__v.__end_;
    }
    std::string::operator=(v43 + 2, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    id v44 = (std::__shared_weak_count *)a5[1];
    uint64_t v53 = *a5;
    BOOL v54 = v44;
    if (v44) {
      atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v51 = v66;
    CFStringRef v52 = v67;
    if (v67) {
      atomic_fetch_add_explicit(&v67->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    QP::operator+(&v53, &v51, __p);
    long long v45 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    *(_OWORD *)a5 = v45;
    if (v44)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v44);
      if (__p[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      }
    }
    if (v52) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v52);
    }
    if (v54) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v54);
    }
    if (SHIBYTE(__v.__end_) < 0) {
      operator delete(__v.__first_);
    }
    if (v62)
    {
      id v63 = (char *)v62;
      operator delete(v62);
    }
    __v.__first_ = (std::__split_buffer<std::string>::pointer)&v65;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
    if (v67) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v67);
    }
  }

  if (*((void *)&v69 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v69 + 1));
  }
  if (SHIBYTE(v72) < 0) {
    operator delete(v70);
  }
}

void sub_224DDF1B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a60 < 0) {
    operator delete(__p);
  }
  if (a35)
  {
    a36 = (uint64_t)a35;
    operator delete(a35);
  }
  a35 = &a38;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
  if (a42) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a42);
  }

  if (a46) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a46);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  long long v61 = *(std::__shared_weak_count **)(a11 + 8);
  if (v61) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v61);
  }
  _Unwind_Resume(a1);
}

void QP::U2Parser::makeIdentifierAttribute(QP::U2Parser *this@<X0>, CFRange a2@<0:X3, 8:X4>, CFStringRef theString1@<X5>, const __CFArray *a4@<X6>, const __CFArray *a5@<X7>, unint64_t a6@<X2>, uint64_t *a7@<X8>)
{
  uint64_t v75 = *MEMORY[0x263EF8340];
  CFRange v72 = a2;
  *a7 = 0;
  a7[1] = 0;
  if (CFStringsAreEqual(theString1, kQPParseAttributePersonKey)
    || CFStringsAreEqual(theString1, kQPParseAttributeSenderKey)
    || CFStringsAreEqual(theString1, kQPParseAttributeRecipientKey)
    || CFStringsAreEqual(theString1, kQPParseAttributeTaggedPersonKey)
    || CFStringsAreEqual(theString1, kQPParseAttributeSenderHandleKey)
    || CFStringsAreEqual(theString1, kQPParseAttributeRecipientHandleKey))
  {
    long long v69 = 0;
    uint64_t v70 = 0;
    uint64_t v71 = 0;
    unsigned long long v68 = 0uLL;
    CFArrayRef v37 = a4;
    CFArrayRef v36 = a5;
    long long v67 = a6;
    LODWORD(__p.__r_.__value_.__l.__data_) = 0;
    LODWORD(v6nlp::CFScopedPtr<__CFString const*>::reset((const void **)&a9, 0) = 0;
    int v64 = 2;
    std::allocate_shared[abi:ne180100]<QP::ParseAttribute,std::allocator<QP::ParseAttribute>,CFRange &,CFRange &,int,int,QUIntentArgType,void>(&v67, (long long *)&v72.location, (int *)&__p, (int *)&v60, &v64, &v65);
    if (SHIBYTE(v71) < 0)
    {
      uint64_t v70 = 12;
      uint64_t v14 = (char *)v69;
    }
    else
    {
      HIBYTE(v7QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = 12;
      uint64_t v14 = (char *)&v69;
    }
    strcpy(v14, "TaggedPerson");
    std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,std::string &,CFRange &,void>((uint64_t)&v69, (uint64_t)&v72, &__p);
    std::string::size_type size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    std::string::size_type v15 = __p.__r_.__value_.__r.__words[0];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    uint64_t v17 = (std::__shared_weak_count *)*((void *)&v68 + 1);
    unsigned long long v68 = __PAIR128__((unint64_t)size, v15);
    if (v17)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      if (__p.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
      }
      std::string::size_type size = (std::__shared_weak_count *)*((void *)&v68 + 1);
    }
    uint64_t v18 = v65;
    uint64_t v19 = v68;
    if (size)
    {
      atomic_fetch_add_explicit(&size->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&size->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v20 = *(std::__shared_weak_count **)(v18 + 112);
    *(void *)(v18 + 104) = v19;
    *(void *)(v18 + 112) = size;
    if (v20) {
      std::__shared_weak_count::__release_weak(v20);
    }
    if (size) {
      std::__shared_weak_count::__release_shared[abi:ne180100](size);
    }
    std::vector<std::shared_ptr<QP::Lexeme>>::push_back[abi:ne180100]((uint64_t *)this + 23, (long long *)&v68);
    QP::getUTF8StringFromCFString(theString1, &__p);
    unint64_t v21 = (std::string *)v65;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__str, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string __str = __p;
    }
    std::string::operator=(v21 + 2, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    uint64_t v58 = 0;
    long long v59 = 0;
    uint64_t v56 = v65;
    std::string::size_type v57 = v66;
    if (v66) {
      atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    QP::operator+(&v58, &v56, &v60);
    uint64_t v23 = v60;
    unint64_t v22 = v61;
    uint64_t v60 = 0;
    long long v61 = 0;
    *a7 = v23;
    a7[1] = (uint64_t)v22;
    if (v57) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v57);
    }
    if (v59) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v59);
    }
    if ([(__CFArray *)v37 count])
    {
      long long v54 = 0u;
      long long v55 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      obuint64_t j = v37;
      uint64_t v24 = [(__CFArray *)obj countByEnumeratingWithState:&v52 objects:v74 count:16];
      if (v24)
      {
        uint64_t v25 = *(void *)v53;
        do
        {
          uint64_t v26 = 0;
          uint64_t v27 = v22;
          do
          {
            if (*(void *)v53 != v25) {
              objc_enumerationMutation(obj);
            }
            CFStringRef v28 = *(const __CFString **)(*((void *)&v52 + 1) + 8 * v26);
            uint64_t v50 = v23;
            uint64_t v51 = v27;
            if (v27) {
              atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            QP::U2Parser::makePersonAttribute(this, v72, theString1, v28, a6, &v48);
            QP::operator+(&v50, (uint64_t *)&v48, &v60);
            uint64_t v23 = v60;
            unint64_t v22 = v61;
            uint64_t v60 = 0;
            long long v61 = 0;
            *a7 = v23;
            a7[1] = (uint64_t)v22;
            if (v27)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](v27);
              if (v61) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v61);
              }
            }
            if (v49) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v49);
            }
            if (v51) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v51);
            }
            ++v26;
            uint64_t v27 = v22;
          }
          while (v24 != v26);
          uint64_t v24 = [(__CFArray *)obj countByEnumeratingWithState:&v52 objects:v74 count:16];
        }
        while (v24);
      }
    }
    if ([(__CFArray *)v36 count])
    {
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      CFArrayRef obja = v36;
      uint64_t v29 = [(__CFArray *)obja countByEnumeratingWithState:&v44 objects:v73 count:16];
      if (v29)
      {
        uint64_t v30 = *(void *)v45;
        uint64_t v32 = *a7;
        unint64_t v31 = (std::__shared_weak_count *)a7[1];
        do
        {
          uint64_t v33 = 0;
          CFRange v34 = v31;
          do
          {
            if (*(void *)v45 != v30) {
              objc_enumerationMutation(obja);
            }
            CFStringRef v35 = *(const __CFString **)(*((void *)&v44 + 1) + 8 * v33);
            uint64_t v42 = v32;
            uint64_t v43 = v34;
            if (v34) {
              atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            QP::U2Parser::makePersonAttribute(this, v72, theString1, v35, a6, &v40);
            QP::operator+(&v42, (uint64_t *)&v40, &v60);
            uint64_t v32 = v60;
            unint64_t v31 = v61;
            uint64_t v60 = 0;
            long long v61 = 0;
            *a7 = v32;
            a7[1] = (uint64_t)v31;
            if (v34)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](v34);
              if (v61) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v61);
              }
            }
            if (v41) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v41);
            }
            if (v43) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v43);
            }
            ++v33;
            CFRange v34 = v31;
          }
          while (v29 != v33);
          uint64_t v29 = [(__CFArray *)obja countByEnumeratingWithState:&v44 objects:v73 count:16];
        }
        while (v29);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v66) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v66);
    }

    if (*((void *)&v68 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v68 + 1));
    }
    if (SHIBYTE(v71) < 0) {
      operator delete(v69);
    }
  }
}

void sub_224DDF868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,uint64_t a54,std::__shared_weak_count *a55,uint64_t a56,uint64_t a57,uint64_t a58,std::__shared_weak_count *a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  if (a52 < 0) {
    operator delete(__p);
  }
  if (a55) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a55);
  }

  if (a59) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a59);
  }
  if (a65 < 0) {
    operator delete(a60);
  }
  long long v67 = *(std::__shared_weak_count **)(v65 + 8);
  if (v67) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v67);
  }
  _Unwind_Resume(a1);
}

void QP::U2Parser::makeAttribute(uint64_t *a1@<X0>, const __CFString *a2@<X1>, unint64_t a3@<X2>, CFIndex a4@<X3>, CFIndex a5@<X4>, __CFString *a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, std::string **a9@<X8>)
{
  v65.CFIndex location = a4;
  v65.CFIndex length = a5;
  int v64 = a6;
  int v63 = a8;
  long long v62 = a3;
  LODWORD(v61.__r_.__value_.__l.__data_) = 0;
  LODWORD(v58.__r_.__value_.__l.__data_) = 0;
  std::allocate_shared[abi:ne180100]<QP::ParseAttribute,std::allocator<QP::ParseAttribute>,CFRange &,CFRange &,int,int,QUIntentArgType &,void>(&v62, (long long *)&v65.location, (int *)&v61, (int *)&v58, &v63, a9);
  memset(&v61, 0, sizeof(v61));
  __str[0] = 0;
  __str[1] = 0;
  if (CFStringsAreEqual(a6, kQPParseAttributeKindKey))
  {
    QP::U2Parser::lexemeForArgMediaTypeWithRange((QP::U2Parser *)a1, a2, v65, (const __CFString **)&v64, (uint64_t *)&v58);
    long long v14 = *(_OWORD *)&v58.__r_.__value_.__l.__data_;
    *(_OWORD *)&v58.__r_.__value_.__l.__data_ = 0uLL;
    std::string::size_type v15 = (std::__shared_weak_count *)__str[1];
    *(_OWORD *)std::string __str = v14;
    if (v15)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      if (v58.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v58.__r_.__value_.__l.__size_);
      }
    }
    std::string::operator=(&v61, __str[0]);
    goto LABEL_16;
  }
  if (CFStringsAreEqual(a6, kQPParseAttributeKeywordKey)) {
    goto LABEL_7;
  }
  if (!CFStringsAreEqual(a6, kQPParseAttributeDateKey))
  {
    if (CFStringsAreEqual(a6, kQPParseAttributeFavoritedKey))
    {
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      {
        v61.__r_.__value_.__l.__size_ = 15;
        uint64_t v26 = (std::string *)v61.__r_.__value_.__r.__words[0];
      }
      else
      {
        *((unsigned char *)&v61.__r_.__value_.__s + 23) = 15;
        uint64_t v26 = &v61;
      }
      strcpy((char *)v26, "FavoritedAction");
      std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,std::string &,CFRange &,void>((uint64_t)&v61, (uint64_t)&v65, &v58);
      goto LABEL_8;
    }
    if (CFStringsAreEqual(a6, kQPParseAttributeSentKey))
    {
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      {
        v61.__r_.__value_.__l.__size_ = 10;
        uint64_t v27 = (std::string *)v61.__r_.__value_.__r.__words[0];
      }
      else
      {
        *((unsigned char *)&v61.__r_.__value_.__s + 23) = 10;
        uint64_t v27 = &v61;
      }
      strcpy((char *)v27, "SentAction");
      std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,std::string &,CFRange &,void>((uint64_t)&v61, (uint64_t)&v65, &v58);
      goto LABEL_8;
    }
    if (CFStringsAreEqual(a6, kQPParseAttributeReceivedKey))
    {
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      {
        v61.__r_.__value_.__l.__size_ = 14;
        CFStringRef v28 = (std::string *)v61.__r_.__value_.__r.__words[0];
      }
      else
      {
        *((unsigned char *)&v61.__r_.__value_.__s + 23) = 14;
        CFStringRef v28 = &v61;
      }
      strcpy((char *)v28, "ReceivedAction");
      std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,std::string &,CFRange &,void>((uint64_t)&v61, (uint64_t)&v65, &v58);
      goto LABEL_8;
    }
    if (CFStringsAreEqual(a6, kQPParseAttributeFlaggedKey))
    {
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      {
        v61.__r_.__value_.__l.__size_ = 13;
        uint64_t v29 = (std::string *)v61.__r_.__value_.__r.__words[0];
      }
      else
      {
        *((unsigned char *)&v61.__r_.__value_.__s + 23) = 13;
        uint64_t v29 = &v61;
      }
      strcpy((char *)v29, "FlaggedStatus");
      std::allocate_shared[abi:ne180100]<QP::LexemeStatus,std::allocator<QP::LexemeStatus>,std::string &,char const*&,CFRange &,void>((uint64_t)&v61, QP::kActive, (uint64_t)&v65, &v58);
      goto LABEL_61;
    }
    if (CFStringsAreEqual(a6, kQPParseAttributeSharedKey))
    {
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      {
        v61.__r_.__value_.__l.__size_ = 12;
        uint64_t v30 = (std::string *)v61.__r_.__value_.__r.__words[0];
      }
      else
      {
        *((unsigned char *)&v61.__r_.__value_.__s + 23) = 12;
        uint64_t v30 = &v61;
      }
      strcpy((char *)v30, "SharedStatus");
      std::allocate_shared[abi:ne180100]<QP::LexemeStatus,std::allocator<QP::LexemeStatus>,std::string &,char const*&,CFRange &,void>((uint64_t)&v61, QP::kActive, (uint64_t)&v65, &v58);
      goto LABEL_61;
    }
    if (CFStringsAreEqual(a6, kQPParseAttributeTaggedKey))
    {
      QP::U2Parser::lexemeForTokenWithRange((QP::U2Parser *)a1, a2, v65, (const __CFString **)&v64, @"Tag", @"Status", &v58);
      goto LABEL_8;
    }
    if (CFStringsAreEqual(a6, kQPParseAttributeFlagColorKey))
    {
      QP::U2Parser::lexemeForTokenWithRange((QP::U2Parser *)a1, a2, v65, (const __CFString **)&v64, @"Flag", @"Status", &v58);
      goto LABEL_8;
    }
    if (CFStringsAreEqual(a6, kQPParseAttributeTagColorKey))
    {
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      {
        v61.__r_.__value_.__l.__size_ = 14;
        CFStringRef v35 = (std::string *)v61.__r_.__value_.__r.__words[0];
      }
      else
      {
        *((unsigned char *)&v61.__r_.__value_.__s + 23) = 14;
        CFStringRef v35 = &v61;
      }
      strcpy((char *)v35, "TagColorStatus");
      QP::getUTF8StringFromCFString(a2, &v58);
      std::allocate_shared[abi:ne180100]<QP::LexemeValue,std::allocator<QP::LexemeValue>,std::string &,std::string,CFRange &,void>((uint64_t)&v61, (uint64_t)&v58, (uint64_t)&v65, &v59);
      long long v37 = v59;
      long long v59 = 0uLL;
      uint64_t v38 = (std::__shared_weak_count *)__str[1];
      *(_OWORD *)std::string __str = v37;
      if (v38)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v38);
        if (*((void *)&v59 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v59 + 1));
        }
      }
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v58.__r_.__value_.__l.__data_);
      }
      goto LABEL_64;
    }
    if (CFStringsAreEqual(a6, kQPParseAttributeRepliedKey))
    {
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      {
        v61.__r_.__value_.__l.__size_ = 13;
        CFArrayRef v36 = (std::string *)v61.__r_.__value_.__r.__words[0];
      }
      else
      {
        *((unsigned char *)&v61.__r_.__value_.__s + 23) = 13;
        CFArrayRef v36 = &v61;
      }
      strcpy((char *)v36, "RepliedStatus");
      std::allocate_shared[abi:ne180100]<QP::LexemeStatus,std::allocator<QP::LexemeStatus>,std::string &,char const*&,CFRange &,void>((uint64_t)&v61, QP::kActive, (uint64_t)&v65, &v58);
      goto LABEL_61;
    }
    if (CFStringsAreEqual(a6, kQPParseAttributeGroupActionKey))
    {
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      {
        v61.__r_.__value_.__l.__size_ = 11;
        uint64_t v39 = (std::string *)v61.__r_.__value_.__r.__words[0];
      }
      else
      {
        *((unsigned char *)&v61.__r_.__value_.__s + 23) = 11;
        uint64_t v39 = &v61;
      }
      strcpy((char *)v39, "GroupStatus");
      std::allocate_shared[abi:ne180100]<QP::LexemeStatus,std::allocator<QP::LexemeStatus>,std::string &,char const*&,CFRange &,void>((uint64_t)&v61, QP::kActive, (uint64_t)&v65, &v58);
      goto LABEL_61;
    }
    if (CFStringsAreEqual(a6, kQPParseAttributeReadKey))
    {
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      {
        v61.__r_.__value_.__l.__size_ = 10;
        uint64_t v40 = (std::string *)v61.__r_.__value_.__r.__words[0];
      }
      else
      {
        *((unsigned char *)&v61.__r_.__value_.__s + 23) = 10;
        uint64_t v40 = &v61;
      }
      strcpy((char *)v40, "ReadStatus");
      std::allocate_shared[abi:ne180100]<QP::LexemeStatus,std::allocator<QP::LexemeStatus>,std::string &,char const*&,CFRange &,void>((uint64_t)&v61, QP::kActive, (uint64_t)&v65, &v58);
      goto LABEL_61;
    }
    if (CFStringsAreEqual(a6, kQPParseAttributeUnreadKey))
    {
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      {
        v61.__r_.__value_.__l.__size_ = 10;
        uint64_t v41 = (std::string *)v61.__r_.__value_.__r.__words[0];
      }
      else
      {
        *((unsigned char *)&v61.__r_.__value_.__s + 23) = 10;
        uint64_t v41 = &v61;
      }
      strcpy((char *)v41, "ReadStatus");
      std::allocate_shared[abi:ne180100]<QP::LexemeStatus,std::allocator<QP::LexemeStatus>,std::string &,char const*&,CFRange &,void>((uint64_t)&v61, QP::kInactive, (uint64_t)&v65, &v58);
LABEL_61:
      long long v31 = *(_OWORD *)&v58.__r_.__value_.__l.__data_;
      *(_OWORD *)&v58.__r_.__value_.__l.__data_ = 0uLL;
      uint64_t v32 = (std::__shared_weak_count *)__str[1];
      *(_OWORD *)std::string __str = v31;
      if (v32)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v32);
        if (v58.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v58.__r_.__value_.__l.__size_);
        }
      }
LABEL_64:
      uint64_t v33 = __str[0];
      __int16 v34 = 5;
LABEL_65:
      LOWORD(v33[3].__r_.__value_.__r.__words[2]) = v34;
      goto LABEL_16;
    }
    if (CFStringsAreEqual(a6, kQPParseAttributeAttachmentKey))
    {
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      {
        v61.__r_.__value_.__l.__size_ = 10;
        uint64_t v42 = (std::string *)v61.__r_.__value_.__r.__words[0];
      }
      else
      {
        *((unsigned char *)&v61.__r_.__value_.__s + 23) = 10;
        uint64_t v42 = &v61;
      }
      strcpy((char *)v42, "Attachment");
      std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,std::string &,CFRange &,void>((uint64_t)&v61, (uint64_t)&v65, &v58);
      goto LABEL_8;
    }
    if (CFStringsAreEqual(a6, kQPParseAttributeAttachedKindKey))
    {
      QP::U2Parser::lexemeForTokenWithRange((QP::U2Parser *)a1, a2, v65, (const __CFString **)&v64, @"Kind", &stru_26D832058, &v58);
      goto LABEL_8;
    }
    if (CFStringsAreEqual(a6, kQPParseAttributeAttachedNameKey))
    {
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      {
        v61.__r_.__value_.__l.__size_ = 12;
        uint64_t v43 = (std::string *)v61.__r_.__value_.__r.__words[0];
      }
      else
      {
        *((unsigned char *)&v61.__r_.__value_.__s + 23) = 12;
        uint64_t v43 = &v61;
      }
      strcpy((char *)v43, "AttachedName");
      QP::getUTF8StringFromCFString(a2, &v58);
      std::allocate_shared[abi:ne180100]<QP::LexemeValue,std::allocator<QP::LexemeValue>,std::string &,std::string,CFRange &,void>((uint64_t)&v61, (uint64_t)&v58, (uint64_t)&v65, &v59);
      goto LABEL_111;
    }
    if (CFStringsAreEqual(a6, kQPParseAttributeTransportActionKey))
    {
LABEL_108:
      std::string::__assign_external(&v61, (const std::string::value_type *)QP::kLexemeTextType);
      QP::getUTF8StringFromCFString(a2, &v58);
      std::allocate_shared[abi:ne180100]<QP::LexemeValue,std::allocator<QP::LexemeValue>,std::string &,std::string,CFRange &,void>((uint64_t)&v61, (uint64_t)&v58, (uint64_t)&v65, &v59);
LABEL_111:
      long long v44 = v59;
      long long v59 = 0uLL;
      long long v45 = (std::__shared_weak_count *)__str[1];
      *(_OWORD *)std::string __str = v44;
      if (v45)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v45);
        if (*((void *)&v59 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v59 + 1));
        }
      }
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v58.__r_.__value_.__l.__data_);
      }
      uint64_t v33 = __str[0];
      __int16 v34 = 6;
      goto LABEL_65;
    }
    if (CFStringsAreEqual(a6, kQPParseAttributePrintedActionKey)
      || CFStringsAreEqual(a6, kQPParseAttributeCreatedActionKey)
      || CFStringsAreEqual(a6, kQPParseAttributeModifiedActionKey))
    {
      goto LABEL_124;
    }
    if (CFStringsAreEqual(a6, kQPParseAttributeTitleKey)) {
      goto LABEL_108;
    }
    if (CFStringsAreEqual(a6, kQPParseAttributeFlightActionKey)
      || CFStringsAreEqual(a6, kQPParseAttributeHotelActionKey))
    {
LABEL_124:
      QP::U2Parser::lexemeForTokenWithRange((QP::U2Parser *)a1, a2, v65, (const __CFString **)&v64, @"Action", &stru_26D832058, &v58);
      goto LABEL_8;
    }
    if (CFStringsAreEqual(a6, kQPParseAttributeFlightArrivalLocationKey)
      || CFStringsAreEqual(a6, kQPParseAttributeFlightDepartureLocationKey))
    {
      QP::U2Parser::lexemeForTokenWithRange((QP::U2Parser *)a1, a2, v65, (const __CFString **)&v64, &stru_26D832058, &stru_26D832058, &v58);
      goto LABEL_8;
    }
    if (CFStringsAreEqual(a6, kQPParseAttributeFlightCarrierKey)
      || CFStringsAreEqual(a6, kQPParseAttributeFlightLocationKey)
      || CFStringsAreEqual(a6, kQPParseAttributeHotelNameKey)
      || CFStringsAreEqual(a6, kQPParseAttributeHotelProviderKey)
      || CFStringsAreEqual(a6, kQPParseAttributeRestaurantActionKey)
      || CFStringsAreEqual(a6, kQPParseAttributeRestaurantNameKey))
    {
      goto LABEL_108;
    }
    if (!CFStringsAreEqual(a6, kQPParseAttributeBookmarkedActionKey)
      && !CFStringsAreEqual(a6, kQPParseAttributeBrowsedActionKey)
      && !CFStringsAreEqual(a6, kQPParseAttributeReadingListActionKey))
    {
      if (CFStringsAreEqual(a6, kQPParseAttributeEventKindKey))
      {
        if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
        {
          v61.__r_.__value_.__l.__size_ = 9;
          long long v46 = (std::string *)v61.__r_.__value_.__r.__words[0];
        }
        else
        {
          *((unsigned char *)&v61.__r_.__value_.__s + 23) = 9;
          long long v46 = &v61;
        }
        strcpy((char *)v46, "EventKind");
        std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,std::string &,CFRange &,void>((uint64_t)&v61, (uint64_t)&v65, &v58);
        goto LABEL_8;
      }
      if (CFStringsAreEqual(a6, kQPParseAttributeKindReminderKey))
      {
        if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
        {
          v61.__r_.__value_.__l.__size_ = 12;
          long long v47 = (std::string *)v61.__r_.__value_.__r.__words[0];
        }
        else
        {
          *((unsigned char *)&v61.__r_.__value_.__s + 23) = 12;
          long long v47 = &v61;
        }
        strcpy((char *)v47, "ReminderKind");
        std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,std::string &,CFRange &,void>((uint64_t)&v61, (uint64_t)&v65, &v58);
LABEL_8:
        long long v16 = *(_OWORD *)&v58.__r_.__value_.__l.__data_;
        *(_OWORD *)&v58.__r_.__value_.__l.__data_ = 0uLL;
        uint64_t v17 = (std::__shared_weak_count *)__str[1];
        *(_OWORD *)std::string __str = v16;
        if (!v17) {
          goto LABEL_16;
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
        std::string::size_type size = (std::__shared_weak_count *)v58.__r_.__value_.__l.__size_;
        if (!v58.__r_.__value_.__l.__size_) {
          goto LABEL_16;
        }
LABEL_15:
        std::__shared_weak_count::__release_shared[abi:ne180100](size);
        goto LABEL_16;
      }
      if (!CFStringsAreEqual(a6, kQPParseAttributeAllDayActionKey)
        && !CFStringsAreEqual(a6, kQPParseAttributeCompletedActionKey)
        && !CFStringsAreEqual(a6, kQPParseAttributeDueActionKey)
        && !CFStringsAreEqual(a6, kQPParseAttributeDraftActionKey)
        && !CFStringsAreEqual(a6, kQPParseAttributeJunkActionKey)
        && !CFStringsAreEqual(a6, kQPParseAttributeArchiveActionKey))
      {
        if (CFStringsAreEqual(a6, kQPParseAttributeEarliestActionKey)
          || CFStringsAreEqual(a6, kQPParseAttributeLatestActionKey))
        {
          CFDateFormatterRef formatter = 0;
          CFAllocatorRef v48 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
          CFDateFormatterRef ISO8601Formatter = CFDateFormatterCreateISO8601Formatter((CFAllocatorRef)*MEMORY[0x263EFFB08], 0x333uLL);
          nlp::CFScopedPtr<__CFDateFormatter *>::reset((const void **)&formatter, ISO8601Formatter);
          CFAbsoluteTime CurrentTime = getCurrentTime(*(__CFCalendar **)(a1[10] + 88), *(const __CFDate **)(a1[10] + 72));
          CFDateRef v51 = CFDateCreate(v48, CurrentTime);
          CFDateRef v56 = v51;
          if (v51)
          {
            CFStringRef StringWithDate = CFDateFormatterCreateStringWithDate(v48, formatter, v51);
            if (StringWithDate)
            {
              std::string::__assign_external(&v61, (const std::string::value_type *)QP::kLexemeTextType);
              QP::getUTF8StringFromCFString(StringWithDate, &v58);
              std::allocate_shared[abi:ne180100]<QP::LexemeValue,std::allocator<QP::LexemeValue>,std::string &,std::string,CFRange &,void>((uint64_t)&v61, (uint64_t)&v58, (uint64_t)&v65, &v59);
              long long v53 = v59;
              long long v59 = 0uLL;
              long long v54 = (std::__shared_weak_count *)__str[1];
              *(_OWORD *)std::string __str = v53;
              if (v54)
              {
                std::__shared_weak_count::__release_shared[abi:ne180100](v54);
                if (*((void *)&v59 + 1)) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v59 + 1));
                }
              }
              if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v58.__r_.__value_.__l.__data_);
              }
              LOWORD(__str[0][3].__r_.__value_.__r.__words[2]) = 6;
            }
          }
          nlp::CFScopedPtr<__CFDate const*>::reset((const void **)&v56, 0);
          nlp::CFScopedPtr<__CFDateFormatter *>::reset((const void **)&formatter, 0);
        }
        goto LABEL_16;
      }
    }
LABEL_7:
    std::string::__assign_external(&v61, (const std::string::value_type *)QP::kLexemeTextType);
    std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,std::string &,CFRange &,void>((uint64_t)&v61, (uint64_t)&v65, &v58);
    goto LABEL_8;
  }
  std::string::operator=(&v61, *(const std::string **)a7);
  unint64_t v20 = *(std::string **)a7;
  uint64_t v19 = *(std::string **)(a7 + 8);
  if (v19) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)&v19->__r_.__value_.__l.__size_, 1uLL, memory_order_relaxed);
  }
  std::string::size_type size = (std::__shared_weak_count *)__str[1];
  __str[0] = v20;
  __str[1] = v19;
  if (size) {
    goto LABEL_15;
  }
LABEL_16:
  unint64_t v21 = *a9;
  unint64_t v22 = __str[0];
  uint64_t v23 = (std::__shared_weak_count *)__str[1];
  if (__str[1])
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)&__str[1]->__r_.__value_.__l.__size_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v24 = (std::__shared_weak_count *)v21[4].__r_.__value_.__r.__words[2];
  v21[4].__r_.__value_.__l.__size_ = (std::string::size_type)v22;
  v21[4].__r_.__value_.__r.__words[2] = (std::string::size_type)v23;
  if (v24) {
    std::__shared_weak_count::__release_weak(v24);
  }
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  std::vector<std::shared_ptr<QP::Lexeme>>::push_back[abi:ne180100](a1 + 23, (long long *)__str);
  QP::getUTF8StringFromCFString(v64, &v58);
  uint64_t v25 = *a9;
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v58.__r_.__value_.__l.__data_, v58.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v58;
  }
  std::string::operator=(v25 + 2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
  if (__str[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__str[1]);
  }
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v61.__r_.__value_.__l.__data_);
  }
}

void sub_224DE09D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, const void *a16, const void *a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  nlp::CFScopedPtr<__CFDate const*>::reset(&a16, 0);
  nlp::CFScopedPtr<__CFDateFormatter *>::reset(&a17, 0);
  if (a28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a28);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  CFArrayRef v36 = *(std::__shared_weak_count **)(v34 + 8);
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  _Unwind_Resume(a1);
}

BOOL QP::U2Parser::isIntentUnsafe(QP::U2Parser *this)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  char v9 = 0;
  unint64_t v1 = __ROR8__(*(void *)(*((void *)this + 10) + 8), 1);
  BOOL v2 = *(void *)(*((void *)this + 10) + 8) == 9 || v1 >= 7;
  if (v2 || ((0x71u >> v1) & 1) == 0)
  {
    v5[0] = MEMORY[0x263EF8330];
    v5[1] = 3221225472;
    v5[2] = ___ZN2QP8U2Parser14isIntentUnsafeEv_block_invoke;
    v5[3] = &unk_264705B90;
    v5[4] = &v6;
    QP::U2Parser::enumerateParses((uint64_t)this, v5);
    BOOL v3 = *((unsigned char *)v7 + 24) != 0;
  }
  else
  {
    BOOL v3 = 0;
  }
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_224DE0BFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void QP::U2Parser::enumerateParses(uint64_t a1, void *a2)
{
  BOOL v3 = a2;
  char v9 = 0;
  uint64_t v5 = *(uint64_t **)(a1 + 160);
  for (uint64_t i = *(uint64_t **)(a1 + 168); v5 != i; v5 += 2)
  {
    uint64_t v7 = *v5;
    uint64_t v6 = (std::__shared_weak_count *)v5[1];
    uint64_t v8 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v3[2](v3, &v7, &v9);
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    if (v9) {
      break;
    }
  }
}

void sub_224DE0CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }

  _Unwind_Resume(a1);
}

CFDictionaryRef ___ZN2QP8U2Parser14isIntentUnsafeEv_block_invoke(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  CFDictionaryRef result = *(const __CFDictionary **)(*(void *)a2 + 88);
  if (result)
  {
    CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(result, kQPQUOutputIsUnsafeKey);
    CFDictionaryRef result = (const __CFDictionary *)CFBooleanGetValue(Value);
    if (result)
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
      *a3 = 1;
    }
  }
  return result;
}

uint64_t QP::U2Parser::getEmbeddingString(QP::U2Parser *this)
{
  return *((void *)this + 26);
}

void QP::U2Parser::clear(QP::U2Parser *this)
{
  *((unsigned char *)this + 216) = 0;
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)this + 19, 0);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__clear[abi:ne180100]((uint64_t *)this + 20);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__clear[abi:ne180100]((uint64_t *)this + 23);
  BOOL v3 = (void *)*((void *)this + 17);
  BOOL v2 = (char *)this + 136;
  std::__tree<unsigned short>::destroy((uint64_t)(v2 - 8), v3);
  *((void *)v2 - QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = v2;
  *(void *)BOOL v2 = 0;
  *((void *)v2 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = 0;
  nlp::CFScopedPtr<__CFAttributedString const*>::reset((const void **)v2 + 9, 0);
}

unint64_t QPTimingNanosecondsSinceAbsoluteTime(uint64_t a1)
{
  uint64_t v2 = mach_absolute_time();
  if (QPTimingNanosecondsSinceAbsoluteTime(unsigned long long)::onceToken != -1) {
    dispatch_once(&QPTimingNanosecondsSinceAbsoluteTime(unsigned long long)::onceToken, &__block_literal_global_272);
  }
  return (v2 - a1)
       * QPTimingNanosecondsSinceAbsoluteTime(unsigned long long)::sTimebaseInfo
       / *(unsigned int *)algn_26AA70AE4;
}

uint64_t QP::tokenHasArgIdAsTopPredictionOrWithScore(void *a1, uint64_t a2, int a3, float a4)
{
  id v7 = a1;
  unint64_t v8 = 0;
  while (1)
  {
    unint64_t v9 = v8;
    CFStringRef v10 = [v7 argIdsForTokens];
    long long v11 = [v10 objectAtIndexedSubscript:a2];
    unint64_t v12 = [v11 count];

    if (v12 <= v9) {
      break;
    }
    if (v9)
    {
      long long v14 = [v7 argScoresForTokens];
      std::string::size_type v15 = [v14 objectAtIndexedSubscript:a2];
      long long v16 = [v15 objectAtIndexedSubscript:v9];
      [v16 floatValue];
      float v18 = v17;

      if (v18 < a4)
      {
        char v13 = 0;
        break;
      }
    }
    uint64_t v19 = [v7 argIdsForTokens];
    unint64_t v20 = [v19 objectAtIndexedSubscript:a2];
    unint64_t v21 = [v20 objectAtIndexedSubscript:v9];
    int v22 = [v21 intValue];

    unint64_t v8 = v9 + 1;
    if (v22 == a3)
    {
      char v13 = 1;
      break;
    }
  }
  uint64_t v23 = (v12 > v9) & v13;

  return v23;
}

void sub_224DE0F6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id QP::visualIdentifiersWithTimeout(void *a1, uint64_t a2, char a3, void *a4, void *a5)
{
  v50[1] = *MEMORY[0x263EF8340];
  id v9 = a1;
  uint64_t v43 = 0;
  long long v44 = &v43;
  uint64_t v45 = 0x3032000000;
  long long v46 = __Block_byref_object_copy__273;
  long long v47 = __Block_byref_object_dispose__274;
  id v48 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = &v37;
  uint64_t v39 = 0x3032000000;
  uint64_t v40 = __Block_byref_object_copy__273;
  uint64_t v41 = __Block_byref_object_dispose__274;
  id v42 = 0;
  dispatch_semaphore_t v10 = dispatch_semaphore_create(0);
  qos_class_t v11 = qos_class_self();
  unint64_t v12 = dispatch_get_global_queue(v11, 0);
  uint64_t block = MEMORY[0x263EF8330];
  uint64_t v25 = 3321888768;
  uint64_t v26 = ___ZN2QPL28visualIdentifiersWithTimeoutEP8NSStringb27QPECRClientEntityFilterTypebNSt3__110shared_ptrINS_19ParserConfigurationEEEPU15__autoreleasingP7NSError_block_invoke_0;
  uint64_t v27 = &unk_26D830B78;
  char v13 = (std::__shared_weak_count *)a4[1];
  uint64_t v32 = *a4;
  uint64_t v33 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v30 = &v43;
  id v14 = v9;
  char v35 = 0;
  uint64_t v34 = a2;
  char v36 = a3;
  id v28 = v14;
  long long v31 = &v37;
  std::string::size_type v15 = v10;
  uint64_t v29 = v15;
  dispatch_async(v12, &block);

  if (*(unsigned char *)(*a4 + 34)) {
    dispatch_time_t v16 = -1;
  }
  else {
    dispatch_time_t v16 = dispatch_time(0, 100000000);
  }
  if (dispatch_semaphore_wait(v15, v16))
  {
    float v17 = objc_msgSend(NSString, "stringWithFormat:", @"ECR timed out after %dms", 100, block, v25, v26, v27, v28);
    float v18 = (void *)MEMORY[0x263F087E8];
    uint64_t v49 = *MEMORY[0x263F08320];
    v50[0] = v17;
    uint64_t v19 = [NSDictionary dictionaryWithObjects:v50 forKeys:&v49 count:1];
    uint64_t v20 = [v18 errorWithDomain:@"com.apple.QueryParser.QueryUnderstandingError" code:-2002 userInfo:v19];
    unint64_t v21 = (void *)v38[5];
    v38[5] = v20;
  }
  if (a5) {
    *a5 = (id) v38[5];
  }
  id v22 = (id)v44[5];

  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }

  _Block_object_dispose(&v37, 8);
  _Block_object_dispose(&v43, 8);

  return v22;
}

void sub_224DE12B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,id a33)
{
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }

  _Block_object_dispose(&a22, 8);
  _Block_object_dispose(&a28, 8);

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__7(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  return result;
}

void __Block_byref_object_dispose__7(uint64_t a1)
{
  unint64_t v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void ___ZN2QP8U2Parser13parseInternalENSt3__110shared_ptrINS_5ParseEEEl_block_invoke(void *a1, uint64_t *a2)
{
  uint64_t v4 = (uint64_t *)a1[5];
  uint64_t v5 = *a2;
  uint64_t v6 = *(void *)(*a2 + 16);
  uint64_t v7 = *(void *)(*a2 + 24);
  unint64_t v8 = *(std::__shared_weak_count **)(*a2 + 112);
  if (v8)
  {
    id v9 = std::__shared_weak_count::lock(v8);
    if (*(unsigned __int16 *)(*(void *)(v5 + 104) + 88) - 1 >= 4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      return;
    }
  }
  else
  {
    if (MEMORY[0x58] - 1 > 3) {
      return;
    }
    id v9 = 0;
  }
  uint64_t v10 = a1[6];
  BOOL v12 = v10 <= v6;
  uint64_t v11 = a1[7] + v10;
  BOOL v12 = !v12 || v11 < v7 + v6;
  int v13 = !v12;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (v13)
  {
    uint64_t v14 = *a2;
    std::string::size_type v15 = *(std::__shared_weak_count **)(*a2 + 112);
    if (v15)
    {
      dispatch_time_t v16 = std::__shared_weak_count::lock(v15);
      if (v16) {
        uint64_t v17 = *(void *)(v14 + 104);
      }
      else {
        uint64_t v17 = 0;
      }
    }
    else
    {
      uint64_t v17 = 0;
      dispatch_time_t v16 = 0;
    }
    unint64_t v18 = v4[25];
    uint64_t v19 = (void *)v4[24];
    if ((unint64_t)v19 >= v18)
    {
      uint64_t v21 = v4[23];
      uint64_t v22 = ((uint64_t)v19 - v21) >> 4;
      unint64_t v23 = v22 + 1;
      if ((unint64_t)(v22 + 1) >> 60) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v24 = v18 - v21;
      if (v24 >> 3 > v23) {
        unint64_t v23 = v24 >> 3;
      }
      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v25 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v25 = v23;
      }
      long long v44 = v4 + 25;
      uint64_t v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>>((uint64_t)(v4 + 25), v25);
      uint64_t v27 = &v26[16 * v22];
      *(void *)&long long v41 = v26;
      *((void *)&v41 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = v27;
      uint64_t v43 = &v26[16 * v28];
      *(void *)uint64_t v27 = v17;
      *((void *)v27 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = v16;
      id v42 = v27 + 16;
      std::vector<std::shared_ptr<QP::Lexeme>>::__swap_out_circular_buffer(v4 + 23, &v41);
      uint64_t v20 = (void *)v4[24];
      std::__split_buffer<std::shared_ptr<QP::GraphStructureStack::Node>>::~__split_buffer((void **)&v41);
    }
    else
    {
      void *v19 = v17;
      v19[1] = v16;
      uint64_t v20 = v19 + 2;
      v4[24] = (uint64_t)(v19 + 2);
    }
    v4[24] = (uint64_t)v20;
    uint64_t v29 = *a2;
    *(_DWORD *)(*a2 + 76) = 8;
    uint64_t v30 = *(void *)(a1[4] + 8);
    uint64_t v32 = *(void *)(v30 + 48);
    long long v31 = *(std::__shared_weak_count **)(v30 + 56);
    uint64_t v39 = v32;
    uint64_t v40 = v31;
    if (v31)
    {
      atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v29 = *a2;
    }
    uint64_t v33 = (std::__shared_weak_count *)a2[1];
    uint64_t v37 = v29;
    uint64_t v38 = v33;
    if (v33) {
      atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    QP::operator+(&v39, &v37, &v41);
    uint64_t v34 = *(void *)(a1[4] + 8);
    long long v35 = v41;
    long long v41 = 0uLL;
    char v36 = *(std::__shared_weak_count **)(v34 + 56);
    *(_OWORD *)(v34 + 48) = v35;
    if (v36)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v36);
      if (*((void *)&v41 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v41 + 1));
      }
    }
    if (v38) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v38);
    }
    if (v40) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v40);
    }
  }
}

void sub_224DE15A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::__split_buffer<std::shared_ptr<QP::GraphStructureStack::Node>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t QP::tokenHasArgIdWithScore(void *a1, uint64_t a2, int a3)
{
  id v5 = a1;
  unint64_t v6 = 0;
  while (1)
  {
    uint64_t v7 = [v5 argIdsForTokens];
    unint64_t v8 = [v7 objectAtIndexedSubscript:a2];
    unint64_t v9 = [v8 count];

    if (v9 <= v6) {
      break;
    }
    uint64_t v10 = [v5 argScoresForTokens];
    uint64_t v11 = [v10 objectAtIndexedSubscript:a2];
    BOOL v12 = [v11 objectAtIndexedSubscript:v6];
    [v12 floatValue];
    float v14 = v13;
    float v15 = flt_224E1E488[v6 == 0];

    if (v14 < v15) {
      break;
    }
    dispatch_time_t v16 = [v5 argIdsForTokens];
    uint64_t v17 = [v16 objectAtIndexedSubscript:a2];
    unint64_t v18 = [v17 objectAtIndexedSubscript:v6];
    int v19 = [v18 intValue];

    ++v6;
    if (v19 == a3)
    {
      uint64_t v20 = 1;
      goto LABEL_7;
    }
  }
  uint64_t v20 = 0;
LABEL_7:

  return v20;
}

void sub_224DE173C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN2QP8U2Parser13parseInternalENSt3__110shared_ptrINS_5ParseEEEl_block_invoke_204(void *a1, void *a2)
{
  uint64_t v4 = (uint64_t *)a1[5];
  uint64_t v5 = *a2;
  uint64_t v6 = *(void *)(*a2 + 16);
  uint64_t v7 = *(void *)(*a2 + 24);
  unint64_t v8 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(*a2 + 112));
  unint64_t v9 = *(long long **)(v5 + 104);
  if (*((char *)v9 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v39, *(const std::string::value_type **)v9, *((void *)v9 + 1));
  }
  else
  {
    long long v10 = *v9;
    v39.__r_.__value_.__r.__words[2] = *((void *)v9 + 2);
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v10;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  if (std::string::starts_with[abi:ne180100]((uint64_t *)&v39, "Action"))
  {
    uint64_t v11 = a1[6];
    if (v6 <= v11 && v7 + v6 >= a1[7] + v11)
    {
      uint64_t v13 = *a2;
      float v14 = *(std::__shared_weak_count **)(*a2 + 112);
      if (v14)
      {
        float v15 = std::__shared_weak_count::lock(v14);
        if (v15) {
          uint64_t v16 = *(void *)(v13 + 104);
        }
        else {
          uint64_t v16 = 0;
        }
      }
      else
      {
        uint64_t v16 = 0;
        float v15 = 0;
      }
      unint64_t v17 = v4[25];
      unint64_t v18 = (void *)v4[24];
      if ((unint64_t)v18 >= v17)
      {
        uint64_t v20 = v4[23];
        uint64_t v21 = ((uint64_t)v18 - v20) >> 4;
        unint64_t v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 60) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v23 = v17 - v20;
        if (v23 >> 3 > v22) {
          unint64_t v22 = v23 >> 3;
        }
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v24 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v22;
        }
        uint64_t v43 = v4 + 25;
        unint64_t v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<QP::GraphStructureStack::Node>>>((uint64_t)(v4 + 25), v24);
        uint64_t v26 = &v25[16 * v21];
        *(void *)&long long v40 = v25;
        *((void *)&v40 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = v26;
        id v42 = &v25[16 * v27];
        *(void *)uint64_t v26 = v16;
        *((void *)v26 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = v15;
        long long v41 = v26 + 16;
        std::vector<std::shared_ptr<QP::Lexeme>>::__swap_out_circular_buffer(v4 + 23, &v40);
        int v19 = (void *)v4[24];
        std::__split_buffer<std::shared_ptr<QP::GraphStructureStack::Node>>::~__split_buffer((void **)&v40);
      }
      else
      {
        void *v18 = v16;
        v18[1] = v15;
        int v19 = v18 + 2;
        v4[24] = (uint64_t)(v18 + 2);
      }
      v4[24] = (uint64_t)v19;
      uint64_t v28 = *(void *)(a1[4] + 8);
      uint64_t v30 = *(void *)(v28 + 48);
      uint64_t v29 = *(std::__shared_weak_count **)(v28 + 56);
      uint64_t v37 = v30;
      uint64_t v38 = v29;
      if (v29) {
        atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v31 = (std::__shared_weak_count *)a2[1];
      uint64_t v35 = *a2;
      char v36 = v31;
      if (v31) {
        atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      QP::operator+(&v37, &v35, &v40);
      uint64_t v32 = *(void *)(a1[4] + 8);
      long long v33 = v40;
      long long v40 = 0uLL;
      uint64_t v34 = *(std::__shared_weak_count **)(v32 + 56);
      *(_OWORD *)(v32 + 48) = v33;
      if (v34)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v34);
        if (*((void *)&v40 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v40 + 1));
        }
      }
      if (v36) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v36);
      }
      if (v38) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v38);
      }
    }
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
}

void sub_224DE19B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

id QP::debugDescriptionWithQUOutput(void *a1, void *a2, void *a3, void *a4, int a5)
{
  id v8 = a1;
  id v73 = a2;
  id v68 = a3;
  id v79 = a4;
  context = (void *)MEMORY[0x22A624280]();
  CFStringRef v77 = [MEMORY[0x263F089D8] string];
  id v67 = v8;
  unint64_t v9 = [v67 length];
  if (v9 > 4)
  {
    BOOL v12 = NSString;
    uint64_t v13 = [v67 substringToIndex:3];
    float v14 = [v67 substringFromIndex:v9 - 1];
    id v11 = [v12 stringWithFormat:@"%@...%@<%lu chars>", v13, v14, v9];

    long long v10 = v67;
  }
  else
  {
    long long v10 = v67;
    id v11 = v67;
  }

  [v77 appendFormat:@"  q: %@\n", v11];
  float v15 = [v73 intentId];
  [v15 intValue];
  uint64_t v16 = intentLabel();

  uint64_t v66 = [NSString stringWithUTF8String:v16];
  unint64_t v17 = [v73 safetyScore];
  [v17 floatValue];
  [v77 appendFormat:@"INTENT: %@, unsafeConf: %.2f\n", v66, v18];

  for (unint64_t i = 0; ; unint64_t i = v72 + 1)
  {
    uint64_t v20 = [v73 tokens];
    unint64_t v21 = [v20 count];

    if (v21 <= i) {
      break;
    }
    unint64_t v22 = [v73 tokens];
    unint64_t v72 = i;
    uint64_t v23 = [v22 objectAtIndexedSubscript:i];

    unint64_t v24 = [v73 tokenRanges];
    unint64_t v25 = [v24 objectAtIndexedSubscript:i];
    v81.CFIndex location = [v25 rangeValue];
    uint64_t v26 = NSStringFromRange(v81);
    [v77 appendFormat:@"  %@:", v26];

    uint64_t v27 = [v73 argIdsForTokens];
    uint64_t v78 = [v27 objectAtIndexedSubscript:v72];

    uint64_t v28 = [v73 argScoresForTokens];
    uint64_t v75 = [v28 objectAtIndexedSubscript:v72];

    long long v69 = [v68 objectAtIndexedSubscript:v72];
    uint64_t v71 = [v69 objectForKeyedSubscript:kQPQUOutputSpanTypesKey];
    if ([v71 count])
    {
      uint64_t v29 = NSString;
      uint64_t v30 = [v71 componentsJoinedByString:@","];
      uint64_t v70 = [v29 stringWithFormat:@" spans:%@", v30];
    }
    else
    {
      uint64_t v70 = &stru_26D832058;
    }
    int v31 = 0;
    unint64_t v32 = 0;
    uint64_t v76 = &stru_26D832058;
    while (v32 < [v78 count])
    {
      if (v32) {
        [v77 appendString:@","];
      }
      long long v33 = [v78 objectAtIndexedSubscript:v32];
      uint64_t v34 = (void *)[v33 intValue];

      uint64_t v35 = [NSString stringWithUTF8String:intentArgShortLabel()];
      if (!v32
        && a5
        && ([v73 tokens],
            char v36 = objc_claimAutoreleasedReturnValue(),
            uint64_t v37 = [v36 count] - 1,
            v36,
            v37 == v72))
      {
        uint64_t v38 = NSString;
        std::string v39 = [NSString stringWithUTF8String:intentArgShortLabel()];
        uint64_t v34 = [v38 stringWithFormat:@"%@ {originally %@}", v39, v35];

        uint64_t v35 = v34;
      }
      else if (v34 != 2)
      {
        long long v40 = [v79 objectForKeyedSubscript:v23];
        uint64_t v34 = (void *)[v40 count];

        if (!v34) {
          goto LABEL_24;
        }
      }
      long long v41 = [v79 objectForKeyedSubscript:v23];

      if (v41)
      {
        id v42 = [v79 objectForKeyedSubscript:v23];
        uint64_t v43 = [v42 allKeys];
        long long v44 = [v43 firstObject];

        uint64_t v45 = [v79 objectForKeyedSubscript:v23];
        long long v46 = [v45 objectForKeyedSubscript:v44];

        long long v47 = [v79 objectForKeyedSubscript:v23];
        unint64_t v48 = [v47 count];

        uint64_t v49 = NSString;
        [v46 firstObject];
        if (v48 < 2) {
          uint64_t v34 = {;
        }
          [v34 doubleValue];
          uint64_t v58 = v57;
          long long v52 = [v46 lastObject];
          [v52 doubleValue];
          [v49 stringWithFormat:@"vids: (%@(%.2g, %2.g))", v44, v58, v59];
          long long v55 = v76;
          uint64_t v76 = (__CFString *)objc_claimAutoreleasedReturnValue();
        }
        else {
          uint64_t v34 = {;
        }
          [v34 doubleValue];
          uint64_t v51 = v50;
          long long v52 = [v46 lastObject];
          [v52 doubleValue];
          uint64_t v54 = v53;
          long long v55 = [v79 objectForKeyedSubscript:v23];
          uint64_t v56 = [v49 stringWithFormat:@"vids: (%@(%.2g, %.2g) + %lu more)", v44, v51, v54, objc_msgSend(v55, "count") - 1];

          uint64_t v76 = (__CFString *)v56;
        }
      }
LABEL_24:
      uint64_t v60 = [v75 objectAtIndexedSubscript:v32];
      [v60 floatValue];
      LODWORD(v34) = llroundf(v61 * 100.0);

      if (v31 == v34) {
        [v77 appendFormat:@" %@", v35];
      }
      else {
        [v77 appendFormat:@" %@ %d%%", v35, v34];
      }

      ++v32;
      int v31 = (int)v34;
    }
    uint64_t v62 = [(__CFString *)v76 length];
    int v63 = &stru_26D832058;
    if (v62) {
      int v63 = @" ";
    }
    [v77 appendFormat:@"%@%@%@\n", v63, v76, v70];
  }

  return v77;
}

void sub_224DE2118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  _Unwind_Resume(a1);
}

void QP::logQueryUnderstandingOverviewCAEvent(void *a1, void *a2, unsigned int a3, unsigned int a4, BOOL a5)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  id v27 = a1;
  id v28 = a2;
  xpc_object_t empty = xpc_dictionary_create_empty();
  xpc_object_t xdict = empty;
  unint64_t v9 = [v27 intentId];
  unsigned int v10 = [v9 intValue];

  if (v10 >= 3) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = qword_224E1E590[v10];
  }
  BOOL v12 = QPProcessName();
  xpc_dictionary_set_string(empty, "process", v12);
  id v13 = [v28 localeIdentifier];
  float v14 = (const char *)[v13 cStringUsingEncoding:4];

  if (v14) {
    xpc_dictionary_set_string(empty, "locale", v14);
  }
  xpc_dictionary_set_uint64(empty, "queryLength", a3);
  xpc_dictionary_set_uint64(empty, "tokenCount", a4);
  xpc_dictionary_set_uint64(empty, "queryIntent", v11);
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  float v15 = [v27 argIdsForTokens];
  char v16 = 0;
  char v17 = 0;
  char v18 = 0;
  char v19 = 0;
  uint64_t v20 = [v15 countByEnumeratingWithState:&v34 objects:v38 count:16];
  if (v20)
  {
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    char v29 = 0;
    uint64_t v21 = *(void *)v35;
    do
    {
      for (uint64_t i = 0; i != v20; ++i)
      {
        if (*(void *)v35 != v21) {
          objc_enumerationMutation(v15);
        }
        uint64_t v23 = [*(id *)(*((void *)&v34 + 1) + 8 * i) firstObject];
        int v24 = [v23 intValue];

        switch(v24)
        {
          case 0:
            LOBYTE(v3nlp::CFScopedPtr<__CFString const*>::reset((const void **)&a9, 0) = 1;
            break;
          case 1:
            BYTE4(v32) = 1;
            break;
          case 2:
            LOBYTE(v3QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = 1;
            break;
          case 3:
            BYTE4(v33) = 1;
            break;
          case 4:
          case 6:
          case 13:
          case 14:
          case 15:
          case 16:
          case 17:
          case 18:
          case 19:
          case 20:
            continue;
          case 5:
            LOBYTE(v33) = 1;
            break;
          case 7:
            BYTE4(v3nlp::CFScopedPtr<__CFString const*>::reset((const void **)&a9, 0) = 1;
            break;
          case 8:
            LOBYTE(v32) = 1;
            break;
          case 9:
            char v16 = 1;
            break;
          case 10:
            char v19 = 1;
            break;
          case 11:
            char v18 = 1;
            break;
          case 12:
            BYTE4(v3QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = 1;
            break;
          case 21:
            char v17 = 1;
            break;
          default:
            if (v24 == 50) {
              char v29 = 1;
            }
            break;
        }
      }
      uint64_t v20 = [v15 countByEnumeratingWithState:&v34 objects:v38 count:16];
    }
    while (v20);
  }
  else
  {
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    char v29 = 0;
  }

  xpc_dictionary_set_BOOL(xdict, "queryContainsActionTokens", 0);
  xpc_dictionary_set_BOOL(xdict, "queryContainsCaptureDeviceTokens", 0);
  xpc_dictionary_set_BOOL(xdict, "queryContainsEventTokens", v16 & 1);
  xpc_dictionary_set_BOOL(xdict, "queryContainsFavoritedTokens", v17 & 1);
  xpc_dictionary_set_BOOL(xdict, "queryContainsGenericLocationTokens", v18 & 1);
  xpc_dictionary_set_BOOL(xdict, "queryContainsLocationTokens", v19 & 1);
  xpc_dictionary_set_BOOL(xdict, "queryContainsMediaTypeTokens", v32 & 0x100000000);
  xpc_dictionary_set_BOOL(xdict, "queryContainsNounTokens", v33 & 1);
  xpc_dictionary_set_BOOL(xdict, "queryContainsPersonSenderTokens", v33 & 0x100000000);
  xpc_dictionary_set_BOOL(xdict, "queryContainsPersonTokens", v31 & 1);
  xpc_dictionary_set_BOOL(xdict, "queryContainsSortCriteriaTokens", v29 & 1);
  xpc_dictionary_set_BOOL(xdict, "queryContainsSourceAppTokens", v31 & 0x100000000);
  xpc_dictionary_set_BOOL(xdict, "queryContainsTimeTokens", v32 & 1);
  xpc_dictionary_set_BOOL(xdict, "queryContainsUnspecifiedTokens", v30 & 1);
  xpc_dictionary_set_BOOL(xdict, "queryContainsVisualQualityTokens", v30 & 0x100000000);
  xpc_dictionary_set_BOOL(xdict, "ecrGroundedPersonEntity", a5);
  analytics_send_event();
}

void sub_224DE27DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

CFAttributedStringRef QP::createEmbeddingString(void *a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, const __CFAttributedString *a7, uint64_t a8)
{
  uint64_t v110 = *MEMORY[0x263EF8340];
  id v98 = a1;
  id v101 = a2;
  id v92 = a3;
  CFAttributedStringRef v94 = (CFAttributedStringRef)objc_alloc_init(MEMORY[0x263F089B8]);
  uint64_t v12 = *a4;
  uint64_t v13 = a4[1];
  int v14 = 0;
  if (v13 != *a4)
  {
    unint64_t v15 = (v13 - *a4) >> 4;
    if (v15 <= 1) {
      unint64_t v15 = 1;
    }
    do
    {
      uint64_t v16 = *(unsigned __int8 *)(*(void *)v12 + 23);
      int v17 = (char)v16;
      if ((v16 & 0x80u) != 0) {
        uint64_t v16 = *(void *)(*(void *)v12 + 8);
      }
      if (v16 == 14)
      {
        char v18 = v17 >= 0 ? *(unint64_t **)v12 : **(unint64_t ***)v12;
        unint64_t v19 = bswap64(*v18);
        unint64_t v20 = 0x47726F756E646564;
        if (v19 == 0x47726F756E646564
          && (unint64_t v19 = bswap64(*(unint64_t *)((char *)v18 + 6)),
              unint64_t v20 = 0x6564506572736F6ELL,
              v19 == 0x6564506572736F6ELL))
        {
          int v21 = 0;
        }
        else
        {
          int v21 = v19 < v20 ? -1 : 1;
        }
        if (!v21) {
          ++v14;
        }
      }
      v12 += 16;
      --v15;
    }
    while (v15);
  }
  uint64_t v96 = a4;
  unint64_t v22 = [MEMORY[0x263EFFA40] standardUserDefaults];
  uint64_t v23 = [v22 objectForKey:@"EnablePersonalizedEmbedding"];

  id v89 = (void *)v23;
  if (v23)
  {
    int v24 = [MEMORY[0x263EFFA40] standardUserDefaults];
    int v25 = [v24 BOOLForKey:@"EnablePersonalizedEmbedding"];
  }
  else
  {
    int v25 = 0;
  }
  if (u2ParserLogger(void)::token != -1) {
    dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_245);
  }
  uint64_t v26 = u2ParserLogger(void)::log;
  if (os_log_type_enabled((os_log_t)u2ParserLogger(void)::log, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)CFRange buf = 134218240;
    uint64_t v105 = a8;
    __int16 v106 = 1024;
    LODWORD(v107) = v25;
    _os_log_impl(&dword_224D85000, v26, OS_LOG_TYPE_DEFAULT, "[qid=%ld] personalized embedding: %d", buf, 0x12u);
  }
  id v97 = a6;
  unint64_t v27 = 0;
  if (v14 == 1) {
    int v28 = v25;
  }
  else {
    int v28 = 0;
  }
  int v91 = v28;
  while (2)
  {
    char v29 = [v101 tokens];
    BOOL v30 = v27 < [v29 count];

    if (!v30)
    {
      if (u2ParserLogger(void)::token != -1) {
        dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_245);
      }
      uint64_t v76 = (id)u2ParserLogger(void)::log;
      if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
      {
        CFAttributedStringRef v77 = v94;
        unint64_t v78 = [(__CFAttributedString *)v77 length];
        if (v78 > 4)
        {
          uint64_t v80 = -[__CFAttributedString attributedSubstringFromRange:](v77, "attributedSubstringFromRange:", 0, 3);
          NSRange v81 = -[__CFAttributedString attributedSubstringFromRange:](v77, "attributedSubstringFromRange:", v78 - 1, 1);
          id v79 = [NSString stringWithFormat:@"%@...%@<%lu chars>", v80, v81, v78, v89];
        }
        else
        {
          id v79 = [(__CFAttributedString *)v77 string];
        }

        *(_DWORD *)CFRange buf = 134218242;
        uint64_t v105 = a8;
        __int16 v106 = 2112;
        unsigned int v107 = v79;
        _os_log_impl(&dword_224D85000, v76, OS_LOG_TYPE_DEFAULT, "[qid=%ld] embedding string - (%@)", buf, 0x16u);
      }
      CFAttributedStringRef Copy = CFAttributedStringCreateCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], v94);
      goto LABEL_113;
    }
    uint64_t v31 = [v98 objectAtIndexedSubscript:v27];
    CFIndex v100 = [v31 objectForKeyedSubscript:kQPQUOutputTokenKey];
    uint64_t v32 = [v31 objectForKeyedSubscript:kQPQUOutputTokenRangeKey];
    CFIndex v33 = [v32 rangeValue];
    uint64_t v35 = v34;

    objc_msgSend(v97, "substringWithRange:", v33, v35);
    CFLocaleRef v36 = (const __CFLocale *)objc_claimAutoreleasedReturnValue();
    if (!v36)
    {
      uint64_t v50 = v100;
      goto LABEL_88;
    }
    CFStringRef v99 = objc_msgSend(NSString, "stringWithFormat:", @"idx: %lu", v27);
    long long v37 = [v101 argIdsForTokens];
    uint64_t v38 = [v37 objectAtIndexedSubscript:v27];
    uint64_t v39 = [v38 firstObject];
    int v40 = [v39 intValue];

    long long v41 = [v101 argScoresForTokens];
    id v42 = [v41 objectAtIndexedSubscript:v27];
    uint64_t v43 = [v42 firstObject];
    [v43 floatValue];
    float v45 = v44;

    if (a7)
    {
      CFDictionaryRef Attributes = CFAttributedStringGetAttributes(a7, v33, 0);
      if (Attributes)
      {
        unint64_t v48 = CFDictionaryGetValue(Attributes, kQPInputAttributeAnnotationKey);
        uint64_t v49 = v48;
        if (!v48 || ![v48 isEqualToString:@"PUBLIC_FIGURE"]) {
          goto LABEL_38;
        }
        if (v40 == 2)
        {
          if (v45 > 0.25)
          {
LABEL_38:

            goto LABEL_39;
          }
          if (u2ParserLogger(void)::token != -1) {
            dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_245);
          }
          uint64_t v87 = u2ParserLogger(void)::log;
          if (!os_log_type_enabled((os_log_t)u2ParserLogger(void)::log, OS_LOG_TYPE_DEFAULT))
          {
LABEL_111:

            goto LABEL_112;
          }
          *(_DWORD *)CFRange buf = 134218498;
          uint64_t v105 = a8;
          __int16 v106 = 2112;
          unsigned int v107 = v99;
          __int16 v108 = 2048;
          double v109 = v45;
          CFStringRef v84 = "[qid=%ld] no embedding string as public figure token (%@) with person arg type with low confidence (%f)";
          BOOL v85 = v87;
          uint32_t v86 = 32;
        }
        else
        {
          if (u2ParserLogger(void)::token != -1) {
            dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_245);
          }
          uint64_t v83 = u2ParserLogger(void)::log;
          if (!os_log_type_enabled((os_log_t)u2ParserLogger(void)::log, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_111;
          }
          *(_DWORD *)CFRange buf = 134218498;
          uint64_t v105 = a8;
          __int16 v106 = 2112;
          unsigned int v107 = v99;
          __int16 v108 = 1024;
          LODWORD(v109) = v40;
          CFStringRef v84 = "[qid=%ld] no embedding string as public figure token (%@) with non person arg type (%d)";
          BOOL v85 = v83;
          uint32_t v86 = 28;
        }
        _os_log_impl(&dword_224D85000, v85, OS_LOG_TYPE_DEFAULT, v84, buf, v86);
        goto LABEL_111;
      }
    }
LABEL_39:
    uint64_t v50 = 0;
    switch(v40)
    {
      case 0:
      case 1:
      case 8:
        goto LABEL_87;
      case 2:
        if (!v91) {
          goto LABEL_62;
        }
        uint64_t v51 = *v96;
        if (v96[1] == *v96) {
          goto LABEL_62;
        }
        uint64_t v52 = 0;
        unint64_t v53 = 0;
        while (1)
        {
          uint64_t v54 = *(void *)(v51 + v52);
          uint64_t v55 = *(unsigned __int8 *)(v54 + 23);
          int v56 = (char)v55;
          if ((v55 & 0x80u) != 0) {
            uint64_t v55 = *(void *)(v54 + 8);
          }
          if (v55 == 14)
          {
            uint64_t v57 = v56 >= 0 ? (uint64_t *)v54 : *(uint64_t **)v54;
            uint64_t v58 = *v57;
            uint64_t v59 = *(uint64_t *)((char *)v57 + 6);
            if (v58 == 0x6465646E756F7247 && v59 == 0x6E6F737265506465)
            {
              uint64_t v62 = *(void *)(v54 + 72);
              uint64_t v61 = *(void *)(v54 + 80);
              if (v62 == v33 && v61 == v35)
              {
                int v64 = [v92 objectForKeyedSubscript:v100];
                BOOL v65 = v64 == 0;

                if (!v65)
                {
                  uint64_t v66 = [v92 objectForKeyedSubscript:v100];
                  id v67 = [v66 allKeys];
                  id v68 = [v67 firstObject];

                  if (v68) {
                    break;
                  }
                }
              }
            }
          }
          ++v53;
          uint64_t v51 = *v96;
          v52 += 16;
          if (v53 >= (v96[1] - *v96) >> 4)
          {
LABEL_62:
            uint64_t v50 = 0;
            goto LABEL_63;
          }
        }
        id v74 = objc_alloc(MEMORY[0x263F086A0]);
        CFDateFormatterRef v102 = @"kMDItemPhotosPeoplePersonIdentifiers";
        os_signpost_id_t v103 = v68;
        uint64_t v75 = [NSDictionary dictionaryWithObjects:&v103 forKeys:&v102 count:1];
        uint64_t v50 = (void *)[v74 initWithString:v36 attributes:v75];

LABEL_63:
        if (v50 || v45 >= 0.25) {
          goto LABEL_81;
        }
        if (u2ParserLogger(void)::token != -1) {
          dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_245);
        }
        long long v69 = u2ParserLogger(void)::log;
        if (os_log_type_enabled((os_log_t)u2ParserLogger(void)::log, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CFRange buf = 134217984;
          uint64_t v105 = a8;
          _os_log_impl(&dword_224D85000, v69, OS_LOG_TYPE_DEFAULT, "[qid=%ld] cannot remove ARG_PERSON because of low confidence", buf, 0xCu);
        }
        if (!QP::anyUnsupportedCharacter(*(QP **)(*(void *)a5 + 104), v36, v70)) {
          goto LABEL_80;
        }
        if (u2ParserLogger(void)::token != -1) {
          dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_245);
        }
        if (os_log_type_enabled((os_log_t)u2ParserLogger(void)::log, OS_LOG_TYPE_ERROR)) {
          goto LABEL_121;
        }
        goto LABEL_112;
      case 10:
        if (v45 >= 0.4)
        {
          uint64_t v50 = 0;
LABEL_87:

LABEL_88:
          ++v27;
          continue;
        }
        if (u2ParserLogger(void)::token != -1) {
          dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_245);
        }
        uint64_t v71 = u2ParserLogger(void)::log;
        if (os_log_type_enabled((os_log_t)u2ParserLogger(void)::log, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CFRange buf = 134217984;
          uint64_t v105 = a8;
          _os_log_impl(&dword_224D85000, v71, OS_LOG_TYPE_DEFAULT, "[qid=%ld] ARG_LOCATION confidence below threshold, keeping it in embedding string", buf, 0xCu);
        }
        if (!QP::anyUnsupportedCharacter(*(QP **)(*(void *)a5 + 104), v36, v72))
        {
LABEL_80:
          uint64_t v50 = (void *)[objc_alloc(MEMORY[0x263F086A0]) initWithString:v36];
LABEL_81:
          if (v50)
          {
            if ([(__CFAttributedString *)v94 length] && *(unsigned char *)(*(void *)a5 + 31))
            {
              id v73 = (void *)[objc_alloc(MEMORY[0x263F086A0]) initWithString:@" "];
              [(__CFAttributedString *)v94 appendAttributedString:v73];
            }
            [(__CFAttributedString *)v94 appendAttributedString:v50];
          }
          goto LABEL_87;
        }
        if (u2ParserLogger(void)::token != -1) {
          dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_245);
        }
        if (os_log_type_enabled((os_log_t)u2ParserLogger(void)::log, OS_LOG_TYPE_ERROR)) {
LABEL_121:
        }
          QP::createEmbeddingString();
LABEL_112:

        CFAttributedStringRef Copy = 0;
LABEL_113:

        return Copy;
      default:
        if (!QP::anyUnsupportedCharacter(*(QP **)(*(void *)a5 + 104), v36, v46)) {
          goto LABEL_80;
        }
        if (u2ParserLogger(void)::token != -1) {
          dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_245);
        }
        if (os_log_type_enabled((os_log_t)u2ParserLogger(void)::log, OS_LOG_TYPE_ERROR)) {
          goto LABEL_121;
        }
        goto LABEL_112;
    }
  }
}

void sub_224DE3450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,void *a23,void *a24,void *a25,void *a26)
{
  _Unwind_Resume(a1);
}

void QP::U2Parser::cooldown(QP::U2Parser *this)
{
  uint64_t v2 = (QP *)*(id *)(*((void *)this + 10) + 104);
  if (QP::isSupportedQULocale(v2, v3))
  {
    if (u2ParserLogger(void)::token != -1) {
      dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_245);
    }
    uint64_t v4 = u2ParserLogger(void)::log;
    if (os_log_type_enabled((os_log_t)u2ParserLogger(void)::log, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unint64_t v9 = 0;
      _os_log_impl(&dword_224D85000, v4, OS_LOG_TYPE_DEFAULT, "[QPNLU] Cooldown QU model", v9, 2u);
    }
    uint64_t v5 = [MEMORY[0x263F628E8] sharedInstance];
    [v5 releaseModel];

    if (QP::isSupportedECRLocale(v2, v6))
    {
      if (*(unsigned char *)(*((void *)this + 10) + 57)) {
        +[QPInProcessECRClient sharedClient];
      }
      else {
      uint64_t v7 = +[QPXPCECRClient sharedClient];
      }
      id v8 = v7;
      if (*(unsigned char *)(*((void *)this + 10) + 36)) {
        [v7 cooldownSync];
      }
      else {
        [v7 cooldownAsync];
      }
    }
  }
}

void sub_224DE375C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL14u2ParserLoggerv_block_invoke()
{
  uint64_t v0 = _nlpLoggingSubsystem();
  os_log_t v1 = os_log_create(v0, "QPU2Parser");
  uint64_t v2 = (void *)u2ParserLogger(void)::log;
  u2ParserLogger(void)::log = (uint64_t)v1;
}

uint64_t ___Z36QPTimingNanosecondsSinceAbsoluteTimey_block_invoke()
{
  return mach_timebase_info((mach_timebase_info_t)&QPTimingNanosecondsSinceAbsoluteTime(unsigned long long)::sTimebaseInfo);
}

uint64_t __Block_byref_object_copy__273(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4nlp::CFScopedPtr<__CFString const*>::reset((const void **)&a9, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4nlp::CFScopedPtr<__CFString const*>::reset((const void **)&a9, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__274(uint64_t a1)
{
}

void ___ZN2QPL31allVisualIdentifiersWithTimeoutEP8NSStringNSt3__110shared_ptrINS_19ParserConfigurationEEEPU15__autoreleasingP7NSError_block_invoke(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)(a1 + 64) + 57)) {
    uint64_t v2 = off_264704398;
  }
  else {
    uint64_t v2 = &off_2647043A0;
  }
  BOOL v3 = [(__objc2_class *)*v2 sharedClient];
  BOOL v4 = *(unsigned char *)(*(void *)(a1 + 64) + 60) == 0;
  uint64_t v5 = *(void *)(a1 + 32);
  id v13 = 0;
  uint64_t v6 = [v3 visualIdentifiersWithQuery:v5 entityFilterType:v4 error:&v13];
  id v7 = v13;
  uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8);
  unint64_t v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 4nlp::CFScopedPtr<__CFString const*>::reset((const void **)&a9, 0) = v6;

  uint64_t v10 = *(void *)(*(void *)(a1 + 56) + 8);
  uint64_t v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 4nlp::CFScopedPtr<__CFString const*>::reset((const void **)&a9, 0) = v7;
  id v12 = v7;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_224DE38C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN2QPL26u2UnderstandingWithTimeoutEPU31objcproto20QUUnderstandingModel11objc_objectPK10__CFStringP7QUSpansbjPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  CFRelease(*(CFTypeRef *)(a1 + 56));
  if (v7)
  {
    if (u2ParserLogger(void)::token != -1) {
      dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_245);
    }
    if (os_log_type_enabled((os_log_t)u2ParserLogger(void)::log, OS_LOG_TYPE_ERROR)) {
      ___ZN2QPL26u2UnderstandingWithTimeoutEPU31objcproto20QUUnderstandingModel11objc_objectPK10__CFStringP7QUSpansbjPU15__autoreleasingP7NSError_block_invoke_cold_1();
    }
    uint64_t v8 = (id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    unint64_t v9 = a3;
  }
  else
  {
    uint64_t v8 = (id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    unint64_t v9 = a2;
  }
  objc_storeStrong(v8, v9);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_224DE39B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN2QPL28visualIdentifiersWithTimeoutEP8NSStringb27QPECRClientEntityFilterTypebNSt3__110shared_ptrINS_19ParserConfigurationEEEPU15__autoreleasingP7NSError_block_invoke_0(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)(a1 + 64) + 57)) {
    uint64_t v2 = off_264704398;
  }
  else {
    uint64_t v2 = &off_2647043A0;
  }
  BOOL v3 = [(__objc2_class *)*v2 sharedClient];
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 88);
  uint64_t v6 = *(void *)(a1 + 80);
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(a1 + 64) + 59);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 89);
  id v16 = 0;
  uint64_t v9 = [v3 visualIdentifiersWithText:v4 allowPrefixSearch:v5 entityFilterType:v6 includeInferredNames:v7 allowGroundingToNamesAndEmails:v8 error:&v16];
  id v10 = v16;
  uint64_t v11 = *(void *)(*(void *)(a1 + 48) + 8);
  id v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 4nlp::CFScopedPtr<__CFString const*>::reset((const void **)&a9, 0) = v9;

  uint64_t v13 = *(void *)(*(void *)(a1 + 56) + 8);
  int v14 = *(void **)(v13 + 40);
  *(void *)(v13 + 4nlp::CFScopedPtr<__CFString const*>::reset((const void **)&a9, 0) = v10;
  id v15 = v10;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_224DE3AA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL QP::anyUnsupportedCharacter(QP *this, const __CFLocale *a2, NSString *a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  CFLocaleRef v4 = a2;
  uint64_t v5 = MEMORY[0x22A6233E0](this);
  if (QP::anyUnsupportedCharacter(__CFLocale const*,NSString *)::onceToken != -1) {
    dispatch_once(&QP::anyUnsupportedCharacter(__CFLocale const*,NSString *)::onceToken, &__block_literal_global_375);
  }
  uint64_t v6 = [(id)QP::anyUnsupportedCharacter(__CFLocale const*,NSString *)::locale_characterset_supported objectForKeyedSubscript:v5];
  if (v6) {
    goto LABEL_4;
  }
  CFCharacterSetRef Value = (const __CFCharacterSet *)CFLocaleGetValue(this, (CFLocaleKey)*MEMORY[0x263EFFCD8]);
  if (!Value)
  {
    if (u2ParserLogger(void)::token != -1) {
      dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_245);
    }
    int v14 = u2ParserLogger(void)::log;
    if (!os_log_type_enabled((os_log_t)u2ParserLogger(void)::log, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_16;
    }
    int v17 = 138412290;
    uint64_t v18 = v5;
    id v15 = "no exemplar charset available for locale (%@)";
    goto LABEL_15;
  }
  CFMutableStringRef MutableCopy = CFCharacterSetCreateMutableCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], Value);
  CFCharacterSetRef Predefined = CFCharacterSetGetPredefined(kCFCharacterSetWhitespaceAndNewline);
  CFCharacterSetUnion(MutableCopy, Predefined);
  CFCharacterSetRef v11 = CFCharacterSetGetPredefined(kCFCharacterSetDecimalDigit);
  CFCharacterSetUnion(MutableCopy, v11);
  CFCharacterSetRef v12 = CFCharacterSetGetPredefined(kCFCharacterSetPunctuation);
  CFCharacterSetUnion(MutableCopy, v12);
  uint64_t v13 = [(__CFCharacterSet *)MutableCopy invertedSet];
  [(id)QP::anyUnsupportedCharacter(__CFLocale const*,NSString *)::locale_characterset_supported setObject:v13 forKeyedSubscript:v5];

  uint64_t v6 = [(id)QP::anyUnsupportedCharacter(__CFLocale const*,NSString *)::locale_characterset_supported objectForKeyedSubscript:v5];
  if (!v6)
  {
    if (u2ParserLogger(void)::token != -1) {
      dispatch_once(&u2ParserLogger(void)::token, &__block_literal_global_245);
    }
    int v14 = u2ParserLogger(void)::log;
    if (!os_log_type_enabled((os_log_t)u2ParserLogger(void)::log, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_16;
    }
    int v17 = 138412290;
    uint64_t v18 = v5;
    id v15 = "no charset available for locale (%@)";
LABEL_15:
    _os_log_impl(&dword_224D85000, v14, OS_LOG_TYPE_DEFAULT, v15, (uint8_t *)&v17, 0xCu);
LABEL_16:
    BOOL v7 = 1;
    goto LABEL_17;
  }
LABEL_4:
  BOOL v7 = [(__CFLocale *)v4 rangeOfCharacterFromSet:v6] != 0x7FFFFFFFFFFFFFFFLL;

LABEL_17:
  return v7;
}

void sub_224DE3D20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN2QPL23anyUnsupportedCharacterEPK10__CFLocaleP8NSString_block_invoke()
{
  uint64_t v0 = objc_opt_new();
  os_log_t v1 = (void *)QP::anyUnsupportedCharacter(__CFLocale const*,NSString *)::locale_characterset_supported;
  QP::anyUnsupportedCharacter(__CFLocale const*,NSString *)::locale_characterset_supported = v0;
}

void *std::allocate_shared[abi:ne180100]<QP::ParseAttribute,std::allocator<QP::ParseAttribute>,CFRange &,CFRange &,int,int,QUIntentArgType,void>@<X0>(_OWORD *a1@<X1>, long long *a2@<X2>, int *a3@<X3>, int *a4@<X4>, int *a5@<X5>, void *a6@<X8>)
{
  CFCharacterSetRef v12 = operator new(0xA8uLL);
  __n128 result = std::__shared_ptr_emplace<QP::ParseAttribute>::__shared_ptr_emplace[abi:ne180100]<CFRange &,CFRange &,int,int,QUIntentArgType,std::allocator<QP::ParseAttribute>,0>(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;
  return result;
}

void sub_224DE3E1C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<QP::ParseAttribute>::__shared_ptr_emplace[abi:ne180100]<CFRange &,CFRange &,int,int,QUIntentArgType,std::allocator<QP::ParseAttribute>,0>(void *a1, _OWORD *a2, long long *a3, int *a4, int *a5, int *a6)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D830700;
  std::construct_at[abi:ne180100]<QP::ParseAttribute,CFRange &,CFRange &,int,int,QUIntentArgType,QP::ParseAttribute*>((uint64_t)(a1 + 3), a2, a3, a4, a5, a6);
  return a1;
}

void sub_224DE3E78(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<QP::ParseAttribute,CFRange &,CFRange &,int,int,QUIntentArgType,QP::ParseAttribute*>(uint64_t a1, _OWORD *a2, long long *a3, int *a4, int *a5, int *a6)
{
  int v7 = *a4;
  int v8 = *a5;
  int v9 = *a6;
  long long v10 = *a3;
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(_WORD *)(a1 + 32) = v7;
  *(_DWORD *)(a1 + 34) = (unsigned __int16)v8;
  *(void *)(a1 + 4nlp::CFScopedPtr<__CFString const*>::reset((const void **)&a9, 0) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 48), "");
  *(_WORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 76) = v9;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 8nlp::CFScopedPtr<__CFString const*>::reset((const void **)&a9, 0) = a1 + 88;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12nlp::CFScopedPtr<__CFString const*>::reset((const void **)&a9, 0) = 0u;
  *(void *)(a1 + 136) = 0;
  return a1;
}

void *std::allocate_shared[abi:ne180100]<QP::ParseAttribute,std::allocator<QP::ParseAttribute>,CFRange &,CFRange &,int,int,QUIntentArgType &,void>@<X0>(_OWORD *a1@<X1>, long long *a2@<X2>, int *a3@<X3>, int *a4@<X4>, int *a5@<X5>, void *a6@<X8>)
{
  CFCharacterSetRef v12 = operator new(0xA8uLL);
  __n128 result = std::__shared_ptr_emplace<QP::ParseAttribute>::__shared_ptr_emplace[abi:ne180100]<CFRange &,CFRange &,int,int,QUIntentArgType &,std::allocator<QP::ParseAttribute>,0>(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;
  return result;
}

void sub_224DE3F88(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<QP::ParseAttribute>::__shared_ptr_emplace[abi:ne180100]<CFRange &,CFRange &,int,int,QUIntentArgType &,std::allocator<QP::ParseAttribute>,0>(void *a1, _OWORD *a2, long long *a3, int *a4, int *a5, int *a6)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D830700;
  std::construct_at[abi:ne180100]<QP::ParseAttribute,CFRange &,CFRange &,int,int,QUIntentArgType,QP::ParseAttribute*>((uint64_t)(a1 + 3), a2, a3, a4, a5, a6);
  return a1;
}

void sub_224DE3FE4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<QP::Parse,std::allocator<QP::Parse>,nlp::CFScopedPtr<__CFString const*> &,unsigned long,long,std::vector<std::shared_ptr<QP::ParseAttribute>> &,__CFDictionary const*&,void>@<X0>(const void **a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, void **a4@<X4>, uint64_t *a5@<X5>, void *a6@<X8>)
{
  CFCharacterSetRef v12 = operator new(0x78uLL);
  __n128 result = std::__shared_ptr_emplace<QP::Parse>::__shared_ptr_emplace[abi:ne180100]<nlp::CFScopedPtr<__CFString const*> &,unsigned long,long,std::vector<std::shared_ptr<QP::ParseAttribute>> &,__CFDictionary const*&,std::allocator<QP::Parse>,0>(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;
  return result;
}

void sub_224DE4070(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<QP::Parse>::__shared_ptr_emplace[abi:ne180100]<nlp::CFScopedPtr<__CFString const*> &,unsigned long,long,std::vector<std::shared_ptr<QP::ParseAttribute>> &,__CFDictionary const*&,std::allocator<QP::Parse>,0>(void *a1, const void **a2, uint64_t *a3, uint64_t *a4, void **a5, uint64_t *a6)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D830770;
  std::construct_at[abi:ne180100]<QP::Parse,nlp::CFScopedPtr<__CFString const*> &,unsigned long,long,std::vector<std::shared_ptr<QP::ParseAttribute>> &,__CFDictionary const*&,QP::Parse*>((uint64_t)(a1 + 3), a2, a3, a4, a5, a6);
  return a1;
}

void sub_224DE40CC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<QP::Parse,nlp::CFScopedPtr<__CFString const*> &,unsigned long,long,std::vector<std::shared_ptr<QP::ParseAttribute>> &,__CFDictionary const*&,QP::Parse*>(uint64_t a1, const void **a2, uint64_t *a3, uint64_t *a4, void **a5, uint64_t *a6)
{
  int v8 = *a2;
  uint64_t v9 = *a3;
  uint64_t v10 = *a4;
  memset(v12, 0, sizeof(v12));
  std::vector<std::shared_ptr<QP::ParseAttribute>>::__init_with_size[abi:ne180100]<std::shared_ptr<QP::ParseAttribute>*,std::shared_ptr<QP::ParseAttribute>*>(v12, *a5, a5[1], ((char *)a5[1] - (char *)*a5) >> 4);
  QP::Parse::Parse(a1, v8, v9, v10, v12, *a6, 0);
  uint64_t v13 = (void **)v12;
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v13);
  return a1;
}

void sub_224DE4178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void QP::QueryParserEngine::QueryParserEngine(QP::QueryParserEngine *this, const __CFDictionary *a2)
{
  *(void *)this = &unk_26D830FD8;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 4nlp::CFScopedPtr<__CFString const*>::reset((const void **)&a9, 0) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((unsigned char *)this + 104) = 0;
  QP::QueryParserEngine::init(this, a2);
}

void sub_224DE4200(_Unwind_Exception *a1)
{
  std::unique_ptr<QP::Embedder>::reset[abi:ne180100]((const void ***)(v1 + 88), 0);
  uint64_t v4 = *(void *)(v1 + 80);
  *(void *)(v1 + 8nlp::CFScopedPtr<__CFString const*>::reset((const void **)&a9, 0) = 0;
  if (v4) {
    QP::QueryParserEngine::QueryParserEngine(v4);
  }
  QP::QueryParserEngine::QueryParserEngine(v2, (void *)v1);
  _Unwind_Resume(a1);
}

void QP::QueryParserEngine::init(QP::QueryParserEngine *this, const __CFDictionary *a2)
{
  CFCharacterSetRef v12 = a2;
  if (parserLogger(void)::token != -1) {
    dispatch_once(&parserLogger(void)::token, &__block_literal_global_9);
  }
  os_signpost_id_t v3 = os_signpost_id_generate((os_log_t)parserLogger(void)::log);
  if (parserLogger(void)::token != -1) {
    dispatch_once(&parserLogger(void)::token, &__block_literal_global_9);
  }
  if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v4 = parserLogger(void)::log;
    if (os_signpost_enabled((os_log_t)parserLogger(void)::log))
    {
      *(_WORD *)CFRange buf = 0;
      _os_signpost_emit_with_name_impl(&dword_224D85000, v4, OS_SIGNPOST_INTERVAL_BEGIN, v3, "QueryParserEngine::init", "", buf, 2u);
    }
  }
  std::allocate_shared[abi:ne180100]<QP::ParserConfiguration,std::allocator<QP::ParserConfiguration>,__CFDictionary const*&,void>(&v12, buf);
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 2);
  *(_OWORD *)((char *)this + 8) = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
  }
  std::allocate_shared[abi:ne180100]<QP::ParserGrammar,std::allocator<QP::ParserGrammar>,std::shared_ptr<QP::ParserConfiguration> &,void>((uint64_t *)this + 1, buf);
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 4);
  *(_OWORD *)((char *)this + 24) = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
  }
  std::allocate_shared[abi:ne180100]<QP::Lexer,std::allocator<QP::Lexer>,std::shared_ptr<QP::ParserConfiguration> &,std::shared_ptr<QP::ParserGrammar> &,void>((uint64_t *)this + 1, (uint64_t *)this + 3, buf);
  long long v7 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  int v8 = (std::__shared_weak_count *)*((void *)this + 6);
  *(_OWORD *)((char *)this + 4nlp::CFScopedPtr<__CFString const*>::reset((const void **)&a9, 0) = v7;
  if (v8)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
  }
  std::allocate_shared[abi:ne180100]<QP::Lexer,std::allocator<QP::Lexer>,std::shared_ptr<QP::ParserConfiguration> &,std::shared_ptr<QP::ParserGrammar> &,void>((uint64_t *)this + 1, (uint64_t *)this + 3, buf);
  long long v9 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 8);
  *(_OWORD *)((char *)this + 56) = v9;
  if (v10)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
  }
  operator new();
}

void sub_224DE45FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MEMORY[0x22A623E20](v10, 0x60C40CD5974ACLL);
  _Unwind_Resume(a1);
}

QP::Parser *std::unique_ptr<QP::Parser>::reset[abi:ne180100](QP::Parser **a1, QP::Parser *a2)
{
  __n128 result = *a1;
  *a1 = a2;
  if (result)
  {
    QP::Parser::~Parser(result);
    JUMPOUT(0x22A623E20);
  }
  return result;
}

const void **std::unique_ptr<QP::Embedder>::reset[abi:ne180100](const void ***a1, const void **a2)
{
  __n128 result = *a1;
  *a1 = a2;
  if (result)
  {
    QP::Embedder::~Embedder(result);
    JUMPOUT(0x22A623E20);
  }
  return result;
}

void QP::QueryParserEngine::loadKnowledgeSource(QP::QueryParserEngine *this, const __CFDictionary *a2)
{
  if (parserLogger(void)::token != -1) {
    dispatch_once(&parserLogger(void)::token, &__block_literal_global_9);
  }
  os_signpost_id_t v4 = os_signpost_id_generate((os_log_t)parserLogger(void)::log);
  if (parserLogger(void)::token != -1) {
    dispatch_once(&parserLogger(void)::token, &__block_literal_global_9);
  }
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v5 = parserLogger(void)::log;
    if (os_signpost_enabled((os_log_t)parserLogger(void)::log))
    {
      *(_WORD *)CFRange buf = 0;
      _os_signpost_emit_with_name_impl(&dword_224D85000, v5, OS_SIGNPOST_INTERVAL_BEGIN, v4, "QueryParserEngine::loadKnowledgeSource", "", buf, 2u);
    }
  }
  uint64_t v6 = (uint64_t *)*((void *)this + 12);
  if (v6)
  {
    QPSpotlightKnowledgeSourceRelease(v6);
    *((void *)this + 12) = 0;
  }
  uint64_t v7 = *((void *)this + 1);
  if (*(_DWORD *)(v7 + 16) == 1)
  {
    int v8 = QPSpotlightKnowledgeSourceCreate(*(void *)(v7 + 184), *(__CFString **)(v7 + 176), a2);
    *((void *)this + 12) = v8;
    uint64_t v9 = *((void *)this + 5);
    if (v9) {
      QP::Lexer::useKnowledgeSource(v9, (uint64_t)v8);
    }
    uint64_t v10 = *((void *)this + 7);
    if (v10) {
      QP::Lexer::useKnowledgeSource(v10, *((void *)this + 12));
    }
    if (*(void *)(*((void *)this + 1) + 8) == 9) {
      operator new();
    }
    operator new();
  }
  uint64_t v11 = *(void *)(v7 + 8);
  if (v11 != 9)
  {
    if (v11 != 13)
    {
      if (v11 == 12) {
        operator new();
      }
      operator new();
    }
    int v14 = QPSpotlightKnowledgeSourceCreate(*(void *)(v7 + 184), *(__CFString **)(v7 + 176), a2);
    *((void *)this + 12) = v14;
    uint64_t v15 = *((void *)this + 5);
    if (v15) {
      QP::Lexer::useKnowledgeSource(v15, (uint64_t)v14);
    }
    operator new();
  }
  CFCharacterSetRef v12 = QPSpotlightKnowledgeSourceCreate(*(void *)(v7 + 184), *(__CFString **)(v7 + 176), a2);
  *((void *)this + 12) = v12;
  uint64_t v13 = *((void *)this + 5);
  if (v13) {
    QP::Lexer::useKnowledgeSource(v13, (uint64_t)v12);
  }
  operator new();
}

void sub_224DE4D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  QP::QueryParserEngine::loadKnowledgeSource(v10);
  _Unwind_Resume(a1);
}

void QP::QueryParserEngine::updateResources(QP::QueryParserEngine *this)
{
  uint64_t v78 = *MEMORY[0x263EF8340];
  CFLocaleRef v2 = *(const __CFLocale **)(*((void *)this + 1) + 104);
  CFLocaleRef LanguageCode = getLanguageCode(v2);
  ScriptCode = getScriptCode((__CFString *)v2);
  if (parserLogger(void)::token != -1) {
    dispatch_once(&parserLogger(void)::token, &__block_literal_global_9);
  }
  uint64_t v5 = parserLogger(void)::log;
  if (os_log_type_enabled((os_log_t)parserLogger(void)::log, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf) = 138412290;
    *(void *)((char *)&buf + 4) = LanguageCode;
    _os_log_impl(&dword_224D85000, v5, OS_LOG_TYPE_INFO, "[QueryParserEngine] updating resources for language %@", (uint8_t *)&buf, 0xCu);
  }
  QP::QueryParserEngine::clearResources(this);
  QPSpotlightKnowledgeSourceRefresh(*((uint64_t **)this + 12));
  *((unsigned char *)this + 104) = 0;
  if (!*(void *)(*((void *)this + 1) + 168))
  {
    *(void *)&long long buf = 0;
    *((void *)&buf + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = &buf;
    uint64_t v74 = 0x3002000000;
    uint64_t v75 = __Block_byref_object_copy__8;
    uint64_t v76 = __Block_byref_object_dispose__8;
    CFTypeRef v77 = 0;
    uint64_t v65 = 0;
    uint64_t v66 = &v65;
    uint64_t v67 = 0x3002000000;
    id v68 = __Block_byref_object_copy__8;
    long long v69 = __Block_byref_object_dispose__8;
    CFTypeRef v70 = 0;
    CFStringRef v59 = 0;
    uint64_t v60 = &v59;
    uint64_t v61 = 0x3002000000;
    uint64_t v62 = __Block_byref_object_copy__8;
    int v63 = __Block_byref_object_dispose__8;
    CFTypeRef v64 = 0;
    CFURLRef v53 = 0;
    uint64_t v54 = &v53;
    uint64_t v55 = 0x3002000000;
    int v56 = __Block_byref_object_copy__8;
    uint64_t v57 = __Block_byref_object_dispose__8;
    CFTypeRef v58 = 0;
    uint64_t v47 = 0;
    unint64_t v48 = &v47;
    uint64_t v49 = 0x3002000000;
    uint64_t v50 = __Block_byref_object_copy__8;
    uint64_t v51 = __Block_byref_object_dispose__8;
    CFTypeRef v52 = 0;
    uint64_t v41 = 0;
    id v42 = &v41;
    uint64_t v43 = 0x3002000000;
    float v44 = __Block_byref_object_copy__8;
    float v45 = __Block_byref_object_dispose__8;
    CFTypeRef v46 = 0;
    uint64_t v35 = 0;
    CFLocaleRef v36 = &v35;
    uint64_t v37 = 0x3002000000;
    uint64_t v38 = __Block_byref_object_copy__8;
    uint64_t v39 = __Block_byref_object_dispose__8;
    CFTypeRef v40 = 0;
    uint64_t v29 = 0;
    BOOL v30 = &v29;
    uint64_t v31 = 0x3002000000;
    uint64_t v32 = __Block_byref_object_copy__8;
    CFIndex v33 = __Block_byref_object_dispose__8;
    CFTypeRef cf = 0;
    v28[0] = MEMORY[0x263EF8330];
    v28[1] = 0x40000000;
    uint64_t v28[2] = ___ZN2QP17QueryParserEngine15updateResourcesEv_block_invoke;
    v28[3] = &unk_264705C08;
    void v28[4] = &buf;
    v28[5] = &v65;
    v28[6] = &v41;
    v28[7] = &v59;
    v28[8] = &v53;
    v28[9] = &v47;
    v28[10] = &v29;
    systemListenerEnumerateResourcesWithContentType(@"QueryParser", v28);
    v27[0] = MEMORY[0x263EF8330];
    v27[1] = 0x40000000;
    void v27[2] = ___ZN2QP17QueryParserEngine15updateResourcesEv_block_invoke_2;
    v27[3] = &unk_264705C30;
    v27[4] = &v35;
    systemListenerEnumerateResourcesWithContentType(@"Geo", v27);
    CFURLRef v10 = *(const __CFURL **)(*((void *)&buf + 1) + 40);
    if (v10)
    {
      QP::ParserConfiguration::loadConfigurationResource(*((QP::ParserConfiguration **)this + 1), v10, v8, v9);
      uint64_t v11 = *((void *)this + 1);
      if (*(void *)(v11 + 200) && *(void *)(v11 + 104) && *(unsigned char *)(v11 + 33))
      {
        if (parserLogger(void)::token != -1) {
          dispatch_once(&parserLogger(void)::token, &__block_literal_global_9);
        }
        CFCharacterSetRef v12 = parserLogger(void)::log;
        if (os_log_type_enabled((os_log_t)parserLogger(void)::log, OS_LOG_TYPE_INFO))
        {
          uint64_t v14 = *(void *)(*((void *)&buf + 1) + 40);
          *(_DWORD *)uint64_t v71 = 138412290;
          uint64_t v72 = v14;
          _os_log_impl(&dword_224D85000, v12, OS_LOG_TYPE_INFO, "[QueryParserEngine] loading assets with url %@", v71, 0xCu);
        }
        QP::ParserGrammar::loadParserGrammarResource(*((QP::ParserGrammar **)this + 3), (CFURLRef)v66[5], 0, v13);
        QP::Lexer::loadLexerResource(*((QP::Lexer **)this + 5), (CFURLRef)v60[5]);
        QP::Lexer::loadLexerResource(*((QP::Lexer **)this + 5), v54[5]);
        QP::Lexer::loadLexerResource(*((QP::Lexer **)this + 5), (CFURLRef)v48[5]);
        QP::Lexer::loadLexerResource(*((QP::Lexer **)this + 5), (CFURLRef)v30[5]);
        QP::Lexer::loadLexerResource(*((QP::Lexer **)this + 5), (CFURLRef)v36[5]);
        QP::Lexer::loadLexerResource(*((QP::Lexer **)this + 7), (CFURLRef)v60[5]);
        QP::Lexer::loadLexerResource(*((QP::Lexer **)this + 7), v54[5]);
        QP::Lexer::loadLexerResource(*((QP::Lexer **)this + 7), (CFURLRef)v48[5]);
        QP::Lexer::loadLexerResource(*((QP::Lexer **)this + 7), (CFURLRef)v30[5]);
        QP::Lexer::loadLexerResource(*((QP::Lexer **)this + 7), (CFURLRef)v36[5]);
        QP::Formatter::loadFormatterResource(*((QP::DateFormatter ***)this + 10), (const __CFURL *)v42[5]);
        int v15 = 1;
LABEL_28:
        _Block_object_dispose(&v29, 8);
        if (cf) {
          CFRelease(cf);
        }
        _Block_object_dispose(&v35, 8);
        if (v40) {
          CFRelease(v40);
        }
        _Block_object_dispose(&v41, 8);
        if (v46) {
          CFRelease(v46);
        }
        _Block_object_dispose(&v47, 8);
        if (v52) {
          CFRelease(v52);
        }
        _Block_object_dispose(&v53, 8);
        if (v58) {
          CFRelease(v58);
        }
        _Block_object_dispose(&v59, 8);
        if (v64) {
          CFRelease(v64);
        }
        _Block_object_dispose(&v65, 8);
        if (v70) {
          CFRelease(v70);
        }
        _Block_object_dispose(&buf, 8);
        if (v77) {
          CFRelease(v77);
        }
        if (v15) {
          goto LABEL_54;
        }
        return;
      }
    }
    else if (v66[5])
    {
      if (parserLogger(void)::token != -1) {
        dispatch_once(&parserLogger(void)::token, &__block_literal_global_9);
      }
      unint64_t v22 = parserLogger(void)::log;
      if (os_log_type_enabled((os_log_t)parserLogger(void)::log, OS_LOG_TYPE_INFO))
      {
        uint64_t v24 = v66[5];
        *(_DWORD *)uint64_t v71 = 138412290;
        uint64_t v72 = v24;
        _os_log_impl(&dword_224D85000, v22, OS_LOG_TYPE_INFO, "[QueryParserEngine] loading fallback with url %@", v71, 0xCu);
      }
      QP::ParserGrammar::loadParserGrammarResource(*((QP::ParserGrammar **)this + 3), (CFURLRef)v66[5], (__CFError **)1, v23);
    }
    int v15 = 0;
    goto LABEL_28;
  }
  *(void *)&long long buf = 0;
  uint64_t v65 = 0;
  CFStringRef v59 = 0;
  uint64_t v6 = (CFAllocatorRef *)MEMORY[0x263EFFB08];
  if (ScriptCode) {
    CFStringRef v7 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"%@_%@", LanguageCode, ScriptCode);
  }
  else {
    CFStringRef v7 = (const __CFString *)CFRetain(LanguageCode);
  }
  CFStringRef v16 = v7;
  CFStringRef v59 = v7;
  CFURLRef v17 = CFURLCreateCopyAppendingPathComponent(*v6, *(CFURLRef *)(*((void *)this + 1) + 168), v7, 1u);
  *(void *)&long long buf = v17;
  char AssetsWithURL = QP::QueryParserEngine::loadAssetsWithURL(this, v18, v17);
  if ((AssetsWithURL & 1) == 0)
  {
    QP::QueryParserEngine::clearResources(this);
    CFStringRef v20 = *(const __CFString **)(*((void *)this + 1) + 192);
    int v21 = v20 ? CFBundleGetBundleWithIdentifier(v20) : 0;
    CFURLRef v25 = systemListenerCopyResourceFromBundleWithName(@"cfg", @"plist", @"root", v21);
    CFURLRef v53 = v25;
    QP::ParserGrammar::loadParserGrammarResource(*((QP::ParserGrammar **)this + 3), v25, (__CFError **)1, v26);
    if (v25) {
      CFRelease(v25);
    }
  }
  if (v16) {
    CFRelease(v16);
  }
  if (v17) {
    CFRelease(v17);
  }
  if (AssetsWithURL) {
LABEL_54:
  }
    *((unsigned char *)this + 104) = 1;
}

void sub_224DE5598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void QP::QueryParserEngine::~QueryParserEngine(QP::QueryParserEngine *this)
{
  *(void *)this = &unk_26D830FD8;
  uint64_t v2 = *((void *)this + 10);
  *((void *)this + 1nlp::CFScopedPtr<__CFString const*>::reset((const void **)&a9, 0) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::unique_ptr<QP::Parser>::reset[abi:ne180100]((QP::Parser **)this + 9, 0);
  os_signpost_id_t v3 = (std::__shared_weak_count *)*((void *)this + 6);
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  os_signpost_id_t v4 = (std::__shared_weak_count *)*((void *)this + 8);
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 4);
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  std::unique_ptr<QP::Embedder>::reset[abi:ne180100]((const void ***)this + 11, 0);
  uint64_t v6 = (uint64_t *)*((void *)this + 12);
  if (v6) {
    QPSpotlightKnowledgeSourceRelease(v6);
  }
  std::unique_ptr<QP::Embedder>::reset[abi:ne180100]((const void ***)this + 11, 0);
  uint64_t v7 = *((void *)this + 10);
  *((void *)this + 1nlp::CFScopedPtr<__CFString const*>::reset((const void **)&a9, 0) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  std::unique_ptr<QP::Parser>::reset[abi:ne180100]((QP::Parser **)this + 9, 0);
  int v8 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  CFURLRef v10 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
}

{
  uint64_t vars8;

  QP::QueryParserEngine::~QueryParserEngine(this);
  JUMPOUT(0x22A623E20);
}

uint64_t QP::QueryParserEngine::setLocale(QP::ParserConfiguration **this, const __CFLocale *a2, const __CFArray *a3, int a4)
{
  return QP::ParserConfiguration::setLocale(this[1], a2, a3, a4);
}

uint64_t QP::QueryParserEngine::locale(QP::QueryParserEngine *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (v1) {
    return *(void *)(v1 + 104);
  }
  else {
    return 0;
  }
}

uint64_t QP::QueryParserEngine::getPreferredLanguages(QP::QueryParserEngine *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (v1) {
    return *(void *)(v1 + 160);
  }
  else {
    return 0;
  }
}

uint64_t QP::QueryParserEngine::useKnowledgeSource(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4) {
    QP::Lexer::useKnowledgeSource(v4, a2);
  }
  uint64_t result = *(void *)(a1 + 56);
  if (result)
  {
    return QP::Lexer::useKnowledgeSource(result, a2);
  }
  return result;
}

uint64_t QP::QueryParserEngine::useSystemLocale(QP::QueryParserEngine *this, const __CFBoolean *a2)
{
  uint64_t result = *((void *)this + 1);
  if (result) {
    return QP::ParserConfiguration::setUseSystemLocale(result, a2);
  }
  return result;
}

uint64_t QP::QueryParserEngine::resourcesLoaded(QP::QueryParserEngine *this)
{
  return *((unsigned __int8 *)this + 104);
}

BOOL QP::QueryParserEngine::parsingEnabled(QP::QueryParserEngine *this)
{
  uint64_t v1 = *((void *)this + 1);
  return v1 && *(unsigned char *)(v1 + 48) != 0;
}

uint64_t QP::QueryParserEngine::setPrivateParsing(QP::QueryParserEngine *this, const __CFBoolean *a2)
{
  uint64_t result = *((void *)this + 1);
  if (result) {
    return QP::ParserConfiguration::setPrivateParsing(result, a2);
  }
  return result;
}

uint64_t QP::QueryParserEngine::setEmbeddingsEnabled(QP::QueryParserEngine *this, const __CFBoolean *a2)
{
  uint64_t result = *((void *)this + 1);
  if (result) {
    return QP::ParserConfiguration::setEmbeddingsEnabled(result, a2);
  }
  return result;
}

uint64_t QP::QueryParserEngine::embeddingsEnabled(QP::QueryParserEngine *this)
{
  return *(unsigned __int8 *)(*((void *)this + 1) + 50);
}

uint64_t QP::QueryParserEngine::setSeparateEmbeddingsEnabled(QP::QueryParserEngine *this, const __CFBoolean *a2)
{
  uint64_t result = *((void *)this + 1);
  if (result) {
    return QP::ParserConfiguration::setSeparateEmbeddingsEnabled(result, a2);
  }
  return result;
}

QP::ParserConfiguration *QP::QueryParserEngine::setEmbeddingGenerationTimeout(QP::QueryParserEngine *this, const __CFNumber *a2)
{
  uint64_t result = (QP::ParserConfiguration *)*((void *)this + 1);
  if (result) {
    return (QP::ParserConfiguration *)QP::ParserConfiguration::setEmbeddingGenerationTimeout(result, a2);
  }
  return result;
}

uint64_t QP::QueryParserEngine::setU2Enabled(QP::QueryParserEngine *this, const __CFBoolean *a2)
{
  uint64_t result = *((void *)this + 1);
  if (result) {
    return QP::ParserConfiguration::setU2Enabled(result, a2);
  }
  return result;
}

uint64_t QP::QueryParserEngine::U2Enabled(QP::QueryParserEngine *this)
{
  return *(unsigned __int8 *)(*((void *)this + 1) + 55);
}

uint64_t QP::QueryParserEngine::setUseLLMParse(QP::QueryParserEngine *this, const __CFBoolean *a2)
{
  uint64_t result = *((void *)this + 1);
  if (result) {
    return QP::ParserConfiguration::setUseLLMParse(result, a2);
  }
  return result;
}

uint64_t QP::QueryParserEngine::useLLMParse(QP::QueryParserEngine *this)
{
  return *(unsigned __int8 *)(*((void *)this + 1) + 56);
}

void QP::QueryParserEngine::preheat(QP::Parser **this)
{
  if (parserLogger(void)::token != -1) {
    dispatch_once(&parserLogger(void)::token, &__block_literal_global_9);
  }
  os_signpost_id_t v2 = os_signpost_id_generate((os_log_t)parserLogger(void)::log);
  if (parserLogger(void)::token != -1) {
    dispatch_once(&parserLogger(void)::token, &__block_literal_global_9);
  }
  if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    os_signpost_id_t v3 = parserLogger(void)::log;
    if (os_signpost_enabled((os_log_t)parserLogger(void)::log))
    {
      *(_WORD *)long long buf = 0;
      _os_signpost_emit_with_name_impl(&dword_224D85000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v2, "QueryParserEngine::preheat", "", buf, 2u);
    }
  }
  QP::Parser::preheat(this[9]);
  if (*((unsigned char *)this[1] + 50))
  {
    uint64_t v4 = this[11];
    if (v4) {
      QP::Embedder::preheat(v4);
    }
  }
  if (parserLogger(void)::token != -1) {
    dispatch_once(&parserLogger(void)::token, &__block_literal_global_9);
  }
  if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v5 = parserLogger(void)::log;
    if (os_signpost_enabled((os_log_t)parserLogger(void)::log))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_signpost_emit_with_name_impl(&dword_224D85000, v5, OS_SIGNPOST_INTERVAL_END, v2, "QueryParserEngine::preheat", "", v6, 2u);
    }
  }
}

void QP::QueryParserEngine::cooldown(QP::Parser **this)
{
  if (parserLogger(void)::token != -1) {
    dispatch_once(&parserLogger(void)::token, &__block_literal_global_9);
  }
  os_signpost_id_t v2 = os_signpost_id_generate((os_log_t)parserLogger(void)::log);
  if (parserLogger(void)::token != -1) {
    dispatch_once(&parserLogger(void)::token, &__block_literal_global_9);
  }
  if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    os_signpost_id_t v3 = parserLogger(void)::log;
    if (os_signpost_enabled((os_log_t)parserLogger(void)::log))
    {
      *(_WORD *)long long buf = 0;
      _os_signpost_emit_with_name_impl(&dword_224D85000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v2, "QueryParserEngine::cooldown", "", buf, 2u);
    }
  }
  QP::Parser::cooldown(this[9]);
  uint64_t v4 = this[11];
  if (v4) {
    QP::Embedder::cooldown(v4);
  }
  if (parserLogger(void)::token != -1) {
    dispatch_once(&parserLogger(void)::token, &__block_literal_global_9);
  }
  if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v5 = parserLogger(void)::log;
    if (os_signpost_enabled((os_log_t)parserLogger(void)::log))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_signpost_emit_with_name_impl(&dword_224D85000, v5, OS_SIGNPOST_INTERVAL_END, v2, "QueryParserEngine::cooldown", "", v6, 2u);
    }
  }
}

unsigned char *QP::QueryParserEngine::setIsEntitySearch(QP::QueryParserEngine *this, const __CFBoolean *a2, const __CFBoolean *a3, const __CFBoolean *a4)
{
  uint64_t result = (unsigned char *)*((void *)this + 1);
  if (result) {
    return QP::ParserConfiguration::setIsEntitySearch(result, a2, a3, a4);
  }
  return result;
}

BOOL QP::QueryParserEngine::entitySearchEnabled(QP::QueryParserEngine *this)
{
  uint64_t v1 = *((void *)this + 1);
  return v1 && *(unsigned char *)(v1 + 62) != 0;
}

uint64_t QP::QueryParserEngine::loadAssetsWithURL(QP::QueryParserEngine *this, const __CFLocale *a2, CFURLRef url)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFURLRef v6 = CFURLCreateCopyAppendingPathComponent((CFAllocatorRef)*MEMORY[0x263EFFB08], url, @"config.plist", 0);
  QP::ParserConfiguration::loadConfigurationResource(*((QP::ParserConfiguration **)this + 1), v6, v7, v8);
  uint64_t v9 = *((void *)this + 1);
  if (!*(void *)(v9 + 200) || !*(void *)(v9 + 104) || !*(unsigned char *)(v9 + 33))
  {
    uint64_t v17 = 0;
    if (!v6) {
      return v17;
    }
LABEL_23:
    CFRelease(v6);
    return v17;
  }
  if (parserLogger(void)::token != -1) {
    dispatch_once(&parserLogger(void)::token, &__block_literal_global_9);
  }
  CFURLRef v10 = parserLogger(void)::log;
  if (os_log_type_enabled((os_log_t)parserLogger(void)::log, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 138412290;
    CFURLRef v20 = url;
    _os_log_impl(&dword_224D85000, v10, OS_LOG_TYPE_INFO, "[QueryParserEngine] loading assets with url %@", buf, 0xCu);
  }
  CFURLRef v12 = CFURLCreateCopyAppendingPathComponent(v5, url, @"cfg.plist", 0);
  if (v6) {
    CFRelease(v6);
  }
  QP::ParserGrammar::loadParserGrammarResource(*((QP::ParserGrammar **)this + 3), v12, 0, v11);
  CFURLRef v13 = CFURLCreateCopyAppendingPathComponent(v5, url, @"root.cache", 0);
  if (v12) {
    CFRelease(v12);
  }
  QP::Lexer::loadLexerResource(*((QP::Lexer **)this + 5), v13);
  QP::Lexer::loadLexerResource(*((QP::Lexer **)this + 7), v13);
  CFURLRef v14 = CFURLCreateCopyAppendingPathComponent(v5, url, @"dates.cache", 0);
  if (v13) {
    CFRelease(v13);
  }
  QP::Lexer::loadLexerResource(*((QP::Lexer **)this + 5), v14);
  QP::Lexer::loadLexerResource(*((QP::Lexer **)this + 7), v14);
  CFURLRef v15 = CFURLCreateCopyAppendingPathComponent(v5, url, @"lexicon.cache", 0);
  if (v14) {
    CFRelease(v14);
  }
  QP::Lexer::loadLexerResource(*((QP::Lexer **)this + 5), v15);
  QP::Lexer::loadLexerResource(*((QP::Lexer **)this + 7), v15);
  CFURLRef v16 = CFURLCreateCopyAppendingPathComponent(v5, url, @"dates.plist", 0);
  if (v15) {
    CFRelease(v15);
  }
  QP::Formatter::loadFormatterResource(*((QP::DateFormatter ***)this + 10), v16);
  CFURLRef v6 = CFURLCreateCopyAppendingPathComponent(v5, url, @"reference.mdplist", 0);
  if (v16) {
    CFRelease(v16);
  }
  QP::Lexer::loadLexerResource(*((QP::Lexer **)this + 5), v6);
  QP::Lexer::loadLexerResource(*((QP::Lexer **)this + 7), v6);
  uint64_t v17 = 1;
  if (v6) {
    goto LABEL_23;
  }
  return v17;
}

void sub_224DE5F9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void QP::QueryParserEngine::clearResources(QP::QueryParserEngine *this)
{
  QP::ParserGrammar::clearResources(*((QP::ParserGrammar **)this + 3));
  QP::Lexer::clearResources(*((QP::DateConverter ****)this + 5));
  QP::Lexer::clearResources(*((QP::DateConverter ****)this + 7));
  os_signpost_id_t v2 = (QP::Formatter *)*((void *)this + 10);
  QP::Formatter::clearResources(v2);
}

uint64_t __Block_byref_object_copy__8(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a2 + 4nlp::CFScopedPtr<__CFString const*>::reset((const void **)&a9, 0) = 0;
  *(void *)(result + 4nlp::CFScopedPtr<__CFString const*>::reset((const void **)&a9, 0) = v2;
  return result;
}

void __Block_byref_object_dispose__8(uint64_t a1)
{
}

void ___ZN2QP17QueryParserEngine15updateResourcesEv_block_invoke(void *a1, CFURLRef url)
{
  CFStringRef PathComponent = CFURLCopyLastPathComponent(url);
  if (CFStringsAreEqual(PathComponent, @"config.plist"))
  {
    uint64_t v5 = *(void *)(a1[4] + 8);
    CFTypeRef v6 = CFRetain(url);
  }
  else if (CFStringsAreEqual(PathComponent, @"cfg.plist"))
  {
    uint64_t v5 = *(void *)(a1[5] + 8);
    CFTypeRef v6 = CFRetain(url);
  }
  else if (CFStringsAreEqual(PathComponent, @"dates.plist"))
  {
    uint64_t v5 = *(void *)(a1[6] + 8);
    CFTypeRef v6 = CFRetain(url);
  }
  else if (CFStringsAreEqual(PathComponent, @"root.cache"))
  {
    uint64_t v5 = *(void *)(a1[7] + 8);
    CFTypeRef v6 = CFRetain(url);
  }
  else if (CFStringsAreEqual(PathComponent, @"dates.cache"))
  {
    uint64_t v5 = *(void *)(a1[8] + 8);
    CFTypeRef v6 = CFRetain(url);
  }
  else if (CFStringsAreEqual(PathComponent, @"lexicon.cache"))
  {
    uint64_t v5 = *(void *)(a1[9] + 8);
    CFTypeRef v6 = CFRetain(url);
  }
  else
  {
    if (!CFStringsAreEqual(PathComponent, @"reference.mdplist")) {
      goto LABEL_16;
    }
    uint64_t v5 = *(void *)(a1[10] + 8);
    CFTypeRef v6 = CFRetain(url);
  }
  nlp::CFScopedPtr<__CFURL const*>::reset((const void **)(v5 + 40), v6);
LABEL_16:
  if (PathComponent) {
    CFRelease(PathComponent);
  }
}

void sub_224DE61CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

void ___ZN2QP17QueryParserEngine15updateResourcesEv_block_invoke_2(uint64_t a1, CFURLRef url)
{
  CFStringRef PathComponent = CFURLCopyLastPathComponent(url);
  if (CFStringsAreEqual(PathComponent, @"geobase.map"))
  {
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
    CFTypeRef v6 = CFRetain(url);
    nlp::CFScopedPtr<__CFURL const*>::reset((const void **)(v5 + 40), v6);
  }
  if (PathComponent) {
    CFRelease(PathComponent);
  }
}

void sub_224DE6264(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

void QP::QueryParserEngine::setString(QP::QueryParserEngine *this, const __CFString *a2, const __CFDictionary *a3)
{
}

void QP::QueryParserEngine::setString(QP::QueryParserEngine *this, const __CFString *a2, const __CFDictionary *a3, int a4, int a5, int a6, int a7, int a8)
{
  uint64_t v99 = *MEMORY[0x263EF8340];
  if (parserLogger(void)::token != -1) {
    dispatch_once(&parserLogger(void)::token, &__block_literal_global_9);
  }
  os_signpost_id_t v14 = os_signpost_id_generate((os_log_t)parserLogger(void)::log);
  if (parserLogger(void)::token != -1) {
    dispatch_once(&parserLogger(void)::token, &__block_literal_global_9);
  }
  os_signpost_id_t spid = v14;
  unint64_t v15 = v14 - 1;
  if (v15 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    CFURLRef v16 = parserLogger(void)::log;
    if (os_signpost_enabled((os_log_t)parserLogger(void)::log))
    {
      *(_WORD *)long long buf = 0;
      _os_signpost_emit_with_name_impl(&dword_224D85000, v16, OS_SIGNPOST_INTERVAL_BEGIN, spid, "QueryParserEngine::setString", "", buf, 2u);
    }
  }
  if (*(unsigned char *)(*((void *)this + 1) + 32))
  {
    if (systemListenerHasLocaleUpdates())
    {
      CFLocaleRef Locale = (const __CFLocale *)systemListenerGetLocale();
      RegioCFIndex n = systemListenerGetRegion();
      CFArrayRef PreferredLanguages = (const __CFArray *)systemListenerGetPreferredLanguages();
      QP::ParserConfiguration::setLocale(*((QP::ParserConfiguration **)this + 1), Locale, PreferredLanguages, 1);
      CFURLRef v20 = (const void **)*((void *)this + 1);
      if (v20) {
        QP::ParserConfiguration::setCalendarRegion(v20, Region);
      }
    }
  }
  if (!*(void *)(*((void *)this + 1) + 168) && systemListenerHasResourceUpdates()) {
    QP::QueryParserEngine::updateResources(this);
  }
  if (*(unsigned char *)(*((void *)this + 1) + 32))
  {
    if (systemListenerHasFirstWeekDayUpdates())
    {
      CFIndex FirstWeekDay = systemListenerGetFirstWeekDay();
      unint64_t v22 = (QP::ParserConfiguration *)*((void *)this + 1);
      if (v22) {
        QP::ParserConfiguration::setFirstWeekDay(v22, FirstWeekDay);
      }
    }
  }
  QP::ParserConfiguration::setCanUseEmbeddings(*((void *)this + 1), (const __CFBoolean *)*MEMORY[0x263EFFB40]);
  if (a6)
  {
    uint64_t v23 = (const void **)*((void *)this + 11);
    if (v23) {
      QP::Embedder::clear(v23);
    }
  }
  if (!*((void *)this + 5)) {
    goto LABEL_111;
  }
  uint64_t valuePtr = -1;
  if (a3 && CFDictionaryContainsKey(a3, @"queryID"))
  {
    CFNumberRef v24 = (const __CFNumber *)CFDictionaryGetValue(a3, @"queryID");
    CFNumberGetValue(v24, kCFNumberCFIndexType, &valuePtr);
  }
  uint64_t v65 = mach_absolute_time();
  if (parserLogger(void)::token != -1) {
    dispatch_once(&parserLogger(void)::token, &__block_literal_global_9);
  }
  if (v15 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    CFURLRef v25 = parserLogger(void)::log;
    if (os_signpost_enabled((os_log_t)parserLogger(void)::log))
    {
      *(_WORD *)long long buf = 0;
      _os_signpost_emit_with_name_impl(&dword_224D85000, v25, OS_SIGNPOST_INTERVAL_BEGIN, spid, "QPLexer::setString", "", buf, 2u);
    }
  }
  int v26 = (a6 & 1) != 0 || *(void *)(*((void *)this + 1) + 8) == 13;
  QP::Lexer::setString(*((const void ***)this + 5), a2, v26, (const void *)valuePtr);
  if (parserLogger(void)::token != -1) {
    dispatch_once(&parserLogger(void)::token, &__block_literal_global_9);
  }
  if (v15 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    unint64_t v27 = parserLogger(void)::log;
    if (os_signpost_enabled((os_log_t)parserLogger(void)::log))
    {
      *(_WORD *)long long buf = 0;
      _os_signpost_emit_with_name_impl(&dword_224D85000, v27, OS_SIGNPOST_INTERVAL_END, spid, "QPLexer::setString", "", buf, 2u);
    }
  }
  if (!*((void *)this + 9)) {
    goto LABEL_111;
  }
  if (parserLogger(void)::token != -1) {
    dispatch_once(&parserLogger(void)::token, &__block_literal_global_9);
  }
  if (v15 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    int v28 = parserLogger(void)::log;
    if (os_signpost_enabled((os_log_t)parserLogger(void)::log))
    {
      *(_WORD *)long long buf = 0;
      _os_signpost_emit_with_name_impl(&dword_224D85000, v28, OS_SIGNPOST_INTERVAL_BEGIN, spid, "QPParser::parse", "", buf, 2u);
      if (parserLogger(void)::token != -1) {
        dispatch_once(&parserLogger(void)::token, &__block_literal_global_9);
      }
    }
  }
  uint64_t v29 = parserLogger(void)::log;
  if (os_log_type_enabled((os_log_t)parserLogger(void)::log, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134218752;
    *(void *)&uint8_t buf[4] = valuePtr;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = a4;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = a5;
    LOWORD(v74) = 1024;
    *(_DWORD *)((char *)&v74 + 2) = a6;
    _os_log_impl(&dword_224D85000, v29, OS_LOG_TYPE_DEFAULT, "[QPNLU][qid=%ld] starting m_parser parse with u2:%d and llm:%d embeddings:%d", buf, 0x1Eu);
  }
  QP::Parser::parse(*((QP::Parser **)this + 9), a4, a5, a7, a8, (const void *)valuePtr, a3);
  if (parserLogger(void)::token != -1) {
    dispatch_once(&parserLogger(void)::token, &__block_literal_global_9);
  }
  if (v15 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    BOOL v30 = parserLogger(void)::log;
    if (os_signpost_enabled((os_log_t)parserLogger(void)::log))
    {
      *(_WORD *)long long buf = 0;
      _os_signpost_emit_with_name_impl(&dword_224D85000, v30, OS_SIGNPOST_INTERVAL_END, spid, "QPParser::parse", "", buf, 2u);
    }
  }
  uint64_t v31 = mach_absolute_time();
  if (QPTimingNanosecondsSinceAbsoluteTime(unsigned long long)::onceToken == -1)
  {
    if (!a4) {
      goto LABEL_84;
    }
  }
  else
  {
    dispatch_once(&QPTimingNanosecondsSinceAbsoluteTime(unsigned long long)::onceToken, &__block_literal_global_85);
    if (!a4) {
      goto LABEL_84;
    }
  }
  uint64_t v32 = *((void *)this + 1);
  if (!*(unsigned char *)(v32 + 36) && !*(unsigned char *)(v32 + 49))
  {
    uint64_t v59 = QPTimingNanosecondsSinceAbsoluteTime(unsigned long long)::sTimebaseInfo;
    unint64_t v60 = *(unsigned int *)algn_26AA70AE4;
    CFIndex v33 = *(unsigned int **)(*((void *)this + 9) + 48);
    unsigned int Length = CFStringGetLength(a2);
    if (*((char *)v33 + 79) < 0)
    {
      if (*((void *)v33 + 8)) {
        uint64_t v34 = (const char *)*((void *)v33 + 7);
      }
      else {
        uint64_t v34 = 0;
      }
    }
    else if (*((unsigned char *)v33 + 79))
    {
      uint64_t v34 = (const char *)(v33 + 14);
    }
    else
    {
      uint64_t v34 = 0;
    }
    uint64_t v35 = *(void *)(*((void *)this + 1) + 104);
    uint64_t value = *v33;
    uint64_t v36 = *((void *)this + 5);
    uint64_t v37 = *(void *)(v36 + 456);
    uint64_t v38 = *(void *)(v36 + 464);
    unint64_t v57 = *((void *)v33 + 2);
    unint64_t v58 = *((void *)v33 + 1);
    unint64_t v39 = *((void *)v33 + 5);
    unint64_t v55 = *((void *)v33 + 4);
    uint64_t v56 = *((void *)v33 + 3);
    uint64_t v62 = v33[12];
    uint64_t v61 = v33[13];
    xpc_object_t empty = xpc_dictionary_create_empty();
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v72 = 0;
    if (v35)
    {
      CFStringRef v41 = (const __CFString *)MEMORY[0x22A6233E0](v35);
      if (v41)
      {
        QP::getUTF8StringFromCFString(v41, buf);
        if (SHIBYTE(v72) < 0) {
          operator delete(__p[0]);
        }
        *(_OWORD *)std::string __p = *(_OWORD *)buf;
        uint64_t v72 = *(void *)&buf[16];
      }
    }
    if (v72 >= 0) {
      id v42 = __p;
    }
    else {
      id v42 = (void **)__p[0];
    }
    xpc_dictionary_set_string(empty, "locale", (const char *)v42);
    xpc_dictionary_set_uint64(empty, "status", value);
    xpc_dictionary_set_uint64(empty, "queryLength", Length);
    xpc_dictionary_set_uint64(empty, "tokenCount", -1431655765 * ((v38 - v37) >> 3));
    double v43 = (double)((v31 - v65) * v59 / v60) / 1000000000.0;
    xpc_dictionary_set_double(empty, "totalLatency", v43);
    xpc_dictionary_set_double(empty, "quLatency", (double)v58 / 1000000000.0);
    xpc_dictionary_set_double(empty, "loadLatency", (double)v57 / 1000000000.0);
    xpc_dictionary_set_double(empty, "cdmLatency", (double)v39 / 1000000000.0);
    xpc_dictionary_set_double(empty, "u2Latency", (double)(v56 - v39) / 1000000000.0);
    xpc_dictionary_set_double(empty, "ecrLatency", (double)v55 / 1000000000.0);
    xpc_dictionary_set_uint64(empty, "ecrCount", v62);
    xpc_dictionary_set_uint64(empty, "ecrErrorCount", v61);
    if (v34) {
      xpc_dictionary_set_string(empty, "errorMessage", v34);
    }
    float v44 = QPProcessName();
    xpc_dictionary_set_string(empty, "process", v44);
    if (parserLogger(void)::token != -1) {
      dispatch_once(&parserLogger(void)::token, &__block_literal_global_9);
    }
    float v45 = parserLogger(void)::log;
    if (os_log_type_enabled((os_log_t)parserLogger(void)::log, OS_LOG_TYPE_INFO))
    {
      CFTypeRef v46 = QPProcessName();
      uint64_t v47 = __p;
      if (v72 < 0) {
        uint64_t v47 = (void **)__p[0];
      }
      *(_DWORD *)long long buf = 136318722;
      unint64_t v48 = "";
      *(void *)&uint8_t buf[4] = "com.apple.queryUnderstandingPerfAndReliability";
      *(_WORD *)&buf[12] = 2080;
      if (v34) {
        unint64_t v48 = v34;
      }
      *(void *)&buf[14] = v46;
      *(_WORD *)&unsigned char buf[22] = 2080;
      uint64_t v74 = v47;
      __int16 v75 = 2048;
      uint64_t v76 = value;
      __int16 v77 = 1024;
      unsigned int v78 = Length;
      __int16 v79 = 1024;
      int v80 = -1431655765 * ((v38 - v37) >> 3);
      __int16 v81 = 2048;
      double v82 = v43;
      __int16 v83 = 2048;
      double v84 = (double)v58 / 1000000000.0;
      __int16 v85 = 2048;
      double v86 = (double)v57 / 1000000000.0;
      __int16 v87 = 2048;
      double v88 = (double)v39 / 1000000000.0;
      __int16 v89 = 2048;
      double v90 = (double)(v56 - v39) / 1000000000.0;
      __int16 v91 = 2048;
      double v92 = (double)v55 / 1000000000.0;
      __int16 v93 = 1024;
      int v94 = v62;
      __int16 v95 = 1024;
      int v96 = v61;
      __int16 v97 = 2080;
      id v98 = v48;
      _os_log_impl(&dword_224D85000, v45, OS_LOG_TYPE_INFO, "log_query_parse_analytic_event: %s {\n\tprocess: %s\n\\tlocale: %s\ntstatus: %llu\n\tqueryLength: %u\n\ttokenCount: %u\n\ttotalLatency: %.4f\n\tquLatency: %.4f\n\tloadLatency: %.4f\n\tcdmLatency: %.4f\n\tu2Latency: %.4f\n\tecrLatency: %.4f\n\tecrCount: %u\n\tecrErrorCount: %u\n\terrorMessage: %s\n}",
        buf,
        0x88u);
    }
    analytics_send_event();
    xpc_release(empty);
    if (SHIBYTE(v72) < 0) {
      operator delete(__p[0]);
    }
  }
LABEL_84:
  if (parserLogger(void)::token != -1) {
    dispatch_once(&parserLogger(void)::token, &__block_literal_global_9);
  }
  uint64_t v49 = parserLogger(void)::log;
  if (os_log_type_enabled((os_log_t)parserLogger(void)::log, OS_LOG_TYPE_DEBUG)) {
    QP::QueryParserEngine::setString(&valuePtr, (uint64_t)a3, v49);
  }
  if (!a6) {
    goto LABEL_111;
  }
  if (!*(unsigned char *)(*((void *)this + 1) + 53))
  {
    if (parserLogger(void)::token != -1) {
      dispatch_once(&parserLogger(void)::token, &__block_literal_global_9);
    }
    CFTypeRef v52 = parserLogger(void)::log;
    if (!os_log_type_enabled((os_log_t)parserLogger(void)::log, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_111;
    }
    *(_DWORD *)long long buf = 134217984;
    *(void *)&uint8_t buf[4] = valuePtr;
    CFURLRef v53 = "[QPNLU][qid=%ld] not generating query embedding due to failed canUseEmbeddings check";
LABEL_110:
    _os_log_impl(&dword_224D85000, v52, OS_LOG_TYPE_DEFAULT, v53, buf, 0xCu);
    goto LABEL_111;
  }
  uint64_t v50 = (QP::Embedder *)*((void *)this + 11);
  if (!v50)
  {
    if (parserLogger(void)::token != -1) {
      dispatch_once(&parserLogger(void)::token, &__block_literal_global_9);
    }
    CFTypeRef v52 = parserLogger(void)::log;
    if (!os_log_type_enabled((os_log_t)parserLogger(void)::log, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_111;
    }
    *(_DWORD *)long long buf = 134217984;
    *(void *)&uint8_t buf[4] = valuePtr;
    CFURLRef v53 = "[QPNLU][qid=%ld] not generating query embedding due to no embedder available";
    goto LABEL_110;
  }
  if (!QP::Embedder::shouldEmbedLanguage(v50, a3))
  {
    if (parserLogger(void)::token != -1) {
      dispatch_once(&parserLogger(void)::token, &__block_literal_global_9);
    }
    CFTypeRef v52 = parserLogger(void)::log;
    if (!os_log_type_enabled((os_log_t)parserLogger(void)::log, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_111;
    }
    *(_DWORD *)long long buf = 134217984;
    *(void *)&uint8_t buf[4] = valuePtr;
    CFURLRef v53 = "[QPNLU][qid=%ld] not generating query embedding due to failed language check";
    goto LABEL_110;
  }
  if (QP::Embedder::shouldEmbedString(*((QP::Embedder **)this + 11), a2))
  {
    uint64_t v51 = (void *)*((void *)this + 9);
    v69[0] = MEMORY[0x263EF8330];
    v69[1] = 0x40000000;
    v69[2] = ___ZN2QP17QueryParserEngine9setStringEPK10__CFStringPK14__CFDictionarybbbbb_block_invoke;
    v69[3] = &__block_descriptor_tmp_46;
    v69[4] = this;
    void v69[5] = valuePtr;
    v69[6] = a3;
    QP::Parser::embeddingString(v51, valuePtr, (uint64_t)v69);
    goto LABEL_111;
  }
  if (parserLogger(void)::token != -1) {
    dispatch_once(&parserLogger(void)::token, &__block_literal_global_9);
  }
  CFTypeRef v52 = parserLogger(void)::log;
  if (os_log_type_enabled((os_log_t)parserLogger(void)::log, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134217984;
    *(void *)&uint8_t buf[4] = valuePtr;
    CFURLRef v53 = "[QPNLU][qid=%ld] not generating query embedding due to failed string check";
    goto LABEL_110;
  }
LABEL_111:
  if (parserLogger(void)::token != -1) {
    dispatch_once(&parserLogger(void)::token, &__block_literal_global_9);
  }
  if (v15 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v54 = parserLogger(void)::log;
    if (os_signpost_enabled((os_log_t)parserLogger(void)::log))
    {
      *(_WORD *)long long buf = 0;
      _os_signpost_emit_with_name_impl(&dword_224D85000, v54, OS_SIGNPOST_INTERVAL_END, spid, "QueryParserEngine::setString", "", buf, 2u);
    }
  }
}

void sub_224DE6F00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN2QP17QueryParserEngine9setStringEPK10__CFStringPK14__CFDictionarybbbbb_block_invoke(uint64_t a1, CFArrayRef theArray, const __CFArray *a3, uint64_t a4)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void *)(a1 + 32);
  if (a4)
  {
    if (parserLogger(void)::token != -1) {
      dispatch_once(&parserLogger(void)::token, &__block_literal_global_9);
    }
    uint64_t v9 = parserLogger(void)::log;
    if (os_log_type_enabled((os_log_t)parserLogger(void)::log, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void *)(a1 + 40);
      int v15 = 134217984;
      uint64_t v16 = v10;
      _os_log_impl(&dword_224D85000, v9, OS_LOG_TYPE_DEFAULT, "[QPNLU][qid=%ld] obtained error while processing embedding", (uint8_t *)&v15, 0xCu);
    }
    QP::Embedder::createEmbeddingError(*(void *)(v7 + 88), a4);
  }
  if (theArray
    && a3
    && (CFIndex Count = CFArrayGetCount(theArray), Count == CFArrayGetCount(a3))
    && CFArrayGetCount(theArray) >= 1)
  {
    if (*(unsigned char *)(*(void *)(v7 + 8) + 52)) {
      CFURLRef v12 = (const __CFBoolean **)MEMORY[0x263EFFB38];
    }
    else {
      CFURLRef v12 = (const __CFBoolean **)MEMORY[0x263EFFB40];
    }
    QP::Embedder::setInputs(*(const void ***)(v7 + 88), theArray, a3, *(const __CFDictionary **)(a1 + 48), *v12);
  }
  else
  {
    if (parserLogger(void)::token != -1) {
      dispatch_once(&parserLogger(void)::token, &__block_literal_global_9);
    }
    CFURLRef v13 = parserLogger(void)::log;
    if (os_log_type_enabled((os_log_t)parserLogger(void)::log, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = *(void *)(a1 + 40);
      int v15 = 134217984;
      uint64_t v16 = v14;
      _os_log_impl(&dword_224D85000, v13, OS_LOG_TYPE_DEFAULT, "[QPNLU][qid=%ld] not generating embedding for empty / invalid embedding inputs / keys array", (uint8_t *)&v15, 0xCu);
    }
  }
}

uint64_t QP::QueryParserEngine::string(QP::QueryParserEngine *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (v1) {
    return *(void *)(v1 + 440);
  }
  else {
    return 0;
  }
}

void QP::QueryParserEngine::setDate(QP::QueryParserEngine *this, const __CFDate *a2)
{
  uint64_t v2 = (QP::ParserConfiguration *)*((void *)this + 1);
  if (v2) {
    QP::ParserConfiguration::setDate(v2, a2);
  }
}

uint64_t QP::QueryParserEngine::getDate(QP::QueryParserEngine *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (v1) {
    return *(void *)(v1 + 72);
  }
  else {
    return 0;
  }
}

uint64_t QP::QueryParserEngine::getCalendar(QP::QueryParserEngine *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (v1) {
    return *(void *)(v1 + 88);
  }
  else {
    return 0;
  }
}

QP::QueryParserEngine *QP::QueryParserEngine::updateWithOptions(QP::QueryParserEngine *this, const __CFDictionary *a2)
{
  if (*((void *)this + 1)) {
    QP::QueryParserEngine::loadKnowledgeSource(this, a2);
  }
  return this;
}

uint64_t QP::QueryParserEngine::updateEntitySearch(uint64_t this)
{
  if (*(void *)(this + 8))
  {
    uint64_t v1 = this;
    QP::Lexer::updateTagger(*(QP::Lexer **)(this + 40));
    uint64_t v2 = *(uint64_t (**)(void))(**(void **)(v1 + 80) + 48);
    return v2();
  }
  return this;
}

_DWORD *QP::QueryParserEngine::setFormat(uint64_t a1, int a2, int a3)
{
  uint64_t result = *(_DWORD **)(a1 + 8);
  if (result) {
    return (_DWORD *)QP::ParserConfiguration::setParserFormat(result, a2, a3);
  }
  return result;
}

uint64_t QP::QueryParserEngine::setCustomFieldSpecifications(QP::QueryParserEngine *this, const __CFDictionary *a2, int a3)
{
  uint64_t result = *((void *)this + 1);
  if (result)
  {
    uint64_t result = QP::ParserConfiguration::setCustomFieldSpecifications((QP::ParserConfiguration *)result, a2, a3);
    if (result)
    {
      uint64_t v5 = (uint64_t *)*((void *)this + 12);
      if (v5) {
        QPSpotlightKnowledgeSourceSetCustomFields(v5, *(const __CFDictionary **)(*((void *)this + 1) + 224));
      }
      return 1;
    }
  }
  return result;
}

QP::ParserConfiguration *QP::QueryParserEngine::setContextIdentifier(QP::QueryParserEngine *this, const __CFString *a2, int a3)
{
  uint64_t result = (QP::ParserConfiguration *)*((void *)this + 1);
  if (result) {
    return (QP::ParserConfiguration *)QP::ParserConfiguration::setAppContext(result, a2, a3);
  }
  return result;
}

QP::ParserConfiguration *QP::QueryParserEngine::setCustomResourceDirectory(QP::QueryParserEngine *this, const __CFURL *a2, int a3)
{
  uint64_t result = (QP::ParserConfiguration *)*((void *)this + 1);
  if (result) {
    return (QP::ParserConfiguration *)QP::ParserConfiguration::setCustomResourceDirectory(result, a2, a3);
  }
  return result;
}

uint64_t QP::QueryParserEngine::getCustomResourceDirectory(QP::QueryParserEngine *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (v1) {
    return *(void *)(v1 + 168);
  }
  else {
    return 0;
  }
}

uint64_t QP::QueryParserEngine::setLoadAnnotations(QP::QueryParserEngine *this, const __CFBoolean *a2)
{
  uint64_t result = *((void *)this + 1);
  if (result) {
    return QP::ParserConfiguration::setAnnotationsEnabled(result, a2);
  }
  return result;
}

uint64_t QP::QueryParserEngine::setIgnoreAttributedParses(QP::QueryParserEngine *this, const __CFBoolean *a2)
{
  uint64_t result = *((void *)this + 1);
  if (result) {
    return QP::ParserConfiguration::setIgnoreAttributedParses(result, a2);
  }
  return result;
}

uint64_t QP::QueryParserEngine::setIgnoreFutureDates(QP::QueryParserEngine *this, const __CFBoolean *a2)
{
  uint64_t result = *((void *)this + 1);
  if (result) {
    return QP::ParserConfiguration::setIgnoreFutureDates(result, a2);
  }
  return result;
}

uint64_t QP::QueryParserEngine::setIgnorePastDates(QP::QueryParserEngine *this, const __CFBoolean *a2)
{
  uint64_t result = *((void *)this + 1);
  if (result) {
    return QP::ParserConfiguration::setIgnorePastDates(result, a2);
  }
  return result;
}

uint64_t QP::QueryParserEngine::setIgnoreRecurringDates(QP::QueryParserEngine *this, const __CFBoolean *a2)
{
  uint64_t result = *((void *)this + 1);
  if (result) {
    return QP::ParserConfiguration::setIgnoreRecurringDates(result, a2);
  }
  return result;
}

uint64_t QP::QueryParserEngine::setResolveFutureDates(QP::QueryParserEngine *this, const __CFBoolean *a2)
{
  uint64_t result = *((void *)this + 1);
  if (result) {
    return QP::ParserConfiguration::setResolveFutureDates(result, a2);
  }
  return result;
}

uint64_t QP::QueryParserEngine::setResolvePastDates(QP::QueryParserEngine *this, const __CFBoolean *a2)
{
  uint64_t result = *((void *)this + 1);
  if (result) {
    return QP::ParserConfiguration::setResolvePastDates(result, a2);
  }
  return result;
}

uint64_t QP::QueryParserEngine::setResolveConcreteDates(QP::QueryParserEngine *this, const __CFBoolean *a2)
{
  uint64_t result = *((void *)this + 1);
  if (result) {
    return QP::ParserConfiguration::setResolveConcreteDates(result, a2);
  }
  return result;
}

uint64_t QP::QueryParserEngine::setUsePartOfSpeech(QP::QueryParserEngine *this, const __CFBoolean *a2)
{
  uint64_t result = *((void *)this + 1);
  if (result) {
    return QP::ParserConfiguration::setUsePartOfSpeech(result, a2);
  }
  return result;
}

__n128 __Block_byref_object_copy__47(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 4nlp::CFScopedPtr<__CFString const*>::reset((const void **)&a9, 0) = result;
  *(void *)(a2 + 4nlp::CFScopedPtr<__CFString const*>::reset((const void **)&a9, 0) = 0;
  *(void *)(a2 + 48) = 0;
  return result;
}

void __Block_byref_object_dispose__48(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 __Block_byref_object_copy__49(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 4nlp::CFScopedPtr<__CFString const*>::reset((const void **)&a9, 0) = result;
  return result;
}

uint64_t __Block_byref_object_copy__51(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a2 + 4nlp::CFScopedPtr<__CFString const*>::reset((const void **)&a9, 0) = 0;
  *(void *)(result + 4nlp::CFScopedPtr<__CFString const*>::reset((const void **)&a9, 0) = v2;
  return result;
}

void __Block_byref_object_dispose__52(uint64_t a1)
{
}

void QP::QueryParserEngine::enumerateParseResults(void *a1, uint64_t a2)
{
  if (a1[1])
  {
    uint64_t v3 = a1[9];
    if (v3)
    {
      if (a1[10])
      {
        uint64_t v21 = 0;
        unint64_t v22 = &v21;
        uint64_t v23 = 0x3802000000;
        CFNumberRef v24 = __Block_byref_object_copy__47;
        uint64_t v26 = 0;
        unint64_t v27 = 0;
        CFURLRef v25 = __Block_byref_object_dispose__48;
        uint64_t v17 = 0;
        CFLocaleRef v18 = &v17;
        uint64_t v19 = 0x2000000000;
        uint64_t v20 = 0;
        v15[0] = 0;
        v15[1] = v15;
        void v15[2] = 0x3802000000;
        void v15[3] = __Block_byref_object_copy__49;
        v15[4] = __Block_byref_object_dispose__50;
        long long v16 = xmmword_224E1E2D0;
        v14[0] = MEMORY[0x263EF8330];
        v14[1] = 0x40000000;
        void v14[2] = ___ZN2QP17QueryParserEngine21enumerateParseResultsEU13block_pointerFvPK14__CFDictionaryPbE_block_invoke;
        long long v14[3] = &unk_264705C78;
        v14[7] = v15;
        void v14[8] = a1;
        v14[5] = &v21;
        v14[6] = &v17;
        void v14[4] = a2;
        QP::Parser::enumerateParses(v3, (uint64_t)v14);
        char v13 = 0;
        uint64_t v5 = v18[3];
        if (v5)
        {
          (*(void (**)(uint64_t, uint64_t, char *))(a2 + 16))(a2, v5, &v13);
          CFRelease((CFTypeRef)v18[3]);
        }
        else if (v22[5])
        {
          uint64_t v6 = a1[10];
          uint64_t v7 = (std::__shared_weak_count *)v22[6];
          uint64_t v11 = v22[5];
          CFURLRef v12 = v7;
          if (v7) {
            atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 32))(v6, &v11);
          if (v12) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v12);
          }
          CFDictionaryRef v8 = *(const __CFDictionary **)(a1[10] + 56);
          if (v8)
          {
            CFDictionaryRef Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], v8);
            if (Copy)
            {
              char v10 = 0;
              (*(void (**)(uint64_t, CFDictionaryRef, char *))(a2 + 16))(a2, Copy, &v10);
              CFRelease(Copy);
            }
          }
        }
        _Block_object_dispose(v15, 8);
        _Block_object_dispose(&v17, 8);
        _Block_object_dispose(&v21, 8);
        if (v27) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v27);
        }
      }
    }
  }
}

void sub_224DE7618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v16 - 120), 8);
  _Block_object_dispose((const void *)(v16 - 88), 8);
  CFLocaleRef v18 = *(std::__shared_weak_count **)(v15 + 136);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  _Unwind_Resume(a1);
}

void ___ZN2QP17QueryParserEngine21enumerateParseResultsEU13block_pointerFvPK14__CFDictionaryPbE_block_invoke(void *a1, CFStringRef **a2, unsigned char *a3)
{
  uint64_t v6 = a1[8];
  uint64_t v7 = *(void *)(v6 + 80);
  CFDictionaryRef v8 = (std::__shared_weak_count *)a2[1];
  CFNumberRef v24 = *a2;
  CFURLRef v25 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v9 = (*(uint64_t (**)(uint64_t, CFStringRef **))(*(void *)v7 + 32))(v7, &v24);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (v9)
  {
    if (!*(void *)(*(void *)(a1[6] + 8) + 24)
      || QP::Parse::isValid(*a2)
      || ((uint64_t v10 = *(void *)(a1[7] + 8),
           CFStringRef v11 = *(const __CFString **)(v10 + 40),
           CFStringRef v12 = *(CFStringRef *)(v10 + 48),
           CFStringRef v13 = (*a2)[8],
           CFStringRef v14 = (*a2)[9],
           v11 == v13)
        ? (BOOL v15 = v12 == v14)
        : (BOOL v15 = 0),
          v15))
    {
      CFDictionaryRef v20 = *(const __CFDictionary **)(*(void *)(v6 + 80) + 56);
      if (v20) {
        CFDictionaryRef Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], v20);
      }
      else {
        CFDictionaryRef Copy = 0;
      }
      uint64_t v22 = *(void *)(a1[6] + 8);
      if (*(void *)(v22 + 24))
      {
        (*(void (**)(void))(a1[4] + 16))(a1[4]);
        CFRelease(*(CFTypeRef *)(*(void *)(a1[6] + 8) + 24));
        *(void *)(*(void *)(a1[6] + 8) + 24) = 0;
        uint64_t v22 = *(void *)(a1[6] + 8);
      }
      *(void *)(v22 + 24) = Copy;
      CFStringRef v13 = (*a2)[8];
      CFStringRef v14 = (*a2)[9];
    }
    else
    {
      *a3 = 1;
    }
    uint64_t v23 = *(void *)(a1[7] + 8);
    *(void *)(v23 + 4nlp::CFScopedPtr<__CFString const*>::reset((const void **)&a9, 0) = v13;
    *(void *)(v23 + 48) = v14;
  }
  else
  {
    uint64_t v16 = *(void *)(a1[5] + 8);
    CFLocaleRef v18 = *a2;
    uint64_t v17 = a2[1];
    if (v17) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)v17 + 1, 1uLL, memory_order_relaxed);
    }
    uint64_t v19 = *(std::__shared_weak_count **)(v16 + 48);
    *(void *)(v16 + 4nlp::CFScopedPtr<__CFString const*>::reset((const void **)&a9, 0) = v18;
    *(void *)(v16 + 48) = v17;
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
  }
}

void sub_224DE7810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void QP::QueryParserEngine::enumerateSuggestionResults(void *a1, uint64_t a2)
{
  if (a1[1])
  {
    uint64_t v3 = a1[9];
    if (v3)
    {
      if (a1[10])
      {
        uint64_t v14 = 0;
        BOOL v15 = &v14;
        uint64_t v16 = 0x3002000000;
        uint64_t v17 = __Block_byref_object_copy__51;
        CFLocaleRef v18 = __Block_byref_object_dispose__52;
        CFTypeRef v19 = 0;
        v13[0] = 0;
        v13[1] = v13;
        v13[2] = 0x2000000000;
        v13[3] = -1;
        v12[0] = 0;
        v12[1] = v12;
        v12[2] = 0x2000000000;
        _OWORD v12[3] = -1;
        v10[0] = 0;
        v10[1] = v10;
        void v10[2] = 0x2000000000;
        char v11 = 0;
        v9[0] = MEMORY[0x263EF8330];
        v9[1] = 0x40000000;
        v9[2] = ___ZN2QP17QueryParserEngine26enumerateSuggestionResultsEU13block_pointerFvPK14__CFDictionaryPbE_block_invoke;
        void v9[3] = &unk_264705CA0;
        v9[6] = v12;
        v9[7] = &v14;
        v9[4] = a2;
        void v9[5] = v13;
        v9[8] = v10;
        v9[9] = a1;
        QP::Parser::enumerateParses(v3, (uint64_t)v9);
        char v8 = 0;
        CFDictionaryRef v5 = (const __CFDictionary *)v15[5];
        if (v5 && CFDictionaryGetCount(v5))
        {
          (*(void (**)(uint64_t, uint64_t, char *))(a2 + 16))(a2, v15[5], &v8);
        }
        else
        {
          uint64_t v6 = a1[9];
          v7[0] = MEMORY[0x263EF8330];
          v7[1] = 0x40000000;
          v7[2] = ___ZN2QP17QueryParserEngine26enumerateSuggestionResultsEU13block_pointerFvPK14__CFDictionaryPbE_block_invoke_2;
          void v7[3] = &unk_264705CC8;
          v7[4] = a2;
          void v7[5] = a1;
          QP::Parser::enumerateTokenCompletions(v6, (uint64_t)v7);
        }
        _Block_object_dispose(v10, 8);
        _Block_object_dispose(v12, 8);
        _Block_object_dispose(v13, 8);
        _Block_object_dispose(&v14, 8);
        if (v19) {
          CFRelease(v19);
        }
      }
    }
  }
}

void sub_224DE7A10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v28 - 160), 8);
  _Block_object_dispose((const void *)(v28 - 128), 8);
  _Block_object_dispose((const void *)(v28 - 96), 8);
  nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)(v27 + 40), 0);
  _Unwind_Resume(a1);
}

void ___ZN2QP17QueryParserEngine26enumerateSuggestionResultsEU13block_pointerFvPK14__CFDictionaryPbE_block_invoke(void *a1, void *a2, unsigned char *a3)
{
  uint64_t v4 = a1[9];
  CFDictionaryRef v22 = 0;
  if (*(void *)(*a2 + 40) < *(void *)(*(void *)(a1[5] + 8) + 24))
  {
    *a3 = 1;
    return;
  }
  uint64_t v7 = *(void *)(v4 + 80);
  char v8 = (std::__shared_weak_count *)a2[1];
  uint64_t v20 = *a2;
  uint64_t v21 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v9 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v7 + 32))(v7, &v20);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (!v9)
  {
    CFDictionaryRef Copy = 0;
    goto LABEL_25;
  }
  uint64_t v10 = *(void *)(v4 + 80);
  CFDictionaryRef v11 = *(const __CFDictionary **)(v10 + 64);
  if (v11)
  {
    CFDictionaryRef Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], v11);
    uint64_t v10 = *(void *)(v4 + 80);
    CFDictionaryRef v22 = Copy;
  }
  else
  {
    CFDictionaryRef Copy = 0;
  }
  uint64_t v13 = *(void *)(v10 + 80);
  uint64_t v14 = *(void *)(*(void *)(a1[6] + 8) + 24);
  if (v13 <= v14) {
    goto LABEL_16;
  }
  if (!CFDictionaryGetCount(Copy))
  {
    uint64_t v13 = *(void *)(*(void *)(v4 + 80) + 80);
    uint64_t v14 = *(void *)(*(void *)(a1[6] + 8) + 24);
LABEL_16:
    if (v13 < v14)
    {
      if (Copy) {
        CFRelease(Copy);
      }
      CFDictionaryRef Copy = 0;
      CFDictionaryRef v22 = 0;
      *a3 = 1;
      goto LABEL_25;
    }
    uint64_t v17 = a1[7];
    CFDictionaryRef v18 = *(const __CFDictionary **)(*(void *)(v17 + 8) + 40);
    if (v18)
    {
      CFIndex Count = CFDictionaryGetCount(v18);
      uint64_t v17 = a1[7];
      if (Count)
      {
        (*(void (**)(void))(a1[4] + 16))();
        *(unsigned char *)(*(void *)(a1[8] + 8) + 24) = 1;
        nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)(*(void *)(a1[7] + 8) + 40), 0);
        uint64_t v17 = a1[7];
      }
    }
    uint64_t v15 = *(void *)(v17 + 8);
    CFTypeRef v16 = CFRetain(Copy);
    goto LABEL_24;
  }
  uint64_t v15 = *(void *)(a1[7] + 8);
  CFTypeRef v16 = CFRetain(Copy);
LABEL_24:
  nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)(v15 + 40), v16);
LABEL_25:
  *(void *)(*(void *)(a1[5] + 8) + 24) = *(void *)(*a2 + 40);
  *(void *)(*(void *)(a1[6] + 8) + 24) = *(void *)(*(void *)(v4 + 80) + 80);
  if (Copy) {
    CFRelease(Copy);
  }
}

void sub_224DE7C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va, a4);
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

void ___ZN2QP17QueryParserEngine26enumerateSuggestionResultsEU13block_pointerFvPK14__CFDictionaryPbE_block_invoke_2(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(v3 + 80);
  CFDictionaryRef v5 = (std::__shared_weak_count *)a2[1];
  uint64_t v8 = *a2;
  int v9 = v5;
  CFDictionaryRef v10 = 0;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v4 + 24))(v4, &v8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  CFDictionaryRef v6 = *(const __CFDictionary **)(*(void *)(v3 + 80) + 64);
  if (v6)
  {
    CFDictionaryRef Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], v6);
    CFDictionaryRef v10 = Copy;
    if (Copy)
    {
      (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
      CFRelease(Copy);
    }
  }
}

void sub_224DE7D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t QP::QueryParserEngine::copyCompletions(QP::QueryParserEngine *this)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2000000000;
  CFMutableArrayRef Mutable = 0;
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  if (*((void *)this + 1))
  {
    uint64_t v2 = *((void *)this + 9);
    if (v2)
    {
      if (*((void *)this + 10))
      {
        v5[0] = MEMORY[0x263EF8330];
        v5[1] = 0x40000000;
        v5[2] = ___ZN2QP17QueryParserEngine15copyCompletionsEv_block_invoke;
        v5[3] = &unk_264705CF0;
        v5[4] = &v6;
        QP::Parser::enumerateCompletions(v2, (uint64_t)v5);
      }
    }
  }
  uint64_t v3 = v7[3];
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_224DE7E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN2QP17QueryParserEngine15copyCompletionsEv_block_invoke(uint64_t a1, const void *a2)
{
}

uint64_t QP::QueryParserEngine::copyLastTokenCompletedQuery(QP::QueryParserEngine *this)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2000000000;
  CFMutableArrayRef Mutable = 0;
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  uint64_t v2 = *((void *)this + 5);
  if (v2)
  {
    v5[0] = MEMORY[0x263EF8330];
    v5[1] = 0x40000000;
    v5[2] = ___ZN2QP17QueryParserEngine27copyLastTokenCompletedQueryEv_block_invoke;
    v5[3] = &unk_264705D18;
    v5[4] = &v6;
    QP::Lexer::enumerateLastTokenCompletedQueries(v2, (uint64_t)v5);
  }
  uint64_t v3 = v7[3];
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_224DE7F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN2QP17QueryParserEngine27copyLastTokenCompletedQueryEv_block_invoke(uint64_t a1, const void *a2)
{
}

void QP::QueryParserEngine::enumerateDateRangeParses(QP::DateFormatter ***a1, const __CFString *a2, const __CFDictionary *a3, const __CFString *a4, const __CFDictionary *a5, uint64_t a6)
{
  CFStringRef v8 = QP::Formatter::copyDisplayStringWithStartAndEndDateForRange(a1[10], a2, a3, a4, a5);
  if (v8)
  {
    CFStringRef v9 = v8;
    QP::QueryParserEngine::setString((QP::QueryParserEngine *)a1, v8, 0, 0, 0, 0, 0, 0);
    QP::QueryParserEngine::enumerateParseResults(a1, a6);
    CFRelease(v9);
  }
}

void sub_224DE8040(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

CFDataRef QP::QueryParserEngine::copyQueryEmbeddingData(QP::QueryParserEngine *this)
{
  CFDataRef v1 = *(const __CFData **)(*((void *)this + 11) + 16);
  if (v1) {
    return CFDataCreateCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], v1);
  }
  else {
    return 0;
  }
}

__CFError *QP::QueryParserEngine::copyEmbeddingError(QP::QueryParserEngine *this)
{
  __n128 result = *(__CFError **)(*((void *)this + 11) + 24);
  if (result)
  {
    CFDictionaryRef v3 = CFErrorCopyUserInfo(result);
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    DomaiCFIndex n = CFErrorGetDomain(*(CFErrorRef *)(*((void *)this + 11) + 24));
    CFIndex Code = CFErrorGetCode(*(CFErrorRef *)(*((void *)this + 11) + 24));
    CFErrorRef v7 = CFErrorCreate(v4, Domain, Code, v3);
    CFRelease(v3);
    return v7;
  }
  return result;
}

CFAttributedStringRef QP::QueryParserEngine::copyAttributedInput(QP::QueryParserEngine *this)
{
  CFAttributedStringRef v1 = *(const __CFAttributedString **)(*((void *)this + 5) + 448);
  if (v1) {
    return CFAttributedStringCreateCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], v1);
  }
  else {
    return 0;
  }
}

void QP::QueryParserEngine::cancelWithQueryReference(QP::Embedder **this, CFDictionaryRef theDict)
{
  if (theDict && CFDictionaryContainsKey(theDict, @"queryID"))
  {
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"queryID");
    uint64_t valuePtr = -1;
    CFNumberGetValue(Value, kCFNumberCFIndexType, &valuePtr);
    if (valuePtr != -1) {
      QP::Embedder::cancelWithQueryID(this[11], valuePtr);
    }
  }
}

void QP::Parser::Parser(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  *(void *)a1 = *a2;
  uint64_t v10 = a2[1];
  *(void *)(a1 + 8) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 16) = *a3;
  uint64_t v11 = a3[1];
  *(void *)(a1 + 24) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 32) = *a4;
  uint64_t v12 = a4[1];
  *(void *)(a1 + 4nlp::CFScopedPtr<__CFString const*>::reset((const void **)&a9, 0) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  std::allocate_shared[abi:ne180100]<QP::U2Parser,std::allocator<QP::U2Parser>,std::shared_ptr<QP::ParserConfiguration> &,std::shared_ptr<QP::ParserGrammar> &,std::shared_ptr<QP::Lexer> &,void>(a2, a3, a4, (void *)(a1 + 48));
  std::allocate_shared[abi:ne180100]<QP::LLMParser,std::allocator<QP::LLMParser>,std::shared_ptr<QP::ParserConfiguration> &,std::shared_ptr<QP::ParserGrammar> &,std::shared_ptr<QP::Lexer> &,std::shared_ptr<QP::Lexer> &,void>(a2, a3, a4, a5, (void *)(a1 + 64));
  *(_OWORD *)(a1 + 8nlp::CFScopedPtr<__CFString const*>::reset((const void **)&a9, 0) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(void *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  operator new();
}

void sub_224DE8338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void **a12)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  MEMORY[0x22A623E20](v15, 0x1020C402AAE87FCLL);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&a12);
  a12 = (void **)(v13 + 24);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&a12);
  nlp::CFScopedPtr<__CFArray *>::reset(v14, 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v13 + 8), 0);
  std::unique_ptr<QP::GraphStructureStack>::reset[abi:ne180100]((QP::GraphStructureStack **)v13, 0);
  uint64_t v17 = (std::__shared_weak_count *)v12[9];
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  CFDictionaryRef v18 = (std::__shared_weak_count *)v12[7];
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  CFTypeRef v19 = (std::__shared_weak_count *)v12[5];
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  uint64_t v20 = (std::__shared_weak_count *)v12[3];
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  uint64_t v21 = (std::__shared_weak_count *)v12[1];
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  _Unwind_Resume(a1);
}

QP::GraphStructureStack *std::unique_ptr<QP::GraphStructureStack>::reset[abi:ne180100](QP::GraphStructureStack **a1, QP::GraphStructureStack *a2)
{
  __n128 result = *a1;
  *a1 = a2;
  if (result)
  {
    QP::GraphStructureStack::~GraphStructureStack(result);
    JUMPOUT(0x22A623E20);
  }
  return result;
}

void *std::allocate_shared[abi:ne180100]<QP::U2Parser,std::allocator<QP::U2Parser>,std::shared_ptr<QP::ParserConfiguration> &,std::shared_ptr<QP::ParserGrammar> &,std::shared_ptr<QP::Lexer> &,void>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, void *a4@<X8>)
{
  CFStringRef v8 = operator new(0xF8uLL);
  __n128 result = std::__shared_ptr_emplace<QP::U2Parser>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<QP::ParserConfiguration> &,std::shared_ptr<QP::ParserGrammar> &,std::shared_ptr<QP::Lexer> &,std::allocator<QP::U2Parser>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_224DE84B0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<QP::U2Parser>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<QP::ParserConfiguration> &,std::shared_ptr<QP::ParserGrammar> &,std::shared_ptr<QP::Lexer> &,std::allocator<QP::U2Parser>,0>(void *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D831048;
  std::construct_at[abi:ne180100]<QP::U2Parser,std::shared_ptr<QP::ParserConfiguration> &,std::shared_ptr<QP::ParserGrammar> &,std::shared_ptr<QP::Lexer> &,QP::U2Parser*>((uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_224DE850C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<QP::U2Parser>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D831048;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QP::U2Parser>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D831048;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A623E20);
}

void std::__shared_ptr_emplace<QP::U2Parser>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::construct_at[abi:ne180100]<QP::U2Parser,std::shared_ptr<QP::ParserConfiguration> &,std::shared_ptr<QP::ParserGrammar> &,std::shared_ptr<QP::Lexer> &,QP::U2Parser*>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  CFDictionaryRef v5 = (std::__shared_weak_count *)a2[1];
  uint64_t v13 = *a2;
  uint64_t v14 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (std::__shared_weak_count *)a3[1];
  uint64_t v11 = *a3;
  uint64_t v12 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CFErrorRef v7 = (std::__shared_weak_count *)a4[1];
  uint64_t v9 = *a4;
  uint64_t v10 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  QP::U2Parser::U2Parser(a1, &v13, &v11, &v9);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  return a1;
}

void sub_224DE8664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::construct_at[abi:ne180100]<QP::U2Parser,std::shared_ptr<QP::ParserConfiguration> &,std::shared_ptr<QP::ParserGrammar> &,std::shared_ptr<QP::Lexer> &,QP::U2Parser*>(v10);
  _Unwind_Resume(a1);
}

void QP::U2Parser::~U2Parser(QP::U2Parser *this)
{
  nlp::CFScopedPtr<__CFAttributedString const*>::reset((const void **)this + 26, 0);
  CFDictionaryRef v5 = (void **)((char *)this + 184);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v5);
  CFDictionaryRef v5 = (void **)((char *)this + 160);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v5);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)this + 19, 0);
  std::__tree<unsigned short>::destroy((uint64_t)this + 128, *((void **)this + 17));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 15);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  CFDictionaryRef v3 = (std::__shared_weak_count *)*((void *)this + 13);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  CFAllocatorRef v4 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
}

void *std::allocate_shared[abi:ne180100]<QP::LLMParser,std::allocator<QP::LLMParser>,std::shared_ptr<QP::ParserConfiguration> &,std::shared_ptr<QP::ParserGrammar> &,std::shared_ptr<QP::Lexer> &,std::shared_ptr<QP::Lexer> &,void>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, uint64_t *a4@<X4>, void *a5@<X8>)
{
  uint64_t v10 = operator new(0xA8uLL);
  __n128 result = std::__shared_ptr_emplace<QP::LLMParser>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<QP::ParserConfiguration> &,std::shared_ptr<QP::ParserGrammar> &,std::shared_ptr<QP::Lexer> &,std::shared_ptr<QP::Lexer> &,std::allocator<QP::LLMParser>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_224DE8794(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<QP::LLMParser>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<QP::ParserConfiguration> &,std::shared_ptr<QP::ParserGrammar> &,std::shared_ptr<QP::Lexer> &,std::shared_ptr<QP::Lexer> &,std::allocator<QP::LLMParser>,0>(void *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D831098;
  std::construct_at[abi:ne180100]<QP::LLMParser,std::shared_ptr<QP::ParserConfiguration> &,std::shared_ptr<QP::ParserGrammar> &,std::shared_ptr<QP::Lexer> &,std::shared_ptr<QP::Lexer> &,QP::LLMParser*>((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_224DE87F0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<QP::LLMParser>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D831098;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QP::LLMParser>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D831098;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A623E20);
}

void std::__shared_ptr_emplace<QP::LLMParser>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::construct_at[abi:ne180100]<QP::LLMParser,std::shared_ptr<QP::ParserConfiguration> &,std::shared_ptr<QP::ParserGrammar> &,std::shared_ptr<QP::Lexer> &,std::shared_ptr<QP::Lexer> &,QP::LLMParser*>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  uint64_t v17 = *a2;
  CFDictionaryRef v18 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CFErrorRef v7 = (std::__shared_weak_count *)a3[1];
  uint64_t v15 = *a3;
  CFTypeRef v16 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CFStringRef v8 = (std::__shared_weak_count *)a4[1];
  uint64_t v13 = *a4;
  uint64_t v14 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = (std::__shared_weak_count *)a5[1];
  uint64_t v11 = *a5;
  uint64_t v12 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  QP::LLMParser::LLMParser(a1, &v17, &v15, &v13, &v11);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  return a1;
}

void sub_224DE8978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::construct_at[abi:ne180100]<QP::LLMParser,std::shared_ptr<QP::ParserConfiguration> &,std::shared_ptr<QP::ParserGrammar> &,std::shared_ptr<QP::Lexer> &,std::shared_ptr<QP::Lexer> &,QP::LLMParser*>(v12, v11, v10);
  _Unwind_Resume(a1);
}

void QP::LLMParser::~LLMParser(const void **this)
{
  nlp::CFScopedPtr<__CFAttributedString const*>::reset(this + 15, 0);
  uint64_t v6 = (void **)(this + 12);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)(this + 9);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v6);
  nlp::CFScopedPtr<__CFString const*>::reset(this + 8, 0);
  uint64_t v2 = (std::__shared_weak_count *)this[7];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  CFDictionaryRef v3 = (std::__shared_weak_count *)this[5];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  CFAllocatorRef v4 = (std::__shared_weak_count *)this[3];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  CFDictionaryRef v5 = (std::__shared_weak_count *)this[1];
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void QP::GraphStructureStack::~GraphStructureStack(QP::GraphStructureStack *this)
{
  CFDictionaryRef v3 = (void **)((char *)this + 64);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v3);
  CFDictionaryRef v3 = (void **)((char *)this + 40);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v3);
  CFDictionaryRef v3 = (void **)((char *)this + 16);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void QP::PhotosFormatter::PhotosFormatter(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v6[0] = *a2;
  v6[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = a3[1];
  v5[0] = *a3;
  v5[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  QP::SpotlightFormatter::SpotlightFormatter(a1, v6, v5);
}

void sub_224DE8BC0(_Unwind_Exception *a1)
{
  MEMORY[0x22A623E20](v2, 0xC400A2AC0F1);
  uint64_t v4 = *(void *)(v1 + 200);
  *(void *)(v1 + 20nlp::CFScopedPtr<__CFString const*>::reset((const void **)&a9, 0) = 0;
  if (v4) {
    MEMORY[0x22A623E20](v4, 0xC400A2AC0F1);
  }
  QP::SpotlightFormatter::~SpotlightFormatter((const void **)v1);
  _Unwind_Resume(a1);
}

void QP::SpotlightFormatter::SpotlightFormatter(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v6[0] = *a2;
  v6[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = a3[1];
  v5[0] = *a3;
  v5[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  QP::Formatter::Formatter(a1, v6, v5);
}

void sub_224DE8F14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  _Unwind_Resume(exception_object);
}

void QP::Formatter::Formatter(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  *(void *)a1 = &unk_26D831A18;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = a3[1];
  *(void *)(a1 + 24) = *a3;
  *(void *)(a1 + 32) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 4nlp::CFScopedPtr<__CFString const*>::reset((const void **)&a9, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  operator new();
}

void sub_224DE91E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  QP::Formatter::Formatter(v16);
  nlp::CFScopedPtr<__CFAttributedString *>::reset(v15, 0);
  nlp::CFScopedPtr<__CFDictionary *>::reset(v14, 0);
  nlp::CFScopedPtr<__CFDictionary *>::reset(v13, 0);
  nlp::CFScopedPtr<__CFString const*>::reset(v12, 0);
  std::unique_ptr<QP::DateFormatter>::reset[abi:ne180100](v11, 0);
  CFDictionaryRef v18 = *(std::__shared_weak_count **)(v10 + 32);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  CFTypeRef v19 = *(std::__shared_weak_count **)(v10 + 16);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  _Unwind_Resume(a1);
}

void QP::RemindersParserFormatter::RemindersParserFormatter(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v6[0] = *a2;
  v6[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = a3[1];
  v5[0] = *a3;
  v5[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  QP::Formatter::Formatter(a1, v6, v5);
}

void sub_224DE930C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void QP::PhotosParserFormatter::PhotosParserFormatter(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v6[0] = *a2;
  v6[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = a3[1];
  v5[0] = *a3;
  v5[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  QP::Formatter::Formatter(a1, v6, v5);
}

void sub_224DE93D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void QP::VisualGenerationFormatter::VisualGenerationFormatter(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v6[0] = *a2;
  v6[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = a3[1];
  v5[0] = *a3;
  v5[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  QP::Formatter::Formatter(a1, v6, v5);
}

void sub_224DE94CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v14 = (std::__shared_weak_count *)*((void *)v12 + 12);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  QP::Formatter::~Formatter(v12);
  _Unwind_Resume(a1);
}

uint64_t ___Z36QPTimingNanosecondsSinceAbsoluteTimey_block_invoke_0()
{
  return mach_timebase_info((mach_timebase_info_t)&QPTimingNanosecondsSinceAbsoluteTime(unsigned long long)::sTimebaseInfo);
}

void *std::allocate_shared[abi:ne180100]<QP::ParserConfiguration,std::allocator<QP::ParserConfiguration>,__CFDictionary const*&,void>@<X0>(const __CFDictionary **a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x120uLL);
  __n128 result = std::__shared_ptr_emplace<QP::ParserConfiguration>::__shared_ptr_emplace[abi:ne180100]<__CFDictionary const*&,std::allocator<QP::ParserConfiguration>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_224DE9560(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<QP::ParserConfiguration>::__shared_ptr_emplace[abi:ne180100]<__CFDictionary const*&,std::allocator<QP::ParserConfiguration>,0>(void *a1, const __CFDictionary **a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D831108;
  QP::ParserConfiguration::ParserConfiguration((QP::ParserConfiguration *)(a1 + 3), *a2);
  return a1;
}

void sub_224DE95C0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<QP::ParserConfiguration>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D831108;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QP::ParserConfiguration>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D831108;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A623E20);
}

uint64_t std::__shared_ptr_emplace<QP::ParserConfiguration>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *std::allocate_shared[abi:ne180100]<QP::ParserGrammar,std::allocator<QP::ParserGrammar>,std::shared_ptr<QP::ParserConfiguration> &,void>@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x3C8uLL);
  __n128 result = std::__shared_ptr_emplace<QP::ParserGrammar>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<QP::ParserConfiguration> &,std::allocator<QP::ParserGrammar>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_224DE96B8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<QP::ParserGrammar>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<QP::ParserConfiguration> &,std::allocator<QP::ParserGrammar>,0>(void *a1, uint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D831158;
  std::construct_at[abi:ne180100]<QP::ParserGrammar,std::shared_ptr<QP::ParserConfiguration> &,QP::ParserGrammar*>((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_224DE9714(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<QP::ParserGrammar>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D831158;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QP::ParserGrammar>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D831158;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A623E20);
}

void std::__shared_ptr_emplace<QP::ParserGrammar>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::construct_at[abi:ne180100]<QP::ParserGrammar,std::shared_ptr<QP::ParserConfiguration> &,QP::ParserGrammar*>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v5 = *a2;
  uint64_t v6 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  QP::ParserGrammar::ParserGrammar(a1, &v5);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return a1;
}

void sub_224DE9804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<QP::Lexer,std::allocator<QP::Lexer>,std::shared_ptr<QP::ParserConfiguration> &,std::shared_ptr<QP::ParserGrammar> &,void>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x278uLL);
  __n128 result = std::__shared_ptr_emplace<QP::Lexer>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<QP::ParserConfiguration> &,std::shared_ptr<QP::ParserGrammar> &,std::allocator<QP::Lexer>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_224DE986C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<QP::Lexer>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<QP::ParserConfiguration> &,std::shared_ptr<QP::ParserGrammar> &,std::allocator<QP::Lexer>,0>(void *a1, uint64_t *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D8311A8;
  std::construct_at[abi:ne180100]<QP::Lexer,std::shared_ptr<QP::ParserConfiguration> &,std::shared_ptr<QP::ParserGrammar> &,QP::Lexer*>((uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_224DE98C8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<QP::Lexer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D8311A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QP::Lexer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D8311A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A623E20);
}

void std::__shared_ptr_emplace<QP::Lexer>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::construct_at[abi:ne180100]<QP::Lexer,std::shared_ptr<QP::ParserConfiguration> &,std::shared_ptr<QP::ParserGrammar> &,QP::Lexer*>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  uint64_t v9 = *a2;
  uint64_t v10 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (std::__shared_weak_count *)a3[1];
  uint64_t v7 = *a3;
  CFStringRef v8 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  QP::Lexer::Lexer(a1, &v9, &v7);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  return a1;
}

void sub_224DE99E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void QP::Parser::~Parser(QP::Parser *this)
{
  uint64_t v7 = (void **)((char *)this + 128);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v7);
  uint64_t v7 = (void **)((char *)this + 104);
  std::vector<std::shared_ptr<QP::GraphStructureStack::Node>>::__destroy_vector::operator()[abi:ne180100](&v7);
  nlp::CFScopedPtr<__CFArray *>::reset((const void **)this + 12, 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)this + 11, 0);
  std::unique_ptr<QP::GraphStructureStack>::reset[abi:ne180100]((QP::GraphStructureStack **)this + 10, 0);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void QP::Embedder::~Embedder(const void **this)
{
  nlp::CFScopedPtr<__CFError *>::reset(this + 3, 0);
  nlp::CFScopedPtr<__CFData const*>::reset(this + 2, 0);
  uint64_t v2 = (std::__shared_weak_count *)this[1];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void QP::HolidayReference::load(QP::HolidayReference *this, const __CFURL *a2)
{
  if (a2) {
    QP::getFileSystemRepresentationFromCFURL(a2, a2);
  }
}

void sub_224DE9BE4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 17) < 0) {
    operator delete(*(void **)(v1 - 40));
  }
  _Unwind_Resume(exception_object);
}

QP::HolidayReference *QP::HolidayReference::HolidayReference(QP::HolidayReference *this, const __CFURL *a2)
{
  *(void *)this = 0;
  *((void *)this + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = 0;
  *((void *)this + 2) = 0;
  QP::HolidayReference::load(this, a2);
  return this;
}

void QP::HolidayReference::~HolidayReference(QP::HolidayReference *this)
{
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2) {
    munmap(v2, *(void *)this);
  }
  uint64_t v3 = (const void *)*((void *)this + 2);
  if (v3) {
    CFRelease(v3);
  }
}

BOOL QP::HolidayReference::hasResources(QP::HolidayReference *this)
{
  return *((void *)this + 2) != 0;
}

BOOL QP::HolidayReference::containsLookupKey(QP::HolidayReference *this, CFStringRef theString)
{
  BOOL result = 0;
  v10[1] = *MEMORY[0x263EF8340];
  if (theString)
  {
    if (*((void *)this + 2))
    {
      v10[0] = CFStringGetLength(theString);
      CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(v10[0], 0x8000100u);
      MEMORY[0x270FA5388](MaximumSizeForEncoding);
      uint64_t v7 = (char *)v10 - v6 + 16;
      v11.CFIndex location = 0;
      v11.CFIndex length = v10[0];
      CFStringGetBytes(theString, v11, 0x8000100u, 0x2Du, 0, (UInt8 *)v10 - v6 + 16, v8, v10);
      v7[v10[0]] = 0;
      return _MDPlistContainerGetPlistObjectAtKeyPath() != 0;
    }
  }
  return result;
}

CFStringRef QP::HolidayReference::copyStringForLookupKey(QP::HolidayReference *this, CFStringRef theString)
{
  CFStringRef result = 0;
  v15[1] = *MEMORY[0x263EF8340];
  if (theString && *((void *)this + 2))
  {
    v15[0] = CFStringGetLength(theString);
    CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(v15[0], 0x8000100u);
    MEMORY[0x270FA5388](MaximumSizeForEncoding);
    uint64_t v7 = (char *)&v10 - v6;
    v16.CFIndex location = 0;
    v16.CFIndex length = v15[0];
    CFStringGetBytes(theString, v16, 0x8000100u, 0x2Du, 0, (UInt8 *)&v10 - v6, v8, v15);
    v7[v15[0]] = 0;
    if (_MDPlistContainerGetPlistObjectAtKeyPath())
    {
      CFIndex v12 = 0;
      long long v10 = v13;
      uint64_t v11 = v14;
      CFNumberRef Value = (const UInt8 *)_MDPlistStringGetValue();
      return CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x263EFFB08], Value, v12, 0x8000100u, 0);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL QP::HolidayReference::getIntegerForLookupKey(QP::HolidayReference *this, CFStringRef theString, uint64_t *a3)
{
  BOOL v3 = 0;
  v16[1] = *MEMORY[0x263EF8340];
  if (theString)
  {
    if (*((void *)this + 2))
    {
      v16[0] = CFStringGetLength(theString);
      CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(v16[0], 0x8000100u);
      MEMORY[0x270FA5388](MaximumSizeForEncoding);
      CFIndex v8 = (char *)&v12 - v7;
      v17.CFIndex location = 0;
      v17.CFIndex length = v16[0];
      CFStringGetBytes(theString, v17, 0x8000100u, 0x2Du, 0, (UInt8 *)&v12 - v7, v9, v16);
      v8[v16[0]] = 0;
      int PlistObjectAtKeyPath = _MDPlistContainerGetPlistObjectAtKeyPath();
      BOOL v3 = PlistObjectAtKeyPath != 0;
      if (a3)
      {
        if (PlistObjectAtKeyPath)
        {
          long long v12 = v14;
          uint64_t v13 = v15;
          *a3 = _MDPlistNumberGetIntValue();
        }
      }
    }
  }
  return v3;
}

void QP::HolidayReference::normalizeDateValues(QP::HolidayReference *this, __CFDictionary *a2, unsigned int a3, uint64_t a4)
{
  if (a2 && *((void *)this + 2))
  {
    CFAbsoluteTime at = 0.0;
    CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFIndex v8 = CFCalendarCreateWithIdentifier((CFAllocatorRef)*MEMORY[0x263EFFB08], @"gregorian");
    CFCalendarRef calendar = v8;
    int v9 = CFDictionaryContainsKey(a2, @"Day");
    int v10 = CFDictionaryContainsKey(a2, @"Weekday");
    int v11 = CFDictionaryContainsKey(a2, @"WeekOfYear");
    int v12 = CFDictionaryContainsKey(a2, @"WeekdayOrdinal");
    if (a4 && v9)
    {
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a2, @"Day");
      CFNumberRef v14 = (const __CFNumber *)CFDictionaryGetValue(a2, @"Month");
      uint64_t valuePtr = 0;
      int v37 = a3;
      CFNumberGetValue(Value, kCFNumberIntType, (char *)&valuePtr + 4);
      CFNumberGetValue(v14, kCFNumberIntType, &valuePtr);
      CFCalendarComposeAbsoluteTime(v8, &at, "dMy", HIDWORD(valuePtr), valuePtr, a3);
      CFCalendarAddComponents(v8, &at, 0, "d", a4);
      CFCalendarDecomposeAbsoluteTime(v8, at, "dMy", (char *)&valuePtr + 4, &valuePtr, &v37);
      CFNumberRef v15 = CFNumberCreate(v7, kCFNumberIntType, (char *)&valuePtr + 4);
      CFNumberRef v36 = v15;
      CFNumberRef v16 = CFNumberCreate(v7, kCFNumberIntType, &valuePtr);
      CFNumberRef v35 = v16;
      CFNumberRef v17 = CFNumberCreate(v7, kCFNumberIntType, &v37);
      CFNumberRef v34 = v17;
      CFDictionarySetValue(a2, @"Day", v15);
      CFDictionarySetValue(a2, @"Month", v16);
      CFDictionarySetValue(a2, @"Year", v17);
      if (v17) {
        CFRelease(v17);
      }
      if (v16) {
        CFRelease(v16);
      }
      if (!v15) {
        goto LABEL_40;
      }
    }
    else
    {
      if (v12)
      {
        CFNumberRef v18 = (const __CFNumber *)CFDictionaryGetValue(a2, @"Weekday");
        CFNumberRef v19 = (const __CFNumber *)CFDictionaryGetValue(a2, @"WeekdayOrdinal");
        CFNumberRef v20 = (const __CFNumber *)CFDictionaryGetValue(a2, @"Month");
        uint64_t valuePtr = 0;
        int v37 = 0;
        uint64_t v33 = 0;
        unsigned int v31 = a3;
        int v32 = 0;
        CFNumberGetValue(v18, kCFNumberIntType, (char *)&valuePtr + 4);
        CFNumberGetValue(v19, kCFNumberIntType, &v37);
        CFNumberGetValue(v20, kCFNumberIntType, &valuePtr);
        CFIndex length = CFCalendarGetMaximumRangeOfUnit(v8, 0x200uLL).length;
        CFCalendarComposeAbsoluteTime(v8, &at, "My", valuePtr, v31);
        CFCalendarDecomposeAbsoluteTime(v8, at, "E", &v33);
        if (SHIDWORD(valuePtr) >= (int)v33)
        {
          if ((int)v33 < SHIDWORD(valuePtr)) {
            CFCalendarAddComponents(v8, &at, 0, "d", (HIDWORD(valuePtr) - v33));
          }
        }
        else
        {
          CFCalendarAddComponents(v8, &at, 0, "d", length - (int)v33 + SHIDWORD(valuePtr));
        }
        if (v37 >= 2)
        {
          CFCalendarAddComponents(v8, &at, 0, "F", (v37 - 1));
        }
        else if (v37 == -1)
        {
          do
          {
            CFCalendarDecomposeAbsoluteTime(v8, at, "M", &v32);
            CFIndex v8 = calendar;
            if (v32 == valuePtr) {
              uint64_t v27 = 1;
            }
            else {
              uint64_t v27 = -1;
            }
            CFCalendarAddComponents(calendar, &at, 0, "w", v27);
          }
          while (v32 == valuePtr);
        }
        CFCalendarAddComponents(v8, &at, 0, "d", a4);
        CFIndex v8 = calendar;
        CFCalendarDecomposeAbsoluteTime(calendar, at, "Ewy", (char *)&valuePtr + 4, (char *)&v33 + 4, &v31);
        CFNumberRef v28 = CFNumberCreate(v7, kCFNumberIntType, (char *)&valuePtr + 4);
        CFNumberRef v36 = v28;
        CFNumberRef v29 = CFNumberCreate(v7, kCFNumberIntType, (char *)&v33 + 4);
        CFNumberRef v35 = v29;
        CFNumberRef v30 = CFNumberCreate(v7, kCFNumberIntType, &v31);
        CFNumberRef v34 = v30;
        CFDictionaryRemoveValue(a2, @"WeekdayOrdinal");
        CFDictionaryRemoveValue(a2, @"Month");
        CFDictionarySetValue(a2, @"Weekday", v28);
        CFDictionarySetValue(a2, @"WeekOfYear", v29);
        CFDictionarySetValue(a2, @"Year", v30);
        if (v30) {
          CFRelease(v30);
        }
        if (v29) {
          CFRelease(v29);
        }
        if (v28) {
          CFRelease(v28);
        }
        goto LABEL_40;
      }
      if (!v10 || !v11)
      {
        if (!(v10 | v9)) {
          CFDictionaryRemoveAllValues(a2);
        }
        goto LABEL_40;
      }
      CFNumberRef v22 = (const __CFNumber *)CFDictionaryGetValue(a2, @"Weekday");
      CFNumberRef v23 = (const __CFNumber *)CFDictionaryGetValue(a2, @"WeekOfYear");
      CFNumberRef v24 = (const __CFNumber *)CFDictionaryGetValue(a2, @"Year");
      uint64_t valuePtr = 0;
      int v37 = 0;
      CFNumberGetValue(v22, kCFNumberIntType, (char *)&valuePtr + 4);
      CFNumberGetValue(v23, kCFNumberIntType, &valuePtr);
      CFNumberGetValue(v24, kCFNumberIntType, &v37);
      CFCalendarComposeAbsoluteTime(v8, &at, "EwY", HIDWORD(valuePtr), valuePtr, v37);
      CFCalendarAddComponents(v8, &at, 0, "d", a4);
      CFCalendarDecomposeAbsoluteTime(v8, at, "EwY", (char *)&valuePtr + 4, &valuePtr, &v37);
      CFNumberRef v15 = CFNumberCreate(v7, kCFNumberIntType, (char *)&valuePtr + 4);
      CFNumberRef v36 = v15;
      CFNumberRef v25 = CFNumberCreate(v7, kCFNumberIntType, &valuePtr);
      CFNumberRef v35 = v25;
      CFNumberRef v26 = CFNumberCreate(v7, kCFNumberIntType, &v37);
      CFNumberRef v34 = v26;
      CFDictionarySetValue(a2, @"Weekday", v15);
      CFDictionarySetValue(a2, @"WeekOfYear", v25);
      CFDictionarySetValue(a2, @"Year", v26);
      if (v26) {
        CFRelease(v26);
      }
      if (v25) {
        CFRelease(v25);
      }
      if (!v15)
      {
LABEL_40:
        if (v8) {
          CFRelease(v8);
        }
        return;
      }
    }
    CFRelease(v15);
    goto LABEL_40;
  }
}

void sub_224DEA718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  CFIndex v8 = va_arg(va1, const void *);
  va_copy(va2, va1);
  int v10 = va_arg(va2, const void *);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  nlp::CFScopedPtr<__CFNumber const*>::reset((const void **)va, 0);
  nlp::CFScopedPtr<__CFNumber const*>::reset((const void **)va1, 0);
  nlp::CFScopedPtr<__CFCalendar *>::reset((const void **)va2, 0);
  _Unwind_Resume(a1);
}

void QP::HolidayReference::updateDateValuesForLookupKey(QP::HolidayReference *this, __CFDictionary *a2, const __CFString *a3, unsigned int a4)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  unsigned int v46 = a4;
  if (a3 && *((void *)this + 2))
  {
    CFStringRef v45 = 0;
    CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFStringRef v45 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"%@/Type", a3);
    if (!QP::HolidayReference::containsLookupKey(this, v45))
    {
LABEL_62:
      if (v45) {
        CFRelease(v45);
      }
      return;
    }
    CFStringRef v8 = QP::HolidayReference::copyStringForLookupKey(this, v45);
    v44[1] = (uint64_t)v8;
    if (CFStringsAreEqual(v8, @"AbsoluteDate"))
    {
      *(void *)&long long valuePtr = 0;
      v44[0] = 0;
      CFStringRef v9 = CFStringCreateWithFormat(v7, 0, @"%@/Day", a3);
      if (v45) {
        CFRelease(v45);
      }
      CFStringRef v45 = v9;
      QP::HolidayReference::getIntegerForLookupKey(this, v9, (uint64_t *)&valuePtr);
      CFStringRef v10 = CFStringCreateWithFormat(v7, 0, @"%@/Month", a3);
      if (v45) {
        CFRelease(v45);
      }
      CFStringRef v45 = v10;
      QP::HolidayReference::getIntegerForLookupKey(this, v10, v44);
      if ((valuePtr & 0x8000000000000000) != 0 || v44[0] < 0) {
        goto LABEL_60;
      }
      CFNumberRef v11 = CFNumberCreate(v7, kCFNumberIntType, &valuePtr);
      uint64_t v43 = (uint64_t)v11;
      if (v11) {
        CFDictionarySetValue(a2, @"Day", v11);
      }
      CFNumberRef v12 = CFNumberCreate(v7, kCFNumberIntType, v44);
      *(void *)id v42 = v12;
      if (v12) {
        CFDictionarySetValue(a2, @"Month", v12);
      }
      CFNumberRef v13 = CFNumberCreate(v7, kCFNumberIntType, &v46);
      CFNumberRef v41 = v13;
      if (v13)
      {
        CFDictionarySetValue(a2, @"Year", v13);
        CFRelease(v13);
      }
      if (v12) {
        CFRelease(v12);
      }
      if (!v11) {
        goto LABEL_60;
      }
      goto LABEL_20;
    }
    if (CFStringsAreEqual(v8, @"MonthRelativeWeekDay"))
    {
      *(void *)&long long valuePtr = 0;
      uint64_t v43 = 0;
      v44[0] = 0;
      CFStringRef v14 = CFStringCreateWithFormat(v7, 0, @"%@/WeekDay", a3);
      if (v45) {
        CFRelease(v45);
      }
      CFStringRef v45 = v14;
      QP::HolidayReference::getIntegerForLookupKey(this, v14, (uint64_t *)&valuePtr);
      CFStringRef v15 = CFStringCreateWithFormat(v7, 0, @"%@/Month", a3);
      if (v45) {
        CFRelease(v45);
      }
      CFStringRef v45 = v15;
      QP::HolidayReference::getIntegerForLookupKey(this, v15, v44);
      CFStringRef v16 = CFStringCreateWithFormat(v7, 0, @"%@/WeekDayNumberInMonth", a3);
      if (v45) {
        CFRelease(v45);
      }
      CFStringRef v45 = v16;
      QP::HolidayReference::getIntegerForLookupKey(this, v16, &v43);
      if ((valuePtr & 0x8000000000000000) != 0 || v44[0] < 0) {
        goto LABEL_60;
      }
      CFNumberRef v11 = CFCalendarCreateWithIdentifier(v7, @"gregorian");
      *(void *)id v42 = v11;
      if (MEMORY[0x22A623100]() == 1)
      {
        if ((void)valuePtr == 7) {
          uint64_t v17 = 1;
        }
        else {
          uint64_t v17 = valuePtr + 1;
        }
        *(void *)&long long valuePtr = v17;
      }
      CFNumberRef v23 = CFNumberCreate(v7, kCFNumberIntType, &valuePtr);
      CFNumberRef v41 = v23;
      if (v23) {
        CFDictionarySetValue(a2, @"Weekday", v23);
      }
      CFNumberRef v24 = CFNumberCreate(v7, kCFNumberIntType, v44);
      CFNumberRef v40 = v24;
      if (v24) {
        CFDictionarySetValue(a2, @"Month", v24);
      }
      CFNumberRef v25 = CFNumberCreate(v7, kCFNumberIntType, &v43);
      CFNumberRef v39 = v25;
      if (v25)
      {
        CFDictionarySetValue(a2, @"WeekdayOrdinal", v25);
        CFRelease(v25);
      }
      if (v24) {
        CFRelease(v24);
      }
      if (v23) {
        CFRelease(v23);
      }
      if (!v11) {
        goto LABEL_60;
      }
LABEL_20:
      CFRelease(v11);
      goto LABEL_60;
    }
    if (CFStringsAreEqual(v8, @"DateList"))
    {
      CFStringRef v18 = CFStringCreateWithFormat(v7, 0, @"%@/%d", a3, v46);
      if (v45) {
        CFRelease(v45);
      }
      CFStringRef v45 = v18;
      v44[0] = CFStringGetLength(v18);
      CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(v44[0], 0x8000100u);
      CFNumberRef v20 = (UInt8 *)v29 - ((MEMORY[0x270FA5388](MaximumSizeForEncoding) + 15) & 0xFFFFFFFFFFFFFFF0);
      v48.CFIndex location = 0;
      v48.CFIndex length = v44[0];
      CFStringGetBytes(v18, v48, 0x8000100u, 0x2Du, 0, v20, v21, v44);
      v20[v44[0]] = 0;
      if (_MDPlistContainerGetPlistObjectAtKeyPath())
      {
        long long v35 = valuePtr;
        uint64_t v36 = v38;
        int PlistObjectType = _MDPlistGetPlistObjectType();
        if (PlistObjectType == 241)
        {
          long long v33 = valuePtr;
          uint64_t v34 = v38;
          if (_MDPlistDictionaryGetCount())
          {
            long long v31 = valuePtr;
            uint64_t v32 = v38;
            v29[0] = MEMORY[0x263EF8330];
            v29[1] = 0x40000000;
            void v29[2] = ___ZNK2QP16HolidayReference28updateDateValuesForLookupKeyEP14__CFDictionaryPK10__CFStringi_block_invoke;
            _OWORD v29[3] = &__block_descriptor_tmp_9;
            v29[4] = a2;
            unsigned int v30 = v46;
            _MDPlistDictionaryIterate();
          }
        }
        else if (PlistObjectType == 240)
        {
          CFDictionarySetValue(a2, @"List", (const void *)*MEMORY[0x263EFFB40]);
        }
      }
      goto LABEL_60;
    }
    if (CFStringsAreEqual(v8, @"SpecialDateRelativeDate"))
    {
      if (!CFStringHasPrefix(a3, @"/easter"))
      {
        CFStringRef v26 = CFStringCreateWithFormat(v7, 0, @"%@/SpecialDate", a3);
        nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v45, v26);
        *(void *)&long long valuePtr = QP::HolidayReference::copyStringForLookupKey(this, v45);
        if ((void)valuePtr)
        {
          CFStringRef v27 = CFStringCreateWithFormat(v7, 0, @"%@/RelativeDays", a3);
          nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v45, v27);
          v44[0] = 0;
          QP::HolidayReference::getIntegerForLookupKey(this, v45, v44);
          uint64_t v43 = (uint64_t)CFNumberCreate(v7, kCFNumberIntType, v44);
          if (v43)
          {
            CFDictionarySetValue(a2, @"RootHoliday", (const void *)valuePtr);
            CFDictionarySetValue(a2, @"DayOffset", (const void *)v43);
          }
          nlp::CFScopedPtr<__CFNumber const*>::reset((const void **)&v43, 0);
        }
        else
        {
          CFDictionarySetValue(a2, @"SpecialDate", (const void *)*MEMORY[0x263EFFB40]);
        }
        nlp::CFScopedPtr<__CFString const*>::reset((const void **)&valuePtr, 0);
        goto LABEL_60;
      }
      v42[0] = 1;
      LODWORD(v4QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = 1;
      if (CFStringHasSuffix(a3, @"JULIAN"))
      {
        QP::extractJulianEasterInYear(&v41, v42, (int *)v46);
LABEL_71:
        *(void *)&long long valuePtr = CFNumberCreate(v7, kCFNumberIntType, &v41);
        CFDictionarySetValue(a2, @"Day", (const void *)valuePtr);
        v44[0] = (uint64_t)CFNumberCreate(v7, kCFNumberIntType, v42);
        CFDictionarySetValue(a2, @"Month", (const void *)v44[0]);
        CFNumberRef v28 = CFNumberCreate(v7, kCFNumberIntType, &v46);
        uint64_t v43 = (uint64_t)v28;
        if (v28) {
          CFDictionarySetValue(a2, @"Year", v28);
        }
        nlp::CFScopedPtr<__CFNumber const*>::reset((const void **)&v43, 0);
        nlp::CFScopedPtr<__CFNumber const*>::reset((const void **)v44, 0);
        nlp::CFScopedPtr<__CFNumber const*>::reset((const void **)&valuePtr, 0);
        goto LABEL_60;
      }
      if (CFStringHasSuffix(a3, @"GREGORIAN"))
      {
        QP::extractGregorianEasterInYear(&v41, (unsigned int *)v42, (int *)v46);
        goto LABEL_71;
      }
      CFDictionarySetValue(a2, @"SpecialDate", (const void *)*MEMORY[0x263EFFB40]);
    }
LABEL_60:
    if (v8) {
      CFRelease(v8);
    }
    goto LABEL_62;
  }
}

void sub_224DEB044(_Unwind_Exception *a1)
{
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v1 - 168), 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v1 - 96), 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v1 - 88), 0);
  _Unwind_Resume(a1);
}

void ___ZNK2QP16HolidayReference28updateDateValuesForLookupKeyEP14__CFDictionaryPK10__CFStringi_block_invoke(uint64_t a1, char *__s1, size_t a3)
{
  if (!strncmp(__s1, "Day", a3))
  {
    uint64_t valuePtr = _MDPlistNumberGetIntValue();
    CFNumberRef v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberIntType, &valuePtr);
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), @"Day", v8);
    if (!v8) {
      return;
    }
    goto LABEL_12;
  }
  if (strncmp(__s1, "Month", a3))
  {
    if (!strncmp(__s1, "NoDefinition", a3))
    {
      uint64_t v6 = *(__CFDictionary **)(a1 + 32);
      CFAllocatorRef v7 = (const void *)*MEMORY[0x263EFFB40];
      CFDictionarySetValue(v6, @"NoDefinition", v7);
    }
    return;
  }
  uint64_t valuePtr = _MDPlistNumberGetIntValue();
  CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFNumberRef v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberIntType, &valuePtr);
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), @"Month", v8);
  CFNumberRef v10 = CFNumberCreate(v9, kCFNumberIntType, (const void *)(a1 + 40));
  if (v10)
  {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), @"Year", v10);
    CFRelease(v10);
  }
  if (v8) {
LABEL_12:
  }
    CFRelease(v8);
}

void sub_224DEB3B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  BOOL v3 = va_arg(va1, const void *);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  nlp::CFScopedPtr<__CFNumber const*>::reset((const void **)va, 0);
  nlp::CFScopedPtr<__CFNumber const*>::reset((const void **)va1, 0);
  _Unwind_Resume(a1);
}

_DWORD *QP::extractJulianEasterInYear(_DWORD *this, int *a2, int *a3)
{
  if ((int)a3 <= 0) {
    int v3 = -(-(int)a3 & 3);
  }
  else {
    int v3 = a3 & 3;
  }
  int v4 = 4 * ((int)a3 % 7) + 2 * v3 + 34;
  int v5 = v4
     - 7
     * ((v4
       - (__int16)(19 * ((int)a3 % 19)
                 + 15
                 - 30
                 * (((__int16)((34953 * (__int16)(19 * ((int)a3 % 19) + 15)) >> 16) >> 4)
                  + ((unsigned __int16)(((34953 * (__int16)(19 * ((int)a3 % 19) + 15)) >> 16) & 0x8000) >> 15))))
      / 7)
     + 114;
  unsigned int v6 = 9
     * (v4
                       - 7
                       * ((v4
                         - (__int16)(19 * ((int)a3 % 19)
                                   + 15
                                   - 30
                                   * (((__int16)((34953 * (__int16)(19 * ((int)a3 % 19) + 15)) >> 16) >> 4)
                                    + ((unsigned __int16)(((34953 * (__int16)(19 * ((int)a3 % 19) + 15)) >> 16) & 0x8000) >> 15))))
                        / 7)
                       + 114);
  unsigned int v7 = (((v5 - BYTE1(v6)) >> 1) + (v6 >> 8)) >> 4;
  int v8 = (v5 - 31 * v7);
  if (this) {
    *this = (v8 + 13) % QP::extractJulianEasterInYear(int *,int *,int)::lastDayOfMonthLeapYear[v7 - 1] + 1;
  }
  if (a2) {
    *a2 = (v8 + 13) / QP::extractJulianEasterInYear(int *,int *,int)::lastDayOfMonthLeapYear[v7 - 1] + v7;
  }
  return this;
}

_DWORD *QP::extractGregorianEasterInYear(_DWORD *this, unsigned int *a2, int *a3)
{
  int v3 = (int)a3 % 19;
  int v4 = (int)a3 / 100;
  int v5 = (int)a3 % 100;
  int v6 = ((int)a3 / 100) & 3;
  if ((int)a3 / -100 >= 0) {
    int v6 = -(((int)a3 / -100) & 3);
  }
  int v7 = ((unint64_t)(1431655765 * (v4 + (v4 + 8) / -25 + 1)) >> 32) - (v4 + (v4 + 8) / -25 + 1);
  int v8 = (int)(v4 + (int)a3 / -400 + 19 * v3 + (v7 >> 1) + (v7 >> 31) + 15) % 30;
  char v9 = v5 + (((char)v5 >> 13) & 3);
  int v10 = (2 * (v6 + (v9 >> 2)) + ((v9 & 0xFC) - v5 + 32) - v8) % 7;
  __int16 v11 = (37201 * (__int16)(v3 + 11 * v8 + 22 * v10)) >> 16;
  char v12 = HIBYTE(v11) + ((unsigned __int16)(v11 & 0x8000) >> 15);
  if (this)
  {
    unsigned int v13 = 9 * (v10 + v8 - 7 * v12 + 114);
    *this = (v10
                            + v8
                            - 7 * v12
                            + 114
                            - 31 * ((((v10 + v8 - 7 * v12 + 114 - BYTE1(v13)) >> 1) + (v13 >> 8)) >> 4)
                            + 1);
  }
  if (a2) {
    *a2 = (((v10
  }
                            + v8
                            - 7 * v12
                            + 114
                            - ((unsigned __int16)(9 * (v10 + v8 - 7 * v12 + 114)) >> 8)) >> 1)
         + ((9 * (v10 + v8 - 7 * v12 + 114)) >> 8)) >> 4;
  return this;
}

BOOL QP::HolidayReference::containsHoliday(QP::HolidayReference *this, const __CFString *a2)
{
  BOOL v2 = 0;
  if (a2 && *((void *)this + 2))
  {
    CFStringRef v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"/%@", a2);
    if (v4)
    {
      CFStringRef v5 = v4;
      BOOL v2 = QP::HolidayReference::containsLookupKey(this, v4);
      CFRelease(v5);
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

void sub_224DEB774(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

__CFDictionary *QP::HolidayReference::copyValuesForYear(QP::HolidayReference *this, const __CFString *a2, const __CFString *a3, const __CFString *a4, int a5)
{
  CFMutableArrayRef Mutable = 0;
  uint64_t v41 = *MEMORY[0x263EF8340];
  if (a5 < 2005 || !a4 || !a3 || !a2 || !*((void *)this + 2)) {
    return Mutable;
  }
  CFStringRef v39 = 0;
  CFStringRef v40 = 0;
  CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (CFStringsAreEqual(a3, @"generic") || CFStringsAreEqual(a3, @"general"))
  {
    CFStringRef v12 = CFStringCreateWithFormat(v11, 0, @"/%@/%@", a2, a4);
    CFStringRef v40 = v12;
    if (QP::HolidayReference::containsLookupKey(this, v12))
    {
      CFStringRef v13 = QP::HolidayReference::copyStringForLookupKey(this, v12);
      CFStringRef v39 = v13;
      CFStringRef v14 = CFStringCreateWithFormat(v11, 0, @"/%@/%@.%@", a2, a4, v13);
      if (v12) {
        CFRelease(v12);
      }
      CFStringRef v40 = v14;
      if (QP::HolidayReference::containsLookupKey(this, v14))
      {
        QP::HolidayReference::updateDateValuesForLookupKey(this, Mutable, v14, a5);
        CFDictionarySetValue(Mutable, @"Calendar", v13);
      }
    }
    else
    {
      CFStringRef v15 = CFStringCreateWithFormat(v11, 0, @"/%@/default", a2);
      if (v12) {
        CFRelease(v12);
      }
      CFStringRef v40 = v15;
      CFStringRef v16 = QP::HolidayReference::copyStringForLookupKey(this, v15);
      CFStringRef v17 = v16;
      CFStringRef v39 = v16;
      if (v16)
      {
        CFStringRef v14 = CFStringCreateWithFormat(v11, 0, @"/%@/%@.%@", a2, a4, v16);
        if (v15) {
          CFRelease(v15);
        }
        CFStringRef v40 = v14;
        if (QP::HolidayReference::containsLookupKey(this, v14))
        {
          QP::HolidayReference::updateDateValuesForLookupKey(this, Mutable, v14, a5);
          CFDictionarySetValue(Mutable, @"Calendar", v17);
        }
      }
      else
      {
        CFStringRef v14 = v15;
      }
    }
    goto LABEL_31;
  }
  CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(v11, 0, a3);
  uint64_t v38 = MutableCopy;
  CFStringUppercase(MutableCopy, 0);
  CFStringRef v14 = CFStringCreateWithFormat(v11, 0, @"/%@/%@.%@", a2, a4, MutableCopy);
  CFStringRef v40 = v14;
  if (QP::HolidayReference::containsLookupKey(this, v14))
  {
    QP::HolidayReference::updateDateValuesForLookupKey(this, Mutable, v14, a5);
    CFDictionarySetValue(Mutable, @"Calendar", MutableCopy);
    goto LABEL_23;
  }
  CFStringRef v19 = CFStringCreateWithFormat(v11, 0, @"/%@/default.%@", a2, MutableCopy);
  if (v14) {
    CFRelease(v14);
  }
  CFStringRef v40 = v19;
  if (QP::HolidayReference::containsLookupKey(this, v19))
  {
    QP::HolidayReference::updateDateValuesForLookupKey(this, Mutable, v19, a5);
    CFDictionarySetValue(Mutable, @"Calendar", MutableCopy);
    CFStringRef v14 = v19;
LABEL_23:
    if (!MutableCopy) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  CFStringRef v14 = v19;
  if (MutableCopy) {
LABEL_30:
  }
    CFRelease(MutableCopy);
LABEL_31:
  if (!CFDictionaryGetCount(Mutable))
  {
    CFStringRef v20 = CFStringCreateWithFormat(v11, 0, @"/%@/default", a2);
    if (v14) {
      CFRelease(v14);
    }
    CFStringRef v40 = v20;
    if (QP::HolidayReference::containsLookupKey(this, v20))
    {
      CFStringRef v21 = QP::HolidayReference::copyStringForLookupKey(this, v20);
      if (v39) {
        CFRelease(v39);
      }
      CFStringRef v39 = v21;
      CFStringRef v14 = CFStringCreateWithFormat(v11, 0, @"/%@/default.%@", a2, v21);
      if (v20) {
        CFRelease(v20);
      }
      CFStringRef v40 = v14;
      if (QP::HolidayReference::containsLookupKey(this, v14))
      {
        QP::HolidayReference::updateDateValuesForLookupKey(this, Mutable, v14, a5);
        CFDictionarySetValue(Mutable, @"Calendar", v21);
      }
    }
    else
    {
      CFStringRef v14 = v20;
    }
  }
  if (CFDictionaryContainsKey(Mutable, @"RootHoliday"))
  {
    CFStringRef Value = (const __CFString *)CFDictionaryGetValue(Mutable, @"RootHoliday");
    if (CFStringsAreEqual(a2, Value))
    {
      CFNumberRef v23 = CFDictionaryGetValue(Mutable, @"Calendar");
      if (v23)
      {
        CFStringRef v24 = CFStringCreateWithFormat(v11, 0, @"/%@/default.%@", a2, v23);
        if (v14) {
          CFRelease(v14);
        }
        CFStringRef v40 = v24;
        if (QP::HolidayReference::containsLookupKey(this, v24))
        {
          CFDictionaryRemoveAllValues(Mutable);
          QP::HolidayReference::updateDateValuesForLookupKey(this, Mutable, v24, a5);
        }
        else if (QP::HolidayReference::containsLookupKey(this, @"default"))
        {
          CFStringRef v33 = QP::HolidayReference::copyStringForLookupKey(this, @"default");
          uint64_t v38 = (void *)v33;
          CFStringRef v34 = CFStringCreateWithFormat(v11, 0, @"/%@/default.%@", a2, v33);
          if (v24) {
            CFRelease(v24);
          }
          CFStringRef v40 = v34;
          if (QP::HolidayReference::containsLookupKey(this, v34))
          {
            CFDictionaryRemoveAllValues(Mutable);
            QP::HolidayReference::updateDateValuesForLookupKey(this, Mutable, v34, a5);
          }
          if (v33) {
            CFRelease(v33);
          }
          CFStringRef v24 = v34;
        }
      }
      else
      {
        CFDictionaryRemoveAllValues(Mutable);
        CFStringRef v24 = v14;
      }
      QP::HolidayReference::normalizeDateValues(this, Mutable, a5, 0);
      CFStringRef v14 = v24;
    }
    else
    {
      unsigned int valuePtr = 0;
      CFNumberRef v25 = (const __CFNumber *)CFDictionaryGetValue(Mutable, @"DayOffset");
      CFNumberGetValue(v25, kCFNumberIntType, &valuePtr);
      CFDictionaryRef v26 = (const __CFDictionary *)QP::HolidayReference::copyValuesForYear(this, Value, a3, a4, a5);
      uint64_t v38 = v26;
      CFDictionaryRemoveAllValues(Mutable);
      CFIndex Count = CFDictionaryGetCount(v26);
      uint64_t v36 = (uint64_t)&v36;
      MEMORY[0x270FA5388](Count);
      unint64_t v28 = (8 * Count + 15) & 0xFFFFFFFFFFFFFFF0;
      CFNumberRef v29 = (const void **)((char *)&v36 - v28);
      if ((unint64_t)(8 * Count) >= 0x200) {
        size_t v30 = 512;
      }
      else {
        size_t v30 = 8 * Count;
      }
      bzero((char *)&v36 - v28, v30);
      MEMORY[0x270FA5388](v31);
      uint64_t v32 = (const void **)((char *)&v36 - v28);
      bzero((char *)&v36 - v28, v30);
      CFDictionaryGetKeysAndValues(v26, (const void **)((char *)&v36 - v28), (const void **)((char *)&v36 - v28));
      if (Count >= 1)
      {
        do
        {
          CFDictionarySetValue(Mutable, *v29++, *v32++);
          --Count;
        }
        while (Count);
      }
      QP::HolidayReference::normalizeDateValues(this, Mutable, a5, valuePtr);
      if (v26) {
        CFRelease(v26);
      }
    }
  }
  else
  {
    QP::HolidayReference::normalizeDateValues(this, Mutable, a5, 0);
  }
  if (v39) {
    CFRelease(v39);
  }
  if (v14) {
    CFRelease(v14);
  }
  return Mutable;
}

void sub_224DEBEC0(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void nlp::CFScopedPtr<__CFCalendar *>::reset(const void **a1, const void *a2)
{
  CFStringRef v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

uint64_t QP::LexemeConverter::LexemeConverter(uint64_t result, void *a2, void *a3)
{
  uint64_t v3 = a2[1];
  *(void *)CFStringRef result = *a2;
  *(void *)(result + 8) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = a3[1];
  *(void *)(result + 16) = *a3;
  *(void *)(result + 24) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(void *)(result + 64) = 0;
  if (*a2)
  {
    if (*a3) {
      operator new();
    }
  }
  return result;
}

void sub_224DEC128(_Unwind_Exception *a1)
{
  MEMORY[0x22A623E20](v4, 0x60C405C6656D0);
  int v6 = (std::__shared_weak_count *)v1[8];
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::unique_ptr<QP::Transcriber>::reset[abi:ne180100](v3, 0);
  uint64_t v7 = v1[5];
  v1[5] = 0;
  if (v7) {
    MEMORY[0x22A623E20](v7, 0x60C4044C4A2DFLL);
  }
  std::unique_ptr<QP::DateConverter>::reset[abi:ne180100](v2, 0);
  int v8 = (std::__shared_weak_count *)v1[3];
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  char v9 = (std::__shared_weak_count *)v1[1];
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  _Unwind_Resume(a1);
}

uint64_t QP::LexemeConverter::loadResourceURL(QP::DateConverter **this, CFURLRef url)
{
  if (!url) {
    goto LABEL_9;
  }
  CFStringRef PathComponent = CFURLCopyLastPathComponent(url);
  BOOL v5 = CFStringsAreEqual(PathComponent, @"reference.mdplist");
  if (v5)
  {
    LOBYTE(this) = QP::DateConverter::loadDateReferenceResourceURL(this[4], url);
    if (!PathComponent) {
      goto LABEL_8;
    }
LABEL_7:
    CFRelease(PathComponent);
    goto LABEL_8;
  }
  if (CFStringsAreEqual(PathComponent, @"geobase.map")) {
    operator new();
  }
  if (PathComponent) {
    goto LABEL_7;
  }
LABEL_8:
  if (!v5) {
LABEL_9:
  }
    LOBYTE(this) = 1;
  return this & 1;
}

void sub_224DEC294(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x22A623E20](v2, 0x60C4044C4A2DFLL);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

void std::shared_ptr<QP::GeoReference>::reset[abi:ne180100]<QP::GeoReference,void>(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<QP::GeoReference>::shared_ptr[abi:ne180100]<QP::GeoReference,void>(&v2, a2);
}

void QP::LexemeConverter::clearResources(QP::DateConverter **this)
{
}

void QP::LexemeConverter::enumerateEntitiesWithString(uint64_t a1, const __CFString *a2, const __CFString *a3, CFIndex a4, CFIndex a5, CFIndex a6, CFIndex a7, uint64_t a8)
{
  v39.CFIndex location = a4;
  v39.CFIndex length = a5;
  if (a2 && a4 != -1)
  {
    CFRange result = (CFRange)xmmword_224E1E2D0;
    CFCharacterSetRef Predefined = CFCharacterSetGetPredefined(kCFCharacterSetPunctuation);
    CFStringFindCharacterFromSet(a2, Predefined, v39, 0, &result);
    if (a3) {
      BOOL v15 = CFStringHasPrefix(a3, @"QuotedText") != 0;
    }
    else {
      BOOL v15 = 0;
    }
    if (result.location != -1 && result.location == v39.location && result.length == v39.length)
    {
      std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,char const(&)[6],CFRange &,void>("Punct", (uint64_t)&v39, &__p);
      CFStringRef v16 = __p;
      CFStringRef v17 = v31;
      *((_WORD *)__p + 44) = 12;
      uint64_t v36 = v16;
      int v37 = v17;
      if (v17) {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, void **))(a8 + 16))(a8, &v36);
      CFStringRef v18 = v37;
      if (!v37) {
        goto LABEL_33;
      }
    }
    else
    {
      if (v15)
      {
        v40.CFIndex location = a6;
        v40.CFIndex length = a7;
        CFStringRef v19 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x263EFFB08], a2, v40);
        CFStringRef v35 = v19;
        QP::getUTF8StringFromCFString(v19, &__p);
        std::allocate_shared[abi:ne180100]<QP::LexemeQuotedText,std::allocator<QP::LexemeQuotedText>,CFRange &,std::string,void>(&v39.location, (uint64_t)&__p, &v33);
        uint64_t v20 = v33;
        CFStringRef v17 = v34;
        uint64_t v33 = 0;
        CFStringRef v34 = 0;
        if (v32 < 0) {
          operator delete(__p);
        }
        *(_WORD *)(v20 + 88) = 15;
        uint64_t v28 = v20;
        CFNumberRef v29 = v17;
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t *))(a8 + 16))(a8, &v28);
        if (v29) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v29);
        }
        if (v19) {
          CFRelease(v19);
        }
        goto LABEL_33;
      }
      if (a3)
      {
        QP::getUTF8StringFromCFString(a3, &__p);
        std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,std::string &,CFRange &,void>((uint64_t)&__p, (uint64_t)&v39, &v33);
        uint64_t v21 = v33;
        CFStringRef v17 = v34;
        unsigned int v22 = QP::ParserGrammar::symbolID(*(void *)(a1 + 16), (uint64_t)&__p);
        *(_WORD *)(v21 + 88) = QP::ParserGrammar::symbolFlag(*(QP::ParserGrammar **)(a1 + 16), v22);
        uint64_t v26 = v21;
        CFStringRef v27 = v17;
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t *))(a8 + 16))(a8, &v26);
        if (v27) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v27);
        }
        if (v32 < 0) {
          operator delete(__p);
        }
        goto LABEL_33;
      }
      std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,char const(&)[5],CFRange &,void>("Text", (uint64_t)&v39, &__p);
      CFNumberRef v23 = __p;
      CFStringRef v17 = v31;
      *((_WORD *)__p + 44) = 15;
      CFStringRef v24 = v23;
      CFNumberRef v25 = v17;
      if (v17) {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, void **))(a8 + 16))(a8, &v24);
      CFStringRef v18 = v25;
      if (!v25) {
        goto LABEL_33;
      }
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
LABEL_33:
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
  }
}

void sub_224DEC5E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  _Unwind_Resume(exception_object);
}

void QP::LexemeConverter::enumerateEntitiesWithTypeAndValues(QP::ParserGrammar **a1, CFStringRef theString, CFIndex a3, CFIndex a4, const __CFString *a5, const __CFDictionary *a6, uint64_t a7)
{
  uint64_t v111 = *MEMORY[0x263EF8340];
  v110.CFIndex location = a3;
  v110.CFIndex length = a4;
  if (theString && a5 && a4 + a3 <= CFStringGetLength(theString))
  {
    if (a6) {
      CFIndex Count = CFDictionaryGetCount(a6);
    }
    else {
      CFIndex Count = 0;
    }
    uint64_t v13 = (uint64_t)a1[2];
    QP::getUTF8StringFromCFString(a5, &v108);
    unsigned int v14 = QP::ParserGrammar::symbolID(v13, (uint64_t)&v108);
    unsigned int v15 = v14;
    if (v109 < 0)
    {
      operator delete((void *)v108);
      if (!v15) {
        return;
      }
    }
    else if (!v14)
    {
      return;
    }
    uint64_t v16 = QP::ParserGrammar::symbolFlag(a1[2], v15);
    int v17 = v16;
    if (!Count)
    {
      if (!QP::ParserGrammar::isValidType(a1[2], a5)) {
        return;
      }
      QP::getUTF8StringFromCFString(a5, &v108);
      std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,std::string,CFRange &,void>((uint64_t)&v108, (uint64_t)&v110, &v99);
      CFNumberRef v29 = v99;
      CFStringRef v27 = v100;
      uint64_t v99 = 0;
      CFIndex v100 = 0;
      if (v109 < 0) {
        operator delete((void *)v108);
      }
      v29[44] = v17;
      uint64_t v66 = v29;
      uint64_t v67 = v27;
      if (v27) {
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, _WORD **))(a7 + 16))(a7, &v66);
      if (v67) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v67);
      }
      goto LABEL_40;
    }
    v64[1] = v64;
    unint64_t v18 = 8 * Count;
    MEMORY[0x270FA5388](v16);
    int v65 = v17;
    unint64_t v19 = (v18 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v20 = (const void **)((char *)v64 - v19);
    if (v18 >= 0x200) {
      size_t v21 = 512;
    }
    else {
      size_t v21 = v18;
    }
    bzero((char *)v64 - v19, v21);
    MEMORY[0x270FA5388](v22);
    CFNumberRef v23 = (char *)v64 - v19;
    __int16 v24 = v65;
    bzero(v23, v21);
    CFDictionaryGetKeysAndValues(a6, v20, (const void **)v23);
    if (CFStringsAreEqual(a5, @"Field"))
    {
      CFMutableStringRef MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, theString);
      *(void *)&long long v87 = MutableCopy;
      CFStringLowercase(MutableCopy, *((CFLocaleRef *)*a1 + 13));
      CFDictionaryRef v26 = (const __CFDictionary *)*((void *)*a1 + 28);
      if (v26 && CFDictionaryContainsKey(v26, MutableCopy))
      {
        QP::getUTF8StringFromCFString(a5, &v108);
        std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,std::string,CFRange &,void>((uint64_t)&v108, (uint64_t)&v110, &v99);
        uint64_t v28 = v99;
        CFStringRef v27 = v100;
        uint64_t v99 = 0;
        CFIndex v100 = 0;
        if (v109 < 0) {
          operator delete((void *)v108);
        }
        v28[44] = v24;
        __int16 v106 = v28;
        unsigned int v107 = v27;
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, _WORD **))(a7 + 16))(a7, &v106);
        if (v107) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v107);
        }
      }
      else
      {
        CFStringRef v27 = 0;
      }
      if (MutableCopy) {
        CFRelease(MutableCopy);
      }
      goto LABEL_40;
    }
    if (CFStringsAreEqual(a5, @"Person") || CFStringsAreEqual(a5, @"Contact"))
    {
      std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,char const(&)[7],CFRange &,void>("Person", (uint64_t)&v110, &v108);
      CFStringRef v27 = (std::__shared_weak_count *)*((void *)&v108 + 1);
      unint64_t v30 = v108;
      *(_WORD *)(v108 + 88) = v24;
      unsigned long long v105 = __PAIR128__((unint64_t)v27, v30);
      if (v27) {
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, unsigned long long *))(a7 + 16))(a7, &v105);
      uint64_t v31 = (std::__shared_weak_count *)*((void *)&v105 + 1);
      if (!*((void *)&v105 + 1)) {
        goto LABEL_40;
      }
      goto LABEL_39;
    }
    if (CFStringHasSuffix(a5, @"Location"))
    {
      uint64_t v89 = 0;
      double v103 = 0.0;
      double v104 = 0.0;
      double v102 = 0.0;
      if (a1[7])
      {
        *(void *)&long long v108 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x263EFFB08], theString, v110);
        QP::GeoReference::lookup(a1[7], (CFStringRef)v108, *((const __CFLocale **)*a1 + 13), (double *)&v89, &v104, &v103, &v102);
        nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v108, 0);
      }
      QP::getUTF8StringFromCFString(a5, &v108);
      QP::getUTF8StringFromCFString(theString, &v99);
      std::allocate_shared[abi:ne180100]<QP::LexemeLocation,std::allocator<QP::LexemeLocation>,std::string,std::string,double &,double &,double &,double &,CFRange &,void>((uint64_t)&v108, (uint64_t)&v99, (double *)&v89, &v104, &v103, &v102, (uint64_t)&v110, &v87);
      CFStringRef v27 = (std::__shared_weak_count *)*((void *)&v87 + 1);
      uint64_t v32 = v87;
      long long v87 = 0uLL;
      if (v101 < 0) {
        operator delete(v99);
      }
      if (v109 < 0) {
        operator delete((void *)v108);
      }
      *(_WORD *)(v32 + 88) = 17;
      uint64_t v97 = v32;
      id v98 = v27;
      if (v27) {
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, uint64_t *))(a7 + 16))(a7, &v97);
      uint64_t v31 = v98;
      if (!v98) {
        goto LABEL_40;
      }
      goto LABEL_39;
    }
    if (CFStringFind(a5, @"FlightInformation", 0).location != -1)
    {
      CFStringRef Value = (const __CFString *)CFDictionaryGetValue(a6, @"Value");
      CFStringRef v34 = (const __CFString *)CFDictionaryGetValue(a6, @"FlightNumber");
      CFStringRef v27 = 0;
      if (!Value) {
        goto LABEL_40;
      }
      CFStringRef v35 = v34;
      if (!v34) {
        goto LABEL_40;
      }
      QP::getUTF8StringFromCFString(Value, &v108);
      QP::getUTF8StringFromCFString(v35, &v99);
      std::allocate_shared[abi:ne180100]<QP::LexemeExtended,std::allocator<QP::LexemeExtended>,char const(&)[18],std::string,std::string,CFRange &,void>("FlightInformation", (uint64_t)&v108, (uint64_t)&v99, (uint64_t)&v110, &v87);
      CFStringRef v27 = (std::__shared_weak_count *)*((void *)&v87 + 1);
      uint64_t v36 = v87;
      long long v87 = 0uLL;
      if (v101 < 0) {
        operator delete(v99);
      }
      if (v109 < 0) {
        operator delete((void *)v108);
      }
      *(_WORD *)(v36 + 88) = 18;
      uint64_t v95 = v36;
      int v96 = v27;
      if (v27) {
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, uint64_t *))(a7 + 16))(a7, &v95);
      uint64_t v31 = v96;
      if (!v96) {
        goto LABEL_40;
      }
      goto LABEL_39;
    }
    if (CFStringFind(a5, @"TrackingNumber", 0).location != -1)
    {
      CFStringRef v37 = (const __CFString *)CFDictionaryGetValue(a6, @"Value");
      CFStringRef v38 = (const __CFString *)CFDictionaryGetValue(a6, @"Carrier");
      CFStringRef v27 = 0;
      if (!v37) {
        goto LABEL_40;
      }
      CFStringRef v39 = v38;
      if (!v38) {
        goto LABEL_40;
      }
      QP::getUTF8StringFromCFString(v37, &v108);
      QP::getUTF8StringFromCFString(v39, &v99);
      std::allocate_shared[abi:ne180100]<QP::LexemeExtended,std::allocator<QP::LexemeExtended>,char const(&)[15],std::string,std::string,CFRange &,void>("TrackingNumber", (uint64_t)&v108, (uint64_t)&v99, (uint64_t)&v110, &v87);
      CFStringRef v27 = (std::__shared_weak_count *)*((void *)&v87 + 1);
      uint64_t v40 = v87;
      long long v87 = 0uLL;
      if (v101 < 0) {
        operator delete(v99);
      }
      if (v109 < 0) {
        operator delete((void *)v108);
      }
      *(_WORD *)(v40 + 88) = 18;
      uint64_t v93 = v40;
      int v94 = v27;
      if (v27) {
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, uint64_t *))(a7 + 16))(a7, &v93);
      uint64_t v31 = v94;
      if (!v94) {
        goto LABEL_40;
      }
      goto LABEL_39;
    }
    if (CFStringFind(a5, @"Money", 0).location != -1)
    {
      CFStringRef v41 = (const __CFString *)CFDictionaryGetValue(a6, @"CurrencyUnit");
      QP::NumericConverter::numericValueForTypeWithValues(a1[5], a5, a6, &v87);
      CFStringRef v27 = 0;
      if (!(void)v87 || !v41) {
        goto LABEL_85;
      }
      QP::getUTF8StringFromCFString(v41, &v108);
      std::allocate_shared[abi:ne180100]<QP::LexemeExtendedNumber,std::allocator<QP::LexemeExtendedNumber>,char const(&)[6],std::unique_ptr<QP::NumericValue>,std::string,CFRange &,void>("Money", (uint64_t *)&v87, (uint64_t)&v108, (uint64_t)&v110, &v99);
      id v42 = v99;
      CFStringRef v27 = v100;
      uint64_t v99 = 0;
      CFIndex v100 = 0;
      if (v109 < 0) {
        operator delete((void *)v108);
      }
      v42[44] = 19;
      __int16 v91 = v42;
      double v92 = v27;
      if (v27) {
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, _WORD **))(a7 + 16))(a7, &v91);
      uint64_t v43 = v92;
      if (!v92) {
        goto LABEL_85;
      }
      goto LABEL_84;
    }
    if (CFStringFind(a5, @"URL", 0).location != -1)
    {
      CFStringRef v44 = (const __CFString *)CFDictionaryGetValue(a6, @"Value");
      CFStringRef v45 = (const __CFString *)CFDictionaryGetValue(a6, @"Domain");
      CFStringRef v27 = 0;
      if (!v44) {
        goto LABEL_40;
      }
      CFStringRef v46 = v45;
      if (!v45) {
        goto LABEL_40;
      }
      QP::getUTF8StringFromCFString(a5, &v108);
      QP::getUTF8StringFromCFString(v44, &v99);
      QP::getUTF8StringFromCFString(v46, &v87);
      std::allocate_shared[abi:ne180100]<QP::LexemeExtended,std::allocator<QP::LexemeExtended>,std::string,std::string,std::string,CFRange &,void>(&v108, (uint64_t)&v99, &v87, (uint64_t)&v110, &v89);
      uint64_t v47 = v89;
      CFStringRef v27 = v90;
      uint64_t v89 = 0;
      double v90 = 0;
      if (v88 < 0) {
        operator delete((void *)v87);
      }
      if (v101 < 0) {
        operator delete(v99);
      }
      if (v109 < 0) {
        operator delete((void *)v108);
      }
      *(_WORD *)(v47 + 88) = 18;
      uint64_t v85 = v47;
      double v86 = v27;
      if (v27) {
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, uint64_t *))(a7 + 16))(a7, &v85);
      uint64_t v31 = v86;
      if (!v86) {
        goto LABEL_40;
      }
      goto LABEL_39;
    }
    if (CFStringsAreEqual(a5, @"PhoneNumber"))
    {
      CFStringRef v48 = (const __CFString *)CFDictionaryGetValue(a6, @"Value");
      if (v48)
      {
        CFStringRef v49 = (const __CFString *)CFDictionaryGetValue(a6, @"PhoneNumber");
        QP::getUTF8StringFromCFString(v48, &v108);
        if (v49) {
          QP::getUTF8StringFromCFString(v49, &v99);
        }
        else {
          std::string::basic_string[abi:ne180100]<0>(&v99, "");
        }
        std::allocate_shared[abi:ne180100]<QP::LexemeExtended,std::allocator<QP::LexemeExtended>,char const(&)[12],std::string,std::string,CFRange &,void>("PhoneNumber", (uint64_t)&v108, (uint64_t)&v99, (uint64_t)&v110, &v87);
        CFStringRef v27 = (std::__shared_weak_count *)*((void *)&v87 + 1);
        uint64_t v52 = v87;
        long long v87 = 0uLL;
        if (v101 < 0) {
          operator delete(v99);
        }
        if (v109 < 0) {
          operator delete((void *)v108);
        }
        *(_WORD *)(v52 + 88) = 18;
        uint64_t v83 = v52;
        double v84 = v27;
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t *))(a7 + 16))(a7, &v83);
        uint64_t v31 = v84;
        if (!v84) {
          goto LABEL_40;
        }
        goto LABEL_39;
      }
      goto LABEL_187;
    }
    if (CFStringsAreEqual(a5, @"FullAddress"))
    {
      CFStringRef v50 = (const __CFString *)CFDictionaryGetValue(a6, @"Value");
      if (v50)
      {
        CFStringRef v51 = (const __CFString *)CFDictionaryGetValue(a6, @"Zip");
        QP::getUTF8StringFromCFString(v50, &v108);
        if (v51) {
          QP::getUTF8StringFromCFString(v51, &v99);
        }
        else {
          std::string::basic_string[abi:ne180100]<0>(&v99, "");
        }
        std::allocate_shared[abi:ne180100]<QP::LexemeExtended,std::allocator<QP::LexemeExtended>,char const(&)[12],std::string,std::string,CFRange &,void>("FullAddress", (uint64_t)&v108, (uint64_t)&v99, (uint64_t)&v110, &v87);
        CFStringRef v27 = (std::__shared_weak_count *)*((void *)&v87 + 1);
        uint64_t v54 = v87;
        long long v87 = 0uLL;
        if (v101 < 0) {
          operator delete(v99);
        }
        if (v109 < 0) {
          operator delete((void *)v108);
        }
        *(_WORD *)(v54 + 88) = 18;
        uint64_t v81 = v54;
        double v82 = v27;
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t *))(a7 + 16))(a7, &v81);
        uint64_t v31 = v82;
        if (!v82) {
          goto LABEL_40;
        }
        goto LABEL_39;
      }
LABEL_187:
      CFStringRef v27 = 0;
LABEL_40:
      if (v27) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v27);
      }
      return;
    }
    if (CFStringFind(a5, @"Email", 0).location != -1)
    {
      std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,char const(&)[6],CFRange &,void>("Email", (uint64_t)&v110, &v108);
      CFStringRef v27 = (std::__shared_weak_count *)*((void *)&v108 + 1);
      unint64_t v53 = v108;
      *(_WORD *)(v108 + 88) = v65;
      unsigned long long v80 = __PAIR128__((unint64_t)v27, v53);
      if (v27) {
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, unsigned long long *))(a7 + 16))(a7, &v80);
      uint64_t v31 = (std::__shared_weak_count *)*((void *)&v80 + 1);
      if (!*((void *)&v80 + 1)) {
        goto LABEL_40;
      }
      goto LABEL_39;
    }
    if (CFStringHasSuffix(a5, @"Status"))
    {
      if (!CFDictionaryContainsKey(a6, @"Value")) {
        goto LABEL_187;
      }
      CFStringRef v55 = (const __CFString *)CFDictionaryGetValue(a6, @"Value");
      QP::getUTF8StringFromCFString(a5, &v108);
      QP::getUTF8StringFromCFString(v55, &v99);
      std::allocate_shared[abi:ne180100]<QP::LexemeStatus,std::allocator<QP::LexemeStatus>,std::string,std::string,CFRange &,void>((uint64_t)&v108, (uint64_t)&v99, (uint64_t)&v110, &v87);
      CFStringRef v27 = (std::__shared_weak_count *)*((void *)&v87 + 1);
      uint64_t v56 = v87;
      long long v87 = 0uLL;
      if (v101 < 0) {
        operator delete(v99);
      }
      if (v109 < 0) {
        operator delete((void *)v108);
      }
      *(_WORD *)(v56 + 88) = 5;
      uint64_t v78 = v56;
      __int16 v79 = v27;
      if (v27) {
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, uint64_t *))(a7 + 16))(a7, &v78);
      uint64_t v31 = v79;
      if (!v79) {
        goto LABEL_40;
      }
LABEL_39:
      std::__shared_weak_count::__release_shared[abi:ne180100](v31);
      goto LABEL_40;
    }
    if (CFStringHasSuffix(a5, @"Hashtag"))
    {
      if (!CFDictionaryContainsKey(a6, @"Value")) {
        goto LABEL_187;
      }
      CFStringRef v57 = (const __CFString *)CFDictionaryGetValue(a6, @"Value");
      QP::getUTF8StringFromCFString(a5, &v108);
      QP::getUTF8StringFromCFString(v57, &v99);
      std::allocate_shared[abi:ne180100]<QP::LexemeValue,std::allocator<QP::LexemeValue>,std::string,std::string,CFRange &,void>((uint64_t)&v108, (uint64_t)&v99, (uint64_t)&v110, &v87);
      CFStringRef v27 = (std::__shared_weak_count *)*((void *)&v87 + 1);
      uint64_t v58 = v87;
      long long v87 = 0uLL;
      if (v101 < 0) {
        operator delete(v99);
      }
      if (v109 < 0) {
        operator delete((void *)v108);
      }
      *(_WORD *)(v58 + 88) = 6;
      uint64_t v76 = v58;
      __int16 v77 = v27;
      if (v27) {
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, uint64_t *))(a7 + 16))(a7, &v76);
      uint64_t v31 = v77;
      if (!v77) {
        goto LABEL_40;
      }
      goto LABEL_39;
    }
    if (CFStringHasSuffix(a5, @"Value") || CFStringHasSuffix(a5, @"Count"))
    {
      QP::NumericConverter::numericValueForTypeWithValues(a1[5], a5, a6, &v87);
      if (!(void)v87)
      {
        CFStringRef v27 = 0;
        goto LABEL_85;
      }
      QP::getUTF8StringFromCFString(a5, &v108);
      std::allocate_shared[abi:ne180100]<QP::LexemeNumber,std::allocator<QP::LexemeNumber>,std::string,std::unique_ptr<QP::NumericValue>,CFRange &,void>((uint64_t)&v108, (uint64_t *)&v87, (uint64_t)&v110, &v99);
      uint64_t v59 = v99;
      CFStringRef v27 = v100;
      uint64_t v99 = 0;
      CFIndex v100 = 0;
      if (v109 < 0) {
        operator delete((void *)v108);
      }
      v59[44] = 7;
      uint64_t v74 = v59;
      __int16 v75 = v27;
      if (v27) {
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, _WORD **))(a7 + 16))(a7, &v74);
      uint64_t v43 = v75;
      if (!v75) {
        goto LABEL_85;
      }
LABEL_84:
      std::__shared_weak_count::__release_shared[abi:ne180100](v43);
LABEL_85:
      std::unique_ptr<QP::DateConverter>::reset[abi:ne180100]((QP::DateConverter **)&v87, 0);
      goto LABEL_40;
    }
    if (!CFStringHasSuffix(a5, @"Date")
      && !CFStringHasSuffix(a5, @"Time")
      && !CFStringHasSuffix(a5, @"Period"))
    {
      if (!QP::ParserGrammar::isValidType(a1[2], a5)) {
        goto LABEL_187;
      }
      QP::getUTF8StringFromCFString(a5, &v108);
      std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,std::string,CFRange &,void>((uint64_t)&v108, (uint64_t)&v110, &v99);
      int v63 = v99;
      CFStringRef v27 = v100;
      uint64_t v99 = 0;
      CFIndex v100 = 0;
      if (v109 < 0) {
        operator delete((void *)v108);
      }
      v63[44] = v65;
      id v68 = v63;
      long long v69 = v27;
      if (v27) {
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, _WORD **))(a7 + 16))(a7, &v68);
      uint64_t v31 = v69;
      if (!v69) {
        goto LABEL_40;
      }
      goto LABEL_39;
    }
    if (CFDictionaryContainsKey(a6, @"Value"))
    {
      QP::DateConverter::datePeriodForRelativeDate(a5, &v87);
      if ((void)v87)
      {
        QP::getUTF8StringFromCFString(a5, &v108);
        std::allocate_shared[abi:ne180100]<QP::LexemeDateTime,std::allocator<QP::LexemeDateTime>,std::string,std::unique_ptr<QP::DatePeriod>,CFRange &,void>((uint64_t)&v108, (const void ***)&v87, (uint64_t)&v110, &v99);
        unint64_t v60 = v99;
        CFStringRef v27 = v100;
        uint64_t v99 = 0;
        CFIndex v100 = 0;
        if (v109 < 0) {
          operator delete((void *)v108);
        }
        v60[44] = v65;
        uint64_t v72 = v60;
        id v73 = v27;
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, _WORD **))(a7 + 16))(a7, &v72);
        uint64_t v61 = v73;
        if (!v73) {
          goto LABEL_179;
        }
        goto LABEL_177;
      }
    }
    else
    {
      QP::DateConverter::datePeriodForValues(a5, a6, &v87);
      if ((void)v87)
      {
        QP::getUTF8StringFromCFString(a5, &v108);
        std::allocate_shared[abi:ne180100]<QP::LexemeDateTime,std::allocator<QP::LexemeDateTime>,std::string,std::unique_ptr<QP::DatePeriod>,CFRange &,void>((uint64_t)&v108, (const void ***)&v87, (uint64_t)&v110, &v99);
        uint64_t v62 = v99;
        CFStringRef v27 = v100;
        uint64_t v99 = 0;
        CFIndex v100 = 0;
        if (v109 < 0) {
          operator delete((void *)v108);
        }
        v62[44] = v65;
        CFTypeRef v70 = v62;
        uint64_t v71 = v27;
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, _WORD **))(a7 + 16))(a7, &v70);
        uint64_t v61 = v71;
        if (!v71) {
          goto LABEL_179;
        }
LABEL_177:
        std::__shared_weak_count::__release_shared[abi:ne180100](v61);
LABEL_179:
        std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&v87, 0);
        goto LABEL_40;
      }
    }
    CFStringRef v27 = 0;
    goto LABEL_179;
  }
}

void sub_224DED600(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 48);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  _Unwind_Resume(exception_object);
}

void QP::LexemeConverter::merge(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = *a2;
  if (*(unsigned __int16 *)(*a2 + 88) - 1 > 3) {
    goto LABEL_22;
  }
  uint64_t v6 = *a3;
  if (*(unsigned __int16 *)(*a3 + 88) - 1 > 3) {
    goto LABEL_22;
  }
  uint64_t v7 = (std::__shared_weak_count *)a2[1];
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v6 = *a3;
  }
  int v8 = (std::__shared_weak_count *)a3[1];
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v9 = *(uint64_t **)(a1 + 32);
  int v10 = *(std::__shared_weak_count **)(v5 + 128);
  unint64_t v18 = *(const __CFString ***)(v5 + 120);
  unint64_t v19 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = *(void *)(v6 + 120);
  CFAllocatorRef v11 = *(std::__shared_weak_count **)(v6 + 128);
  uint64_t v16 = v12;
  int v17 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  QP::DateConverter::merge(v9, &v18, &v16, &v20);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  uint64_t v13 = v20;
  if (v20)
  {
    std::allocate_shared[abi:ne180100]<QP::LexemeDateTime,std::allocator<QP::LexemeDateTime>,char const(&)[10],std::unique_ptr<QP::DatePeriod>,CFRange &,void>("DateRange", &v20, v5 + 72, &v15);
    uint64_t v14 = v15;
    *(_OWORD *)a4 = v15;
    *(_WORD *)(v14 + 88) = 4;
  }
  std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100](&v20, 0);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (!v13)
  {
LABEL_22:
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
  }
}

void sub_224DEDA4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)va, 0);
  if (v8)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    if (!v7) {
LABEL_4:
    }
      _Unwind_Resume(a1);
  }
  else if (!v7)
  {
    goto LABEL_4;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  goto LABEL_4;
}

void QP::LexemeConverter::resolve(uint64_t a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, BOOL *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = *a2;
  if (*(unsigned __int16 *)(*a2 + 88) - 1 > 3) {
    goto LABEL_13;
  }
  uint64_t v7 = (std::__shared_weak_count *)a2[1];
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v8 = *(void **)(a1 + 32);
  char v9 = *(std::__shared_weak_count **)(v6 + 128);
  uint64_t v13 = *(void *)(v6 + 120);
  uint64_t v14 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  QP::DateConverter::resolve(v8, (uint64_t)&v13, a3, a4, &v15);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  int v10 = v15;
  if (v15)
  {
    std::allocate_shared[abi:ne180100]<QP::LexemeDateTime,std::allocator<QP::LexemeDateTime>,std::string &,std::unique_ptr<QP::DatePeriod>,CFRange &,void>(v6, &v15, v6 + 72, &v12);
    uint64_t v11 = v12;
    *(_OWORD *)a5 = v12;
    *(_WORD *)(v11 + 88) = *(_WORD *)(v6 + 88);
  }
  std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100](&v15, 0);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (!v10)
  {
LABEL_13:
    *(void *)a5 = 0;
    *(void *)(a5 + 8) = 0;
  }
}

void sub_224DEDB8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)va, 0);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  _Unwind_Resume(a1);
}

void std::shared_ptr<QP::GeoReference>::shared_ptr[abi:ne180100]<QP::GeoReference,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_224DEDC38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<QP::GeoReference>::reset[abi:ne180100]((QP::GeoReference **)va, 0);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<QP::GeoReference *,std::shared_ptr<QP::GeoReference>::__shared_ptr_default_delete<QP::GeoReference,QP::GeoReference>,std::allocator<QP::GeoReference>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A623E20);
}

QP::GeoReference *std::__shared_ptr_pointer<QP::GeoReference *,std::shared_ptr<QP::GeoReference>::__shared_ptr_default_delete<QP::GeoReference,QP::GeoReference>,std::allocator<QP::GeoReference>>::__on_zero_shared(uint64_t a1)
{
  CFRange result = *(QP::GeoReference **)(a1 + 24);
  if (result)
  {
    QP::GeoReference::~GeoReference(result);
    JUMPOUT(0x22A623E20);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<QP::GeoReference *,std::shared_ptr<QP::GeoReference>::__shared_ptr_default_delete<QP::GeoReference,QP::GeoReference>,std::allocator<QP::GeoReference>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

QP::GeoReference *std::unique_ptr<QP::GeoReference>::reset[abi:ne180100](QP::GeoReference **a1, QP::GeoReference *a2)
{
  CFRange result = *a1;
  *a1 = a2;
  if (result)
  {
    QP::GeoReference::~GeoReference(result);
    JUMPOUT(0x22A623E20);
  }
  return result;
}

std::string *std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,char const(&)[6],CFRange &,void>@<X0>(char *a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = (std::string *)operator new(0x90uLL);
  CFRange result = std::__shared_ptr_emplace<QP::Lexeme>::__shared_ptr_emplace[abi:ne180100]<char const(&)[6],CFRange &,std::allocator<QP::Lexeme>,0>(v6, a1, a2);
  *a3 = v6 + 1;
  a3[1] = v6;
  return result;
}

void sub_224DEDDB8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<QP::Lexeme>::__shared_ptr_emplace[abi:ne180100]<char const(&)[6],CFRange &,std::allocator<QP::Lexeme>,0>(std::string *a1, char *a2, uint64_t a3)
{
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26D830A40;
  std::construct_at[abi:ne180100]<QP::Lexeme,char const(&)[6],CFRange &,QP::Lexeme*>(a1 + 1, a2, a3);
  return a1;
}

void sub_224DEDE14(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

std::string *std::construct_at[abi:ne180100]<QP::Lexeme,char const(&)[6],CFRange &,QP::Lexeme*>(std::string *a1, char *a2, uint64_t a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  QP::Lexeme::Lexeme(a1, (long long *)__p, *(void *)a3, *(void *)(a3 + 8));
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_224DEDE80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::allocate_shared[abi:ne180100]<QP::Lexeme,std::allocator<QP::Lexeme>,std::string,CFRange &,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = (std::string *)operator new(0x90uLL);
  CFRange result = std::__shared_ptr_emplace<QP::Lexeme>::__shared_ptr_emplace[abi:ne180100]<std::string,CFRange &,std::allocator<QP::Lexeme>,0>(v6, a1, a2);
  *a3 = v6 + 1;
  a3[1] = v6;
  return result;
}

void sub_224DEDEEC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<QP::Lexeme>::__shared_ptr_emplace[abi:ne180100]<std::string,CFRange &,std::allocator<QP::Lexeme>,0>(std::string *a1, uint64_t a2, uint64_t a3)
{
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26D830A40;
  std::construct_at[abi:ne180100]<QP::Lexeme,std::string,CFRange &,QP::Lexeme*>(a1 + 1, a2, a3);
  return a1;
}

void sub_224DEDF48(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

std::string *std::construct_at[abi:ne180100]<QP::Lexeme,std::string,CFRange &,QP::Lexeme*>(std::string *a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  QP::Lexeme::Lexeme(a1, (long long *)__p, *(void *)a3, *(void *)(a3 + 8));
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_224DEDFC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::allocate_shared[abi:ne180100]<QP::LexemeLocation,std::allocator<QP::LexemeLocation>,std::string,std::string,double &,double &,double &,double &,CFRange &,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, double *a3@<X3>, double *a4@<X4>, double *a5@<X5>, double *a6@<X6>, uint64_t a7@<X7>, void *a8@<X8>)
{
  uint64_t v16 = (std::string *)operator new(0xC8uLL);
  CFRange result = std::__shared_ptr_emplace<QP::LexemeLocation>::__shared_ptr_emplace[abi:ne180100]<std::string,std::string,double &,double &,double &,double &,CFRange &,std::allocator<QP::LexemeLocation>,0>(v16, a1, a2, a3, a4, a5, a6, a7);
  *a8 = v16 + 1;
  a8[1] = v16;
  return result;
}

void sub_224DEE06C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<QP::LexemeLocation>::__shared_ptr_emplace[abi:ne180100]<std::string,std::string,double &,double &,double &,double &,CFRange &,std::allocator<QP::LexemeLocation>,0>(std::string *a1, uint64_t a2, uint64_t a3, double *a4, double *a5, double *a6, double *a7, uint64_t a8)
{
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26D831270;
  std::construct_at[abi:ne180100]<QP::LexemeLocation,std::string,std::string,double &,double &,double &,double &,CFRange &,QP::LexemeLocation*>(a1 + 1, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void sub_224DEE0C8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<QP::LexemeLocation>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D831270;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QP::LexemeLocation>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D831270;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A623E20);
}

void std::__shared_ptr_emplace<QP::LexemeLocation>::__on_zero_shared(uint64_t a1)
{
}

std::string *std::construct_at[abi:ne180100]<QP::LexemeLocation,std::string,std::string,double &,double &,double &,double &,CFRange &,QP::LexemeLocation*>(std::string *a1, uint64_t a2, uint64_t a3, double *a4, double *a5, double *a6, double *a7, uint64_t a8)
{
  *(_OWORD *)long long v12 = *(_OWORD *)a2;
  uint64_t v13 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_OWORD *)std::string __p = *(_OWORD *)a3;
  uint64_t v11 = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  QP::LexemeLocation::LexemeLocation(a1, (uint64_t)v12, (long long *)__p, *(void *)a8, *(void *)(a8 + 8), *a4, *a5, *a6, *a7);
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(v12[0]);
  }
  return a1;
}

void sub_224DEE1F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::construct_at[abi:ne180100]<QP::LexemeValue,std::string &,std::string,CFRange &,QP::LexemeValue*>((uint64_t)&a16);
  _Unwind_Resume(a1);
}

std::string *QP::LexemeLocation::LexemeLocation(std::string *this, uint64_t a2, long long *a3, uint64_t a4, std::string::size_type a5, double a6, double a7, double a8, double a9)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  QP::Lexeme::Lexeme(this, (long long *)&__p, a4, a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(double *)&this[5].__r_.__value_.__l.__data_ = a6;
  *(double *)&this[5].__r_.__value_.__l.__size_ = a7;
  *(double *)&this[5].__r_.__value_.__r.__words[2] = a8;
  *(double *)&this[6].__r_.__value_.__l.__data_ = a9;
  int v17 = (std::string *)((char *)this + 152);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v18 = *a3;
    this[7].__r_.__value_.__r.__words[0] = *((void *)a3 + 2);
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
  }
  return this;
}

void sub_224DEE2FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  QP::Lexeme::~Lexeme(v14);
  _Unwind_Resume(a1);
}

void std::__destroy_at[abi:ne180100]<QP::LexemeLocation,0>(void **this)
{
  if (*((char *)this + 175) < 0) {
    operator delete(this[19]);
  }
  QP::Lexeme::~Lexeme(this);
}

std::string *std::allocate_shared[abi:ne180100]<QP::LexemeExtended,std::allocator<QP::LexemeExtended>,char const(&)[18],std::string,std::string,CFRange &,void>@<X0>(char *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  int v10 = (std::string *)operator new(0xC0uLL);
  CFRange result = std::__shared_ptr_emplace<QP::LexemeExtended>::__shared_ptr_emplace[abi:ne180100]<char const(&)[18],std::string,std::string,CFRange &,std::allocator<QP::LexemeExtended>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 1;
  a5[1] = v10;
  return result;
}

void sub_224DEE3D4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<QP::LexemeExtended>::__shared_ptr_emplace[abi:ne180100]<char const(&)[18],std::string,std::string,CFRange &,std::allocator<QP::LexemeExtended>,0>(std::string *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26D8312C0;
  std::construct_at[abi:ne180100]<QP::LexemeExtended,char const(&)[18],std::string,std::string,CFRange &,QP::LexemeExtended*>(a1 + 1, a2, a3, a4, a5);
  return a1;
}

void sub_224DEE430(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<QP::LexemeExtended>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D8312C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QP::LexemeExtended>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D8312C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A623E20);
}

void std::__shared_ptr_emplace<QP::LexemeExtended>::__on_zero_shared(uint64_t a1)
{
}

std::string *std::construct_at[abi:ne180100]<QP::LexemeExtended,char const(&)[18],std::string,std::string,CFRange &,QP::LexemeExtended*>(std::string *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::string::basic_string[abi:ne180100]<0>(v14, a2);
  *(_OWORD *)long long v12 = *(_OWORD *)a3;
  uint64_t v13 = *(void *)(a3 + 16);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  *(_OWORD *)std::string __p = *(_OWORD *)a4;
  uint64_t v11 = *(void *)(a4 + 16);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  QP::LexemeExtended::LexemeExtended(a1, (uint64_t)v14, (long long *)v12, (long long *)__p, *(void *)a5, *(void *)(a5 + 8));
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(v12[0]);
  }
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  return a1;
}

void sub_224DEE584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::construct_at[abi:ne180100]<QP::LexemeExtended,char const(&)[18],std::string,std::string,CFRange &,QP::LexemeExtended*>();
  _Unwind_Resume(a1);
}

std::string *QP::LexemeExtended::LexemeExtended(std::string *this, uint64_t a2, long long *a3, long long *a4, uint64_t a5, std::string::size_type a6)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  QP::Lexeme::Lexeme(this, (long long *)&__p, a5, a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 5, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v11 = *a3;
    this[5].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this[5].__r_.__value_.__l.__data_ = v11;
  }
  long long v12 = this + 6;
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v13 = *a4;
    this[6].__r_.__value_.__r.__words[2] = *((void *)a4 + 2);
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
  }
  return this;
}

void sub_224DEE69C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (*(char *)(v14 + 143) < 0) {
    operator delete(*v15);
  }
  QP::Lexeme::~Lexeme((void **)v14);
  _Unwind_Resume(a1);
}

void std::__destroy_at[abi:ne180100]<QP::LexemeExtended,0>(void **this)
{
  if (*((char *)this + 167) < 0) {
    operator delete(this[18]);
  }
  if (*((char *)this + 143) < 0) {
    operator delete(this[15]);
  }
  QP::Lexeme::~Lexeme(this);
}

std::string *std::allocate_shared[abi:ne180100]<QP::LexemeExtended,std::allocator<QP::LexemeExtended>,char const(&)[15],std::string,std::string,CFRange &,void>@<X0>(char *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  int v10 = (std::string *)operator new(0xC0uLL);
  CFRange result = std::__shared_ptr_emplace<QP::LexemeExtended>::__shared_ptr_emplace[abi:ne180100]<char const(&)[15],std::string,std::string,CFRange &,std::allocator<QP::LexemeExtended>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 1;
  a5[1] = v10;
  return result;
}

void sub_224DEE79C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<QP::LexemeExtended>::__shared_ptr_emplace[abi:ne180100]<char const(&)[15],std::string,std::string,CFRange &,std::allocator<QP::LexemeExtended>,0>(std::string *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26D8312C0;
  std::construct_at[abi:ne180100]<QP::LexemeExtended,char const(&)[15],std::string,std::string,CFRange &,QP::LexemeExtended*>(a1 + 1, a2, a3, a4, a5);
  return a1;
}

void sub_224DEE7F8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

std::string *std::construct_at[abi:ne180100]<QP::LexemeExtended,char const(&)[15],std::string,std::string,CFRange &,QP::LexemeExtended*>(std::string *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::string::basic_string[abi:ne180100]<0>(v14, a2);
  *(_OWORD *)long long v12 = *(_OWORD *)a3;
  uint64_t v13 = *(void *)(a3 + 16);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  *(_OWORD *)std::string __p = *(_OWORD *)a4;
  uint64_t v11 = *(void *)(a4 + 16);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  QP::LexemeExtended::LexemeExtended(a1, (uint64_t)v14, (long long *)v12, (long long *)__p, *(void *)a5, *(void *)(a5 + 8));
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(v12[0]);
  }
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  return a1;
}

void sub_224DEE8CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::construct_at[abi:ne180100]<QP::LexemeExtended,char const(&)[18],std::string,std::string,CFRange &,QP::LexemeExtended*>();
  _Unwind_Resume(a1);
}

std::string *std::allocate_shared[abi:ne180100]<QP::LexemeExtendedNumber,std::allocator<QP::LexemeExtendedNumber>,char const(&)[6],std::unique_ptr<QP::NumericValue>,std::string,CFRange &,void>@<X0>(char *a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  int v10 = (std::string *)operator new(0xB8uLL);
  CFRange result = std::__shared_ptr_emplace<QP::LexemeExtendedNumber>::__shared_ptr_emplace[abi:ne180100]<char const(&)[6],std::unique_ptr<QP::NumericValue>,std::string,CFRange &,std::allocator<QP::LexemeExtendedNumber>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 1;
  a5[1] = v10;
  return result;
}

void sub_224DEE95C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<QP::LexemeExtendedNumber>::__shared_ptr_emplace[abi:ne180100]<char const(&)[6],std::unique_ptr<QP::NumericValue>,std::string,CFRange &,std::allocator<QP::LexemeExtendedNumber>,0>(std::string *a1, char *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26D831310;
  std::construct_at[abi:ne180100]<QP::LexemeExtendedNumber,char const(&)[6],std::unique_ptr<QP::NumericValue>,std::string,CFRange &,QP::LexemeExtendedNumber*>(a1 + 1, a2, a3, a4, a5);
  return a1;
}

void sub_224DEE9B8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<QP::LexemeExtendedNumber>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D831310;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QP::LexemeExtendedNumber>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D831310;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A623E20);
}

void std::__shared_ptr_emplace<QP::LexemeExtendedNumber>::__on_zero_shared(uint64_t a1)
{
}

std::string *std::construct_at[abi:ne180100]<QP::LexemeExtendedNumber,char const(&)[6],std::unique_ptr<QP::NumericValue>,std::string,CFRange &,QP::LexemeExtendedNumber*>(std::string *a1, char *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  std::string::basic_string[abi:ne180100]<0>(v14, a2);
  std::shared_ptr<QP::NumericValue>::shared_ptr[abi:ne180100]<QP::NumericValue,std::default_delete<QP::NumericValue>,void>(&v12, a3);
  *(_OWORD *)std::string __p = *(_OWORD *)a4;
  uint64_t v11 = *(void *)(a4 + 16);
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = 0;
  QP::LexemeExtendedNumber::LexemeExtendedNumber(a1, (uint64_t)v14, (std::string::size_type *)&v12, (long long *)__p, *(void *)a5, *(void *)(a5 + 8));
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[0]);
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  return a1;
}

void sub_224DEEAFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::shared_ptr<QP::NumericValue>::shared_ptr[abi:ne180100]<QP::NumericValue,std::default_delete<QP::NumericValue>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *CFRange result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

void std::__shared_ptr_pointer<QP::NumericValue  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A623E20);
}

QP::DateConverter *std::__shared_ptr_pointer<QP::NumericValue  *>::__on_zero_shared(uint64_t a1)
{
  CFRange result = *(QP::DateConverter **)(a1 + 24);
  if (result)
  {
    QP::DateConverter::~DateConverter(result);
    JUMPOUT(0x22A623E20);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<QP::NumericValue  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

std::string *QP::LexemeExtendedNumber::LexemeExtendedNumber(std::string *this, uint64_t a2, std::string::size_type *a3, long long *a4, uint64_t a5, std::string::size_type a6)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  QP::Lexeme::Lexeme(this, (long long *)&__p, a5, a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::size_type v11 = a3[1];
  this[5].__r_.__value_.__r.__words[0] = *a3;
  this[5].__r_.__value_.__l.__size_ = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = (std::string *)((char *)this + 136);
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v13 = *a4;
    this[6].__r_.__value_.__l.__size_ = *((void *)a4 + 2);
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
  }
  return this;
}

void sub_224DEED60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v14 + 128);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  QP::Lexeme::~Lexeme((void **)v14);
  _Unwind_Resume(a1);
}

void std::__destroy_at[abi:ne180100]<QP::LexemeExtendedNumber,0>(void **this)
{
  if (*((char *)this + 159) < 0) {
    operator delete(this[17]);
  }
  uint64_t v2 = (std::__shared_weak_count *)this[16];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  QP::Lexeme::~Lexeme(this);
}

std::string *std::allocate_shared[abi:ne180100]<QP::LexemeExtended,std::allocator<QP::LexemeExtended>,std::string,std::string,std::string,CFRange &,void>@<X0>(long long *a1@<X1>, uint64_t a2@<X2>, long long *a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  int v10 = (std::string *)operator new(0xC0uLL);
  CFRange result = std::__shared_ptr_emplace<QP::LexemeExtended>::__shared_ptr_emplace[abi:ne180100]<std::string,std::string,std::string,CFRange &,std::allocator<QP::LexemeExtended>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 1;
  a5[1] = v10;
  return result;
}

void sub_224DEEE50(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<QP::LexemeExtended>::__shared_ptr_emplace[abi:ne180100]<std::string,std::string,std::string,CFRange &,std::allocator<QP::LexemeExtended>,0>(std::string *a1, long long *a2, uint64_t a3, long long *a4, uint64_t a5)
{
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26D8312C0;
  std::construct_at[abi:ne180100]<QP::LexemeExtended,std::string,std::string,std::string,CFRange &,QP::LexemeExtended*>(a1 + 1, a2, a3, a4, a5);
  return a1;
}

void sub_224DEEEAC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

std::string *std::construct_at[abi:ne180100]<QP::LexemeExtended,std::string,std::string,std::string,CFRange &,QP::LexemeExtended*>(std::string *a1, long long *a2, uint64_t a3, long long *a4, uint64_t a5)
{
  long long v12 = *a2;
  uint64_t v13 = *((void *)a2 + 2);
  *((void *)a2 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *(_OWORD *)int v10 = *(_OWORD *)a3;
  uint64_t v11 = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  long long v6 = *a4;
  uint64_t v9 = *((void *)a4 + 2);
  *(_OWORD *)std::string __p = v6;
  *((void *)a4 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = 0;
  *((void *)a4 + 2) = 0;
  *(void *)a4 = 0;
  QP::LexemeExtended::LexemeExtended(a1, (uint64_t)&v12, (long long *)v10, (long long *)__p, *(void *)a5, *(void *)(a5 + 8));
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v11) < 0) {
    operator delete(v10[0]);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete((void *)v12);
  }
  return a1;
}

void sub_224DEEF7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::construct_at[abi:ne180100]<QP::LexemeExtended,char const(&)[18],std::string,std::string,CFRange &,QP::LexemeExtended*>();
  _Unwind_Resume(a1);
}

std::string *std::allocate_shared[abi:ne180100]<QP::LexemeExtended,std::allocator<QP::LexemeExtended>,char const(&)[12],std::string,std::string,CFRange &,void>@<X0>(char *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  int v10 = (std::string *)operator new(0xC0uLL);
  CFRange result = std::__shared_ptr_emplace<QP::LexemeExtended>::__shared_ptr_emplace[abi:ne180100]<char const(&)[12],std::string,std::string,CFRange &,std::allocator<QP::LexemeExtended>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 1;
  a5[1] = v10;
  return result;
}

void sub_224DEF00C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<QP::LexemeExtended>::__shared_ptr_emplace[abi:ne180100]<char const(&)[12],std::string,std::string,CFRange &,std::allocator<QP::LexemeExtended>,0>(std::string *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26D8312C0;
  std::construct_at[abi:ne180100]<QP::LexemeExtended,char const(&)[12],std::string,std::string,CFRange &,QP::LexemeExtended*>(a1 + 1, a2, a3, a4, a5);
  return a1;
}

void sub_224DEF068(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

std::string *std::construct_at[abi:ne180100]<QP::LexemeExtended,char const(&)[12],std::string,std::string,CFRange &,QP::LexemeExtended*>(std::string *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::string::basic_string[abi:ne180100]<0>(v14, a2);
  *(_OWORD *)long long v12 = *(_OWORD *)a3;
  uint64_t v13 = *(void *)(a3 + 16);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  *(_OWORD *)std::string __p = *(_OWORD *)a4;
  uint64_t v11 = *(void *)(a4 + 16);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  QP::LexemeExtended::LexemeExtended(a1, (uint64_t)v14, (long long *)v12, (long long *)__p, *(void *)a5, *(void *)(a5 + 8));
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(v12[0]);
  }
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  return a1;
}

void sub_224DEF13C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::construct_at[abi:ne180100]<QP::LexemeExtended,char const(&)[18],std::string,std::string,CFRange &,QP::LexemeExtended*>();
  _Unwind_Resume(a1);
}

std::string *std::allocate_shared[abi:ne180100]<QP::LexemeStatus,std::allocator<QP::LexemeStatus>,std::string,std::string,CFRange &,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  int v8 = (std::string *)operator new(0xA8uLL);
  CFRange result = std::__shared_ptr_emplace<QP::LexemeStatus>::__shared_ptr_emplace[abi:ne180100]<std::string,std::string,CFRange &,std::allocator<QP::LexemeStatus>,0>(v8, a1, a2, a3);
  *a4 = v8 + 1;
  a4[1] = v8;
  return result;
}

void sub_224DEF1C4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<QP::LexemeStatus>::__shared_ptr_emplace[abi:ne180100]<std::string,std::string,CFRange &,std::allocator<QP::LexemeStatus>,0>(std::string *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26D830C58;
  std::construct_at[abi:ne180100]<QP::LexemeStatus,std::string,std::string,CFRange &,QP::LexemeStatus*>(a1 + 1, a2, a3, a4);
  return a1;
}

void sub_224DEF220(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

std::string *std::construct_at[abi:ne180100]<QP::LexemeStatus,std::string,std::string,CFRange &,QP::LexemeStatus*>(std::string *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_OWORD *)int v8 = *(_OWORD *)a2;
  uint64_t v9 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_OWORD *)std::string __p = *(_OWORD *)a3;
  uint64_t v7 = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  QP::LexemeStatus::LexemeStatus(a1, (uint64_t)v8, (long long *)__p, *(void *)a4, *(void *)(a4 + 8));
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v9) < 0) {
    operator delete(v8[0]);
  }
  return a1;
}

void sub_224DEF2C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::construct_at[abi:ne180100]<QP::LexemeValue,std::string &,std::string,CFRange &,QP::LexemeValue*>((uint64_t)&a16);
  _Unwind_Resume(a1);
}

std::string *std::allocate_shared[abi:ne180100]<QP::LexemeValue,std::allocator<QP::LexemeValue>,std::string,std::string,CFRange &,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  int v8 = (std::string *)operator new(0xA8uLL);
  CFRange result = std::__shared_ptr_emplace<QP::LexemeValue>::__shared_ptr_emplace[abi:ne180100]<std::string,std::string,CFRange &,std::allocator<QP::LexemeValue>,0>(v8, a1, a2, a3);
  *a4 = v8 + 1;
  a4[1] = v8;
  return result;
}

void sub_224DEF348(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<QP::LexemeValue>::__shared_ptr_emplace[abi:ne180100]<std::string,std::string,CFRange &,std::allocator<QP::LexemeValue>,0>(std::string *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26D830BB8;
  std::construct_at[abi:ne180100]<QP::LexemeValue,std::string,std::string,CFRange &,QP::LexemeValue*>(a1 + 1, a2, a3, a4);
  return a1;
}

void sub_224DEF3A4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

std::string *std::construct_at[abi:ne180100]<QP::LexemeValue,std::string,std::string,CFRange &,QP::LexemeValue*>(std::string *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_OWORD *)int v8 = *(_OWORD *)a2;
  uint64_t v9 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_OWORD *)std::string __p = *(_OWORD *)a3;
  uint64_t v7 = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  QP::LexemeValue::LexemeValue(a1, (uint64_t)v8, (long long *)__p, *(void *)a4, *(void *)(a4 + 8));
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v9) < 0) {
    operator delete(v8[0]);
  }
  return a1;
}

void sub_224DEF448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::construct_at[abi:ne180100]<QP::LexemeValue,std::string &,std::string,CFRange &,QP::LexemeValue*>((uint64_t)&a16);
  _Unwind_Resume(a1);
}

std::string *std::allocate_shared[abi:ne180100]<QP::LexemeNumber,std::allocator<QP::LexemeNumber>,std::string,std::unique_ptr<QP::NumericValue>,CFRange &,void>@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  int v8 = (std::string *)operator new(0xA0uLL);
  CFRange result = std::__shared_ptr_emplace<QP::LexemeNumber>::__shared_ptr_emplace[abi:ne180100]<std::string,std::unique_ptr<QP::NumericValue>,CFRange &,std::allocator<QP::LexemeNumber>,0>(v8, a1, a2, a3);
  *a4 = v8 + 1;
  a4[1] = v8;
  return result;
}

void sub_224DEF4CC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<QP::LexemeNumber>::__shared_ptr_emplace[abi:ne180100]<std::string,std::unique_ptr<QP::NumericValue>,CFRange &,std::allocator<QP::LexemeNumber>,0>(std::string *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26D8313C0;
  std::construct_at[abi:ne180100]<QP::LexemeNumber,std::string,std::unique_ptr<QP::NumericValue>,CFRange &,QP::LexemeNumber*>(a1 + 1, a2, a3, a4);
  return a1;
}

void sub_224DEF528(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<QP::LexemeNumber>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D8313C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QP::LexemeNumber>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D8313C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A623E20);
}

void std::__shared_ptr_emplace<QP::LexemeNumber>::__on_zero_shared(uint64_t a1)
{
}

std::string *std::construct_at[abi:ne180100]<QP::LexemeNumber,std::string,std::unique_ptr<QP::NumericValue>,CFRange &,QP::LexemeNumber*>(std::string *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v10 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  std::shared_ptr<QP::NumericValue>::shared_ptr[abi:ne180100]<QP::NumericValue,std::default_delete<QP::NumericValue>,void>(&v7, a3);
  QP::LexemeNumber::LexemeNumber(a1, (uint64_t)__p, (std::string::size_type *)&v7, *(void *)a4, *(void *)(a4 + 8));
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_224DEF640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *QP::LexemeNumber::LexemeNumber(std::string *this, uint64_t a2, std::string::size_type *a3, uint64_t a4, std::string::size_type a5)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  QP::Lexeme::Lexeme(this, (long long *)&__p, a4, a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::size_type v9 = a3[1];
  this[5].__r_.__value_.__r.__words[0] = *a3;
  this[5].__r_.__value_.__l.__size_ = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void sub_224DEF718(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__destroy_at[abi:ne180100]<QP::LexemeNumber,0>(QP::Lexeme *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  QP::Lexeme::~Lexeme((void **)this);
}

const void ***std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100](const void ***result, const void **a2)
{
  uint64_t v2 = *result;
  *CFRange result = a2;
  if (v2)
  {
    nlp::CFScopedPtr<__CFString const*>::reset(v2, 0);
    JUMPOUT(0x22A623E20);
  }
  return result;
}

void std::default_delete<QP::DatePeriod>::operator()[abi:ne180100](uint64_t a1, const void **a2)
{
  if (a2)
  {
    nlp::CFScopedPtr<__CFString const*>::reset(a2, 0);
    JUMPOUT(0x22A623E20);
  }
}

std::string *std::allocate_shared[abi:ne180100]<QP::LexemeDateTime,std::allocator<QP::LexemeDateTime>,std::string,std::unique_ptr<QP::DatePeriod>,CFRange &,void>@<X0>(uint64_t a1@<X1>, const void ***a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  int v8 = (std::string *)operator new(0xA0uLL);
  CFRange result = std::__shared_ptr_emplace<QP::LexemeDateTime>::__shared_ptr_emplace[abi:ne180100]<std::string,std::unique_ptr<QP::DatePeriod>,CFRange &,std::allocator<QP::LexemeDateTime>,0>(v8, a1, a2, a3);
  *a4 = v8 + 1;
  a4[1] = v8;
  return result;
}

void sub_224DEF890(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<QP::LexemeDateTime>::__shared_ptr_emplace[abi:ne180100]<std::string,std::unique_ptr<QP::DatePeriod>,CFRange &,std::allocator<QP::LexemeDateTime>,0>(std::string *a1, uint64_t a2, const void ***a3, uint64_t a4)
{
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26D831410;
  std::construct_at[abi:ne180100]<QP::LexemeDateTime,std::string,std::unique_ptr<QP::DatePeriod>,CFRange &,QP::LexemeDateTime*>(a1 + 1, a2, a3, a4);
  return a1;
}

void sub_224DEF8EC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<QP::LexemeDateTime>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D831410;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QP::LexemeDateTime>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D831410;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A623E20);
}

void std::__shared_ptr_emplace<QP::LexemeDateTime>::__on_zero_shared(uint64_t a1)
{
}

std::string *std::construct_at[abi:ne180100]<QP::LexemeDateTime,std::string,std::unique_ptr<QP::DatePeriod>,CFRange &,QP::LexemeDateTime*>(std::string *a1, uint64_t a2, const void ***a3, uint64_t a4)
{
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v9 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v5 = *a3;
  *a3 = 0;
  uint64_t v7 = v5;
  QP::LexemeDateTime::LexemeDateTime(a1, (uint64_t)__p, (uint64_t *)&v7, *(void *)a4, *(void *)(a4 + 8));
  std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100](&v7, 0);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_224DEFA00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void **a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

std::string *QP::LexemeDateTime::LexemeDateTime(std::string *this, uint64_t a2, uint64_t *a3, uint64_t a4, std::string::size_type a5)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v20 = *(std::string *)a2;
  }
  QP::Lexeme::Lexeme(this, (long long *)&v20, a4, a5);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  std::shared_ptr<QP::DatePeriod>::shared_ptr[abi:ne180100]<QP::DatePeriod,std::default_delete<QP::DatePeriod>,void>((uint64_t *)&this[5], a3);
  if ((this[2].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(this[2].__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = this[2].__r_.__value_.__l.__size_;
  }
  uint64_t v10 = &v18;
  std::string::basic_string[abi:ne180100]((uint64_t)&v18, size + 1);
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v10 = (std::string *)v18.__r_.__value_.__r.__words[0];
  }
  if (size)
  {
    if ((this[2].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t data = this + 2;
    }
    else {
      uint64_t data = (std::string *)this[2].__r_.__value_.__l.__data_;
    }
    memmove(v10, data, size);
  }
  *(_WORD *)((char *)&v10->__r_.__value_.__l.__data_ + size) = 58;
  QP::DatePeriod::description((QP::DatePeriod *)this[5].__r_.__value_.__l.__data_, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v13 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v13 = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v14 = std::string::append(&v18, (const std::string::value_type *)p_p, v13);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  std::string::operator=(this + 2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  return this;
}

void sub_224DEFBB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  uint64_t v28 = *(std::__shared_weak_count **)(v26 + 128);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  QP::Lexeme::~Lexeme((void **)v26);
  _Unwind_Resume(a1);
}

void sub_224DEFC28(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x224DEFC20);
}

void QP::DatePeriod::description(QP::DatePeriod *this@<X0>, std::string *a2@<X8>)
{
  QP::DateComponents::description((QP::DatePeriod *)((char *)this + 20), &v18);
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v18.__r_.__value_.__l.__size_;
  }
  uint64_t v5 = &v19;
  std::string::basic_string[abi:ne180100]((uint64_t)&v19, size + 1);
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v5 = (std::string *)v19.__r_.__value_.__r.__words[0];
  }
  if (size)
  {
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v6 = &v18;
    }
    else {
      long long v6 = (std::string *)v18.__r_.__value_.__r.__words[0];
    }
    memmove(v5, v6, size);
  }
  *(_WORD *)((char *)&v5->__r_.__value_.__l.__data_ + size) = 45;
  QP::DateComponents::description((QP::DatePeriod *)((char *)this + 72), &v17);
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v7 = &v17;
  }
  else {
    uint64_t v7 = (std::string *)v17.__r_.__value_.__r.__words[0];
  }
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v8 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v8 = v17.__r_.__value_.__l.__size_;
  }
  uint64_t v9 = std::string::append(&v19, (const std::string::value_type *)v7, v8);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  uint64_t v11 = std::string::append(&v20, "+", 1uLL);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  QP::DateComponents::description((QP::DatePeriod *)((char *)this + 124), &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v14 = __p.__r_.__value_.__l.__size_;
  }
  long long v15 = std::string::append(&v21, (const std::string::value_type *)p_p, v14);
  *a2 = *v15;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
}

void sub_224DEFE00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v38 - 41) < 0) {
    operator delete(*(void **)(v38 - 64));
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::shared_ptr<QP::DatePeriod>::shared_ptr[abi:ne180100]<QP::DatePeriod,std::default_delete<QP::DatePeriod>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *CFRange result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

void std::__shared_ptr_pointer<QP::DatePeriod  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A623E20);
}

void std::__shared_ptr_pointer<QP::DatePeriod  *>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<QP::DatePeriod  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

void QP::DateComponents::description(QP::DateComponents *this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  int v4 = *((_DWORD *)this + 2);
  if ((v4 & 0x80000000) == 0)
  {
    std::to_string(&v39, v4);
    uint64_t v5 = (v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &v39
       : (std::string *)v39.__r_.__value_.__r.__words[0];
    std::string::size_type v6 = (v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? HIBYTE(v39.__r_.__value_.__r.__words[2])
       : v39.__r_.__value_.__l.__size_;
    std::string::append(a2, (const std::string::value_type *)v5, v6);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
  }
  int v7 = *((_DWORD *)this + 1);
  if ((v7 & 0x80000000) == 0)
  {
    std::to_string(&v39, v7);
    std::string::size_type v8 = (v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &v39
       : (std::string *)v39.__r_.__value_.__r.__words[0];
    std::string::size_type v9 = (v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? HIBYTE(v39.__r_.__value_.__r.__words[2])
       : v39.__r_.__value_.__l.__size_;
    std::string::append(a2, (const std::string::value_type *)v8, v9);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
  }
  if ((*(_DWORD *)this & 0x80000000) == 0)
  {
    std::to_string(&v39, *(_DWORD *)this);
    long long v10 = (v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v39
        : (std::string *)v39.__r_.__value_.__r.__words[0];
    std::string::size_type v11 = (v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(v39.__r_.__value_.__r.__words[2])
        : v39.__r_.__value_.__l.__size_;
    std::string::append(a2, (const std::string::value_type *)v10, v11);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
  }
  int v12 = *((_DWORD *)this + 3);
  if ((v12 & 0x80000000) == 0)
  {
    std::to_string(&v39, v12);
    std::string::size_type v13 = (v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v39
        : (std::string *)v39.__r_.__value_.__r.__words[0];
    std::string::size_type v14 = (v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(v39.__r_.__value_.__r.__words[2])
        : v39.__r_.__value_.__l.__size_;
    std::string::append(a2, (const std::string::value_type *)v13, v14);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
  }
  int v15 = *((_DWORD *)this + 4);
  if ((v15 & 0x80000000) == 0)
  {
    std::to_string(&v39, v15);
    uint64_t v16 = (v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v39
        : (std::string *)v39.__r_.__value_.__r.__words[0];
    std::string::size_type v17 = (v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(v39.__r_.__value_.__r.__words[2])
        : v39.__r_.__value_.__l.__size_;
    std::string::append(a2, (const std::string::value_type *)v16, v17);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
  }
  int v18 = *((_DWORD *)this + 5);
  if ((v18 & 0x80000000) == 0)
  {
    std::to_string(&v39, v18);
    std::string v19 = (v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v39
        : (std::string *)v39.__r_.__value_.__r.__words[0];
    std::string::size_type v20 = (v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(v39.__r_.__value_.__r.__words[2])
        : v39.__r_.__value_.__l.__size_;
    std::string::append(a2, (const std::string::value_type *)v19, v20);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
  }
  int v21 = *((_DWORD *)this + 6);
  if ((v21 & 0x80000000) == 0)
  {
    std::to_string(&v39, v21);
    uint64_t v22 = (v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v39
        : (std::string *)v39.__r_.__value_.__r.__words[0];
    std::string::size_type v23 = (v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(v39.__r_.__value_.__r.__words[2])
        : v39.__r_.__value_.__l.__size_;
    std::string::append(a2, (const std::string::value_type *)v22, v23);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
  }
  int v24 = *((_DWORD *)this + 7);
  if ((v24 & 0x80000000) == 0)
  {
    std::to_string(&v39, v24);
    CFNumberRef v25 = (v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v39
        : (std::string *)v39.__r_.__value_.__r.__words[0];
    std::string::size_type v26 = (v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(v39.__r_.__value_.__r.__words[2])
        : v39.__r_.__value_.__l.__size_;
    std::string::append(a2, (const std::string::value_type *)v25, v26);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
  }
  int v27 = *((_DWORD *)this + 8);
  if ((v27 & 0x80000000) == 0)
  {
    std::to_string(&v39, v27);
    uint64_t v28 = (v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v39
        : (std::string *)v39.__r_.__value_.__r.__words[0];
    std::string::size_type v29 = (v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(v39.__r_.__value_.__r.__words[2])
        : v39.__r_.__value_.__l.__size_;
    std::string::append(a2, (const std::string::value_type *)v28, v29);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
  }
  int v30 = *((_DWORD *)this + 9);
  if ((v30 & 0x80000000) == 0)
  {
    std::to_string(&v39, v30);
    uint64_t v31 = (v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v39
        : (std::string *)v39.__r_.__value_.__r.__words[0];
    std::string::size_type v32 = (v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(v39.__r_.__value_.__r.__words[2])
        : v39.__r_.__value_.__l.__size_;
    std::string::append(a2, (const std::string::value_type *)v31, v32);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
  }
  int v33 = *((_DWORD *)this + 11);
  if ((v33 & 0x80000000) == 0)
  {
    std::to_string(&v39, v33);
    CFStringRef v34 = (v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v39
        : (std::string *)v39.__r_.__value_.__r.__words[0];
    std::string::size_type v35 = (v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(v39.__r_.__value_.__r.__words[2])
        : v39.__r_.__value_.__l.__size_;
    std::string::append(a2, (const std::string::value_type *)v34, v35);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
  }
  int v36 = *((_DWORD *)this + 12);
  if ((v36 & 0x80000000) == 0)
  {
    std::to_string(&v39, v36);
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFStringRef v37 = &v39;
    }
    else {
      CFStringRef v37 = (std::string *)v39.__r_.__value_.__r.__words[0];
    }
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v39.__r_.__value_.__l.__size_;
    }
    std::string::append(a2, (const std::string::value_type *)v37, size);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
  }
}

void sub_224DF0308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::allocate_shared[abi:ne180100]<QP::LexemeDateTime,std::allocator<QP::LexemeDateTime>,char const(&)[10],std::unique_ptr<QP::DatePeriod>,CFRange &,void>@<X0>(char *a1@<X1>, const void ***a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  std::string::size_type v8 = (std::string *)operator new(0xA0uLL);
  CFRange result = std::__shared_ptr_emplace<QP::LexemeDateTime>::__shared_ptr_emplace[abi:ne180100]<char const(&)[10],std::unique_ptr<QP::DatePeriod>,CFRange &,std::allocator<QP::LexemeDateTime>,0>(v8, a1, a2, a3);
  *a4 = v8 + 1;
  a4[1] = v8;
  return result;
}

void sub_224DF03F4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<QP::LexemeDateTime>::__shared_ptr_emplace[abi:ne180100]<char const(&)[10],std::unique_ptr<QP::DatePeriod>,CFRange &,std::allocator<QP::LexemeDateTime>,0>(std::string *a1, char *a2, const void ***a3, uint64_t a4)
{
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26D831410;
  std::construct_at[abi:ne180100]<QP::LexemeDateTime,char const(&)[10],std::unique_ptr<QP::DatePeriod>,CFRange &,QP::LexemeDateTime*>(a1 + 1, a2, a3, a4);
  return a1;
}

void sub_224DF0450(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

std::string *std::construct_at[abi:ne180100]<QP::LexemeDateTime,char const(&)[10],std::unique_ptr<QP::DatePeriod>,CFRange &,QP::LexemeDateTime*>(std::string *a1, char *a2, const void ***a3, uint64_t a4)
{
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  int v7 = *a3;
  *a3 = 0;
  std::string::size_type v9 = v7;
  QP::LexemeDateTime::LexemeDateTime(a1, (uint64_t)__p, (uint64_t *)&v9, *(void *)a4, *(void *)(a4 + 8));
  std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100](&v9, 0);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_224DF04E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

std::string *std::allocate_shared[abi:ne180100]<QP::LexemeDateTime,std::allocator<QP::LexemeDateTime>,std::string &,std::unique_ptr<QP::DatePeriod>,CFRange &,void>@<X0>(uint64_t a1@<X1>, const void ***a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  std::string::size_type v8 = (std::string *)operator new(0xA0uLL);
  CFRange result = std::__shared_ptr_emplace<QP::LexemeDateTime>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::unique_ptr<QP::DatePeriod>,CFRange &,std::allocator<QP::LexemeDateTime>,0>(v8, a1, a2, a3);
  *a4 = v8 + 1;
  a4[1] = v8;
  return result;
}

void sub_224DF056C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<QP::LexemeDateTime>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::unique_ptr<QP::DatePeriod>,CFRange &,std::allocator<QP::LexemeDateTime>,0>(std::string *a1, uint64_t a2, const void ***a3, uint64_t a4)
{
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26D831410;
  std::construct_at[abi:ne180100]<QP::LexemeDateTime,std::string &,std::unique_ptr<QP::DatePeriod>,CFRange &,QP::LexemeDateTime*>(a1 + 1, a2, a3, a4);
  return a1;
}

void sub_224DF05C8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

std::string *std::construct_at[abi:ne180100]<QP::LexemeDateTime,std::string &,std::unique_ptr<QP::DatePeriod>,CFRange &,QP::LexemeDateTime*>(std::string *this, uint64_t a2, const void ***a3, uint64_t a4)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v10 = *(std::string *)a2;
  }
  int v7 = *a3;
  *a3 = 0;
  std::string::size_type v9 = v7;
  QP::LexemeDateTime::LexemeDateTime(this, (uint64_t)&v10, (uint64_t *)&v9, *(void *)a4, *(void *)(a4 + 8));
  std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100](&v9, 0);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  return this;
}

void sub_224DF0680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void **a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

CFIndex QPAnnotationsGetID(const __CFString *a1)
{
  if (getAnnotationsList(void)::onceToken != -1) {
    dispatch_once(&getAnnotationsList(void)::onceToken, &__block_literal_global_10);
  }
  CFArrayRef v2 = (const __CFArray *)getAnnotationsList(void)::gAnnotations;
  v5.CFIndex length = CFArrayGetCount((CFArrayRef)getAnnotationsList(void)::gAnnotations);
  v5.CFIndex location = 0;
  FirstIndexOfCFStringRef Value = CFArrayGetFirstIndexOfValue(v2, v5, a1);
  if (FirstIndexOfValue == -1) {
    return -1;
  }
  else {
    return FirstIndexOfValue + 1;
  }
}

const void *QPAnnotationsGetIdentifier(CFIndex a1)
{
  if (getAnnotationsList(void)::onceToken != -1) {
    dispatch_once(&getAnnotationsList(void)::onceToken, &__block_literal_global_10);
  }
  if (a1 < 1) {
    return 0;
  }
  CFArrayRef v2 = (const __CFArray *)getAnnotationsList(void)::gAnnotations;
  if (CFArrayGetCount((CFArrayRef)getAnnotationsList(void)::gAnnotations) < a1) {
    return 0;
  }
  return CFArrayGetValueAtIndex(v2, a1 - 1);
}

void ___ZL18getAnnotationsListv_block_invoke()
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  CFArrayAppendValue(Mutable, @"COPYRIGHTED");
  CFArrayAppendValue(Mutable, @"PHOTOSENSITIVE");
  CFArrayAppendValue(Mutable, @"PUBLIC_FIGURE");
  CFArrayAppendValue(Mutable, @"FICTIONAL_CHARACTER");
  CFArrayAppendValue(Mutable, @"PHOTOSALLOW");
  CFArrayAppendValue(Mutable, @"OFFENSIVE");
  CFArrayAppendValue(Mutable, @"SENSITIVE");
  CFArrayAppendValue(Mutable, @"COMMON");
  CFArrayAppendValue(Mutable, @"EMOJI");
  CFArrayAppendValue(Mutable, @"GENERIC_ENTITY");
  CFArrayAppendValue(Mutable, @"TEXTSENSITIVE");
  getAnnotationsList(void)::gAnnotations = (uint64_t)Mutable;
}

__CFArray *QP::GPVisualGenerationFormatterCreateMergedDepParserPeopleEntities(CFStringRef **a1, const __CFArray *a2, QP *a3)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  int v27 = 0;
  uint64_t v22 = a1;
  CFIndex Length = CFStringGetLength(**a1);
  if (a2)
  {
    CFArrayRef theArray = Mutable;
    if (CFArrayGetCount(a2) >= 1)
    {
      for (CFIndex i = 0; CFArrayGetCount(a2) > i; ++i)
      {
        CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(a2, i);
        CFArrayRef v9 = ValueAtIndex;
        if (!ValueAtIndex || CFArrayGetCount(ValueAtIndex) < 3)
        {
          uint64_t v10 = 0;
          uint64_t v11 = -1;
LABEL_7:
          if (vgFormatterLogger(void)::token != -1) {
            dispatch_once(&vgFormatterLogger(void)::token, &__block_literal_global_11);
          }
          int v12 = vgFormatterLogger(void)::log;
          if (os_log_type_enabled((os_log_t)vgFormatterLogger(void)::log, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 134218752;
            *(void *)&uint8_t buf[4] = v11;
            __int16 v30 = 2048;
            uint64_t v31 = v10;
            __int16 v32 = 2048;
            int v33 = v27;
            __int16 v34 = 2048;
            CFIndex v35 = Length;
            _os_log_impl(&dword_224D85000, v12, OS_LOG_TYPE_DEFAULT, "Encountered unexpected entity range (%ld, %ld) with current:%ld, length:%ld", buf, 0x2Au);
          }
          continue;
        }
        CFNumberRef v13 = (const __CFNumber *)CFArrayGetValueAtIndex(v9, 0);
        CFNumberRef v14 = (const __CFNumber *)CFArrayGetValueAtIndex(v9, 1);
        uint64_t v15 = CFArrayGetValueAtIndex(v9, 2);
        uint64_t valuePtr = 0;
        *(void *)long long buf = 0;
        CFNumberGetValue(v13, kCFNumberCFIndexType, buf);
        CFNumberGetValue(v14, kCFNumberCFIndexType, &valuePtr);
        uint64_t v10 = 0;
        uint64_t v11 = -1;
        if (!v13) {
          goto LABEL_7;
        }
        if (!v14) {
          goto LABEL_7;
        }
        if (!v15) {
          goto LABEL_7;
        }
        uint64_t v10 = valuePtr;
        uint64_t v11 = *(void *)buf;
        if (*(void *)buf == -1) {
          goto LABEL_7;
        }
        uint64_t v16 = v27;
        if (*(uint64_t *)buf < (uint64_t)v27 || valuePtr + *(void *)buf > Length) {
          goto LABEL_7;
        }
        v17.CFIndex location = *(void *)buf - (void)v27;
        if (*(uint64_t *)buf > (uint64_t)v27)
        {
          if (v17.location < 2)
          {
            CFArrayAppendValue(theArray, v9);
            continue;
          }
          int v18 = (std::__shared_weak_count *)v22[1];
          v26[0] = *v22;
          v26[1] = v18;
          if (v18) {
            atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          v17.CFIndex length = (CFIndex)&v27;
          QP::addSafetyAndPersonEntitiesInGapRangeIfNeeded((uint64_t)v26, a3, theArray, v16, v17);
          if (v18) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v18);
          }
        }
        CFArrayAppendValue(theArray, v9);
        int v27 = (__CFAttributedString *)(v10 + v11);
      }
    }
    std::string v19 = v27;
    CFMutableArrayRef Mutable = theArray;
  }
  else
  {
    std::string v19 = 0;
  }
  if ((uint64_t)v19 < Length - 1)
  {
    std::string::size_type v20 = (std::__shared_weak_count *)v22[1];
    v25[0] = *v22;
    v25[1] = v20;
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v37.CFIndex length = (CFIndex)&v27;
    v37.CFIndex location = Length - (void)v19;
    QP::addSafetyAndPersonEntitiesInGapRangeIfNeeded((uint64_t)v25, a3, Mutable, v19, v37);
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
  }
  return Mutable;
}

void sub_224DF0BB0(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void QP::addSafetyAndPersonEntitiesInGapRangeIfNeeded(uint64_t a1, QP *this, __CFArray *a3, __CFAttributedString *a4, CFRange a5)
{
  CFIndex length = (void *)a5.length;
  uint64_t location = a5.location;
  uint64_t v32 = *MEMORY[0x263EF8340];
  if (a5.location >= 2)
  {
    do
    {
      long long v27 = xmmword_224E1E2D0;
      v33.CFIndex length = (CFIndex)&v27;
      v33.uint64_t location = location;
      CFStringRef v11 = QP::QPVisualGenerationFormatterSafetyRiskInRange(this, a4, v33, (CFRange *)a5.location);
      if (!v11 || !CFStringGetLength(v11)) {
        break;
      }
      if (vgFormatterLogger(void)::token != -1) {
        dispatch_once(&vgFormatterLogger(void)::token, &__block_literal_global_11);
      }
      int v12 = vgFormatterLogger(void)::log;
      if (os_log_type_enabled((os_log_t)vgFormatterLogger(void)::log, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 134218240;
        uint64_t v29 = v27;
        __int16 v30 = 2048;
        uint64_t v31 = *((void *)&v27 + 1);
        _os_log_impl(&dword_224D85000, v12, OS_LOG_TYPE_DEFAULT, "Found safety annotation at (%ld, %ld) outside of any DependencyParser entities", buf, 0x16u);
      }
      v13.CFIndex length = v27 - (void)a4;
      if ((uint64_t)v27 > (uint64_t)a4)
      {
        CFNumberRef v14 = *(std::__shared_weak_count **)(a1 + 8);
        v26[0] = *(void *)a1;
        v26[1] = (uint64_t)v14;
        if (v14) {
          atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        QP::addPersonEntitiesInGapRangeIfNeeded(v26, (uint64_t)a3, (uint64_t)a4, v13.length, (uint64_t)length);
        if (v14) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v14);
        }
      }
      if ((uint64_t)a4 <= (uint64_t)v27) {
        uint64_t v15 = v27;
      }
      else {
        uint64_t v15 = (uint64_t)a4;
      }
      uint64_t v16 = (char *)a4 + location;
      CFRange v17 = (char *)(*((void *)&v27 + 1) + v27);
      if ((uint64_t)a4 + location < *((void *)&v27 + 1) + (void)v27) {
        CFRange v17 = (char *)a4 + location;
      }
      BOOL v18 = (uint64_t)v17 <= v15;
      std::string v19 = &v17[-v15];
      CFIndex v20 = v18 ? 0 : (CFIndex)v19;
      CFStringRef v21 = (const __CFString *)(v18 ? -1 : v15);
      if (v21 == (const __CFString *)-1) {
        break;
      }
      if (v20 <= 0) {
        break;
      }
      v13.uint64_t location = v20;
      EntityInfo = QP::createEntityInfo(**(const __CFString ***)a1, v21, v13);
      CFArrayAppendValue(a3, EntityInfo);
      a4 = (__CFAttributedString *)((char *)v21 + v20);
      *CFIndex length = (char *)v21 + v20;
      CFRelease(EntityInfo);
      uint64_t location = v16 - ((char *)v21 + v20);
    }
    while (location > 1);
  }
  std::string::size_type v23 = *(const __CFString ***)a1;
  int v24 = *(std::__shared_weak_count **)(a1 + 8);
  v25[0] = (uint64_t)v23;
  v25[1] = (uint64_t)v24;
  if (v24) {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  QP::addPersonEntitiesInGapRangeIfNeeded(v25, (uint64_t)a3, (uint64_t)a4, location, (uint64_t)length);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
}

void sub_224DF0E20(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL QP::VisualGenerationFormatter::isValid(uint64_t a1, void **a2)
{
  CFArrayRef v2 = *a2;
  return *a2 && *v2 && v2[5] != 0;
}

__CFArray *QP::VisualGenerationFormatter::createEntities(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  memset(&v20, 0, sizeof(v20));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, *(long long **)(v3 + 120), *(long long **)(v3 + 128), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v3 + 128) - *(void *)(v3 + 120)) >> 3));
  uint64_t v4 = *a2;
  BOOL v18 = 0;
  uint64_t v19 = 0;
  std::string __p = 0;
  std::vector<std::pair<double,double>>::__init_with_size[abi:ne180100]<std::pair<double,double>*,std::pair<double,double>*>((char *)&__p, *(long long **)(v4 + 144), *(long long **)(v4 + 152), (uint64_t)(*(void *)(v4 + 152) - *(void *)(v4 + 144)) >> 4);
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  if (v20.__r_.__value_.__l.__size_ != v20.__r_.__value_.__r.__words[0])
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    std::string::size_type v8 = (const void *)*MEMORY[0x263EFFB38];
    CFArrayRef v9 = (const void *)*MEMORY[0x263EFFB40];
    uint64_t v10 = 8;
    do
    {
      CFMutableDictionaryRef v11 = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20.__r_.__value_.__l.__size_ - v20.__r_.__value_.__r.__words[0]) >> 3) <= v7) {
        std::vector<std::string>::__throw_out_of_range[abi:ne180100]();
      }
      int v12 = v11;
      CFStringFromCFStringRef String = QP::createCFStringFromString(v20.__r_.__value_.__r.__words[0] + v6);
      CFDictionarySetValue(v12, kQPParseAttributeValueNamedEntityIdentifierKey, CFStringFromString);
      CFRelease(CFStringFromString);
      double v14 = 1.0;
      if (v7 < (v18 - (unsigned char *)__p) >> 4) {
        double v14 = *(double *)((char *)__p + v10);
      }
      if (v14 == 1.0) {
        uint64_t v15 = v8;
      }
      else {
        uint64_t v15 = v9;
      }
      CFDictionarySetValue(v12, kQPNamedEntityIsInferredKey, v15);
      CFArrayAppendValue(Mutable, v12);
      CFRelease(v12);
      ++v7;
      v10 += 16;
      v6 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20.__r_.__value_.__l.__size_ - v20.__r_.__value_.__r.__words[0]) >> 3) > v7);
  }
  if (__p)
  {
    BOOL v18 = __p;
    operator delete(__p);
  }
  std::string __p = &v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  return Mutable;
}

void sub_224DF1070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, char *a10, uint64_t a11, char a12)
{
  if (__p)
  {
    a10 = __p;
    operator delete(__p);
  }
  std::string __p = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t QP::VisualGenerationFormatter::shouldSuppressUnknownNamedEntityInRange(QP::VisualGenerationFormatter *this, CFRange a2)
{
  uint64_t v2 = *((void *)this + 11);
  CFAttributedStringRef v3 = *(const __CFAttributedString **)(v2 + 448);
  if (!v3) {
    return 0;
  }
  CFIndex length = a2.length;
  CFIndex location = a2.location;
  if (!CFAttributedStringGetLength(*(CFAttributedStringRef *)(v2 + 448)) || length == 0) {
    return 0;
  }
  CFIndex v7 = location + length;
  if (location + length > CFAttributedStringGetLength(v3) || length < 1) {
    return 0;
  }
  while (1)
  {
    CFStringRef Attribute = (const __CFString *)CFAttributedStringGetAttribute(v3, location, kQPInputAttributeAnnotationKey, 0);
    if (CFStringsAreEqual(@"GENERIC_ENTITY", Attribute) || CFStringsAreEqual(@"OFFENSIVE", Attribute)) {
      break;
    }
    if (++location >= v7) {
      return 0;
    }
  }
  return 1;
}

__CFArray *QP::VisualGenerationFormatter::createEntitiesWithIntersection(QP::VisualGenerationFormatter *this, const __CFArray *a2, const __CFArray *a3)
{
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableArrayRef Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFFA0]);
  if (CFArrayGetCount(a2) >= 1)
  {
    CFIndex v7 = 0;
    do
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a2, v7);
      CFStringRef Value = CFDictionaryGetValue(ValueAtIndex, kQPParseAttributeValueNamedEntityIdentifierKey);
      CFSetAddValue(Mutable, Value);
      ++v7;
    }
    while (v7 < CFArrayGetCount(a2));
  }
  uint64_t v10 = CFArrayCreateMutable(v5, 0, MEMORY[0x263EFFF70]);
  if (CFArrayGetCount(a3) >= 1)
  {
    CFIndex v11 = 0;
    do
    {
      CFDictionaryRef v12 = (const __CFDictionary *)CFArrayGetValueAtIndex(a3, v11);
      CFRange v13 = CFDictionaryGetValue(v12, kQPParseAttributeValueNamedEntityIdentifierKey);
      if (CFSetContainsValue(Mutable, v13)) {
        CFArrayAppendValue(v10, v12);
      }
      ++v11;
    }
    while (v11 < CFArrayGetCount(a3));
  }
  CFRelease(Mutable);
  return v10;
}

uint64_t QP::VisualGenerationFormatter::setParse(uint64_t a1, CFStringRef **a2)
{
  uint64_t v76 = *MEMORY[0x263EF8340];
  QP::Formatter::clear((const void **)a1);
  QP::Formatter::clear((const void **)a1);
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  uint64_t v62 = *a2;
  int v63 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v5 = QP::Formatter::setParse(a1, (uint64_t)&v62);
  if (v63) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v63);
  }
  unsigned int v48 = v5;
  CFStringRef v6 = **a2;
  uint64_t v7 = mach_absolute_time();
  CFArrayRef v8 = (const __CFArray *)NLDependencyParserCopyNounPhrasesFromSentence();
  uint64_t v9 = mach_absolute_time();
  if (QPTimingNanosecondsSinceAbsoluteTime(unsigned long long)::onceToken != -1) {
    dispatch_once(&QPTimingNanosecondsSinceAbsoluteTime(unsigned long long)::onceToken, &__block_literal_global_29);
  }
  uint64_t v11 = QPTimingNanosecondsSinceAbsoluteTime(unsigned long long)::sTimebaseInfo;
  unint64_t v10 = *(unsigned int *)algn_26AA70AE4;
  if (vgFormatterLogger(void)::token != -1) {
    dispatch_once(&vgFormatterLogger(void)::token, &__block_literal_global_11);
  }
  CFDictionaryRef v12 = vgFormatterLogger(void)::log;
  if (os_log_type_enabled((os_log_t)vgFormatterLogger(void)::log, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 134217984;
    *(double *)((char *)&buf + 4) = (float)((float)((v9 - v7) * v11 / v10) / 1000000.0);
    _os_log_impl(&dword_224D85000, v12, OS_LOG_TYPE_DEFAULT, "DP parsed in %.1fms", (uint8_t *)&buf, 0xCu);
  }
  CFRange v13 = (uint64_t *)a2[1];
  v61[0] = *a2;
  v61[1] = (CFStringRef *)v13;
  if (v13) {
    atomic_fetch_add_explicit(v13 + 1, 1uLL, memory_order_relaxed);
  }
  MergedDepParserPeopleEntities = QP::GPVisualGenerationFormatterCreateMergedDepParserPeopleEntities(v61, v8, *(QP **)(*(void *)(a1 + 88) + 448));
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v13);
  }
  if (v8) {
    CFRelease(v8);
  }
  if (MergedDepParserPeopleEntities)
  {
    if (CFArrayGetCount(MergedDepParserPeopleEntities) <= 0)
    {
      CFRelease(MergedDepParserPeopleEntities);
    }
    else
    {
      CFIndex v15 = 0;
      uint64_t v16 = 0;
      do
      {
        CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(MergedDepParserPeopleEntities, v15);
        CFArrayRef v18 = ValueAtIndex;
        if (ValueAtIndex)
        {
          if (CFArrayGetCount(ValueAtIndex) >= 3)
          {
            CFNumberRef v19 = (const __CFNumber *)CFArrayGetValueAtIndex(v18, 0);
            CFNumberRef v20 = (const __CFNumber *)CFArrayGetValueAtIndex(v18, 1);
            CFStringRef v21 = CFArrayGetValueAtIndex(v18, 2);
            CFIndex v59 = 0;
            CFAttributedStringRef valuePtr = 0;
            CFNumberGetValue(v19, kCFNumberCFIndexType, &valuePtr);
            CFNumberGetValue(v20, kCFNumberCFIndexType, &v59);
            if (v19)
            {
              if (v20 && v21)
              {
                CFIndex v22 = v59;
                CFAttributedStringRef v23 = valuePtr;
                uint64_t v55 = 0;
                uint64_t v56 = &v55;
                uint64_t v57 = 0x2000000000;
                char v58 = 0;
                uint64_t v51 = 0;
                uint64_t v52 = &v51;
                uint64_t v53 = 0x2000000000;
                uint64_t v54 = 0;
                *(void *)&long long buf = 0;
                *((void *)&buf + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = &buf;
                uint64_t v72 = 0x3802000000;
                id v73 = __Block_byref_object_copy__9;
                uint64_t v74 = __Block_byref_object_dispose__9;
                long long v75 = xmmword_224E1E2D0;
                int v24 = a2;
                CFNumberRef v25 = *a2;
                v50[0] = MEMORY[0x263EF8330];
                v50[1] = 0x40000000;
                void v50[2] = ___ZN2QP25VisualGenerationFormatter8setParseENSt3__110shared_ptrINS_5ParseEEE_block_invoke;
                v50[3] = &unk_264705DE8;
                v50[8] = valuePtr;
                v50[9] = v59;
                CFStringRef v26 = v6;
                v50[10] = v6;
                uint8_t v50[4] = &v51;
                v50[5] = &buf;
                v50[6] = &v55;
                v50[7] = a1;
                QP::Parse::enumerateParseAttributes((uint64_t)v25, (uint64_t)v50);
                long long v49 = xmmword_224E1E2D0;
                v77.CFIndex length = (CFIndex)&v49;
                v77.CFIndex location = v22;
                CFStringRef v28 = QP::QPVisualGenerationFormatterSafetyRiskInRange(*(QP **)(*(void *)(a1 + 88) + 448), v23, v77, v27);
                CFStringRef v29 = v28;
                if (v28)
                {
                  if (CFStringGetLength(v28))
                  {
                    v78.CFIndex location = (CFIndex)v23;
                    v78.CFIndex length = v22;
                    QP::Formatter::setParseAttribute((QP::Formatter *)a1, kQPParseAttributeSafetyRiskTypeKey, v29, v78);
                    uint64_t v30 = *((void *)&buf + 1);
                    uint64_t v31 = *(void *)(*((void *)&buf + 1) + 40);
                    if (v31 != -1)
                    {
                      CFIndex v32 = *(void *)(*((void *)&buf + 1) + 48);
                      uint64_t v33 = *(void *)(*((void *)&buf + 1) + 40);
                      CFIndex v34 = v32;
                      if ((void)v49 != -1)
                      {
                        if (v31 >= (uint64_t)v49) {
                          uint64_t v33 = v49;
                        }
                        else {
                          uint64_t v33 = *(void *)(*((void *)&buf + 1) + 40);
                        }
                        CFIndex v35 = *((void *)&v49 + 1) + v49;
                        if (v32 + v31 > *((void *)&v49 + 1) + (void)v49) {
                          CFIndex v35 = v32 + v31;
                        }
                        CFIndex v34 = v35 - v33;
                      }
                      if ((uint64_t)v23 <= v33) {
                        CFAttributedStringRef v36 = (const __CFAttributedString *)v33;
                      }
                      else {
                        CFAttributedStringRef v36 = v23;
                      }
                      CFRange v37 = (char *)(v34 + v33);
                      if ((uint64_t)((char *)v23 + v22) < (uint64_t)v37) {
                        CFRange v37 = (char *)v23 + v22;
                      }
                      BOOL v38 = (uint64_t)v37 <= (uint64_t)v36;
                      int64_t v39 = v37 - (char *)v36;
                      if (v38) {
                        int64_t v39 = 0;
                      }
                      if (v38) {
                        uint64_t v40 = -1;
                      }
                      else {
                        uint64_t v40 = (uint64_t)v36;
                      }
                      *(void *)(*((void *)&buf + 1) + 4std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = v40;
                      *(void *)(v30 + 48) = v39;
                      if (v31 != v40 || v32 != v39)
                      {
                        if (vgFormatterLogger(void)::token != -1) {
                          dispatch_once(&vgFormatterLogger(void)::token, &__block_literal_global_11);
                        }
                        log = vgFormatterLogger(void)::log;
                        if (os_log_type_enabled((os_log_t)vgFormatterLogger(void)::log, OS_LOG_TYPE_DEFAULT))
                        {
                          uint64_t v42 = *(void *)(*((void *)&buf + 1) + 40);
                          uint64_t v41 = *(void *)(*((void *)&buf + 1) + 48);
                          *(_DWORD *)CFTypeRef v64 = 134218752;
                          *(void *)&v64[4] = v31;
                          __int16 v65 = 2048;
                          CFIndex v66 = v32;
                          __int16 v67 = 2048;
                          uint64_t v68 = v42;
                          __int16 v69 = 2048;
                          uint64_t v70 = v41;
                          _os_log_impl(&dword_224D85000, log, OS_LOG_TYPE_DEFAULT, "Modified refined person range for NamedEntity due to annotation. Was (%ld, %ld) now (%ld, %ld)", v64, 0x2Au);
                        }
                      }
                    }
                  }
                }
                if (v52[3] || *((unsigned char *)v56 + 24))
                {
                  CFStringRef v6 = v26;
                  if (*(void *)(*((void *)&buf + 1) + 40) == -1)
                  {
                    a2 = v24;
                    if (vgFormatterLogger(void)::token != -1) {
                      dispatch_once(&vgFormatterLogger(void)::token, &__block_literal_global_11);
                    }
                    uint64_t v43 = vgFormatterLogger(void)::log;
                    if (os_log_type_enabled((os_log_t)vgFormatterLogger(void)::log, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)CFTypeRef v64 = 134218240;
                      *(void *)&v64[4] = v23;
                      __int16 v65 = 2048;
                      CFIndex v66 = v22;
                      _os_log_impl(&dword_224D85000, v43, OS_LOG_TYPE_DEFAULT, "Missing a refined person range for NamedEntity at (%ld, %ld), using original range", v64, 0x16u);
                    }
                  }
                  else
                  {
                    CFIndex v22 = *(void *)(*((void *)&buf + 1) + 48);
                    CFAttributedStringRef v23 = *(const __CFAttributedString **)(*((void *)&buf + 1) + 40);
                    a2 = v24;
                  }
                  v79.CFIndex location = (CFIndex)v23;
                  v79.CFIndex length = v22;
                  QP::Formatter::setParseAttribute((QP::Formatter *)a1, kQPParseAttributeEntityTypeKey, @"NamedEntity", v79);
                  if (!*((unsigned char *)v56 + 24) && CFArrayGetCount((CFArrayRef)v52[3]))
                  {
                    v80.CFIndex location = (CFIndex)v23;
                    v80.CFIndex length = v22;
                    QP::Formatter::setParseAttribute((QP::Formatter *)a1, kQPParseAttributeValueNamedEntitiesKey, (CFTypeRef)v52[3], v80);
                  }
                }
                else
                {
                  v81.CFIndex location = (CFIndex)v23;
                  v81.CFIndex length = v22;
                  QP::Formatter::setParseAttribute((QP::Formatter *)a1, kQPParseAttributeEntityTypeKey, @"GenericEntity", v81);
                  CFStringRef v6 = v26;
                  a2 = v24;
                }
                CFStringRef v44 = (const void *)v52[3];
                if (v44) {
                  CFRelease(v44);
                }
                ++v16;
                _Block_object_dispose(&buf, 8);
                _Block_object_dispose(&v51, 8);
                _Block_object_dispose(&v55, 8);
              }
            }
          }
        }
        ++v15;
      }
      while (CFArrayGetCount(MergedDepParserPeopleEntities) > v15);
      CFRelease(MergedDepParserPeopleEntities);
      if (v16)
      {
        *(void *)&long long buf = 3;
        CFNumberRef v45 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberIntType, &buf);
        *(void *)CFTypeRef v64 = v45;
        QP::Formatter::setResultValue((QP::Formatter *)a1, kQPParseResultConfidenceKey, v45);
        if (v45) {
          CFRelease(v45);
        }
      }
    }
  }
  return v48;
}

void sub_224DF19F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

__n128 __Block_byref_object_copy__9(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 4std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = result;
  return result;
}

void ___ZN2QP25VisualGenerationFormatter8setParseENSt3__110shared_ptrINS_5ParseEEE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  CFIndex v3 = *(void *)(a1 + 64);
  uint64_t v4 = *a2;
  CFIndex v5 = *(void *)(*a2 + 16);
  uint64_t v6 = *(void *)(v4 + 24);
  if (v3 <= v5) {
    CFIndex v7 = v5;
  }
  else {
    CFIndex v7 = *(void *)(a1 + 64);
  }
  CFIndex v8 = *(void *)(a1 + 72) + v3;
  if (v8 >= v6 + v5) {
    CFIndex v8 = v6 + v5;
  }
  if (v8 <= v7) {
    uint64_t v9 = -1;
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9 != -1)
  {
    uint64_t v11 = *(QP::VisualGenerationFormatter **)(a1 + 56);
    if (v6 == 1)
    {
      UniChar CharacterAtIndex = CFStringGetCharacterAtIndex(*(CFStringRef *)(a1 + 80), v5);
      CFCharacterSetRef Predefined = CFCharacterSetGetPredefined(kCFCharacterSetPunctuation);
      if (CFCharacterSetIsCharacterMember(Predefined, CharacterAtIndex)) {
        return;
      }
      uint64_t v4 = *a2;
    }
    if (*(void *)(v4 + 128) != *(void *)(v4 + 120))
    {
      *(void *)long long buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&uint8_t buf[16] = 0x3802000000;
      long long v49 = __Block_byref_object_copy__4_0;
      uint64_t v51 = 0;
      uint64_t v52 = 0;
      CFStringRef v50 = __Block_byref_object_dispose__5_0;
      v47[0] = MEMORY[0x263EF8330];
      v47[1] = 0x40000000;
      v47[2] = ___ZN2QP25VisualGenerationFormatter8setParseENSt3__110shared_ptrINS_5ParseEEE_block_invoke_6;
      void v47[3] = &unk_264705DC0;
      v47[4] = buf;
      QP::ParseAttribute::enumerateAttributes(v4, (uint64_t)v47);
      uint64_t v15 = *(void *)(*(void *)&buf[8] + 40);
      uint64_t v14 = *(void *)(*(void *)&buf[8] + 48);
      if (v14) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v16 = (std::__shared_weak_count *)a2[1];
      *a2 = v15;
      a2[1] = v14;
      if (v16) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
      _Block_object_dispose(buf, 8);
      if (v52) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v52);
      }
      uint64_t v4 = *a2;
    }
    uint64_t v17 = *(unsigned __int8 *)(v4 + 71);
    int v18 = (char)v17;
    if ((v17 & 0x80u) != 0) {
      uint64_t v17 = *(void *)(v4 + 56);
    }
    if (v17 != 17
      || (v18 >= 0 ? (uint64_t v19 = v4 + 48) : (uint64_t v19 = *(void *)(v4 + 48)),
          (uint64_t v20 = *(void *)v19,
           uint64_t v21 = *(void *)(v19 + 8),
           int v22 = *(unsigned __int8 *)(v19 + 16),
           v20 == 0x6E756F724750516BLL)
        ? (BOOL v23 = v21 == 0x6F73726550646564)
        : (BOOL v23 = 0),
          v23 ? (BOOL v24 = v22 == 110) : (BOOL v24 = 0),
          !v24))
    {
      if ((*(_DWORD *)(v4 + 76) - 2) <= 2)
      {
        if (QP::VisualGenerationFormatter::shouldSuppressUnknownNamedEntityInRange(v11, *(CFRange *)(v4 + 16)))
        {
          if (vgFormatterLogger(void)::token != -1) {
            dispatch_once(&vgFormatterLogger(void)::token, &__block_literal_global_11);
          }
          CFNumberRef v25 = vgFormatterLogger(void)::log;
          if (os_log_type_enabled((os_log_t)vgFormatterLogger(void)::log, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v27 = *(void *)(*a2 + 16);
            uint64_t v26 = *(void *)(*a2 + 24);
            *(_DWORD *)long long buf = 134218240;
            *(void *)&uint8_t buf[4] = v27;
            *(_WORD *)&unsigned char buf[12] = 2048;
            *(void *)&buf[14] = v26;
            _os_log_impl(&dword_224D85000, v25, OS_LOG_TYPE_DEFAULT, "Ignoring prediction for unknown person at (%ld, %ld)", buf, 0x16u);
          }
        }
        else
        {
          uint64_t v28 = *(void *)(*(void *)(a1 + 40) + 8);
          uint64_t v29 = *(void *)(v28 + 40);
          uint64_t v30 = *(void *)(*a2 + 16);
          uint64_t v31 = *(void *)(*a2 + 24);
          if (v29 != -1 && *(void *)(v28 + 48) != 0)
          {
            if (v31) {
              v31 += v30 - v29;
            }
            else {
              uint64_t v31 = *(void *)(v28 + 48);
            }
            if (v30 == -1) {
              uint64_t v31 = *(void *)(v28 + 48);
            }
            uint64_t v30 = *(void *)(v28 + 40);
          }
          *(void *)(v28 + 4std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = v30;
          *(void *)(v28 + 48) = v31;
          *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
        }
      }
      return;
    }
    uint64_t v33 = *(std::__shared_weak_count **)(v4 + 112);
    if (v33)
    {
      uint64_t v33 = std::__shared_weak_count::lock(v33);
      CFIndex v34 = v33;
      if (v33)
      {
        uint64_t v35 = *(void *)(v4 + 104);
        if (*(_WORD *)(v35 + 88) != 16)
        {
LABEL_75:
          std::__shared_weak_count::__release_shared[abi:ne180100](v34);
          return;
        }
        char v36 = 0;
        atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v45 = v35;
        CFStringRef v46 = v33;
        atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
        goto LABEL_59;
      }
      if (MEMORY[0x58] != 16) {
        goto LABEL_74;
      }
    }
    else if (MEMORY[0x58] != 16)
    {
      return;
    }
    CFIndex v34 = 0;
    uint64_t v45 = 0;
    CFStringRef v46 = 0;
    char v36 = 1;
LABEL_59:
    CFRange v37 = QP::VisualGenerationFormatter::createEntities((uint64_t)v33, &v45);
    CFArrayRef v38 = v37;
    if ((v36 & 1) == 0) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v34);
    }
    uint64_t v39 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v40 = *(const void **)(v39 + 24);
    if (v40)
    {
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = QP::VisualGenerationFormatter::createEntitiesWithIntersection(v37, *(const __CFArray **)(v39 + 24), v38);
      CFRelease(v38);
      CFRelease(v40);
    }
    else
    {
      *(void *)(v39 + 24) = v38;
    }
    uint64_t v41 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v42 = *(void *)(v41 + 40);
    uint64_t v43 = *(void *)(*a2 + 16);
    uint64_t v44 = *(void *)(*a2 + 24);
    if (v42 != -1 && *(void *)(v41 + 48))
    {
      if (v44) {
        v44 += v43 - v42;
      }
      else {
        uint64_t v44 = *(void *)(v41 + 48);
      }
      if (v43 == -1) {
        uint64_t v44 = *(void *)(v41 + 48);
      }
      uint64_t v43 = *(void *)(v41 + 40);
    }
    *(void *)(v41 + 4std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = v43;
    *(void *)(v41 + 48) = v44;
    if ((v36 & 1) == 0) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v34);
    }
LABEL_74:
    if (!v34) {
      return;
    }
    goto LABEL_75;
  }
}

void sub_224DF1EC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if ((v24 & 1) == 0)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  _Unwind_Resume(exception_object);
}

__n128 __Block_byref_object_copy__4_0(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 4std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = result;
  *(void *)(a2 + 4std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = 0;
  *(void *)(a2 + 48) = 0;
  return result;
}

void __Block_byref_object_dispose__5_0(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void ___ZN2QP25VisualGenerationFormatter8setParseENSt3__110shared_ptrINS_5ParseEEE_block_invoke_6(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v3 = *(void *)(v2 + 40);
  uint64_t v4 = *a2;
  if (!v3) {
    goto LABEL_28;
  }
  uint64_t v5 = *(unsigned __int8 *)(v4 + 71);
  int v6 = (char)v5;
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(v4 + 56);
  }
  if (v5 == 17)
  {
    uint64_t v7 = v6 >= 0 ? v4 + 48 : *(void *)(v4 + 48);
    uint64_t v8 = *(void *)v7;
    uint64_t v9 = *(void *)(v7 + 8);
    int v10 = *(unsigned __int8 *)(v7 + 16);
    BOOL v11 = v8 == 0x6E756F724750516BLL && v9 == 0x6F73726550646564;
    if (v11 && v10 == 110)
    {
      uint64_t v13 = *(unsigned __int8 *)(v3 + 71);
      int v14 = (char)v13;
      if ((v13 & 0x80u) != 0) {
        uint64_t v13 = *(void *)(v3 + 56);
      }
      if (v13 != 17) {
        goto LABEL_28;
      }
      uint64_t v17 = *(uint64_t **)(v3 + 48);
      uint64_t v15 = (uint64_t *)(v3 + 48);
      uint64_t v16 = v17;
      if (v14 < 0) {
        uint64_t v15 = v16;
      }
      uint64_t v18 = *v15;
      uint64_t v19 = v15[1];
      int v20 = *((unsigned __int8 *)v15 + 16);
      BOOL v21 = v18 == 0x6E756F724750516BLL && v19 == 0x6F73726550646564;
      if (!v21 || v20 != 110)
      {
LABEL_28:
        uint64_t v23 = a2[1];
        if (v23) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
        }
        char v24 = *(std::__shared_weak_count **)(v2 + 48);
        *(void *)(v2 + 4std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = v4;
        *(void *)(v2 + 48) = v23;
        if (v24) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v24);
        }
      }
    }
  }
}

const __CFString *QP::QPVisualGenerationFormatterSafetyRiskInRange(QP *this, const __CFAttributedString *a2, CFRange a3, CFRange *a4)
{
  if (!this) {
    return 0;
  }
  CFIndex length = (CFRange *)a3.length;
  uint64_t location = a3.location;
  CFStringRef v8 = 0;
  if (CFAttributedStringGetLength(this))
  {
    if (location)
    {
      CFStringRef v8 = 0;
      if ((uint64_t)a2 + location <= CFAttributedStringGetLength(this) && location >= 1)
      {
        CFAttributedStringRef v9 = a2;
        while (1)
        {
          if (CFAttributedStringGetAttributes(this, (CFIndex)v9, 0))
          {
            v12.uint64_t location = (CFIndex)a2;
            v12.CFIndex length = location;
            CFStringRef AttributeAndLongestEffectiveRange = (const __CFString *)CFAttributedStringGetAttributeAndLongestEffectiveRange(this, (CFIndex)v9, kQPInputAttributeAnnotationKey, v12, length);
            if (AttributeAndLongestEffectiveRange)
            {
              CFStringRef v8 = AttributeAndLongestEffectiveRange;
              if (CFStringsAreEqual(@"COPYRIGHTED", AttributeAndLongestEffectiveRange)
                || CFStringsAreEqual(@"PUBLIC_FIGURE", v8)
                || CFStringsAreEqual(@"FICTIONAL_CHARACTER", v8))
              {
                break;
              }
            }
          }
          CFAttributedStringRef v9 = (const __CFAttributedString *)((char *)v9 + 1);
          if ((uint64_t)v9 >= (uint64_t)((char *)a2 + location)) {
            return 0;
          }
        }
      }
    }
  }
  return v8;
}

void QP::VisualGenerationFormatter::~VisualGenerationFormatter(const void **this)
{
  QP::VisualGenerationFormatter::~VisualGenerationFormatter(this);
  JUMPOUT(0x22A623E20);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *this = &unk_26D8314E0;
  nlp::CFScopedPtr<void *>::reset(this + 13, 0);
  uint64_t v2 = (std::__shared_weak_count *)this[12];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  QP::Formatter::~Formatter((QP::Formatter *)this);
}

os_log_t ___ZL17vgFormatterLoggerv_block_invoke()
{
  uint64_t v0 = _nlpLoggingSubsystem();
  os_log_t result = os_log_create(v0, "VisualGenerationFormatter");
  vgFormatterLogger(void)::log = (uint64_t)result;
  return result;
}

void QP::addPersonEntitiesInGapRangeIfNeeded(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a4 >= 2)
  {
    uint64_t v14 = 0;
    uint64_t v15 = &v14;
    uint64_t v16 = 0x3802000000;
    uint64_t v17 = __Block_byref_object_copy__9;
    uint64_t v18 = __Block_byref_object_dispose__9;
    uint64_t v19 = a3;
    uint64_t v20 = a4;
    uint64_t v6 = *a1;
    uint64_t v7 = (std::__shared_weak_count *)a1[1];
    if (v7)
    {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      a3 = v15[5];
      a4 = v15[6];
      uint64_t v9 = *a1;
      CFStringRef v8 = (std::__shared_weak_count *)a1[1];
    }
    else
    {
      CFStringRef v8 = 0;
      uint64_t v9 = v6;
    }
    v10[0] = MEMORY[0x263EF8330];
    v10[1] = 1174405120;
    CFIndex v10[2] = ___ZN2QPL35addPersonEntitiesInGapRangeIfNeededENSt3__110shared_ptrINS_5ParseEEEPK20__CFAttributedStringP9__CFArray7CFRangePl_block_invoke;
    void v10[3] = &unk_26D831570;
    v10[4] = &v14;
    v10[5] = v9;
    BOOL v11 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v12 = a2;
    uint64_t v13 = a5;
    v22[0] = 0;
    v22[1] = v22;
    v22[2] = 0x3802000000;
    void v22[3] = __Block_byref_object_copy__9;
    v22[4] = __Block_byref_object_dispose__9;
    v22[5] = a3;
    void v22[6] = a4;
    v21[0] = MEMORY[0x263EF8330];
    v21[1] = 0x40000000;
    void v21[2] = ___ZN2QPL32enumeratePersonAttributesInRangeENSt3__110shared_ptrINS_5ParseEEE7CFRangeU13block_pointerFvNS1_INS_14ParseAttributeEEEE_block_invoke;
    uint64_t v21[3] = &unk_264705E58;
    int v21[4] = v10;
    void v21[5] = v22;
    v21[6] = a3;
    v21[7] = a4;
    QP::Parse::enumerateParseAttributes(v6, (uint64_t)v21);
    _Block_object_dispose(v22, 8);
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    _Block_object_dispose(&v14, 8);
  }
}

void sub_224DF2370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::__shared_weak_count *a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose((const void *)(v12 - 88), 8);
  if (a9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a9);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__CFArray *QP::createEntityInfo(const __CFString *this, const __CFString *a2, CFRange a3)
{
  valuePtr.uint64_t location = (CFIndex)a2;
  valuePtr.CFIndex length = a3.location;
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  CFNumberRef v6 = CFNumberCreate(v4, kCFNumberIntType, &valuePtr);
  CFArrayAppendValue(Mutable, v6);
  CFNumberRef v7 = CFNumberCreate(v4, kCFNumberIntType, &valuePtr.length);
  CFArrayAppendValue(Mutable, v7);
  CFStringRef v8 = CFStringCreateWithSubstring(v4, this, valuePtr);
  CFArrayAppendValue(Mutable, v8);
  if (v8) {
    CFRelease(v8);
  }
  if (v7) {
    CFRelease(v7);
  }
  if (v6) {
    CFRelease(v6);
  }
  return Mutable;
}

void sub_224DF24B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, const void *);
  va_copy(va2, va1);
  uint64_t v5 = va_arg(va2, const void *);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  nlp::CFScopedPtr<__CFNumber const*>::reset((const void **)va1, 0);
  nlp::CFScopedPtr<__CFNumber const*>::reset((const void **)va2, 0);
  _Unwind_Resume(a1);
}

void ___ZN2QPL35addPersonEntitiesInGapRangeIfNeededENSt3__110shared_ptrINS_5ParseEEEPK20__CFAttributedStringP9__CFArray7CFRangePl_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (*(uint64_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 48) >= 2)
  {
    if (vgFormatterLogger(void)::token != -1) {
      dispatch_once(&vgFormatterLogger(void)::token, &__block_literal_global_11);
    }
    CFAllocatorRef v4 = vgFormatterLogger(void)::log;
    if (os_log_type_enabled((os_log_t)vgFormatterLogger(void)::log, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(*(void *)a2 + 16);
      uint64_t v6 = *(void *)(*(void *)a2 + 24);
      int v12 = 134218240;
      uint64_t v13 = v7;
      __int16 v14 = 2048;
      uint64_t v15 = v6;
      _os_log_impl(&dword_224D85000, v4, OS_LOG_TYPE_DEFAULT, "Found QU person prediction at (%ld, %ld) outside of any DependencyParser entities", (uint8_t *)&v12, 0x16u);
    }
    v5.uint64_t location = *(void *)(*(void *)a2 + 24);
    EntityInfo = QP::createEntityInfo(**(const __CFString ***)(a1 + 40), *(const __CFString **)(*(void *)a2 + 16), v5);
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 56), EntityInfo);
    uint64_t v9 = *(void *)(*(void *)a2 + 24) + *(void *)(*(void *)a2 + 16);
    **(void **)(a1 + 64) = v9;
    uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v11 = *(void *)(v10 + 40) - v9 + *(void *)(v10 + 48);
    *(void *)(v10 + 4std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = v9;
    *(void *)(v10 + 48) = v11;
    CFRelease(EntityInfo);
  }
}

uint64_t __copy_helper_block_e8_40c37_ZTSNSt3__110shared_ptrIN2QP5ParseEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 4std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c37_ZTSNSt3__110shared_ptrIN2QP5ParseEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void ___ZN2QPL32enumeratePersonAttributesInRangeENSt3__110shared_ptrINS_5ParseEEE7CFRangeU13block_pointerFvNS1_INS_14ParseAttributeEEEE_block_invoke(void *a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1[5] + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  uint64_t v5 = *a2;
  uint64_t v6 = *(void *)(*a2 + 16);
  uint64_t v7 = *(void *)(v3 + 48) + v4;
  if (v4 <= v6 && v7 >= *(void *)(*a2 + 24) + v6)
  {
    if (*(void *)(v5 + 128) != *(void *)(v5 + 120))
    {
      uint64_t v29 = 0;
      uint64_t v30 = &v29;
      uint64_t v31 = 0x3802000000;
      CFIndex v32 = __Block_byref_object_copy__4_0;
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      uint64_t v33 = __Block_byref_object_dispose__5_0;
      v28[0] = MEMORY[0x263EF8330];
      v28[1] = 0x40000000;
      uint64_t v28[2] = ___ZN2QPL32enumeratePersonAttributesInRangeENSt3__110shared_ptrINS_5ParseEEE7CFRangeU13block_pointerFvNS1_INS_14ParseAttributeEEEE_block_invoke_2;
      v28[3] = &unk_264705E30;
      void v28[4] = &v29;
      QP::ParseAttribute::enumerateAttributes(v5, (uint64_t)v28);
      uint64_t v11 = v30[5];
      uint64_t v10 = v30[6];
      if (v10) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
      }
      int v12 = (std::__shared_weak_count *)a2[1];
      *a2 = v11;
      a2[1] = v10;
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
      _Block_object_dispose(&v29, 8);
      if (v35) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v35);
      }
      uint64_t v5 = *a2;
    }
    uint64_t v13 = *(unsigned __int8 *)(v5 + 71);
    int v14 = (char)v13;
    if ((v13 & 0x80u) != 0) {
      uint64_t v13 = *(void *)(v5 + 56);
    }
    if (v13 == 17
      && (v14 >= 0 ? (uint64_t v15 = v5 + 48) : (uint64_t v15 = *(void *)(v5 + 48)),
          (uint64_t v16 = *(void *)v15,
           uint64_t v17 = *(void *)(v15 + 8),
           int v18 = *(unsigned __int8 *)(v15 + 16),
           v16 == 0x6E756F724750516BLL)
        ? (BOOL v19 = v17 == 0x6F73726550646564)
        : (BOOL v19 = 0),
          v19 ? (BOOL v20 = v18 == 110) : (BOOL v20 = 0),
          v20)
      || (*(_DWORD *)(v5 + 76) - 2) <= 2)
    {
      uint64_t v21 = a1[4];
      int v22 = (std::__shared_weak_count *)a2[1];
      uint64_t v26 = v5;
      uint64_t v27 = v22;
      if (v22) {
        atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, uint64_t *))(v21 + 16))(v21, &v26);
      if (v27) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v27);
      }
      uint64_t v23 = *(void *)(*a2 + 24) + *(void *)(*a2 + 16);
      uint64_t v24 = a1[6] - v23 + a1[7];
      uint64_t v25 = *(void *)(a1[5] + 8);
      *(void *)(v25 + 4std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = v23;
      *(void *)(v25 + 48) = v24;
    }
  }
}

void sub_224DF2884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_224DF289C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (!a22) {
    JUMPOUT(0x224DF2894);
  }
  JUMPOUT(0x224DF2890);
}

void ___ZN2QPL32enumeratePersonAttributesInRangeENSt3__110shared_ptrINS_5ParseEEE7CFRangeU13block_pointerFvNS1_INS_14ParseAttributeEEEE_block_invoke_2(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v3 = *(void *)(v2 + 40);
  uint64_t v4 = *a2;
  if (!v3) {
    goto LABEL_28;
  }
  uint64_t v5 = *(unsigned __int8 *)(v4 + 71);
  int v6 = (char)v5;
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(v4 + 56);
  }
  if (v5 == 17)
  {
    uint64_t v7 = v6 >= 0 ? v4 + 48 : *(void *)(v4 + 48);
    uint64_t v8 = *(void *)v7;
    uint64_t v9 = *(void *)(v7 + 8);
    int v10 = *(unsigned __int8 *)(v7 + 16);
    BOOL v11 = v8 == 0x6E756F724750516BLL && v9 == 0x6F73726550646564;
    if (v11 && v10 == 110)
    {
      uint64_t v13 = *(unsigned __int8 *)(v3 + 71);
      int v14 = (char)v13;
      if ((v13 & 0x80u) != 0) {
        uint64_t v13 = *(void *)(v3 + 56);
      }
      if (v13 != 17) {
        goto LABEL_28;
      }
      uint64_t v17 = *(uint64_t **)(v3 + 48);
      uint64_t v15 = (uint64_t *)(v3 + 48);
      uint64_t v16 = v17;
      if (v14 < 0) {
        uint64_t v15 = v16;
      }
      uint64_t v18 = *v15;
      uint64_t v19 = v15[1];
      int v20 = *((unsigned __int8 *)v15 + 16);
      BOOL v21 = v18 == 0x6E756F724750516BLL && v19 == 0x6F73726550646564;
      if (!v21 || v20 != 110)
      {
LABEL_28:
        uint64_t v23 = a2[1];
        if (v23) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v24 = *(std::__shared_weak_count **)(v2 + 48);
        *(void *)(v2 + 4std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = v4;
        *(void *)(v2 + 48) = v23;
        if (v24) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v24);
        }
      }
    }
  }
}

void std::vector<std::string>::__throw_out_of_range[abi:ne180100]()
{
}

uint64_t ___Z36QPTimingNanosecondsSinceAbsoluteTimey_block_invoke_1()
{
  return mach_timebase_info((mach_timebase_info_t)&QPTimingNanosecondsSinceAbsoluteTime(unsigned long long)::sTimebaseInfo);
}

void nlp::CFScopedPtr<void *>::reset(const void **a1, const void *a2)
{
  uint64_t v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

uint64_t _CFInit_QueryParserWrapper(uint64_t result)
{
  *(void *)(result + 16) = &unk_26D8315F0;
  return result;
}

uint64_t nlp::CFFinalize(uint64_t (***this)(void), const void *a2)
{
  return (*this[2])();
}

uint64_t _CFGetTypeID_QueryParserWrapper(void)
{
  {
    unk_26AA70AB8 = 0u;
    unk_26AA70AA8 = 0u;
    _CFGetTypeID_QueryParserWrapper(void)::typeID = _CFRuntimeRegisterClass();
  }
  return _CFGetTypeID_QueryParserWrapper(void)::typeID;
}

void sub_224DF2B18(_Unwind_Exception *a1)
{
}

uint64_t createQueryParserEngineWrapper(QP::QueryParserEngine *a1)
{
  CFAllocatorGetDefault();
  _CFGetTypeID_QueryParserWrapper();
  uint64_t result = _CFRuntimeCreateInstance();
  *(void *)(result + 24) = a1;
  return result;
}

__CFDictionary *QPQueryParserCopyDefaultOptionsForContext(const __CFString *Identifier)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (Identifier)
  {
    CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(v2, 0, Identifier);
    CFTypeRef cf = MutableCopy;
    CFStringLowercase(MutableCopy, 0);
    MainBundle = CFBundleGetMainBundle();
    if (!MainBundle || (Identifier = CFBundleGetIdentifier(MainBundle)) != 0) {
      CFDictionarySetValue(Mutable, kQPQueryParserOptionBundleIdentifierKey, Identifier);
    }
    if (QPQueryParserCopyDefaultOptionsForContext::onceToken != -1) {
      dispatch_once(&QPQueryParserCopyDefaultOptionsForContext::onceToken, &__block_literal_global_12);
    }
    CFDictionarySetValue(Mutable, kQPQueryParserOptionContextIdentifierKey, MutableCopy);
    if (CFStringsAreEqual(MutableCopy, @"com.apple.mail")
      || CFStringsAreEqual(MutableCopy, @"com.apple.mobilemail")
      || CFStringsAreEqual(MutableCopy, @"com.apple.email.maild")
      || CFStringsAreEqual(MutableCopy, @"com.apple.email.SearchIndexer"))
    {
      int valuePtr = 1;
      CFNumberRef v6 = CFNumberCreate(v2, kCFNumberSInt32Type, &valuePtr);
      CFNumberRef v24 = v6;
      CFDictionarySetValue(Mutable, kQPQueryParserOptionFormatKey, v6);
      CFDictionarySetValue(Mutable, kQPQueryParserOptionContextIdentifierKey, @"com.apple.mail");
      uint64_t v7 = (const void *)*MEMORY[0x263EFFB40];
      CFDictionarySetValue(Mutable, kQPQueryParserOptionResolveDatesInPastKey, (const void *)*MEMORY[0x263EFFB40]);
      uint64_t v8 = (const void *)*MEMORY[0x263EFFB38];
      if (QPQueryParserCopyDefaultOptionsForContext::enableU2Expansion) {
        uint64_t v9 = v7;
      }
      else {
        uint64_t v9 = (const void *)*MEMORY[0x263EFFB38];
      }
      CFDictionarySetValue(Mutable, kQPQueryParserOptionU2EnabledKey, v9);
      CFDictionarySetValue(Mutable, kQPQueryParserOptionEmbeddingsSafetyDisabledKey, v8);
      CFDictionarySetValue(Mutable, @"loadAnnotations", v7);
      if (v6) {
        CFRelease(v6);
      }
    }
    else
    {
      if (CFStringsAreEqual(MutableCopy, @"com.apple.notes")
        || CFStringsAreEqual(MutableCopy, @"com.apple.mobilenotes"))
      {
        int valuePtr = 1;
        CFNumberRef v24 = CFNumberCreate(v2, kCFNumberSInt32Type, &valuePtr);
        CFDictionarySetValue(Mutable, kQPQueryParserOptionFormatKey, v24);
        BOOL v11 = (const void *)*MEMORY[0x263EFFB40];
        CFDictionarySetValue(Mutable, kQPQueryParserOptionIgnoreFutureDatesKey, (const void *)*MEMORY[0x263EFFB40]);
        CFDictionarySetValue(Mutable, kQPQueryParserOptionResolveDatesInPastKey, v11);
        CFDictionarySetValue(Mutable, kQPQueryParserOptionContextIdentifierKey, @"com.apple.notes");
        CFDictionarySetValue(Mutable, @"loadAnnotations", v11);
      }
      else if (CFStringsAreEqual(MutableCopy, @"com.apple.calendar") {
             || CFStringsAreEqual(MutableCopy, @"com.apple.calendarui")
      }
             || CFStringsAreEqual(MutableCopy, @"com.apple.ical")
             || CFStringsAreEqual(MutableCopy, @"com.apple.ical.calendarquerygenius")
             || CFStringsAreEqual(MutableCopy, @"com.apple.mobilecal"))
      {
        int valuePtr = 1;
        CFNumberRef v24 = CFNumberCreate(v2, kCFNumberSInt32Type, &valuePtr);
        CFDictionarySetValue(Mutable, kQPQueryParserOptionFormatKey, v24);
        CFDictionarySetValue(Mutable, kQPQueryParserOptionContextIdentifierKey, @"com.apple.calendar");
        CFDictionarySetValue(Mutable, @"loadAnnotations", (const void *)*MEMORY[0x263EFFB40]);
      }
      else if (CFStringsAreEqual(MutableCopy, @"com.apple.photos.parser"))
      {
        int valuePtr = 0;
        CFNumberRef v24 = CFNumberCreate(v2, kCFNumberSInt32Type, &valuePtr);
        CFDictionarySetValue(Mutable, kQPQueryParserOptionFormatKey, v24);
        int v12 = (const void *)*MEMORY[0x263EFFB40];
        CFDictionarySetValue(Mutable, kQPQueryParserOptionIgnoreFutureDatesKey, (const void *)*MEMORY[0x263EFFB40]);
        CFDictionarySetValue(Mutable, kQPQueryParserOptionResolveDatesInPastKey, v12);
        CFDictionarySetValue(Mutable, kQPQueryParserOptionU2EnabledKey, v12);
        CFDictionarySetValue(Mutable, kQPQueryParserOptionContextIdentifierKey, @"com.apple.photos");
      }
      else if (CFStringHasPrefix(MutableCopy, @"com.apple.photo") {
             || CFStringHasPrefix(MutableCopy, @"com.apple.mobileslideshow")
      }
             || CFStringsAreEqual(MutableCopy, @"com.apple.plphotosctl"))
      {
        int valuePtr = 1;
        CFNumberRef v24 = CFNumberCreate(v2, kCFNumberSInt32Type, &valuePtr);
        CFDictionarySetValue(Mutable, kQPQueryParserOptionFormatKey, v24);
        uint64_t v13 = (const void *)*MEMORY[0x263EFFB40];
        CFDictionarySetValue(Mutable, kQPQueryParserOptionIgnoreFutureDatesKey, (const void *)*MEMORY[0x263EFFB40]);
        CFDictionarySetValue(Mutable, kQPQueryParserOptionResolveDatesInPastKey, v13);
        CFDictionarySetValue(Mutable, kQPQueryParserOptionContextIdentifierKey, @"com.apple.photos");
        CFDictionarySetValue(Mutable, kQPQueryParserOptionIgnoreSingleYearSuggestionKey, v13);
        CFDictionarySetValue(Mutable, kQPQueryParserOptionEmbeddingsEnabledKey, v13);
        CFDictionarySetValue(Mutable, kQPQueryParserOptionU2EnabledKey, v13);
        CFDictionarySetValue(Mutable, @"useECRForPets", v13);
        CFDictionarySetValue(Mutable, @"loadAnnotations", v13);
        CFDictionarySetValue(Mutable, @"waitWithTimeout", v13);
        if (CFStringsAreEqual(Identifier, @"com.apple.plphotosctl"))
        {
          CFDictionarySetValue(Mutable, @"waitForLoad", v13);
          CFDictionarySetValue(Mutable, @"forTesting", v13);
        }
      }
      else if (CFStringsAreEqual(MutableCopy, @"com.apple.reminders.parser"))
      {
        int valuePtr = 0;
        CFNumberRef v24 = CFNumberCreate(v2, kCFNumberSInt32Type, &valuePtr);
        CFDictionarySetValue(Mutable, kQPQueryParserOptionFormatKey, v24);
        int v14 = (const void *)*MEMORY[0x263EFFB40];
        CFDictionarySetValue(Mutable, kQPQueryParserOptionIgnorePastDatesKey, (const void *)*MEMORY[0x263EFFB40]);
        CFDictionarySetValue(Mutable, kQPQueryParserOptionIgnoreRecurringDatesKey, (const void *)*MEMORY[0x263EFFB38]);
        CFDictionarySetValue(Mutable, kQPQueryParserOptionResolveDatesInFutureKey, v14);
        CFDictionarySetValue(Mutable, kQPQueryParserOptionResolveConcreteDatesKey, v14);
        CFDictionarySetValue(Mutable, @"usePartOfSpeech", v14);
        CFDictionarySetValue(Mutable, kQPQueryParserOptionBundleIdentifierKey, @"com.apple.reminders");
        CFDictionarySetValue(Mutable, @"loadAnnotations", v14);
      }
      else if (CFStringsAreEqual(MutableCopy, @"com.apple.queryparser") {
             || CFStringsAreEqual(MutableCopy, @"com.apple.query.parser")
      }
             || CFStringsAreEqual(MutableCopy, @"com.apple.query-parser")
             || CFStringsAreEqual(MutableCopy, @"com.apple.default"))
      {
        int valuePtr = 0;
        CFNumberRef v24 = CFNumberCreate(v2, kCFNumberSInt32Type, &valuePtr);
        CFDictionarySetValue(Mutable, kQPQueryParserOptionFormatKey, v24);
        CFDictionarySetValue(Mutable, kQPQueryParserOptionIgnoreRecurringDatesKey, (const void *)*MEMORY[0x263EFFB38]);
        CFDictionarySetValue(Mutable, kQPQueryParserOptionContextIdentifierKey, @"com.apple.query.parser");
      }
      else if (SPQueryKindIsSearchToolSearch(Identifier))
      {
        if (QPQueryParserCopyDefaultOptionsForContext::useLLMParseForSearchtool) {
          BOOL v15 = 1;
        }
        else {
          BOOL v15 = QPQueryParserCopyDefaultOptionsForContext::enableU2Expansion == 0;
        }
        int v16 = !v15;
        int valuePtr = 1;
        CFNumberRef v24 = CFNumberCreate(v2, kCFNumberSInt32Type, &valuePtr);
        CFDictionarySetValue(Mutable, kQPQueryParserOptionFormatKey, v24);
        uint64_t v17 = (const void *)*MEMORY[0x263EFFB40];
        CFDictionarySetValue(Mutable, kQPQueryParserOptionResolveDatesInPastKey, (const void *)*MEMORY[0x263EFFB40]);
        CFDictionarySetValue(Mutable, kQPQueryParserOptionContextIdentifierKey, @"com.apple.spotlight");
        CFDictionarySetValue(Mutable, kQPQueryParserOptionUseECRInProcessKey, v17);
        CFDictionarySetValue(Mutable, kQPQueryParserOptionSeparateEmbeddingsEnabledKey, v17);
        uint64_t v18 = (const void *)*MEMORY[0x263EFFB38];
        CFDictionarySetValue(Mutable, @"loadAnnotations", (const void *)*MEMORY[0x263EFFB38]);
        CFDictionarySetValue(Mutable, kQPQueryParserOptionEmbeddingsSafetyDisabledKey, v17);
        if (v16) {
          uint64_t v19 = v17;
        }
        else {
          uint64_t v19 = v18;
        }
        CFDictionarySetValue(Mutable, kQPQueryParserOptionU2EnabledKey, v19);
        if (QPQueryParserCopyDefaultOptionsForContext::useLLMParseForSearchtool) {
          int v20 = v17;
        }
        else {
          int v20 = v18;
        }
        CFDictionarySetValue(Mutable, kQPQueryParserOptionUseLLMParseKey, v20);
        CFDictionarySetValue(Mutable, kQPQueryParserOptionUseLexemeSubEntitiesKey, v17);
      }
      else
      {
        CFStringRef v21 = (const __CFString *)cf;
        if (CFStringsAreEqual((CFStringRef)cf, @"com.apple.spotlight")
          || CFStringsAreEqual((CFStringRef)cf, @"com.apple.searchd")
          || CFStringsAreEqual((CFStringRef)cf, @"com.apple.finder")
          || CFStringsAreEqual((CFStringRef)cf, @"com.apple.documentsapp")
          || CFStringsAreEqual((CFStringRef)cf, @"com.apple.search.framework")
          || CFStringsAreEqual((CFStringRef)cf, @"com.apple.pommesctl")
          || CFStringsAreEqual((CFStringRef)cf, @"com.apple.cslinguistics"))
        {
          int valuePtr = 1;
          CFNumberRef v24 = CFNumberCreate(v2, kCFNumberSInt32Type, &valuePtr);
          CFDictionarySetValue(Mutable, kQPQueryParserOptionFormatKey, v24);
          int v22 = (const void *)*MEMORY[0x263EFFB40];
          CFDictionarySetValue(Mutable, kQPQueryParserOptionResolveDatesInPastKey, (const void *)*MEMORY[0x263EFFB40]);
          CFDictionarySetValue(Mutable, kQPQueryParserOptionContextIdentifierKey, @"com.apple.spotlight");
          CFDictionarySetValue(Mutable, kQPQueryParserOptionUseECRInProcessKey, v22);
          CFDictionarySetValue(Mutable, @"useECRForPets", v22);
          CFDictionarySetValue(Mutable, @"loadAnnotations", v22);
          if (CFStringsAreEqual(v21, @"com.apple.pommesctl")
            || CFStringsAreEqual(v21, @"com.apple.cslinguistics"))
          {
            CFDictionarySetValue(Mutable, kQPQueryParserOptionIgnoreFutureDatesKey, v22);
            CFDictionarySetValue(Mutable, kQPQueryParserOptionIgnoreSingleYearSuggestionKey, v22);
            CFDictionarySetValue(Mutable, (const void *)kQPQueryParserOptionForTestingKey, v22);
            CFDictionarySetValue(Mutable, (const void *)kQPQueryParserOptionWaitForLoadKey, v22);
            CFDictionarySetValue(Mutable, kQPQueryParserOptionEmbeddingsSafetyDisabledKey, v22);
            CFDictionarySetValue(Mutable, @"loadAnnotations", (const void *)*MEMORY[0x263EFFB38]);
          }
          if (CFStringsAreEqual(v21, @"com.apple.pommesctl")) {
            CFDictionarySetValue(Mutable, kQPQueryParserOptionU2EnabledKey, v22);
          }
          if (CFStringsAreEqual(Identifier, @"com.apple.Spotlight")
            || CFStringsAreEqual(Identifier, @"com.apple.Search.framework"))
          {
            CFDictionarySetValue(Mutable, kQPQueryParserOptionSeparateEmbeddingsEnabledKey, v22);
            CFDictionarySetValue(Mutable, kQPQueryParserOptionU2EnabledKey, v22);
          }
        }
        else if (CFStringsAreEqual((CFStringRef)cf, @"com.apple.visual-generation"))
        {
          CFDictionarySetValue(Mutable, kQPQueryParserOptionContextIdentifierKey, @"com.apple.visual-generation");
          uint64_t v23 = (const void *)*MEMORY[0x263EFFB40];
          CFDictionarySetValue(Mutable, kQPQueryParserOptionU2EnabledKey, (const void *)*MEMORY[0x263EFFB40]);
          CFDictionarySetValue(Mutable, kQPQueryParserOptionUseECRInProcessKey, v23);
          CFDictionarySetValue(Mutable, kQPQueryParserOptionUseECRForSpansKey, v23);
          CFDictionarySetValue(Mutable, @"useECRForInferredNames", v23);
          CFDictionarySetValue(Mutable, @"loadAnnotations", v23);
          CFNumberRef v24 = CFNumberCreate(v2, kCFNumberSInt32Type, &kVisualGenerationEmbeddingTimeoutMs);
          CFDictionarySetValue(Mutable, @"kMDQueryOptionEmbeddingGenerationTimeout", v24);
        }
        else
        {
          int valuePtr = 1;
          CFNumberRef v24 = CFNumberCreate(v2, kCFNumberSInt32Type, &valuePtr);
          CFDictionarySetValue(Mutable, kQPQueryParserOptionFormatKey, v24);
          CFDictionarySetValue(Mutable, kQPQueryParserOptionResolveDatesInPastKey, (const void *)*MEMORY[0x263EFFB40]);
          CFDictionarySetValue(Mutable, kQPQueryParserOptionContextIdentifierKey, @"com.apple.query.search");
        }
      }
      nlp::CFScopedPtr<__CFNumber const*>::reset((const void **)&v24, 0);
    }
    if (cf) {
      CFRelease(cf);
    }
  }
  return Mutable;
}

void sub_224DF376C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  nlp::CFScopedPtr<__CFString *>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t __QPQueryParserCopyDefaultOptionsForContext_block_invoke()
{
  QPQueryParserCopyDefaultOptionsForContext::enableU2ExpansioCFIndex n = _os_feature_enabled_impl();
  uint64_t result = _os_feature_enabled_impl();
  QPQueryParserCopyDefaultOptionsForContext::useLLMParseForSearchtool = result;
  return result;
}

BOOL QPQueryParserAvailableForLocale(BOOL result)
{
  if (result) {
    return systemListenerResourcesAvailableForLocaleAndContentType(result, @"QueryParser");
  }
  return result;
}

void QPQueryParserCreate()
{
}

void sub_224DF38BC(_Unwind_Exception *a1)
{
  MEMORY[0x22A623E20](v1, 0x10A1C40378632B1);
  _Unwind_Resume(a1);
}

void QPQueryParserCooldown(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(QP::Parser ***)(a1 + 24);
    if (v1) {
      QP::QueryParserEngine::cooldown(v1);
    }
  }
}

void QPQueryParserSetOptions(uint64_t a1, CFDictionaryRef theDict)
{
  if (a1)
  {
    if (theDict)
    {
      uint64_t v3 = *(QP::QueryParserEngine **)(a1 + 24);
      if (v3)
      {
        CFStringRef Value = (const __CFString *)CFDictionaryGetValue(theDict, kQPQueryParserOptionContextIdentifierKey);
        CFLocaleRef v33 = (const __CFLocale *)CFDictionaryGetValue(theDict, kQPQueryParserOptionLocaleKey);
        CFStringRef v21 = (__CFArray *)CFDictionaryGetValue(theDict, kQPQueryParserOptionPreferredLanguagesKey);
        CFIndex v32 = (__CFDate *)CFDictionaryGetValue(theDict, kQPQueryParserOptionReferenceDateKey);
        CFNumberRef v4 = (const __CFNumber *)CFDictionaryGetValue(theDict, kQPQueryParserOptionFormatKey);
        CFBooleanRef v5 = (const __CFBoolean *)CFDictionaryGetValue(theDict, @"loadAnnotations");
        CFBooleanRef v6 = (const __CFBoolean *)CFDictionaryGetValue(theDict, kQPQueryParserOptionIgnoreFutureDatesKey);
        CFBooleanRef v7 = (const __CFBoolean *)CFDictionaryGetValue(theDict, kQPQueryParserOptionIgnorePastDatesKey);
        CFBooleanRef v8 = (const __CFBoolean *)CFDictionaryGetValue(theDict, kQPQueryParserOptionIgnoreRecurringDatesKey);
        uint64_t v25 = (__CFBoolean *)CFDictionaryGetValue(theDict, kQPQueryParserOptionResolveDatesInFutureKey);
        uint64_t v26 = (__CFBoolean *)CFDictionaryGetValue(theDict, kQPQueryParserOptionResolveDatesInPastKey);
        uint64_t v28 = (__CFBoolean *)CFDictionaryGetValue(theDict, kQPQueryParserOptionResolveConcreteDatesKey);
        uint64_t v30 = (__CFBoolean *)CFDictionaryGetValue(theDict, @"usePartOfSpeech");
        CFNumberRef v24 = CFDictionaryGetValue(theDict, @"forTesting");
        uint64_t v23 = (__CFDictionary *)CFDictionaryGetValue(theDict, kQPQueryParserOptionCustomFieldSpecifications);
        uint64_t v27 = (__CFBoolean *)CFDictionaryGetValue(theDict, kQPQueryParserOptionPrivateParsingKey);
        uint64_t v29 = (__CFBoolean *)CFDictionaryGetValue(theDict, kQPQueryParserOptionEmbeddingsEnabledKey);
        CFBooleanRef v9 = (const __CFBoolean *)CFDictionaryGetValue(theDict, kQPQueryParserOptionSeparateEmbeddingsEnabledKey);
        uint64_t v31 = (__CFNumber *)CFDictionaryGetValue(theDict, @"embeddingGenerationTimeout");
        CFBooleanRef v10 = (const __CFBoolean *)CFDictionaryGetValue(theDict, kQPQueryParserOptionU2EnabledKey);
        CFBooleanRef v11 = (const __CFBoolean *)CFDictionaryGetValue(theDict, kQPQueryParserOptionUseLLMParseKey);
        int v22 = (__CFBoolean *)CFDictionaryGetValue(theDict, kQPQueryParserOptionIsEntitySearchKey);
        CFBooleanRef v20 = (const __CFBoolean *)CFDictionaryGetValue(theDict, kQPQueryParserOptionEnableEntitySearchStemming);
        CFBooleanRef v19 = (const __CFBoolean *)CFDictionaryGetValue(theDict, kQPQueryParserOptionEnableEntitySearchSpellCorrect);
        if (v4)
        {
          int valuePtr = 0;
          CFNumberGetValue(v4, kCFNumberSInt32Type, &valuePtr);
          LODWORD(v4) = QP::QueryParserEngine::setFormat((uint64_t)v3, valuePtr, 0);
        }
        if (v5) {
          QP::QueryParserEngine::setLoadAnnotations(v3, v5);
        }
        if (v6) {
          QP::QueryParserEngine::setIgnoreFutureDates(v3, v6);
        }
        if (v7) {
          QP::QueryParserEngine::setIgnorePastDates(v3, v7);
        }
        if (v8) {
          QP::QueryParserEngine::setIgnoreRecurringDates(v3, v8);
        }
        if (v25) {
          QP::QueryParserEngine::setResolvePastDates(v3, v25);
        }
        if (v26) {
          QP::QueryParserEngine::setResolveFutureDates(v3, v26);
        }
        if (v28) {
          QP::QueryParserEngine::setResolveConcreteDates(v3, v28);
        }
        if (v30) {
          QP::QueryParserEngine::setUsePartOfSpeech(v3, v30);
        }
        if (v32) {
          QP::QueryParserEngine::setDate(v3, v32);
        }
        if (v27) {
          QP::QueryParserEngine::setPrivateParsing(v3, v27);
        }
        if (v29) {
          QP::QueryParserEngine::setEmbeddingsEnabled(v3, v29);
        }
        if (v9) {
          QP::QueryParserEngine::setSeparateEmbeddingsEnabled(v3, v9);
        }
        if (v31) {
          QP::QueryParserEngine::setEmbeddingGenerationTimeout(v3, v31);
        }
        if (v10)
        {
          int v12 = CFBooleanGetValue(v10);
          if (v12 != QP::QueryParserEngine::U2Enabled(v3))
          {
            if (QP::QueryParserEngine::U2Enabled(v3)) {
              QP::QueryParserEngine::cooldown((QP::Parser **)v3);
            }
            QP::QueryParserEngine::setU2Enabled(v3, v10);
            LODWORD(v4) = 1;
          }
        }
        if (v11)
        {
          int v13 = CFBooleanGetValue(v11);
          BOOL v14 = v13 == QP::QueryParserEngine::useLLMParse(v3);
          CFBooleanRef v15 = v22;
          if (!v14)
          {
            QP::QueryParserEngine::setUseLLMParse(v3, v11);
            LODWORD(v4) = 1;
          }
        }
        else
        {
          CFBooleanRef v15 = v22;
        }
        if (v15)
        {
          QP::QueryParserEngine::setIsEntitySearch(v3, v15, v20, v19);
          QP::QueryParserEngine::updateEntitySearch((uint64_t)v3);
        }
        if (v33)
        {
          if (v21)
          {
            LODWORD(v4) = QP::QueryParserEngine::setLocale((QP::ParserConfiguration **)v3, v33, v21, 0) | v4;
          }
          else
          {
            values = (void *)CFLocaleGetValue(v33, (CFLocaleKey)*MEMORY[0x263EFFCF0]);
            CFArrayRef v16 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], (const void **)&values, 1, MEMORY[0x263EFFF70]);
            LODWORD(v4) = QP::QueryParserEngine::setLocale((QP::ParserConfiguration **)v3, v33, v16, 0) | v4;
            CFRelease(v16);
          }
        }
        if (Value) {
          LODWORD(v4) = QP::QueryParserEngine::setContextIdentifier(v3, Value, 0) | v4;
        }
        if (v23) {
          LODWORD(v4) = QP::QueryParserEngine::setCustomFieldSpecifications(v3, v23, 0) | v4;
        }
        if (v24)
        {
          systemListenerEnableAutoUpdatingLocale(0);
          systemListenerEnableForceLoadingAssets(1);
          uint64_t v17 = QP::QueryParserEngine::locale(v3);
          uint64_t PreferredLanguages = QP::QueryParserEngine::getPreferredLanguages(v3);
          systemListenerSetLocale(v17, PreferredLanguages);
        }
        if (v4) {
          QP::QueryParserEngine::updateWithOptions(v3, theDict);
        }
      }
    }
  }
}

__CFDictionary *QPQueryParserCopyOptions(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  uint64_t v3 = Mutable;
  if (a1)
  {
    CFNumberRef v4 = *(QP::QueryParserEngine **)(a1 + 24);
    if (v4)
    {
      CFBooleanRef v5 = *(const void **)(*((void *)v4 + 1) + 176);
      if (v5) {
        CFDictionarySetValue(Mutable, kQPQueryParserOptionContextIdentifierKey, v5);
      }
      CFBooleanRef v6 = (const void *)QP::QueryParserEngine::locale(v4);
      if (v6) {
        CFDictionarySetValue(v3, kQPQueryParserOptionLocaleKey, v6);
      }
      uint64_t PreferredLanguages = (const void *)QP::QueryParserEngine::getPreferredLanguages(v4);
      if (PreferredLanguages) {
        CFDictionarySetValue(v3, kQPQueryParserOptionPreferredLanguagesKey, PreferredLanguages);
      }
      Calendar = (const void *)QP::QueryParserEngine::getCalendar(v4);
      if (Calendar) {
        CFDictionarySetValue(v3, kQPQueryParserOptionReferenceCalendarKey, Calendar);
      }
      Date = (const void *)QP::QueryParserEngine::getDate(v4);
      if (Date) {
        CFDictionarySetValue(v3, kQPQueryParserOptionReferenceDateKey, Date);
      }
      CFBooleanRef v10 = (unsigned char *)*((void *)v4 + 1);
      CFBooleanRef v11 = (const void **)MEMORY[0x263EFFB40];
      if (v10[23])
      {
        CFDictionarySetValue(v3, kQPQueryParserOptionIgnoreFutureDatesKey, (const void *)*MEMORY[0x263EFFB40]);
        CFBooleanRef v10 = (unsigned char *)*((void *)v4 + 1);
      }
      if (v10[24])
      {
        CFDictionarySetValue(v3, kQPQueryParserOptionIgnorePastDatesKey, *v11);
        CFBooleanRef v10 = (unsigned char *)*((void *)v4 + 1);
      }
      if (v10[27])
      {
        CFDictionarySetValue(v3, kQPQueryParserOptionResolveDatesInFutureKey, *v11);
        CFBooleanRef v10 = (unsigned char *)*((void *)v4 + 1);
      }
      if (v10[26])
      {
        CFDictionarySetValue(v3, kQPQueryParserOptionResolveDatesInPastKey, *v11);
        CFBooleanRef v10 = (unsigned char *)*((void *)v4 + 1);
      }
      if (v10[28]) {
        CFDictionarySetValue(v3, kQPQueryParserOptionResolveConcreteDatesKey, *v11);
      }
    }
  }
  return v3;
}

QP::QueryParserEngine *QPQueryParserSetUseSystemLocale(QP::QueryParserEngine *result, const __CFBoolean *a2)
{
  if (result)
  {
    uint64_t result = (QP::QueryParserEngine *)*((void *)result + 3);
    if (result) {
      return (QP::QueryParserEngine *)QP::QueryParserEngine::useSystemLocale(result, a2);
    }
  }
  return result;
}

uint64_t QPQueryParserSetLocale(uint64_t result, const __CFLocale *a2, const __CFArray *a3)
{
  if (result)
  {
    uint64_t result = *(void *)(result + 24);
    if (result) {
      return QP::QueryParserEngine::setLocale((QP::ParserConfiguration **)result, a2, a3, 1);
    }
  }
  return result;
}

uint64_t QPQueryParserGetLocale(uint64_t a1)
{
  if (a1 && (uint64_t v1 = *(QP::QueryParserEngine **)(a1 + 24)) != 0) {
    return QP::QueryParserEngine::locale(v1);
  }
  else {
    return 0;
  }
}

uint64_t QPQueryParserGetPreferredLanguages(uint64_t a1)
{
  if (a1 && (uint64_t v1 = *(QP::QueryParserEngine **)(a1 + 24)) != 0) {
    return QP::QueryParserEngine::getPreferredLanguages(v1);
  }
  else {
    return 0;
  }
}

QP::ParserConfiguration *QPQueryParserSetCustomResourceDirectory(QP::ParserConfiguration *result, const __CFURL *a2)
{
  if (result)
  {
    uint64_t result = (QP::ParserConfiguration *)*((void *)result + 3);
    if (result) {
      return QP::QueryParserEngine::setCustomResourceDirectory(result, a2, 1);
    }
  }
  return result;
}

uint64_t QPQueryParserGetCustomResourceDirectory(uint64_t a1)
{
  if (a1 && (uint64_t v1 = *(QP::QueryParserEngine **)(a1 + 24)) != 0) {
    return QP::QueryParserEngine::getCustomResourceDirectory(v1);
  }
  else {
    return 0;
  }
}

QP::QueryParserEngine *QPQueryParserSetIgnoreAttributedParses(QP::QueryParserEngine *result, const __CFBoolean *a2)
{
  if (result)
  {
    uint64_t result = (QP::QueryParserEngine *)*((void *)result + 3);
    if (result) {
      return (QP::QueryParserEngine *)QP::QueryParserEngine::setIgnoreAttributedParses(result, a2);
    }
  }
  return result;
}

_DWORD *QPQueryParserSetFormat(_DWORD *result, int a2)
{
  if (result)
  {
    uint64_t result = (_DWORD *)*((void *)result + 3);
    if (result) {
      return QP::QueryParserEngine::setFormat((uint64_t)result, a2, 1);
    }
  }
  return result;
}

QP::ParserConfiguration *QPQueryParserSetContext(QP::ParserConfiguration *result, const __CFString *a2)
{
  if (result)
  {
    uint64_t result = (QP::ParserConfiguration *)*((void *)result + 3);
    if (result) {
      return QP::QueryParserEngine::setContextIdentifier(result, a2, 1);
    }
  }
  return result;
}

void QPQueryParserSetReferenceDate(uint64_t a1, const __CFDate *a2)
{
  if (a1)
  {
    CFAllocatorRef v2 = *(QP::QueryParserEngine **)(a1 + 24);
    if (v2) {
      QP::QueryParserEngine::setDate(v2, a2);
    }
  }
}

uint64_t QPQueryParserGetReferenceDate(uint64_t a1)
{
  if (a1 && (uint64_t v1 = *(QP::QueryParserEngine **)(a1 + 24)) != 0) {
    return QP::QueryParserEngine::getDate(v1);
  }
  else {
    return 0;
  }
}

uint64_t QPQueryParserGetCalendar(uint64_t a1)
{
  if (a1 && (uint64_t v1 = *(QP::QueryParserEngine **)(a1 + 24)) != 0) {
    return QP::QueryParserEngine::getCalendar(v1);
  }
  else {
    return 0;
  }
}

QP::QueryParserEngine *QPQueryParserIsAvailable(QP::QueryParserEngine *result)
{
  if (result)
  {
    uint64_t result = (QP::QueryParserEngine *)*((void *)result + 3);
    if (result) {
      return (QP::QueryParserEngine *)QP::QueryParserEngine::resourcesLoaded(result);
    }
  }
  return result;
}

QP::QueryParserEngine *QPQueryParserIsParsingAvailable(QP::QueryParserEngine *result)
{
  if (result)
  {
    uint64_t result = (QP::QueryParserEngine *)*((void *)result + 3);
    if (result) {
      return (QP::QueryParserEngine *)QP::QueryParserEngine::parsingEnabled(result);
    }
  }
  return result;
}

uint64_t QPQueryParserUseKnowledgeSource(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t result = *(void *)(result + 24);
    if (result) {
      return QP::QueryParserEngine::useKnowledgeSource(result, a2);
    }
  }
  return result;
}

__CFDictionary *QPQueryParserParse(uint64_t a1, const __CFString *a2, const __CFDictionary *a3, uint64_t a4, uint64_t a5)
{
  if (!a1) {
    return QPQueryParserCopyInputAttributes(a1, a2, a3);
  }
  CFBooleanRef v8 = *(QP::QueryParserEngine **)(a1 + 24);
  if (v8)
  {
    if (a5) {
      QPQueryParserEnumerateSuggestions(a1, a2, a5);
    }
    if (a4)
    {
      int v10 = QP::QueryParserEngine::U2Enabled(v8);
      int v11 = QP::QueryParserEngine::useLLMParse(v8);
      int v12 = QP::QueryParserEngine::embeddingsEnabled(v8);
      BOOL v13 = QP::QueryParserEngine::entitySearchEnabled(v8);
      QP::QueryParserEngine::setString(v8, a2, a3, v10, v11, v12, v13, 0);
      v16[0] = 0;
      v16[1] = v16;
      CFIndex v16[2] = 0x3002000000;
      long long v16[3] = __Block_byref_object_copy__10;
      v16[4] = __Block_byref_object_dispose__10;
      CFTypeRef cf = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFFA0]);
      v15[0] = MEMORY[0x263EF8330];
      v15[1] = 0x40000000;
      CFIndex v15[2] = __QPQueryParserParse_block_invoke;
      void v15[3] = &unk_264705EC0;
      v15[4] = a4;
      void v15[5] = v16;
      QP::QueryParserEngine::enumerateParseResults(v8, (uint64_t)v15);
      _Block_object_dispose(v16, 8);
      if (cf) {
        CFRelease(cf);
      }
    }
    return QPQueryParserCopyInputAttributes(a1, a2, a3);
  }
  return 0;
}

void sub_224DF42A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  nlp::CFScopedPtr<__CFSet *>::reset(v7, 0);
  _Unwind_Resume(a1);
}

void QPQueryParserEnumerateSuggestions(uint64_t a1, const __CFString *a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v3 = *(QP::QueryParserEngine **)(a1 + 24);
    if (v3)
    {
      QP::QueryParserEngine::setString(*(QP::QueryParserEngine **)(a1 + 24), a2, 0, 0, 0, 0, 0, 1);
      if (a3)
      {
        v19[0] = 0;
        v19[1] = v19;
        v19[2] = 0x3002000000;
        v19[3] = __Block_byref_object_copy__10;
        v19[4] = __Block_byref_object_dispose__10;
        CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        CFMutableSetRef Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFFA0]);
        v18[0] = MEMORY[0x263EF8330];
        v18[1] = 0x40000000;
        void v18[2] = __QPQueryParserEnumerateSuggestions_block_invoke;
        v18[3] = &unk_264705F10;
        v18[4] = a3;
        v18[5] = v19;
        QP::QueryParserEngine::enumerateSuggestionResults(v3, (uint64_t)v18);
        CFArrayRef v5 = (const __CFArray *)QP::QueryParserEngine::copyCompletions(v3);
        v17[7] = v5;
        CFArrayRef TokenCompletedQuery = (const __CFArray *)QP::QueryParserEngine::copyLastTokenCompletedQuery(v3);
        v17[6] = TokenCompletedQuery;
        CFIndex Count = CFArrayGetCount(v5);
        if (Count >= 1)
        {
          for (CFIndex i = 0; i != Count; ++i)
          {
            CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v5, i);
            QP::QueryParserEngine::setString(v3, ValueAtIndex, 0, 0, 0, 0, 0, 0);
            v17[0] = MEMORY[0x263EF8330];
            v17[1] = 0x40000000;
            v17[2] = __QPQueryParserEnumerateSuggestions_block_invoke_2;
            v17[3] = &unk_264705F38;
            unsigned char v17[4] = a3;
            v17[5] = v19;
            QP::QueryParserEngine::enumerateSuggestionResults(v3, (uint64_t)v17);
          }
        }
        CFIndex v10 = CFArrayGetCount(TokenCompletedQuery);
        if (v10 >= 1)
        {
          for (CFIndex j = 0; j != v10; ++j)
          {
            CFStringRef v12 = (const __CFString *)CFArrayGetValueAtIndex(TokenCompletedQuery, j);
            QP::QueryParserEngine::setString(v3, v12, 0, 0, 0, 0, 0, 0);
            v15[0] = 0;
            v15[1] = v15;
            CFIndex v15[2] = 0x3002000000;
            void v15[3] = __Block_byref_object_copy__10;
            v15[4] = __Block_byref_object_dispose__10;
            CFTypeRef cf = CFSetCreateMutable(allocator, 0, MEMORY[0x263EFFFA0]);
            v14[0] = MEMORY[0x263EF8330];
            v14[1] = 0x40000000;
            void v14[2] = __QPQueryParserEnumerateSuggestions_block_invoke_3;
            long long v14[3] = &unk_264705F60;
            void v14[4] = a3;
            v14[5] = v15;
            QP::QueryParserEngine::enumerateParseResults(v3, (uint64_t)v14);
            _Block_object_dispose(v15, 8);
            if (cf) {
              CFRelease(cf);
            }
          }
        }
        if (TokenCompletedQuery) {
          CFRelease(TokenCompletedQuery);
        }
        if (v5) {
          CFRelease(v5);
        }
        _Block_object_dispose(v19, 8);
        if (Mutable) {
          CFRelease(Mutable);
        }
      }
    }
  }
}

void sub_224DF460C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,const void *a30,const void *a31)
{
  nlp::CFScopedPtr<__CFArray const*>::reset(&a30, 0);
  nlp::CFScopedPtr<__CFArray const*>::reset(&a31, 0);
  _Block_object_dispose((const void *)(v31 - 152), 8);
  nlp::CFScopedPtr<__CFSet *>::reset((const void **)(v31 - 112), 0);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__10(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a2 + 4std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = 0;
  *(void *)(result + 4std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = v2;
  return result;
}

void __Block_byref_object_dispose__10(uint64_t a1)
{
}

void __QPQueryParserParse_block_invoke(uint64_t a1, CFDictionaryRef theDict)
{
  CFStringRef Value = CFDictionaryGetValue(theDict, kQPParseResultDescriptionKey);
  CFSetRef v5 = *(const __CFSet **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  if (Value)
  {
    if (CFSetContainsValue(v5, Value)) {
      return;
    }
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    CFBooleanRef v6 = *(__CFSet **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    CFDictionaryRef v7 = (CFDictionaryRef)Value;
  }
  else
  {
    if (CFSetContainsValue(v5, theDict)) {
      return;
    }
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    CFBooleanRef v6 = *(__CFSet **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    CFDictionaryRef v7 = theDict;
  }
  CFSetAddValue(v6, v7);
}

__CFDictionary *QPQueryParserCopyInputAttributes(uint64_t a1, const __CFString *a2, const __CFDictionary *a3)
{
  if (!a1) {
    return 0;
  }
  uint64_t v3 = *(QP::QueryParserEngine **)(a1 + 24);
  if (!v3) {
    return 0;
  }
  uint64_t v6 = QP::QueryParserEngine::string(*(QP::QueryParserEngine **)(a1 + 24));
  if (!a2 && v6
    || a2
    && (!QP::QueryParserEngine::string(v3)
     || (CFIndex Length = CFStringGetLength(a2),
         CFStringRef v14 = (const __CFString *)QP::QueryParserEngine::string(v3),
         Length != CFStringGetLength(v14))
     || (CFStringRef v15 = (const __CFString *)QP::QueryParserEngine::string(v3), !CFStringsAreEqual(a2, v15))))
  {
    QP::QueryParserEngine::setString(v3, a2, a3);
  }
  CFMutableSetRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (QP::QueryParserEngine::embeddingsEnabled(v3))
  {
    CFDataRef EmbeddingData = QP::QueryParserEngine::copyQueryEmbeddingData(v3);
    CFBooleanRef v9 = QP::QueryParserEngine::copyEmbeddingError(v3);
    if (EmbeddingData)
    {
      CFDictionarySetValue(Mutable, (const void *)kQPInputAttributesEmbeddingResultKey, EmbeddingData);
      CFRelease(EmbeddingData);
    }
    if (v9)
    {
      CFDictionarySetValue(Mutable, (const void *)kQPInputAttributesEmbeddingErrorDescriptionKey, v9);
      CFRelease(v9);
    }
  }
  CFAttributedStringRef v10 = QP::QueryParserEngine::copyAttributedInput(v3);
  if (v10)
  {
    CFAttributedStringRef v11 = v10;
    CFDictionarySetValue(Mutable, (const void *)kQPInputAttributesAttributedResultKey, v10);
    CFRelease(v11);
  }
  return Mutable;
}

void QPQueryParserCancel(uint64_t a1, const __CFDictionary *a2)
{
  if (a1)
  {
    uint64_t v2 = *(QP::Embedder ***)(a1 + 24);
    if (v2) {
      QP::QueryParserEngine::cancelWithQueryReference(v2, a2);
    }
  }
}

void QPQueryParserEnumerateParses(uint64_t a1, const __CFString *a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v3 = *(QP::QueryParserEngine **)(a1 + 24);
    if (v3)
    {
      int v6 = QP::QueryParserEngine::U2Enabled(*(QP::QueryParserEngine **)(a1 + 24));
      int v7 = QP::QueryParserEngine::useLLMParse(v3);
      int v8 = QP::QueryParserEngine::embeddingsEnabled(v3);
      BOOL v9 = QP::QueryParserEngine::entitySearchEnabled(v3);
      QP::QueryParserEngine::setString(v3, a2, 0, v6, v7, v8, v9, 0);
      if (a3)
      {
        v11[0] = 0;
        v11[1] = v11;
        uint64_t v11[2] = 0x3002000000;
        void v11[3] = __Block_byref_object_copy__10;
        v11[4] = __Block_byref_object_dispose__10;
        CFTypeRef cf = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFFA0]);
        v10[0] = MEMORY[0x263EF8330];
        v10[1] = 0x40000000;
        CFIndex v10[2] = __QPQueryParserEnumerateParses_block_invoke;
        void v10[3] = &unk_264705EE8;
        v10[4] = a3;
        v10[5] = v11;
        QP::QueryParserEngine::enumerateParseResults(v3, (uint64_t)v10);
        _Block_object_dispose(v11, 8);
        if (cf) {
          CFRelease(cf);
        }
      }
    }
  }
}

void sub_224DF4A7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  nlp::CFScopedPtr<__CFSet *>::reset(v7, 0);
  _Unwind_Resume(a1);
}

void __QPQueryParserEnumerateParses_block_invoke(uint64_t a1, CFDictionaryRef theDict)
{
  CFStringRef Value = CFDictionaryGetValue(theDict, kQPParseResultDescriptionKey);
  CFSetRef v5 = *(const __CFSet **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  if (Value)
  {
    if (CFSetContainsValue(v5, Value)) {
      return;
    }
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    int v6 = *(__CFSet **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    CFDictionaryRef v7 = (CFDictionaryRef)Value;
  }
  else
  {
    if (CFSetContainsValue(v5, theDict)) {
      return;
    }
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    int v6 = *(__CFSet **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    CFDictionaryRef v7 = theDict;
  }
  CFSetAddValue(v6, v7);
}

void __QPQueryParserEnumerateSuggestions_block_invoke(uint64_t a1, CFDictionaryRef theDict)
{
  CFStringRef Value = CFDictionaryGetValue(theDict, kQPSuggestionResultDescriptionKey);
  CFSetRef v5 = *(const __CFSet **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  if (Value)
  {
    if (CFSetContainsValue(v5, Value)) {
      return;
    }
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    int v6 = *(__CFSet **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    CFDictionaryRef v7 = (CFDictionaryRef)Value;
  }
  else
  {
    if (CFSetContainsValue(v5, theDict)) {
      return;
    }
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    int v6 = *(__CFSet **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    CFDictionaryRef v7 = theDict;
  }
  CFSetAddValue(v6, v7);
}

void __QPQueryParserEnumerateSuggestions_block_invoke_2(uint64_t a1, CFDictionaryRef theDict, unsigned char *a3)
{
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, kQPSuggestionResultDescriptionKey);
  CFSetRef v7 = *(const __CFSet **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  if (Value)
  {
    if (!CFSetContainsValue(v7, Value))
    {
      (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
      int v8 = *(__CFSet **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
      CFDictionaryRef v9 = Value;
LABEL_6:
      CFSetAddValue(v8, v9);
    }
  }
  else if (!CFSetContainsValue(v7, theDict))
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    int v8 = *(__CFSet **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    CFDictionaryRef v9 = theDict;
    goto LABEL_6;
  }
  *a3 = 1;
}

void __QPQueryParserEnumerateSuggestions_block_invoke_3(uint64_t a1, CFDictionaryRef theDict)
{
  CFDictionaryRef Value = CFDictionaryGetValue(theDict, kQPParseResultDescriptionKey);
  CFSetRef v5 = *(const __CFSet **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  if (Value)
  {
    if (CFSetContainsValue(v5, Value)) {
      return;
    }
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    int v6 = *(__CFSet **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    CFDictionaryRef v7 = (CFDictionaryRef)Value;
  }
  else
  {
    if (CFSetContainsValue(v5, theDict)) {
      return;
    }
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    int v6 = *(__CFSet **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    CFDictionaryRef v7 = theDict;
  }
  CFSetAddValue(v6, v7);
}

uint64_t QPQueryParserCopyParses(uint64_t a1, const __CFString *a2)
{
  uint64_t v7 = 0;
  int v8 = &v7;
  uint64_t v9 = 0x2000000000;
  CFMutableArrayRef Mutable = 0;
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 0x40000000;
  uint64_t v6[2] = __QPQueryParserCopyParses_block_invoke;
  void v6[3] = &unk_264705F88;
  void v6[4] = &v7;
  QPQueryParserEnumerateParses(a1, a2, (uint64_t)v6);
  uint64_t v4 = v8[3];
  _Block_object_dispose(&v7, 8);
  return v4;
}

void sub_224DF4EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __QPQueryParserCopyParses_block_invoke(uint64_t a1, const void *a2)
{
}

void QPQueryParserEnumerateParsesForStartAndEndDates(uint64_t a1, const __CFString *a2, const __CFDictionary *a3, const __CFString *a4, const __CFDictionary *a5, uint64_t a6)
{
  if (a1 && a6)
  {
    int v6 = *(QP::DateFormatter ****)(a1 + 24);
    if (v6)
    {
      v7[0] = MEMORY[0x263EF8330];
      v7[1] = 0x40000000;
      v7[2] = __QPQueryParserEnumerateParsesForStartAndEndDates_block_invoke;
      void v7[3] = &unk_264705FB0;
      v7[4] = a6;
      QP::QueryParserEngine::enumerateDateRangeParses(v6, a2, a3, a4, a5, (uint64_t)v7);
    }
  }
}

uint64_t __QPQueryParserEnumerateParsesForStartAndEndDates_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void QueryParserWrapper::~QueryParserWrapper(QueryParserWrapper *this)
{
  *(void *)this = &unk_26D8315F0;
  uint64_t v1 = *((void *)this + 1);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
}

{
  uint64_t v1;
  uint64_t vars8;

  *(void *)this = &unk_26D8315F0;
  uint64_t v1 = *((void *)this + 1);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  JUMPOUT(0x22A623E20);
}

uint64_t nlp::CFType::Equal()
{
  return 0;
}

uint64_t nlp::CFType::Hash(nlp::CFType *this)
{
  return 0;
}

uint64_t nlp::CFType::CopyFormattingDesc(nlp::CFType *this, const __CFDictionary *a2)
{
  return 0;
}

uint64_t nlp::CFType::CopyDebugDesc(nlp::CFType *this)
{
  return 0;
}

uint64_t QP::updateDateComponentsWithRelativeDateOffset(uint64_t result, uint64_t a2, const __CFDate *a3, QP::DateComponents *this, int a5, int a6, char a7, uint64_t a8)
{
  if (result)
  {
    if (a2)
    {
      CFStringRef v14 = (__CFCalendar *)result;
      uint64_t result = QP::DateComponents::isEmpty(this);
      if ((result & 1) == 0)
      {
        CFAbsoluteTime AbsoluteTime = QP::DateComponents::getAbsoluteTime(this, v14, a3);
        CFAbsoluteTime at = AbsoluteTime;
        uint64_t v37 = 0;
        uint64_t v38 = 0;
        uint64_t v16 = *(void *)this;
        int v17 = *((_DWORD *)this + 3);
        int v35 = *((_DWORD *)this + 2);
        int v36 = 0;
        int v18 = *((_DWORD *)this + 4);
        int v19 = *((_DWORD *)this + 5);
        uint64_t v33 = *((void *)this + 3);
        uint64_t v34 = v16;
        int v20 = *((_DWORD *)this + 8);
        uint64_t v32 = *(void *)((char *)this + 36);
        int v30 = *((_DWORD *)this + 12);
        int v31 = *((_DWORD *)this + 11);
        if (QP::DateComponents::isTime(this))
        {
          uint64_t result = CFCalendarAddComponents(v14, &at, 0, "d", a8);
          v21.i64[0] = -1;
          v21.i64[1] = -1;
          if ((vmaxv_u16((uint16x4_t)vmovn_s32(vcgtq_s32(*(int32x4_t *)((char *)this + 36), v21))) & 1) == 0
            && (*((_DWORD *)this + 8) & 0x80000000) != 0)
          {
            if (!a6) {
              goto LABEL_36;
            }
            goto LABEL_25;
          }
          uint64_t result = CFCalendarDecomposeAbsoluteTime(v14, at, "EwY", &v37, &v36, (char *)&v38 + 4);
          int v20 = v37;
LABEL_20:
          if (!a6)
          {
LABEL_36:
            uint64_t v29 = v32;
            uint64_t v28 = v33;
            int v27 = v30;
            int v26 = v31;
            goto LABEL_37;
          }
LABEL_21:
          int v26 = v36;
          int v27 = HIDWORD(v38);
          uint64_t v29 = v32;
          uint64_t v28 = v33;
LABEL_37:
          *(void *)this = v34;
          *((_DWORD *)this + 2) = v35;
          *((_DWORD *)this + 3) = v17;
          *((_DWORD *)this + 4) = v18;
          *((_DWORD *)this + 5) = v19;
          *((void *)this + 3) = v28;
          *((_DWORD *)this + 8) = v20;
          *(void *)((char *)this + 36) = v29;
          *((_DWORD *)this + 1QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = v26;
          *((_DWORD *)this + 12) = v27;
          return result;
        }
        v22.i64[0] = -1;
        v22.i64[1] = -1;
        uint16x4_t v23 = (uint16x4_t)vmovn_s32(vcgtq_s32(*(int32x4_t *)((char *)this + 36), v22));
        if (vmaxv_u16(v23))
        {
          if (v23.i8[0])
          {
            CFIndex length = CFCalendarGetRangeOfUnit(v14, 0x400uLL, 8uLL, AbsoluteTime).length;
            CFCalendarAddComponents(v14, &at, 0, "F", (length - *((int *)this + 9)) * (int)a8);
            uint64_t result = CFCalendarDecomposeAbsoluteTime(v14, at, "EwY", &v37, &v36, (char *)&v38 + 4);
            goto LABEL_17;
          }
        }
        else if ((*((_DWORD *)this + 8) & 0x80000000) != 0 || (*((_DWORD *)this + 3) & 0x80000000) == 0)
        {
          if (a5 == 99)
          {
            CFCalendarAddComponents(v14, &at, 0, "M", a8);
          }
          else
          {
            if (a5 == 94)
            {
              CFCalendarAddComponents(v14, &at, 0, "d", a8);
LABEL_25:
              uint64_t result = CFCalendarDecomposeAbsoluteTime(v14, at, "dMy", (char *)&v37 + 4, &v38, (char *)&v38 + 4);
              int v17 = HIDWORD(v37);
              int v18 = v38;
              int v19 = HIDWORD(v38);
              goto LABEL_36;
            }
            if ((a5 - 91) > 2) {
              CFCalendarAddComponents(v14, &at, 0, "y", a8);
            }
            else {
              CFCalendarAddComponents(v14, &at, 0, "d", a8);
            }
          }
          uint64_t result = CFCalendarDecomposeAbsoluteTime(v14, at, "dMy", (char *)&v37 + 4, &v38, (char *)&v38 + 4);
          if (*((int *)this + 3) >= 0) {
            int v17 = HIDWORD(v37);
          }
          if (*((int *)this + 4) >= 0) {
            int v18 = v38;
          }
          if (a6) {
            int v19 = HIDWORD(v38);
          }
          goto LABEL_36;
        }
        CFCalendarAddComponents(v14, &at, 0, "w", a8);
        uint64_t result = CFCalendarDecomposeAbsoluteTime(v14, at, "EwY", &v37, &v36, (char *)&v38 + 4);
        if (*((int *)this + 8) >= 0) {
          int v20 = v37;
        }
LABEL_17:
        char v25 = a7 ^ 1;
        if (!a8) {
          char v25 = 0;
        }
        if (v25) {
          goto LABEL_21;
        }
        goto LABEL_20;
      }
    }
  }
  return result;
}

void QP::updateDateComponentsWithUnitOffset(__CFCalendar *a1, uint64_t a2, const __CFDate *a3, QP::DateComponents *this, int a5, uint64_t a6)
{
  if (!a1 || !a2 || (QP::DateComponents::isEmpty(this) & 1) != 0) {
    return;
  }
  CFAbsoluteTime AbsoluteTime = QP::DateComponents::getAbsoluteTime(this, a1, a3);
  int v12 = *((_DWORD *)this + 2);
  CFAbsoluteTime at = AbsoluteTime;
  int v13 = *((_DWORD *)this + 1);
  int v14 = *(_DWORD *)this;
  BOOL v15 = 1;
  if (v12 < 0 && v13 < 0 && v14 < 0) {
    BOOL v15 = *((_DWORD *)this + 7) >= 0;
  }
  if (a5 == 6 || !v15)
  {
    if ((*((_DWORD *)this + 8) & 0x80000000) == 0)
    {
      CFCalendarAddComponents(a1, &at, 0, "E", a6);
      goto LABEL_41;
    }
    if ((*((_DWORD *)this + 11) & 0x80000000) == 0)
    {
      CFCalendarAddComponents(a1, &at, 0, "w", a6);
      goto LABEL_41;
    }
    if ((*((_DWORD *)this + 3) & 0x80000000) == 0)
    {
      CFCalendarAddComponents(a1, &at, 0, "d", a6);
      goto LABEL_41;
    }
    if ((*((_DWORD *)this + 4) & 0x80000000) == 0)
    {
      CFCalendarAddComponents(a1, &at, 0, "M", a6);
      goto LABEL_41;
    }
    if ((*((_DWORD *)this + 5) & 0x80000000) != 0) {
      goto LABEL_41;
    }
    uint64_t v16 = "y";
    goto LABEL_40;
  }
  if ((v14 & 0x80000000) == 0
    && (a5 - 31) <= 0x2F
    && ((1 << (a5 - 31)) & 0x801001000001) != 0)
  {
    CFCalendarAddComponents(a1, &at, 0, "s", a6);
    goto LABEL_41;
  }
  if ((v13 & 0x80000000) == 0
    && (a5 - 32) <= 0x2F
    && ((1 << (a5 - 32)) & 0x801000000001) != 0)
  {
    CFCalendarAddComponents(a1, &at, 0, "m", a6);
    goto LABEL_41;
  }
  if ((v12 & 0x80000000) == 0)
  {
    if ((a5 - 33) <= 0x2F && ((1 << (a5 - 33)) & 0x801000000001) != 0
      || (a5 - 45) < 0xFFFFFFFD)
    {
      CFCalendarAddComponents(a1, &at, 0, "H", a6);
    }
    goto LABEL_41;
  }
  if (v13 < 0) {
    uint64_t v16 = "s";
  }
  else {
    uint64_t v16 = "m";
  }
  if ((a5 - 45) <= 0xFFFFFFFC && (v13 & v14) >= 0) {
LABEL_40:
  }
    CFCalendarAddComponents(a1, &at, 0, v16, a6);
LABEL_41:
  if ((*(_DWORD *)this & 0x80000000) == 0) {
    CFCalendarDecomposeAbsoluteTime(a1, at, "s", this);
  }
  if ((*((_DWORD *)this + 1) & 0x80000000) == 0) {
    CFCalendarDecomposeAbsoluteTime(a1, at, "m", (char *)this + 4);
  }
  if ((*((_DWORD *)this + 2) & 0x80000000) == 0)
  {
    CFCalendarDecomposeAbsoluteTime(a1, at, "H", (char *)this + 8);
    *((_DWORD *)this + 7) = -1;
  }
  if ((*((_DWORD *)this + 8) & 0x80000000) == 0) {
    CFCalendarDecomposeAbsoluteTime(a1, at, "E", (char *)this + 32);
  }
  if ((*((_DWORD *)this + 3) & 0x80000000) == 0) {
    CFCalendarDecomposeAbsoluteTime(a1, at, "d", (char *)this + 12);
  }
  if ((*((_DWORD *)this + 4) & 0x80000000) == 0) {
    CFCalendarDecomposeAbsoluteTime(a1, at, "M", (char *)this + 16);
  }
  if ((*((_DWORD *)this + 5) & 0x80000000) == 0) {
    CFCalendarDecomposeAbsoluteTime(a1, at, "y", (char *)this + 20);
  }
  if ((*((_DWORD *)this + 11) & 0x80000000) == 0) {
    CFCalendarDecomposeAbsoluteTime(a1, at, "w", (char *)this + 44);
  }
  int v18 = *((_DWORD *)this + 12);
  int v17 = (char *)this + 48;
  if ((v18 & 0x80000000) == 0) {
    CFCalendarDecomposeAbsoluteTime(a1, at, "Y", v17);
  }
}

uint64_t QP::updateDateComponentsWithHoliday(QP::HolidayReference **a1, __CFString *a2, const __CFString *a3, const __CFString *a4, __CFCalendar *a5, int a6, int a7, __CFString *a8, _DWORD *a9)
{
  uint64_t v9 = 0;
  if (a5)
  {
    if (a3)
    {
      if (a2)
      {
        int v13 = *a1;
        if (v13)
        {
          if (QP::HolidayReference::containsHoliday(v13, a2))
          {
            int v18 = QP::HolidayReference::copyValuesForYear(*a1, a2, a3, a4, a7);
            valuePtr[1] = v18;
            if (v18)
            {
              int v19 = v18;
              if (!CFDictionaryContainsKey(v18, @"Year"))
              {
                uint64_t v9 = 0;
LABEL_44:
                CFRelease(v19);
                return v9;
              }
              uint64_t v42 = 0;
              valuePtr[0] = 0;
              unsigned int v41 = a7;
              CFAbsoluteTime at = 0.0;
              CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v19, @"Day");
              if (Value) {
                CFNumberGetValue(Value, kCFNumberIntType, (char *)valuePtr + 4);
              }
              CFNumberRef v21 = (const __CFNumber *)CFDictionaryGetValue(v19, @"Month");
              if (v21) {
                CFNumberGetValue(v21, kCFNumberIntType, valuePtr);
              }
              CFNumberRef v22 = (const __CFNumber *)CFDictionaryGetValue(v19, @"Weekday");
              if (v22) {
                CFNumberGetValue(v22, kCFNumberIntType, (char *)&v42 + 4);
              }
              CFNumberRef v23 = (const __CFNumber *)CFDictionaryGetValue(v19, @"WeekOfYear");
              if (v23) {
                CFNumberGetValue(v23, kCFNumberIntType, &v42);
              }
              CFNumberRef v24 = (const __CFNumber *)CFDictionaryGetValue(v19, @"Year");
              if (v24) {
                CFNumberGetValue(v24, kCFNumberIntType, &v41);
              }
              CFAllocatorRef v25 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
              CFCalendarRef v26 = CFCalendarCreateWithIdentifier((CFAllocatorRef)*MEMORY[0x263EFFB08], @"gregorian");
              int v27 = v26;
              v39[1] = v26;
              if (HIDWORD(v42) && v42)
              {
                CFCalendarComposeAbsoluteTime(v26, &at, "EwY", HIDWORD(v42), v42, v41);
                CFStringRef v28 = (const __CFString *)MEMORY[0x22A623110](a5);
                if (CFStringsAreEqual(v28, @"gregorian")
                  && (uint64_t v29 = MEMORY[0x22A623100](v27), v29 == MEMORY[0x22A623100](a5)))
                {
                  CFCalendarDecomposeAbsoluteTime(v27, at, "EwY", (char *)&v42 + 4, &v42, &v41);
                }
                else
                {
                  CFCalendarDecomposeAbsoluteTime(a5, at, "EwY", (char *)&v42 + 4, &v42, &v41);
                }
                a9[8] = HIDWORD(v42);
                unsigned int v32 = v41;
                a9[11] = v42;
                a9[12] = v32;
                uint64_t v33 = a9 + 5;
              }
              else
              {
                uint64_t v9 = 0;
                if (!HIDWORD(valuePtr[0]) || !LODWORD(valuePtr[0]))
                {
LABEL_42:
                  if (v27) {
                    CFRelease(v27);
                  }
                  goto LABEL_44;
                }
                CFCalendarComposeAbsoluteTime(v26, &at, "dMy", HIDWORD(valuePtr[0]), LODWORD(valuePtr[0]), v41);
                CFStringRef v30 = (const __CFString *)MEMORY[0x22A623110](a5);
                if (CFStringsAreEqual(v30, @"gregorian")
                  && (uint64_t v31 = MEMORY[0x22A623100](v27), v31 == MEMORY[0x22A623100](a5)))
                {
                  CFCalendarDecomposeAbsoluteTime(v27, at, "dMy", (char *)valuePtr + 4, valuePtr, &v41);
                }
                else
                {
                  CFCalendarDecomposeAbsoluteTime(a5, at, "dMy", (char *)valuePtr + 4, valuePtr, &v41);
                }
                int v34 = valuePtr[0];
                a9[3] = HIDWORD(valuePtr[0]);
                a9[4] = v34;
                a9[5] = v41;
                uint64_t v33 = a9 + 8;
              }
              _DWORD *v33 = -1;
              if (a8)
              {
                if (CFDictionaryContainsKey(v19, @"Calendar"))
                {
                  CFStringRef v35 = (const __CFString *)CFDictionaryGetValue(v19, @"Calendar");
                  CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(v25, 0, v35);
                  v39[0] = MutableCopy;
                  CFStringLowercase(MutableCopy, 0);
                  CFStringRef v37 = CFStringCreateWithFormat(v25, 0, @"holiday-%@-%@-%@", a2, MutableCopy, a4);
                  CFStringAppend(a8, v37);
                  if (v37) {
                    CFRelease(v37);
                  }
                  if (MutableCopy) {
                    CFRelease(MutableCopy);
                  }
                }
                else
                {
                  v39[0] = CFStringCreateWithFormat(v25, 0, @"holiday-%@-gregorian-%@", a2, a4);
                  CFStringAppend(a8, (CFStringRef)v39[0]);
                  nlp::CFScopedPtr<__CFString const*>::reset(v39, 0);
                }
              }
              uint64_t v9 = 1;
              goto LABEL_42;
            }
          }
          return 0;
        }
      }
    }
  }
  return v9;
}

void sub_224DF5BB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, const void *);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, const void *);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  nlp::CFScopedPtr<__CFCalendar *>::reset((const void **)va1, 0);
  nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)va2, 0);
  _Unwind_Resume(a1);
}

uint64_t QP::updateDateComponentsWithHolidayDisplayKey(uint64_t a1, const __CFString *a2, __CFCalendar *a3, uint64_t a4, int a5, _DWORD *a6)
{
  if (!a2) {
    return 0;
  }
  CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings((CFAllocatorRef)*MEMORY[0x263EFFB08], a2, @"-");
  v19[2] = ArrayBySeparatingStrings;
  if (CFArrayGetCount(ArrayBySeparatingStrings) != 4)
  {
    uint64_t updated = 0;
    if (!ArrayBySeparatingStrings) {
      return updated;
    }
LABEL_11:
    CFRelease(ArrayBySeparatingStrings);
    return updated;
  }
  CFStringRef ValueAtIndex = (__CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 1);
  CFStringRef v12 = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 2);
  CFStringRef v13 = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 3);
  BOOL v15 = *(QP::HolidayReference **)a1;
  uint64_t v16 = *(atomic_ullong **)(a1 + 8);
  v19[0] = v15;
  v19[1] = (QP::HolidayReference *)v16;
  if (v16) {
    atomic_fetch_add_explicit(v16 + 1, 1uLL, memory_order_relaxed);
  }
  uint64_t updated = QP::updateDateComponentsWithHoliday(v19, ValueAtIndex, v12, v13, a3, v14, a5, 0, a6);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v16);
  }
  if (ArrayBySeparatingStrings) {
    goto LABEL_11;
  }
  return updated;
}

void sub_224DF5D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  nlp::CFScopedPtr<__CFArray const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

CFStringRef QP::copyDisplayKeyForPeriodDate(QP *this, const QP::DateComponents *a2, const QP::DateComponents *a3)
{
  uint64_t v3 = *((unsigned int *)a2 + 3);
  if ((v3 & 0x80000000) != 0
    && (uint64_t v3 = *((unsigned int *)a2 + 5), (v3 & 0x80000000) != 0)
    && (uint64_t v3 = *((unsigned int *)a2 + 11), (v3 & 0x80000000) != 0))
  {
    uint64_t v3 = 1;
  }
  else
  {
    if (v3 == 3)
    {
      int v4 = *((_DWORD *)this + 7) - 1;
      if (v4 < 7)
      {
        CFSetRef v5 = off_264706008;
        return v5[v4];
      }
      return 0;
    }
    if (v3 == 2)
    {
      int v4 = *((_DWORD *)this + 7) - 1;
      if (v4 < 7)
      {
        CFSetRef v5 = off_264705FD0;
        return v5[v4];
      }
      return 0;
    }
  }
  switch(*((_DWORD *)this + 7))
  {
    case 1:
    case 3:
      CFStringRef result = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"VAL_%d-N_EVERY_MORNING", v3);
      break;
    case 2:
    case 5:
      CFStringRef result = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"VAL_%d-N_EVERY_AFTERNOON", v3);
      break;
    case 4:
      CFStringRef result = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"VAL_%d-N_EVERY_NOON", v3);
      break;
    case 6:
      CFStringRef result = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"VAL_%d-N_EVERY_EVENING", v3);
      break;
    case 7:
      CFStringRef result = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"VAL_%d-N_EVERY_NIGHT", v3);
      break;
    default:
      return 0;
  }
  return result;
}

__CFString *QP::copyDisplayKeyForOrdinalDate(QP *this, const QP::DateComponents *a2, const QP::DateComponents *a3)
{
  uint64_t v5 = *((unsigned int *)a2 + 3);
  if ((v5 & 0x80000000) != 0)
  {
    uint64_t v5 = *((unsigned int *)a2 + 4);
    if ((v5 & 0x80000000) != 0)
    {
      uint64_t v5 = *((unsigned int *)a2 + 5);
      if ((v5 & 0x80000000) != 0)
      {
        int v6 = *((_DWORD *)a2 + 11);
        if (v6 < 0) {
          uint64_t v5 = 1;
        }
        else {
          uint64_t v5 = v6;
        }
      }
    }
  }
  int v7 = *((_DWORD *)this + 9);
  if (v7 < 0)
  {
    if (QP::DateComponents::isTime(this)
      || (int32x4_t v9 = *(int32x4_t *)((char *)this + 4),
          v9.i32[2] = *(_DWORD *)this,
          v9.i32[3] = *((_DWORD *)this + 7),
          v10.i64[0] = -1,
          v10.i64[1] = -1,
          (vmaxv_u16((uint16x4_t)vmovn_s32(vcgtq_s32(v9, v10))) & 1) != 0)
      && (*((_DWORD *)a2 + 3) & 0x80000000) == 0)
    {
      if ((v5 - 1) >= 3) {
        return (__CFString *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"FORMATTED:VAL_%d-N_EVERY_TIME", v5);
      }
      else {
        return off_264706040[(int)v5 - 1];
      }
    }
    else if (v5 == 2)
    {
      return @"FORMATTED:EVERY_TWO_DATE";
    }
    else if (v5 == 3)
    {
      return @"FORMATTED:EVERY_THREE_DATE";
    }
    else
    {
      return (__CFString *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"FORMATTED:VAL_%d-N_EVERY_DATE", v5);
    }
  }
  else
  {
    switch(v7)
    {
      case 3:
        return (__CFString *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"FORMATTED:3_%d_ORDINAL_WEEKDAY", *((unsigned int *)this + 8));
      case 2:
        return (__CFString *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"FORMATTED:2_%d_ORDINAL_WEEKDAY", *((unsigned int *)this + 8));
      case 1:
        return (__CFString *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"FORMATTED:1_%d_ORDINAL_WEEKDAY", *((unsigned int *)this + 8));
      default:
        return (__CFString *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"FORMATTED:VAL_%d-N_%d_ORDINAL_WEEKDAY", *((unsigned int *)this + 9), *((unsigned int *)this + 8));
    }
  }
}

uint64_t QP::DateConverter::loadDateReferenceResourceURL(QP::DateConverter *this, CFURLRef url)
{
  if (url)
  {
    CFStringRef v2 = CFURLCopyPathExtension(url);
    if (CFStringsAreEqual(v2, @"mdplist")) {
      operator new();
    }
    if (v2) {
      CFRelease(v2);
    }
  }
  return 0;
}

void sub_224DF618C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x22A623E20](v2, 0x1070C40D30B4D84);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

void std::shared_ptr<QP::HolidayReference>::reset[abi:ne180100]<QP::HolidayReference,void>(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<QP::HolidayReference>::shared_ptr[abi:ne180100]<QP::HolidayReference,void>(&v2, a2);
}

void QP::DateConverter::clearResources(QP::DateConverter *this)
{
  long long v2 = (std::__shared_weak_count *)*((void *)this + 3);
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

BOOL QP::DateConverter::isValid(QP::DateConverter *this, QP::DatePeriod *a2)
{
  uint64_t v4 = *(void *)this;
  if (*(unsigned char *)(*(void *)this + 23))
  {
    int v5 = *((_DWORD *)a2 + 2);
    if (v5 < 91)
    {
      if (v5 > 54) {
        return 0;
      }
      if ((v5 - 1) <= 1)
      {
        int v7 = *((_DWORD *)a2 + 10);
        QP::getCurrentDateComponents(*(__CFCalendar **)(v4 + 80), *(__CFCalendar **)(v4 + 72), (uint64_t)v10);
        if ((v7 & 0x80000000) == 0 && v7 > v11) {
          return 0;
        }
      }
    }
    else if (v5 < 0x69)
    {
      return 0;
    }
  }
  else if (*(unsigned char *)(v4 + 24))
  {
    int v6 = *((_DWORD *)a2 + 2);
    if (v6 < 19)
    {
      if ((v6 - 1) <= 1)
      {
        int v8 = *((_DWORD *)a2 + 10);
        QP::getCurrentDateComponents(*(__CFCalendar **)(v4 + 80), *(__CFCalendar **)(v4 + 72), (uint64_t)v10);
        if ((v8 & 0x80000000) == 0 && v8 < v11) {
          return 0;
        }
      }
    }
    else if (v6 < 0x37)
    {
      return 0;
    }
  }
  return !*(unsigned char *)(*(void *)this + 25) || (*((_DWORD *)a2 + 2) - 105) >= 0x10;
}

__CFCalendar *QP::getCurrentDateComponents@<X0>(__CFCalendar *this@<X0>, __CFCalendar *a2@<X1>, uint64_t a3@<X8>)
{
  *(_DWORD *)(a3 + 48) = -1;
  *(void *)&long long v5 = -1;
  *((void *)&v5 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = -1;
  *(_OWORD *)(a3 + 16) = v5;
  *(_OWORD *)(a3 + 32) = v5;
  *(_OWORD *)a3 = v5;
  if (this)
  {
    int v6 = this;
    CFAbsoluteTime CurrentTime = getCurrentTime(this, a2);
    return (__CFCalendar *)CFCalendarDecomposeAbsoluteTime(v6, CurrentTime, "dEMywYHms", a3 + 12, a3 + 32, a3 + 16, a3 + 20, a3 + 44, a3 + 48, a3 + 8, a3 + 4, a3);
  }
  return this;
}

void QP::DateConverter::datePeriodForValues(CFStringRef theString@<X1>, const __CFDictionary *a2@<X2>, void *a3@<X8>)
{
  if (theString)
  {
    CFIndex Length = CFStringGetLength(theString);
    if (a2)
    {
      if (Length && !CFStringHasPrefix(theString, @"Formatted")) {
        operator new();
      }
    }
  }
  *a3 = 0;
}

void sub_224DF662C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)va, 0);
  _Unwind_Resume(a1);
}

uint64_t QP::DateConverter::updatePeriodForCalendar(QP::ParserConfiguration **this, const __CFString *a2, CFDictionaryRef theDict, QP::DatePeriod *a4)
{
  uint64_t updated = 0;
  uint64_t v49 = *MEMORY[0x263EF8340];
  if (a2 && theDict)
  {
    CFStringRef Value = (const __CFString *)CFDictionaryGetValue(theDict, @"CalendarSystem");
    if (!Value) {
      return 0;
    }
    CFStringRef v10 = Value;
    CFLocaleRef v11 = (const __CFLocale *)*((void *)*this + 13);
    CFStringRef v12 = (const __CFString *)MEMORY[0x22A623110](*((void *)*this + 10));
    if (!CFStringHasPrefix(v10, @"generic") && CFStringFind(v10, v12, 0).location == -1) {
      return 0;
    }
    int HasPrefix = CFStringHasPrefix(a2, @"Ambiguous");
    int HasSuffix = CFStringHasSuffix(a2, @"Time");
    BOOL v15 = @"Ambiguoustime";
    if (!HasSuffix) {
      BOOL v15 = @"Ambiguousdate";
    }
    uint64_t v16 = @"Date";
    if (HasSuffix) {
      uint64_t v16 = @"Time";
    }
    if (HasPrefix) {
      int v17 = v15;
    }
    else {
      int v17 = v16;
    }
    CFStringRef v48 = 0;
    uint64_t updated = (uint64_t)CFLocaleGetValue(v11, (CFLocaleKey)*MEMORY[0x263EFFCF0]);
    CFStringRef v18 = (const __CFString *)CFLocaleGetValue(v11, (CFLocaleKey)*MEMORY[0x263EFFCB0]);
    ScriptCFIndex Code = getScriptCode((__CFString *)v11);
    if (!QP::ParserConfiguration::regionValidForLanguage(*this, (const __CFString *)updated, ScriptCode, v18)) {
      CFStringRef v18 = (const __CFString *)QP::ParserConfiguration::canonicalRegionForLanguage(*this, (const __CFString *)updated, ScriptCode, v18);
    }
    BOOL v20 = !updated || ScriptCode == 0;
    BOOL v21 = !v20;
    if (!v21 || v18 == 0)
    {
      if (v21)
      {
        CFStringRef v23 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"%@_%@_%@_%@", v17, v10, updated, ScriptCode);
      }
      else if (updated && v18)
      {
        CFStringRef v23 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"%@_%@_%@_%@", v17, v10, updated, v18);
      }
      else
      {
        if (!updated) {
          return updated;
        }
        CFStringRef v23 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"%@_%@_%@", v17, v10, updated);
      }
    }
    else
    {
      CFStringRef v23 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"%@_%@_%@_%@_%@", v17, v10, updated, ScriptCode, v18);
    }
    CFStringRef v24 = v23;
    CFStringRef v48 = v23;
    if (v23)
    {
      CFDictionaryRef v25 = (const __CFDictionary *)CFDictionaryGetValue(theDict, v23);
      if (!v25) {
        goto LABEL_47;
      }
      int v47 = -1;
      *(void *)&long long v26 = -1;
      *((void *)&v26 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = -1;
      long long v45 = v26;
      long long v46 = v26;
      long long v44 = v26;
      int v27 = *this;
      CFStringRef v28 = (std::__shared_weak_count *)this[1];
      v43[0] = v27;
      v43[1] = v28;
      if (v28) {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t updated = QP::updateDateComponentsWithValues((uint64_t)v43, (SInt32 *)&v44, v25, 0);
      if (v28) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v28);
      }
      if (updated)
      {
        CFIndex Count = CFDictionaryGetCount(v25);
        v42[1] = v42;
        MEMORY[0x270FA5388](Count);
        uint64_t v31 = (const void **)((char *)v42 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
        if (v30 >= 0x200) {
          size_t v32 = 512;
        }
        else {
          size_t v32 = v30;
        }
        bzero((char *)v42 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0), v32);
        CFDictionaryGetKeysAndValues(v25, v31, 0);
        if (Count < 1)
        {
          char v34 = 0;
          unsigned __int8 v33 = 0;
          char v35 = 1;
        }
        else
        {
          unsigned __int8 v33 = 0;
          char v34 = 0;
          char v35 = 1;
          do
          {
            CFStringRef v36 = (const __CFString *)*v31;
            if (CFStringCompare((CFStringRef)*v31, @"hh", 0) && CFStringCompare(v36, @"HH", 0))
            {
              BOOL v37 = CFEqual(v36, @"mm");
              v35 &= v37;
              v33 |= v37;
            }
            else
            {
              char v34 = 1;
            }
            ++v31;
            --Count;
          }
          while (Count);
        }
        long long v38 = v45;
        *(_OWORD *)((char *)a4 + 2std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = v44;
        *(_OWORD *)((char *)a4 + 36) = v38;
        *(_OWORD *)((char *)a4 + 52) = v46;
        *((_DWORD *)a4 + 17) = v47;
        *(void *)&long long v39 = -1;
        *((void *)&v39 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = -1;
        *(_OWORD *)((char *)a4 + 72) = v39;
        *(_OWORD *)((char *)a4 + 88) = v39;
        *(_OWORD *)((char *)a4 + 104) = v39;
        *((_DWORD *)a4 + 3std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = -1;
        QP::DatePeriod::setDisplayKey((const void **)a4, @"FORMATTED");
        if ((v35 & v34) & v33) {
          int v40 = 121;
        }
        else {
          int v40 = 2;
        }
        *((_DWORD *)a4 + 2) = v40;
      }
      else
      {
LABEL_47:
        uint64_t updated = 0;
      }
      CFRelease(v24);
    }
    else
    {
      return 0;
    }
  }
  return updated;
}

void sub_224DF6AC8(_Unwind_Exception *a1)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v2 - 96), 0);
  _Unwind_Resume(a1);
}

uint64_t QP::DateConverter::updatePeriodForFormattedDate(std::__shared_weak_count **this, const __CFString *a2, CFDictionaryRef theDict, QP::DatePeriod *a4)
{
  if (!theDict) {
    return 0;
  }
  long long v5 = *this;
  shared_weak_owners = (__CFCalendar *)(*this)[3].__shared_weak_owners_;
  if (!shared_weak_owners) {
    return 0;
  }
  uint64_t shared_owners = v5[4].__shared_owners_;
  if (!shared_owners) {
    return 0;
  }
  CFDateRef v11 = (const __CFDate *)v5[3].__vftable;
  CFStringRef v12 = @"FormattedDate";
  if (!CFDictionaryContainsKey(theDict, @"FormattedDate"))
  {
    CFStringRef v12 = @"FormattedRecurringDate";
    if (!CFDictionaryContainsKey(theDict, @"FormattedRecurringDate"))
    {
      CFStringRef v12 = @"FormattedTime";
      if (!CFDictionaryContainsKey(theDict, @"FormattedTime")) {
        return 0;
      }
    }
  }
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, v12);
  if (!Value) {
    return 0;
  }
  int v50 = -1;
  *(void *)&long long v14 = -1;
  *((void *)&v14 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = -1;
  long long v48 = v14;
  long long v49 = v14;
  long long v47 = v14;
  int v46 = -1;
  long long v44 = v14;
  long long v45 = v14;
  long long v43 = v14;
  int v42 = -1;
  long long v40 = v14;
  long long v41 = v14;
  long long v39 = v14;
  BOOL v15 = this[1];
  v38[0] = *this;
  v38[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t updated = QP::updateDateComponentsWithValues((uint64_t)v38, (SInt32 *)&v47, Value, 0);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (updated)
  {
    QP::DatePeriod::setDisplayKey((const void **)a4, @"FORMATTED");
    *((_DWORD *)a4 + 2) = 2;
    int v17 = BYTE3((*this)[1].__vftable);
    int v18 = BYTE2((*this)[1].__vftable);
    double CurrentTime = getCurrentTime(shared_weak_owners, v11);
    double AbsoluteTime = QP::DateComponents::getAbsoluteTime((QP::DateComponents *)&v47, shared_weak_owners, v11);
    if (CFStringHasPrefix(a2, @"This"))
    {
      if (v17 && AbsoluteTime > CurrentTime)
      {
        int v21 = *((_DWORD *)a4 + 2);
        uint64_t v22 = (uint64_t)shared_weak_owners;
        uint64_t v23 = shared_owners;
        CFDateRef v24 = v11;
        uint64_t v25 = 0xFFFFFFFFLL;
      }
      else
      {
        int v21 = *((_DWORD *)a4 + 2);
        if (v18 && AbsoluteTime < CurrentTime)
        {
          uint64_t v22 = (uint64_t)shared_weak_owners;
          uint64_t v23 = shared_owners;
          CFDateRef v24 = v11;
          uint64_t v25 = 1;
        }
        else
        {
          uint64_t v22 = (uint64_t)shared_weak_owners;
          uint64_t v23 = shared_owners;
          CFDateRef v24 = v11;
          uint64_t v25 = 0;
        }
      }
      QP::updateDateComponentsWithRelativeDateOffset(v22, v23, v24, (QP::DateComponents *)&v47, v21, 1, 0, v25);
      int v27 = 17;
    }
    else if (CFStringHasPrefix(a2, @"Last"))
    {
      QP::updateDateComponentsWithRelativeDateOffset((uint64_t)shared_weak_owners, shared_owners, v11, (QP::DateComponents *)&v47, *((_DWORD *)a4 + 2), 1, 0, 0xFFFFFFFFLL);
      if (QP::DateComponents::getAbsoluteTime((QP::DateComponents *)&v47, shared_weak_owners, v11) > CurrentTime) {
        QP::updateDateComponentsWithRelativeDateOffset((uint64_t)shared_weak_owners, shared_owners, v11, (QP::DateComponents *)&v47, *((_DWORD *)a4 + 2), 1, 0, 0xFFFFFFFFLL);
      }
      int v27 = 29;
    }
    else
    {
      if (!CFStringHasPrefix(a2, @"Next"))
      {
        if (CFStringHasPrefix(a2, @"Every"))
        {
          if (CFStringHasPrefix(a2, @"EveryNum"))
          {
            int v35 = QP::intValueForNumberInValues((QP *)(*this)[4].__shared_owners_, theDict, v33);
          }
          else if (CFStringHasPrefix(a2, @"EveryTwo"))
          {
            int v35 = 2;
          }
          else
          {
            int v35 = 1;
          }
          if ((HIDWORD(v48) & 0x80000000) != 0)
          {
            if ((v47 & 0x80000000) != 0)
            {
              if ((DWORD1(v47) & 0x80000000) != 0)
              {
                if ((DWORD2(v47) & 0x80000000) != 0)
                {
                  if ((v49 & 0x80000000) != 0)
                  {
                    if ((HIDWORD(v47) & 0x80000000) != 0 && (v48 & 0x80000000) != 0)
                    {
                      if ((DWORD1(v48) & 0x80000000) == 0) {
                        DWORD1(v4std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = v35;
                      }
                    }
                    else
                    {
                      DWORD1(v4std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = v35;
                    }
                  }
                  else
                  {
                    HIDWORD(v4QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = v35;
                  }
                }
                else
                {
                  DWORD2(v39) = v35;
                }
              }
              else
              {
                DWORD1(v39) = v35;
              }
            }
            else
            {
              LODWORD(v39) = v35;
            }
          }
          else
          {
            HIDWORD(v39) = v35;
          }
          BOOL v37 = QP::copyDisplayKeyForOrdinalDate((QP *)&v47, (const QP::DateComponents *)&v39, v34);
          QP::DatePeriod::setDisplayKey((const void **)a4, v37);
          if (v35 <= 1) {
            int v36 = 103;
          }
          else {
            int v36 = 118;
          }
          *((_DWORD *)a4 + 2) = v36;
          nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v37, 0);
        }
        goto LABEL_29;
      }
      QP::updateDateComponentsWithRelativeDateOffset((uint64_t)shared_weak_owners, shared_owners, v11, (QP::DateComponents *)&v47, *((_DWORD *)a4 + 2), 1, 0, 1);
      if (QP::DateComponents::getAbsoluteTime((QP::DateComponents *)&v47, shared_weak_owners, v11) < CurrentTime) {
        QP::updateDateComponentsWithRelativeDateOffset((uint64_t)shared_weak_owners, shared_owners, v11, (QP::DateComponents *)&v47, *((_DWORD *)a4 + 2), 1, 0, 1);
      }
      int v27 = 65;
    }
    *((_DWORD *)a4 + 2) = v27;
LABEL_29:
    long long v28 = v48;
    *(_OWORD *)((char *)a4 + 2std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = v47;
    *(_OWORD *)((char *)a4 + 36) = v28;
    *(_OWORD *)((char *)a4 + 52) = v49;
    *((_DWORD *)a4 + 17) = v50;
    long long v29 = v44;
    *(_OWORD *)((char *)a4 + 72) = v43;
    *(_OWORD *)((char *)a4 + 88) = v29;
    *(_OWORD *)((char *)a4 + 104) = v45;
    *((_DWORD *)a4 + 3std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = v46;
    long long v30 = v39;
    long long v31 = v40;
    long long v32 = v41;
    *((_DWORD *)a4 + 43) = v42;
    *(_OWORD *)((char *)a4 + 156) = v32;
    *(_OWORD *)((char *)a4 + 14std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = v31;
    *(_OWORD *)((char *)a4 + 124) = v30;
  }
  return updated;
}

void sub_224DF6FB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t QP::DateConverter::updatePeriodForPeriodTime(std::__shared_weak_count **this, const __CFString *a2, CFDictionaryRef theDict, QP::DatePeriod *a4)
{
  uint64_t v4 = (uint64_t)theDict;
  if (theDict)
  {
    int v6 = *this;
    shared_weak_owners = (__CFCalendar *)(*this)[3].__shared_weak_owners_;
    if (shared_weak_owners)
    {
      uint64_t shared_owners = v6[4].__shared_owners_;
      if (shared_owners)
      {
        CFDateRef v11 = (const __CFDate *)v6[3].__vftable;
        CFStringRef v12 = @"FormattedPeriod";
        if (CFDictionaryContainsKey(theDict, @"FormattedPeriod")
          || (CFStringRef v12 = @"FormattedRecurringPeriod",
              CFDictionaryContainsKey((CFDictionaryRef)v4, @"FormattedRecurringPeriod")))
        {
          CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)v4, v12);
          if (Value)
          {
            int v41 = -1;
            *(void *)&long long v14 = -1;
            *((void *)&v14 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = -1;
            long long v39 = v14;
            long long v40 = v14;
            long long v38 = v14;
            int v37 = -1;
            long long v35 = v14;
            long long v36 = v14;
            long long v34 = v14;
            BOOL v15 = this[1];
            v33[0] = *this;
            v33[1] = v15;
            if (v15) {
              atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            char updated = QP::updateDateComponentsWithValues((uint64_t)v33, (SInt32 *)&v38, Value, 0);
            if (v15) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v15);
            }
            if (updated)
            {
              QP::DatePeriod::setDisplayKey((const void **)a4, @"FORMATTED");
              *((_DWORD *)a4 + 2) = 3;
              int v17 = BYTE3((*this)[1].__vftable);
              int v18 = BYTE2((*this)[1].__vftable);
              double CurrentTime = getCurrentTime(shared_weak_owners, v11);
              double AbsoluteTime = QP::DateComponents::getAbsoluteTime((QP::DateComponents *)&v38, shared_weak_owners, v11);
              if (!CFStringHasPrefix(a2, @"This"))
              {
                if (!CFStringHasPrefix(a2, @"Last"))
                {
                  if (CFStringHasPrefix(a2, @"Next"))
                  {
                    uint64_t v4 = 1;
                    QP::updateDateComponentsWithRelativeUnitOffset((uint64_t)shared_weak_owners, shared_owners, v11, (QP::DateComponents *)&v38, *((_DWORD *)a4 + 2), 1, 0);
                    *((_DWORD *)a4 + 2) = 66;
                    goto LABEL_27;
                  }
                  if (CFStringHasPrefix(a2, @"Every"))
                  {
                    if (CFStringHasPrefix(a2, @"EveryNum"))
                    {
                      int v29 = QP::intValueForNumberInValues((QP *)(*this)[4].__shared_owners_, (CFDictionaryRef)v4, v27);
                    }
                    else if (CFStringHasPrefix(a2, @"EveryTwo"))
                    {
                      int v29 = 2;
                    }
                    else
                    {
                      int v29 = 1;
                    }
                    HIDWORD(v34) = v29;
                    CFStringRef v30 = QP::copyDisplayKeyForPeriodDate((QP *)&v38, (const QP::DateComponents *)&v34, v28);
                    CFStringRef v32 = v30;
                    if (v29 <= 1) {
                      int v31 = 104;
                    }
                    else {
                      int v31 = 119;
                    }
                    *((_DWORD *)a4 + 2) = v31;
                    QP::DatePeriod::setDisplayKey((const void **)a4, v30);
                    uint64_t v4 = v30 != 0;
                    nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v32, 0);
                    goto LABEL_27;
                  }
LABEL_26:
                  uint64_t v4 = 1;
LABEL_27:
                  long long v24 = v39;
                  *(_OWORD *)((char *)a4 + 2std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = v38;
                  *(_OWORD *)((char *)a4 + 36) = v24;
                  *(_OWORD *)((char *)a4 + 52) = v40;
                  *(void *)&long long v25 = -1;
                  *((void *)&v25 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = -1;
                  *(_OWORD *)((char *)a4 + 72) = v25;
                  *(_OWORD *)((char *)a4 + 88) = v25;
                  *(_OWORD *)((char *)a4 + 104) = v25;
                  *(_OWORD *)((char *)a4 + 156) = v36;
                  long long v26 = v34;
                  *(_OWORD *)((char *)a4 + 14std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = v35;
                  *((_DWORD *)a4 + 17) = v41;
                  *((_DWORD *)a4 + 3std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = -1;
                  *((_DWORD *)a4 + 43) = v37;
                  *(_OWORD *)((char *)a4 + 124) = v26;
                  return v4;
                }
                QP::updateDateComponentsWithRelativeUnitOffset((uint64_t)shared_weak_owners, shared_owners, v11, (QP::DateComponents *)&v38, *((_DWORD *)a4 + 2), 0xFFFFFFFFLL, 0);
                int v23 = 30;
LABEL_25:
                *((_DWORD *)a4 + 2) = v23;
                goto LABEL_26;
              }
              if (v17 && AbsoluteTime > CurrentTime)
              {
                uint64_t v21 = 0xFFFFFFFFLL;
              }
              else
              {
                if (!v18 || AbsoluteTime >= CurrentTime) {
                  goto LABEL_24;
                }
                uint64_t v21 = 1;
              }
              QP::updateDateComponentsWithRelativeUnitOffset((uint64_t)shared_weak_owners, shared_owners, v11, (QP::DateComponents *)&v38, *((_DWORD *)a4 + 2), v21, 0);
LABEL_24:
              int v23 = 18;
              goto LABEL_25;
            }
          }
        }
      }
    }
    return 0;
  }
  return v4;
}

void sub_224DF732C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t QP::DateConverter::updatePeriodForHolidayCompoundDate(std::__shared_weak_count **this, CFDictionaryRef theDict, QP::DatePeriod *a3)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  if (!theDict
    || !CFDictionaryContainsKey(theDict, @"HolidayDate")
    || !(*this)[4].__shared_owners_
    || !(*this)[3].__shared_owners_)
  {
    return 0;
  }
  CFTypeRef v30 = 0;
  int v31 = 0;
  __int16 v32 = 0;
  int v33 = 0;
  *(void *)&long long v6 = -1;
  *((void *)&v6 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = -1;
  long long v34 = v6;
  long long v35 = v6;
  long long v36 = v6;
  v37[0] = v6;
  v37[1] = v6;
  v37[2] = v6;
  v37[3] = v6;
  v37[4] = v6;
  *(_OWORD *)long long v38 = v6;
  *(_OWORD *)&v38[12] = v6;
  CFIndex Count = CFDictionaryGetCount(theDict);
  v24[1] = v24;
  MEMORY[0x270FA5388](Count);
  int32x4_t v9 = (const void **)((char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (v8 >= 0x200) {
    size_t v10 = 512;
  }
  else {
    size_t v10 = v8;
  }
  bzero((char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  CFDictionaryGetKeysAndValues(theDict, v9, 0);
  if (Count >= 1)
  {
    v24[0] = &v34;
    do
    {
      CFStringRef v11 = (const __CFString *)*v9;
      if (!CFStringHasPrefix((CFStringRef)*v9, @"HolidayDate"))
      {
        if (CFStringHasPrefix(v11, @"Relative"))
        {
          QP::DateConverter::updatePeriodForRelativeDate((QP::DateConverter *)this, v11, (QP::DatePeriod *)&v30);
        }
        else if (CFStringHasSuffix(v11, @"Date"))
        {
          CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, v11);
          if (Value && (QP::DateConverter::updatePeriodForValueDate(this, v11, Value, (QP::DatePeriod *)&v30) & 1) == 0) {
            goto LABEL_35;
          }
        }
        else
        {
          int v29 = -1;
          *(void *)&long long v13 = -1;
          *((void *)&v13 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = -1;
          long long v27 = v13;
          long long v28 = v13;
          long long v26 = v13;
          long long v14 = this[1];
          v25[0] = *this;
          v25[1] = v14;
          if (v14) {
            atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          char updated = QP::updateDateComponentsWithValues((uint64_t)v25, (SInt32 *)&v26, theDict, 0);
          if (v14) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v14);
          }
          if ((updated & 1) == 0)
          {
LABEL_35:
            uint64_t v19 = 0;
            goto LABEL_51;
          }
          long long v16 = v27;
          uint64_t v17 = v24[0];
          *(_OWORD *)v24[0] = v26;
          *(_OWORD *)(v17 + 16) = v16;
          *(_OWORD *)(v17 + 32) = v28;
          *(_DWORD *)(v17 + 48) = v29;
          *(void *)&long long v18 = -1;
          *((void *)&v18 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = -1;
          *(_OWORD *)((char *)v37 + 4) = v18;
          *(_OWORD *)((char *)&v37[1] + 4) = v18;
          *(_OWORD *)((char *)&v37[2] + 4) = v18;
          DWORD1(v37[3]) = -1;
          int v31 = 1;
        }
      }
      ++v9;
      --Count;
    }
    while (Count);
  }
  if ((v31 - 6) >= 0xD)
  {
    if ((v31 - 19) >= 0xC)
    {
      if ((v31 - 55) >= 0xC)
      {
        if ((v31 - 78) >= 0xB)
        {
          if ((v31 - 67) >= 0xB)
          {
            if ((v31 - 31) >= 0xB)
            {
              if ((v31 - 42) >= 0xB)
              {
                if ((v31 - 91) >= 0xE) {
                  int v21 = v31;
                }
                else {
                  int v21 = 102;
                }
              }
              else
              {
                int v21 = 51;
              }
            }
            else
            {
              int v21 = 40;
            }
          }
          else
          {
            int v21 = 76;
          }
        }
        else
        {
          int v21 = 87;
        }
      }
      else
      {
        int v21 = 64;
      }
    }
    else
    {
      int v21 = 28;
    }
  }
  else
  {
    int v21 = 16;
  }
  int v22 = DWORD1(v35);
  *(void *)((char *)a3 + 2std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = -1;
  *(void *)((char *)a3 + 28) = -1;
  *((_DWORD *)a3 + 9) = -1;
  *((_DWORD *)a3 + 1std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = v22;
  *(void *)((char *)a3 + 44) = -1;
  *(void *)((char *)a3 + 52) = -1;
  *(void *)((char *)a3 + 6std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = -1;
  *((_DWORD *)a3 + 17) = -1;
  CFDictionaryRef v23 = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"HolidayDate");
  uint64_t v19 = QP::DateConverter::updatePeriodForHolidayDate((atomic_ullong **)this, v23, a3);
  if (v19)
  {
    if (v21 == 1 || v21 == 89 || v21 == 53) {
      QP::DatePeriod::setDisplayKey((const void **)a3, @"FORMATTED");
    }
    *((_DWORD *)a3 + 2) = v21;
  }
LABEL_51:
  if (v30) {
    CFRelease(v30);
  }
  return v19;
}

void sub_224DF772C(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

atomic_ullong QP::DateConverter::updatePeriodForHolidayRelativeDate(atomic_ullong **this, const __CFString *a2, CFDictionaryRef theDict, QP::DatePeriod *a4)
{
  atomic_ullong result = 0;
  if (a2)
  {
    if (theDict)
    {
      atomic_ullong result = CFDictionaryContainsKey(theDict, @"HolidayDate");
      if (result)
      {
        int32x4_t v9 = *this;
        if (!(*this)[13]) {
          return 0;
        }
        atomic_ullong result = v9[10];
        if (result)
        {
          QP::getCurrentDateComponents((__CFCalendar *)result, (__CFCalendar *)v9[9], (uint64_t)v14);
          if (CFStringHasSuffix(a2, @"ThisDate"))
          {
            int v10 = 16;
            int v11 = -1;
LABEL_8:
            int v12 = v15;
            goto LABEL_19;
          }
          if (CFStringHasSuffix(a2, @"LastLastDate"))
          {
            int v12 = v15 - 2;
            int v10 = 40;
          }
          else if (CFStringHasSuffix(a2, @"LastDate"))
          {
            int v12 = v15 - 1;
            int v10 = 28;
          }
          else if (CFStringHasSuffix(a2, @"NextNextDate"))
          {
            int v12 = v15 + 2;
            int v10 = 87;
          }
          else if (CFStringHasSuffix(a2, @"NextDate"))
          {
            int v12 = v15 + 1;
            int v10 = 64;
          }
          else
          {
            if (CFStringHasSuffix(a2, @"EveryDate"))
            {
              int v10 = 102;
              int v11 = 1;
              goto LABEL_8;
            }
            int v10 = 1;
            int v12 = -1;
          }
          int v11 = -1;
LABEL_19:
          *(void *)((char *)a4 + 28) = -1;
          *(void *)((char *)a4 + 2std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = -1;
          *((_DWORD *)a4 + 9) = -1;
          *((_DWORD *)a4 + 1std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = v12;
          *(void *)((char *)a4 + 44) = -1;
          *(void *)((char *)a4 + 52) = -1;
          *(void *)((char *)a4 + 6std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = -1;
          *((_DWORD *)a4 + 17) = -1;
          *(void *)((char *)a4 + 124) = -1;
          *(void *)((char *)a4 + 132) = -1;
          *((_DWORD *)a4 + 35) = -1;
          *((_DWORD *)a4 + 36) = v11;
          *(void *)((char *)a4 + 148) = -1;
          *(void *)((char *)a4 + 156) = -1;
          *(void *)((char *)a4 + 164) = -1;
          *((_DWORD *)a4 + 43) = -1;
          CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"HolidayDate");
          atomic_ullong result = QP::DateConverter::updatePeriodForHolidayDate(this, Value, a4);
          if (result) {
            *((_DWORD *)a4 + 2) = v10;
          }
        }
      }
    }
  }
  return result;
}

uint64_t QP::DateConverter::updatePeriodForHolidayDate(atomic_ullong **this, CFDictionaryRef theDict, QP::DatePeriod *a3)
{
  if (!theDict) {
    return 0;
  }
  if (!(*this)[13]) {
    return 0;
  }
  uint64_t v4 = (__CFCalendar *)(*this)[11];
  if (!v4) {
    return 0;
  }
  CFDictionaryRef Value = (__CFString *)CFDictionaryGetValue(theDict, @"Identifier");
  CFStringRef v8 = (const __CFString *)CFDictionaryGetValue(theDict, @"CalendarSystem");
  if (!((unint64_t)v8 | (unint64_t)Value)) {
    return 0;
  }
  CFStringRef v9 = v8;
  long long v10 = *(_OWORD *)((char *)a3 + 36);
  long long v41 = *(_OWORD *)((char *)a3 + 20);
  long long v42 = v10;
  long long v43 = *(_OWORD *)((char *)a3 + 52);
  int v44 = *((_DWORD *)a3 + 17);
  long long v11 = *(_OWORD *)((char *)a3 + 88);
  long long v37 = *(_OWORD *)((char *)a3 + 72);
  long long v38 = v11;
  long long v39 = *(_OWORD *)((char *)a3 + 104);
  int v40 = *((_DWORD *)a3 + 30);
  QP::getCurrentDateComponents(v4, (__CFCalendar *)(*this)[9], (uint64_t)v35);
  double AbsoluteTime = QP::DateComponents::getAbsoluteTime((QP::DateComponents *)v35, v4, (const __CFDate *)(*this)[9]);
  int v13 = DWORD1(v42);
  int isEmpty = QP::DateComponents::isEmpty((QP::DateComponents *)&v41);
  if (SDWORD1(v42) < 0) {
    int v15 = 1;
  }
  else {
    int v15 = isEmpty;
  }
  int v31 = v36;
  if (v15) {
    int v16 = v36;
  }
  else {
    int v16 = v13;
  }
  int v17 = *((unsigned __int8 *)*this + 27);
  int v30 = *((unsigned __int8 *)*this + 26);
  CFMutableStringRef MutableCopy = (QP::HolidayReference *)CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, &stru_26D832058);
  BOOL v20 = this[3];
  v34[0] = (QP::HolidayReference *)this[2];
  v34[1] = (QP::HolidayReference *)v20;
  v34[2] = MutableCopy;
  if (v20) {
    atomic_fetch_add_explicit(v20 + 1, 1uLL, memory_order_relaxed);
  }
  int updated = QP::updateDateComponentsWithHoliday(v34, Value, v9, (const __CFString *)(*this)[15], (__CFCalendar *)(*this)[11], v18, v16, (__CFString *)MutableCopy, &v41);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v20);
  }
  if (!updated) {
    goto LABEL_31;
  }
  if (!v15) {
    goto LABEL_33;
  }
  if (v17)
  {
    if (QP::DateComponents::getAbsoluteTime((QP::DateComponents *)&v41, (__CFCalendar *)(*this)[11], (const __CFDate *)(*this)[9]) <= AbsoluteTime)goto LABEL_33; {
    v45.CFIndex length = CFStringGetLength((CFStringRef)MutableCopy);
    }
    v45.uint64_t location = 0;
    CFStringDelete((CFMutableStringRef)MutableCopy, v45);
    CFDictionaryRef v23 = this[3];
    v33[0] = (QP::HolidayReference *)this[2];
    v33[1] = (QP::HolidayReference *)v23;
    if (v23) {
      atomic_fetch_add_explicit(v23 + 1, 1uLL, memory_order_relaxed);
    }
    uint64_t v24 = QP::updateDateComponentsWithHoliday(v33, Value, v9, (const __CFString *)(*this)[15], (__CFCalendar *)(*this)[11], v22, v31 - 1, (__CFString *)MutableCopy, &v41);
  }
  else
  {
    if (!v30
      || QP::DateComponents::getAbsoluteTime((QP::DateComponents *)&v41, (__CFCalendar *)(*this)[11], (const __CFDate *)(*this)[9]) >= AbsoluteTime)
    {
      goto LABEL_33;
    }
    v46.CFIndex length = CFStringGetLength((CFStringRef)MutableCopy);
    v46.uint64_t location = 0;
    CFStringDelete((CFMutableStringRef)MutableCopy, v46);
    CFDictionaryRef v23 = this[3];
    v32[0] = (QP::HolidayReference *)this[2];
    v32[1] = (QP::HolidayReference *)v23;
    if (v23) {
      atomic_fetch_add_explicit(v23 + 1, 1uLL, memory_order_relaxed);
    }
    uint64_t v24 = QP::updateDateComponentsWithHoliday(v32, Value, v9, (const __CFString *)(*this)[15], (__CFCalendar *)(*this)[11], v27, v31 + 1, (__CFString *)MutableCopy, &v41);
  }
  uint64_t v25 = v24;
  if (v23)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v23);
    if ((v25 & 1) == 0)
    {
LABEL_31:
      uint64_t v25 = 0;
      goto LABEL_34;
    }
  }
  else if (!v24)
  {
    goto LABEL_34;
  }
LABEL_33:
  QP::DatePeriod::setDisplayKey((const void **)a3, (const __CFString *)MutableCopy);
  uint64_t v25 = 1;
  *((_DWORD *)a3 + 2) = 1;
  long long v28 = v42;
  *(_OWORD *)((char *)a3 + 2std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = v41;
  *(_OWORD *)((char *)a3 + 36) = v28;
  *(_OWORD *)((char *)a3 + 52) = v43;
  *((_DWORD *)a3 + 17) = v44;
  long long v29 = v38;
  *(_OWORD *)((char *)a3 + 72) = v37;
  *(_OWORD *)((char *)a3 + 88) = v29;
  *(_OWORD *)((char *)a3 + 104) = v39;
  *((_DWORD *)a3 + 3std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = v40;
LABEL_34:
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  return v25;
}

void sub_224DF7C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  nlp::CFScopedPtr<__CFString *>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t QP::DateConverter::updatePeriodForValueCompoundDate(QP::DateConverter *this, const __CFString *a2, CFDictionaryRef theDict, const void **a4)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  if (!theDict) {
    return 0;
  }
  long long v34 = a4;
  CFIndex Count = CFDictionaryGetCount(theDict);
  uint64_t v33 = (uint64_t)&v33;
  MEMORY[0x270FA5388](Count);
  CFStringRef v8 = (const void **)((char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (v7 >= 0x200) {
    size_t v9 = 512;
  }
  else {
    size_t v9 = v7;
  }
  bzero((char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  CFDictionaryGetKeysAndValues(theDict, v8, 0);
  if (Count < 1) {
    goto LABEL_20;
  }
  CFStringRef v10 = 0;
  long long v11 = (char *)v34 + 20;
  int v12 = v34 + 9;
  do
  {
    CFStringRef v13 = (const __CFString *)*v8;
    if (!CFStringHasSuffix((CFStringRef)*v8, @"Date"))
    {
      int v39 = -1;
      *(void *)&long long v14 = -1;
      *((void *)&v14 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = -1;
      long long v37 = v14;
      long long v38 = v14;
      long long v36 = v14;
      int v15 = (std::__shared_weak_count *)*((void *)this + 1);
      v35[0] = *(void *)this;
      v35[1] = v15;
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      QP::updateDateComponentsWithValues((uint64_t)v35, (SInt32 *)&v36, theDict, 0);
      if (v15) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
      long long v16 = v37;
      *(_OWORD *)long long v11 = v36;
      *((_OWORD *)v11 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = v16;
      *((_OWORD *)v11 + 2) = v38;
      *((_DWORD *)v11 + 12) = v39;
      *(void *)&long long v17 = -1;
      *((void *)&v17 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = -1;
      *(_OWORD *)int v12 = v17;
      *((_OWORD *)v12 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = v17;
      *((_OWORD *)v12 + 2) = v17;
      CFStringRef v13 = v10;
      *((_DWORD *)v12 + 12) = -1;
    }
    ++v8;
    CFStringRef v10 = v13;
    --Count;
  }
  while (Count);
  if (!v13)
  {
LABEL_20:
    uint64_t result = 0;
    goto LABEL_21;
  }
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, v13);
  if (CFStringHasPrefix(v13, @"Relative"))
  {
    uint64_t result = QP::DateConverter::updatePeriodForRelativeDate(this, v13, (QP::DatePeriod *)v34);
    if (result)
    {
      if (CFStringContainsString(v13, @"Every"))
      {
        if (CFStringContainsString(v13, @"EveryNum"))
        {
          int v22 = QP::intValueForNumberInValues(*(QP **)(*(void *)this + 104), Value, v20);
        }
        else if (CFStringContainsString(v13, @"EveryTwo"))
        {
          int v22 = 2;
        }
        else if (CFStringContainsString(v13, @"EveryThree"))
        {
          int v22 = 3;
        }
        else
        {
          int v22 = 1;
        }
        int v30 = QP::copyDisplayKeyForOrdinalDate((QP *)v11, (const QP::DateComponents *)((char *)v34 + 124), v21);
        *(void *)&long long v36 = v30;
        CFDictionaryRef v23 = v34;
        QP::DatePeriod::setDisplayKey(v34, v30);
        if (v22 <= 1) {
          int v31 = 103;
        }
        else {
          int v31 = 118;
        }
        *((_DWORD *)v23 + 2) = v31;
        if (!v30) {
          goto LABEL_65;
        }
        goto LABEL_64;
      }
      goto LABEL_38;
    }
    goto LABEL_21;
  }
  CFDictionaryRef v26 = (const __CFDictionary *)CFDictionaryGetValue(theDict, v13);
  if (!CFStringHasPrefix(v13, @"Every"))
  {
    uint64_t result = QP::DateConverter::updatePeriodForValueDate((std::__shared_weak_count **)this, v13, v26, (QP::DatePeriod *)v34);
    if (result)
    {
LABEL_38:
      QP::DatePeriod::setDisplayKey(v34, @"FORMATTED");
      uint64_t result = 1;
    }
LABEL_21:
    CFDictionaryRef v23 = v34;
    goto LABEL_22;
  }
  uint64_t result = QP::DateConverter::updatePeriodForOrdinalDate((std::__shared_weak_count **)this, v13, v26, (QP::DatePeriod *)v34);
  if (!result) {
    goto LABEL_21;
  }
  if (CFStringContainsString(v13, @"EveryNum"))
  {
    int v29 = QP::intValueForNumberInValues(*(QP **)(*(void *)this + 104), v26, v27);
  }
  else if (CFStringContainsString(v13, @"EveryTwo"))
  {
    int v29 = 2;
  }
  else if (CFStringContainsString(v13, @"EveryThree"))
  {
    int v29 = 3;
  }
  else
  {
    int v29 = 1;
  }
  int v30 = QP::copyDisplayKeyForOrdinalDate((QP *)v11, (const QP::DateComponents *)((char *)v34 + 124), v28);
  *(void *)&long long v36 = v30;
  CFDictionaryRef v23 = v34;
  QP::DatePeriod::setDisplayKey(v34, v30);
  if (v29 <= 1) {
    int v32 = 103;
  }
  else {
    int v32 = 118;
  }
  *((_DWORD *)v23 + 2) = v32;
  if (!v30) {
    goto LABEL_65;
  }
LABEL_64:
  CFRelease(v30);
LABEL_65:
  uint64_t result = 1;
LABEL_22:
  int v24 = *((_DWORD *)v23 + 2);
  if ((v24 - 6) < 0xD)
  {
    int v25 = 17;
LABEL_41:
    *((_DWORD *)v23 + 2) = v25;
    return result;
  }
  if ((v24 - 55) < 0xC)
  {
    int v25 = 65;
    goto LABEL_41;
  }
  if ((v24 - 19) < 0xC)
  {
    int v25 = 29;
    goto LABEL_41;
  }
  if ((v24 - 55) < 0x24)
  {
    int v25 = 90;
    goto LABEL_41;
  }
  if ((v24 - 19) < 0x24)
  {
    int v25 = 54;
    goto LABEL_41;
  }
  if ((v24 - 91) < 0xE)
  {
    int v25 = 103;
    goto LABEL_41;
  }
  if ((v24 - 105) <= 0xF)
  {
    int v25 = 118;
    goto LABEL_41;
  }
  return result;
}

void sub_224DF8134(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t QP::DateConverter::updatePeriodForOrdinalDate(std::__shared_weak_count **this, const __CFString *a2, const __CFDictionary *a3, QP::DatePeriod *a4)
{
  if (!a2) {
    return 0;
  }
  long long v5 = *this;
  uint64_t shared_owners = (QP *)(*this)[4].__shared_owners_;
  if (!shared_owners) {
    return 0;
  }
  unint64_t v7 = (__CFCalendar *)v5[3].__shared_owners_;
  if (!v7) {
    return 0;
  }
  at[0] = getCurrentTime((__CFCalendar *)v5[3].__shared_owners_, (const __CFDate *)v5[3].__vftable);
  long long v11 = *(_OWORD *)((char *)a4 + 36);
  long long v68 = *(_OWORD *)((char *)a4 + 20);
  long long v69 = v11;
  long long v70 = *(_OWORD *)((char *)a4 + 52);
  int v71 = *((_DWORD *)a4 + 17);
  int v47 = *((_DWORD *)a4 + 31);
  int v48 = *((_DWORD *)a4 + 32);
  int v12 = *((_DWORD *)a4 + 35);
  int v49 = *((_DWORD *)a4 + 33);
  int v50 = *((_DWORD *)a4 + 34);
  int v13 = *((_DWORD *)a4 + 36);
  long long v14 = *(_OWORD *)((char *)a4 + 148);
  int v15 = *((_DWORD *)a4 + 42);
  int v67 = *((_DWORD *)a4 + 41);
  int v16 = *((_DWORD *)a4 + 43);
  long long v17 = *(_OWORD *)((char *)a4 + 88);
  long long v64 = *(_OWORD *)((char *)a4 + 72);
  long long v65 = v17;
  long long v66 = v14;
  int v18 = *((_DWORD *)a4 + 26);
  uint64_t v63 = *(void *)((char *)a4 + 108);
  unsigned int v53 = *((_DWORD *)a4 + 29);
  int v54 = v18;
  int v51 = v16;
  int v52 = *((_DWORD *)a4 + 30);
  uint64_t v62 = -1;
  int v60 = -1;
  int v61 = -1;
  int v58 = -1;
  unsigned int v59 = -1;
  uint64_t v57 = -1;
  CFCalendarDecomposeAbsoluteTime(v7, at[0], "yMdEwHms", (char *)&v62 + 4, &v62, &v61, &v60, &v59, &v58, (char *)&v57 + 4, &v57);
  int HasSuffix = CFStringHasSuffix(a2, @"EveryNumIsoDayPerMonthDate");
  if (HasSuffix)
  {
    uint64_t v21 = QP::intValueForNumberInValues(shared_owners, a3, v19);
    goto LABEL_8;
  }
  if (!CFStringHasSuffix(a2, @"EveryLastIsoDayPerMonthDate"))
  {
    if (!CFStringHasPrefix(a2, @"EveryNum")) {
      goto LABEL_71;
    }
    uint64_t v26 = QP::intValueForNumberInValues(shared_owners, a3, v25);
    if ((v26 & 0x80000000) == 0)
    {
      uint64_t v27 = v26;
      if (CFStringFind(a2, @"Second", 0).location != -1)
      {
        CFStringRef v55 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"VAL_%d-N_EVERY_SECOND", v27);
        QP::DatePeriod::setDisplayKey((const void **)a4, v55);
        if (v27 <= 1) {
          int v28 = 91;
        }
        else {
          int v28 = 106;
        }
        *((_DWORD *)a4 + 2) = v28;
        if (QP::DateComponents::isEmpty((QP::DateComponents *)&v68))
        {
          *(void *)&long long v68 = v57;
          *((void *)&v68 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = __PAIR64__(v61, v58);
          *(void *)&long long v69 = v62;
        }
        nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v55, 0);
        int v29 = v27;
        int v31 = v50;
        int v30 = v51;
        goto LABEL_73;
      }
      if (CFStringFind(a2, @"Minute", 0).location != -1)
      {
        CFStringRef v55 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"VAL_%d-N_EVERY_MINUTE", v27);
        QP::DatePeriod::setDisplayKey((const void **)a4, v55);
        if (v27 <= 1) {
          int v38 = 92;
        }
        else {
          int v38 = 107;
        }
        *((_DWORD *)a4 + 2) = v38;
        if (QP::DateComponents::isEmpty((QP::DateComponents *)&v68))
        {
          *(void *)&long long v68 = v57;
          *((void *)&v68 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = __PAIR64__(v61, v58);
          *(void *)&long long v69 = v62;
        }
        nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v55, 0);
        int v33 = v27;
        int v31 = v50;
        int v30 = v51;
        int v29 = v47;
        goto LABEL_74;
      }
      if (CFStringFind(a2, @"Hour", 0).location != -1)
      {
        CFStringRef v55 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"VAL_%d-N_EVERY_HOUR", v27);
        QP::DatePeriod::setDisplayKey((const void **)a4, v55);
        if (v27 <= 1) {
          int v39 = 93;
        }
        else {
          int v39 = 108;
        }
        *((_DWORD *)a4 + 2) = v39;
        if (QP::DateComponents::isEmpty((QP::DateComponents *)&v68))
        {
          *(void *)&long long v68 = v57;
          *((void *)&v68 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = __PAIR64__(v61, v58);
          *(void *)&long long v69 = v62;
        }
        nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v55, 0);
        int v34 = v27;
        int v31 = v50;
        int v30 = v51;
        int v29 = v47;
        int v33 = v48;
        goto LABEL_75;
      }
      if (CFStringFind(a2, @"Day", 0).location != -1)
      {
        CFStringRef v55 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"VAL_%d-N_EVERY_DAY", v27);
        QP::DatePeriod::setDisplayKey((const void **)a4, v55);
        if (v27 <= 1) {
          int v40 = 94;
        }
        else {
          int v40 = 109;
        }
        *((_DWORD *)a4 + 2) = v40;
        if (QP::DateComponents::isEmpty((QP::DateComponents *)&v68))
        {
          HIDWORD(v68) = v61;
          *(void *)&long long v69 = v62;
        }
        nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v55, 0);
        int v31 = v27;
        int v30 = v51;
        goto LABEL_72;
      }
      if (CFStringFind(a2, @"Weekend", 0).location == -1)
      {
        if (CFStringFind(a2, @"Week", 0).location == -1)
        {
          if (CFStringFind(a2, @"Month", 0).location == -1)
          {
            if (CFStringFind(a2, @"Year", 0).location != -1)
            {
              CFStringRef v55 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"VAL_%d-N_EVERY_YEAR", v27);
              QP::DatePeriod::setDisplayKey((const void **)a4, v55);
              if (v27 <= 1) {
                int v46 = 100;
              }
              else {
                int v46 = 115;
              }
              *((_DWORD *)a4 + 2) = v46;
              if (QP::DateComponents::isEmpty((QP::DateComponents *)&v68)) {
                DWORD1(v69) = HIDWORD(v62);
              }
              nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v55, 0);
              int v13 = v27;
            }
          }
          else
          {
            CFStringRef v55 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"VAL_%d-N_EVERY_MONTH", v27);
            QP::DatePeriod::setDisplayKey((const void **)a4, v55);
            if (v27 <= 1) {
              int v45 = 99;
            }
            else {
              int v45 = 114;
            }
            *((_DWORD *)a4 + 2) = v45;
            if (QP::DateComponents::isEmpty((QP::DateComponents *)&v68)) {
              *(void *)&long long v69 = v62;
            }
            nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v55, 0);
            int v12 = v27;
          }
          goto LABEL_71;
        }
        CFStringRef v55 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"VAL_%d-N_EVERY_WEEK", v27);
        QP::DatePeriod::setDisplayKey((const void **)a4, v55);
        if (v27 <= 1) {
          int v42 = 98;
        }
        else {
          int v42 = 113;
        }
        *((_DWORD *)a4 + 2) = v42;
        if (QP::DateComponents::isEmpty((QP::DateComponents *)&v68))
        {
          CFCalendarComposeAbsoluteTime(v7, at, "wY", v59, HIDWORD(v62));
          CFCalendarDecomposeAbsoluteTime(v7, at[0], "yEw", (char *)&v62 + 4, &v60, &v59);
          HIDWORD(v7std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = v59;
          int v71 = HIDWORD(v62);
        }
      }
      else
      {
        CFStringRef v55 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"VAL_%d-N_EVERY_WEEKEND", v27);
        QP::DatePeriod::setDisplayKey((const void **)a4, v55);
        if (v27 <= 1) {
          int v41 = 97;
        }
        else {
          int v41 = 112;
        }
        *((_DWORD *)a4 + 2) = v41;
        if (QP::DateComponents::isEmpty((QP::DateComponents *)&v68))
        {
          CFCalendarComposeAbsoluteTime(v7, at, "wY", v59, HIDWORD(v62));
          CFCalendarAddComponents(v7, at, 0, "E", 6);
          CFCalendarDecomposeAbsoluteTime(v7, at[0], "yEw", (char *)&v62 + 4, &v60, &v59);
          LODWORD(v7std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = v60;
          HIDWORD(v7std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = v59;
          int v71 = HIDWORD(v62);
          CFCalendarAddComponents(v7, at, 0, "d", 1);
          CFCalendarDecomposeAbsoluteTime(v7, at[0], "yEw", (char *)&v62 + 4, &v60, &v59);
          unsigned int v53 = v59;
          int v54 = v60;
          int v52 = HIDWORD(v62);
        }
      }
      nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v55, 0);
      int v15 = v27;
LABEL_71:
      int v31 = v50;
      int v30 = v51;
LABEL_72:
      int v29 = v47;
LABEL_73:
      int v33 = v48;
LABEL_74:
      int v34 = v49;
LABEL_75:
      unsigned int v35 = v53;
      int v36 = v54;
      int v37 = v52;
LABEL_76:
      long long v43 = v69;
      *(_OWORD *)((char *)a4 + 2std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = v68;
      *(_OWORD *)((char *)a4 + 36) = v43;
      *(_OWORD *)((char *)a4 + 52) = v70;
      *((_DWORD *)a4 + 17) = v71;
      *((_DWORD *)a4 + 3QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = v29;
      *((_DWORD *)a4 + 32) = v33;
      *((_DWORD *)a4 + 33) = v34;
      *((_DWORD *)a4 + 34) = v31;
      *((_DWORD *)a4 + 35) = v12;
      *((_DWORD *)a4 + 36) = v13;
      *(_OWORD *)((char *)a4 + 148) = v66;
      *((_DWORD *)a4 + 4QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = v67;
      *((_DWORD *)a4 + 42) = v15;
      *((_DWORD *)a4 + 43) = v30;
      long long v44 = v65;
      *(_OWORD *)((char *)a4 + 72) = v64;
      *(_OWORD *)((char *)a4 + 88) = v44;
      *((_DWORD *)a4 + 26) = v36;
      *(void *)((char *)a4 + 108) = v63;
      uint64_t result = 1;
      *((_DWORD *)a4 + 29) = v35;
      *((_DWORD *)a4 + 3std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = v37;
      return result;
    }
    return 0;
  }
  uint64_t v21 = 0xFFFFFFFFLL;
LABEL_8:
  int v22 = this[1];
  v56[0] = *this;
  v56[1] = v22;
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char updated = QP::updateDateComponentsWithValues((uint64_t)v56, (SInt32 *)&v68, a3, 1);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  if ((updated & 1) == 0) {
    return 0;
  }
  if (!HasSuffix || (uint64_t result = 0, v21 <= 5) && (v70 & 0x80000000) == 0)
  {
    switch((int)v21)
    {
      case -1:
        CFStringRef v55 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"FORMATTED:LAST_%d_ORDINAL_WEEKDAY", v70);
        QP::DatePeriod::setDisplayKey((const void **)a4, v55);
        nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v55, 0);
        LODWORD(v2QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = 0x7FFFFFFF;
        goto LABEL_33;
      case 1:
        CFStringRef v55 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"FORMATTED:1_%d_ORDINAL_WEEKDAY", v70);
        QP::DatePeriod::setDisplayKey((const void **)a4, v55);
        nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v55, 0);
        int v32 = 96;
        LODWORD(v2QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = 1;
        goto LABEL_35;
      case 2:
        CFStringRef v55 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"FORMATTED:2_%d_ORDINAL_WEEKDAY", v70);
        QP::DatePeriod::setDisplayKey((const void **)a4, v55);
        nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v55, 0);
        LODWORD(v2QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = 2;
        goto LABEL_33;
      case 3:
        CFStringRef v55 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"FORMATTED:3_%d_ORDINAL_WEEKDAY", v70);
        QP::DatePeriod::setDisplayKey((const void **)a4, v55);
        nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v55, 0);
        LODWORD(v2QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = 3;
        goto LABEL_33;
      default:
        CFStringRef v55 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"FORMATTED:VAL_%d-N_%d_ORDINAL_WEEKDAY", v21, v70);
        QP::DatePeriod::setDisplayKey((const void **)a4, v55);
        nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v55, 0);
        if ((int)v21 < 2)
        {
          int v32 = 96;
LABEL_35:
          int v31 = v50;
          int v30 = v51;
          int v29 = v47;
          int v33 = v48;
          int v34 = v49;
          unsigned int v35 = v53;
          int v36 = v54;
          int v37 = v52;
        }
        else
        {
LABEL_33:
          int v31 = v50;
          int v30 = v51;
          int v29 = v47;
          int v33 = v48;
          int v34 = v49;
          unsigned int v35 = v53;
          int v36 = v54;
          int v37 = v52;
          int v32 = 111;
        }
        *((_DWORD *)a4 + 2) = v32;
        DWORD1(v7std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = v21;
        int v12 = 1;
        break;
    }
    goto LABEL_76;
  }
  return result;
}

void sub_224DF8BA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
}

uint64_t QP::DateConverter::updatePeriodForValueDate(std::__shared_weak_count **this, const __CFString *a2, const __CFDictionary *a3, QP::DatePeriod *a4)
{
  uint64_t v4 = 0;
  if (!a2 || !a3) {
    return v4;
  }
  unint64_t v7 = *this;
  uint64_t shared_owners = (QP *)(*this)[4].__shared_owners_;
  if (!shared_owners) {
    return 0;
  }
  size_t v9 = (__CFCalendar *)v7[3].__shared_owners_;
  if (!v9) {
    return 0;
  }
  at[0] = getCurrentTime((__CFCalendar *)v7[3].__shared_owners_, (const __CFDate *)v7[3].__vftable);
  long long v12 = *(_OWORD *)((char *)a4 + 36);
  long long v70 = *(_OWORD *)((char *)a4 + 20);
  long long v71 = v12;
  long long v72 = *(_OWORD *)((char *)a4 + 52);
  int v13 = *((_DWORD *)a4 + 18);
  int v73 = *((_DWORD *)a4 + 17);
  long long v66 = *(_OWORD *)((char *)a4 + 124);
  long long v14 = *(_OWORD *)((char *)a4 + 156);
  long long v67 = *(_OWORD *)((char *)a4 + 140);
  long long v68 = v14;
  int v69 = *((_DWORD *)a4 + 43);
  int v15 = *((_DWORD *)a4 + 21);
  int v46 = *((_DWORD *)a4 + 20);
  int v47 = *((_DWORD *)a4 + 19);
  int v16 = *((_DWORD *)a4 + 22);
  int v64 = *((_DWORD *)a4 + 23);
  int v65 = v16;
  uint64_t v17 = *((void *)a4 + 12);
  int v18 = *((_DWORD *)a4 + 26);
  uint64_t v62 = *(void *)((char *)a4 + 108);
  uint64_t v63 = v17;
  unsigned int v50 = *((_DWORD *)a4 + 29);
  int v48 = v18;
  int v49 = *((_DWORD *)a4 + 30);
  uint64_t v61 = -1;
  int v59 = -1;
  int v60 = -1;
  unsigned int v58 = -1;
  int v56 = -1;
  uint64_t v57 = -1;
  CFCalendarDecomposeAbsoluteTime(v9, at[0], "yMdEwHms", (char *)&v61 + 4, &v61, &v60, &v59, &v58, (char *)&v57 + 4, &v57, &v56);
  uint64_t v20 = QP::intValueForNumberInValues(shared_owners, a3, v19);
  if (CFStringHasPrefix(a2, @"NextNum"))
  {
    if (CFStringHasSuffix(a2, @"RangeDate"))
    {
      if ((v20 & 0x80000000) == 0)
      {
        int v21 = v15;
        if (CFStringFind(a2, @"Second", 0).location != -1)
        {
          CFStringRef v22 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"VAL_%d-N_NEXT_SECONDS", v20);
          CFStringRef v55 = v22;
          QP::DatePeriod::setDisplayKey((const void **)a4, v22);
          *((_DWORD *)a4 + 2) = 78;
          *(void *)&long long v71 = v61;
          HIDWORD(v7std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = v60;
          LODWORD(v7std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = v56;
          *(void *)((char *)&v70 + 4) = v57;
          CFCalendarAddComponents(v9, at, 0, "s", v20);
          CFCalendarDecomposeAbsoluteTime(v9, at[0], "yMdEwHms", (char *)&v61 + 4, &v61, &v60, &v59, &v58, (char *)&v57 + 4, &v57, &v56);
          int v21 = v60;
          int v64 = HIDWORD(v61);
          int v65 = v61;
          int v23 = v57;
          int v24 = HIDWORD(v57);
          int v25 = v56;
          if (v22) {
            CFRelease(v22);
          }
          goto LABEL_74;
        }
        if (CFStringFind(a2, @"Minute", 0).location != -1)
        {
          CFStringRef v55 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"VAL_%d-N_NEXT_MINUTES", v20);
          QP::DatePeriod::setDisplayKey((const void **)a4, v55);
          *((_DWORD *)a4 + 2) = 79;
          *(void *)&long long v71 = v61;
          HIDWORD(v7std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = v60;
          LODWORD(v7std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = v56;
          *(void *)((char *)&v70 + 4) = v57;
          CFCalendarAddComponents(v9, at, 0, "m", v20);
          CFCalendarDecomposeAbsoluteTime(v9, at[0], "yMdEwHms", (char *)&v61 + 4, &v61, &v60, &v59, &v58, (char *)&v57 + 4, &v57, &v56);
LABEL_48:
          int v21 = v60;
          int v64 = HIDWORD(v61);
          int v65 = v61;
          int v23 = v57;
          int v24 = HIDWORD(v57);
          int v25 = v56;
LABEL_73:
          nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v55, 0);
          goto LABEL_74;
        }
        if (CFStringFind(a2, @"Hour", 0).location != -1)
        {
          CFStringRef v55 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"VAL_%d-N_NEXT_HOURS", v20);
          QP::DatePeriod::setDisplayKey((const void **)a4, v55);
          *((_DWORD *)a4 + 2) = 80;
          *(void *)&long long v71 = v61;
          HIDWORD(v7std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = v60;
          LODWORD(v7std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = v56;
          *(void *)((char *)&v70 + 4) = v57;
          CFCalendarAddComponents(v9, at, 0, "H", v20);
          CFCalendarDecomposeAbsoluteTime(v9, at[0], "yMdEwHms", (char *)&v61 + 4, &v61, &v60, &v59, &v58, (char *)&v57 + 4, &v57, &v56);
          goto LABEL_48;
        }
        if (CFStringFind(a2, @"Day", 0).location != -1)
        {
          CFStringRef v55 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"VAL_%d-N_NEXT_DAYS", v20);
          QP::DatePeriod::setDisplayKey((const void **)a4, v55);
          int v25 = v13;
          int v24 = v46;
          int v23 = v47;
          *((_DWORD *)a4 + 2) = 81;
          HIDWORD(v7std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = v60;
          *(void *)&long long v71 = v61;
          CFCalendarAddComponents(v9, at, 0, "d", v20);
          CFCalendarDecomposeAbsoluteTime(v9, at[0], "yMd", (char *)&v61 + 4, &v61, &v60);
          int v21 = v60;
          int v64 = HIDWORD(v61);
          int v65 = v61;
          goto LABEL_73;
        }
        if (CFStringFind(a2, @"Weekend", 0).location != -1)
        {
          CFStringRef v55 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"VAL_%d-N_NEXT_WEEKENDS", v20);
          QP::DatePeriod::setDisplayKey((const void **)a4, v55);
          int v25 = v13;
          int v24 = v46;
          int v23 = v47;
          *((_DWORD *)a4 + 2) = 82;
          CFCalendarComposeAbsoluteTime(v9, at, "wY", v58, HIDWORD(v61));
          CFCalendarAddComponents(v9, at, 0, "E", 6);
          CFCalendarDecomposeAbsoluteTime(v9, at[0], "yEw", (char *)&v61 + 4, &v59, &v58);
          LODWORD(v72) = v59;
          HIDWORD(v72) = v58;
          int v73 = HIDWORD(v61);
          CFCalendarComposeAbsoluteTime(v9, at, "wY", v58 + v20, HIDWORD(v61));
          CFCalendarAddComponents(v9, at, 0, "E", 6);
          CFCalendarAddComponents(v9, at, 0, "d", 1);
          CFCalendarDecomposeAbsoluteTime(v9, at[0], "yEw", (char *)&v61 + 4, &v59, &v58);
LABEL_106:
          int v36 = v59;
          int v49 = HIDWORD(v61);
          unsigned int v50 = v58;
          nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v55, 0);
          uint64_t v4 = 1;
          goto LABEL_76;
        }
        if (CFStringFind(a2, @"Week", 0).location != -1)
        {
          CFStringRef v55 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"VAL_%d-N_NEXT_WEEKS", v20);
          QP::DatePeriod::setDisplayKey((const void **)a4, v55);
          int v25 = v13;
          int v24 = v46;
          int v23 = v47;
          *((_DWORD *)a4 + 2) = 83;
          HIDWORD(v72) = v58;
          int v73 = HIDWORD(v61);
          CFCalendarAddComponents(v9, at, 0, "w", v20);
          CFCalendarDecomposeAbsoluteTime(v9, at[0], "yw", (char *)&v61 + 4, &v58);
          int v49 = HIDWORD(v61);
          unsigned int v50 = v58;
          goto LABEL_73;
        }
        if (CFStringFind(a2, @"Month", 0).location != -1)
        {
          CFStringRef v55 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"VAL_%d-N_NEXT_MONTHS", v20);
          QP::DatePeriod::setDisplayKey((const void **)a4, v55);
          *((_DWORD *)a4 + 2) = 84;
          *(void *)&long long v71 = v61;
          CFCalendarAddComponents(v9, at, 0, "M", v20);
          CFCalendarDecomposeAbsoluteTime(v9, at[0], "yMd", (char *)&v61 + 4, &v61, &v60);
LABEL_121:
          int v65 = v61;
LABEL_130:
          int v64 = HIDWORD(v61);
          goto LABEL_131;
        }
        if (CFStringFind(a2, @"Year", 0).location != -1)
        {
          CFStringRef v55 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"VAL_%d-N_NEXT_YEARS", v20);
          QP::DatePeriod::setDisplayKey((const void **)a4, v55);
          *((_DWORD *)a4 + 2) = 85;
          DWORD1(v7QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = HIDWORD(v61);
          CFCalendarAddComponents(v9, at, 0, "y", v20);
          CFCalendarDecomposeAbsoluteTime(v9, at[0], "yMd", (char *)&v61 + 4, &v61, &v60);
          goto LABEL_130;
        }
LABEL_132:
        uint64_t v4 = 1;
        int v25 = v13;
        int v24 = v46;
        int v23 = v47;
        int v36 = v48;
        goto LABEL_133;
      }
      return 0;
    }
    int v21 = v15;
    if (CFStringHasSuffix(a2, @"Date"))
    {
      if ((v20 & 0x80000000) != 0) {
        return 0;
      }
      if (CFStringFind(a2, @"Seconds", 0).location != -1)
      {
        CFStringRef v55 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"VAL_%d-N_SECONDS", v20);
        QP::DatePeriod::setDisplayKey((const void **)a4, v55);
        int v25 = v13;
        int v24 = v46;
        int v23 = v47;
        *((_DWORD *)a4 + 2) = 67;
        CFCalendarAddComponents(v9, at, 0, "s", v20);
        CFCalendarDecomposeAbsoluteTime(v9, at[0], "yMdHms", (char *)&v61 + 4, &v61, &v60, (char *)&v57 + 4, &v57, &v56);
LABEL_66:
        *(void *)&long long v71 = v61;
        HIDWORD(v7std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = v60;
        LODWORD(v7std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = v56;
        *(void *)((char *)&v70 + 4) = v57;
        goto LABEL_73;
      }
      if (CFStringFind(a2, @"Minute", 0).location != -1)
      {
        CFStringRef v55 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"VAL_%d-N_MINUTES", v20);
        QP::DatePeriod::setDisplayKey((const void **)a4, v55);
        int v25 = v13;
        int v24 = v46;
        int v23 = v47;
        *((_DWORD *)a4 + 2) = 68;
        CFCalendarAddComponents(v9, at, 0, "m", v20);
        CFCalendarDecomposeAbsoluteTime(v9, at[0], "yMdHms", (char *)&v61 + 4, &v61, &v60, (char *)&v57 + 4, &v57, &v56);
        goto LABEL_66;
      }
      if (CFStringFind(a2, @"Hour", 0).location != -1)
      {
        CFStringRef v55 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"VAL_%d-N_HOURS", v20);
        QP::DatePeriod::setDisplayKey((const void **)a4, v55);
        int v25 = v13;
        int v24 = v46;
        int v23 = v47;
        *((_DWORD *)a4 + 2) = 69;
        CFCalendarAddComponents(v9, at, 0, "H", v20);
        CFCalendarDecomposeAbsoluteTime(v9, at[0], "yMdHms", (char *)&v61 + 4, &v61, &v60, (char *)&v57 + 4, &v57, &v56);
        goto LABEL_66;
      }
      if (CFStringFind(a2, @"Day", 0).location != -1)
      {
        CFStringRef v55 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"VAL_%d-N_DAYS", v20);
        QP::DatePeriod::setDisplayKey((const void **)a4, v55);
        int v25 = v13;
        int v24 = v46;
        int v23 = v47;
        *((_DWORD *)a4 + 2) = 70;
        CFCalendarAddComponents(v9, at, 0, "d", v20);
        CFCalendarDecomposeAbsoluteTime(v9, at[0], "yMd", (char *)&v61 + 4, &v61, &v60);
        goto LABEL_92;
      }
      if (CFStringFind(a2, @"Weekend", 0).location != -1)
      {
        CFStringRef v55 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"VAL_%d-N_WEEKENDS", v20);
        QP::DatePeriod::setDisplayKey((const void **)a4, v55);
        int v25 = v13;
        int v24 = v46;
        int v23 = v47;
        *((_DWORD *)a4 + 2) = 71;
        CFCalendarComposeAbsoluteTime(v9, at, "wY", v58 + v20, HIDWORD(v61));
        CFCalendarAddComponents(v9, at, 0, "E", 6);
        CFCalendarDecomposeAbsoluteTime(v9, at[0], "yEw", (char *)&v61 + 4, &v59, &v58);
        LODWORD(v72) = v59;
        HIDWORD(v72) = v58;
        int v73 = HIDWORD(v61);
        CFCalendarAddComponents(v9, at, 0, "d", 1);
        CFCalendarDecomposeAbsoluteTime(v9, at[0], "yEw", (char *)&v61 + 4, &v59, &v58);
        goto LABEL_106;
      }
      if (CFStringFind(a2, @"Week", 0).location != -1)
      {
        CFStringRef v55 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"VAL_%d-N_WEEKS", v20);
        QP::DatePeriod::setDisplayKey((const void **)a4, v55);
        *((_DWORD *)a4 + 2) = 72;
        CFCalendarAddComponents(v9, at, 0, "w", v20);
        CFCalendarDecomposeAbsoluteTime(v9, at[0], "wyMd", &v58, (char *)&v61 + 4, &v61, &v60);
        goto LABEL_112;
      }
      if (CFStringFind(a2, @"Month", 0).location != -1)
      {
        CFStringRef v55 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"VAL_%d-N_MONTHS", v20);
        QP::DatePeriod::setDisplayKey((const void **)a4, v55);
        *((_DWORD *)a4 + 2) = 73;
        CFCalendarAddComponents(v9, at, 0, "M", v20);
        CFCalendarDecomposeAbsoluteTime(v9, at[0], "yMd", (char *)&v61 + 4, &v61, &v60);
        goto LABEL_127;
      }
      if (CFStringFind(a2, @"Year", 0).location == -1) {
        goto LABEL_132;
      }
      CFStringRef v55 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"VAL_%d-N_YEARS", v20);
      QP::DatePeriod::setDisplayKey((const void **)a4, v55);
      *((_DWORD *)a4 + 2) = 74;
      CFCalendarAddComponents(v9, at, 0, "y", v20);
      CFCalendarDecomposeAbsoluteTime(v9, at[0], "yMd", (char *)&v61 + 4, &v61, &v60);
LABEL_149:
      DWORD1(v7QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = HIDWORD(v61);
      goto LABEL_131;
    }
    goto LABEL_83;
  }
  if (!CFStringHasPrefix(a2, @"Num"))
  {
    if (!CFStringHasPrefix(a2, @"Compound"))
    {
      if (!CFStringHasPrefix(a2, @"RelativeEnd")) {
        goto LABEL_132;
      }
      QP::DatePeriod::setDisplayKey((const void **)a4, @"FORMATTED");
      *((_DWORD *)a4 + 2) = 2;
      int v31 = this[1];
      v51[0] = *this;
      v51[1] = v31;
      if (v31) {
        atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char updated = QP::updateDateComponentsWithValues((uint64_t)v51, (SInt32 *)&v70, a3, 0);
      int v21 = v15;
      if (v31) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v31);
      }
      if (updated)
      {
        if (!CFStringHasPrefix(a2, @"RelativeEndIsoMonth"))
        {
          if (CFStringHasPrefix(a2, @"RelativeEndIsoDay"))
          {
            CFCalendarComposeAbsoluteTime(v9, at, "My", v61, HIDWORD(v61));
            CFCalendarAddComponents(v9, at, 0, "M", 1);
            CFCalendarDecomposeAbsoluteTime(v9, at[0], "E", &v59);
            if ((int)v72 >= v59)
            {
              int v25 = v13;
              int v24 = v46;
              int v23 = v47;
              if ((int)v72 > v59)
              {
                CFRange RangeOfUnit = CFCalendarGetRangeOfUnit(v9, 0x200uLL, 8uLL, at[0]);
                CFCalendarAddComponents(v9, at, 0, "E", -(uint64_t)v59 - (RangeOfUnit.length - (int)v72));
              }
            }
            else
            {
              CFCalendarAddComponents(v9, at, 0, "E", (v72 - v59));
              int v25 = v13;
              int v24 = v46;
              int v23 = v47;
            }
            CFCalendarDecomposeAbsoluteTime(v9, at[0], "wY", &v58, (char *)&v61 + 4);
            HIDWORD(v72) = v58;
            int v73 = HIDWORD(v61);
            DWORD1(v72) = 0x7FFFFFFF;
            goto LABEL_74;
          }
LABEL_83:
          uint64_t v4 = 1;
          goto LABEL_84;
        }
        CFCalendarComposeAbsoluteTime(v9, at, "My", v71, HIDWORD(v61));
        uint64_t v4 = 1;
        CFCalendarAddComponents(v9, at, 0, "M", 1);
        CFCalendarAddComponents(v9, at, 0, "d", 0xFFFFFFFFLL);
        CFCalendarDecomposeAbsoluteTime(v9, at[0], "dMy", &v60, &v61, (char *)&v61 + 4);
        HIDWORD(v7std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = v60;
        *(void *)&long long v71 = v61;
      }
      else
      {
        uint64_t v4 = 0;
      }
LABEL_84:
      int v25 = v13;
      int v24 = v46;
      int v23 = v47;
      goto LABEL_75;
    }
    if (CFStringFind(a2, @"Day", 0).location == -1)
    {
      if (CFStringFind(a2, @"Month", 0).location == -1) {
        goto LABEL_132;
      }
      QP::DatePeriod::setDisplayKey((const void **)a4, @"FORMATTED");
      *((_DWORD *)a4 + 2) = 2;
      int v33 = this[1];
      v52[0] = *this;
      v52[1] = v33;
      int v34 = v13;
      int v24 = v46;
      int v23 = v47;
      if (v33) {
        atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v35 = QP::updateDateComponentsWithValues((uint64_t)v52, (SInt32 *)&v70, a3, 0);
      int v21 = v15;
      if (v33) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v33);
      }
      int v25 = v34;
      if (v35)
      {
        *(void *)&long long v71 = v61;
        goto LABEL_74;
      }
    }
    else
    {
      QP::DatePeriod::setDisplayKey((const void **)a4, @"FORMATTED");
      *((_DWORD *)a4 + 2) = 2;
      int v28 = this[1];
      v53[0] = *this;
      v53[1] = v28;
      if (v28) {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v29 = QP::updateDateComponentsWithValues((uint64_t)v53, (SInt32 *)&v70, a3, 0);
      int v25 = v13;
      int v24 = v46;
      int v23 = v47;
      char v30 = v29;
      int v21 = v15;
      if (v28) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v28);
      }
      if (v30)
      {
        HIDWORD(v7std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = v60;
        *(void *)&long long v71 = v61;
        LODWORD(v72) = -1;
LABEL_74:
        uint64_t v4 = 1;
        goto LABEL_75;
      }
    }
    uint64_t v4 = 0;
LABEL_75:
    int v36 = v48;
LABEL_76:
    long long v37 = v71;
    *(_OWORD *)((char *)a4 + 2std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = v70;
    *(_OWORD *)((char *)a4 + 36) = v37;
    *(_OWORD *)((char *)a4 + 52) = v72;
    *((_DWORD *)a4 + 17) = v73;
    *((_DWORD *)a4 + 18) = v25;
    *((_DWORD *)a4 + 19) = v23;
    *((_DWORD *)a4 + 2std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = v24;
    *((_DWORD *)a4 + 2QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = v21;
    int v38 = v64;
    *((_DWORD *)a4 + 22) = v65;
    *((_DWORD *)a4 + 23) = v38;
    *((void *)a4 + 12) = v63;
    *((_DWORD *)a4 + 26) = v36;
    *(void *)((char *)a4 + 108) = v62;
    *((_DWORD *)a4 + 29) = v50;
    *((_DWORD *)a4 + 3std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = v49;
    *((_DWORD *)a4 + 43) = v69;
    long long v39 = v68;
    *(_OWORD *)((char *)a4 + 14std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = v67;
    *(_OWORD *)((char *)a4 + 156) = v39;
    *(_OWORD *)((char *)a4 + 124) = v66;
    return v4;
  }
  int HasSuffix = CFStringHasSuffix(a2, @"RangeDate");
  CFIndex location = CFStringFind(a2, @"Second", 0).location;
  if (!HasSuffix)
  {
    if (location != -1)
    {
      CFStringRef v55 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"VAL_%d-N_SECONDS_AGO", v20);
      QP::DatePeriod::setDisplayKey((const void **)a4, v55);
      int v25 = v13;
      int v24 = v46;
      int v23 = v47;
      *((_DWORD *)a4 + 2) = 31;
      if ((v20 & 0x80000000) == 0)
      {
        int v21 = v15;
        CFCalendarAddComponents(v9, at, 0, "s", -(int)v20);
        CFCalendarDecomposeAbsoluteTime(v9, at[0], "yMdHms", (char *)&v61 + 4, &v61, &v60, (char *)&v57 + 4, &v57, &v56);
        goto LABEL_72;
      }
LABEL_138:
      nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v55, 0);
      return 0;
    }
    if (CFStringFind(a2, @"Minute", 0).location != -1)
    {
      CFStringRef v55 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"VAL_%d-N_MINUTES_AGO", v20);
      QP::DatePeriod::setDisplayKey((const void **)a4, v55);
      int v25 = v13;
      int v24 = v46;
      int v23 = v47;
      *((_DWORD *)a4 + 2) = 32;
      if ((v20 & 0x80000000) == 0)
      {
        int v21 = v15;
        CFCalendarAddComponents(v9, at, 0, "m", -(int)v20);
        CFCalendarDecomposeAbsoluteTime(v9, at[0], "yMdHms", (char *)&v61 + 4, &v61, &v60, (char *)&v57 + 4, &v57, &v56);
        goto LABEL_72;
      }
      goto LABEL_138;
    }
    if (CFStringFind(a2, @"Hour", 0).location != -1)
    {
      CFStringRef v55 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"VAL_%d-N_HOURS_AGO", v20);
      QP::DatePeriod::setDisplayKey((const void **)a4, v55);
      int v25 = v13;
      int v24 = v46;
      int v23 = v47;
      *((_DWORD *)a4 + 2) = 33;
      if ((v20 & 0x80000000) == 0)
      {
        int v21 = v15;
        CFCalendarAddComponents(v9, at, 0, "H", -(int)v20);
        CFCalendarDecomposeAbsoluteTime(v9, at[0], "yMdHms", (char *)&v61 + 4, &v61, &v60, (char *)&v57 + 4, &v57, &v56);
        goto LABEL_72;
      }
      goto LABEL_138;
    }
    if (CFStringFind(a2, @"Day", 0).location != -1)
    {
      CFStringRef v55 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"VAL_%d-N_DAYS_AGO", v20);
      QP::DatePeriod::setDisplayKey((const void **)a4, v55);
      int v25 = v13;
      int v24 = v46;
      int v23 = v47;
      *((_DWORD *)a4 + 2) = 34;
      if ((v20 & 0x80000000) == 0)
      {
        int v21 = v15;
        CFCalendarAddComponents(v9, at, 0, "d", -(int)v20);
        CFCalendarDecomposeAbsoluteTime(v9, at[0], "yMd", (char *)&v61 + 4, &v61, &v60);
        goto LABEL_92;
      }
      goto LABEL_138;
    }
    if (CFStringFind(a2, @"Weekend", 0).location != -1)
    {
      CFStringRef v55 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"VAL_%d-N_WEEKENDS_AGO", v20);
      QP::DatePeriod::setDisplayKey((const void **)a4, v55);
      int v25 = v13;
      int v24 = v46;
      int v23 = v47;
      *((_DWORD *)a4 + 2) = 35;
      if ((v20 & 0x80000000) == 0)
      {
        int v21 = v15;
        CFCalendarComposeAbsoluteTime(v9, at, "wY", v58 - v20, HIDWORD(v61));
        CFCalendarAddComponents(v9, at, 0, "E", 6);
        CFCalendarDecomposeAbsoluteTime(v9, at[0], "yEw", (char *)&v61 + 4, &v59, &v58);
        LODWORD(v72) = v59;
        HIDWORD(v72) = v58;
        int v73 = HIDWORD(v61);
        CFCalendarAddComponents(v9, at, 0, "d", 1);
        CFCalendarDecomposeAbsoluteTime(v9, at[0], "yEw", (char *)&v61 + 4, &v59, &v58);
        goto LABEL_106;
      }
      goto LABEL_138;
    }
    if (CFStringFind(a2, @"Week", 0).location != -1)
    {
      CFStringRef v55 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"VAL_%d-N_WEEKS_AGO", v20);
      QP::DatePeriod::setDisplayKey((const void **)a4, v55);
      *((_DWORD *)a4 + 2) = 36;
      if ((v20 & 0x80000000) == 0)
      {
        if (LODWORD((*this)[1].__shared_weak_owners_) == 1 && (int)v72 <= 0)
        {
          CFCalendarAddComponents(v9, at, 0, "dw", 0xFFFFFFFFLL, -(int)v20);
          CFCalendarDecomposeAbsoluteTime(v9, at[0], "yMd", (char *)&v61 + 4, &v61, &v60);
          HIDWORD(v7std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = v60;
          *(void *)&long long v71 = v61;
          CFCalendarAddComponents(v9, at, 0, "d", 2);
          CFCalendarDecomposeAbsoluteTime(v9, at[0], "yMd", (char *)&v61 + 4, &v61, &v60);
          int v15 = v60;
          goto LABEL_121;
        }
        int v54 = 0;
        CFCalendarDecomposeAbsoluteTime(v9, at[0], "w", &v54);
        unsigned int v42 = v54 - v20;
        goto LABEL_113;
      }
      goto LABEL_138;
    }
    long long v43 = (int *)&v71 + 1;
    if (CFStringFind(a2, @"Month", 0).location == -1)
    {
      if (CFStringFind(a2, @"Year", 0).location == -1) {
        goto LABEL_132;
      }
      uint64_t v4 = 0;
      if (SHIDWORD(v61) < (int)v20 || (v20 & 0x80000000) != 0 || HIDWORD(v61) - (int)v20 < HIDWORD(v61) - 1970) {
        return v4;
      }
      CFStringRef v55 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"VAL_%d-N_YEARS_AGO", v20);
      QP::DatePeriod::setDisplayKey((const void **)a4, v55);
      *((_DWORD *)a4 + 2) = 38;
      if (LODWORD((*this)[1].__shared_weak_owners_) == 1 && (int)v71 <= 0)
      {
        CFCalendarAddComponents(v9, at, 0, "dy", 4294967293, -(int)v20);
        CFCalendarDecomposeAbsoluteTime(v9, at[0], "yMd", (char *)&v61 + 4, &v61, &v60);
        HIDWORD(v7std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = v60;
        *(void *)&long long v71 = v61;
        CFCalendarAddComponents(v9, at, 0, "d", 6);
        CFCalendarDecomposeAbsoluteTime(v9, at[0], "yMd", (char *)&v61 + 4, &v61, &v60);
        int v15 = v60;
        int v65 = v61;
        long long v43 = &v64;
      }
      else
      {
        CFCalendarAddComponents(v9, at, 0, "dM", (1 - v60), (1 - v61));
        CFCalendarAddComponents(v9, at, 0, "y", -(int)v20);
        if ((int)v71 >= 2) {
          CFCalendarAddComponents(v9, at, 0, "M", (v71 - 1));
        }
        CFCalendarDecomposeAbsoluteTime(v9, at[0], "yMd", (char *)&v61 + 4, &v61, &v60);
      }
    }
    else
    {
      CFStringRef v55 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"VAL_%d-N_MONTHS_AGO", v20);
      QP::DatePeriod::setDisplayKey((const void **)a4, v55);
      *((_DWORD *)a4 + 2) = 37;
      if ((v20 & 0x80000000) != 0) {
        goto LABEL_138;
      }
      if (LODWORD((*this)[1].__shared_weak_owners_) == 1)
      {
        CFCalendarAddComponents(v9, at, 0, "dM", 4294967293, -(int)v20);
        CFCalendarDecomposeAbsoluteTime(v9, at[0], "yMd", (char *)&v61 + 4, &v61, &v60);
        HIDWORD(v7std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = v60;
        *(void *)&long long v71 = v61;
        CFCalendarAddComponents(v9, at, 0, "d", 6);
        CFCalendarDecomposeAbsoluteTime(v9, at[0], "yMd", (char *)&v61 + 4, &v61, &v60);
        long long v43 = &v64;
        long long v44 = (long long *)&v65;
        int v15 = v60;
      }
      else
      {
        CFCalendarAddComponents(v9, at, 0, "dM", (1 - v60), -(int)v20);
        CFCalendarDecomposeAbsoluteTime(v9, at[0], "yMd", (char *)&v61 + 4, &v61, &v60);
        long long v44 = &v71;
      }
      *(_DWORD *)long long v44 = v61;
    }
    int *v43 = HIDWORD(v61);
    goto LABEL_131;
  }
  if (location != -1)
  {
    CFStringRef v55 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"VAL_%d-N_LAST_SECONDS", v20);
    QP::DatePeriod::setDisplayKey((const void **)a4, v55);
    *((_DWORD *)a4 + 2) = 42;
    if ((v20 & 0x80000000) == 0)
    {
      int v25 = v56;
      int v23 = v57;
      int v24 = HIDWORD(v57);
      int v21 = v60;
      int v64 = HIDWORD(v61);
      int v65 = v61;
      CFCalendarAddComponents(v9, at, 0, "s", -(int)v20);
      CFCalendarDecomposeAbsoluteTime(v9, at[0], "yMdHms", (char *)&v61 + 4, &v61, &v60, (char *)&v57 + 4, &v57, &v56);
LABEL_72:
      LODWORD(v7std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = v56;
      *(void *)((char *)&v70 + 4) = v57;
      HIDWORD(v7std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = v60;
      *(void *)&long long v71 = v61;
      goto LABEL_73;
    }
    goto LABEL_138;
  }
  if (CFStringFind(a2, @"Minute", 0).location != -1)
  {
    CFStringRef v55 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"VAL_%d-N_LAST_MINUTES", v20);
    QP::DatePeriod::setDisplayKey((const void **)a4, v55);
    *((_DWORD *)a4 + 2) = 43;
    if ((v20 & 0x80000000) == 0)
    {
      int v25 = v56;
      int v23 = v57;
      int v24 = HIDWORD(v57);
      int v21 = v60;
      int v64 = HIDWORD(v61);
      int v65 = v61;
      CFCalendarAddComponents(v9, at, 0, "m", -(int)v20);
      CFCalendarDecomposeAbsoluteTime(v9, at[0], "yMdHms", (char *)&v61 + 4, &v61, &v60, (char *)&v57 + 4, &v57, &v56);
      goto LABEL_72;
    }
    goto LABEL_138;
  }
  if (CFStringFind(a2, @"Hour", 0).location != -1)
  {
    CFStringRef v55 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"VAL_%d-N_LAST_HOURS", v20);
    QP::DatePeriod::setDisplayKey((const void **)a4, v55);
    *((_DWORD *)a4 + 2) = 44;
    if ((v20 & 0x80000000) == 0)
    {
      int v25 = v56;
      int v23 = v57;
      int v24 = HIDWORD(v57);
      int v21 = v60;
      int v64 = HIDWORD(v61);
      int v65 = v61;
      CFCalendarAddComponents(v9, at, 0, "H", -(int)v20);
      CFCalendarDecomposeAbsoluteTime(v9, at[0], "yMdHms", (char *)&v61 + 4, &v61, &v60, (char *)&v57 + 4, &v57, &v56);
      goto LABEL_72;
    }
    goto LABEL_138;
  }
  if (CFStringFind(a2, @"Day", 0).location != -1)
  {
    CFStringRef v55 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"VAL_%d-N_LAST_DAYS", v20);
    QP::DatePeriod::setDisplayKey((const void **)a4, v55);
    int v25 = v13;
    int v24 = v46;
    int v23 = v47;
    *((_DWORD *)a4 + 2) = 45;
    if ((v20 & 0x80000000) == 0)
    {
      int v21 = v60;
      int v64 = HIDWORD(v61);
      int v65 = v61;
      CFCalendarAddComponents(v9, at, 0, "d", -(int)v20);
      CFCalendarDecomposeAbsoluteTime(v9, at[0], "yMd", (char *)&v61 + 4, &v61, &v60);
LABEL_92:
      HIDWORD(v7std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = v60;
      *(void *)&long long v71 = v61;
      goto LABEL_73;
    }
    goto LABEL_138;
  }
  if (CFStringFind(a2, @"Weekend", 0).location != -1)
  {
    CFStringRef v55 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"VAL_%d-N_LAST_WEEKENDS", v20);
    QP::DatePeriod::setDisplayKey((const void **)a4, v55);
    int v25 = v13;
    int v24 = v46;
    int v23 = v47;
    *((_DWORD *)a4 + 2) = 46;
    if ((v20 & 0x80000000) == 0)
    {
      CFCalendarComposeAbsoluteTime(v9, at, "wY", v58, HIDWORD(v61));
      CFCalendarAddComponents(v9, at, 0, "E", 6);
      CFCalendarAddComponents(v9, at, 0, "d", 1);
      CFCalendarDecomposeAbsoluteTime(v9, at[0], "yEw", (char *)&v61 + 4, &v59, &v58);
      int v40 = v59;
      int v49 = HIDWORD(v61);
      unsigned int v50 = v58;
      CFCalendarAddComponents(v9, at, 0, "w", -(int)v20);
      CFCalendarAddComponents(v9, at, 0, "E", 6);
      CFCalendarDecomposeAbsoluteTime(v9, at[0], "yEw", (char *)&v61 + 4, &v59, &v58);
      LODWORD(v72) = v59;
      HIDWORD(v72) = v58;
      int v73 = HIDWORD(v61);
      nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v55, 0);
      uint64_t v4 = 1;
      int v36 = v40;
LABEL_133:
      int v21 = v15;
      goto LABEL_76;
    }
    goto LABEL_138;
  }
  if (CFStringFind(a2, @"Week", 0).location != -1)
  {
    CFStringRef v55 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"VAL_%d-N_LAST_WEEKS", v20);
    QP::DatePeriod::setDisplayKey((const void **)a4, v55);
    *((_DWORD *)a4 + 2) = 47;
    if ((v20 & 0x80000000) == 0)
    {
      CFCalendarComposeAbsoluteTime(v9, at, "wY", v58, HIDWORD(v61));
      CFCalendarDecomposeAbsoluteTime(v9, at[0], "yEw", (char *)&v61 + 4, &v59, &v58);
      int v49 = HIDWORD(v61);
      unsigned int v50 = v58;
      CFCalendarAddComponents(v9, at, 0, "w", -(int)v20);
      CFCalendarDecomposeAbsoluteTime(v9, at[0], "yEw", (char *)&v61 + 4, &v59, &v58);
LABEL_112:
      unsigned int v42 = v58;
LABEL_113:
      HIDWORD(v72) = v42;
      int v73 = HIDWORD(v61);
LABEL_131:
      nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v55, 0);
      goto LABEL_132;
    }
    goto LABEL_138;
  }
  if (CFStringFind(a2, @"Month", 0).location != -1)
  {
    CFStringRef v55 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"VAL_%d-N_LAST_MONTHS", v20);
    QP::DatePeriod::setDisplayKey((const void **)a4, v55);
    *((_DWORD *)a4 + 2) = 48;
    if ((v20 & 0x80000000) == 0)
    {
      int v64 = HIDWORD(v61);
      int v65 = v61;
      CFCalendarAddComponents(v9, at, 0, "dM", (1 - v60), -(int)v20);
      CFCalendarDecomposeAbsoluteTime(v9, at[0], "yMd", (char *)&v61 + 4, &v61, &v60);
LABEL_127:
      *(void *)&long long v71 = v61;
      goto LABEL_131;
    }
    goto LABEL_138;
  }
  if (CFStringFind(a2, @"Year", 0).location == -1) {
    goto LABEL_132;
  }
  uint64_t v4 = 0;
  if (SHIDWORD(v61) >= (int)v20 && (v20 & 0x80000000) == 0 && HIDWORD(v61) - (int)v20 >= HIDWORD(v61) - 1970)
  {
    CFStringRef v55 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"VAL_%d-N_LAST_YEARS", v20);
    QP::DatePeriod::setDisplayKey((const void **)a4, v55);
    *((_DWORD *)a4 + 2) = 49;
    int v64 = HIDWORD(v61);
    CFCalendarAddComponents(v9, at, 0, "dMy", (1 - v60), (1 - v61), -(int)v20);
    CFCalendarDecomposeAbsoluteTime(v9, at[0], "yMd", (char *)&v61 + 4, &v61, &v60);
    goto LABEL_149;
  }
  return v4;
}

void sub_224DFAFF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,const void *a27)
{
}

void QP::DateConverter::datePeriodForRelativeDate(CFStringRef theString@<X1>, void *a2@<X8>)
{
  if (theString && CFStringGetLength(theString)) {
    operator new();
  }
  *a2 = 0;
}

void sub_224DFB234(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)va, 0);
  _Unwind_Resume(a1);
}

uint64_t QP::DateConverter::updatePeriodForRelativeDate(QP::DateConverter *this, const __CFString *a2, QP::DatePeriod *a3)
{
  uint64_t result = 0;
  if (a2)
  {
    long long v5 = *(void **)this;
    if (*(void *)this)
    {
      if (!v5[13]) {
        return 0;
      }
      long long v6 = (__CFCalendar *)v5[11];
      if (!v6) {
        return 0;
      }
      long long v9 = *(_OWORD *)((char *)a3 + 20);
      long long v10 = *(_OWORD *)((char *)a3 + 52);
      *(_OWORD *)&v79[16] = *(_OWORD *)((char *)a3 + 36);
      long long v80 = v10;
      unsigned int v81 = *((_DWORD *)a3 + 17);
      long long v11 = *(_OWORD *)((char *)a3 + 88);
      long long v77 = *(_OWORD *)((char *)a3 + 72);
      long long v78 = v11;
      *(_OWORD *)CFRange v79 = v9;
      int v65 = *((_DWORD *)a3 + 26);
      uint64_t v57 = *(void *)((char *)a3 + 108);
      unsigned int v63 = *((_DWORD *)a3 + 30);
      unsigned int v64 = *((_DWORD *)a3 + 29);
      int v12 = *((_DWORD *)a3 + 31);
      int v66 = *((_DWORD *)a3 + 32);
      int v61 = *((_DWORD *)a3 + 34);
      int v62 = *((_DWORD *)a3 + 33);
      int v58 = *((_DWORD *)a3 + 36);
      int v59 = *((_DWORD *)a3 + 35);
      long long v75 = *(_OWORD *)((char *)a3 + 148);
      int v60 = *((_DWORD *)a3 + 42);
      int v76 = *((_DWORD *)a3 + 41);
      int v55 = v12;
      int v56 = *((_DWORD *)a3 + 43);
      unsigned int v74 = -1;
      int v72 = -1;
      uint64_t v73 = -1;
      unsigned int v71 = -1;
      memset(v70, 255, sizeof(v70));
      CFDateRef v13 = (const __CFDate *)v5[9];
      double CurrentTime = getCurrentTime(v6, v13);
      CFAbsoluteTime at = CurrentTime;
      CFCalendarDecomposeAbsoluteTime(v6, CurrentTime, "yMdEwHms", &v74, (char *)&v73 + 4, &v73, &v72, &v71, &v70[8], &v70[4], v70);
      int v15 = *(unsigned __int8 *)(*(void *)this + 27);
      int v16 = *(unsigned __int8 *)(*(void *)this + 26);
      if (CFStringHasPrefix(a2, @"RelativeNow"))
      {
        *((_DWORD *)a3 + 2) = 6;
        QP::DatePeriod::setDisplayKey((const void **)a3, @"NOW");
        *(void *)CFRange v79 = *(void *)v70;
        *(_DWORD *)&v79[8] = *(_DWORD *)&v70[8];
        *(_DWORD *)&v79[12] = v73;
LABEL_7:
        *(_DWORD *)&v79[16] = HIDWORD(v73);
        *(_DWORD *)&v79[20] = v74;
LABEL_8:
        int v17 = v55;
LABEL_91:
        long long v42 = *(_OWORD *)&v79[16];
        long long v43 = v80;
        *(_OWORD *)((char *)a3 + 2std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = *(_OWORD *)v79;
        *(_OWORD *)((char *)a3 + 36) = v42;
        *(_OWORD *)((char *)a3 + 52) = v43;
        *((_DWORD *)a3 + 17) = v81;
        long long v44 = v78;
        *(_OWORD *)((char *)a3 + 72) = v77;
        *(_OWORD *)((char *)a3 + 88) = v44;
        *((_DWORD *)a3 + 26) = v65;
        *(void *)((char *)a3 + 108) = v57;
        *((_DWORD *)a3 + 29) = v64;
        *((_DWORD *)a3 + 3std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = v63;
        *((_DWORD *)a3 + 3QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = v17;
        *((_DWORD *)a3 + 32) = v66;
        *((_DWORD *)a3 + 33) = v62;
        *((_DWORD *)a3 + 34) = v61;
        *((_DWORD *)a3 + 35) = v59;
        *((_DWORD *)a3 + 36) = v58;
        *((_DWORD *)a3 + 4QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = v76;
        *(_OWORD *)((char *)a3 + 148) = v75;
        uint64_t result = 1;
        *((_DWORD *)a3 + 42) = v60;
        *((_DWORD *)a3 + 43) = v56;
        return result;
      }
      if (CFStringHasPrefix(a2, @"RelativeEvery"))
      {
        if (CFStringHasPrefix(a2, @"RelativeEveryTwo"))
        {
          uint64_t v18 = 2;
        }
        else
        {
          if (!CFStringHasPrefix(a2, @"RelativeEveryThree"))
          {
            uint64_t v18 = 1;
            int v20 = 91;
            int v21 = 92;
            int v22 = 93;
            int v23 = 94;
            int v53 = 97;
            int v54 = 95;
            int v51 = 99;
            int v52 = 98;
            int v24 = 100;
LABEL_19:
            int v50 = v24;
            long long v68 = 0;
            if (CFStringFind(a2, @"Second", 0).location != -1)
            {
              CFStringRef v25 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"VAL_%d-N_EVERY_SECOND", v18);
              CFStringRef v67 = v25;
              QP::DatePeriod::setDisplayKey((const void **)a3, v25);
              *((_DWORD *)a3 + 2) = v20;
              *(_DWORD *)&v79[20] = v74;
              *(void *)&v79[12] = v73;
              *(_DWORD *)CFRange v79 = *(_DWORD *)v70;
              *(void *)&v79[4] = *(void *)&v70[4];
              if (v25) {
                CFRelease(v25);
              }
              goto LABEL_90;
            }
            if (CFStringFind(a2, @"Minute", 0).location == -1)
            {
              if (CFStringFind(a2, @"Hour", 0).location == -1)
              {
                if (CFStringFind(a2, @"Day", 0).location == -1)
                {
                  if (CFStringFind(a2, @"Weekday", 0).location == -1)
                  {
                    if (CFStringFind(a2, @"Weekend", 0).location == -1)
                    {
                      if (CFStringFind(a2, @"Week", 0).location == -1)
                      {
                        if (CFStringFind(a2, @"Month", 0).location == -1)
                        {
                          if (CFStringFind(a2, @"Year", 0).location != -1)
                          {
                            CFStringRef v67 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"VAL_%d-N_EVERY_YEAR", v18);
                            QP::DatePeriod::setDisplayKey((const void **)a3, v67);
                            *((_DWORD *)a3 + 2) = v50;
                            *(_DWORD *)&v79[20] = v74;
                            nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v67, 0);
                            int v58 = v18;
                          }
                        }
                        else
                        {
                          CFStringRef v67 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"VAL_%d-N_EVERY_MONTH", v18);
                          QP::DatePeriod::setDisplayKey((const void **)a3, v67);
                          *((_DWORD *)a3 + 2) = v51;
                          *(_DWORD *)&v79[16] = HIDWORD(v73);
                          *(_DWORD *)&v79[20] = v74;
                          nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v67, 0);
                          int v59 = v18;
                        }
                      }
                      else
                      {
                        CFStringRef v67 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"VAL_%d-N_EVERY_WEEK", v18);
                        QP::DatePeriod::setDisplayKey((const void **)a3, v67);
                        *((_DWORD *)a3 + 2) = v52;
                        HIDWORD(v8std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = v71;
                        unsigned int v81 = v74;
                        nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v67, 0);
                        int v60 = v18;
                      }
                      goto LABEL_89;
                    }
                    CFStringRef v67 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"VAL_%d-N_EVERY_WEEKEND", v18);
                    QP::DatePeriod::setDisplayKey((const void **)a3, v67);
                    *((_DWORD *)a3 + 2) = v53;
                    CFCalendarComposeAbsoluteTime(v6, &at, "wY", v71, v74);
                    CFCalendarAddComponents(v6, &at, 0, "E", 6);
                    CFCalendarDecomposeAbsoluteTime(v6, at, "yEw", &v74, &v72, &v71);
                    LODWORD(v8std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = v72;
                    HIDWORD(v8std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = v71;
                    unsigned int v81 = v74;
                    CFCalendarAddComponents(v6, &at, 0, "d", 1);
                    CFCalendarDecomposeAbsoluteTime(v6, at, "yEw", &v74, &v72, &v71);
                  }
                  else
                  {
                    CFStringRef v67 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"VAL_%d-N_EVERY_WEEKDAY", v18);
                    QP::DatePeriod::setDisplayKey((const void **)a3, v67);
                    *((_DWORD *)a3 + 2) = v54;
                    uint64_t v38 = MEMORY[0x22A623100](*(void *)(*(void *)this + 80));
                    CFCalendarComposeAbsoluteTime(v6, &at, "yEw", v74, 2, v71);
                    if (v16 && v38 < v72) {
                      CFCalendarAddComponents(v6, &at, 0, "w", 1);
                    }
                    CFCalendarDecomposeAbsoluteTime(v6, at, "yEw", &v74, &v72, &v71);
                    LODWORD(v8std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = v72;
                    HIDWORD(v8std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = v71;
                    unsigned int v81 = v74;
                    CFCalendarAddComponents(v6, &at, 0, "d", 4);
                    CFCalendarDecomposeAbsoluteTime(v6, at, "yEw", &v74, &v72, &v71);
                  }
                  int v65 = v72;
                  unsigned int v63 = v74;
                  unsigned int v64 = v71;
                  nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v67, 0);
                  int v60 = v18;
                }
                else
                {
                  CFStringRef v67 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"VAL_%d-N_EVERY_DAY", v18);
                  QP::DatePeriod::setDisplayKey((const void **)a3, v67);
                  *((_DWORD *)a3 + 2) = v23;
                  *(void *)&v79[12] = v73;
                  *(_DWORD *)&v79[20] = v74;
                  nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v67, 0);
                  int v61 = v18;
                }
              }
              else
              {
                CFStringRef v67 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"VAL_%d-N_EVERY_HOUR", v18);
                QP::DatePeriod::setDisplayKey((const void **)a3, v67);
                *((_DWORD *)a3 + 2) = v22;
                *(_DWORD *)&v79[20] = v74;
                *(_DWORD *)&v79[8] = *(_DWORD *)&v70[8];
                *(void *)&v79[12] = v73;
                *(_DWORD *)CFRange v79 = *(_DWORD *)v70;
                *(_DWORD *)&v79[4] = *(_DWORD *)&v70[4];
                nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v67, 0);
                int v62 = v18;
              }
            }
            else
            {
              CFStringRef v67 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"VAL_%d-N_EVERY_MINUTE", v18);
              QP::DatePeriod::setDisplayKey((const void **)a3, v67);
              *((_DWORD *)a3 + 2) = v21;
              *(_DWORD *)&v79[20] = v74;
              *(void *)&v79[12] = v73;
              *(_DWORD *)CFRange v79 = *(_DWORD *)v70;
              *(void *)&v79[4] = *(void *)&v70[4];
              nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v67, 0);
              int v66 = v18;
            }
LABEL_89:
            LODWORD(v18) = v55;
LABEL_90:
            int v17 = v18;
            goto LABEL_91;
          }
          uint64_t v18 = 3;
        }
        int v20 = 106;
        int v21 = 107;
        int v22 = 108;
        int v23 = 109;
        int v53 = 112;
        int v54 = 110;
        int v51 = 114;
        int v52 = 113;
        int v24 = 115;
        goto LABEL_19;
      }
      if (CFStringHasPrefix(a2, @"RelativeNext"))
      {
        if (CFStringHasPrefix(a2, @"RelativeNextTwo"))
        {
          uint64_t v19 = 2;
        }
        else
        {
          if (!CFStringHasPrefix(a2, @"RelativeNextThree"))
          {
            uint64_t v19 = 1;
            int v26 = 55;
            int v27 = 59;
            int v28 = 60;
            int v29 = 61;
            int v30 = 62;
LABEL_30:
            long long v68 = 0;
            if (CFStringFind(a2, @"Second", 0).location == -1)
            {
              if (CFStringFind(a2, @"Minute", 0).location != -1)
              {
                CFStringRef v67 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"VAL_%d-N_MINUTES", v19);
                QP::DatePeriod::setDisplayKey((const void **)a3, v67);
                *((_DWORD *)a3 + 2) = 68;
                CFCalendarAddComponents(v6, &at, 0, "m", v19);
                CFCalendarDecomposeAbsoluteTime(v6, at, "yMdHms", &v74, (char *)&v73 + 4, &v73, &v70[8], &v70[4], v70);
                *(_DWORD *)&v79[20] = v74;
                *(void *)&v79[12] = v73;
                *(void *)&v79[4] = *(void *)&v70[4];
                goto LABEL_36;
              }
              if (CFStringFind(a2, @"Hour", 0).location == -1)
              {
                if (CFStringFind(a2, @"Day", 0).location == -1)
                {
                  if (CFStringFind(a2, @"Weekend", 0).location == -1)
                  {
                    if (CFStringFind(a2, @"Week", 0).location == -1)
                    {
                      if (CFStringFind(a2, @"Month", 0).location == -1)
                      {
                        if (CFStringFind(a2, @"Year", 0).location == -1) {
                          goto LABEL_37;
                        }
                        CFStringRef v67 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"VAL_%d-N_YEARS", v19);
                        QP::DatePeriod::setDisplayKey((const void **)a3, v67);
                        *((_DWORD *)a3 + 2) = v30;
                        CFCalendarAddComponents(v6, &at, 0, "dMy", (1 - v73), (1 - HIDWORD(v73)), v19);
                        CFCalendarDecomposeAbsoluteTime(v6, at, "yMd", &v74, (char *)&v73 + 4, &v73);
                        *(_DWORD *)&v79[20] = v74;
                      }
                      else
                      {
                        CFStringRef v67 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"VAL_%d-N_MONTHS", v19);
                        QP::DatePeriod::setDisplayKey((const void **)a3, v67);
                        *((_DWORD *)a3 + 2) = v29;
                        CFCalendarDecomposeAbsoluteTime(v6, at, "yM", &v74, (char *)&v73 + 4);
                        *(_DWORD *)&v79[16] = HIDWORD(v73) + v19;
                        *(_DWORD *)&v79[20] = v74;
                      }
                    }
                    else
                    {
                      CFStringRef v67 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"VAL_%d-N_WEEKS", v19);
                      QP::DatePeriod::setDisplayKey((const void **)a3, v67);
                      *((_DWORD *)a3 + 2) = v28;
                      CFCalendarAddComponents(v6, &at, 0, "w", v19);
                      CFCalendarDecomposeAbsoluteTime(v6, at, "yEw", &v74, &v72, &v71);
                      HIDWORD(v8std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = v71;
                      unsigned int v81 = v74;
                    }
                  }
                  else
                  {
                    CFStringRef v67 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"VAL_%d-N_WEEKENDS", v19);
                    QP::DatePeriod::setDisplayKey((const void **)a3, v67);
                    *((_DWORD *)a3 + 2) = v27;
                    CFCalendarComposeAbsoluteTime(v6, &at, "wY", v71, v74);
                    CFCalendarAddComponents(v6, &at, 0, "w", v19);
                    CFCalendarAddComponents(v6, &at, 0, "E", 6);
                    CFCalendarDecomposeAbsoluteTime(v6, at, "yEw", &v74, &v72, &v71);
                    LODWORD(v8std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = v72;
                    HIDWORD(v8std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = v71;
                    unsigned int v81 = v74;
                    CFCalendarAddComponents(v6, &at, 0, "d", 1);
                    CFCalendarDecomposeAbsoluteTime(v6, at, "yEw", &v74, &v72, &v71);
                    int v65 = v72;
                    unsigned int v63 = v74;
                    unsigned int v64 = v71;
                  }
                }
                else
                {
                  CFStringRef v67 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"VAL_%d-N_DAYS", v19);
                  QP::DatePeriod::setDisplayKey((const void **)a3, v67);
                  *((_DWORD *)a3 + 2) = v26;
                  CFCalendarAddComponents(v6, &at, 0, "d", v19);
                  CFCalendarDecomposeAbsoluteTime(v6, at, "yMdHms", &v74, (char *)&v73 + 4, &v73, &v70[8], &v70[4], v70);
                  *(_DWORD *)&v79[20] = v74;
                  *(void *)&v79[12] = v73;
                }
LABEL_36:
                nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v67, 0);
LABEL_37:
                nlp::CFScopedPtr<__CFString const*>::reset(&v68, 0);
                goto LABEL_8;
              }
              CFStringRef v67 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"VAL_%d-N_HOURS", v19);
              QP::DatePeriod::setDisplayKey((const void **)a3, v67);
              *((_DWORD *)a3 + 2) = 69;
              CFCalendarAddComponents(v6, &at, 0, "H", v19);
              CFCalendarDecomposeAbsoluteTime(v6, at, "yMdHms", &v74, (char *)&v73 + 4, &v73, &v70[8], &v70[4], v70);
            }
            else
            {
              CFStringRef v67 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"VAL_%d-N_SECONDS", v19);
              QP::DatePeriod::setDisplayKey((const void **)a3, v67);
              *((_DWORD *)a3 + 2) = 67;
              CFCalendarAddComponents(v6, &at, 0, "s", v19);
              CFCalendarDecomposeAbsoluteTime(v6, at, "yMdHms", &v74, (char *)&v73 + 4, &v73, &v70[8], &v70[4], v70);
            }
            *(_DWORD *)&v79[20] = v74;
            *(void *)&v79[12] = v73;
            *(_DWORD *)CFRange v79 = *(_DWORD *)v70;
            *(void *)&v79[4] = *(void *)&v70[4];
            goto LABEL_36;
          }
          uint64_t v19 = 3;
        }
        int v26 = 70;
        int v27 = 71;
        int v28 = 72;
        int v29 = 73;
        int v30 = 74;
        goto LABEL_30;
      }
      if (CFStringHasPrefix(a2, @"RelativeLast"))
      {
        if (CFStringFind(a2, @"Weekend", 0).location != -1)
        {
          QP::DatePeriod::setDisplayKey((const void **)a3, @"LAST_WEEKEND");
          *((_DWORD *)a3 + 2) = 23;
          CFCalendarComposeAbsoluteTime(v6, &at, "EwY", 7, v71 - 1, v74);
          CFCalendarDecomposeAbsoluteTime(v6, at, "EwY", &v72, &v71, &v74);
          LODWORD(v8std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = v72;
          HIDWORD(v8std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = v71;
          unsigned int v81 = v74;
          CFCalendarAddComponents(v6, &at, 0, "d", 1);
          CFCalendarDecomposeAbsoluteTime(v6, at, "yEw", &v74, &v72, &v71);
          unsigned int v63 = v74;
          unsigned int v64 = v71;
          int v65 = 1;
          goto LABEL_8;
        }
        if (CFStringFind(a2, @"Week", 0).location != -1)
        {
          QP::DatePeriod::setDisplayKey((const void **)a3, @"LAST_WEEK");
          *((_DWORD *)a3 + 2) = 24;
          unsigned int v33 = v71 - 1;
LABEL_46:
          HIDWORD(v8std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = v33;
          unsigned int v81 = v74;
          goto LABEL_8;
        }
        if (CFStringFind(a2, @"Month", 0).location != -1)
        {
          QP::DatePeriod::setDisplayKey((const void **)a3, @"LAST_MONTH");
          *((_DWORD *)a3 + 2) = 25;
          uint64_t v36 = (1 - v73);
          uint64_t v37 = 0xFFFFFFFFLL;
LABEL_69:
          CFCalendarAddComponents(v6, &at, 0, "dM", v36, v37);
          CFCalendarDecomposeAbsoluteTime(v6, at, "yMd", &v74, (char *)&v73 + 4, &v73);
          goto LABEL_7;
        }
        if (CFStringFind(a2, @"Year", 0).location == -1) {
          goto LABEL_8;
        }
        QP::DatePeriod::setDisplayKey((const void **)a3, @"LAST_YEAR");
        *((_DWORD *)a3 + 2) = 26;
        uint64_t v39 = (1 - v73);
        uint64_t v40 = (1 - HIDWORD(v73));
        uint64_t v41 = 0xFFFFFFFFLL;
LABEL_83:
        CFCalendarAddComponents(v6, &at, 0, "dMy", v39, v40, v41);
        CFCalendarDecomposeAbsoluteTime(v6, at, "yMd", &v74, (char *)&v73 + 4, &v73);
        goto LABEL_143;
      }
      if (CFStringHasPrefix(a2, @"RelativeThis"))
      {
        if (CFStringFind(a2, @"Second", 0).location != -1)
        {
          QP::DatePeriod::setDisplayKey((const void **)a3, @"THIS_SECOND");
          *((_DWORD *)a3 + 2) = 8;
          int v31 = *(_DWORD *)&v70[8];
          *(_DWORD *)CFRange v79 = *(_DWORD *)v70;
          *(_DWORD *)&v79[4] = *(_DWORD *)&v70[4];
LABEL_43:
          int v32 = HIDWORD(v73);
          *(_DWORD *)&v79[8] = v31;
LABEL_142:
          *(_DWORD *)&v79[16] = v32;
          goto LABEL_143;
        }
        if (CFStringFind(a2, @"Minute", 0).location != -1)
        {
          QP::DatePeriod::setDisplayKey((const void **)a3, @"THIS_MINUTE");
          *((_DWORD *)a3 + 2) = 9;
          *(_DWORD *)&v79[4] = *(_DWORD *)&v70[4];
          *(_DWORD *)&v79[8] = *(_DWORD *)&v70[8];
          goto LABEL_7;
        }
        if (CFStringFind(a2, @"Hour", 0).location != -1)
        {
          QP::DatePeriod::setDisplayKey((const void **)a3, @"THIS_HOUR");
          *((_DWORD *)a3 + 2) = 10;
          int v31 = *(_DWORD *)&v70[8];
          goto LABEL_43;
        }
        if (CFStringFind(a2, @"Weekend", 0).location == -1)
        {
          if (CFStringFind(a2, @"Week", 0).location != -1)
          {
            QP::DatePeriod::setDisplayKey((const void **)a3, @"THIS_WEEK");
            *((_DWORD *)a3 + 2) = 12;
            unsigned int v33 = v71;
            goto LABEL_46;
          }
          if (CFStringFind(a2, @"Month", 0).location != -1)
          {
            QP::DatePeriod::setDisplayKey((const void **)a3, @"THIS_MONTH");
            *((_DWORD *)a3 + 2) = 13;
            goto LABEL_7;
          }
          if (CFStringFind(a2, @"Year", 0).location == -1) {
            goto LABEL_8;
          }
          QP::DatePeriod::setDisplayKey((const void **)a3, @"THIS_YEAR");
          *((_DWORD *)a3 + 2) = 14;
LABEL_143:
          *(_DWORD *)&v79[20] = v74;
          goto LABEL_8;
        }
        QP::DatePeriod::setDisplayKey((const void **)a3, @"THIS_WEEKEND");
        *((_DWORD *)a3 + 2) = 11;
        uint64_t v46 = MEMORY[0x22A623100](*(void *)(*(void *)this + 80));
        uint64_t v47 = MEMORY[0x22A623100](v6);
        CFCalendarComposeAbsoluteTime(v6, &at, "EwY", 7, v71, v74);
        if (v46 == v47)
        {
          if (v15 && at > CurrentTime)
          {
            uint64_t v48 = 0xFFFFFFFFLL;
          }
          else
          {
            if (!v16 || at >= CurrentTime) {
              goto LABEL_130;
            }
            uint64_t v48 = 1;
          }
          CFCalendarAddComponents(v6, &at, 0, "w", at, v48);
        }
LABEL_130:
        CFCalendarDecomposeAbsoluteTime(v6, at, "yEw", &v74, &v72, &v71);
        LODWORD(v8std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = v72;
        HIDWORD(v8std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = v71;
        unsigned int v81 = v74;
        int v65 = 1;
        CFCalendarAddComponents(v6, &at, 0, "d", 1);
        CFCalendarDecomposeAbsoluteTime(v6, at, "wY", &v71, &v74);
        unsigned int v63 = v74;
        unsigned int v64 = v71;
        goto LABEL_8;
      }
      if (!CFStringHasPrefix(a2, @"RelativeEnd"))
      {
        if (CFStringHasSuffix(a2, @"TodayDate"))
        {
          QP::DatePeriod::setDisplayKey((const void **)a3, @"TODAY");
          *((_DWORD *)a3 + 2) = 7;
LABEL_141:
          int v32 = HIDWORD(v73);
          *(_DWORD *)&v79[12] = v73;
          goto LABEL_142;
        }
        if (CFStringHasSuffix(a2, @"YesterdayDate"))
        {
          QP::DatePeriod::setDisplayKey((const void **)a3, @"YESTERDAY");
          *((_DWORD *)a3 + 2) = 19;
          uint64_t v45 = 0xFFFFFFFFLL;
        }
        else if (CFStringHasSuffix(a2, @"TomorrowDate"))
        {
          QP::DatePeriod::setDisplayKey((const void **)a3, @"TOMORROW");
          *((_DWORD *)a3 + 2) = 55;
          uint64_t v45 = 1;
        }
        else if (CFStringHasSuffix(a2, @"TwoDaysDate"))
        {
          QP::DatePeriod::setDisplayKey((const void **)a3, @"VAL_2-N_DAYS_AGO");
          *((_DWORD *)a3 + 2) = 34;
          uint64_t v45 = 4294967294;
        }
        else
        {
          if (!CFStringHasSuffix(a2, @"ThreeDaysDate"))
          {
            if (CFStringHasSuffix(a2, @"TwoWeeksDate"))
            {
              QP::DatePeriod::setDisplayKey((const void **)a3, @"VAL_2-N_WEEKS_AGO");
              *((_DWORD *)a3 + 2) = 36;
              unsigned int v33 = v71 - 2;
              goto LABEL_46;
            }
            if (CFStringHasSuffix(a2, @"ThreeWeeksDate"))
            {
              QP::DatePeriod::setDisplayKey((const void **)a3, @"VAL_3-N_WEEKS_AGO");
              *((_DWORD *)a3 + 2) = 36;
              unsigned int v33 = v71 - 3;
              goto LABEL_46;
            }
            if (CFStringHasSuffix(a2, @"TwoMonthsDate"))
            {
              QP::DatePeriod::setDisplayKey((const void **)a3, @"VAL_2-N_MONTHS_AGO");
              *((_DWORD *)a3 + 2) = 37;
              uint64_t v36 = (1 - v73);
              uint64_t v37 = 4294967294;
              goto LABEL_69;
            }
            if (CFStringHasSuffix(a2, @"ThreeMonthsDate"))
            {
              QP::DatePeriod::setDisplayKey((const void **)a3, @"VAL_3-N_MONTHS_AGO");
              *((_DWORD *)a3 + 2) = 37;
              uint64_t v36 = (1 - v73);
              uint64_t v37 = 4294967293;
              goto LABEL_69;
            }
            if (CFStringHasSuffix(a2, @"TwoYearsDate"))
            {
              QP::DatePeriod::setDisplayKey((const void **)a3, @"VAL_2-N_YEARS_AGO");
              *((_DWORD *)a3 + 2) = 38;
              uint64_t v39 = (1 - v73);
              uint64_t v40 = (1 - HIDWORD(v73));
              uint64_t v41 = 4294967294;
            }
            else
            {
              if (!CFStringHasSuffix(a2, @"ThreeYearsDate")) {
                goto LABEL_8;
              }
              QP::DatePeriod::setDisplayKey((const void **)a3, @"VAL_3-N_YEARS_AGO");
              *((_DWORD *)a3 + 2) = 38;
              uint64_t v39 = (1 - v73);
              uint64_t v40 = (1 - HIDWORD(v73));
              uint64_t v41 = 4294967293;
            }
            goto LABEL_83;
          }
          QP::DatePeriod::setDisplayKey((const void **)a3, @"VAL_3-N_DAYS_AGO");
          *((_DWORD *)a3 + 2) = 34;
          uint64_t v45 = 4294967293;
        }
        CFCalendarAddComponents(v6, &at, 0, "d", v45, v49);
LABEL_140:
        CFCalendarDecomposeAbsoluteTime(v6, at, "yMd", &v74, (char *)&v73 + 4, &v73);
        goto LABEL_141;
      }
      if (!CFStringHasSuffix(a2, @"IsoMonthDate")) {
        goto LABEL_8;
      }
      QP::DatePeriod::setDisplayKey((const void **)a3, @"FORMATTED");
      *((_DWORD *)a3 + 2) = 2;
      double AbsoluteTime = QP::DateComponents::getAbsoluteTime((QP::DateComponents *)v79, v6, v13);
      if (v16)
      {
        if (at <= AbsoluteTime
          || (!*(_DWORD *)&v79[8] || *(int *)&v79[8] >= *(int *)&v70[8])
          && (!v80 || (int)v80 >= v72)
          && (!*(_DWORD *)&v79[12] || *(int *)&v79[12] >= (int)v73)
          && (!*(_DWORD *)&v79[16] || *(int *)&v79[16] >= SHIDWORD(v73)))
        {
          goto LABEL_104;
        }
        uint64_t v35 = 1;
      }
      else
      {
        if (at >= AbsoluteTime
          && (!*(_DWORD *)&v79[8] || *(int *)&v79[8] < *(int *)&v70[8])
          && (!v80 || (int)v80 < v72)
          && (!*(_DWORD *)&v79[12] || *(int *)&v79[12] < (int)v73)
          && (!*(_DWORD *)&v79[16] || *(int *)&v79[16] < SHIDWORD(v73)))
        {
          goto LABEL_104;
        }
        uint64_t v35 = 0xFFFFFFFFLL;
      }
      CFCalendarAddComponents(v6, &at, 0, "y", v35);
LABEL_104:
      CFCalendarAddComponents(v6, &at, 0, "dM", -(int)v73, (1 - HIDWORD(v73)));
      CFCalendarAddComponents(v6, &at, 0, "dM", 0xFFFFFFFFLL, *(unsigned int *)&v79[16]);
      goto LABEL_140;
    }
  }
  return result;
}

void sub_224DFCBA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,const void *a28,const void *a29)
{
}

uint64_t QP::updateDateComponentsWithValues(uint64_t a1, SInt32 *a2, CFDictionaryRef theDict, int a4)
{
  int v31 = a4;
  uint64_t v32 = *MEMORY[0x263EF8340];
  if (!theDict) {
    return 0;
  }
  CFLocaleRef v30 = *(const __CFLocale **)(*(void *)a1 + 104);
  if (!v30) {
    return 0;
  }
  CFIndex Count = CFDictionaryGetCount(theDict);
  MEMORY[0x270FA5388](Count);
  CFStringRef v8 = (const void **)((char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (v7 >= 0x200) {
    size_t v9 = 512;
  }
  else {
    size_t v9 = v7;
  }
  bzero((char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  CFDictionaryGetKeysAndValues(theDict, v8, 0);
  if (Count < 1)
  {
LABEL_82:
    if ((a2[8] & 0x80000000) == 0 && (a2[3] & 0x80000000) == 0) {
      a2[8] = -1;
    }
    if ((a2[9] & 0x80000000) == 0 || (a2[10] & 0x80000000) == 0 || (a2[11] & 0x80000000) == 0)
    {
      a2[12] = a2[5];
      a2[5] = -1;
    }
    SInt32 v25 = a2[2];
    SInt32 v26 = a2[7];
    if (v25 < 0)
    {
      if (v26 < 0) {
        return 1;
      }
      unsigned int v28 = v26 - 1;
      if (v28 >= 8) {
        return 1;
      }
      SInt32 v27 = *(_DWORD *)&asc_224E1EC78[4 * v28];
    }
    else
    {
      if (v26 < 0) {
        return 1;
      }
      uint64_t result = 1;
      if (v25 != 12 || v26 != 1) {
        return result;
      }
      SInt32 v27 = 0;
    }
    a2[2] = v27;
    return 1;
  }
  uint64_t v10 = 0;
  BOOL v11 = 1;
  uint64_t v29 = (uint64_t)&v29;
  while (1)
  {
    CFStringRef v12 = (const __CFString *)v8[v10];
    if (CFStringHasSuffix(v12, @"Date") || CFStringHasPrefix(v12, @"NUMBERS")) {
      goto LABEL_10;
    }
    if (CFStringHasPrefix(v12, @"SPELLED"))
    {
      if ((v31 & 1) == 0)
      {
        CFStringRef Value = (const __CFString *)CFDictionaryGetValue(theDict, v12);
        SInt32 IntFromSpelledNumber = getIntFromSpelledNumber(Value, v30);
        if (IntFromSpelledNumber < 0) {
          return 0;
        }
        a2[5] = IntFromSpelledNumber;
      }
      goto LABEL_10;
    }
    int HasPrefix = CFStringHasPrefix(v12, @"Num");
    CFDictionaryRef v16 = (const __CFDictionary *)CFDictionaryGetValue(theDict, v12);
    CFStringRef v17 = (const __CFString *)v16;
    if (!HasPrefix)
    {
      if (CFStringHasPrefix(v12, @"d") || CFStringHasPrefix(v12, @"DAY_ORDINAL"))
      {
        uint64_t result = CFStringGetIntValue(v17);
        if (!result) {
          return result;
        }
        a2[3] = result;
      }
      else if (CFStringHasPrefix(v12, @"E"))
      {
        uint64_t result = CFStringGetIntValue(v17);
        if (!result) {
          return result;
        }
        a2[8] = result;
      }
      else if (CFStringHasPrefix(v12, @"M"))
      {
        uint64_t result = CFStringGetIntValue(v17);
        if (!result) {
          return result;
        }
        a2[4] = result;
      }
      else if (CFStringHasPrefix(v12, @"y") || CFStringHasPrefix(v12, @"Y"))
      {
        IntCFStringRef Value = CFStringGetIntValue(v17);
        uint64_t result = 0;
        if (!IntValue || IntValue > 2100) {
          return result;
        }
        a2[5] = IntValue;
        if (CFEqual(v12, @"yy"))
        {
          int v22 = a2[5];
          if (v22 > 39) {
            int v23 = v22 + 1900;
          }
          else {
            int v23 = v22 + 2000;
          }
          a2[5] = v23;
        }
      }
      else if (CFStringHasPrefix(v12, @"F"))
      {
        uint64_t result = CFStringGetIntValue(v17);
        if (!result) {
          return result;
        }
        a2[9] = result;
      }
      else if (CFStringHasPrefix(v12, @"w"))
      {
        uint64_t result = CFStringGetIntValue(v17);
        if (!result) {
          return result;
        }
        a2[11] = result;
      }
      else if (CFStringHasPrefix(v12, @"W"))
      {
        uint64_t result = CFStringGetIntValue(v17);
        if (!result) {
          return result;
        }
        a2[10] = result;
      }
      else if (CFStringHasPrefix(v12, @"q") || CFStringHasPrefix(v12, @"Q"))
      {
        uint64_t result = CFStringGetIntValue(v17);
        if (!result) {
          return result;
        }
        a2[6] = result;
      }
      else if (CFStringHasPrefix(v12, @"h") || CFStringHasPrefix(v12, @"H"))
      {
        a2[2] = CFStringGetIntValue(v17);
      }
      else if (CFStringHasPrefix(v12, @"m"))
      {
        a2[1] = CFStringGetIntValue(v17);
      }
      else if (CFStringHasPrefix(v12, @"s"))
      {
        *a2 = CFStringGetIntValue(v17);
      }
      else
      {
        uint64_t result = CFStringHasPrefix(v12, @"a");
        if (!result) {
          return result;
        }
        if (CFStringHasPrefix(v17, @"am"))
        {
          int v24 = 1;
        }
        else if (CFStringHasPrefix(v17, @"pm"))
        {
          int v24 = 2;
        }
        else if (CFStringHasPrefix(v17, @"morning"))
        {
          int v24 = 3;
        }
        else if (CFStringHasPrefix(v17, @"noon"))
        {
          int v24 = 4;
        }
        else if (CFStringHasPrefix(v17, @"afternoon"))
        {
          int v24 = 5;
        }
        else if (CFStringHasPrefix(v17, @"evening"))
        {
          int v24 = 6;
        }
        else
        {
          if (!CFStringHasPrefix(v17, @"night"))
          {
            if (CFStringHasPrefix(v17, @"midnight")) {
              a2[7] = 8;
            }
            goto LABEL_10;
          }
          int v24 = 7;
        }
        a2[7] = v24;
      }
      goto LABEL_10;
    }
    if (!CFDictionaryContainsKey(v16, @"NUMBERS"))
    {
      if (CFDictionaryContainsKey((CFDictionaryRef)v17, @"DIGITS"))
      {
        CFStringRef v20 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)v17, @"DIGITS");
        CFStringGetIntValue(v20);
      }
      goto LABEL_10;
    }
    CFStringRef v18 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)v17, @"NUMBERS");
    if ((getIntFromSpelledNumber(v18, v30) & 0x80000000) != 0) {
      break;
    }
LABEL_10:
    BOOL v11 = ++v10 < Count;
    if (Count == v10) {
      goto LABEL_82;
    }
  }
  if (!v11) {
    goto LABEL_82;
  }
  return 0;
}

uint64_t QP::intValueForNumberInValues(QP *this, CFDictionaryRef theDict, const __CFDictionary *a3)
{
  if (!theDict) {
    return 0xFFFFFFFFLL;
  }
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(theDict, @"SPELLED");
  if (Value)
  {
    uint64_t IntFromSpelledNumber = getIntFromSpelledNumber(Value, this);
    if ((IntFromSpelledNumber & 0x80000000) == 0) {
      return IntFromSpelledNumber;
    }
    unint64_t v7 = @"NUMBERS";
    goto LABEL_5;
  }
  CFStringRef v8 = (const __CFString *)CFDictionaryGetValue(theDict, @"DIGITS");
  if (!v8)
  {
    CFStringRef v8 = (const __CFString *)CFDictionaryGetValue(theDict, @"NON_YEAR_DIGITS");
    if (!v8)
    {
      CFStringRef v8 = (const __CFString *)CFDictionaryGetValue(theDict, @"NON_MONTH_DIGITS");
      if (!v8)
      {
        uint64_t IntFromSpelledNumber = 0xFFFFFFFFLL;
        unint64_t v7 = @"NON_DAY_DIGITS";
LABEL_5:
        CFStringRef v8 = (const __CFString *)CFDictionaryGetValue(theDict, v7);
        if (!v8) {
          return IntFromSpelledNumber;
        }
      }
    }
  }
  uint64_t IntFromSpelledNumber = CFStringGetIntValue(v8);
  if (!IntFromSpelledNumber)
  {
    if (CFStringsAreEqual(v8, @"0"))
    {
      return 0;
    }
    else
    {
      CFMutableStringRef MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, v8);
      CFStringNormalize(MutableCopy, kCFStringNormalizationFormKC);
      uint64_t IntFromSpelledNumber = CFStringGetIntValue(MutableCopy);
      if (MutableCopy) {
        CFRelease(MutableCopy);
      }
    }
  }
  return IntFromSpelledNumber;
}

void sub_224DFD3F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nlp::CFScopedPtr<__CFString *>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t QP::updateDateComponentsWithRelativeUnitOffset(uint64_t result, uint64_t a2, const __CFDate *a3, QP::DateComponents *this, int a5, uint64_t a6, int a7)
{
  if (result)
  {
    if (a2)
    {
      CFStringRef v12 = (__CFCalendar *)result;
      uint64_t result = QP::DateComponents::isEmpty(this);
      if ((result & 1) == 0)
      {
        CFAbsoluteTime at = QP::DateComponents::getAbsoluteTime(this, v12, a3);
        uint64_t v33 = 0;
        uint64_t v34 = 0;
        int v32 = 0;
        int v31 = 0;
        uint64_t v29 = 0;
        uint64_t v30 = 0;
        int v13 = *((_DWORD *)this + 1);
        int v14 = *((_DWORD *)this + 2);
        int v15 = *(_DWORD *)this;
        if ((v14 & 0x80000000) == 0
          || (v13 & 0x80000000) == 0
          || (v15 & 0x80000000) == 0
          || (*((_DWORD *)this + 7) & 0x80000000) == 0)
        {
          if (a7)
          {
            if ((v15 & 0x80000000) == 0 || (v13 & v14 & 0x80000000) == 0)
            {
              if (v13 < 0) {
                CFDictionaryRef v16 = "H";
              }
              else {
                CFDictionaryRef v16 = "m";
              }
              if (v15 < 0) {
                CFCalendarAddComponents(v12, &at, 0, v16, a6);
              }
              else {
                CFCalendarAddComponents(v12, &at, 0, "s", a6);
              }
            }
          }
          else
          {
            CFCalendarAddComponents(v12, &at, 0, "d", a6);
          }
          CFCalendarDecomposeAbsoluteTime(v12, at, "dEMyHmsa", (char *)&v33 + 4, &v33, &v34, (char *)&v34 + 4, (char *)&v30 + 4, &v30, (char *)&v29 + 4, &v29);
          int v17 = v34;
          int v18 = HIDWORD(v34);
          int v19 = HIDWORD(v33);
          if (__PAIR64__(v30, HIDWORD(v29))) {
            int v20 = v30;
          }
          else {
            int v20 = -1;
          }
          if (HIDWORD(v29)) {
            int v21 = HIDWORD(v29);
          }
          else {
            int v21 = -1;
          }
          if (v29) {
            int v22 = 2;
          }
          else {
            int v22 = 1;
          }
          int v23 = HIDWORD(v30);
          int v24 = -1;
          goto LABEL_31;
        }
        if ((*((_DWORD *)this + 11) & 0x80000000) == 0)
        {
          if ((*((_DWORD *)this + 8) & 0x80000000) == 0)
          {
            CFCalendarAddComponents(v12, &at, 0, "d", a6);
LABEL_44:
            CFCalendarDecomposeAbsoluteTime(v12, at, "EwY", &v33, &v32, (char *)&v34 + 4);
            int v26 = v32;
            int v24 = v33;
            int v23 = -1;
            int v19 = -1;
            int v17 = -1;
            int v18 = -1;
            int v20 = -1;
            uint64_t result = HIDWORD(v34);
            int v22 = -1;
            goto LABEL_45;
          }
          if ((*((_DWORD *)this + 10) & 0x80000000) != 0)
          {
            CFCalendarAddComponents(v12, &at, 0, "w", a6);
            CFCalendarDecomposeAbsoluteTime(v12, at, "wY", &v32, (char *)&v34 + 4);
            int v26 = v32;
            int v23 = -1;
            int v19 = -1;
            int v17 = -1;
            int v18 = -1;
            uint64_t result = HIDWORD(v34);
            int v20 = -1;
            int v22 = -1;
            int v24 = -1;
LABEL_45:
            int v21 = -1;
            int v25 = -1;
            goto LABEL_49;
          }
          goto LABEL_41;
        }
        int v27 = *((_DWORD *)this + 10);
        if (v27 < 0 && (*((_DWORD *)this + 9) & 0x80000000) != 0)
        {
          int v28 = *((_DWORD *)this + 8);
          if ((*((_DWORD *)this + 12) & 0x80000000) == 0)
          {
            if (v28 < 0) {
              goto LABEL_47;
            }
LABEL_43:
            CFCalendarAddComponents(v12, &at, 0, "w", a6);
            goto LABEL_44;
          }
          if ((v28 & 0x80000000) == 0) {
            goto LABEL_43;
          }
          if ((*((_DWORD *)this + 3) & 0x80000000) == 0)
          {
            CFCalendarAddComponents(v12, &at, 0, "d", a6);
            CFCalendarDecomposeAbsoluteTime(v12, at, "dMy", (char *)&v33 + 4, &v34, (char *)&v34 + 4);
            int v19 = HIDWORD(v33);
            int v17 = v34;
            int v23 = -1;
            int v20 = -1;
            int v22 = -1;
            int v24 = -1;
            int v21 = -1;
            int v18 = HIDWORD(v34);
LABEL_31:
            int v25 = -1;
            int v26 = -1;
            uint64_t result = 0xFFFFFFFFLL;
LABEL_49:
            *(_DWORD *)this = v21;
            *((_DWORD *)this + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = v20;
            *((_DWORD *)this + 2) = v23;
            *((_DWORD *)this + 3) = v19;
            *((_DWORD *)this + 4) = v17;
            *((_DWORD *)this + 5) = v18;
            *((_DWORD *)this + 6) = -1;
            *((_DWORD *)this + 7) = v22;
            *((_DWORD *)this + 8) = v24;
            *((_DWORD *)this + 9) = -1;
            *((_DWORD *)this + 1std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = v25;
            *((_DWORD *)this + 1QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = v26;
            *((_DWORD *)this + 12) = result;
            return result;
          }
          if ((*((_DWORD *)this + 4) & 0x80000000) == 0)
          {
            if (a5 == 4) {
              CFCalendarAddComponents(v12, &at, 0, "y", a6);
            }
            else {
              CFCalendarAddComponents(v12, &at, 0, "M", a6);
            }
            CFCalendarDecomposeAbsoluteTime(v12, at, "yM", (char *)&v34 + 4, &v34);
            int v17 = v34;
            int v18 = HIDWORD(v34);
            int v23 = -1;
            int v19 = -1;
            goto LABEL_61;
          }
          if ((*((_DWORD *)this + 5) & 0x80000000) == 0)
          {
            CFCalendarAddComponents(v12, &at, 0, "y", a6);
            CFCalendarDecomposeAbsoluteTime(v12, at, "y", (char *)&v34 + 4);
            int v23 = -1;
            int v19 = -1;
            int v18 = HIDWORD(v34);
            int v17 = -1;
LABEL_61:
            int v20 = -1;
            int v22 = -1;
            int v24 = -1;
            int v21 = -1;
            goto LABEL_31;
          }
        }
        else
        {
          if ((*((_DWORD *)this + 8) & 0x80000000) == 0) {
            goto LABEL_43;
          }
          if ((v27 & 0x80000000) == 0)
          {
LABEL_41:
            CFCalendarAddComponents(v12, &at, 0, "M", a6);
            CFCalendarDecomposeAbsoluteTime(v12, at, "WMY", &v31, &v34, (char *)&v34 + 4);
            int v25 = v31;
            int v17 = v34;
            uint64_t result = HIDWORD(v34);
            int v23 = -1;
            int v19 = -1;
            int v18 = -1;
            int v20 = -1;
            int v22 = -1;
            int v24 = -1;
            int v21 = -1;
LABEL_48:
            int v26 = -1;
            goto LABEL_49;
          }
          if ((*((_DWORD *)this + 12) & 0x80000000) == 0)
          {
LABEL_47:
            CFCalendarAddComponents(v12, &at, 0, "Y", a6);
            CFCalendarDecomposeAbsoluteTime(v12, at, "Y", (char *)&v34 + 4);
            int v23 = -1;
            int v19 = -1;
            uint64_t result = HIDWORD(v34);
            int v17 = -1;
            int v18 = -1;
            int v20 = -1;
            int v22 = -1;
            int v24 = -1;
            int v21 = -1;
            int v25 = -1;
            goto LABEL_48;
          }
        }
        int v23 = -1;
        int v19 = -1;
        int v17 = -1;
        int v18 = -1;
        goto LABEL_61;
      }
    }
  }
  return result;
}

void QP::DateConverter::mergeDateTime(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  *a4 = 0;
  uint64_t v6 = *(void *)a2 + 20;
  if ((*(_DWORD *)(*(void *)a2 + 8) - 91) <= 0x1D)
  {
    long long v7 = *(_OWORD *)(*(void *)a2 + 36);
    long long v21 = *(_OWORD *)v6;
    long long v22 = v7;
    long long v23 = *(_OWORD *)(v6 + 32);
    int v24 = *(_DWORD *)(v6 + 48);
    QP::DateComponents::merge((int *)&v21, (const QP::DateComponents *)(*a3 + 20));
    uint64_t v8 = *a3;
    long long v9 = *(_OWORD *)(*a3 + 88);
    long long v17 = *(_OWORD *)(*a3 + 72);
    long long v18 = v9;
    long long v19 = *(_OWORD *)(v8 + 104);
    int v20 = *(_DWORD *)(v8 + 120);
    uint64_t v10 = *a1;
    BOOL v11 = (std::__shared_weak_count *)a1[1];
    v16[0] = v10;
    v16[1] = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    QP::resolveDateComponents(v16, &v21, &v17);
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    operator new();
  }
  long long v12 = *(_OWORD *)(*(void *)a2 + 36);
  long long v21 = *(_OWORD *)v6;
  long long v22 = v12;
  long long v23 = *(_OWORD *)(v6 + 32);
  int v24 = *(_DWORD *)(v6 + 48);
  if (*(_DWORD *)(*a3 + 8) != 3 || (HIDWORD(v22) & 0x80000000) != 0) {
    QP::DateComponents::merge((int *)&v21, (const QP::DateComponents *)(*a3 + 20));
  }
  int v20 = -1;
  *(void *)&long long v13 = -1;
  *((void *)&v13 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = -1;
  long long v18 = v13;
  long long v19 = v13;
  long long v17 = v13;
  int v14 = (std::__shared_weak_count *)a1[1];
  v15[0] = *a1;
  v15[1] = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  QP::resolveDateComponents(v15, &v21, &v17);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  operator new();
}

void sub_224DFDC54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100](v4, 0);
  _Unwind_Resume(a1);
}

int *QP::DateComponents::merge(int *this, const QP::DateComponents *a2)
{
  int v2 = *(_DWORD *)a2;
  int v3 = this[1];
  if (*this >= 0) {
    int v2 = *this;
  }
  *this = v2;
  int v4 = *((_DWORD *)a2 + 1);
  if (v3 >= 0) {
    int v4 = v3;
  }
  this[1] = v4;
  int v5 = *((_DWORD *)a2 + 2);
  int v6 = this[3];
  if (this[2] >= 0) {
    int v5 = this[2];
  }
  this[2] = v5;
  int v7 = *((_DWORD *)a2 + 3);
  if (v6 >= 0) {
    int v7 = v6;
  }
  this[3] = v7;
  int v8 = *((_DWORD *)a2 + 4);
  int v9 = this[5];
  if (this[4] >= 0) {
    int v8 = this[4];
  }
  this[4] = v8;
  int v10 = *((_DWORD *)a2 + 5);
  if (v9 >= 0) {
    int v10 = v9;
  }
  this[5] = v10;
  int v11 = *((_DWORD *)a2 + 6);
  int v12 = this[7];
  if (this[6] >= 0) {
    int v11 = this[6];
  }
  this[6] = v11;
  int v13 = *((_DWORD *)a2 + 7);
  if (v12 >= 0) {
    int v13 = v12;
  }
  this[7] = v13;
  int v14 = *((_DWORD *)a2 + 8);
  int v15 = this[9];
  if (this[8] >= 0) {
    int v14 = this[8];
  }
  this[8] = v14;
  int v16 = *((_DWORD *)a2 + 9);
  if (v15 >= 0) {
    int v16 = v15;
  }
  this[9] = v16;
  int v17 = *((_DWORD *)a2 + 10);
  int v18 = this[11];
  if (this[10] >= 0) {
    int v17 = this[10];
  }
  this[10] = v17;
  int v19 = *((_DWORD *)a2 + 11);
  if (v18 >= 0) {
    int v19 = v18;
  }
  this[11] = v19;
  int v20 = this[12];
  if (v20 < 0) {
    int v20 = *((_DWORD *)a2 + 12);
  }
  this[12] = v20;
  return this;
}

double QP::resolveDateComponents(void *a1, long long *a2, long long *a3)
{
  long long v6 = a2[1];
  long long v20 = *a2;
  long long v7 = a2[2];
  long long v21 = v6;
  long long v22 = v7;
  int v23 = *((_DWORD *)a2 + 12);
  long long v8 = a3[1];
  long long v16 = *a3;
  long long v17 = v8;
  long long v18 = a3[2];
  int v19 = *((_DWORD *)a3 + 12);
  QP::getCurrentDateComponents(*(__CFCalendar **)(*a1 + 80), *(__CFCalendar **)(*a1 + 72), (uint64_t)v15);
  int v9 = (std::__shared_weak_count *)a1[1];
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    int v10 = (std::__shared_weak_count *)a1[1];
    if (v10)
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
  }
  long long v11 = v21;
  long long v12 = v22;
  *a2 = v20;
  a2[1] = v11;
  a2[2] = v12;
  *((_DWORD *)a2 + 12) = v23;
  long long v13 = v17;
  *a3 = v16;
  a3[1] = v13;
  double result = *(double *)&v18;
  a3[2] = v18;
  *((_DWORD *)a3 + 12) = v19;
  return result;
}

const void ***QP::DateConverter::mergeDate@<X0>(void *a1@<X0>, const __CFString ***a2@<X1>, const __CFString ***a3@<X2>, void *a4@<X8>)
{
  long long v70 = 0;
  long long v8 = *a2;
  long long v9 = *(_OWORD *)((char *)*a2 + 20);
  long long v10 = *(_OWORD *)((char *)*a2 + 52);
  long long v67 = *(_OWORD *)((char *)*a2 + 36);
  long long v68 = v10;
  int v69 = *((_DWORD *)v8 + 17);
  long long v66 = v9;
  long long v11 = *a3;
  long long v12 = *(_OWORD *)((char *)*a3 + 20);
  long long v13 = *(_OWORD *)((char *)*a3 + 36);
  long long v64 = *(_OWORD *)((char *)*a3 + 52);
  int v65 = *((_DWORD *)v11 + 17);
  long long v62 = v12;
  long long v63 = v13;
  if (QP::DateComponents::isEmpty((QP::DateComponents *)&v66)
    && (QP::DateComponents::isEmpty((QP::DateComponents *)&v62) & 1) != 0
    || !QP::DateComponents::isEmpty((QP::DateComponents *)((char *)*a2 + 124))
    || !QP::DateComponents::isEmpty((QP::DateComponents *)((char *)*a3 + 124)))
  {
    goto LABEL_75;
  }
  uint64_t v54 = *(void *)(*a1 + 104);
  int v14 = *(__CFCalendar **)(*a1 + 88);
  CFDateRef v15 = *(const __CFDate **)(*a1 + 72);
  double CurrentTime = getCurrentTime(v14, v15);
  LODWORD(v56) = -1;
  CFCalendarDecomposeAbsoluteTime(v14, CurrentTime, "y", &v56);
  BOOL v18 = (int)(HIDWORD(v66) | v67 | DWORD1(v67) | v68 | HIDWORD(v68) | v69) >= 0;
  if ((SDWORD1(v67) & 0x80000000) == 0) {
    int v19 = DWORD1(v67);
  }
  else {
    int v19 = v69;
  }
  if ((SDWORD1(v63) & 0x80000000) == 0) {
    int v20 = DWORD1(v63);
  }
  else {
    int v20 = v65;
  }
  if (v20 != -1)
  {
    if (*(unsigned char *)(*a1 + 24))
    {
      if (QP::DateComponents::getAbsoluteTime((QP::DateComponents *)&v62, v14, v15) < CurrentTime) {
        goto LABEL_31;
      }
    }
    else if (*(unsigned char *)(*a1 + 23) {
           && QP::DateComponents::getAbsoluteTime((QP::DateComponents *)&v62, v14, v15) > CurrentTime)
    }
    {
      goto LABEL_31;
    }
    if (*((_DWORD *)*a2 + 2) == 2 && *((_DWORD *)*a3 + 2) == 2 && v19 != -1)
    {
      double AbsoluteTime = QP::DateComponents::getAbsoluteTime((QP::DateComponents *)&v62, v14, v15);
      char v25 = AbsoluteTime >= QP::DateComponents::getAbsoluteTime((QP::DateComponents *)&v66, v14, v15) || v18;
      if ((v25 & 1) == 0) {
        goto LABEL_31;
      }
      goto LABEL_57;
    }
LABEL_48:
    if (v19 == -1)
    {
      uint64_t v30 = *a2;
      int v31 = *((_DWORD *)*a2 + 2);
      if ((v31 - 1) <= 0x3F && ((1 << (v31 - 1)) & 0x8000000008008001) != 0
        || v31 == 102)
      {
        int v32 = (std::__shared_weak_count *)a1[3];
        v60[0] = a1[2];
        v60[1] = v32;
        if (v32)
        {
          atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v30 = *a2;
        }
        QP::updateDateComponentsWithHolidayDisplayKey((uint64_t)v60, *v30, v14, v17, v20, &v66);
        if (v32) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v32);
        }
      }
      else
      {
        CFAbsoluteTime v33 = QP::DateComponents::getAbsoluteTime((QP::DateComponents *)&v62, v14, v15);
        CFDateRef v59 = CFDateCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], v33);
        unint64_t v34 = __ROR8__(*(void *)(*a1 + 8), 1);
        QP::updateDateComponentsWithRelativeUnitOffset((uint64_t)v14, v54, v59, (QP::DateComponents *)&v66, *((_DWORD *)*a2 + 2), 0, (v34 > 6) | (0xEu >> v34) & 1);
        nlp::CFScopedPtr<__CFDate const*>::reset((const void **)&v59, 0);
      }
    }
LABEL_57:
    double v35 = QP::DateComponents::getAbsoluteTime((QP::DateComponents *)&v62, v14, v15);
    if (v35 < QP::DateComponents::getAbsoluteTime((QP::DateComponents *)&v66, v14, v15))
    {
      uint64_t v37 = *a2;
      int v38 = *((_DWORD *)*a2 + 2);
      if ((v38 - 1) <= 0x3F && ((1 << (v38 - 1)) & 0x8000000008008001) != 0
        || v38 == 102)
      {
        uint64_t v39 = (std::__shared_weak_count *)a1[3];
        v58[0] = a1[2];
        v58[1] = v39;
        if (v39)
        {
          atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v37 = *a2;
        }
        QP::updateDateComponentsWithHolidayDisplayKey((uint64_t)v58, *v37, v14, v36, v20, &v66);
        if (v39) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v39);
        }
      }
      else
      {
        unint64_t v40 = __ROR8__(*(void *)(*a1 + 8), 1);
        QP::updateDateComponentsWithRelativeDateOffset((uint64_t)v14, v54, v15, (QP::DateComponents *)&v66, v38, 1, (v40 > 6) | (0xEu >> v40) & 1, (v20 - v56));
      }
      double v41 = QP::DateComponents::getAbsoluteTime((QP::DateComponents *)&v62, v14, v15);
      if (v41 < QP::DateComponents::getAbsoluteTime((QP::DateComponents *)&v66, v14, v15))
      {
        long long v43 = *a2;
        int v44 = *((_DWORD *)*a2 + 2);
        if ((v44 - 1) <= 0x3F && ((1 << (v44 - 1)) & 0x8000000008008001) != 0
          || v44 == 102)
        {
          uint64_t v45 = (std::__shared_weak_count *)a1[3];
          v57[0] = a1[2];
          v57[1] = v45;
          if (v45)
          {
            atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
            long long v43 = *a2;
          }
          QP::updateDateComponentsWithHolidayDisplayKey((uint64_t)v57, *v43, v14, v42, v20 - 1, &v66);
          if (v45) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v45);
          }
        }
        else
        {
          unint64_t v46 = __ROR8__(*(void *)(*a1 + 8), 1);
          QP::updateDateComponentsWithRelativeDateOffset((uint64_t)v14, v54, v15, (QP::DateComponents *)&v66, v44, 1, (v46 > 6) | (0xEu >> v46) & 1, 0xFFFFFFFFLL);
        }
      }
    }
LABEL_75:
    int v47 = *((unsigned __int16 *)*a2 + 6);
    if (v47 == 5)
    {
      uint64_t v48 = 0xFFFFFFFFLL;
    }
    else
    {
      if (v47 != 6) {
        goto LABEL_80;
      }
      uint64_t v48 = 1;
    }
    QP::updateDateComponentsWithRelativeUnitOffset(*(void *)(*a1 + 80), *(void *)(*a1 + 104), *(const __CFDate **)(*a1 + 72), (QP::DateComponents *)&v66, *((_DWORD *)*a2 + 2), v48, 0);
LABEL_80:
    if (QP::DateComponents::isEmpty((QP::DateComponents *)&v62)) {
      goto LABEL_86;
    }
    int v49 = *((unsigned __int16 *)*a3 + 6);
    if (v49 == 5)
    {
      uint64_t v50 = 0xFFFFFFFFLL;
    }
    else
    {
      if (v49 != 6) {
        goto LABEL_86;
      }
      uint64_t v50 = 1;
    }
    QP::updateDateComponentsWithRelativeUnitOffset(*(void *)(*a1 + 80), *(void *)(*a1 + 104), *(const __CFDate **)(*a1 + 72), (QP::DateComponents *)&v62, *((_DWORD *)*a3 + 2), v50, 0);
LABEL_86:
    if (QP::DateComponents::isEmpty((QP::DateComponents *)((char *)*a2 + 124)))
    {
      uint64_t v51 = *a1;
      int v52 = (std::__shared_weak_count *)a1[1];
      v55[0] = v51;
      v55[1] = v52;
      if (v52) {
        atomic_fetch_add_explicit(&v52->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      QP::resolveDateComponents(v55, &v66, &v62);
      if (v52) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v52);
      }
      operator new();
    }
    operator new();
  }
  if (v19 == -1 || (int)(HIDWORD(v66) | v67 | DWORD1(v67) | v68 | HIDWORD(v68) | v69) >= 0)
  {
    uint64_t v22 = *a1;
    if (*(unsigned char *)(*a1 + 24))
    {
      if (QP::DateComponents::getAbsoluteTime((QP::DateComponents *)&v62, v14, v15) < CurrentTime)
      {
        uint64_t v23 = 1;
LABEL_37:
        int v26 = *a3;
        int v27 = *((_DWORD *)*a3 + 2);
        if ((v27 - 1) <= 0x3F && ((1 << (v27 - 1)) & 0x8000000008008001) != 0
          || v27 == 102)
        {
          int v28 = (std::__shared_weak_count *)a1[3];
          v61[0] = a1[2];
          v61[1] = v28;
          if (v28)
          {
            atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
            int v26 = *a3;
          }
          QP::updateDateComponentsWithHolidayDisplayKey((uint64_t)v61, *v26, v14, v17, v56 + v23, &v62);
          if (v28) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v28);
          }
        }
        else
        {
          unint64_t v29 = __ROR8__(*(void *)(*a1 + 8), 1);
          QP::updateDateComponentsWithRelativeDateOffset((uint64_t)v14, v54, v15, (QP::DateComponents *)&v62, v27, 1, (v29 > 6) | (0xEu >> v29) & 1, v23);
        }
        if ((SDWORD1(v63) & 0x80000000) == 0) {
          int v20 = DWORD1(v63);
        }
        else {
          int v20 = v65;
        }
        goto LABEL_48;
      }
      uint64_t v22 = *a1;
    }
    if (*(unsigned char *)(v22 + 23) && QP::DateComponents::getAbsoluteTime((QP::DateComponents *)&v62, v14, v15) > CurrentTime) {
      uint64_t v23 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v23 = 0;
    }
    goto LABEL_37;
  }
LABEL_31:
  *a4 = 0;
  return std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100](&v70, 0);
}

void sub_224DFE7F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  nlp::CFScopedPtr<__CFDate const*>::reset((const void **)va, 0);
  std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)(v12 - 120), 0);
  _Unwind_Resume(a1);
}

void QP::DateConverter::mergeTime(void *a1@<X8>)
{
  *a1 = 0;
  operator new();
}

void sub_224DFEA44(_Unwind_Exception *a1)
{
  std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void QP::DateConverter::merge(uint64_t *a1@<X0>, const __CFString ***a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  long long v8 = *a2;
  if (QP::DateComponents::hasDate((QP::DateComponents *)((char *)*a2 + 20))
    || QP::DateComponents::hasDate((QP::DateComponents *)(v8 + 9)))
  {
    uint64_t v9 = *a3;
    if (QP::DateComponents::isTime((QP::DateComponents *)(*a3 + 20))
      || QP::DateComponents::isTime((QP::DateComponents *)(v9 + 72)))
    {
      long long v10 = *a2;
      long long v11 = a2[1];
      v26[0] = v10;
      v26[1] = v11;
      if (v11) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)v11 + 1, 1uLL, memory_order_relaxed);
      }
      uint64_t v12 = *a3;
      uint64_t v13 = a3[1];
      v25[0] = v12;
      v25[1] = v13;
      if (v13) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
      }
      QP::DateConverter::mergeDateTime(a1, (uint64_t)v26, v25, a4);
    }
  }
  int v14 = *a2;
  if ((QP::DateComponents::hasDate((QP::DateComponents *)((char *)*a2 + 20))
     || QP::DateComponents::hasDate((QP::DateComponents *)(v14 + 9)))
    && ((uint64_t v15 = *a3, QP::DateComponents::hasDate((QP::DateComponents *)(*a3 + 20)))
     || QP::DateComponents::hasDate((QP::DateComponents *)(v15 + 72))))
  {
    long long v16 = *a2;
    uint64_t v17 = a2[1];
    v24[0] = v16;
    v24[1] = v17;
    if (v17) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)v17 + 1, 1uLL, memory_order_relaxed);
    }
    uint64_t v18 = a3[1];
    v23[0] = (const __CFString **)*a3;
    v23[1] = (const __CFString **)v18;
    if (v18) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
    }
    QP::DateConverter::mergeDate(a1, v24, v23, a4);
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v18);
    }
    if (v17)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v17);
    }
  }
  else
  {
    int v19 = *a2;
    if (QP::DateComponents::isTime((QP::DateComponents *)((char *)*a2 + 20))
      || QP::DateComponents::isTime((QP::DateComponents *)(v19 + 9)))
    {
      uint64_t v20 = *a3;
      if (QP::DateComponents::isTime((QP::DateComponents *)(*a3 + 20))
        || QP::DateComponents::isTime((QP::DateComponents *)(v20 + 72)))
      {
        long long v21 = a2[1];
        if (v21) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)v21 + 1, 1uLL, memory_order_relaxed);
        }
        uint64_t v22 = a3[1];
        if (v22) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
        }
        QP::DateConverter::mergeTime(a4);
      }
    }
    *a4 = 0;
  }
}

void sub_224DFEC74(_Unwind_Exception *exception_object)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t QP::DateConverter::resolveDateComponentsAsRange(uint64_t a1, int a2, int a3, long long *a4, long long *a5, uint64_t a6, int a7)
{
  if (a7)
  {
    long long v12 = a4[1];
    long long v31 = *a4;
    long long v32 = v12;
    long long v33 = a4[2];
    int v34 = *((_DWORD *)a4 + 12);
    long long v13 = a5[1];
    long long v27 = *a5;
    long long v28 = v13;
    long long v29 = a5[2];
    int v30 = *((_DWORD *)a5 + 12);
    uint64_t v14 = *(void *)(*(void *)a1 + 104);
    uint64_t v15 = *(void *)(*(void *)a1 + 88);
    CFDateRef v16 = *(const __CFDate **)(*(void *)a1 + 72);
    if (QP::DateComponents::isEmpty((QP::DateComponents *)&v27))
    {
      switch(a2)
      {
        case 5:
          goto LABEL_8;
        case 6:
          unint64_t v17 = __ROR8__(*(void *)(*(void *)a1 + 8), 1);
          unsigned int v18 = (v17 > 6) | (0xEu >> v17) & 1;
          int v19 = (QP::DateComponents *)&v31;
          goto LABEL_11;
        case 7:
          goto LABEL_9;
        case 8:
          long long v27 = v31;
          long long v28 = v32;
          long long v29 = v33;
          int v30 = v34;
          *(void *)&long long v22 = -1;
          *((void *)&v22 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = -1;
          long long v31 = v22;
          long long v32 = v22;
          long long v33 = v22;
          int v34 = -1;
          unint64_t v23 = __ROR8__(*(void *)(*(void *)a1 + 8), 1);
          unsigned int v18 = (v23 > 6) | (0xEu >> v23) & 1;
          int v19 = (QP::DateComponents *)&v27;
LABEL_11:
          QP::updateDateComponentsWithRelativeUnitOffset(v15, v14, v16, v19, a3, 1, v18);
          break;
        default:
          goto LABEL_12;
      }
      goto LABEL_12;
    }
    switch(a2)
    {
      case 8:
        goto LABEL_8;
      case 7:
LABEL_9:
        int v30 = -1;
        *(void *)&long long v21 = -1;
        *((void *)&v21 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = -1;
        long long v28 = v21;
        long long v29 = v21;
        long long v27 = v21;
        break;
      case 5:
LABEL_8:
        long long v27 = v31;
        long long v28 = v32;
        long long v29 = v33;
        int v30 = v34;
        *(void *)&long long v20 = -1;
        *((void *)&v20 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = -1;
        long long v31 = v20;
        long long v32 = v20;
        long long v33 = v20;
        int v34 = -1;
        break;
    }
LABEL_12:
    long long v24 = v32;
    *a4 = v31;
    a4[1] = v24;
    a4[2] = v33;
    *((_DWORD *)a4 + 12) = v34;
    long long v25 = v28;
    *a5 = v27;
    a5[1] = v25;
    a5[2] = v29;
    *((_DWORD *)a5 + 12) = v30;
  }
  return 1;
}

void QP::DateConverter::resolveDate(void *a1@<X0>, const __CFString ***a2@<X1>, int a3@<W2>, BOOL *a4@<X3>, const void ***a5@<X8>)
{
  *a5 = 0;
  CFDateRef v10 = *(const __CFDate **)(*a1 + 72);
  long long v11 = *(__CFCalendar **)(*a1 + 88);
  uint64_t v90 = *(void *)(*a1 + 104);
  double CurrentTime = getCurrentTime(v11, v10);
  long long v13 = *a2;
  long long v14 = *(_OWORD *)((char *)*a2 + 20);
  long long v15 = *(_OWORD *)((char *)*a2 + 52);
  long long v108 = *(_OWORD *)((char *)*a2 + 36);
  long long v109 = v15;
  int v110 = *((_DWORD *)v13 + 17);
  long long v107 = v14;
  long long v16 = *(_OWORD *)(v13 + 11);
  long long v103 = *(_OWORD *)(v13 + 9);
  long long v104 = v16;
  long long v105 = *(_OWORD *)(v13 + 13);
  int v106 = *((_DWORD *)v13 + 30);
  long long v17 = *(_OWORD *)((char *)v13 + 140);
  long long v99 = *(_OWORD *)((char *)v13 + 124);
  long long v100 = v17;
  long long v101 = *(_OWORD *)((char *)v13 + 156);
  int v102 = *((_DWORD *)v13 + 43);
  double AbsoluteTime = QP::DateComponents::getAbsoluteTime((QP::DateComponents *)&v107, v11, v10);
  int v19 = *((_DWORD *)*a2 + 2);
  long long v20 = (__CFString *)**a2;
  if (v20) {
    long long v20 = (__CFString *)CFRetain(v20);
  }
  int v21 = *((_DWORD *)*a2 + 2);
  double v84 = v20;
  CFTypeRef cf = v20;
  if (v21 < 6)
  {
    BOOL v89 = 0;
  }
  else
  {
    BOOL v22 = v21 < 0x13 || v21 < 0x1F || (v21 - 55) < 0xC;
    BOOL v89 = v22;
  }
  char v24 = 1;
  if (((v19 - 28) > 0x3D || ((1 << (v19 - 28)) & 0x2000001002000001) == 0)
    && v19 != 16)
  {
    char v24 = 0;
  }
  if (v21 < 31)
  {
    BOOL v86 = 0;
  }
  else
  {
    BOOL v25 = v21 < 0x35 || (v21 - 67) < 0x16;
    BOOL v86 = v25;
  }
  int v87 = 1;
  if ((a3 - 4) >= 5 && !*(unsigned char *)(*a1 + 28))
  {
    int v87 = 1;
    if (((v21 - 1) > 0x3F || ((1 << (v21 - 1)) & 0x8000000008008001) == 0)
      && v21 != 102)
    {
      int v87 = 0;
    }
  }
  char v88 = a4;
  BOOL v30 = (int)v109 >= 0 && v109 < 0 && SDWORD2(v109) < 0 && SDWORD1(v109) < 0 && v110 < 0;
  BOOL v85 = v30;
  int v31 = HIDWORD(v108);
  if ((DWORD2(v107) & 0x80000000) != 0 && (DWORD1(v107) & 0x80000000) != 0 && (v107 & 0x80000000) != 0) {
    goto LABEL_54;
  }
  BOOL v32 = v21 != 121 && v108 < 0;
  int v33 = v89;
  if (!v32) {
    int v33 = 1;
  }
  if ((v86 | v33))
  {
LABEL_54:
    if ((HIDWORD(v108) & 0x80000000) != 0) {
      goto LABEL_77;
    }
    goto LABEL_72;
  }
  LODWORD(v93) = 0;
  int v97 = 0;
  CFCalendarDecomposeAbsoluteTime(v11, AbsoluteTime, "Ha", &v93, &v97);
  if (DWORD2(v107) != -1 && !QP::DateComponents::isTime((QP::DateComponents *)&v107))
  {
LABEL_66:
    int v34 = v93;
    if ((int)v93 > 6) {
      goto LABEL_69;
    }
    goto LABEL_67;
  }
  if (AbsoluteTime >= CurrentTime || !*(unsigned char *)(*a1 + 26))
  {
    if (AbsoluteTime > CurrentTime && *(unsigned char *)(*a1 + 27))
    {
      if ((int)v93 < 13) {
        goto LABEL_69;
      }
      int v35 = v93 - 12;
      goto LABEL_68;
    }
    goto LABEL_66;
  }
  int v34 = v93;
  if ((int)v93 <= 11)
  {
LABEL_67:
    int v35 = v34 + 12;
LABEL_68:
    DWORD2(v107) = v35;
  }
LABEL_69:
  CFAbsoluteTime v36 = QP::DateComponents::getAbsoluteTime((QP::DateComponents *)&v107, v11, v10);
  CFCalendarDecomposeAbsoluteTime(v11, v36, "H", &v93);
  DWORD2(v107) = v93;
  HIDWORD(v108) = -1;
  double AbsoluteTime = QP::DateComponents::getAbsoluteTime((QP::DateComponents *)&v107, v11, v10);
  if (!*a5) {
    operator new();
  }
  if ((HIDWORD(v108) & 0x80000000) == 0)
  {
LABEL_72:
    int v97 = 0;
    if (v31 == 8)
    {
      uint64_t v37 = (CFTypeRef *)*a2;
      long long v38 = *(_OWORD *)((char *)*a2 + 36);
      long long v93 = *(_OWORD *)((char *)*a2 + 20);
      long long v94 = v38;
      long long v95 = *(_OWORD *)((char *)v37 + 52);
      int v96 = *((_DWORD *)v37 + 17);
      *(void *)&long long v93 = -1;
      DWORD2(v93) = -1;
      HIDWORD(v94) = -1;
      if ((QP::DateComponents::isEmpty((QP::DateComponents *)&v93) & 1) == 0)
      {
        unint64_t v39 = __ROR8__(*(void *)(*a1 + 8), 1);
        QP::updateDateComponentsWithRelativeUnitOffset((uint64_t)v11, v90, v10, (QP::DateComponents *)&v93, v19, 0, (v39 > 6) | (0xEu >> v39) & 1);
        HIDWORD(v94) = HIDWORD(v108);
        DWORD2(v93) = DWORD2(v107);
        *(void *)&long long v93 = v107;
        long long v108 = v94;
        long long v109 = v95;
        int v110 = v96;
        long long v107 = v93;
        double AbsoluteTime = QP::DateComponents::getAbsoluteTime((QP::DateComponents *)&v107, v11, v10);
      }
    }
    CFCalendarDecomposeAbsoluteTime(v11, AbsoluteTime, "H", &v97);
    DWORD2(v107) = v97;
    HIDWORD(v108) = -1;
    if (!*a5) {
      operator new();
    }
  }
LABEL_77:
  if ((HIDWORD(v104) & 0x80000000) == 0)
  {
    LODWORD(v93) = 0;
    CFAbsoluteTime v40 = QP::DateComponents::getAbsoluteTime((QP::DateComponents *)&v103, v11, v10);
    CFCalendarDecomposeAbsoluteTime(v11, v40, "H", &v93);
    DWORD2(v103) = v93;
    HIDWORD(v104) = -1;
    if (!*a5) {
      operator new();
    }
  }
  int v97 = 0;
  CFCalendarDecomposeAbsoluteTime(v11, AbsoluteTime, "y", &v97);
  int v92 = 0;
  CFCalendarDecomposeAbsoluteTime(v11, CurrentTime, "y", &v92);
  unsigned __int16 v42 = a3 - 9;
  if ((v24 & 1) != 0
    || (int v43 = *((_DWORD *)*a2 + 2), (v43 - 1) <= 0x3F)
    && ((1 << (v43 - 1)) & 0x8000000008008001) != 0
    || v43 == 102)
  {
    int v44 = v97;
    if (v97 == v92)
    {
      int v45 = v85;
      if (v42 < 0xFFFAu) {
        int v45 = 1;
      }
      if (v45 != 1) {
        goto LABEL_95;
      }
      if (AbsoluteTime > CurrentTime)
      {
        if (*(unsigned char *)(*a1 + 27) || (unint64_t v46 = __ROR8__(*(void *)(*a1 + 8), 1), v46 >= 7)) {
          int v47 = -1;
        }
        else {
          int v47 = dword_224E1EC98[v46];
        }
        goto LABEL_97;
      }
      if (AbsoluteTime < CurrentTime) {
        int v47 = *(unsigned __int8 *)(*a1 + 26);
      }
      else {
LABEL_95:
      }
        int v47 = 0;
LABEL_97:
      int v96 = -1;
      *(void *)&long long v48 = -1;
      *((void *)&v48 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = -1;
      long long v94 = v48;
      long long v95 = v48;
      long long v93 = v48;
      int v49 = (std::__shared_weak_count *)a1[3];
      v91[0] = a1[2];
      v91[1] = v49;
      if (v49) {
        atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      QP::updateDateComponentsWithHolidayDisplayKey((uint64_t)v91, **a2, v11, v41, v47 + v44, &v107);
      if (v49) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v49);
      }
      if (QP::DateComponents::isEmpty((QP::DateComponents *)&v103)
        && (QP::DateComponents::isEmpty((QP::DateComponents *)&v93) & 1) == 0)
      {
        long long v103 = v93;
        long long v104 = v94;
        long long v105 = v95;
        int v106 = v96;
      }
    }
  }
  uint64_t v50 = *a1;
  if (*(void *)(*a1 + 8) != 9)
  {
    if (!*(unsigned char *)(v50 + 27))
    {
      BOOL v53 = *(unsigned char *)(v50 + 26) == 0;
      char v54 = v87;
      if (!v53) {
        char v54 = 1;
      }
      if (v54 & 1) == 0 && (QP::DateComponents::isEmpty((QP::DateComponents *)&v103)) {
        goto LABEL_173;
      }
    }
    if (v89)
    {
      uint64_t v55 = 0;
      goto LABEL_129;
    }
    int v56 = v85;
    if (v42 < 0xFFFAu) {
      int v56 = 1;
    }
    if (v56 != 1) {
      goto LABEL_124;
    }
    if (AbsoluteTime > CurrentTime)
    {
      if (*(unsigned char *)(*a1 + 27) || (unint64_t v57 = __ROR8__(*(void *)(*a1 + 8), 1), v57 >= 7)) {
        unsigned int v58 = -1;
      }
      else {
        unsigned int v58 = dword_224E1EC98[v57];
      }
      goto LABEL_126;
    }
    if (AbsoluteTime < CurrentTime) {
      unsigned int v58 = *(unsigned __int8 *)(*a1 + 26);
    }
    else {
LABEL_124:
    }
      unsigned int v58 = 0;
LABEL_126:
    if (v86) {
      uint64_t v55 = 0;
    }
    else {
      uint64_t v55 = v58;
    }
LABEL_129:
    if ((HIDWORD(v109) & 0x80000000) != 0)
    {
      v59.i64[0] = v108;
      v59.i64[1] = *(void *)((char *)&v109 + 4);
      v60.i32[0] = vmovn_s32(vcgtq_s32(v59, (int32x4_t)xmmword_224E1E2D0)).u32[0];
      v60.i32[1] = vmovn_s32(vcgtq_s32((int32x4_t)xmmword_224E1E2D0, v59)).i32[1];
      if ((vminv_u16(v60) & 1) != 0 && (HIDWORD(v107) & 0x80000000) == 0 && v110 < 0 && !v55) {
        goto LABEL_140;
      }
    }
    else if (!v55 && (v110 & 0x80000000) == 0)
    {
      goto LABEL_140;
    }
    if (!*a5) {
      operator new();
    }
    unint64_t v61 = __ROR8__(*(void *)(*a1 + 8), 1);
    QP::updateDateComponentsWithRelativeDateOffset((uint64_t)v11, *(void *)(*a1 + 104), v10, (QP::DateComponents *)&v107, *((_DWORD *)*a2 + 2), v87, (v61 > 6) | (0xEu >> v61) & 1, v55);
LABEL_140:
    if ((QP::DateComponents::isEmpty((QP::DateComponents *)&v103) & 1) == 0)
    {
      if (v19 == 4) {
        LOWORD(a3) = 0;
      }
      double v62 = QP::DateComponents::getAbsoluteTime((QP::DateComponents *)&v103, v11, v10);
      if (v89)
      {
        uint64_t v63 = 0;
        goto LABEL_156;
      }
      int v64 = v85;
      if (v42 < 0xFFFAu) {
        int v64 = 1;
      }
      if (v64 != 1) {
        goto LABEL_152;
      }
      if (v62 > CurrentTime)
      {
        unsigned int v65 = -*(char *)(*a1 + 27);
        goto LABEL_153;
      }
      if (v62 < CurrentTime) {
        unsigned int v65 = *(unsigned __int8 *)(*a1 + 26);
      }
      else {
LABEL_152:
      }
        unsigned int v65 = 0;
LABEL_153:
      if (v86) {
        uint64_t v63 = 0;
      }
      else {
        uint64_t v63 = v65;
      }
LABEL_156:
      unint64_t v66 = __ROR8__(*(void *)(*a1 + 8), 1);
      QP::updateDateComponentsWithRelativeDateOffset((uint64_t)v11, *(void *)(*a1 + 104), v10, (QP::DateComponents *)&v103, *((_DWORD *)*a2 + 2), 1, (v66 > 6) | (0xEu >> v66) & 1, v63);
      if ((QP::DateComponents::isEmpty((QP::DateComponents *)&v99) & 1) != 0 || *(unsigned char *)(*a1 + 28))
      {
        if ((HIDWORD(v109) & 0x80000000) != 0)
        {
          v67.i64[0] = v108;
          v67.i64[1] = *(void *)((char *)&v109 + 4);
          v68.i32[0] = vmovn_s32(vcgtq_s32(v67, (int32x4_t)xmmword_224E1E2D0)).u32[0];
          v68.i32[1] = vmovn_s32(vcgtq_s32((int32x4_t)xmmword_224E1E2D0, v67)).i32[1];
          if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(v68, 0xFuLL))) & 1) != 0
            && (HIDWORD(v107) & 0x80000000) == 0
            && v110 < 0)
          {
            goto LABEL_170;
          }
        }
        else if ((v110 & 0x80000000) == 0)
        {
          goto LABEL_170;
        }
        uint64_t v69 = 0;
        do
        {
          unint64_t v70 = __ROR8__(*(void *)(*a1 + 8), 1);
          QP::updateDateComponentsWithRelativeUnitOffset((uint64_t)v11, v90, v10, (QP::DateComponents *)&v107, v19, v69, (v70 > 6) | (0xEu >> v70) & 1);
          double v71 = QP::DateComponents::getAbsoluteTime((QP::DateComponents *)&v107, v11, v10);
          BOOL v72 = v71 < QP::DateComponents::getAbsoluteTime((QP::DateComponents *)&v103, v11, v10) || (int)v69 <= -2;
          uint64_t v69 = (v69 - 1);
        }
        while (!v72);
      }
LABEL_170:
      double v73 = QP::DateComponents::getAbsoluteTime((QP::DateComponents *)&v107, v11, v10);
      double v74 = QP::DateComponents::getAbsoluteTime((QP::DateComponents *)&v103, v11, v10);
      BOOL v52 = v73 < v74;
      uint64_t v51 = *a5;
      if (!*a5 && v73 < v74) {
        operator new();
      }
LABEL_174:
      if (!v51) {
        goto LABEL_179;
      }
      goto LABEL_175;
    }
LABEL_173:
    uint64_t v51 = *a5;
    BOOL v52 = 1;
    goto LABEL_174;
  }
  uint64_t v51 = *a5;
  if (!*a5) {
    operator new();
  }
  BOOL v52 = 1;
LABEL_175:
  QP::DatePeriod::setDisplayKey(v51, v84);
  long long v75 = *a5;
  *((_DWORD *)v75 + 2) = v19;
  *((_WORD *)v75 + 6) = a3;
  if ((unsigned __int16)(a3 - 1) > 7u) {
    int v76 = 0;
  }
  else {
    int v76 = dword_224E1ECB4[(__int16)(a3 - 1)];
  }
  *((_DWORD *)v75 + 4) = v76;
  int v77 = v110;
  long long v79 = v108;
  long long v78 = v109;
  *(_OWORD *)((char *)v75 + 2std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = v107;
  *(_OWORD *)((char *)v75 + 36) = v79;
  *(_OWORD *)((char *)v75 + 52) = v78;
  *((_DWORD *)v75 + 17) = v77;
  long long v80 = v104;
  *(_OWORD *)(v75 + 9) = v103;
  *(_OWORD *)(v75 + 1QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = v80;
  *(_OWORD *)(v75 + 13) = v105;
  *((_DWORD *)v75 + 3std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = v106;
  long long v81 = v99;
  long long v82 = v100;
  long long v83 = v101;
  *((_DWORD *)v75 + 43) = v102;
  *(_OWORD *)((char *)v75 + 156) = v83;
  *(_OWORD *)((char *)v75 + 14std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = v82;
  *(_OWORD *)((char *)v75 + 124) = v81;
LABEL_179:
  if (v88) {
    *char v88 = v52;
  }
  if (cf) {
    CFRelease(cf);
  }
}

void sub_224DFFB3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,const void *a28)
{
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  nlp::CFScopedPtr<__CFString const*>::reset(&a28, 0);
  std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100](v28, 0);
  _Unwind_Resume(a1);
}

const void ***QP::DateConverter::resolve@<X0>(void *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, BOOL *a4@<X3>, const void ***a5@<X8>)
{
  uint64_t v6 = *(void *)(a2 + 8);
  v9[0] = *(const __CFString ***)a2;
  v9[1] = (const __CFString **)v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  QP::DateConverter::resolveDate(a1, v9, a3, a4, &v10);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v6);
  }
  long long v7 = v10;
  if (v10) {
    CFDateRef v10 = 0;
  }
  *a5 = v7;
  return std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100](&v10, 0);
}

void sub_224DFFC18(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void std::shared_ptr<QP::HolidayReference>::shared_ptr[abi:ne180100]<QP::HolidayReference,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_224DFFCA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<QP::HolidayReference>::reset[abi:ne180100]((QP::HolidayReference **)va, 0);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<QP::HolidayReference *,std::shared_ptr<QP::HolidayReference>::__shared_ptr_default_delete<QP::HolidayReference,QP::HolidayReference>,std::allocator<QP::HolidayReference>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A623E20);
}

QP::HolidayReference *std::__shared_ptr_pointer<QP::HolidayReference *,std::shared_ptr<QP::HolidayReference>::__shared_ptr_default_delete<QP::HolidayReference,QP::HolidayReference>,std::allocator<QP::HolidayReference>>::__on_zero_shared(uint64_t a1)
{
  double result = *(QP::HolidayReference **)(a1 + 24);
  if (result)
  {
    QP::HolidayReference::~HolidayReference(result);
    JUMPOUT(0x22A623E20);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<QP::HolidayReference *,std::shared_ptr<QP::HolidayReference>::__shared_ptr_default_delete<QP::HolidayReference,QP::HolidayReference>,std::allocator<QP::HolidayReference>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

QP::HolidayReference *std::unique_ptr<QP::HolidayReference>::reset[abi:ne180100](QP::HolidayReference **a1, QP::HolidayReference *a2)
{
  double result = *a1;
  *a1 = a2;
  if (result)
  {
    QP::HolidayReference::~HolidayReference(result);
    JUMPOUT(0x22A623E20);
  }
  return result;
}

void __entityResolutionPrefixCacheLogger_block_invoke()
{
  uint64_t v0 = _nlpLoggingSubsystem();
  os_log_t v1 = os_log_create(v0, "QPEntityResolutionPrefixCache");
  int v2 = (void *)entityResolutionPrefixCacheLogger_log;
  entityResolutionPrefixCacheLogger_log = (uint64_t)v1;
}

void sub_224E0151C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__11(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__11(uint64_t a1)
{
}

void __ecrClientLogger_block_invoke()
{
  uint64_t v0 = _nlpLoggingSubsystem();
  os_log_t v1 = os_log_create(v0, "QPECRClient");
  int v2 = (void *)ecrClientLogger_log;
  ecrClientLogger_log = (uint64_t)v1;
}

void sub_224E019E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_224E01AB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_224E01B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_224E01C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_224E01D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_224E01E5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_224E020AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_224E021C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10)
{
  a10.super_class = (Class)QPQueryParserManager;
  [(_Unwind_Exception *)&a10 dealloc];
  _Unwind_Resume(a1);
}

void sub_224E022B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__12(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__12(uint64_t a1)
{
}

void sub_224E02530(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_224E027E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_224E02B20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  _Unwind_Resume(a1);
}

id dateComponentsForDate(NSDictionary *a1)
{
  os_log_t v1 = a1;
  id v2 = objc_alloc_init(MEMORY[0x263EFF918]);
  int v3 = [(NSDictionary *)v1 objectForKeyedSubscript:@"d"];

  if (v3)
  {
    int v4 = [(NSDictionary *)v1 objectForKeyedSubscript:@"d"];
    objc_msgSend(v2, "setDay:", (int)objc_msgSend(v4, "intValue"));
  }
  int v5 = [(NSDictionary *)v1 objectForKeyedSubscript:@"M"];

  if (v5)
  {
    uint64_t v6 = [(NSDictionary *)v1 objectForKeyedSubscript:@"M"];
    objc_msgSend(v2, "setMonth:", (int)objc_msgSend(v6, "intValue"));
  }
  long long v7 = [(NSDictionary *)v1 objectForKeyedSubscript:@"y"];

  if (v7)
  {
    long long v8 = [(NSDictionary *)v1 objectForKeyedSubscript:@"y"];
    objc_msgSend(v2, "setYear:", (int)objc_msgSend(v8, "intValue"));
  }
  uint64_t v9 = [(NSDictionary *)v1 objectForKeyedSubscript:@"E"];

  if (v9)
  {
    CFDateRef v10 = [(NSDictionary *)v1 objectForKeyedSubscript:@"E"];
    objc_msgSend(v2, "setWeekday:", (int)objc_msgSend(v10, "intValue"));
  }
  long long v11 = [(NSDictionary *)v1 objectForKeyedSubscript:@"F"];

  if (v11)
  {
    long long v12 = [(NSDictionary *)v1 objectForKeyedSubscript:@"F"];
    objc_msgSend(v2, "setWeekdayOrdinal:", (int)objc_msgSend(v12, "intValue"));
  }
  long long v13 = [(NSDictionary *)v1 objectForKeyedSubscript:@"W"];

  if (v13)
  {
    long long v14 = [(NSDictionary *)v1 objectForKeyedSubscript:@"W"];
    objc_msgSend(v2, "setWeekOfMonth:", (int)objc_msgSend(v14, "intValue"));
  }
  long long v15 = [(NSDictionary *)v1 objectForKeyedSubscript:@"w"];

  if (v15)
  {
    long long v16 = [(NSDictionary *)v1 objectForKeyedSubscript:@"w"];
    objc_msgSend(v2, "setWeekOfYear:", (int)objc_msgSend(v16, "intValue"));
  }
  long long v17 = [(NSDictionary *)v1 objectForKeyedSubscript:@"Y"];

  if (v17)
  {
    unsigned int v18 = [(NSDictionary *)v1 objectForKeyedSubscript:@"Y"];
    objc_msgSend(v2, "setYearForWeekOfYear:", (int)objc_msgSend(v18, "intValue"));
  }
  int v19 = [(NSDictionary *)v1 objectForKeyedSubscript:@"H"];

  if (v19)
  {
    long long v20 = [(NSDictionary *)v1 objectForKeyedSubscript:@"H"];
    objc_msgSend(v2, "setHour:", (int)objc_msgSend(v20, "intValue"));
  }
  int v21 = [(NSDictionary *)v1 objectForKeyedSubscript:@"m"];

  if (v21)
  {
    BOOL v22 = [(NSDictionary *)v1 objectForKeyedSubscript:@"m"];
    objc_msgSend(v2, "setMinute:", (int)objc_msgSend(v22, "intValue"));
  }
  unint64_t v23 = [(NSDictionary *)v1 objectForKeyedSubscript:@"s"];

  if (v23)
  {
    char v24 = [(NSDictionary *)v1 objectForKeyedSubscript:@"s"];
    objc_msgSend(v2, "setSecond:", (int)objc_msgSend(v24, "intValue"));
  }
  return v2;
}

void sub_224E02F40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_224E030E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);

  _Unwind_Resume(a1);
}

void sub_224E031F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_224E034B8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v5 - 152), 8);

  _Unwind_Resume(a1);
}

void sub_224E03690(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_224E03838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

void sub_224E039C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_224E03B30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_224E03C90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, ...)
{
  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_224E04008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Block_object_dispose((const void *)(v17 - 152), 8);

  _Unwind_Resume(a1);
}

void sub_224E041E8(_Unwind_Exception *exception_object)
{
}

void sub_224E04390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

void sub_224E04520(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_224E047AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL24queryParserManagerLoggerv_block_invoke()
{
  uint64_t v0 = _nlpLoggingSubsystem();
  os_log_t v1 = os_log_create(v0, "QPQueryParserManager");
  id v2 = (void *)queryParserManagerLogger(void)::log;
  queryParserManagerLogger(void)::log = (uint64_t)v1;
}

__CFString *QPAnnotationsCopyNormalizedString(const __CFLocale *a1, const __CFString *a2, CFIndex a3, CFIndex length)
{
  CFMutableStringRef MutableCopy = 0;
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (a2 && length)
  {
    uint64_t v20 = 0;
    CFIndex v9 = CFStringGetMaximumSizeForEncoding(length, 0x8000100u) + 1;
    MEMORY[0x270FA5388]();
    v22.CFIndex location = a3;
    v22.CFIndex length = length;
    CFStringGetCharacters(a2, v22, (UniChar *)((char *)&v18 - v10));
    CFIndex v19 = 0;
    MEMORY[0x270FA5388]();
    long long v12 = (const UInt8 *)&v18 - v11;
    if (CFStringEncodingUnicodeToBytes()) {
      return 0;
    }
    CFIndex v13 = v19;
    v12[v19] = 0;
    CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFStringRef v15 = CFStringCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], v12, v13, 0x8000100u, 0, (CFAllocatorRef)*MEMORY[0x263EFFB28]);
    if (!v15)
    {
      return 0;
    }
    else
    {
      CFStringRef v16 = v15;
      CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(v14, v9, v15);
      CFStringFold(MutableCopy, 0x181uLL, a1);
      CFRelease(v16);
    }
  }
  return MutableCopy;
}

uint64_t QPAnnotationsGetPayloadWithTokens(int a1, uint64_t a2, __CFLocale *a3, CFStringRef theString, CFRange *a5, uint64_t a6, uint64_t a7, unsigned char *a8)
{
  hashTokens(a3, theString, a2, a5, a6, a7);
  id v9 = objc_claimAutoreleasedReturnValue();
  [v9 bytes];
  if (SIDataMapLookupKey())
  {
    if (a8) {
      *a8 = 1;
    }
    goto LABEL_6;
  }
  if (a8) {
LABEL_6:
  }
    *a8 = 0;

  return 0;
}

void sub_224E04B58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id hashTokens(const __CFLocale *a1, CFStringRef theString, uint64_t a3, const CFRange *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v28 = a3;
  v29[1] = *MEMORY[0x263EF8340];
  CFIndex Length = CFStringGetLength(theString);
  CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
  uint64_t v27 = (uint64_t)&v27;
  uint64_t v13 = a6 + MaximumSizeForEncoding + 1;
  MEMORY[0x270FA5388](MaximumSizeForEncoding);
  CFStringRef v15 = (char *)&v27 - v14;
  if (a6 >= 1)
  {
    uint64_t v16 = 0;
    CFIndex v17 = 0;
    uint64_t v18 = a6 + a5;
    p_CFIndex length = &a4[a5].length;
    do
    {
      v29[0] = 0;
      uint64_t v20 = QPAnnotationsCopyNormalizedString(a1, theString, *(p_length - 1), *p_length);
      if (v20)
      {
        CFStringRef v21 = v20;
        v31.CFIndex length = CFStringGetLength(v20);
        v31.CFIndex location = 0;
        CFStringGetBytes(v21, v31, 0x8000100u, 0x2Du, 0, (UInt8 *)&v15[v17], v13 - v17, v29);
        CFRelease(v21);
        CFIndex v22 = v29[0] + v17;
        v15[v22] = v16;
        CFIndex v17 = v22 + 1;
      }
      p_length += 2;
      ++v16;
    }
    while (a5 + v16 < v18);
  }
  uint64_t OutputSize = CCDigestGetOutputSize();
  char v24 = (char *)&v27 - ((MEMORY[0x270FA5388](OutputSize) + 15) & 0xFFFFFFFFFFFFFFF0);
  CCDigest();
  BOOL v25 = [MEMORY[0x263EFF8F8] dataWithBytes:v24 length:v28];
  return v25;
}

void *QPDataDetectorCreate()
{
  double result = malloc_type_malloc(0x20uLL, 0x102004055CCDE27uLL);
  if (result)
  {
    *double result = 0;
    result[1] = 0;
    result[2] = 0;
    *((_DWORD *)result + 6) = 1;
  }
  return result;
}

uint64_t QPDataDetectorLoadResources(const void **a1, CFURLRef anURL)
{
  uint64_t v2 = 0;
  if (!a1 || !anURL) {
    return v2;
  }
  CFStringRef v4 = CFURLGetString(anURL);
  if (CFStringHasSuffix(v4, @"root.cache"))
  {
    if (!*a1)
    {
      CFTypeRef cf = 0;
      uint64_t v5 = (const void *)DDScannerCreateWithCacheFile();
      *a1 = v5;
      if (cf || !v5)
      {
        if (cf)
        {
          CFRelease(cf);
          uint64_t v5 = *a1;
        }
        if (v5) {
          CFRelease(v5);
        }
        uint64_t v2 = 0;
        *a1 = 0;
        return v2;
      }
      goto LABEL_16;
    }
    return 1;
  }
  if (CFStringHasSuffix(v4, @"dates.cache"))
  {
    if (a1[1]) {
      return 1;
    }
    CFTypeRef cf = 0;
    uint64_t v6 = (const void *)DDScannerCreateWithCacheFile();
    a1[1] = v6;
    if (!cf && v6)
    {
LABEL_16:
      DDScannerSetOptions();
      return 1;
    }
    if (cf)
    {
      CFRelease(cf);
      uint64_t v6 = a1[1];
    }
    if (v6) {
      CFRelease(v6);
    }
    uint64_t v2 = 0;
    a1[1] = 0;
  }
  else
  {
    if (!CFStringHasSuffix(v4, @"lexicon.cache") || a1[2]) {
      return 1;
    }
    CFTypeRef cf = 0;
    if (dataDetectorLogger_token != -1) {
      dispatch_once(&dataDetectorLogger_token, &__block_literal_global_16);
    }
    long long v8 = dataDetectorLogger_log;
    if (os_log_type_enabled((os_log_t)dataDetectorLogger_log, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl(&dword_224D85000, v8, OS_LOG_TYPE_DEFAULT, "QueryParserDataDetectors: Creating lexicon scanner", v10, 2u);
    }
    id v9 = (const void *)DDScannerCreateWithCacheFile();
    a1[2] = v9;
    if (cf || !v9)
    {
      if (cf)
      {
        CFRelease(cf);
        id v9 = a1[2];
      }
      if (v9) {
        CFRelease(v9);
      }
      uint64_t v2 = 0;
      a1[2] = 0;
    }
    else
    {
      DDScannerSetOptions();
      uint64_t v2 = 1;
      DDScannerEnableOptionalSource();
    }
  }
  return v2;
}

void QPDataDetectorClearResources(uint64_t a1)
{
  if (a1)
  {
    if (dataDetectorLogger_token != -1) {
      dispatch_once(&dataDetectorLogger_token, &__block_literal_global_16);
    }
    uint64_t v2 = dataDetectorLogger_log;
    if (os_log_type_enabled((os_log_t)dataDetectorLogger_log, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl(&dword_224D85000, v2, OS_LOG_TYPE_DEFAULT, "QueryParserDataDetectors: releasing data detectors", v5, 2u);
    }
    if (*(void *)a1)
    {
      CFRelease(*(CFTypeRef *)a1);
      *(void *)a1 = 0;
    }
    int v3 = *(const void **)(a1 + 8);
    if (v3)
    {
      CFRelease(v3);
      *(void *)(a1 + 8) = 0;
    }
    CFStringRef v4 = *(const void **)(a1 + 16);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(a1 + 16) = 0;
    }
  }
}

uint64_t QPDataDetectorSetDynamicSources(uint64_t result)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  if (result)
  {
    if (*(void *)(result + 16))
    {
      MEMORY[0x270FA5388](result);
      if (dataDetectorLogger_token != -1) {
        dispatch_once(&dataDetectorLogger_token, &__block_literal_global_16);
      }
      os_log_t v1 = dataDetectorLogger_log;
      if (os_log_type_enabled((os_log_t)dataDetectorLogger_log, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_224D85000, v1, OS_LOG_TYPE_DEFAULT, "QueryParserDataDetectors: setting dynamic sources on lexicon scanner", buf, 2u);
      }
      DDScannerSetClientTables();
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void QPDataDetectorEnumerateResults(void *a1, uint64_t a2, uint64_t a3)
{
  if (a2 && *a1 && a1[1] && a1[2])
  {
    uint64_t v40 = 0;
    uint64_t v41 = &v40;
    uint64_t v42 = 0x2000000000;
    CFMutableArrayRef Mutable = 0;
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
    if (v41[3])
    {
      if (getDataDetectorsQueue_onceToken != -1) {
        dispatch_once(&getDataDetectorsQueue_onceToken, &__block_literal_global_14);
      }
      block[0] = MEMORY[0x263EF8330];
      block[1] = 0x40000000;
      block[2] = __QPDataDetectorEnumerateResults_block_invoke;
      block[3] = &unk_2647061F0;
      void block[5] = a1;
      block[6] = a2;
      block[4] = &v40;
      dispatch_sync((dispatch_queue_t)getDataDetectorsQueue_dataDetectorsQueue, block);
      v37[0] = 0;
      v37[1] = v37;
      v37[2] = 0x2000000000;
      char v38 = 0;
      CFArrayRef v7 = (const __CFArray *)v41[3];
      v32[0] = MEMORY[0x263EF8330];
      v32[1] = 0x40000000;
      int v33 = __QPDataDetectorEnumerateResults_block_invoke_2;
      int v34 = &unk_264706218;
      uint64_t v35 = a3;
      CFAbsoluteTime v36 = v37;
      if (v7)
      {
        if (CFArrayGetCount(v7))
        {
          CFIndex Count = CFArrayGetCount(v7);
          CFArrayRef MutableCopy = CFArrayCreateMutableCopy(v6, Count, v7);
          if (MutableCopy)
          {
            uint64_t v10 = MutableCopy;
            v45.CFIndex length = CFArrayGetCount(MutableCopy);
            v45.CFIndex location = 0;
            CFArraySortValues(v10, v45, (CFComparatorFunction)ResultCompare, 0);
            uint64_t v11 = (const CFSetCallBacks *)MEMORY[0x263EFFFA0];
            BOOL v30 = CFSetCreateMutable(v6, 0, MEMORY[0x263EFFFA0]);
            theSet = CFSetCreateMutable(v6, 0, v11);
            v44[0] = 0;
            CFIndex v12 = CFArrayGetCount(v10);
            if (v12 >= 1)
            {
              CFIndex v13 = v12;
              CFIndex v14 = 0;
              uint64_t v15 = 0;
              uint64_t v16 = -1;
              do
              {
                CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v10, v14);
                uint64_t Range = DDResultGetRange();
                uint64_t v20 = Range;
                uint64_t v21 = v19;
                if (v16 == -1
                  || ((uint64_t v22 = v16 + v15, v23 = Range + v19, v16 >= Range) || v22 < v23)
                  && (v16 < Range ? (BOOL v24 = Range < v22) : (BOOL v24 = 0),
                      !v24 ? (char v25 = 0) : (char v25 = 1),
                      v22 > v23 ? (BOOL v26 = v16 <= Range) : (BOOL v26 = 0),
                      !v26 && (v25 & 1) == 0))
                {
                  Type = (const void *)DDResultGetType();
                  SubResults = (const void *)DDResultGetSubResults();
                  if (v20 != v16 || v21 != v15)
                  {
                    CFSetRemoveAllValues(theSet);
                    CFSetRemoveAllValues(v30);
LABEL_34:
                    MatchedCFStringRef String = (const __CFString *)DDResultGetMatchedString();
                    if (!CFStringHasSuffix(MatchedString, @" "))
                    {
                      v33((uint64_t)v32, (uint64_t)ValueAtIndex, v44);
                      if (v44[0]) {
                        break;
                      }
                      CFSetAddValue(theSet, Type);
                      if (SubResults) {
                        CFSetAddValue(v30, SubResults);
                      }
                      uint64_t v16 = v20;
                      uint64_t v15 = v21;
                    }
                    goto LABEL_39;
                  }
                  if (!CFSetContainsValue(theSet, Type) || !SubResults || !CFSetContainsValue(v30, SubResults)) {
                    goto LABEL_34;
                  }
                }
LABEL_39:
                ++v14;
              }
              while (v13 != v14);
            }
            CFRelease(v10);
            CFRelease(theSet);
            CFRelease(v30);
          }
        }
      }
      CFRelease((CFTypeRef)v41[3]);
      _Block_object_dispose(v37, 8);
    }
    _Block_object_dispose(&v40, 8);
  }
}

void __QPDataDetectorEnumerateResults_block_invoke(uint64_t a1)
{
  DDScannerScanString();
  CFArrayRef v2 = (const __CFArray *)DDScannerCopyResultsWithOptions();
  if (v2)
  {
    CFArrayRef v3 = v2;
    CFStringRef v4 = *(__CFArray **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    v12.CFIndex length = CFArrayGetCount(v2);
    v12.CFIndex location = 0;
    CFArrayAppendArray(v4, v3, v12);
    CFRelease(v3);
  }
  DDScannerScanString();
  CFArrayRef v5 = (const __CFArray *)DDScannerCopyResultsWithOptions();
  if (v5)
  {
    CFArrayRef v6 = v5;
    CFArrayRef v7 = *(__CFArray **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    v13.CFIndex length = CFArrayGetCount(v5);
    v13.CFIndex location = 0;
    CFArrayAppendArray(v7, v6, v13);
    CFRelease(v6);
  }
  DDScannerScanString();
  CFArrayRef v8 = (const __CFArray *)DDScannerCopyResultsWithOptions();
  if (v8)
  {
    CFArrayRef v9 = v8;
    uint64_t v10 = *(__CFArray **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    v14.CFIndex length = CFArrayGetCount(v8);
    v14.CFIndex location = 0;
    CFArrayAppendArray(v10, v9, v14);
    CFRelease(v9);
  }
}

void __QPDataDetectorEnumerateResults_block_invoke_2(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  DDResultGetType();
  DDResultGetRange();
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  CFArrayRef SubResults = (const __CFArray *)DDResultGetSubResults();
  if (SubResults)
  {
    CFArrayRef v5 = SubResults;
    CFIndex Count = CFArrayGetCount(SubResults);
    if (Count >= 1)
    {
      CFIndex v7 = Count;
      CFIndex v8 = 0;
      CFArrayRef v26 = v5;
      CFMutableDictionaryRef theDict = Mutable;
      CFIndex v25 = Count;
      do
      {
        CFArrayGetValueAtIndex(v5, v8);
        CFStringRef Type = (const __CFString *)DDResultGetType();
        CFStringRef Value = (const void *)DDResultGetValue();
        CFDictionarySetValue(Mutable, Type, Value);
        if (CFStringHasPrefix(Type, @"NUMBERS"))
        {
          MatchedCFStringRef String = (const void *)DDResultGetMatchedString();
          CFDictionarySetValue(Mutable, @"SPELLED", MatchedString);
        }
        CFArrayRef v12 = (const __CFArray *)DDResultGetSubResults();
        if (v12)
        {
          CFArrayRef v13 = v12;
          CFIndex v14 = CFArrayGetCount(v12);
          if (v14)
          {
            uint64_t v15 = v14;
            uint64_t v16 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
            if (v15 >= 1)
            {
              for (CFIndex i = 0; i != v15; ++i)
              {
                CFArrayGetValueAtIndex(v13, i);
                CFStringRef v18 = (const __CFString *)DDResultGetType();
                uint64_t v19 = (const void *)DDResultGetValue();
                CFDictionarySetValue(v16, v18, v19);
                if (CFStringHasPrefix(v18, @"NUMBERS"))
                {
                  uint64_t v20 = (const void *)DDResultGetMatchedString();
                  CFDictionarySetValue(v16, @"SPELLED", v20);
                }
              }
            }
            CFMutableArrayRef Mutable = theDict;
            CFDictionarySetValue(theDict, Type, v16);
            CFRelease(v16);
            CFIndex v7 = v25;
            CFArrayRef v5 = v26;
          }
        }
        ++v8;
      }
      while (v8 != v7);
    }
  }
  else
  {
    uint64_t v21 = DDResultGetMatchedString();
    uint64_t v22 = (const void *)DDResultGetValue();
    if (v21 && v22) {
      CFDictionarySetValue(Mutable, @"Value", v22);
    }
  }
  if (Mutable)
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    CFRelease(Mutable);
  }
  *a3 = *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
}

void QPDataDetectorRelease(_DWORD *a1)
{
  if (a1)
  {
    int v2 = a1[6] - 1;
    a1[6] = v2;
    if (!v2)
    {
      CFArrayRef v3 = *(const void **)a1;
      if (*(void *)a1) {
        CFRelease(v3);
      }
      CFStringRef v4 = (const void *)*((void *)a1 + 1);
      if (v4) {
        CFRelease(v4);
      }
      CFArrayRef v5 = (const void *)*((void *)a1 + 2);
      if (v5) {
        CFRelease(v5);
      }
      free(a1);
    }
  }
}

os_log_t __dataDetectorLogger_block_invoke()
{
  uint64_t v0 = _nlpLoggingSubsystem();
  os_log_t result = os_log_create(v0, "QPDataDetector");
  dataDetectorLogger_log = (uint64_t)result;
  return result;
}

dispatch_queue_t __getDataDetectorsQueue_block_invoke()
{
  dispatch_queue_t result = dispatch_queue_create("com.apple.QP.DataDetectors", 0);
  getDataDetectorsQueue_dataDetectorsQueue = (uint64_t)result;
  return result;
}

uint64_t ResultCompare()
{
  uint64_t Range = DDResultGetRange();
  uint64_t v2 = v1;
  uint64_t v3 = DDResultGetRange();
  if (Range == v3)
  {
    BOOL v5 = v2 <= v4;
    if (v2 != v4)
    {
LABEL_14:
      if (v5) {
        return 1;
      }
      else {
        return -1;
      }
    }
    CFArrayRef SubResults = (const __CFArray *)DDResultGetSubResults();
    uint64_t v7 = DDResultGetSubResults();
    if (SubResults)
    {
      CFArrayRef v8 = (const __CFArray *)v7;
      if (v7)
      {
        CFIndex Count = CFArrayGetCount(SubResults);
        if (Count == CFArrayGetCount(v8)) {
          return 0;
        }
        CFIndex v11 = CFArrayGetCount(SubResults);
        BOOL v5 = v11 <= CFArrayGetCount(v8);
        goto LABEL_14;
      }
    }
    if (SubResults) {
      return -1;
    }
    else {
      return 1;
    }
  }
  else if (Range < v3)
  {
    return -1;
  }
  else
  {
    return 1;
  }
}

void *QPSpotlightKnowledgeSourceCreate(uint64_t a1, __CFString *a2, const void *Value)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  CFArrayRef v6 = malloc_type_malloc(0x40uLL, 0x80040A284212CuLL);
  if (v6)
  {
    uint64_t v7 = 0;
    if (!a1 || !a2 || (uint64_t v7 = (char *)malloc_type_calloc(1uLL, 0x98uLL, 0x10E004016E9378AuLL)) == 0)
    {
LABEL_33:
      uint64_t v6[2] = hasAnnotations;
      void v6[3] = enumerateTypesAndAnnotationsForString;
      void v6[4] = enumeratePossibleStringsWithType;
      void *v6 = v7;
      v6[1] = copyPossibleTypesForString;
      void v6[5] = hasUpdatesForParser;
      v6[6] = willUpdateParser;
      v6[7] = didUpdateParser;
      return v6;
    }
    if (Value) {
      CFTypeRef v8 = CFRetain(Value);
    }
    else {
      CFTypeRef v8 = 0;
    }
    *(void *)uint64_t v7 = v8;
    *((void *)v7 + 9) = 0;
    *((_WORD *)v7 + 33) = 0;
    *((void *)v7 + 16) = 0;
    *(_OWORD *)(v7 + 8) = 0u;
    *(_OWORD *)(v7 + 24) = 0u;
    *(_OWORD *)(v7 + 4std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = 0u;
    *((void *)v7 + 7) = 0;
    v7[64] = QPAnnotationsEnabled;
    v7[65] = CFStringsAreEqual(a2, @"com.apple.visual-generation");
    if (Value)
    {
      BOOL v9 = CFDictionaryContainsKey((CFDictionaryRef)Value, @"forTesting") != 0;
      BOOL v10 = CFDictionaryContainsKey((CFDictionaryRef)Value, @"waitForLoad") != 0;
      CFStringRef Value = CFDictionaryGetValue((CFDictionaryRef)Value, @"customFieldSpecifications");
    }
    else
    {
      BOOL v10 = 0;
      BOOL v9 = 0;
    }
    *((_DWORD *)v7 + 34) = 1000;
    *((void *)v7 + 5) = QPStringCacheCreateWithOptions(0, (const __CFDictionary *)&unk_26D83FC68);
    *((void *)v7 + 6) = QPStringCacheCreateWithOptions(0, 0);
    if (v9)
    {
      addValue(*((void *)v7 + 5), @"Apple Directory", 100, 8);
      addValue(*((void *)v7 + 5), @"六本木", 100, 5);
      addValue(*((void *)v7 + 5), @"San Francisco", 100, 5);
      addValue(*((void *)v7 + 5), @"San Jose", 100, 5);
      addValue(*((void *)v7 + 5), @"Oakland", 100, 5);
      addValue(*((void *)v7 + 5), @"United Airlines", 100, 6);
      addValue(*((void *)v7 + 5), @"Holiday Inn", 100, 11);
      addValue(*((void *)v7 + 5), @"Honolulu", 100, 5);
      addValue(*((void *)v7 + 5), @"San Francisco Airport", 100, 7);
      addValue(*((void *)v7 + 5), @"John Smith", 100, 2);
      addValue(*((void *)v7 + 5), @"Anna", 100, 3);
      addValue(*((void *)v7 + 5), @"Mary Miller", 100, 2);
      addValue(*((void *)v7 + 5), @"Gilles", 100, 3);
      addValue(*((void *)v7 + 5), @"Julie", 100, 3);
      addValue(*((void *)v7 + 5), @"Giulia", 100, 3);
      addValue(*((void *)v7 + 5), @"Richard", 100, 3);
      addValue(*((void *)v7 + 5), @"Christian", 100, 3);
      addValue(*((void *)v7 + 5), @"Julia", 100, 3);
      addValue(*((void *)v7 + 5), @"April", 100, 3);
      addValue(*((void *)v7 + 5), @"eBay", 100, 2);
      addValue(*((void *)v7 + 5), @"バラクオバマ", 100, 2);
      addValue(*((void *)v7 + 5), @"Max Heller", 100, 2);
      addValue(*((void *)v7 + 5), @"高橋", 100, 2);
      addValue(*((void *)v7 + 5), @"高橋真帆", 100, 2);
      addValue(*((void *)v7 + 5), @"ジョニー", 100, 2);
      addValue(*((void *)v7 + 5), @"ジュリア", 100, 2);
      v7[66] = 1;
    }
    CFIndex v11 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    CFArrayRef v12 = dispatch_queue_attr_make_with_qos_class(v11, QOS_CLASS_UTILITY, 0);
    if (v9) {
      CFArrayRef v12 = dispatch_queue_attr_make_with_qos_class(v11, QOS_CLASS_USER_INTERACTIVE, 0);
    }
    CFArrayRef v13 = v12;
    *((void *)v7 + 12) = dispatch_queue_create("com.apple.QueryParser.SpotlightKnowledgeSource.Knowledge", v12);
    CFIndex v14 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    *((void *)v7 + 13) = dispatch_queue_create("com.apple.QueryParser.SpotlightKnowledgeSource.Queries", v14);
    uint64_t v15 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    *((void *)v7 + 1QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = dispatch_queue_create("com.apple.QueryParser.SpotlightKnowledgeSource.Context", v15);
    uint64_t v16 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    *((void *)v7 + 1std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = dispatch_queue_create("com.apple.QueryParser.SpotlightKnowledgeSource.Context", v16);
    CFIndex v17 = (void *)[MEMORY[0x263EFF9C0] setWithObject:a1];
    if (sourceLogger(void)::token != -1) {
      dispatch_once(&sourceLogger(void)::token, &__block_literal_global_393);
    }
    CFStringRef v18 = sourceLogger(void)::log;
    if (os_log_type_enabled((os_log_t)sourceLogger(void)::log, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CFRange v31 = 138412546;
      *(void *)&v31[4] = a2;
      *(_WORD *)&v31[12] = 2112;
      *(void *)&v31[14] = a1;
      _os_log_impl(&dword_224D85000, v18, OS_LOG_TYPE_DEFAULT, "loading content for context: %@, bundleID: %@", v31, 0x16u);
    }
    if ([(__CFString *)a2 isEqualToString:@"com.apple.spotlight"])
    {
      CFIndex v17 = 0;
      uint64_t v19 = (NSArray *)&unk_26D83ECF8;
    }
    else
    {
      if ([(__CFString *)a2 isEqualToString:@"com.apple.mail"])
      {
        [v17 addObject:@"com.apple.mobilemail"];
        [v17 addObject:@"com.apple.spotlight.events"];
        uint64_t v19 = (NSArray *)objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(&unk_26D83ECF8, "arrayByAddingObjectsFromArray:", &unk_26D83ED88), "arrayByAddingObjectsFromArray:", &unk_26D83EDA0), "arrayByAddingObjectsFromArray:", &unk_26D83EDB8), "arrayByAddingObjectsFromArray:", &unk_26D83EDD0), "arrayByAddingObject:", @"kMDItemEventHotelReservationForName");
        if (!v19) {
          goto LABEL_29;
        }
        goto LABEL_24;
      }
      if ([(__CFString *)a2 isEqualToString:@"com.apple.reminders"])
      {
        [v17 addObject:@"com.apple.reminders"];
        goto LABEL_29;
      }
      if (([(__CFString *)a2 isEqualToString:@"com.apple.reminders.parser"] & 1) != 0
        || ![(__CFString *)a2 isEqualToString:@"com.apple.photos"])
      {
        goto LABEL_29;
      }
      [v17 addObject:@"com.apple.mobileslideshow"];
      uint64_t v19 = (NSArray *)&unk_26D83ED28;
    }
    *((_DWORD *)v7 + 34) = 5000;
LABEL_24:
    *((void *)v7 + 14) = dispatch_queue_create("com.apple.QueryParser.SpotlightKnowledgeSource.DynamicQueries", v13);
    if ([(__CFString *)a2 isEqualToString:@"com.apple.spotlight"])
    {
      QueryCFStringRef String = createQueryString((NSArray *)&unk_26D83ED70);
      uint64_t v21 = [v17 allObjects];
      uint64_t v22 = &unk_26D83ED58;
      uint64_t v23 = &unk_26D83ED40;
      uint64_t v24 = (uint64_t)v7;
      uint64_t v25 = QueryString;
      CFArrayRef v26 = (NSArray *)&unk_26D83ED70;
LABEL_28:
      extractSpotlightTermsWithContext(v24, v25, v21, v26, (uint64_t)v22, (uint64_t)v23, v10);
      goto LABEL_29;
    }
    if (([(__CFString *)a2 isEqualToString:@"com.apple.photos"] & 1) == 0)
    {
      uint64_t v27 = createQueryString(v19);
      uint64_t v21 = [v17 allObjects];
      uint64_t v22 = &unk_26D83ED10;
      uint64_t v23 = &unk_26D83ECF8;
      uint64_t v24 = (uint64_t)v7;
      uint64_t v25 = v27;
      CFArrayRef v26 = v19;
      goto LABEL_28;
    }
LABEL_29:
    if (Value) {
      CFTypeRef v28 = CFRetain(Value);
    }
    else {
      CFTypeRef v28 = 0;
    }
    *((void *)v7 + QP::Lexer::updateWithKnowledgeSource(this, 0, 1) = v28;
    long long v29 = *((void *)v7 + 12);
    *(void *)CFRange v31 = MEMORY[0x263EF8330];
    *(void *)&v31[8] = 3221225472;
    *(void *)&v31[16] = ___ZL30extractCustomFieldsWithContextP26_SpotlightKnowledgeContextPK14__CFDictionaryS3__block_invoke;
    BOOL v32 = &__block_descriptor_56_e5_v8__0l;
    uint64_t v33 = 0;
    int v34 = v7;
    uint64_t v35 = Value;
    dispatch_sync(v29, v31);
    goto LABEL_33;
  }
  return v6;
}

void enumerateTypesAndAnnotationsForString(uint64_t a1, const __CFString *a2, CFRange *a3, uint64_t a4, uint64_t a5, void *a6)
{
}

void enumeratePossibleStringsWithType(uint64_t a1, uint64_t a2)
{
  if (sourceLogger(void)::token != -1) {
    dispatch_once(&sourceLogger(void)::token, &__block_literal_global_393);
  }
  os_signpost_id_t v4 = os_signpost_id_generate((os_log_t)sourceLogger(void)::log);
  if (sourceLogger(void)::token != -1) {
    dispatch_once(&sourceLogger(void)::token, &__block_literal_global_393);
  }
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    BOOL v5 = sourceLogger(void)::log;
    if (os_signpost_enabled((os_log_t)sourceLogger(void)::log))
    {
      *(_WORD *)long long buf = 0;
      _os_signpost_emit_with_name_impl(&dword_224D85000, v5, OS_SIGNPOST_INTERVAL_BEGIN, v4, "enumerate all cache items", "", buf, 2u);
    }
  }
  if (a1 && a2)
  {
    CFArrayRef v6 = *(NSObject **)(a1 + 96);
    *(void *)long long buf = MEMORY[0x263EF8330];
    uint64_t v10 = 3221225472;
    CFIndex v11 = ___ZL51QPSpotlightKnowledgeContextEnumerateStringsWithTypeP26_SpotlightKnowledgeContextU13block_pointerFvPK10__CFStringS3_PbE_block_invoke;
    CFArrayRef v12 = &unk_264706450;
    uint64_t v13 = a2;
    uint64_t v14 = a1;
    dispatch_sync(v6, buf);
    if (sourceLogger(void)::token != -1) {
      dispatch_once(&sourceLogger(void)::token, &__block_literal_global_393);
    }
    if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      uint64_t v7 = sourceLogger(void)::log;
      if (os_signpost_enabled((os_log_t)sourceLogger(void)::log))
      {
        *(_WORD *)CFTypeRef v8 = 0;
        _os_signpost_emit_with_name_impl(&dword_224D85000, v7, OS_SIGNPOST_INTERVAL_END, v4, "enumerate all cache items", "", v8, 2u);
      }
    }
  }
}

__CFArray *copyPossibleTypesForString(void *a1, __CFString *a2, int a3)
{
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  if (a1)
  {
    if (a2)
    {
      CFIndex Length = CFStringGetLength(a2);
      if (a3)
      {
        if (Length)
        {
          CFLocaleRef Locale = systemListenerGetLocale();
          CFTypeRef v10 = CFRetain(Locale);
          uint64_t PreferredLanguages = systemListenerGetPreferredLanguages();
          CFTypeRef v12 = CFRetain(PreferredLanguages);
          uint64_t v13 = (void *)[(__CFString *)a2 stringByFoldingWithOptions:385 locale:0];
          uint64_t v14 = (__CFString *)objc_msgSend((id)objc_msgSend(v13, "componentsSeparatedByCharactersInSet:", objc_msgSend(MEMORY[0x263F08708], "whitespaceAndNewlineCharacterSet")), "componentsJoinedByString:", @" ");
          v33.CFIndex length = [(__CFString *)v14 length];
          v33.CFIndex location = 0;
          uint64_t v15 = (const void *)copyStringInsertingSpacesBetweenIdeographCharacters(v14, v33);
          uint64_t v16 = (id)CFMakeCollectable(v15);
          if (v10) {
            CFStringRef v17 = (const __CFString *)[v16 lowercaseStringWithLocale:v10];
          }
          else {
            CFStringRef v17 = (const __CFString *)[v16 lowercaseString];
          }
          uint64_t v26 = 0;
          uint64_t v27 = &v26;
          uint64_t v28 = 0x3812000000;
          long long v29 = __Block_byref_object_copy__357;
          BOOL v30 = __Block_byref_object_dispose__358;
          CFRange v31 = &unk_224E37267;
          CFTypeRef cf = CFStringCreateMutableCopy(v6, 0, v17);
          CFStringRef v18 = (const __CFString *)v27[6];
          if (v18 && CFStringGetLength(v18) && v10 && v12)
          {
            uint64_t v22 = 0;
            uint64_t v23 = &v22;
            uint64_t v24 = 0x2020000000;
            char v25 = 0;
            uint64_t v19 = a1[13];
            v21[0] = MEMORY[0x263EF8330];
            v21[1] = 3221225472;
            void v21[2] = ___ZL36QPSpotlightKnowledgeContextCopyTypesP26_SpotlightKnowledgeContextPK10__CFStringh_block_invoke;
            uint64_t v21[3] = &unk_264706478;
            int v21[4] = &v22;
            void v21[5] = &v26;
            v21[6] = a1;
            dispatch_sync(v19, v21);
            if (Mutable && *((unsigned char *)v23 + 24)) {
              CFArrayAppendValue(Mutable, @"Person");
            }
            _Block_object_dispose(&v22, 8);
          }
          _Block_object_dispose(&v26, 8);
          if (cf) {
            CFRelease(cf);
          }
          if (v12) {
            CFRelease(v12);
          }
          if (v10) {
            CFRelease(v10);
          }
        }
      }
    }
  }
  return Mutable;
}

void sub_224E066B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,CFTypeRef cf)
{
  _Block_object_dispose(&a16, 8);
  _Block_object_dispose(&a20, 8);
  if (cf) {
    CFRelease(cf);
  }
  if (v27) {
    CFRelease(v27);
  }
  if (v26) {
    CFRelease(v26);
  }
  _Unwind_Resume(a1);
}

BOOL hasUpdatesForParser(void *a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v5 = 0;
  CFAllocatorRef v6 = &v5;
  uint64_t v7 = 0x2020000000;
  char v8 = 0;
  uint64_t v1 = a1[11];
  v4[0] = MEMORY[0x263EF8330];
  v4[1] = 3221225472;
  void v4[2] = ___ZL19hasUpdatesForParserPv_block_invoke;
  v4[3] = &unk_2647064A0;
  v4[4] = &v5;
  v4[5] = a1;
  dispatch_sync(v1, v4);
  BOOL v2 = *((unsigned char *)v6 + 24) != 0;
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t willUpdateParser(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    dispatch_queue_t result = mach_absolute_time();
    *(void *)(v1 + 144) = result;
  }
  return result;
}

void didUpdateParser(void *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (a1)
  {
    BOOL v2 = a1[11];
    block[0] = MEMORY[0x263EF8330];
    block[1] = 3221225472;
    block[2] = ___ZL15didUpdateParserPv_block_invoke;
    block[3] = &__block_descriptor_40_e5_v8__0l;
    block[4] = a1;
    dispatch_sync(v2, block);
    uint64_t v3 = a1[18];
    uint64_t v4 = mach_absolute_time();
    if (QPTimingNanosecondsSinceAbsoluteTime(unsigned long long)::onceToken != -1) {
      dispatch_once(&QPTimingNanosecondsSinceAbsoluteTime(unsigned long long)::onceToken, &__block_literal_global_17);
    }
    uint64_t v6 = QPTimingNanosecondsSinceAbsoluteTime(unsigned long long)::sTimebaseInfo;
    unint64_t v5 = *(unsigned int *)algn_26AA70AE4;
    if (sourceLogger(void)::token != -1) {
      dispatch_once(&sourceLogger(void)::token, &__block_literal_global_393);
    }
    uint64_t v7 = sourceLogger(void)::log;
    if (os_log_type_enabled((os_log_t)sourceLogger(void)::log, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134217984;
      double v10 = (float)((float)((v4 - v3) * v6 / v5) / 1000000.0);
      _os_log_impl(&dword_224D85000, v7, OS_LOG_TYPE_DEFAULT, "updated parser in %.1fms", buf, 0xCu);
    }
  }
}

void QPSpotlightKnowledgeSourceRefresh(uint64_t *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (!a1) {
    return;
  }
  uint64_t v1 = *a1;
  if (!*a1 || !*(unsigned char *)(v1 + 64)) {
    return;
  }
  if (!*(void *)v1) {
    goto LABEL_7;
  }
  int v2 = CFDictionaryContainsKey(*(CFDictionaryRef *)v1, @"waitForLoad");
  if (*(void *)v1)
  {
    if (!(v2 | CFDictionaryContainsKey(*(CFDictionaryRef *)v1, @"waitWithTimeout")))
    {
LABEL_7:
      uint64_t v3 = 0;
LABEL_8:
      char v4 = 1;
      goto LABEL_12;
    }
  }
  else if (!v2)
  {
    goto LABEL_7;
  }
  unint64_t v5 = dispatch_group_create();
  uint64_t v3 = v5;
  if (!v5) {
    goto LABEL_8;
  }
  dispatch_group_enter(v5);
  char v4 = 0;
LABEL_12:
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 3221225472;
  void v8[2] = __QPSpotlightKnowledgeSourceRefresh_block_invoke;
  void v8[3] = &unk_264706280;
  v8[4] = v3;
  QPSpotlightKnowledgeContextUpdateResources(v1, (uint64_t)v8);
  if ((v4 & 1) == 0)
  {
    if (sourceLogger(void)::token != -1) {
      dispatch_once(&sourceLogger(void)::token, &__block_literal_global_393);
    }
    uint64_t v6 = sourceLogger(void)::log;
    if (os_log_type_enabled((os_log_t)sourceLogger(void)::log, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      int v10 = 500;
      _os_log_impl(&dword_224D85000, v6, OS_LOG_TYPE_DEFAULT, "lexicon loading - wait for time (%u) ms", buf, 8u);
    }
    dispatch_time_t v7 = dispatch_time(0, 500000000);
    if (dispatch_group_wait(v3, v7))
    {
      if (sourceLogger(void)::token != -1) {
        dispatch_once(&sourceLogger(void)::token, &__block_literal_global_393);
      }
      if (os_log_type_enabled((os_log_t)sourceLogger(void)::log, OS_LOG_TYPE_ERROR)) {
        QPSpotlightKnowledgeSourceRefresh_cold_1();
      }
    }
  }
}

void QPSpotlightKnowledgeContextUpdateResources(uint64_t a1, uint64_t a2)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 64))
  {
    if (sourceLogger(void)::token != -1) {
      dispatch_once(&sourceLogger(void)::token, &__block_literal_global_393);
    }
    char v4 = sourceLogger(void)::log;
    if (os_log_type_enabled((os_log_t)sourceLogger(void)::log, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_224D85000, v4, OS_LOG_TYPE_DEFAULT, "safety: load resources", buf, 2u);
    }
    unloadSafetyResources(a1);
    *(void *)long long buf = 0;
    int v44 = buf;
    uint64_t v45 = 0x3812000000;
    unint64_t v46 = __Block_byref_object_copy__366;
    int v47 = __Block_byref_object_dispose__367;
    long long v48 = &unk_224E37267;
    CFTypeRef v49 = 0;
    userInfoValues = 0;
    p_userInfoValues = &userInfoValues;
    uint64_t v38 = 0x3812000000;
    unint64_t v39 = __Block_byref_object_copy__366;
    uint64_t v40 = __Block_byref_object_dispose__367;
    uint64_t v41 = &unk_224E37267;
    CFTypeRef v42 = 0;
    v31[0] = MEMORY[0x263EF8330];
    v31[1] = 3221225472;
    v31[2] = ___ZL19loadSafetyResourcesP26_SpotlightKnowledgeContextb_block_invoke;
    _OWORD v31[3] = &unk_2647064F0;
    v31[4] = buf;
    v31[5] = &userInfoValues;
    systemListenerEnumerateResourcesWithContentType(@"Safety", v31);
    dispatch_time_t v7 = (nlp *)*((void *)v44 + 6);
    char v8 = p_userInfoValues[6];
    if (v7)
    {
      if (v8)
      {
        CFTypeRef cf = 0;
        CFDictionaryRef DictionaryWithContentsOfURL = (const __CFDictionary *)nlp::createDictionaryWithContentsOfURL(v7, (CFErrorRef *)&cf, v5, v6);
        *(void *)(a1 + 16) = DictionaryWithContentsOfURL;
        if (cf)
        {
          if (sourceLogger(void)::token != -1) {
            dispatch_once(&sourceLogger(void)::token, &__block_literal_global_393);
          }
          int v10 = sourceLogger(void)::log;
          if (os_log_type_enabled((os_log_t)sourceLogger(void)::log, OS_LOG_TYPE_ERROR)) {
            QPSpotlightKnowledgeContextUpdateResources((uint64_t *)&cf, v10);
          }
          CFRelease(cf);
        }
        else
        {
          CFStringRef Value = CFDictionaryGetValue(DictionaryWithContentsOfURL, @"compilationDate");
          uint64_t v13 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"safetyTypes");
          if (sourceLogger(void)::token != -1) {
            dispatch_once(&sourceLogger(void)::token, &__block_literal_global_393);
          }
          uint64_t v14 = sourceLogger(void)::log;
          if (os_log_type_enabled((os_log_t)sourceLogger(void)::log, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)BOOL v32 = 138412546;
            uint64_t v33 = (uint64_t)Value;
            __int16 v34 = 2112;
            uint64_t v35 = v13;
            _os_log_impl(&dword_224D85000, v14, OS_LOG_TYPE_DEFAULT, "safety: loading resource created at %@ with types %@", v32, 0x16u);
          }
          int v29 = 0;
          QPCFDictionaryGetInt32ValueIfPresent(*(void *)(a1 + 16), @"majorVersion", &v29);
          if (v29 == 2)
          {
            CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
            CFURLRef PathComponent = CFURLCreateCopyDeletingLastPathComponent((CFAllocatorRef)*MEMORY[0x263EFFB08], (CFURLRef)p_userInfoValues[6]);
            CFStringRef v17 = CFURLCopyLastPathComponent((CFURLRef)p_userInfoValues[6]);
            if (CFStringsAreEqual(v17, @"safety_resources.map"))
            {
              CFMutableArrayRef Mutable = CFDictionaryCreateMutable(v15, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
              CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F78CF0], (const void *)*MEMORY[0x263EFFB40]);
              uint64_t v19 = SIDataMapCreateWithOptions();
              *(void *)(a1 + 24) = v19;
              BOOL v20 = v19 != 0;
              if (v19)
              {
                if (sourceLogger(void)::token != -1) {
                  dispatch_once(&sourceLogger(void)::token, &__block_literal_global_393);
                }
                log = sourceLogger(void)::log;
                if (os_log_type_enabled((os_log_t)sourceLogger(void)::log, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t Count = SIDataMapGetCount();
                  *(_DWORD *)BOOL v32 = 134217984;
                  uint64_t v33 = Count;
                  _os_log_impl(&dword_224D85000, log, OS_LOG_TYPE_DEFAULT, "safety: loaded resource: %ld", v32, 0xCu);
                }
              }
              else
              {
                if (sourceLogger(void)::token != -1) {
                  dispatch_once(&sourceLogger(void)::token, &__block_literal_global_393);
                }
                if (os_log_type_enabled((os_log_t)sourceLogger(void)::log, OS_LOG_TYPE_ERROR)) {
                  QPSpotlightKnowledgeContextUpdateResources();
                }
              }
              if (Mutable) {
                CFRelease(Mutable);
              }
            }
            else
            {
              BOOL v20 = 0;
            }
            if (v17) {
              CFRelease(v17);
            }
            if (PathComponent) {
              CFRelease(PathComponent);
            }
            goto LABEL_43;
          }
          if (sourceLogger(void)::token != -1) {
            dispatch_once(&sourceLogger(void)::token, &__block_literal_global_393);
          }
          uint64_t v22 = sourceLogger(void)::log;
          if (os_log_type_enabled((os_log_t)sourceLogger(void)::log, OS_LOG_TYPE_ERROR)) {
            QPSpotlightKnowledgeContextUpdateResources(&v29, 2, v22);
          }
        }
      }
      else
      {
        if (sourceLogger(void)::token != -1) {
          dispatch_once(&sourceLogger(void)::token, &__block_literal_global_393);
        }
        if (os_log_type_enabled((os_log_t)sourceLogger(void)::log, OS_LOG_TYPE_ERROR)) {
          QPSpotlightKnowledgeContextUpdateResources();
        }
      }
    }
    else if (v8)
    {
      if (sourceLogger(void)::token != -1) {
        dispatch_once(&sourceLogger(void)::token, &__block_literal_global_393);
      }
      if (os_log_type_enabled((os_log_t)sourceLogger(void)::log, OS_LOG_TYPE_ERROR)) {
        QPSpotlightKnowledgeContextUpdateResources();
      }
    }
    BOOL v20 = 0;
LABEL_43:
    _Block_object_dispose(&userInfoValues, 8);
    if (v42) {
      CFRelease(v42);
    }
    _Block_object_dispose(buf, 8);
    if (v49) {
      CFRelease(v49);
    }
    if (v20)
    {
      systemListenerGetLocale();
      if (!*(void *)(a1 + 32)) {
        *(void *)(a1 + 32) = SILexiconCacheCreateWithOptions();
      }
      if (SILexiconCacheIsAvailable())
      {
        if (a2) {
          (*(void (**)(uint64_t, void))(a2 + 16))(a2, 0);
        }
      }
      else
      {
        mach_absolute_time();
        SILexiconCacheLoad();
      }
    }
    else
    {
      if (sourceLogger(void)::token != -1) {
        dispatch_once(&sourceLogger(void)::token, &__block_literal_global_393);
      }
      uint64_t v23 = sourceLogger(void)::log;
      if (os_log_type_enabled((os_log_t)sourceLogger(void)::log, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_224D85000, v23, OS_LOG_TYPE_DEFAULT, "not loading lexicon cache because safety annotations aren't loaded", buf, 2u);
      }
      if (a2)
      {
        CFAllocatorRef v24 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        char v25 = (__CFString *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"QueryParser: could not load safety assets");
        uint64_t v26 = v25;
        if (v25)
        {
          *(void *)long long buf = *MEMORY[0x263EFFC48];
          userInfoValues = v25;
          CFErrorRef v27 = CFErrorCreateWithUserInfoKeysAndValues(v24, @"QueryParserErrorDomain", 1, (const void *const *)buf, (const void *const *)&userInfoValues, 1);
          CFRelease(v26);
          (*(void (**)(uint64_t, CFErrorRef))(a2 + 16))(a2, v27);
          if (v27) {
            CFRelease(v27);
          }
        }
        else
        {
          (*(void (**)(uint64_t, void))(a2 + 16))(a2, 0);
        }
      }
    }
    return;
  }
  if (a2)
  {
    uint64_t v11 = *(void (**)(uint64_t, void))(a2 + 16);
    v11(a2, 0);
  }
}

void sub_224E07374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, const void *a16, const void *a17, const void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  nlp::CFScopedPtr<__CFDictionary *>::reset(&a16, 0);
  nlp::CFScopedPtr<__CFString const*>::reset(&a17, 0);
  nlp::CFScopedPtr<__CFURL const*>::reset(&a18, 0);
  _Block_object_dispose(&a30, 8);
  nlp::CFScopedPtr<__CFURL const*>::reset((const void **)(v31 + 48), 0);
  _Block_object_dispose((const void *)(v32 - 176), 8);
  nlp::CFScopedPtr<__CFURL const*>::reset((const void **)(v30 + 48), 0);
  _Unwind_Resume(a1);
}

void __QPSpotlightKnowledgeSourceRefresh_block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (sourceLogger(void)::token != -1) {
      dispatch_once(&sourceLogger(void)::token, &__block_literal_global_393);
    }
    if (os_log_type_enabled((os_log_t)sourceLogger(void)::log, OS_LOG_TYPE_ERROR)) {
      __QPSpotlightKnowledgeSourceRefresh_block_invoke_cold_1();
    }
  }
  else
  {
    if (sourceLogger(void)::token != -1) {
      dispatch_once(&sourceLogger(void)::token, &__block_literal_global_393);
    }
    uint64_t v3 = sourceLogger(void)::log;
    if (os_log_type_enabled((os_log_t)sourceLogger(void)::log, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unint64_t v5 = 0;
      _os_log_impl(&dword_224D85000, v3, OS_LOG_TYPE_DEFAULT, "reloaded lexicon", v5, 2u);
    }
  }
  char v4 = *(NSObject **)(a1 + 32);
  if (v4) {
    dispatch_group_leave(v4);
  }
}

uint64_t *QPSpotlightKnowledgeSourceSetOptions(uint64_t *result, const __CFDictionary *cf)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (!result) {
    return result;
  }
  uint64_t v2 = *result;
  if (!*result) {
    return result;
  }
  if (*(unsigned char *)(v2 + 64))
  {
    if (*(void *)v2)
    {
      BOOL v4 = CFDictionaryContainsKey(*(CFDictionaryRef *)v2, @"waitWithTimeout") != 0;
      if (*(void *)v2)
      {
        int v5 = CFDictionaryContainsKey(*(CFDictionaryRef *)v2, @"waitForLoad") != 0;
        if (!cf)
        {
LABEL_7:
          int v6 = 0;
          BOOL v7 = 0;
LABEL_11:
          int v8 = v4 ^ v7;
          if (v5 != v6) {
            int v8 = 1;
          }
          if (v8 == 1 && v6 | v7)
          {
            BOOL v9 = dispatch_group_create();
            dispatch_group_enter(v9);
            v12[0] = MEMORY[0x263EF8330];
            v12[1] = 3221225472;
            v12[2] = ___ZL37QPSpotlightKnowledgeContextSetOptionsP26_SpotlightKnowledgeContextPK14__CFDictionary_block_invoke;
            _OWORD v12[3] = &unk_264706280;
            void v12[4] = v9;
            QPSpotlightKnowledgeContextUpdateResources(v2, (uint64_t)v12);
            if (sourceLogger(void)::token != -1) {
              dispatch_once(&sourceLogger(void)::token, &__block_literal_global_393);
            }
            int v10 = sourceLogger(void)::log;
            if (os_log_type_enabled((os_log_t)sourceLogger(void)::log, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 67109120;
              int v14 = 500;
              _os_log_impl(&dword_224D85000, v10, OS_LOG_TYPE_DEFAULT, "lexicon loading - wait for time (%u) ms", buf, 8u);
            }
            dispatch_time_t v11 = dispatch_time(0, 500000000);
            if (dispatch_group_wait(v9, v11))
            {
              if (sourceLogger(void)::token != -1) {
                dispatch_once(&sourceLogger(void)::token, &__block_literal_global_393);
              }
              if (os_log_type_enabled((os_log_t)sourceLogger(void)::log, OS_LOG_TYPE_ERROR)) {
                QPSpotlightKnowledgeSourceRefresh_cold_1();
              }
            }
          }
          goto LABEL_24;
        }
LABEL_10:
        int v6 = CFDictionaryContainsKey(cf, @"waitForLoad") != 0;
        BOOL v7 = CFDictionaryContainsKey(cf, @"waitWithTimeout") != 0;
        goto LABEL_11;
      }
    }
    else
    {
      BOOL v4 = 0;
    }
    int v5 = 0;
    if (!cf) {
      goto LABEL_7;
    }
    goto LABEL_10;
  }
LABEL_24:
  if (*(void *)v2)
  {
    CFRelease(*(CFTypeRef *)v2);
    *(void *)uint64_t v2 = 0;
  }
  if (cf) {
    dispatch_queue_t result = (uint64_t *)CFRetain(cf);
  }
  else {
    dispatch_queue_t result = 0;
  }
  *(void *)uint64_t v2 = result;
  return result;
}

void QPSpotlightKnowledgeSourceSetCustomFields(uint64_t *a1, const __CFDictionary *a2)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (*a1)
    {
      uint64_t v4 = *(void *)(v2 + 8);
      int v5 = *(NSObject **)(v2 + 96);
      block[0] = MEMORY[0x263EF8330];
      block[1] = 3221225472;
      block[2] = ___ZL30extractCustomFieldsWithContextP26_SpotlightKnowledgeContextPK14__CFDictionaryS3__block_invoke;
      block[3] = &__block_descriptor_56_e5_v8__0l;
      block[4] = v4;
      void block[5] = v2;
      block[6] = a2;
      dispatch_sync(v5, block);
      int v6 = *(const void **)(v2 + 8);
      if (v6)
      {
        CFRelease(v6);
        *(void *)(v2 + 8) = 0;
      }
      if (a2) {
        *(void *)(v2 + 8) = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], a2);
      }
    }
  }
}

void QPSpotlightKnowledgeSourceRelease(uint64_t *a1)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (*a1)
    {
      if (*(void *)v2)
      {
        CFRelease(*(CFTypeRef *)v2);
        *(void *)uint64_t v2 = 0;
      }
      unloadSafetyResources(v2);
      if (*(void *)(v2 + 32))
      {
        SILexiconCacheRelease();
        *(void *)(v2 + 32) = 0;
      }
      uint64_t v3 = *(const void **)(v2 + 8);
      if (v3)
      {
        CFRelease(v3);
        *(void *)(v2 + 8) = 0;
      }
      uint64_t v4 = *(NSObject **)(v2 + 112);
      if (v4)
      {
        *(unsigned char *)(v2 + 67) = 1;
        dispatch_sync(v4, &__block_literal_global_396);
        dispatch_sync(*(dispatch_queue_t *)(v2 + 96), &__block_literal_global_398);
        dispatch_sync(*(dispatch_queue_t *)(v2 + 104), &__block_literal_global_400);
        dispatch_sync(*(dispatch_queue_t *)(v2 + 88), &__block_literal_global_402);
        dispatch_sync(*(dispatch_queue_t *)(v2 + 80), &__block_literal_global_404);
        int v5 = *(NSObject **)(v2 + 120);
        if (v5)
        {
          dispatch_source_cancel(*(dispatch_source_t *)(v2 + 120));
          dispatch_release(v5);
        }
      }
      dispatch_sync(*(dispatch_queue_t *)(v2 + 96), &__block_literal_global_406);
      dispatch_sync(*(dispatch_queue_t *)(v2 + 104), &__block_literal_global_408);
      dispatch_sync(*(dispatch_queue_t *)(v2 + 88), &__block_literal_global_410);
      dispatch_sync(*(dispatch_queue_t *)(v2 + 80), &__block_literal_global_412);
      int v6 = *(_DWORD **)(v2 + 40);
      if (v6)
      {
        QPStringCacheRelease(v6);
        *(void *)(v2 + 4std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = 0;
      }
      BOOL v7 = *(_DWORD **)(v2 + 48);
      if (v7)
      {
        QPStringCacheRelease(v7);
        *(void *)(v2 + 48) = 0;
      }
      int v8 = *(CFArrayRef **)(v2 + 56);
      if (v8)
      {
        QPSpotlightCacheRelease(v8);
        *(void *)(v2 + 56) = 0;
      }
      BOOL v9 = *(NSObject **)(v2 + 96);
      if (v9)
      {
        dispatch_release(v9);
        *(void *)(v2 + 96) = 0;
      }
      int v10 = *(NSObject **)(v2 + 104);
      if (v10)
      {
        dispatch_release(v10);
        *(void *)(v2 + 104) = 0;
      }
      dispatch_time_t v11 = *(NSObject **)(v2 + 88);
      if (v11)
      {
        dispatch_release(v11);
        *(void *)(v2 + 88) = 0;
      }
      CFTypeRef v12 = *(NSObject **)(v2 + 80);
      if (v12)
      {
        dispatch_release(v12);
        *(void *)(v2 + 8std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = 0;
      }
      uint64_t v13 = *(NSObject **)(v2 + 112);
      if (v13) {
        dispatch_release(v13);
      }
      free((void *)v2);
      if (sourceLogger(void)::token != -1) {
        dispatch_once(&sourceLogger(void)::token, &__block_literal_global_393);
      }
      int v14 = sourceLogger(void)::log;
      if (os_log_type_enabled((os_log_t)sourceLogger(void)::log, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_224D85000, v14, OS_LOG_TYPE_DEFAULT, "released QPSpotlightKnowledgeContext", buf, 2u);
      }
    }
    free(a1);
    if (sourceLogger(void)::token != -1) {
      dispatch_once(&sourceLogger(void)::token, &__block_literal_global_393);
    }
    uint64_t v15 = sourceLogger(void)::log;
    if (os_log_type_enabled((os_log_t)sourceLogger(void)::log, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl(&dword_224D85000, v15, OS_LOG_TYPE_DEFAULT, "released QPSpotlightKnowledgeSource", v16, 2u);
    }
  }
}

BOOL addValue(uint64_t a1, __CFString *a2, uint64_t a3, uint64_t a4)
{
  if (!a2 || ![(__CFString *)a2 length] || (unint64_t)[(__CFString *)a2 length] > 0x28) {
    return 0;
  }
  if ((a4 & 0xFFFFFFFE) != 2)
  {
    v33.CFIndex length = [(__CFString *)a2 length];
    v33.CFIndex location = 0;
    uint64_t v19 = (const void *)copyStringInsertingSpacesBetweenIdeographCharacters(a2, v33);
    CFStringRef v20 = (const __CFString *)[(id)(id)CFMakeCollectable(v19) lowercaseString];
    uint64_t v21 = a1;
    uint64_t v22 = a4;
    return QPStringCacheAddWithCount(v21, v20, v22, a3) != 0;
  }
  if (([(__CFString *)a2 containsString:@"@"] & 1) != 0
    || ([(__CFString *)a2 containsString:@"+"] & 1) != 0)
  {
    return 0;
  }
  v31.CFIndex length = [(__CFString *)a2 length];
  v31.CFIndex location = 0;
  int v10 = (const void *)copyStringInsertingSpacesBetweenIdeographCharacters(a2, v31);
  dispatch_time_t v11 = (__CFString *)[(id)(id)CFMakeCollectable(v10) lowercaseString];
  if (([(__CFString *)v11 isEqualToString:[(__CFString *)a2 lowercaseString]] & 1) == 0)
  {
    uint64_t v21 = a1;
    CFStringRef v20 = v11;
    uint64_t v22 = 3;
    return QPStringCacheAddWithCount(v21, v20, v22, a3) != 0;
  }
  uint64_t v24 = 0;
  char v25 = &v24;
  uint64_t v26 = 0x4012000000;
  CFErrorRef v27 = __Block_byref_object_copy__13;
  uint64_t v28 = __Block_byref_object_dispose__13;
  int v29 = &unk_224E37267;
  long long v30 = xmmword_224E1ED00;
  uint64_t v12 = [(__CFString *)a2 length];
  uint64_t v13 = *MEMORY[0x263F082D8];
  v23[0] = MEMORY[0x263EF8330];
  v23[1] = 3221225472;
  _OWORD v23[2] = ___ZL8addValueP14_QPStringCacheP8NSStringm18SpotlightInputType_block_invoke;
  v23[3] = &unk_2647062A8;
  void v23[4] = &v24;
  -[__CFString enumerateLinguisticTagsInRange:scheme:options:orthography:usingBlock:](a2, "enumerateLinguisticTagsInRange:scheme:options:orthography:usingBlock:", 0, v12, v13, 4, 0, v23);
  if (v25[6] == 0x7FFFFFFFFFFFFFFFLL || (unint64_t v14 = v25[7], v14 >= [(__CFString *)a2 length]))
  {
    BOOL v18 = QPStringCacheAddWithCount(a1, v11, 3, a3) == 0;
  }
  else
  {
    uint64_t v15 = (__CFString *)-[__CFString substringWithRange:](a2, "substringWithRange:", v25[6], v25[7]);
    v32.CFIndex length = [(__CFString *)v15 length];
    v32.CFIndex location = 0;
    uint64_t v16 = (const void *)copyStringInsertingSpacesBetweenIdeographCharacters(v15, v32);
    CFStringRef v17 = (const __CFString *)[(id)(id)CFMakeCollectable(v16) lowercaseString];
    LODWORD(v15) = QPStringCacheAddWithCount(a1, v17, 3, a3);
    BOOL v18 = (QPStringCacheAddWithCount(a1, v11, a4, a3) | v15) == 0;
  }
  uint64_t v8 = !v18;
  _Block_object_dispose(&v24, 8);
  return v8;
}

void sub_224E07D98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t createQueryString(NSArray *a1)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v13 = (void *)[MEMORY[0x263EFF980] array];
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  uint64_t v2 = [(NSArray *)a1 countByEnumeratingWithState:&v18 objects:v23 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v12 = *(void *)v19;
    do
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v19 != v12) {
          objc_enumerationMutation(a1);
        }
        uint64_t v5 = *(void *)(*((void *)&v18 + 1) + 8 * i);
        int v6 = (void *)[MEMORY[0x263EFF980] array];
        [v6 addObject:objc_msgSend(NSString, "stringWithFormat:", @"%@=\"*\"", v5)];
        long long v16 = 0u;
        long long v17 = 0u;
        long long v14 = 0u;
        long long v15 = 0u;
        uint64_t v7 = [&unk_26D83EDE8 countByEnumeratingWithState:&v14 objects:v22 count:16];
        if (v7)
        {
          uint64_t v8 = v7;
          uint64_t v9 = *(void *)v15;
          do
          {
            for (uint64_t j = 0; j != v8; ++j)
            {
              if (*(void *)v15 != v9) {
                objc_enumerationMutation(&unk_26D83EDE8);
              }
              [v6 addObject:objc_msgSend(NSString, "stringWithFormat:", @"%@!=\"%@\"", v5, *(void *)(*((void *)&v14 + 1) + 8 * j))];
            }
            uint64_t v8 = [&unk_26D83EDE8 countByEnumeratingWithState:&v14 objects:v22 count:16];
          }
          while (v8);
        }
        [v13 addObject:objc_msgSend(NSString, "stringWithFormat:", @"(%@)", objc_msgSend(v6, "componentsJoinedByString:", @" && "];
      }
      uint64_t v3 = [(NSArray *)a1 countByEnumeratingWithState:&v18 objects:v23 count:16];
    }
    while (v3);
  }
  return [NSString stringWithFormat:@"(%@)", objc_msgSend(v13, "componentsJoinedByString:", @" || "];
}

void extractSpotlightTermsWithContext(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, int a7)
{
  if (a7)
  {
    uint64_t v13 = *(NSObject **)(a1 + 112);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 3221225472;
    block[2] = ___ZL32extractSpotlightTermsWithContextP26_SpotlightKnowledgeContextP8NSStringP7NSArrayS4_S4_S4_h_block_invoke;
    block[3] = &unk_2647062D0;
    block[4] = a2;
    void block[5] = a3;
    block[6] = a4;
    void block[7] = a5;
    block[8] = a6;
    block[9] = a1;
    char v23 = 1;
    dispatch_sync(v13, block);
  }
  else if ([a4 containsObject:@"kMDItemPhotosLocationKeywords"])
  {
    long long v14 = *(NSObject **)(a1 + 112);
    v20[0] = MEMORY[0x263EF8330];
    v20[1] = 3221225472;
    v20[2] = ___ZL32extractSpotlightTermsWithContextP26_SpotlightKnowledgeContextP8NSStringP7NSArrayS4_S4_S4_h_block_invoke_2;
    _DWORD v20[3] = &unk_2647062D0;
    int v20[4] = a2;
    v20[5] = a3;
    v20[6] = a4;
    void v20[7] = a5;
    v20[8] = a6;
    v20[9] = a1;
    char v21 = 0;
    dispatch_async(v14, v20);
  }
  else
  {
    double Current = CFAbsoluteTimeGetCurrent();
    handler[0] = MEMORY[0x263EF8330];
    handler[1] = 3221225472;
    handler[2] = ___ZL32extractSpotlightTermsWithContextP26_SpotlightKnowledgeContextP8NSStringP7NSArrayS4_S4_S4_h_block_invoke_3;
    handler[3] = &unk_2647062D0;
    handler[4] = a2;
    handler[5] = a3;
    handler[6] = a4;
    handler[7] = a5;
    handler[8] = a6;
    handler[9] = a1;
    char v19 = 0;
    long long v16 = dispatch_source_create(MEMORY[0x263EF8400], 0, 0, MEMORY[0x263EF83A0]);
    long long v17 = v16;
    if (v16)
    {
      dispatch_source_set_timer(v16, (unint64_t)Current, 0x34630B8A000uLL, 0x68C61714000uLL);
      dispatch_source_set_event_handler(v17, handler);
      dispatch_resume(v17);
    }
    *(void *)(a1 + 12std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = v17;
  }
}

__n128 __Block_byref_object_copy__13(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  return result;
}

uint64_t ___ZL8addValueP14_QPStringCacheP8NSStringm18SpotlightInputType_block_invoke(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned char *a7)
{
  uint64_t v7 = *(void *)(*(void *)(result + 32) + 8);
  if (*(void *)(v7 + 48) == 0x7FFFFFFFFFFFFFFFLL)
  {
    *(void *)(v7 + 48) = a3;
    *(void *)(v7 + 56) = a4;
  }
  else
  {
    *a7 = 1;
  }
  return result;
}

void ___ZL32extractSpotlightTermsWithContextP26_SpotlightKnowledgeContextP8NSStringP7NSArrayS4_S4_S4_h_block_invoke(uint64_t a1)
{
  queryForAttributes(*(void *)(a1 + 72), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void **)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(unsigned char *)(a1 + 80) != 0);
}

void queryForAttributes(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, int a7)
{
  v41[1] = *MEMORY[0x263EF8340];
  if (sourceLogger(void)::token != -1) {
    dispatch_once(&sourceLogger(void)::token, &__block_literal_global_393);
  }
  os_signpost_id_t v14 = os_signpost_id_generate((os_log_t)sourceLogger(void)::log);
  if (sourceLogger(void)::token != -1) {
    dispatch_once(&sourceLogger(void)::token, &__block_literal_global_393);
  }
  os_signpost_id_t spid = v14;
  unint64_t v15 = v14 - 1;
  if (v15 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    long long v16 = sourceLogger(void)::log;
    if (os_signpost_enabled((os_log_t)sourceLogger(void)::log))
    {
      LOWORD(buf) = 0;
      _os_signpost_emit_with_name_impl(&dword_224D85000, v16, OS_SIGNPOST_INTERVAL_BEGIN, spid, "query backend", "", (uint8_t *)&buf, 2u);
    }
  }
  if (!*(unsigned char *)(a1 + 67))
  {
    double v17 = *(double *)(a1 + 72);
    double Current = CFAbsoluteTimeGetCurrent();
    if ((a7 | (v17 == 0.0)) == 1) {
      double v19 = Current + -31536000.0;
    }
    else {
      double v19 = *(double *)(a1 + 72);
    }
    if (v17 == 0.0) {
      int v20 = 1;
    }
    else {
      int v20 = a7;
    }
    if (v20) {
      uint64_t v21 = 1000;
    }
    else {
      uint64_t v21 = 100;
    }
    *(double *)(a1 + 72) = Current;
    CFStringRef v22 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, @"(InRange(kMDItemContentCreationDate, %f, %f)) || (_kMDItemContentCreationDateYear!=* && InRange(kMDItemAttributeChangeDate, %f, %f))", *(void *)&v19, *(void *)&Current, *(void *)&v19, *(void *)&Current);
    char v23 = (id)CFMakeCollectable(v22);
    id v24 = objc_alloc_init(MEMORY[0x263F02AD0]);
    v41[0] = a2;
    objc_msgSend(v24, "setFilterQueries:", objc_msgSend(MEMORY[0x263EFF8C0], "arrayWithObjects:count:", v41, 1));
    [v24 setFetchAttributes:a4];
    [v24 setRankingQueries:a5];
    [v24 setBundleIDs:a3];
    [v24 setLowPriority:1];
    [v24 setAttribute:1];
    [v24 setMaxCount:v21];
    [v24 setMaximumBatchSize:(6554 * v21) >> 16];
    [v24 setDisableResultStreaming:1];
    if ([a4 containsObject:@"kMDItemPhotosLocationKeywords"])
    {
      [v24 setMaxCount:*(int *)(a1 + 136)];
      [v24 setMaximumBatchSize:500];
      char v23 = &stru_26D832058;
    }
    char v25 = (void *)mach_absolute_time();
    uint64_t v26 = (void *)[objc_alloc(MEMORY[0x263F02AC8]) initWithQueryString:v23 queryContext:v24];
    uint64_t v27 = *(void *)(a1 + 88);
    uint64_t v28 = *(void *)(a1 + 96);
    objc_initWeak(&buf, v26);
    v38[0] = MEMORY[0x263EF8330];
    v38[1] = 3221225472;
    void v38[2] = ___ZL18queryForAttributesP26_SpotlightKnowledgeContextP8NSStringP7NSArrayS4_S4_S4_b_block_invoke;
    v38[3] = &unk_264706320;
    v39[1] = (id)a1;
    v38[4] = v28;
    objc_copyWeak(v39, &buf);
    v38[5] = a6;
    v38[6] = v27;
    [v26 setFoundAttributesHandler:v38];
    [v26 setChangedAttributesHandler:v38];
    int v29 = dispatch_group_create();
    v36[0] = MEMORY[0x263EF8330];
    v36[1] = 3221225472;
    void v36[2] = ___ZL18queryForAttributesP26_SpotlightKnowledgeContextP8NSStringP7NSArrayS4_S4_S4_b_block_invoke_306;
    v36[3] = &unk_264706348;
    objc_copyWeak(&v37, &buf);
    [v26 setGatherEndedHandler:v36];
    v34[0] = MEMORY[0x263EF8330];
    v34[1] = 3221225472;
    v34[2] = ___ZL18queryForAttributesP26_SpotlightKnowledgeContextP8NSStringP7NSArrayS4_S4_S4_b_block_invoke_2_307;
    v34[3] = &unk_264706398;
    v35[1] = v25;
    v34[4] = v28;
    v34[5] = v29;
    objc_copyWeak(v35, &buf);
    [v26 setCompletionHandler:v34];
    dispatch_group_enter(v29);
    [v26 start];
    [v26 poll];
    dispatch_group_wait(v29, 0xDF8475800uLL);
    if (sourceLogger(void)::token != -1) {
      dispatch_once(&sourceLogger(void)::token, &__block_literal_global_393);
    }
    long long v30 = sourceLogger(void)::log;
    if (os_log_type_enabled((os_log_t)sourceLogger(void)::log, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)CFRange v33 = 0;
      _os_log_impl(&dword_224D85000, v30, OS_LOG_TYPE_DEFAULT, "queryForAttributes: finished attribute query", v33, 2u);
    }

    dispatch_release(v29);
    if (sourceLogger(void)::token != -1) {
      dispatch_once(&sourceLogger(void)::token, &__block_literal_global_393);
    }
    if (v15 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      CFRange v31 = sourceLogger(void)::log;
      if (os_signpost_enabled((os_log_t)sourceLogger(void)::log))
      {
        *(_WORD *)CFRange v33 = 0;
        _os_signpost_emit_with_name_impl(&dword_224D85000, v31, OS_SIGNPOST_INTERVAL_END, spid, "query backend", "", v33, 2u);
      }
    }
    objc_destroyWeak(v35);
    objc_destroyWeak(&v37);
    objc_destroyWeak(v39);
    objc_destroyWeak(&buf);
  }
}

void sub_224E0879C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v3);
  objc_destroyWeak(v1);
  objc_destroyWeak(v2);
  objc_destroyWeak((id *)(v4 - 128));
  _Unwind_Resume(a1);
}

void ___ZL32extractSpotlightTermsWithContextP26_SpotlightKnowledgeContextP8NSStringP7NSArrayS4_S4_S4_h_block_invoke_2(uint64_t a1)
{
  queryForAttributes(*(void *)(a1 + 72), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void **)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(unsigned char *)(a1 + 80) != 0);
}

void ___ZL32extractSpotlightTermsWithContextP26_SpotlightKnowledgeContextP8NSStringP7NSArrayS4_S4_S4_h_block_invoke_3(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 72);
  uint64_t v2 = *(NSObject **)(v1 + 112);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = ___ZL32extractSpotlightTermsWithContextP26_SpotlightKnowledgeContextP8NSStringP7NSArrayS4_S4_S4_h_block_invoke_4;
  block[3] = &unk_2647062D0;
  long long v3 = *(_OWORD *)(a1 + 48);
  long long v5 = *(_OWORD *)(a1 + 32);
  long long v6 = v3;
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v8 = v1;
  char v9 = *(unsigned char *)(a1 + 80);
  dispatch_async(v2, block);
}

void ___ZL32extractSpotlightTermsWithContextP26_SpotlightKnowledgeContextP8NSStringP7NSArrayS4_S4_S4_h_block_invoke_4(uint64_t a1)
{
  queryForAttributes(*(void *)(a1 + 72), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void **)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(unsigned char *)(a1 + 80) != 0);
}

void ___ZL18queryForAttributesP26_SpotlightKnowledgeContextP8NSStringP7NSArrayS4_S4_S4_b_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(*(void *)(a1 + 64) + 67))
  {
    Weauint64_t k = objc_loadWeak((id *)(a1 + 56));
    [Weak cancel];
    [Weak poll];
  }
  else
  {
    uint64_t v7 = *(NSObject **)(a1 + 32);
    v8[0] = MEMORY[0x263EF8330];
    v8[1] = 3221225472;
    void v8[2] = ___ZL18queryForAttributesP26_SpotlightKnowledgeContextP8NSStringP7NSArrayS4_S4_S4_b_block_invoke_2;
    void v8[3] = &unk_2647062F8;
    objc_copyWeak(v10, (id *)(a1 + 56));
    v10[1] = *(id *)(a1 + 64);
    v8[4] = a2;
    void v8[5] = a3;
    long long v9 = *(_OWORD *)(a1 + 40);
    dispatch_async(v7, v8);
    objc_destroyWeak(v10);
  }
}

void ___ZL18queryForAttributesP26_SpotlightKnowledgeContextP8NSStringP7NSArrayS4_S4_S4_b_block_invoke_2(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  Weauint64_t k = objc_loadWeak((id *)(a1 + 64));
  if ([*(id *)(a1 + 32) isEqualToString:@"kCSEndOfBatchMarker"])
  {
    if (sourceLogger(void)::token != -1) {
      dispatch_once(&sourceLogger(void)::token, &__block_literal_global_393);
    }
    long long v3 = sourceLogger(void)::log;
    if (os_log_type_enabled((os_log_t)sourceLogger(void)::log, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id buf = 67109120;
      LODWORD(v2std::unique_ptr<QP::DatePeriod>::reset[abi:ne180100]((const void ***)&a9, 0) = Weak != 0;
      _os_log_impl(&dword_224D85000, v3, OS_LOG_TYPE_DEFAULT, "queryForAttributes: polling %d", buf, 8u);
    }
    [Weak poll];
    return;
  }
  if (sourceLogger(void)::token != -1) {
    dispatch_once(&sourceLogger(void)::token, &__block_literal_global_393);
  }
  uint64_t v4 = sourceLogger(void)::log;
  if (os_log_type_enabled((os_log_t)sourceLogger(void)::log, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    *(_DWORD *)id buf = 138412290;
    uint64_t v20 = v5;
    _os_log_impl(&dword_224D85000, v4, OS_LOG_TYPE_DEFAULT, "queryForAttributes: attributes: %@", buf, 0xCu);
  }
  long long v6 = (void *)MEMORY[0x22A624280]();
  if ([*(id *)(a1 + 32) isEqualToString:@"kMDItemPhotosLocationKeywords"]
    || ([&unk_26D83EDB8 containsObject:*(void *)(a1 + 32)] & 1) != 0
    || [&unk_26D83EDD0 containsObject:*(void *)(a1 + 32)])
  {
    uint64_t v7 = *(void *)(*(void *)(a1 + 72) + 40);
    uint64_t v8 = *(void **)(a1 + 40);
    unsigned int v9 = 5;
    goto LABEL_15;
  }
  if ([&unk_26D83ED88 containsObject:*(void *)(a1 + 32)])
  {
    uint64_t v7 = *(void *)(*(void *)(a1 + 72) + 40);
    uint64_t v8 = *(void **)(a1 + 40);
    unsigned int v9 = 7;
    goto LABEL_15;
  }
  if ([&unk_26D83EDA0 containsObject:*(void *)(a1 + 32)])
  {
    uint64_t v7 = *(void *)(*(void *)(a1 + 72) + 40);
    uint64_t v8 = *(void **)(a1 + 40);
    unsigned int v9 = 6;
    goto LABEL_15;
  }
  if ([*(id *)(a1 + 32) isEqualToString:@"kMDItemEventHotelReservationForName"])
  {
    uint64_t v7 = *(void *)(*(void *)(a1 + 72) + 40);
    uint64_t v8 = *(void **)(a1 + 40);
    unsigned int v9 = 11;
    goto LABEL_15;
  }
  if ([*(id *)(a1 + 32) isEqualToString:@"kMDItemVendorName"])
  {
    uint64_t v7 = *(void *)(*(void *)(a1 + 72) + 40);
    uint64_t v8 = *(void **)(a1 + 40);
    unsigned int v9 = 9;
    goto LABEL_15;
  }
  if (([*(id *)(a1 + 32) isEqualToString:@"kMDItemDisplayName"] & 1) != 0
    || [*(id *)(a1 + 32) isEqualToString:@"kMDItemAlternateNames"])
  {
    uint64_t v7 = *(void *)(*(void *)(a1 + 72) + 40);
    uint64_t v8 = *(void **)(a1 + 40);
    unsigned int v9 = 8;
LABEL_15:
    char v10 = updateWithValues(v7, v8, v9);
    if ((v10 & 1) == 0) {
      return;
    }
    goto LABEL_16;
  }
  if (![*(id *)(a1 + 48) containsObject:*(void *)(a1 + 32)])
  {
    return;
  }
  int v17 = updateWithValues(*(void *)(*(void *)(a1 + 72) + 40), *(void **)(a1 + 40), 2u);
  if (v17)
  {
LABEL_16:
    Liveuint64_t Count = QPStringCacheGetLiveCount(*(void *)(*(void *)(a1 + 72) + 40));
    uint64_t v12 = *(void *)(a1 + 72);
    if (LiveCount > *(int *)(v12 + 136))
    {
      QPStringCachePrune(*(void *)(v12 + 40));
      uint64_t v12 = *(void *)(a1 + 72);
    }
    uint64_t v13 = *(NSObject **)(a1 + 56);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 3221225472;
    block[2] = ___ZL18queryForAttributesP26_SpotlightKnowledgeContextP8NSStringP7NSArrayS4_S4_S4_b_block_invoke_303;
    block[3] = &__block_descriptor_40_e5_v8__0l;
    void block[4] = v12;
    dispatch_sync(v13, block);
    if (sourceLogger(void)::token != -1) {
      dispatch_once(&sourceLogger(void)::token, &__block_literal_global_393);
    }
    os_signpost_id_t v14 = sourceLogger(void)::log;
    os_signpost_id_t v15 = os_signpost_id_generate((os_log_t)sourceLogger(void)::log);
    if (v15 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      os_signpost_id_t v16 = v15;
      if (os_signpost_enabled(v14))
      {
        *(_WORD *)id buf = 0;
        _os_signpost_emit_with_name_impl(&dword_224D85000, v14, OS_SIGNPOST_EVENT, v16, "QPStringCache updates", "", buf, 2u);
      }
    }
  }
}

uint64_t updateWithValues(uint64_t a1, void *a2, unsigned int a3)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  uint64_t v21 = [a2 countByEnumeratingWithState:&v33 objects:v39 count:16];
  if (v21)
  {
    unsigned int v18 = a3;
    int v5 = 0;
    uint64_t v20 = *(void *)v34;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v34 != v20) {
          objc_enumerationMutation(a2);
        }
        uint64_t v7 = *(__CFString **)(*((void *)&v33 + 1) + 8 * v6);
        objc_opt_class();
        uint64_t v22 = v6;
        if ((objc_opt_isKindOfClass() & 1) != 0
          && [(__CFString *)v7 length]
          && objc_msgSend((id)-[__CFString stringByTrimmingCharactersInSet:](v7, "stringByTrimmingCharactersInSet:", objc_msgSend(MEMORY[0x263F08708], "whitespaceCharacterSet")), "length"))
        {
          if (v18 == 2)
          {
            uint64_t v8 = (void *)[(__CFString *)v7 componentsSeparatedByString:@";"];
            long long v29 = 0u;
            long long v30 = 0u;
            long long v31 = 0u;
            long long v32 = 0u;
            id v23 = v8;
            uint64_t v9 = [v8 countByEnumeratingWithState:&v29 objects:v38 count:16];
            if (v9)
            {
              uint64_t v10 = v9;
              uint64_t v24 = *(void *)v30;
              do
              {
                for (uint64_t i = 0; i != v10; ++i)
                {
                  if (*(void *)v30 != v24) {
                    objc_enumerationMutation(v23);
                  }
                  uint64_t v12 = (void *)[*(id *)(*((void *)&v29 + 1) + 8 * i) componentsSeparatedByString:@"/"];
                  long long v25 = 0u;
                  long long v26 = 0u;
                  long long v27 = 0u;
                  long long v28 = 0u;
                  uint64_t v13 = [v12 countByEnumeratingWithState:&v25 objects:v37 count:16];
                  if (v13)
                  {
                    uint64_t v14 = v13;
                    uint64_t v15 = *(void *)v26;
                    do
                    {
                      for (uint64_t j = 0; j != v14; ++j)
                      {
                        if (*(void *)v26 != v15) {
                          objc_enumerationMutation(v12);
                        }
                        v5 |= addValue(a1, (__CFString *)objc_msgSend(*(id *)(*((void *)&v25 + 1) + 8 * j), "stringByTrimmingCharactersInSet:", objc_msgSend(MEMORY[0x263F08708], "whitespaceCharacterSet")), 1, 2);
                      }
                      uint64_t v14 = [v12 countByEnumeratingWithState:&v25 objects:v37 count:16];
                    }
                    while (v14);
                  }
                }
                uint64_t v10 = [v23 countByEnumeratingWithState:&v29 objects:v38 count:16];
              }
              while (v10);
            }
          }
          else
          {
            v5 |= addValue(a1, v7, 1, v18);
          }
        }
        uint64_t v6 = v22 + 1;
      }
      while (v22 + 1 != v21);
      uint64_t v21 = [a2 countByEnumeratingWithState:&v33 objects:v39 count:16];
    }
    while (v21);
  }
  else
  {
    LOBYTE(v5) = 0;
  }
  return v5 & 1;
}

uint64_t ___ZL18queryForAttributesP26_SpotlightKnowledgeContextP8NSStringP7NSArrayS4_S4_S4_b_block_invoke_303(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 66) = 1;
  return result;
}

uint64_t ___ZL18queryForAttributesP26_SpotlightKnowledgeContextP8NSStringP7NSArrayS4_S4_S4_b_block_invoke_306(uint64_t a1)
{
  Weauint64_t k = objc_loadWeak((id *)(a1 + 32));
  [Weak poll];
  return [Weak setGatherEndedHandler:0];
}

uint64_t ___ZL18queryForAttributesP26_SpotlightKnowledgeContextP8NSStringP7NSArrayS4_S4_S4_b_block_invoke_2_307(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = mach_absolute_time();
  if (QPTimingNanosecondsSinceAbsoluteTime(unsigned long long)::onceToken != -1) {
    dispatch_once(&QPTimingNanosecondsSinceAbsoluteTime(unsigned long long)::onceToken, &__block_literal_global_17);
  }
  uint64_t v5 = QPTimingNanosecondsSinceAbsoluteTime(unsigned long long)::sTimebaseInfo;
  unint64_t v4 = *(unsigned int *)algn_26AA70AE4;
  if (sourceLogger(void)::token != -1) {
    dispatch_once(&sourceLogger(void)::token, &__block_literal_global_393);
  }
  uint64_t v6 = sourceLogger(void)::log;
  if (os_log_type_enabled((os_log_t)sourceLogger(void)::log, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)id buf = 134217984;
    double v12 = (float)((float)((v3 - v2) * v5 / v4) / 1000000.0);
    _os_log_impl(&dword_224D85000, v6, OS_LOG_TYPE_DEFAULT, "queryForAttributes: query complete in %.1fms", buf, 0xCu);
  }
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = ___ZL18queryForAttributesP26_SpotlightKnowledgeContextP8NSStringP7NSArrayS4_S4_S4_b_block_invoke_308;
  block[3] = &unk_264706370;
  uint64_t v7 = *(NSObject **)(a1 + 32);
  void block[4] = *(void *)(a1 + 40);
  dispatch_async(v7, block);
  Weauint64_t k = objc_loadWeak((id *)(a1 + 48));
  [Weak setFoundAttributesHandler:0];
  [Weak setChangedAttributesHandler:0];
  [Weak setGatherEndedHandler:0];
  return [Weak setCompletionHandler:0];
}

void ___ZL18queryForAttributesP26_SpotlightKnowledgeContextP8NSStringP7NSArrayS4_S4_S4_b_block_invoke_308(uint64_t a1)
{
}

uint64_t ___Z36QPTimingNanosecondsSinceAbsoluteTimey_block_invoke_2()
{
  return mach_timebase_info((mach_timebase_info_t)&QPTimingNanosecondsSinceAbsoluteTime(unsigned long long)::sTimebaseInfo);
}

void ___ZL30extractCustomFieldsWithContextP26_SpotlightKnowledgeContextPK14__CFDictionaryS3__block_invoke(uint64_t a1)
{
  void block[5] = *MEMORY[0x263EF8340];
  CFDictionaryRef v2 = *(const __CFDictionary **)(a1 + 32);
  if (!v2)
  {
    uint64_t v15 = (CFDictionaryRef *)(a1 + 48);
    CFDictionaryRef v14 = *(const __CFDictionary **)(a1 + 48);
    if (!v14) {
      return;
    }
    BOOL v7 = 0;
LABEL_18:
    CFIndex Count = CFDictionaryGetCount(v14);
    MEMORY[0x270FA5388](Count);
    unsigned int v18 = (const void **)((char *)block - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
    if (v17 >= 0x200) {
      size_t v19 = 512;
    }
    else {
      size_t v19 = v17;
    }
    bzero((char *)block - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), v19);
    CFDictionaryGetKeysAndValues(*v15, v18, 0);
    if (Count < 1)
    {
      if (!v7) {
        return;
      }
    }
    else
    {
      do
      {
        uint64_t v20 = (__CFString *)*v18++;
        addValue(*(void *)(*(void *)(a1 + 40) + 40), v20, 1, 10);
        --Count;
      }
      while (Count);
    }
    goto LABEL_25;
  }
  CFIndex v3 = CFDictionaryGetCount(v2);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (const void **)((char *)block - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (v4 >= 0x200) {
    size_t v6 = 512;
  }
  else {
    size_t v6 = v4;
  }
  bzero((char *)block - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a1 + 32), v5, 0);
  BOOL v7 = v3 > 0;
  if (v3 >= 1)
  {
    CFIndex v8 = v3;
    do
    {
      CFStringRef v9 = (const __CFString *)*v5;
      uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 40);
      if (*v5) {
        BOOL v11 = v10 == 0;
      }
      else {
        BOOL v11 = 1;
      }
      if (!v11)
      {
        v24.CFIndex length = [(id)*v5 length];
        v24.CFIndex location = 0;
        double v12 = (const void *)copyStringInsertingSpacesBetweenIdeographCharacters(v9, v24);
        CFStringRef v13 = (const __CFString *)[(id)(id)CFMakeCollectable(v12) lowercaseString];
        QPStringCacheRemove(v10, v13, 0xAu);
      }
      ++v5;
      --v8;
    }
    while (v8);
  }
  uint64_t v15 = (CFDictionaryRef *)(a1 + 48);
  CFDictionaryRef v14 = *(const __CFDictionary **)(a1 + 48);
  if (v14) {
    goto LABEL_18;
  }
  if (v3 > 0)
  {
LABEL_25:
    QPStringCachePrune(*(void *)(*(void *)(a1 + 40) + 40));
    uint64_t v21 = *(void *)(a1 + 40);
    uint64_t v22 = *(NSObject **)(v21 + 88);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 3221225472;
    block[2] = ___ZL30extractCustomFieldsWithContextP26_SpotlightKnowledgeContextPK14__CFDictionaryS3__block_invoke_2;
    block[3] = &__block_descriptor_40_e5_v8__0l;
    void block[4] = v21;
    dispatch_sync(v22, block);
  }
}

uint64_t ___ZL30extractCustomFieldsWithContextP26_SpotlightKnowledgeContextPK14__CFDictionaryS3__block_invoke_2(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 66) = 1;
  return result;
}

uint64_t QPSpotlightKnowledgeContextAnnotationsAvailable(uint64_t a1)
{
  systemListenerGetLocale();
  if (!*(unsigned char *)(a1 + 64) || !*(void *)(a1 + 24)) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 65)) {
    return 1;
  }
  uint64_t result = SILexiconCacheIsAvailable();
  if (result) {
    return 1;
  }
  return result;
}

void QPSpotlightKnowledgeContextEnumerateTypesAndAnnotationsForString(uint64_t a1, CFStringRef theString, CFRange *a3, uint64_t a4, void *a5)
{
  uint64_t v36 = a4;
  v48[1] = *MEMORY[0x263EF8340];
  if (theString)
  {
    CFIndex Length = CFStringGetLength(theString);
    if (a5)
    {
      CFIndex v10 = Length;
      if (Length)
      {
        CFLocaleRef Locale = (const __CFLocale *)systemListenerGetLocale();
        if (QPSpotlightKnowledgeContextAnnotationsAvailable(a1))
        {
          CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(v10, 0x8000100u);
          v29[1] = v29;
          CFIndex v33 = MaximumSizeForEncoding + 1;
          MEMORY[0x270FA5388](MaximumSizeForEncoding);
          long long v35 = (UInt8 *)v29 - v13;
          v48[0] = 0;
          int v47 = 5;
          QPCFDictionaryGetInt32ValueIfPresent(*(void *)(a1 + 16), @"maxTokenCount", &v47);
          int v46 = 6;
          QPCFDictionaryGetInt32ValueIfPresent(*(void *)(a1 + 16), @"hashSize", &v46);
          uint64_t v42 = 0;
          int v43 = &v42;
          uint64_t v44 = 0x2020000000;
          char v45 = 0;
          if (v36 >= 1)
          {
            uint64_t v14 = 0;
            long long v34 = v41;
            long long v32 = v40;
            p_CFIndex length = &a3[-1].length;
            long long v30 = a5;
            do
            {
              p_CFIndex location = &a3[v14].location;
              CFIndex v17 = *p_location;
              CFIndex v16 = p_location[1];
              unsigned int v18 = QPAnnotationsCopyNormalizedString(Locale, theString, *p_location, v16);
              CFStringRef v19 = v18;
              if (v18)
              {
                v49.CFIndex length = CFStringGetLength(v18);
                v49.CFIndex location = 0;
                CFStringGetBytes(v19, v49, 0x8000100u, 0x2Du, 0, v35, v33, v48);
                v35[v48[0]] = 0;
              }
              v40[6] = MEMORY[0x263EF8330];
              v40[7] = 3221225472;
              v41[0] = ___ZL64QPSpotlightKnowledgeContextEnumerateTypesAndAnnotationsForStringP26_SpotlightKnowledgeContextPK10__CFStringPK7CFRangelPU13block_pointerFvS4_S3_PbESA__block_invoke;
              v41[1] = &unk_2647063E0;
              v41[4] = v17;
              v41[5] = v16;
              void v41[2] = &v42;
              void v41[3] = a5;
              if (!SILexiconCacheEnumerateAnnotations())
              {
                uint64_t v38 = MEMORY[0x263EF8330];
                uint64_t v39 = 3221225472;
                v40[0] = ___ZL64QPSpotlightKnowledgeContextEnumerateTypesAndAnnotationsForStringP26_SpotlightKnowledgeContextPK10__CFStringPK7CFRangelPU13block_pointerFvS4_S3_PbESA__block_invoke_2;
                v40[1] = &unk_2647063E0;
                int v40[4] = v17;
                v40[5] = v16;
                void v40[2] = &v42;
                void v40[3] = a5;
                SILexiconCacheEnumerateOVSAnnotationsInString();
              }
              if (v19) {
                CFRelease(v19);
              }
              if (*((unsigned char *)v43 + 24)) {
                break;
              }
              if (*(void *)(a1 + 24))
              {
                char v37 = 0;
                uint64_t v20 = v14 + v47 >= v36 ? v36 : v14 + v47;
                if (v20 > v14)
                {
                  uint64_t v21 = (char *)&p_length[2 * v20];
                  while (1)
                  {
                    unsigned int PayloadWithTokens = QPAnnotationsGetPayloadWithTokens(*(void *)(a1 + 24), v46, Locale, theString, a3, v14, v20 - v14, &v37);
                    --v20;
                    if (v37) {
                      break;
                    }
                    v21 -= 16;
                    if (v20 <= v14)
                    {
                      a5 = v30;
                      goto LABEL_27;
                    }
                  }
                  long long v25 = v21 - 8;
                  uint64_t v24 = *((void *)v21 - 1);
                  uint64_t v23 = *((void *)v25 + 1);
                  Identifier = (__CFString *)QPAnnotationsGetIdentifier(PayloadWithTokens);
                  CFIndex v27 = v24 - v17 + v23;
                  a5 = v30;
                  long long v28 = Identifier ? Identifier : @"SENSITIVE";
                  (*(void (**)(void, CFIndex, CFIndex, __CFString *, uint64_t *))(*v30 + 16))(*v30, v17, v27, v28, v43 + 3);
                  uint64_t v14 = v20;
LABEL_27:
                  if (*((unsigned char *)v43 + 24)) {
                    break;
                  }
                }
              }
              ++v14;
            }
            while (v14 < v36);
          }
          _Block_object_dispose(&v42, 8);
        }
      }
    }
  }
}

void sub_224E099B8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZL64QPSpotlightKnowledgeContextEnumerateTypesAndAnnotationsForStringP26_SpotlightKnowledgeContextPK10__CFStringPK7CFRangelPU13block_pointerFvS4_S3_PbESA__block_invoke(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, void, uint64_t, uint64_t))(**(void **)(a1 + 40) + 16))(**(void **)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), a2, *(void *)(*(void *)(a1 + 32) + 8) + 24);
}

uint64_t ___ZL64QPSpotlightKnowledgeContextEnumerateTypesAndAnnotationsForStringP26_SpotlightKnowledgeContextPK10__CFStringPK7CFRangelPU13block_pointerFvS4_S3_PbESA__block_invoke_2(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, void, uint64_t, uint64_t))(**(void **)(a1 + 40) + 16))(**(void **)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), a2, *(void *)(*(void *)(a1 + 32) + 8) + 24);
}

uint64_t ___ZL51QPSpotlightKnowledgeContextEnumerateStringsWithTypeP26_SpotlightKnowledgeContextU13block_pointerFvPK10__CFStringS3_PbE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(v1 + 40);
  v4[0] = MEMORY[0x263EF8330];
  v4[1] = 3221225472;
  void v4[2] = ___ZL51QPSpotlightKnowledgeContextEnumerateStringsWithTypeP26_SpotlightKnowledgeContextU13block_pointerFvPK10__CFStringS3_PbE_block_invoke_2;
  v4[3] = &unk_264706428;
  v4[4] = *(void *)(a1 + 32);
  v4[5] = v1;
  return QPStringCacheEnumerateStrings(v2, (uint64_t)v4);
}

void ___ZL51QPSpotlightKnowledgeContextEnumerateStringsWithTypeP26_SpotlightKnowledgeContextU13block_pointerFvPK10__CFStringS3_PbE_block_invoke_2(uint64_t a1, const void *a2, int a3)
{
  switch(a3)
  {
    case 2:
      uint64_t v5 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
      goto LABEL_13;
    case 3:
      (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
      CFRetain(a2);
      uint64_t v6 = *(void *)(a1 + 40);
      BOOL v7 = *(NSObject **)(v6 + 104);
      v11[0] = MEMORY[0x263EF8330];
      v11[1] = 3221225472;
      uint64_t v11[2] = ___ZL51QPSpotlightKnowledgeContextEnumerateStringsWithTypeP26_SpotlightKnowledgeContextU13block_pointerFvPK10__CFStringS3_PbE_block_invoke_3;
      void v11[3] = &__block_descriptor_48_e5_v8__0l;
      v11[4] = a2;
      void v11[5] = v6;
      CFIndex v8 = v11;
      goto LABEL_5;
    case 4:
      (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
      CFRetain(a2);
      uint64_t v9 = *(void *)(a1 + 40);
      BOOL v7 = *(NSObject **)(v9 + 104);
      v10[0] = MEMORY[0x263EF8330];
      v10[1] = 3221225472;
      id v10[2] = ___ZL51QPSpotlightKnowledgeContextEnumerateStringsWithTypeP26_SpotlightKnowledgeContextU13block_pointerFvPK10__CFStringS3_PbE_block_invoke_4;
      void v10[3] = &__block_descriptor_48_e5_v8__0l;
      v10[4] = a2;
      v10[5] = v9;
      CFIndex v8 = v10;
LABEL_5:
      dispatch_async(v7, v8);
      return;
    case 5:
      uint64_t v5 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
      goto LABEL_13;
    case 6:
      uint64_t v5 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
      goto LABEL_13;
    case 7:
      uint64_t v5 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
      goto LABEL_13;
    case 8:
      uint64_t v5 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
      goto LABEL_13;
    case 9:
      uint64_t v5 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
      goto LABEL_13;
    case 10:
      uint64_t v5 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
      goto LABEL_13;
    case 11:
      uint64_t v5 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
LABEL_13:
      v5();
      break;
    default:
      return;
  }
}

void ___ZL51QPSpotlightKnowledgeContextEnumerateStringsWithTypeP26_SpotlightKnowledgeContextU13block_pointerFvPK10__CFStringS3_PbE_block_invoke_3(uint64_t a1)
{
  QPStringCacheAdd(*(void *)(*(void *)(a1 + 40) + 48), (const __CFString *)[*(id *)(a1 + 32) lowercaseString], 3);
  uint64_t v2 = *(const void **)(a1 + 32);
  CFRelease(v2);
}

void ___ZL51QPSpotlightKnowledgeContextEnumerateStringsWithTypeP26_SpotlightKnowledgeContextU13block_pointerFvPK10__CFStringS3_PbE_block_invoke_4(uint64_t a1)
{
  QPStringCacheAdd(*(void *)(*(void *)(a1 + 40) + 48), (const __CFString *)[*(id *)(a1 + 32) lowercaseString], 4);
  uint64_t v2 = *(const void **)(a1 + 32);
  CFRelease(v2);
}

uint64_t __Block_byref_object_copy__357(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(void *)(result + 48) = v2;
  return result;
}

void __Block_byref_object_dispose__358(uint64_t a1)
{
}

BOOL ___ZL36QPSpotlightKnowledgeContextCopyTypesP26_SpotlightKnowledgeContextPK10__CFStringh_block_invoke(void *a1)
{
  BOOL result = QPStringCacheHasPrefixWithValue(*(void *)(a1[6] + 48), *(void *)(*(void *)(a1[5] + 8) + 48), 3);
  *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = result;
  if (!*(unsigned char *)(*(void *)(a1[4] + 8) + 24))
  {
    BOOL result = QPStringCacheHasPrefixWithValue(*(void *)(a1[6] + 48), *(void *)(*(void *)(a1[5] + 8) + 48), 4);
    *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = result;
  }
  return result;
}

uint64_t ___ZL19hasUpdatesForParserPv_block_invoke(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(unsigned char *)(*(void *)(result + 40) + 66);
  return result;
}

uint64_t ___ZL15didUpdateParserPv_block_invoke(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 66) = 0;
  return result;
}

uint64_t ___ZL42QPSpotlightKnowledgeContextUpdateResourcesP26_SpotlightKnowledgeContexthU13block_pointerFvP9__CFErrorE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = mach_absolute_time();
  if (QPTimingNanosecondsSinceAbsoluteTime(unsigned long long)::onceToken != -1) {
    dispatch_once(&QPTimingNanosecondsSinceAbsoluteTime(unsigned long long)::onceToken, &__block_literal_global_17);
  }
  float v6 = (float)((v5 - v4)
             * QPTimingNanosecondsSinceAbsoluteTime(unsigned long long)::sTimebaseInfo
             / *(unsigned int *)algn_26AA70AE4)
     / 1000000.0;
  if (a2)
  {
    if (sourceLogger(void)::token != -1) {
      dispatch_once(&sourceLogger(void)::token, &__block_literal_global_393);
    }
    BOOL v7 = sourceLogger(void)::log;
    if (os_log_type_enabled((os_log_t)sourceLogger(void)::log, OS_LOG_TYPE_ERROR)) {
      ___ZL42QPSpotlightKnowledgeContextUpdateResourcesP26_SpotlightKnowledgeContexthU13block_pointerFvP9__CFErrorE_block_invoke_cold_1(v7, v6);
    }
  }
  else
  {
    if (sourceLogger(void)::token != -1) {
      dispatch_once(&sourceLogger(void)::token, &__block_literal_global_393);
    }
    CFIndex v8 = sourceLogger(void)::log;
    if (os_log_type_enabled((os_log_t)sourceLogger(void)::log, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 134217984;
      double v11 = v6;
      _os_log_impl(&dword_224D85000, v8, OS_LOG_TYPE_DEFAULT, "loaded lexicon cache in %.1fms", (uint8_t *)&v10, 0xCu);
    }
  }
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a2);
  }
  return result;
}

uint64_t unloadSafetyResources(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 16);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t result = *(void *)(a1 + 24);
  if (result)
  {
    uint64_t result = SIDataMapRelease();
    *(void *)(a1 + 24) = 0;
  }
  return result;
}

uint64_t __Block_byref_object_copy__366(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(void *)(result + 48) = v2;
  return result;
}

void __Block_byref_object_dispose__367(uint64_t a1)
{
}

void ___ZL19loadSafetyResourcesP26_SpotlightKnowledgeContextb_block_invoke(uint64_t a1, CFURLRef url)
{
  CFStringRef PathComponent = CFURLCopyLastPathComponent(url);
  if (CFStringsAreEqual(PathComponent, @"config.plist"))
  {
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
    CFTypeRef v6 = CFRetain(url);
  }
  else
  {
    if (!CFStringsAreEqual(PathComponent, @"safety_resources.map")) {
      goto LABEL_6;
    }
    uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
    CFTypeRef v6 = CFRetain(url);
  }
  nlp::CFScopedPtr<__CFURL const*>::reset((const void **)(v5 + 48), v6);
LABEL_6:
  if (PathComponent) {
    CFRelease(PathComponent);
  }
}

void sub_224E0A114(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

os_log_t ___ZL12sourceLoggerv_block_invoke()
{
  uint64_t v0 = _nlpLoggingSubsystem();
  os_log_t result = os_log_create(v0, "QPSpotlightKnowledgeSource");
  sourceLogger(void)::log = (uint64_t)result;
  return result;
}

void ___ZL37QPSpotlightKnowledgeContextSetOptionsP26_SpotlightKnowledgeContextPK14__CFDictionary_block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (sourceLogger(void)::token != -1) {
      dispatch_once(&sourceLogger(void)::token, &__block_literal_global_393);
    }
    if (os_log_type_enabled((os_log_t)sourceLogger(void)::log, OS_LOG_TYPE_ERROR)) {
      __QPSpotlightKnowledgeSourceRefresh_block_invoke_cold_1();
    }
  }
  else
  {
    if (sourceLogger(void)::token != -1) {
      dispatch_once(&sourceLogger(void)::token, &__block_literal_global_393);
    }
    CFIndex v3 = sourceLogger(void)::log;
    if (os_log_type_enabled((os_log_t)sourceLogger(void)::log, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl(&dword_224D85000, v3, OS_LOG_TYPE_DEFAULT, "reloaded lexicon", v4, 2u);
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

CFStringRef QP::copyActionComponentWithModifier(const __CFString *a1, uint64_t a2, __int16 a3, uint64_t a4)
{
  BOOL v8 = CFStringContainsString(a1, @"Extracted");
  if ((unsigned __int16)(a3 - 5) > 3u) {
    CFStringRef v9 = @"_%@%@%@=%d";
  }
  else {
    CFStringRef v9 = off_264706560[(__int16)(a3 - 5)];
  }
  int v10 = @"[]";
  if (!v8) {
    int v10 = &stru_26D832058;
  }
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, v9, a1, a2, v10, a4);
}

void QP::enumerateQueryWithAction(__CFCalendar *a1, const __CFDate *a2, const __CFString *key, CFDictionaryRef theDict, int a5, unsigned int *a6, unsigned int *a7, uint64_t a8)
{
  if ((unsigned __int16)(a5 - 5) > 3u)
  {
    uint64_t v14 = @"=";
    if (theDict) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v14 = off_264706580[(__int16)(a5 - 5)];
    if (theDict)
    {
LABEL_3:
      int v122 = (void *)CFDictionaryGetValue(theDict, key);
      goto LABEL_6;
    }
  }
  int v122 = 0;
LABEL_6:
  if (CFStringContainsString(key, @"Extracted")) {
    uint64_t v15 = @"[]";
  }
  else {
    uint64_t v15 = &stru_26D832058;
  }
  CFAllocatorRef v16 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  CFMutableArrayRef v128 = Mutable;
  CFTypeRef cf = 0;
  uint64_t value = 0;
  if ((QP::DateComponents::isEmpty((QP::DateComponents *)a6) & 1) == 0)
  {
    if (QP::DateComponents::isEmpty((QP::DateComponents *)a7))
    {
      int v120 = a5 & 0xFFFE;
      if (a5 == 5 || a5 == 8 || v120 == 6)
      {
        CFMutableArrayRef v18 = CFArrayCreateMutable(v16, 0, MEMORY[0x263EFFF70]);
        uint64_t v125 = v18;
        uint64_t v19 = a6[12];
        unsigned int v20 = a6[8];
        if ((a6[11] & 0x80000000) != 0
          && (a6[10] & 0x80000000) != 0
          && (a6[9] & 0x80000000) != 0
          && (v19 & 0x80000000) != 0
          && (v20 & 0x80000000) != 0)
        {
          if ((a6[3] & 0x80000000) != 0)
          {
            uint64_t v99 = a6[4];
            uint64_t v98 = a6[5];
            if ((v99 & 0x80000000) != 0)
            {
              if ((v98 & 0x80000000) == 0)
              {
                CFStringRef v109 = CFStringCreateWithFormat(v16, 0, @"_%@Year%@%@%d", key, v15, v14, v98);
                nlp::CFScopedPtr<__CFString const*>::reset((const void **)&value, v109);
                CFArrayAppendValue(Mutable, value);
              }
LABEL_239:
              if (v122) {
                CFArrayAppendValue(Mutable, v122);
              }
              CFStringRef v117 = CFStringCreateByCombiningStrings(v16, Mutable, @" || ");
              CFStringRef v124 = v117;
              if (CFArrayGetCount(Mutable) < 2)
              {
                CFStringRef v118 = CFStringCreateWithFormat(v16, 0, @"%@", v117);
                CFTypeRef v119 = cf;
                if (!cf) {
                  goto LABEL_246;
                }
              }
              else
              {
                CFStringRef v118 = CFStringCreateWithFormat(v16, 0, @"(%@)", v117);
                CFTypeRef v119 = cf;
                if (!cf) {
                  goto LABEL_246;
                }
              }
              CFRelease(v119);
LABEL_246:
              CFTypeRef cf = v118;
              (*(void (**)(uint64_t, CFStringRef))(a8 + 16))(a8, v118);
              if (v117) {
                CFRelease(v117);
              }
LABEL_248:
              if (v18) {
                CFRelease(v18);
              }
              goto LABEL_250;
            }
            if ((v98 & 0x80000000) == 0)
            {
              if (a5 == 5 || a5 == 8) {
                CFStringRef v101 = CFStringCreateWithFormat(v16, 0, @"_%@Year%@<%d", key, v15, v98);
              }
              else {
                CFStringRef v101 = CFStringCreateWithFormat(v16, 0, @"_%@Year%@>%d", key, v15, v98);
              }
              nlp::CFScopedPtr<__CFString const*>::reset((const void **)&value, v101);
              CFArrayAppendValue(Mutable, value);
              uint64_t v99 = a6[4];
            }
            CFStringRef v102 = CFStringCreateWithFormat(v16, 0, @"_%@Month%@%@%d", key, v15, v14, v99);
            nlp::CFScopedPtr<__CFString const*>::reset((const void **)&value, v102);
            CFArrayAppendValue(v18, value);
            uint64_t v103 = a6[5];
            if ((v103 & 0x80000000) == 0)
            {
              CFStringRef v104 = CFStringCreateWithFormat(v16, 0, @"_%@Year%@=%d", key, v15, v103);
              nlp::CFScopedPtr<__CFString const*>::reset((const void **)&value, v104);
              CFArrayAppendValue(v18, value);
            }
            CFStringRef v124 = CFStringCreateByCombiningStrings(v16, v18, @" && ");
            if (CFArrayGetCount(v18) > 1) {
              goto LABEL_236;
            }
            goto LABEL_237;
          }
          CFAbsoluteTime AbsoluteTime = QP::DateComponents::getAbsoluteTime((QP::DateComponents *)a6, a1, a2);
          CFRange RangeOfUnit = CFCalendarGetRangeOfUnit(a1, 0x10uLL, 8uLL, AbsoluteTime);
          uint64_t v23 = (int)a6[3];
          BOOL v25 = a5 == 5 && RangeOfUnit.location == v23;
          BOOL v26 = RangeOfUnit.length == v23 && a5 == 6;
          if (v26 || v25)
          {
            CFStringRef v108 = CFStringCreateWithFormat(v16, 0, @"InRange(_%@Day%@,%ld,%ld)", key, v15, RangeOfUnit.location, RangeOfUnit.length);
            nlp::CFScopedPtr<__CFString const*>::reset((const void **)&value, v108);
            CFArrayAppendValue(Mutable, value);
            goto LABEL_239;
          }
          CFStringRef v27 = CFStringCreateWithFormat(v16, 0, @"_%@Day%@%@%d", key, v15, v14, v23);
          nlp::CFScopedPtr<__CFString const*>::reset((const void **)&value, v27);
          CFArrayAppendValue(v18, value);
          uint64_t v28 = a6[5];
          if ((v28 & 0x80000000) == 0)
          {
            CFStringRef v29 = CFStringCreateWithFormat(v16, 0, @"_%@Year%@=%d", key, v15, v28);
            nlp::CFScopedPtr<__CFString const*>::reset((const void **)&value, v29);
            CFArrayAppendValue(v18, value);
            uint64_t v30 = a6[4];
            if ((v30 & 0x80000000) == 0)
            {
              CFStringRef v31 = CFStringCreateWithFormat(v16, 0, @"_%@Month%@=%d", key, v15, v30);
              nlp::CFScopedPtr<__CFString const*>::reset((const void **)&value, v31);
              CFArrayAppendValue(v18, value);
            }
LABEL_235:
            CFStringRef v124 = CFStringCreateByCombiningStrings(v16, v18, @" && ");
            if (CFArrayGetCount(v18) > 1)
            {
LABEL_236:
              CFStringRef v116 = CFStringCreateWithFormat(v16, 0, @"(%@)", v124);
LABEL_238:
              nlp::CFScopedPtr<__CFString const*>::reset(&cf, v116);
              CFArrayAppendValue(Mutable, cf);
              nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v124, 0);
              goto LABEL_239;
            }
LABEL_237:
            CFStringRef v116 = CFStringCreateWithFormat(v16, 0, @"%@", v124);
            goto LABEL_238;
          }
          uint64_t v110 = a6[4];
          if ((v110 & 0x80000000) != 0) {
            goto LABEL_235;
          }
          CFStringRef v111 = CFStringCreateWithFormat(v16, 0, @"_%@Month%@=%d", key, v15, v110);
          nlp::CFScopedPtr<__CFString const*>::reset((const void **)&value, v111);
          CFArrayAppendValue(v18, value);
          CFAbsoluteTime v112 = QP::DateComponents::getAbsoluteTime((QP::DateComponents *)a6, a1, a2);
          CFRange v113 = CFCalendarGetRangeOfUnit(a1, 8uLL, 4uLL, v112);
          if ((a5 == 8 || a5 == 5) && (CFIndex v114 = (int)a6[4] - 1, v113.location <= v114))
          {
            if (v113.location != v114)
            {
              CFStringRef v115 = CFStringCreateWithFormat(v16, 0, @"InRange(_%@Month%@,%ld,%d)", key, v15, v113.location, v114);
              goto LABEL_233;
            }
          }
          else
          {
            if (v120 != 6) {
              goto LABEL_234;
            }
            CFIndex v114 = (int)a6[4] + 1;
            if (v113.length < v114) {
              goto LABEL_234;
            }
            if (v113.length != v114)
            {
              CFStringRef v115 = CFStringCreateWithFormat(v16, 0, @"InRange(_%@Month%@,%d,%ld)", key, v15, (int)a6[4] + 1, v113.length);
LABEL_233:
              nlp::CFScopedPtr<__CFString const*>::reset((const void **)&value, v115);
LABEL_234:
              CFArrayAppendValue(Mutable, value);
              goto LABEL_235;
            }
          }
          CFStringRef v115 = CFStringCreateWithFormat(v16, 0, @"_%@Month%@=%d", key, v15, v114);
          goto LABEL_233;
        }
        if ((v20 & 0x80000000) != 0)
        {
          if ((v19 & 0x80000000) == 0)
          {
            uint64_t value = (void *)CFStringCreateWithFormat(v16, 0, @"_%@Year%@%@%d", key, v15, v14, v19);
            CFArrayAppendValue(v18, value);
          }
          goto LABEL_248;
        }
        CFAbsoluteTime v77 = QP::DateComponents::getAbsoluteTime((QP::DateComponents *)a6, a1, a2);
        CFRange v78 = CFCalendarGetRangeOfUnit(a1, 0x200uLL, 0x2000uLL, v77);
        uint64_t v79 = (int)a6[8];
        BOOL v81 = a5 == 5 && v78.location == v79;
        BOOL v82 = v78.length == v79 && a5 == 6;
        if (v82 || v81)
        {
          uint64_t value = (void *)CFStringCreateWithFormat(v16, 0, @"InRange(_%@%@Weekday,%ld,%ld)", key, v15, v78.location, v78.length);
          CFArrayAppendValue(Mutable, value);
        }
        else
        {
          uint64_t value = (void *)CFStringCreateWithFormat(v16, 0, @"_%@Weekday%@%@%d", key, v15, v14, v79);
          CFArrayAppendValue(v18, value);
          uint64_t v83 = a6[11];
          if ((v83 & 0x80000000) == 0)
          {
            CFStringRef v84 = CFStringCreateWithFormat(v16, 0, @"_%@WeekOfYear%@=%d", key, v15, v83);
            nlp::CFScopedPtr<__CFString const*>::reset((const void **)&value, v84);
            CFArrayAppendValue(v18, value);
          }
          uint64_t v85 = a6[12];
          if ((v85 & 0x80000000) == 0)
          {
            CFStringRef v86 = CFStringCreateWithFormat(v16, 0, @"_%@Year%@=%d", key, v15, v85);
            nlp::CFScopedPtr<__CFString const*>::reset((const void **)&value, v86);
            CFArrayAppendValue(v18, value);
          }
          CFStringRef v87 = CFStringCreateByCombiningStrings(v16, v18, @" && ");
          CFStringRef v124 = v87;
          if (CFArrayGetCount(v18) <= 1) {
            CFStringRef v88 = CFStringCreateWithFormat(v16, 0, @"%@", v87);
          }
          else {
            CFStringRef v88 = CFStringCreateWithFormat(v16, 0, @"(%@)", v87);
          }
          nlp::CFScopedPtr<__CFString const*>::reset(&cf, v88);
          CFArrayAppendValue(Mutable, cf);
          uint64_t v89 = a6[11];
          if ((v89 & 0x80000000) == 0)
          {
            if (a5 == 5 || a5 == 8)
            {
              CFStringRef v91 = @"_%@Year%@<%d";
              CFStringRef v92 = CFStringCreateWithFormat(v16, 0, @"_%@Year%@<%d", key, v15, v89);
            }
            else
            {
              CFStringRef v91 = @"_%@Year%@>%d";
              CFStringRef v92 = CFStringCreateWithFormat(v16, 0, @"_%@Year%@>%d", key, v15, v89);
            }
            nlp::CFScopedPtr<__CFString const*>::reset((const void **)&value, v92);
            CFArrayAppendValue(v18, value);
            if ((a6[12] & 0x80000000) == 0)
            {
              CFStringRef v93 = CFStringCreateWithFormat(v16, 0, v91, key, v15, a6[11]);
              nlp::CFScopedPtr<__CFString const*>::reset((const void **)&value, v93);
              CFArrayAppendValue(v18, value);
            }
            CFStringRef v123 = CFStringCreateByCombiningStrings(v16, v18, @" && ");
            if (CFArrayGetCount(v18) <= 1) {
              CFStringRef v94 = CFStringCreateWithFormat(v16, 0, @"%@", v123);
            }
            else {
              CFStringRef v94 = CFStringCreateWithFormat(v16, 0, @"(%@)", v123);
            }
            nlp::CFScopedPtr<__CFString const*>::reset(&cf, v94);
            CFArrayAppendValue(Mutable, cf);
            nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v123, 0);
          }
          if ((a6[12] & 0x80000000) == 0)
          {
            if (a5 == 5 || a5 == 8) {
              CFStringRef v96 = CFStringCreateWithFormat(v16, 0, @"_%@Year%@<%d", key, v15, a6[11]);
            }
            else {
              CFStringRef v96 = CFStringCreateWithFormat(v16, 0, @"_%@Year%@>%d", key, v15, a6[11]);
            }
            nlp::CFScopedPtr<__CFString const*>::reset((const void **)&value, v96);
            CFArrayAppendValue(v18, value);
            CFStringRef v123 = CFStringCreateByCombiningStrings(v16, v18, @" && ");
            if (CFArrayGetCount(v18) <= 1) {
              CFStringRef v97 = CFStringCreateWithFormat(v16, 0, @"%@", v123);
            }
            else {
              CFStringRef v97 = CFStringCreateWithFormat(v16, 0, @"(%@)", v123);
            }
            nlp::CFScopedPtr<__CFString const*>::reset(&cf, v97);
            CFArrayAppendValue(Mutable, cf);
            nlp::CFScopedPtr<__CFString const*>::reset((const void **)&v123, 0);
          }
          if (v87) {
            CFRelease(v87);
          }
        }
        if (v122) {
          CFArrayAppendValue(Mutable, v122);
        }
        CFStringRef v105 = CFStringCreateByCombiningStrings(v16, Mutable, @" && ");
        CFStringRef v124 = v105;
        if (CFArrayGetCount(Mutable) < 2)
        {
          CFStringRef v106 = CFStringCreateWithFormat(v16, 0, @"%@", v105);
          CFTypeRef v107 = cf;
          if (!cf) {
            goto LABEL_217;
          }
        }
        else
        {
          CFStringRef v106 = CFStringCreateWithFormat(v16, 0, @"(%@)", v105);
          CFTypeRef v107 = cf;
          if (!cf) {
            goto LABEL_217;
          }
        }
        CFRelease(v107);
LABEL_217:
        CFTypeRef cf = v106;
        (*(void (**)(uint64_t, CFStringRef))(a8 + 16))(a8, v106);
        if (v105) {
          CFRelease(v105);
        }
        goto LABEL_248;
      }
    }
  }
  uint64_t v32 = *a6;
  uint64_t v33 = *a7;
  if ((v32 & 0x80000000) != 0)
  {
    if ((v33 & 0x80000000) != 0) {
      goto LABEL_41;
    }
    long long v34 = (__CFString *)QP::copyActionComponentWithModifier(key, @"Second", a5, *a7);
  }
  else if ((v33 & 0x80000000) != 0)
  {
    long long v34 = (__CFString *)QP::copyActionComponentWithModifier(key, @"Second", a5, v32);
  }
  else
  {
    long long v34 = (__CFString *)CFStringCreateWithFormat(v16, 0, @"InRange(_%@%@%@, %d, %d)", key, @"Second", v15, *a6, v33);
  }
  uint64_t value = v34;
  CFArrayAppendValue(Mutable, v34);
LABEL_41:
  uint64_t v35 = a6[1];
  uint64_t v36 = a7[1];
  if ((v35 & 0x80000000) != 0)
  {
    if ((v36 & 0x80000000) != 0) {
      goto LABEL_51;
    }
    char v37 = (__CFString *)QP::copyActionComponentWithModifier(key, @"Minute", a5, a7[1]);
    uint64_t v38 = value;
    if (value) {
      goto LABEL_49;
    }
  }
  else if ((v36 & 0x80000000) != 0)
  {
    char v37 = (__CFString *)QP::copyActionComponentWithModifier(key, @"Minute", a5, v35);
    uint64_t v38 = value;
    if (value) {
LABEL_49:
    }
      CFRelease(v38);
  }
  else
  {
    char v37 = (__CFString *)CFStringCreateWithFormat(v16, 0, @"InRange(_%@%@%@, %d, %d)", key, @"Minute", v15, a6[1], v36);
    uint64_t v38 = value;
    if (value) {
      goto LABEL_49;
    }
  }
  uint64_t value = v37;
  CFArrayAppendValue(Mutable, v37);
LABEL_51:
  uint64_t v39 = a6[2];
  uint64_t v40 = a7[2];
  if ((v39 & 0x80000000) != 0)
  {
    if ((v40 & 0x80000000) != 0) {
      goto LABEL_61;
    }
    uint64_t v41 = (__CFString *)QP::copyActionComponentWithModifier(key, @"Hour", a5, a7[2]);
    uint64_t v42 = value;
    if (value) {
      goto LABEL_59;
    }
  }
  else if ((v40 & 0x80000000) != 0)
  {
    uint64_t v41 = (__CFString *)QP::copyActionComponentWithModifier(key, @"Hour", a5, v39);
    uint64_t v42 = value;
    if (value) {
LABEL_59:
    }
      CFRelease(v42);
  }
  else
  {
    uint64_t v41 = (__CFString *)CFStringCreateWithFormat(v16, 0, @"InRange(_%@%@%@, %d, %d)", key, @"Hour", v15, a6[2], v40);
    uint64_t v42 = value;
    if (value) {
      goto LABEL_59;
    }
  }
  uint64_t value = v41;
  CFArrayAppendValue(Mutable, v41);
LABEL_61:
  uint64_t v43 = a6[3];
  uint64_t v44 = a7[3];
  if ((v43 & 0x80000000) != 0)
  {
    if ((v44 & 0x80000000) != 0) {
      goto LABEL_71;
    }
    char v45 = (__CFString *)QP::copyActionComponentWithModifier(key, @"Day", a5, a7[3]);
    int v46 = value;
    if (value) {
      goto LABEL_69;
    }
  }
  else if ((v44 & 0x80000000) != 0)
  {
    char v45 = (__CFString *)QP::copyActionComponentWithModifier(key, @"Day", a5, v43);
    int v46 = value;
    if (value) {
LABEL_69:
    }
      CFRelease(v46);
  }
  else
  {
    char v45 = (__CFString *)CFStringCreateWithFormat(v16, 0, @"InRange(_%@%@%@, %d, %d)", key, @"Day", v15, a6[3], v44);
    int v46 = value;
    if (value) {
      goto LABEL_69;
    }
  }
  uint64_t value = v45;
  CFArrayAppendValue(Mutable, v45);
LABEL_71:
  uint64_t v47 = a6[4];
  uint64_t v48 = a7[4];
  if ((v47 & 0x80000000) != 0)
  {
    if ((v48 & 0x80000000) != 0) {
      goto LABEL_81;
    }
    CFRange v49 = (__CFString *)QP::copyActionComponentWithModifier(key, @"Month", a5, a7[4]);
    uint64_t v50 = value;
    if (value) {
      goto LABEL_79;
    }
  }
  else if ((v48 & 0x80000000) != 0)
  {
    CFRange v49 = (__CFString *)QP::copyActionComponentWithModifier(key, @"Month", a5, v47);
    uint64_t v50 = value;
    if (value) {
LABEL_79:
    }
      CFRelease(v50);
  }
  else
  {
    CFRange v49 = (__CFString *)CFStringCreateWithFormat(v16, 0, @"InRange(_%@%@%@, %d, %d)", key, @"Month", v15, a6[4], v48);
    uint64_t v50 = value;
    if (value) {
      goto LABEL_79;
    }
  }
  uint64_t value = v49;
  CFArrayAppendValue(Mutable, v49);
LABEL_81:
  uint64_t v51 = a6[5];
  uint64_t v52 = a7[5];
  if ((v51 & 0x80000000) != 0)
  {
    if ((v52 & 0x80000000) != 0) {
      goto LABEL_91;
    }
    BOOL v53 = (__CFString *)QP::copyActionComponentWithModifier(key, @"Year", a5, a7[5]);
    char v54 = value;
    if (value) {
      goto LABEL_89;
    }
  }
  else if ((v52 & 0x80000000) != 0)
  {
    BOOL v53 = (__CFString *)QP::copyActionComponentWithModifier(key, @"Year", a5, v51);
    char v54 = value;
    if (value) {
LABEL_89:
    }
      CFRelease(v54);
  }
  else
  {
    BOOL v53 = (__CFString *)CFStringCreateWithFormat(v16, 0, @"InRange(_%@%@%@, %d, %d)", key, @"Year", v15, a6[5], v52);
    char v54 = value;
    if (value) {
      goto LABEL_89;
    }
  }
  uint64_t value = v53;
  CFArrayAppendValue(Mutable, v53);
LABEL_91:
  uint64_t v55 = a6[8];
  uint64_t v56 = a7[8];
  if ((v55 & 0x80000000) != 0)
  {
    if ((v56 & 0x80000000) != 0) {
      goto LABEL_101;
    }
    unint64_t v57 = (__CFString *)QP::copyActionComponentWithModifier(key, @"Weekday", a5, a7[8]);
    unsigned int v58 = value;
    if (value) {
      goto LABEL_99;
    }
  }
  else if ((v56 & 0x80000000) != 0)
  {
    unint64_t v57 = (__CFString *)QP::copyActionComponentWithModifier(key, @"Weekday", a5, v55);
    unsigned int v58 = value;
    if (value) {
LABEL_99:
    }
      CFRelease(v58);
  }
  else
  {
    unint64_t v57 = (__CFString *)CFStringCreateWithFormat(v16, 0, @"InRange(_%@%@%@, %d, %d)", key, @"Weekday", v15, a6[8], v56);
    unsigned int v58 = value;
    if (value) {
      goto LABEL_99;
    }
  }
  uint64_t value = v57;
  CFArrayAppendValue(Mutable, v57);
LABEL_101:
  uint64_t v59 = a6[10];
  uint64_t v60 = a7[10];
  if ((v59 & 0x80000000) != 0)
  {
    if ((v60 & 0x80000000) != 0) {
      goto LABEL_111;
    }
    unint64_t v61 = (__CFString *)QP::copyActionComponentWithModifier(key, @"WeekOfMonth", a5, a7[10]);
    double v62 = value;
    if (value) {
      goto LABEL_109;
    }
  }
  else if ((v60 & 0x80000000) != 0)
  {
    unint64_t v61 = (__CFString *)QP::copyActionComponentWithModifier(key, @"WeekOfMonth", a5, v59);
    double v62 = value;
    if (value) {
LABEL_109:
    }
      CFRelease(v62);
  }
  else
  {
    unint64_t v61 = (__CFString *)CFStringCreateWithFormat(v16, 0, @"InRange(_%@%@%@, %d, %d)", key, @"WeekOfMonth", v15, a6[10], v60);
    double v62 = value;
    if (value) {
      goto LABEL_109;
    }
  }
  uint64_t value = v61;
  CFArrayAppendValue(Mutable, v61);
LABEL_111:
  uint64_t v63 = a6[11];
  uint64_t v64 = a7[11];
  if ((v63 & 0x80000000) != 0)
  {
    if ((v64 & 0x80000000) != 0) {
      goto LABEL_121;
    }
    unsigned int v65 = (__CFString *)QP::copyActionComponentWithModifier(key, @"WeekOfYear", a5, a7[11]);
    unint64_t v66 = value;
    if (value) {
      goto LABEL_119;
    }
  }
  else if ((v64 & 0x80000000) != 0)
  {
    unsigned int v65 = (__CFString *)QP::copyActionComponentWithModifier(key, @"WeekOfYear", a5, v63);
    unint64_t v66 = value;
    if (value) {
LABEL_119:
    }
      CFRelease(v66);
  }
  else
  {
    unsigned int v65 = (__CFString *)CFStringCreateWithFormat(v16, 0, @"InRange(_%@%@%@, %d, %d)", key, @"WeekOfYear", v15, a6[11], v64);
    unint64_t v66 = value;
    if (value) {
      goto LABEL_119;
    }
  }
  uint64_t value = v65;
  CFArrayAppendValue(Mutable, v65);
LABEL_121:
  uint64_t v67 = a6[12];
  uint64_t v68 = a7[12];
  if ((v67 & 0x80000000) != 0)
  {
    if ((v68 & 0x80000000) != 0) {
      goto LABEL_131;
    }
    uint64_t v69 = (__CFString *)QP::copyActionComponentWithModifier(key, @"Year", a5, a7[12]);
    unint64_t v70 = value;
    if (value) {
      goto LABEL_129;
    }
  }
  else if ((v68 & 0x80000000) != 0)
  {
    uint64_t v69 = (__CFString *)QP::copyActionComponentWithModifier(key, @"Year", a5, v67);
    unint64_t v70 = value;
    if (value) {
LABEL_129:
    }
      CFRelease(v70);
  }
  else
  {
    uint64_t v69 = (__CFString *)CFStringCreateWithFormat(v16, 0, @"InRange(_%@%@%@, %d, %d)", key, @"Year", v15, a6[12], v68);
    unint64_t v70 = value;
    if (value) {
      goto LABEL_129;
    }
  }
  uint64_t value = v69;
  CFArrayAppendValue(Mutable, v69);
LABEL_131:
  uint64_t v71 = a6[9];
  uint64_t v72 = a7[9];
  if ((v71 & 0x80000000) == 0)
  {
    if ((v72 & 0x80000000) != 0)
    {
      double v73 = (__CFString *)QP::copyActionComponentWithModifier(key, @"WeekdayOrdinal", a5, v71);
      double v74 = value;
      if (value) {
LABEL_139:
      }
        CFRelease(v74);
    }
    else
    {
      double v73 = (__CFString *)CFStringCreateWithFormat(v16, 0, @"InRange(_%@%@%@, %d, %d)", key, @"WeekdayOrdinal", v15, a6[9], v72);
      double v74 = value;
      if (value) {
        goto LABEL_139;
      }
    }
LABEL_140:
    uint64_t value = v73;
    CFArrayAppendValue(Mutable, v73);
    goto LABEL_141;
  }
  if ((v72 & 0x80000000) == 0)
  {
    double v73 = (__CFString *)QP::copyActionComponentWithModifier(key, @"WeekdayOrdinal", a5, a7[9]);
    double v74 = value;
    if (value) {
      goto LABEL_139;
    }
    goto LABEL_140;
  }
LABEL_141:
  if (v122) {
    CFArrayAppendValue(Mutable, v122);
  }
  CFStringRef v75 = CFStringCreateByCombiningStrings(v16, Mutable, @" && ");
  uint64_t v125 = (void *)v75;
  if (CFArrayGetCount(Mutable) < 2) {
    CFStringRef v76 = CFStringCreateWithFormat(v16, 0, @"%@", v75);
  }
  else {
    CFStringRef v76 = CFStringCreateWithFormat(v16, 0, @"(%@)", v75);
  }
  CFTypeRef cf = v76;
  (*(void (**)(uint64_t, CFStringRef))(a8 + 16))(a8, v76);
  if (v75) {
    CFRelease(v75);
  }
LABEL_250:
  if (cf) {
    CFRelease(cf);
  }
  if (value) {
    CFRelease(value);
  }
  if (v128) {
    CFRelease(v128);
  }
}

void sub_224E0B648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va3, a10);
  va_start(va2, a10);
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v12 = va_arg(va1, const void *);
  va_copy(va2, va1);
  uint64_t v14 = va_arg(va2, const void *);
  va_copy(va3, va2);
  CFAllocatorRef v16 = va_arg(va3, const void *);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  nlp::CFScopedPtr<__CFArray *>::reset((const void **)va1, 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va2, 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va3, 0);
  nlp::CFScopedPtr<__CFArray *>::reset((const void **)(v10 - 88), 0);
  _Unwind_Resume(a1);
}

BOOL QP::Formatter::loadFormatterResource(QP::DateFormatter **this, const __CFURL *a2)
{
  return QP::DateFormatter::loadDateFormatterResource(this[5], a2);
}

void QP::Formatter::clearResources(QP::Formatter *this)
{
  uint64_t v1 = (const void **)*((void *)this + 5);
  if (v1) {
    QP::DateFormatter::clearResources(v1);
  }
}

void QP::Formatter::update(QP::Formatter *this)
{
  uint64_t v1 = (const void **)*((void *)this + 5);
  if (v1) {
    QP::DateFormatter::update(v1);
  }
}

void QP::Formatter::clear(const void **this)
{
  uint64_t v2 = this + 7;
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  uint64_t v4 = (const CFDictionaryKeyCallBacks *)MEMORY[0x263EFFF88];
  uint64_t v5 = (const CFDictionaryValueCallBacks *)MEMORY[0x263EFFF90];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  nlp::CFScopedPtr<__CFDictionary *>::reset(v2, Mutable);
  CFMutableDictionaryRef v7 = CFDictionaryCreateMutable(v3, 0, v4, v5);
  nlp::CFScopedPtr<__CFDictionary *>::reset(this + 8, v7);
  BOOL v8 = this + 9;
  CFMutableAttributedStringRef v9 = CFAttributedStringCreateMutable(v3, 0);
  nlp::CFScopedPtr<__CFAttributedString *>::reset(this + 9, v9);
  uint64_t v10 = (__CFDictionary *)this[7];
  if (v10 && *v8) {
    CFDictionarySetValue(v10, kQPParseResultAttributedParseKey, *v8);
  }
  this[10] = 0;
}

void QP::Formatter::setParseAttribute(QP::Formatter *this, CFStringRef attrName, CFTypeRef value, CFRange range)
{
  if (!*(unsigned char *)(*((void *)this + 1) + 22) && value && attrName)
  {
    uint64_t v4 = (__CFAttributedString *)*((void *)this + 9);
    if (v4) {
      CFAttributedStringSetAttribute(v4, range, attrName, value);
    }
  }
}

void QP::Formatter::removeParseAttribute(QP::Formatter *this, CFStringRef attrName, CFRange range)
{
  if (attrName)
  {
    CFAllocatorRef v3 = (__CFAttributedString *)*((void *)this + 9);
    if (v3) {
      CFAttributedStringRemoveAttribute(v3, range, attrName);
    }
  }
}

CFTypeRef QP::Formatter::getParseAttribute(QP::Formatter *this, CFStringRef attrName, CFRange a3)
{
  CFTypeRef result = 0;
  if (attrName)
  {
    CFAttributedStringRef v5 = (const __CFAttributedString *)*((void *)this + 9);
    if (v5)
    {
      CFIndex length = a3.length;
      CFIndex location = a3.location;
      CFTypeRef result = CFAttributedStringGetAttribute(v5, a3.location, attrName, &v9);
      if (length != v9.length || location != v9.location) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t QP::Formatter::isValid()
{
  return 1;
}

uint64_t QP::Formatter::setCompletion(const void **a1)
{
  return 1;
}