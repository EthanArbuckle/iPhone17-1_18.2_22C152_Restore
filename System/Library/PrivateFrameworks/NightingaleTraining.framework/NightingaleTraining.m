BOOL Bool.intValue.getter(char a1)
{
  return (a1 & 1) != 0;
}

uint64_t Array<A>.sum.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Bool]);
  lazy protocol witness table accessor for type [Bool] and conformance [A]();
  Sequence.reduce<A>(_:_:)();
  return v1;
}

BOOL closure #1 in Array<A>.sum.getter@<W0>(uint64_t *a1@<X0>, unsigned char *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = *a1;
  BOOL result = Bool.intValue.getter(*a2 & 1);
  if (__OFADD__(v6, result)) {
    __break(1u);
  }
  else {
    *a3 = v6 + result;
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t v4 = *a1;
  if (*a1 < 0)
  {
    uint64_t TypeByMangledNameInContext2 = swift_getTypeByMangledNameInContext2();
    *a1 = TypeByMangledNameInContext2;
    return TypeByMangledNameInContext2;
  }
  return v4;
}

unint64_t lazy protocol witness table accessor for type [Bool] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [Bool] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Bool] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Bool]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [Bool] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t v4 = *a1;
  if (*a1 < 0)
  {
    uint64_t TypeByMangledNameInContextInMetadataState2 = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = TypeByMangledNameInContextInMetadataState2;
    return TypeByMangledNameInContextInMetadataState2;
  }
  return v4;
}

uint64_t Comparable.clamp(to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v18 = a4;
  uint64_t v15 = a1;
  uint64_t v22 = a2;
  uint64_t v19 = a3;
  uint64_t v26 = 0;
  uint64_t v25 = 0;
  uint64_t v27 = a2;
  v13 = *(void **)(a2 - 8);
  uint64_t v14 = a2 - 8;
  uint64_t v11 = v13[8];
  unint64_t v10 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](a3);
  v20 = (char *)&v9 - v10;
  unint64_t v12 = v10;
  uint64_t v5 = MEMORY[0x270FA5388]((char *)&v9 - v10);
  v21 = (char *)&v9 - v12;
  uint64_t v26 = v6;
  uint64_t v25 = v4;
  v17 = (void (*)(uint64_t))v13[2];
  v16 = v13 + 2;
  v17(v5);
  max<A>(_:_:)();
  v24 = (void (*)(char *, uint64_t))v13[1];
  v23 = v13 + 1;
  v24(v20, v22);
  uint64_t v7 = type metadata accessor for ClosedRange();
  ((void (*)(char *, uint64_t, uint64_t))v17)(v20, v15 + *(int *)(v7 + 36), v22);
  min<A>(_:_:)();
  v24(v20, v22);
  return ((uint64_t (*)(char *, uint64_t))v24)(v21, v22);
}

uint64_t BinaryFloatingPoint.clamp(to:nonFiniteValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = a1;
  uint64_t v22 = a2;
  uint64_t v23 = a3;
  uint64_t v21 = a4;
  uint64_t v45 = 0;
  uint64_t v44 = 0;
  uint64_t v43 = 0;
  uint64_t v46 = a3;
  uint64_t v24 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = v24 - 8;
  unint64_t v27 = (*(void *)(v25 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v5 = MEMORY[0x270FA5388](v23);
  v28 = (char *)&v14 - v27;
  v29 = *(void **)(v5 - 8);
  uint64_t v30 = v5 - 8;
  uint64_t v36 = v29[8];
  unint64_t v31 = (v36 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  v32 = (char *)&v14 - v31;
  unint64_t v33 = (v36 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v7 = MEMORY[0x270FA5388](v6);
  v34 = (char *)&v14 - v33;
  unint64_t v35 = (v36 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v8 = MEMORY[0x270FA5388](v7);
  v37 = (char *)&v14 - v35;
  unint64_t v38 = (v36 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v8);
  v39 = (char *)&v14 - v38;
  uint64_t v45 = v9;
  uint64_t v44 = v10;
  uint64_t v43 = v4;
  uint64_t v40 = *(void *)(v11 + 16);
  if (dispatch thunk of FloatingPoint.isFinite.getter())
  {
    (*(void (**)(char *, void, uint64_t))(v25 + 104))(v28, *MEMORY[0x263F8E210], v24);
    dispatch thunk of FloatingPoint.rounded(_:)();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v28, v24);
    uint64_t v15 = (void (*)(char *, uint64_t, uint64_t))v29[2];
    uint64_t v14 = v29 + 2;
    v15(v32, v20, v23);
    uint64_t v16 = *(void *)(*(void *)(v40 + 24) + 8);
    max<A>(_:_:)();
    uint64_t v18 = (void (*)(char *, uint64_t))v29[1];
    v17 = v29 + 1;
    v18(v32, v23);
    v18(v34, v23);
    uint64_t v12 = type metadata accessor for ClosedRange();
    v15(v34, v20 + *(int *)(v12 + 36), v23);
    min<A>(_:_:)();
    v18(v34, v23);
    v18(v37, v23);
    lazy protocol witness table accessor for type Int and conformance Int();
    FixedWidthInteger.init<A>(_:)();
    return v41;
  }
  else
  {
    ((void (*)(char *, uint64_t, uint64_t))v29[2])(v39, v22, v23);
    lazy protocol witness table accessor for type Int and conformance Int();
    FixedWidthInteger.init<A>(_:)();
    return v42;
  }
}

unint64_t lazy protocol witness table accessor for type Int and conformance Int()
{
  uint64_t v2 = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
    return WitnessTable;
  }
  return v2;
}

uint64_t static HIDPFLUtils.getDayAndHourInGMT(date:)(uint64_t a1)
{
  uint64_t v36 = a1;
  v62 = 0;
  uint64_t v61 = 0;
  uint64_t v59 = 0;
  char v60 = 0;
  uint64_t v57 = 0;
  char v58 = 0;
  uint64_t v16 = 0;
  uint64_t v39 = type metadata accessor for Calendar.Component();
  uint64_t v26 = *(void **)(v39 - 8);
  uint64_t v27 = v39 - 8;
  unint64_t v13 = (v26[8] + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v1 = MEMORY[0x270FA5388](0);
  v37 = (char *)v11 - v13;
  unint64_t v14 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v1);
  unint64_t v38 = (char *)v11 - v14;
  unint64_t v15 = (*(void *)(*(void *)(type metadata accessor for TimeZone() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v16);
  uint64_t v25 = (uint64_t)v11 - v15;
  uint64_t v24 = type metadata accessor for Calendar.Identifier();
  uint64_t v21 = *(void *)(v24 - 8);
  uint64_t v22 = v24 - 8;
  unint64_t v17 = (*(void *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v16);
  uint64_t v23 = (char *)v11 - v17;
  uint64_t v43 = type metadata accessor for Calendar();
  v28 = *(void **)(v43 - 8);
  uint64_t v29 = v43 - 8;
  uint64_t v19 = v28[8];
  unint64_t v18 = (v19 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v3 = MEMORY[0x270FA5388](v23);
  uint64_t v42 = (char *)v11 - v18;
  unint64_t v20 = (v19 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = MEMORY[0x270FA5388](v3);
  uint64_t v30 = (char *)v11 - v20;
  v62 = (char *)v11 - v20;
  uint64_t v61 = v36;
  (*(void (**)(uint64_t, void))(v21 + 104))(v4, *MEMORY[0x263F07740]);
  Calendar.init(identifier:)();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v24);
  static TimeZone.gmt.getter(v25);
  Calendar.timeZone.setter();
  v32 = (void (*)(char *, char *, uint64_t))v28[2];
  unint64_t v31 = v28 + 2;
  v32(v42, v30, v43);
  unint64_t v33 = (unsigned int *)MEMORY[0x263F07870];
  uint64_t v5 = *MEMORY[0x263F07870];
  unint64_t v35 = (void (*)(char *, uint64_t, uint64_t))v26[13];
  v34 = v26 + 13;
  v35(v38, v5, v39);
  v35(v37, *MEMORY[0x263F078A0], v39);
  uint64_t v6 = Calendar.ordinality(of:in:for:)();
  uint64_t v7 = v42;
  uint64_t v48 = v6;
  int v49 = v8;
  uint64_t v41 = (void (*)(char *, uint64_t))v26[1];
  uint64_t v40 = v26 + 1;
  v41(v37, v39);
  v41(v38, v39);
  uint64_t v45 = (void (*)(char *, uint64_t))v28[1];
  uint64_t v44 = v28 + 1;
  v45(v7, v43);
  uint64_t v59 = v48;
  int v50 = 1;
  char v60 = v49 & 1;
  v32(v7, v30, v43);
  v35(v38, *MEMORY[0x263F07890], v39);
  v35(v37, *v33, v39);
  uint64_t v46 = Calendar.ordinality(of:in:for:)();
  int v47 = v9;
  v41(v37, v39);
  v41(v38, v39);
  v45(v42, v43);
  uint64_t v57 = v46;
  char v58 = v47 & 1 & v50;
  uint64_t v54 = v48;
  if (v49 & 1 & v50) {
    uint64_t v56 = 0;
  }
  else {
    uint64_t v56 = v54;
  }
  uint64_t v12 = v56;
  uint64_t v51 = v46;
  char v52 = v47 & 1;
  if (v47) {
    uint64_t v53 = 0;
  }
  else {
    uint64_t v53 = v51;
  }
  v11[1] = v53;
  v45(v30, v43);
  return v12;
}

uint64_t static TimeZone.gmt.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = a1;
  unint64_t v4 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?)
                              - 8)
                  + 64)
      + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]();
  uint64_t v6 = (char *)&v2 - v4;
  uint64_t v5 = 0;
  TimeZone.init(secondsFromGMT:)();
  uint64_t v7 = type metadata accessor for TimeZone();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = v7 - 8;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v8 + 48))(v6, 1);
  if (result != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(v3, v6, v7);
  }
  __break(1u);
  return result;
}

void static HIDPFLUtils.checkMetrics(_:)()
{
  lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
  id v1 = (id)swift_allocError();
  unsigned char *v0 = 29;
  swift_bridgeObjectRetain();
  static PFLUtils.throwIfFalse(error:for:)();
  swift_bridgeObjectRelease();
}

unint64_t lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError()
{
  uint64_t v2 = lazy protocol witness table cache variable for type HIDPFLError and conformance HIDPFLError;
  if (!lazy protocol witness table cache variable for type HIDPFLError and conformance HIDPFLError)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HIDPFLError and conformance HIDPFLError);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type HIDPFLError and conformance HIDPFLError;
  if (!lazy protocol witness table cache variable for type HIDPFLError and conformance HIDPFLError)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HIDPFLError and conformance HIDPFLError);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type HIDPFLError and conformance HIDPFLError;
  if (!lazy protocol witness table cache variable for type HIDPFLError and conformance HIDPFLError)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HIDPFLError and conformance HIDPFLError);
    return WitnessTable;
  }
  return v2;
}

uint64_t closure #1 in static HIDPFLUtils.checkMetrics(_:)()
{
  id v1 = self;
  swift_bridgeObjectRetain();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  unsigned __int8 v3 = objc_msgSend(v1, sel_isValidJSONObject_, isa);
  swift_unknownObjectRelease();
  return v3 & 1;
}

uint64_t partial apply for closure #1 in static HIDPFLUtils.checkMetrics(_:)()
{
  return closure #1 in static HIDPFLUtils.checkMetrics(_:)();
}

uint64_t static HIDPFLUtils.computeEffectiveTrainingSize(_:_:)(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  if (a2 <= 0 || a2 >= result) {
    return v3;
  }
  if (!__OFSUB__(result, result % a2)) {
    return result - result % a2;
  }
  __break(1u);
  return result;
}

uint64_t static HIDPFLUtils.inplaceSub(_:_:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  swift_bridgeObjectRetain();
  MEMORY[0x25A2C0820](v2);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type Int and conformance Int();
  lazy protocol witness table accessor for type Int32 and conformance Int32();
  numericCast<A, B>(_:)();
  numericCast<A, B>(_:)();
  numericCast<A, B>(_:)();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Array.reserveCapacity(_:)();
  swift_bridgeObjectRetain();
  cblas_saxpy_NEWLAPACK();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_bridgeObjectRelease();
}

unint64_t lazy protocol witness table accessor for type Int32 and conformance Int32()
{
  uint64_t v2 = lazy protocol witness table cache variable for type Int32 and conformance Int32;
  if (!lazy protocol witness table cache variable for type Int32 and conformance Int32)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Int32 and conformance Int32);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type Int32 and conformance Int32;
  if (!lazy protocol witness table cache variable for type Int32 and conformance Int32)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Int32 and conformance Int32);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type Int32 and conformance Int32;
  if (!lazy protocol witness table cache variable for type Int32 and conformance Int32)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Int32 and conformance Int32);
    return WitnessTable;
  }
  return v2;
}

uint64_t static HIDPFLUtils.findClosest<A>(_:target:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v24 = a6;
  uint64_t v40 = a1;
  uint64_t v39 = a2;
  uint64_t v36 = a3;
  uint64_t v37 = a4;
  uint64_t v38 = a5;
  char v52 = 0;
  uint64_t v51 = 0;
  uint64_t v50 = 0;
  uint64_t v53 = a3;
  uint64_t v25 = *(void *)(a5 + 16);
  uint64_t v35 = 0;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  unint64_t v27 = (*(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  v28 = (char *)v19 - v27;
  uint64_t v29 = *(void *)(v6 - 8);
  uint64_t v30 = v6 - 8;
  unint64_t v31 = (*(void *)(v29 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)v19 - v27);
  v32 = (char *)v19 - v31;
  unint64_t v33 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)v19 - v31);
  uint64_t v34 = (uint64_t)v19 - v33;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v41 = type metadata accessor for Optional();
  unint64_t v42 = (*(void *)(*(void *)(v41 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v8 = MEMORY[0x270FA5388](v40);
  uint64_t v48 = (uint64_t)v19 - v42;
  uint64_t v46 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v47 = TupleTypeMetadata2 - 8;
  unint64_t v43 = (*(void *)(v46 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  uint64_t v44 = (uint64_t)v19 - v43;
  char v52 = (char *)v19 - v43;
  uint64_t v51 = v9;
  uint64_t v50 = v10;
  uint64_t v45 = *(int *)(TupleTypeMetadata2 + 48);
  static HIDPFLUtils.findClosest<A>(_:lessOrEqualThan:)(v9, v10, v11, v12, v13);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v46 + 48))(v48, 1, TupleTypeMetadata2) == 1)
  {
    outlined destroy of (value: A, index: Int)?(v48, v36, TupleTypeMetadata2);
    swift_getAssociatedConformanceWitness();
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
    dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)();
    unint64_t v20 = *(void (**)(char *, uint64_t))(v29 + 8);
    v19[1] = v29 + 8;
    v20(v32, v36);
    static HIDPFLUtils.findClosest<A>(_:greaterOrEqualThan:)(v40, v34, v36, v37, v24);
    return ((uint64_t (*)(uint64_t, uint64_t))v20)(v34, v36);
  }
  else
  {
    uint64_t v21 = *(int *)(TupleTypeMetadata2 + 48);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 32))(v44, v48, v36);
    uint64_t v14 = v29;
    uint64_t v15 = TupleTypeMetadata2;
    uint64_t v16 = v24;
    uint64_t v23 = *(void *)(v48 + v21);
    *(void *)(v44 + v45) = v23;
    uint64_t v22 = *(int *)(v15 + 48);
    (*(void (**)(uint64_t))(v14 + 16))(v16);
    uint64_t v17 = v46;
    *(void *)(v24 + v22) = v23;
    (*(void (**)(void))(v17 + 56))();
    uint64_t result = v44;
    outlined destroy of (value: A, index: Int)(v44, v36);
  }
  return result;
}

uint64_t static HIDPFLUtils.findClosest<A>(_:lessOrEqualThan:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v45 = a5;
  uint64_t v63 = a1;
  uint64_t v55 = a2;
  uint64_t v64 = a3;
  uint64_t v46 = a4;
  uint64_t v62 = 0;
  uint64_t v65 = MEMORY[0x263F8D4D0];
  uint64_t v47 = "Fatal error";
  uint64_t v48 = "Unexpectedly found nil while unwrapping an Optional value";
  int v49 = "NightingaleTraining/HIDPFLUtils.swift";
  uint64_t v50 = MEMORY[0x263F8D4A0];
  uint64_t v78 = 0;
  uint64_t v77 = 0;
  uint64_t v73 = 0;
  uint64_t v72 = 0;
  uint64_t v71 = 0;
  uint64_t v79 = a3;
  uint64_t v51 = *(void *)(a3 - 8);
  uint64_t v52 = a3 - 8;
  unint64_t v53 = (*(void *)(v51 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v54 = (char *)&v21 - v53;
  unint64_t v56 = (*(void *)(*(void *)(type metadata accessor for Optional() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v5 = MEMORY[0x270FA5388](v63);
  uint64_t v57 = (char *)&v21 - v56;
  unint64_t v58 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v59 = (char *)&v21 - v58;
  unint64_t v60 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v61 = (char *)&v21 - v60;
  uint64_t v78 = v9;
  uint64_t v77 = v10;
  swift_bridgeObjectRetain();
  v68 = &v76;
  uint64_t v76 = v63;
  uint64_t v66 = type metadata accessor for Array();
  uint64_t WitnessTable = swift_getWitnessTable();
  int v69 = Collection.isEmpty.getter();
  outlined destroy of [A]();
  if (v69) {
    goto LABEL_5;
  }
  swift_bridgeObjectRetain();
  unint64_t v42 = &v75;
  uint64_t v75 = v63;
  Collection.first.getter();
  outlined destroy of [A]();
  unint64_t v43 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48);
  uint64_t v44 = v51 + 48;
  if (v43(v61, 1, v64) == 1)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  int v41 = dispatch thunk of static Comparable.< infix(_:_:)();
  uint64_t v39 = *(void (**)(char *, uint64_t))(v51 + 8);
  uint64_t v40 = v51 + 8;
  v39(v61, v64);
  if (v41)
  {
LABEL_5:
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 56))(v45, 1);
  }
  swift_bridgeObjectRetain();
  uint64_t v38 = &v74;
  uint64_t v74 = v63;
  uint64_t v37 = swift_getWitnessTable();
  BidirectionalCollection.last.getter();
  outlined destroy of [A]();
  if (v43(v59, 1, v64) == 1)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  int v36 = dispatch thunk of static Comparable.>= infix(_:_:)();
  v39(v59, v64);
  if (v36)
  {
    uint64_t v33 = swift_getTupleTypeMetadata2();
    uint64_t v34 = *(int *)(v33 + 48);
    swift_bridgeObjectRetain();
    uint64_t v35 = &v70;
    uint64_t v70 = v63;
    BidirectionalCollection.last.getter();
    outlined destroy of [A]();
    if (v43(v57, 1, v64) == 1)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    (*(void (**)(uint64_t, char *, uint64_t))(v51 + 32))(v45, v57, v64);
    uint64_t result = MEMORY[0x25A2C0810](v63, v64);
    uint64_t v32 = result - 1;
    if (!__OFSUB__(result, 1))
    {
      uint64_t v14 = v33;
      *(void *)(v45 + v34) = v32;
      return (*(uint64_t (**)(void))(*(void *)(v14 - 8) + 56))();
    }
    goto LABEL_45;
  }
  uint64_t v73 = 0;
  uint64_t result = MEMORY[0x25A2C0810](v63, v64);
  uint64_t v31 = result - 1;
  if (__OFSUB__(result, 1))
  {
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
    return result;
  }
  uint64_t v72 = v31;
  while (v72 >= v73)
  {
    uint64_t v30 = v73 + v72;
    if (__OFADD__(v73, v72)) {
      goto LABEL_42;
    }
    uint64_t v28 = v30 / 2;
    uint64_t v71 = v30 / 2;
    Array.subscript.getter();
    int v29 = dispatch thunk of static Equatable.== infix(_:_:)();
    v39(v54, v64);
    if (v29)
    {
      uint64_t v27 = swift_getTupleTypeMetadata2();
      uint64_t v26 = *(int *)(v27 + 48);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 16))(v45, v55, v64);
      uint64_t v17 = v27;
      *(void *)(v45 + v26) = v28;
      return (*(uint64_t (**)(void))(*(void *)(v17 - 8) + 56))();
    }
    Array.subscript.getter();
    unsigned int v25 = dispatch thunk of static Comparable.< infix(_:_:)();
    v39(v54, v64);
    uint64_t result = v25;
    if (v25)
    {
      uint64_t v24 = v28 + 1;
      if (__OFADD__(v28, 1)) {
        goto LABEL_44;
      }
      uint64_t v73 = v24;
    }
    else
    {
      uint64_t v23 = v28 - 1;
      if (__OFSUB__(v28, 1)) {
        goto LABEL_43;
      }
      uint64_t v72 = v23;
    }
  }
  uint64_t v22 = swift_getTupleTypeMetadata2();
  uint64_t v21 = *(int *)(v22 + 48);
  Array.subscript.getter();
  uint64_t v20 = v22;
  *(void *)(v45 + v21) = v72;
  return (*(uint64_t (**)(void))(*(void *)(v20 - 8) + 56))();
}

uint64_t outlined destroy of (value: A, index: Int)?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 48))(a1, 1)) {
    (*(void (**)(uint64_t))(*(void *)(a2 - 8) + 8))(a1);
  }
  return a1;
}

uint64_t static HIDPFLUtils.findClosest<A>(_:greaterOrEqualThan:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v42 = a5;
  uint64_t v60 = a1;
  uint64_t v52 = a2;
  uint64_t v61 = a3;
  uint64_t v43 = a4;
  uint64_t v59 = 0;
  uint64_t v62 = MEMORY[0x263F8D4D0];
  uint64_t v44 = MEMORY[0x263F8D4A0];
  uint64_t v45 = "Fatal error";
  uint64_t v46 = "Unexpectedly found nil while unwrapping an Optional value";
  uint64_t v47 = "NightingaleTraining/HIDPFLUtils.swift";
  uint64_t v75 = 0;
  uint64_t v74 = 0;
  uint64_t v70 = 0;
  uint64_t v69 = 0;
  uint64_t v68 = 0;
  uint64_t v76 = a3;
  uint64_t v48 = *(void *)(a3 - 8);
  uint64_t v49 = a3 - 8;
  unint64_t v50 = (*(void *)(v48 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v51 = (char *)&v20 - v50;
  unint64_t v53 = (*(void *)(*(void *)(type metadata accessor for Optional() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v5 = MEMORY[0x270FA5388](v60);
  uint64_t v54 = (char *)&v20 - v53;
  unint64_t v55 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  unint64_t v56 = (char *)&v20 - v55;
  unint64_t v57 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  unint64_t v58 = (char *)&v20 - v57;
  uint64_t v75 = v9;
  uint64_t v74 = v10;
  swift_bridgeObjectRetain();
  uint64_t v65 = &v73;
  uint64_t v73 = v60;
  uint64_t v63 = type metadata accessor for Array();
  uint64_t WitnessTable = swift_getWitnessTable();
  int v66 = Collection.isEmpty.getter();
  outlined destroy of [A]();
  if (v66) {
    goto LABEL_5;
  }
  swift_bridgeObjectRetain();
  uint64_t v39 = &v72;
  uint64_t v72 = v60;
  swift_getWitnessTable();
  BidirectionalCollection.last.getter();
  outlined destroy of [A]();
  uint64_t v40 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48);
  uint64_t v41 = v48 + 48;
  if (v40(v58, 1, v61) == 1)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  int v38 = dispatch thunk of static Comparable.> infix(_:_:)();
  int v36 = *(void (**)(char *, uint64_t))(v48 + 8);
  uint64_t v37 = v48 + 8;
  v36(v58, v61);
  if (v38)
  {
LABEL_5:
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 56))(v42, 1);
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v35 = &v71;
    uint64_t v71 = v60;
    Collection.first.getter();
    outlined destroy of [A]();
    if (v40(v56, 1, v61) == 1)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    int v34 = dispatch thunk of static Comparable.<= infix(_:_:)();
    v36(v56, v61);
    if (v34)
    {
      uint64_t v31 = swift_getTupleTypeMetadata2();
      uint64_t v32 = *(int *)(v31 + 48);
      swift_bridgeObjectRetain();
      uint64_t v33 = &v67;
      uint64_t v67 = v60;
      Collection.first.getter();
      outlined destroy of [A]();
      if (v40(v54, 1, v61) == 1)
      {
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      (*(void (**)(uint64_t, char *, uint64_t))(v48 + 32))(v42, v54, v61);
      uint64_t v13 = v31;
      *(void *)(v42 + v32) = 0;
      return (*(uint64_t (**)(void))(*(void *)(v13 - 8) + 56))();
    }
    else
    {
      uint64_t v70 = 0;
      uint64_t result = MEMORY[0x25A2C0810](v60, v61);
      uint64_t v30 = result - 1;
      if (__OFSUB__(result, 1))
      {
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
      }
      else
      {
        uint64_t v69 = v30;
        while (v69 >= v70)
        {
          uint64_t v29 = v70 + v69;
          if (__OFADD__(v70, v69)) {
            goto LABEL_38;
          }
          uint64_t v27 = v29 / 2;
          uint64_t v68 = v29 / 2;
          Array.subscript.getter();
          int v28 = dispatch thunk of static Equatable.== infix(_:_:)();
          v36(v51, v61);
          if (v28)
          {
            uint64_t v26 = swift_getTupleTypeMetadata2();
            uint64_t v25 = *(int *)(v26 + 48);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 16))(v42, v52, v61);
            uint64_t v16 = v26;
            *(void *)(v42 + v25) = v27;
            return (*(uint64_t (**)(void))(*(void *)(v16 - 8) + 56))();
          }
          Array.subscript.getter();
          unsigned int v24 = dispatch thunk of static Comparable.< infix(_:_:)();
          v36(v51, v61);
          uint64_t result = v24;
          if (v24)
          {
            uint64_t v23 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_40;
            }
            uint64_t v70 = v23;
          }
          else
          {
            uint64_t v22 = v27 - 1;
            if (__OFSUB__(v27, 1)) {
              goto LABEL_39;
            }
            uint64_t v69 = v22;
          }
        }
        uint64_t v21 = swift_getTupleTypeMetadata2();
        uint64_t v20 = *(int *)(v21 + 48);
        Array.subscript.getter();
        uint64_t v19 = v21;
        *(void *)(v42 + v20) = v70;
        return (*(uint64_t (**)(void))(*(void *)(v19 - 8) + 56))();
      }
    }
  }
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of (value: A, index: Int)(uint64_t a1, uint64_t a2)
{
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of [A]()
{
}

uint64_t protocol witness for UnsafeMutableMemoryAccessible.withUnsafeMutableBufferPointer<A>(_:) in conformance [A]()
{
  return Array.withUnsafeMutableBufferPointer<A>(_:)();
}

uint64_t protocol witness for UnsafeMutableMemoryAccessible.count.getter in conformance [A](uint64_t a1)
{
  return MEMORY[0x25A2C0810](*v1, *(void *)(a1 + 16));
}

uint64_t protocol witness for UnsafeMutableMemoryAccessible.withUnsafeMutableBufferPointer<A>(_:) in conformance ArraySlice<A>()
{
  return ArraySlice.withUnsafeMutableBufferPointer<A>(_:)();
}

uint64_t protocol witness for UnsafeMutableMemoryAccessible.count.getter in conformance ArraySlice<A>()
{
  return ArraySlice.count.getter();
}

ValueMetadata *type metadata accessor for HIDPFLUtils()
{
  return &type metadata for HIDPFLUtils;
}

uint64_t type metadata accessor for _HKPrivatePregnancyStartDateSource()
{
  uint64_t v4 = lazy cache variable for type metadata for _HKPrivatePregnancyStartDateSource;
  if (!lazy cache variable for type metadata for _HKPrivatePregnancyStartDateSource)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    uint64_t v4 = ForeignTypeMetadata;
    if (!v0)
    {
      unint64_t v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for _HKPrivatePregnancyStartDateSource);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for HKCategoryValueSleepAnalysis()
{
  uint64_t v4 = lazy cache variable for type metadata for HKCategoryValueSleepAnalysis;
  if (!lazy cache variable for type metadata for HKCategoryValueSleepAnalysis)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    uint64_t v4 = ForeignTypeMetadata;
    if (!v0)
    {
      unint64_t v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for HKCategoryValueSleepAnalysis);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for HKQueryOptions()
{
  uint64_t v4 = lazy cache variable for type metadata for HKQueryOptions;
  if (!lazy cache variable for type metadata for HKQueryOptions)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    uint64_t v4 = ForeignTypeMetadata;
    if (!v0)
    {
      unint64_t v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for HKQueryOptions);
      return v1;
    }
  }
  return v4;
}

uint64_t protocol witness for SetAlgebra.init() in conformance HKQueryOptions()
{
  return OptionSet<>.init()();
}

uint64_t protocol witness for SetAlgebra.contains(_:) in conformance HKQueryOptions()
{
  return OptionSet<>.contains(_:)() & 1;
}

uint64_t protocol witness for SetAlgebra.union(_:) in conformance HKQueryOptions()
{
  return OptionSet.union(_:)();
}

uint64_t protocol witness for SetAlgebra.intersection(_:) in conformance HKQueryOptions()
{
  return OptionSet.intersection(_:)();
}

uint64_t protocol witness for SetAlgebra.symmetricDifference(_:) in conformance HKQueryOptions()
{
  return OptionSet.symmetricDifference(_:)();
}

uint64_t protocol witness for SetAlgebra.insert(_:) in conformance HKQueryOptions()
{
  return OptionSet<>.insert(_:)() & 1;
}

uint64_t protocol witness for SetAlgebra.remove(_:) in conformance HKQueryOptions()
{
  return OptionSet<>.remove(_:)();
}

uint64_t protocol witness for SetAlgebra.update(with:) in conformance HKQueryOptions()
{
  return OptionSet<>.update(with:)();
}

uint64_t protocol witness for SetAlgebra.formUnion(_:) in conformance HKQueryOptions()
{
  return OptionSet<>.formUnion(_:)();
}

uint64_t protocol witness for SetAlgebra.formIntersection(_:) in conformance HKQueryOptions()
{
  return OptionSet<>.formIntersection(_:)();
}

uint64_t protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance HKQueryOptions()
{
  return OptionSet<>.formSymmetricDifference(_:)();
}

uint64_t protocol witness for SetAlgebra.subtracting(_:) in conformance HKQueryOptions()
{
  return SetAlgebra.subtracting(_:)();
}

uint64_t protocol witness for SetAlgebra.isSubset(of:) in conformance HKQueryOptions()
{
  return SetAlgebra.isSubset(of:)() & 1;
}

uint64_t protocol witness for SetAlgebra.isDisjoint(with:) in conformance HKQueryOptions()
{
  return SetAlgebra.isDisjoint(with:)() & 1;
}

uint64_t protocol witness for SetAlgebra.isSuperset(of:) in conformance HKQueryOptions()
{
  return SetAlgebra.isSuperset(of:)() & 1;
}

uint64_t protocol witness for SetAlgebra.isEmpty.getter in conformance HKQueryOptions()
{
  return SetAlgebra.isEmpty.getter() & 1;
}

uint64_t protocol witness for SetAlgebra.init<A>(_:) in conformance HKQueryOptions()
{
  return SetAlgebra.init<A>(_:)();
}

uint64_t protocol witness for SetAlgebra.subtract(_:) in conformance HKQueryOptions()
{
  return SetAlgebra.subtract(_:)();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance HKCategoryValueSleepAnalysis()
{
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance HKCategoryValueSleepAnalysis()
{
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance HKCategoryValueSleepAnalysis()
{
  return RawRepresentable<>._rawHashValue(seed:)();
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance _HKPrivatePregnancyStartDateSource(uint64_t a1@<X8>)
{
  _HKPrivatePregnancyStartDateSource.init(rawValue:)();
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = v2 & 1;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance _HKPrivatePregnancyStartDateSource(void *a1@<X8>)
{
  _HKPrivatePregnancyStartDateSource.rawValue.getter();
  *a1 = v1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance _HKPrivatePregnancyStartDateSource()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance HKQueryOptions()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance HKQueryOptions()
{
  return SetAlgebra<>.init(arrayLiteral:)();
}

__C::HKQueryOptions protocol witness for OptionSet.init(rawValue:) in conformance HKQueryOptions@<X0>(Swift::UInt *a1@<X0>, __C::HKQueryOptions *a2@<X8>)
{
  result.rawValue = HKQueryOptions.init(rawValue:)(*a1).rawValue;
  a2->rawValue = result.rawValue;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance HKCategoryValueSleepAnalysis()
{
  return == infix<A>(_:_:)() & 1;
}

__C::HKQueryOptions protocol witness for RawRepresentable.init(rawValue:) in conformance HKQueryOptions@<X0>(Swift::UInt *a1@<X0>, uint64_t a2@<X8>)
{
  result.rawValue = HKQueryOptions.init(rawValue:)(*a1).rawValue;
  *(__C::HKQueryOptions *)a2 = result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

__C::HKQueryOptions protocol witness for RawRepresentable.rawValue.getter in conformance HKQueryOptions@<X0>(__C::HKQueryOptions *a1@<X8>)
{
  result.rawValue = HKQueryOptions.init(rawValue:)(*v1).rawValue;
  a1->rawValue = result.rawValue;
  return result;
}

unint64_t base witness table accessor for RawRepresentable in HKQueryOptions()
{
  return lazy protocol witness table accessor for type HKQueryOptions and conformance HKQueryOptions();
}

unint64_t lazy protocol witness table accessor for type HKQueryOptions and conformance HKQueryOptions()
{
  uint64_t v2 = lazy protocol witness table cache variable for type HKQueryOptions and conformance HKQueryOptions;
  if (!lazy protocol witness table cache variable for type HKQueryOptions and conformance HKQueryOptions)
  {
    type metadata accessor for HKQueryOptions();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HKQueryOptions and conformance HKQueryOptions);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type HKQueryOptions and conformance HKQueryOptions;
  if (!lazy protocol witness table cache variable for type HKQueryOptions and conformance HKQueryOptions)
  {
    type metadata accessor for HKQueryOptions();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HKQueryOptions and conformance HKQueryOptions);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type HKQueryOptions and conformance HKQueryOptions;
  if (!lazy protocol witness table cache variable for type HKQueryOptions and conformance HKQueryOptions)
  {
    type metadata accessor for HKQueryOptions();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HKQueryOptions and conformance HKQueryOptions);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type HKQueryOptions and conformance HKQueryOptions;
  if (!lazy protocol witness table cache variable for type HKQueryOptions and conformance HKQueryOptions)
  {
    type metadata accessor for HKQueryOptions();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HKQueryOptions and conformance HKQueryOptions);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type HKQueryOptions and conformance HKQueryOptions;
  if (!lazy protocol witness table cache variable for type HKQueryOptions and conformance HKQueryOptions)
  {
    type metadata accessor for HKQueryOptions();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HKQueryOptions and conformance HKQueryOptions);
    return WitnessTable;
  }
  return v2;
}

unint64_t base witness table accessor for SetAlgebra in HKQueryOptions()
{
  return lazy protocol witness table accessor for type HKQueryOptions and conformance HKQueryOptions();
}

unint64_t base witness table accessor for Equatable in HKCategoryValueSleepAnalysis()
{
  return lazy protocol witness table accessor for type HKCategoryValueSleepAnalysis and conformance HKCategoryValueSleepAnalysis();
}

unint64_t lazy protocol witness table accessor for type HKCategoryValueSleepAnalysis and conformance HKCategoryValueSleepAnalysis()
{
  uint64_t v2 = lazy protocol witness table cache variable for type HKCategoryValueSleepAnalysis and conformance HKCategoryValueSleepAnalysis;
  if (!lazy protocol witness table cache variable for type HKCategoryValueSleepAnalysis and conformance HKCategoryValueSleepAnalysis)
  {
    type metadata accessor for HKCategoryValueSleepAnalysis();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HKCategoryValueSleepAnalysis and conformance HKCategoryValueSleepAnalysis);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type HKCategoryValueSleepAnalysis and conformance HKCategoryValueSleepAnalysis;
  if (!lazy protocol witness table cache variable for type HKCategoryValueSleepAnalysis and conformance HKCategoryValueSleepAnalysis)
  {
    type metadata accessor for HKCategoryValueSleepAnalysis();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HKCategoryValueSleepAnalysis and conformance HKCategoryValueSleepAnalysis);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type HKCategoryValueSleepAnalysis and conformance HKCategoryValueSleepAnalysis;
  if (!lazy protocol witness table cache variable for type HKCategoryValueSleepAnalysis and conformance HKCategoryValueSleepAnalysis)
  {
    type metadata accessor for HKCategoryValueSleepAnalysis();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HKCategoryValueSleepAnalysis and conformance HKCategoryValueSleepAnalysis);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type HKCategoryValueSleepAnalysis and conformance HKCategoryValueSleepAnalysis;
  if (!lazy protocol witness table cache variable for type HKCategoryValueSleepAnalysis and conformance HKCategoryValueSleepAnalysis)
  {
    type metadata accessor for HKCategoryValueSleepAnalysis();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HKCategoryValueSleepAnalysis and conformance HKCategoryValueSleepAnalysis);
    return WitnessTable;
  }
  return v2;
}

unint64_t base witness table accessor for Equatable in HKQueryOptions()
{
  return lazy protocol witness table accessor for type HKQueryOptions and conformance HKQueryOptions();
}

unint64_t base witness table accessor for ExpressibleByArrayLiteral in HKQueryOptions()
{
  return lazy protocol witness table accessor for type HKQueryOptions and conformance HKQueryOptions();
}

unint64_t lazy protocol witness table accessor for type UInt and conformance UInt()
{
  uint64_t v2 = lazy protocol witness table cache variable for type UInt and conformance UInt;
  if (!lazy protocol witness table cache variable for type UInt and conformance UInt)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type UInt and conformance UInt);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type UInt and conformance UInt;
  if (!lazy protocol witness table cache variable for type UInt and conformance UInt)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type UInt and conformance UInt);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type UInt and conformance UInt;
  if (!lazy protocol witness table cache variable for type UInt and conformance UInt)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type UInt and conformance UInt);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type _HKPrivatePregnancyStartDateSource and conformance _HKPrivatePregnancyStartDateSource()
{
  uint64_t v2 = lazy protocol witness table cache variable for type _HKPrivatePregnancyStartDateSource and conformance _HKPrivatePregnancyStartDateSource;
  if (!lazy protocol witness table cache variable for type _HKPrivatePregnancyStartDateSource and conformance _HKPrivatePregnancyStartDateSource)
  {
    type metadata accessor for _HKPrivatePregnancyStartDateSource();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type _HKPrivatePregnancyStartDateSource and conformance _HKPrivatePregnancyStartDateSource);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type _HKPrivatePregnancyStartDateSource and conformance _HKPrivatePregnancyStartDateSource;
  if (!lazy protocol witness table cache variable for type _HKPrivatePregnancyStartDateSource and conformance _HKPrivatePregnancyStartDateSource)
  {
    type metadata accessor for _HKPrivatePregnancyStartDateSource();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type _HKPrivatePregnancyStartDateSource and conformance _HKPrivatePregnancyStartDateSource);
    return WitnessTable;
  }
  return v2;
}

Swift::UInt32_optional __swiftcall Date.toJulianDay()()
{
  int v52 = 0;
  v85 = 0;
  v84 = 0;
  uint64_t v83 = 0;
  uint64_t v81 = 0;
  uint64_t v80 = 0;
  uint64_t v79 = 0;
  uint64_t v78 = 0;
  int v75 = 0;
  uint64_t v62 = 0;
  uint64_t v53 = type metadata accessor for DateComponents();
  uint64_t v54 = *(void *)(v53 - 8);
  uint64_t v55 = v53 - 8;
  unint64_t v56 = (*(void *)(v54 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v72 = (char *)v21 - v56;
  v85 = (char *)v21 - v56;
  uint64_t v57 = type metadata accessor for Calendar();
  uint64_t v58 = *(void *)(v57 - 8);
  uint64_t v59 = v57 - 8;
  unint64_t v60 = (*(void *)(v58 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v57);
  uint64_t v61 = (char *)v21 - v60;
  v84 = (char *)v21 - v60;
  uint64_t v83 = v0;
  static Calendar.current.getter();
  uint64_t v70 = type metadata accessor for Calendar.Component();
  uint64_t v69 = _allocateUninitializedArray<A>(_:)();
  uint64_t v66 = v1;
  uint64_t v63 = *(void *)(v70 - 8);
  uint64_t v64 = v70 - 8;
  uint64_t v68 = *(void (**)(void))(v63 + 104);
  uint64_t v67 = v63 + 104;
  v68();
  uint64_t v65 = *(void *)(v63 + 72);
  ((void (*)(uint64_t, void, uint64_t))v68)(v66 + v65, *MEMORY[0x263F078A8], v70);
  ((void (*)(uint64_t, void, uint64_t))v68)(v66 + 2 * v65, *MEMORY[0x263F07870], v70);
  uint64_t v2 = v69;
  _finalizeUninitializedArray<A>(_:)();
  uint64_t v71 = v2;
  lazy protocol witness table accessor for type Calendar.Component and conformance Calendar.Component();
  uint64_t v73 = Set.init(arrayLiteral:)();
  Calendar.dateComponents(_:from:)();
  swift_bridgeObjectRelease();
  uint64_t v74 = DateComponents.day.getter();
  if (v3) {
    goto LABEL_72;
  }
  uint64_t v51 = v74;
  uint64_t v49 = v74;
  uint64_t v81 = v74;
  uint64_t v50 = DateComponents.month.getter();
  if (v4) {
    goto LABEL_72;
  }
  uint64_t v48 = v50;
  uint64_t v46 = v50;
  uint64_t v80 = v50;
  uint64_t v5 = DateComponents.year.getter();
  uint64_t v47 = v5;
  if (v6) {
    goto LABEL_72;
  }
  uint64_t v45 = v47;
  uint64_t v43 = v45;
  uint64_t v79 = v45;
  uint64_t v44 = v45 + 4800;
  if (__OFADD__(v45, 4800))
  {
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
    goto LABEL_77;
  }
  uint64_t v42 = v46 - 14;
  if (__OFSUB__(v46, 14)) {
    goto LABEL_75;
  }
  uint64_t v41 = v44 + v42 / 12;
  if (__OFADD__(v44, v42 / 12)) {
    goto LABEL_76;
  }
  uint64_t v40 = 1461 * v41;
  if ((unsigned __int128)(1461 * (__int128)v41) >> 64 != (1461 * v41) >> 63)
  {
LABEL_77:
    __break(1u);
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
    goto LABEL_80;
  }
  uint64_t v38 = v40 / 4;
  uint64_t v39 = v46 - 2;
  if (__OFSUB__(v46, 2)) {
    goto LABEL_78;
  }
  uint64_t v37 = v46 - 14;
  if (__OFSUB__(v46, 14)) {
    goto LABEL_79;
  }
  uint64_t v36 = 12 * (v37 / 12);
  if ((unsigned __int128)(12 * (__int128)(v37 / 12)) >> 64 != v36 >> 63)
  {
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
    goto LABEL_82;
  }
  uint64_t v35 = v39 - v36;
  if (__OFSUB__(v39, v36)) {
    goto LABEL_81;
  }
  uint64_t v34 = 367 * v35;
  if ((unsigned __int128)(367 * (__int128)v35) >> 64 != (367 * v35) >> 63)
  {
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
LABEL_86:
    __break(1u);
    goto LABEL_87;
  }
  uint64_t v33 = v38 + v34 / 12;
  if (__OFADD__(v38, v34 / 12)) {
    goto LABEL_83;
  }
  uint64_t v32 = v43 + 4900;
  if (__OFADD__(v43, 4900)) {
    goto LABEL_84;
  }
  uint64_t v31 = v46 - 14;
  if (__OFSUB__(v46, 14)) {
    goto LABEL_85;
  }
  uint64_t v30 = v32 + v31 / 12;
  if (__OFADD__(v32, v31 / 12)) {
    goto LABEL_86;
  }
  uint64_t v29 = 3 * (v30 / 100);
  if ((unsigned __int128)(3 * (__int128)(v30 / 100)) >> 64 != v29 >> 63)
  {
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
    return (Swift::UInt32_optional)v5;
  }
  uint64_t v28 = v33 - v29 / 4;
  if (__OFSUB__(v33, v29 / 4)) {
    goto LABEL_88;
  }
  uint64_t v27 = v28 + v49;
  if (__OFADD__(v28, v49)) {
    goto LABEL_89;
  }
  uint64_t v26 = v27 - 32075;
  if (__OFSUB__(v27, 32075)) {
    goto LABEL_90;
  }
  uint64_t v78 = v26;
  if (v26 < 2400001)
  {
LABEL_72:
    (*(void (**)(char *, uint64_t))(v54 + 8))(v72, v53);
    (*(void (**)(char *, uint64_t))(v58 + 8))(v61, v57);
    int v23 = v52;
    int v24 = 1;
    goto LABEL_73;
  }
  uint64_t v25 = v26 - 2400001;
  if (__OFSUB__(v26, 2400001)) {
    goto LABEL_91;
  }
  v21[3] = &v76;
  uint64_t v76 = v25;
  v21[1] = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v21[2] = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  int v22 = v77;
  int v75 = v77;
  (*(void (**)(char *, uint64_t))(v54 + 8))(v72, v53);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v61, v57);
  int v23 = v22;
  int v24 = 0;
LABEL_73:
  LODWORD(v82) = v23;
  BYTE4(v82) = v24 & 1;
  return (Swift::UInt32_optional)v82;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> _finalizeUninitializedArray<A>(_:)()
{
}

unint64_t lazy protocol witness table accessor for type Calendar.Component and conformance Calendar.Component()
{
  uint64_t v2 = lazy protocol witness table cache variable for type Calendar.Component and conformance Calendar.Component;
  if (!lazy protocol witness table cache variable for type Calendar.Component and conformance Calendar.Component)
  {
    type metadata accessor for Calendar.Component();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Component and conformance Calendar.Component);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type UInt32 and conformance UInt32()
{
  uint64_t v2 = lazy protocol witness table cache variable for type UInt32 and conformance UInt32;
  if (!lazy protocol witness table cache variable for type UInt32 and conformance UInt32)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type UInt32 and conformance UInt32);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type UInt32 and conformance UInt32;
  if (!lazy protocol witness table cache variable for type UInt32 and conformance UInt32)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type UInt32 and conformance UInt32);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type UInt32 and conformance UInt32;
  if (!lazy protocol witness table cache variable for type UInt32 and conformance UInt32)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type UInt32 and conformance UInt32);
    return WitnessTable;
  }
  return v2;
}

uint64_t UInt32.getDateComponents()@<X0>(unsigned int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v42 = a2;
  unsigned int v47 = a1;
  uint64_t v68 = 0;
  int v67 = 0;
  uint64_t v64 = 0;
  uint64_t v63 = 0;
  uint64_t v62 = 0;
  uint64_t v61 = 0;
  uint64_t v60 = 0;
  uint64_t v59 = 0;
  uint64_t v58 = 0;
  uint64_t v57 = 0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
  unint64_t v43 = (*(void *)(*(void *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2);
  uint64_t v44 = (char *)v21 - v43;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Calendar?);
  unint64_t v45 = (*(void *)(*(void *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v3);
  uint64_t v46 = (char *)v21 - v45;
  uint64_t v48 = type metadata accessor for DateComponents();
  uint64_t v49 = *(void *)(v48 - 8);
  uint64_t v50 = v48 - 8;
  unint64_t v51 = (*(void *)(v49 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  int v4 = MEMORY[0x270FA5388](v47);
  int v52 = (char *)v21 - v51;
  uint64_t v68 = (char *)v21 - v51;
  int v67 = v4;
  uint64_t v55 = &v65;
  int v65 = v4;
  unint64_t v53 = lazy protocol witness table accessor for type Int and conformance Int();
  unint64_t v54 = lazy protocol witness table accessor for type Int and conformance Int();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  uint64_t result = SignedInteger<>.init<A>(_:)();
  uint64_t v56 = v66 + 2400001;
  if (__OFADD__(v66, 2400001))
  {
    __break(1u);
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  uint64_t v64 = v56;
  uint64_t v41 = v56 + 1401;
  if (__OFADD__(v56, 1401)) {
    goto LABEL_59;
  }
  uint64_t v40 = 4 * v56;
  if ((unsigned __int128)(4 * (__int128)v56) >> 64 != (4 * v56) >> 63)
  {
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  uint64_t v39 = v40 + 274277;
  if (__OFADD__(v40, 274277)) {
    goto LABEL_61;
  }
  uint64_t v38 = 3 * (v39 / 146097);
  if ((unsigned __int128)(v39 / 146097 * (__int128)3) >> 64 != v38 >> 63)
  {
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  uint64_t v37 = v41 + v38 / 4;
  if (__OFADD__(v41, v38 / 4)) {
    goto LABEL_63;
  }
  uint64_t v36 = v37 - 38;
  if (__OFSUB__(v37, 38)) {
    goto LABEL_64;
  }
  uint64_t v63 = v36;
  uint64_t v35 = 4 * v36;
  if ((unsigned __int128)(4 * (__int128)v36) >> 64 != (4 * v36) >> 63)
  {
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }
  uint64_t v34 = v35 + 3;
  if (__OFADD__(v35, 3)) {
    goto LABEL_66;
  }
  uint64_t v62 = v34;
  uint64_t v33 = v34 % 1461;
  uint64_t v61 = v34 % 1461 / 4;
  uint64_t v32 = 5 * v61;
  if ((unsigned __int128)(5 * (__int128)v61) >> 64 != (5 * v61) >> 63)
  {
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }
  uint64_t v31 = v32 + 2;
  if (__OFADD__(v32, 2)) {
    goto LABEL_68;
  }
  uint64_t v60 = v31;
  uint64_t v30 = v31 % 153;
  uint64_t v29 = v31 % 153 / 5 + 1;
  if (__OFADD__(v31 % 153 / 5, 1)) {
    goto LABEL_69;
  }
  uint64_t v59 = v29;
  uint64_t v28 = v31 / 153 + 2;
  if (__OFADD__(v31 / 153, 2)) {
    goto LABEL_70;
  }
  uint64_t v27 = v28 % 12 + 1;
  if (__OFADD__(v28 % 12, 1)) {
    goto LABEL_71;
  }
  uint64_t v58 = v27;
  uint64_t v26 = v34 / 1461 - 4716;
  if (__OFSUB__(v34 / 1461, 4716)) {
    goto LABEL_72;
  }
  uint64_t v25 = 14 - v27;
  if (__OFSUB__(14, v27)) {
    goto LABEL_73;
  }
  uint64_t v24 = v26 + v25 / 12;
  if (!__OFADD__(v26, v25 / 12))
  {
    uint64_t v57 = v24;
    v21[1] = 0;
    uint64_t v19 = *(void (**)(char *, uint64_t))(*(void *)(type metadata accessor for Calendar() - 8) + 56);
    unsigned int v22 = 1;
    v19(v46, 1);
    uint64_t v20 = type metadata accessor for TimeZone();
    (*(void (**)(char *, void))(*(void *)(v20 - 8) + 56))(v44, v22);
    DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)();
    int v23 = 0;
    DateComponents.day.setter();
    DateComponents.month.setter();
    DateComponents.year.setter();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v49 + 32))(v42, v52, v48);
  }
LABEL_74:
  __break(1u);
  return result;
}

uint64_t UInt32.toDate(calendar:)@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v8 = a3;
  unsigned int v6 = a2;
  uint64_t v14 = 0;
  unsigned int v13 = 0;
  uint64_t v12 = type metadata accessor for DateComponents();
  uint64_t v9 = *(void *)(v12 - 8);
  uint64_t v10 = v12 - 8;
  unint64_t v7 = (*(void *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v11 = &v5[-v7];
  uint64_t v14 = a1;
  unsigned int v13 = MEMORY[0x270FA5388](v6);
  UInt32.getDateComponents()(v13, (uint64_t)&v5[-v7]);
  Calendar.date(from:)();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v9 + 8))(v11, v12);
}

uint64_t UInt32.toDate(atHour:calendar:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v17 = a4;
  uint64_t v14 = a1;
  uint64_t v16 = a2;
  unsigned int v10 = a3;
  uint64_t v28 = 0;
  uint64_t v27 = 0;
  uint64_t v26 = 0;
  int v15 = 0;
  unsigned int v25 = 0;
  uint64_t v22 = type metadata accessor for DateComponents();
  uint64_t v18 = *(void *)(v22 - 8);
  uint64_t v19 = v22 - 8;
  uint64_t v12 = *(void *)(v18 + 64);
  unint64_t v11 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = MEMORY[0x270FA5388](v10);
  uint64_t v20 = &v9[-v11];
  unint64_t v13 = v11;
  unsigned int v5 = MEMORY[0x270FA5388](v4);
  uint64_t v21 = &v9[-v13];
  uint64_t v28 = &v9[-v13];
  uint64_t v27 = v6;
  uint64_t v26 = v7;
  unsigned int v25 = v5;
  UInt32.getDateComponents()(v5, (uint64_t)&v9[-v13]);
  DateComponents.hour.setter();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v18 + 16))(v20, v21, v22);
  Calendar.date(from:)();
  uint64_t v24 = *(void (**)(unsigned char *, uint64_t))(v18 + 8);
  uint64_t v23 = v18 + 8;
  v24(v20, v22);
  return ((uint64_t (*)(unsigned char *, uint64_t))v24)(v21, v22);
}

uint64_t static UInt32.modifiedJulianStartDate()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v19 = a1;
  uint64_t v32 = 0;
  uint64_t v31 = 0;
  uint64_t v17 = 0;
  uint64_t v26 = type metadata accessor for Calendar();
  uint64_t v23 = *(void *)(v26 - 8);
  uint64_t v24 = v26 - 8;
  unint64_t v8 = (*(void *)(v23 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v26);
  unsigned int v25 = (char *)&v7 - v8;
  uint64_t v32 = (char *)&v7 - v8;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
  unint64_t v9 = (*(void *)(*(void *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v1);
  int v15 = (char *)&v7 - v9;
  unint64_t v10 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Calendar?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v17);
  uint64_t v14 = (char *)&v7 - v10;
  uint64_t v28 = type metadata accessor for DateComponents();
  uint64_t v20 = *(void *)(v28 - 8);
  uint64_t v21 = v28 - 8;
  uint64_t v12 = *(void *)(v20 + 64);
  unint64_t v11 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v2 = MEMORY[0x270FA5388](v14);
  uint64_t v22 = (char *)&v7 - v11;
  unint64_t v13 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v3 = MEMORY[0x270FA5388](v2);
  uint64_t v27 = (char *)&v7 - v13;
  uint64_t v31 = (char *)&v7 - v13;
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v23 + 56);
  unsigned int v16 = 1;
  v4(v3, 1);
  uint64_t v5 = type metadata accessor for TimeZone();
  (*(void (**)(char *, void))(*(void *)(v5 - 8) + 56))(v15, v16);
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)();
  int v18 = 0;
  DateComponents.day.setter();
  DateComponents.month.setter();
  DateComponents.year.setter();
  DateComponents.hour.setter();
  DateComponents.minute.setter();
  static Calendar.current.getter();
  (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v22, v27, v28);
  Calendar.date(from:)();
  uint64_t v30 = *(void (**)(char *, uint64_t))(v20 + 8);
  uint64_t v29 = v20 + 8;
  v30(v22, v28);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v26);
  return ((uint64_t (*)(char *, uint64_t))v30)(v27, v28);
}

uint64_t sleepDayInterval(morningIndex:calendar:)@<X0>(unsigned int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v21 = a3;
  unsigned int v26 = a1;
  uint64_t v25 = a2;
  unint64_t v45 = 0;
  uint64_t v44 = 0;
  int v43 = 0;
  uint64_t v42 = 0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  unint64_t v22 = (*(void *)(*(void *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v3);
  uint64_t v23 = (uint64_t)&v14 - v22;
  unint64_t v24 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)&v14 - v22);
  uint64_t v38 = (uint64_t)&v14 - v24;
  uint64_t v39 = type metadata accessor for Date();
  uint64_t v36 = *(void **)(v39 - 8);
  uint64_t v37 = v39 - 8;
  uint64_t v32 = v36[8];
  unint64_t v27 = (v32 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v5 = MEMORY[0x270FA5388](v26);
  uint64_t v28 = (char *)&v14 - v27;
  unint64_t v29 = (v32 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  uint64_t v30 = (char *)&v14 - v29;
  unint64_t v31 = (v32 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v7 = MEMORY[0x270FA5388](v6);
  uint64_t v33 = (char *)&v14 - v31;
  unint64_t v45 = (char *)&v14 - v31;
  unint64_t v34 = (v32 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v8 = MEMORY[0x270FA5388](v7);
  uint64_t v35 = (char *)&v14 - v34;
  uint64_t v44 = (char *)&v14 - v34;
  int v43 = v8;
  uint64_t v42 = v9;
  sleepDayStartForMorningIndex(morningIndex:calendar:)(v8, v9, v10);
  uint64_t v40 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v36[6];
  uint64_t v41 = v36 + 6;
  if (v40(v38, 1, v39) == 1)
  {
    outlined destroy of Date?(v38);
LABEL_7:
    uint64_t v13 = type metadata accessor for DateInterval();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v21, 1);
  }
  int v18 = (uint64_t (*)(char *, uint64_t, uint64_t))v36[4];
  uint64_t v19 = v36 + 4;
  uint64_t result = v18(v35, v38, v39);
  unsigned int v20 = v26 + 1;
  if (v26 != -1)
  {
    sleepDayStartForMorningIndex(morningIndex:calendar:)(v20, v25, v23);
    if (v40(v23, 1, v39) != 1)
    {
      v18(v33, v23, v39);
      int v15 = (void (*)(char *, char *, uint64_t))v36[2];
      uint64_t v14 = v36 + 2;
      v15(v30, v35, v39);
      v15(v28, v33, v39);
      DateInterval.init(start:end:)();
      uint64_t v12 = type metadata accessor for DateInterval();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v12 - 8) + 56))(v21, 0, 1);
      uint64_t v17 = (void (*)(char *, uint64_t))v36[1];
      unsigned int v16 = v36 + 1;
      v17(v33, v39);
      return ((uint64_t (*)(char *, uint64_t))v17)(v35, v39);
    }
    outlined destroy of Date?(v23);
    ((void (*)(char *, uint64_t))v36[1])(v35, v39);
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t sleepDayStartForMorningIndex(morningIndex:calendar:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (result) {
    return UInt32.toDate(atHour:calendar:)(18, a2, (int)result - 1, a3);
  }
  __break(1u);
  return result;
}

uint64_t outlined destroy of Date?(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1)) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  }
  return a1;
}

Swift::Void __swiftcall Array._endMutation()()
{
  void *v0 = *v0;
}

uint64_t NightingaleDReachLocation.description.getter(char a1)
{
  switch(a1)
  {
    case 1:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PluginStarted", 0xDuLL, 1)._countAndFlagsBits;
      break;
    case 2:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("CTEnrolled", 0xAuLL, 1)._countAndFlagsBits;
      break;
    case 3:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("QueryPregnanciesCompleted", 0x19uLL, 1)._countAndFlagsBits;
      break;
    case 4:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("QueryUpdatingFeaturesCompleted", 0x1EuLL, 1)._countAndFlagsBits;
      break;
    case 5:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("UpdatePregnanciesCompleted", 0x1AuLL, 1)._countAndFlagsBits;
      break;
    case 6:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("CheckValidPregnanciesCompleted", 0x1EuLL, 1)._countAndFlagsBits;
      break;
    case 7:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("UpdateSliceDeltaAnchorCompleted", 0x1FuLL, 1)._countAndFlagsBits;
      break;
    case 8:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("QueryRequiredFeaturesCompleted", 0x1EuLL, 1)._countAndFlagsBits;
      break;
    case 9:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("DemographicsPeriodsCompleted", 0x1CuLL, 1)._countAndFlagsBits;
      break;
    case 10:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("FeaturizationCompleted", 0x16uLL, 1)._countAndFlagsBits;
      break;
    case 11:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("TrainingCompleted", 0x11uLL, 1)._countAndFlagsBits;
      break;
    case 12:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PluginCompleted", 0xFuLL, 1)._countAndFlagsBits;
      break;
    case 13:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PluginStopped", 0xDuLL, 1)._countAndFlagsBits;
      break;
    default:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Unknown", 7uLL, 1)._countAndFlagsBits;
      break;
  }
  return countAndFlagsBits;
}

NightingaleTraining::NightingaleDReachLocation_optional __swiftcall NightingaleDReachLocation.init(rawValue:)(Swift::Int rawValue)
{
  switch(rawValue)
  {
    case 0:
      return 0;
    case 1:
      return (NightingaleTraining::NightingaleDReachLocation_optional)1;
    case 3:
      return (NightingaleTraining::NightingaleDReachLocation_optional)2;
    case 4:
      return (NightingaleTraining::NightingaleDReachLocation_optional)3;
    case 5:
      return (NightingaleTraining::NightingaleDReachLocation_optional)4;
    case 6:
      return (NightingaleTraining::NightingaleDReachLocation_optional)5;
    case 7:
      return (NightingaleTraining::NightingaleDReachLocation_optional)6;
    case 8:
      return (NightingaleTraining::NightingaleDReachLocation_optional)7;
    case 9:
      return (NightingaleTraining::NightingaleDReachLocation_optional)8;
    case 10:
      return (NightingaleTraining::NightingaleDReachLocation_optional)9;
    case 11:
      return (NightingaleTraining::NightingaleDReachLocation_optional)10;
    case 12:
      return (NightingaleTraining::NightingaleDReachLocation_optional)11;
    case 13:
      return (NightingaleTraining::NightingaleDReachLocation_optional)12;
    case 14:
      return (NightingaleTraining::NightingaleDReachLocation_optional)13;
  }
  return (NightingaleTraining::NightingaleDReachLocation_optional)14;
}

uint64_t NightingaleDReachLocation.rawValue.getter(char a1)
{
  switch(a1)
  {
    case 1:
      uint64_t v2 = 1;
      break;
    case 2:
      uint64_t v2 = 3;
      break;
    case 3:
      uint64_t v2 = 4;
      break;
    case 4:
      uint64_t v2 = 5;
      break;
    case 5:
      uint64_t v2 = 6;
      break;
    case 6:
      uint64_t v2 = 7;
      break;
    case 7:
      uint64_t v2 = 8;
      break;
    case 8:
      uint64_t v2 = 9;
      break;
    case 9:
      uint64_t v2 = 10;
      break;
    case 10:
      uint64_t v2 = 11;
      break;
    case 11:
      uint64_t v2 = 12;
      break;
    case 12:
      uint64_t v2 = 13;
      break;
    case 13:
      uint64_t v2 = 14;
      break;
    default:
      uint64_t v2 = 0;
      break;
  }
  return v2;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NightingaleDReachLocation()
{
  return == infix<A>(_:_:)() & 1;
}

unint64_t lazy protocol witness table accessor for type NightingaleDReachLocation and conformance NightingaleDReachLocation()
{
  uint64_t v2 = lazy protocol witness table cache variable for type NightingaleDReachLocation and conformance NightingaleDReachLocation;
  if (!lazy protocol witness table cache variable for type NightingaleDReachLocation and conformance NightingaleDReachLocation)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type NightingaleDReachLocation and conformance NightingaleDReachLocation);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type NightingaleDReachLocation and conformance NightingaleDReachLocation;
  if (!lazy protocol witness table cache variable for type NightingaleDReachLocation and conformance NightingaleDReachLocation)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type NightingaleDReachLocation and conformance NightingaleDReachLocation);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type NightingaleDReachLocation and conformance NightingaleDReachLocation;
  if (!lazy protocol witness table cache variable for type NightingaleDReachLocation and conformance NightingaleDReachLocation)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type NightingaleDReachLocation and conformance NightingaleDReachLocation);
    return WitnessTable;
  }
  return v2;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance NightingaleDReachLocation()
{
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NightingaleDReachLocation()
{
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance NightingaleDReachLocation()
{
  return RawRepresentable<>._rawHashValue(seed:)();
}

NightingaleTraining::NightingaleDReachLocation_optional protocol witness for RawRepresentable.init(rawValue:) in conformance NightingaleDReachLocation@<W0>(Swift::Int *a1@<X0>, NightingaleTraining::NightingaleDReachLocation_optional *a2@<X8>)
{
  result.value = NightingaleDReachLocation.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance NightingaleDReachLocation@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = NightingaleDReachLocation.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NightingaleDReachLocation()
{
  return NightingaleDReachLocation.description.getter(*v0);
}

uint64_t one-time initialization function for keyMetricsLoss()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Loss", 4uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static NightingaleDPFLRunner.keyMetricsLoss = (__int128)v1;
  return result;
}

{
  uint64_t result;
  Swift::String v1;

  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Loss", 4uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static NightingalePFLRunner.keyMetricsLoss = (__int128)v1;
  return result;
}

long long *NightingaleDPFLRunner.keyMetricsLoss.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMetricsLoss != -1) {
    swift_once();
  }
  return &static NightingaleDPFLRunner.keyMetricsLoss;
}

uint64_t one-time initialization function for keyNumSlices()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("NumSlices", 9uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static NightingaleDPFLRunner.keyNumSlices = (__int128)v1;
  return result;
}

{
  uint64_t result;
  Swift::String v1;

  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("NumSlices", 9uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static NightingalePFLRunner.keyNumSlices = (__int128)v1;
  return result;
}

long long *NightingaleDPFLRunner.keyNumSlices.unsafeMutableAddressor()
{
  if (one-time initialization token for keyNumSlices != -1) {
    swift_once();
  }
  return &static NightingaleDPFLRunner.keyNumSlices;
}

uint64_t one-time initialization function for keyMetricsLossBeforeTraining()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("LossBeforeTraining", 0x12uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static NightingaleDPFLRunner.keyMetricsLossBeforeTraining = (__int128)v1;
  return result;
}

{
  uint64_t result;
  Swift::String v1;

  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("LossBeforeTraining", 0x12uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static NightingalePFLRunner.keyMetricsLossBeforeTraining = (__int128)v1;
  return result;
}

long long *NightingaleDPFLRunner.keyMetricsLossBeforeTraining.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMetricsLossBeforeTraining != -1) {
    swift_once();
  }
  return &static NightingaleDPFLRunner.keyMetricsLossBeforeTraining;
}

uint64_t one-time initialization function for keyMetricsCycleTrackingCheckDurationS()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("CycleTrackingCheckDurationS", 0x1BuLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static NightingaleDPFLRunner.keyMetricsCycleTrackingCheckDurationS = (__int128)v1;
  return result;
}

long long *NightingaleDPFLRunner.keyMetricsCycleTrackingCheckDurationS.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMetricsCycleTrackingCheckDurationS != -1) {
    swift_once();
  }
  return &static NightingaleDPFLRunner.keyMetricsCycleTrackingCheckDurationS;
}

uint64_t one-time initialization function for keyMetricsNumberOfAllPregnancies()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("NumberOfAllPregnancies", 0x16uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static NightingaleDPFLRunner.keyMetricsNumberOfAllPregnancies = (__int128)v1;
  return result;
}

long long *NightingaleDPFLRunner.keyMetricsNumberOfAllPregnancies.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMetricsNumberOfAllPregnancies != -1) {
    swift_once();
  }
  return &static NightingaleDPFLRunner.keyMetricsNumberOfAllPregnancies;
}

uint64_t one-time initialization function for keyMetricsNumberOfPregnancyInitializerFailed()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("NumberOfPregnancyInitializerFailed", 0x22uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static NightingaleDPFLRunner.keyMetricsNumberOfPregnancyInitializerFailed = (__int128)v1;
  return result;
}

long long *NightingaleDPFLRunner.keyMetricsNumberOfPregnancyInitializerFailed.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMetricsNumberOfPregnancyInitializerFailed != -1) {
    swift_once();
  }
  return &static NightingaleDPFLRunner.keyMetricsNumberOfPregnancyInitializerFailed;
}

uint64_t one-time initialization function for keyMetricsPregnanciesQueryDurationS()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PregnanciesQueryDurationS", 0x19uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static NightingaleDPFLRunner.keyMetricsPregnanciesQueryDurationS = (__int128)v1;
  return result;
}

long long *NightingaleDPFLRunner.keyMetricsPregnanciesQueryDurationS.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMetricsPregnanciesQueryDurationS != -1) {
    swift_once();
  }
  return &static NightingaleDPFLRunner.keyMetricsPregnanciesQueryDurationS;
}

uint64_t one-time initialization function for keyMetricsUpdatingFeaturesQueryDurationS()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("UpdatingFeaturesQueryDurationS", 0x1EuLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static NightingaleDPFLRunner.keyMetricsUpdatingFeaturesQueryDurationS = (__int128)v1;
  return result;
}

long long *NightingaleDPFLRunner.keyMetricsUpdatingFeaturesQueryDurationS.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMetricsUpdatingFeaturesQueryDurationS != -1) {
    swift_once();
  }
  return &static NightingaleDPFLRunner.keyMetricsUpdatingFeaturesQueryDurationS;
}

uint64_t one-time initialization function for keyMetricsUpdatePregnanciesDurationS()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("UpdatePregnanciesDurationS", 0x1AuLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static NightingaleDPFLRunner.keyMetricsUpdatePregnanciesDurationS = (__int128)v1;
  return result;
}

long long *NightingaleDPFLRunner.keyMetricsUpdatePregnanciesDurationS.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMetricsUpdatePregnanciesDurationS != -1) {
    swift_once();
  }
  return &static NightingaleDPFLRunner.keyMetricsUpdatePregnanciesDurationS;
}

uint64_t one-time initialization function for keyMetricsNumberOfValidPregnancies()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("NumberOfValidPregnancies", 0x18uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static NightingaleDPFLRunner.keyMetricsNumberOfValidPregnancies = (__int128)v1;
  return result;
}

long long *NightingaleDPFLRunner.keyMetricsNumberOfValidPregnancies.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMetricsNumberOfValidPregnancies != -1) {
    swift_once();
  }
  return &static NightingaleDPFLRunner.keyMetricsNumberOfValidPregnancies;
}

uint64_t one-time initialization function for keyMetricsUpdateSliceDeltaAnchorDurationS()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("UpdateSliceDeltaAnchorDurationS", 0x1FuLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static NightingaleDPFLRunner.keyMetricsUpdateSliceDeltaAnchorDurationS = (__int128)v1;
  return result;
}

long long *NightingaleDPFLRunner.keyMetricsUpdateSliceDeltaAnchorDurationS.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMetricsUpdateSliceDeltaAnchorDurationS != -1) {
    swift_once();
  }
  return &static NightingaleDPFLRunner.keyMetricsUpdateSliceDeltaAnchorDurationS;
}

uint64_t one-time initialization function for keyMetricsRequiredFeaturesQueryDurationS()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RequiredFeaturesQueryDurationS", 0x1EuLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static NightingaleDPFLRunner.keyMetricsRequiredFeaturesQueryDurationS = (__int128)v1;
  return result;
}

long long *NightingaleDPFLRunner.keyMetricsRequiredFeaturesQueryDurationS.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMetricsRequiredFeaturesQueryDurationS != -1) {
    swift_once();
  }
  return &static NightingaleDPFLRunner.keyMetricsRequiredFeaturesQueryDurationS;
}

uint64_t one-time initialization function for keyMetricsSHRDurationS()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SHRDurationS", 0xCuLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static NightingaleDPFLRunner.keyMetricsSHRDurationS = (__int128)v1;
  return result;
}

{
  uint64_t result;
  Swift::String v1;

  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SHRDurationS", 0xCuLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static NightingalePFLRunner.keyMetricsSHRDurationS = (__int128)v1;
  return result;
}

long long *NightingaleDPFLRunner.keyMetricsSHRDurationS.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMetricsSHRDurationS != -1) {
    swift_once();
  }
  return &static NightingaleDPFLRunner.keyMetricsSHRDurationS;
}

uint64_t one-time initialization function for keyMetricsFeaturizationDurationS()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("FeaturizationDurationS", 0x16uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static NightingaleDPFLRunner.keyMetricsFeaturizationDurationS = (__int128)v1;
  return result;
}

{
  uint64_t result;
  Swift::String v1;

  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("FeaturizationDurationS", 0x16uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static NightingalePFLRunner.keyMetricsFeaturizationDurationS = (__int128)v1;
  return result;
}

long long *NightingaleDPFLRunner.keyMetricsFeaturizationDurationS.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMetricsFeaturizationDurationS != -1) {
    swift_once();
  }
  return &static NightingaleDPFLRunner.keyMetricsFeaturizationDurationS;
}

uint64_t one-time initialization function for keyMetricsBMIDurationS()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("BMIDurationS", 0xCuLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static NightingaleDPFLRunner.keyMetricsBMIDurationS = (__int128)v1;
  return result;
}

{
  uint64_t result;
  Swift::String v1;

  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("BMIDurationS", 0xCuLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static NightingalePFLRunner.keyMetricsBMIDurationS = (__int128)v1;
  return result;
}

long long *NightingaleDPFLRunner.keyMetricsBMIDurationS.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMetricsBMIDurationS != -1) {
    swift_once();
  }
  return &static NightingaleDPFLRunner.keyMetricsBMIDurationS;
}

uint64_t one-time initialization function for keyMetricsTrainingDurationS()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("TrainingDurationS", 0x11uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static NightingaleDPFLRunner.keyMetricsTrainingDurationS = (__int128)v1;
  return result;
}

{
  uint64_t result;
  Swift::String v1;

  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("TrainingDurationS", 0x11uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static NightingalePFLRunner.keyMetricsTrainingDurationS = (__int128)v1;
  return result;
}

long long *NightingaleDPFLRunner.keyMetricsTrainingDurationS.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMetricsTrainingDurationS != -1) {
    swift_once();
  }
  return &static NightingaleDPFLRunner.keyMetricsTrainingDurationS;
}

uint64_t one-time initialization function for keyMetricsE2EDurationS()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("E2EPluginDurationS", 0x12uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static NightingaleDPFLRunner.keyMetricsE2EDurationS = (__int128)v1;
  return result;
}

{
  uint64_t result;
  Swift::String v1;

  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("E2EPluginDurationS", 0x12uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static NightingalePFLRunner.keyMetricsE2EDurationS = (__int128)v1;
  return result;
}

long long *NightingaleDPFLRunner.keyMetricsE2EDurationS.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMetricsE2EDurationS != -1) {
    swift_once();
  }
  return &static NightingaleDPFLRunner.keyMetricsE2EDurationS;
}

uint64_t one-time initialization function for keyMetricsL2Norm()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("L2Norm", 6uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static NightingaleDPFLRunner.keyMetricsL2Norm = (__int128)v1;
  return result;
}

{
  uint64_t result;
  Swift::String v1;

  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("L2Norm", 6uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static NightingalePFLRunner.keyMetricsL2Norm = (__int128)v1;
  return result;
}

long long *NightingaleDPFLRunner.keyMetricsL2Norm.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMetricsL2Norm != -1) {
    swift_once();
  }
  return &static NightingaleDPFLRunner.keyMetricsL2Norm;
}

uint64_t one-time initialization function for keyMetricsIterationElapsedTime()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("IterationElapsedTime", 0x14uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static NightingaleDPFLRunner.keyMetricsIterationElapsedTime = (__int128)v1;
  return result;
}

{
  uint64_t result;
  Swift::String v1;

  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("IterationElapsedTime", 0x14uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static NightingalePFLRunner.keyMetricsIterationElapsedTime = (__int128)v1;
  return result;
}

long long *NightingaleDPFLRunner.keyMetricsIterationElapsedTime.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMetricsIterationElapsedTime != -1) {
    swift_once();
  }
  return &static NightingaleDPFLRunner.keyMetricsIterationElapsedTime;
}

uint64_t one-time initialization function for keyMetricsInvalidDurationPregnanciesCount()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("InvalidDurationPregnanciesCount", 0x1FuLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static NightingaleDPFLRunner.keyMetricsInvalidDurationPregnanciesCount = (__int128)v1;
  return result;
}

long long *NightingaleDPFLRunner.keyMetricsInvalidDurationPregnanciesCount.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMetricsInvalidDurationPregnanciesCount != -1) {
    swift_once();
  }
  return &static NightingaleDPFLRunner.keyMetricsInvalidDurationPregnanciesCount;
}

uint64_t one-time initialization function for keyMetricsInvalidLMPDeltaPregnanciesCount()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("InvalidLMPDeltaPregnanciesCount", 0x1FuLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static NightingaleDPFLRunner.keyMetricsInvalidLMPDeltaPregnanciesCount = (__int128)v1;
  return result;
}

long long *NightingaleDPFLRunner.keyMetricsInvalidLMPDeltaPregnanciesCount.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMetricsInvalidLMPDeltaPregnanciesCount != -1) {
    swift_once();
  }
  return &static NightingaleDPFLRunner.keyMetricsInvalidLMPDeltaPregnanciesCount;
}

uint64_t one-time initialization function for keyMetricsContainsFlowPregnanciesCount()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ContainsFlowPregnanciesCount", 0x1CuLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static NightingaleDPFLRunner.keyMetricsContainsFlowPregnanciesCount = (__int128)v1;
  return result;
}

long long *NightingaleDPFLRunner.keyMetricsContainsFlowPregnanciesCount.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMetricsContainsFlowPregnanciesCount != -1) {
    swift_once();
  }
  return &static NightingaleDPFLRunner.keyMetricsContainsFlowPregnanciesCount;
}

uint64_t one-time initialization function for keyMetricsInvalidLMPPregnanciesCount()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("InvalidLMPPregnanciesCount", 0x1AuLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static NightingaleDPFLRunner.keyMetricsInvalidLMPPregnanciesCount = (__int128)v1;
  return result;
}

long long *NightingaleDPFLRunner.keyMetricsInvalidLMPPregnanciesCount.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMetricsInvalidLMPPregnanciesCount != -1) {
    swift_once();
  }
  return &static NightingaleDPFLRunner.keyMetricsInvalidLMPPregnanciesCount;
}

uint64_t one-time initialization function for keyMetricsInvalidEndPregnanciesCount()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("InvalidEndPregnanciesCount", 0x1AuLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static NightingaleDPFLRunner.keyMetricsInvalidEndPregnanciesCount = (__int128)v1;
  return result;
}

long long *NightingaleDPFLRunner.keyMetricsInvalidEndPregnanciesCount.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMetricsInvalidEndPregnanciesCount != -1) {
    swift_once();
  }
  return &static NightingaleDPFLRunner.keyMetricsInvalidEndPregnanciesCount;
}

uint64_t one-time initialization function for keyMetricsInvalidStartSourcePregnanciesCount()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("InvalidStartSourceCount", 0x17uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static NightingaleDPFLRunner.keyMetricsInvalidStartSourcePregnanciesCount = (__int128)v1;
  return result;
}

long long *NightingaleDPFLRunner.keyMetricsInvalidStartSourcePregnanciesCount.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMetricsInvalidStartSourcePregnanciesCount != -1) {
    swift_once();
  }
  return &static NightingaleDPFLRunner.keyMetricsInvalidStartSourcePregnanciesCount;
}

uint64_t one-time initialization function for keyMetricsFailedToQueryUpdatingFeaturesCount()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("FailedToQueryUpdatingFeaturesCount", 0x22uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static NightingaleDPFLRunner.keyMetricsFailedToQueryUpdatingFeaturesCount = (__int128)v1;
  return result;
}

long long *NightingaleDPFLRunner.keyMetricsFailedToQueryUpdatingFeaturesCount.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMetricsFailedToQueryUpdatingFeaturesCount != -1) {
    swift_once();
  }
  return &static NightingaleDPFLRunner.keyMetricsFailedToQueryUpdatingFeaturesCount;
}

uint64_t one-time initialization function for keyMetricsFailedToQuerySWTCount()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("FailedToQuerySWTCount", 0x15uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static NightingaleDPFLRunner.keyMetricsFailedToQuerySWTCount = (__int128)v1;
  return result;
}

long long *NightingaleDPFLRunner.keyMetricsFailedToQuerySWTCount.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMetricsFailedToQuerySWTCount != -1) {
    swift_once();
  }
  return &static NightingaleDPFLRunner.keyMetricsFailedToQuerySWTCount;
}

uint64_t one-time initialization function for keyMetricsFailedToGetHistoricalPeriodsCount()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("FailedToGetHistoricalPeriodsCount", 0x21uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static NightingaleDPFLRunner.keyMetricsFailedToGetHistoricalPeriodsCount = (__int128)v1;
  return result;
}

long long *NightingaleDPFLRunner.keyMetricsFailedToGetHistoricalPeriodsCount.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMetricsFailedToGetHistoricalPeriodsCount != -1) {
    swift_once();
  }
  return &static NightingaleDPFLRunner.keyMetricsFailedToGetHistoricalPeriodsCount;
}

uint64_t one-time initialization function for keyMetricsOverlappingPregnanciesCount()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("OverlappingPregnanciesCount", 0x1BuLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static NightingaleDPFLRunner.keyMetricsOverlappingPregnanciesCount = (__int128)v1;
  return result;
}

long long *NightingaleDPFLRunner.keyMetricsOverlappingPregnanciesCount.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMetricsOverlappingPregnanciesCount != -1) {
    swift_once();
  }
  return &static NightingaleDPFLRunner.keyMetricsOverlappingPregnanciesCount;
}

uint64_t one-time initialization function for keyMetricsCycleTP()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Cycle_TP", 8uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static NightingaleDPFLRunner.keyMetricsCycleTP = (__int128)v1;
  return result;
}

long long *NightingaleDPFLRunner.keyMetricsCycleTP.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMetricsCycleTP != -1) {
    swift_once();
  }
  return &static NightingaleDPFLRunner.keyMetricsCycleTP;
}

uint64_t one-time initialization function for keyMetricsCycleTPR()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Cycle_TPR", 9uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static NightingaleDPFLRunner.keyMetricsCycleTPR = (__int128)v1;
  return result;
}

long long *NightingaleDPFLRunner.keyMetricsCycleTPR.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMetricsCycleTPR != -1) {
    swift_once();
  }
  return &static NightingaleDPFLRunner.keyMetricsCycleTPR;
}

uint64_t one-time initialization function for keyMetricsCycleFP()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Cycle_FP", 8uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static NightingaleDPFLRunner.keyMetricsCycleFP = (__int128)v1;
  return result;
}

long long *NightingaleDPFLRunner.keyMetricsCycleFP.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMetricsCycleFP != -1) {
    swift_once();
  }
  return &static NightingaleDPFLRunner.keyMetricsCycleFP;
}

uint64_t one-time initialization function for keyMetricsCycleFPR()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Cycle_FPR", 9uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static NightingaleDPFLRunner.keyMetricsCycleFPR = (__int128)v1;
  return result;
}

long long *NightingaleDPFLRunner.keyMetricsCycleFPR.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMetricsCycleFPR != -1) {
    swift_once();
  }
  return &static NightingaleDPFLRunner.keyMetricsCycleFPR;
}

uint64_t one-time initialization function for keyMetricsNumberOfPregnantCycles()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("NumberOfPregnantCycles", 0x16uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static NightingaleDPFLRunner.keyMetricsNumberOfPregnantCycles = (__int128)v1;
  return result;
}

long long *NightingaleDPFLRunner.keyMetricsNumberOfPregnantCycles.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMetricsNumberOfPregnantCycles != -1) {
    swift_once();
  }
  return &static NightingaleDPFLRunner.keyMetricsNumberOfPregnantCycles;
}

uint64_t one-time initialization function for keyMetricsNumberOfNonPregnantCycles()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("NumberOfNonPregnantCycles", 0x19uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static NightingaleDPFLRunner.keyMetricsNumberOfNonPregnantCycles = (__int128)v1;
  return result;
}

long long *NightingaleDPFLRunner.keyMetricsNumberOfNonPregnantCycles.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMetricsNumberOfNonPregnantCycles != -1) {
    swift_once();
  }
  return &static NightingaleDPFLRunner.keyMetricsNumberOfNonPregnantCycles;
}

uint64_t one-time initialization function for keyMetricsCycleLatency()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Cycle_Latency", 0xDuLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static NightingaleDPFLRunner.keyMetricsCycleLatency = (__int128)v1;
  return result;
}

long long *NightingaleDPFLRunner.keyMetricsCycleLatency.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMetricsCycleLatency != -1) {
    swift_once();
  }
  return &static NightingaleDPFLRunner.keyMetricsCycleLatency;
}

uint64_t one-time initialization function for keyMetricsCycleLatencyBuckets()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Cycle_LatencyBuckets", 0x14uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static NightingaleDPFLRunner.keyMetricsCycleLatencyBuckets = (__int128)v1;
  return result;
}

long long *NightingaleDPFLRunner.keyMetricsCycleLatencyBuckets.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMetricsCycleLatencyBuckets != -1) {
    swift_once();
  }
  return &static NightingaleDPFLRunner.keyMetricsCycleLatencyBuckets;
}

uint64_t one-time initialization function for keyMetricsSliceROCScore()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Slice_ROCScore", 0xEuLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static NightingaleDPFLRunner.keyMetricsSliceROCScore = (__int128)v1;
  return result;
}

long long *NightingaleDPFLRunner.keyMetricsSliceROCScore.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMetricsSliceROCScore != -1) {
    swift_once();
  }
  return &static NightingaleDPFLRunner.keyMetricsSliceROCScore;
}

uint64_t one-time initialization function for keyMetricsSlicePRScore()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Slice_PRScore", 0xDuLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static NightingaleDPFLRunner.keyMetricsSlicePRScore = (__int128)v1;
  return result;
}

long long *NightingaleDPFLRunner.keyMetricsSlicePRScore.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMetricsSlicePRScore != -1) {
    swift_once();
  }
  return &static NightingaleDPFLRunner.keyMetricsSlicePRScore;
}

uint64_t one-time initialization function for keyMetricsSliceConfusionMatricsTP()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Slice_ConfusionMatricsTP", 0x18uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static NightingaleDPFLRunner.keyMetricsSliceConfusionMatricsTP = (__int128)v1;
  return result;
}

long long *NightingaleDPFLRunner.keyMetricsSliceConfusionMatricsTP.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMetricsSliceConfusionMatricsTP != -1) {
    swift_once();
  }
  return &static NightingaleDPFLRunner.keyMetricsSliceConfusionMatricsTP;
}

uint64_t one-time initialization function for keyMetricsSliceConfusionMatricsFP()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Slice_ConfusionMatricsFP", 0x18uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static NightingaleDPFLRunner.keyMetricsSliceConfusionMatricsFP = (__int128)v1;
  return result;
}

long long *NightingaleDPFLRunner.keyMetricsSliceConfusionMatricsFP.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMetricsSliceConfusionMatricsFP != -1) {
    swift_once();
  }
  return &static NightingaleDPFLRunner.keyMetricsSliceConfusionMatricsFP;
}

uint64_t one-time initialization function for keyMetricsSliceConfusionMatricsTN()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Slice_ConfusionMatricsTN", 0x18uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static NightingaleDPFLRunner.keyMetricsSliceConfusionMatricsTN = (__int128)v1;
  return result;
}

long long *NightingaleDPFLRunner.keyMetricsSliceConfusionMatricsTN.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMetricsSliceConfusionMatricsTN != -1) {
    swift_once();
  }
  return &static NightingaleDPFLRunner.keyMetricsSliceConfusionMatricsTN;
}

uint64_t one-time initialization function for keyMetricsSliceConfusionMatricsFN()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Slice_ConfusionMatricsFN", 0x18uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static NightingaleDPFLRunner.keyMetricsSliceConfusionMatricsFN = (__int128)v1;
  return result;
}

long long *NightingaleDPFLRunner.keyMetricsSliceConfusionMatricsFN.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMetricsSliceConfusionMatricsFN != -1) {
    swift_once();
  }
  return &static NightingaleDPFLRunner.keyMetricsSliceConfusionMatricsFN;
}

uint64_t NightingaleDPFLRunner.performanceMeasure.getter()
{
  swift_beginAccess();
  uint64_t v2 = *(void *)(v0 + 16);
  swift_retain();
  swift_endAccess();
  return v2;
}

uint64_t NightingaleDPFLRunner.performanceMeasure.setter(uint64_t a1)
{
  swift_retain();
  swift_beginAccess();
  *(void *)(v1 + 16) = a1;
  swift_release();
  swift_endAccess();
  return swift_release();
}

uint64_t (*NightingaleDPFLRunner.performanceMeasure.modify())()
{
  return NightingaleDPFLRunner.performanceMeasure.modify;
}

uint64_t NightingaleDPFLRunner.performanceMeasure.modify()
{
  return swift_endAccess();
}

uint64_t NightingaleDPFLRunner.taskId.getter()
{
  swift_beginAccess();
  uint64_t v2 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  swift_endAccess();
  return v2;
}

uint64_t NightingaleDPFLRunner.taskId.setter(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  swift_beginAccess();
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = a2;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t (*NightingaleDPFLRunner.taskId.modify())()
{
  return NightingaleDPFLRunner.performanceMeasure.modify;
}

uint64_t NightingaleDPFLRunner.useCase.getter@<X0>(unsigned char *a1@<X8>)
{
  swift_beginAccess();
  char v4 = *(unsigned char *)(v1 + 40);
  uint64_t result = swift_endAccess();
  *a1 = v4;
  return result;
}

uint64_t NightingaleDPFLRunner.useCase.setter(char *a1)
{
  char v3 = *a1;
  swift_beginAccess();
  *(unsigned char *)(v1 + 40) = v3;
  return swift_endAccess();
}

uint64_t (*NightingaleDPFLRunner.useCase.modify())()
{
  return NightingaleDPFLRunner.performanceMeasure.modify;
}

uint64_t NightingaleDPFLRunner.__allocating_init(useCase:)(char *a1)
{
  char v7 = 0;
  char v7 = *a1;
  char v6 = v7;
  uint64_t v3 = type metadata accessor for HealthDataStoreQuery();
  type metadata accessor for HKHealthStore();
  v1.super.Class isa = HKHealthStore.__allocating_init()().super.isa;
  v5[3] = v3;
  v5[4] = &protocol witness table for HealthDataStoreQuery;
  v5[0] = HealthDataStoreQuery.__allocating_init(store:)(v1.super.isa);
  uint64_t v4 = NightingaleDPFLRunner.__allocating_init(useCase:query:)(&v6, (uint64_t)v5);
  swift_retain();
  uint64_t v8 = v4;
  swift_release();
  return v4;
}

unint64_t type metadata accessor for HKHealthStore()
{
  uint64_t v2 = lazy cache variable for type metadata for HKHealthStore;
  if (!lazy cache variable for type metadata for HKHealthStore)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HKHealthStore);
    return ObjCClassMetadata;
  }
  return v2;
}

HKHealthStore __swiftcall HKHealthStore.__allocating_init()()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return (HKHealthStore)@nonobjc HKHealthStore.init()();
}

uint64_t NightingaleDPFLRunner.__allocating_init(useCase:query:)(char *a1, uint64_t a2)
{
  return NightingaleDPFLRunner.init(useCase:query:)(a1, a2);
}

uint64_t NightingaleDPFLRunner.init(useCase:query:)(char *a1, uint64_t a2)
{
  char v10 = 0;
  uint64_t v9 = 0;
  uint64_t v8 = 0;
  char v10 = *a1;
  char v4 = v10;
  uint64_t v9 = a2;
  uint64_t v8 = v2;
  *(Swift::String *)(v2 + 24) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  type metadata accessor for PerformanceMeasure();
  *(void *)(v6 + 16) = PerformanceMeasure.__allocating_init()();
  *(unsigned char *)(v6 + 40) = v4;
  outlined init with copy of HealthDataQuery(a2, (uint64_t)v7);
  outlined init with take of HealthDataQuery(v7, (void *)(v6 + 48));
  __swift_destroy_boxed_opaque_existential_1(a2);
  return v6;
}

uint64_t outlined init with copy of HealthDataQuery(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v2;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t))(v2 - 8))(a2);
  return a2;
}

void *outlined init with take of HealthDataQuery(const void *a1, void *__dst)
{
  return __dst;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if ((*(_DWORD *)(*(void *)(v2 - 8) + 80) & 0x20000) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(uint64_t))(*(void *)(v2 - 8) + 8))(a1);
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NightingaleDPFLRunner.performCustomConsent()()
{
  uint64_t v8 = 0;
  outlined init with copy of HealthDataQuery(v0 + 48, (uint64_t)v5);
  uint64_t v2 = v6;
  uint64_t v3 = v7;
  __swift_project_boxed_opaque_existential_1(v5, v6);
  id v4 = (id)(*(uint64_t (**)(void, void, uint64_t))(v3 + 48))(0, 0, v2);
  if (!v1) {

  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  int v2 = *(_DWORD *)(*(void *)(a2 - 8) + 80);
  if ((v2 & 0x20000) != 0) {
    return (void *)(*result + ((v2 + 16) & ~(unint64_t)v2));
  }
  return result;
}

uint64_t NightingaleDPFLRunner.isDataAvailable()()
{
  return (*(uint64_t (**)(uint64_t))(v1 + 8))(1);
}

uint64_t NightingaleDPFLRunner.shouldContinueAfterFailure(task:useCase:)()
{
  return 1;
}

uint64_t NightingaleDPFLRunner.run(task:useCase:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v5 + 2680) = v4;
  *(void *)(v5 + 2672) = a1;
  *(void *)(v5 + 1688) = v5;
  *(void *)(v5 + 1696) = 0;
  *(void *)(v5 + 1640) = 0;
  *(void *)(v5 + 1648) = 0;
  *(void *)(v5 + 1704) = 0;
  *(void *)(v5 + 1712) = 0;
  *(void *)(v5 + 1720) = 0;
  *(void *)(v5 + 1728) = 0;
  *(void *)(v5 + 1736) = 0;
  *(void *)(v5 + 1744) = 0;
  *(void *)(v5 + 1752) = 0;
  *(void *)(v5 + 1760) = 0;
  *(void *)(v5 + 1768) = 0;
  *(unsigned char *)(v5 + 3608) = 0;
  *(void *)(v5 + 1656) = 0;
  *(void *)(v5 + 1664) = 0;
  *(_DWORD *)(v5 + 3504) = 0;
  *(_DWORD *)(v5 + 3512) = 0;
  *(void *)(v5 + 1776) = 0;
  *(void *)(v5 + 1784) = 0;
  *(void *)(v5 + 1792) = 0;
  *(void *)(v5 + 1800) = 0;
  *(void *)(v5 + 1808) = 0;
  *(void *)(v5 + 1816) = 0;
  *(void *)(v5 + 1824) = 0;
  *(void *)(v5 + 1832) = 0;
  *(void *)(v5 + 1840) = 0;
  *(void *)(v5 + 1848) = 0;
  *(void *)(v5 + 1856) = 0;
  *(void *)(v5 + 1864) = 0;
  *(void *)(v5 + 1872) = 0;
  *(void *)(v5 + 1880) = 0;
  *(void *)(v5 + 1888) = 0;
  *(_DWORD *)(v5 + 3520) = 0;
  *(void *)(v5 + 1896) = 0;
  *(void *)(v5 + 1904) = 0;
  *(void *)(v5 + 1912) = 0;
  *(void *)(v5 + 1928) = 0;
  *(void *)(v5 + 1952) = 0;
  *(void *)(v5 + 1968) = 0;
  *(void *)(v5 + 1592) = 0;
  *(void *)(v5 + 1600) = 0;
  *(void *)(v5 + 1608) = 0;
  *(void *)(v5 + 1984) = 0;
  *(void *)(v5 + 1992) = 0;
  *(void *)(v5 + 2000) = 0;
  *(void *)(v5 + 2008) = 0;
  *(void *)(v5 + 2024) = 0;
  *(void *)(v5 + 2040) = 0;
  *(void *)(v5 + 2056) = 0;
  *(void *)(v5 + 2072) = 0;
  *(void *)(v5 + 2088) = 0;
  *(void *)(v5 + 2104) = 0;
  *(void *)(v5 + 2120) = 0;
  *(void *)(v5 + 2128) = 0;
  *(void *)(v5 + 2136) = 0;
  *(_DWORD *)(v5 + 3528) = 0;
  *(_DWORD *)(v5 + 3536) = 0;
  *(void *)(v5 + 1548) = 0;
  *(void *)(v5 + 2200) = 0;
  *(void *)(v5 + 2216) = 0;
  *(void *)(v5 + 2224) = 0;
  *(void *)(v5 + 2232) = 0;
  *(void *)(v5 + 2240) = 0;
  *(void *)(v5 + 2248) = 0;
  *(_DWORD *)(v5 + 3544) = 0;
  *(_DWORD *)(v5 + 3552) = 0;
  *(void *)(v5 + 2256) = 0;
  *(void *)(v5 + 1672) = 0;
  *(void *)(v5 + 1680) = 0;
  *(_DWORD *)(v5 + 3560) = 0;
  *(void *)(v5 + 2272) = 0;
  *(_DWORD *)(v5 + 3568) = 0;
  *(_DWORD *)(v5 + 3576) = 0;
  *(void *)(v5 + 2312) = 0;
  *(void *)(v5 + 2328) = 0;
  *(void *)(v5 + 1616) = 0;
  *(void *)(v5 + 1624) = 0;
  *(void *)(v5 + 1632) = 0;
  *(void *)(v5 + 2376) = 0;
  *(_DWORD *)(v5 + 3584) = 0;
  *(_DWORD *)(v5 + 3592) = 0;
  *(_DWORD *)(v5 + 3600) = 0;
  *(void *)(v5 + 1572) = 0;
  *(void *)(v5 + 2488) = 0;
  *(void *)(v5 + 2496) = 0;
  *(void *)(v5 + 2512) = 0;
  *(void *)(v5 + 2528) = 0;
  *(void *)(v5 + 2600) = 0;
  uint64_t v6 = type metadata accessor for Logger();
  *(void *)(v5 + 2688) = v6;
  *(void *)(v5 + 2696) = *(void *)(v6 - 8);
  *(void *)(v5 + 2704) = swift_task_alloc();
  *(void *)(v5 + 2712) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PFLError?);
  *(void *)(v5 + 2720) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for PFLError();
  *(void *)(v5 + 2728) = v7;
  *(void *)(v5 + 2736) = *(void *)(v7 - 8);
  *(void *)(v5 + 2744) = swift_task_alloc();
  *(void *)(v5 + 2752) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for DateComponents();
  *(void *)(v5 + 2760) = v8;
  *(void *)(v5 + 2768) = *(void *)(v8 - 8);
  *(void *)(v5 + 2776) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  *(void *)(v5 + 2784) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Date();
  *(void *)(v5 + 2792) = v9;
  *(void *)(v5 + 2800) = *(void *)(v9 - 8);
  *(void *)(v5 + 2808) = swift_task_alloc();
  *(void *)(v5 + 1696) = a1;
  *(void *)(v5 + 1640) = a2;
  *(void *)(v5 + 1648) = a3;
  *(void *)(v5 + 1704) = a4;
  *(void *)(v5 + 1712) = v4;
  return MEMORY[0x270FA2498](NightingaleDPFLRunner.run(task:useCase:context:), 0);
}

uint64_t NightingaleDPFLRunner.run(task:useCase:context:)()
{
  uint64_t v32 = *(void *)(v0 + 2680);
  uint64_t v34 = *(void *)(v0 + 2672);
  *(void *)(v0 + 1688) = v0;
  uint64_t v1 = PFLTask.taskId.getter();
  NightingaleDPFLRunner.taskId.setter(v1, v2);
  type metadata accessor for HyperParams();
  dispatch thunk of PFLTask.recipe.getter();
  uint64_t v3 = _dictionaryUpCast<A, B, C, D>(_:)();
  uint64_t v33 = HyperParams.__allocating_init(recipe:)(v3);
  *(void *)(v0 + 2816) = v33;
  swift_bridgeObjectRelease();
  *(void *)(v0 + 1720) = v33;
  Swift::Int v4 = default argument 1 of NightingaleDPFLRunner.sendLocation(_:_:)();
  NightingaleDPFLRunner.sendLocation(_:_:)(NightingaleTraining_NightingaleDReachLocation_pluginStarted, v4);
  Swift::Double v5 = PFLTask.iterationElapsedTime()();
  *(Swift::Double *)(v0 + 2824) = v5;
  *(Swift::Double *)(v0 + 1728) = v5;
  NightingaleDPFLRunner.performanceMeasure.getter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PluginE2E", 9uLL, 1);
  dispatch thunk of PerformanceMeasure.start(_:)();
  swift_bridgeObjectRelease();
  swift_release();
  NightingaleDPFLRunner.performanceMeasure.getter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("CheckCycleTracking", 0x12uLL, 1);
  dispatch thunk of PerformanceMeasure.start(_:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v35 = (void *)swift_task_alloc();
  v35[2] = v32;
  v35[3] = v33;
  v35[4] = v34;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NgtMenstrualAlgorithmsDayStreamProcessorConfig, Double, Double, NgtMenstrualAlgorithmsMLModelConfig));
  NightingaleDPFLRunner.sendLocation<A>(location:force:work:)(2, 1, (uint64_t)v35, v6, v0 + 1072);
  swift_task_dealloc();
  swift_release();
  swift_release();
  swift_release();
  id v27 = *(id *)(v31 + 1072);
  *(void *)(v31 + 2832) = v27;
  uint64_t v7 = *(void *)(v31 + 1080);
  *(void *)(v31 + 2840) = v7;
  uint64_t v8 = *(void *)(v31 + 1088);
  *(void *)(v31 + 2848) = v8;
  id v28 = *(id *)(v31 + 1096);
  *(void *)(v31 + 2856) = v28;
  *(void *)(v31 + 1736) = v27;
  *(void *)(v31 + 1744) = v7;
  *(void *)(v31 + 1752) = v8;
  *(void *)(v31 + 1760) = v28;
  NightingaleDPFLRunner.performanceMeasure.getter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("CheckCycleTracking", 0x12uLL, 1);
  dispatch thunk of PerformanceMeasure.finish(_:)();
  uint64_t v29 = v9;
  *(void *)(v31 + 2864) = v9;
  swift_bridgeObjectRelease();
  swift_release();
  *(void *)(v31 + 1768) = v29;
  char v10 = HyperParams.pflTaskType.getter();
  *(unsigned char *)(v31 + 3693) = v10;
  *(unsigned char *)(v31 + 3608) = v10;
  uint64_t v30 = PFLTask.trainingModelPath(taskType:hyperParams:)();
  *(void *)(v31 + 2872) = v30;
  *(void *)(v31 + 2880) = v11;
  uint64_t v24 = *(void *)(v31 + 2808);
  uint64_t v23 = *(void *)(v31 + 2792);
  uint64_t v22 = *(void *)(v31 + 2800);
  *(void *)(v31 + 1656) = v30;
  *(void *)(v31 + 1664) = v11;
  unsigned int v21 = HyperParams.maximumDays.getter();
  *(_DWORD *)(v31 + 3504) = v21;
  Date.init()();
  *(Swift::UInt32_optional *)&uint64_t v12 = Date.toJulianDay()();
  unsigned int v25 = v12;
  *(_DWORD *)(v31 + 3632) = v12;
  char v26 = BYTE4(v12);
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v24, v23);
  if ((v26 & 1) != 0 || (*(_DWORD *)(v31 + 3512) = v25, v21 >= v25))
  {
    lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
    swift_allocError();
    unsigned char *v16 = 14;
    swift_willThrow();
    swift_bridgeObjectRelease();

    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v17 = *(uint64_t (**)())(*(void *)(v31 + 1688) + 8);
    return v17();
  }
  else
  {
    uint64_t v18 = *(void *)(v31 + 2680);
    *(void *)(v31 + 2888) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt32, UInt8));
    _allocateUninitializedArray<A>(_:)();
    *(void *)(v31 + 1776) = Dictionary.init(dictionaryLiteral:)();
    _allocateUninitializedArray<A>(_:)();
    *(void *)(v31 + 1784) = Dictionary.init(dictionaryLiteral:)();
    *(void *)(v31 + 2896) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt32, Bool));
    _allocateUninitializedArray<A>(_:)();
    *(void *)(v31 + 1792) = Dictionary.init(dictionaryLiteral:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt8, [(start: UInt32, end: UInt32)]));
    _allocateUninitializedArray<A>(_:)();
    *(void *)(v31 + 2904) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(start: UInt32, end: UInt32)]);
    *(void *)(v31 + 1800) = Dictionary.init(dictionaryLiteral:)();
    *(void *)(v31 + 2912) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt32, (Float, String)));
    _allocateUninitializedArray<A>(_:)();
    *(void *)(v31 + 2920) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Float, String));
    *(void *)(v31 + 1808) = Dictionary.init(dictionaryLiteral:)();
    *(void *)(v31 + 1816) = Dictionary.init()();
    *(void *)(v31 + 1824) = Dictionary.init()();
    *(void *)(v31 + 1832) = Dictionary.init()();
    *(void *)(v31 + 1840) = Dictionary.init()();
    *(void *)(v31 + 1848) = Dictionary.init()();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt32, (periodStartMean: Float, periodStartStd: Float)));
    _allocateUninitializedArray<A>(_:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (periodStartMean: Float, periodStartStd: Float));
    *(void *)(v31 + 1856) = Dictionary.init(dictionaryLiteral:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (start: UInt32, end: UInt32));
    *(void *)(v31 + 1864) = _allocateUninitializedArray<A>(_:)();
    NightingaleDPFLRunner.performanceMeasure.getter();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("QueryPregnancies", 0x10uLL, 1);
    dispatch thunk of PerformanceMeasure.start(_:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_retain();
    swift_retain();
    uint64_t v19 = swift_task_alloc();
    *(void *)(v31 + 2928) = v19;
    *(void *)(v19 + 16) = v18;
    *(void *)(v19 + 24) = v33;
    uint64_t v20 = swift_task_alloc();
    *(void *)(v31 + 2936) = v20;
    *(void *)(v20 + 16) = &async function pointer to partial apply for closure #2 in NightingaleDPFLRunner.run(task:useCase:context:);
    *(void *)(v20 + 24) = v19;
    uint64_t v13 = (void *)swift_task_alloc();
    *(void *)(v31 + 2944) = v13;
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, Int, [Pregnancy], UInt32));
    void *v13 = *(void *)(v31 + 1688);
    v13[1] = NightingaleDPFLRunner.run(task:useCase:context:);
    return NightingaleDPFLRunner.sendLocationAsync<A>(location:force:work:)(v31 + 1520, 3, 1, (int *)&async function pointer to partial apply for thunk for @callee_guaranteed @async () -> (@unowned Int, @unowned Int, @owned [Pregnancy], @unowned UInt32, @error @owned Error), v20, v14);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;

  Swift::Int v4 = *v1;
  *(void *)(v4 + 1688) = *v1;
  *(void *)(v4 + 2952) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = NightingaleDPFLRunner.run(task:useCase:context:);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_release();
    swift_release();
    uint64_t v2 = NightingaleDPFLRunner.run(task:useCase:context:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v9;
  uint64_t v10;
  id v11;
  double v12;
  double v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  uint64_t v18 = *(_DWORD *)(v0 + 3632);
  uint64_t v11 = *(id *)(v0 + 2856);
  uint64_t v13 = *(double *)(v0 + 2848);
  uint64_t v12 = *(double *)(v0 + 2840);
  uint64_t v14 = *(id *)(v0 + 2832);
  uint64_t v15 = *(void *)(v0 + 2816);
  unsigned int v16 = *(void *)(v0 + 2680);
  *(void *)(v0 + 1688) = v0;
  uint64_t v1 = *(void *)(v0 + 1520);
  *(void *)(v0 + 2960) = v1;
  uint64_t v2 = *(void *)(v0 + 1528);
  *(void *)(v0 + 2968) = v2;
  char v10 = *(void *)(v0 + 1536);
  *(void *)(v0 + 2976) = v10;
  uint64_t v17 = *(_DWORD *)(v0 + 1544);
  *(_DWORD *)(v0 + 3636) = v17;
  *(void *)(v0 + 1872) = v1;
  *(void *)(v0 + 1880) = v2;
  *(void *)(v0 + 1888) = v10;
  *(_DWORD *)(v0 + 3520) = v17;
  NightingaleDPFLRunner.performanceMeasure.getter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("QueryPregnancies", 0x10uLL, 1);
  dispatch thunk of PerformanceMeasure.finish(_:)();
  uint64_t v9 = v3;
  *(void *)(v0 + 2984) = v3;
  swift_bridgeObjectRelease();
  swift_release();
  *(void *)(v0 + 1896) = v9;
  swift_bridgeObjectRetain();
  *(void *)(v0 + 1904) = v10;
  NightingaleDPFLRunner.performanceMeasure.getter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("QueryUpdatingFeatures", 0x15uLL, 1);
  dispatch thunk of PerformanceMeasure.start(_:)();
  swift_bridgeObjectRelease();
  swift_release();
  type metadata accessor for CalendarPeriodPrediction();
  Swift::Int v4 = v14;
  Swift::Double v5 = v11;
  uint64_t v6 = CalendarPeriodPrediction.__allocating_init(config:mlConfig:urCycleLength:urPeriodLength:)(v14, v11, v12, v13);
  *(void *)(v0 + 2992) = v6;
  *(void *)(v0 + 1912) = v6;
  swift_retain();
  swift_retain();
  unsigned int v21 = swift_task_alloc();
  *(void *)(v0 + 3000) = v21;
  *(void *)(v21 + 16) = v15;
  *(void *)(v21 + 24) = v16;
  *(_DWORD *)(v21 + 32) = v17;
  *(_DWORD *)(v21 + 36) = v18;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HealthDataRawSampleType : HealthDataQueryResult]);
  *(void *)(v0 + 3008) = v22;
  uint64_t v20 = default argument 1 of NightingaleDPFLRunner.sendLocationAsync<A>(location:force:work:)();
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v19 + 3016) = v7;
  *uint64_t v7 = *(void *)(v19 + 1688);
  v7[1] = NightingaleDPFLRunner.run(task:useCase:context:);
  return NightingaleDPFLRunner.sendLocationAsync<A>(location:force:work:)(v19 + 1920, 4, v20 & 1, (int *)&async function pointer to partial apply for closure #3 in NightingaleDPFLRunner.run(task:useCase:context:), v21, v22);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;
  uint64_t v5;

  Swift::Int v4 = *v1;
  *(void *)(v4 + 1688) = *v1;
  *(void *)(v4 + 3024) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = NightingaleDPFLRunner.run(task:useCase:context:);
  }
  else
  {
    swift_task_dealloc();
    swift_release();
    swift_release();
    uint64_t v2 = NightingaleDPFLRunner.run(task:useCase:context:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;

  Swift::Int v4 = *v1;
  *(void *)(v4 + 1688) = *v1;
  *(void *)(v4 + 3176) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = NightingaleDPFLRunner.run(task:useCase:context:);
  }
  else
  {
    swift_task_dealloc();
    swift_release();
    swift_release();
    uint64_t v2 = NightingaleDPFLRunner.run(task:useCase:context:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  Swift::Int v5;
  float v6;
  void *v7;
  long long *v8;
  long long *Duration;
  long long *v10;
  long long *v11;
  long long *v12;
  long long *v13;
  uint64_t (*v14)(uint64_t);
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  *(void *)(v0 + 1688) = v0;
  unsigned int v47 = *(void *)(v0 + 2480);
  *(void *)(v0 + 2496) = v47;
  *(unsigned char *)(v0 + 3684) = 7;
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HealthDataQueryResult);
  uint64_t v1 = lazy protocol witness table accessor for type HealthDataRawSampleType and conformance HealthDataRawSampleType();
  MEMORY[0x25A2C04B0](v0 + 3684, v47, &type metadata for HealthDataRawSampleType, v48, v1);
  if (*(void *)(v0 + 856))
  {
    unint64_t v45 = *(void *)(v46 + 856);
    int v43 = *(void *)(v46 + 864);
    __swift_project_boxed_opaque_existential_1((void *)(v46 + 832), v45);
    uint64_t v44 = *(void (**)(uint64_t, uint64_t))(v43 + 16);
    *(void *)(v46 + 1320) = swift_getAssociatedTypeWitness();
    __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v46 + 1296));
    v44(v45, v43);
    __swift_destroy_boxed_opaque_existential_1(v46 + 832);
  }
  else
  {
    outlined destroy of Pregnancy?(v46 + 832);
    *(void *)(v46 + 1296) = 0;
    *(void *)(v46 + 1304) = 0;
    *(void *)(v46 + 1312) = 0;
    *(void *)(v46 + 1320) = 0;
  }
  if (*(void *)(v46 + 1320))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : (Float, String)]);
    if (swift_dynamicCast()) {
      uint64_t v42 = *(void *)(v46 + 2520);
    }
    else {
      uint64_t v42 = 0;
    }
    uint64_t v41 = v42;
  }
  else
  {
    outlined destroy of Pregnancy?(v46 + 1296);
    uint64_t v41 = 0;
  }
  *(void *)(v46 + 2504) = v41;
  if (!*(void *)(v46 + 2504))
  {
    _allocateUninitializedArray<A>(_:)();
    Dictionary.init(dictionaryLiteral:)();
    outlined destroy of [A]();
  }
  uint64_t v2 = *(void *)(v46 + 3176);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : (Float, String)]);
  uint64_t result = Dictionary.merge(_:uniquingKeysWith:)();
  if (!v2)
  {
    uint64_t v40 = *(_DWORD *)(v46 + 3644);
    uint64_t v39 = *(_DWORD *)(v46 + 3640);
    uint64_t v32 = *(void *)(v46 + 3040);
    uint64_t v36 = *(void *)(v46 + 2920);
    swift_bridgeObjectRelease();
    NightingaleDPFLRunner.performanceMeasure.getter();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("QueryRequiredFeatures", 0x15uLL, 1);
    dispatch thunk of PerformanceMeasure.finish(_:)();
    uint64_t v31 = v4;
    swift_bridgeObjectRelease();
    swift_release();
    *(void *)(v46 + 2512) = v31;
    Swift::Double v5 = default argument 1 of NightingaleDPFLRunner.sendLocation(_:_:)();
    NightingaleDPFLRunner.sendLocation(_:_:)(NightingaleTraining_NightingaleDReachLocation_queryRequiredFeaturesCompleted, v5);
    uint64_t v33 = *(void *)(v46 + 1904);
    swift_bridgeObjectRetain();
    uint64_t v34 = MEMORY[0x25A2C0810](v33, v32);
    swift_bridgeObjectRelease();
    uint64_t v35 = *(void *)(v46 + 2008);
    swift_bridgeObjectRetain();
    uint64_t v37 = *(void *)(v46 + 1808);
    swift_bridgeObjectRetain();
    uint64_t v38 = MEMORY[0x25A2C0410](v37, MEMORY[0x263F8E8F8], v36, MEMORY[0x263F8E908]);
    swift_bridgeObjectRelease();
    uint64_t result = v38;
    if (v40 < v39)
    {
      __break(1u);
    }
    else
    {
      uint64_t v18 = *(void *)(v46 + 2984);
      uint64_t v22 = *(void *)(v46 + 2968);
      uint64_t v20 = *(void *)(v46 + 2960);
      char v26 = *(void *)(v46 + 2880);
      unsigned int v25 = *(void *)(v46 + 2872);
      uint64_t v17 = *(void *)(v46 + 2864);
      uint64_t v19 = *(void *)(v46 + 2824);
      id v28 = *(void *)(v46 + 2816);
      *(_DWORD *)(v46 + 3628) = v40 - v39;
      Float.init<A>(_:)();
      id v27 = (float)((float)v38 / v6) * 100.0;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any));
      _allocateUninitializedArray<A>(_:)();
      uint64_t v24 = v7;
      uint64_t v8 = NightingaleDPFLRunner.keyMetricsCycleTrackingCheckDurationS.unsafeMutableAddressor();
      outlined init with copy of String(v8, v24);
      uint64_t v23 = MEMORY[0x263F8D538];
      v24[5] = MEMORY[0x263F8D538];
      v24[2] = v17;
      Duration = NightingaleDPFLRunner.keyMetricsPregnanciesQueryDurationS.unsafeMutableAddressor();
      outlined init with copy of String(Duration, v24 + 6);
      v24[11] = v23;
      v24[8] = v18;
      char v10 = NightingaleDPFLRunner.keyMetricsIterationElapsedTime.unsafeMutableAddressor();
      outlined init with copy of String(v10, v24 + 12);
      v24[17] = v23;
      v24[14] = v19;
      uint64_t v11 = NightingaleDPFLRunner.keyMetricsNumberOfAllPregnancies.unsafeMutableAddressor();
      outlined init with copy of String(v11, v24 + 18);
      unsigned int v21 = MEMORY[0x263F8D6C8];
      v24[23] = MEMORY[0x263F8D6C8];
      v24[20] = v20;
      uint64_t v12 = NightingaleDPFLRunner.keyMetricsNumberOfPregnancyInitializerFailed.unsafeMutableAddressor();
      outlined init with copy of String(v12, v24 + 24);
      v24[29] = v21;
      v24[26] = v22;
      uint64_t v13 = NightingaleDPFLRunner.keyMetricsRequiredFeaturesQueryDurationS.unsafeMutableAddressor();
      outlined init with copy of String(v13, v24 + 30);
      v24[35] = v23;
      v24[32] = v31;
      _finalizeUninitializedArray<A>(_:)();
      uint64_t v29 = Dictionary.init(dictionaryLiteral:)();
      uint64_t v30 = NightingaleDPFLRunner.runPregnanciesDistribution(hyperParams:modelPath:numberOfRawPregnancies:invalidReasons:swtAvailability:existingMetrics:)(v28, v25, v26, v34, v35, v29, v27);
      uint64_t v15 = *(id *)(v46 + 2856);
      unsigned int v16 = *(id *)(v46 + 2832);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined destroy of [A]();
      outlined destroy of [A]();
      swift_bridgeObjectRelease();
      swift_release();
      outlined destroy of [A]();
      swift_bridgeObjectRelease();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      swift_bridgeObjectRelease();

      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v14 = *(uint64_t (**)(uint64_t))(*(void *)(v46 + 1688) + 8);
      return v14(v30);
    }
  }
  return result;
}

{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;

  Swift::Int v4 = *v1;
  *(void *)(v4 + 1688) = *v1;
  *(void *)(v4 + 3200) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = NightingaleDPFLRunner.run(task:useCase:context:);
  }
  else
  {
    swift_release();
    uint64_t v2 = NightingaleDPFLRunner.run(task:useCase:context:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;

  Swift::Int v4 = *v1;
  *(void *)(v4 + 1688) = *v1;
  *(void *)(v4 + 3232) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = NightingaleDPFLRunner.run(task:useCase:context:);
  }
  else
  {
    swift_task_dealloc();
    swift_release();
    swift_release();
    uint64_t v2 = NightingaleDPFLRunner.run(task:useCase:context:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  void *v6;
  uint64_t v7;
  void *v8;
  char v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  char v28;
  void *v29;
  uint64_t v30;
  Swift::Int v31;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  long long *v60;
  uint64_t v61;
  void *v62;
  long long *Duration;
  uint64_t v64;
  void *v65;
  long long *v66;
  uint64_t v67;
  void *v68;
  long long *updated;
  uint64_t v70;
  void *v71;
  long long *v72;
  uint64_t v73;
  void *v74;
  long long *v75;
  void *v76;
  uint64_t v77;
  long long *v78;
  uint64_t v79;
  void *v80;
  long long *v81;
  uint64_t v82;
  void *v83;
  long long *v84;
  uint64_t v85;
  void *v86;
  long long *v87;
  uint64_t v88;
  void *v89;
  long long *v90;
  uint64_t v91;
  void *v92;
  long long *v93;
  uint64_t v94;
  void *v95;
  long long *v96;
  uint64_t v97;
  void *v98;
  long long *v99;
  uint64_t v100;
  void *v101;
  long long *v102;
  uint64_t v103;
  void *v104;
  long long *v105;
  uint64_t v106;
  void *v107;
  long long *v108;
  uint64_t v109;
  void *v110;
  long long *v111;
  uint64_t v112;
  void *v113;
  long long *started;
  void *v115;
  uint64_t v116;
  char v117;
  void *v118;
  uint64_t v119;
  void *v120;
  Swift::OpaquePointer v121;
  Swift::OpaquePointer v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  void *v129;
  void *v130;
  uint64_t v131;
  void *v132;
  unsigned char *v133;
  uint64_t v134;
  uint64_t (*v135)(uint64_t);
  id v136[40];
  id v137;
  id v138;
  uint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  id v145;
  id v146;
  uint64_t v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  id v153;
  id v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  id v168;
  id v169;
  uint64_t v170;
  void *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  id v183;
  id v184;
  uint64_t v185;
  void *v186;
  void *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  id *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  id v202;
  id v203;
  uint64_t v204;
  void *v205;
  uint64_t v206;
  void *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  int v212;
  uint64_t v213;
  id *v214;
  uint64_t v215;
  uint64_t v216;
  int v217;
  uint64_t v218;
  void *v219;
  uint64_t v220;
  void *v221;
  void *v222;
  Swift::OpaquePointer v223;
  Swift::OpaquePointer v224;
  Swift::OpaquePointer v225;
  Swift::OpaquePointer v226;
  Swift::OpaquePointer v227;
  Swift::OpaquePointer v228;
  Swift::OpaquePointer v229;
  Swift::OpaquePointer v230;
  Swift::OpaquePointer v231;
  Swift::OpaquePointer v232;
  Swift::OpaquePointer v233;
  Swift::OpaquePointer v234;
  Swift::OpaquePointer v235;
  Swift::OpaquePointer v236;
  Swift::OpaquePointer v237;
  Swift::OpaquePointer v238;
  uint64_t v239;
  uint64_t v240;
  void *v241;
  uint64_t v242;
  uint64_t v243;
  void *v244;
  uint64_t v245;
  void *v246;
  uint64_t v247;
  void *v248;
  uint64_t v249;
  void *v250;
  uint64_t v251;
  void *v252;
  void *v253;
  void *v254;
  uint64_t v255;
  void *v256;
  uint64_t v257;
  uint64_t v258;
  void *v259;
  uint64_t v260;
  void *v261;
  uint64_t v262;
  void *v263;
  uint64_t v264;
  void *v265;
  uint64_t v266;
  void *v267;
  uint64_t v268;
  void *v269;
  uint64_t v270;
  void *v271;
  uint64_t v272;
  void *v273;
  uint64_t v274;
  void *v275;
  uint64_t v276;
  void *v277;
  void *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  void *v284;
  void *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  void *object;
  uint64_t v293;
  uint64_t v294;
  void *v295;
  uint64_t v296;
  uint64_t v297;
  void *v298;
  void *v299;
  void *v300;
  void *v301;
  void *v302;
  void *v303;
  void *v304;
  void *v305;
  void *v306;
  void *v307;
  void *v308;
  void *v309;
  void *v310;
  void *v311;
  char *v312;
  void *v313;
  void *v314;
  uint64_t v315;
  uint64_t v316;
  int v317;
  void *v318;
  void *v319;
  void *v320;
  void *v321;
  void *v322;
  void *v323;
  void *v324;
  void *v325;
  void *v326;
  void *v327;
  void *v328;
  void *v329;
  int v330;
  uint64_t v331;
  uint64_t v332;
  int v333;
  uint64_t v334;
  int v335;
  int v336;
  uint64_t v337;
  uint64_t v338;
  int v339;
  uint64_t v340;
  uint64_t v341;
  void *v342;
  void *v343;
  void *v344;
  void *v345;
  void *v346;
  void *v347;
  void *v348;
  void *v349;
  void *v350;
  void *v351;
  void *v352;
  void *v353;
  void *v354;
  void *v355;
  void *v356;
  void *v357;
  void *v358;
  void *v359;
  void *v360;
  void *v361;
  void *v362;
  void *v363;
  void *v364;
  void *v365;
  void *v366;
  void *v367;
  char *v368;
  uint64_t v369;
  uint64_t v370;
  int v371;
  int v372;
  int v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  void *v377;
  uint64_t (*v378)@<X0>(void *@<X8>);
  uint64_t (*v379)@<X0>(uint64_t@<X1>, uint64_t@<X8>);
  int *v380;
  int *v381;
  int *v382;
  uint64_t v383;
  void *v384;
  void *v385;
  void *v386;
  void *v387;
  void *v388;
  void *v389;
  void *v390;
  void *v391;
  void *v392;
  void *v393;
  void *v394;
  void *v395;
  void *v396;
  void *v397;
  void *v398;
  void *v399;
  void *v400;
  void *v401;
  void *v402;
  void *v403;
  void *v404;
  void *v405;
  void *v406;
  void *v407;
  void *v408;
  void *v409;
  char *v410;
  void *v411;
  uint64_t v412;

  v411 = v0;
  v377 = v0;
  v378 = partial apply for closure #35 in NightingaleDPFLRunner.run(task:useCase:context:);
  v379 = closure #36 in NightingaleDPFLRunner.run(task:useCase:context:);
  v380 = (int *)&async function pointer to partial apply for closure #37 in NightingaleDPFLRunner.run(task:useCase:context:);
  v381 = (int *)&async function pointer to partial apply for closure #34 in NightingaleDPFLRunner.run(task:useCase:context:);
  v382 = (int *)&async function pointer to partial apply for closure #33 in NightingaleDPFLRunner.run(task:useCase:context:);
  v0[211] = v0;
  v385 = v0 + 212;
  v403 = v0 + 205;
  v404 = v0 + 213;
  v405 = v0 + 214;
  v406 = v0 + 215;
  v407 = v0 + 216;
  v408 = v0 + 217;
  v409 = v0 + 218;
  v402 = v0 + 219;
  v386 = v0 + 236;
  v387 = v0 + 440;
  v388 = v0 + 237;
  v389 = v0 + 239;
  v390 = v0 + 244;
  v391 = v0 + 248;
  v392 = v0 + 249;
  v384 = v0 + 255;
  v393 = v0 + 257;
  v394 = v0 + 259;
  v395 = v0 + 261;
  v396 = v0 + 263;
  v397 = v0 + 265;
  v398 = v0 + 266;
  v399 = v0 + 267;
  v400 = v0 + 441;
  v401 = v0 + 442;
  v410 = (char *)v0 + 1548;
  v383 = v0[404];
  v0[277] = 0;
  if (HyperParams.isSHRRequired()())
  {
    v372 = *((_DWORD *)v377 + 915);
    v371 = *((_DWORD *)v377 + 914);
    v370 = v377[352];
    v369 = v377[335];
    swift_retain();
    swift_retain();
    uint64_t v1 = swift_task_alloc();
    uint64_t v2 = v369;
    uint64_t v3 = v370;
    Swift::Int v4 = v371;
    Swift::Double v5 = v372;
    uint64_t v6 = v377;
    v374 = v1;
    v377[405] = v1;
    *(void *)(v1 + 16) = v2;
    *(void *)(v1 + 24) = v3;
    *(_DWORD *)(v1 + 32) = v4;
    *(_DWORD *)(v1 + 36) = v5;
    *(void *)(v1 + 40) = v6 + 230;
    *(void *)(v1 + 48) = v6 + 231;
    *(void *)(v1 + 56) = v6 + 277;
    v375 = MEMORY[0x263F8EE60] + 8;
    v373 = default argument 1 of NightingaleDPFLRunner.sendLocationAsync<A>(location:force:work:)();
    uint64_t v7 = swift_task_alloc();
    uint64_t v8 = v377;
    uint64_t v9 = v373;
    char v10 = v382;
    uint64_t v11 = v374;
    uint64_t v12 = v375;
    uint64_t v13 = (void *)v7;
    uint64_t v14 = v376;
    v377[406] = v13;
    void *v13 = v8[211];
    v13[1] = NightingaleDPFLRunner.run(task:useCase:context:);
    uint64_t v15 = 8;
    unsigned int v16 = v9 & 1;
    return NightingaleDPFLRunner.sendLocationAsync<A>(location:force:work:)(v14, v15, v16, v10, v11, v12);
  }
  v343 = v377 + 212;
  v361 = v377 + 205;
  v362 = v377 + 213;
  v363 = v377 + 214;
  v364 = v377 + 215;
  v365 = v377 + 216;
  v366 = v377 + 217;
  v367 = v377 + 218;
  v360 = v377 + 219;
  v344 = v377 + 236;
  v345 = v377 + 440;
  v346 = v377 + 237;
  v347 = v377 + 239;
  v348 = v377 + 244;
  v349 = v377 + 248;
  v350 = v377 + 249;
  v342 = v377 + 255;
  v351 = v377 + 257;
  v352 = v377 + 259;
  v353 = v377 + 261;
  v354 = v377 + 263;
  v355 = v377 + 265;
  v356 = v377 + 266;
  v357 = v377 + 267;
  v358 = v377 + 441;
  v359 = v377 + 442;
  v368 = (char *)v377 + 1548;
  if (HyperParams.isCalendarAlgorithmRequired()())
  {
    v335 = *((_DWORD *)v377 + 913);
    v333 = *((_DWORD *)v377 + 912);
    v338 = v377[374];
    v336 = *((_DWORD *)v377 + 908);
    v334 = v377[352];
    v337 = v377[335];
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v18 = swift_task_alloc();
    uint64_t v19 = v333;
    uint64_t v20 = v334;
    unsigned int v21 = v335;
    uint64_t v22 = v336;
    uint64_t v23 = v337;
    uint64_t v24 = v338;
    unsigned int v25 = v377;
    v340 = v18;
    v377[408] = v18;
    *(_DWORD *)(v18 + 16) = v19;
    *(void *)(v18 + 24) = v20;
    *(_DWORD *)(v18 + 32) = v21;
    *(_DWORD *)(v18 + 36) = v22;
    *(void *)(v18 + 40) = v23;
    *(void *)(v18 + 48) = v25 + 222;
    *(void *)(v18 + 56) = v25 + 223;
    *(void *)(v18 + 64) = v25 + 224;
    *(void *)(v18 + 72) = v25 + 225;
    *(void *)(v18 + 80) = v24;
    *(void *)(v18 + 88) = v25 + 232;
    *(void *)(v18 + 96) = v25 + 233;
    v341 = MEMORY[0x263F8EE60] + 8;
    v339 = default argument 1 of NightingaleDPFLRunner.sendLocationAsync<A>(location:force:work:)();
    char v26 = swift_task_alloc();
    id v27 = v377;
    id v28 = v339;
    char v10 = v381;
    uint64_t v11 = v340;
    uint64_t v12 = v341;
    uint64_t v29 = (void *)v26;
    uint64_t v14 = v376;
    v377[409] = v29;
    void *v29 = v27[211];
    v29[1] = NightingaleDPFLRunner.run(task:useCase:context:);
    uint64_t v15 = 8;
    unsigned int v16 = v28 & 1;
    return NightingaleDPFLRunner.sendLocationAsync<A>(location:force:work:)(v14, v15, v16, v10, v11, v12);
  }
  v319 = v377 + 212;
  v320 = v377 + 205;
  v321 = v377 + 213;
  v322 = v377 + 214;
  v323 = v377 + 215;
  v324 = v377 + 216;
  v325 = v377 + 217;
  v326 = v377 + 218;
  v327 = v377 + 219;
  v328 = v377 + 220;
  v314 = v377 + 451;
  v298 = v377 + 237;
  v299 = v377 + 239;
  v300 = v377 + 244;
  v301 = v377 + 248;
  v302 = v377 + 249;
  v303 = v377 + 253;
  v304 = v377 + 255;
  v318 = v377 + 257;
  v305 = v377 + 261;
  v306 = v377 + 263;
  v307 = v377 + 265;
  v308 = v377 + 266;
  v309 = v377 + 267;
  v310 = v377 + 441;
  v311 = v377 + 442;
  v312 = (char *)v377 + 1548;
  v317 = *((_DWORD *)v377 + 908);
  v316 = v377[352];
  v297 = v377[335];
  v293 = NightingaleDPFLRunner.performanceMeasure.getter();
  v330 = 1;
  object = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("QueryRequiredFeatures", 0x15uLL, 1)._object;
  dispatch thunk of PerformanceMeasure.finish(_:)();
  v294 = v30;
  swift_bridgeObjectRelease();
  swift_release();
  v313 = v377 + 278;
  v377[278] = v294;
  uint64_t v31 = default argument 1 of NightingaleDPFLRunner.sendLocation(_:_:)();
  NightingaleDPFLRunner.sendLocation(_:_:)(NightingaleTraining_NightingaleDReachLocation_queryRequiredFeaturesCompleted, v31);
  v296 = NightingaleDPFLRunner.performanceMeasure.getter();
  v295 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Featurization", 0xDuLL, v330 & 1)._object;
  dispatch thunk of PerformanceMeasure.start(_:)();
  swift_bridgeObjectRelease();
  swift_release();
  type metadata accessor for Featurizer();
  uint64_t v32 = Featurizer.__allocating_init()();
  uint64_t v33 = v377;
  v315 = v32;
  v377[411] = v32;
  v329 = v33 + 279;
  v33[279] = v32;
  swift_retain();
  swift_retain();
  v331 = swift_task_alloc();
  v377[412] = v331;
  *(void *)(v331 + 16) = v315;
  uint64_t v34 = (void *)v331;
  *(void *)(v331 + 24) = v377 + 250;
  v34[4] = v377 + 226;
  v34[5] = v377 + 227;
  v34[6] = v377 + 229;
  v34[7] = v377 + 228;
  v34[8] = v377 + 230;
  v34[9] = v377 + 231;
  v34[10] = v377 + 232;
  v34[11] = v377 + 233;
  v34[12] = v377 + 225;
  *(void *)(v331 + 104) = v316;
  *(_DWORD *)(v331 + 112) = v317;
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int]));
  NightingaleDPFLRunner.sendLocation<A>(location:force:work:)(10, v330 & 1, v331, v35, (uint64_t)(v377 + 2));
  v332 = v383;
  if (v383)
  {
    v149 = v377[381];
    v150 = v377[374];
    v151 = v377[372];
    v152 = v377[360];
    v153 = (id)v377[357];
    v154 = (id)v377[354];
    v155 = v377[352];
    swift_task_dealloc();
    swift_release();
    swift_release();
    swift_release();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    swift_release();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();

    swift_release();
    v173 = v332;
    goto LABEL_27;
  }
  v251 = v377[401];
  v249 = v377[392];
  v279 = v377[391];
  v276 = v377[390];
  v274 = v377[389];
  v272 = v377[388];
  v270 = v377[387];
  v268 = v377[386];
  v266 = v377[385];
  v264 = v377[382];
  v247 = v377[379];
  v245 = v377[373];
  v262 = v377[371];
  v260 = v377[370];
  v243 = v377[358];
  v258 = v377[353];
  v220 = v377[352];
  swift_release();
  swift_release();
  uint64_t v36 = v377;
  uint64_t v37 = (void *)v377[2];
  v221 = v37;
  v377[413] = v37;
  uint64_t v38 = (void *)v36[3];
  v222 = v38;
  v36[414] = v38;
  uint64_t v39 = (void *)v36[4];
  v223._rawValue = v39;
  v36[415] = v39;
  uint64_t v40 = (void *)v36[5];
  v224._rawValue = v40;
  v36[416] = v40;
  uint64_t v41 = (void *)v36[6];
  v225._rawValue = v41;
  v36[417] = v41;
  uint64_t v42 = (void *)v36[7];
  v226._rawValue = v42;
  v36[418] = v42;
  int v43 = (void *)v36[8];
  v227._rawValue = v43;
  v36[419] = v43;
  uint64_t v44 = (void *)v36[9];
  v228._rawValue = v44;
  v36[420] = v44;
  unint64_t v45 = (void *)v36[10];
  v229._rawValue = v45;
  v36[421] = v45;
  uint64_t v46 = (void *)v36[11];
  v230._rawValue = v46;
  v36[422] = v46;
  unsigned int v47 = (void *)v36[12];
  v231._rawValue = v47;
  v36[423] = v47;
  uint64_t v48 = (void *)v36[13];
  v232._rawValue = v48;
  v36[424] = v48;
  uint64_t v49 = (void *)v36[14];
  v233._rawValue = v49;
  v36[425] = v49;
  uint64_t v50 = (void *)v36[15];
  v234._rawValue = v50;
  v36[426] = v50;
  unint64_t v51 = (void *)v36[16];
  v235._rawValue = v51;
  v36[427] = v51;
  int v52 = (void *)v36[17];
  v236._rawValue = v52;
  v36[428] = v52;
  unint64_t v53 = (void *)v36[18];
  v237._rawValue = v53;
  v36[429] = v53;
  unint64_t v54 = (void *)v36[19];
  v238._rawValue = v54;
  v36[430] = v54;
  uint64_t v55 = v36[20];
  v239 = v55;
  v36[431] = v55;
  uint64_t v56 = v36[21];
  v240 = v56;
  v36[432] = v56;
  uint64_t v57 = v36[22];
  v283 = v57;
  v36[433] = v57;
  v284 = v36 + 23;
  v36[23] = v37;
  v36[24] = v38;
  v36[25] = v39;
  v36[26] = v40;
  v36[27] = v41;
  v36[28] = v42;
  v36[29] = v43;
  v36[30] = v44;
  v36[31] = v45;
  v36[32] = v46;
  v36[33] = v47;
  v36[34] = v48;
  v36[35] = v49;
  v36[36] = v50;
  v36[37] = v51;
  v36[38] = v52;
  v36[39] = v53;
  v36[40] = v54;
  v36[41] = v55;
  v36[42] = v56;
  v36[43] = v57;
  v242 = NightingaleDPFLRunner.performanceMeasure.getter();
  v241 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Featurization", 0xDuLL, 1)._object;
  dispatch thunk of PerformanceMeasure.finish(_:)();
  v255 = v58;
  swift_bridgeObjectRelease();
  swift_release();
  v285 = v377 + 280;
  v377[280] = v255;
  v280 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any));
  v281 = _allocateUninitializedArray<A>(_:)();
  v278 = v59;
  uint64_t v60 = NightingaleDPFLRunner.keyMetricsCycleTrackingCheckDurationS.unsafeMutableAddressor();
  outlined init with copy of String(v60, v278);
  uint64_t v61 = v243;
  uint64_t v62 = v278;
  v257 = MEMORY[0x263F8D538];
  v278[5] = MEMORY[0x263F8D538];
  v62[2] = v61;
  v244 = v62 + 6;
  Duration = NightingaleDPFLRunner.keyMetricsPregnanciesQueryDurationS.unsafeMutableAddressor();
  outlined init with copy of String(Duration, v244);
  uint64_t v64 = v245;
  int v65 = v278;
  v278[11] = v257;
  v65[8] = v64;
  v246 = v65 + 12;
  uint64_t v66 = NightingaleDPFLRunner.keyMetricsUpdatingFeaturesQueryDurationS.unsafeMutableAddressor();
  outlined init with copy of String(v66, v246);
  int v67 = v247;
  uint64_t v68 = v278;
  v278[17] = v257;
  v68[14] = v67;
  v248 = v68 + 18;
  updated = NightingaleDPFLRunner.keyMetricsUpdatePregnanciesDurationS.unsafeMutableAddressor();
  outlined init with copy of String(updated, v248);
  uint64_t v70 = v249;
  uint64_t v71 = v278;
  v278[23] = v257;
  v71[20] = v70;
  v250 = v71 + 24;
  uint64_t v72 = NightingaleDPFLRunner.keyMetricsUpdateSliceDeltaAnchorDurationS.unsafeMutableAddressor();
  outlined init with copy of String(v72, v250);
  uint64_t v73 = v251;
  uint64_t v74 = v278;
  v278[29] = v257;
  v74[26] = v73;
  v252 = v74 + 30;
  int v75 = NightingaleDPFLRunner.keyMetricsSHRDurationS.unsafeMutableAddressor();
  outlined init with copy of String(v75, v252);
  uint64_t v76 = v278;
  int v77 = v377[277];
  v278[35] = v257;
  v76[32] = v77;
  v253 = v76 + 36;
  uint64_t v78 = NightingaleDPFLRunner.keyMetricsRequiredFeaturesQueryDurationS.unsafeMutableAddressor();
  outlined init with copy of String(v78, v253);
  uint64_t v79 = v294;
  uint64_t v80 = v278;
  v278[41] = v257;
  v80[38] = v79;
  v254 = v80 + 42;
  uint64_t v81 = NightingaleDPFLRunner.keyMetricsFeaturizationDurationS.unsafeMutableAddressor();
  outlined init with copy of String(v81, v254);
  uint64_t v82 = v255;
  uint64_t v83 = v278;
  v278[47] = v257;
  v83[44] = v82;
  v256 = v83 + 48;
  v84 = NightingaleDPFLRunner.keyMetricsIterationElapsedTime.unsafeMutableAddressor();
  outlined init with copy of String(v84, v256);
  v85 = v258;
  v86 = v278;
  v278[53] = v257;
  v86[50] = v85;
  v259 = v86 + 54;
  v87 = NightingaleDPFLRunner.keyMetricsNumberOfAllPregnancies.unsafeMutableAddressor();
  outlined init with copy of String(v87, v259);
  v88 = v260;
  v89 = v278;
  v282 = MEMORY[0x263F8D6C8];
  v278[59] = MEMORY[0x263F8D6C8];
  v89[56] = v88;
  v261 = v89 + 60;
  v90 = NightingaleDPFLRunner.keyMetricsNumberOfPregnancyInitializerFailed.unsafeMutableAddressor();
  outlined init with copy of String(v90, v261);
  v91 = v262;
  v92 = v278;
  v278[65] = v282;
  v92[62] = v91;
  v263 = v92 + 66;
  v93 = NightingaleDPFLRunner.keyMetricsOverlappingPregnanciesCount.unsafeMutableAddressor();
  outlined init with copy of String(v93, v263);
  v94 = v264;
  v95 = v278;
  v278[71] = v282;
  v95[68] = v94;
  v265 = v95 + 72;
  v96 = NightingaleDPFLRunner.keyMetricsNumberOfValidPregnancies.unsafeMutableAddressor();
  outlined init with copy of String(v96, v265);
  v97 = v266;
  v98 = v278;
  v278[77] = v282;
  v98[74] = v97;
  v267 = v98 + 78;
  v99 = NightingaleDPFLRunner.keyMetricsInvalidDurationPregnanciesCount.unsafeMutableAddressor();
  outlined init with copy of String(v99, v267);
  v100 = v268;
  v101 = v278;
  v278[83] = v282;
  v101[80] = v100;
  v269 = v101 + 84;
  v102 = NightingaleDPFLRunner.keyMetricsInvalidLMPDeltaPregnanciesCount.unsafeMutableAddressor();
  outlined init with copy of String(v102, v269);
  v103 = v270;
  v104 = v278;
  v278[89] = v282;
  v104[86] = v103;
  v271 = v104 + 90;
  v105 = NightingaleDPFLRunner.keyMetricsContainsFlowPregnanciesCount.unsafeMutableAddressor();
  outlined init with copy of String(v105, v271);
  v106 = v272;
  v107 = v278;
  v278[95] = v282;
  v107[92] = v106;
  v273 = v107 + 96;
  v108 = NightingaleDPFLRunner.keyMetricsInvalidLMPPregnanciesCount.unsafeMutableAddressor();
  outlined init with copy of String(v108, v273);
  v109 = v274;
  v110 = v278;
  v278[101] = v282;
  v110[98] = v109;
  v275 = v110 + 102;
  v111 = NightingaleDPFLRunner.keyMetricsInvalidEndPregnanciesCount.unsafeMutableAddressor();
  outlined init with copy of String(v111, v275);
  v112 = v276;
  v113 = v278;
  v278[107] = v282;
  v113[104] = v112;
  v277 = v113 + 108;
  started = NightingaleDPFLRunner.keyMetricsInvalidStartSourcePregnanciesCount.unsafeMutableAddressor();
  outlined init with copy of String(started, v277);
  v115 = v278;
  v116 = v279;
  v278[113] = v282;
  v115[110] = v116;
  _finalizeUninitializedArray<A>(_:)();
  v287 = MEMORY[0x263F8D310];
  v288 = MEMORY[0x263F8EE58] + 8;
  v289 = MEMORY[0x263F8D320];
  v286 = Dictionary.init(dictionaryLiteral:)();
  outlined retain of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])((uint64_t)v284);
  _dictionaryUpCast<A, B, C, D>(_:)();
  v290 = Dictionary.merging(_:uniquingKeysWith:)();
  v377[434] = v290;
  v291 = 0;
  v218 = v377[393];
  v217 = *((unsigned __int8 *)v377 + 3693);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v117 = v217;
  v118 = v377;
  v219 = v377 + 281;
  v377[281] = v290;
  *((unsigned char *)v118 + 3668) = v117;
  *((unsigned char *)v118 + 3669) = 0;
  if (== infix<A>(_:_:)())
  {
    v119 = v291;
    v212 = *((_DWORD *)v377 + 908);
    v208 = v377[360];
    v213 = v377[359];
    v209 = v377[352];
    v210 = v377[233];
    swift_bridgeObjectRetain();
    v211 = v377[238];
    swift_bridgeObjectRetain();
    v207 = v377 + 23;
    outlined retain of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])((uint64_t)(v377 + 23));
    v214 = v136;
    v215 = NightingaleDPFLRunner.runTraining(modelPath:hyperParams:historicalPeriods:pregnancies:today:features:existingMetrics:)(v213, v208, v209, v210, v211, v212, v221, v222, v223._rawValue, v224._rawValue, v225._rawValue, v226._rawValue, v227._rawValue, v228._rawValue, v229._rawValue, v230._rawValue, v231._rawValue, v232._rawValue, v233._rawValue,
             v234._rawValue,
             v235._rawValue,
             v236._rawValue,
             v237._rawValue,
             v238._rawValue,
             v239,
             v240,
             v283,
             v290);
    v216 = v119;
    if (!v119)
    {
      v198 = v377[381];
      v199 = v377[374];
      v200 = v377[372];
      v201 = v377[360];
      v202 = (id)v377[357];
      v203 = (id)v377[354];
      v204 = v377[352];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v205 = v377 + 23;
      outlined release of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])((uint64_t)(v377 + 23));
      swift_release();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      swift_bridgeObjectRelease();
      swift_release();
      outlined destroy of [A]();
      swift_bridgeObjectRelease();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      swift_bridgeObjectRelease();

      swift_release();
      swift_task_dealloc();
      v206 = v215;
      goto LABEL_21;
    }
    v141 = v377[381];
    v142 = v377[374];
    v143 = v377[372];
    v144 = v377[360];
    v145 = (id)v377[357];
    v146 = (id)v377[354];
    v147 = v377[352];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v148 = v377 + 23;
    outlined release of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])((uint64_t)(v377 + 23));
    swift_release();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    swift_release();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();

    swift_release();
    swift_task_dealloc();
    v173 = v216;
LABEL_27:
    v136[21] = *((id *)v377 + 348);
    v136[22] = *((id *)v377 + 347);
    v136[23] = *((id *)v377 + 344);
    v136[24] = *((id *)v377 + 343);
    v136[25] = *((id *)v377 + 340);
    v136[26] = *((id *)v377 + 339);
    v136[27] = *((id *)v377 + 338);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v134 = v376;
    v135 = *(uint64_t (**)(uint64_t))(v377[211] + 8);
    return v135(v134);
  }
  v120 = v377;
  *((unsigned char *)v377 + 3670) = *((unsigned char *)v377 + 3693);
  *((unsigned char *)v120 + 3671) = 1;
  if ((== infix<A>(_:_:)() & 1) == 0)
  {
    v123 = v377;
    *((unsigned char *)v377 + 3672) = *((unsigned char *)v377 + 3693);
    *((unsigned char *)v123 + 3673) = 2;
    if (== infix<A>(_:_:)())
    {
      v177 = v377[374];
      v176 = *((_DWORD *)v377 + 909);
      v174 = v377[352];
      v175 = v377[335];
      swift_retain();
      swift_retain();
      swift_retain();
      v124 = swift_task_alloc();
      v125 = v174;
      v126 = v175;
      v127 = v176;
      v128 = v177;
      v129 = v377;
      v178 = v124;
      v377[435] = v124;
      *(void *)(v124 + 16) = v125;
      *(void *)(v124 + 24) = v129 + 238;
      *(void *)(v124 + 32) = v126;
      *(_DWORD *)(v124 + 40) = v127;
      *(void *)(v124 + 48) = v129 + 222;
      *(void *)(v124 + 56) = v129 + 223;
      *(void *)(v124 + 64) = v129 + 224;
      *(void *)(v124 + 72) = v129 + 225;
      *(void *)(v124 + 80) = v129 + 233;
      *(void *)(v124 + 88) = v128;
      v130 = (void *)swift_task_alloc();
      v377[436] = v130;
      v131 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt32, UInt32));
      v132 = v377;
      char v10 = v380;
      uint64_t v11 = v178;
      uint64_t v12 = v131;
      *v130 = v377[211];
      v130[1] = NightingaleDPFLRunner.run(task:useCase:context:);
      uint64_t v14 = (uint64_t)v132 + 1556;
      uint64_t v15 = 9;
      unsigned int v16 = 1;
      return NightingaleDPFLRunner.sendLocationAsync<A>(location:force:work:)(v14, v15, v16, v10, v11, v12);
    }
    v164 = v377[381];
    v165 = v377[374];
    v166 = v377[372];
    v167 = v377[360];
    v168 = (id)v377[357];
    v169 = (id)v377[354];
    v170 = v377[352];
    lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
    v172 = swift_allocError();
    *v133 = 48;
    swift_willThrow();
    swift_bridgeObjectRelease();
    v171 = v377 + 23;
    outlined release of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])((uint64_t)(v377 + 23));
    swift_release();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    swift_release();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();

    swift_release();
    swift_task_dealloc();
    v173 = v172;
    goto LABEL_27;
  }
  v196 = PFLTask.evalModelNames(taskType:hyperParams:)();
  v197 = v291;
  if (v291)
  {
    v136[36] = *((id *)v377 + 381);
    v136[37] = *((id *)v377 + 374);
    v136[38] = *((id *)v377 + 372);
    v136[39] = *((id *)v377 + 360);
    v137 = (id)v377[357];
    v138 = (id)v377[354];
    v139 = v377[352];
    swift_bridgeObjectRelease();
    v140 = v377 + 23;
    outlined release of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])((uint64_t)(v377 + 23));
    swift_release();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    swift_release();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();

    swift_release();
    swift_task_dealloc();
    v173 = v197;
    goto LABEL_27;
  }
  v192 = *((_DWORD *)v377 + 908);
  v189 = v377[352];
  v188 = v377[334];
  v190 = v377[233];
  swift_bridgeObjectRetain();
  v191 = v377[238];
  swift_bridgeObjectRetain();
  v187 = v377 + 23;
  outlined retain of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])((uint64_t)(v377 + 23));
  v121._rawValue = v221;
  v122._rawValue = v222;
  v193 = v136;
  v194 = NightingaleDPFLRunner.runEvals(evalModels:task:hyperParams:historicalPeriods:pregnancies:today:features:existingMetrics:)(v196, v188, v189, v190, v191, v192, v121, v122, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, v233,
           v234,
           v235,
           v236,
           v237,
           v238,
           v239,
           v240,
           v283,
           v290);
  v195 = 0;
  v179 = v377[381];
  v180 = v377[374];
  v181 = v377[372];
  v182 = v377[360];
  v183 = (id)v377[357];
  v184 = (id)v377[354];
  v185 = v377[352];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v186 = v377 + 23;
  outlined release of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])((uint64_t)(v377 + 23));
  swift_release();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  swift_bridgeObjectRelease();
  swift_release();
  outlined destroy of [A]();
  swift_bridgeObjectRelease();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  swift_bridgeObjectRelease();

  swift_release();
  swift_task_dealloc();
  v206 = v194;
LABEL_21:
  v163 = v206;
  v156 = v377[348];
  v157 = v377[347];
  v158 = v377[344];
  v159 = v377[343];
  v160 = v377[340];
  v161 = v377[339];
  v162 = v377[338];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v134 = v163;
  v135 = *(uint64_t (**)(uint64_t))(v377[211] + 8);
  return v135(v134);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;

  Swift::Int v4 = *v1;
  *(void *)(v4 + 1688) = *v1;
  *(void *)(v4 + 3256) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = NightingaleDPFLRunner.run(task:useCase:context:);
  }
  else
  {
    swift_task_dealloc();
    swift_release();
    swift_release();
    uint64_t v2 = NightingaleDPFLRunner.run(task:useCase:context:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v20;
  Swift::Int v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  long long *v50;
  uint64_t v51;
  void *v52;
  long long *Duration;
  uint64_t v54;
  void *v55;
  long long *v56;
  uint64_t v57;
  void *v58;
  long long *updated;
  uint64_t v60;
  void *v61;
  long long *v62;
  uint64_t v63;
  void *v64;
  long long *v65;
  void *v66;
  uint64_t v67;
  long long *v68;
  uint64_t v69;
  void *v70;
  long long *v71;
  uint64_t v72;
  void *v73;
  long long *v74;
  uint64_t v75;
  void *v76;
  long long *v77;
  uint64_t v78;
  void *v79;
  long long *v80;
  uint64_t v81;
  void *v82;
  long long *v83;
  uint64_t v84;
  void *v85;
  long long *v86;
  uint64_t v87;
  void *v88;
  long long *v89;
  uint64_t v90;
  void *v91;
  long long *v92;
  uint64_t v93;
  void *v94;
  long long *v95;
  uint64_t v96;
  void *v97;
  long long *v98;
  uint64_t v99;
  void *v100;
  long long *v101;
  uint64_t v102;
  void *v103;
  long long *started;
  void *v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  Swift::OpaquePointer v111;
  Swift::OpaquePointer v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  unsigned char *v123;
  uint64_t v124;
  uint64_t (*v125)(uint64_t);
  id v126[40];
  id v127;
  id v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  id v135;
  id v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  id v143;
  id v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  id v158;
  id v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  id v173;
  id v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  id *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  id v192;
  id v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  int v202;
  uint64_t v203;
  id *v204;
  uint64_t v205;
  uint64_t v206;
  int v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  void *v211;
  void *v212;
  Swift::OpaquePointer v213;
  Swift::OpaquePointer v214;
  Swift::OpaquePointer v215;
  Swift::OpaquePointer v216;
  Swift::OpaquePointer v217;
  Swift::OpaquePointer v218;
  Swift::OpaquePointer v219;
  Swift::OpaquePointer v220;
  Swift::OpaquePointer v221;
  Swift::OpaquePointer v222;
  Swift::OpaquePointer v223;
  Swift::OpaquePointer v224;
  Swift::OpaquePointer v225;
  Swift::OpaquePointer v226;
  Swift::OpaquePointer v227;
  Swift::OpaquePointer v228;
  uint64_t v229;
  uint64_t v230;
  void *v231;
  uint64_t v232;
  uint64_t v233;
  void *v234;
  uint64_t v235;
  void *v236;
  uint64_t v237;
  void *v238;
  uint64_t v239;
  void *v240;
  uint64_t v241;
  void *v242;
  void *v243;
  void *v244;
  uint64_t v245;
  void *v246;
  uint64_t v247;
  uint64_t v248;
  void *v249;
  uint64_t v250;
  void *v251;
  uint64_t v252;
  void *v253;
  uint64_t v254;
  void *v255;
  uint64_t v256;
  void *v257;
  uint64_t v258;
  void *v259;
  uint64_t v260;
  void *v261;
  uint64_t v262;
  void *v263;
  uint64_t v264;
  void *v265;
  uint64_t v266;
  void *v267;
  void *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  void *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  void *object;
  uint64_t v283;
  uint64_t v284;
  void *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  int v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  int v320;
  uint64_t v321;
  uint64_t v322;
  int v323;
  uint64_t v324;
  int v325;
  int v326;
  uint64_t v327;
  uint64_t v328;
  int v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t (*v334)@<X0>(void *@<X8>);
  uint64_t (*v335)@<X0>(uint64_t@<X1>, uint64_t@<X8>);
  int *v336;
  int *v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;

  v366 = v0;
  v333 = v0;
  v334 = partial apply for closure #35 in NightingaleDPFLRunner.run(task:useCase:context:);
  v335 = closure #36 in NightingaleDPFLRunner.run(task:useCase:context:);
  v336 = (int *)&async function pointer to partial apply for closure #37 in NightingaleDPFLRunner.run(task:useCase:context:);
  v337 = (int *)&async function pointer to partial apply for closure #34 in NightingaleDPFLRunner.run(task:useCase:context:);
  *(void *)(v0 + 1688) = v0;
  v340 = v0 + 1696;
  v358 = v0 + 1640;
  v359 = v0 + 1704;
  v360 = v0 + 1712;
  v361 = v0 + 1720;
  v362 = v0 + 1728;
  v363 = v0 + 1736;
  v364 = v0 + 1744;
  v357 = v0 + 1752;
  v341 = v0 + 1888;
  v342 = v0 + 3520;
  v343 = v0 + 1896;
  v344 = v0 + 1912;
  v345 = v0 + 1952;
  v346 = v0 + 1984;
  v347 = v0 + 1992;
  v339 = v0 + 2040;
  v348 = v0 + 2056;
  v349 = v0 + 2072;
  v350 = v0 + 2088;
  v351 = v0 + 2104;
  v352 = v0 + 2120;
  v353 = v0 + 2128;
  v354 = v0 + 2136;
  v355 = v0 + 3528;
  v356 = v0 + 3536;
  v365 = v0 + 1548;
  v338 = *(void *)(v0 + 3256);
  if (HyperParams.isCalendarAlgorithmRequired()())
  {
    v325 = *(_DWORD *)(v333 + 3652);
    v323 = *(_DWORD *)(v333 + 3648);
    v328 = *(void *)(v333 + 2992);
    v326 = *(_DWORD *)(v333 + 3632);
    v324 = *(void *)(v333 + 2816);
    v327 = *(void *)(v333 + 2680);
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v1 = swift_task_alloc();
    uint64_t v2 = v323;
    uint64_t v3 = v324;
    Swift::Int v4 = v325;
    Swift::Double v5 = v326;
    uint64_t v6 = v327;
    uint64_t v7 = v328;
    uint64_t v8 = v333;
    v330 = v1;
    *(void *)(v333 + 3264) = v1;
    *(_DWORD *)(v1 + 16) = v2;
    *(void *)(v1 + 24) = v3;
    *(_DWORD *)(v1 + 32) = v4;
    *(_DWORD *)(v1 + 36) = v5;
    *(void *)(v1 + 40) = v6;
    *(void *)(v1 + 48) = v8 + 1776;
    *(void *)(v1 + 56) = v8 + 1784;
    *(void *)(v1 + 64) = v8 + 1792;
    *(void *)(v1 + 72) = v8 + 1800;
    *(void *)(v1 + 80) = v7;
    *(void *)(v1 + 88) = v8 + 1856;
    *(void *)(v1 + 96) = v8 + 1864;
    v331 = MEMORY[0x263F8EE60] + 8;
    v329 = default argument 1 of NightingaleDPFLRunner.sendLocationAsync<A>(location:force:work:)();
    uint64_t v9 = swift_task_alloc();
    char v10 = v333;
    uint64_t v11 = v329;
    uint64_t v12 = v337;
    uint64_t v13 = v330;
    uint64_t v14 = v331;
    uint64_t v15 = (void *)v9;
    unsigned int v16 = v332;
    *(void *)(v333 + 3272) = v15;
    *uint64_t v15 = *(void *)(v10 + 1688);
    v15[1] = NightingaleDPFLRunner.run(task:useCase:context:);
    uint64_t v17 = 8;
    uint64_t v18 = v11 & 1;
    return NightingaleDPFLRunner.sendLocationAsync<A>(location:force:work:)(v16, v17, v18, v12, v13, v14);
  }
  v309 = v333 + 1696;
  v310 = v333 + 1640;
  v311 = v333 + 1704;
  v312 = v333 + 1712;
  v313 = v333 + 1720;
  v314 = v333 + 1728;
  v315 = v333 + 1736;
  v316 = v333 + 1744;
  v317 = v333 + 1752;
  v318 = v333 + 1760;
  v304 = v333 + 3608;
  v288 = v333 + 1896;
  v289 = v333 + 1912;
  v290 = v333 + 1952;
  v291 = v333 + 1984;
  v292 = v333 + 1992;
  v293 = v333 + 2024;
  v294 = v333 + 2040;
  v308 = v333 + 2056;
  v295 = v333 + 2088;
  v296 = v333 + 2104;
  v297 = v333 + 2120;
  v298 = v333 + 2128;
  v299 = v333 + 2136;
  v300 = v333 + 3528;
  v301 = v333 + 3536;
  v302 = v333 + 1548;
  v307 = *(_DWORD *)(v333 + 3632);
  v306 = *(void *)(v333 + 2816);
  v287 = *(void *)(v333 + 2680);
  v283 = NightingaleDPFLRunner.performanceMeasure.getter();
  v320 = 1;
  object = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("QueryRequiredFeatures", 0x15uLL, 1)._object;
  dispatch thunk of PerformanceMeasure.finish(_:)();
  v284 = v20;
  swift_bridgeObjectRelease();
  swift_release();
  v303 = v333 + 2224;
  *(void *)(v333 + 2224) = v284;
  unsigned int v21 = default argument 1 of NightingaleDPFLRunner.sendLocation(_:_:)();
  NightingaleDPFLRunner.sendLocation(_:_:)(NightingaleTraining_NightingaleDReachLocation_queryRequiredFeaturesCompleted, v21);
  v286 = NightingaleDPFLRunner.performanceMeasure.getter();
  v285 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Featurization", 0xDuLL, v320 & 1)._object;
  dispatch thunk of PerformanceMeasure.start(_:)();
  swift_bridgeObjectRelease();
  swift_release();
  type metadata accessor for Featurizer();
  uint64_t v22 = Featurizer.__allocating_init()();
  uint64_t v23 = v333;
  v305 = v22;
  *(void *)(v333 + 3288) = v22;
  v319 = v23 + 2232;
  *(void *)(v23 + 2232) = v22;
  swift_retain();
  swift_retain();
  v321 = swift_task_alloc();
  *(void *)(v333 + 3296) = v321;
  *(void *)(v321 + 16) = v305;
  uint64_t v24 = (void *)v321;
  *(void *)(v321 + 24) = v333 + 2000;
  v24[4] = v333 + 1808;
  v24[5] = v333 + 1816;
  v24[6] = v333 + 1832;
  v24[7] = v333 + 1824;
  v24[8] = v333 + 1840;
  v24[9] = v333 + 1848;
  v24[10] = v333 + 1856;
  v24[11] = v333 + 1864;
  v24[12] = v333 + 1800;
  *(void *)(v321 + 104) = v306;
  *(_DWORD *)(v321 + 112) = v307;
  unsigned int v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int]));
  NightingaleDPFLRunner.sendLocation<A>(location:force:work:)(10, v320 & 1, v321, v25, v333 + 16);
  v322 = v338;
  if (v338)
  {
    v139 = *(void *)(v333 + 3048);
    v140 = *(void *)(v333 + 2992);
    v141 = *(void *)(v333 + 2976);
    v142 = *(void *)(v333 + 2880);
    v143 = *(id *)(v333 + 2856);
    v144 = *(id *)(v333 + 2832);
    v145 = *(void *)(v333 + 2816);
    swift_task_dealloc();
    swift_release();
    swift_release();
    swift_release();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    swift_release();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();

    swift_release();
    v163 = v322;
    goto LABEL_23;
  }
  v241 = *(void *)(v333 + 3208);
  v239 = *(void *)(v333 + 3136);
  v269 = *(void *)(v333 + 3128);
  v266 = *(void *)(v333 + 3120);
  v264 = *(void *)(v333 + 3112);
  v262 = *(void *)(v333 + 3104);
  v260 = *(void *)(v333 + 3096);
  v258 = *(void *)(v333 + 3088);
  v256 = *(void *)(v333 + 3080);
  v254 = *(void *)(v333 + 3056);
  v237 = *(void *)(v333 + 3032);
  v235 = *(void *)(v333 + 2984);
  v252 = *(void *)(v333 + 2968);
  v250 = *(void *)(v333 + 2960);
  v233 = *(void *)(v333 + 2864);
  v248 = *(void *)(v333 + 2824);
  v210 = *(void *)(v333 + 2816);
  swift_release();
  swift_release();
  char v26 = (void *)v333;
  id v27 = *(void **)(v333 + 16);
  v211 = v27;
  *(void *)(v333 + 3304) = v27;
  id v28 = (void *)v26[3];
  v212 = v28;
  v26[414] = v28;
  uint64_t v29 = (void *)v26[4];
  v213._rawValue = v29;
  v26[415] = v29;
  uint64_t v30 = (void *)v26[5];
  v214._rawValue = v30;
  v26[416] = v30;
  uint64_t v31 = (void *)v26[6];
  v215._rawValue = v31;
  v26[417] = v31;
  uint64_t v32 = (void *)v26[7];
  v216._rawValue = v32;
  v26[418] = v32;
  uint64_t v33 = (void *)v26[8];
  v217._rawValue = v33;
  v26[419] = v33;
  uint64_t v34 = (void *)v26[9];
  v218._rawValue = v34;
  v26[420] = v34;
  uint64_t v35 = (void *)v26[10];
  v219._rawValue = v35;
  v26[421] = v35;
  uint64_t v36 = (void *)v26[11];
  v220._rawValue = v36;
  v26[422] = v36;
  uint64_t v37 = (void *)v26[12];
  v221._rawValue = v37;
  v26[423] = v37;
  uint64_t v38 = (void *)v26[13];
  v222._rawValue = v38;
  v26[424] = v38;
  uint64_t v39 = (void *)v26[14];
  v223._rawValue = v39;
  v26[425] = v39;
  uint64_t v40 = (void *)v26[15];
  v224._rawValue = v40;
  v26[426] = v40;
  uint64_t v41 = (void *)v26[16];
  v225._rawValue = v41;
  v26[427] = v41;
  uint64_t v42 = (void *)v26[17];
  v226._rawValue = v42;
  v26[428] = v42;
  int v43 = (void *)v26[18];
  v227._rawValue = v43;
  v26[429] = v43;
  uint64_t v44 = (void *)v26[19];
  v228._rawValue = v44;
  v26[430] = v44;
  unint64_t v45 = v26[20];
  v229 = v45;
  v26[431] = v45;
  uint64_t v46 = v26[21];
  v230 = v46;
  v26[432] = v46;
  unsigned int v47 = v26[22];
  v273 = v47;
  v26[433] = v47;
  v274 = v26 + 23;
  v26[23] = v27;
  v26[24] = v28;
  v26[25] = v29;
  v26[26] = v30;
  v26[27] = v31;
  v26[28] = v32;
  v26[29] = v33;
  v26[30] = v34;
  v26[31] = v35;
  v26[32] = v36;
  v26[33] = v37;
  v26[34] = v38;
  v26[35] = v39;
  v26[36] = v40;
  v26[37] = v41;
  v26[38] = v42;
  v26[39] = v43;
  v26[40] = v44;
  v26[41] = v45;
  v26[42] = v46;
  v26[43] = v47;
  v232 = NightingaleDPFLRunner.performanceMeasure.getter();
  v231 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Featurization", 0xDuLL, 1)._object;
  dispatch thunk of PerformanceMeasure.finish(_:)();
  v245 = v48;
  swift_bridgeObjectRelease();
  swift_release();
  v275 = v333 + 2240;
  *(void *)(v333 + 2240) = v245;
  v270 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any));
  v271 = _allocateUninitializedArray<A>(_:)();
  v268 = v49;
  uint64_t v50 = NightingaleDPFLRunner.keyMetricsCycleTrackingCheckDurationS.unsafeMutableAddressor();
  outlined init with copy of String(v50, v268);
  unint64_t v51 = v233;
  int v52 = v268;
  v247 = MEMORY[0x263F8D538];
  v268[5] = MEMORY[0x263F8D538];
  v52[2] = v51;
  v234 = v52 + 6;
  Duration = NightingaleDPFLRunner.keyMetricsPregnanciesQueryDurationS.unsafeMutableAddressor();
  outlined init with copy of String(Duration, v234);
  unint64_t v54 = v235;
  uint64_t v55 = v268;
  v268[11] = v247;
  v55[8] = v54;
  v236 = v55 + 12;
  uint64_t v56 = NightingaleDPFLRunner.keyMetricsUpdatingFeaturesQueryDurationS.unsafeMutableAddressor();
  outlined init with copy of String(v56, v236);
  uint64_t v57 = v237;
  uint64_t v58 = v268;
  v268[17] = v247;
  v58[14] = v57;
  v238 = v58 + 18;
  updated = NightingaleDPFLRunner.keyMetricsUpdatePregnanciesDurationS.unsafeMutableAddressor();
  outlined init with copy of String(updated, v238);
  uint64_t v60 = v239;
  uint64_t v61 = v268;
  v268[23] = v247;
  v61[20] = v60;
  v240 = v61 + 24;
  uint64_t v62 = NightingaleDPFLRunner.keyMetricsUpdateSliceDeltaAnchorDurationS.unsafeMutableAddressor();
  outlined init with copy of String(v62, v240);
  uint64_t v63 = v241;
  uint64_t v64 = v268;
  v268[29] = v247;
  v64[26] = v63;
  v242 = v64 + 30;
  int v65 = NightingaleDPFLRunner.keyMetricsSHRDurationS.unsafeMutableAddressor();
  outlined init with copy of String(v65, v242);
  uint64_t v66 = v268;
  int v67 = *(void *)(v333 + 2216);
  v268[35] = v247;
  v66[32] = v67;
  v243 = v66 + 36;
  uint64_t v68 = NightingaleDPFLRunner.keyMetricsRequiredFeaturesQueryDurationS.unsafeMutableAddressor();
  outlined init with copy of String(v68, v243);
  uint64_t v69 = v284;
  uint64_t v70 = v268;
  v268[41] = v247;
  v70[38] = v69;
  v244 = v70 + 42;
  uint64_t v71 = NightingaleDPFLRunner.keyMetricsFeaturizationDurationS.unsafeMutableAddressor();
  outlined init with copy of String(v71, v244);
  uint64_t v72 = v245;
  uint64_t v73 = v268;
  v268[47] = v247;
  v73[44] = v72;
  v246 = v73 + 48;
  uint64_t v74 = NightingaleDPFLRunner.keyMetricsIterationElapsedTime.unsafeMutableAddressor();
  outlined init with copy of String(v74, v246);
  int v75 = v248;
  uint64_t v76 = v268;
  v268[53] = v247;
  v76[50] = v75;
  v249 = v76 + 54;
  int v77 = NightingaleDPFLRunner.keyMetricsNumberOfAllPregnancies.unsafeMutableAddressor();
  outlined init with copy of String(v77, v249);
  uint64_t v78 = v250;
  uint64_t v79 = v268;
  v272 = MEMORY[0x263F8D6C8];
  v268[59] = MEMORY[0x263F8D6C8];
  v79[56] = v78;
  v251 = v79 + 60;
  uint64_t v80 = NightingaleDPFLRunner.keyMetricsNumberOfPregnancyInitializerFailed.unsafeMutableAddressor();
  outlined init with copy of String(v80, v251);
  uint64_t v81 = v252;
  uint64_t v82 = v268;
  v268[65] = v272;
  v82[62] = v81;
  v253 = v82 + 66;
  uint64_t v83 = NightingaleDPFLRunner.keyMetricsOverlappingPregnanciesCount.unsafeMutableAddressor();
  outlined init with copy of String(v83, v253);
  v84 = v254;
  v85 = v268;
  v268[71] = v272;
  v85[68] = v84;
  v255 = v85 + 72;
  v86 = NightingaleDPFLRunner.keyMetricsNumberOfValidPregnancies.unsafeMutableAddressor();
  outlined init with copy of String(v86, v255);
  v87 = v256;
  v88 = v268;
  v268[77] = v272;
  v88[74] = v87;
  v257 = v88 + 78;
  v89 = NightingaleDPFLRunner.keyMetricsInvalidDurationPregnanciesCount.unsafeMutableAddressor();
  outlined init with copy of String(v89, v257);
  v90 = v258;
  v91 = v268;
  v268[83] = v272;
  v91[80] = v90;
  v259 = v91 + 84;
  v92 = NightingaleDPFLRunner.keyMetricsInvalidLMPDeltaPregnanciesCount.unsafeMutableAddressor();
  outlined init with copy of String(v92, v259);
  v93 = v260;
  v94 = v268;
  v268[89] = v272;
  v94[86] = v93;
  v261 = v94 + 90;
  v95 = NightingaleDPFLRunner.keyMetricsContainsFlowPregnanciesCount.unsafeMutableAddressor();
  outlined init with copy of String(v95, v261);
  v96 = v262;
  v97 = v268;
  v268[95] = v272;
  v97[92] = v96;
  v263 = v97 + 96;
  v98 = NightingaleDPFLRunner.keyMetricsInvalidLMPPregnanciesCount.unsafeMutableAddressor();
  outlined init with copy of String(v98, v263);
  v99 = v264;
  v100 = v268;
  v268[101] = v272;
  v100[98] = v99;
  v265 = v100 + 102;
  v101 = NightingaleDPFLRunner.keyMetricsInvalidEndPregnanciesCount.unsafeMutableAddressor();
  outlined init with copy of String(v101, v265);
  v102 = v266;
  v103 = v268;
  v268[107] = v272;
  v103[104] = v102;
  v267 = v103 + 108;
  started = NightingaleDPFLRunner.keyMetricsInvalidStartSourcePregnanciesCount.unsafeMutableAddressor();
  outlined init with copy of String(started, v267);
  v105 = v268;
  v106 = v269;
  v268[113] = v272;
  v105[110] = v106;
  _finalizeUninitializedArray<A>(_:)();
  v277 = MEMORY[0x263F8D310];
  v278 = MEMORY[0x263F8EE58] + 8;
  v279 = MEMORY[0x263F8D320];
  v276 = Dictionary.init(dictionaryLiteral:)();
  outlined retain of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])((uint64_t)v274);
  _dictionaryUpCast<A, B, C, D>(_:)();
  v280 = Dictionary.merging(_:uniquingKeysWith:)();
  *(void *)(v333 + 3472) = v280;
  v281 = 0;
  v208 = *(void *)(v333 + 3144);
  v207 = *(unsigned __int8 *)(v333 + 3693);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v107 = v207;
  v108 = v333;
  v209 = v333 + 2248;
  *(void *)(v333 + 2248) = v280;
  *(unsigned char *)(v108 + 3668) = v107;
  *(unsigned char *)(v108 + 3669) = 0;
  if (== infix<A>(_:_:)())
  {
    v109 = v281;
    v202 = *(_DWORD *)(v333 + 3632);
    v198 = *(void *)(v333 + 2880);
    v203 = *(void *)(v333 + 2872);
    v199 = *(void *)(v333 + 2816);
    v200 = *(void *)(v333 + 1864);
    swift_bridgeObjectRetain();
    v201 = *(void *)(v333 + 1904);
    swift_bridgeObjectRetain();
    v197 = v333 + 184;
    outlined retain of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])(v333 + 184);
    v204 = v126;
    v205 = NightingaleDPFLRunner.runTraining(modelPath:hyperParams:historicalPeriods:pregnancies:today:features:existingMetrics:)(v203, v198, v199, v200, v201, v202, v211, v212, v213._rawValue, v214._rawValue, v215._rawValue, v216._rawValue, v217._rawValue, v218._rawValue, v219._rawValue, v220._rawValue, v221._rawValue, v222._rawValue, v223._rawValue,
             v224._rawValue,
             v225._rawValue,
             v226._rawValue,
             v227._rawValue,
             v228._rawValue,
             v229,
             v230,
             v273,
             v280);
    v206 = v109;
    if (!v109)
    {
      v188 = *(void *)(v333 + 3048);
      v189 = *(void *)(v333 + 2992);
      v190 = *(void *)(v333 + 2976);
      v191 = *(void *)(v333 + 2880);
      v192 = *(id *)(v333 + 2856);
      v193 = *(id *)(v333 + 2832);
      v194 = *(void *)(v333 + 2816);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v195 = v333 + 184;
      outlined release of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])(v333 + 184);
      swift_release();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      swift_bridgeObjectRelease();
      swift_release();
      outlined destroy of [A]();
      swift_bridgeObjectRelease();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      swift_bridgeObjectRelease();

      swift_release();
      swift_task_dealloc();
      v196 = v205;
      goto LABEL_17;
    }
    v131 = *(void *)(v333 + 3048);
    v132 = *(void *)(v333 + 2992);
    v133 = *(void *)(v333 + 2976);
    v134 = *(void *)(v333 + 2880);
    v135 = *(id *)(v333 + 2856);
    v136 = *(id *)(v333 + 2832);
    v137 = *(void *)(v333 + 2816);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v138 = v333 + 184;
    outlined release of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])(v333 + 184);
    swift_release();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    swift_release();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();

    swift_release();
    swift_task_dealloc();
    v163 = v206;
LABEL_23:
    v126[21] = *(id *)(v333 + 2784);
    v126[22] = *(id *)(v333 + 2776);
    v126[23] = *(id *)(v333 + 2752);
    v126[24] = *(id *)(v333 + 2744);
    v126[25] = *(id *)(v333 + 2720);
    v126[26] = *(id *)(v333 + 2712);
    v126[27] = *(id *)(v333 + 2704);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v124 = v332;
    v125 = *(uint64_t (**)(uint64_t))(*(void *)(v333 + 1688) + 8);
    return v125(v124);
  }
  v110 = v333;
  *(unsigned char *)(v333 + 3670) = *(unsigned char *)(v333 + 3693);
  *(unsigned char *)(v110 + 3671) = 1;
  if ((== infix<A>(_:_:)() & 1) == 0)
  {
    v113 = v333;
    *(unsigned char *)(v333 + 3672) = *(unsigned char *)(v333 + 3693);
    *(unsigned char *)(v113 + 3673) = 2;
    if (== infix<A>(_:_:)())
    {
      v167 = *(void *)(v333 + 2992);
      v166 = *(_DWORD *)(v333 + 3636);
      v164 = *(void *)(v333 + 2816);
      v165 = *(void *)(v333 + 2680);
      swift_retain();
      swift_retain();
      swift_retain();
      v114 = swift_task_alloc();
      v115 = v164;
      v116 = v165;
      v117 = v166;
      v118 = v167;
      v119 = v333;
      v168 = v114;
      *(void *)(v333 + 3480) = v114;
      *(void *)(v114 + 16) = v115;
      *(void *)(v114 + 24) = v119 + 1904;
      *(void *)(v114 + 32) = v116;
      *(_DWORD *)(v114 + 40) = v117;
      *(void *)(v114 + 48) = v119 + 1776;
      *(void *)(v114 + 56) = v119 + 1784;
      *(void *)(v114 + 64) = v119 + 1792;
      *(void *)(v114 + 72) = v119 + 1800;
      *(void *)(v114 + 80) = v119 + 1864;
      *(void *)(v114 + 88) = v118;
      v120 = (void *)swift_task_alloc();
      *(void *)(v333 + 3488) = v120;
      v121 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt32, UInt32));
      v122 = v333;
      uint64_t v12 = v336;
      uint64_t v13 = v168;
      uint64_t v14 = v121;
      *v120 = *(void *)(v333 + 1688);
      v120[1] = NightingaleDPFLRunner.run(task:useCase:context:);
      unsigned int v16 = v122 + 1556;
      uint64_t v17 = 9;
      uint64_t v18 = 1;
      return NightingaleDPFLRunner.sendLocationAsync<A>(location:force:work:)(v16, v17, v18, v12, v13, v14);
    }
    v154 = *(void *)(v333 + 3048);
    v155 = *(void *)(v333 + 2992);
    v156 = *(void *)(v333 + 2976);
    v157 = *(void *)(v333 + 2880);
    v158 = *(id *)(v333 + 2856);
    v159 = *(id *)(v333 + 2832);
    v160 = *(void *)(v333 + 2816);
    lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
    v162 = swift_allocError();
    *v123 = 48;
    swift_willThrow();
    swift_bridgeObjectRelease();
    v161 = v333 + 184;
    outlined release of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])(v333 + 184);
    swift_release();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    swift_release();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();

    swift_release();
    swift_task_dealloc();
    v163 = v162;
    goto LABEL_23;
  }
  v186 = PFLTask.evalModelNames(taskType:hyperParams:)();
  v187 = v281;
  if (v281)
  {
    v126[36] = *(id *)(v333 + 3048);
    v126[37] = *(id *)(v333 + 2992);
    v126[38] = *(id *)(v333 + 2976);
    v126[39] = *(id *)(v333 + 2880);
    v127 = *(id *)(v333 + 2856);
    v128 = *(id *)(v333 + 2832);
    v129 = *(void *)(v333 + 2816);
    swift_bridgeObjectRelease();
    v130 = v333 + 184;
    outlined release of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])(v333 + 184);
    swift_release();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    swift_release();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();

    swift_release();
    swift_task_dealloc();
    v163 = v187;
    goto LABEL_23;
  }
  v182 = *(_DWORD *)(v333 + 3632);
  v179 = *(void *)(v333 + 2816);
  v178 = *(void *)(v333 + 2672);
  v180 = *(void *)(v333 + 1864);
  swift_bridgeObjectRetain();
  v181 = *(void *)(v333 + 1904);
  swift_bridgeObjectRetain();
  v177 = v333 + 184;
  outlined retain of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])(v333 + 184);
  v111._rawValue = v211;
  v112._rawValue = v212;
  v183 = v126;
  v184 = NightingaleDPFLRunner.runEvals(evalModels:task:hyperParams:historicalPeriods:pregnancies:today:features:existingMetrics:)(v186, v178, v179, v180, v181, v182, v111, v112, v213, v214, v215, v216, v217, v218, v219, v220, v221, v222, v223,
           v224,
           v225,
           v226,
           v227,
           v228,
           v229,
           v230,
           v273,
           v280);
  v185 = 0;
  v169 = *(void *)(v333 + 3048);
  v170 = *(void *)(v333 + 2992);
  v171 = *(void *)(v333 + 2976);
  v172 = *(void *)(v333 + 2880);
  v173 = *(id *)(v333 + 2856);
  v174 = *(id *)(v333 + 2832);
  v175 = *(void *)(v333 + 2816);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v176 = v333 + 184;
  outlined release of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])(v333 + 184);
  swift_release();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  swift_bridgeObjectRelease();
  swift_release();
  outlined destroy of [A]();
  swift_bridgeObjectRelease();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  swift_bridgeObjectRelease();

  swift_release();
  swift_task_dealloc();
  v196 = v184;
LABEL_17:
  v153 = v196;
  v146 = *(void *)(v333 + 2784);
  v147 = *(void *)(v333 + 2776);
  v148 = *(void *)(v333 + 2752);
  v149 = *(void *)(v333 + 2744);
  v150 = *(void *)(v333 + 2720);
  v151 = *(void *)(v333 + 2712);
  v152 = *(void *)(v333 + 2704);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v124 = v153;
  v125 = *(uint64_t (**)(uint64_t))(*(void *)(v333 + 1688) + 8);
  return v125(v124);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;

  Swift::Int v4 = *v1;
  *(void *)(v4 + 1688) = *v1;
  *(void *)(v4 + 3280) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = NightingaleDPFLRunner.run(task:useCase:context:);
  }
  else
  {
    swift_task_dealloc();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v2 = NightingaleDPFLRunner.run(task:useCase:context:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::Int v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  long long *v32;
  uint64_t v33;
  void *v34;
  long long *Duration;
  uint64_t v36;
  void *v37;
  long long *v38;
  uint64_t v39;
  void *v40;
  long long *updated;
  uint64_t v42;
  void *v43;
  long long *v44;
  uint64_t v45;
  void *v46;
  long long *v47;
  void *v48;
  uint64_t v49;
  long long *v50;
  uint64_t v51;
  void *v52;
  long long *v53;
  uint64_t v54;
  void *v55;
  long long *v56;
  uint64_t v57;
  void *v58;
  long long *v59;
  uint64_t v60;
  void *v61;
  long long *v62;
  uint64_t v63;
  void *v64;
  long long *v65;
  uint64_t v66;
  void *v67;
  long long *v68;
  uint64_t v69;
  void *v70;
  long long *v71;
  uint64_t v72;
  void *v73;
  long long *v74;
  uint64_t v75;
  void *v76;
  long long *v77;
  uint64_t v78;
  void *v79;
  long long *v80;
  uint64_t v81;
  void *v82;
  long long *v83;
  uint64_t v84;
  void *v85;
  long long *started;
  void *v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  Swift::OpaquePointer v93;
  Swift::OpaquePointer v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  int *v105;
  uint64_t v106;
  unsigned char *v108;
  uint64_t v109;
  uint64_t (*v110)(uint64_t);
  id v111[39];
  id v112;
  id v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  id v120;
  id v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  id v128;
  id v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  id v143;
  id v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  id v158;
  id v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  id *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  id v177;
  id v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  uint64_t v188;
  id *v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  void *v196;
  void *v197;
  Swift::OpaquePointer v198;
  Swift::OpaquePointer v199;
  Swift::OpaquePointer v200;
  Swift::OpaquePointer v201;
  Swift::OpaquePointer v202;
  Swift::OpaquePointer v203;
  Swift::OpaquePointer v204;
  Swift::OpaquePointer v205;
  Swift::OpaquePointer v206;
  Swift::OpaquePointer v207;
  Swift::OpaquePointer v208;
  Swift::OpaquePointer v209;
  Swift::OpaquePointer v210;
  Swift::OpaquePointer v211;
  Swift::OpaquePointer v212;
  Swift::OpaquePointer v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  void *v217;
  uint64_t v218;
  uint64_t v219;
  void *v220;
  uint64_t v221;
  void *v222;
  uint64_t v223;
  void *v224;
  uint64_t v225;
  void *v226;
  uint64_t v227;
  void *v228;
  void *v229;
  void *v230;
  uint64_t v231;
  void *v232;
  uint64_t v233;
  uint64_t v234;
  void *v235;
  uint64_t v236;
  void *v237;
  uint64_t v238;
  void *v239;
  uint64_t v240;
  void *v241;
  uint64_t v242;
  void *v243;
  uint64_t v244;
  void *v245;
  uint64_t v246;
  void *v247;
  uint64_t v248;
  void *v249;
  uint64_t v250;
  void *v251;
  uint64_t v252;
  void *v253;
  void *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  void *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t (*v268)@<X0>(uint64_t@<X1>, uint64_t@<X8>);
  int *v269;
  void *object;
  uint64_t v271;
  uint64_t v272;
  void *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  int v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  int v311;
  uint64_t (*v312)@<X0>(void *@<X8>);
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;

  v315 = v0;
  v310 = v0;
  v275 = 0;
  v312 = partial apply for closure #35 in NightingaleDPFLRunner.run(task:useCase:context:);
  v268 = closure #36 in NightingaleDPFLRunner.run(task:useCase:context:);
  v269 = (int *)&async function pointer to partial apply for closure #37 in NightingaleDPFLRunner.run(task:useCase:context:);
  *(void *)(v0 + 1688) = v0;
  v298 = v0 + 1696;
  v299 = v0 + 1640;
  v300 = v0 + 1704;
  v301 = v0 + 1712;
  v302 = v0 + 1720;
  v303 = v0 + 1728;
  v304 = v0 + 1736;
  v305 = v0 + 1744;
  v306 = v0 + 1752;
  v307 = v0 + 1760;
  v308 = v0 + 1768;
  v293 = v0 + 1656;
  v277 = v0 + 1912;
  v278 = v0 + 1952;
  v279 = v0 + 1984;
  v280 = v0 + 1992;
  v281 = v0 + 2024;
  v282 = v0 + 2040;
  v283 = v0 + 2056;
  v297 = v0 + 2072;
  v284 = v0 + 2088;
  v285 = v0 + 2104;
  v286 = v0 + 2120;
  v287 = v0 + 2128;
  v288 = v0 + 2136;
  v289 = v0 + 3528;
  v290 = v0 + 3536;
  v291 = v0 + 1548;
  uint64_t v1 = *(void *)(v0 + 3280);
  v296 = *(_DWORD *)(v0 + 3632);
  v295 = *(void *)(v0 + 2816);
  v276 = *(void *)(v0 + 2680);
  v271 = NightingaleDPFLRunner.performanceMeasure.getter();
  v311 = 1;
  object = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("QueryRequiredFeatures", 0x15uLL, 1)._object;
  dispatch thunk of PerformanceMeasure.finish(_:)();
  v272 = v2;
  swift_bridgeObjectRelease();
  swift_release();
  v292 = v310 + 2224;
  *(void *)(v310 + 2224) = v272;
  uint64_t v3 = default argument 1 of NightingaleDPFLRunner.sendLocation(_:_:)();
  NightingaleDPFLRunner.sendLocation(_:_:)(NightingaleTraining_NightingaleDReachLocation_queryRequiredFeaturesCompleted, v3);
  v274 = NightingaleDPFLRunner.performanceMeasure.getter();
  v273 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Featurization", 0xDuLL, v311 & 1)._object;
  dispatch thunk of PerformanceMeasure.start(_:)();
  swift_bridgeObjectRelease();
  swift_release();
  type metadata accessor for Featurizer();
  Swift::Int v4 = Featurizer.__allocating_init()();
  Swift::Double v5 = v310;
  v294 = v4;
  *(void *)(v310 + 3288) = v4;
  v309 = v5 + 2232;
  *(void *)(v5 + 2232) = v4;
  swift_retain();
  swift_retain();
  v313 = swift_task_alloc();
  *(void *)(v310 + 3296) = v313;
  *(void *)(v313 + 16) = v294;
  uint64_t v6 = (void *)v313;
  *(void *)(v313 + 24) = v310 + 2000;
  v6[4] = v310 + 1808;
  v6[5] = v310 + 1816;
  v6[6] = v310 + 1832;
  v6[7] = v310 + 1824;
  v6[8] = v310 + 1840;
  v6[9] = v310 + 1848;
  v6[10] = v310 + 1856;
  v6[11] = v310 + 1864;
  v6[12] = v310 + 1800;
  *(void *)(v313 + 104) = v295;
  *(_DWORD *)(v313 + 112) = v296;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int]));
  NightingaleDPFLRunner.sendLocation<A>(location:force:work:)(10, v311 & 1, v313, v7, v310 + 16);
  v314 = v1;
  if (v1)
  {
    v124 = *(void *)(v310 + 3048);
    v125 = *(void *)(v310 + 2992);
    v126 = *(void *)(v310 + 2976);
    v127 = *(void *)(v310 + 2880);
    v128 = *(id *)(v310 + 2856);
    v129 = *(id *)(v310 + 2832);
    v130 = *(void *)(v310 + 2816);
    swift_task_dealloc();
    swift_release();
    swift_release();
    swift_release();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    swift_release();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();

    swift_release();
    v148 = v314;
    goto LABEL_19;
  }
  v227 = *(void *)(v310 + 3208);
  v225 = *(void *)(v310 + 3136);
  v255 = *(void *)(v310 + 3128);
  v252 = *(void *)(v310 + 3120);
  v250 = *(void *)(v310 + 3112);
  v248 = *(void *)(v310 + 3104);
  v246 = *(void *)(v310 + 3096);
  v244 = *(void *)(v310 + 3088);
  v242 = *(void *)(v310 + 3080);
  v240 = *(void *)(v310 + 3056);
  v223 = *(void *)(v310 + 3032);
  v221 = *(void *)(v310 + 2984);
  v238 = *(void *)(v310 + 2968);
  v236 = *(void *)(v310 + 2960);
  v219 = *(void *)(v310 + 2864);
  v234 = *(void *)(v310 + 2824);
  v195 = *(void *)(v310 + 2816);
  swift_release();
  swift_release();
  uint64_t v8 = (void *)v310;
  uint64_t v9 = *(void **)(v310 + 16);
  v196 = v9;
  *(void *)(v310 + 3304) = v9;
  char v10 = (void *)v8[3];
  v197 = v10;
  v8[414] = v10;
  uint64_t v11 = (void *)v8[4];
  v198._rawValue = v11;
  v8[415] = v11;
  uint64_t v12 = (void *)v8[5];
  v199._rawValue = v12;
  v8[416] = v12;
  uint64_t v13 = (void *)v8[6];
  v200._rawValue = v13;
  v8[417] = v13;
  uint64_t v14 = (void *)v8[7];
  v201._rawValue = v14;
  v8[418] = v14;
  uint64_t v15 = (void *)v8[8];
  v202._rawValue = v15;
  v8[419] = v15;
  unsigned int v16 = (void *)v8[9];
  v203._rawValue = v16;
  v8[420] = v16;
  uint64_t v17 = (void *)v8[10];
  v204._rawValue = v17;
  v8[421] = v17;
  uint64_t v18 = (void *)v8[11];
  v205._rawValue = v18;
  v8[422] = v18;
  uint64_t v19 = (void *)v8[12];
  v206._rawValue = v19;
  v8[423] = v19;
  uint64_t v20 = (void *)v8[13];
  v207._rawValue = v20;
  v8[424] = v20;
  unsigned int v21 = (void *)v8[14];
  v208._rawValue = v21;
  v8[425] = v21;
  uint64_t v22 = (void *)v8[15];
  v209._rawValue = v22;
  v8[426] = v22;
  uint64_t v23 = (void *)v8[16];
  v210._rawValue = v23;
  v8[427] = v23;
  uint64_t v24 = (void *)v8[17];
  v211._rawValue = v24;
  v8[428] = v24;
  unsigned int v25 = (void *)v8[18];
  v212._rawValue = v25;
  v8[429] = v25;
  char v26 = (void *)v8[19];
  v213._rawValue = v26;
  v8[430] = v26;
  id v27 = v8[20];
  v214 = v27;
  v8[431] = v27;
  id v28 = v8[21];
  v215 = v28;
  v8[432] = v28;
  uint64_t v29 = v8[22];
  v259 = v29;
  v8[433] = v29;
  v260 = v8 + 23;
  v8[23] = v9;
  v8[24] = v10;
  v8[25] = v11;
  v8[26] = v12;
  v8[27] = v13;
  v8[28] = v14;
  v8[29] = v15;
  v8[30] = v16;
  v8[31] = v17;
  v8[32] = v18;
  v8[33] = v19;
  v8[34] = v20;
  v8[35] = v21;
  v8[36] = v22;
  v8[37] = v23;
  v8[38] = v24;
  v8[39] = v25;
  v8[40] = v26;
  v8[41] = v27;
  v8[42] = v28;
  v8[43] = v29;
  v218 = NightingaleDPFLRunner.performanceMeasure.getter();
  v217 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Featurization", 0xDuLL, 1)._object;
  dispatch thunk of PerformanceMeasure.finish(_:)();
  v231 = v30;
  swift_bridgeObjectRelease();
  swift_release();
  v261 = v310 + 2240;
  *(void *)(v310 + 2240) = v231;
  v256 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any));
  v257 = _allocateUninitializedArray<A>(_:)();
  v254 = v31;
  uint64_t v32 = NightingaleDPFLRunner.keyMetricsCycleTrackingCheckDurationS.unsafeMutableAddressor();
  outlined init with copy of String(v32, v254);
  uint64_t v33 = v219;
  uint64_t v34 = v254;
  v233 = MEMORY[0x263F8D538];
  v254[5] = MEMORY[0x263F8D538];
  v34[2] = v33;
  v220 = v34 + 6;
  Duration = NightingaleDPFLRunner.keyMetricsPregnanciesQueryDurationS.unsafeMutableAddressor();
  outlined init with copy of String(Duration, v220);
  uint64_t v36 = v221;
  uint64_t v37 = v254;
  v254[11] = v233;
  v37[8] = v36;
  v222 = v37 + 12;
  uint64_t v38 = NightingaleDPFLRunner.keyMetricsUpdatingFeaturesQueryDurationS.unsafeMutableAddressor();
  outlined init with copy of String(v38, v222);
  uint64_t v39 = v223;
  uint64_t v40 = v254;
  v254[17] = v233;
  v40[14] = v39;
  v224 = v40 + 18;
  updated = NightingaleDPFLRunner.keyMetricsUpdatePregnanciesDurationS.unsafeMutableAddressor();
  outlined init with copy of String(updated, v224);
  uint64_t v42 = v225;
  int v43 = v254;
  v254[23] = v233;
  v43[20] = v42;
  v226 = v43 + 24;
  uint64_t v44 = NightingaleDPFLRunner.keyMetricsUpdateSliceDeltaAnchorDurationS.unsafeMutableAddressor();
  outlined init with copy of String(v44, v226);
  unint64_t v45 = v227;
  uint64_t v46 = v254;
  v254[29] = v233;
  v46[26] = v45;
  v228 = v46 + 30;
  unsigned int v47 = NightingaleDPFLRunner.keyMetricsSHRDurationS.unsafeMutableAddressor();
  outlined init with copy of String(v47, v228);
  uint64_t v48 = v254;
  uint64_t v49 = *(void *)(v310 + 2216);
  v254[35] = v233;
  v48[32] = v49;
  v229 = v48 + 36;
  uint64_t v50 = NightingaleDPFLRunner.keyMetricsRequiredFeaturesQueryDurationS.unsafeMutableAddressor();
  outlined init with copy of String(v50, v229);
  unint64_t v51 = v272;
  int v52 = v254;
  v254[41] = v233;
  v52[38] = v51;
  v230 = v52 + 42;
  unint64_t v53 = NightingaleDPFLRunner.keyMetricsFeaturizationDurationS.unsafeMutableAddressor();
  outlined init with copy of String(v53, v230);
  unint64_t v54 = v231;
  uint64_t v55 = v254;
  v254[47] = v233;
  v55[44] = v54;
  v232 = v55 + 48;
  uint64_t v56 = NightingaleDPFLRunner.keyMetricsIterationElapsedTime.unsafeMutableAddressor();
  outlined init with copy of String(v56, v232);
  uint64_t v57 = v234;
  uint64_t v58 = v254;
  v254[53] = v233;
  v58[50] = v57;
  v235 = v58 + 54;
  uint64_t v59 = NightingaleDPFLRunner.keyMetricsNumberOfAllPregnancies.unsafeMutableAddressor();
  outlined init with copy of String(v59, v235);
  uint64_t v60 = v236;
  uint64_t v61 = v254;
  v258 = MEMORY[0x263F8D6C8];
  v254[59] = MEMORY[0x263F8D6C8];
  v61[56] = v60;
  v237 = v61 + 60;
  uint64_t v62 = NightingaleDPFLRunner.keyMetricsNumberOfPregnancyInitializerFailed.unsafeMutableAddressor();
  outlined init with copy of String(v62, v237);
  uint64_t v63 = v238;
  uint64_t v64 = v254;
  v254[65] = v258;
  v64[62] = v63;
  v239 = v64 + 66;
  int v65 = NightingaleDPFLRunner.keyMetricsOverlappingPregnanciesCount.unsafeMutableAddressor();
  outlined init with copy of String(v65, v239);
  uint64_t v66 = v240;
  int v67 = v254;
  v254[71] = v258;
  v67[68] = v66;
  v241 = v67 + 72;
  uint64_t v68 = NightingaleDPFLRunner.keyMetricsNumberOfValidPregnancies.unsafeMutableAddressor();
  outlined init with copy of String(v68, v241);
  uint64_t v69 = v242;
  uint64_t v70 = v254;
  v254[77] = v258;
  v70[74] = v69;
  v243 = v70 + 78;
  uint64_t v71 = NightingaleDPFLRunner.keyMetricsInvalidDurationPregnanciesCount.unsafeMutableAddressor();
  outlined init with copy of String(v71, v243);
  uint64_t v72 = v244;
  uint64_t v73 = v254;
  v254[83] = v258;
  v73[80] = v72;
  v245 = v73 + 84;
  uint64_t v74 = NightingaleDPFLRunner.keyMetricsInvalidLMPDeltaPregnanciesCount.unsafeMutableAddressor();
  outlined init with copy of String(v74, v245);
  int v75 = v246;
  uint64_t v76 = v254;
  v254[89] = v258;
  v76[86] = v75;
  v247 = v76 + 90;
  int v77 = NightingaleDPFLRunner.keyMetricsContainsFlowPregnanciesCount.unsafeMutableAddressor();
  outlined init with copy of String(v77, v247);
  uint64_t v78 = v248;
  uint64_t v79 = v254;
  v254[95] = v258;
  v79[92] = v78;
  v249 = v79 + 96;
  uint64_t v80 = NightingaleDPFLRunner.keyMetricsInvalidLMPPregnanciesCount.unsafeMutableAddressor();
  outlined init with copy of String(v80, v249);
  uint64_t v81 = v250;
  uint64_t v82 = v254;
  v254[101] = v258;
  v82[98] = v81;
  v251 = v82 + 102;
  uint64_t v83 = NightingaleDPFLRunner.keyMetricsInvalidEndPregnanciesCount.unsafeMutableAddressor();
  outlined init with copy of String(v83, v251);
  v84 = v252;
  v85 = v254;
  v254[107] = v258;
  v85[104] = v84;
  v253 = v85 + 108;
  started = NightingaleDPFLRunner.keyMetricsInvalidStartSourcePregnanciesCount.unsafeMutableAddressor();
  outlined init with copy of String(started, v253);
  v87 = v254;
  v88 = v255;
  v254[113] = v258;
  v87[110] = v88;
  _finalizeUninitializedArray<A>(_:)();
  v263 = MEMORY[0x263F8D310];
  v264 = MEMORY[0x263F8EE58] + 8;
  v265 = MEMORY[0x263F8D320];
  v262 = Dictionary.init(dictionaryLiteral:)();
  outlined retain of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])((uint64_t)v260);
  _dictionaryUpCast<A, B, C, D>(_:)();
  v266 = Dictionary.merging(_:uniquingKeysWith:)();
  *(void *)(v310 + 3472) = v266;
  v267 = 0;
  v193 = *(void *)(v310 + 3144);
  v192 = *(unsigned __int8 *)(v310 + 3693);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v89 = v192;
  v90 = v310;
  v194 = v310 + 2248;
  *(void *)(v310 + 2248) = v266;
  *(unsigned char *)(v90 + 3668) = v89;
  *(unsigned char *)(v90 + 3669) = 0;
  if (== infix<A>(_:_:)())
  {
    v91 = v267;
    v187 = *(_DWORD *)(v310 + 3632);
    v183 = *(void *)(v310 + 2880);
    v188 = *(void *)(v310 + 2872);
    v184 = *(void *)(v310 + 2816);
    v185 = *(void *)(v310 + 1864);
    swift_bridgeObjectRetain();
    v186 = *(void *)(v310 + 1904);
    swift_bridgeObjectRetain();
    v182 = v310 + 184;
    outlined retain of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])(v310 + 184);
    v189 = v111;
    v190 = NightingaleDPFLRunner.runTraining(modelPath:hyperParams:historicalPeriods:pregnancies:today:features:existingMetrics:)(v188, v183, v184, v185, v186, v187, v196, v197, v198._rawValue, v199._rawValue, v200._rawValue, v201._rawValue, v202._rawValue, v203._rawValue, v204._rawValue, v205._rawValue, v206._rawValue, v207._rawValue, v208._rawValue,
             v209._rawValue,
             v210._rawValue,
             v211._rawValue,
             v212._rawValue,
             v213._rawValue,
             v214,
             v215,
             v259,
             v266);
    v191 = v91;
    if (!v91)
    {
      v173 = *(void *)(v310 + 3048);
      v174 = *(void *)(v310 + 2992);
      v175 = *(void *)(v310 + 2976);
      v176 = *(void *)(v310 + 2880);
      v177 = *(id *)(v310 + 2856);
      v178 = *(id *)(v310 + 2832);
      v179 = *(void *)(v310 + 2816);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v180 = v310 + 184;
      outlined release of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])(v310 + 184);
      swift_release();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      swift_bridgeObjectRelease();
      swift_release();
      outlined destroy of [A]();
      swift_bridgeObjectRelease();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      swift_bridgeObjectRelease();

      swift_release();
      swift_task_dealloc();
      v181 = v190;
      goto LABEL_13;
    }
    v116 = *(void *)(v310 + 3048);
    v117 = *(void *)(v310 + 2992);
    v118 = *(void *)(v310 + 2976);
    v119 = *(void *)(v310 + 2880);
    v120 = *(id *)(v310 + 2856);
    v121 = *(id *)(v310 + 2832);
    v122 = *(void *)(v310 + 2816);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v123 = v310 + 184;
    outlined release of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])(v310 + 184);
    swift_release();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    swift_release();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();

    swift_release();
    swift_task_dealloc();
    v148 = v191;
    goto LABEL_19;
  }
  v92 = v310;
  *(unsigned char *)(v310 + 3670) = *(unsigned char *)(v310 + 3693);
  *(unsigned char *)(v92 + 3671) = 1;
  if (== infix<A>(_:_:)())
  {
    v171 = PFLTask.evalModelNames(taskType:hyperParams:)();
    v172 = v267;
    if (!v267)
    {
      v167 = *(_DWORD *)(v310 + 3632);
      v164 = *(void *)(v310 + 2816);
      v163 = *(void *)(v310 + 2672);
      v165 = *(void *)(v310 + 1864);
      swift_bridgeObjectRetain();
      v166 = *(void *)(v310 + 1904);
      swift_bridgeObjectRetain();
      v162 = v310 + 184;
      outlined retain of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])(v310 + 184);
      v93._rawValue = v196;
      v94._rawValue = v197;
      v168 = v111;
      v169 = NightingaleDPFLRunner.runEvals(evalModels:task:hyperParams:historicalPeriods:pregnancies:today:features:existingMetrics:)(v171, v163, v164, v165, v166, v167, v93, v94, v198, v199, v200, v201, v202, v203, v204, v205, v206, v207, v208,
               v209,
               v210,
               v211,
               v212,
               v213,
               v214,
               v215,
               v259,
               v266);
      v170 = 0;
      v154 = *(void *)(v310 + 3048);
      v155 = *(void *)(v310 + 2992);
      v156 = *(void *)(v310 + 2976);
      v157 = *(void *)(v310 + 2880);
      v158 = *(id *)(v310 + 2856);
      v159 = *(id *)(v310 + 2832);
      v160 = *(void *)(v310 + 2816);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v161 = v310 + 184;
      outlined release of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])(v310 + 184);
      swift_release();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      swift_bridgeObjectRelease();
      swift_release();
      outlined destroy of [A]();
      swift_bridgeObjectRelease();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      swift_bridgeObjectRelease();

      swift_release();
      swift_task_dealloc();
      v181 = v169;
LABEL_13:
      v138 = v181;
      v131 = *(void *)(v310 + 2784);
      v132 = *(void *)(v310 + 2776);
      v133 = *(void *)(v310 + 2752);
      v134 = *(void *)(v310 + 2744);
      v135 = *(void *)(v310 + 2720);
      v136 = *(void *)(v310 + 2712);
      v137 = *(void *)(v310 + 2704);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      v109 = v138;
      v110 = *(uint64_t (**)(uint64_t))(*(void *)(v310 + 1688) + 8);
      return v110(v109);
    }
    v111[35] = *(id *)(v310 + 3048);
    v111[36] = *(id *)(v310 + 2992);
    v111[37] = *(id *)(v310 + 2976);
    v111[38] = *(id *)(v310 + 2880);
    v112 = *(id *)(v310 + 2856);
    v113 = *(id *)(v310 + 2832);
    v114 = *(void *)(v310 + 2816);
    swift_bridgeObjectRelease();
    v115 = v310 + 184;
    outlined release of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])(v310 + 184);
    swift_release();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    swift_release();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();

    swift_release();
    swift_task_dealloc();
    v148 = v172;
LABEL_19:
    v111[20] = *(id *)(v310 + 2784);
    v111[21] = *(id *)(v310 + 2776);
    v111[22] = *(id *)(v310 + 2752);
    v111[23] = *(id *)(v310 + 2744);
    v111[24] = *(id *)(v310 + 2720);
    v111[25] = *(id *)(v310 + 2712);
    v111[26] = *(id *)(v310 + 2704);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v109 = v216;
    v110 = *(uint64_t (**)(uint64_t))(*(void *)(v310 + 1688) + 8);
    return v110(v109);
  }
  v95 = v310;
  *(unsigned char *)(v310 + 3672) = *(unsigned char *)(v310 + 3693);
  *(unsigned char *)(v95 + 3673) = 2;
  if ((== infix<A>(_:_:)() & 1) == 0)
  {
    v139 = *(void *)(v310 + 3048);
    v140 = *(void *)(v310 + 2992);
    v141 = *(void *)(v310 + 2976);
    v142 = *(void *)(v310 + 2880);
    v143 = *(id *)(v310 + 2856);
    v144 = *(id *)(v310 + 2832);
    v145 = *(void *)(v310 + 2816);
    lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
    v147 = swift_allocError();
    *v108 = 48;
    swift_willThrow();
    swift_bridgeObjectRelease();
    v146 = v310 + 184;
    outlined release of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])(v310 + 184);
    swift_release();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    swift_release();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();

    swift_release();
    swift_task_dealloc();
    v148 = v147;
    goto LABEL_19;
  }
  v152 = *(void *)(v310 + 2992);
  v151 = *(_DWORD *)(v310 + 3636);
  v149 = *(void *)(v310 + 2816);
  v150 = *(void *)(v310 + 2680);
  swift_retain();
  swift_retain();
  swift_retain();
  v96 = swift_task_alloc();
  v97 = v149;
  v98 = v150;
  v99 = v151;
  v100 = v152;
  v101 = v310;
  v153 = v96;
  *(void *)(v310 + 3480) = v96;
  *(void *)(v96 + 16) = v97;
  *(void *)(v96 + 24) = v101 + 1904;
  *(void *)(v96 + 32) = v98;
  *(_DWORD *)(v96 + 40) = v99;
  *(void *)(v96 + 48) = v101 + 1776;
  *(void *)(v96 + 56) = v101 + 1784;
  *(void *)(v96 + 64) = v101 + 1792;
  *(void *)(v96 + 72) = v101 + 1800;
  *(void *)(v96 + 80) = v101 + 1864;
  *(void *)(v96 + 88) = v100;
  v102 = (void *)swift_task_alloc();
  *(void *)(v310 + 3488) = v102;
  v103 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt32, UInt32));
  v104 = v310;
  v105 = v269;
  v106 = v153;
  *v102 = *(void *)(v310 + 1688);
  v102[1] = NightingaleDPFLRunner.run(task:useCase:context:);
  return NightingaleDPFLRunner.sendLocationAsync<A>(location:force:work:)(v104 + 1556, 9, 1, v105, v106, v103);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;

  Swift::Int v4 = *v1;
  *(void *)(v4 + 1688) = *v1;
  *(void *)(v4 + 3496) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = NightingaleDPFLRunner.run(task:useCase:context:);
  }
  else
  {
    swift_task_dealloc();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v2 = NightingaleDPFLRunner.run(task:useCase:context:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  uint64_t v0;
  uint64_t result;
  unint64_t v2;
  Swift::tuple_mean_Float_optional_std_Float *v3;
  int v4;
  char v5;
  int v6;
  char v7;
  Swift::OpaquePointer v8;
  Swift::OpaquePointer v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  id v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  Swift::OpaquePointer v28;
  int v29;
  char v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  Swift::UInt32 v44;
  Swift::UInt32 v45;
  uint64_t v46;
  uint64_t i;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  uint64_t v46 = *(void *)(v0 + 3448);
  *(void *)(v0 + 1688) = v0;
  uint64_t v44 = *(_DWORD *)(v0 + 1556);
  unint64_t v45 = *(_DWORD *)(v0 + 1560);
  *(_DWORD *)(v0 + 3544) = v44;
  *(_DWORD *)(v0 + 3552) = v45;
  *(void *)(v0 + 2256) = specialized Array.init()();
  outlined retain of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])(v0 + 184);
  *(void *)(v0 + 2264) = v46;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32]);
  lazy protocol witness table accessor for type [UInt32] and conformance [A]();
  Collection<>.makeIterator()();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  for (i = *(void *)(v0 + 3496); ; i = 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[UInt32]>);
    IndexingIterator.next()();
    uint64_t v42 = *(_DWORD *)(v43 + 1580);
    if (*(unsigned char *)(v43 + 1584)) {
      break;
    }
    *(_DWORD *)(v43 + 3560) = v42;
    *(void *)(v43 + 2272) = Set.init()();
    uint64_t result = HyperParams.sliceSize.getter();
    uint64_t v41 = v42 - result;
    if (v42 < result)
    {
      __break(1u);
LABEL_21:
      __break(1u);
      return result;
    }
    uint64_t v40 = v41 + 1;
    if (v41 == -1) {
      goto LABEL_21;
    }
    if (v42 < v40) {
      return _assertionFailure(_:_:file:line:flags:)();
    }
    *(_DWORD *)(v43 + 1564) = v40;
    *(_DWORD *)(v43 + 1568) = v42;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<UInt32>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClosedRange<UInt32>);
    lazy protocol witness table accessor for type ClosedRange<UInt32> and conformance <> ClosedRange<A>();
    Set.formUnion<A>(_:)();
    uint64_t v36 = *(void *)(v43 + 1808);
    swift_bridgeObjectRetain();
    *(void *)(v43 + 2280) = v36;
    uint64_t v37 = swift_task_alloc();
    *(void *)(v37 + 16) = v43 + 2272;
    uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : (Float, String)]);
    uint64_t v2 = lazy protocol witness table accessor for type [UInt32 : (Float, String)] and conformance [A : B]();
    uint64_t result = _sSTsE5count5whereSiSb7ElementQzqd__YKXE_tqd__YKs5ErrorRd__lF((uint64_t (*)(char *, char *))partial apply for closure #38 in NightingaleDPFLRunner.run(task:useCase:context:), v37, v38, MEMORY[0x263F8E628], v2, MEMORY[0x263F8E658], v39);
    if (i) {
      return result;
    }
    swift_task_dealloc();
    outlined destroy of [A]();
    specialized Array.append(_:)();
    outlined destroy of [A]();
  }
  uint64_t v32 = *(void *)(v43 + 3456);
  uint64_t v34 = *(id *)(v43 + 2832);
  outlined destroy of [A]();
  char v26 = *(void **)(v43 + 1904);
  swift_bridgeObjectRetain();
  id v27 = *(void **)(v43 + 1864);
  swift_bridgeObjectRetain();
  v28._rawValue = *(void **)(v43 + 2256);
  swift_bridgeObjectRetain();
  meanAndStd(_:_:)(v3, v28, NightingaleTraining_STDMethod_population);
  uint64_t v29 = v4;
  uint64_t v30 = v5;
  uint64_t v31 = v6;
  swift_bridgeObjectRelease();
  outlined retain of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])(v43 + 184);
  uint64_t v33 = MEMORY[0x25A2C0820](v32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v35 = objc_msgSend(v34, sel_birthDateComponents);
  if (v35)
  {
    unsigned int v25 = *(void *)(v43 + 2784);
    uint64_t v23 = *(void *)(v43 + 2776);
    uint64_t v24 = *(void *)(v43 + 2760);
    uint64_t v22 = *(void *)(v43 + 2768);
    static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 32))(v25, v23, v24);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v22 + 56))(v25, 0, 1, v24);
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v43 + 2768) + 56))(*(void *)(v43 + 2784), 1, 1, *(void *)(v43 + 2760));
  }
  unsigned int v21 = *(void *)(v43 + 2784);
  uint64_t v7 = HyperParams.birthDateRequired.getter();
  uint64_t v48 = calculateAge(components:birthDateRequired:)(v21, v7 & 1);
  if (i)
  {
    uint64_t v12 = *(id *)(v43 + 2856);
    uint64_t v13 = *(id *)(v43 + 2832);
    outlined destroy of DateComponents?(*(void *)(v43 + 2784));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    outlined release of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])(v43 + 184);
    swift_release();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    swift_release();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();

    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    char v10 = v39;
    uint64_t v11 = *(uint64_t (**)(uint64_t))(*(void *)(v43 + 1688) + 8);
  }
  else
  {
    unsigned int v16 = *(void *)(v43 + 3472);
    uint64_t v18 = *(void *)(v43 + 2880);
    uint64_t v17 = *(void *)(v43 + 2872);
    uint64_t v19 = *(void *)(v43 + 2816);
    outlined destroy of DateComponents?(*(void *)(v43 + 2784));
    v8._rawValue = v26;
    v9._rawValue = v27;
    LODWORD(v49) = v29;
    BYTE4(v49) = v30 & 1;
    LODWORD(v50) = v31;
    BYTE4(v50) = 0;
    LODWORD(v51) = v48;
    BYTE4(v51) = BYTE4(v48) & 1;
    uint64_t v20 = NightingaleDPFLRunner.runDemographics(hyperParams:modelPath:pregnancies:historicalPeriods:swtAvailabilityStats:numberOfSlices:age:earliestPregrancyLMP:latestPregrancyEndDay:existingMetrics:)(v19, v17, v18, v8, v9, v49, v50, v51, (float)v33, v44, v45, v16);
    uint64_t v14 = *(id *)(v43 + 2856);
    uint64_t v15 = *(id *)(v43 + 2832);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    outlined release of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])(v43 + 184);
    swift_release();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    swift_release();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();

    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    char v10 = v20;
    uint64_t v11 = *(uint64_t (**)(uint64_t))(*(void *)(v43 + 1688) + 8);
  }
  return v11(v10);
}

{
  void *v0;
  uint64_t (*v1)();
  id v3;
  id v4;
  uint64_t v5;

  uint64_t v3 = (id)v0[357];
  Swift::Int v4 = (id)v0[354];
  v0[211] = v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_release();
  swift_release();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  swift_bridgeObjectRelease();

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)())(v0[211] + 8);
  return v1();
}

{
  uint64_t v0;
  id v1;
  void *v2;
  long long *v3;
  long long *Duration;
  long long *v5;
  long long *v6;
  long long *v7;
  uint64_t (*v8)(uint64_t);
  id v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  uint64_t v14 = *(id *)(v0 + 3176);
  unsigned int v16 = *(void *)(v0 + 3040);
  uint64_t v19 = *(void *)(v0 + 2984);
  unsigned int v25 = *(void *)(v0 + 2968);
  uint64_t v22 = *(void *)(v0 + 2960);
  id v27 = *(void *)(v0 + 2880);
  char v26 = *(void *)(v0 + 2872);
  uint64_t v18 = *(void *)(v0 + 2864);
  unsigned int v21 = *(void *)(v0 + 2824);
  uint64_t v30 = *(void *)(v0 + 2816);
  *(void *)(v0 + 1688) = v0;
  swift_task_dealloc();
  swift_release();
  swift_release();
  uint64_t v1 = v14;
  *(void *)(v0 + 2488) = v14;
  uint64_t v15 = *(void *)(v0 + 1904);
  swift_bridgeObjectRetain();
  id v28 = MEMORY[0x25A2C0810](v15, v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  *(unsigned char *)(v0 + 3683) = 9;
  uint64_t v17 = *(void *)(v0 + 2000);
  swift_bridgeObjectRetain();
  MEMORY[0x25A2C0810](v17, v16);
  swift_bridgeObjectRelease();
  Array.init(repeating:count:)();
  uint64_t v29 = static Array.+ infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v24 = v2;
  uint64_t v3 = NightingaleDPFLRunner.keyMetricsCycleTrackingCheckDurationS.unsafeMutableAddressor();
  outlined init with copy of String(v3, v24);
  uint64_t v20 = MEMORY[0x263F8D538];
  v24[5] = MEMORY[0x263F8D538];
  v24[2] = v18;
  Duration = NightingaleDPFLRunner.keyMetricsPregnanciesQueryDurationS.unsafeMutableAddressor();
  outlined init with copy of String(Duration, v24 + 6);
  v24[11] = v20;
  v24[8] = v19;
  Swift::Double v5 = NightingaleDPFLRunner.keyMetricsIterationElapsedTime.unsafeMutableAddressor();
  outlined init with copy of String(v5, v24 + 12);
  v24[17] = v20;
  v24[14] = v21;
  uint64_t v6 = NightingaleDPFLRunner.keyMetricsNumberOfAllPregnancies.unsafeMutableAddressor();
  outlined init with copy of String(v6, v24 + 18);
  uint64_t v23 = MEMORY[0x263F8D6C8];
  v24[23] = MEMORY[0x263F8D6C8];
  v24[20] = v22;
  uint64_t v7 = NightingaleDPFLRunner.keyMetricsNumberOfPregnancyInitializerFailed.unsafeMutableAddressor();
  outlined init with copy of String(v7, v24 + 24);
  v24[29] = v23;
  v24[26] = v25;
  _finalizeUninitializedArray<A>(_:)();
  uint64_t v31 = Dictionary.init(dictionaryLiteral:)();
  uint64_t v32 = NightingaleDPFLRunner.runPregnanciesDistribution(hyperParams:modelPath:numberOfRawPregnancies:invalidReasons:swtAvailability:existingMetrics:)(v30, v26, v27, v28, v29, v31, -1.0);
  char v10 = (id)v13[397];
  uint64_t v11 = (id)v13[357];
  uint64_t v12 = (id)v13[354];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  outlined destroy of [A]();
  outlined destroy of [A]();
  swift_bridgeObjectRelease();
  swift_release();
  outlined destroy of [A]();
  swift_bridgeObjectRelease();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  swift_bridgeObjectRelease();

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(uint64_t))(v13[211] + 8);
  return v8(v32);
}

{
  uint64_t v0;
  id v1;
  id v2;
  uint64_t v3;
  id v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  char v10;
  uint64_t v11;
  int v12;
  uint64_t v14;
  int v17;
  uint64_t v18;
  int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  void *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  void *v63;
  uint64_t v64;
  Swift::Int v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  long long *v94;
  uint64_t v95;
  void *v96;
  long long *Duration;
  uint64_t v98;
  void *v99;
  long long *v100;
  uint64_t v101;
  void *v102;
  long long *updated;
  uint64_t v104;
  void *v105;
  long long *v106;
  uint64_t v107;
  void *v108;
  long long *v109;
  void *v110;
  uint64_t v111;
  long long *v112;
  uint64_t v113;
  void *v114;
  long long *v115;
  uint64_t v116;
  void *v117;
  long long *v118;
  uint64_t v119;
  void *v120;
  long long *v121;
  uint64_t v122;
  void *v123;
  long long *v124;
  uint64_t v125;
  void *v126;
  long long *v127;
  uint64_t v128;
  void *v129;
  long long *v130;
  uint64_t v131;
  void *v132;
  long long *v133;
  uint64_t v134;
  void *v135;
  long long *v136;
  uint64_t v137;
  void *v138;
  long long *v139;
  uint64_t v140;
  void *v141;
  long long *v142;
  uint64_t v143;
  void *v144;
  long long *v145;
  uint64_t v146;
  void *v147;
  long long *started;
  void *v149;
  uint64_t v150;
  char v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  Swift::OpaquePointer v155;
  Swift::OpaquePointer v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  void *v164;
  uint64_t v165;
  uint64_t v166;
  unsigned char *v167;
  unsigned char *v168;
  uint64_t v169;
  uint64_t (*v170)(uint64_t);
  uint64_t v171;
  Swift::Int v172;
  void v173[2];
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  id v186;
  id v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  id v194;
  id v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  id v202;
  id v203;
  uint64_t v204;
  void *object;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  int v209;
  void *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  id v256;
  id v257;
  uint64_t v258;
  uint64_t v259;
  int v260;
  int v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  id v266;
  id v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  int v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  id v281;
  id v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  int v290;
  void *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  id v300;
  id v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  int v310;
  uint64_t v311;
  void *v312;
  uint64_t v313;
  uint64_t v314;
  int v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  void *v319;
  void *v320;
  Swift::OpaquePointer v321;
  Swift::OpaquePointer v322;
  Swift::OpaquePointer v323;
  Swift::OpaquePointer v324;
  Swift::OpaquePointer v325;
  Swift::OpaquePointer v326;
  Swift::OpaquePointer v327;
  Swift::OpaquePointer v328;
  Swift::OpaquePointer v329;
  Swift::OpaquePointer v330;
  Swift::OpaquePointer v331;
  Swift::OpaquePointer v332;
  Swift::OpaquePointer v333;
  Swift::OpaquePointer v334;
  Swift::OpaquePointer v335;
  Swift::OpaquePointer v336;
  uint64_t v337;
  uint64_t v338;
  void *v339;
  uint64_t v340;
  uint64_t v341;
  void *v342;
  uint64_t v343;
  void *v344;
  uint64_t v345;
  void *v346;
  uint64_t v347;
  void *v348;
  uint64_t v349;
  void *v350;
  void *v351;
  void *v352;
  uint64_t v353;
  void *v354;
  uint64_t v355;
  uint64_t v356;
  void *v357;
  uint64_t v358;
  void *v359;
  uint64_t v360;
  void *v361;
  uint64_t v362;
  void *v363;
  uint64_t v364;
  void *v365;
  uint64_t v366;
  void *v367;
  uint64_t v368;
  void *v369;
  uint64_t v370;
  void *v371;
  uint64_t v372;
  void *v373;
  uint64_t v374;
  void *v375;
  void *v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  void *v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  void *v390;
  uint64_t v391;
  uint64_t v392;
  void *v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  int v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  int v428;
  uint64_t v429;
  uint64_t v430;
  int v431;
  uint64_t v432;
  int v433;
  int v434;
  uint64_t v435;
  uint64_t v436;
  int v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  int v469;
  int v470;
  int v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  int v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  int v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  int v515;
  uint64_t v516;
  unsigned int v517;
  unint64_t v518;
  unint64_t v519;
  uint64_t v520;
  unint64_t v521;
  uint64_t v522;
  uint64_t v523;
  unsigned int v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  unint64_t v530;
  unint64_t v531;
  uint64_t v532;
  unint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  int v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  int v541;
  int v542;
  int v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  int v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  int v554;
  int v555;
  int v556;
  uint64_t (*v557)(void *);
  BOOL (*v558)(void *, void *);
  BOOL (*v559)(void *, void *);
  const char *v560;
  const char *v561;
  const char *v562;
  uint64_t (*v563)@<X0>(void *@<X8>);
  uint64_t (*v564)@<X0>(uint64_t@<X1>, uint64_t@<X8>);
  int *v565;
  int *v566;
  int *v567;
  int *v568;
  uint64_t v569;
  uint64_t v570;
  id v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t (*v586)();
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;

  v603 = v0;
  v569 = v0;
  v586 = partial apply for closure #28 in NightingaleDPFLRunner.run(task:useCase:context:);
  v557 = partial apply for closure #29 in NightingaleDPFLRunner.run(task:useCase:context:);
  v558 = closure #16 in NightingaleDPFLRunner.run(task:useCase:context:);
  v559 = closure #16 in NightingaleDPFLRunner.run(task:useCase:context:);
  v560 = "Fatal error";
  v561 = "Range requires lowerBound <= upperBound";
  v562 = "Swift/ClosedRange.swift";
  v563 = partial apply for closure #35 in NightingaleDPFLRunner.run(task:useCase:context:);
  v564 = closure #36 in NightingaleDPFLRunner.run(task:useCase:context:);
  v565 = (int *)&async function pointer to partial apply for closure #37 in NightingaleDPFLRunner.run(task:useCase:context:);
  v566 = (int *)&async function pointer to partial apply for closure #34 in NightingaleDPFLRunner.run(task:useCase:context:);
  v567 = (int *)&async function pointer to partial apply for closure #33 in NightingaleDPFLRunner.run(task:useCase:context:);
  v568 = (int *)&async function pointer to partial apply for closure #32 in NightingaleDPFLRunner.run(task:useCase:context:);
  *(void *)(v0 + 1688) = v0;
  swift_release();
  v572 = v569 + 1696;
  v590 = v569 + 1640;
  v591 = v569 + 1704;
  v592 = v569 + 1712;
  v593 = v569 + 1720;
  v594 = v569 + 1728;
  v595 = v569 + 1736;
  v596 = v569 + 1744;
  v597 = v569 + 1752;
  v598 = v569 + 1760;
  v573 = v569 + 1768;
  v599 = v569 + 3608;
  v588 = v569 + 1656;
  v574 = v569 + 1952;
  v575 = v569 + 1984;
  v576 = v569 + 1992;
  v577 = v569 + 2024;
  v589 = v569 + 2040;
  v578 = v569 + 2072;
  v579 = v569 + 2088;
  v580 = v569 + 2104;
  v581 = v569 + 2120;
  v582 = v569 + 2128;
  v583 = v569 + 3568;
  v584 = v569 + 3576;
  v571 = *(id *)(v569 + 3200);
  v570 = *(void *)(v569 + 2816);
  uint64_t v1 = v571;
  v585 = v569 + 2312;
  *(void *)(v569 + 2312) = v571;
  swift_retain();
  uint64_t v2 = v571;
  uint64_t v3 = swift_task_alloc();
  Swift::Int v4 = v571;
  v600 = v3;
  *(void *)(v3 + 16) = v570;
  *(void *)(v3 + 24) = v4;
  v587 = MEMORY[0x263F8EE60] + 8;
  Swift::Double v5 = default argument 1 of NightingaleDPFLRunner.sendLocationAsync<A>(location:force:work:)();
  NightingaleDPFLRunner.sendLocation<A>(location:force:work:)(7, v5 & 1, v600, v587, v601);
  v602 = 0;
  v241 = *(void *)(v569 + 3064);
  v240 = *(void *)(v569 + 2816);
  swift_task_dealloc();
  swift_release();

  v239 = *(void *)(v569 + 2000);
  swift_bridgeObjectRetain();
  *(void *)(v569 + 2320) = v239;
  swift_retain();
  lazy protocol witness table accessor for type [Pregnancy] and conformance [A]();
  v242 = _ArrayProtocol.filter(_:)();
  v243 = 0;
  swift_release();
  *(void *)(v569 + 2000) = v242;
  swift_bridgeObjectRelease();

  v231 = v569 + 1696;
  v232 = v569 + 1640;
  v233 = v569 + 1704;
  v234 = v569 + 1712;
  v235 = v569 + 1720;
  v236 = v569 + 1728;
  v237 = v569 + 1736;
  v212 = v569 + 1752;
  v238 = v569 + 1760;
  v229 = v569 + 1768;
  v214 = v569 + 3520;
  v215 = v569 + 1896;
  v216 = v569 + 1912;
  v217 = v569 + 1952;
  v218 = v569 + 1984;
  v219 = v569 + 2024;
  v220 = v569 + 2040;
  v221 = v569 + 2056;
  v222 = v569 + 2072;
  v223 = v569 + 2088;
  v224 = v569 + 2104;
  v225 = v569 + 2120;
  v226 = v569 + 2128;
  v228 = *(void *)(v569 + 3072);
  v227 = *(void *)(v569 + 3064);
  v208 = *(void *)(v569 + 2680);
  v206 = NightingaleDPFLRunner.performanceMeasure.getter();
  v209 = 1;
  object = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("UpdateSliceDeltaAnchor", 0x16uLL, 1)._object;
  dispatch thunk of PerformanceMeasure.finish(_:)();
  v207 = v171;
  *(void *)(v569 + 3208) = v171;
  swift_bridgeObjectRelease();
  swift_release();
  v230 = v569 + 2136;
  *(void *)(v569 + 2136) = v207;
  v172 = default argument 1 of NightingaleDPFLRunner.sendLocation(_:_:)();
  NightingaleDPFLRunner.sendLocation(_:_:)(NightingaleTraining_NightingaleDReachLocation_updateSliceDeltaAnchorCompleted, v172);
  v211 = NightingaleDPFLRunner.performanceMeasure.getter();
  v210 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("QueryRequiredFeatures", 0x15uLL, v209 & 1)._object;
  dispatch thunk of PerformanceMeasure.start(_:)();
  swift_bridgeObjectRelease();
  swift_release();
  v213 = *(void *)(v569 + 2000);
  swift_bridgeObjectRetain();
  *(void *)(v569 + 2144) = v213;
  uint64_t result = Sequence.min(by:)();
  v544 = v243;
  if (!v243)
  {
    outlined destroy of [A]();
    if (*(void *)(v569 + 376))
    {
      v552 = *(void *)(v569 + 376);
      v551 = *(void *)(v569 + 384);
      v553 = v569 + 352;
      __swift_project_boxed_opaque_existential_1((void *)(v569 + 352), v552);
      v554 = (*(uint64_t (**)(uint64_t))(v551 + 56))(v552);
      __swift_destroy_boxed_opaque_existential_1(v569 + 352);
      v555 = v554;
      v556 = 0;
    }
    else
    {
      v260 = 0;
      outlined destroy of Pregnancy?(v569 + 352);
      v555 = 0;
      v556 = 1;
    }
    uint64_t v6 = v556;
    v550 = v555;
    *(_DWORD *)(v569 + 3648) = v555;
    if (v6) {
      goto LABEL_61;
    }
    uint64_t v7 = v569;
    uint64_t v8 = v544;
    v548 = *(void *)(v569 + 3072);
    v547 = *(void *)(v569 + 3064);
    v546 = v569 + 3528;
    *(_DWORD *)(v569 + 3528) = v550;
    v545 = *(void *)(v7 + 2000);
    swift_bridgeObjectRetain();
    *(void *)(v569 + 2152) = v545;
    uint64_t result = Sequence.max(by:)();
    v549 = v8;
    if (v8) {
      return result;
    }
    outlined destroy of [A]();
    if (*(void *)(v569 + 416))
    {
      v539 = *(void *)(v569 + 416);
      v538 = *(void *)(v569 + 424);
      v540 = v569 + 392;
      __swift_project_boxed_opaque_existential_1((void *)(v569 + 392), v539);
      v541 = (*(uint64_t (**)(uint64_t))(v538 + 56))(v539);
      __swift_destroy_boxed_opaque_existential_1(v569 + 392);
      v542 = v541;
      v543 = 0;
    }
    else
    {
      v261 = 0;
      outlined destroy of Pregnancy?(v569 + 392);
      v542 = 0;
      v543 = 1;
    }
    char v10 = v543;
    v537 = v542;
    *(_DWORD *)(v569 + 3652) = v542;
    if (v10)
    {
LABEL_61:
      v252 = *(void *)(v569 + 3048);
      v253 = *(void *)(v569 + 2992);
      v254 = *(void *)(v569 + 2976);
      v255 = *(void *)(v569 + 2880);
      v256 = *(id *)(v569 + 2856);
      v257 = *(id *)(v569 + 2832);
      v258 = *(void *)(v569 + 2816);
      lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
      v259 = swift_allocError();
      *v168 = 34;
      swift_willThrow();
      outlined destroy of [A]();
      outlined destroy of [A]();
      swift_bridgeObjectRelease();
      swift_release();
      outlined destroy of [A]();
      swift_bridgeObjectRelease();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      swift_bridgeObjectRelease();

      swift_release();
      v271 = v259;
      goto LABEL_71;
    }
    uint64_t v11 = v569;
    uint64_t v12 = v550;
    v534 = *(void *)(v569 + 2816);
    *(_DWORD *)(v569 + 3536) = v537;
    v532 = v11 + 3524;
    *(_DWORD *)(v11 + 3524) = v12;
    v530 = lazy protocol witness table accessor for type Int and conformance Int();
    v531 = lazy protocol witness table accessor for type Int and conformance Int();
    v533 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    SignedInteger<>.init<A>(_:)();
    v535 = *(void *)(v569 + 2160);
    uint64_t result = HyperParams.minSliceAnchorDelta.getter();
    v536 = v535 + result;
    if (__OFADD__(v535, result))
    {
      __break(1u);
    }
    else
    {
      *(_DWORD *)(v569 + 3532) = HyperParams.sliceSize.getter();
      uint64_t result = SignedInteger<>.init<A>(_:)();
      uint64_t v14 = *(void *)(v569 + 2168);
      v529 = v536 - v14;
      if (!__OFSUB__(v536, v14))
      {
        v528 = v529 + 1;
        if (!__OFADD__(v529, 1))
        {
          v525 = *(void *)(v569 + 2816);
          v520 = v569 + 2176;
          *(void *)(v569 + 2176) = v528;
          v518 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
          v519 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
          v521 = lazy protocol witness table accessor for type Int and conformance Int();
          v523 = MEMORY[0x263F8E8F8];
          v522 = MEMORY[0x263F8D6C8];
          UnsignedInteger<>.init<A>(_:)();
          uint64_t v17 = v537;
          uint64_t v18 = v569;
          v524 = *(_DWORD *)(v569 + 3516);
          *(_DWORD *)(v569 + 3656) = v524;
          *(_DWORD *)(v18 + 3556) = v17;
          SignedInteger<>.init<A>(_:)();
          v526 = *(void *)(v569 + 2184);
          uint64_t result = HyperParams.maxSliceAnchorDelta.getter();
          v527 = v526 + result;
          if (!__OFADD__(v526, result))
          {
            v515 = *(_DWORD *)(v569 + 3632);
            *(void *)(v569 + 2192) = v527;
            v516 = MEMORY[0x263F8E8F8];
            UnsignedInteger<>.init<A>(_:)();
            uint64_t v20 = v515;
            unsigned int v21 = v569;
            *(_DWORD *)(v569 + 3564) = *(_DWORD *)(v569 + 3548);
            *(_DWORD *)(v21 + 3572) = v20;
            min<A>(_:_:)();
            uint64_t v22 = v524;
            uint64_t v23 = *(_DWORD *)(v569 + 3540);
            v517 = v23;
            *(_DWORD *)(v569 + 3660) = v23;
            if (v23 < v22)
            {
              LOBYTE(v173[0]) = 2;
              v173[1] = 347;
              LODWORD(v174) = 0;
              return _assertionFailure(_:_:file:line:flags:)();
            }
            uint64_t v24 = v569;
            unsigned int v25 = v517;
            v514 = v569 + 1548;
            *(_DWORD *)(v569 + 1548) = v524;
            *(_DWORD *)(v24 + 1552) = v25;
            *(void *)(v569 + 2200) = _allocateUninitializedArray<A>(_:)();
            if (HyperParams.isHRVRequired()())
            {
              v513 = v569 + 3677;
              *(unsigned char *)(v569 + 3677) = 8;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HealthDataRawSampleType]);
              Array.append(_:)();
            }
            if (HyperParams.isSpO2Required()())
            {
              v512 = v569 + 3676;
              *(unsigned char *)(v569 + 3676) = 10;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HealthDataRawSampleType]);
              Array.append(_:)();
            }
            if (HyperParams.isRespiratoryRateRequired()())
            {
              v511 = v569 + 3675;
              *(unsigned char *)(v569 + 3675) = 9;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HealthDataRawSampleType]);
              Array.append(_:)();
            }
            if (HyperParams.isSWTRequired()())
            {
              v510 = v569 + 3674;
              *(unsigned char *)(v569 + 3674) = 7;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HealthDataRawSampleType]);
              Array.append(_:)();
            }
            v508 = *(void *)(v569 + 2200);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v507 = v569 + 2208;
            *(void *)(v569 + 2208) = v508;
            v506 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HealthDataRawSampleType]);
            lazy protocol witness table accessor for type [HealthDataRawSampleType] and conformance [A]();
            v509 = Collection.isEmpty.getter();
            outlined destroy of [A]();
            swift_bridgeObjectRelease();
            if ((v509 & 1) == 0)
            {
              v501 = *(void *)(v569 + 2816);
              v502 = *(void *)(v569 + 2680);
              swift_retain();
              swift_retain();
              char v26 = swift_task_alloc();
              id v27 = v501;
              id v28 = v502;
              uint64_t v29 = v524;
              uint64_t v30 = v517;
              uint64_t v31 = v569;
              v504 = v26;
              *(void *)(v569 + 3216) = v26;
              *(void *)(v26 + 16) = v27;
              *(void *)(v26 + 24) = v31 + 2200;
              *(void *)(v26 + 32) = v28;
              *(_DWORD *)(v26 + 40) = v29;
              *(_DWORD *)(v26 + 44) = v30;
              *(void *)(v26 + 48) = v31 + 1816;
              *(void *)(v26 + 56) = v31 + 1824;
              *(void *)(v26 + 64) = v31 + 1832;
              *(void *)(v26 + 72) = v31 + 1808;
              v505 = MEMORY[0x263F8EE60] + 8;
              v503 = default argument 1 of NightingaleDPFLRunner.sendLocationAsync<A>(location:force:work:)();
              uint64_t v32 = swift_task_alloc();
              uint64_t v33 = v569;
              uint64_t v34 = v503;
              uint64_t v35 = v568;
              uint64_t v36 = v504;
              uint64_t v37 = v505;
              uint64_t v38 = (void *)v32;
              uint64_t v39 = v601;
              *(void *)(v569 + 3224) = v38;
              *uint64_t v38 = *(void *)(v33 + 1688);
              v38[1] = NightingaleDPFLRunner.run(task:useCase:context:);
              uint64_t v40 = 8;
              uint64_t v41 = v34 & 1;
              return NightingaleDPFLRunner.sendLocationAsync<A>(location:force:work:)(v39, v40, v41, v35, v36, v37);
            }
            v475 = v569 + 1696;
            v493 = v569 + 1640;
            v494 = v569 + 1704;
            v495 = v569 + 1712;
            v496 = v569 + 1720;
            v497 = v569 + 1728;
            v498 = v569 + 1736;
            v499 = v569 + 1744;
            v492 = v569 + 1752;
            v476 = v569 + 1888;
            v477 = v569 + 3520;
            v478 = v569 + 1896;
            v479 = v569 + 1912;
            v480 = v569 + 1952;
            v481 = v569 + 1984;
            v482 = v569 + 1992;
            v474 = v569 + 2040;
            v483 = v569 + 2056;
            v484 = v569 + 2072;
            v485 = v569 + 2088;
            v486 = v569 + 2104;
            v487 = v569 + 2120;
            v488 = v569 + 2128;
            v489 = v569 + 2136;
            v490 = v569 + 3528;
            v491 = v569 + 3536;
            v500 = v569 + 1548;
            *(void *)(v569 + 2216) = 0;
            if (HyperParams.isSHRRequired()())
            {
              v470 = *(_DWORD *)(v569 + 3660);
              v469 = *(_DWORD *)(v569 + 3656);
              v468 = *(void *)(v569 + 2816);
              v467 = *(void *)(v569 + 2680);
              swift_retain();
              swift_retain();
              uint64_t v42 = swift_task_alloc();
              int v43 = v467;
              uint64_t v44 = v468;
              unint64_t v45 = v469;
              uint64_t v46 = v470;
              unsigned int v47 = v569;
              v472 = v42;
              *(void *)(v569 + 3240) = v42;
              *(void *)(v42 + 16) = v43;
              *(void *)(v42 + 24) = v44;
              *(_DWORD *)(v42 + 32) = v45;
              *(_DWORD *)(v42 + 36) = v46;
              *(void *)(v42 + 40) = v47 + 1840;
              *(void *)(v42 + 48) = v47 + 1848;
              *(void *)(v42 + 56) = v47 + 2216;
              v473 = MEMORY[0x263F8EE60] + 8;
              v471 = default argument 1 of NightingaleDPFLRunner.sendLocationAsync<A>(location:force:work:)();
              uint64_t v48 = swift_task_alloc();
              uint64_t v49 = v569;
              uint64_t v50 = v471;
              uint64_t v35 = v567;
              uint64_t v36 = v472;
              uint64_t v37 = v473;
              unint64_t v51 = (void *)v48;
              uint64_t v39 = v601;
              *(void *)(v569 + 3248) = v51;
              *unint64_t v51 = *(void *)(v49 + 1688);
              v51[1] = NightingaleDPFLRunner.run(task:useCase:context:);
              uint64_t v40 = 8;
              uint64_t v41 = v50 & 1;
              return NightingaleDPFLRunner.sendLocationAsync<A>(location:force:work:)(v39, v40, v41, v35, v36, v37);
            }
            v441 = v569 + 1696;
            v459 = v569 + 1640;
            v460 = v569 + 1704;
            v461 = v569 + 1712;
            v462 = v569 + 1720;
            v463 = v569 + 1728;
            v464 = v569 + 1736;
            v465 = v569 + 1744;
            v458 = v569 + 1752;
            v442 = v569 + 1888;
            v443 = v569 + 3520;
            v444 = v569 + 1896;
            v445 = v569 + 1912;
            v446 = v569 + 1952;
            v447 = v569 + 1984;
            v448 = v569 + 1992;
            v440 = v569 + 2040;
            v449 = v569 + 2056;
            v450 = v569 + 2072;
            v451 = v569 + 2088;
            v452 = v569 + 2104;
            v453 = v569 + 2120;
            v454 = v569 + 2128;
            v455 = v569 + 2136;
            v456 = v569 + 3528;
            v457 = v569 + 3536;
            v466 = v569 + 1548;
            if (HyperParams.isCalendarAlgorithmRequired()())
            {
              v433 = *(_DWORD *)(v569 + 3652);
              v431 = *(_DWORD *)(v569 + 3648);
              v436 = *(void *)(v569 + 2992);
              v434 = *(_DWORD *)(v569 + 3632);
              v432 = *(void *)(v569 + 2816);
              v435 = *(void *)(v569 + 2680);
              swift_retain();
              swift_retain();
              swift_retain();
              int v52 = swift_task_alloc();
              unint64_t v53 = v431;
              unint64_t v54 = v432;
              uint64_t v55 = v433;
              uint64_t v56 = v434;
              uint64_t v57 = v435;
              uint64_t v58 = v436;
              uint64_t v59 = v569;
              v438 = v52;
              *(void *)(v569 + 3264) = v52;
              *(_DWORD *)(v52 + 16) = v53;
              *(void *)(v52 + 24) = v54;
              *(_DWORD *)(v52 + 32) = v55;
              *(_DWORD *)(v52 + 36) = v56;
              *(void *)(v52 + 40) = v57;
              *(void *)(v52 + 48) = v59 + 1776;
              *(void *)(v52 + 56) = v59 + 1784;
              *(void *)(v52 + 64) = v59 + 1792;
              *(void *)(v52 + 72) = v59 + 1800;
              *(void *)(v52 + 80) = v58;
              *(void *)(v52 + 88) = v59 + 1856;
              *(void *)(v52 + 96) = v59 + 1864;
              v439 = MEMORY[0x263F8EE60] + 8;
              v437 = default argument 1 of NightingaleDPFLRunner.sendLocationAsync<A>(location:force:work:)();
              uint64_t v60 = swift_task_alloc();
              uint64_t v61 = v569;
              uint64_t v62 = v437;
              uint64_t v35 = v566;
              uint64_t v36 = v438;
              uint64_t v37 = v439;
              uint64_t v63 = (void *)v60;
              uint64_t v39 = v601;
              *(void *)(v569 + 3272) = v63;
              *uint64_t v63 = *(void *)(v61 + 1688);
              v63[1] = NightingaleDPFLRunner.run(task:useCase:context:);
              uint64_t v40 = 8;
              uint64_t v41 = v62 & 1;
              return NightingaleDPFLRunner.sendLocationAsync<A>(location:force:work:)(v39, v40, v41, v35, v36, v37);
            }
            v417 = v569 + 1696;
            v418 = v569 + 1640;
            v419 = v569 + 1704;
            v420 = v569 + 1712;
            v421 = v569 + 1720;
            v422 = v569 + 1728;
            v423 = v569 + 1736;
            v424 = v569 + 1744;
            v425 = v569 + 1752;
            v426 = v569 + 1760;
            v412 = v569 + 3608;
            v396 = v569 + 1896;
            v397 = v569 + 1912;
            v398 = v569 + 1952;
            v399 = v569 + 1984;
            v400 = v569 + 1992;
            v401 = v569 + 2024;
            v402 = v569 + 2040;
            v416 = v569 + 2056;
            v403 = v569 + 2088;
            v404 = v569 + 2104;
            v405 = v569 + 2120;
            v406 = v569 + 2128;
            v407 = v569 + 2136;
            v408 = v569 + 3528;
            v409 = v569 + 3536;
            v410 = v569 + 1548;
            v415 = *(_DWORD *)(v569 + 3632);
            v414 = *(void *)(v569 + 2816);
            v395 = *(void *)(v569 + 2680);
            v391 = NightingaleDPFLRunner.performanceMeasure.getter();
            v428 = 1;
            v390 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("QueryRequiredFeatures", 0x15uLL, 1)._object;
            dispatch thunk of PerformanceMeasure.finish(_:)();
            v392 = v64;
            swift_bridgeObjectRelease();
            swift_release();
            v411 = v569 + 2224;
            *(void *)(v569 + 2224) = v392;
            int v65 = default argument 1 of NightingaleDPFLRunner.sendLocation(_:_:)();
            NightingaleDPFLRunner.sendLocation(_:_:)(NightingaleTraining_NightingaleDReachLocation_queryRequiredFeaturesCompleted, v65);
            v394 = NightingaleDPFLRunner.performanceMeasure.getter();
            v393 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Featurization", 0xDuLL, v428 & 1)._object;
            dispatch thunk of PerformanceMeasure.start(_:)();
            swift_bridgeObjectRelease();
            swift_release();
            type metadata accessor for Featurizer();
            uint64_t v66 = Featurizer.__allocating_init()();
            int v67 = v569;
            v413 = v66;
            *(void *)(v569 + 3288) = v66;
            v427 = v67 + 2232;
            *(void *)(v67 + 2232) = v66;
            swift_retain();
            swift_retain();
            v429 = swift_task_alloc();
            *(void *)(v569 + 3296) = v429;
            *(void *)(v429 + 16) = v413;
            uint64_t v68 = (void *)v429;
            *(void *)(v429 + 24) = v569 + 2000;
            v68[4] = v569 + 1808;
            v68[5] = v569 + 1816;
            v68[6] = v569 + 1832;
            v68[7] = v569 + 1824;
            v68[8] = v569 + 1840;
            v68[9] = v569 + 1848;
            v68[10] = v569 + 1856;
            v68[11] = v569 + 1864;
            v68[12] = v569 + 1800;
            *(void *)(v429 + 104) = v414;
            *(_DWORD *)(v429 + 112) = v415;
            uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int]));
            NightingaleDPFLRunner.sendLocation<A>(location:force:work:)(10, v428 & 1, v429, v69, v569 + 16);
            v430 = v549;
            if (v549)
            {
              v198 = *(void *)(v569 + 3048);
              v199 = *(void *)(v569 + 2992);
              v200 = *(void *)(v569 + 2976);
              v201 = *(void *)(v569 + 2880);
              v202 = *(id *)(v569 + 2856);
              v203 = *(id *)(v569 + 2832);
              v204 = *(void *)(v569 + 2816);
              swift_task_dealloc();
              swift_release();
              swift_release();
              swift_release();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              swift_bridgeObjectRelease();
              swift_release();
              outlined destroy of [A]();
              swift_bridgeObjectRelease();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              swift_bridgeObjectRelease();

              swift_release();
              v271 = v430;
            }
            else
            {
              v349 = *(void *)(v569 + 3208);
              v347 = *(void *)(v569 + 3136);
              v377 = *(void *)(v569 + 3128);
              v374 = *(void *)(v569 + 3120);
              v372 = *(void *)(v569 + 3112);
              v370 = *(void *)(v569 + 3104);
              v368 = *(void *)(v569 + 3096);
              v366 = *(void *)(v569 + 3088);
              v364 = *(void *)(v569 + 3080);
              v362 = *(void *)(v569 + 3056);
              v345 = *(void *)(v569 + 3032);
              v343 = *(void *)(v569 + 2984);
              v360 = *(void *)(v569 + 2968);
              v358 = *(void *)(v569 + 2960);
              v341 = *(void *)(v569 + 2864);
              v356 = *(void *)(v569 + 2824);
              v318 = *(void *)(v569 + 2816);
              swift_release();
              swift_release();
              uint64_t v70 = (void *)v569;
              uint64_t v71 = *(void **)(v569 + 16);
              v319 = v71;
              *(void *)(v569 + 3304) = v71;
              uint64_t v72 = (void *)v70[3];
              v320 = v72;
              v70[414] = v72;
              uint64_t v73 = (void *)v70[4];
              v321._rawValue = v73;
              v70[415] = v73;
              uint64_t v74 = (void *)v70[5];
              v322._rawValue = v74;
              v70[416] = v74;
              int v75 = (void *)v70[6];
              v323._rawValue = v75;
              v70[417] = v75;
              uint64_t v76 = (void *)v70[7];
              v324._rawValue = v76;
              v70[418] = v76;
              int v77 = (void *)v70[8];
              v325._rawValue = v77;
              v70[419] = v77;
              uint64_t v78 = (void *)v70[9];
              v326._rawValue = v78;
              v70[420] = v78;
              uint64_t v79 = (void *)v70[10];
              v327._rawValue = v79;
              v70[421] = v79;
              uint64_t v80 = (void *)v70[11];
              v328._rawValue = v80;
              v70[422] = v80;
              uint64_t v81 = (void *)v70[12];
              v329._rawValue = v81;
              v70[423] = v81;
              uint64_t v82 = (void *)v70[13];
              v330._rawValue = v82;
              v70[424] = v82;
              uint64_t v83 = (void *)v70[14];
              v331._rawValue = v83;
              v70[425] = v83;
              v84 = (void *)v70[15];
              v332._rawValue = v84;
              v70[426] = v84;
              v85 = (void *)v70[16];
              v333._rawValue = v85;
              v70[427] = v85;
              v86 = (void *)v70[17];
              v334._rawValue = v86;
              v70[428] = v86;
              v87 = (void *)v70[18];
              v335._rawValue = v87;
              v70[429] = v87;
              v88 = (void *)v70[19];
              v336._rawValue = v88;
              v70[430] = v88;
              v89 = v70[20];
              v337 = v89;
              v70[431] = v89;
              v90 = v70[21];
              v338 = v90;
              v70[432] = v90;
              v91 = v70[22];
              v381 = v91;
              v70[433] = v91;
              v382 = v70 + 23;
              v70[23] = v71;
              v70[24] = v72;
              v70[25] = v73;
              v70[26] = v74;
              v70[27] = v75;
              v70[28] = v76;
              v70[29] = v77;
              v70[30] = v78;
              v70[31] = v79;
              v70[32] = v80;
              v70[33] = v81;
              v70[34] = v82;
              v70[35] = v83;
              v70[36] = v84;
              v70[37] = v85;
              v70[38] = v86;
              v70[39] = v87;
              v70[40] = v88;
              v70[41] = v89;
              v70[42] = v90;
              v70[43] = v91;
              v340 = NightingaleDPFLRunner.performanceMeasure.getter();
              v339 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Featurization", 0xDuLL, 1)._object;
              dispatch thunk of PerformanceMeasure.finish(_:)();
              v353 = v92;
              swift_bridgeObjectRelease();
              swift_release();
              v383 = v569 + 2240;
              *(void *)(v569 + 2240) = v353;
              v378 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any));
              v379 = _allocateUninitializedArray<A>(_:)();
              v376 = v93;
              v94 = NightingaleDPFLRunner.keyMetricsCycleTrackingCheckDurationS.unsafeMutableAddressor();
              outlined init with copy of String(v94, v376);
              v95 = v341;
              v96 = v376;
              v355 = MEMORY[0x263F8D538];
              v376[5] = MEMORY[0x263F8D538];
              v96[2] = v95;
              v342 = v96 + 6;
              Duration = NightingaleDPFLRunner.keyMetricsPregnanciesQueryDurationS.unsafeMutableAddressor();
              outlined init with copy of String(Duration, v342);
              v98 = v343;
              v99 = v376;
              v376[11] = v355;
              v99[8] = v98;
              v344 = v99 + 12;
              v100 = NightingaleDPFLRunner.keyMetricsUpdatingFeaturesQueryDurationS.unsafeMutableAddressor();
              outlined init with copy of String(v100, v344);
              v101 = v345;
              v102 = v376;
              v376[17] = v355;
              v102[14] = v101;
              v346 = v102 + 18;
              updated = NightingaleDPFLRunner.keyMetricsUpdatePregnanciesDurationS.unsafeMutableAddressor();
              outlined init with copy of String(updated, v346);
              v104 = v347;
              v105 = v376;
              v376[23] = v355;
              v105[20] = v104;
              v348 = v105 + 24;
              v106 = NightingaleDPFLRunner.keyMetricsUpdateSliceDeltaAnchorDurationS.unsafeMutableAddressor();
              outlined init with copy of String(v106, v348);
              v107 = v349;
              v108 = v376;
              v376[29] = v355;
              v108[26] = v107;
              v350 = v108 + 30;
              v109 = NightingaleDPFLRunner.keyMetricsSHRDurationS.unsafeMutableAddressor();
              outlined init with copy of String(v109, v350);
              v110 = v376;
              v111 = *(void *)(v569 + 2216);
              v376[35] = v355;
              v110[32] = v111;
              v351 = v110 + 36;
              v112 = NightingaleDPFLRunner.keyMetricsRequiredFeaturesQueryDurationS.unsafeMutableAddressor();
              outlined init with copy of String(v112, v351);
              v113 = v392;
              v114 = v376;
              v376[41] = v355;
              v114[38] = v113;
              v352 = v114 + 42;
              v115 = NightingaleDPFLRunner.keyMetricsFeaturizationDurationS.unsafeMutableAddressor();
              outlined init with copy of String(v115, v352);
              v116 = v353;
              v117 = v376;
              v376[47] = v355;
              v117[44] = v116;
              v354 = v117 + 48;
              v118 = NightingaleDPFLRunner.keyMetricsIterationElapsedTime.unsafeMutableAddressor();
              outlined init with copy of String(v118, v354);
              v119 = v356;
              v120 = v376;
              v376[53] = v355;
              v120[50] = v119;
              v357 = v120 + 54;
              v121 = NightingaleDPFLRunner.keyMetricsNumberOfAllPregnancies.unsafeMutableAddressor();
              outlined init with copy of String(v121, v357);
              v122 = v358;
              v123 = v376;
              v380 = MEMORY[0x263F8D6C8];
              v376[59] = MEMORY[0x263F8D6C8];
              v123[56] = v122;
              v359 = v123 + 60;
              v124 = NightingaleDPFLRunner.keyMetricsNumberOfPregnancyInitializerFailed.unsafeMutableAddressor();
              outlined init with copy of String(v124, v359);
              v125 = v360;
              v126 = v376;
              v376[65] = v380;
              v126[62] = v125;
              v361 = v126 + 66;
              v127 = NightingaleDPFLRunner.keyMetricsOverlappingPregnanciesCount.unsafeMutableAddressor();
              outlined init with copy of String(v127, v361);
              v128 = v362;
              v129 = v376;
              v376[71] = v380;
              v129[68] = v128;
              v363 = v129 + 72;
              v130 = NightingaleDPFLRunner.keyMetricsNumberOfValidPregnancies.unsafeMutableAddressor();
              outlined init with copy of String(v130, v363);
              v131 = v364;
              v132 = v376;
              v376[77] = v380;
              v132[74] = v131;
              v365 = v132 + 78;
              v133 = NightingaleDPFLRunner.keyMetricsInvalidDurationPregnanciesCount.unsafeMutableAddressor();
              outlined init with copy of String(v133, v365);
              v134 = v366;
              v135 = v376;
              v376[83] = v380;
              v135[80] = v134;
              v367 = v135 + 84;
              v136 = NightingaleDPFLRunner.keyMetricsInvalidLMPDeltaPregnanciesCount.unsafeMutableAddressor();
              outlined init with copy of String(v136, v367);
              v137 = v368;
              v138 = v376;
              v376[89] = v380;
              v138[86] = v137;
              v369 = v138 + 90;
              v139 = NightingaleDPFLRunner.keyMetricsContainsFlowPregnanciesCount.unsafeMutableAddressor();
              outlined init with copy of String(v139, v369);
              v140 = v370;
              v141 = v376;
              v376[95] = v380;
              v141[92] = v140;
              v371 = v141 + 96;
              v142 = NightingaleDPFLRunner.keyMetricsInvalidLMPPregnanciesCount.unsafeMutableAddressor();
              outlined init with copy of String(v142, v371);
              v143 = v372;
              v144 = v376;
              v376[101] = v380;
              v144[98] = v143;
              v373 = v144 + 102;
              v145 = NightingaleDPFLRunner.keyMetricsInvalidEndPregnanciesCount.unsafeMutableAddressor();
              outlined init with copy of String(v145, v373);
              v146 = v374;
              v147 = v376;
              v376[107] = v380;
              v147[104] = v146;
              v375 = v147 + 108;
              started = NightingaleDPFLRunner.keyMetricsInvalidStartSourcePregnanciesCount.unsafeMutableAddressor();
              outlined init with copy of String(started, v375);
              v149 = v376;
              v150 = v377;
              v376[113] = v380;
              v149[110] = v150;
              _finalizeUninitializedArray<A>(_:)();
              v385 = MEMORY[0x263F8D310];
              v386 = MEMORY[0x263F8EE58] + 8;
              v387 = MEMORY[0x263F8D320];
              v384 = Dictionary.init(dictionaryLiteral:)();
              outlined retain of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])((uint64_t)v382);
              _dictionaryUpCast<A, B, C, D>(_:)();
              v388 = Dictionary.merging(_:uniquingKeysWith:)();
              *(void *)(v569 + 3472) = v388;
              v389 = 0;
              v316 = *(void *)(v569 + 3144);
              v315 = *(unsigned __int8 *)(v569 + 3693);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v151 = v315;
              v152 = v569;
              v317 = v569 + 2248;
              *(void *)(v569 + 2248) = v388;
              *(unsigned char *)(v152 + 3668) = v151;
              *(unsigned char *)(v152 + 3669) = 0;
              if (== infix<A>(_:_:)())
              {
                v153 = v389;
                v310 = *(_DWORD *)(v569 + 3632);
                v306 = *(void *)(v569 + 2880);
                v311 = *(void *)(v569 + 2872);
                v307 = *(void *)(v569 + 2816);
                v308 = *(void *)(v569 + 1864);
                swift_bridgeObjectRetain();
                v309 = *(void *)(v569 + 1904);
                swift_bridgeObjectRetain();
                v305 = v569 + 184;
                outlined retain of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])(v569 + 184);
                v312 = v173;
                v313 = NightingaleDPFLRunner.runTraining(modelPath:hyperParams:historicalPeriods:pregnancies:today:features:existingMetrics:)(v311, v306, v307, v308, v309, v310, v319, v320, v321._rawValue, v322._rawValue, v323._rawValue, v324._rawValue, v325._rawValue, v326._rawValue, v327._rawValue, v328._rawValue, v329._rawValue, v330._rawValue, v331._rawValue,
                         v332._rawValue,
                         v333._rawValue,
                         v334._rawValue,
                         v335._rawValue,
                         v336._rawValue,
                         v337,
                         v338,
                         v381,
                         v388);
                v314 = v153;
                if (!v153)
                {
                  v296 = *(void *)(v569 + 3048);
                  v297 = *(void *)(v569 + 2992);
                  v298 = *(void *)(v569 + 2976);
                  v299 = *(void *)(v569 + 2880);
                  v300 = *(id *)(v569 + 2856);
                  v301 = *(id *)(v569 + 2832);
                  v302 = *(void *)(v569 + 2816);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  v303 = v569 + 184;
                  outlined release of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])(v569 + 184);
                  swift_release();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  swift_bridgeObjectRelease();
                  swift_release();
                  outlined destroy of [A]();
                  swift_bridgeObjectRelease();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  swift_bridgeObjectRelease();

                  swift_release();
                  swift_task_dealloc();
                  v304 = v313;
                  goto LABEL_62;
                }
                v190 = *(void *)(v569 + 3048);
                v191 = *(void *)(v569 + 2992);
                v192 = *(void *)(v569 + 2976);
                v193 = *(void *)(v569 + 2880);
                v194 = *(id *)(v569 + 2856);
                v195 = *(id *)(v569 + 2832);
                v196 = *(void *)(v569 + 2816);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v197 = v569 + 184;
                outlined release of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])(v569 + 184);
                swift_release();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                swift_bridgeObjectRelease();
                swift_release();
                outlined destroy of [A]();
                swift_bridgeObjectRelease();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                swift_bridgeObjectRelease();

                swift_release();
                swift_task_dealloc();
                v271 = v314;
              }
              else
              {
                v154 = v569;
                *(unsigned char *)(v569 + 3670) = *(unsigned char *)(v569 + 3693);
                *(unsigned char *)(v154 + 3671) = 1;
                if (== infix<A>(_:_:)())
                {
                  v294 = PFLTask.evalModelNames(taskType:hyperParams:)();
                  v295 = v389;
                  if (!v389)
                  {
                    v290 = *(_DWORD *)(v569 + 3632);
                    v287 = *(void *)(v569 + 2816);
                    v286 = *(void *)(v569 + 2672);
                    v288 = *(void *)(v569 + 1864);
                    swift_bridgeObjectRetain();
                    v289 = *(void *)(v569 + 1904);
                    swift_bridgeObjectRetain();
                    v285 = v569 + 184;
                    outlined retain of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])(v569 + 184);
                    v155._rawValue = v319;
                    v156._rawValue = v320;
                    v291 = v173;
                    v292 = NightingaleDPFLRunner.runEvals(evalModels:task:hyperParams:historicalPeriods:pregnancies:today:features:existingMetrics:)(v294, v286, v287, v288, v289, v290, v155, v156, v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331,
                             v332,
                             v333,
                             v334,
                             v335,
                             v336,
                             v337,
                             v338,
                             v381,
                             v388);
                    v293 = 0;
                    v277 = *(void *)(v569 + 3048);
                    v278 = *(void *)(v569 + 2992);
                    v279 = *(void *)(v569 + 2976);
                    v280 = *(void *)(v569 + 2880);
                    v281 = *(id *)(v569 + 2856);
                    v282 = *(id *)(v569 + 2832);
                    v283 = *(void *)(v569 + 2816);
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    v284 = v569 + 184;
                    outlined release of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])(v569 + 184);
                    swift_release();
                    outlined destroy of [A]();
                    outlined destroy of [A]();
                    outlined destroy of [A]();
                    swift_bridgeObjectRelease();
                    swift_release();
                    outlined destroy of [A]();
                    swift_bridgeObjectRelease();
                    outlined destroy of [A]();
                    outlined destroy of [A]();
                    outlined destroy of [A]();
                    outlined destroy of [A]();
                    outlined destroy of [A]();
                    outlined destroy of [A]();
                    outlined destroy of [A]();
                    outlined destroy of [A]();
                    outlined destroy of [A]();
                    outlined destroy of [A]();
                    outlined destroy of [A]();
                    outlined destroy of [A]();
                    swift_bridgeObjectRelease();

                    swift_release();
                    swift_task_dealloc();
                    v304 = v292;
LABEL_62:
                    v251 = v304;
                    v244 = *(void *)(v569 + 2784);
                    v245 = *(void *)(v569 + 2776);
                    v246 = *(void *)(v569 + 2752);
                    v247 = *(void *)(v569 + 2744);
                    v248 = *(void *)(v569 + 2720);
                    v249 = *(void *)(v569 + 2712);
                    v250 = *(void *)(v569 + 2704);
                    swift_task_dealloc();
                    swift_task_dealloc();
                    swift_task_dealloc();
                    swift_task_dealloc();
                    swift_task_dealloc();
                    swift_task_dealloc();
                    swift_task_dealloc();
                    swift_task_dealloc();
                    v169 = v251;
                    v170 = *(uint64_t (**)(uint64_t))(*(void *)(v569 + 1688) + 8);
                    return v170(v169);
                  }
                  v182 = *(void *)(v569 + 3048);
                  v183 = *(void *)(v569 + 2992);
                  v184 = *(void *)(v569 + 2976);
                  v185 = *(void *)(v569 + 2880);
                  v186 = *(id *)(v569 + 2856);
                  v187 = *(id *)(v569 + 2832);
                  v188 = *(void *)(v569 + 2816);
                  swift_bridgeObjectRelease();
                  v189 = v569 + 184;
                  outlined release of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])(v569 + 184);
                  swift_release();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  swift_bridgeObjectRelease();
                  swift_release();
                  outlined destroy of [A]();
                  swift_bridgeObjectRelease();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  swift_bridgeObjectRelease();

                  swift_release();
                  swift_task_dealloc();
                  v271 = v295;
                }
                else
                {
                  v157 = v569;
                  *(unsigned char *)(v569 + 3672) = *(unsigned char *)(v569 + 3693);
                  *(unsigned char *)(v157 + 3673) = 2;
                  if (== infix<A>(_:_:)())
                  {
                    v275 = *(void *)(v569 + 2992);
                    v274 = *(_DWORD *)(v569 + 3636);
                    v272 = *(void *)(v569 + 2816);
                    v273 = *(void *)(v569 + 2680);
                    swift_retain();
                    swift_retain();
                    swift_retain();
                    v158 = swift_task_alloc();
                    v159 = v272;
                    v160 = v273;
                    v161 = v274;
                    v162 = v275;
                    v163 = v569;
                    v276 = v158;
                    *(void *)(v569 + 3480) = v158;
                    *(void *)(v158 + 16) = v159;
                    *(void *)(v158 + 24) = v163 + 1904;
                    *(void *)(v158 + 32) = v160;
                    *(_DWORD *)(v158 + 40) = v161;
                    *(void *)(v158 + 48) = v163 + 1776;
                    *(void *)(v158 + 56) = v163 + 1784;
                    *(void *)(v158 + 64) = v163 + 1792;
                    *(void *)(v158 + 72) = v163 + 1800;
                    *(void *)(v158 + 80) = v163 + 1864;
                    *(void *)(v158 + 88) = v162;
                    v164 = (void *)swift_task_alloc();
                    *(void *)(v569 + 3488) = v164;
                    v165 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt32, UInt32));
                    v166 = v569;
                    uint64_t v35 = v565;
                    uint64_t v36 = v276;
                    uint64_t v37 = v165;
                    *v164 = *(void *)(v569 + 1688);
                    v164[1] = NightingaleDPFLRunner.run(task:useCase:context:);
                    uint64_t v39 = v166 + 1556;
                    uint64_t v40 = 9;
                    uint64_t v41 = 1;
                    return NightingaleDPFLRunner.sendLocationAsync<A>(location:force:work:)(v39, v40, v41, v35, v36, v37);
                  }
                  v262 = *(void *)(v569 + 3048);
                  v263 = *(void *)(v569 + 2992);
                  v264 = *(void *)(v569 + 2976);
                  v265 = *(void *)(v569 + 2880);
                  v266 = *(id *)(v569 + 2856);
                  v267 = *(id *)(v569 + 2832);
                  v268 = *(void *)(v569 + 2816);
                  lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
                  v270 = swift_allocError();
                  *v167 = 48;
                  swift_willThrow();
                  swift_bridgeObjectRelease();
                  v269 = v569 + 184;
                  outlined release of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])(v569 + 184);
                  swift_release();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  swift_bridgeObjectRelease();
                  swift_release();
                  outlined destroy of [A]();
                  swift_bridgeObjectRelease();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  swift_bridgeObjectRelease();

                  swift_release();
                  swift_task_dealloc();
                  v271 = v270;
                }
              }
            }
LABEL_71:
            v175 = *(void *)(v569 + 2784);
            v176 = *(void *)(v569 + 2776);
            v177 = *(void *)(v569 + 2752);
            v178 = *(void *)(v569 + 2744);
            v179 = *(void *)(v569 + 2720);
            v180 = *(void *)(v569 + 2712);
            v181 = *(void *)(v569 + 2704);
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            v169 = v601;
            v170 = *(uint64_t (**)(uint64_t))(*(void *)(v569 + 1688) + 8);
            return v170(v169);
          }
LABEL_77:
          __break(1u);
          return result;
        }
LABEL_76:
        __break(1u);
        goto LABEL_77;
      }
    }
    __break(1u);
    goto LABEL_76;
  }
  return result;
}

{
  void *v0;
  uint64_t (*v1)();
  id v3;
  id v4;
  uint64_t v5;

  uint64_t v3 = (id)v0[357];
  Swift::Int v4 = (id)v0[354];
  v0[211] = v0;
  swift_task_dealloc();
  swift_release();
  swift_release();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  swift_bridgeObjectRelease();
  swift_release();
  outlined destroy of [A]();
  swift_bridgeObjectRelease();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  swift_bridgeObjectRelease();

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)())(v0[211] + 8);
  return v1();
}

{
  void *v0;
  uint64_t (*v1)();
  id v3;
  id v4;
  uint64_t v5;

  uint64_t v3 = (id)v0[357];
  Swift::Int v4 = (id)v0[354];
  v0[211] = v0;
  swift_task_dealloc();
  swift_release();
  swift_release();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  swift_bridgeObjectRelease();
  swift_release();
  outlined destroy of [A]();
  swift_bridgeObjectRelease();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  swift_bridgeObjectRelease();

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)())(v0[211] + 8);
  return v1();
}

{
  void *v0;
  uint64_t (*v1)();
  id v3;
  id v4;
  uint64_t v5;

  uint64_t v3 = (id)v0[357];
  Swift::Int v4 = (id)v0[354];
  v0[211] = v0;
  swift_task_dealloc();
  swift_release();
  swift_release();
  swift_release();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  swift_bridgeObjectRelease();
  swift_release();
  outlined destroy of [A]();
  swift_bridgeObjectRelease();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  swift_bridgeObjectRelease();

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)())(v0[211] + 8);
  return v1();
}

{
  void *v0;
  uint64_t (*v1)();
  id v3;
  id v4;
  uint64_t v5;

  uint64_t v3 = (id)v0[357];
  Swift::Int v4 = (id)v0[354];
  v0[211] = v0;
  swift_task_dealloc();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  outlined release of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])((uint64_t)(v0 + 23));
  swift_release();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  swift_bridgeObjectRelease();
  swift_release();
  outlined destroy of [A]();
  swift_bridgeObjectRelease();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  swift_bridgeObjectRelease();

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)())(v0[211] + 8);
  return v1();
}

uint64_t NightingaleDPFLRunner.run(task:useCase:context:)(uint64_t a1)
{
  uint64_t v1042 = v1;
  MEMORY[0x270FA5388](a1);
  uint64_t v997 = v1;
  v998 = closure #4 in NightingaleDPFLRunner.run(task:useCase:context:);
  v999 = closure #4 in NightingaleDPFLRunner.run(task:useCase:context:);
  v1000 = closure #6 in NightingaleDPFLRunner.run(task:useCase:context:);
  v1001 = closure #7 in NightingaleDPFLRunner.run(task:useCase:context:);
  v1002 = partial apply for closure #8 in NightingaleDPFLRunner.run(task:useCase:context:);
  v1003 = partial apply for closure #1 in osLogInternal(_:log:type:);
  v1004 = "Fatal error";
  v1005 = "Range requires lowerBound <= upperBound";
  v1006 = "Swift/Range.swift";
  v1007 = partial apply for closure #9 in NightingaleDPFLRunner.run(task:useCase:context:);
  v1008 = closure #10 in NightingaleDPFLRunner.run(task:useCase:context:);
  v1009 = closure #11 in NightingaleDPFLRunner.run(task:useCase:context:);
  v1010 = closure #12 in NightingaleDPFLRunner.run(task:useCase:context:);
  v1011 = closure #13 in NightingaleDPFLRunner.run(task:useCase:context:);
  v1012 = closure #14 in NightingaleDPFLRunner.run(task:useCase:context:);
  v1013 = closure #15 in NightingaleDPFLRunner.run(task:useCase:context:);
  v1014 = closure #16 in NightingaleDPFLRunner.run(task:useCase:context:);
  v1015 = closure #16 in NightingaleDPFLRunner.run(task:useCase:context:);
  v1016 = "Swift/ClosedRange.swift";
  v1017 = partial apply for closure #35 in NightingaleDPFLRunner.run(task:useCase:context:);
  v1018 = closure #36 in NightingaleDPFLRunner.run(task:useCase:context:);
  v1019 = (int *)&async function pointer to partial apply for closure #37 in NightingaleDPFLRunner.run(task:useCase:context:);
  v1020 = (int *)&async function pointer to partial apply for closure #34 in NightingaleDPFLRunner.run(task:useCase:context:);
  v1021 = (int *)&async function pointer to partial apply for closure #33 in NightingaleDPFLRunner.run(task:useCase:context:);
  v1022 = (int *)&async function pointer to partial apply for closure #32 in NightingaleDPFLRunner.run(task:useCase:context:);
  v1023 = closure #20 in NightingaleDPFLRunner.run(task:useCase:context:);
  v1024 = closure #20 in NightingaleDPFLRunner.run(task:useCase:context:);
  v1025 = &async function pointer to partial apply for closure #22 in NightingaleDPFLRunner.run(task:useCase:context:);
  v1026 = closure #16 in NightingaleDPFLRunner.run(task:useCase:context:);
  v1027 = closure #16 in NightingaleDPFLRunner.run(task:useCase:context:);
  v1028 = (int *)&async function pointer to partial apply for closure #18 in NightingaleDPFLRunner.run(task:useCase:context:);
  *(void *)(v1 + 1688) = v1;
  uint64_t v1029 = *(void *)(v1 + 1920);
  uint64_t v1033 = v1 + 2600;
  *(void *)(v1 + 2600) = v1029;
  uint64_t v1031 = v1 + 3689;
  *(unsigned char *)(v1 + 3689) = 0;
  uint64_t v1030 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HealthDataQueryResult);
  unint64_t v1032 = lazy protocol witness table accessor for type HealthDataRawSampleType and conformance HealthDataRawSampleType();
  MEMORY[0x25A2C04B0](v1031, v1029, &type metadata for HealthDataRawSampleType, v1030);
  if (*(void *)(v1 + 936))
  {
    uint64_t v995 = *(void *)(v997 + 936);
    uint64_t v992 = *(void *)(v997 + 944);
    uint64_t v996 = v997 + 912;
    __swift_project_boxed_opaque_existential_1((void *)(v997 + 912), v995);
    v994 = *(void (**)(uint64_t, uint64_t))(v992 + 16);
    uint64_t v993 = v992 + 16;
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v3 = v997;
    *(void *)(v997 + 1416) = AssociatedTypeWitness;
    __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v3 + 1392));
    v994(v995, v992);
    __swift_destroy_boxed_opaque_existential_1(v996);
  }
  else
  {
    outlined destroy of Pregnancy?(v997 + 912);
    uint64_t v36 = (void *)v997;
    *(void *)(v997 + 1392) = 0;
    v36[175] = 0;
    v36[176] = 0;
    v36[177] = 0;
  }
  if (*(void *)(v997 + 1416))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : UInt8]);
    if (swift_dynamicCast()) {
      uint64_t v991 = *(void *)(v997 + 2664);
    }
    else {
      uint64_t v991 = 0;
    }
    uint64_t v990 = v991;
  }
  else
  {
    uint64_t v928 = 0;
    outlined destroy of Pregnancy?(v997 + 1392);
    uint64_t v990 = 0;
  }
  uint64_t v4 = v997;
  *(void *)(v997 + 2608) = v990;
  if (*(void *)(v4 + 2608))
  {
    uint64_t v1038 = *(void *)(v997 + 2608);
  }
  else
  {
    _allocateUninitializedArray<A>(_:)();
    uint64_t v1038 = Dictionary.init(dictionaryLiteral:)();
    outlined destroy of [A]();
  }
  uint64_t v5 = *(void *)(v997 + 3024);
  uint64_t v987 = v1038;
  uint64_t v988 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : UInt8]);
  uint64_t result = Dictionary.merge(_:uniquingKeysWith:)();
  uint64_t v989 = v5;
  if (v5) {
    return result;
  }
  unint64_t v7 = v1032;
  uint64_t v8 = v1030;
  uint64_t v9 = v1029;
  uint64_t v10 = v997 + 3690;
  *(unsigned char *)(v997 + 3690) = 2;
  MEMORY[0x25A2C04B0](v10, v9, &type metadata for HealthDataRawSampleType, v8, v7);
  if (*(void *)(v997 + 976))
  {
    uint64_t v985 = *(void *)(v997 + 976);
    uint64_t v982 = *(void *)(v997 + 984);
    uint64_t v986 = v997 + 952;
    __swift_project_boxed_opaque_existential_1((void *)(v997 + 952), v985);
    v984 = *(void (**)(uint64_t, uint64_t))(v982 + 16);
    uint64_t v983 = v982 + 16;
    uint64_t v11 = swift_getAssociatedTypeWitness();
    uint64_t v12 = v997;
    *(void *)(v997 + 1448) = v11;
    __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v12 + 1424));
    v984(v985, v982);
    __swift_destroy_boxed_opaque_existential_1(v986);
  }
  else
  {
    outlined destroy of Pregnancy?(v997 + 952);
    uint64_t v35 = (void *)v997;
    *(void *)(v997 + 1424) = 0;
    v35[179] = 0;
    v35[180] = 0;
    v35[181] = 0;
  }
  if (*(void *)(v997 + 1448))
  {
    uint64_t v981 = (swift_dynamicCast() & 1) != 0 ? *(void *)(v997 + 2656) : 0;
    uint64_t v980 = v981;
  }
  else
  {
    uint64_t v929 = 0;
    outlined destroy of Pregnancy?(v997 + 1424);
    uint64_t v980 = 0;
  }
  uint64_t v13 = v997;
  *(void *)(v997 + 2616) = v980;
  if (*(void *)(v13 + 2616))
  {
    uint64_t v1039 = *(void *)(v997 + 2616);
  }
  else
  {
    _allocateUninitializedArray<A>(_:)();
    uint64_t v1039 = Dictionary.init(dictionaryLiteral:)();
    outlined destroy of [A]();
  }
  uint64_t result = Dictionary.merge(_:uniquingKeysWith:)();
  uint64_t v979 = v989;
  if (v989) {
    return result;
  }
  unint64_t v14 = v1032;
  uint64_t v15 = v1030;
  uint64_t v16 = v1029;
  uint64_t v17 = v997 + 3691;
  *(unsigned char *)(v997 + 3691) = 1;
  MEMORY[0x25A2C04B0](v17, v16, &type metadata for HealthDataRawSampleType, v15, v14);
  if (*(void *)(v997 + 1016))
  {
    uint64_t v977 = *(void *)(v997 + 1016);
    uint64_t v974 = *(void *)(v997 + 1024);
    uint64_t v978 = v997 + 992;
    __swift_project_boxed_opaque_existential_1((void *)(v997 + 992), v977);
    v976 = *(void (**)(uint64_t, uint64_t))(v974 + 16);
    uint64_t v975 = v974 + 16;
    uint64_t v18 = swift_getAssociatedTypeWitness();
    uint64_t v19 = v997;
    *(void *)(v997 + 1480) = v18;
    __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v19 + 1456));
    v976(v977, v974);
    __swift_destroy_boxed_opaque_existential_1(v978);
  }
  else
  {
    outlined destroy of Pregnancy?(v997 + 992);
    uint64_t v34 = (void *)v997;
    *(void *)(v997 + 1456) = 0;
    v34[183] = 0;
    v34[184] = 0;
    v34[185] = 0;
  }
  if (*(void *)(v997 + 1480))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : Bool]);
    uint64_t v973 = (swift_dynamicCast() & 1) != 0 ? *(void *)(v997 + 2648) : 0;
    uint64_t v972 = v973;
  }
  else
  {
    uint64_t v930 = 0;
    outlined destroy of Pregnancy?(v997 + 1456);
    uint64_t v972 = 0;
  }
  uint64_t v20 = v997;
  *(void *)(v997 + 2624) = v972;
  if (*(void *)(v20 + 2624))
  {
    uint64_t v1040 = *(void *)(v997 + 2624);
  }
  else
  {
    _allocateUninitializedArray<A>(_:)();
    uint64_t v1040 = Dictionary.init(dictionaryLiteral:)();
    outlined destroy of [A]();
  }
  uint64_t v970 = v1040;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : Bool]);
  uint64_t result = Dictionary.merge(_:uniquingKeysWith:)();
  uint64_t v971 = v979;
  if (v979) {
    return result;
  }
  unint64_t v21 = v1032;
  uint64_t v22 = v1030;
  uint64_t v23 = v1029;
  uint64_t v24 = v997 + 3692;
  *(unsigned char *)(v997 + 3692) = 3;
  MEMORY[0x25A2C04B0](v24, v23, &type metadata for HealthDataRawSampleType, v22, v21);
  if (*(void *)(v997 + 1056))
  {
    uint64_t v968 = *(void *)(v997 + 1056);
    uint64_t v965 = *(void *)(v997 + 1064);
    uint64_t v969 = v997 + 1032;
    __swift_project_boxed_opaque_existential_1((void *)(v997 + 1032), v968);
    v967 = *(void (**)(uint64_t, uint64_t))(v965 + 16);
    uint64_t v966 = v965 + 16;
    uint64_t v25 = swift_getAssociatedTypeWitness();
    uint64_t v26 = v997;
    *(void *)(v997 + 1512) = v25;
    __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v26 + 1488));
    v967(v968, v965);
    __swift_destroy_boxed_opaque_existential_1(v969);
  }
  else
  {
    outlined destroy of Pregnancy?(v997 + 1032);
    uint64_t v33 = (void *)v997;
    *(void *)(v997 + 1488) = 0;
    v33[187] = 0;
    v33[188] = 0;
    v33[189] = 0;
  }
  if (*(void *)(v997 + 1512))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8 : [(UInt32, UInt32)]]);
    uint64_t v964 = (swift_dynamicCast() & 1) != 0 ? *(void *)(v997 + 2640) : 0;
    uint64_t v963 = v964;
  }
  else
  {
    uint64_t v931 = 0;
    outlined destroy of Pregnancy?(v997 + 1488);
    uint64_t v963 = 0;
  }
  uint64_t v27 = v997;
  *(void *)(v997 + 2632) = v963;
  if (*(void *)(v27 + 2632))
  {
    uint64_t v1041 = *(void *)(v997 + 2632);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt8, [(UInt32, UInt32)]));
    uint64_t v962 = _allocateUninitializedArray<A>(_:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(UInt32, UInt32)]);
    uint64_t v1041 = Dictionary.init(dictionaryLiteral:)();
    outlined destroy of [A]();
  }
  uint64_t v958 = *(void *)(v997 + 2904);
  uint64_t v959 = v1041;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(UInt32, UInt32)]);
  uint64_t v960 = _dictionaryUpCast<A, B, C, D>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8 : [(start: UInt32, end: UInt32)]]);
  uint64_t result = Dictionary.merge(_:uniquingKeysWith:)();
  uint64_t v961 = v971;
  if (v971) {
    return result;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v954 = v997 + 1696;
  uint64_t v940 = v997 + 1752;
  uint64_t v941 = v997 + 1760;
  uint64_t v942 = v997 + 1768;
  uint64_t v943 = v997 + 3608;
  uint64_t v955 = v997 + 1656;
  uint64_t v944 = v997 + 3512;
  uint64_t v945 = v997 + 1872;
  uint64_t v946 = v997 + 1880;
  uint64_t v947 = v997 + 1888;
  uint64_t v948 = v997 + 3520;
  uint64_t v949 = v997 + 1896;
  uint64_t v950 = v997 + 1912;
  uint64_t v939 = *(void *)(v997 + 2992);
  uint64_t v953 = *(void *)(v997 + 2904);
  uint64_t v936 = *(void *)(v997 + 2680);
  uint64_t v933 = NightingaleDPFLRunner.performanceMeasure.getter();
  int v935 = 1;
  object = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("QueryUpdatingFeatures", 0x15uLL, 1)._object;
  dispatch thunk of PerformanceMeasure.finish(_:)();
  uint64_t v934 = v28;
  *(void *)(v997 + 3032) = v28;
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v951 = v997 + 1952;
  *(void *)(v997 + 1952) = v934;
  Swift::Int v29 = default argument 1 of NightingaleDPFLRunner.sendLocation(_:_:)();
  NightingaleDPFLRunner.sendLocation(_:_:)(NightingaleTraining_NightingaleDReachLocation_queryUpdatingFeaturesCompleted, v29);
  uint64_t v938 = NightingaleDPFLRunner.performanceMeasure.getter();
  v937 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("UpdatePregnancies", 0x11uLL, v935 & 1)._object;
  dispatch thunk of PerformanceMeasure.start(_:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_retain();
  uint64_t v30 = (void *)swift_task_alloc();
  uint64_t v31 = v997;
  v952 = v30;
  v30[2] = v939;
  v30[3] = v31 + 1776;
  v30[4] = v31 + 1784;
  v30[5] = v31 + 1792;
  v30[6] = v31 + 1800;
  char v32 = default argument 1 of NightingaleDPFLRunner.sendLocationAsync<A>(location:force:work:)();
  NightingaleDPFLRunner.sendLocation<A>(location:force:work:)(5, v32 & 1, (uint64_t)v952, v953, v997 + 1960);
  uint64_t v956 = 0;
  id v957 = 0;
  uint64_t v925 = *(void *)(v997 + 2992);
  swift_task_dealloc();
  swift_release();
  *(void *)(v997 + 1864) = *(void *)(v997 + 1960);
  swift_bridgeObjectRelease();
  id v926 = v957;
  uint64_t v927 = v956;
  uint64_t v920 = v927;
  id v921 = v926;
  uint64_t v923 = *(void *)(v997 + 1904);
  swift_bridgeObjectRetain();
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Pregnancy);
  uint64_t v38 = v923;
  uint64_t v922 = v37;
  *(void *)(v997 + 3040) = v37;
  uint64_t v924 = MEMORY[0x25A2C0810](v38);
  swift_bridgeObjectRelease();
  if (v924 < 0)
  {
    LOBYTE(v314) = 2;
    uint64_t v315 = 754;
    LODWORD(v316) = 0;
    return _assertionFailure(_:_:file:line:flags:)();
  }
  uint64_t v1034 = 0;
  uint64_t v1035 = v924;
  uint64_t v39 = specialized Collection<>.makeIterator()();
  uint64_t v40 = v997;
  uint64_t v41 = v39;
  uint64_t v42 = v920;
  *(void *)(v997 + 1592) = v41;
  *(void *)(v40 + 1600) = v43;
  *(void *)(v40 + 1608) = v44;
  for (uint64_t i = v42; ; uint64_t i = v917)
  {
    uint64_t v917 = i;
    uint64_t v1036 = specialized IndexingIterator.next()();
    char v1037 = v45 & 1;
    uint64_t v918 = v1036;
    if (v45) {
      break;
    }
    uint64_t v46 = v997;
    uint64_t v915 = v997 + 2528;
    *(void *)(v997 + 2528) = v918;
    v914 = (void *)(v46 + 872);
    Array.subscript.getter();
    uint64_t v909 = *(void *)(v997 + 896);
    uint64_t v906 = *(void *)(v997 + 904);
    v905 = __swift_project_boxed_opaque_existential_1(v914, v909);
    uint64_t v907 = *(void *)(v909 - 8);
    uint64_t v908 = v909 - 8;
    uint64_t v913 = swift_task_alloc();
    (*(void (**)(uint64_t, void *, uint64_t))(v907 + 16))(v913, v905, v909);
    int v910 = (*(uint64_t (**)(uint64_t))(v906 + 48))(v909);
    (*(void (**)(uint64_t, uint64_t))(v907 + 8))(v913, v909);
    uint64_t v47 = v997;
    uint64_t v912 = v997 + 3685;
    *(unsigned char *)(v997 + 3685) = v910;
    uint64_t v911 = v47 + 3686;
    *(unsigned char *)(v47 + 3686) = 2;
    lazy protocol witness table accessor for type PregnancySource and conformance PregnancySource();
    int v916 = == infix<A>(_:_:)();
    swift_task_dealloc();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v914);
    if (v916)
    {
      uint64_t v897 = *(void *)(v997 + 2816);
      uint64_t v904 = *(void *)(v997 + 1864);
      swift_bridgeObjectRetain();
      int v898 = HyperParams.useSeahorseInferredStartdate.getter();
      int v899 = HyperParams.useTestDateAsLMP.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Pregnancy]);
      uint64_t v902 = v997 + 1360;
      v903 = (void (*)(void))Array.subscript.modify();
      uint64_t v900 = *(void *)(v48 + 24);
      uint64_t v901 = *(void *)(v48 + 32);
      __swift_mutable_project_boxed_opaque_existential_1(v48, v900);
      (*(void (**)(uint64_t, void, void, uint64_t))(v901 + 104))(v904, v898 & 1, v899 & 1, v900);
      v903();
    }
    else
    {
      uint64_t v889 = *(void *)(v997 + 2816);
      uint64_t v896 = *(void *)(v997 + 1864);
      swift_bridgeObjectRetain();
      int v890 = HyperParams.useSeahorseInferredStartdate.getter();
      int started = HyperParams.useFactorStartDateAsLMP.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Pregnancy]);
      uint64_t v894 = v997 + 1328;
      v895 = (void (*)(void))Array.subscript.modify();
      uint64_t v892 = *(void *)(v49 + 24);
      uint64_t v893 = *(void *)(v49 + 32);
      __swift_mutable_project_boxed_opaque_existential_1(v49, v892);
      (*(void (**)(uint64_t, void, void, uint64_t))(v893 + 104))(v896, v890 & 1, started & 1, v892);
      v895();
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v886 = *(void *)(v997 + 2968);
  uint64_t v887 = *(void *)(v997 + 2960);
  uint64_t v884 = *(void *)(v997 + 1904);
  swift_bridgeObjectRetain();
  char v50 = HyperParams.overlapPregnanciesStrategy.getter();
  uint64_t v885 = mergePregnancies(pregnancies:strategy:)(v884, v50 & 1);
  *(void *)(v997 + 3048) = v885;
  swift_bridgeObjectRelease();
  uint64_t v55 = v885;
  uint64_t v56 = v886;
  uint64_t v57 = v887;
  *(void *)(v997 + 1984) = v885;
  uint64_t v888 = v57 - v56;
  if (__OFSUB__(v57, v56))
  {
    __break(1u);
LABEL_202:
    __break(1u);
    goto LABEL_203;
  }
  uint64_t v55 = MEMORY[0x25A2C0810](v885, v922);
  uint64_t v883 = v888 - v55;
  BOOL v59 = __OFSUB__(v888, v55);
  *(void *)(v997 + 3056) = v888 - v55;
  if (v59) {
    goto LABEL_202;
  }
  id v60 = v921;
  uint64_t v875 = *(void *)(v997 + 2816);
  uint64_t v878 = v997 + 1992;
  *(void *)(v997 + 1992) = v883;
  uint64_t v874 = 0;
  uint64_t v876 = v997 + 2000;
  *(void *)(v997 + 2000) = _allocateUninitializedArray<A>(_:)();
  uint64_t v61 = _allocateUninitializedArray<A>(_:)();
  uint64_t v62 = v885;
  uint64_t v63 = v997;
  uint64_t v877 = v997 + 2008;
  *(void *)(v997 + 2008) = v61;
  *(void *)(v63 + 2016) = v62;
  swift_retain();
  uint64_t v64 = (void *)swift_task_alloc();
  uint64_t v65 = v876;
  uint64_t v66 = v877;
  uint64_t v67 = v997;
  v879 = v64;
  v64[2] = v875;
  v64[3] = v67 + 1776;
  v64[4] = v65;
  v64[5] = v66;
  uint64_t v880 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Pregnancy]);
  *(void *)(v997 + 3064) = v880;
  unint64_t v881 = lazy protocol witness table accessor for type [Pregnancy] and conformance [A]();
  *(void *)(v997 + 3072) = v881;
  uint64_t result = Sequence.forEach(_:)();
  id v882 = v60;
  if (v60) {
    return result;
  }
  uint64_t v865 = *(void *)(v997 + 2816);
  swift_task_dealloc();
  swift_release();
  uint64_t v866 = *(void *)(v997 + 2000);
  swift_bridgeObjectRetain();
  uint64_t v68 = MEMORY[0x25A2C0810](v866, v922);
  uint64_t v69 = v997;
  uint64_t v867 = v68;
  *(void *)(v997 + 3080) = v68;
  uint64_t v869 = v69 + 2024;
  *(void *)(v69 + 2024) = v68;
  swift_bridgeObjectRelease();
  uint64_t v868 = *(void *)(v997 + 2008);
  swift_bridgeObjectRetain();
  *(void *)(v997 + 2032) = v868;
  uint64_t v870 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PregnancyInvalidReason]);
  unint64_t v871 = lazy protocol witness table accessor for type [PregnancyInvalidReason] and conformance [A]();
  uint64_t v872 = _ArrayProtocol.filter(_:)();
  uint64_t v873 = 0;
  uint64_t v70 = MEMORY[0x25A2C0810](v872, &type metadata for PregnancyInvalidReason);
  uint64_t v71 = v997;
  *(void *)(v997 + 3088) = v70;
  uint64_t v862 = v71 + 2040;
  *(void *)(v71 + 2040) = v70;
  swift_bridgeObjectRelease();
  uint64_t v861 = *(void *)(v997 + 2008);
  swift_bridgeObjectRetain();
  *(void *)(v997 + 2048) = v861;
  uint64_t v863 = _ArrayProtocol.filter(_:)();
  uint64_t v864 = 0;
  uint64_t v72 = MEMORY[0x25A2C0810](v863, &type metadata for PregnancyInvalidReason);
  uint64_t v73 = v997;
  *(void *)(v997 + 3096) = v72;
  uint64_t v858 = v73 + 2056;
  *(void *)(v73 + 2056) = v72;
  swift_bridgeObjectRelease();
  uint64_t v857 = *(void *)(v997 + 2008);
  swift_bridgeObjectRetain();
  *(void *)(v997 + 2064) = v857;
  uint64_t v859 = _ArrayProtocol.filter(_:)();
  uint64_t v860 = 0;
  uint64_t v74 = MEMORY[0x25A2C0810](v859, &type metadata for PregnancyInvalidReason);
  uint64_t v75 = v997;
  *(void *)(v997 + 3104) = v74;
  uint64_t v854 = v75 + 2072;
  *(void *)(v75 + 2072) = v74;
  swift_bridgeObjectRelease();
  uint64_t v853 = *(void *)(v997 + 2008);
  swift_bridgeObjectRetain();
  *(void *)(v997 + 2080) = v853;
  uint64_t v855 = _ArrayProtocol.filter(_:)();
  uint64_t v856 = 0;
  uint64_t v76 = MEMORY[0x25A2C0810](v855, &type metadata for PregnancyInvalidReason);
  uint64_t v77 = v997;
  *(void *)(v997 + 3112) = v76;
  uint64_t v850 = v77 + 2088;
  *(void *)(v77 + 2088) = v76;
  swift_bridgeObjectRelease();
  uint64_t v849 = *(void *)(v997 + 2008);
  swift_bridgeObjectRetain();
  *(void *)(v997 + 2096) = v849;
  uint64_t v851 = _ArrayProtocol.filter(_:)();
  uint64_t v852 = 0;
  uint64_t v78 = MEMORY[0x25A2C0810](v851, &type metadata for PregnancyInvalidReason);
  uint64_t v79 = v997;
  *(void *)(v997 + 3120) = v78;
  uint64_t v846 = v79 + 2104;
  *(void *)(v79 + 2104) = v78;
  swift_bridgeObjectRelease();
  uint64_t v845 = *(void *)(v997 + 2008);
  swift_bridgeObjectRetain();
  *(void *)(v997 + 2112) = v845;
  uint64_t v847 = _ArrayProtocol.filter(_:)();
  uint64_t v848 = 0;
  uint64_t v839 = *(void *)(v997 + 2680);
  uint64_t v80 = MEMORY[0x25A2C0810](v847, &type metadata for PregnancyInvalidReason);
  uint64_t v81 = v997;
  *(void *)(v997 + 3128) = v80;
  uint64_t v843 = v81 + 2120;
  *(void *)(v81 + 2120) = v80;
  swift_bridgeObjectRelease();
  uint64_t v841 = NightingaleDPFLRunner.performanceMeasure.getter();
  v840 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("UpdatePregnancies", 0x11uLL, 1)._object;
  dispatch thunk of PerformanceMeasure.finish(_:)();
  uint64_t v842 = v82;
  *(void *)(v997 + 3136) = v82;
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v844 = v997 + 2128;
  *(void *)(v997 + 2128) = v842;
  Swift::Int v83 = default argument 1 of NightingaleDPFLRunner.sendLocation(_:_:)();
  NightingaleDPFLRunner.sendLocation(_:_:)(NightingaleTraining_NightingaleDReachLocation_updatePregnanciesCompleted, v83);
  if (v867 <= 0)
  {
    uint64_t v288 = v997;
    char v289 = *(unsigned char *)(v997 + 3693);
    uint64_t v400 = v997 + 3610;
    *(unsigned char *)(v997 + 3610) = v289;
    uint64_t v399 = v288 + 3611;
    *(unsigned char *)(v288 + 3611) = 4;
    lazy protocol witness table accessor for type NightingalePFLTaskType and conformance NightingalePFLTaskType();
    if ((== infix<A>(_:_:)() & 1) == 0)
    {
      uint64_t v362 = *(void *)(v997 + 2992);
      uint64_t v363 = *(void *)(v997 + 2976);
      uint64_t v364 = *(void *)(v997 + 2880);
      id v365 = *(id *)(v997 + 2856);
      id v366 = *(id *)(v997 + 2832);
      uint64_t v367 = *(void *)(v997 + 2816);
      int v361 = 37;
      Swift::Int v310 = HIDPFLError.rawValue.getter(37);
      NightingaleDPFLRunner.sendLocation(_:_:)(NightingaleTraining_NightingaleDReachLocation_checkValidPregnanciesCompleted, v310);
      lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
      uint64_t v368 = swift_allocError();
      unsigned char *v311 = 37;
      swift_willThrow();
      outlined destroy of [A]();
      outlined destroy of [A]();
      swift_bridgeObjectRelease();
      swift_release();
      outlined destroy of [A]();
      swift_bridgeObjectRelease();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      swift_bridgeObjectRelease();

      swift_release();
      uint64_t v785 = v368;
      goto LABEL_198;
    }
    uint64_t v290 = v848;
    uint64_t v378 = *(void *)(v997 + 2984);
    uint64_t v385 = *(void *)(v997 + 2968);
    uint64_t v382 = *(void *)(v997 + 2960);
    uint64_t v392 = *(void *)(v997 + 2880);
    uint64_t v391 = *(void *)(v997 + 2872);
    uint64_t v376 = *(void *)(v997 + 2864);
    uint64_t v380 = *(void *)(v997 + 2824);
    uint64_t v395 = *(void *)(v997 + 2816);
    uint64_t v375 = *(void *)(v997 + 1904);
    swift_bridgeObjectRetain();
    uint64_t v393 = MEMORY[0x25A2C0810](v375, v922);
    swift_bridgeObjectRelease();
    uint64_t v394 = *(void *)(v997 + 2008);
    swift_bridgeObjectRetain();
    uint64_t v389 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any));
    uint64_t v390 = _allocateUninitializedArray<A>(_:)();
    v388 = v291;
    v292 = NightingaleDPFLRunner.keyMetricsCycleTrackingCheckDurationS.unsafeMutableAddressor();
    outlined init with copy of String(v292, v388);
    uint64_t v293 = v376;
    v294 = v388;
    uint64_t v387 = MEMORY[0x263F8D538];
    v388[5] = MEMORY[0x263F8D538];
    v294[2] = v293;
    v377 = v294 + 6;
    Duration = NightingaleDPFLRunner.keyMetricsPregnanciesQueryDurationS.unsafeMutableAddressor();
    outlined init with copy of String(Duration, v377);
    uint64_t v296 = v378;
    v297 = v388;
    v388[11] = v387;
    v297[8] = v296;
    v379 = v297 + 12;
    v298 = NightingaleDPFLRunner.keyMetricsIterationElapsedTime.unsafeMutableAddressor();
    outlined init with copy of String(v298, v379);
    uint64_t v299 = v380;
    v300 = v388;
    v388[17] = v387;
    v300[14] = v299;
    v381 = v300 + 18;
    v301 = NightingaleDPFLRunner.keyMetricsNumberOfAllPregnancies.unsafeMutableAddressor();
    outlined init with copy of String(v301, v381);
    uint64_t v302 = v382;
    v303 = v388;
    uint64_t v384 = MEMORY[0x263F8D6C8];
    v388[23] = MEMORY[0x263F8D6C8];
    v303[20] = v302;
    v383 = v303 + 24;
    v304 = NightingaleDPFLRunner.keyMetricsNumberOfPregnancyInitializerFailed.unsafeMutableAddressor();
    outlined init with copy of String(v304, v383);
    uint64_t v305 = v385;
    v306 = v388;
    v388[29] = v384;
    v306[26] = v305;
    v386 = v306 + 30;
    updated = NightingaleDPFLRunner.keyMetricsUpdatePregnanciesDurationS.unsafeMutableAddressor();
    outlined init with copy of String(updated, v386);
    v308 = v388;
    uint64_t v309 = v842;
    v388[35] = v387;
    v308[32] = v309;
    _finalizeUninitializedArray<A>(_:)();
    uint64_t v396 = Dictionary.init(dictionaryLiteral:)();
    uint64_t v397 = NightingaleDPFLRunner.runPregnanciesDistribution(hyperParams:modelPath:numberOfRawPregnancies:invalidReasons:swtAvailability:existingMetrics:)(v395, v391, v392, v393, v394, v396, -1.0);
    uint64_t v398 = v290;
    if (v290)
    {
      uint64_t v347 = *(void *)(v997 + 2992);
      uint64_t v348 = *(void *)(v997 + 2976);
      uint64_t v349 = *(void *)(v997 + 2880);
      id v350 = *(id *)(v997 + 2856);
      id v351 = *(id *)(v997 + 2832);
      uint64_t v352 = *(void *)(v997 + 2816);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined destroy of [A]();
      outlined destroy of [A]();
      swift_bridgeObjectRelease();
      swift_release();
      outlined destroy of [A]();
      swift_bridgeObjectRelease();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      swift_bridgeObjectRelease();

      swift_release();
      uint64_t v785 = v398;
      goto LABEL_198;
    }
    uint64_t v369 = *(void *)(v997 + 2992);
    uint64_t v370 = *(void *)(v997 + 2976);
    uint64_t v371 = *(void *)(v997 + 2880);
    id v372 = *(id *)(v997 + 2856);
    id v373 = *(id *)(v997 + 2832);
    uint64_t v374 = *(void *)(v997 + 2816);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of [A]();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    swift_release();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();

    swift_release();
    uint64_t v452 = v397;
    goto LABEL_182;
  }
  int v836 = *(unsigned __int8 *)(v997 + 3693);
  Swift::Int v84 = default argument 1 of NightingaleDPFLRunner.sendLocation(_:_:)();
  NightingaleDPFLRunner.sendLocation(_:_:)(NightingaleTraining_NightingaleDReachLocation_checkValidPregnanciesCompleted, v84);
  uint64_t v85 = v997;
  uint64_t v838 = v997 + 3664;
  *(unsigned char *)(v997 + 3664) = v836;
  uint64_t v837 = v85 + 3665;
  *(unsigned char *)(v85 + 3665) = 4;
  *(void *)(v997 + 3144) = lazy protocol witness table accessor for type NightingalePFLTaskType and conformance NightingalePFLTaskType();
  if ((== infix<A>(_:_:)() & 1) == 0)
  {
    uint64_t v771 = *(void *)(v997 + 2816);
    uint64_t v773 = NightingaleDPFLRunner.performanceMeasure.getter();
    int v774 = 1;
    v772 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("UpdateSliceDeltaAnchor", 0x16uLL, 1)._object;
    dispatch thunk of PerformanceMeasure.start(_:)();
    swift_bridgeObjectRelease();
    swift_release();
    char v118 = HyperParams.sliceDeltaAnchor.getter();
    uint64_t v119 = v997;
    uint64_t v776 = v997 + 3666;
    *(unsigned char *)(v997 + 3666) = v118 & 1;
    uint64_t v775 = v119 + 3667;
    *(unsigned char *)(v119 + 3667) = 1;
    lazy protocol witness table accessor for type SliceDeltaAnchor and conformance SliceDeltaAnchor();
    if (== infix<A>(_:_:)())
    {
      uint64_t v120 = v848;
      uint64_t v769 = *(void *)(v997 + 2000);
      swift_bridgeObjectRetain();
      *(void *)(v997 + 2288) = v769;
      uint64_t result = Sequence.min(by:)();
      uint64_t v770 = v120;
      if (v120) {
        return result;
      }
      outlined destroy of [A]();
      if (*(void *)(v997 + 456))
      {
        uint64_t v764 = *(void *)(v997 + 456);
        uint64_t v763 = *(void *)(v997 + 464);
        uint64_t v765 = v997 + 432;
        __swift_project_boxed_opaque_existential_1((void *)(v997 + 432), v764);
        int v766 = (*(uint64_t (**)(uint64_t))(v763 + 16))(v764);
        __swift_destroy_boxed_opaque_existential_1(v997 + 432);
        int v767 = v766;
        int v768 = 0;
      }
      else
      {
        int v746 = 0;
        outlined destroy of Pregnancy?(v997 + 432);
        int v767 = 0;
        int v768 = 1;
      }
      int v762 = v767;
      if ((v768 & 1) == 0)
      {
        uint64_t v121 = v997;
        uint64_t v761 = v997 + 3568;
        *(_DWORD *)(v997 + 3568) = v762;
        uint64_t v760 = *(void *)(v121 + 2000);
        swift_bridgeObjectRetain();
        *(void *)(v997 + 2296) = v760;
        Sequence.max(by:)();
        outlined destroy of [A]();
        if (*(void *)(v997 + 496))
        {
          uint64_t v755 = *(void *)(v997 + 496);
          uint64_t v754 = *(void *)(v997 + 504);
          uint64_t v756 = v997 + 472;
          __swift_project_boxed_opaque_existential_1((void *)(v997 + 472), v755);
          int v757 = (*(uint64_t (**)(uint64_t))(v754 + 16))(v755);
          __swift_destroy_boxed_opaque_existential_1(v997 + 472);
          int v758 = v757;
          int v759 = 0;
        }
        else
        {
          int v747 = 0;
          outlined destroy of Pregnancy?(v997 + 472);
          int v758 = 0;
          int v759 = 1;
        }
        int v753 = v758;
        if ((v759 & 1) == 0)
        {
          uint64_t v749 = *(void *)(v997 + 2816);
          uint64_t v748 = *(void *)(v997 + 2680);
          uint64_t v750 = v997 + 3576;
          *(_DWORD *)(v997 + 3576) = v753;
          double v751 = (double)HyperParams.rawSampleTimeout.getter();
          swift_retain();
          swift_retain();
          uint64_t v122 = swift_allocObject();
          uint64_t v123 = v748;
          int v124 = v762;
          uint64_t v125 = v749;
          int v126 = v753;
          uint64_t v752 = v122;
          *(void *)(v997 + 3184) = v122;
          *(void *)(v122 + 16) = v123;
          *(_DWORD *)(v122 + 24) = v124;
          *(void *)(v122 + 32) = v125;
          *(_DWORD *)(v122 + 40) = v126;
          v127 = (void *)swift_task_alloc();
          uint64_t v128 = v997;
          v54.n128_f64[0] = v751;
          unint64_t v51 = v1025;
          uint64_t v52 = v752;
          *(void *)(v997 + 3192) = v127;
          void *v127 = *(void *)(v128 + 1688);
          v127[1] = NightingaleDPFLRunner.run(task:useCase:context:);
          uint64_t v53 = *(void *)(v128 + 3008);
          uint64_t v55 = v128 + 2304;
          return MEMORY[0x270F57130](v55, v51, v52, v53, v54);
        }
      }
      uint64_t v739 = *(void *)(v997 + 2992);
      uint64_t v740 = *(void *)(v997 + 2976);
      uint64_t v741 = *(void *)(v997 + 2880);
      id v742 = *(id *)(v997 + 2856);
      id v743 = *(id *)(v997 + 2832);
      uint64_t v744 = *(void *)(v997 + 2816);
      lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
      uint64_t v745 = swift_allocError();
      unsigned char *v129 = 34;
      swift_willThrow();
      outlined destroy of [A]();
      outlined destroy of [A]();
      swift_bridgeObjectRelease();
      swift_release();
      outlined destroy of [A]();
      swift_bridgeObjectRelease();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      swift_bridgeObjectRelease();

      swift_release();
      uint64_t v785 = v745;
LABEL_198:
      uint64_t v317 = *(void *)(v997 + 2784);
      uint64_t v318 = *(void *)(v997 + 2776);
      uint64_t v319 = *(void *)(v997 + 2752);
      uint64_t v320 = *(void *)(v997 + 2744);
      uint64_t v321 = *(void *)(v997 + 2720);
      uint64_t v322 = *(void *)(v997 + 2712);
      uint64_t v323 = *(void *)(v997 + 2704);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v312 = v777;
      v313 = *(uint64_t (**)(uint64_t))(*(void *)(v997 + 1688) + 8);
      return v313(v312);
    }
    uint64_t v730 = v997 + 1696;
    uint64_t v731 = v997 + 1640;
    uint64_t v732 = v997 + 1704;
    uint64_t v733 = v997 + 1712;
    uint64_t v734 = v997 + 1720;
    uint64_t v735 = v997 + 1728;
    uint64_t v736 = v997 + 1736;
    uint64_t v711 = v997 + 1752;
    uint64_t v737 = v997 + 1760;
    uint64_t v728 = v997 + 1768;
    uint64_t v713 = v997 + 3520;
    uint64_t v714 = v997 + 1896;
    uint64_t v715 = v997 + 1912;
    uint64_t v716 = v997 + 1952;
    uint64_t v717 = v997 + 1984;
    uint64_t v718 = v997 + 2024;
    uint64_t v719 = v997 + 2040;
    uint64_t v720 = v997 + 2056;
    uint64_t v721 = v997 + 2072;
    uint64_t v722 = v997 + 2088;
    uint64_t v723 = v997 + 2104;
    uint64_t v724 = v997 + 2120;
    uint64_t v725 = v997 + 2128;
    uint64_t v727 = *(void *)(v997 + 3072);
    uint64_t v726 = *(void *)(v997 + 3064);
    uint64_t v707 = *(void *)(v997 + 2680);
    uint64_t v705 = NightingaleDPFLRunner.performanceMeasure.getter();
    int v708 = 1;
    v704 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("UpdateSliceDeltaAnchor", 0x16uLL, 1)._object;
    dispatch thunk of PerformanceMeasure.finish(_:)();
    uint64_t v706 = v130;
    *(void *)(v997 + 3208) = v130;
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v729 = v997 + 2136;
    *(void *)(v997 + 2136) = v706;
    Swift::Int v131 = default argument 1 of NightingaleDPFLRunner.sendLocation(_:_:)();
    NightingaleDPFLRunner.sendLocation(_:_:)(NightingaleTraining_NightingaleDReachLocation_updateSliceDeltaAnchorCompleted, v131);
    uint64_t v710 = NightingaleDPFLRunner.performanceMeasure.getter();
    v709 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("QueryRequiredFeatures", 0x15uLL, v708 & 1)._object;
    dispatch thunk of PerformanceMeasure.start(_:)();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v712 = *(void *)(v997 + 2000);
    swift_bridgeObjectRetain();
    *(void *)(v997 + 2144) = v712;
    uint64_t result = Sequence.min(by:)();
    uint64_t v738 = v848;
    if (v848) {
      return result;
    }
    outlined destroy of [A]();
    if (*(void *)(v997 + 376))
    {
      uint64_t v699 = *(void *)(v997 + 376);
      uint64_t v698 = *(void *)(v997 + 384);
      uint64_t v700 = v997 + 352;
      __swift_project_boxed_opaque_existential_1((void *)(v997 + 352), v699);
      int v701 = (*(uint64_t (**)(uint64_t))(v698 + 56))(v699);
      __swift_destroy_boxed_opaque_existential_1(v997 + 352);
      int v702 = v701;
      int v703 = 0;
    }
    else
    {
      int v409 = 0;
      outlined destroy of Pregnancy?(v997 + 352);
      int v702 = 0;
      int v703 = 1;
    }
    char v132 = v703;
    int v697 = v702;
    *(_DWORD *)(v997 + 3648) = v702;
    if (v132) {
      goto LABEL_177;
    }
    uint64_t v133 = v997;
    uint64_t v134 = v738;
    uint64_t v695 = *(void *)(v997 + 3072);
    uint64_t v694 = *(void *)(v997 + 3064);
    uint64_t v693 = v997 + 3528;
    *(_DWORD *)(v997 + 3528) = v697;
    uint64_t v692 = *(void *)(v133 + 2000);
    swift_bridgeObjectRetain();
    *(void *)(v997 + 2152) = v692;
    uint64_t result = Sequence.max(by:)();
    uint64_t v696 = v134;
    if (v134) {
      return result;
    }
    outlined destroy of [A]();
    if (*(void *)(v997 + 416))
    {
      uint64_t v687 = *(void *)(v997 + 416);
      uint64_t v686 = *(void *)(v997 + 424);
      uint64_t v688 = v997 + 392;
      __swift_project_boxed_opaque_existential_1((void *)(v997 + 392), v687);
      int v689 = (*(uint64_t (**)(uint64_t))(v686 + 56))(v687);
      __swift_destroy_boxed_opaque_existential_1(v997 + 392);
      int v690 = v689;
      int v691 = 0;
    }
    else
    {
      int v410 = 0;
      outlined destroy of Pregnancy?(v997 + 392);
      int v690 = 0;
      int v691 = 1;
    }
    char v135 = v691;
    int v685 = v690;
    *(_DWORD *)(v997 + 3652) = v690;
    if (v135)
    {
LABEL_177:
      uint64_t v401 = *(void *)(v997 + 3048);
      uint64_t v402 = *(void *)(v997 + 2992);
      uint64_t v403 = *(void *)(v997 + 2976);
      uint64_t v404 = *(void *)(v997 + 2880);
      id v405 = *(id *)(v997 + 2856);
      id v406 = *(id *)(v997 + 2832);
      uint64_t v407 = *(void *)(v997 + 2816);
      lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
      uint64_t v408 = swift_allocError();
      unsigned char *v287 = 34;
      swift_willThrow();
      outlined destroy of [A]();
      outlined destroy of [A]();
      swift_bridgeObjectRelease();
      swift_release();
      outlined destroy of [A]();
      swift_bridgeObjectRelease();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      swift_bridgeObjectRelease();

      swift_release();
      uint64_t v785 = v408;
      goto LABEL_198;
    }
    uint64_t v136 = v997;
    int v137 = v697;
    uint64_t v682 = *(void *)(v997 + 2816);
    *(_DWORD *)(v997 + 3536) = v685;
    uint64_t v680 = v136 + 3524;
    *(_DWORD *)(v136 + 3524) = v137;
    unint64_t v678 = lazy protocol witness table accessor for type Int and conformance Int();
    unint64_t v679 = lazy protocol witness table accessor for type Int and conformance Int();
    unint64_t v681 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    SignedInteger<>.init<A>(_:)();
    uint64_t v683 = *(void *)(v997 + 2160);
    uint64_t v55 = HyperParams.minSliceAnchorDelta.getter();
    uint64_t v684 = v683 + v55;
    if (!__OFADD__(v683, v55))
    {
      *(_DWORD *)(v997 + 3532) = HyperParams.sliceSize.getter();
      uint64_t v55 = SignedInteger<>.init<A>(_:)();
      uint64_t v139 = *(void *)(v997 + 2168);
      uint64_t v677 = v684 - v139;
      if (!__OFSUB__(v684, v139))
      {
        uint64_t v676 = v677 + 1;
        if (!__OFADD__(v677, 1))
        {
          uint64_t v673 = *(void *)(v997 + 2816);
          uint64_t v668 = v997 + 2176;
          *(void *)(v997 + 2176) = v676;
          unint64_t v666 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
          unint64_t v667 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
          unint64_t v669 = lazy protocol witness table accessor for type Int and conformance Int();
          uint64_t v671 = MEMORY[0x263F8E8F8];
          uint64_t v670 = MEMORY[0x263F8D6C8];
          UnsignedInteger<>.init<A>(_:)();
          int v142 = v685;
          uint64_t v143 = v997;
          unsigned int v672 = *(_DWORD *)(v997 + 3516);
          *(_DWORD *)(v997 + 3656) = v672;
          *(_DWORD *)(v143 + 3556) = v142;
          SignedInteger<>.init<A>(_:)();
          uint64_t v674 = *(void *)(v997 + 2184);
          uint64_t v55 = HyperParams.maxSliceAnchorDelta.getter();
          uint64_t v675 = v674 + v55;
          if (!__OFADD__(v674, v55))
          {
            int v663 = *(_DWORD *)(v997 + 3632);
            *(void *)(v997 + 2192) = v675;
            uint64_t v664 = MEMORY[0x263F8E8F8];
            UnsignedInteger<>.init<A>(_:)();
            int v145 = v663;
            uint64_t v146 = v997;
            *(_DWORD *)(v997 + 3564) = *(_DWORD *)(v997 + 3548);
            *(_DWORD *)(v146 + 3572) = v145;
            min<A>(_:_:)();
            unsigned int v147 = v672;
            unsigned int v148 = *(_DWORD *)(v997 + 3540);
            unsigned int v665 = v148;
            *(_DWORD *)(v997 + 3660) = v148;
            if (v148 < v147) {
              goto LABEL_97;
            }
            uint64_t v149 = v997;
            unsigned int v150 = v665;
            uint64_t v662 = v997 + 1548;
            *(_DWORD *)(v997 + 1548) = v672;
            *(_DWORD *)(v149 + 1552) = v150;
            *(void *)(v997 + 2200) = _allocateUninitializedArray<A>(_:)();
            if (HyperParams.isHRVRequired()())
            {
              uint64_t v661 = v997 + 3677;
              *(unsigned char *)(v997 + 3677) = 8;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HealthDataRawSampleType]);
              Array.append(_:)();
            }
            if (HyperParams.isSpO2Required()())
            {
              uint64_t v660 = v997 + 3676;
              *(unsigned char *)(v997 + 3676) = 10;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HealthDataRawSampleType]);
              Array.append(_:)();
            }
            if (HyperParams.isRespiratoryRateRequired()())
            {
              uint64_t v659 = v997 + 3675;
              *(unsigned char *)(v997 + 3675) = 9;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HealthDataRawSampleType]);
              Array.append(_:)();
            }
            if (HyperParams.isSWTRequired()())
            {
              uint64_t v658 = v997 + 3674;
              *(unsigned char *)(v997 + 3674) = 7;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HealthDataRawSampleType]);
              Array.append(_:)();
            }
            uint64_t v656 = *(void *)(v997 + 2200);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            uint64_t v655 = v997 + 2208;
            *(void *)(v997 + 2208) = v656;
            uint64_t v654 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HealthDataRawSampleType]);
            lazy protocol witness table accessor for type [HealthDataRawSampleType] and conformance [A]();
            int v657 = Collection.isEmpty.getter();
            outlined destroy of [A]();
            swift_bridgeObjectRelease();
            if ((v657 & 1) == 0)
            {
              uint64_t v649 = *(void *)(v997 + 2816);
              uint64_t v650 = *(void *)(v997 + 2680);
              swift_retain();
              swift_retain();
              uint64_t v151 = swift_task_alloc();
              uint64_t v152 = v649;
              uint64_t v153 = v650;
              unsigned int v154 = v672;
              unsigned int v155 = v665;
              uint64_t v156 = v997;
              uint64_t v652 = v151;
              *(void *)(v997 + 3216) = v151;
              *(void *)(v151 + 16) = v152;
              *(void *)(v151 + 24) = v156 + 2200;
              *(void *)(v151 + 32) = v153;
              *(_DWORD *)(v151 + 40) = v154;
              *(_DWORD *)(v151 + 44) = v155;
              *(void *)(v151 + 48) = v156 + 1816;
              *(void *)(v151 + 56) = v156 + 1824;
              *(void *)(v151 + 64) = v156 + 1832;
              *(void *)(v151 + 72) = v156 + 1808;
              uint64_t v653 = MEMORY[0x263F8EE60] + 8;
              int v651 = default argument 1 of NightingaleDPFLRunner.sendLocationAsync<A>(location:force:work:)();
              uint64_t v157 = swift_task_alloc();
              uint64_t v158 = v997;
              char v159 = v651;
              v111 = v1022;
              uint64_t v112 = v652;
              uint64_t v113 = v653;
              v160 = (void *)v157;
              uint64_t v114 = v777;
              *(void *)(v997 + 3224) = v160;
              void *v160 = *(void *)(v158 + 1688);
              v160[1] = NightingaleDPFLRunner.run(task:useCase:context:);
              char v115 = 8;
              char v116 = v159 & 1;
              return NightingaleDPFLRunner.sendLocationAsync<A>(location:force:work:)(v114, v115, v116, v111, v112, v113);
            }
            uint64_t v623 = v997 + 1696;
            uint64_t v641 = v997 + 1640;
            uint64_t v642 = v997 + 1704;
            uint64_t v643 = v997 + 1712;
            uint64_t v644 = v997 + 1720;
            uint64_t v645 = v997 + 1728;
            uint64_t v646 = v997 + 1736;
            uint64_t v647 = v997 + 1744;
            uint64_t v640 = v997 + 1752;
            uint64_t v624 = v997 + 1888;
            uint64_t v625 = v997 + 3520;
            uint64_t v626 = v997 + 1896;
            uint64_t v627 = v997 + 1912;
            uint64_t v628 = v997 + 1952;
            uint64_t v629 = v997 + 1984;
            uint64_t v630 = v997 + 1992;
            uint64_t v622 = v997 + 2040;
            uint64_t v631 = v997 + 2056;
            uint64_t v632 = v997 + 2072;
            uint64_t v633 = v997 + 2088;
            uint64_t v634 = v997 + 2104;
            uint64_t v635 = v997 + 2120;
            uint64_t v636 = v997 + 2128;
            uint64_t v637 = v997 + 2136;
            uint64_t v638 = v997 + 3528;
            uint64_t v639 = v997 + 3536;
            uint64_t v648 = v997 + 1548;
            *(void *)(v997 + 2216) = 0;
            if (HyperParams.isSHRRequired()())
            {
              int v618 = *(_DWORD *)(v997 + 3660);
              int v617 = *(_DWORD *)(v997 + 3656);
              uint64_t v616 = *(void *)(v997 + 2816);
              uint64_t v615 = *(void *)(v997 + 2680);
              swift_retain();
              swift_retain();
              uint64_t v161 = swift_task_alloc();
              uint64_t v162 = v615;
              uint64_t v163 = v616;
              int v164 = v617;
              int v165 = v618;
              uint64_t v166 = v997;
              uint64_t v620 = v161;
              *(void *)(v997 + 3240) = v161;
              *(void *)(v161 + 16) = v162;
              *(void *)(v161 + 24) = v163;
              *(_DWORD *)(v161 + 32) = v164;
              *(_DWORD *)(v161 + 36) = v165;
              *(void *)(v161 + 40) = v166 + 1840;
              *(void *)(v161 + 48) = v166 + 1848;
              *(void *)(v161 + 56) = v166 + 2216;
              uint64_t v621 = MEMORY[0x263F8EE60] + 8;
              int v619 = default argument 1 of NightingaleDPFLRunner.sendLocationAsync<A>(location:force:work:)();
              uint64_t v167 = swift_task_alloc();
              uint64_t v168 = v997;
              char v169 = v619;
              v111 = v1021;
              uint64_t v112 = v620;
              uint64_t v113 = v621;
              v170 = (void *)v167;
              uint64_t v114 = v777;
              *(void *)(v997 + 3248) = v170;
              void *v170 = *(void *)(v168 + 1688);
              v170[1] = NightingaleDPFLRunner.run(task:useCase:context:);
              char v115 = 8;
              char v116 = v169 & 1;
              return NightingaleDPFLRunner.sendLocationAsync<A>(location:force:work:)(v114, v115, v116, v111, v112, v113);
            }
            uint64_t v589 = v997 + 1696;
            uint64_t v607 = v997 + 1640;
            uint64_t v608 = v997 + 1704;
            uint64_t v609 = v997 + 1712;
            uint64_t v610 = v997 + 1720;
            uint64_t v611 = v997 + 1728;
            uint64_t v612 = v997 + 1736;
            uint64_t v613 = v997 + 1744;
            uint64_t v606 = v997 + 1752;
            uint64_t v590 = v997 + 1888;
            uint64_t v591 = v997 + 3520;
            uint64_t v592 = v997 + 1896;
            uint64_t v593 = v997 + 1912;
            uint64_t v594 = v997 + 1952;
            uint64_t v595 = v997 + 1984;
            uint64_t v596 = v997 + 1992;
            uint64_t v588 = v997 + 2040;
            uint64_t v597 = v997 + 2056;
            uint64_t v598 = v997 + 2072;
            uint64_t v599 = v997 + 2088;
            uint64_t v600 = v997 + 2104;
            uint64_t v601 = v997 + 2120;
            uint64_t v602 = v997 + 2128;
            uint64_t v603 = v997 + 2136;
            uint64_t v604 = v997 + 3528;
            uint64_t v605 = v997 + 3536;
            uint64_t v614 = v997 + 1548;
            if (HyperParams.isCalendarAlgorithmRequired()())
            {
              int v581 = *(_DWORD *)(v997 + 3652);
              int v579 = *(_DWORD *)(v997 + 3648);
              uint64_t v584 = *(void *)(v997 + 2992);
              int v582 = *(_DWORD *)(v997 + 3632);
              uint64_t v580 = *(void *)(v997 + 2816);
              uint64_t v583 = *(void *)(v997 + 2680);
              swift_retain();
              swift_retain();
              swift_retain();
              uint64_t v171 = swift_task_alloc();
              int v172 = v579;
              uint64_t v173 = v580;
              int v174 = v581;
              int v175 = v582;
              uint64_t v176 = v583;
              uint64_t v177 = v584;
              uint64_t v178 = v997;
              uint64_t v586 = v171;
              *(void *)(v997 + 3264) = v171;
              *(_DWORD *)(v171 + 16) = v172;
              *(void *)(v171 + 24) = v173;
              *(_DWORD *)(v171 + 32) = v174;
              *(_DWORD *)(v171 + 36) = v175;
              *(void *)(v171 + 40) = v176;
              *(void *)(v171 + 48) = v178 + 1776;
              *(void *)(v171 + 56) = v178 + 1784;
              *(void *)(v171 + 64) = v178 + 1792;
              *(void *)(v171 + 72) = v178 + 1800;
              *(void *)(v171 + 80) = v177;
              *(void *)(v171 + 88) = v178 + 1856;
              *(void *)(v171 + 96) = v178 + 1864;
              uint64_t v587 = MEMORY[0x263F8EE60] + 8;
              int v585 = default argument 1 of NightingaleDPFLRunner.sendLocationAsync<A>(location:force:work:)();
              uint64_t v179 = swift_task_alloc();
              uint64_t v180 = v997;
              char v181 = v585;
              v111 = v1020;
              uint64_t v112 = v586;
              uint64_t v113 = v587;
              v182 = (void *)v179;
              uint64_t v114 = v777;
              *(void *)(v997 + 3272) = v182;
              void *v182 = *(void *)(v180 + 1688);
              v182[1] = NightingaleDPFLRunner.run(task:useCase:context:);
              char v115 = 8;
              char v116 = v181 & 1;
              return NightingaleDPFLRunner.sendLocationAsync<A>(location:force:work:)(v114, v115, v116, v111, v112, v113);
            }
            uint64_t v565 = v997 + 1696;
            uint64_t v566 = v997 + 1640;
            uint64_t v567 = v997 + 1704;
            uint64_t v568 = v997 + 1712;
            uint64_t v569 = v997 + 1720;
            uint64_t v570 = v997 + 1728;
            uint64_t v571 = v997 + 1736;
            uint64_t v572 = v997 + 1744;
            uint64_t v573 = v997 + 1752;
            uint64_t v574 = v997 + 1760;
            uint64_t v560 = v997 + 3608;
            uint64_t v544 = v997 + 1896;
            uint64_t v545 = v997 + 1912;
            uint64_t v546 = v997 + 1952;
            uint64_t v547 = v997 + 1984;
            uint64_t v548 = v997 + 1992;
            uint64_t v549 = v997 + 2024;
            uint64_t v550 = v997 + 2040;
            uint64_t v564 = v997 + 2056;
            uint64_t v551 = v997 + 2088;
            uint64_t v552 = v997 + 2104;
            uint64_t v553 = v997 + 2120;
            uint64_t v554 = v997 + 2128;
            uint64_t v555 = v997 + 2136;
            uint64_t v556 = v997 + 3528;
            uint64_t v557 = v997 + 3536;
            uint64_t v558 = v997 + 1548;
            int v563 = *(_DWORD *)(v997 + 3632);
            uint64_t v562 = *(void *)(v997 + 2816);
            uint64_t v543 = *(void *)(v997 + 2680);
            uint64_t v539 = NightingaleDPFLRunner.performanceMeasure.getter();
            int v576 = 1;
            v538 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("QueryRequiredFeatures", 0x15uLL, 1)._object;
            dispatch thunk of PerformanceMeasure.finish(_:)();
            uint64_t v540 = v183;
            swift_bridgeObjectRelease();
            swift_release();
            uint64_t v559 = v997 + 2224;
            *(void *)(v997 + 2224) = v540;
            Swift::Int v184 = default argument 1 of NightingaleDPFLRunner.sendLocation(_:_:)();
            NightingaleDPFLRunner.sendLocation(_:_:)(NightingaleTraining_NightingaleDReachLocation_queryRequiredFeaturesCompleted, v184);
            uint64_t v542 = NightingaleDPFLRunner.performanceMeasure.getter();
            v541 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Featurization", 0xDuLL, v576 & 1)._object;
            dispatch thunk of PerformanceMeasure.start(_:)();
            swift_bridgeObjectRelease();
            swift_release();
            type metadata accessor for Featurizer();
            uint64_t v185 = Featurizer.__allocating_init()();
            uint64_t v186 = v997;
            uint64_t v561 = v185;
            *(void *)(v997 + 3288) = v185;
            uint64_t v575 = v186 + 2232;
            *(void *)(v186 + 2232) = v185;
            swift_retain();
            swift_retain();
            uint64_t v577 = swift_task_alloc();
            *(void *)(v997 + 3296) = v577;
            *(void *)(v577 + 16) = v561;
            v187 = (void *)v577;
            *(void *)(v577 + 24) = v997 + 2000;
            v187[4] = v997 + 1808;
            v187[5] = v997 + 1816;
            v187[6] = v997 + 1832;
            v187[7] = v997 + 1824;
            v187[8] = v997 + 1840;
            v187[9] = v997 + 1848;
            v187[10] = v997 + 1856;
            v187[11] = v997 + 1864;
            v187[12] = v997 + 1800;
            *(void *)(v577 + 104) = v562;
            *(_DWORD *)(v577 + 112) = v563;
            uint64_t v188 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int]));
            NightingaleDPFLRunner.sendLocation<A>(location:force:work:)(10, v576 & 1, v577, v188, v997 + 16);
            uint64_t v578 = v696;
            if (v696)
            {
              uint64_t v340 = *(void *)(v997 + 3048);
              uint64_t v341 = *(void *)(v997 + 2992);
              uint64_t v342 = *(void *)(v997 + 2976);
              uint64_t v343 = *(void *)(v997 + 2880);
              id v344 = *(id *)(v997 + 2856);
              id v345 = *(id *)(v997 + 2832);
              uint64_t v346 = *(void *)(v997 + 2816);
              swift_task_dealloc();
              swift_release();
              swift_release();
              swift_release();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              swift_bridgeObjectRelease();
              swift_release();
              outlined destroy of [A]();
              swift_bridgeObjectRelease();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              swift_bridgeObjectRelease();

              swift_release();
              uint64_t v785 = v578;
              goto LABEL_198;
            }
            uint64_t v497 = *(void *)(v997 + 3208);
            uint64_t v495 = *(void *)(v997 + 3136);
            uint64_t v525 = *(void *)(v997 + 3128);
            uint64_t v522 = *(void *)(v997 + 3120);
            uint64_t v520 = *(void *)(v997 + 3112);
            uint64_t v518 = *(void *)(v997 + 3104);
            uint64_t v516 = *(void *)(v997 + 3096);
            uint64_t v514 = *(void *)(v997 + 3088);
            uint64_t v512 = *(void *)(v997 + 3080);
            uint64_t v510 = *(void *)(v997 + 3056);
            uint64_t v493 = *(void *)(v997 + 3032);
            uint64_t v491 = *(void *)(v997 + 2984);
            uint64_t v508 = *(void *)(v997 + 2968);
            uint64_t v506 = *(void *)(v997 + 2960);
            uint64_t v489 = *(void *)(v997 + 2864);
            uint64_t v504 = *(void *)(v997 + 2824);
            uint64_t v466 = *(void *)(v997 + 2816);
            swift_release();
            swift_release();
            v189 = (void *)v997;
            v190 = *(void **)(v997 + 16);
            v467 = v190;
            *(void *)(v997 + 3304) = v190;
            v191 = (void *)v189[3];
            v468 = v191;
            v189[414] = v191;
            v192 = (void *)v189[4];
            v469._rawValue = v192;
            v189[415] = v192;
            v193 = (void *)v189[5];
            v470._rawValue = v193;
            v189[416] = v193;
            v194 = (void *)v189[6];
            v471._rawValue = v194;
            v189[417] = v194;
            v195 = (void *)v189[7];
            v472._rawValue = v195;
            v189[418] = v195;
            v196 = (void *)v189[8];
            v473._rawValue = v196;
            v189[419] = v196;
            v197 = (void *)v189[9];
            v474._rawValue = v197;
            v189[420] = v197;
            v198 = (void *)v189[10];
            v475._rawValue = v198;
            v189[421] = v198;
            v199 = (void *)v189[11];
            v476._rawValue = v199;
            v189[422] = v199;
            v200 = (void *)v189[12];
            v477._rawValue = v200;
            v189[423] = v200;
            v201 = (void *)v189[13];
            v478._rawValue = v201;
            v189[424] = v201;
            v202 = (void *)v189[14];
            v479._rawValue = v202;
            v189[425] = v202;
            v203 = (void *)v189[15];
            v480._rawValue = v203;
            v189[426] = v203;
            v204 = (void *)v189[16];
            v481._rawValue = v204;
            v189[427] = v204;
            v205 = (void *)v189[17];
            v482._rawValue = v205;
            v189[428] = v205;
            v206 = (void *)v189[18];
            v483._rawValue = v206;
            v189[429] = v206;
            v207 = (void *)v189[19];
            v484._rawValue = v207;
            v189[430] = v207;
            uint64_t v208 = v189[20];
            uint64_t v485 = v208;
            v189[431] = v208;
            uint64_t v209 = v189[21];
            uint64_t v486 = v209;
            v189[432] = v209;
            uint64_t v210 = v189[22];
            uint64_t v529 = v210;
            v189[433] = v210;
            v530 = v189 + 23;
            v189[23] = v190;
            v189[24] = v191;
            v189[25] = v192;
            v189[26] = v193;
            v189[27] = v194;
            v189[28] = v195;
            v189[29] = v196;
            v189[30] = v197;
            v189[31] = v198;
            v189[32] = v199;
            v189[33] = v200;
            v189[34] = v201;
            v189[35] = v202;
            v189[36] = v203;
            v189[37] = v204;
            v189[38] = v205;
            v189[39] = v206;
            v189[40] = v207;
            v189[41] = v208;
            v189[42] = v209;
            v189[43] = v210;
            uint64_t v488 = NightingaleDPFLRunner.performanceMeasure.getter();
            v487 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Featurization", 0xDuLL, 1)._object;
            dispatch thunk of PerformanceMeasure.finish(_:)();
            uint64_t v501 = v211;
            swift_bridgeObjectRelease();
            swift_release();
            uint64_t v531 = v997 + 2240;
            *(void *)(v997 + 2240) = v501;
            uint64_t v526 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any));
            uint64_t v527 = _allocateUninitializedArray<A>(_:)();
            v524 = v212;
            v213 = NightingaleDPFLRunner.keyMetricsCycleTrackingCheckDurationS.unsafeMutableAddressor();
            outlined init with copy of String(v213, v524);
            uint64_t v214 = v489;
            v215 = v524;
            uint64_t v503 = MEMORY[0x263F8D538];
            v524[5] = MEMORY[0x263F8D538];
            v215[2] = v214;
            v490 = v215 + 6;
            v216 = NightingaleDPFLRunner.keyMetricsPregnanciesQueryDurationS.unsafeMutableAddressor();
            outlined init with copy of String(v216, v490);
            uint64_t v217 = v491;
            v218 = v524;
            v524[11] = v503;
            v218[8] = v217;
            v492 = v218 + 12;
            v219 = NightingaleDPFLRunner.keyMetricsUpdatingFeaturesQueryDurationS.unsafeMutableAddressor();
            outlined init with copy of String(v219, v492);
            uint64_t v220 = v493;
            v221 = v524;
            v524[17] = v503;
            v221[14] = v220;
            v494 = v221 + 18;
            v222 = NightingaleDPFLRunner.keyMetricsUpdatePregnanciesDurationS.unsafeMutableAddressor();
            outlined init with copy of String(v222, v494);
            uint64_t v223 = v495;
            v224 = v524;
            v524[23] = v503;
            v224[20] = v223;
            v496 = v224 + 24;
            v225 = NightingaleDPFLRunner.keyMetricsUpdateSliceDeltaAnchorDurationS.unsafeMutableAddressor();
            outlined init with copy of String(v225, v496);
            uint64_t v226 = v497;
            v227 = v524;
            v524[29] = v503;
            v227[26] = v226;
            v498 = v227 + 30;
            v228 = NightingaleDPFLRunner.keyMetricsSHRDurationS.unsafeMutableAddressor();
            outlined init with copy of String(v228, v498);
            v229 = v524;
            uint64_t v230 = *(void *)(v997 + 2216);
            v524[35] = v503;
            v229[32] = v230;
            v499 = v229 + 36;
            v231 = NightingaleDPFLRunner.keyMetricsRequiredFeaturesQueryDurationS.unsafeMutableAddressor();
            outlined init with copy of String(v231, v499);
            uint64_t v232 = v540;
            v233 = v524;
            v524[41] = v503;
            v233[38] = v232;
            v500 = v233 + 42;
            v234 = NightingaleDPFLRunner.keyMetricsFeaturizationDurationS.unsafeMutableAddressor();
            outlined init with copy of String(v234, v500);
            uint64_t v235 = v501;
            v236 = v524;
            v524[47] = v503;
            v236[44] = v235;
            v502 = v236 + 48;
            v237 = NightingaleDPFLRunner.keyMetricsIterationElapsedTime.unsafeMutableAddressor();
            outlined init with copy of String(v237, v502);
            uint64_t v238 = v504;
            v239 = v524;
            v524[53] = v503;
            v239[50] = v238;
            v505 = v239 + 54;
            v240 = NightingaleDPFLRunner.keyMetricsNumberOfAllPregnancies.unsafeMutableAddressor();
            outlined init with copy of String(v240, v505);
            uint64_t v241 = v506;
            v242 = v524;
            uint64_t v528 = MEMORY[0x263F8D6C8];
            v524[59] = MEMORY[0x263F8D6C8];
            v242[56] = v241;
            v507 = v242 + 60;
            v243 = NightingaleDPFLRunner.keyMetricsNumberOfPregnancyInitializerFailed.unsafeMutableAddressor();
            outlined init with copy of String(v243, v507);
            uint64_t v244 = v508;
            v245 = v524;
            v524[65] = v528;
            v245[62] = v244;
            v509 = v245 + 66;
            v246 = NightingaleDPFLRunner.keyMetricsOverlappingPregnanciesCount.unsafeMutableAddressor();
            outlined init with copy of String(v246, v509);
            uint64_t v247 = v510;
            v248 = v524;
            v524[71] = v528;
            v248[68] = v247;
            v511 = v248 + 72;
            v249 = NightingaleDPFLRunner.keyMetricsNumberOfValidPregnancies.unsafeMutableAddressor();
            outlined init with copy of String(v249, v511);
            uint64_t v250 = v512;
            v251 = v524;
            v524[77] = v528;
            v251[74] = v250;
            v513 = v251 + 78;
            v252 = NightingaleDPFLRunner.keyMetricsInvalidDurationPregnanciesCount.unsafeMutableAddressor();
            outlined init with copy of String(v252, v513);
            uint64_t v253 = v514;
            v254 = v524;
            v524[83] = v528;
            v254[80] = v253;
            v515 = v254 + 84;
            v255 = NightingaleDPFLRunner.keyMetricsInvalidLMPDeltaPregnanciesCount.unsafeMutableAddressor();
            outlined init with copy of String(v255, v515);
            uint64_t v256 = v516;
            v257 = v524;
            v524[89] = v528;
            v257[86] = v256;
            v517 = v257 + 90;
            v258 = NightingaleDPFLRunner.keyMetricsContainsFlowPregnanciesCount.unsafeMutableAddressor();
            outlined init with copy of String(v258, v517);
            uint64_t v259 = v518;
            v260 = v524;
            v524[95] = v528;
            v260[92] = v259;
            v519 = v260 + 96;
            v261 = NightingaleDPFLRunner.keyMetricsInvalidLMPPregnanciesCount.unsafeMutableAddressor();
            outlined init with copy of String(v261, v519);
            uint64_t v262 = v520;
            v263 = v524;
            v524[101] = v528;
            v263[98] = v262;
            v521 = v263 + 102;
            v264 = NightingaleDPFLRunner.keyMetricsInvalidEndPregnanciesCount.unsafeMutableAddressor();
            outlined init with copy of String(v264, v521);
            uint64_t v265 = v522;
            v266 = v524;
            v524[107] = v528;
            v266[104] = v265;
            v523 = v266 + 108;
            v267 = NightingaleDPFLRunner.keyMetricsInvalidStartSourcePregnanciesCount.unsafeMutableAddressor();
            outlined init with copy of String(v267, v523);
            v268 = v524;
            uint64_t v269 = v525;
            v524[113] = v528;
            v268[110] = v269;
            _finalizeUninitializedArray<A>(_:)();
            uint64_t v533 = MEMORY[0x263F8D310];
            uint64_t v534 = MEMORY[0x263F8EE58] + 8;
            uint64_t v535 = MEMORY[0x263F8D320];
            uint64_t v532 = Dictionary.init(dictionaryLiteral:)();
            outlined retain of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])((uint64_t)v530);
            _dictionaryUpCast<A, B, C, D>(_:)();
            uint64_t v536 = Dictionary.merging(_:uniquingKeysWith:)();
            *(void *)(v997 + 3472) = v536;
            uint64_t v537 = 0;
            uint64_t v464 = *(void *)(v997 + 3144);
            int v463 = *(unsigned __int8 *)(v997 + 3693);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            char v270 = v463;
            uint64_t v271 = v997;
            uint64_t v465 = v997 + 2248;
            *(void *)(v997 + 2248) = v536;
            *(unsigned char *)(v271 + 3668) = v270;
            *(unsigned char *)(v271 + 3669) = 0;
            if (== infix<A>(_:_:)())
            {
              uint64_t v272 = v537;
              int v458 = *(_DWORD *)(v997 + 3632);
              uint64_t v454 = *(void *)(v997 + 2880);
              uint64_t v459 = *(void *)(v997 + 2872);
              uint64_t v455 = *(void *)(v997 + 2816);
              uint64_t v456 = *(void *)(v997 + 1864);
              swift_bridgeObjectRetain();
              uint64_t v457 = *(void *)(v997 + 1904);
              swift_bridgeObjectRetain();
              uint64_t v453 = v997 + 184;
              outlined retain of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])(v997 + 184);
              v460 = &v314;
              uint64_t v461 = NightingaleDPFLRunner.runTraining(modelPath:hyperParams:historicalPeriods:pregnancies:today:features:existingMetrics:)(v459, v454, v455, v456, v457, v458, v467, v468, v469._rawValue, v470._rawValue, v471._rawValue, v472._rawValue, v473._rawValue, v474._rawValue, v475._rawValue, v476._rawValue, v477._rawValue, v478._rawValue, v479._rawValue,
                       v480._rawValue,
                       v481._rawValue,
                       v482._rawValue,
                       v483._rawValue,
                       v484._rawValue,
                       v485,
                       v486,
                       v529,
                       v536);
              uint64_t v462 = v272;
              if (v272)
              {
                uint64_t v332 = *(void *)(v997 + 3048);
                uint64_t v333 = *(void *)(v997 + 2992);
                uint64_t v334 = *(void *)(v997 + 2976);
                uint64_t v335 = *(void *)(v997 + 2880);
                id v336 = *(id *)(v997 + 2856);
                id v337 = *(id *)(v997 + 2832);
                uint64_t v338 = *(void *)(v997 + 2816);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v339 = v997 + 184;
                outlined release of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])(v997 + 184);
                swift_release();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                swift_bridgeObjectRelease();
                swift_release();
                outlined destroy of [A]();
                swift_bridgeObjectRelease();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                swift_bridgeObjectRelease();

                swift_release();
                swift_task_dealloc();
                uint64_t v785 = v462;
                goto LABEL_198;
              }
              uint64_t v444 = *(void *)(v997 + 3048);
              uint64_t v445 = *(void *)(v997 + 2992);
              uint64_t v446 = *(void *)(v997 + 2976);
              uint64_t v447 = *(void *)(v997 + 2880);
              id v448 = *(id *)(v997 + 2856);
              id v449 = *(id *)(v997 + 2832);
              uint64_t v450 = *(void *)(v997 + 2816);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v451 = v997 + 184;
              outlined release of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])(v997 + 184);
              swift_release();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              swift_bridgeObjectRelease();
              swift_release();
              outlined destroy of [A]();
              swift_bridgeObjectRelease();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              swift_bridgeObjectRelease();

              swift_release();
              swift_task_dealloc();
              uint64_t v452 = v461;
            }
            else
            {
              uint64_t v273 = v997;
              *(unsigned char *)(v997 + 3670) = *(unsigned char *)(v997 + 3693);
              *(unsigned char *)(v273 + 3671) = 1;
              if ((== infix<A>(_:_:)() & 1) == 0)
              {
                uint64_t v276 = v997;
                *(unsigned char *)(v997 + 3672) = *(unsigned char *)(v997 + 3693);
                *(unsigned char *)(v276 + 3673) = 2;
                if ((== infix<A>(_:_:)() & 1) == 0)
                {
                  uint64_t v411 = *(void *)(v997 + 3048);
                  uint64_t v412 = *(void *)(v997 + 2992);
                  uint64_t v413 = *(void *)(v997 + 2976);
                  uint64_t v414 = *(void *)(v997 + 2880);
                  id v415 = *(id *)(v997 + 2856);
                  id v416 = *(id *)(v997 + 2832);
                  uint64_t v417 = *(void *)(v997 + 2816);
                  lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
                  uint64_t v419 = swift_allocError();
                  unsigned char *v286 = 48;
                  swift_willThrow();
                  swift_bridgeObjectRelease();
                  uint64_t v418 = v997 + 184;
                  outlined release of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])(v997 + 184);
                  swift_release();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  swift_bridgeObjectRelease();
                  swift_release();
                  outlined destroy of [A]();
                  swift_bridgeObjectRelease();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  swift_bridgeObjectRelease();

                  swift_release();
                  swift_task_dealloc();
                  uint64_t v785 = v419;
                  goto LABEL_198;
                }
                uint64_t v423 = *(void *)(v997 + 2992);
                int v422 = *(_DWORD *)(v997 + 3636);
                uint64_t v420 = *(void *)(v997 + 2816);
                uint64_t v421 = *(void *)(v997 + 2680);
                swift_retain();
                swift_retain();
                swift_retain();
                uint64_t v277 = swift_task_alloc();
                uint64_t v278 = v420;
                uint64_t v279 = v421;
                int v280 = v422;
                uint64_t v281 = v423;
                uint64_t v282 = v997;
                uint64_t v424 = v277;
                *(void *)(v997 + 3480) = v277;
                *(void *)(v277 + 16) = v278;
                *(void *)(v277 + 24) = v282 + 1904;
                *(void *)(v277 + 32) = v279;
                *(_DWORD *)(v277 + 40) = v280;
                *(void *)(v277 + 48) = v282 + 1776;
                *(void *)(v277 + 56) = v282 + 1784;
                *(void *)(v277 + 64) = v282 + 1792;
                *(void *)(v277 + 72) = v282 + 1800;
                *(void *)(v277 + 80) = v282 + 1864;
                *(void *)(v277 + 88) = v281;
                v283 = (void *)swift_task_alloc();
                *(void *)(v997 + 3488) = v283;
                uint64_t v284 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt32, UInt32));
                uint64_t v285 = v997;
                v111 = v1019;
                uint64_t v112 = v424;
                uint64_t v113 = v284;
                void *v283 = *(void *)(v997 + 1688);
                v283[1] = NightingaleDPFLRunner.run(task:useCase:context:);
                uint64_t v114 = v285 + 1556;
                char v115 = 9;
                char v116 = 1;
                return NightingaleDPFLRunner.sendLocationAsync<A>(location:force:work:)(v114, v115, v116, v111, v112, v113);
              }
              uint64_t v442 = PFLTask.evalModelNames(taskType:hyperParams:)();
              uint64_t v443 = v537;
              if (v537)
              {
                uint64_t v324 = *(void *)(v997 + 3048);
                uint64_t v325 = *(void *)(v997 + 2992);
                uint64_t v326 = *(void *)(v997 + 2976);
                uint64_t v327 = *(void *)(v997 + 2880);
                id v328 = *(id *)(v997 + 2856);
                id v329 = *(id *)(v997 + 2832);
                uint64_t v330 = *(void *)(v997 + 2816);
                swift_bridgeObjectRelease();
                uint64_t v331 = v997 + 184;
                outlined release of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])(v997 + 184);
                swift_release();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                swift_bridgeObjectRelease();
                swift_release();
                outlined destroy of [A]();
                swift_bridgeObjectRelease();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                swift_bridgeObjectRelease();

                swift_release();
                swift_task_dealloc();
                uint64_t v785 = v443;
                goto LABEL_198;
              }
              int v438 = *(_DWORD *)(v997 + 3632);
              uint64_t v435 = *(void *)(v997 + 2816);
              uint64_t v434 = *(void *)(v997 + 2672);
              uint64_t v436 = *(void *)(v997 + 1864);
              swift_bridgeObjectRetain();
              uint64_t v437 = *(void *)(v997 + 1904);
              swift_bridgeObjectRetain();
              uint64_t v433 = v997 + 184;
              outlined retain of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])(v997 + 184);
              v274._rawValue = v467;
              v275._rawValue = v468;
              v439 = &v314;
              uint64_t v440 = NightingaleDPFLRunner.runEvals(evalModels:task:hyperParams:historicalPeriods:pregnancies:today:features:existingMetrics:)(v442, v434, v435, v436, v437, v438, v274, v275, v469, v470, v471, v472, v473, v474, v475, v476, v477, v478, v479,
                       v480,
                       v481,
                       v482,
                       v483,
                       v484,
                       v485,
                       v486,
                       v529,
                       v536);
              uint64_t v441 = 0;
              uint64_t v425 = *(void *)(v997 + 3048);
              uint64_t v426 = *(void *)(v997 + 2992);
              uint64_t v427 = *(void *)(v997 + 2976);
              uint64_t v428 = *(void *)(v997 + 2880);
              id v429 = *(id *)(v997 + 2856);
              id v430 = *(id *)(v997 + 2832);
              uint64_t v431 = *(void *)(v997 + 2816);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v432 = v997 + 184;
              outlined release of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])(v997 + 184);
              swift_release();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              swift_bridgeObjectRelease();
              swift_release();
              outlined destroy of [A]();
              swift_bridgeObjectRelease();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              swift_bridgeObjectRelease();

              swift_release();
              swift_task_dealloc();
              uint64_t v452 = v440;
            }
LABEL_182:
            uint64_t v360 = v452;
            uint64_t v353 = *(void *)(v997 + 2784);
            uint64_t v354 = *(void *)(v997 + 2776);
            uint64_t v355 = *(void *)(v997 + 2752);
            uint64_t v356 = *(void *)(v997 + 2744);
            uint64_t v357 = *(void *)(v997 + 2720);
            uint64_t v358 = *(void *)(v997 + 2712);
            uint64_t v359 = *(void *)(v997 + 2704);
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            uint64_t v312 = v360;
            v313 = *(uint64_t (**)(uint64_t))(*(void *)(v997 + 1688) + 8);
            return v313(v312);
          }
LABEL_206:
          __break(1u);
          goto LABEL_207;
        }
LABEL_205:
        __break(1u);
        goto LABEL_206;
      }
LABEL_204:
      __break(1u);
      goto LABEL_205;
    }
LABEL_203:
    __break(1u);
    goto LABEL_204;
  }
  uint64_t v86 = v848;
  uint64_t v833 = NightingaleDPFLRunner.performanceMeasure.getter();
  v832 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("QueryRequiredFeatures", 0x15uLL, 1)._object;
  dispatch thunk of PerformanceMeasure.start(_:)();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v834 = *(void *)(v997 + 2000);
  swift_bridgeObjectRetain();
  *(void *)(v997 + 2424) = v834;
  uint64_t result = Sequence.min(by:)();
  uint64_t v835 = v86;
  if (!v86)
  {
    outlined destroy of [A]();
    if (*(void *)(v997 + 776))
    {
      uint64_t v827 = *(void *)(v997 + 776);
      uint64_t v826 = *(void *)(v997 + 784);
      uint64_t v828 = v997 + 752;
      __swift_project_boxed_opaque_existential_1((void *)(v997 + 752), v827);
      int v829 = (*(uint64_t (**)(uint64_t))(v826 + 56))(v827);
      __swift_destroy_boxed_opaque_existential_1(v997 + 752);
      int v830 = v829;
      int v831 = 0;
    }
    else
    {
      int v786 = 0;
      outlined destroy of Pregnancy?(v997 + 752);
      int v830 = 0;
      int v831 = 1;
    }
    int v825 = v830;
    if ((v831 & 1) == 0)
    {
      uint64_t v87 = v997;
      uint64_t v824 = v997 + 3592;
      *(_DWORD *)(v997 + 3592) = v825;
      uint64_t v823 = *(void *)(v87 + 2000);
      swift_bridgeObjectRetain();
      *(void *)(v997 + 2432) = v823;
      Sequence.max(by:)();
      outlined destroy of [A]();
      if (*(void *)(v997 + 816))
      {
        uint64_t v818 = *(void *)(v997 + 816);
        uint64_t v817 = *(void *)(v997 + 824);
        uint64_t v819 = v997 + 792;
        __swift_project_boxed_opaque_existential_1((void *)(v997 + 792), v818);
        int v820 = (*(uint64_t (**)(uint64_t))(v817 + 56))(v818);
        __swift_destroy_boxed_opaque_existential_1(v997 + 792);
        int v821 = v820;
        int v822 = 0;
      }
      else
      {
        int v787 = 0;
        outlined destroy of Pregnancy?(v997 + 792);
        int v821 = 0;
        int v822 = 1;
      }
      int v816 = v821;
      if ((v822 & 1) == 0)
      {
        uint64_t v88 = v997;
        int v89 = v825;
        uint64_t v813 = *(void *)(v997 + 2816);
        *(_DWORD *)(v997 + 3600) = v816;
        uint64_t v811 = v88 + 3588;
        *(_DWORD *)(v88 + 3588) = v89;
        unint64_t v809 = lazy protocol witness table accessor for type Int and conformance Int();
        unint64_t v810 = lazy protocol witness table accessor for type Int and conformance Int();
        unint64_t v812 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        *(void *)(v997 + 3152) = v812;
        SignedInteger<>.init<A>(_:)();
        uint64_t v814 = *(void *)(v997 + 2440);
        uint64_t v55 = HyperParams.minSliceAnchorDelta.getter();
        uint64_t v815 = v814 + v55;
        if (!__OFADD__(v814, v55))
        {
          *(_DWORD *)(v997 + 3596) = HyperParams.sliceSize.getter();
          uint64_t v55 = SignedInteger<>.init<A>(_:)();
          uint64_t v91 = *(void *)(v997 + 2448);
          uint64_t v808 = v815 - v91;
          if (!__OFSUB__(v815, v91))
          {
            uint64_t v807 = v808 + 1;
            if (!__OFADD__(v808, 1))
            {
              uint64_t v804 = *(void *)(v997 + 2816);
              uint64_t v799 = v997 + 2456;
              *(void *)(v997 + 2456) = v807;
              unint64_t v797 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
              unint64_t v798 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
              unint64_t v800 = lazy protocol witness table accessor for type Int and conformance Int();
              uint64_t v802 = MEMORY[0x263F8E8F8];
              uint64_t v801 = MEMORY[0x263F8D6C8];
              UnsignedInteger<>.init<A>(_:)();
              int v94 = v816;
              uint64_t v95 = v997;
              unsigned int v803 = *(_DWORD *)(v997 + 3580);
              *(_DWORD *)(v997 + 3640) = v803;
              *(_DWORD *)(v95 + 3616) = v94;
              SignedInteger<>.init<A>(_:)();
              uint64_t v805 = *(void *)(v997 + 2464);
              uint64_t v55 = HyperParams.maxSliceAnchorDelta.getter();
              uint64_t v806 = v805 + v55;
              if (!__OFADD__(v805, v55))
              {
                int v794 = *(_DWORD *)(v997 + 3632);
                *(void *)(v997 + 2472) = v806;
                uint64_t v795 = MEMORY[0x263F8E8F8];
                UnsignedInteger<>.init<A>(_:)();
                int v97 = v794;
                uint64_t v98 = v997;
                *(_DWORD *)(v997 + 3620) = *(_DWORD *)(v997 + 3612);
                *(_DWORD *)(v98 + 3624) = v97;
                min<A>(_:_:)();
                unsigned int v99 = v803;
                unsigned int v100 = *(_DWORD *)(v997 + 3604);
                unsigned int v796 = v100;
                *(_DWORD *)(v997 + 3644) = v100;
                if (v100 < v99)
                {
LABEL_97:
                  LOBYTE(v314) = 2;
                  uint64_t v315 = 347;
                  LODWORD(v316) = 0;
                  return _assertionFailure(_:_:file:line:flags:)();
                }
                uint64_t v101 = v997;
                unsigned int v102 = v796;
                uint64_t v790 = *(void *)(v997 + 3008);
                uint64_t v788 = *(void *)(v997 + 2816);
                uint64_t v789 = *(void *)(v997 + 2680);
                uint64_t v791 = v997 + 1572;
                *(_DWORD *)(v997 + 1572) = v803;
                *(_DWORD *)(v101 + 1576) = v102;
                swift_retain();
                swift_retain();
                uint64_t v103 = swift_task_alloc();
                uint64_t v104 = v788;
                uint64_t v105 = v789;
                unsigned int v106 = v803;
                unsigned int v107 = v796;
                uint64_t v793 = v103;
                *(void *)(v997 + 3160) = v103;
                *(void *)(v103 + 16) = v104;
                *(void *)(v103 + 24) = v105;
                *(_DWORD *)(v103 + 32) = v106;
                *(_DWORD *)(v103 + 36) = v107;
                int v792 = default argument 1 of NightingaleDPFLRunner.sendLocationAsync<A>(location:force:work:)();
                v108 = (void *)swift_task_alloc();
                uint64_t v109 = v997;
                char v110 = v792;
                v111 = v1028;
                uint64_t v112 = v793;
                *(void *)(v997 + 3168) = v108;
                void *v108 = *(void *)(v109 + 1688);
                v108[1] = NightingaleDPFLRunner.run(task:useCase:context:);
                uint64_t v113 = *(void *)(v109 + 3008);
                uint64_t v114 = v109 + 2480;
                char v115 = 8;
                char v116 = v110 & 1;
                return NightingaleDPFLRunner.sendLocationAsync<A>(location:force:work:)(v114, v115, v116, v111, v112, v113);
              }
              goto LABEL_210;
            }
LABEL_209:
            __break(1u);
LABEL_210:
            __break(1u);
            return MEMORY[0x270F57130](v55, v51, v52, v53, v54);
          }
LABEL_208:
          __break(1u);
          goto LABEL_209;
        }
LABEL_207:
        __break(1u);
        goto LABEL_208;
      }
    }
    uint64_t v778 = *(void *)(v997 + 2992);
    uint64_t v779 = *(void *)(v997 + 2976);
    uint64_t v780 = *(void *)(v997 + 2880);
    id v781 = *(id *)(v997 + 2856);
    id v782 = *(id *)(v997 + 2832);
    uint64_t v783 = *(void *)(v997 + 2816);
    lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
    uint64_t v784 = swift_allocError();
    unsigned char *v117 = 34;
    swift_willThrow();
    outlined destroy of [A]();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    swift_release();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();

    swift_release();
    uint64_t v785 = v784;
    goto LABEL_198;
  }
  return result;
}

{
  uint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  void *v41;
  uint64_t v42;
  Swift::OpaquePointer v43;
  Swift::OpaquePointer v44;
  Swift::OpaquePointer v45;
  Swift::OpaquePointer v46;
  Swift::OpaquePointer v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  Swift::Int v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  int v63;
  uint64_t v65;
  int v68;
  uint64_t v69;
  int v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  int *v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  char v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  void *v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  int v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  void *v114;
  uint64_t v115;
  Swift::Int v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  void *v125;
  void *v126;
  void *v127;
  void *v128;
  void *v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  void *v136;
  void *v137;
  void *v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  long long *v145;
  uint64_t v146;
  void *v147;
  long long *Duration;
  uint64_t v149;
  void *v150;
  long long *v151;
  uint64_t v152;
  void *v153;
  long long *updated;
  uint64_t v155;
  void *v156;
  long long *v157;
  uint64_t v158;
  void *v159;
  long long *v160;
  void *v161;
  uint64_t v162;
  long long *v163;
  uint64_t v164;
  void *v165;
  long long *v166;
  uint64_t v167;
  void *v168;
  long long *v169;
  uint64_t v170;
  void *v171;
  long long *v172;
  uint64_t v173;
  void *v174;
  long long *v175;
  uint64_t v176;
  void *v177;
  long long *v178;
  uint64_t v179;
  void *v180;
  long long *v181;
  uint64_t v182;
  void *v183;
  long long *v184;
  uint64_t v185;
  void *v186;
  long long *v187;
  uint64_t v188;
  void *v189;
  long long *v190;
  uint64_t v191;
  void *v192;
  long long *v193;
  uint64_t v194;
  void *v195;
  long long *v196;
  uint64_t v197;
  void *v198;
  long long *started;
  void *v200;
  uint64_t v201;
  char v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  Swift::OpaquePointer v206;
  Swift::OpaquePointer v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  int v212;
  uint64_t v213;
  uint64_t v214;
  void *v215;
  uint64_t v216;
  uint64_t v217;
  unsigned char *v218;
  unsigned char *v219;
  uint64_t v220;
  uint64_t (*v221)(uint64_t);
  id v222;
  id v223;
  uint64_t v224;
  id v225;
  char v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  id v241;
  id v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  id v249;
  id v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  id v257;
  id v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  id v307;
  id v308;
  uint64_t v309;
  uint64_t v310;
  int v311;
  int v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  id v317;
  id v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  int v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  id v332;
  id v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  int v341;
  uint64_t *v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  id v351;
  id v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  int v361;
  uint64_t v362;
  uint64_t *v363;
  uint64_t v364;
  uint64_t v365;
  int v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  void *v370;
  void *v371;
  Swift::OpaquePointer v372;
  Swift::OpaquePointer v373;
  Swift::OpaquePointer v374;
  Swift::OpaquePointer v375;
  Swift::OpaquePointer v376;
  Swift::OpaquePointer v377;
  Swift::OpaquePointer v378;
  Swift::OpaquePointer v379;
  Swift::OpaquePointer v380;
  Swift::OpaquePointer v381;
  Swift::OpaquePointer v382;
  Swift::OpaquePointer v383;
  Swift::OpaquePointer v384;
  Swift::OpaquePointer v385;
  Swift::OpaquePointer v386;
  Swift::OpaquePointer v387;
  uint64_t v388;
  uint64_t v389;
  void *v390;
  uint64_t v391;
  uint64_t v392;
  void *v393;
  uint64_t v394;
  void *v395;
  uint64_t v396;
  void *v397;
  uint64_t v398;
  void *v399;
  uint64_t v400;
  void *v401;
  void *v402;
  void *v403;
  uint64_t v404;
  void *v405;
  uint64_t v406;
  uint64_t v407;
  void *v408;
  uint64_t v409;
  void *v410;
  uint64_t v411;
  void *v412;
  uint64_t v413;
  void *v414;
  uint64_t v415;
  void *v416;
  uint64_t v417;
  void *v418;
  uint64_t v419;
  void *v420;
  uint64_t v421;
  void *v422;
  uint64_t v423;
  void *v424;
  uint64_t v425;
  void *v426;
  void *v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  void *v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  void *v441;
  uint64_t v442;
  uint64_t v443;
  void *v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  int v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  int v479;
  uint64_t v480;
  uint64_t v481;
  int v482;
  uint64_t v483;
  int v484;
  int v485;
  uint64_t v486;
  uint64_t v487;
  int v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  int v520;
  int v521;
  int v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  int v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  int v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  int v567;
  uint64_t v568;
  unsigned int v569;
  unint64_t v570;
  unint64_t v571;
  uint64_t v572;
  unint64_t v573;
  uint64_t v574;
  uint64_t v575;
  unsigned int v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  unint64_t v582;
  unint64_t v583;
  uint64_t v584;
  unint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  int v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  int v593;
  int v594;
  int v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  int v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  int v605;
  int v606;
  int v607;
  void *object;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  int v612;
  void *v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  void (*v654)(void);
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  void *v658;
  void *v659;
  void *v660;
  void *v661;
  void *v662;
  uint64_t v663;
  unsigned int v664;
  id v665;
  id v666;
  uint64_t v667;
  id i;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  void *v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  void (*v679)(uint64_t, uint64_t);
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  void *v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  void (*v691)(uint64_t, uint64_t);
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  void *v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  void (*v700)(uint64_t, uint64_t);
  uint64_t v701;
  uint64_t v702;
  void *v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  void (*v708)(uint64_t, uint64_t);
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  void *v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  void (*v718)(uint64_t, uint64_t);
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  void (*v722)(unsigned char *@<X1>, unsigned char *@<X8>);
  void (*v723)(unsigned char *@<X1>, unsigned char *@<X8>);
  void (*v724)(unsigned char *@<X1>, unsigned char *@<X8>);
  uint64_t (*v725)@<X0>(uint64_t *@<X1>, void *@<X8>);
  float (*v726)@<S0>(uint64_t@<X1>, uint64_t@<X8>);
  const char *v727;
  const char *v728;
  const char *v729;
  uint64_t (*v730)();
  uint64_t (*v731)(void *);
  BOOL (*v732)(void *, void *);
  BOOL (*v733)(void *, void *);
  const char *v734;
  uint64_t (*v735)@<X0>(void *@<X8>);
  uint64_t (*v736)@<X0>(uint64_t@<X1>, uint64_t@<X8>);
  int *v737;
  int *v738;
  int *v739;
  int *v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  unint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  char v754;
  uint64_t v755;
  uint64_t v756;

  uint64_t v755 = v1;
  MEMORY[0x270FA5388](a1);
  uint64_t v721 = v1;
  uint64_t v722 = closure #4 in NightingaleDPFLRunner.run(task:useCase:context:);
  uint64_t v723 = closure #4 in NightingaleDPFLRunner.run(task:useCase:context:);
  uint64_t v724 = closure #6 in NightingaleDPFLRunner.run(task:useCase:context:);
  uint64_t v725 = closure #7 in NightingaleDPFLRunner.run(task:useCase:context:);
  uint64_t v726 = closure #19 in NightingaleDPFLRunner.run(task:useCase:context:);
  uint64_t v727 = "Fatal error";
  uint64_t v728 = "Range requires lowerBound <= upperBound";
  uint64_t v729 = "Swift/Range.swift";
  uint64_t v730 = partial apply for closure #28 in NightingaleDPFLRunner.run(task:useCase:context:);
  uint64_t v731 = partial apply for closure #29 in NightingaleDPFLRunner.run(task:useCase:context:);
  uint64_t v732 = closure #16 in NightingaleDPFLRunner.run(task:useCase:context:);
  uint64_t v733 = closure #16 in NightingaleDPFLRunner.run(task:useCase:context:);
  uint64_t v734 = "Swift/ClosedRange.swift";
  uint64_t v735 = partial apply for closure #35 in NightingaleDPFLRunner.run(task:useCase:context:);
  uint64_t v736 = closure #36 in NightingaleDPFLRunner.run(task:useCase:context:);
  uint64_t v737 = (int *)&async function pointer to partial apply for closure #37 in NightingaleDPFLRunner.run(task:useCase:context:);
  uint64_t v738 = (int *)&async function pointer to partial apply for closure #34 in NightingaleDPFLRunner.run(task:useCase:context:);
  uint64_t v739 = (int *)&async function pointer to partial apply for closure #33 in NightingaleDPFLRunner.run(task:useCase:context:);
  uint64_t v740 = (int *)&async function pointer to partial apply for closure #32 in NightingaleDPFLRunner.run(task:useCase:context:);
  *(void *)(v1 + 1688) = v1;
  uint64_t v741 = *(void *)(v1 + 2304);
  uint64_t v745 = v1 + 2328;
  *(void *)(v1 + 2328) = v741;
  id v743 = v1 + 3678;
  *(unsigned char *)(v1 + 3678) = 0;
  id v742 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HealthDataQueryResult);
  uint64_t v744 = lazy protocol witness table accessor for type HealthDataRawSampleType and conformance HealthDataRawSampleType();
  MEMORY[0x25A2C04B0](v743, v741, &type metadata for HealthDataRawSampleType, v742);
  if (*(void *)(v1 + 536))
  {
    uint64_t v719 = *(void *)(v721 + 536);
    uint64_t v716 = *(void *)(v721 + 544);
    uint64_t v720 = v721 + 512;
    __swift_project_boxed_opaque_existential_1((void *)(v721 + 512), v719);
    uint64_t v718 = *(void (**)(uint64_t, uint64_t))(v716 + 16);
    uint64_t v717 = v716 + 16;
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v3 = v721;
    *(void *)(v721 + 1128) = AssociatedTypeWitness;
    __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v3 + 1104));
    v718(v719, v716);
    __swift_destroy_boxed_opaque_existential_1(v720);
  }
  else
  {
    outlined destroy of Pregnancy?(v721 + 512);
    __n128 v54 = (void *)v721;
    *(void *)(v721 + 1104) = 0;
    v54[139] = 0;
    v54[140] = 0;
    v54[141] = 0;
  }
  if (*(void *)(v721 + 1128))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : UInt8]);
    if (swift_dynamicCast()) {
      uint64_t v715 = *(void *)(v721 + 2416);
    }
    else {
      uint64_t v715 = 0;
    }
    uint64_t v714 = v715;
  }
  else
  {
    uint64_t v644 = 0;
    outlined destroy of Pregnancy?(v721 + 1104);
    uint64_t v714 = 0;
  }
  uint64_t v4 = v721;
  *(void *)(v721 + 2336) = v714;
  if (*(void *)(v4 + 2336))
  {
    int v746 = *(void *)(v721 + 2336);
  }
  else
  {
    _allocateUninitializedArray<A>(_:)();
    int v746 = Dictionary.init(dictionaryLiteral:)();
    outlined destroy of [A]();
  }
  uint64_t v5 = *(void **)(v721 + 3200);
  uint64_t v711 = v746;
  uint64_t v712 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : UInt8]);
  uint64_t result = Dictionary.merge(_:uniquingKeysWith:)();
  uint64_t v713 = v5;
  if (!v5)
  {
    unint64_t v7 = v744;
    uint64_t v8 = v742;
    uint64_t v9 = v741;
    uint64_t v10 = v721 + 3679;
    *(unsigned char *)(v721 + 3679) = 2;
    MEMORY[0x25A2C04B0](v10, v9, &type metadata for HealthDataRawSampleType, v8, v7);
    if (*(void *)(v721 + 576))
    {
      v709 = *(void *)(v721 + 576);
      uint64_t v706 = *(void *)(v721 + 584);
      uint64_t v710 = v721 + 552;
      __swift_project_boxed_opaque_existential_1((void *)(v721 + 552), v709);
      int v708 = *(void (**)(uint64_t, uint64_t))(v706 + 16);
      uint64_t v707 = v706 + 16;
      uint64_t v11 = swift_getAssociatedTypeWitness();
      uint64_t v12 = v721;
      *(void *)(v721 + 1160) = v11;
      __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v12 + 1136));
      v708(v709, v706);
      __swift_destroy_boxed_opaque_existential_1(v710);
    }
    else
    {
      outlined destroy of Pregnancy?(v721 + 552);
      uint64_t v53 = (void *)v721;
      *(void *)(v721 + 1136) = 0;
      v53[143] = 0;
      v53[144] = 0;
      v53[145] = 0;
    }
    if (*(void *)(v721 + 1160))
    {
      uint64_t v705 = (swift_dynamicCast() & 1) != 0 ? *(void *)(v721 + 2408) : 0;
      v704 = v705;
    }
    else
    {
      uint64_t v645 = 0;
      outlined destroy of Pregnancy?(v721 + 1136);
      v704 = 0;
    }
    uint64_t v13 = v721;
    *(void *)(v721 + 2344) = v704;
    if (*(void *)(v13 + 2344))
    {
      int v747 = *(void *)(v721 + 2344);
    }
    else
    {
      _allocateUninitializedArray<A>(_:)();
      int v747 = Dictionary.init(dictionaryLiteral:)();
      outlined destroy of [A]();
    }
    uint64_t result = Dictionary.merge(_:uniquingKeysWith:)();
    int v703 = v713;
    if (!v713)
    {
      unint64_t v14 = v744;
      uint64_t v15 = v742;
      uint64_t v16 = v741;
      uint64_t v17 = v721 + 3680;
      *(unsigned char *)(v721 + 3680) = 1;
      MEMORY[0x25A2C04B0](v17, v16, &type metadata for HealthDataRawSampleType, v15, v14);
      if (*(void *)(v721 + 616))
      {
        int v701 = *(void *)(v721 + 616);
        uint64_t v698 = *(void *)(v721 + 624);
        int v702 = v721 + 592;
        __swift_project_boxed_opaque_existential_1((void *)(v721 + 592), v701);
        uint64_t v700 = *(void (**)(uint64_t, uint64_t))(v698 + 16);
        uint64_t v699 = v698 + 16;
        uint64_t v18 = swift_getAssociatedTypeWitness();
        uint64_t v19 = v721;
        *(void *)(v721 + 1192) = v18;
        __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v19 + 1168));
        v700(v701, v698);
        __swift_destroy_boxed_opaque_existential_1(v702);
      }
      else
      {
        outlined destroy of Pregnancy?(v721 + 592);
        uint64_t v52 = (void *)v721;
        *(void *)(v721 + 1168) = 0;
        v52[147] = 0;
        v52[148] = 0;
        v52[149] = 0;
      }
      if (*(void *)(v721 + 1192))
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : Bool]);
        int v697 = (swift_dynamicCast() & 1) != 0 ? *(void *)(v721 + 2400) : 0;
        uint64_t v696 = v697;
      }
      else
      {
        uint64_t v646 = 0;
        outlined destroy of Pregnancy?(v721 + 1168);
        uint64_t v696 = 0;
      }
      uint64_t v20 = v721;
      *(void *)(v721 + 2352) = v696;
      if (*(void *)(v20 + 2352))
      {
        uint64_t v748 = *(void *)(v721 + 2352);
      }
      else
      {
        _allocateUninitializedArray<A>(_:)();
        uint64_t v748 = Dictionary.init(dictionaryLiteral:)();
        outlined destroy of [A]();
      }
      uint64_t v694 = v748;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : Bool]);
      uint64_t result = Dictionary.merge(_:uniquingKeysWith:)();
      uint64_t v695 = v703;
      if (!v703)
      {
        unint64_t v21 = v744;
        uint64_t v22 = v742;
        uint64_t v23 = v741;
        uint64_t v24 = v721 + 3681;
        *(unsigned char *)(v721 + 3681) = 3;
        MEMORY[0x25A2C04B0](v24, v23, &type metadata for HealthDataRawSampleType, v22, v21);
        if (*(void *)(v721 + 656))
        {
          uint64_t v692 = *(void *)(v721 + 656);
          int v689 = *(void *)(v721 + 664);
          uint64_t v693 = v721 + 632;
          __swift_project_boxed_opaque_existential_1((void *)(v721 + 632), v692);
          int v691 = *(void (**)(uint64_t, uint64_t))(v689 + 16);
          int v690 = v689 + 16;
          uint64_t v25 = swift_getAssociatedTypeWitness();
          uint64_t v26 = v721;
          *(void *)(v721 + 1224) = v25;
          __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v26 + 1200));
          v691(v692, v689);
          __swift_destroy_boxed_opaque_existential_1(v693);
        }
        else
        {
          outlined destroy of Pregnancy?(v721 + 632);
          unint64_t v51 = (void *)v721;
          *(void *)(v721 + 1200) = 0;
          v51[151] = 0;
          v51[152] = 0;
          v51[153] = 0;
        }
        if (*(void *)(v721 + 1224))
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8 : [(UInt32, UInt32)]]);
          uint64_t v688 = (swift_dynamicCast() & 1) != 0 ? *(void *)(v721 + 2392) : 0;
          uint64_t v687 = v688;
        }
        else
        {
          uint64_t v647 = 0;
          outlined destroy of Pregnancy?(v721 + 1200);
          uint64_t v687 = 0;
        }
        uint64_t v27 = v721;
        *(void *)(v721 + 2360) = v687;
        if (*(void *)(v27 + 2360))
        {
          uint64_t v749 = *(void *)(v721 + 2360);
        }
        else
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt8, [(UInt32, UInt32)]));
          uint64_t v686 = _allocateUninitializedArray<A>(_:)();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(UInt32, UInt32)]);
          uint64_t v749 = Dictionary.init(dictionaryLiteral:)();
          outlined destroy of [A]();
        }
        uint64_t v682 = *(void *)(v721 + 2904);
        uint64_t v683 = v749;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(UInt32, UInt32)]);
        uint64_t v684 = _dictionaryUpCast<A, B, C, D>(_:)();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8 : [(start: UInt32, end: UInt32)]]);
        uint64_t result = Dictionary.merge(_:uniquingKeysWith:)();
        int v685 = v695;
        if (!v695)
        {
          swift_bridgeObjectRelease();
          uint64_t v28 = v741;
          Swift::Int v29 = v742;
          uint64_t v30 = v744;
          uint64_t v31 = v721 + 3682;
          *(unsigned char *)(v721 + 3682) = 7;
          MEMORY[0x25A2C04B0](v31, v28, &type metadata for HealthDataRawSampleType, v29, v30);
          if (*(void *)(v721 + 696))
          {
            uint64_t v680 = *(void *)(v721 + 696);
            uint64_t v677 = *(void *)(v721 + 704);
            unint64_t v681 = v721 + 672;
            __swift_project_boxed_opaque_existential_1((void *)(v721 + 672), v680);
            unint64_t v679 = *(void (**)(uint64_t, uint64_t))(v677 + 16);
            unint64_t v678 = v677 + 16;
            char v32 = swift_getAssociatedTypeWitness();
            uint64_t v33 = v721;
            *(void *)(v721 + 1256) = v32;
            __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v33 + 1232));
            v679(v680, v677);
            __swift_destroy_boxed_opaque_existential_1(v681);
          }
          else
          {
            outlined destroy of Pregnancy?(v721 + 672);
            char v50 = (void *)v721;
            *(void *)(v721 + 1232) = 0;
            v50[155] = 0;
            v50[156] = 0;
            v50[157] = 0;
          }
          if (*(void *)(v721 + 1256))
          {
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : (Float, String)]);
            uint64_t v676 = (swift_dynamicCast() & 1) != 0 ? *(void *)(v721 + 2384) : 0;
            uint64_t v675 = v676;
          }
          else
          {
            uint64_t v648 = 0;
            outlined destroy of Pregnancy?(v721 + 1232);
            uint64_t v675 = 0;
          }
          uint64_t v34 = v721;
          *(void *)(v721 + 2368) = v675;
          if (*(void *)(v34 + 2368))
          {
            uint64_t v750 = *(void *)(v721 + 2368);
          }
          else
          {
            uint64_t v674 = *(void *)(v721 + 2920);
            _allocateUninitializedArray<A>(_:)();
            uint64_t v750 = Dictionary.init(dictionaryLiteral:)();
            outlined destroy of [A]();
          }
          unsigned int v672 = v750;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : (Float, String)]);
          uint64_t result = Dictionary.merge(_:uniquingKeysWith:)();
          uint64_t v673 = v685;
          if (!v685)
          {
            unint64_t v669 = *(void *)(v721 + 3040);
            uint64_t v670 = *(void *)(v721 + 2000);
            swift_bridgeObjectRetain();
            uint64_t v671 = MEMORY[0x25A2C0810](v670, v669);
            swift_bridgeObjectRelease();
            if (v671 < 0)
            {
              LOBYTE(v227) = 2;
              v228 = 754;
              LODWORD(v229) = 0;
              return _assertionFailure(_:_:file:line:flags:)();
            }
            uint64_t v35 = v673;
            double v751 = 0;
            uint64_t v752 = v671;
            uint64_t v36 = specialized Collection<>.makeIterator()();
            uint64_t v37 = v721;
            *(void *)(v721 + 1616) = v36;
            *(void *)(v37 + 1624) = v38;
            *(void *)(v37 + 1632) = v39;
            for (uint64_t i = v35; ; uint64_t i = v665)
            {
              unint64_t v666 = i;
              int v753 = specialized IndexingIterator.next()();
              uint64_t v754 = v40 & 1;
              unint64_t v667 = v753;
              if (v40)
              {
                swift_bridgeObjectRelease();
                uint64_t v649 = (uint64_t)v666;
                goto LABEL_73;
              }
              uint64_t v41 = v666;
              uint64_t v42 = v721;
              uint64_t v656 = *(void *)(v721 + 3040);
              int v657 = v721 + 2376;
              *(void *)(v721 + 2376) = v667;
              uint64_t v658 = *(void **)(v42 + 1776);
              swift_bridgeObjectRetain();
              uint64_t v659 = *(void **)(v721 + 1784);
              swift_bridgeObjectRetain();
              uint64_t v660 = *(void **)(v721 + 1792);
              swift_bridgeObjectRetain();
              uint64_t v661 = *(void **)(v721 + 1800);
              swift_bridgeObjectRetain();
              uint64_t v662 = *(void **)(v721 + 1808);
              swift_bridgeObjectRetain();
              int v663 = v721 + 712;
              Array.subscript.getter();
              v43._rawValue = v658;
              v44._rawValue = v659;
              v45._rawValue = v660;
              v46._rawValue = v661;
              v47._rawValue = v662;
              uint64_t v664 = CalendarPeriodPrediction.predictOvu(flow:otr:spotting:cycleFactors:swt:pregnancy:)(v43, v44, v45, v46, v47, (void *)(v721 + 712));
              unsigned int v665 = v41;
              if (v41) {
                break;
              }
              uint64_t v650 = *(void *)(v721 + 3064);
              __swift_destroy_boxed_opaque_existential_1(v721 + 712);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v48 = v721;
              uint64_t v655 = v721 + 3584;
              *(_DWORD *)(v721 + 3584) = v664;
              uint64_t v653 = v48 + 1264;
              uint64_t v654 = (void (*)(void))Array.subscript.modify();
              int v651 = *(void *)(v49 + 24);
              uint64_t v652 = *(void *)(v49 + 32);
              __swift_mutable_project_boxed_opaque_existential_1(v49, v651);
              (*(void (**)(void, uint64_t))(v652 + 112))(v664, v651);
              v654();
            }
            __swift_destroy_boxed_opaque_existential_1(v721 + 712);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v261 = v721 + 1696;
            uint64_t v279 = v721 + 1640;
            int v280 = v721 + 1704;
            uint64_t v281 = v721 + 1712;
            uint64_t v282 = v721 + 1720;
            v283 = v721 + 1728;
            uint64_t v284 = v721 + 1736;
            uint64_t v285 = v721 + 1744;
            v286 = v721 + 1752;
            uint64_t v262 = v721 + 1760;
            v263 = v721 + 1768;
            v287 = v721 + 3608;
            uint64_t v277 = v721 + 1656;
            v264 = v721 + 1952;
            uint64_t v265 = v721 + 1984;
            v266 = v721 + 1992;
            v267 = v721 + 2024;
            uint64_t v278 = v721 + 2040;
            v268 = v721 + 2072;
            uint64_t v269 = v721 + 2088;
            char v270 = v721 + 2104;
            uint64_t v271 = v721 + 2120;
            uint64_t v272 = v721 + 2128;
            uint64_t v273 = v721 + 3568;
            Swift::OpaquePointer v274 = v721 + 3576;
            v260 = *(void *)(v721 + 2816);
            v222 = v665;
            Swift::OpaquePointer v275 = v721 + 2312;
            *(void *)(v721 + 2312) = v665;
            swift_retain();
            uint64_t v223 = v665;
            v224 = swift_task_alloc();
            v225 = v665;
            uint64_t v288 = v224;
            *(void *)(v224 + 16) = v260;
            *(void *)(v224 + 24) = v225;
            uint64_t v276 = MEMORY[0x263F8EE60] + 8;
            uint64_t v226 = default argument 1 of NightingaleDPFLRunner.sendLocationAsync<A>(location:force:work:)();
            NightingaleDPFLRunner.sendLocation<A>(location:force:work:)(7, v226 & 1, v288, v276, v557);
            char v289 = 0;
            v292 = *(void *)(v721 + 3064);
            v291 = *(void *)(v721 + 2816);
            swift_task_dealloc();
            swift_release();

            uint64_t v290 = *(void *)(v721 + 2000);
            swift_bridgeObjectRetain();
            *(void *)(v721 + 2320) = v290;
            swift_retain();
            lazy protocol witness table accessor for type [Pregnancy] and conformance [A]();
            uint64_t v293 = _ArrayProtocol.filter(_:)();
            v294 = 0;
            swift_release();
            *(void *)(v721 + 2000) = v293;
            swift_bridgeObjectRelease();

            uint64_t v649 = v294;
LABEL_73:
            uint64_t v55 = v649;
            uint64_t v634 = v721 + 1696;
            uint64_t v635 = v721 + 1640;
            uint64_t v636 = v721 + 1704;
            uint64_t v637 = v721 + 1712;
            uint64_t v638 = v721 + 1720;
            uint64_t v639 = v721 + 1728;
            uint64_t v640 = v721 + 1736;
            uint64_t v641 = v721 + 1744;
            uint64_t v615 = v721 + 1752;
            uint64_t v642 = v721 + 1760;
            uint64_t v632 = v721 + 1768;
            int v617 = v721 + 3520;
            int v618 = v721 + 1896;
            int v619 = v721 + 1912;
            uint64_t v620 = v721 + 1952;
            uint64_t v621 = v721 + 1984;
            uint64_t v622 = v721 + 2024;
            uint64_t v623 = v721 + 2040;
            uint64_t v624 = v721 + 2056;
            uint64_t v625 = v721 + 2072;
            uint64_t v626 = v721 + 2088;
            uint64_t v627 = v721 + 2104;
            uint64_t v628 = v721 + 2120;
            uint64_t v629 = v721 + 2128;
            uint64_t v631 = *(void *)(v721 + 3072);
            uint64_t v630 = *(void *)(v721 + 3064);
            uint64_t v611 = *(void *)(v721 + 2680);
            uint64_t v609 = NightingaleDPFLRunner.performanceMeasure.getter();
            uint64_t v612 = 1;
            object = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("UpdateSliceDeltaAnchor", 0x16uLL, 1)._object;
            dispatch thunk of PerformanceMeasure.finish(_:)();
            uint64_t v610 = v56;
            *(void *)(v721 + 3208) = v56;
            swift_bridgeObjectRelease();
            swift_release();
            uint64_t v633 = v721 + 2136;
            *(void *)(v721 + 2136) = v610;
            uint64_t v57 = default argument 1 of NightingaleDPFLRunner.sendLocation(_:_:)();
            NightingaleDPFLRunner.sendLocation(_:_:)(NightingaleTraining_NightingaleDReachLocation_updateSliceDeltaAnchorCompleted, v57);
            uint64_t v614 = NightingaleDPFLRunner.performanceMeasure.getter();
            uint64_t v613 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("QueryRequiredFeatures", 0x15uLL, v612 & 1)._object;
            dispatch thunk of PerformanceMeasure.start(_:)();
            swift_bridgeObjectRelease();
            swift_release();
            uint64_t v616 = *(void *)(v721 + 2000);
            swift_bridgeObjectRetain();
            *(void *)(v721 + 2144) = v616;
            uint64_t result = Sequence.min(by:)();
            uint64_t v643 = v55;
            if (!v55)
            {
              outlined destroy of [A]();
              if (*(void *)(v721 + 376))
              {
                uint64_t v603 = *(void *)(v721 + 376);
                uint64_t v602 = *(void *)(v721 + 384);
                uint64_t v604 = v721 + 352;
                __swift_project_boxed_opaque_existential_1((void *)(v721 + 352), v603);
                uint64_t v605 = (*(uint64_t (**)(uint64_t))(v602 + 56))(v603);
                __swift_destroy_boxed_opaque_existential_1(v721 + 352);
                uint64_t v606 = v605;
                uint64_t v607 = 0;
              }
              else
              {
                v311 = 0;
                outlined destroy of Pregnancy?(v721 + 352);
                uint64_t v606 = 0;
                uint64_t v607 = 1;
              }
              uint64_t v58 = v607;
              uint64_t v601 = v606;
              *(_DWORD *)(v721 + 3648) = v606;
              if (v58) {
                goto LABEL_133;
              }
              BOOL v59 = v721;
              id v60 = v643;
              uint64_t v599 = *(void *)(v721 + 3072);
              uint64_t v598 = *(void *)(v721 + 3064);
              uint64_t v597 = v721 + 3528;
              *(_DWORD *)(v721 + 3528) = v601;
              uint64_t v596 = *(void *)(v59 + 2000);
              swift_bridgeObjectRetain();
              *(void *)(v721 + 2152) = v596;
              uint64_t result = Sequence.max(by:)();
              uint64_t v600 = v60;
              if (!v60)
              {
                outlined destroy of [A]();
                if (*(void *)(v721 + 416))
                {
                  uint64_t v591 = *(void *)(v721 + 416);
                  uint64_t v590 = *(void *)(v721 + 424);
                  uint64_t v592 = v721 + 392;
                  __swift_project_boxed_opaque_existential_1((void *)(v721 + 392), v591);
                  uint64_t v593 = (*(uint64_t (**)(uint64_t))(v590 + 56))(v591);
                  __swift_destroy_boxed_opaque_existential_1(v721 + 392);
                  uint64_t v594 = v593;
                  uint64_t v595 = 0;
                }
                else
                {
                  uint64_t v312 = 0;
                  outlined destroy of Pregnancy?(v721 + 392);
                  uint64_t v594 = 0;
                  uint64_t v595 = 1;
                }
                uint64_t v61 = v595;
                uint64_t v589 = v594;
                *(_DWORD *)(v721 + 3652) = v594;
                if ((v61 & 1) == 0)
                {
                  uint64_t v62 = v721;
                  uint64_t v63 = v601;
                  uint64_t v586 = *(void *)(v721 + 2816);
                  *(_DWORD *)(v721 + 3536) = v589;
                  uint64_t v584 = v62 + 3524;
                  *(_DWORD *)(v62 + 3524) = v63;
                  int v582 = lazy protocol witness table accessor for type Int and conformance Int();
                  uint64_t v583 = lazy protocol witness table accessor for type Int and conformance Int();
                  int v585 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
                  SignedInteger<>.init<A>(_:)();
                  uint64_t v587 = *(void *)(v721 + 2160);
                  uint64_t result = HyperParams.minSliceAnchorDelta.getter();
                  uint64_t v588 = v587 + result;
                  if (__OFADD__(v587, result))
                  {
                    __break(1u);
                  }
                  else
                  {
                    *(_DWORD *)(v721 + 3532) = HyperParams.sliceSize.getter();
                    uint64_t result = SignedInteger<>.init<A>(_:)();
                    uint64_t v65 = *(void *)(v721 + 2168);
                    int v581 = v588 - v65;
                    if (!__OFSUB__(v588, v65))
                    {
                      uint64_t v580 = v581 + 1;
                      if (!__OFADD__(v581, 1))
                      {
                        uint64_t v577 = *(void *)(v721 + 2816);
                        uint64_t v572 = v721 + 2176;
                        *(void *)(v721 + 2176) = v580;
                        uint64_t v570 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
                        uint64_t v571 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
                        uint64_t v573 = lazy protocol witness table accessor for type Int and conformance Int();
                        uint64_t v575 = MEMORY[0x263F8E8F8];
                        uint64_t v574 = MEMORY[0x263F8D6C8];
                        UnsignedInteger<>.init<A>(_:)();
                        uint64_t v68 = v589;
                        uint64_t v69 = v721;
                        int v576 = *(_DWORD *)(v721 + 3516);
                        *(_DWORD *)(v721 + 3656) = v576;
                        *(_DWORD *)(v69 + 3556) = v68;
                        SignedInteger<>.init<A>(_:)();
                        uint64_t v578 = *(void *)(v721 + 2184);
                        uint64_t result = HyperParams.maxSliceAnchorDelta.getter();
                        int v579 = v578 + result;
                        if (!__OFADD__(v578, result))
                        {
                          uint64_t v567 = *(_DWORD *)(v721 + 3632);
                          *(void *)(v721 + 2192) = v579;
                          uint64_t v568 = MEMORY[0x263F8E8F8];
                          UnsignedInteger<>.init<A>(_:)();
                          uint64_t v71 = v567;
                          uint64_t v72 = v721;
                          *(_DWORD *)(v721 + 3564) = *(_DWORD *)(v721 + 3548);
                          *(_DWORD *)(v72 + 3572) = v71;
                          min<A>(_:_:)();
                          uint64_t v73 = v576;
                          uint64_t v74 = *(_DWORD *)(v721 + 3540);
                          uint64_t v569 = v74;
                          *(_DWORD *)(v721 + 3660) = v74;
                          if (v74 < v73)
                          {
                            LOBYTE(v227) = 2;
                            v228 = 347;
                            LODWORD(v229) = 0;
                            return _assertionFailure(_:_:file:line:flags:)();
                          }
                          uint64_t v75 = v721;
                          uint64_t v76 = v569;
                          uint64_t v566 = v721 + 1548;
                          *(_DWORD *)(v721 + 1548) = v576;
                          *(_DWORD *)(v75 + 1552) = v76;
                          *(void *)(v721 + 2200) = _allocateUninitializedArray<A>(_:)();
                          if (HyperParams.isHRVRequired()())
                          {
                            uint64_t v565 = v721 + 3677;
                            *(unsigned char *)(v721 + 3677) = 8;
                            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HealthDataRawSampleType]);
                            Array.append(_:)();
                          }
                          if (HyperParams.isSpO2Required()())
                          {
                            uint64_t v564 = v721 + 3676;
                            *(unsigned char *)(v721 + 3676) = 10;
                            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HealthDataRawSampleType]);
                            Array.append(_:)();
                          }
                          if (HyperParams.isRespiratoryRateRequired()())
                          {
                            int v563 = v721 + 3675;
                            *(unsigned char *)(v721 + 3675) = 9;
                            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HealthDataRawSampleType]);
                            Array.append(_:)();
                          }
                          if (HyperParams.isSWTRequired()())
                          {
                            uint64_t v562 = v721 + 3674;
                            *(unsigned char *)(v721 + 3674) = 7;
                            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HealthDataRawSampleType]);
                            Array.append(_:)();
                          }
                          uint64_t v560 = *(void *)(v721 + 2200);
                          swift_bridgeObjectRetain();
                          swift_bridgeObjectRetain();
                          uint64_t v559 = v721 + 2208;
                          *(void *)(v721 + 2208) = v560;
                          uint64_t v558 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HealthDataRawSampleType]);
                          lazy protocol witness table accessor for type [HealthDataRawSampleType] and conformance [A]();
                          uint64_t v561 = Collection.isEmpty.getter();
                          outlined destroy of [A]();
                          swift_bridgeObjectRelease();
                          if ((v561 & 1) == 0)
                          {
                            uint64_t v552 = *(void *)(v721 + 2816);
                            uint64_t v553 = *(void *)(v721 + 2680);
                            swift_retain();
                            swift_retain();
                            uint64_t v77 = swift_task_alloc();
                            uint64_t v78 = v552;
                            uint64_t v79 = v553;
                            uint64_t v80 = v576;
                            uint64_t v81 = v569;
                            uint64_t v82 = v721;
                            uint64_t v555 = v77;
                            *(void *)(v721 + 3216) = v77;
                            *(void *)(v77 + 16) = v78;
                            *(void *)(v77 + 24) = v82 + 2200;
                            *(void *)(v77 + 32) = v79;
                            *(_DWORD *)(v77 + 40) = v80;
                            *(_DWORD *)(v77 + 44) = v81;
                            *(void *)(v77 + 48) = v82 + 1816;
                            *(void *)(v77 + 56) = v82 + 1824;
                            *(void *)(v77 + 64) = v82 + 1832;
                            *(void *)(v77 + 72) = v82 + 1808;
                            uint64_t v556 = MEMORY[0x263F8EE60] + 8;
                            uint64_t v554 = default argument 1 of NightingaleDPFLRunner.sendLocationAsync<A>(location:force:work:)();
                            Swift::Int v83 = swift_task_alloc();
                            Swift::Int v84 = v721;
                            uint64_t v85 = v554;
                            uint64_t v86 = v740;
                            uint64_t v87 = v555;
                            uint64_t v88 = v556;
                            int v89 = (void *)v83;
                            v90 = v557;
                            *(void *)(v721 + 3224) = v89;
                            *int v89 = *(void *)(v84 + 1688);
                            v89[1] = NightingaleDPFLRunner.run(task:useCase:context:);
                            uint64_t v91 = 8;
                            v92 = v85 & 1;
                            return NightingaleDPFLRunner.sendLocationAsync<A>(location:force:work:)(v90, v91, v92, v86, v87, v88);
                          }
                          uint64_t v526 = v721 + 1696;
                          uint64_t v544 = v721 + 1640;
                          uint64_t v545 = v721 + 1704;
                          uint64_t v546 = v721 + 1712;
                          uint64_t v547 = v721 + 1720;
                          uint64_t v548 = v721 + 1728;
                          uint64_t v549 = v721 + 1736;
                          uint64_t v550 = v721 + 1744;
                          uint64_t v543 = v721 + 1752;
                          uint64_t v527 = v721 + 1888;
                          uint64_t v528 = v721 + 3520;
                          uint64_t v529 = v721 + 1896;
                          v530 = v721 + 1912;
                          uint64_t v531 = v721 + 1952;
                          uint64_t v532 = v721 + 1984;
                          uint64_t v533 = v721 + 1992;
                          uint64_t v525 = v721 + 2040;
                          uint64_t v534 = v721 + 2056;
                          uint64_t v535 = v721 + 2072;
                          uint64_t v536 = v721 + 2088;
                          uint64_t v537 = v721 + 2104;
                          v538 = v721 + 2120;
                          uint64_t v539 = v721 + 2128;
                          uint64_t v540 = v721 + 2136;
                          v541 = v721 + 3528;
                          uint64_t v542 = v721 + 3536;
                          uint64_t v551 = v721 + 1548;
                          *(void *)(v721 + 2216) = 0;
                          if (HyperParams.isSHRRequired()())
                          {
                            v521 = *(_DWORD *)(v721 + 3660);
                            uint64_t v520 = *(_DWORD *)(v721 + 3656);
                            v519 = *(void *)(v721 + 2816);
                            uint64_t v518 = *(void *)(v721 + 2680);
                            swift_retain();
                            swift_retain();
                            v93 = swift_task_alloc();
                            int v94 = v518;
                            uint64_t v95 = v519;
                            v96 = v520;
                            int v97 = v521;
                            uint64_t v98 = v721;
                            v523 = v93;
                            *(void *)(v721 + 3240) = v93;
                            *(void *)(v93 + 16) = v94;
                            *(void *)(v93 + 24) = v95;
                            *(_DWORD *)(v93 + 32) = v96;
                            *(_DWORD *)(v93 + 36) = v97;
                            *(void *)(v93 + 40) = v98 + 1840;
                            *(void *)(v93 + 48) = v98 + 1848;
                            *(void *)(v93 + 56) = v98 + 2216;
                            v524 = MEMORY[0x263F8EE60] + 8;
                            uint64_t v522 = default argument 1 of NightingaleDPFLRunner.sendLocationAsync<A>(location:force:work:)();
                            unsigned int v99 = swift_task_alloc();
                            unsigned int v100 = v721;
                            uint64_t v101 = v522;
                            uint64_t v86 = v739;
                            uint64_t v87 = v523;
                            uint64_t v88 = v524;
                            unsigned int v102 = (void *)v99;
                            v90 = v557;
                            *(void *)(v721 + 3248) = v102;
                            *unsigned int v102 = *(void *)(v100 + 1688);
                            v102[1] = NightingaleDPFLRunner.run(task:useCase:context:);
                            uint64_t v91 = 8;
                            v92 = v101 & 1;
                            return NightingaleDPFLRunner.sendLocationAsync<A>(location:force:work:)(v90, v91, v92, v86, v87, v88);
                          }
                          v492 = v721 + 1696;
                          uint64_t v510 = v721 + 1640;
                          v511 = v721 + 1704;
                          uint64_t v512 = v721 + 1712;
                          v513 = v721 + 1720;
                          uint64_t v514 = v721 + 1728;
                          v515 = v721 + 1736;
                          uint64_t v516 = v721 + 1744;
                          v509 = v721 + 1752;
                          uint64_t v493 = v721 + 1888;
                          v494 = v721 + 3520;
                          uint64_t v495 = v721 + 1896;
                          v496 = v721 + 1912;
                          uint64_t v497 = v721 + 1952;
                          v498 = v721 + 1984;
                          v499 = v721 + 1992;
                          uint64_t v491 = v721 + 2040;
                          v500 = v721 + 2056;
                          uint64_t v501 = v721 + 2072;
                          v502 = v721 + 2088;
                          uint64_t v503 = v721 + 2104;
                          uint64_t v504 = v721 + 2120;
                          v505 = v721 + 2128;
                          uint64_t v506 = v721 + 2136;
                          v507 = v721 + 3528;
                          uint64_t v508 = v721 + 3536;
                          v517 = v721 + 1548;
                          if (HyperParams.isCalendarAlgorithmRequired()())
                          {
                            Swift::OpaquePointer v484 = *(_DWORD *)(v721 + 3652);
                            Swift::OpaquePointer v482 = *(_DWORD *)(v721 + 3648);
                            v487 = *(void *)(v721 + 2992);
                            uint64_t v485 = *(_DWORD *)(v721 + 3632);
                            Swift::OpaquePointer v483 = *(void *)(v721 + 2816);
                            uint64_t v486 = *(void *)(v721 + 2680);
                            swift_retain();
                            swift_retain();
                            swift_retain();
                            uint64_t v103 = swift_task_alloc();
                            uint64_t v104 = v482;
                            uint64_t v105 = v483;
                            unsigned int v106 = v484;
                            unsigned int v107 = v485;
                            v108 = v486;
                            uint64_t v109 = v487;
                            char v110 = v721;
                            uint64_t v489 = v103;
                            *(void *)(v721 + 3264) = v103;
                            *(_DWORD *)(v103 + 16) = v104;
                            *(void *)(v103 + 24) = v105;
                            *(_DWORD *)(v103 + 32) = v106;
                            *(_DWORD *)(v103 + 36) = v107;
                            *(void *)(v103 + 40) = v108;
                            *(void *)(v103 + 48) = v110 + 1776;
                            *(void *)(v103 + 56) = v110 + 1784;
                            *(void *)(v103 + 64) = v110 + 1792;
                            *(void *)(v103 + 72) = v110 + 1800;
                            *(void *)(v103 + 80) = v109;
                            *(void *)(v103 + 88) = v110 + 1856;
                            *(void *)(v103 + 96) = v110 + 1864;
                            v490 = MEMORY[0x263F8EE60] + 8;
                            uint64_t v488 = default argument 1 of NightingaleDPFLRunner.sendLocationAsync<A>(location:force:work:)();
                            v111 = swift_task_alloc();
                            uint64_t v112 = v721;
                            uint64_t v113 = v488;
                            uint64_t v86 = v738;
                            uint64_t v87 = v489;
                            uint64_t v88 = v490;
                            uint64_t v114 = (void *)v111;
                            v90 = v557;
                            *(void *)(v721 + 3272) = v114;
                            *uint64_t v114 = *(void *)(v112 + 1688);
                            v114[1] = NightingaleDPFLRunner.run(task:useCase:context:);
                            uint64_t v91 = 8;
                            v92 = v113 & 1;
                            return NightingaleDPFLRunner.sendLocationAsync<A>(location:force:work:)(v90, v91, v92, v86, v87, v88);
                          }
                          v468 = v721 + 1696;
                          Swift::OpaquePointer v469 = v721 + 1640;
                          Swift::OpaquePointer v470 = v721 + 1704;
                          Swift::OpaquePointer v471 = v721 + 1712;
                          Swift::OpaquePointer v472 = v721 + 1720;
                          Swift::OpaquePointer v473 = v721 + 1728;
                          Swift::OpaquePointer v474 = v721 + 1736;
                          Swift::OpaquePointer v475 = v721 + 1744;
                          Swift::OpaquePointer v476 = v721 + 1752;
                          Swift::OpaquePointer v477 = v721 + 1760;
                          int v463 = v721 + 3608;
                          uint64_t v447 = v721 + 1896;
                          id v448 = v721 + 1912;
                          id v449 = v721 + 1952;
                          uint64_t v450 = v721 + 1984;
                          uint64_t v451 = v721 + 1992;
                          uint64_t v452 = v721 + 2024;
                          uint64_t v453 = v721 + 2040;
                          v467 = v721 + 2056;
                          uint64_t v454 = v721 + 2088;
                          uint64_t v455 = v721 + 2104;
                          uint64_t v456 = v721 + 2120;
                          uint64_t v457 = v721 + 2128;
                          int v458 = v721 + 2136;
                          uint64_t v459 = v721 + 3528;
                          v460 = v721 + 3536;
                          uint64_t v461 = v721 + 1548;
                          uint64_t v466 = *(_DWORD *)(v721 + 3632);
                          uint64_t v465 = *(void *)(v721 + 2816);
                          uint64_t v446 = *(void *)(v721 + 2680);
                          uint64_t v442 = NightingaleDPFLRunner.performanceMeasure.getter();
                          Swift::OpaquePointer v479 = 1;
                          uint64_t v441 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("QueryRequiredFeatures", 0x15uLL, 1)._object;
                          dispatch thunk of PerformanceMeasure.finish(_:)();
                          uint64_t v443 = v115;
                          swift_bridgeObjectRelease();
                          swift_release();
                          uint64_t v462 = v721 + 2224;
                          *(void *)(v721 + 2224) = v443;
                          char v116 = default argument 1 of NightingaleDPFLRunner.sendLocation(_:_:)();
                          NightingaleDPFLRunner.sendLocation(_:_:)(NightingaleTraining_NightingaleDReachLocation_queryRequiredFeaturesCompleted, v116);
                          uint64_t v445 = NightingaleDPFLRunner.performanceMeasure.getter();
                          uint64_t v444 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Featurization", 0xDuLL, v479 & 1)._object;
                          dispatch thunk of PerformanceMeasure.start(_:)();
                          swift_bridgeObjectRelease();
                          swift_release();
                          type metadata accessor for Featurizer();
                          v117 = Featurizer.__allocating_init()();
                          char v118 = v721;
                          uint64_t v464 = v117;
                          *(void *)(v721 + 3288) = v117;
                          Swift::OpaquePointer v478 = v118 + 2232;
                          *(void *)(v118 + 2232) = v117;
                          swift_retain();
                          swift_retain();
                          Swift::OpaquePointer v480 = swift_task_alloc();
                          *(void *)(v721 + 3296) = v480;
                          *(void *)(v480 + 16) = v464;
                          uint64_t v119 = (void *)v480;
                          *(void *)(v480 + 24) = v721 + 2000;
                          v119[4] = v721 + 1808;
                          v119[5] = v721 + 1816;
                          v119[6] = v721 + 1832;
                          v119[7] = v721 + 1824;
                          v119[8] = v721 + 1840;
                          v119[9] = v721 + 1848;
                          v119[10] = v721 + 1856;
                          v119[11] = v721 + 1864;
                          v119[12] = v721 + 1800;
                          *(void *)(v480 + 104) = v465;
                          *(_DWORD *)(v480 + 112) = v466;
                          uint64_t v120 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int]));
                          NightingaleDPFLRunner.sendLocation<A>(location:force:work:)(10, v479 & 1, v480, v120, v721 + 16);
                          Swift::OpaquePointer v481 = v600;
                          if (v600)
                          {
                            uint64_t v253 = *(void *)(v721 + 3048);
                            v254 = *(void *)(v721 + 2992);
                            v255 = *(void *)(v721 + 2976);
                            uint64_t v256 = *(void *)(v721 + 2880);
                            v257 = *(id *)(v721 + 2856);
                            v258 = *(id *)(v721 + 2832);
                            uint64_t v259 = *(void *)(v721 + 2816);
                            swift_task_dealloc();
                            swift_release();
                            swift_release();
                            swift_release();
                            outlined destroy of [A]();
                            outlined destroy of [A]();
                            outlined destroy of [A]();
                            swift_bridgeObjectRelease();
                            swift_release();
                            outlined destroy of [A]();
                            swift_bridgeObjectRelease();
                            outlined destroy of [A]();
                            outlined destroy of [A]();
                            outlined destroy of [A]();
                            outlined destroy of [A]();
                            outlined destroy of [A]();
                            outlined destroy of [A]();
                            outlined destroy of [A]();
                            outlined destroy of [A]();
                            outlined destroy of [A]();
                            outlined destroy of [A]();
                            outlined destroy of [A]();
                            outlined destroy of [A]();
                            swift_bridgeObjectRelease();

                            swift_release();
                            uint64_t v322 = v481;
                          }
                          else
                          {
                            uint64_t v400 = *(void *)(v721 + 3208);
                            uint64_t v398 = *(void *)(v721 + 3136);
                            uint64_t v428 = *(void *)(v721 + 3128);
                            uint64_t v425 = *(void *)(v721 + 3120);
                            uint64_t v423 = *(void *)(v721 + 3112);
                            uint64_t v421 = *(void *)(v721 + 3104);
                            uint64_t v419 = *(void *)(v721 + 3096);
                            uint64_t v417 = *(void *)(v721 + 3088);
                            id v415 = *(void *)(v721 + 3080);
                            uint64_t v413 = *(void *)(v721 + 3056);
                            uint64_t v396 = *(void *)(v721 + 3032);
                            uint64_t v394 = *(void *)(v721 + 2984);
                            uint64_t v411 = *(void *)(v721 + 2968);
                            int v409 = *(void *)(v721 + 2960);
                            uint64_t v392 = *(void *)(v721 + 2864);
                            uint64_t v407 = *(void *)(v721 + 2824);
                            uint64_t v369 = *(void *)(v721 + 2816);
                            swift_release();
                            swift_release();
                            uint64_t v121 = (void *)v721;
                            uint64_t v122 = *(void **)(v721 + 16);
                            uint64_t v370 = v122;
                            *(void *)(v721 + 3304) = v122;
                            uint64_t v123 = (void *)v121[3];
                            uint64_t v371 = v123;
                            v121[414] = v123;
                            int v124 = (void *)v121[4];
                            v372._rawValue = v124;
                            v121[415] = v124;
                            uint64_t v125 = (void *)v121[5];
                            v373._rawValue = v125;
                            v121[416] = v125;
                            int v126 = (void *)v121[6];
                            v374._rawValue = v126;
                            v121[417] = v126;
                            v127 = (void *)v121[7];
                            v375._rawValue = v127;
                            v121[418] = v127;
                            uint64_t v128 = (void *)v121[8];
                            v376._rawValue = v128;
                            v121[419] = v128;
                            v129 = (void *)v121[9];
                            v377._rawValue = v129;
                            v121[420] = v129;
                            uint64_t v130 = (void *)v121[10];
                            v378._rawValue = v130;
                            v121[421] = v130;
                            Swift::Int v131 = (void *)v121[11];
                            v379._rawValue = v131;
                            v121[422] = v131;
                            char v132 = (void *)v121[12];
                            v380._rawValue = v132;
                            v121[423] = v132;
                            uint64_t v133 = (void *)v121[13];
                            v381._rawValue = v133;
                            v121[424] = v133;
                            uint64_t v134 = (void *)v121[14];
                            v382._rawValue = v134;
                            v121[425] = v134;
                            char v135 = (void *)v121[15];
                            v383._rawValue = v135;
                            v121[426] = v135;
                            uint64_t v136 = (void *)v121[16];
                            v384._rawValue = v136;
                            v121[427] = v136;
                            int v137 = (void *)v121[17];
                            v385._rawValue = v137;
                            v121[428] = v137;
                            v138 = (void *)v121[18];
                            v386._rawValue = v138;
                            v121[429] = v138;
                            uint64_t v139 = (void *)v121[19];
                            v387._rawValue = v139;
                            v121[430] = v139;
                            v140 = v121[20];
                            v388 = v140;
                            v121[431] = v140;
                            v141 = v121[21];
                            uint64_t v389 = v141;
                            v121[432] = v141;
                            int v142 = v121[22];
                            uint64_t v432 = v142;
                            v121[433] = v142;
                            uint64_t v433 = v121 + 23;
                            v121[23] = v122;
                            v121[24] = v123;
                            v121[25] = v124;
                            v121[26] = v125;
                            v121[27] = v126;
                            v121[28] = v127;
                            v121[29] = v128;
                            v121[30] = v129;
                            v121[31] = v130;
                            v121[32] = v131;
                            v121[33] = v132;
                            v121[34] = v133;
                            v121[35] = v134;
                            v121[36] = v135;
                            v121[37] = v136;
                            v121[38] = v137;
                            v121[39] = v138;
                            v121[40] = v139;
                            v121[41] = v140;
                            v121[42] = v141;
                            v121[43] = v142;
                            uint64_t v391 = NightingaleDPFLRunner.performanceMeasure.getter();
                            uint64_t v390 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Featurization", 0xDuLL, 1)._object;
                            dispatch thunk of PerformanceMeasure.finish(_:)();
                            uint64_t v404 = v143;
                            swift_bridgeObjectRelease();
                            swift_release();
                            uint64_t v434 = v721 + 2240;
                            *(void *)(v721 + 2240) = v404;
                            id v429 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any));
                            id v430 = _allocateUninitializedArray<A>(_:)();
                            uint64_t v427 = v144;
                            int v145 = NightingaleDPFLRunner.keyMetricsCycleTrackingCheckDurationS.unsafeMutableAddressor();
                            outlined init with copy of String(v145, v427);
                            uint64_t v146 = v392;
                            unsigned int v147 = v427;
                            id v406 = MEMORY[0x263F8D538];
                            v427[5] = MEMORY[0x263F8D538];
                            v147[2] = v146;
                            uint64_t v393 = v147 + 6;
                            Duration = NightingaleDPFLRunner.keyMetricsPregnanciesQueryDurationS.unsafeMutableAddressor();
                            outlined init with copy of String(Duration, v393);
                            uint64_t v149 = v394;
                            unsigned int v150 = v427;
                            v427[11] = v406;
                            v150[8] = v149;
                            uint64_t v395 = v150 + 12;
                            uint64_t v151 = NightingaleDPFLRunner.keyMetricsUpdatingFeaturesQueryDurationS.unsafeMutableAddressor();
                            outlined init with copy of String(v151, v395);
                            uint64_t v152 = v396;
                            uint64_t v153 = v427;
                            v427[17] = v406;
                            v153[14] = v152;
                            uint64_t v397 = v153 + 18;
                            updated = NightingaleDPFLRunner.keyMetricsUpdatePregnanciesDurationS.unsafeMutableAddressor();
                            outlined init with copy of String(updated, v397);
                            unsigned int v155 = v398;
                            uint64_t v156 = v427;
                            v427[23] = v406;
                            v156[20] = v155;
                            uint64_t v399 = v156 + 24;
                            uint64_t v157 = NightingaleDPFLRunner.keyMetricsUpdateSliceDeltaAnchorDurationS.unsafeMutableAddressor();
                            outlined init with copy of String(v157, v399);
                            uint64_t v158 = v400;
                            char v159 = v427;
                            v427[29] = v406;
                            v159[26] = v158;
                            uint64_t v401 = v159 + 30;
                            v160 = NightingaleDPFLRunner.keyMetricsSHRDurationS.unsafeMutableAddressor();
                            outlined init with copy of String(v160, v401);
                            uint64_t v161 = v427;
                            uint64_t v162 = *(void *)(v721 + 2216);
                            v427[35] = v406;
                            v161[32] = v162;
                            uint64_t v402 = v161 + 36;
                            uint64_t v163 = NightingaleDPFLRunner.keyMetricsRequiredFeaturesQueryDurationS.unsafeMutableAddressor();
                            outlined init with copy of String(v163, v402);
                            int v164 = v443;
                            int v165 = v427;
                            v427[41] = v406;
                            v165[38] = v164;
                            uint64_t v403 = v165 + 42;
                            uint64_t v166 = NightingaleDPFLRunner.keyMetricsFeaturizationDurationS.unsafeMutableAddressor();
                            outlined init with copy of String(v166, v403);
                            uint64_t v167 = v404;
                            uint64_t v168 = v427;
                            v427[47] = v406;
                            v168[44] = v167;
                            id v405 = v168 + 48;
                            char v169 = NightingaleDPFLRunner.keyMetricsIterationElapsedTime.unsafeMutableAddressor();
                            outlined init with copy of String(v169, v405);
                            v170 = v407;
                            uint64_t v171 = v427;
                            v427[53] = v406;
                            v171[50] = v170;
                            uint64_t v408 = v171 + 54;
                            int v172 = NightingaleDPFLRunner.keyMetricsNumberOfAllPregnancies.unsafeMutableAddressor();
                            outlined init with copy of String(v172, v408);
                            uint64_t v173 = v409;
                            int v174 = v427;
                            uint64_t v431 = MEMORY[0x263F8D6C8];
                            v427[59] = MEMORY[0x263F8D6C8];
                            v174[56] = v173;
                            int v410 = v174 + 60;
                            int v175 = NightingaleDPFLRunner.keyMetricsNumberOfPregnancyInitializerFailed.unsafeMutableAddressor();
                            outlined init with copy of String(v175, v410);
                            uint64_t v176 = v411;
                            uint64_t v177 = v427;
                            v427[65] = v431;
                            v177[62] = v176;
                            uint64_t v412 = v177 + 66;
                            uint64_t v178 = NightingaleDPFLRunner.keyMetricsOverlappingPregnanciesCount.unsafeMutableAddressor();
                            outlined init with copy of String(v178, v412);
                            uint64_t v179 = v413;
                            uint64_t v180 = v427;
                            v427[71] = v431;
                            v180[68] = v179;
                            uint64_t v414 = v180 + 72;
                            char v181 = NightingaleDPFLRunner.keyMetricsNumberOfValidPregnancies.unsafeMutableAddressor();
                            outlined init with copy of String(v181, v414);
                            v182 = v415;
                            uint64_t v183 = v427;
                            v427[77] = v431;
                            v183[74] = v182;
                            id v416 = v183 + 78;
                            Swift::Int v184 = NightingaleDPFLRunner.keyMetricsInvalidDurationPregnanciesCount.unsafeMutableAddressor();
                            outlined init with copy of String(v184, v416);
                            uint64_t v185 = v417;
                            uint64_t v186 = v427;
                            v427[83] = v431;
                            v186[80] = v185;
                            uint64_t v418 = v186 + 84;
                            v187 = NightingaleDPFLRunner.keyMetricsInvalidLMPDeltaPregnanciesCount.unsafeMutableAddressor();
                            outlined init with copy of String(v187, v418);
                            uint64_t v188 = v419;
                            v189 = v427;
                            v427[89] = v431;
                            v189[86] = v188;
                            uint64_t v420 = v189 + 90;
                            v190 = NightingaleDPFLRunner.keyMetricsContainsFlowPregnanciesCount.unsafeMutableAddressor();
                            outlined init with copy of String(v190, v420);
                            v191 = v421;
                            v192 = v427;
                            v427[95] = v431;
                            v192[92] = v191;
                            int v422 = v192 + 96;
                            v193 = NightingaleDPFLRunner.keyMetricsInvalidLMPPregnanciesCount.unsafeMutableAddressor();
                            outlined init with copy of String(v193, v422);
                            v194 = v423;
                            v195 = v427;
                            v427[101] = v431;
                            v195[98] = v194;
                            uint64_t v424 = v195 + 102;
                            v196 = NightingaleDPFLRunner.keyMetricsInvalidEndPregnanciesCount.unsafeMutableAddressor();
                            outlined init with copy of String(v196, v424);
                            v197 = v425;
                            v198 = v427;
                            v427[107] = v431;
                            v198[104] = v197;
                            uint64_t v426 = v198 + 108;
                            int started = NightingaleDPFLRunner.keyMetricsInvalidStartSourcePregnanciesCount.unsafeMutableAddressor();
                            outlined init with copy of String(started, v426);
                            v200 = v427;
                            v201 = v428;
                            v427[113] = v431;
                            v200[110] = v201;
                            _finalizeUninitializedArray<A>(_:)();
                            uint64_t v436 = MEMORY[0x263F8D310];
                            uint64_t v437 = MEMORY[0x263F8EE58] + 8;
                            int v438 = MEMORY[0x263F8D320];
                            uint64_t v435 = Dictionary.init(dictionaryLiteral:)();
                            outlined retain of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])((uint64_t)v433);
                            _dictionaryUpCast<A, B, C, D>(_:)();
                            v439 = Dictionary.merging(_:uniquingKeysWith:)();
                            *(void *)(v721 + 3472) = v439;
                            uint64_t v440 = 0;
                            uint64_t v367 = *(void *)(v721 + 3144);
                            id v366 = *(unsigned __int8 *)(v721 + 3693);
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            v202 = v366;
                            v203 = v721;
                            uint64_t v368 = v721 + 2248;
                            *(void *)(v721 + 2248) = v439;
                            *(unsigned char *)(v203 + 3668) = v202;
                            *(unsigned char *)(v203 + 3669) = 0;
                            if (== infix<A>(_:_:)())
                            {
                              v204 = v440;
                              int v361 = *(_DWORD *)(v721 + 3632);
                              uint64_t v357 = *(void *)(v721 + 2880);
                              uint64_t v362 = *(void *)(v721 + 2872);
                              uint64_t v358 = *(void *)(v721 + 2816);
                              uint64_t v359 = *(void *)(v721 + 1864);
                              swift_bridgeObjectRetain();
                              uint64_t v360 = *(void *)(v721 + 1904);
                              swift_bridgeObjectRetain();
                              uint64_t v356 = v721 + 184;
                              outlined retain of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])(v721 + 184);
                              uint64_t v363 = &v227;
                              uint64_t v364 = NightingaleDPFLRunner.runTraining(modelPath:hyperParams:historicalPeriods:pregnancies:today:features:existingMetrics:)(v362, v357, v358, v359, v360, v361, v370, v371, v372._rawValue, v373._rawValue, v374._rawValue, v375._rawValue, v376._rawValue, v377._rawValue, v378._rawValue, v379._rawValue, v380._rawValue, v381._rawValue, v382._rawValue,
                                       v383._rawValue,
                                       v384._rawValue,
                                       v385._rawValue,
                                       v386._rawValue,
                                       v387._rawValue,
                                       v388,
                                       v389,
                                       v432,
                                       v439);
                              id v365 = v204;
                              if (!v204)
                              {
                                uint64_t v347 = *(void *)(v721 + 3048);
                                uint64_t v348 = *(void *)(v721 + 2992);
                                uint64_t v349 = *(void *)(v721 + 2976);
                                id v350 = *(void *)(v721 + 2880);
                                id v351 = *(id *)(v721 + 2856);
                                uint64_t v352 = *(id *)(v721 + 2832);
                                uint64_t v353 = *(void *)(v721 + 2816);
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                uint64_t v354 = v721 + 184;
                                outlined release of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])(v721 + 184);
                                swift_release();
                                outlined destroy of [A]();
                                outlined destroy of [A]();
                                outlined destroy of [A]();
                                swift_bridgeObjectRelease();
                                swift_release();
                                outlined destroy of [A]();
                                swift_bridgeObjectRelease();
                                outlined destroy of [A]();
                                outlined destroy of [A]();
                                outlined destroy of [A]();
                                outlined destroy of [A]();
                                outlined destroy of [A]();
                                outlined destroy of [A]();
                                outlined destroy of [A]();
                                outlined destroy of [A]();
                                outlined destroy of [A]();
                                outlined destroy of [A]();
                                outlined destroy of [A]();
                                outlined destroy of [A]();
                                swift_bridgeObjectRelease();

                                swift_release();
                                swift_task_dealloc();
                                uint64_t v355 = v364;
                                goto LABEL_134;
                              }
                              v245 = *(void *)(v721 + 3048);
                              v246 = *(void *)(v721 + 2992);
                              uint64_t v247 = *(void *)(v721 + 2976);
                              v248 = *(void *)(v721 + 2880);
                              v249 = *(id *)(v721 + 2856);
                              uint64_t v250 = *(id *)(v721 + 2832);
                              v251 = *(void *)(v721 + 2816);
                              swift_bridgeObjectRelease();
                              swift_bridgeObjectRelease();
                              swift_bridgeObjectRelease();
                              swift_bridgeObjectRelease();
                              swift_bridgeObjectRelease();
                              swift_bridgeObjectRelease();
                              swift_bridgeObjectRelease();
                              swift_bridgeObjectRelease();
                              swift_bridgeObjectRelease();
                              swift_bridgeObjectRelease();
                              swift_bridgeObjectRelease();
                              swift_bridgeObjectRelease();
                              swift_bridgeObjectRelease();
                              swift_bridgeObjectRelease();
                              swift_bridgeObjectRelease();
                              swift_bridgeObjectRelease();
                              swift_bridgeObjectRelease();
                              swift_bridgeObjectRelease();
                              swift_bridgeObjectRelease();
                              swift_bridgeObjectRelease();
                              swift_bridgeObjectRelease();
                              swift_bridgeObjectRelease();
                              swift_bridgeObjectRelease();
                              swift_bridgeObjectRelease();
                              v252 = v721 + 184;
                              outlined release of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])(v721 + 184);
                              swift_release();
                              outlined destroy of [A]();
                              outlined destroy of [A]();
                              outlined destroy of [A]();
                              swift_bridgeObjectRelease();
                              swift_release();
                              outlined destroy of [A]();
                              swift_bridgeObjectRelease();
                              outlined destroy of [A]();
                              outlined destroy of [A]();
                              outlined destroy of [A]();
                              outlined destroy of [A]();
                              outlined destroy of [A]();
                              outlined destroy of [A]();
                              outlined destroy of [A]();
                              outlined destroy of [A]();
                              outlined destroy of [A]();
                              outlined destroy of [A]();
                              outlined destroy of [A]();
                              outlined destroy of [A]();
                              swift_bridgeObjectRelease();

                              swift_release();
                              swift_task_dealloc();
                              uint64_t v322 = v365;
                            }
                            else
                            {
                              v205 = v721;
                              *(unsigned char *)(v721 + 3670) = *(unsigned char *)(v721 + 3693);
                              *(unsigned char *)(v205 + 3671) = 1;
                              if (== infix<A>(_:_:)())
                              {
                                id v345 = PFLTask.evalModelNames(taskType:hyperParams:)();
                                uint64_t v346 = v440;
                                if (!v440)
                                {
                                  uint64_t v341 = *(_DWORD *)(v721 + 3632);
                                  uint64_t v338 = *(void *)(v721 + 2816);
                                  id v337 = *(void *)(v721 + 2672);
                                  uint64_t v339 = *(void *)(v721 + 1864);
                                  swift_bridgeObjectRetain();
                                  uint64_t v340 = *(void *)(v721 + 1904);
                                  swift_bridgeObjectRetain();
                                  id v336 = v721 + 184;
                                  outlined retain of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])(v721 + 184);
                                  v206._rawValue = v370;
                                  v207._rawValue = v371;
                                  uint64_t v342 = &v227;
                                  uint64_t v343 = NightingaleDPFLRunner.runEvals(evalModels:task:hyperParams:historicalPeriods:pregnancies:today:features:existingMetrics:)(v345, v337, v338, v339, v340, v341, v206, v207, v372, v373, v374, v375, v376, v377, v378, v379, v380, v381, v382,
                                           v383,
                                           v384,
                                           v385,
                                           v386,
                                           v387,
                                           v388,
                                           v389,
                                           v432,
                                           v439);
                                  id v344 = 0;
                                  id v328 = *(void *)(v721 + 3048);
                                  id v329 = *(void *)(v721 + 2992);
                                  uint64_t v330 = *(void *)(v721 + 2976);
                                  uint64_t v331 = *(void *)(v721 + 2880);
                                  uint64_t v332 = *(id *)(v721 + 2856);
                                  uint64_t v333 = *(id *)(v721 + 2832);
                                  uint64_t v334 = *(void *)(v721 + 2816);
                                  swift_bridgeObjectRelease();
                                  swift_bridgeObjectRelease();
                                  swift_bridgeObjectRelease();
                                  swift_bridgeObjectRelease();
                                  swift_bridgeObjectRelease();
                                  swift_bridgeObjectRelease();
                                  swift_bridgeObjectRelease();
                                  swift_bridgeObjectRelease();
                                  swift_bridgeObjectRelease();
                                  swift_bridgeObjectRelease();
                                  swift_bridgeObjectRelease();
                                  swift_bridgeObjectRelease();
                                  swift_bridgeObjectRelease();
                                  swift_bridgeObjectRelease();
                                  swift_bridgeObjectRelease();
                                  swift_bridgeObjectRelease();
                                  swift_bridgeObjectRelease();
                                  swift_bridgeObjectRelease();
                                  swift_bridgeObjectRelease();
                                  swift_bridgeObjectRelease();
                                  swift_bridgeObjectRelease();
                                  swift_bridgeObjectRelease();
                                  swift_bridgeObjectRelease();
                                  swift_bridgeObjectRelease();
                                  swift_bridgeObjectRelease();
                                  uint64_t v335 = v721 + 184;
                                  outlined release of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])(v721 + 184);
                                  swift_release();
                                  outlined destroy of [A]();
                                  outlined destroy of [A]();
                                  outlined destroy of [A]();
                                  swift_bridgeObjectRelease();
                                  swift_release();
                                  outlined destroy of [A]();
                                  swift_bridgeObjectRelease();
                                  outlined destroy of [A]();
                                  outlined destroy of [A]();
                                  outlined destroy of [A]();
                                  outlined destroy of [A]();
                                  outlined destroy of [A]();
                                  outlined destroy of [A]();
                                  outlined destroy of [A]();
                                  outlined destroy of [A]();
                                  outlined destroy of [A]();
                                  outlined destroy of [A]();
                                  outlined destroy of [A]();
                                  outlined destroy of [A]();
                                  swift_bridgeObjectRelease();

                                  swift_release();
                                  swift_task_dealloc();
                                  uint64_t v355 = v343;
LABEL_134:
                                  uint64_t v302 = v355;
                                  v295 = *(void *)(v721 + 2784);
                                  uint64_t v296 = *(void *)(v721 + 2776);
                                  v297 = *(void *)(v721 + 2752);
                                  v298 = *(void *)(v721 + 2744);
                                  uint64_t v299 = *(void *)(v721 + 2720);
                                  v300 = *(void *)(v721 + 2712);
                                  v301 = *(void *)(v721 + 2704);
                                  swift_task_dealloc();
                                  swift_task_dealloc();
                                  swift_task_dealloc();
                                  swift_task_dealloc();
                                  swift_task_dealloc();
                                  swift_task_dealloc();
                                  swift_task_dealloc();
                                  swift_task_dealloc();
                                  uint64_t v220 = v302;
                                  v221 = *(uint64_t (**)(uint64_t))(*(void *)(v721 + 1688) + 8);
                                  return v221(v220);
                                }
                                v237 = *(void *)(v721 + 3048);
                                uint64_t v238 = *(void *)(v721 + 2992);
                                v239 = *(void *)(v721 + 2976);
                                v240 = *(void *)(v721 + 2880);
                                uint64_t v241 = *(id *)(v721 + 2856);
                                v242 = *(id *)(v721 + 2832);
                                v243 = *(void *)(v721 + 2816);
                                swift_bridgeObjectRelease();
                                uint64_t v244 = v721 + 184;
                                outlined release of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])(v721 + 184);
                                swift_release();
                                outlined destroy of [A]();
                                outlined destroy of [A]();
                                outlined destroy of [A]();
                                swift_bridgeObjectRelease();
                                swift_release();
                                outlined destroy of [A]();
                                swift_bridgeObjectRelease();
                                outlined destroy of [A]();
                                outlined destroy of [A]();
                                outlined destroy of [A]();
                                outlined destroy of [A]();
                                outlined destroy of [A]();
                                outlined destroy of [A]();
                                outlined destroy of [A]();
                                outlined destroy of [A]();
                                outlined destroy of [A]();
                                outlined destroy of [A]();
                                outlined destroy of [A]();
                                outlined destroy of [A]();
                                swift_bridgeObjectRelease();

                                swift_release();
                                swift_task_dealloc();
                                uint64_t v322 = v346;
                              }
                              else
                              {
                                uint64_t v208 = v721;
                                *(unsigned char *)(v721 + 3672) = *(unsigned char *)(v721 + 3693);
                                *(unsigned char *)(v208 + 3673) = 2;
                                if (== infix<A>(_:_:)())
                                {
                                  uint64_t v326 = *(void *)(v721 + 2992);
                                  uint64_t v325 = *(_DWORD *)(v721 + 3636);
                                  uint64_t v323 = *(void *)(v721 + 2816);
                                  uint64_t v324 = *(void *)(v721 + 2680);
                                  swift_retain();
                                  swift_retain();
                                  swift_retain();
                                  uint64_t v209 = swift_task_alloc();
                                  uint64_t v210 = v323;
                                  uint64_t v211 = v324;
                                  v212 = v325;
                                  v213 = v326;
                                  uint64_t v214 = v721;
                                  uint64_t v327 = v209;
                                  *(void *)(v721 + 3480) = v209;
                                  *(void *)(v209 + 16) = v210;
                                  *(void *)(v209 + 24) = v214 + 1904;
                                  *(void *)(v209 + 32) = v211;
                                  *(_DWORD *)(v209 + 40) = v212;
                                  *(void *)(v209 + 48) = v214 + 1776;
                                  *(void *)(v209 + 56) = v214 + 1784;
                                  *(void *)(v209 + 64) = v214 + 1792;
                                  *(void *)(v209 + 72) = v214 + 1800;
                                  *(void *)(v209 + 80) = v214 + 1864;
                                  *(void *)(v209 + 88) = v213;
                                  v215 = (void *)swift_task_alloc();
                                  *(void *)(v721 + 3488) = v215;
                                  v216 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt32, UInt32));
                                  uint64_t v217 = v721;
                                  uint64_t v86 = v737;
                                  uint64_t v87 = v327;
                                  uint64_t v88 = v216;
                                  void *v215 = *(void *)(v721 + 1688);
                                  v215[1] = NightingaleDPFLRunner.run(task:useCase:context:);
                                  v90 = v217 + 1556;
                                  uint64_t v91 = 9;
                                  v92 = 1;
                                  return NightingaleDPFLRunner.sendLocationAsync<A>(location:force:work:)(v90, v91, v92, v86, v87, v88);
                                }
                                v313 = *(void *)(v721 + 3048);
                                uint64_t v314 = *(void *)(v721 + 2992);
                                uint64_t v315 = *(void *)(v721 + 2976);
                                uint64_t v316 = *(void *)(v721 + 2880);
                                uint64_t v317 = *(id *)(v721 + 2856);
                                uint64_t v318 = *(id *)(v721 + 2832);
                                uint64_t v319 = *(void *)(v721 + 2816);
                                lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
                                uint64_t v321 = swift_allocError();
                                void *v218 = 48;
                                swift_willThrow();
                                swift_bridgeObjectRelease();
                                uint64_t v320 = v721 + 184;
                                outlined release of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])(v721 + 184);
                                swift_release();
                                outlined destroy of [A]();
                                outlined destroy of [A]();
                                outlined destroy of [A]();
                                swift_bridgeObjectRelease();
                                swift_release();
                                outlined destroy of [A]();
                                swift_bridgeObjectRelease();
                                outlined destroy of [A]();
                                outlined destroy of [A]();
                                outlined destroy of [A]();
                                outlined destroy of [A]();
                                outlined destroy of [A]();
                                outlined destroy of [A]();
                                outlined destroy of [A]();
                                outlined destroy of [A]();
                                outlined destroy of [A]();
                                outlined destroy of [A]();
                                outlined destroy of [A]();
                                outlined destroy of [A]();
                                swift_bridgeObjectRelease();

                                swift_release();
                                swift_task_dealloc();
                                uint64_t v322 = v321;
                              }
                            }
                          }
LABEL_148:
                          uint64_t v230 = *(void *)(v721 + 2784);
                          v231 = *(void *)(v721 + 2776);
                          uint64_t v232 = *(void *)(v721 + 2752);
                          v233 = *(void *)(v721 + 2744);
                          v234 = *(void *)(v721 + 2720);
                          uint64_t v235 = *(void *)(v721 + 2712);
                          v236 = *(void *)(v721 + 2704);
                          swift_task_dealloc();
                          swift_task_dealloc();
                          swift_task_dealloc();
                          swift_task_dealloc();
                          swift_task_dealloc();
                          swift_task_dealloc();
                          swift_task_dealloc();
                          swift_task_dealloc();
                          uint64_t v220 = v557;
                          v221 = *(uint64_t (**)(uint64_t))(*(void *)(v721 + 1688) + 8);
                          return v221(v220);
                        }
                        goto LABEL_154;
                      }
LABEL_153:
                      __break(1u);
LABEL_154:
                      __break(1u);
                      return result;
                    }
                  }
                  __break(1u);
                  goto LABEL_153;
                }
LABEL_133:
                v303 = *(void *)(v721 + 3048);
                v304 = *(void *)(v721 + 2992);
                uint64_t v305 = *(void *)(v721 + 2976);
                v306 = *(void *)(v721 + 2880);
                v307 = *(id *)(v721 + 2856);
                v308 = *(id *)(v721 + 2832);
                uint64_t v309 = *(void *)(v721 + 2816);
                lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
                Swift::Int v310 = swift_allocError();
                long long *v219 = 34;
                swift_willThrow();
                outlined destroy of [A]();
                outlined destroy of [A]();
                swift_bridgeObjectRelease();
                swift_release();
                outlined destroy of [A]();
                swift_bridgeObjectRelease();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                swift_bridgeObjectRelease();

                swift_release();
                uint64_t v322 = v310;
                goto LABEL_148;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

{
  uint64_t v1;
  id v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  Swift::Int v51;
  Swift::Int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v59;
  int v62;
  uint64_t v63;
  int v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  unsigned int v75;
  void *v76;
  uint64_t v77;
  char v78;
  int *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  char v84;
  unsigned char *v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  int v94;
  void *v95;
  uint64_t v96;
  unsigned char *v97;
  uint64_t v98;
  Swift::Int v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  int v105;
  uint64_t v107;
  int v110;
  uint64_t v111;
  int v113;
  uint64_t v114;
  unsigned int v115;
  unsigned int v116;
  uint64_t v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char v137;
  void *v138;
  uint64_t v139;
  int v140;
  uint64_t v141;
  int v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char v149;
  void *v150;
  uint64_t v151;
  Swift::Int v152;
  uint64_t v153;
  uint64_t v154;
  void *v155;
  uint64_t v156;
  void *v157;
  void *v158;
  void *v159;
  void *v160;
  void *v161;
  void *v162;
  void *v163;
  void *v164;
  void *v165;
  void *v166;
  void *v167;
  void *v168;
  void *v169;
  void *v170;
  void *v171;
  void *v172;
  void *v173;
  void *v174;
  void *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  void *v180;
  long long *v181;
  uint64_t v182;
  void *v183;
  long long *v184;
  uint64_t v185;
  void *v186;
  long long *v187;
  uint64_t v188;
  void *v189;
  long long *v190;
  uint64_t v191;
  void *v192;
  long long *v193;
  uint64_t v194;
  void *v195;
  long long *v196;
  void *v197;
  uint64_t v198;
  long long *v199;
  uint64_t v200;
  void *v201;
  long long *v202;
  uint64_t v203;
  void *v204;
  long long *v205;
  uint64_t v206;
  void *v207;
  long long *v208;
  uint64_t v209;
  void *v210;
  long long *v211;
  uint64_t v212;
  void *v213;
  long long *v214;
  uint64_t v215;
  void *v216;
  long long *v217;
  uint64_t v218;
  void *v219;
  long long *v220;
  uint64_t v221;
  void *v222;
  long long *v223;
  uint64_t v224;
  void *v225;
  long long *v226;
  uint64_t v227;
  void *v228;
  long long *v229;
  uint64_t v230;
  void *v231;
  long long *v232;
  uint64_t v233;
  void *v234;
  long long *v235;
  void *v236;
  uint64_t v237;
  char v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  Swift::OpaquePointer v242;
  Swift::OpaquePointer v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  int v248;
  uint64_t v249;
  uint64_t v250;
  void *v251;
  uint64_t v252;
  uint64_t v253;
  unsigned char *v254;
  unsigned char *v255;
  uint64_t v256;
  char v257;
  uint64_t v258;
  void *v259;
  long long *v260;
  uint64_t v261;
  void *v262;
  long long *v263;
  uint64_t v264;
  void *v265;
  long long *v266;
  uint64_t v267;
  void *v268;
  long long *v269;
  uint64_t v270;
  void *v271;
  long long *v272;
  uint64_t v273;
  void *v274;
  long long *updated;
  void *v276;
  uint64_t v277;
  Swift::Int v278;
  unsigned char *v279;
  uint64_t v280;
  uint64_t (*v281)(uint64_t);
  uint64_t v282;
  void *v283;
  long long *v284;
  uint64_t v285;
  void *v286;
  long long *Duration;
  uint64_t v288;
  void *v289;
  long long *v290;
  uint64_t v291;
  void *v292;
  long long *v293;
  uint64_t v294;
  void *v295;
  long long *v296;
  void *v297;
  uint64_t v298;
  id v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  unsigned char *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  unsigned char **v312;
  void *v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  Swift::Int v318;
  void *v319;
  uint64_t v320;
  char v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  id v336;
  id v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  id v344;
  id v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  id v352;
  id v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  id v358;
  id v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  id v364;
  void *object;
  uint64_t v366;
  uint64_t v367;
  int v368;
  uint64_t v369;
  void *v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint8_t *buf;
  uint64_t v394;
  uint64_t v395;
  int v396;
  unsigned char **v397;
  uint64_t v398;
  uint64_t v399;
  void *v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  unint64_t v405;
  unint64_t v406;
  uint64_t v407;
  uint32_t size;
  int v409;
  os_log_t oslog;
  uint64_t v411;
  id v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  id v416;
  id v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  void (*v422)(uint64_t);
  id v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  id v427;
  id v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  void (*v434)(uint64_t);
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  id v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  int v444;
  int v445;
  uint64_t v446;
  int started;
  id v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  id v452;
  id v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  void *v461;
  uint64_t v462;
  void *v463;
  uint64_t v464;
  uint64_t v465;
  void *v466;
  uint64_t v467;
  void *v468;
  uint64_t v469;
  void *v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  int v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  id v494;
  id v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  id v501;
  id v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  void *v506;
  uint64_t v507;
  void *v508;
  uint64_t v509;
  void *v510;
  uint64_t v511;
  void *v512;
  uint64_t v513;
  uint64_t v514;
  void *v515;
  uint64_t v516;
  void *v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  id v534;
  id v535;
  uint64_t v536;
  uint64_t v537;
  int v538;
  int v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  id v544;
  id v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  int v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  id v558;
  id v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  int v567;
  uint64_t *v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  id v577;
  id v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  int v587;
  uint64_t v588;
  uint64_t *v589;
  uint64_t v590;
  uint64_t v591;
  int v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  void *v596;
  void *v597;
  Swift::OpaquePointer v598;
  Swift::OpaquePointer v599;
  Swift::OpaquePointer v600;
  Swift::OpaquePointer v601;
  Swift::OpaquePointer v602;
  Swift::OpaquePointer v603;
  Swift::OpaquePointer v604;
  Swift::OpaquePointer v605;
  Swift::OpaquePointer v606;
  Swift::OpaquePointer v607;
  Swift::OpaquePointer v608;
  Swift::OpaquePointer v609;
  Swift::OpaquePointer v610;
  Swift::OpaquePointer v611;
  Swift::OpaquePointer v612;
  Swift::OpaquePointer v613;
  uint64_t v614;
  uint64_t v615;
  void *v616;
  uint64_t v617;
  uint64_t v618;
  void *v619;
  uint64_t v620;
  void *v621;
  uint64_t v622;
  void *v623;
  uint64_t v624;
  void *v625;
  uint64_t v626;
  void *v627;
  void *v628;
  void *v629;
  uint64_t v630;
  void *v631;
  uint64_t v632;
  uint64_t v633;
  void *v634;
  uint64_t v635;
  void *v636;
  uint64_t v637;
  void *v638;
  uint64_t v639;
  void *v640;
  uint64_t v641;
  void *v642;
  uint64_t v643;
  void *v644;
  uint64_t v645;
  void *v646;
  uint64_t v647;
  void *v648;
  uint64_t v649;
  void *v650;
  uint64_t v651;
  void *v652;
  void *v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  void *v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  void *v667;
  uint64_t v668;
  uint64_t v669;
  void *v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  int v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  int v705;
  uint64_t v706;
  uint64_t v707;
  int v708;
  uint64_t v709;
  int v710;
  int v711;
  uint64_t v712;
  uint64_t v713;
  int v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  int v746;
  int v747;
  int v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  int v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  int v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  int v792;
  uint64_t v793;
  unsigned int v794;
  unint64_t v795;
  unint64_t v796;
  uint64_t v797;
  unint64_t v798;
  uint64_t v799;
  uint64_t v800;
  unsigned int v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  unint64_t v807;
  unint64_t v808;
  uint64_t v809;
  unint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  int v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  int v818;
  int v819;
  int v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  int v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  int v830;
  int v831;
  int v832;
  void *v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  int v837;
  void *v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  id v871;
  id v872;
  uint64_t v873;
  uint64_t v874;
  int v875;
  int v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  double v880;
  uint64_t v881;
  int v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  int v886;
  int v887;
  int v888;
  uint64_t v889;
  uint64_t v890;
  int v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  int v895;
  int v896;
  int v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  void *v901;
  uint64_t v902;
  int v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  id v910;
  id v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t v914;
  int v915;
  int v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t v919;
  uint64_t v920;
  int v921;
  uint64_t v922;
  int v923;
  uint64_t v924;
  unsigned int v925;
  unint64_t v926;
  unint64_t v927;
  uint64_t v928;
  unint64_t v929;
  uint64_t v930;
  uint64_t v931;
  unsigned int v932;
  uint64_t v933;
  uint64_t v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  unint64_t v938;
  unint64_t v939;
  uint64_t v940;
  unint64_t v941;
  uint64_t v942;
  uint64_t v943;
  uint64_t v944;
  int v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  int v949;
  int v950;
  int v951;
  uint64_t v952;
  uint64_t v953;
  int v954;
  uint64_t v955;
  uint64_t v956;
  uint64_t v957;
  int v958;
  int v959;
  int v960;
  void *v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  int v965;
  uint64_t v966;
  uint64_t v967;
  uint64_t v968;
  void *v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  uint64_t v991;
  uint64_t v992;
  uint64_t v993;
  uint64_t v994;
  uint64_t v995;
  uint64_t v996;
  uint64_t v997;
  uint64_t v998;
  uint64_t v999;
  unint64_t v1000;
  uint64_t v1001;
  uint64_t v1002;
  uint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  uint64_t v1007;
  void *v1008;
  uint64_t v1009;
  unint64_t v1010;
  id v1011;
  uint64_t v1012;
  uint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  uint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  int v1019;
  int v1020;
  uint64_t v1021;
  uint64_t v1022;
  uint64_t v1023;
  void (*v1024)(void);
  uint64_t v1025;
  uint64_t v1026;
  int v1027;
  int v1028;
  uint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  void (*v1032)(void);
  uint64_t v1033;
  void *v1034;
  uint64_t v1035;
  uint64_t v1036;
  uint64_t v1037;
  uint64_t v1038;
  int v1039;
  uint64_t v1040;
  uint64_t v1041;
  uint64_t v1042;
  void *v1043;
  uint64_t v1044;
  int v1045;
  uint64_t v1046;
  uint64_t v1047;
  uint64_t i;
  uint64_t v1049;
  id v1050;
  uint64_t v1051;
  uint64_t v1052;
  uint64_t v1053;
  void *v1054;
  uint64_t v1055;
  uint64_t v1056;
  id v1057;
  id v1058;
  uint64_t v1059;
  uint64_t v1060;
  uint64_t (*v1061)(uint64_t (**)(uint64_t, uint64_t, uint64_t));
  uint64_t (*v1062)@<X0>(uint64_t *@<X8>);
  uint64_t (*v1063)(uint64_t (**)(uint64_t, uint64_t, uint64_t));
  const char *v1064;
  const char *v1065;
  const char *v1066;
  uint64_t (*v1067)(void *);
  BOOL (*v1068)(char *);
  BOOL (*v1069)(char *);
  BOOL (*v1070)(char *);
  BOOL (*v1071)(char *);
  BOOL (*v1072)(char *);
  BOOL (*v1073)(char *);
  BOOL (*v1074)(void *, void *);
  BOOL (*v1075)(void *, void *);
  const char *v1076;
  uint64_t (*v1077)@<X0>(void *@<X8>);
  uint64_t (*v1078)@<X0>(uint64_t@<X1>, uint64_t@<X8>);
  int *v1079;
  int *v1080;
  int *v1081;
  int *v1082;
  BOOL (*v1083)(void *, void *);
  BOOL (*v1084)(void *, void *);
  void *v1085;
  BOOL (*v1086)(void *, void *);
  BOOL (*v1087)(void *, void *);
  int *v1088;
  uint64_t v1089;
  uint64_t v1090;
  id v1091;
  int v1092;
  uint64_t v1093;
  uint64_t v1094;
  uint64_t v1095;
  uint64_t v1096;
  uint64_t v1097;
  uint64_t v1098;
  char v1099;
  uint64_t v1100;
  uint64_t v1101;

  v1100 = v1;
  MEMORY[0x270FA5388](a1);
  v1060 = v1;
  v1061 = partial apply for closure #1 in osLogInternal(_:log:type:);
  v1062 = partial apply for closure #8 in NightingaleDPFLRunner.run(task:useCase:context:);
  v1063 = partial apply for closure #1 in osLogInternal(_:log:type:);
  v1064 = "Fatal error";
  v1065 = "Range requires lowerBound <= upperBound";
  v1066 = "Swift/Range.swift";
  v1067 = partial apply for closure #9 in NightingaleDPFLRunner.run(task:useCase:context:);
  v1068 = closure #10 in NightingaleDPFLRunner.run(task:useCase:context:);
  v1069 = closure #11 in NightingaleDPFLRunner.run(task:useCase:context:);
  v1070 = closure #12 in NightingaleDPFLRunner.run(task:useCase:context:);
  v1071 = closure #13 in NightingaleDPFLRunner.run(task:useCase:context:);
  v1072 = closure #14 in NightingaleDPFLRunner.run(task:useCase:context:);
  v1073 = closure #15 in NightingaleDPFLRunner.run(task:useCase:context:);
  v1074 = closure #16 in NightingaleDPFLRunner.run(task:useCase:context:);
  v1075 = closure #16 in NightingaleDPFLRunner.run(task:useCase:context:);
  v1076 = "Swift/ClosedRange.swift";
  v1077 = partial apply for closure #35 in NightingaleDPFLRunner.run(task:useCase:context:);
  v1078 = closure #36 in NightingaleDPFLRunner.run(task:useCase:context:);
  v1079 = (int *)&async function pointer to partial apply for closure #37 in NightingaleDPFLRunner.run(task:useCase:context:);
  v1080 = (int *)&async function pointer to partial apply for closure #34 in NightingaleDPFLRunner.run(task:useCase:context:);
  v1081 = (int *)&async function pointer to partial apply for closure #33 in NightingaleDPFLRunner.run(task:useCase:context:);
  v1082 = (int *)&async function pointer to partial apply for closure #32 in NightingaleDPFLRunner.run(task:useCase:context:);
  v1083 = closure #20 in NightingaleDPFLRunner.run(task:useCase:context:);
  v1084 = closure #20 in NightingaleDPFLRunner.run(task:useCase:context:);
  v1085 = &async function pointer to partial apply for closure #22 in NightingaleDPFLRunner.run(task:useCase:context:);
  v1086 = closure #16 in NightingaleDPFLRunner.run(task:useCase:context:);
  v1087 = closure #16 in NightingaleDPFLRunner.run(task:useCase:context:);
  v1088 = (int *)&async function pointer to partial apply for closure #18 in NightingaleDPFLRunner.run(task:useCase:context:);
  v1091 = *(id *)(v1 + 3024);
  v1092 = *(unsigned __int8 *)(v1 + 3693);
  v1089 = *(void *)(v1 + 2816);
  v1090 = *(void *)(v1 + 2680);
  *(void *)(v1 + 1688) = v1;
  swift_task_dealloc();
  swift_release();
  swift_release();
  uint64_t v2 = v1091;
  uint64_t v3 = v1092;
  v1095 = v1 + 1928;
  *(void *)(v1 + 1928) = v1091;
  v1094 = v1 + 1585;
  *(unsigned char *)(v1 + 1585) = v3;
  v1093 = v1 + 1586;
  *(unsigned char *)(v1 + 1586) = 4;
  lazy protocol witness table accessor for type NightingalePFLTaskType and conformance NightingalePFLTaskType();
  if (== infix<A>(_:_:)())
  {
    uint64_t v462 = *(void *)(v1060 + 2984);
    Swift::OpaquePointer v471 = *(void *)(v1060 + 2968);
    v467 = *(void *)(v1060 + 2960);
    Swift::OpaquePointer v475 = *(void *)(v1060 + 2880);
    Swift::OpaquePointer v474 = *(void *)(v1060 + 2872);
    v460 = *(void *)(v1060 + 2864);
    uint64_t v465 = *(void *)(v1060 + 2824);
    Swift::OpaquePointer v478 = *(void *)(v1060 + 2816);
    uint64_t v455 = *(void *)(v1060 + 1904);
    swift_bridgeObjectRetain();
    uint64_t v456 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Pregnancy);
    Swift::OpaquePointer v476 = MEMORY[0x25A2C0810](v455);
    swift_bridgeObjectRelease();
    uint64_t v282 = v1060;
    int v458 = v1060 + 3688;
    *(unsigned char *)(v1060 + 3688) = 7;
    uint64_t v457 = *(void *)(v282 + 1904);
    swift_bridgeObjectRetain();
    uint64_t v459 = MEMORY[0x25A2C0810](v457, v456);
    swift_bridgeObjectRelease();
    Swift::OpaquePointer v477 = Array.init(repeating:count:)();
    Swift::OpaquePointer v472 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any));
    Swift::OpaquePointer v473 = _allocateUninitializedArray<A>(_:)();
    Swift::OpaquePointer v470 = v283;
    uint64_t v284 = NightingaleDPFLRunner.keyMetricsCycleTrackingCheckDurationS.unsafeMutableAddressor();
    outlined init with copy of String(v284, v470);
    uint64_t v285 = v460;
    v286 = v470;
    uint64_t v464 = MEMORY[0x263F8D538];
    v470[5] = MEMORY[0x263F8D538];
    v286[2] = v285;
    uint64_t v461 = v286 + 6;
    Duration = NightingaleDPFLRunner.keyMetricsPregnanciesQueryDurationS.unsafeMutableAddressor();
    outlined init with copy of String(Duration, v461);
    uint64_t v288 = v462;
    char v289 = v470;
    v470[11] = v464;
    v289[8] = v288;
    int v463 = v289 + 12;
    uint64_t v290 = NightingaleDPFLRunner.keyMetricsIterationElapsedTime.unsafeMutableAddressor();
    outlined init with copy of String(v290, v463);
    v291 = v465;
    v292 = v470;
    v470[17] = v464;
    v292[14] = v291;
    uint64_t v466 = v292 + 18;
    uint64_t v293 = NightingaleDPFLRunner.keyMetricsNumberOfAllPregnancies.unsafeMutableAddressor();
    outlined init with copy of String(v293, v466);
    v294 = v467;
    v295 = v470;
    Swift::OpaquePointer v469 = MEMORY[0x263F8D6C8];
    v470[23] = MEMORY[0x263F8D6C8];
    v295[20] = v294;
    v468 = v295 + 24;
    uint64_t v296 = NightingaleDPFLRunner.keyMetricsNumberOfPregnancyInitializerFailed.unsafeMutableAddressor();
    outlined init with copy of String(v296, v468);
    v297 = v470;
    v298 = v471;
    v470[29] = v469;
    v297[26] = v298;
    _finalizeUninitializedArray<A>(_:)();
    Swift::OpaquePointer v479 = Dictionary.init(dictionaryLiteral:)();
    Swift::OpaquePointer v480 = NightingaleDPFLRunner.runPregnanciesDistribution(hyperParams:modelPath:numberOfRawPregnancies:invalidReasons:swtAvailability:existingMetrics:)(v478, v474, v475, v476, v477, v479, -1.0);
    Swift::OpaquePointer v481 = 0;
    id v448 = *(id *)(v1060 + 3024);
    id v449 = *(void *)(v1060 + 2992);
    uint64_t v450 = *(void *)(v1060 + 2976);
    uint64_t v451 = *(void *)(v1060 + 2880);
    uint64_t v452 = *(id *)(v1060 + 2856);
    uint64_t v453 = *(id *)(v1060 + 2832);
    uint64_t v454 = *(void *)(v1060 + 2816);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_release();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();

    swift_release();
    int v581 = v480;
    goto LABEL_131;
  }
  uint64_t v446 = *(void *)(v1060 + 2816);
  int started = HyperParams.useFactorStartDateAsLMP.getter();
  swift_retain();
  if (started) {
    uint64_t v445 = 1;
  }
  else {
    uint64_t v445 = HyperParams.useTestDateAsLMP.getter();
  }
  uint64_t v444 = v445;
  swift_release();
  if ((v445 & 1) == 0)
  {
    uint64_t v440 = *(id *)(v1060 + 3024);
    uint64_t v442 = *(void *)(v1060 + 2728);
    uint64_t v443 = *(void *)(v1060 + 2720);
    uint64_t v299 = v440;
    uint64_t v441 = v1060 + 1936;
    *(void *)(v1060 + 1936) = v440;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if (swift_dynamicCast()) {
      (*(void (**)(void, void, uint64_t, void))(*(void *)(v1060 + 2736) + 56))(*(void *)(v1060 + 2720), 0, 1, *(void *)(v1060 + 2728));
    }
    else {
      (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v1060 + 2736) + 56))(*(void *)(v1060 + 2720), 1, 1, *(void *)(v1060 + 2728));
    }
    if ((*(unsigned int (**)(void, uint64_t, void))(*(void *)(v1060 + 2736) + 48))(*(void *)(v1060 + 2720), 1, *(void *)(v1060 + 2728)) == 1)
    {
      outlined destroy of PFLError?(*(void *)(v1060 + 2720));
    }
    else
    {
      uint64_t v436 = *(void *)(v1060 + 2752);
      v439 = *(void *)(v1060 + 2744);
      v300 = *(void *)(v1060 + 2736);
      int v438 = *(void *)(v1060 + 2728);
      uint64_t v435 = v300;
      uint64_t v437 = v300;
      (*(void (**)(void))(v300 + 32))();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v435 + 16))(v439, v436, v438);
      if ((*(unsigned int (**)(uint64_t, uint64_t))(v437 + 88))(v439, v438) == *MEMORY[0x263F61130])
      {
        uint64_t v423 = *(id *)(v1060 + 3024);
        uint64_t v424 = *(void *)(v1060 + 2992);
        uint64_t v425 = *(void *)(v1060 + 2976);
        uint64_t v426 = *(void *)(v1060 + 2880);
        uint64_t v427 = *(id *)(v1060 + 2856);
        uint64_t v428 = *(id *)(v1060 + 2832);
        id v429 = *(void *)(v1060 + 2816);
        uint64_t v419 = *(void *)(v1060 + 2752);
        v303 = *(void *)(v1060 + 2744);
        v304 = *(void *)(v1060 + 2736);
        uint64_t v420 = *(void *)(v1060 + 2728);
        int v422 = *(void (**)(uint64_t))(v304 + 8);
        uint64_t v421 = v304 + 8;
        v422(v303);
        lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
        id v430 = swift_allocError();
        *uint64_t v305 = 5;
        swift_willThrow();
        ((void (*)(uint64_t, uint64_t))v422)(v419, v420);

        swift_release();
        outlined destroy of [A]();
        swift_bridgeObjectRelease();
        outlined destroy of [A]();
        outlined destroy of [A]();
        outlined destroy of [A]();
        outlined destroy of [A]();
        outlined destroy of [A]();
        outlined destroy of [A]();
        outlined destroy of [A]();
        outlined destroy of [A]();
        outlined destroy of [A]();
        outlined destroy of [A]();
        outlined destroy of [A]();
        outlined destroy of [A]();
        swift_bridgeObjectRelease();

        swift_release();
        v914 = v430;
        goto LABEL_161;
      }
      uint64_t v431 = *(void *)(v1060 + 2752);
      v301 = *(void *)(v1060 + 2744);
      uint64_t v302 = *(void *)(v1060 + 2736);
      uint64_t v432 = *(void *)(v1060 + 2728);
      uint64_t v434 = *(void (**)(uint64_t))(v302 + 8);
      uint64_t v433 = v302 + 8;
      v434(v301);
      ((void (*)(uint64_t, uint64_t))v434)(v431, v432);
    }
    uint64_t v412 = *(id *)(v1060 + 3024);
    uint64_t v413 = *(void *)(v1060 + 2992);
    uint64_t v414 = *(void *)(v1060 + 2976);
    id v415 = *(void *)(v1060 + 2880);
    id v416 = *(id *)(v1060 + 2856);
    uint64_t v417 = *(id *)(v1060 + 2832);
    uint64_t v418 = *(void *)(v1060 + 2816);
    swift_willThrow();

    swift_release();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();

    swift_release();
    v914 = *(void *)(v1060 + 3024);
LABEL_161:
    uint64_t v325 = *(void *)(v1060 + 2784);
    uint64_t v326 = *(void *)(v1060 + 2776);
    uint64_t v327 = *(void *)(v1060 + 2752);
    id v328 = *(void *)(v1060 + 2744);
    id v329 = *(void *)(v1060 + 2720);
    uint64_t v330 = *(void *)(v1060 + 2712);
    uint64_t v331 = *(void *)(v1060 + 2704);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    int v280 = v906;
    uint64_t v281 = *(uint64_t (**)(uint64_t))(*(void *)(v1060 + 1688) + 8);
    return v281(v280);
  }
  v306 = *(void *)(v1060 + 2712);
  v307 = *(void *)(v1060 + 2696);
  uint64_t v404 = *(void *)(v1060 + 2688);
  uint64_t v403 = v307;
  v308 = Logging.default.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v403 + 16))(v306, v308, v404);
  oslog = (os_log_t)Logger.logObject.getter();
  int v409 = static os_log_type_t.debug.getter();
  uint64_t v407 = v1060 + 1944;
  *(void *)(v1060 + 1944) = 2;
  id v405 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  id v406 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v1060 + 1588);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v411 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(oslog, (os_log_type_t)v409))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v391 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v392 = 0;
    uint64_t v394 = createStorage<A>(capacity:type:)(0);
    uint64_t v309 = createStorage<A>(capacity:type:)(0);
    Swift::Int v310 = v394;
    v311 = v1060;
    uint64_t v395 = v309;
    uint64_t v312 = (unsigned char **)(v1060 + 2568);
    uint64_t v397 = (unsigned char **)(v1060 + 2568);
    *(void *)(v1060 + 2568) = buf;
    uint64_t v398 = v311 + 2576;
    *(void *)(v311 + 2576) = v310;
    uint64_t v399 = v311 + 2584;
    *(void *)(v311 + 2584) = v309;
    uint64_t v396 = 0;
    serialize(_:at:)(0, v312);
    serialize(_:at:)(0, v397);
    *(void *)(v1060 + 2592) = v411;
    v313 = (void *)swift_task_alloc();
    uint64_t v314 = v398;
    uint64_t v315 = v399;
    uint64_t v400 = v313;
    v313[2] = v397;
    v313[3] = v314;
    v313[4] = v315;
    uint64_t v401 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    uint64_t v402 = 0;
    swift_task_dealloc();
    _os_log_impl(&dword_257C1A000, oslog, (os_log_type_t)v409, "Ignore failed to query updating features.", buf, size);
    v388 = 0;
    destroyStorage<A>(_:count:)(v394, 0, v391);
    destroyStorage<A>(_:count:)(v395, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x25A2C0D00](buf, MEMORY[0x263F8E778]);
  }
  else
  {
    uint64_t v389 = 0;
  }
  swift_bridgeObjectRelease();
  uint64_t v390 = 0;
  uint64_t v364 = *(id *)(v1060 + 3024);
  uint64_t v362 = *(void *)(v1060 + 2712);
  uint64_t v316 = *(void *)(v1060 + 2696);
  uint64_t v363 = *(void *)(v1060 + 2688);
  int v361 = v316;

  (*(void (**)(uint64_t, uint64_t))(v361 + 8))(v362, v363);
  v386 = v1060 + 1696;
  id v373 = v1060 + 1752;
  uint64_t v374 = v1060 + 1760;
  uint64_t v375 = v1060 + 1768;
  uint64_t v376 = v1060 + 3608;
  uint64_t v387 = v1060 + 1656;
  v377 = v1060 + 3512;
  uint64_t v378 = v1060 + 1872;
  v379 = v1060 + 1880;
  uint64_t v380 = v1060 + 1888;
  v381 = v1060 + 3520;
  uint64_t v382 = v1060 + 1896;
  v383 = v1060 + 1912;
  id v372 = *(void *)(v1060 + 2992);
  uint64_t v385 = *(void *)(v1060 + 2904);
  uint64_t v369 = *(void *)(v1060 + 2680);
  id v366 = NightingaleDPFLRunner.performanceMeasure.getter();
  uint64_t v368 = 1;
  object = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("QueryUpdatingFeatures", 0x15uLL, 1)._object;
  dispatch thunk of PerformanceMeasure.finish(_:)();
  uint64_t v367 = v317;
  *(void *)(v1060 + 3032) = v317;
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v384 = v1060 + 1952;
  *(void *)(v1060 + 1952) = v367;
  uint64_t v318 = default argument 1 of NightingaleDPFLRunner.sendLocation(_:_:)();
  NightingaleDPFLRunner.sendLocation(_:_:)(NightingaleTraining_NightingaleDReachLocation_queryUpdatingFeaturesCompleted, v318);
  uint64_t v371 = NightingaleDPFLRunner.performanceMeasure.getter();
  uint64_t v370 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("UpdatePregnancies", 0x11uLL, v368 & 1)._object;
  dispatch thunk of PerformanceMeasure.start(_:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_retain();
  uint64_t v319 = (void *)swift_task_alloc();
  uint64_t v320 = v1060;
  v1054 = v319;
  v319[2] = v372;
  v319[3] = v320 + 1776;
  v319[4] = v320 + 1784;
  v319[5] = v320 + 1792;
  v319[6] = v320 + 1800;
  uint64_t v321 = default argument 1 of NightingaleDPFLRunner.sendLocationAsync<A>(location:force:work:)();
  NightingaleDPFLRunner.sendLocation<A>(location:force:work:)(5, v321 & 1, (uint64_t)v1054, v385, v1060 + 1960);
  v1055 = 0;
  v1057 = 0;
  v1056 = *(void *)(v1060 + 2992);
  swift_task_dealloc();
  swift_release();
  *(void *)(v1060 + 1864) = *(void *)(v1060 + 1960);
  swift_bridgeObjectRelease();
  v1058 = v1057;
  v1059 = 0;
  v1049 = v1059;
  v1050 = v1058;
  v1052 = *(void *)(v1060 + 1904);
  swift_bridgeObjectRetain();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Pregnancy);
  uint64_t v5 = v1052;
  v1051 = v4;
  *(void *)(v1060 + 3040) = v4;
  v1053 = MEMORY[0x25A2C0810](v5);
  swift_bridgeObjectRelease();
  if (v1053 < 0)
  {
    LOBYTE(v322) = 2;
    uint64_t v323 = 754;
    LODWORD(v324) = 0;
    return _assertionFailure(_:_:file:line:flags:)();
  }
  v1096 = 0;
  v1097 = v1053;
  unint64_t v7 = specialized Collection<>.makeIterator()();
  uint64_t v8 = v1060;
  uint64_t v9 = v7;
  uint64_t v10 = v1049;
  *(void *)(v1060 + 1592) = v9;
  *(void *)(v8 + 1600) = v11;
  *(void *)(v8 + 1608) = v12;
  for (uint64_t i = v10; ; uint64_t i = v1046)
  {
    v1046 = i;
    v1098 = specialized IndexingIterator.next()();
    v1099 = v13 & 1;
    v1047 = v1098;
    if (v13) {
      break;
    }
    unint64_t v14 = v1060;
    v1044 = v1060 + 2528;
    *(void *)(v1060 + 2528) = v1047;
    uint64_t v1043 = (void *)(v14 + 872);
    Array.subscript.getter();
    uint64_t v1038 = *(void *)(v1060 + 896);
    uint64_t v1035 = *(void *)(v1060 + 904);
    uint64_t v1034 = __swift_project_boxed_opaque_existential_1(v1043, v1038);
    uint64_t v1036 = *(void *)(v1038 - 8);
    char v1037 = v1038 - 8;
    uint64_t v1042 = swift_task_alloc();
    (*(void (**)(uint64_t, void *, uint64_t))(v1036 + 16))(v1042, v1034, v1038);
    uint64_t v1039 = (*(uint64_t (**)(uint64_t))(v1035 + 48))(v1038);
    (*(void (**)(uint64_t, uint64_t))(v1036 + 8))(v1042, v1038);
    uint64_t v15 = v1060;
    uint64_t v1041 = v1060 + 3685;
    *(unsigned char *)(v1060 + 3685) = v1039;
    uint64_t v1040 = v15 + 3686;
    *(unsigned char *)(v15 + 3686) = 2;
    lazy protocol witness table accessor for type PregnancySource and conformance PregnancySource();
    v1045 = == infix<A>(_:_:)();
    swift_task_dealloc();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v1043);
    if (v1045)
    {
      v1026 = *(void *)(v1060 + 2816);
      uint64_t v1033 = *(void *)(v1060 + 1864);
      swift_bridgeObjectRetain();
      v1027 = HyperParams.useSeahorseInferredStartdate.getter();
      v1028 = HyperParams.useTestDateAsLMP.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Pregnancy]);
      uint64_t v1031 = v1060 + 1360;
      unint64_t v1032 = (void (*)(void))Array.subscript.modify();
      uint64_t v1029 = *(void *)(v16 + 24);
      uint64_t v1030 = *(void *)(v16 + 32);
      __swift_mutable_project_boxed_opaque_existential_1(v16, v1029);
      (*(void (**)(uint64_t, void, void, uint64_t))(v1030 + 104))(v1033, v1027 & 1, v1028 & 1, v1029);
      v1032();
    }
    else
    {
      v1018 = *(void *)(v1060 + 2816);
      v1025 = *(void *)(v1060 + 1864);
      swift_bridgeObjectRetain();
      v1019 = HyperParams.useSeahorseInferredStartdate.getter();
      v1020 = HyperParams.useFactorStartDateAsLMP.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Pregnancy]);
      v1023 = v1060 + 1328;
      v1024 = (void (*)(void))Array.subscript.modify();
      v1021 = *(void *)(v17 + 24);
      v1022 = *(void *)(v17 + 32);
      __swift_mutable_project_boxed_opaque_existential_1(v17, v1021);
      (*(void (**)(uint64_t, void, void, uint64_t))(v1022 + 104))(v1025, v1019 & 1, v1020 & 1, v1021);
      v1024();
    }
    swift_bridgeObjectRelease();
  }
  v1015 = *(void *)(v1060 + 2968);
  v1016 = *(void *)(v1060 + 2960);
  v1013 = *(void *)(v1060 + 1904);
  swift_bridgeObjectRetain();
  uint64_t v18 = HyperParams.overlapPregnanciesStrategy.getter();
  v1014 = mergePregnancies(pregnancies:strategy:)(v1013, v18 & 1);
  *(void *)(v1060 + 3048) = v1014;
  swift_bridgeObjectRelease();
  uint64_t v23 = v1014;
  uint64_t v24 = v1015;
  uint64_t v25 = v1016;
  *(void *)(v1060 + 1984) = v1014;
  v1017 = v25 - v24;
  if (__OFSUB__(v25, v24))
  {
    __break(1u);
LABEL_165:
    __break(1u);
    goto LABEL_166;
  }
  uint64_t v23 = MEMORY[0x25A2C0810](v1014, v1051);
  v1012 = v1017 - v23;
  uint64_t v27 = __OFSUB__(v1017, v23);
  *(void *)(v1060 + 3056) = v1017 - v23;
  if (v27) {
    goto LABEL_165;
  }
  uint64_t v28 = v1050;
  v1004 = *(void *)(v1060 + 2816);
  v1007 = v1060 + 1992;
  *(void *)(v1060 + 1992) = v1012;
  v1003 = 0;
  v1005 = v1060 + 2000;
  *(void *)(v1060 + 2000) = _allocateUninitializedArray<A>(_:)();
  Swift::Int v29 = _allocateUninitializedArray<A>(_:)();
  uint64_t v30 = v1014;
  uint64_t v31 = v1060;
  v1006 = v1060 + 2008;
  *(void *)(v1060 + 2008) = v29;
  *(void *)(v31 + 2016) = v30;
  swift_retain();
  char v32 = (void *)swift_task_alloc();
  uint64_t v33 = v1005;
  uint64_t v34 = v1006;
  uint64_t v35 = v1060;
  v1008 = v32;
  v32[2] = v1004;
  v32[3] = v35 + 1776;
  v32[4] = v33;
  v32[5] = v34;
  v1009 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Pregnancy]);
  *(void *)(v1060 + 3064) = v1009;
  v1010 = lazy protocol witness table accessor for type [Pregnancy] and conformance [A]();
  *(void *)(v1060 + 3072) = v1010;
  uint64_t result = Sequence.forEach(_:)();
  v1011 = v28;
  if (v28) {
    return result;
  }
  v994 = *(void *)(v1060 + 2816);
  swift_task_dealloc();
  swift_release();
  uint64_t v995 = *(void *)(v1060 + 2000);
  swift_bridgeObjectRetain();
  uint64_t v36 = MEMORY[0x25A2C0810](v995, v1051);
  uint64_t v37 = v1060;
  uint64_t v996 = v36;
  *(void *)(v1060 + 3080) = v36;
  v998 = v37 + 2024;
  *(void *)(v37 + 2024) = v36;
  swift_bridgeObjectRelease();
  uint64_t v997 = *(void *)(v1060 + 2008);
  swift_bridgeObjectRetain();
  *(void *)(v1060 + 2032) = v997;
  v999 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PregnancyInvalidReason]);
  v1000 = lazy protocol witness table accessor for type [PregnancyInvalidReason] and conformance [A]();
  v1001 = _ArrayProtocol.filter(_:)();
  v1002 = 0;
  uint64_t v38 = MEMORY[0x25A2C0810](v1001, &type metadata for PregnancyInvalidReason);
  uint64_t v39 = v1060;
  *(void *)(v1060 + 3088) = v38;
  uint64_t v991 = v39 + 2040;
  *(void *)(v39 + 2040) = v38;
  swift_bridgeObjectRelease();
  uint64_t v990 = *(void *)(v1060 + 2008);
  swift_bridgeObjectRetain();
  *(void *)(v1060 + 2048) = v990;
  uint64_t v992 = _ArrayProtocol.filter(_:)();
  uint64_t v993 = 0;
  uint64_t v40 = MEMORY[0x25A2C0810](v992, &type metadata for PregnancyInvalidReason);
  uint64_t v41 = v1060;
  *(void *)(v1060 + 3096) = v40;
  uint64_t v987 = v41 + 2056;
  *(void *)(v41 + 2056) = v40;
  swift_bridgeObjectRelease();
  uint64_t v986 = *(void *)(v1060 + 2008);
  swift_bridgeObjectRetain();
  *(void *)(v1060 + 2064) = v986;
  uint64_t v988 = _ArrayProtocol.filter(_:)();
  uint64_t v989 = 0;
  uint64_t v42 = MEMORY[0x25A2C0810](v988, &type metadata for PregnancyInvalidReason);
  uint64_t v43 = v1060;
  *(void *)(v1060 + 3104) = v42;
  uint64_t v983 = v43 + 2072;
  *(void *)(v43 + 2072) = v42;
  swift_bridgeObjectRelease();
  uint64_t v982 = *(void *)(v1060 + 2008);
  swift_bridgeObjectRetain();
  *(void *)(v1060 + 2080) = v982;
  v984 = _ArrayProtocol.filter(_:)();
  uint64_t v985 = 0;
  uint64_t v44 = MEMORY[0x25A2C0810](v984, &type metadata for PregnancyInvalidReason);
  char v45 = v1060;
  *(void *)(v1060 + 3112) = v44;
  uint64_t v979 = v45 + 2088;
  *(void *)(v45 + 2088) = v44;
  swift_bridgeObjectRelease();
  uint64_t v978 = *(void *)(v1060 + 2008);
  swift_bridgeObjectRetain();
  *(void *)(v1060 + 2096) = v978;
  uint64_t v980 = _ArrayProtocol.filter(_:)();
  uint64_t v981 = 0;
  uint64_t v46 = MEMORY[0x25A2C0810](v980, &type metadata for PregnancyInvalidReason);
  uint64_t v47 = v1060;
  *(void *)(v1060 + 3120) = v46;
  uint64_t v975 = v47 + 2104;
  *(void *)(v47 + 2104) = v46;
  swift_bridgeObjectRelease();
  uint64_t v974 = *(void *)(v1060 + 2008);
  swift_bridgeObjectRetain();
  *(void *)(v1060 + 2112) = v974;
  v976 = _ArrayProtocol.filter(_:)();
  uint64_t v977 = 0;
  uint64_t v968 = *(void *)(v1060 + 2680);
  uint64_t v48 = MEMORY[0x25A2C0810](v976, &type metadata for PregnancyInvalidReason);
  uint64_t v49 = v1060;
  *(void *)(v1060 + 3128) = v48;
  uint64_t v972 = v49 + 2120;
  *(void *)(v49 + 2120) = v48;
  swift_bridgeObjectRelease();
  uint64_t v970 = NightingaleDPFLRunner.performanceMeasure.getter();
  uint64_t v969 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("UpdatePregnancies", 0x11uLL, 1)._object;
  dispatch thunk of PerformanceMeasure.finish(_:)();
  uint64_t v971 = v50;
  *(void *)(v1060 + 3136) = v50;
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v973 = v1060 + 2128;
  *(void *)(v1060 + 2128) = v971;
  unint64_t v51 = default argument 1 of NightingaleDPFLRunner.sendLocation(_:_:)();
  NightingaleDPFLRunner.sendLocation(_:_:)(NightingaleTraining_NightingaleDReachLocation_updatePregnanciesCompleted, v51);
  if (v996 <= 0)
  {
    uint64_t v256 = v1060;
    v257 = *(unsigned char *)(v1060 + 3693);
    uint64_t v529 = v1060 + 3610;
    *(unsigned char *)(v1060 + 3610) = v257;
    uint64_t v528 = v256 + 3611;
    *(unsigned char *)(v256 + 3611) = 4;
    lazy protocol witness table accessor for type NightingalePFLTaskType and conformance NightingalePFLTaskType();
    if ((== infix<A>(_:_:)() & 1) == 0)
    {
      uint64_t v491 = *(void *)(v1060 + 2992);
      v492 = *(void *)(v1060 + 2976);
      uint64_t v493 = *(void *)(v1060 + 2880);
      v494 = *(id *)(v1060 + 2856);
      uint64_t v495 = *(id *)(v1060 + 2832);
      v496 = *(void *)(v1060 + 2816);
      v490 = 37;
      uint64_t v278 = HIDPFLError.rawValue.getter(37);
      NightingaleDPFLRunner.sendLocation(_:_:)(NightingaleTraining_NightingaleDReachLocation_checkValidPregnanciesCompleted, v278);
      lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
      uint64_t v497 = swift_allocError();
      *uint64_t v279 = 37;
      swift_willThrow();
      outlined destroy of [A]();
      outlined destroy of [A]();
      swift_bridgeObjectRelease();
      swift_release();
      outlined destroy of [A]();
      swift_bridgeObjectRelease();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      swift_bridgeObjectRelease();

      swift_release();
      v914 = v497;
      goto LABEL_161;
    }
    v258 = v977;
    v507 = *(void *)(v1060 + 2984);
    uint64_t v514 = *(void *)(v1060 + 2968);
    v511 = *(void *)(v1060 + 2960);
    v521 = *(void *)(v1060 + 2880);
    uint64_t v520 = *(void *)(v1060 + 2872);
    v505 = *(void *)(v1060 + 2864);
    v509 = *(void *)(v1060 + 2824);
    v524 = *(void *)(v1060 + 2816);
    uint64_t v504 = *(void *)(v1060 + 1904);
    swift_bridgeObjectRetain();
    uint64_t v522 = MEMORY[0x25A2C0810](v504, v1051);
    swift_bridgeObjectRelease();
    v523 = *(void *)(v1060 + 2008);
    swift_bridgeObjectRetain();
    uint64_t v518 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any));
    v519 = _allocateUninitializedArray<A>(_:)();
    v517 = v259;
    v260 = NightingaleDPFLRunner.keyMetricsCycleTrackingCheckDurationS.unsafeMutableAddressor();
    outlined init with copy of String(v260, v517);
    v261 = v505;
    uint64_t v262 = v517;
    uint64_t v516 = MEMORY[0x263F8D538];
    v517[5] = MEMORY[0x263F8D538];
    v262[2] = v261;
    uint64_t v506 = v262 + 6;
    v263 = NightingaleDPFLRunner.keyMetricsPregnanciesQueryDurationS.unsafeMutableAddressor();
    outlined init with copy of String(v263, v506);
    v264 = v507;
    uint64_t v265 = v517;
    v517[11] = v516;
    v265[8] = v264;
    uint64_t v508 = v265 + 12;
    v266 = NightingaleDPFLRunner.keyMetricsIterationElapsedTime.unsafeMutableAddressor();
    outlined init with copy of String(v266, v508);
    v267 = v509;
    v268 = v517;
    v517[17] = v516;
    v268[14] = v267;
    uint64_t v510 = v268 + 18;
    uint64_t v269 = NightingaleDPFLRunner.keyMetricsNumberOfAllPregnancies.unsafeMutableAddressor();
    outlined init with copy of String(v269, v510);
    char v270 = v511;
    uint64_t v271 = v517;
    v513 = MEMORY[0x263F8D6C8];
    v517[23] = MEMORY[0x263F8D6C8];
    v271[20] = v270;
    uint64_t v512 = v271 + 24;
    uint64_t v272 = NightingaleDPFLRunner.keyMetricsNumberOfPregnancyInitializerFailed.unsafeMutableAddressor();
    outlined init with copy of String(v272, v512);
    uint64_t v273 = v514;
    Swift::OpaquePointer v274 = v517;
    v517[29] = v513;
    v274[26] = v273;
    v515 = v274 + 30;
    updated = NightingaleDPFLRunner.keyMetricsUpdatePregnanciesDurationS.unsafeMutableAddressor();
    outlined init with copy of String(updated, v515);
    uint64_t v276 = v517;
    uint64_t v277 = v971;
    v517[35] = v516;
    v276[32] = v277;
    _finalizeUninitializedArray<A>(_:)();
    uint64_t v525 = Dictionary.init(dictionaryLiteral:)();
    uint64_t v526 = NightingaleDPFLRunner.runPregnanciesDistribution(hyperParams:modelPath:numberOfRawPregnancies:invalidReasons:swtAvailability:existingMetrics:)(v524, v520, v521, v522, v523, v525, -1.0);
    uint64_t v527 = v258;
    if (v258)
    {
      uint64_t v355 = *(void *)(v1060 + 2992);
      uint64_t v356 = *(void *)(v1060 + 2976);
      uint64_t v357 = *(void *)(v1060 + 2880);
      uint64_t v358 = *(id *)(v1060 + 2856);
      uint64_t v359 = *(id *)(v1060 + 2832);
      uint64_t v360 = *(void *)(v1060 + 2816);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined destroy of [A]();
      outlined destroy of [A]();
      swift_bridgeObjectRelease();
      swift_release();
      outlined destroy of [A]();
      swift_bridgeObjectRelease();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      swift_bridgeObjectRelease();

      swift_release();
      v914 = v527;
      goto LABEL_161;
    }
    v498 = *(void *)(v1060 + 2992);
    v499 = *(void *)(v1060 + 2976);
    v500 = *(void *)(v1060 + 2880);
    uint64_t v501 = *(id *)(v1060 + 2856);
    v502 = *(id *)(v1060 + 2832);
    uint64_t v503 = *(void *)(v1060 + 2816);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of [A]();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    swift_release();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();

    swift_release();
    int v581 = v526;
    goto LABEL_131;
  }
  uint64_t v965 = *(unsigned __int8 *)(v1060 + 3693);
  uint64_t v52 = default argument 1 of NightingaleDPFLRunner.sendLocation(_:_:)();
  NightingaleDPFLRunner.sendLocation(_:_:)(NightingaleTraining_NightingaleDReachLocation_checkValidPregnanciesCompleted, v52);
  uint64_t v53 = v1060;
  v967 = v1060 + 3664;
  *(unsigned char *)(v1060 + 3664) = v965;
  uint64_t v966 = v53 + 3665;
  *(unsigned char *)(v53 + 3665) = 4;
  *(void *)(v1060 + 3144) = lazy protocol witness table accessor for type NightingalePFLTaskType and conformance NightingalePFLTaskType();
  if ((== infix<A>(_:_:)() & 1) == 0)
  {
    uint64_t v900 = *(void *)(v1060 + 2816);
    uint64_t v902 = NightingaleDPFLRunner.performanceMeasure.getter();
    v903 = 1;
    uint64_t v901 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("UpdateSliceDeltaAnchor", 0x16uLL, 1)._object;
    dispatch thunk of PerformanceMeasure.start(_:)();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v86 = HyperParams.sliceDeltaAnchor.getter();
    uint64_t v87 = v1060;
    v905 = v1060 + 3666;
    *(unsigned char *)(v1060 + 3666) = v86 & 1;
    uint64_t v904 = v87 + 3667;
    *(unsigned char *)(v87 + 3667) = 1;
    lazy protocol witness table accessor for type SliceDeltaAnchor and conformance SliceDeltaAnchor();
    if (== infix<A>(_:_:)())
    {
      uint64_t v88 = v977;
      int v898 = *(void *)(v1060 + 2000);
      swift_bridgeObjectRetain();
      *(void *)(v1060 + 2288) = v898;
      uint64_t result = Sequence.min(by:)();
      int v899 = v88;
      if (!v88)
      {
        outlined destroy of [A]();
        if (*(void *)(v1060 + 456))
        {
          uint64_t v893 = *(void *)(v1060 + 456);
          uint64_t v892 = *(void *)(v1060 + 464);
          uint64_t v894 = v1060 + 432;
          __swift_project_boxed_opaque_existential_1((void *)(v1060 + 432), v893);
          v895 = (*(uint64_t (**)(uint64_t))(v892 + 16))(v893);
          __swift_destroy_boxed_opaque_existential_1(v1060 + 432);
          uint64_t v896 = v895;
          uint64_t v897 = 0;
        }
        else
        {
          uint64_t v875 = 0;
          outlined destroy of Pregnancy?(v1060 + 432);
          uint64_t v896 = 0;
          uint64_t v897 = 1;
        }
        v891 = v896;
        if (v897) {
          goto LABEL_66;
        }
        int v89 = v1060;
        int v890 = v1060 + 3568;
        *(_DWORD *)(v1060 + 3568) = v891;
        uint64_t v889 = *(void *)(v89 + 2000);
        swift_bridgeObjectRetain();
        *(void *)(v1060 + 2296) = v889;
        Sequence.max(by:)();
        outlined destroy of [A]();
        if (*(void *)(v1060 + 496))
        {
          uint64_t v884 = *(void *)(v1060 + 496);
          uint64_t v883 = *(void *)(v1060 + 504);
          uint64_t v885 = v1060 + 472;
          __swift_project_boxed_opaque_existential_1((void *)(v1060 + 472), v884);
          uint64_t v886 = (*(uint64_t (**)(uint64_t))(v883 + 16))(v884);
          __swift_destroy_boxed_opaque_existential_1(v1060 + 472);
          uint64_t v887 = v886;
          uint64_t v888 = 0;
        }
        else
        {
          uint64_t v876 = 0;
          outlined destroy of Pregnancy?(v1060 + 472);
          uint64_t v887 = 0;
          uint64_t v888 = 1;
        }
        id v882 = v887;
        if (v888)
        {
LABEL_66:
          uint64_t v868 = *(void *)(v1060 + 2992);
          uint64_t v869 = *(void *)(v1060 + 2976);
          uint64_t v870 = *(void *)(v1060 + 2880);
          unint64_t v871 = *(id *)(v1060 + 2856);
          uint64_t v872 = *(id *)(v1060 + 2832);
          uint64_t v873 = *(void *)(v1060 + 2816);
          lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
          uint64_t v874 = swift_allocError();
          *int v97 = 34;
          swift_willThrow();
          outlined destroy of [A]();
          outlined destroy of [A]();
          swift_bridgeObjectRelease();
          swift_release();
          outlined destroy of [A]();
          swift_bridgeObjectRelease();
          outlined destroy of [A]();
          outlined destroy of [A]();
          outlined destroy of [A]();
          outlined destroy of [A]();
          outlined destroy of [A]();
          outlined destroy of [A]();
          outlined destroy of [A]();
          outlined destroy of [A]();
          outlined destroy of [A]();
          outlined destroy of [A]();
          outlined destroy of [A]();
          outlined destroy of [A]();
          swift_bridgeObjectRelease();

          swift_release();
          v914 = v874;
          goto LABEL_161;
        }
        uint64_t v878 = *(void *)(v1060 + 2816);
        uint64_t v877 = *(void *)(v1060 + 2680);
        v879 = v1060 + 3576;
        *(_DWORD *)(v1060 + 3576) = v882;
        uint64_t v880 = (double)HyperParams.rawSampleTimeout.getter();
        swift_retain();
        swift_retain();
        v90 = swift_allocObject();
        uint64_t v91 = v877;
        v92 = v891;
        v93 = v878;
        int v94 = v882;
        unint64_t v881 = v90;
        *(void *)(v1060 + 3184) = v90;
        *(void *)(v90 + 16) = v91;
        *(_DWORD *)(v90 + 24) = v92;
        *(void *)(v90 + 32) = v93;
        *(_DWORD *)(v90 + 40) = v94;
        uint64_t v95 = (void *)swift_task_alloc();
        v96 = v1060;
        v22.n128_f64[0] = v880;
        uint64_t v19 = v1085;
        uint64_t v20 = v881;
        *(void *)(v1060 + 3192) = v95;
        *uint64_t v95 = *(void *)(v96 + 1688);
        v95[1] = NightingaleDPFLRunner.run(task:useCase:context:);
        unint64_t v21 = *(void *)(v96 + 3008);
        uint64_t v23 = v96 + 2304;
        return MEMORY[0x270F57130](v23, v19, v20, v21, v22);
      }
      return result;
    }
    uint64_t v859 = v1060 + 1696;
    uint64_t v860 = v1060 + 1640;
    uint64_t v861 = v1060 + 1704;
    uint64_t v862 = v1060 + 1712;
    uint64_t v863 = v1060 + 1720;
    uint64_t v864 = v1060 + 1728;
    uint64_t v865 = v1060 + 1736;
    v840 = v1060 + 1752;
    uint64_t v866 = v1060 + 1760;
    uint64_t v857 = v1060 + 1768;
    uint64_t v842 = v1060 + 3520;
    uint64_t v843 = v1060 + 1896;
    uint64_t v844 = v1060 + 1912;
    uint64_t v845 = v1060 + 1952;
    uint64_t v846 = v1060 + 1984;
    uint64_t v847 = v1060 + 2024;
    uint64_t v848 = v1060 + 2040;
    uint64_t v849 = v1060 + 2056;
    uint64_t v850 = v1060 + 2072;
    uint64_t v851 = v1060 + 2088;
    uint64_t v852 = v1060 + 2104;
    uint64_t v853 = v1060 + 2120;
    uint64_t v854 = v1060 + 2128;
    uint64_t v856 = *(void *)(v1060 + 3072);
    uint64_t v855 = *(void *)(v1060 + 3064);
    int v836 = *(void *)(v1060 + 2680);
    uint64_t v834 = NightingaleDPFLRunner.performanceMeasure.getter();
    uint64_t v837 = 1;
    uint64_t v833 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("UpdateSliceDeltaAnchor", 0x16uLL, 1)._object;
    dispatch thunk of PerformanceMeasure.finish(_:)();
    uint64_t v835 = v98;
    *(void *)(v1060 + 3208) = v98;
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v858 = v1060 + 2136;
    *(void *)(v1060 + 2136) = v835;
    unsigned int v99 = default argument 1 of NightingaleDPFLRunner.sendLocation(_:_:)();
    NightingaleDPFLRunner.sendLocation(_:_:)(NightingaleTraining_NightingaleDReachLocation_updateSliceDeltaAnchorCompleted, v99);
    uint64_t v839 = NightingaleDPFLRunner.performanceMeasure.getter();
    uint64_t v838 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("QueryRequiredFeatures", 0x15uLL, v837 & 1)._object;
    dispatch thunk of PerformanceMeasure.start(_:)();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v841 = *(void *)(v1060 + 2000);
    swift_bridgeObjectRetain();
    *(void *)(v1060 + 2144) = v841;
    uint64_t result = Sequence.min(by:)();
    uint64_t v867 = v977;
    if (v977) {
      return result;
    }
    outlined destroy of [A]();
    if (*(void *)(v1060 + 376))
    {
      uint64_t v828 = *(void *)(v1060 + 376);
      uint64_t v827 = *(void *)(v1060 + 384);
      int v829 = v1060 + 352;
      __swift_project_boxed_opaque_existential_1((void *)(v1060 + 352), v828);
      int v830 = (*(uint64_t (**)(uint64_t))(v827 + 56))(v828);
      __swift_destroy_boxed_opaque_existential_1(v1060 + 352);
      int v831 = v830;
      v832 = 0;
    }
    else
    {
      v538 = 0;
      outlined destroy of Pregnancy?(v1060 + 352);
      int v831 = 0;
      v832 = 1;
    }
    unsigned int v100 = v832;
    uint64_t v826 = v831;
    *(_DWORD *)(v1060 + 3648) = v831;
    if (v100) {
      goto LABEL_126;
    }
    uint64_t v101 = v1060;
    unsigned int v102 = v867;
    uint64_t v824 = *(void *)(v1060 + 3072);
    uint64_t v823 = *(void *)(v1060 + 3064);
    int v822 = v1060 + 3528;
    *(_DWORD *)(v1060 + 3528) = v826;
    int v821 = *(void *)(v101 + 2000);
    swift_bridgeObjectRetain();
    *(void *)(v1060 + 2152) = v821;
    uint64_t result = Sequence.max(by:)();
    int v825 = v102;
    if (v102) {
      return result;
    }
    outlined destroy of [A]();
    if (*(void *)(v1060 + 416))
    {
      int v816 = *(void *)(v1060 + 416);
      uint64_t v815 = *(void *)(v1060 + 424);
      uint64_t v817 = v1060 + 392;
      __swift_project_boxed_opaque_existential_1((void *)(v1060 + 392), v816);
      uint64_t v818 = (*(uint64_t (**)(uint64_t))(v815 + 56))(v816);
      __swift_destroy_boxed_opaque_existential_1(v1060 + 392);
      uint64_t v819 = v818;
      int v820 = 0;
    }
    else
    {
      uint64_t v539 = 0;
      outlined destroy of Pregnancy?(v1060 + 392);
      uint64_t v819 = 0;
      int v820 = 1;
    }
    uint64_t v103 = v820;
    uint64_t v814 = v819;
    *(_DWORD *)(v1060 + 3652) = v819;
    if (v103)
    {
LABEL_126:
      v530 = *(void *)(v1060 + 3048);
      uint64_t v531 = *(void *)(v1060 + 2992);
      uint64_t v532 = *(void *)(v1060 + 2976);
      uint64_t v533 = *(void *)(v1060 + 2880);
      uint64_t v534 = *(id *)(v1060 + 2856);
      uint64_t v535 = *(id *)(v1060 + 2832);
      uint64_t v536 = *(void *)(v1060 + 2816);
      lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
      uint64_t v537 = swift_allocError();
      long long *v255 = 34;
      swift_willThrow();
      outlined destroy of [A]();
      outlined destroy of [A]();
      swift_bridgeObjectRelease();
      swift_release();
      outlined destroy of [A]();
      swift_bridgeObjectRelease();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      swift_bridgeObjectRelease();

      swift_release();
      v914 = v537;
      goto LABEL_161;
    }
    uint64_t v104 = v1060;
    uint64_t v105 = v826;
    uint64_t v811 = *(void *)(v1060 + 2816);
    *(_DWORD *)(v1060 + 3536) = v814;
    unint64_t v809 = v104 + 3524;
    *(_DWORD *)(v104 + 3524) = v105;
    uint64_t v807 = lazy protocol witness table accessor for type Int and conformance Int();
    uint64_t v808 = lazy protocol witness table accessor for type Int and conformance Int();
    unint64_t v810 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    SignedInteger<>.init<A>(_:)();
    unint64_t v812 = *(void *)(v1060 + 2160);
    uint64_t v23 = HyperParams.minSliceAnchorDelta.getter();
    uint64_t v813 = v812 + v23;
    if (!__OFADD__(v812, v23))
    {
      *(_DWORD *)(v1060 + 3532) = HyperParams.sliceSize.getter();
      uint64_t v23 = SignedInteger<>.init<A>(_:)();
      unsigned int v107 = *(void *)(v1060 + 2168);
      uint64_t v806 = v813 - v107;
      if (!__OFSUB__(v813, v107))
      {
        uint64_t v805 = v806 + 1;
        if (!__OFADD__(v806, 1))
        {
          uint64_t v802 = *(void *)(v1060 + 2816);
          unint64_t v797 = v1060 + 2176;
          *(void *)(v1060 + 2176) = v805;
          uint64_t v795 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
          unsigned int v796 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
          unint64_t v798 = lazy protocol witness table accessor for type Int and conformance Int();
          unint64_t v800 = MEMORY[0x263F8E8F8];
          uint64_t v799 = MEMORY[0x263F8D6C8];
          UnsignedInteger<>.init<A>(_:)();
          char v110 = v814;
          v111 = v1060;
          uint64_t v801 = *(_DWORD *)(v1060 + 3516);
          *(_DWORD *)(v1060 + 3656) = v801;
          *(_DWORD *)(v111 + 3556) = v110;
          SignedInteger<>.init<A>(_:)();
          unsigned int v803 = *(void *)(v1060 + 2184);
          uint64_t v23 = HyperParams.maxSliceAnchorDelta.getter();
          uint64_t v804 = v803 + v23;
          if (!__OFADD__(v803, v23))
          {
            int v792 = *(_DWORD *)(v1060 + 3632);
            *(void *)(v1060 + 2192) = v804;
            uint64_t v793 = MEMORY[0x263F8E8F8];
            UnsignedInteger<>.init<A>(_:)();
            uint64_t v113 = v792;
            uint64_t v114 = v1060;
            *(_DWORD *)(v1060 + 3564) = *(_DWORD *)(v1060 + 3548);
            *(_DWORD *)(v114 + 3572) = v113;
            min<A>(_:_:)();
            char v115 = v801;
            char v116 = *(_DWORD *)(v1060 + 3540);
            int v794 = v116;
            *(_DWORD *)(v1060 + 3660) = v116;
            if (v116 < v115) {
              goto LABEL_46;
            }
            v117 = v1060;
            char v118 = v794;
            uint64_t v791 = v1060 + 1548;
            *(_DWORD *)(v1060 + 1548) = v801;
            *(_DWORD *)(v117 + 1552) = v118;
            *(void *)(v1060 + 2200) = _allocateUninitializedArray<A>(_:)();
            if (HyperParams.isHRVRequired()())
            {
              uint64_t v790 = v1060 + 3677;
              *(unsigned char *)(v1060 + 3677) = 8;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HealthDataRawSampleType]);
              Array.append(_:)();
            }
            if (HyperParams.isSpO2Required()())
            {
              uint64_t v789 = v1060 + 3676;
              *(unsigned char *)(v1060 + 3676) = 10;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HealthDataRawSampleType]);
              Array.append(_:)();
            }
            if (HyperParams.isRespiratoryRateRequired()())
            {
              uint64_t v788 = v1060 + 3675;
              *(unsigned char *)(v1060 + 3675) = 9;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HealthDataRawSampleType]);
              Array.append(_:)();
            }
            if (HyperParams.isSWTRequired()())
            {
              int v787 = v1060 + 3674;
              *(unsigned char *)(v1060 + 3674) = 7;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HealthDataRawSampleType]);
              Array.append(_:)();
            }
            uint64_t v785 = *(void *)(v1060 + 2200);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            uint64_t v784 = v1060 + 2208;
            *(void *)(v1060 + 2208) = v785;
            uint64_t v783 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HealthDataRawSampleType]);
            lazy protocol witness table accessor for type [HealthDataRawSampleType] and conformance [A]();
            int v786 = Collection.isEmpty.getter();
            outlined destroy of [A]();
            swift_bridgeObjectRelease();
            if ((v786 & 1) == 0)
            {
              uint64_t v778 = *(void *)(v1060 + 2816);
              uint64_t v779 = *(void *)(v1060 + 2680);
              swift_retain();
              swift_retain();
              uint64_t v119 = swift_task_alloc();
              uint64_t v120 = v778;
              uint64_t v121 = v779;
              uint64_t v122 = v801;
              uint64_t v123 = v794;
              int v124 = v1060;
              id v781 = v119;
              *(void *)(v1060 + 3216) = v119;
              *(void *)(v119 + 16) = v120;
              *(void *)(v119 + 24) = v124 + 2200;
              *(void *)(v119 + 32) = v121;
              *(_DWORD *)(v119 + 40) = v122;
              *(_DWORD *)(v119 + 44) = v123;
              *(void *)(v119 + 48) = v124 + 1816;
              *(void *)(v119 + 56) = v124 + 1824;
              *(void *)(v119 + 64) = v124 + 1832;
              *(void *)(v119 + 72) = v124 + 1808;
              id v782 = MEMORY[0x263F8EE60] + 8;
              uint64_t v780 = default argument 1 of NightingaleDPFLRunner.sendLocationAsync<A>(location:force:work:)();
              uint64_t v125 = swift_task_alloc();
              int v126 = v1060;
              v127 = v780;
              uint64_t v79 = v1082;
              uint64_t v80 = v781;
              uint64_t v81 = v782;
              uint64_t v128 = (void *)v125;
              uint64_t v82 = v906;
              *(void *)(v1060 + 3224) = v128;
              *uint64_t v128 = *(void *)(v126 + 1688);
              v128[1] = NightingaleDPFLRunner.run(task:useCase:context:);
              Swift::Int v83 = 8;
              Swift::Int v84 = v127 & 1;
              return NightingaleDPFLRunner.sendLocationAsync<A>(location:force:work:)(v82, v83, v84, v79, v80, v81);
            }
            uint64_t v752 = v1060 + 1696;
            uint64_t v770 = v1060 + 1640;
            uint64_t v771 = v1060 + 1704;
            v772 = v1060 + 1712;
            uint64_t v773 = v1060 + 1720;
            int v774 = v1060 + 1728;
            uint64_t v775 = v1060 + 1736;
            uint64_t v776 = v1060 + 1744;
            uint64_t v769 = v1060 + 1752;
            int v753 = v1060 + 1888;
            uint64_t v754 = v1060 + 3520;
            uint64_t v755 = v1060 + 1896;
            uint64_t v756 = v1060 + 1912;
            int v757 = v1060 + 1952;
            int v758 = v1060 + 1984;
            int v759 = v1060 + 1992;
            double v751 = v1060 + 2040;
            uint64_t v760 = v1060 + 2056;
            uint64_t v761 = v1060 + 2072;
            int v762 = v1060 + 2088;
            uint64_t v763 = v1060 + 2104;
            uint64_t v764 = v1060 + 2120;
            uint64_t v765 = v1060 + 2128;
            int v766 = v1060 + 2136;
            int v767 = v1060 + 3528;
            int v768 = v1060 + 3536;
            uint64_t v777 = v1060 + 1548;
            *(void *)(v1060 + 2216) = 0;
            if (HyperParams.isSHRRequired()())
            {
              int v747 = *(_DWORD *)(v1060 + 3660);
              int v746 = *(_DWORD *)(v1060 + 3656);
              uint64_t v745 = *(void *)(v1060 + 2816);
              uint64_t v744 = *(void *)(v1060 + 2680);
              swift_retain();
              swift_retain();
              v129 = swift_task_alloc();
              uint64_t v130 = v744;
              Swift::Int v131 = v745;
              char v132 = v746;
              uint64_t v133 = v747;
              uint64_t v134 = v1060;
              uint64_t v749 = v129;
              *(void *)(v1060 + 3240) = v129;
              *(void *)(v129 + 16) = v130;
              *(void *)(v129 + 24) = v131;
              *(_DWORD *)(v129 + 32) = v132;
              *(_DWORD *)(v129 + 36) = v133;
              *(void *)(v129 + 40) = v134 + 1840;
              *(void *)(v129 + 48) = v134 + 1848;
              *(void *)(v129 + 56) = v134 + 2216;
              uint64_t v750 = MEMORY[0x263F8EE60] + 8;
              uint64_t v748 = default argument 1 of NightingaleDPFLRunner.sendLocationAsync<A>(location:force:work:)();
              char v135 = swift_task_alloc();
              uint64_t v136 = v1060;
              int v137 = v748;
              uint64_t v79 = v1081;
              uint64_t v80 = v749;
              uint64_t v81 = v750;
              v138 = (void *)v135;
              uint64_t v82 = v906;
              *(void *)(v1060 + 3248) = v138;
              *v138 = *(void *)(v136 + 1688);
              v138[1] = NightingaleDPFLRunner.run(task:useCase:context:);
              Swift::Int v83 = 8;
              Swift::Int v84 = v137 & 1;
              return NightingaleDPFLRunner.sendLocationAsync<A>(location:force:work:)(v82, v83, v84, v79, v80, v81);
            }
            uint64_t v718 = v1060 + 1696;
            uint64_t v736 = v1060 + 1640;
            uint64_t v737 = v1060 + 1704;
            uint64_t v738 = v1060 + 1712;
            uint64_t v739 = v1060 + 1720;
            uint64_t v740 = v1060 + 1728;
            uint64_t v741 = v1060 + 1736;
            id v742 = v1060 + 1744;
            uint64_t v735 = v1060 + 1752;
            uint64_t v719 = v1060 + 1888;
            uint64_t v720 = v1060 + 3520;
            uint64_t v721 = v1060 + 1896;
            uint64_t v722 = v1060 + 1912;
            uint64_t v723 = v1060 + 1952;
            uint64_t v724 = v1060 + 1984;
            uint64_t v725 = v1060 + 1992;
            uint64_t v717 = v1060 + 2040;
            uint64_t v726 = v1060 + 2056;
            uint64_t v727 = v1060 + 2072;
            uint64_t v728 = v1060 + 2088;
            uint64_t v729 = v1060 + 2104;
            uint64_t v730 = v1060 + 2120;
            uint64_t v731 = v1060 + 2128;
            uint64_t v732 = v1060 + 2136;
            uint64_t v733 = v1060 + 3528;
            uint64_t v734 = v1060 + 3536;
            id v743 = v1060 + 1548;
            if (HyperParams.isCalendarAlgorithmRequired()())
            {
              uint64_t v710 = *(_DWORD *)(v1060 + 3652);
              int v708 = *(_DWORD *)(v1060 + 3648);
              uint64_t v713 = *(void *)(v1060 + 2992);
              uint64_t v711 = *(_DWORD *)(v1060 + 3632);
              v709 = *(void *)(v1060 + 2816);
              uint64_t v712 = *(void *)(v1060 + 2680);
              swift_retain();
              swift_retain();
              swift_retain();
              uint64_t v139 = swift_task_alloc();
              v140 = v708;
              v141 = v709;
              int v142 = v710;
              uint64_t v143 = v711;
              v144 = v712;
              int v145 = v713;
              uint64_t v146 = v1060;
              uint64_t v715 = v139;
              *(void *)(v1060 + 3264) = v139;
              *(_DWORD *)(v139 + 16) = v140;
              *(void *)(v139 + 24) = v141;
              *(_DWORD *)(v139 + 32) = v142;
              *(_DWORD *)(v139 + 36) = v143;
              *(void *)(v139 + 40) = v144;
              *(void *)(v139 + 48) = v146 + 1776;
              *(void *)(v139 + 56) = v146 + 1784;
              *(void *)(v139 + 64) = v146 + 1792;
              *(void *)(v139 + 72) = v146 + 1800;
              *(void *)(v139 + 80) = v145;
              *(void *)(v139 + 88) = v146 + 1856;
              *(void *)(v139 + 96) = v146 + 1864;
              uint64_t v716 = MEMORY[0x263F8EE60] + 8;
              uint64_t v714 = default argument 1 of NightingaleDPFLRunner.sendLocationAsync<A>(location:force:work:)();
              unsigned int v147 = swift_task_alloc();
              unsigned int v148 = v1060;
              uint64_t v149 = v714;
              uint64_t v79 = v1080;
              uint64_t v80 = v715;
              uint64_t v81 = v716;
              unsigned int v150 = (void *)v147;
              uint64_t v82 = v906;
              *(void *)(v1060 + 3272) = v150;
              *unsigned int v150 = *(void *)(v148 + 1688);
              v150[1] = NightingaleDPFLRunner.run(task:useCase:context:);
              Swift::Int v83 = 8;
              Swift::Int v84 = v149 & 1;
              return NightingaleDPFLRunner.sendLocationAsync<A>(location:force:work:)(v82, v83, v84, v79, v80, v81);
            }
            uint64_t v694 = v1060 + 1696;
            uint64_t v695 = v1060 + 1640;
            uint64_t v696 = v1060 + 1704;
            int v697 = v1060 + 1712;
            uint64_t v698 = v1060 + 1720;
            uint64_t v699 = v1060 + 1728;
            uint64_t v700 = v1060 + 1736;
            int v701 = v1060 + 1744;
            int v702 = v1060 + 1752;
            int v703 = v1060 + 1760;
            int v689 = v1060 + 3608;
            uint64_t v673 = v1060 + 1896;
            uint64_t v674 = v1060 + 1912;
            uint64_t v675 = v1060 + 1952;
            uint64_t v676 = v1060 + 1984;
            uint64_t v677 = v1060 + 1992;
            unint64_t v678 = v1060 + 2024;
            unint64_t v679 = v1060 + 2040;
            uint64_t v693 = v1060 + 2056;
            uint64_t v680 = v1060 + 2088;
            unint64_t v681 = v1060 + 2104;
            uint64_t v682 = v1060 + 2120;
            uint64_t v683 = v1060 + 2128;
            uint64_t v684 = v1060 + 2136;
            int v685 = v1060 + 3528;
            uint64_t v686 = v1060 + 3536;
            uint64_t v687 = v1060 + 1548;
            uint64_t v692 = *(_DWORD *)(v1060 + 3632);
            int v691 = *(void *)(v1060 + 2816);
            unsigned int v672 = *(void *)(v1060 + 2680);
            uint64_t v668 = NightingaleDPFLRunner.performanceMeasure.getter();
            uint64_t v705 = 1;
            unint64_t v667 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("QueryRequiredFeatures", 0x15uLL, 1)._object;
            dispatch thunk of PerformanceMeasure.finish(_:)();
            unint64_t v669 = v151;
            swift_bridgeObjectRelease();
            swift_release();
            uint64_t v688 = v1060 + 2224;
            *(void *)(v1060 + 2224) = v669;
            uint64_t v152 = default argument 1 of NightingaleDPFLRunner.sendLocation(_:_:)();
            NightingaleDPFLRunner.sendLocation(_:_:)(NightingaleTraining_NightingaleDReachLocation_queryRequiredFeaturesCompleted, v152);
            uint64_t v671 = NightingaleDPFLRunner.performanceMeasure.getter();
            uint64_t v670 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Featurization", 0xDuLL, v705 & 1)._object;
            dispatch thunk of PerformanceMeasure.start(_:)();
            swift_bridgeObjectRelease();
            swift_release();
            type metadata accessor for Featurizer();
            uint64_t v153 = Featurizer.__allocating_init()();
            unsigned int v154 = v1060;
            int v690 = v153;
            *(void *)(v1060 + 3288) = v153;
            v704 = v154 + 2232;
            *(void *)(v154 + 2232) = v153;
            swift_retain();
            swift_retain();
            uint64_t v706 = swift_task_alloc();
            *(void *)(v1060 + 3296) = v706;
            *(void *)(v706 + 16) = v690;
            unsigned int v155 = (void *)v706;
            *(void *)(v706 + 24) = v1060 + 2000;
            v155[4] = v1060 + 1808;
            v155[5] = v1060 + 1816;
            v155[6] = v1060 + 1832;
            v155[7] = v1060 + 1824;
            v155[8] = v1060 + 1840;
            v155[9] = v1060 + 1848;
            v155[10] = v1060 + 1856;
            v155[11] = v1060 + 1864;
            v155[12] = v1060 + 1800;
            *(void *)(v706 + 104) = v691;
            *(_DWORD *)(v706 + 112) = v692;
            uint64_t v156 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int]));
            NightingaleDPFLRunner.sendLocation<A>(location:force:work:)(10, v705 & 1, v706, v156, v1060 + 16);
            uint64_t v707 = v825;
            if (v825)
            {
              uint64_t v348 = *(void *)(v1060 + 3048);
              uint64_t v349 = *(void *)(v1060 + 2992);
              id v350 = *(void *)(v1060 + 2976);
              id v351 = *(void *)(v1060 + 2880);
              uint64_t v352 = *(id *)(v1060 + 2856);
              uint64_t v353 = *(id *)(v1060 + 2832);
              uint64_t v354 = *(void *)(v1060 + 2816);
              swift_task_dealloc();
              swift_release();
              swift_release();
              swift_release();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              swift_bridgeObjectRelease();
              swift_release();
              outlined destroy of [A]();
              swift_bridgeObjectRelease();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              swift_bridgeObjectRelease();

              swift_release();
              v914 = v707;
              goto LABEL_161;
            }
            uint64_t v626 = *(void *)(v1060 + 3208);
            uint64_t v624 = *(void *)(v1060 + 3136);
            uint64_t v654 = *(void *)(v1060 + 3128);
            int v651 = *(void *)(v1060 + 3120);
            uint64_t v649 = *(void *)(v1060 + 3112);
            uint64_t v647 = *(void *)(v1060 + 3104);
            uint64_t v645 = *(void *)(v1060 + 3096);
            uint64_t v643 = *(void *)(v1060 + 3088);
            uint64_t v641 = *(void *)(v1060 + 3080);
            uint64_t v639 = *(void *)(v1060 + 3056);
            uint64_t v622 = *(void *)(v1060 + 3032);
            uint64_t v620 = *(void *)(v1060 + 2984);
            uint64_t v637 = *(void *)(v1060 + 2968);
            uint64_t v635 = *(void *)(v1060 + 2960);
            int v618 = *(void *)(v1060 + 2864);
            uint64_t v633 = *(void *)(v1060 + 2824);
            uint64_t v595 = *(void *)(v1060 + 2816);
            swift_release();
            swift_release();
            uint64_t v157 = (void *)v1060;
            uint64_t v158 = *(void **)(v1060 + 16);
            uint64_t v596 = v158;
            *(void *)(v1060 + 3304) = v158;
            char v159 = (void *)v157[3];
            uint64_t v597 = v159;
            v157[414] = v159;
            v160 = (void *)v157[4];
            v598._rawValue = v160;
            v157[415] = v160;
            uint64_t v161 = (void *)v157[5];
            v599._rawValue = v161;
            v157[416] = v161;
            uint64_t v162 = (void *)v157[6];
            v600._rawValue = v162;
            v157[417] = v162;
            uint64_t v163 = (void *)v157[7];
            v601._rawValue = v163;
            v157[418] = v163;
            int v164 = (void *)v157[8];
            v602._rawValue = v164;
            v157[419] = v164;
            int v165 = (void *)v157[9];
            v603._rawValue = v165;
            v157[420] = v165;
            uint64_t v166 = (void *)v157[10];
            v604._rawValue = v166;
            v157[421] = v166;
            uint64_t v167 = (void *)v157[11];
            v605._rawValue = v167;
            v157[422] = v167;
            uint64_t v168 = (void *)v157[12];
            v606._rawValue = v168;
            v157[423] = v168;
            char v169 = (void *)v157[13];
            v607._rawValue = v169;
            v157[424] = v169;
            v170 = (void *)v157[14];
            v608._rawValue = v170;
            v157[425] = v170;
            uint64_t v171 = (void *)v157[15];
            v609._rawValue = v171;
            v157[426] = v171;
            int v172 = (void *)v157[16];
            v610._rawValue = v172;
            v157[427] = v172;
            uint64_t v173 = (void *)v157[17];
            v611._rawValue = v173;
            v157[428] = v173;
            int v174 = (void *)v157[18];
            v612._rawValue = v174;
            v157[429] = v174;
            int v175 = (void *)v157[19];
            v613._rawValue = v175;
            v157[430] = v175;
            uint64_t v176 = v157[20];
            uint64_t v614 = v176;
            v157[431] = v176;
            uint64_t v177 = v157[21];
            uint64_t v615 = v177;
            v157[432] = v177;
            uint64_t v178 = v157[22];
            uint64_t v658 = v178;
            v157[433] = v178;
            uint64_t v659 = v157 + 23;
            v157[23] = v158;
            v157[24] = v159;
            v157[25] = v160;
            v157[26] = v161;
            v157[27] = v162;
            v157[28] = v163;
            v157[29] = v164;
            v157[30] = v165;
            v157[31] = v166;
            v157[32] = v167;
            v157[33] = v168;
            v157[34] = v169;
            v157[35] = v170;
            v157[36] = v171;
            v157[37] = v172;
            v157[38] = v173;
            v157[39] = v174;
            v157[40] = v175;
            v157[41] = v176;
            v157[42] = v177;
            v157[43] = v178;
            int v617 = NightingaleDPFLRunner.performanceMeasure.getter();
            uint64_t v616 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Featurization", 0xDuLL, 1)._object;
            dispatch thunk of PerformanceMeasure.finish(_:)();
            uint64_t v630 = v179;
            swift_bridgeObjectRelease();
            swift_release();
            uint64_t v660 = v1060 + 2240;
            *(void *)(v1060 + 2240) = v630;
            uint64_t v655 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any));
            uint64_t v656 = _allocateUninitializedArray<A>(_:)();
            uint64_t v653 = v180;
            char v181 = NightingaleDPFLRunner.keyMetricsCycleTrackingCheckDurationS.unsafeMutableAddressor();
            outlined init with copy of String(v181, v653);
            v182 = v618;
            uint64_t v183 = v653;
            uint64_t v632 = MEMORY[0x263F8D538];
            v653[5] = MEMORY[0x263F8D538];
            v183[2] = v182;
            int v619 = v183 + 6;
            Swift::Int v184 = NightingaleDPFLRunner.keyMetricsPregnanciesQueryDurationS.unsafeMutableAddressor();
            outlined init with copy of String(v184, v619);
            uint64_t v185 = v620;
            uint64_t v186 = v653;
            v653[11] = v632;
            v186[8] = v185;
            uint64_t v621 = v186 + 12;
            v187 = NightingaleDPFLRunner.keyMetricsUpdatingFeaturesQueryDurationS.unsafeMutableAddressor();
            outlined init with copy of String(v187, v621);
            uint64_t v188 = v622;
            v189 = v653;
            v653[17] = v632;
            v189[14] = v188;
            uint64_t v623 = v189 + 18;
            v190 = NightingaleDPFLRunner.keyMetricsUpdatePregnanciesDurationS.unsafeMutableAddressor();
            outlined init with copy of String(v190, v623);
            v191 = v624;
            v192 = v653;
            v653[23] = v632;
            v192[20] = v191;
            uint64_t v625 = v192 + 24;
            v193 = NightingaleDPFLRunner.keyMetricsUpdateSliceDeltaAnchorDurationS.unsafeMutableAddressor();
            outlined init with copy of String(v193, v625);
            v194 = v626;
            v195 = v653;
            v653[29] = v632;
            v195[26] = v194;
            uint64_t v627 = v195 + 30;
            v196 = NightingaleDPFLRunner.keyMetricsSHRDurationS.unsafeMutableAddressor();
            outlined init with copy of String(v196, v627);
            v197 = v653;
            v198 = *(void *)(v1060 + 2216);
            v653[35] = v632;
            v197[32] = v198;
            uint64_t v628 = v197 + 36;
            v199 = NightingaleDPFLRunner.keyMetricsRequiredFeaturesQueryDurationS.unsafeMutableAddressor();
            outlined init with copy of String(v199, v628);
            v200 = v669;
            v201 = v653;
            v653[41] = v632;
            v201[38] = v200;
            uint64_t v629 = v201 + 42;
            v202 = NightingaleDPFLRunner.keyMetricsFeaturizationDurationS.unsafeMutableAddressor();
            outlined init with copy of String(v202, v629);
            v203 = v630;
            v204 = v653;
            v653[47] = v632;
            v204[44] = v203;
            uint64_t v631 = v204 + 48;
            v205 = NightingaleDPFLRunner.keyMetricsIterationElapsedTime.unsafeMutableAddressor();
            outlined init with copy of String(v205, v631);
            v206 = v633;
            v207 = v653;
            v653[53] = v632;
            v207[50] = v206;
            uint64_t v634 = v207 + 54;
            uint64_t v208 = NightingaleDPFLRunner.keyMetricsNumberOfAllPregnancies.unsafeMutableAddressor();
            outlined init with copy of String(v208, v634);
            uint64_t v209 = v635;
            uint64_t v210 = v653;
            int v657 = MEMORY[0x263F8D6C8];
            v653[59] = MEMORY[0x263F8D6C8];
            v210[56] = v209;
            uint64_t v636 = v210 + 60;
            uint64_t v211 = NightingaleDPFLRunner.keyMetricsNumberOfPregnancyInitializerFailed.unsafeMutableAddressor();
            outlined init with copy of String(v211, v636);
            v212 = v637;
            v213 = v653;
            v653[65] = v657;
            v213[62] = v212;
            uint64_t v638 = v213 + 66;
            uint64_t v214 = NightingaleDPFLRunner.keyMetricsOverlappingPregnanciesCount.unsafeMutableAddressor();
            outlined init with copy of String(v214, v638);
            v215 = v639;
            v216 = v653;
            v653[71] = v657;
            v216[68] = v215;
            uint64_t v640 = v216 + 72;
            uint64_t v217 = NightingaleDPFLRunner.keyMetricsNumberOfValidPregnancies.unsafeMutableAddressor();
            outlined init with copy of String(v217, v640);
            v218 = v641;
            v219 = v653;
            v653[77] = v657;
            v219[74] = v218;
            uint64_t v642 = v219 + 78;
            uint64_t v220 = NightingaleDPFLRunner.keyMetricsInvalidDurationPregnanciesCount.unsafeMutableAddressor();
            outlined init with copy of String(v220, v642);
            v221 = v643;
            v222 = v653;
            v653[83] = v657;
            v222[80] = v221;
            uint64_t v644 = v222 + 84;
            uint64_t v223 = NightingaleDPFLRunner.keyMetricsInvalidLMPDeltaPregnanciesCount.unsafeMutableAddressor();
            outlined init with copy of String(v223, v644);
            v224 = v645;
            v225 = v653;
            v653[89] = v657;
            v225[86] = v224;
            uint64_t v646 = v225 + 90;
            uint64_t v226 = NightingaleDPFLRunner.keyMetricsContainsFlowPregnanciesCount.unsafeMutableAddressor();
            outlined init with copy of String(v226, v646);
            v227 = v647;
            v228 = v653;
            v653[95] = v657;
            v228[92] = v227;
            uint64_t v648 = v228 + 96;
            v229 = NightingaleDPFLRunner.keyMetricsInvalidLMPPregnanciesCount.unsafeMutableAddressor();
            outlined init with copy of String(v229, v648);
            uint64_t v230 = v649;
            v231 = v653;
            v653[101] = v657;
            v231[98] = v230;
            uint64_t v650 = v231 + 102;
            uint64_t v232 = NightingaleDPFLRunner.keyMetricsInvalidEndPregnanciesCount.unsafeMutableAddressor();
            outlined init with copy of String(v232, v650);
            v233 = v651;
            v234 = v653;
            v653[107] = v657;
            v234[104] = v233;
            uint64_t v652 = v234 + 108;
            uint64_t v235 = NightingaleDPFLRunner.keyMetricsInvalidStartSourcePregnanciesCount.unsafeMutableAddressor();
            outlined init with copy of String(v235, v652);
            v236 = v653;
            v237 = v654;
            v653[113] = v657;
            v236[110] = v237;
            _finalizeUninitializedArray<A>(_:)();
            uint64_t v662 = MEMORY[0x263F8D310];
            int v663 = MEMORY[0x263F8EE58] + 8;
            uint64_t v664 = MEMORY[0x263F8D320];
            uint64_t v661 = Dictionary.init(dictionaryLiteral:)();
            outlined retain of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])((uint64_t)v659);
            _dictionaryUpCast<A, B, C, D>(_:)();
            unsigned int v665 = Dictionary.merging(_:uniquingKeysWith:)();
            *(void *)(v1060 + 3472) = v665;
            unint64_t v666 = 0;
            uint64_t v593 = *(void *)(v1060 + 3144);
            uint64_t v592 = *(unsigned __int8 *)(v1060 + 3693);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v238 = v592;
            v239 = v1060;
            uint64_t v594 = v1060 + 2248;
            *(void *)(v1060 + 2248) = v665;
            *(unsigned char *)(v239 + 3668) = v238;
            *(unsigned char *)(v239 + 3669) = 0;
            if (== infix<A>(_:_:)())
            {
              v240 = v666;
              uint64_t v587 = *(_DWORD *)(v1060 + 3632);
              uint64_t v583 = *(void *)(v1060 + 2880);
              uint64_t v588 = *(void *)(v1060 + 2872);
              uint64_t v584 = *(void *)(v1060 + 2816);
              int v585 = *(void *)(v1060 + 1864);
              swift_bridgeObjectRetain();
              uint64_t v586 = *(void *)(v1060 + 1904);
              swift_bridgeObjectRetain();
              int v582 = v1060 + 184;
              outlined retain of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])(v1060 + 184);
              uint64_t v589 = &v322;
              uint64_t v590 = NightingaleDPFLRunner.runTraining(modelPath:hyperParams:historicalPeriods:pregnancies:today:features:existingMetrics:)(v588, v583, v584, v585, v586, v587, v596, v597, v598._rawValue, v599._rawValue, v600._rawValue, v601._rawValue, v602._rawValue, v603._rawValue, v604._rawValue, v605._rawValue, v606._rawValue, v607._rawValue, v608._rawValue,
                       v609._rawValue,
                       v610._rawValue,
                       v611._rawValue,
                       v612._rawValue,
                       v613._rawValue,
                       v614,
                       v615,
                       v658,
                       v665);
              uint64_t v591 = v240;
              if (v240)
              {
                uint64_t v340 = *(void *)(v1060 + 3048);
                uint64_t v341 = *(void *)(v1060 + 2992);
                uint64_t v342 = *(void *)(v1060 + 2976);
                uint64_t v343 = *(void *)(v1060 + 2880);
                id v344 = *(id *)(v1060 + 2856);
                id v345 = *(id *)(v1060 + 2832);
                uint64_t v346 = *(void *)(v1060 + 2816);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v347 = v1060 + 184;
                outlined release of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])(v1060 + 184);
                swift_release();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                swift_bridgeObjectRelease();
                swift_release();
                outlined destroy of [A]();
                swift_bridgeObjectRelease();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                swift_bridgeObjectRelease();

                swift_release();
                swift_task_dealloc();
                v914 = v591;
                goto LABEL_161;
              }
              uint64_t v573 = *(void *)(v1060 + 3048);
              uint64_t v574 = *(void *)(v1060 + 2992);
              uint64_t v575 = *(void *)(v1060 + 2976);
              int v576 = *(void *)(v1060 + 2880);
              uint64_t v577 = *(id *)(v1060 + 2856);
              uint64_t v578 = *(id *)(v1060 + 2832);
              int v579 = *(void *)(v1060 + 2816);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v580 = v1060 + 184;
              outlined release of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])(v1060 + 184);
              swift_release();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              swift_bridgeObjectRelease();
              swift_release();
              outlined destroy of [A]();
              swift_bridgeObjectRelease();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              swift_bridgeObjectRelease();

              swift_release();
              swift_task_dealloc();
              int v581 = v590;
            }
            else
            {
              uint64_t v241 = v1060;
              *(unsigned char *)(v1060 + 3670) = *(unsigned char *)(v1060 + 3693);
              *(unsigned char *)(v241 + 3671) = 1;
              if ((== infix<A>(_:_:)() & 1) == 0)
              {
                uint64_t v244 = v1060;
                *(unsigned char *)(v1060 + 3672) = *(unsigned char *)(v1060 + 3693);
                *(unsigned char *)(v244 + 3673) = 2;
                if ((== infix<A>(_:_:)() & 1) == 0)
                {
                  uint64_t v540 = *(void *)(v1060 + 3048);
                  v541 = *(void *)(v1060 + 2992);
                  uint64_t v542 = *(void *)(v1060 + 2976);
                  uint64_t v543 = *(void *)(v1060 + 2880);
                  uint64_t v544 = *(id *)(v1060 + 2856);
                  uint64_t v545 = *(id *)(v1060 + 2832);
                  uint64_t v546 = *(void *)(v1060 + 2816);
                  lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
                  uint64_t v548 = swift_allocError();
                  void *v254 = 48;
                  swift_willThrow();
                  swift_bridgeObjectRelease();
                  uint64_t v547 = v1060 + 184;
                  outlined release of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])(v1060 + 184);
                  swift_release();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  swift_bridgeObjectRelease();
                  swift_release();
                  outlined destroy of [A]();
                  swift_bridgeObjectRelease();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  swift_bridgeObjectRelease();

                  swift_release();
                  swift_task_dealloc();
                  v914 = v548;
                  goto LABEL_161;
                }
                uint64_t v552 = *(void *)(v1060 + 2992);
                uint64_t v551 = *(_DWORD *)(v1060 + 3636);
                uint64_t v549 = *(void *)(v1060 + 2816);
                uint64_t v550 = *(void *)(v1060 + 2680);
                swift_retain();
                swift_retain();
                swift_retain();
                v245 = swift_task_alloc();
                v246 = v549;
                uint64_t v247 = v550;
                v248 = v551;
                v249 = v552;
                uint64_t v250 = v1060;
                uint64_t v553 = v245;
                *(void *)(v1060 + 3480) = v245;
                *(void *)(v245 + 16) = v246;
                *(void *)(v245 + 24) = v250 + 1904;
                *(void *)(v245 + 32) = v247;
                *(_DWORD *)(v245 + 40) = v248;
                *(void *)(v245 + 48) = v250 + 1776;
                *(void *)(v245 + 56) = v250 + 1784;
                *(void *)(v245 + 64) = v250 + 1792;
                *(void *)(v245 + 72) = v250 + 1800;
                *(void *)(v245 + 80) = v250 + 1864;
                *(void *)(v245 + 88) = v249;
                v251 = (void *)swift_task_alloc();
                *(void *)(v1060 + 3488) = v251;
                v252 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt32, UInt32));
                uint64_t v253 = v1060;
                uint64_t v79 = v1079;
                uint64_t v80 = v553;
                uint64_t v81 = v252;
                void *v251 = *(void *)(v1060 + 1688);
                v251[1] = NightingaleDPFLRunner.run(task:useCase:context:);
                uint64_t v82 = v253 + 1556;
                Swift::Int v83 = 9;
                Swift::Int v84 = 1;
                return NightingaleDPFLRunner.sendLocationAsync<A>(location:force:work:)(v82, v83, v84, v79, v80, v81);
              }
              uint64_t v571 = PFLTask.evalModelNames(taskType:hyperParams:)();
              uint64_t v572 = v666;
              if (v666)
              {
                uint64_t v332 = *(void *)(v1060 + 3048);
                uint64_t v333 = *(void *)(v1060 + 2992);
                uint64_t v334 = *(void *)(v1060 + 2976);
                uint64_t v335 = *(void *)(v1060 + 2880);
                id v336 = *(id *)(v1060 + 2856);
                id v337 = *(id *)(v1060 + 2832);
                uint64_t v338 = *(void *)(v1060 + 2816);
                swift_bridgeObjectRelease();
                uint64_t v339 = v1060 + 184;
                outlined release of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])(v1060 + 184);
                swift_release();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                swift_bridgeObjectRelease();
                swift_release();
                outlined destroy of [A]();
                swift_bridgeObjectRelease();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                swift_bridgeObjectRelease();

                swift_release();
                swift_task_dealloc();
                v914 = v572;
                goto LABEL_161;
              }
              uint64_t v567 = *(_DWORD *)(v1060 + 3632);
              uint64_t v564 = *(void *)(v1060 + 2816);
              int v563 = *(void *)(v1060 + 2672);
              uint64_t v565 = *(void *)(v1060 + 1864);
              swift_bridgeObjectRetain();
              uint64_t v566 = *(void *)(v1060 + 1904);
              swift_bridgeObjectRetain();
              uint64_t v562 = v1060 + 184;
              outlined retain of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])(v1060 + 184);
              v242._rawValue = v596;
              v243._rawValue = v597;
              uint64_t v568 = &v322;
              uint64_t v569 = NightingaleDPFLRunner.runEvals(evalModels:task:hyperParams:historicalPeriods:pregnancies:today:features:existingMetrics:)(v571, v563, v564, v565, v566, v567, v242, v243, v598, v599, v600, v601, v602, v603, v604, v605, v606, v607, v608,
                       v609,
                       v610,
                       v611,
                       v612,
                       v613,
                       v614,
                       v615,
                       v658,
                       v665);
              uint64_t v570 = 0;
              uint64_t v554 = *(void *)(v1060 + 3048);
              uint64_t v555 = *(void *)(v1060 + 2992);
              uint64_t v556 = *(void *)(v1060 + 2976);
              uint64_t v557 = *(void *)(v1060 + 2880);
              uint64_t v558 = *(id *)(v1060 + 2856);
              uint64_t v559 = *(id *)(v1060 + 2832);
              uint64_t v560 = *(void *)(v1060 + 2816);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v561 = v1060 + 184;
              outlined release of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])(v1060 + 184);
              swift_release();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              swift_bridgeObjectRelease();
              swift_release();
              outlined destroy of [A]();
              swift_bridgeObjectRelease();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              swift_bridgeObjectRelease();

              swift_release();
              swift_task_dealloc();
              int v581 = v569;
            }
LABEL_131:
            uint64_t v489 = v581;
            Swift::OpaquePointer v482 = *(void *)(v1060 + 2784);
            Swift::OpaquePointer v483 = *(void *)(v1060 + 2776);
            Swift::OpaquePointer v484 = *(void *)(v1060 + 2752);
            uint64_t v485 = *(void *)(v1060 + 2744);
            uint64_t v486 = *(void *)(v1060 + 2720);
            v487 = *(void *)(v1060 + 2712);
            uint64_t v488 = *(void *)(v1060 + 2704);
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            int v280 = v489;
            uint64_t v281 = *(uint64_t (**)(uint64_t))(*(void *)(v1060 + 1688) + 8);
            return v281(v280);
          }
LABEL_169:
          __break(1u);
          goto LABEL_170;
        }
LABEL_168:
        __break(1u);
        goto LABEL_169;
      }
LABEL_167:
      __break(1u);
      goto LABEL_168;
    }
LABEL_166:
    __break(1u);
    goto LABEL_167;
  }
  __n128 v54 = v977;
  uint64_t v962 = NightingaleDPFLRunner.performanceMeasure.getter();
  uint64_t v961 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("QueryRequiredFeatures", 0x15uLL, 1)._object;
  dispatch thunk of PerformanceMeasure.start(_:)();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v963 = *(void *)(v1060 + 2000);
  swift_bridgeObjectRetain();
  *(void *)(v1060 + 2424) = v963;
  uint64_t result = Sequence.min(by:)();
  uint64_t v964 = v54;
  if (!v54)
  {
    outlined destroy of [A]();
    if (*(void *)(v1060 + 776))
    {
      uint64_t v956 = *(void *)(v1060 + 776);
      uint64_t v955 = *(void *)(v1060 + 784);
      id v957 = v1060 + 752;
      __swift_project_boxed_opaque_existential_1((void *)(v1060 + 752), v956);
      uint64_t v958 = (*(uint64_t (**)(uint64_t))(v955 + 56))(v956);
      __swift_destroy_boxed_opaque_existential_1(v1060 + 752);
      uint64_t v959 = v958;
      uint64_t v960 = 0;
    }
    else
    {
      uint64_t v915 = 0;
      outlined destroy of Pregnancy?(v1060 + 752);
      uint64_t v959 = 0;
      uint64_t v960 = 1;
    }
    uint64_t v954 = v959;
    if (v960) {
      goto LABEL_52;
    }
    uint64_t v55 = v1060;
    uint64_t v953 = v1060 + 3592;
    *(_DWORD *)(v1060 + 3592) = v954;
    v952 = *(void *)(v55 + 2000);
    swift_bridgeObjectRetain();
    *(void *)(v1060 + 2432) = v952;
    Sequence.max(by:)();
    outlined destroy of [A]();
    if (*(void *)(v1060 + 816))
    {
      uint64_t v947 = *(void *)(v1060 + 816);
      uint64_t v946 = *(void *)(v1060 + 824);
      uint64_t v948 = v1060 + 792;
      __swift_project_boxed_opaque_existential_1((void *)(v1060 + 792), v947);
      uint64_t v949 = (*(uint64_t (**)(uint64_t))(v946 + 56))(v947);
      __swift_destroy_boxed_opaque_existential_1(v1060 + 792);
      uint64_t v950 = v949;
      uint64_t v951 = 0;
    }
    else
    {
      int v916 = 0;
      outlined destroy of Pregnancy?(v1060 + 792);
      uint64_t v950 = 0;
      uint64_t v951 = 1;
    }
    uint64_t v945 = v950;
    if (v951)
    {
LABEL_52:
      uint64_t v907 = *(void *)(v1060 + 2992);
      uint64_t v908 = *(void *)(v1060 + 2976);
      uint64_t v909 = *(void *)(v1060 + 2880);
      int v910 = *(id *)(v1060 + 2856);
      uint64_t v911 = *(id *)(v1060 + 2832);
      uint64_t v912 = *(void *)(v1060 + 2816);
      lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
      uint64_t v913 = swift_allocError();
      char *v85 = 34;
      swift_willThrow();
      outlined destroy of [A]();
      outlined destroy of [A]();
      swift_bridgeObjectRelease();
      swift_release();
      outlined destroy of [A]();
      swift_bridgeObjectRelease();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      swift_bridgeObjectRelease();

      swift_release();
      v914 = v913;
      goto LABEL_161;
    }
    uint64_t v56 = v1060;
    uint64_t v57 = v954;
    uint64_t v942 = *(void *)(v1060 + 2816);
    *(_DWORD *)(v1060 + 3600) = v945;
    uint64_t v940 = v56 + 3588;
    *(_DWORD *)(v56 + 3588) = v57;
    uint64_t v938 = lazy protocol witness table accessor for type Int and conformance Int();
    uint64_t v939 = lazy protocol witness table accessor for type Int and conformance Int();
    uint64_t v941 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    *(void *)(v1060 + 3152) = v941;
    SignedInteger<>.init<A>(_:)();
    uint64_t v943 = *(void *)(v1060 + 2440);
    uint64_t v23 = HyperParams.minSliceAnchorDelta.getter();
    uint64_t v944 = v943 + v23;
    if (!__OFADD__(v943, v23))
    {
      *(_DWORD *)(v1060 + 3596) = HyperParams.sliceSize.getter();
      uint64_t v23 = SignedInteger<>.init<A>(_:)();
      BOOL v59 = *(void *)(v1060 + 2448);
      v937 = v944 - v59;
      if (!__OFSUB__(v944, v59))
      {
        uint64_t v936 = v937 + 1;
        if (!__OFADD__(v937, 1))
        {
          uint64_t v933 = *(void *)(v1060 + 2816);
          uint64_t v928 = v1060 + 2456;
          *(void *)(v1060 + 2456) = v936;
          id v926 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
          uint64_t v927 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
          uint64_t v929 = lazy protocol witness table accessor for type Int and conformance Int();
          uint64_t v931 = MEMORY[0x263F8E8F8];
          uint64_t v930 = MEMORY[0x263F8D6C8];
          UnsignedInteger<>.init<A>(_:)();
          uint64_t v62 = v945;
          uint64_t v63 = v1060;
          v932 = *(_DWORD *)(v1060 + 3580);
          *(_DWORD *)(v1060 + 3640) = v932;
          *(_DWORD *)(v63 + 3616) = v62;
          SignedInteger<>.init<A>(_:)();
          uint64_t v934 = *(void *)(v1060 + 2464);
          uint64_t v23 = HyperParams.maxSliceAnchorDelta.getter();
          int v935 = v934 + v23;
          if (!__OFADD__(v934, v23))
          {
            uint64_t v923 = *(_DWORD *)(v1060 + 3632);
            *(void *)(v1060 + 2472) = v935;
            uint64_t v924 = MEMORY[0x263F8E8F8];
            UnsignedInteger<>.init<A>(_:)();
            uint64_t v65 = v923;
            uint64_t v66 = v1060;
            *(_DWORD *)(v1060 + 3620) = *(_DWORD *)(v1060 + 3612);
            *(_DWORD *)(v66 + 3624) = v65;
            min<A>(_:_:)();
            uint64_t v67 = v932;
            uint64_t v68 = *(_DWORD *)(v1060 + 3604);
            uint64_t v925 = v68;
            *(_DWORD *)(v1060 + 3644) = v68;
            if (v68 < v67)
            {
LABEL_46:
              LOBYTE(v322) = 2;
              uint64_t v323 = 347;
              LODWORD(v324) = 0;
              return _assertionFailure(_:_:file:line:flags:)();
            }
            uint64_t v69 = v1060;
            uint64_t v70 = v925;
            v919 = *(void *)(v1060 + 3008);
            uint64_t v917 = *(void *)(v1060 + 2816);
            uint64_t v918 = *(void *)(v1060 + 2680);
            uint64_t v920 = v1060 + 1572;
            *(_DWORD *)(v1060 + 1572) = v932;
            *(_DWORD *)(v69 + 1576) = v70;
            swift_retain();
            swift_retain();
            uint64_t v71 = swift_task_alloc();
            uint64_t v72 = v917;
            uint64_t v73 = v918;
            uint64_t v74 = v932;
            uint64_t v75 = v925;
            uint64_t v922 = v71;
            *(void *)(v1060 + 3160) = v71;
            *(void *)(v71 + 16) = v72;
            *(void *)(v71 + 24) = v73;
            *(_DWORD *)(v71 + 32) = v74;
            *(_DWORD *)(v71 + 36) = v75;
            id v921 = default argument 1 of NightingaleDPFLRunner.sendLocationAsync<A>(location:force:work:)();
            uint64_t v76 = (void *)swift_task_alloc();
            uint64_t v77 = v1060;
            uint64_t v78 = v921;
            uint64_t v79 = v1088;
            uint64_t v80 = v922;
            *(void *)(v1060 + 3168) = v76;
            *uint64_t v76 = *(void *)(v77 + 1688);
            v76[1] = NightingaleDPFLRunner.run(task:useCase:context:);
            uint64_t v81 = *(void *)(v77 + 3008);
            uint64_t v82 = v77 + 2480;
            Swift::Int v83 = 8;
            Swift::Int v84 = v78 & 1;
            return NightingaleDPFLRunner.sendLocationAsync<A>(location:force:work:)(v82, v83, v84, v79, v80, v81);
          }
          goto LABEL_173;
        }
LABEL_172:
        __break(1u);
LABEL_173:
        __break(1u);
        return MEMORY[0x270F57130](v23, v19, v20, v21, v22);
      }
LABEL_171:
      __break(1u);
      goto LABEL_172;
    }
LABEL_170:
    __break(1u);
    goto LABEL_171;
  }
  return result;
}

uint64_t default argument 1 of NightingaleDPFLRunner.sendLocation(_:_:)()
{
  return 0;
}

void closure #1 in NightingaleDPFLRunner.run(task:useCase:context:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v41 = 0;
  uint64_t v40 = 0;
  uint64_t v39 = 0;
  uint64_t v47 = a1;
  uint64_t v46 = a2;
  uint64_t v45 = a3;
  outlined init with copy of HealthDataQuery(a1 + 48, (uint64_t)v42);
  uint64_t v30 = v43;
  uint64_t v31 = v44;
  __swift_project_boxed_opaque_existential_1(v42, v43);
  char v32 = HyperParams.birthDateRequired.getter();
  char v4 = HyperParams.useCachedDayStreamProcessorConfig.getter();
  uint64_t v33 = (void *)(*(uint64_t (**)(void, void, uint64_t))(v31 + 48))(v32 & 1, v4 & 1, v30);
  uint64_t v34 = v5;
  uint64_t v35 = v6;
  if (v29)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
  }
  else
  {
    uint64_t v41 = v33;
    uint64_t v40 = v5;
    uint64_t v39 = v6;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
    outlined init with copy of HealthDataQuery(a1 + 48, (uint64_t)v36);
    uint64_t v25 = v37;
    uint64_t v26 = v38;
    __swift_project_boxed_opaque_existential_1(v36, v37);
    v7._uint64_t countAndFlagsBits = HyperParams.heartRateFwEnd10PctModelName.getter();
    Swift::String v8 = PFLTask.getValidModelPath(modelFileSuffix:)(v7);
    if (v9)
    {
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
    }
    else
    {
      swift_bridgeObjectRelease();
      v10._uint64_t countAndFlagsBits = HyperParams.heartRatePeriod10PctModelName.getter();
      Swift::String v11 = PFLTask.getValidModelPath(modelFileSuffix:)(v10);
      if (v12)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
      }
      else
      {
        swift_bridgeObjectRelease();
        v13._uint64_t countAndFlagsBits = HyperParams.wTmpFwEndLstmModelName.getter();
        Swift::String v14 = PFLTask.getValidModelPath(modelFileSuffix:)(v13);
        if (v15)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
        }
        else
        {
          swift_bridgeObjectRelease();
          v16._uint64_t countAndFlagsBits = HyperParams.wTmpFwEndRFModelName.getter();
          Swift::String v17 = PFLTask.getValidModelPath(modelFileSuffix:)(v16);
          if (v18)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
          }
          else
          {
            swift_bridgeObjectRelease();
            v19._uint64_t countAndFlagsBits = HyperParams.wTmpPeriodLstmModelName.getter();
            Swift::String v20 = PFLTask.getValidModelPath(modelFileSuffix:)(v19);
            swift_bridgeObjectRelease();
            if (v21)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
            }
            else
            {
              id v24 = (id)(*(uint64_t (**)(uint64_t, void *, uint64_t, void *, uint64_t, void *, uint64_t, void *, uint64_t, void *, void, void, void, uint64_t, uint64_t))(v26 + 64))(v8._countAndFlagsBits, v8._object, v11._countAndFlagsBits, v11._object, v14._countAndFlagsBits, v14._object, v17._countAndFlagsBits, v17._object, v20._countAndFlagsBits, v20._object, 0, 0, 0, v25, v26);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
              id v22 = v33;
              *a4 = v33;
              a4[1] = v34;
              a4[2] = v35;
              id v23 = v24;
              a4[3] = v24;
            }
          }
        }
      }
    }
  }
}

uint64_t closure #2 in NightingaleDPFLRunner.run(task:useCase:context:)(uint64_t a1, uint64_t a2)
{
  v2[2] = v2;
  v2[3] = 0;
  v2[4] = 0;
  v2[3] = a1;
  v2[4] = a2;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 40) = v3;
  *uint64_t v3 = *(void *)(v5 + 16);
  v3[1] = closure #2 in NightingaleDPFLRunner.run(task:useCase:context:);
  return NightingaleDPFLRunner.queryPregnancies(hyperParams:)(a2);
}

uint64_t closure #2 in NightingaleDPFLRunner.run(task:useCase:context:)(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v10 = *v5;
  *(void *)(v10 + 16) = *v5;
  uint64_t v11 = v10 + 16;
  uint64_t v6 = swift_task_dealloc();
  if (v4)
  {
    uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)v11 + 8);
    return v9(v6);
  }
  else
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v11 + 8);
    return v7(a1, a2, a3, a4);
  }
}

uint64_t thunk for @callee_guaranteed @async () -> (@unowned Int, @unowned Int, @owned [Pregnancy], @unowned UInt32, @error @owned Error)(uint64_t a1, int *a2)
{
  uint64_t v5 = v2;
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 16) = v2;
  uint64_t v6 = (uint64_t (*)(void))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 32) = v3;
  *uint64_t v3 = *(void *)(v5 + 16);
  v3[1] = thunk for @callee_guaranteed @async () -> (@unowned Int, @unowned Int, @owned [Pregnancy], @unowned UInt32, @error @owned Error);
  return v6();
}

uint64_t thunk for @callee_guaranteed @async () -> (@unowned Int, @unowned Int, @owned [Pregnancy], @unowned UInt32, @error @owned Error)(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6 = *v5;
  *(void *)(v6 + 16) = *v5;
  uint64_t v10 = v6 + 16;
  uint64_t v11 = v6 + 16;
  swift_task_dealloc();
  if (v4)
  {
    Swift::String v8 = *(uint64_t (**)(void))(*(void *)v11 + 8);
  }
  else
  {
    uint64_t v7 = *(void *)(v10 + 8);
    *(void *)uint64_t v7 = a1;
    *(void *)(v7 + 8) = a2;
    *(void *)(v7 + 16) = a3;
    *(_DWORD *)(v7 + 24) = a4;
    Swift::String v8 = *(uint64_t (**)(void))(*(void *)v11 + 8);
  }
  return v8();
}

uint64_t closure #3 in NightingaleDPFLRunner.run(task:useCase:context:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  *(_DWORD *)(v5 + 100) = a5;
  *(_DWORD *)(v5 + 92) = a4;
  *(void *)(v5 + 56) = a3;
  *(void *)(v5 + 48) = a2;
  *(void *)(v5 + 40) = a1;
  *(void *)(v5 + 16) = v5;
  *(void *)(v5 + 24) = 0;
  *(void *)(v5 + 32) = 0;
  *(_DWORD *)(v5 + 88) = 0;
  *(_DWORD *)(v5 + 96) = 0;
  *(void *)(v5 + 24) = a2;
  *(void *)(v5 + 32) = a3;
  *(_DWORD *)(v5 + 88) = a4;
  *(_DWORD *)(v5 + 96) = a5;
  return MEMORY[0x270FA2498](closure #3 in NightingaleDPFLRunner.run(task:useCase:context:), 0);
}

uint64_t closure #3 in NightingaleDPFLRunner.run(task:useCase:context:)()
{
  int v10 = *(_DWORD *)(v0 + 100);
  int v8 = *(_DWORD *)(v0 + 92);
  uint64_t v7 = *(void *)(v0 + 56);
  uint64_t v9 = *(void *)(v0 + 48);
  *(void *)(v0 + 16) = v0;
  double v12 = (double)HyperParams.rawSampleTimeout.getter();
  swift_retain();
  swift_retain();
  uint64_t v13 = swift_allocObject();
  *(void *)(v0 + 64) = v13;
  *(void *)(v13 + 16) = v7;
  *(_DWORD *)(v13 + 24) = v8;
  *(void *)(v13 + 32) = v9;
  *(_DWORD *)(v13 + 40) = v10;
  uint64_t v1 = (void *)swift_task_alloc();
  v11[9] = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HealthDataRawSampleType : HealthDataQueryResult]);
  v3.n128_f64[0] = v12;
  uint64_t v4 = v2;
  *uint64_t v1 = v11[2];
  v1[1] = closure #3 in NightingaleDPFLRunner.run(task:useCase:context:);
  uint64_t v5 = v11[5];
  return MEMORY[0x270F57130](v5, &async function pointer to partial apply for closure #1 in closure #3 in NightingaleDPFLRunner.run(task:useCase:context:), v13, v4, v3);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *v1;
  *(void *)(v4 + 16) = *v1;
  *(void *)(v4 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](closure #3 in NightingaleDPFLRunner.run(task:useCase:context:), 0);
  }
  else
  {
    swift_release();
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)(v4 + 16) + 8);
    return v2();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  *(void *)(v0 + 16) = v0;
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v0 + 16) + 8);
  return v1();
}

uint64_t closure #1 in closure #3 in NightingaleDPFLRunner.run(task:useCase:context:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  *(_DWORD *)(v5 + 160) = a5;
  *(void *)(v5 + 104) = a4;
  *(_DWORD *)(v5 + 156) = a3;
  *(void *)(v5 + 96) = a2;
  *(void *)(v5 + 88) = a1;
  *(void *)(v5 + 56) = v5;
  *(void *)(v5 + 64) = 0;
  *(_DWORD *)(v5 + 144) = 0;
  *(void *)(v5 + 72) = 0;
  *(_DWORD *)(v5 + 152) = 0;
  *(void *)(v5 + 64) = a2;
  *(_DWORD *)(v5 + 144) = a3;
  *(void *)(v5 + 72) = a4;
  *(_DWORD *)(v5 + 152) = a5;
  return MEMORY[0x270FA2498](closure #1 in closure #3 in NightingaleDPFLRunner.run(task:useCase:context:), 0);
}

uint64_t closure #1 in closure #3 in NightingaleDPFLRunner.run(task:useCase:context:)()
{
  unsigned int v13 = *(_DWORD *)(v0 + 156);
  uint64_t v1 = *(void *)(v0 + 96);
  *(void *)(v0 + 56) = v0;
  outlined init with copy of HealthDataQuery(v1 + 48, v0 + 16);
  uint64_t v10 = *(void *)(v0 + 40);
  uint64_t v11 = *(void *)(v0 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v10);
  uint64_t v2 = _allocateUninitializedArray<A>(_:)();
  *__n128 v3 = 0;
  v3[1] = 3;
  v3[2] = 1;
  v3[3] = 2;
  _finalizeUninitializedArray<A>(_:)();
  uint64_t v12 = v2;
  *(void *)(v0 + 112) = v2;
  *(void *)(v0 + 80) = HyperParams.lmpMaxRange.getter();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  uint64_t result = UnsignedInteger<>.init<A>(_:)();
  unsigned int v5 = *(_DWORD *)(v0 + 148);
  unsigned int v14 = v13 - v5;
  if (v13 < v5)
  {
    __break(1u);
  }
  else if (*(_DWORD *)(v9 + 160) >= v14)
  {
    unsigned int v7 = *(_DWORD *)(v9 + 160);
    int v8 = (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))(*(void *)(v11 + 16)
                                                                             + **(int **)(v11 + 16));
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v9 + 120) = v6;
    *uint64_t v6 = *(void *)(v9 + 56);
    v6[1] = closure #1 in closure #3 in NightingaleDPFLRunner.run(task:useCase:context:);
    return v8(v12, __PAIR64__(v7, v14), v10, v11);
  }
  else
  {
    return _assertionFailure(_:_:file:line:flags:)();
  }
  return result;
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = v0[16];
  uint64_t v2 = (void *)v0[11];
  v0[7] = v0;
  *uint64_t v2 = v1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  __n128 v3 = *(uint64_t (**)(void))(v0[7] + 8);
  return v3();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  *(void *)(v0 + 56) = v0;
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v3 + 56) + 8);
  return v1();
}

uint64_t closure #1 in closure #3 in NightingaleDPFLRunner.run(task:useCase:context:)(uint64_t a1)
{
  unsigned int v5 = (void *)*v2;
  v5[7] = *v2;
  v5[16] = a1;
  v5[17] = v1;
  swift_task_dealloc();
  if (v1)
  {
    __n128 v3 = closure #1 in closure #3 in NightingaleDPFLRunner.run(task:useCase:context:);
  }
  else
  {
    swift_bridgeObjectRelease();
    __n128 v3 = closure #1 in closure #3 in NightingaleDPFLRunner.run(task:useCase:context:);
  }
  return MEMORY[0x270FA2498](v3, 0);
}

uint64_t default argument 1 of NightingaleDPFLRunner.sendLocationAsync<A>(location:force:work:)()
{
  return 0;
}

void closure #4 in NightingaleDPFLRunner.run(task:useCase:context:)(unsigned char *a1@<X1>, unsigned char *a2@<X8>)
{
  *a2 = *a1;
}

void closure #6 in NightingaleDPFLRunner.run(task:useCase:context:)(unsigned char *a1@<X1>, unsigned char *a2@<X8>)
{
  *a2 = *a1 & 1;
}

uint64_t closure #7 in NightingaleDPFLRunner.run(task:useCase:context:)@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t result = swift_bridgeObjectRetain();
  *a2 = v4;
  return result;
}

uint64_t closure #8 in NightingaleDPFLRunner.run(task:useCase:context:)@<X0>(void **a1@<X1>, void **a2@<X2>, void **a3@<X3>, void **a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t result = CalendarPeriodPrediction.predictHistoricalPeriods(flow:otr:spotting:cycleFactors:)(a1, a2, a3, a4);
  if (!v5) {
    *a5 = result;
  }
  return result;
}

uint64_t closure #9 in NightingaleDPFLRunner.run(task:useCase:context:)(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v26 = 0;
  uint64_t v23 = 0;
  char v22 = 0;
  uint64_t v33 = a1;
  uint64_t v32 = a2;
  uint64_t v31 = a3;
  uint64_t v30 = a4;
  uint64_t v29 = a5;
  uint64_t v20 = a1[3];
  uint64_t v19 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v20);
  char v28 = (*(uint64_t (**)(uint64_t))(v19 + 48))(v20);
  char v27 = 2;
  lazy protocol witness table accessor for type PregnancySource and conformance PregnancySource();
  if (== infix<A>(_:_:)()) {
    uint64_t v16 = HyperParams.minLMPTestDelta.getter();
  }
  else {
    uint64_t v16 = HyperParams.minLMPFactorDelta.getter();
  }
  uint64_t v26 = v16;
  uint64_t v15 = a1[3];
  uint64_t v14 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v15);
  char v25 = (*(uint64_t (**)(uint64_t))(v14 + 48))(v15);
  char v24 = 2;
  if (== infix<A>(_:_:)()) {
    uint64_t v13 = HyperParams.maxLMPTestDelta.getter();
  }
  else {
    uint64_t v13 = HyperParams.maxLMPFactorDelta.getter();
  }
  uint64_t v23 = v13;
  uint64_t v6 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v10 = HyperParams.minPregnancyDuration.getter();
  uint64_t v7 = HyperParams.maxPregnancyDuration.getter();
  char v8 = HyperParams.excludePregnanciesContainingFlow.getter();
  unsigned int v9 = HyperParams.maxLMPTolerableFlowDelta.getter();
  uint64_t v11 = *a3;
  swift_bridgeObjectRetain();
  HyperParams.hkPregnancyStartSourceIncludeList.getter();
  char v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, uint64_t))(v6 + 120))(v10, v7, v16, v13, v8 & 1, v9, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v22 = v12;
  if (static PregnancyInvalidReason.== infix(_:_:)(v12, 0))
  {
    outlined init with copy of HealthDataQuery((uint64_t)a1, (uint64_t)v21);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Pregnancy]);
    return Array.append(_:)();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PregnancyInvalidReason]);
    return Array.append(_:)();
  }
}

BOOL closure #10 in NightingaleDPFLRunner.run(task:useCase:context:)(char *a1)
{
  return static PregnancyInvalidReason.== infix(_:_:)(*a1, 1);
}

BOOL closure #11 in NightingaleDPFLRunner.run(task:useCase:context:)(char *a1)
{
  return static PregnancyInvalidReason.== infix(_:_:)(*a1, 2);
}

BOOL closure #12 in NightingaleDPFLRunner.run(task:useCase:context:)(char *a1)
{
  return static PregnancyInvalidReason.== infix(_:_:)(*a1, 3);
}

BOOL closure #13 in NightingaleDPFLRunner.run(task:useCase:context:)(char *a1)
{
  return static PregnancyInvalidReason.== infix(_:_:)(*a1, 4);
}

BOOL closure #14 in NightingaleDPFLRunner.run(task:useCase:context:)(char *a1)
{
  return static PregnancyInvalidReason.== infix(_:_:)(*a1, 5);
}

BOOL closure #15 in NightingaleDPFLRunner.run(task:useCase:context:)(char *a1)
{
  return static PregnancyInvalidReason.== infix(_:_:)(*a1, 6);
}

BOOL closure #16 in NightingaleDPFLRunner.run(task:useCase:context:)(void *a1, void *a2)
{
  uint64_t v4 = a1[3];
  uint64_t v3 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  unsigned int v8 = (*(uint64_t (**)(uint64_t))(v3 + 56))(v4);
  uint64_t v7 = a2[3];
  uint64_t v6 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v7);
  return v8 < (*(unsigned int (**)(uint64_t))(v6 + 56))(v7);
}

uint64_t closure #18 in NightingaleDPFLRunner.run(task:useCase:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[7] = a3;
  v4[6] = a2;
  v4[5] = a1;
  v4[2] = v4;
  v4[3] = 0;
  v4[4] = 0;
  v4[11] = 0;
  v4[12] = a4;
  v4[3] = a2;
  v4[4] = a3;
  v4[11] = a4;
  return MEMORY[0x270FA2498](closure #18 in NightingaleDPFLRunner.run(task:useCase:context:), 0);
}

uint64_t closure #18 in NightingaleDPFLRunner.run(task:useCase:context:)()
{
  int v9 = *(_DWORD *)(v0 + 100);
  int v8 = *(_DWORD *)(v0 + 96);
  uint64_t v7 = *(void *)(v0 + 56);
  *(void *)(v0 + 16) = v0;
  double v11 = (double)HyperParams.sensorTimeout.getter();
  swift_retain();
  uint64_t v12 = swift_allocObject();
  *(void *)(v0 + 64) = v12;
  *(void *)(v12 + 16) = v7;
  *(_DWORD *)(v12 + 24) = v8;
  *(_DWORD *)(v12 + 28) = v9;
  uint64_t v1 = (void *)swift_task_alloc();
  v10[9] = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HealthDataRawSampleType : HealthDataQueryResult]);
  v3.n128_f64[0] = v11;
  uint64_t v4 = v2;
  *uint64_t v1 = v10[2];
  v1[1] = closure #18 in NightingaleDPFLRunner.run(task:useCase:context:);
  uint64_t v5 = v10[5];
  return MEMORY[0x270F57130](v5, &async function pointer to partial apply for closure #1 in closure #18 in NightingaleDPFLRunner.run(task:useCase:context:), v12, v4, v3);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *v1;
  *(void *)(v4 + 16) = *v1;
  *(void *)(v4 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](closure #18 in NightingaleDPFLRunner.run(task:useCase:context:), 0);
  }
  else
  {
    swift_release();
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)(v4 + 16) + 8);
    return v2();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  *(void *)(v0 + 16) = v0;
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v0 + 16) + 8);
  return v1();
}

uint64_t closure #1 in closure #18 in NightingaleDPFLRunner.run(task:useCase:context:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[10] = a2;
  v3[9] = a1;
  v3[7] = v3;
  v3[8] = 0;
  v3[15] = 0;
  v3[16] = a3;
  v3[8] = a2;
  v3[15] = a3;
  return MEMORY[0x270FA2498](closure #1 in closure #18 in NightingaleDPFLRunner.run(task:useCase:context:), 0);
}

uint64_t closure #1 in closure #18 in NightingaleDPFLRunner.run(task:useCase:context:)()
{
  uint64_t v6 = v0[16];
  uint64_t v1 = v0[10];
  v0[7] = v0;
  outlined init with copy of HealthDataQuery(v1 + 48, (uint64_t)(v0 + 2));
  uint64_t v8 = v0[5];
  uint64_t v9 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v8);
  uint64_t v2 = _allocateUninitializedArray<A>(_:)();
  *__n128 v3 = 7;
  _finalizeUninitializedArray<A>(_:)();
  uint64_t v11 = v2;
  v0[11] = v2;
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 + 16) + **(int **)(v9 + 16));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v7 + 96) = v4;
  *uint64_t v4 = *(void *)(v7 + 56);
  v4[1] = closure #1 in closure #18 in NightingaleDPFLRunner.run(task:useCase:context:);
  return v10(v11, v6, v8, v9);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = v0[13];
  uint64_t v2 = (void *)v0[9];
  v0[7] = v0;
  *uint64_t v2 = v1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  __n128 v3 = *(uint64_t (**)(void))(v0[7] + 8);
  return v3();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  *(void *)(v0 + 56) = v0;
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v3 + 56) + 8);
  return v1();
}

uint64_t closure #1 in closure #18 in NightingaleDPFLRunner.run(task:useCase:context:)(uint64_t a1)
{
  uint64_t v5 = (void *)*v2;
  v5[7] = *v2;
  v5[13] = a1;
  v5[14] = v1;
  swift_task_dealloc();
  if (v1)
  {
    __n128 v3 = closure #1 in closure #18 in NightingaleDPFLRunner.run(task:useCase:context:);
  }
  else
  {
    swift_bridgeObjectRelease();
    __n128 v3 = closure #1 in closure #18 in NightingaleDPFLRunner.run(task:useCase:context:);
  }
  return MEMORY[0x270FA2498](v3, 0);
}

float closure #19 in NightingaleDPFLRunner.run(task:useCase:context:)@<S0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  float v3 = *(float *)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  float result = v3;
  *(float *)a2 = v3;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = v6;
  return result;
}

BOOL closure #20 in NightingaleDPFLRunner.run(task:useCase:context:)(void *a1, void *a2)
{
  uint64_t v4 = a1[3];
  uint64_t v3 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  unsigned int v8 = (*(uint64_t (**)(uint64_t))(v3 + 16))(v4);
  uint64_t v7 = a2[3];
  uint64_t v6 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v7);
  return v8 < (*(unsigned int (**)(uint64_t))(v6 + 16))(v7);
}

uint64_t closure #22 in NightingaleDPFLRunner.run(task:useCase:context:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  *(_DWORD *)(v5 + 156) = a5;
  *(void *)(v5 + 96) = a4;
  *(_DWORD *)(v5 + 152) = a3;
  *(void *)(v5 + 88) = a2;
  *(void *)(v5 + 80) = a1;
  *(void *)(v5 + 56) = v5;
  *(void *)(v5 + 64) = 0;
  *(_DWORD *)(v5 + 136) = 0;
  *(void *)(v5 + 72) = 0;
  *(_DWORD *)(v5 + 144) = 0;
  *(void *)(v5 + 64) = a2;
  *(_DWORD *)(v5 + 136) = a3;
  *(void *)(v5 + 72) = a4;
  *(_DWORD *)(v5 + 144) = a5;
  return MEMORY[0x270FA2498](closure #22 in NightingaleDPFLRunner.run(task:useCase:context:), 0);
}

uint64_t closure #22 in NightingaleDPFLRunner.run(task:useCase:context:)()
{
  unsigned int v13 = *(_DWORD *)(v0 + 152);
  uint64_t v1 = *(void *)(v0 + 88);
  *(void *)(v0 + 56) = v0;
  outlined init with copy of HealthDataQuery(v1 + 48, v0 + 16);
  uint64_t v10 = *(void *)(v0 + 40);
  uint64_t v11 = *(void *)(v0 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v10);
  uint64_t v2 = _allocateUninitializedArray<A>(_:)();
  *uint64_t v3 = 0;
  v3[1] = 3;
  v3[2] = 1;
  v3[3] = 2;
  v3[4] = 7;
  _finalizeUninitializedArray<A>(_:)();
  uint64_t v12 = v2;
  *(void *)(v0 + 104) = v2;
  *(_DWORD *)(v0 + 148) = HyperParams.maximumDays.getter();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  uint64_t result = UnsignedInteger<>.init<A>(_:)();
  unsigned int v5 = *(_DWORD *)(v0 + 140);
  unsigned int v14 = v13 - v5;
  if (v13 < v5)
  {
    __break(1u);
  }
  else if (*(_DWORD *)(v9 + 156) >= v14)
  {
    unsigned int v7 = *(_DWORD *)(v9 + 156);
    unsigned int v8 = (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))(*(void *)(v11 + 16)
                                                                             + **(int **)(v11 + 16));
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v9 + 112) = v6;
    *uint64_t v6 = *(void *)(v9 + 56);
    v6[1] = closure #22 in NightingaleDPFLRunner.run(task:useCase:context:);
    return v8(v12, __PAIR64__(v7, v14), v10, v11);
  }
  else
  {
    return _assertionFailure(_:_:file:line:flags:)();
  }
  return result;
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = v0[15];
  uint64_t v2 = (void *)v0[10];
  v0[7] = v0;
  *uint64_t v2 = v1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  uint64_t v3 = *(uint64_t (**)(void))(v0[7] + 8);
  return v3();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  *(void *)(v0 + 56) = v0;
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v3 + 56) + 8);
  return v1();
}

uint64_t closure #22 in NightingaleDPFLRunner.run(task:useCase:context:)(uint64_t a1)
{
  unsigned int v5 = (void *)*v2;
  v5[7] = *v2;
  v5[15] = a1;
  v5[16] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v3 = closure #22 in NightingaleDPFLRunner.run(task:useCase:context:);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = closure #22 in NightingaleDPFLRunner.run(task:useCase:context:);
  }
  return MEMORY[0x270FA2498](v3, 0);
}

uint64_t closure #28 in NightingaleDPFLRunner.run(task:useCase:context:)(uint64_t a1, void *a2)
{
  char v6 = HyperParams.useTestDateAsLMP.getter();
  swift_retain();
  if (v6) {
    char started = 1;
  }
  else {
    char started = HyperParams.useFactorStartDateAsLMP.getter();
  }
  uint64_t result = swift_release();
  if ((started & 1) == 0)
  {
    id v3 = a2;
    return swift_willThrow();
  }
  return result;
}

uint64_t closure #29 in NightingaleDPFLRunner.run(task:useCase:context:)(void *a1, uint64_t a2)
{
  uint64_t v19 = a1;
  uint64_t v18 = a2;
  uint64_t v11 = a1[3];
  uint64_t v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v11);
  char v17 = (*(uint64_t (**)(uint64_t))(v10 + 48))(v11);
  char v16 = 2;
  lazy protocol witness table accessor for type PregnancySource and conformance PregnancySource();
  char v12 = == infix<A>(_:_:)();
  swift_retain();
  if (v12) {
    char v8 = HyperParams.useTestDateAsLMP.getter();
  }
  else {
    char v8 = 0;
  }
  swift_release();
  outlined init with copy of HealthDataQuery((uint64_t)a1, (uint64_t)v13);
  swift_retain();
  if (v8)
  {
    char v7 = 1;
  }
  else
  {
    uint64_t v5 = v14;
    uint64_t v4 = v15;
    __swift_project_boxed_opaque_existential_1(v13, v14);
    (*(void (**)(uint64_t))(v4 + 48))(v5);
    Swift::Bool v6 = PregnancySource.isFactorType()();
    swift_retain();
    if (v6) {
      char started = HyperParams.useFactorStartDateAsLMP.getter();
    }
    else {
      char started = 0;
    }
    swift_release();
    char v7 = started;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  swift_release();
  return v7 & 1;
}

uint64_t closure #32 in NightingaleDPFLRunner.run(task:useCase:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[64] = v19;
  v8[63] = a8;
  v8[62] = a7;
  v8[61] = a6;
  v8[60] = a4;
  v8[59] = a3;
  v8[58] = a2;
  v8[38] = v8;
  v8[39] = 0;
  v8[40] = 0;
  v8[41] = 0;
  v8[71] = 0;
  v8[42] = 0;
  v8[43] = 0;
  v8[44] = 0;
  v8[45] = 0;
  v8[48] = 0;
  v8[49] = 0;
  v8[72] = a5;
  uint64_t v10 = type metadata accessor for PFLError();
  v8[65] = v10;
  v8[66] = *(void *)(v10 - 8);
  v8[67] = swift_task_alloc();
  v8[39] = a2;
  v8[40] = a3;
  v8[41] = a4;
  v8[71] = a5;
  v8[42] = a6;
  v8[43] = a7;
  v8[44] = a8;
  v8[45] = v19;
  return MEMORY[0x270FA2498](closure #32 in NightingaleDPFLRunner.run(task:useCase:context:), 0);
}

uint64_t closure #32 in NightingaleDPFLRunner.run(task:useCase:context:)()
{
  int v9 = *(_DWORD *)(v0 + 580);
  int v8 = *(_DWORD *)(v0 + 576);
  uint64_t v6 = *(void *)(v0 + 480);
  uint64_t v5 = *(uint64_t **)(v0 + 472);
  *(void *)(v0 + 304) = v0;
  double v11 = (double)HyperParams.sensorTimeout.getter();
  uint64_t v7 = *v5;
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v12 = swift_allocObject();
  *(void *)(v0 + 544) = v12;
  *(void *)(v12 + 16) = v6;
  *(void *)(v12 + 24) = v7;
  *(_DWORD *)(v12 + 32) = v8;
  *(_DWORD *)(v12 + 36) = v9;
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v10 + 552) = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HealthDataRawSampleType : HealthDataQueryResult]);
  v3.n128_f64[0] = v11;
  *uint64_t v1 = *(void *)(v10 + 304);
  v1[1] = closure #32 in NightingaleDPFLRunner.run(task:useCase:context:);
  return MEMORY[0x270F57130](v10 + 368, &async function pointer to partial apply for closure #1 in closure #32 in NightingaleDPFLRunner.run(task:useCase:context:), v12, v2, v3);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *v1;
  *(void *)(v4 + 304) = *v1;
  *(void *)(v4 + 560) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = closure #32 in NightingaleDPFLRunner.run(task:useCase:context:);
  }
  else
  {
    swift_release();
    uint64_t v2 = closure #32 in NightingaleDPFLRunner.run(task:useCase:context:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t (*v3)(void);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;

  *(void *)(v0 + 304) = v0;
  char v25 = *(void *)(v0 + 368);
  *(void *)(v0 + 392) = v25;
  *(unsigned char *)(v0 + 584) = 8;
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HealthDataQueryResult);
  char v27 = lazy protocol witness table accessor for type HealthDataRawSampleType and conformance HealthDataRawSampleType();
  MEMORY[0x25A2C04B0](v0 + 584, v25, &type metadata for HealthDataRawSampleType, v26);
  if (*(void *)(v0 + 40))
  {
    uint64_t v23 = *(void *)(v24 + 40);
    uint64_t v21 = *(void *)(v24 + 48);
    __swift_project_boxed_opaque_existential_1((void *)(v24 + 16), v23);
    char v22 = *(void (**)(uint64_t, uint64_t))(v21 + 16);
    *(void *)(v24 + 200) = swift_getAssociatedTypeWitness();
    __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v24 + 176));
    v22(v23, v21);
    __swift_destroy_boxed_opaque_existential_1(v24 + 16);
  }
  else
  {
    outlined destroy of Pregnancy?(v24 + 16);
    *(void *)(v24 + 176) = 0;
    *(void *)(v24 + 184) = 0;
    *(void *)(v24 + 192) = 0;
    *(void *)(v24 + 200) = 0;
  }
  if (*(void *)(v24 + 200))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : Float]);
    if (swift_dynamicCast()) {
      uint64_t v19 = *(void *)(v24 + 456);
    }
    else {
      uint64_t v19 = 0;
    }
    uint64_t v20 = v19;
  }
  else
  {
    outlined destroy of Pregnancy?(v24 + 176);
    uint64_t v20 = 0;
  }
  *(void *)(v24 + 400) = v20;
  if (!*(void *)(v24 + 400))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt32, Float));
    _allocateUninitializedArray<A>(_:)();
    Dictionary.init(dictionaryLiteral:)();
    outlined destroy of [A]();
  }
  uint64_t v1 = *(void *)(v24 + 560);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : Float]);
  uint64_t result = Dictionary.merge(_:uniquingKeysWith:)();
  if (!v1)
  {
    *(unsigned char *)(v24 + 585) = 10;
    MEMORY[0x25A2C04B0](v24 + 585, v25, &type metadata for HealthDataRawSampleType, v26, v27);
    if (*(void *)(v24 + 80))
    {
      uint64_t v18 = *(void *)(v24 + 80);
      char v16 = *(void *)(v24 + 88);
      __swift_project_boxed_opaque_existential_1((void *)(v24 + 56), v18);
      char v17 = *(void (**)(uint64_t, uint64_t))(v16 + 16);
      *(void *)(v24 + 232) = swift_getAssociatedTypeWitness();
      __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v24 + 208));
      v17(v18, v16);
      __swift_destroy_boxed_opaque_existential_1(v24 + 56);
    }
    else
    {
      outlined destroy of Pregnancy?(v24 + 56);
      *(void *)(v24 + 208) = 0;
      *(void *)(v24 + 216) = 0;
      *(void *)(v24 + 224) = 0;
      *(void *)(v24 + 232) = 0;
    }
    if (*(void *)(v24 + 232))
    {
      if (swift_dynamicCast()) {
        uint64_t v14 = *(void *)(v24 + 448);
      }
      else {
        uint64_t v14 = 0;
      }
      uint64_t v15 = v14;
    }
    else
    {
      outlined destroy of Pregnancy?(v24 + 208);
      uint64_t v15 = 0;
    }
    *(void *)(v24 + 408) = v15;
    if (!*(void *)(v24 + 408))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt32, Float));
      _allocateUninitializedArray<A>(_:)();
      Dictionary.init(dictionaryLiteral:)();
      outlined destroy of [A]();
    }
    Dictionary.merge(_:uniquingKeysWith:)();
    *(unsigned char *)(v24 + 586) = 9;
    MEMORY[0x25A2C04B0](v24 + 586, v25, &type metadata for HealthDataRawSampleType, v26, v27);
    if (*(void *)(v24 + 120))
    {
      uint64_t v13 = *(void *)(v24 + 120);
      double v11 = *(void *)(v24 + 128);
      __swift_project_boxed_opaque_existential_1((void *)(v24 + 96), v13);
      uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v11 + 16);
      *(void *)(v24 + 264) = swift_getAssociatedTypeWitness();
      __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v24 + 240));
      v12(v13, v11);
      __swift_destroy_boxed_opaque_existential_1(v24 + 96);
    }
    else
    {
      outlined destroy of Pregnancy?(v24 + 96);
      *(void *)(v24 + 240) = 0;
      *(void *)(v24 + 248) = 0;
      *(void *)(v24 + 256) = 0;
      *(void *)(v24 + 264) = 0;
    }
    if (*(void *)(v24 + 264))
    {
      if (swift_dynamicCast()) {
        int v9 = *(void *)(v24 + 440);
      }
      else {
        int v9 = 0;
      }
      uint64_t v10 = v9;
    }
    else
    {
      outlined destroy of Pregnancy?(v24 + 240);
      uint64_t v10 = 0;
    }
    *(void *)(v24 + 416) = v10;
    if (!*(void *)(v24 + 416))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt32, Float));
      _allocateUninitializedArray<A>(_:)();
      Dictionary.init(dictionaryLiteral:)();
      outlined destroy of [A]();
    }
    Dictionary.merge(_:uniquingKeysWith:)();
    *(unsigned char *)(v24 + 587) = 7;
    MEMORY[0x25A2C04B0](v24 + 587, v25, &type metadata for HealthDataRawSampleType, v26, v27);
    if (*(void *)(v24 + 160))
    {
      int v8 = *(void *)(v24 + 160);
      uint64_t v6 = *(void *)(v24 + 168);
      __swift_project_boxed_opaque_existential_1((void *)(v24 + 136), v8);
      uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 16);
      *(void *)(v24 + 296) = swift_getAssociatedTypeWitness();
      __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v24 + 272));
      v7(v8, v6);
      __swift_destroy_boxed_opaque_existential_1(v24 + 136);
    }
    else
    {
      outlined destroy of Pregnancy?(v24 + 136);
      *(void *)(v24 + 272) = 0;
      *(void *)(v24 + 280) = 0;
      *(void *)(v24 + 288) = 0;
      *(void *)(v24 + 296) = 0;
    }
    if (*(void *)(v24 + 296))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : (Float, String)]);
      if (swift_dynamicCast()) {
        uint64_t v4 = *(void *)(v24 + 432);
      }
      else {
        uint64_t v4 = 0;
      }
      uint64_t v5 = v4;
    }
    else
    {
      outlined destroy of Pregnancy?(v24 + 272);
      uint64_t v5 = 0;
    }
    *(void *)(v24 + 424) = v5;
    if (!*(void *)(v24 + 424))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt32, (Float, String)));
      _allocateUninitializedArray<A>(_:)();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Float, String));
      Dictionary.init(dictionaryLiteral:)();
      outlined destroy of [A]();
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : (Float, String)]);
    Dictionary.merge(_:uniquingKeysWith:)();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    __n128 v3 = *(uint64_t (**)(void))(*(void *)(v24 + 304) + 8);
    return v3();
  }
  return result;
}

{
  void *v0;
  id v1;
  unsigned char *v2;
  id v3;
  uint64_t (*v4)(void);
  id v6;
  id v7;
  uint64_t v8;
  id v9;
  uint64_t v10;

  int v9 = (id)v0[70];
  v0[38] = v0;
  swift_release();
  uint64_t v1 = v9;
  v0[47] = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast())
  {
    if ((*(unsigned int (**)(void, void))(*(void *)(v8 + 528) + 88))(*(void *)(v8 + 536), *(void *)(v8 + 520)) == *MEMORY[0x263F61130])
    {
      uint64_t v7 = *(id *)(v8 + 560);
      lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
      swift_allocError();
      *uint64_t v2 = 40;
      swift_willThrow();

      goto LABEL_7;
    }
    (*(void (**)(void, void))(*(void *)(v8 + 528) + 8))(*(void *)(v8 + 536), *(void *)(v8 + 520));
  }
  else
  {
  }
  uint64_t v6 = *(id *)(v8 + 560);
  __n128 v3 = v6;
  *(void *)(v8 + 384) = v6;
  swift_willThrow();

LABEL_7:
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(*(void *)(v8 + 304) + 8);
  return v4();
}

uint64_t closure #1 in closure #32 in NightingaleDPFLRunner.run(task:useCase:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[12] = a3;
  v4[11] = a2;
  v4[10] = a1;
  v4[7] = v4;
  v4[8] = 0;
  v4[9] = 0;
  v4[16] = 0;
  v4[17] = a4;
  v4[8] = a2;
  v4[9] = a3;
  v4[16] = a4;
  return MEMORY[0x270FA2498](closure #1 in closure #32 in NightingaleDPFLRunner.run(task:useCase:context:), 0);
}

uint64_t closure #1 in closure #32 in NightingaleDPFLRunner.run(task:useCase:context:)()
{
  uint64_t v5 = v0[17];
  uint64_t v1 = v0[11];
  v0[7] = v0;
  outlined init with copy of HealthDataQuery(v1 + 48, (uint64_t)(v0 + 2));
  uint64_t v7 = v0[5];
  uint64_t v8 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v7);
  int v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 + 16) + **(int **)(v8 + 16));
  uint64_t v2 = (void *)swift_task_alloc();
  v6[13] = v2;
  *uint64_t v2 = v6[7];
  v2[1] = closure #1 in closure #32 in NightingaleDPFLRunner.run(task:useCase:context:);
  uint64_t v3 = v6[12];
  return v9(v3, v5, v7, v8);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = v0[14];
  uint64_t v2 = (void *)v0[10];
  v0[7] = v0;
  *uint64_t v2 = v1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  uint64_t v3 = *(uint64_t (**)(void))(v0[7] + 8);
  return v3();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  *(void *)(v0 + 56) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v3 + 56) + 8);
  return v1();
}

uint64_t closure #1 in closure #32 in NightingaleDPFLRunner.run(task:useCase:context:)(uint64_t a1)
{
  uint64_t v5 = (void *)*v2;
  v5[7] = *v2;
  v5[14] = a1;
  v5[15] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v3 = closure #1 in closure #32 in NightingaleDPFLRunner.run(task:useCase:context:);
  }
  else
  {
    uint64_t v3 = closure #1 in closure #32 in NightingaleDPFLRunner.run(task:useCase:context:);
  }
  return MEMORY[0x270FA2498](v3, 0);
}

float closure #2 in closure #32 in NightingaleDPFLRunner.run(task:useCase:context:)@<S0>(float *a1@<X1>, _DWORD *a2@<X8>)
{
  float result = *a1;
  *a2 = *(_DWORD *)a1;
  return result;
}

uint64_t closure #33 in NightingaleDPFLRunner.run(task:useCase:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v7 + 176) = a7;
  *(void *)(v7 + 168) = a6;
  *(void *)(v7 + 160) = a5;
  *(void *)(v7 + 152) = a3;
  *(void *)(v7 + 144) = a2;
  *(void *)(v7 + 80) = v7;
  *(void *)(v7 + 88) = 0;
  *(void *)(v7 + 96) = 0;
  *(void *)(v7 + 232) = 0;
  *(void *)(v7 + 104) = 0;
  *(void *)(v7 + 112) = 0;
  *(void *)(v7 + 120) = 0;
  *(void *)(v7 + 136) = 0;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(void *)(v7 + 240) = a4;
  uint64_t v8 = type metadata accessor for PFLError();
  *(void *)(v7 + 184) = v8;
  *(void *)(v7 + 192) = *(void *)(v8 - 8);
  *(void *)(v7 + 200) = swift_task_alloc();
  *(void *)(v7 + 88) = a2;
  *(void *)(v7 + 96) = a3;
  *(void *)(v7 + 232) = a4;
  *(void *)(v7 + 104) = a5;
  *(void *)(v7 + 112) = a6;
  *(void *)(v7 + 120) = a7;
  return MEMORY[0x270FA2498](closure #33 in NightingaleDPFLRunner.run(task:useCase:context:), 0);
}

uint64_t closure #33 in NightingaleDPFLRunner.run(task:useCase:context:)()
{
  int v7 = *(_DWORD *)(v0 + 244);
  int v6 = *(_DWORD *)(v0 + 240);
  uint64_t v8 = *(void *)(v0 + 152);
  uint64_t v5 = *(void *)(v0 + 144);
  *(void *)(v0 + 80) = v0;
  NightingaleDPFLRunner.performanceMeasure.getter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("QuerySHR", 8uLL, 1);
  dispatch thunk of PerformanceMeasure.start(_:)();
  swift_bridgeObjectRelease();
  swift_release();
  double v10 = (double)HyperParams.shrTimeout.getter();
  swift_retain();
  swift_retain();
  uint64_t v11 = swift_allocObject();
  *(void *)(v0 + 208) = v11;
  *(void *)(v11 + 16) = v5;
  *(_DWORD *)(v11 + 24) = v6;
  *(_DWORD *)(v11 + 28) = v7;
  *(void *)(v11 + 32) = v8;
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v9 + 216) = v1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (daySHR10s: [UInt32 : Float], nightSHR10s: [UInt32 : Float], daySHRCounts: [UInt32 : Int], nightSHRCounts: [UInt32 : Int]));
  v3.n128_f64[0] = v10;
  *uint64_t v1 = *(void *)(v9 + 80);
  v1[1] = closure #33 in NightingaleDPFLRunner.run(task:useCase:context:);
  return MEMORY[0x270F57130](v9 + 16, &async function pointer to partial apply for closure #1 in closure #33 in NightingaleDPFLRunner.run(task:useCase:context:), v11, v2, v3);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *v1;
  *(void *)(v4 + 80) = *v1;
  *(void *)(v4 + 224) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = closure #33 in NightingaleDPFLRunner.run(task:useCase:context:);
  }
  else
  {
    swift_release();
    uint64_t v2 = closure #33 in NightingaleDPFLRunner.run(task:useCase:context:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  uint64_t v8 = (void *)v0[22];
  int v7 = (void *)v0[21];
  int v6 = (void *)v0[20];
  v0[10] = v0;
  double v10 = v0[2];
  uint64_t v11 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[5];
  v0[6] = v10;
  v0[7] = v11;
  v0[8] = v1;
  v0[9] = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *int v6 = v10;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *int v7 = v11;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  NightingaleDPFLRunner.performanceMeasure.getter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("QuerySHR", 8uLL, 1);
  dispatch thunk of PerformanceMeasure.finish(_:)();
  uint64_t v9 = v3;
  swift_bridgeObjectRelease();
  swift_release();
  *uint64_t v8 = v9;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0[10] + 8);
  return v4();
}

{
  void *v0;
  id v1;
  unsigned char *v2;
  id v3;
  uint64_t (*v4)(void);
  id v6;
  id v7;
  uint64_t v8;
  id v9;
  uint64_t v10;

  uint64_t v9 = (id)v0[28];
  v0[10] = v0;
  swift_release();
  uint64_t v1 = v9;
  v0[16] = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast())
  {
    if ((*(unsigned int (**)(void, void))(*(void *)(v8 + 192) + 88))(*(void *)(v8 + 200), *(void *)(v8 + 184)) == *MEMORY[0x263F61130])
    {
      int v7 = *(id *)(v8 + 224);
      lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
      swift_allocError();
      *uint64_t v2 = 6;
      swift_willThrow();

      goto LABEL_7;
    }
    (*(void (**)(void, void))(*(void *)(v8 + 192) + 8))(*(void *)(v8 + 200), *(void *)(v8 + 184));
  }
  else
  {
  }
  int v6 = *(id *)(v8 + 224);
  __n128 v3 = v6;
  *(void *)(v8 + 136) = v6;
  swift_willThrow();

LABEL_7:
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(*(void *)(v8 + 80) + 8);
  return v4();
}

uint64_t closure #1 in closure #33 in NightingaleDPFLRunner.run(task:useCase:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[12] = a4;
  v4[11] = a2;
  v4[10] = a1;
  v4[7] = v4;
  v4[8] = 0;
  v4[19] = 0;
  v4[9] = 0;
  v4[20] = a3;
  v4[8] = a2;
  v4[19] = a3;
  v4[9] = a4;
  return MEMORY[0x270FA2498](closure #1 in closure #33 in NightingaleDPFLRunner.run(task:useCase:context:), 0);
}

{
  uint64_t v4;
  void *v5;
  uint64_t (*v6)();
  void *v8;
  uint64_t v9;

  uint64_t v8 = (void *)*v5;
  v8[7] = *v5;
  v8[14] = v4;
  v8[15] = a1;
  v8[16] = a2;
  v8[17] = a3;
  v8[18] = a4;
  swift_task_dealloc();
  if (v4)
  {
    int v6 = closure #1 in closure #33 in NightingaleDPFLRunner.run(task:useCase:context:);
  }
  else
  {
    int v6 = closure #1 in closure #33 in NightingaleDPFLRunner.run(task:useCase:context:);
  }
  return MEMORY[0x270FA2498](v6, 0);
}

uint64_t closure #1 in closure #33 in NightingaleDPFLRunner.run(task:useCase:context:)()
{
  uint64_t v4 = v0[20];
  uint64_t v1 = v0[11];
  v0[7] = v0;
  outlined init with copy of HealthDataQuery(v1 + 48, (uint64_t)(v0 + 2));
  uint64_t v7 = v0[5];
  uint64_t v8 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v7);
  unsigned int v6 = HyperParams.sHRQueryBatchSize.getter();
  uint64_t v9 = (uint64_t (*)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v8 + 32) + **(int **)(v8 + 32));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v5 + 104) = v2;
  *uint64_t v2 = *(void *)(v5 + 56);
  v2[1] = closure #1 in closure #33 in NightingaleDPFLRunner.run(task:useCase:context:);
  return v9(v4, v6, v7, v8);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v1 = v0[18];
  uint64_t v2 = v0[17];
  __n128 v3 = v0[16];
  uint64_t v4 = v0[15];
  uint64_t v5 = (void *)v0[10];
  v0[7] = v0;
  *uint64_t v5 = v4;
  v5[1] = v3;
  v5[2] = v2;
  void v5[3] = v1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  unsigned int v6 = *(uint64_t (**)(void))(v0[7] + 8);
  return v6();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  *(void *)(v0 + 56) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v3 + 56) + 8);
  return v1();
}

uint64_t closure #34 in NightingaleDPFLRunner.run(task:useCase:context:)(uint64_t a1, int a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 600) = v23;
  *(void *)(v8 + 592) = v22;
  *(void *)(v8 + 584) = v21;
  *(void *)(v8 + 576) = v20;
  *(void *)(v8 + 568) = v19;
  *(void *)(v8 + 560) = a8;
  *(void *)(v8 + 552) = a7;
  *(void *)(v8 + 544) = a6;
  *(_DWORD *)(v8 + 716) = a5;
  *(_DWORD *)(v8 + 712) = a4;
  *(void *)(v8 + 536) = a3;
  *(_DWORD *)(v8 + 708) = a2;
  *(void *)(v8 + 320) = v8;
  *(_DWORD *)(v8 + 656) = 0;
  *(void *)(v8 + 328) = 0;
  *(_DWORD *)(v8 + 664) = 0;
  *(_DWORD *)(v8 + 672) = 0;
  *(void *)(v8 + 336) = 0;
  *(void *)(v8 + 344) = 0;
  *(void *)(v8 + 352) = 0;
  *(void *)(v8 + 360) = 0;
  *(void *)(v8 + 368) = 0;
  *(void *)(v8 + 376) = 0;
  *(void *)(v8 + 384) = 0;
  *(void *)(v8 + 392) = 0;
  *(_DWORD *)(v8 + 680) = 0;
  *(_DWORD *)(v8 + 688) = 0;
  *(void *)(v8 + 456) = 0;
  *(void *)(v8 + 464) = 0;
  *(void *)(v8 + 304) = 0;
  *(void *)(v8 + 312) = 0;
  uint64_t v12 = type metadata accessor for PFLError();
  *(void *)(v8 + 608) = v12;
  *(void *)(v8 + 616) = *(void *)(v12 - 8);
  *(void *)(v8 + 624) = swift_task_alloc();
  *(_DWORD *)(v8 + 656) = a2;
  *(void *)(v8 + 328) = a3;
  *(_DWORD *)(v8 + 664) = a4;
  *(_DWORD *)(v8 + 672) = a5;
  *(void *)(v8 + 336) = a6;
  *(void *)(v8 + 344) = a7;
  *(void *)(v8 + 352) = a8;
  *(void *)(v8 + 360) = v19;
  *(void *)(v8 + 368) = v20;
  *(void *)(v8 + 376) = v21;
  *(void *)(v8 + 384) = v22;
  *(void *)(v8 + 392) = v23;
  return MEMORY[0x270FA2498](closure #34 in NightingaleDPFLRunner.run(task:useCase:context:), 0);
}

uint64_t closure #34 in NightingaleDPFLRunner.run(task:useCase:context:)()
{
  int v1 = *(_DWORD *)(v0 + 708);
  *(void *)(v0 + 320) = v0;
  *(_DWORD *)(v0 + 668) = v1;
  lazy protocol witness table accessor for type Int and conformance Int();
  lazy protocol witness table accessor for type Int and conformance Int();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  SignedInteger<>.init<A>(_:)();
  uint64_t v26 = *(void *)(v0 + 400);
  uint64_t v2 = HyperParams.minSliceAnchorDelta.getter();
  uint64_t v27 = v26 + v2;
  if (__OFADD__(v26, v2))
  {
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    return MEMORY[0x270F57130](v2, v3, v4, v5, v6);
  }
  *(_DWORD *)(v25 + 676) = HyperParams.sliceSize.getter();
  uint64_t v2 = SignedInteger<>.init<A>(_:)();
  uint64_t v8 = *(void *)(v25 + 408);
  uint64_t v24 = v27 - v8;
  if (__OFSUB__(v27, v8)) {
    goto LABEL_25;
  }
  if (__OFADD__(v24, 1)) {
    goto LABEL_26;
  }
  if (__OFSUB__(v24 + 1, 550)) {
    goto LABEL_27;
  }
  int v21 = *(_DWORD *)(v25 + 712);
  *(void *)(v25 + 416) = v24 - 549;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  int v22 = *(_DWORD *)(v25 + 660);
  *(_DWORD *)(v25 + 680) = v22;
  *(_DWORD *)(v25 + 696) = v21;
  SignedInteger<>.init<A>(_:)();
  uint64_t v23 = *(void *)(v25 + 424);
  uint64_t v2 = HyperParams.maxSliceAnchorDelta.getter();
  if (__OFADD__(v23, v2)) {
    goto LABEL_28;
  }
  uint64_t v17 = *(void *)(v25 + 544);
  int v16 = *(_DWORD *)(v25 + 716);
  *(void *)(v25 + 432) = v23 + v2;
  UnsignedInteger<>.init<A>(_:)();
  *(_DWORD *)(v25 + 700) = *(_DWORD *)(v25 + 692);
  *(_DWORD *)(v25 + 704) = v16;
  min<A>(_:_:)();
  int v18 = *(_DWORD *)(v25 + 684);
  *(_DWORD *)(v25 + 688) = v18;
  double v19 = (double)HyperParams.rawSampleTimeout.getter();
  swift_retain();
  uint64_t v20 = swift_allocObject();
  *(void *)(v25 + 632) = v20;
  *(void *)(v20 + 16) = v17;
  *(_DWORD *)(v20 + 24) = v22;
  *(_DWORD *)(v20 + 28) = v18;
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v25 + 640) = v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HealthDataRawSampleType : HealthDataQueryResult]);
  v6.n128_f64[0] = v19;
  __n128 v3 = &async function pointer to partial apply for closure #1 in closure #34 in NightingaleDPFLRunner.run(task:useCase:context:);
  uint64_t v4 = v20;
  uint64_t v5 = v14;
  void *v13 = *(void *)(v25 + 320);
  v13[1] = closure #34 in NightingaleDPFLRunner.run(task:useCase:context:);
  uint64_t v2 = v25 + 440;
  return MEMORY[0x270F57130](v2, v3, v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *v1;
  *(void *)(v4 + 320) = *v1;
  *(void *)(v4 + 648) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = closure #34 in NightingaleDPFLRunner.run(task:useCase:context:);
  }
  else
  {
    swift_release();
    uint64_t v2 = closure #34 in NightingaleDPFLRunner.run(task:useCase:context:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  Swift::tuple_periods_OpaquePointer_analyses_OpaquePointer v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  void **v6;
  Swift::OpaquePointer *flow;
  Swift::OpaquePointer *otr;
  Swift::OpaquePointer *spotting;
  Swift::OpaquePointer *cycleFactors;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;

  *(void *)(v0 + 320) = v0;
  uint64_t v32 = *(void *)(v0 + 440);
  *(void *)(v0 + 464) = v32;
  *(unsigned char *)(v0 + 720) = 0;
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HealthDataQueryResult);
  uint64_t v34 = lazy protocol witness table accessor for type HealthDataRawSampleType and conformance HealthDataRawSampleType();
  MEMORY[0x25A2C04B0](v0 + 720, v32, &type metadata for HealthDataRawSampleType, v33);
  if (*(void *)(v0 + 40))
  {
    uint64_t v30 = *(void *)(v31 + 40);
    uint64_t v28 = *(void *)(v31 + 48);
    __swift_project_boxed_opaque_existential_1((void *)(v31 + 16), v30);
    uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v28 + 16);
    *(void *)(v31 + 200) = swift_getAssociatedTypeWitness();
    __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v31 + 176));
    v29(v30, v28);
    __swift_destroy_boxed_opaque_existential_1(v31 + 16);
  }
  else
  {
    outlined destroy of Pregnancy?(v31 + 16);
    *(void *)(v31 + 176) = 0;
    *(void *)(v31 + 184) = 0;
    *(void *)(v31 + 192) = 0;
    *(void *)(v31 + 200) = 0;
  }
  if (*(void *)(v31 + 200))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : UInt8]);
    if (swift_dynamicCast()) {
      uint64_t v26 = *(void *)(v31 + 528);
    }
    else {
      uint64_t v26 = 0;
    }
    uint64_t v27 = v26;
  }
  else
  {
    outlined destroy of Pregnancy?(v31 + 176);
    uint64_t v27 = 0;
  }
  *(void *)(v31 + 472) = v27;
  if (!*(void *)(v31 + 472))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt32, UInt8));
    _allocateUninitializedArray<A>(_:)();
    Dictionary.init(dictionaryLiteral:)();
    outlined destroy of [A]();
  }
  int v1 = *(void *)(v31 + 648);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : UInt8]);
  float result = Dictionary.merge(_:uniquingKeysWith:)();
  if (!v1)
  {
    *(unsigned char *)(v31 + 721) = 2;
    MEMORY[0x25A2C04B0](v31 + 721, v32, &type metadata for HealthDataRawSampleType, v33, v34);
    if (*(void *)(v31 + 80))
    {
      uint64_t v25 = *(void *)(v31 + 80);
      uint64_t v23 = *(void *)(v31 + 88);
      __swift_project_boxed_opaque_existential_1((void *)(v31 + 56), v25);
      uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v23 + 16);
      *(void *)(v31 + 232) = swift_getAssociatedTypeWitness();
      __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v31 + 208));
      v24(v25, v23);
      __swift_destroy_boxed_opaque_existential_1(v31 + 56);
    }
    else
    {
      outlined destroy of Pregnancy?(v31 + 56);
      *(void *)(v31 + 208) = 0;
      *(void *)(v31 + 216) = 0;
      *(void *)(v31 + 224) = 0;
      *(void *)(v31 + 232) = 0;
    }
    if (*(void *)(v31 + 232))
    {
      if (swift_dynamicCast()) {
        int v21 = *(void *)(v31 + 520);
      }
      else {
        int v21 = 0;
      }
      int v22 = v21;
    }
    else
    {
      outlined destroy of Pregnancy?(v31 + 208);
      int v22 = 0;
    }
    *(void *)(v31 + 480) = v22;
    if (!*(void *)(v31 + 480))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt32, UInt8));
      _allocateUninitializedArray<A>(_:)();
      Dictionary.init(dictionaryLiteral:)();
      outlined destroy of [A]();
    }
    Dictionary.merge(_:uniquingKeysWith:)();
    *(unsigned char *)(v31 + 722) = 1;
    MEMORY[0x25A2C04B0](v31 + 722, v32, &type metadata for HealthDataRawSampleType, v33, v34);
    if (*(void *)(v31 + 120))
    {
      uint64_t v20 = *(void *)(v31 + 120);
      int v18 = *(void *)(v31 + 128);
      __swift_project_boxed_opaque_existential_1((void *)(v31 + 96), v20);
      double v19 = *(void (**)(uint64_t, uint64_t))(v18 + 16);
      *(void *)(v31 + 264) = swift_getAssociatedTypeWitness();
      __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v31 + 240));
      v19(v20, v18);
      __swift_destroy_boxed_opaque_existential_1(v31 + 96);
    }
    else
    {
      outlined destroy of Pregnancy?(v31 + 96);
      *(void *)(v31 + 240) = 0;
      *(void *)(v31 + 248) = 0;
      *(void *)(v31 + 256) = 0;
      *(void *)(v31 + 264) = 0;
    }
    if (*(void *)(v31 + 264))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : Bool]);
      if (swift_dynamicCast()) {
        int v16 = *(void *)(v31 + 512);
      }
      else {
        int v16 = 0;
      }
      uint64_t v17 = v16;
    }
    else
    {
      outlined destroy of Pregnancy?(v31 + 240);
      uint64_t v17 = 0;
    }
    *(void *)(v31 + 488) = v17;
    if (!*(void *)(v31 + 488))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt32, Bool));
      _allocateUninitializedArray<A>(_:)();
      Dictionary.init(dictionaryLiteral:)();
      outlined destroy of [A]();
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : Bool]);
    Dictionary.merge(_:uniquingKeysWith:)();
    *(unsigned char *)(v31 + 723) = 3;
    MEMORY[0x25A2C04B0](v31 + 723, v32, &type metadata for HealthDataRawSampleType, v33, v34);
    if (*(void *)(v31 + 160))
    {
      uint64_t v15 = *(void *)(v31 + 160);
      uint64_t v13 = *(void *)(v31 + 168);
      __swift_project_boxed_opaque_existential_1((void *)(v31 + 136), v15);
      uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v13 + 16);
      *(void *)(v31 + 296) = swift_getAssociatedTypeWitness();
      __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v31 + 272));
      v14(v15, v13);
      __swift_destroy_boxed_opaque_existential_1(v31 + 136);
    }
    else
    {
      outlined destroy of Pregnancy?(v31 + 136);
      *(void *)(v31 + 272) = 0;
      *(void *)(v31 + 280) = 0;
      *(void *)(v31 + 288) = 0;
      *(void *)(v31 + 296) = 0;
    }
    if (*(void *)(v31 + 296))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8 : [(UInt32, UInt32)]]);
      if (swift_dynamicCast()) {
        uint64_t v11 = *(void *)(v31 + 504);
      }
      else {
        uint64_t v11 = 0;
      }
      uint64_t v12 = v11;
    }
    else
    {
      outlined destroy of Pregnancy?(v31 + 272);
      uint64_t v12 = 0;
    }
    *(void *)(v31 + 496) = v12;
    if (!*(void *)(v31 + 496))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt8, [(UInt32, UInt32)]));
      _allocateUninitializedArray<A>(_:)();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(UInt32, UInt32)]);
      Dictionary.init(dictionaryLiteral:)();
      outlined destroy of [A]();
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(UInt32, UInt32)]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(start: UInt32, end: UInt32)]);
    _dictionaryUpCast<A, B, C, D>(_:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8 : [(start: UInt32, end: UInt32)]]);
    Dictionary.merge(_:uniquingKeysWith:)();
    cycleFactors = *(Swift::OpaquePointer **)(v31 + 576);
    spotting = *(Swift::OpaquePointer **)(v31 + 568);
    otr = *(Swift::OpaquePointer **)(v31 + 560);
    flow = *(Swift::OpaquePointer **)(v31 + 552);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __n128 v3 = CalendarPeriodPrediction.analyze(flow:otr:spotting:cycleFactors:)(flow, otr, spotting, cycleFactors);
    if (v4)
    {
      swift_task_dealloc();
      uint64_t v5 = *(uint64_t (**)(void))(*(void *)(v31 + 320) + 8);
    }
    else
    {
      *(Swift::tuple_periods_OpaquePointer_analyses_OpaquePointer *)(v31 + 304) = v3;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : (periodStartMean: Float, periodStartStd: Float)]);
      Dictionary.merge(_:uniquingKeysWith:)();
      __n128 v6 = *(void ***)(v31 + 600);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      *__n128 v6 = v3.periods._rawValue;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      uint64_t v5 = *(uint64_t (**)(void))(*(void *)(v31 + 320) + 8);
    }
    return v5();
  }
  return result;
}

{
  void *v0;
  id v1;
  unsigned char *v2;
  id v3;
  uint64_t (*v4)(void);
  id v6;
  id v7;
  uint64_t v8;
  id v9;
  uint64_t v10;

  uint64_t v9 = (id)v0[81];
  v0[40] = v0;
  swift_release();
  int v1 = v9;
  v0[56] = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast())
  {
    if ((*(unsigned int (**)(void, void))(*(void *)(v8 + 616) + 88))(*(void *)(v8 + 624), *(void *)(v8 + 608)) == *MEMORY[0x263F61130])
    {
      uint64_t v7 = *(id *)(v8 + 648);
      lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
      swift_allocError();
      *uint64_t v2 = 5;
      swift_willThrow();

      goto LABEL_7;
    }
    (*(void (**)(void, void))(*(void *)(v8 + 616) + 8))(*(void *)(v8 + 624), *(void *)(v8 + 608));
  }
  else
  {
  }
  __n128 v6 = *(id *)(v8 + 648);
  __n128 v3 = v6;
  *(void *)(v8 + 456) = v6;
  swift_willThrow();

LABEL_7:
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(*(void *)(v8 + 320) + 8);
  return v4();
}

uint64_t closure #1 in closure #34 in NightingaleDPFLRunner.run(task:useCase:context:)(uint64_t a1, uint64_t a2, int a3, int a4)
{
  *(_DWORD *)(v4 + 132) = a4;
  *(_DWORD *)(v4 + 124) = a3;
  *(void *)(v4 + 80) = a2;
  *(void *)(v4 + 72) = a1;
  *(void *)(v4 + 56) = v4;
  *(void *)(v4 + 64) = 0;
  *(_DWORD *)(v4 + 120) = 0;
  *(_DWORD *)(v4 + 128) = 0;
  *(void *)(v4 + 64) = a2;
  *(_DWORD *)(v4 + 120) = a3;
  *(_DWORD *)(v4 + 128) = a4;
  return MEMORY[0x270FA2498](closure #1 in closure #34 in NightingaleDPFLRunner.run(task:useCase:context:), 0);
}

uint64_t closure #1 in closure #34 in NightingaleDPFLRunner.run(task:useCase:context:)()
{
  unsigned int v12 = *(_DWORD *)(v0 + 132);
  unsigned int v11 = *(_DWORD *)(v0 + 124);
  uint64_t v1 = *(void *)(v0 + 80);
  *(void *)(v0 + 56) = v0;
  outlined init with copy of HealthDataQuery(v1 + 48, v0 + 16);
  uint64_t v9 = *(void *)(v0 + 40);
  uint64_t v10 = *(void *)(v0 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v9);
  uint64_t v2 = _allocateUninitializedArray<A>(_:)();
  *__n128 v3 = 0;
  v3[1] = 3;
  v3[2] = 1;
  v3[3] = 2;
  _finalizeUninitializedArray<A>(_:)();
  uint64_t v13 = v2;
  *(void *)(v0 + 88) = v2;
  if (v12 < v11) {
    return _assertionFailure(_:_:file:line:flags:)();
  }
  HIDWORD(v6) = *(_DWORD *)(v8 + 132);
  LODWORD(v6) = *(_DWORD *)(v8 + 124);
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 + 16) + **(int **)(v10 + 16));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v8 + 96) = v5;
  *uint64_t v5 = *(void *)(v8 + 56);
  v5[1] = closure #1 in closure #34 in NightingaleDPFLRunner.run(task:useCase:context:);
  return v7(v13, v6, v9, v10);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = v0[13];
  uint64_t v2 = (void *)v0[9];
  v0[7] = v0;
  *uint64_t v2 = v1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  __n128 v3 = *(uint64_t (**)(void))(v0[7] + 8);
  return v3();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  *(void *)(v0 + 56) = v0;
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v3 + 56) + 8);
  return v1();
}

uint64_t closure #1 in closure #34 in NightingaleDPFLRunner.run(task:useCase:context:)(uint64_t a1)
{
  uint64_t v5 = (void *)*v2;
  v5[7] = *v2;
  v5[13] = a1;
  v5[14] = v1;
  swift_task_dealloc();
  if (v1)
  {
    __n128 v3 = closure #1 in closure #34 in NightingaleDPFLRunner.run(task:useCase:context:);
  }
  else
  {
    swift_bridgeObjectRelease();
    __n128 v3 = closure #1 in closure #34 in NightingaleDPFLRunner.run(task:useCase:context:);
  }
  return MEMORY[0x270FA2498](v3, 0);
}

float closure #6 in closure #34 in NightingaleDPFLRunner.run(task:useCase:context:)@<S0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  float result = *(float *)(a1 + 4);
  *(_DWORD *)a2 = *(_DWORD *)a1;
  *(float *)(a2 + 4) = result;
  return result;
}

uint64_t closure #35 in NightingaleDPFLRunner.run(task:useCase:context:)@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X3>, uint64_t *a3@<X4>, uint64_t *a4@<X5>, uint64_t *a5@<X6>, uint64_t *a6@<X7>, void *a7@<X8>, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t a11, int a12)
{
  uint64_t v27 = *a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Float, String));
  uint64_t v29 = Dictionary.mapValues<A>(_:)();
  if (v28)
  {
    __break(1u);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v15 = *a2;
    swift_bridgeObjectRetain();
    uint64_t v16 = *a3;
    swift_bridgeObjectRetain();
    uint64_t v17 = *a4;
    swift_bridgeObjectRetain();
    uint64_t v18 = *a5;
    swift_bridgeObjectRetain();
    uint64_t v19 = *a6;
    swift_bridgeObjectRetain();
    uint64_t v20 = *a8;
    swift_bridgeObjectRetain();
    uint64_t v13 = *a9;
    swift_bridgeObjectRetain();
    uint64_t v14 = *a10;
    swift_bridgeObjectRetain();
    Featurizer.featurizeNightingaleD(pregnancies:swts:hrvs:respiratoryRates:spo2s:daySHR10s:nightSHR10s:calendarPeriodPredictions:historicalPeriods:cycleFactors:hyperParam:today:)(v27, v29, v15, v16, v17, v18, v19, v20, v13, v14, a11, a12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = v41;
    *a7 = v30;
    a7[1] = v31;
    a7[2] = v32;
    a7[3] = v33;
    a7[4] = v34;
    a7[5] = v35;
    a7[6] = v36;
    a7[7] = v37;
    a7[8] = v38;
    a7[9] = v39;
    a7[10] = v40;
    a7[11] = v41;
    a7[12] = v42;
    a7[13] = v43;
    a7[14] = v44;
    a7[15] = v45;
    a7[16] = v46;
    a7[17] = v47;
    a7[18] = v48;
    a7[19] = v49;
    a7[20] = v50;
  }
  return result;
}

uint64_t closure #1 in closure #35 in NightingaleDPFLRunner.run(task:useCase:context:)@<X0>(int *a1@<X0>, _DWORD *a2@<X8>)
{
  int v4 = *a1;
  swift_bridgeObjectRetain();
  *a2 = v4;
  return swift_bridgeObjectRelease();
}

uint64_t closure #36 in NightingaleDPFLRunner.run(task:useCase:context:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return outlined init with copy of Any(a1, a2);
}

uint64_t closure #37 in NightingaleDPFLRunner.run(task:useCase:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 648) = v21;
  *(void *)(v8 + 640) = v20;
  *(void *)(v8 + 632) = v19;
  *(void *)(v8 + 624) = a8;
  *(void *)(v8 + 616) = a7;
  *(void *)(v8 + 608) = a6;
  *(_DWORD *)(v8 + 708) = a5;
  *(void *)(v8 + 600) = a4;
  *(void *)(v8 + 592) = a3;
  *(void *)(v8 + 584) = a2;
  *(void *)(v8 + 576) = a1;
  *(void *)(v8 + 384) = v8;
  *(void *)(v8 + 392) = 0;
  *(void *)(v8 + 400) = 0;
  *(void *)(v8 + 408) = 0;
  *(_DWORD *)(v8 + 704) = 0;
  *(void *)(v8 + 416) = 0;
  *(void *)(v8 + 424) = 0;
  *(void *)(v8 + 432) = 0;
  *(void *)(v8 + 440) = 0;
  *(void *)(v8 + 448) = 0;
  *(void *)(v8 + 456) = 0;
  *(_DWORD *)(v8 + 712) = 0;
  *(_DWORD *)(v8 + 720) = 0;
  *(void *)(v8 + 496) = 0;
  *(void *)(v8 + 504) = 0;
  uint64_t v10 = type metadata accessor for PFLError();
  *(void *)(v8 + 656) = v10;
  *(void *)(v8 + 664) = *(void *)(v10 - 8);
  *(void *)(v8 + 672) = swift_task_alloc();
  *(void *)(v8 + 392) = a2;
  *(void *)(v8 + 400) = a3;
  *(void *)(v8 + 408) = a4;
  *(_DWORD *)(v8 + 704) = a5;
  *(void *)(v8 + 416) = a6;
  *(void *)(v8 + 424) = a7;
  *(void *)(v8 + 432) = a8;
  *(void *)(v8 + 440) = v19;
  *(void *)(v8 + 448) = v20;
  *(void *)(v8 + 456) = v21;
  return MEMORY[0x270FA2498](closure #37 in NightingaleDPFLRunner.run(task:useCase:context:), 0);
}

uint64_t closure #37 in NightingaleDPFLRunner.run(task:useCase:context:)()
{
  *(void *)(v0 + 384) = v0;
  if (HyperParams.isSWTRequired()())
  {
    uint64_t v24 = **(void **)(v25 + 592);
    swift_bridgeObjectRetain();
    *(void *)(v25 + 464) = v24;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Pregnancy]);
    lazy protocol witness table accessor for type [Pregnancy] and conformance [A]();
    Sequence.min(by:)();
    outlined destroy of [A]();
    if (*(void *)(v25 + 40))
    {
      uint64_t v21 = *(void *)(v25 + 40);
      uint64_t v20 = *(void *)(v25 + 48);
      __swift_project_boxed_opaque_existential_1((void *)(v25 + 16), v21);
      unsigned int v22 = (*(uint64_t (**)(uint64_t))(v20 + 40))(v21);
      __swift_destroy_boxed_opaque_existential_1(v25 + 16);
      uint64_t v23 = v22;
    }
    else
    {
      outlined destroy of Pregnancy?(v25 + 16);
      LODWORD(v23) = 0;
      BYTE4(v23) = 1;
    }
    *(_DWORD *)(v25 + 716) = v23;
    if ((v23 & 0x100000000) == 0)
    {
      uint64_t v1 = *(uint64_t **)(v25 + 592);
      *(_DWORD *)(v25 + 712) = v23;
      uint64_t v19 = *v1;
      swift_bridgeObjectRetain();
      *(void *)(v25 + 472) = v19;
      Sequence.max(by:)();
      outlined destroy of [A]();
      if (*(void *)(v25 + 80))
      {
        uint64_t v15 = *(void *)(v25 + 80);
        uint64_t v14 = *(void *)(v25 + 88);
        __swift_project_boxed_opaque_existential_1((void *)(v25 + 56), v15);
        int v16 = (*(uint64_t (**)(uint64_t))(v14 + 16))(v15);
        __swift_destroy_boxed_opaque_existential_1(v25 + 56);
        int v17 = v16;
        char v18 = 0;
      }
      else
      {
        outlined destroy of Pregnancy?(v25 + 56);
        int v17 = 0;
        char v18 = 1;
      }
      *(_DWORD *)(v25 + 724) = v17;
      if ((v18 & 1) == 0)
      {
        int v10 = *(_DWORD *)(v25 + 708);
        uint64_t v9 = *(void *)(v25 + 600);
        uint64_t v11 = *(void *)(v25 + 584);
        *(_DWORD *)(v25 + 720) = v17;
        double v12 = (double)HyperParams.rawSampleTimeout.getter();
        swift_retain();
        swift_retain();
        uint64_t v13 = swift_allocObject();
        *(void *)(v25 + 680) = v13;
        *(void *)(v13 + 16) = v9;
        *(_DWORD *)(v13 + 24) = v10;
        *(void *)(v13 + 32) = v11;
        uint64_t v2 = (void *)swift_task_alloc();
        *(void *)(v25 + 688) = v2;
        uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HealthDataRawSampleType : HealthDataQueryResult]);
        v4.n128_f64[0] = v12;
        *uint64_t v2 = *(void *)(v25 + 384);
        v2[1] = closure #37 in NightingaleDPFLRunner.run(task:useCase:context:);
        return MEMORY[0x270F57130](v25 + 480, &async function pointer to partial apply for closure #3 in closure #37 in NightingaleDPFLRunner.run(task:useCase:context:), v13, v3, v4);
      }
    }
    lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
    swift_allocError();
    *uint64_t v5 = 37;
    swift_willThrow();
  }
  else
  {
    lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
    swift_allocError();
    *uint64_t v6 = 45;
    swift_willThrow();
  }
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(*(void *)(v25 + 384) + 8);
  return v7();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;

  __n128 v4 = *v1;
  *(void *)(v4 + 384) = *v1;
  *(void *)(v4 + 696) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = closure #37 in NightingaleDPFLRunner.run(task:useCase:context:);
  }
  else
  {
    swift_release();
    uint64_t v2 = closure #37 in NightingaleDPFLRunner.run(task:useCase:context:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t (*v3)(void);
  int v4;
  _DWORD *v5;
  int v6;
  void **v7;
  void **v8;
  void **v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;

  *(void *)(v0 + 384) = v0;
  uint64_t v33 = *(void *)(v0 + 480);
  *(void *)(v0 + 504) = v33;
  *(unsigned char *)(v0 + 728) = 0;
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HealthDataQueryResult);
  uint64_t v35 = lazy protocol witness table accessor for type HealthDataRawSampleType and conformance HealthDataRawSampleType();
  MEMORY[0x25A2C04B0](v0 + 728, v33, &type metadata for HealthDataRawSampleType, v34);
  if (*(void *)(v0 + 120))
  {
    uint64_t v31 = *(void *)(v32 + 120);
    uint64_t v29 = *(void *)(v32 + 128);
    __swift_project_boxed_opaque_existential_1((void *)(v32 + 96), v31);
    uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v29 + 16);
    *(void *)(v32 + 280) = swift_getAssociatedTypeWitness();
    __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v32 + 256));
    v30(v31, v29);
    __swift_destroy_boxed_opaque_existential_1(v32 + 96);
  }
  else
  {
    outlined destroy of Pregnancy?(v32 + 96);
    *(void *)(v32 + 256) = 0;
    *(void *)(v32 + 264) = 0;
    *(void *)(v32 + 272) = 0;
    *(void *)(v32 + 280) = 0;
  }
  if (*(void *)(v32 + 280))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : UInt8]);
    if (swift_dynamicCast()) {
      uint64_t v27 = *(void *)(v32 + 568);
    }
    else {
      uint64_t v27 = 0;
    }
    uint64_t v28 = v27;
  }
  else
  {
    outlined destroy of Pregnancy?(v32 + 256);
    uint64_t v28 = 0;
  }
  *(void *)(v32 + 512) = v28;
  if (!*(void *)(v32 + 512))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt32, UInt8));
    _allocateUninitializedArray<A>(_:)();
    Dictionary.init(dictionaryLiteral:)();
    outlined destroy of [A]();
  }
  uint64_t v1 = *(void *)(v32 + 696);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : UInt8]);
  uint64_t result = Dictionary.merge(_:uniquingKeysWith:)();
  if (!v1)
  {
    *(unsigned char *)(v32 + 729) = 2;
    MEMORY[0x25A2C04B0](v32 + 729, v33, &type metadata for HealthDataRawSampleType, v34, v35);
    if (*(void *)(v32 + 160))
    {
      uint64_t v26 = *(void *)(v32 + 160);
      uint64_t v24 = *(void *)(v32 + 168);
      __swift_project_boxed_opaque_existential_1((void *)(v32 + 136), v26);
      uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v24 + 16);
      *(void *)(v32 + 312) = swift_getAssociatedTypeWitness();
      __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v32 + 288));
      v25(v26, v24);
      __swift_destroy_boxed_opaque_existential_1(v32 + 136);
    }
    else
    {
      outlined destroy of Pregnancy?(v32 + 136);
      *(void *)(v32 + 288) = 0;
      *(void *)(v32 + 296) = 0;
      *(void *)(v32 + 304) = 0;
      *(void *)(v32 + 312) = 0;
    }
    if (*(void *)(v32 + 312))
    {
      if (swift_dynamicCast()) {
        unsigned int v22 = *(void *)(v32 + 560);
      }
      else {
        unsigned int v22 = 0;
      }
      uint64_t v23 = v22;
    }
    else
    {
      outlined destroy of Pregnancy?(v32 + 288);
      uint64_t v23 = 0;
    }
    *(void *)(v32 + 520) = v23;
    if (!*(void *)(v32 + 520))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt32, UInt8));
      _allocateUninitializedArray<A>(_:)();
      Dictionary.init(dictionaryLiteral:)();
      outlined destroy of [A]();
    }
    Dictionary.merge(_:uniquingKeysWith:)();
    *(unsigned char *)(v32 + 730) = 1;
    MEMORY[0x25A2C04B0](v32 + 730, v33, &type metadata for HealthDataRawSampleType, v34, v35);
    if (*(void *)(v32 + 200))
    {
      uint64_t v21 = *(void *)(v32 + 200);
      uint64_t v19 = *(void *)(v32 + 208);
      __swift_project_boxed_opaque_existential_1((void *)(v32 + 176), v21);
      uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v19 + 16);
      *(void *)(v32 + 344) = swift_getAssociatedTypeWitness();
      __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v32 + 320));
      v20(v21, v19);
      __swift_destroy_boxed_opaque_existential_1(v32 + 176);
    }
    else
    {
      outlined destroy of Pregnancy?(v32 + 176);
      *(void *)(v32 + 320) = 0;
      *(void *)(v32 + 328) = 0;
      *(void *)(v32 + 336) = 0;
      *(void *)(v32 + 344) = 0;
    }
    if (*(void *)(v32 + 344))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : Bool]);
      if (swift_dynamicCast()) {
        int v17 = *(void *)(v32 + 552);
      }
      else {
        int v17 = 0;
      }
      char v18 = v17;
    }
    else
    {
      outlined destroy of Pregnancy?(v32 + 320);
      char v18 = 0;
    }
    *(void *)(v32 + 528) = v18;
    if (!*(void *)(v32 + 528))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt32, Bool));
      _allocateUninitializedArray<A>(_:)();
      Dictionary.init(dictionaryLiteral:)();
      outlined destroy of [A]();
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : Bool]);
    Dictionary.merge(_:uniquingKeysWith:)();
    *(unsigned char *)(v32 + 731) = 3;
    MEMORY[0x25A2C04B0](v32 + 731, v33, &type metadata for HealthDataRawSampleType, v34, v35);
    if (*(void *)(v32 + 240))
    {
      int v16 = *(void *)(v32 + 240);
      uint64_t v14 = *(void *)(v32 + 248);
      __swift_project_boxed_opaque_existential_1((void *)(v32 + 216), v16);
      uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v14 + 16);
      *(void *)(v32 + 376) = swift_getAssociatedTypeWitness();
      __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v32 + 352));
      v15(v16, v14);
      __swift_destroy_boxed_opaque_existential_1(v32 + 216);
    }
    else
    {
      outlined destroy of Pregnancy?(v32 + 216);
      *(void *)(v32 + 352) = 0;
      *(void *)(v32 + 360) = 0;
      *(void *)(v32 + 368) = 0;
      *(void *)(v32 + 376) = 0;
    }
    if (*(void *)(v32 + 376))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8 : [(UInt32, UInt32)]]);
      if (swift_dynamicCast()) {
        double v12 = *(void *)(v32 + 544);
      }
      else {
        double v12 = 0;
      }
      uint64_t v13 = v12;
    }
    else
    {
      outlined destroy of Pregnancy?(v32 + 352);
      uint64_t v13 = 0;
    }
    *(void *)(v32 + 536) = v13;
    if (!*(void *)(v32 + 536))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt8, [(UInt32, UInt32)]));
      _allocateUninitializedArray<A>(_:)();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(UInt32, UInt32)]);
      Dictionary.init(dictionaryLiteral:)();
      outlined destroy of [A]();
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(UInt32, UInt32)]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(start: UInt32, end: UInt32)]);
    _dictionaryUpCast<A, B, C, D>(_:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8 : [(start: UInt32, end: UInt32)]]);
    Dictionary.merge(_:uniquingKeysWith:)();
    int v10 = *(void ***)(v32 + 632);
    uint64_t v9 = *(void ***)(v32 + 624);
    uint64_t v8 = *(void ***)(v32 + 616);
    uint64_t v7 = *(void ***)(v32 + 608);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v11 = CalendarPeriodPrediction.predictHistoricalPeriods(flow:otr:spotting:cycleFactors:)(v7, v8, v9, v10);
    uint64_t v6 = *(_DWORD *)(v32 + 724);
    __n128 v4 = *(_DWORD *)(v32 + 716);
    uint64_t v5 = *(_DWORD **)(v32 + 576);
    **(void **)(v32 + 640) = v11;
    swift_bridgeObjectRelease();
    *uint64_t v5 = v4;
    v5[1] = v6;
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)(v32 + 384) + 8);
    return v3();
  }
  return result;
}

{
  void *v0;
  id v1;
  unsigned char *v2;
  id v3;
  uint64_t (*v4)(void);
  id v6;
  id v7;
  uint64_t v8;
  id v9;
  uint64_t v10;

  uint64_t v9 = (id)v0[87];
  v0[48] = v0;
  swift_release();
  uint64_t v1 = v9;
  v0[61] = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast())
  {
    if ((*(unsigned int (**)(void, void))(*(void *)(v8 + 664) + 88))(*(void *)(v8 + 672), *(void *)(v8 + 656)) == *MEMORY[0x263F61130])
    {
      uint64_t v7 = *(id *)(v8 + 696);
      lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
      swift_allocError();
      *uint64_t v2 = 5;
      swift_willThrow();

      goto LABEL_7;
    }
    (*(void (**)(void, void))(*(void *)(v8 + 664) + 8))(*(void *)(v8 + 672), *(void *)(v8 + 656));
  }
  else
  {
  }
  uint64_t v6 = *(id *)(v8 + 696);
  uint64_t v3 = v6;
  *(void *)(v8 + 496) = v6;
  swift_willThrow();

LABEL_7:
  swift_task_dealloc();
  __n128 v4 = *(uint64_t (**)(void))(*(void *)(v8 + 384) + 8);
  return v4();
}

BOOL closure #1 in closure #37 in NightingaleDPFLRunner.run(task:useCase:context:)(void *a1, void *a2)
{
  uint64_t v4 = a1[3];
  uint64_t v3 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  unsigned int v8 = (*(uint64_t (**)(uint64_t))(v3 + 40))(v4);
  uint64_t v7 = a2[3];
  uint64_t v6 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v7);
  return v8 < (*(unsigned int (**)(uint64_t))(v6 + 40))(v7);
}

uint64_t closure #3 in closure #37 in NightingaleDPFLRunner.run(task:useCase:context:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  *(void *)(v4 + 104) = a4;
  *(_DWORD *)(v4 + 152) = a3;
  *(void *)(v4 + 96) = a2;
  *(void *)(v4 + 88) = a1;
  *(void *)(v4 + 56) = v4;
  *(void *)(v4 + 64) = 0;
  *(_DWORD *)(v4 + 144) = 0;
  *(void *)(v4 + 72) = 0;
  *(void *)(v4 + 64) = a2;
  *(_DWORD *)(v4 + 144) = a3;
  *(void *)(v4 + 72) = a4;
  return MEMORY[0x270FA2498](closure #3 in closure #37 in NightingaleDPFLRunner.run(task:useCase:context:), 0);
}

uint64_t closure #3 in closure #37 in NightingaleDPFLRunner.run(task:useCase:context:)()
{
  unsigned int v12 = *(_DWORD *)(v0 + 152);
  uint64_t v1 = *(void *)(v0 + 96);
  *(void *)(v0 + 56) = v0;
  outlined init with copy of HealthDataQuery(v1 + 48, v0 + 16);
  uint64_t v10 = *(void *)(v0 + 40);
  uint64_t v11 = *(void *)(v0 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v10);
  uint64_t result = _allocateUninitializedArray<A>(_:)();
  *uint64_t v3 = 0;
  v3[1] = 3;
  v3[2] = 1;
  v3[3] = 2;
  _finalizeUninitializedArray<A>(_:)();
  uint64_t v13 = result;
  *(void *)(v0 + 112) = result;
  unsigned int v14 = v12 - 550;
  if (v12 < 0x226)
  {
    __break(1u);
    goto LABEL_9;
  }
  unsigned int v7 = *(_DWORD *)(v9 + 152);
  *(void *)(v9 + 80) = HyperParams.lmpMaxRange.getter();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  uint64_t result = UnsignedInteger<>.init<A>(_:)();
  unsigned int v4 = *(_DWORD *)(v9 + 148);
  unsigned int v8 = v7 - v4;
  if (v7 < v4)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  if (v8 < v14) {
    return _assertionFailure(_:_:file:line:flags:)();
  }
  uint64_t v6 = (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))(*(void *)(v11 + 16) + **(int **)(v11 + 16));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v9 + 120) = v5;
  *uint64_t v5 = *(void *)(v9 + 56);
  v5[1] = closure #3 in closure #37 in NightingaleDPFLRunner.run(task:useCase:context:);
  return v6(v13, __PAIR64__(v8, v14), v10, v11);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = v0[16];
  uint64_t v2 = (void *)v0[11];
  v0[7] = v0;
  *uint64_t v2 = v1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  uint64_t v3 = *(uint64_t (**)(void))(v0[7] + 8);
  return v3();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  *(void *)(v0 + 56) = v0;
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v3 + 56) + 8);
  return v1();
}

uint64_t closure #3 in closure #37 in NightingaleDPFLRunner.run(task:useCase:context:)(uint64_t a1)
{
  uint64_t v5 = (void *)*v2;
  v5[7] = *v2;
  v5[16] = a1;
  v5[17] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v3 = closure #3 in closure #37 in NightingaleDPFLRunner.run(task:useCase:context:);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = closure #3 in closure #37 in NightingaleDPFLRunner.run(task:useCase:context:);
  }
  return MEMORY[0x270FA2498](v3, 0);
}

uint64_t closure #38 in NightingaleDPFLRunner.run(task:useCase:context:)()
{
  swift_bridgeObjectRetain();
  char v1 = Set.contains(_:)();
  swift_bridgeObjectRelease();
  return v1 & 1;
}

uint64_t _sSTsE5count5whereSiSb7ElementQzqd__YKXE_tqd__YKs5ErrorRd__lF(uint64_t (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v23 = a1;
  uint64_t v24 = a2;
  uint64_t v48 = a3;
  uint64_t v25 = a4;
  uint64_t v47 = a5;
  uint64_t v26 = a7;
  uint64_t v54 = a3;
  uint64_t v53 = a4;
  uint64_t v27 = *(void *)(a4 - 8);
  uint64_t v28 = a4 - 8;
  unint64_t v29 = (*(void *)(v27 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](a1);
  uint64_t v30 = (char *)&v14 - v29;
  uint64_t v49 = 0;
  uint64_t v36 = MEMORY[0x263F8D3B8];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v32 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v33 = AssociatedTypeWitness - 8;
  unint64_t v34 = (*(void *)(v32 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v49);
  uint64_t v35 = (char *)&v14 - v34;
  unint64_t v37 = (*(void *)(*(void *)(type metadata accessor for Optional() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v7 = MEMORY[0x270FA5388](v49);
  uint64_t v38 = (char *)&v14 - v37;
  uint64_t v45 = *(void *)(v8 - 8);
  uint64_t v40 = v8 - 8;
  unint64_t v39 = (*(void *)(v45 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v14 - v39;
  uint64_t v41 = swift_getAssociatedTypeWitness();
  uint64_t v42 = *(void *)(v41 - 8);
  uint64_t v43 = v41 - 8;
  unint64_t v44 = (*(void *)(v42 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v41);
  uint64_t v46 = (char *)&v14 - v44;
  (*(void (**)(char *))(v45 + 16))(v9);
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v51 = v49;
  for (uint64_t i = v50; ; uint64_t i = v19)
  {
    uint64_t v21 = i;
    uint64_t v22 = v51;
    swift_getAssociatedConformanceWitness();
    dispatch thunk of IteratorProtocol.next()();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v38, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(char *, uint64_t))(v42 + 8))(v46, v41);
      return v22;
    }
    (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v35, v38, AssociatedTypeWitness);
    uint64_t v11 = v21;
    int v12 = v23(v35, v30);
    uint64_t v19 = v11;
    int v20 = v12;
    if (v11)
    {
      (*(void (**)(char *, uint64_t))(v32 + 8))(v35, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v42 + 8))(v46, v41);
      (*(void (**)(uint64_t, char *, uint64_t))(v27 + 32))(v26, v30, v25);
      return v18;
    }
    int v17 = v20;
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v35, AssociatedTypeWitness);
    BOOL v16 = (v17 & 1) != 0;
    uint64_t v15 = v22 + v16;
    if (__OFADD__(v22, v16)) {
      break;
    }
    uint64_t v51 = v15;
  }
  __break(1u);
  return result;
}

uint64_t NightingaleDPFLRunner.runTraining(modelPath:hyperParams:historicalPeriods:pregnancies:today:features:existingMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t v236 = a1;
  uint64_t v241 = a2;
  uint64_t v282 = a3;
  uint64_t v225 = a4;
  uint64_t v226 = a5;
  int v227 = a6;
  v302._rawValue = a7;
  v301._rawValue = a8;
  v300._rawValue = a9;
  v299._rawValue = a10;
  v298._rawValue = a11;
  v297._rawValue = a12;
  v296._rawValue = a13;
  v295._rawValue = a14;
  v294._rawValue = a15;
  v293._rawValue = a16;
  v292._rawValue = a17;
  v291._rawValue = a18;
  v290._rawValue = a19;
  v289._rawValue = a20;
  v288._rawValue = a21;
  v287._rawValue = a22;
  v286._rawValue = a23;
  v285._rawValue = a24;
  uint64_t v284 = a25;
  uint64_t v277 = a26;
  uint64_t v283 = a27;
  uint64_t v243 = a28;
  uint64_t v254 = 0;
  v229 = closure #1 in NightingaleDPFLRunner.runTraining(modelPath:hyperParams:historicalPeriods:pregnancies:today:features:existingMetrics:);
  uint64_t v230 = partial apply for closure #2 in NightingaleDPFLRunner.runTraining(modelPath:hyperParams:historicalPeriods:pregnancies:today:features:existingMetrics:);
  v231 = partial apply for closure #3 in NightingaleDPFLRunner.runTraining(modelPath:hyperParams:historicalPeriods:pregnancies:today:features:existingMetrics:);
  uint64_t v232 = closure #4 in NightingaleDPFLRunner.runTraining(modelPath:hyperParams:historicalPeriods:pregnancies:today:features:existingMetrics:);
  Builtin::Word v244 = 8;
  v233 = closure #36 in NightingaleDPFLRunner.run(task:useCase:context:);
  v234 = partial apply for closure #6 in NightingaleDPFLRunner.runTraining(modelPath:hyperParams:historicalPeriods:pregnancies:today:features:existingMetrics:);
  uint64_t v235 = *v28;
  uint64_t v362 = 0;
  uint64_t v360 = 0;
  uint64_t v361 = 0;
  uint64_t v359 = 0;
  uint64_t v358 = 0;
  uint64_t v357 = 0;
  int v356 = 0;
  uint64_t v355 = 0;
  uint64_t v354 = 0;
  uint64_t v353 = 0;
  uint64_t v351 = 0;
  uint64_t v352 = 0;
  uint64_t v349 = 0;
  uint64_t v350 = 0;
  uint64_t v347 = 0;
  uint64_t v348 = 0;
  uint64_t v346 = 0;
  uint64_t v345 = 0;
  uint64_t v344 = 0;
  uint64_t v273 = (Swift::OpaquePointer *)&v343;
  uint64_t v343 = 0;
  char v338 = 0;
  uint64_t v334 = 0;
  uint64_t v325 = 0;
  uint64_t v321 = 0;
  int v320 = 0;
  int v319 = 0;
  uint64_t v318 = 0;
  uint64_t v314 = 0;
  unint64_t v315 = 0;
  uint64_t v313 = 0;
  uint64_t v312 = 0;
  uint64_t v237 = type metadata accessor for EspressoFunction();
  uint64_t v238 = *(void *)(v237 - 8);
  uint64_t v239 = v237 - 8;
  unint64_t v240 = (*(void *)(v238 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v35 = MEMORY[0x270FA5388](v236);
  v242 = (char *)&v134 - v240;
  uint64_t v362 = (char *)&v134 - v240;
  uint64_t v360 = v35;
  uint64_t v361 = v241;
  uint64_t v359 = a3;
  uint64_t v358 = a4;
  uint64_t v357 = a5;
  int v356 = a6;
  uint64_t v276 = (void **)&v363;
  uint64_t v363 = (uint64_t)a7;
  uint64_t v364 = (uint64_t)a8;
  uint64_t v365 = (uint64_t)a9;
  uint64_t v366 = v36;
  uint64_t v367 = v37;
  uint64_t v368 = v38;
  uint64_t v369 = v39;
  uint64_t v370 = v40;
  uint64_t v371 = v41;
  uint64_t v372 = v42;
  id v373 = a17;
  uint64_t v374 = a18;
  uint64_t v375 = a19;
  uint64_t v376 = v43;
  uint64_t v377 = v44;
  uint64_t v378 = v45;
  uint64_t v379 = v46;
  uint64_t v380 = (uint64_t)a24;
  uint64_t v381 = a25;
  uint64_t v382 = a26;
  uint64_t v383 = a27;
  uint64_t v355 = a28;
  uint64_t v354 = v28;
  swift_bridgeObjectRetain();
  uint64_t v353 = v243;
  uint64_t v246 = NightingaleDPFLRunner.performanceMeasure.getter();
  object = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Training", v244, 1)._object;
  dispatch thunk of PerformanceMeasure.start(_:)();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v279 = HyperParams.labelName.getter();
  uint64_t v278 = v47;
  uint64_t v351 = v279;
  uint64_t v352 = v47;
  uint64_t v247 = HyperParams.lossName.getter();
  uint64_t v248 = v48;
  uint64_t v349 = v247;
  uint64_t v350 = v48;
  uint64_t v249 = HyperParams.outputName.getter();
  uint64_t v250 = v49;
  uint64_t v347 = v249;
  uint64_t v348 = v49;
  outlined retain of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])((uint64_t)v276);
  uint64_t v251 = MEMORY[0x25A2C0820](v277);
  uint64_t v346 = v251;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v50 = HyperParams.batchSize.getter();
  uint64_t v252 = static HIDPFLUtils.computeEffectiveTrainingSize(_:_:)(v251, v50);
  uint64_t v253 = v51;
  uint64_t v345 = v252;
  uint64_t v344 = v51;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, [Float]));
  uint64_t v255 = _allocateUninitializedArray<A>(_:)();
  uint64_t v256 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
  uint64_t v343 = Dictionary.init(dictionaryLiteral:)();
  BOOL v257 = HyperParams.isDaySHRRequired()();
  long long v258 = *HyperParams.nightingaleDInputDaySHR10.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  transferFeatureToMLInputs(required:feature:stats:name:mlInputs:)(v257, v302, v301, (Swift::String)v258, v273);
  swift_bridgeObjectRelease();
  BOOL v259 = HyperParams.isNightSHRRequired()();
  long long v260 = *HyperParams.nightingaleDInputNightSHR10.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  transferFeatureToMLInputs(required:feature:stats:name:mlInputs:)(v259, v300, v299, (Swift::String)v260, v273);
  swift_bridgeObjectRelease();
  BOOL v261 = HyperParams.isPSMRequired()();
  long long v262 = *HyperParams.nightingaleDInputPeriodStartMean.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  transferFeatureToMLInputs(required:feature:stats:name:mlInputs:)(v261, v298, v297, (Swift::String)v262, v273);
  swift_bridgeObjectRelease();
  BOOL v263 = HyperParams.isPSSRequired()();
  long long v264 = *HyperParams.nightingaleDInputPeriodStartStd.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  transferFeatureToMLInputs(required:feature:stats:name:mlInputs:)(v263, v296, v295, (Swift::String)v264, v273);
  swift_bridgeObjectRelease();
  BOOL v265 = HyperParams.isSWTRequired()();
  long long v266 = *HyperParams.nightingaleDInputAppleSleepingWristTemperature.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  transferFeatureToMLInputs(required:feature:stats:name:mlInputs:)(v265, v292, v291, (Swift::String)v266, v273);
  swift_bridgeObjectRelease();
  BOOL PeriodStart = HyperParams.isDaysSinceLastPeriodStartRequired()();
  long long v268 = *HyperParams.nightingaleDInputDaysSinceLMS.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  transferFeatureToMLInputs(required:feature:stats:name:mlInputs:)(PeriodStart, v294, v293, (Swift::String)v268, v273);
  swift_bridgeObjectRelease();
  BOOL v269 = HyperParams.isHRVRequired()();
  long long v270 = *HyperParams.nightingaleDInputHRV.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  transferFeatureToMLInputs(required:feature:stats:name:mlInputs:)(v269, v290, v289, (Swift::String)v270, v273);
  swift_bridgeObjectRelease();
  BOOL v271 = HyperParams.isRespiratoryRateRequired()();
  long long v272 = *HyperParams.nightingaleDInputRespiratoryRate.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  transferFeatureToMLInputs(required:feature:stats:name:mlInputs:)(v271, v288, v287, (Swift::String)v272, v273);
  swift_bridgeObjectRelease();
  BOOL v52 = HyperParams.isSpO2Required()();
  uint64_t v53 = v273;
  BOOL v274 = v52;
  long long v275 = *HyperParams.nightingaleDInputSpO2.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  transferFeatureToMLInputs(required:feature:stats:name:mlInputs:)(v274, v286, v285, (Swift::String)v275, v53);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined retain of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])((uint64_t)v276);
  uint64_t v281 = &v342;
  uint64_t v342 = v277;
  int v280 = v341;
  v341[0] = v279;
  v341[1] = v278;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : [Float]]);
  Dictionary.subscript.setter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v303 = HyperParams.modelRepresentation.getter();
  uint64_t v306 = v54;
  uint64_t v55 = HyperParams.modelRepresentationEIR.unsafeMutableAddressor();
  uint64_t v304 = *(void *)v55;
  uint64_t v305 = *((void *)v55 + 1);
  swift_bridgeObjectRetain();
  int v307 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v307)
  {
    uint64_t v224 = type metadata accessor for EspressoEIRTrainer();
    NightingaleDPFLRunner.performanceMeasure.getter();
    uint64_t v56 = EspressoEIRTrainer.__allocating_init(_:)();
    v308[3] = v224;
    v308[4] = MEMORY[0x263F61118];
    v308[0] = v56;
    outlined init with take of HealthDataQuery(v308, v340);
  }
  else
  {
    uint64_t v223 = type metadata accessor for EspressoMILTrainer();
    NightingaleDPFLRunner.performanceMeasure.getter();
    uint64_t v57 = EspressoMILTrainer.__allocating_init(_:)();
    v339[3] = v223;
    v339[4] = MEMORY[0x263F61120];
    v339[0] = v57;
    outlined init with take of HealthDataQuery(v339, v340);
  }
  int v222 = HyperParams.evalBeforeTrain.getter();
  char v338 = v222 & 1;
  if (v222)
  {
    uint64_t v220 = _allocateUninitializedArray<A>(_:)();
    uint64_t v219 = v58;
    static EspressoFunction.evaluation.getter();
    static EspressoFunction.training.getter();
    uint64_t v59 = v220;
    _finalizeUninitializedArray<A>(_:)();
    uint64_t v221 = v59;
    lazy protocol witness table accessor for type EspressoFunction and conformance EspressoFunction();
    SetAlgebra<>.init(arrayLiteral:)();
  }
  else
  {
    static EspressoFunction.training.getter();
  }
  uint64_t v210 = &v337;
  uint64_t v211 = 32;
  uint64_t v214 = 0;
  swift_beginAccess();
  uint64_t v209 = *(void *)(v282 + 24);
  swift_bridgeObjectRetain();
  swift_endAccess();
  v212 = &v336;
  swift_beginAccess();
  uint64_t v213 = *(void *)(v282 + 24);
  swift_bridgeObjectRetain();
  swift_endAccess();
  uint64_t v335 = v213;
  uint64_t v215 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  unint64_t v60 = lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v61 = v228;
  uint64_t v62 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))v229, v214, v215, MEMORY[0x263F8D310], MEMORY[0x263F8E628], v60, MEMORY[0x263F8E658], v216);
  uint64_t v217 = v61;
  uint64_t v218 = v62;
  if (v61)
  {
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v192 = v218;
  outlined destroy of [A]();
  uint64_t v200 = MEMORY[0x263F8D310];
  uint64_t v196 = static Array.+ infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v193 = _allocateUninitializedArray<A>(_:)();
  v194 = v63;
  swift_bridgeObjectRetain();
  uint64_t v64 = v193;
  uint64_t v65 = v278;
  uint64_t v66 = v194;
  uint64_t *v194 = v279;
  v66[1] = v65;
  _finalizeUninitializedArray<A>(_:)();
  uint64_t v195 = v64;
  uint64_t v202 = static Array.+ infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v334 = v202;
  v197 = v331;
  outlined init with copy of HealthDataQuery((uint64_t)v340, (uint64_t)v331);
  uint64_t v204 = v332;
  uint64_t v205 = v333;
  v201 = __swift_project_boxed_opaque_existential_1(v197, v332);
  uint64_t v198 = _allocateUninitializedArray<A>(_:)();
  v199 = v67;
  swift_bridgeObjectRetain();
  uint64_t v68 = v248;
  uint64_t v69 = v199;
  uint64_t *v199 = v247;
  v69[1] = v68;
  swift_bridgeObjectRetain();
  uint64_t v70 = v198;
  uint64_t v71 = v250;
  uint64_t v72 = v199;
  v199[2] = v249;
  v72[3] = v71;
  _finalizeUninitializedArray<A>(_:)();
  uint64_t v203 = v70;
  uint64_t v73 = HyperParams.weightNames.getter();
  uint64_t v74 = v217;
  uint64_t v206 = v73;
  dispatch thunk of EspressoTrainer.load(path:functions:inputs:outputs:weights:)();
  uint64_t v207 = v74;
  uint64_t v208 = v74;
  if (v74)
  {
LABEL_19:
    uint64_t v138 = v208;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v331);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v238 + 8))(v242, v237);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v340);
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of [A]();
    uint64_t v139 = v138;
    return v216;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v331);
  uint64_t v186 = v328;
  outlined init with copy of HealthDataQuery((uint64_t)v340, (uint64_t)v328);
  uint64_t v188 = v329;
  uint64_t v189 = v330;
  v187 = __swift_project_boxed_opaque_existential_1(v186, v329);
  float v75 = HyperParams.learningRate.getter();
  uint64_t v76 = v207;
  float v326 = v75;
  char v327 = 0;
  dispatch thunk of EspressoTrainer.finalize(batchSize:learningRate:)();
  uint64_t v190 = v76;
  uint64_t v191 = v76;
  if (v76)
  {
    uint64_t v137 = v191;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v328);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v238 + 8))(v242, v237);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v340);
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of [A]();
    uint64_t v139 = v137;
    return v216;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v328);
  uint64_t v77 = v190;
  uint64_t v182 = v343;
  swift_bridgeObjectRetain();
  uint64_t v183 = &v134;
  MEMORY[0x270FA5388](v230);
  *(&v134 - 2) = v78;
  uint64_t v79 = Dictionary.mapValues<A>(_:)();
  uint64_t v184 = v77;
  uint64_t v185 = v79;
  if (v77)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v176 = v185;
  swift_bridgeObjectRelease();
  uint64_t v325 = v176;
  uint64_t v177 = &v322;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  outlined retain of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])((uint64_t)&v363);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v80 = v363;
  uint64_t v81 = v364;
  uint64_t v82 = v365;
  uint64_t v83 = v366;
  uint64_t v84 = v367;
  uint64_t v85 = v368;
  uint64_t v86 = v369;
  uint64_t v87 = v378;
  uint64_t v174 = v379;
  uint64_t v175 = v380;
  uint64_t v173 = &v134;
  uint64_t v88 = MEMORY[0x270FA5388](v377);
  uint64_t v89 = v226;
  int v90 = v227;
  uint64_t v91 = v174;
  uint64_t v92 = v175;
  uint64_t v93 = v282;
  uint64_t v179 = &v134 - 38;
  int v178 = 1;
  uint64_t v95 = &v134 - 38;
  *((unsigned char *)v95 + 16) = v94 & 1;
  v95[3] = (uint64_t)v340;
  v95[4] = (uint64_t)&v343;
  v95[5] = v176;
  v95[6] = v251;
  v95[7] = v247;
  v95[8] = v248;
  v95[9] = v249;
  v95[10] = v250;
  uint64_t v96 = v235;
  v95[11] = v93;
  v95[12] = v80;
  v95[13] = v81;
  v95[14] = v82;
  v95[15] = v83;
  v95[16] = v84;
  v95[17] = v85;
  v95[18] = v86;
  v95[19] = v97;
  v95[20] = v98;
  v95[21] = v99;
  v95[22] = v100;
  v95[23] = v101;
  v95[24] = v102;
  v95[25] = v103;
  v95[26] = v88;
  v95[27] = v87;
  v95[28] = v91;
  v95[29] = v92;
  v95[30] = v104;
  v95[31] = v105;
  v95[32] = v106;
  v95[33] = v107;
  v95[34] = v89;
  *((_DWORD *)v95 + 70) = v90;
  v95[36] = (uint64_t)&v353;
  v95[37] = v96;
  uint64_t v108 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ([Float], Float, Float));
  uint64_t v109 = v184;
  NightingaleDPFLRunner.sendLocation<A>(location:force:work:)(11, v178 & 1, (uint64_t)v179, v108, (uint64_t)v177);
  uint64_t v180 = v109;
  uint64_t v181 = v109;
  if (v109)
  {
LABEL_22:
    uint64_t v136 = v181;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    outlined release of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])((uint64_t)&v363);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v238 + 8))(v242, v237);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v340);
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of [A]();
    uint64_t v139 = v136;
    return v216;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  outlined release of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])((uint64_t)&v363);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v171 = v322;
  int v166 = v323;
  int v167 = v324;
  uint64_t v321 = v322;
  int v320 = v323;
  int v319 = v324;
  uint64_t v169 = NightingaleDPFLRunner.performanceMeasure.getter();
  uint64_t v168 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Training", 8uLL, 1)._object;
  dispatch thunk of PerformanceMeasure.finish(_:)();
  uint64_t v170 = v110;
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v111 = v180;
  uint64_t v318 = v170;
  Array.withUnsafeBufferPointer<A>(_:)();
  uint64_t v172 = v111;
  if (v111)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    uint64_t v135 = v145;
    outlined consume of Data._Representation(v164, v165);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v238 + 8))(v242, v237);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v340);
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of [A]();
    uint64_t v139 = v135;
    return v216;
  }
  uint64_t v164 = v316;
  unint64_t v165 = v317;
  uint64_t v314 = v316;
  unint64_t v315 = v317;
  if (HyperParams.collectL2Norm.getter())
  {
    uint64_t v112 = NightingaleDPFLRunner.keyMetricsL2Norm.unsafeMutableAddressor();
    uint64_t v160 = *(void *)v112;
    uint64_t v161 = *((void *)v112 + 1);
    swift_bridgeObjectRetain();
    static PFLStats.l2Norm(_:)();
    uint64_t v163 = &v310;
    uint64_t v311 = MEMORY[0x263F8D5C8];
    int v310 = v113;
    uint64_t v162 = v309;
    v309[0] = v160;
    v309[1] = v161;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    Dictionary.subscript.setter();
  }
  uint64_t v147 = NightingaleDPFLRunner.performanceMeasure.getter();
  uint64_t v146 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PluginE2E", 9uLL, 1)._object;
  dispatch thunk of PerformanceMeasure.finish(_:)();
  uint64_t v150 = v114;
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v313 = v150;
  uint64_t v156 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any));
  uint64_t v157 = _allocateUninitializedArray<A>(_:)();
  unsigned int v155 = v115;
  char v116 = NightingaleDPFLRunner.keyMetricsTrainingDurationS.unsafeMutableAddressor();
  outlined init with copy of String(v116, v155);
  uint64_t v117 = v170;
  char v118 = v155;
  uint64_t v149 = MEMORY[0x263F8D538];
  v155[5] = MEMORY[0x263F8D538];
  v118[2] = v117;
  unsigned int v148 = v118 + 6;
  uint64_t v119 = NightingaleDPFLRunner.keyMetricsE2EDurationS.unsafeMutableAddressor();
  outlined init with copy of String(v119, v148);
  uint64_t v120 = v150;
  uint64_t v121 = v155;
  v155[11] = v149;
  v121[8] = v120;
  uint64_t v151 = v121 + 12;
  uint64_t v122 = NightingaleDPFLRunner.keyMetricsLoss.unsafeMutableAddressor();
  outlined init with copy of String(v122, v151);
  int v123 = v166;
  int v124 = v155;
  uint64_t v154 = MEMORY[0x263F8D5C8];
  v155[17] = MEMORY[0x263F8D5C8];
  *((_DWORD *)v124 + 28) = v123;
  uint64_t v152 = v124 + 18;
  uint64_t v125 = NightingaleDPFLRunner.keyNumSlices.unsafeMutableAddressor();
  outlined init with copy of String(v125, v152);
  uint64_t v126 = v252;
  v127 = v155;
  v155[23] = MEMORY[0x263F8D6C8];
  v127[20] = v126;
  uint64_t v153 = v127 + 24;
  uint64_t v128 = NightingaleDPFLRunner.keyMetricsLossBeforeTraining.unsafeMutableAddressor();
  outlined init with copy of String(v128, v153);
  v129 = v155;
  int v130 = v167;
  v155[29] = v154;
  *((_DWORD *)v129 + 52) = v130;
  _finalizeUninitializedArray<A>(_:)();
  uint64_t v158 = Dictionary.init(dictionaryLiteral:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  uint64_t v131 = v172;
  Dictionary.merge(_:uniquingKeysWith:)();
  uint64_t v159 = v131;
  if (v131) {
    goto LABEL_24;
  }
  uint64_t v143 = &v134;
  MEMORY[0x270FA5388](&v134);
  *(&v134 - 2) = (uint64_t)&v353;
  NightingaleDPFLRunner.sendLocation<A>(location:force:work:)(12, 1, (uint64_t)(&v134 - 4), MEMORY[0x263F8EE60] + 8, v132);
  uint64_t v144 = 0;
  uint64_t v145 = 0;
  type metadata accessor for PFLTaskResult();
  v141 = &v353;
  uint64_t v140 = v353;
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v164, v165);
  uint64_t v142 = PFLTaskResult.__allocating_init(json:vector:)();
  uint64_t v312 = v142;
  outlined consume of Data._Representation(v164, v165);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v238 + 8))(v242, v237);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v340);
  outlined destroy of [A]();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of [A]();
  return v142;
}

Swift::Void __swiftcall transferFeatureToMLInputs(required:feature:stats:name:mlInputs:)(Swift::Bool required, Swift::OpaquePointer feature, Swift::OpaquePointer stats, Swift::String name, Swift::OpaquePointer *mlInputs)
{
  if (required)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : [Float]]);
    Dictionary.subscript.setter();
    DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    Swift::String v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v5);
    swift_bridgeObjectRelease();
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    Swift::String v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("_stats", 6uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    swift_bridgeObjectRetain();
    Dictionary.subscript.setter();
  }
}

uint64_t closure #1 in NightingaleDPFLRunner.runTraining(modelPath:hyperParams:historicalPeriods:pregnancies:today:features:existingMetrics:)@<X0>(uint64_t *a1@<X8>)
{
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v1);
  swift_bridgeObjectRelease();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  Swift::String v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("_stats", 6uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  uint64_t result = String.init(stringInterpolation:)();
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t closure #2 in NightingaleDPFLRunner.runTraining(modelPath:hyperParams:historicalPeriods:pregnancies:today:features:existingMetrics:)@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t result = MEMORY[0x25A2C0820]();
  uint64_t v5 = result;
  if (!a1)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  if (v5 == 0x8000000000000000 && a1 == -1)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  *a2 = v5 / a1;
  return result;
}

uint64_t *closure #3 in NightingaleDPFLRunner.runTraining(modelPath:hyperParams:historicalPeriods:pregnancies:today:features:existingMetrics:)@<X0>(unsigned int a1@<W0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, float *a9@<X8>, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, int a15, uint64_t a16)
{
  long long v264 = a9;
  unsigned int v297 = a1;
  uint64_t v284 = a2;
  long long v275 = a3;
  uint64_t v276 = a4;
  uint64_t v277 = a5;
  uint64_t v278 = a6;
  uint64_t v279 = a7;
  uint64_t v280 = a8;
  uint64_t v281 = a10;
  uint64_t v282 = a11;
  long long v268 = a12;
  uint64_t v293 = a13;
  uint64_t v294 = a14;
  int v295 = a15;
  uint64_t v283 = a16;
  uint64_t v269 = 0;
  long long v266 = closure #36 in NightingaleDPFLRunner.run(task:useCase:context:);
  char v367 = 0;
  uint64_t v366 = 0;
  uint64_t v365 = 0;
  uint64_t v364 = 0;
  uint64_t v363 = 0;
  uint64_t v361 = 0;
  uint64_t v362 = 0;
  uint64_t v359 = 0;
  uint64_t v360 = 0;
  uint64_t v358 = 0;
  uint64_t v357 = 0;
  uint64_t v356 = 0;
  int v355 = 0;
  uint64_t v354 = 0;
  float v353 = 0.0;
  uint64_t v352 = 0;
  uint64_t v351 = 0;
  uint64_t v339 = 0;
  int v336 = 0;
  uint64_t v335 = 0;
  uint64_t v325 = 0;
  uint64_t v323 = 0;
  uint64_t v324 = 0;
  int __c = 0;
  memset(v316, 0, sizeof(v316));
  memset(v309, 0, sizeof(v309));
  uint64_t v308 = 0;
  float v305 = 0.0;
  uint64_t v302 = 0;
  uint64_t v16 = a12[1];
  uint64_t v17 = a12[2];
  uint64_t v18 = a12[3];
  uint64_t v19 = a12[4];
  uint64_t v20 = a12[5];
  uint64_t v21 = a12[6];
  uint64_t v22 = a12[7];
  uint64_t v23 = a12[8];
  uint64_t v24 = a12[9];
  uint64_t v25 = a12[10];
  uint64_t v26 = a12[11];
  uint64_t v27 = a12[12];
  uint64_t v28 = a12[13];
  uint64_t v29 = a12[14];
  uint64_t v30 = a12[15];
  uint64_t v31 = a12[16];
  uint64_t v32 = a12[17];
  uint64_t v33 = a12[18];
  uint64_t v34 = a12[19];
  uint64_t v35 = a12[20];
  uint64_t v368 = *a12;
  uint64_t v369 = v16;
  uint64_t v370 = v17;
  uint64_t v371 = v18;
  uint64_t v372 = v19;
  uint64_t v373 = v20;
  uint64_t v374 = v21;
  uint64_t v375 = v22;
  uint64_t v376 = v23;
  uint64_t v377 = v24;
  uint64_t v378 = v25;
  uint64_t v379 = v26;
  uint64_t v380 = v27;
  uint64_t v381 = v28;
  uint64_t v382 = v29;
  uint64_t v383 = v30;
  uint64_t v384 = v31;
  uint64_t v385 = v32;
  uint64_t v386 = v33;
  uint64_t v387 = v34;
  uint64_t v388 = v35;
  uint64_t v270 = type metadata accessor for ShuffleMethod();
  uint64_t v271 = *(void *)(v270 - 8);
  uint64_t v272 = v270 - 8;
  unint64_t v273 = (*(void *)(v271 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  BOOL v274 = (char *)v113 - v273;
  uint64_t v285 = type metadata accessor for EspressoFunction();
  uint64_t v286 = *(void *)(v285 - 8);
  uint64_t v287 = v285 - 8;
  uint64_t v291 = *(void *)(v286 + 64);
  unint64_t v288 = (v291 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v36 = MEMORY[0x270FA5388](v297);
  Swift::OpaquePointer v289 = (char *)v113 - v288;
  unint64_t v290 = (v291 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v37 = MEMORY[0x270FA5388](v36);
  Swift::OpaquePointer v292 = (char *)v113 - v290;
  char v38 = MEMORY[0x270FA5388](v37);
  Swift::OpaquePointer v296 = (char *)v113 - v39;
  char v367 = v38 & 1;
  uint64_t v366 = v40;
  uint64_t v365 = v41;
  uint64_t v364 = v42;
  uint64_t v363 = v43;
  uint64_t v361 = v44;
  uint64_t v362 = v45;
  uint64_t v359 = v46;
  uint64_t v360 = v47;
  uint64_t v358 = v48;
  uint64_t v357 = v293;
  uint64_t v356 = v294;
  int v355 = v295;
  uint64_t v354 = v49;
  float v353 = 0.0;
  uint64_t v352 = specialized Array.init()();
  if (v297)
  {
    BOOL v257 = v326;
    outlined init with copy of HealthDataQuery(v284, (uint64_t)v326);
    uint64_t v259 = v327;
    uint64_t v260 = v328;
    __swift_project_boxed_opaque_existential_1(v257, v327);
    uint64_t v50 = v265;
    uint64_t v258 = *v275;
    swift_bridgeObjectRetain();
    uint64_t v51 = dispatch thunk of EspressoTrainer.eval(_:featureSizes:numSamples:)();
    uint64_t v261 = v50;
    uint64_t v262 = v51;
    uint64_t v263 = v50;
    if (v50)
    {
      uint64_t v118 = v263;
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v326);
      uint64_t result = &v352;
      outlined destroy of [A]();
      uint64_t v236 = v118;
      return result;
    }
    uint64_t v254 = v262;
    swift_bridgeObjectRelease();
    uint64_t v325 = v254;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v326);
    swift_bridgeObjectRetain();
    uint64_t v322 = v254;
    uint64_t v255 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[String : [Float]]]);
    lazy protocol witness table accessor for type [[String : [Float]]] and conformance [A]();
    Collection<>.makeIterator()();
    for (uint64_t i = v261; ; uint64_t i = v252)
    {
      uint64_t v252 = i;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[[String : [Float]]]>);
      IndexingIterator.next()();
      uint64_t v253 = v321;
      if (!v321) {
        break;
      }
      uint64_t v251 = v253;
      uint64_t v246 = v253;
      uint64_t v308 = v253;
      swift_bridgeObjectRetain();
      uint64_t v248 = v306;
      v306[0] = v278;
      v306[1] = v279;
      uint64_t v247 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
      MEMORY[0x25A2C04B0](&v307, v248, v246, MEMORY[0x263F8D310]);
      outlined destroy of DefaultStringInterpolation();
      uint64_t v249 = v307;
      if (v307)
      {
        uint64_t v245 = v249;
        uint64_t v240 = v249;
        swift_bridgeObjectRetain();
        uint64_t v239 = &v298;
        uint64_t v298 = v240;
        lazy protocol witness table accessor for type [Float] and conformance [A]();
        Collection.first.getter();
        outlined destroy of [A]();
        float v242 = v299;
        int v241 = v300;
        swift_bridgeObjectRelease();
        float v243 = v242;
        int v244 = v241;
      }
      else
      {
        float v243 = 0.0;
        int v244 = 1;
      }
      float v238 = v243;
      if (v244)
      {
        lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
        uint64_t v235 = swift_allocError();
        *BOOL v52 = 10;
        swift_willThrow();
        swift_bridgeObjectRelease();
        outlined destroy of [A]();
        swift_bridgeObjectRelease();
        outlined destroy of [A]();
        uint64_t result = (uint64_t *)v235;
        uint64_t v236 = v235;
        return result;
      }
      float v237 = v238;
      float v305 = v238;
      float v353 = v353 + v238;
      swift_bridgeObjectRetain();
      v233 = v303;
      v303[0] = v280;
      v303[1] = v281;
      MEMORY[0x25A2C04B0](&v304);
      outlined destroy of DefaultStringInterpolation();
      uint64_t v234 = v304;
      if (!v304)
      {
        lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
        uint64_t v231 = swift_allocError();
        *uint64_t v54 = 26;
        swift_willThrow();
        swift_bridgeObjectRelease();
        outlined destroy of [A]();
        swift_bridgeObjectRelease();
        outlined destroy of [A]();
        uint64_t result = (uint64_t *)v231;
        uint64_t v236 = v231;
        return result;
      }
      uint64_t v232 = v234;
      uint64_t v230 = v234;
      uint64_t v302 = v234;
      swift_bridgeObjectRetain();
      v229 = &v301;
      uint64_t v301 = v230;
      lazy protocol witness table accessor for type [Float] and conformance [A]();
      Array.append<A>(contentsOf:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    outlined destroy of [A]();
    uint64_t v250 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : [Float]]);
    if (MEMORY[0x25A2C0810](v254) > 0)
    {
      uint64_t v55 = MEMORY[0x25A2C0810](v254, v250);
      float v353 = v353 / (float)v55;
    }
    uint64_t v217 = v318;
    outlined init with copy of HealthDataQuery(v284, (uint64_t)v318);
    uint64_t v215 = v319;
    uint64_t v216 = v320;
    __swift_project_boxed_opaque_existential_1(v217, v319);
    static EspressoFunction.evaluation.getter();
    dispatch thunk of EspressoTrainer.unload(functions:)();
    (*(void (**)(char *, uint64_t))(v286 + 8))(v296, v285);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v217);
    uint64_t v56 = v252;
    uint64_t v218 = v352;
    swift_bridgeObjectRetain();
    static NightingaleDMetricsProcessor.generateCycleMetrics(hyperParams:outputs:labels:historicalPeriods:sliceEndDays:pregnancies:today:)(v282, v218, v387, v293, v386, v294, v295, v317);
    uint64_t v219 = v56;
    uint64_t v220 = v317[0];
    uint64_t v221 = v317[1];
    uint64_t v222 = v317[2];
    uint64_t v223 = v317[3];
    uint64_t v224 = v317[4];
    uint64_t v225 = v317[5];
    uint64_t v226 = v317[6];
    uint64_t v227 = v317[7];
    uint64_t v228 = v56;
    if (v56)
    {
      uint64_t v117 = v228;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = &v352;
      outlined destroy of [A]();
      uint64_t v236 = v117;
      return result;
    }
    uint64_t v205 = v227;
    uint64_t v204 = v226;
    uint64_t v203 = v225;
    uint64_t v202 = v224;
    uint64_t v201 = v223;
    uint64_t v200 = v222;
    uint64_t v199 = v221;
    uint64_t v198 = v220;
    swift_bridgeObjectRelease();
    uint64_t v57 = v219;
    v316[0] = v198;
    v316[1] = v199;
    v316[2] = v200;
    v316[3] = v201;
    v316[4] = v202;
    v316[5] = v203;
    v316[6] = v204;
    v316[7] = v205;
    uint64_t v206 = v352;
    swift_bridgeObjectRetain();
    static NightingaleDMetricsProcessor.generateSliceMetrics(hyperParams:outputs:labels:)(v206, v387, (uint64_t)&v310);
    uint64_t v207 = v57;
    uint64_t v208 = v310;
    int v209 = v311;
    uint64_t v210 = v312;
    uint64_t v211 = v313;
    uint64_t v212 = v314;
    uint64_t v213 = v315;
    uint64_t v214 = v57;
    if (v57)
    {
      uint64_t v116 = v214;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = &v352;
      outlined destroy of [A]();
      uint64_t v236 = v116;
      return result;
    }
    uint64_t v191 = v213;
    uint64_t v192 = v212;
    uint64_t v193 = v211;
    uint64_t v194 = v210;
    int v181 = v209;
    uint64_t v190 = v208;
    swift_bridgeObjectRelease();
    v309[0] = v190;
    LODWORD(v309[1]) = v181;
    void v309[2] = v194;
    v309[3] = v193;
    v309[4] = v192;
    v309[5] = v191;
    uint64_t v189 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any));
    uint64_t v186 = _allocateUninitializedArray<A>(_:)();
    uint64_t v188 = v58;
    uint64_t v59 = NightingaleDPFLRunner.keyMetricsCycleTP.unsafeMutableAddressor();
    outlined init with copy of String(v59, v188);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v60 = v198;
    uint64_t v61 = v188;
    uint64_t v176 = MEMORY[0x263F8D6C8];
    v188[5] = MEMORY[0x263F8D6C8];
    v61[2] = v60;
    uint64_t v171 = v61 + 6;
    uint64_t v62 = NightingaleDPFLRunner.keyMetricsCycleTPR.unsafeMutableAddressor();
    outlined init with copy of String(v62, v171);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
    uint64_t v64 = v188;
    uint64_t v65 = v199;
    uint64_t v187 = v63;
    v188[11] = v63;
    v64[8] = v65;
    uint64_t v172 = v64 + 12;
    uint64_t v66 = NightingaleDPFLRunner.keyMetricsCycleFP.unsafeMutableAddressor();
    outlined init with copy of String(v66, v172);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v67 = v200;
    uint64_t v68 = v188;
    v188[17] = v176;
    v68[14] = v67;
    uint64_t v173 = v68 + 18;
    uint64_t v69 = NightingaleDPFLRunner.keyMetricsCycleFPR.unsafeMutableAddressor();
    outlined init with copy of String(v69, v173);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v70 = v188;
    uint64_t v71 = v201;
    v188[23] = v187;
    v70[20] = v71;
    uint64_t v174 = v70 + 24;
    uint64_t v72 = NightingaleDPFLRunner.keyMetricsNumberOfPregnantCycles.unsafeMutableAddressor();
    outlined init with copy of String(v72, v174);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v73 = v202;
    uint64_t v74 = v188;
    v188[29] = v176;
    v74[26] = v73;
    uint64_t v175 = v74 + 30;
    float v75 = NightingaleDPFLRunner.keyMetricsNumberOfNonPregnantCycles.unsafeMutableAddressor();
    outlined init with copy of String(v75, v175);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v76 = v203;
    uint64_t v77 = v188;
    v188[35] = v176;
    v77[32] = v76;
    uint64_t v177 = v77 + 36;
    uint64_t v78 = NightingaleDPFLRunner.keyMetricsCycleLatency.unsafeMutableAddressor();
    outlined init with copy of String(v78, v177);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v79 = v188;
    uint64_t v80 = v204;
    v188[41] = v187;
    v79[38] = v80;
    int v178 = v79 + 42;
    uint64_t v81 = NightingaleDPFLRunner.keyMetricsCycleLatencyBuckets.unsafeMutableAddressor();
    outlined init with copy of String(v81, v178);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
    uint64_t v83 = v188;
    uint64_t v84 = v205;
    v188[47] = v82;
    v83[44] = v84;
    uint64_t v179 = v83 + 48;
    uint64_t v85 = NightingaleDPFLRunner.keyMetricsSliceROCScore.unsafeMutableAddressor();
    outlined init with copy of String(v85, v179);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v86 = v188;
    uint64_t v87 = v190;
    v188[53] = v187;
    v86[50] = v87;
    uint64_t v180 = v86 + 54;
    uint64_t v88 = NightingaleDPFLRunner.keyMetricsSlicePRScore.unsafeMutableAddressor();
    outlined init with copy of String(v88, v180);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    int v89 = v181;
    int v90 = v188;
    v188[59] = MEMORY[0x263F8D5C8];
    *((_DWORD *)v90 + 112) = v89;
    uint64_t v182 = v90 + 60;
    uint64_t v91 = NightingaleDPFLRunner.keyMetricsSliceConfusionMatricsTP.unsafeMutableAddressor();
    outlined init with copy of String(v91, v182);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v92 = v188;
    uint64_t v93 = v194;
    v188[65] = v187;
    v92[62] = v93;
    uint64_t v183 = v92 + 66;
    char v94 = NightingaleDPFLRunner.keyMetricsSliceConfusionMatricsFP.unsafeMutableAddressor();
    outlined init with copy of String(v94, v183);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v95 = v188;
    uint64_t v96 = v193;
    v188[71] = v187;
    v95[68] = v96;
    uint64_t v184 = v95 + 72;
    uint64_t v97 = NightingaleDPFLRunner.keyMetricsSliceConfusionMatricsTN.unsafeMutableAddressor();
    outlined init with copy of String(v97, v184);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v98 = v188;
    uint64_t v99 = v192;
    v188[77] = v187;
    v98[74] = v99;
    uint64_t v185 = v98 + 78;
    uint64_t v100 = NightingaleDPFLRunner.keyMetricsSliceConfusionMatricsFN.unsafeMutableAddressor();
    outlined init with copy of String(v100, v185);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v101 = v186;
    uint64_t v102 = v188;
    uint64_t v103 = v191;
    v188[83] = v187;
    v102[80] = v103;
    _finalizeUninitializedArray<A>(_:)();
    uint64_t v195 = v101;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v196 = Dictionary.init(dictionaryLiteral:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    uint64_t v104 = v207;
    Dictionary.merge(_:uniquingKeysWith:)();
    uint64_t v197 = v104;
    if (v104)
    {
      __break(1u);
      goto LABEL_38;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v170 = v197;
  }
  else
  {
    uint64_t v170 = v265;
  }
  uint64_t v164 = v170;
  uint64_t v163 = v348;
  outlined init with copy of HealthDataQuery(v284, (uint64_t)v348);
  uint64_t v165 = v349;
  uint64_t v166 = v350;
  __swift_project_boxed_opaque_existential_1(v163, v349);
  static EspressoFunction.training.getter();
  uint64_t v105 = v164;
  uint64_t v106 = dispatch thunk of EspressoTrainer.extractWeights(function:)();
  uint64_t v167 = v105;
  uint64_t v168 = v106;
  uint64_t v169 = v105;
  if (v105)
  {
LABEL_38:
    uint64_t v115 = v169;
    (*(void (**)(char *, uint64_t))(v286 + 8))(v292, v285);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v348);
    uint64_t result = &v352;
    outlined destroy of [A]();
    uint64_t v236 = v115;
    return result;
  }
  uint64_t v151 = v168;
  uint64_t v149 = *(void (**)(char *, uint64_t))(v286 + 8);
  uint64_t v150 = v286 + 8;
  v149(v292, v285);
  uint64_t v351 = v151;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v348);
  uint64_t v152 = v345;
  outlined init with copy of HealthDataQuery(v284, (uint64_t)v345);
  uint64_t v158 = v346;
  uint64_t v159 = v347;
  uint64_t v156 = __swift_project_boxed_opaque_existential_1(v152, v346);
  uint64_t v160 = *v275;
  swift_bridgeObjectRetain();
  uint64_t v107 = HyperParams.epochs.getter();
  unsigned int v155 = &v343;
  uint64_t v343 = v107;
  unint64_t v153 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v154 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  int v157 = v344;
  HyperParams.inputShuffleMethod.getter(v274);
  HyperParams.fullBatchTraining.getter();
  uint64_t v108 = v167;
  dispatch thunk of EspressoTrainer.train(_:featureSizes:numSamples:epochs:shuffleMethod:fullBatch:)();
  uint64_t v161 = v108;
  uint64_t v162 = v108;
  if (v108)
  {
    uint64_t v114 = v162;
    (*(void (**)(char *, uint64_t))(v271 + 8))(v274, v270);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v345);
    outlined destroy of [A]();
    uint64_t result = &v352;
    outlined destroy of [A]();
    uint64_t v236 = v114;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v271 + 8))(v274, v270);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v345);
    uint64_t v145 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
    uint64_t v144 = MEMORY[0x263F8D310];
    uint64_t v146 = MEMORY[0x263F8D320];
    int v139 = default argument 0 of Dictionary.removeAll(keepingCapacity:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : [Float]]);
    Dictionary.removeAll(keepingCapacity:)(v139 & 1);
    uint64_t v142 = v340;
    outlined init with copy of HealthDataQuery(v284, (uint64_t)v340);
    uint64_t v140 = v341;
    uint64_t v141 = v342;
    __swift_project_boxed_opaque_existential_1(v142, v341);
    static EspressoFunction.training.getter();
    uint64_t v143 = dispatch thunk of EspressoTrainer.extractOutputs(function:)();
    v149(v296, v285);
    uint64_t v339 = v143;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v142);
    swift_bridgeObjectRetain();
    uint64_t v147 = v337;
    v337[0] = v278;
    v337[1] = v279;
    MEMORY[0x25A2C04B0](&v338);
    outlined destroy of DefaultStringInterpolation();
    uint64_t v148 = v338;
    if (v338)
    {
      uint64_t v138 = v148;
      uint64_t v133 = v148;
      swift_bridgeObjectRetain();
      uint64_t v132 = &v329;
      uint64_t v329 = v133;
      lazy protocol witness table accessor for type [Float] and conformance [A]();
      Collection.first.getter();
      outlined destroy of [A]();
      int v135 = v330;
      int v134 = v331;
      swift_bridgeObjectRelease();
      int v136 = v135;
      int v137 = v134;
    }
    else
    {
      int v136 = 0;
      int v137 = 1;
    }
    int v131 = v136;
    if (v137)
    {
      lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
      uint64_t v129 = swift_allocError();
      *uint64_t v109 = 10;
      swift_willThrow();
      swift_bridgeObjectRelease();
      outlined destroy of [A]();
      outlined destroy of [A]();
      uint64_t result = (uint64_t *)v129;
      uint64_t v236 = v129;
    }
    else
    {
      int v130 = v131;
      int v122 = v131;
      int v336 = v131;
      int v123 = v332;
      outlined init with copy of HealthDataQuery(v284, (uint64_t)v332);
      uint64_t v124 = v333;
      uint64_t v125 = v334;
      __swift_project_boxed_opaque_existential_1(v123, v333);
      static EspressoFunction.training.getter();
      uint64_t v110 = v161;
      uint64_t v111 = dispatch thunk of EspressoTrainer.extractWeights(function:)();
      uint64_t v126 = v110;
      uint64_t v127 = v111;
      uint64_t v128 = v110;
      if (v110)
      {
        v113[1] = v128;
        v149(v289, v285);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v332);
      }
      else
      {
        uint64_t v119 = v127;
        v149(v289, v285);
        uint64_t v120 = &v335;
        uint64_t v335 = v119;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v332);
        uint64_t v121 = &v351;
        static HIDPFLUtils.inplaceSub(_:_:)(v120);
        outlined init with copy of [Float](v120, v264);
        uint64_t v112 = v264;
        *((_DWORD *)v264 + 2) = v122;
        v112[3] = v353;
        outlined destroy of [A]();
      }
      swift_bridgeObjectRelease();
      outlined destroy of [A]();
      uint64_t result = &v352;
      outlined destroy of [A]();
    }
  }
  return result;
}

uint64_t closure #4 in NightingaleDPFLRunner.runTraining(modelPath:hyperParams:historicalPeriods:pregnancies:today:features:existingMetrics:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = MEMORY[0x25A2BFE90](a1, a2, MEMORY[0x263F8D5C8]);
  *a3 = result;
  a3[1] = v4;
  return result;
}

uint64_t closure #6 in NightingaleDPFLRunner.runTraining(modelPath:hyperParams:historicalPeriods:pregnancies:today:features:existingMetrics:)()
{
  return swift_bridgeObjectRelease();
}

uint64_t NightingaleDPFLRunner.runPregnanciesDistribution(hyperParams:modelPath:numberOfRawPregnancies:invalidReasons:swtAvailability:existingMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v169 = a1;
  uint64_t v170 = a2;
  uint64_t v171 = a3;
  uint64_t v188 = a4;
  uint64_t v172 = a5;
  float v173 = a7;
  uint64_t v174 = a6;
  uint64_t v176 = closure #10 in NightingaleDPFLRunner.run(task:useCase:context:);
  uint64_t v177 = closure #11 in NightingaleDPFLRunner.run(task:useCase:context:);
  int v178 = closure #12 in NightingaleDPFLRunner.run(task:useCase:context:);
  uint64_t v179 = closure #13 in NightingaleDPFLRunner.run(task:useCase:context:);
  uint64_t v180 = closure #14 in NightingaleDPFLRunner.run(task:useCase:context:);
  int v181 = closure #15 in NightingaleDPFLRunner.run(task:useCase:context:);
  uint64_t v182 = closure #7 in NightingaleDPFLRunner.runPregnanciesDistribution(hyperParams:modelPath:numberOfRawPregnancies:invalidReasons:swtAvailability:existingMetrics:);
  uint64_t v183 = closure #8 in NightingaleDPFLRunner.runPregnanciesDistribution(hyperParams:modelPath:numberOfRawPregnancies:invalidReasons:swtAvailability:existingMetrics:);
  uint64_t v184 = closure #9 in NightingaleDPFLRunner.runPregnanciesDistribution(hyperParams:modelPath:numberOfRawPregnancies:invalidReasons:swtAvailability:existingMetrics:);
  uint64_t v185 = partial apply for closure #10 in NightingaleDPFLRunner.runPregnanciesDistribution(hyperParams:modelPath:numberOfRawPregnancies:invalidReasons:swtAvailability:existingMetrics:);
  uint64_t v186 = closure #4 in NightingaleDPFLRunner.runTraining(modelPath:hyperParams:historicalPeriods:pregnancies:today:features:existingMetrics:);
  uint64_t v187 = closure #36 in NightingaleDPFLRunner.run(task:useCase:context:);
  uint64_t v225 = 0;
  float v224 = 0.0;
  uint64_t v222 = 0;
  uint64_t v220 = 0;
  uint64_t v218 = 0;
  uint64_t v216 = 0;
  uint64_t v214 = 0;
  uint64_t v212 = 0;
  uint64_t v210 = 0;
  uint64_t v208 = 0;
  uint64_t v206 = 0;
  uint64_t v204 = 0;
  uint64_t v205 = 0;
  uint64_t v202 = 0;
  uint64_t v203 = 0;
  uint64_t v198 = 0;
  uint64_t v197 = 0;
  uint64_t v193 = 0;
  unint64_t v194 = 0;
  uint64_t v192 = 0;
  uint64_t v191 = 0;
  uint64_t v232 = a1;
  uint64_t v230 = a2;
  uint64_t v231 = a3;
  uint64_t v229 = a4;
  uint64_t v228 = a5;
  float v227 = a7;
  uint64_t v226 = a6;
  uint64_t result = MEMORY[0x25A2C0810]();
  uint64_t v189 = v188 - result;
  if (__OFSUB__(v188, result))
  {
    __break(1u);
    return result;
  }
  float v164 = (float)v189;
  float v224 = (float)v189;
  swift_bridgeObjectRetain();
  uint64_t v223 = v172;
  uint64_t v165 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PregnancyInvalidReason]);
  unint64_t v166 = lazy protocol witness table accessor for type [PregnancyInvalidReason] and conformance [A]();
  uint64_t v167 = v175;
  uint64_t v168 = _ArrayProtocol.filter(_:)();
  if (v175)
  {
    __break(1u);
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v160 = v168;
  uint64_t v161 = MEMORY[0x25A2C0810]();
  uint64_t v222 = v161;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v221 = v172;
  uint64_t v162 = 0;
  uint64_t v163 = _ArrayProtocol.filter(_:)();
  uint64_t v156 = v163;
  uint64_t v157 = MEMORY[0x25A2C0810]();
  uint64_t v220 = v157;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v219 = v172;
  uint64_t v158 = v162;
  uint64_t v159 = _ArrayProtocol.filter(_:)();
  if (v162)
  {
LABEL_24:
    __break(1u);
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v152 = v159;
  uint64_t v153 = MEMORY[0x25A2C0810]();
  uint64_t v218 = v153;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v217 = v172;
  uint64_t v154 = 0;
  uint64_t v155 = _ArrayProtocol.filter(_:)();
  uint64_t v148 = v155;
  uint64_t v149 = MEMORY[0x25A2C0810]();
  uint64_t v216 = v149;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v215 = v172;
  uint64_t v150 = v154;
  uint64_t v151 = _ArrayProtocol.filter(_:)();
  if (v154)
  {
LABEL_26:
    __break(1u);
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v144 = v151;
  uint64_t v145 = MEMORY[0x25A2C0810]();
  uint64_t v214 = v145;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v213 = v172;
  uint64_t v146 = 0;
  uint64_t v147 = _ArrayProtocol.filter(_:)();
  uint64_t v140 = v147;
  uint64_t v141 = MEMORY[0x25A2C0810]();
  uint64_t v212 = v141;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v211 = v172;
  uint64_t v142 = v146;
  uint64_t v143 = _ArrayProtocol.filter(_:)();
  if (v146)
  {
LABEL_28:
    __break(1u);
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v136 = v143;
  uint64_t v137 = MEMORY[0x25A2C0810]();
  uint64_t v210 = v137;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v209 = v172;
  uint64_t v138 = 0;
  uint64_t v139 = _ArrayProtocol.filter(_:)();
  uint64_t v132 = v139;
  uint64_t v133 = MEMORY[0x25A2C0810]();
  uint64_t v208 = v133;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v207 = v172;
  uint64_t v134 = v138;
  uint64_t v135 = _ArrayProtocol.filter(_:)();
  if (v138)
  {
LABEL_30:
    __break(1u);
LABEL_31:
    uint64_t v74 = v116;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v201);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v75 = v74;
    return v107;
  }
  uint64_t v119 = v135;
  uint64_t v120 = MEMORY[0x25A2C0810]();
  uint64_t v206 = v120;
  swift_bridgeObjectRelease();
  uint64_t v122 = NightingaleDPFLRunner.performanceMeasure.getter();
  object = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Training", 8uLL, 1)._object;
  dispatch thunk of PerformanceMeasure.start(_:)();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v123 = HyperParams.inputName.getter();
  uint64_t v124 = v9;
  uint64_t v204 = v123;
  uint64_t v205 = v9;
  uint64_t v125 = HyperParams.labelName.getter();
  uint64_t v126 = v10;
  uint64_t v202 = v125;
  uint64_t v203 = v10;
  uint64_t v127 = HyperParams.modelRepresentation.getter();
  uint64_t v130 = v11;
  int v12 = HyperParams.modelRepresentationEIR.unsafeMutableAddressor();
  uint64_t v128 = *(void *)v12;
  uint64_t v129 = *((void *)v12 + 1);
  swift_bridgeObjectRetain();
  int v131 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v131)
  {
    uint64_t v118 = type metadata accessor for EspressoEIRTrainer();
    NightingaleDPFLRunner.performanceMeasure.getter();
    uint64_t v13 = EspressoEIRTrainer.__allocating_init(_:)();
    v190[3] = v118;
    v190[4] = MEMORY[0x263F61118];
    v190[0] = v13;
    outlined init with take of HealthDataQuery(v190, v201);
  }
  else
  {
    uint64_t v117 = type metadata accessor for EspressoMILTrainer();
    NightingaleDPFLRunner.performanceMeasure.getter();
    uint64_t v14 = EspressoMILTrainer.__allocating_init(_:)();
    v200[3] = v117;
    v200[4] = MEMORY[0x263F61120];
    v200[0] = v14;
    outlined init with take of HealthDataQuery(v200, v201);
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  int v113 = &v72;
  MEMORY[0x270FA5388](&v72);
  uint64_t v114 = v69;
  v69[2] = v201;
  v69[3] = v170;
  v69[4] = v15;
  v69[5] = v16;
  v69[6] = v17;
  v69[7] = v18;
  v69[8] = v126;
  v69[9] = v169;
  v69[10] = v188;
  int v70 = v19;
  int v71 = v20;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
  uint64_t v22 = v134;
  NightingaleDPFLRunner.sendLocation<A>(location:force:work:)(11, 1, (uint64_t)v114, v21, (uint64_t)&v199);
  uint64_t v115 = v22;
  uint64_t v116 = v22;
  if (v22) {
    goto LABEL_31;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v111 = v199;
  uint64_t v198 = v199;
  uint64_t v109 = NightingaleDPFLRunner.performanceMeasure.getter();
  uint64_t v108 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Training", 8uLL, 1)._object;
  dispatch thunk of PerformanceMeasure.finish(_:)();
  uint64_t v110 = v23;
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v24 = v115;
  uint64_t v197 = v110;
  Array.withUnsafeBufferPointer<A>(_:)();
  uint64_t v112 = v24;
  if (v24)
  {
    __break(1u);
LABEL_33:
    __break(1u);
    uint64_t v73 = v79;
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(v80, v81);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v201);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v75 = v73;
    return v107;
  }
  uint64_t v80 = v195;
  unint64_t v81 = v196;
  uint64_t v193 = v195;
  unint64_t v194 = v196;
  uint64_t v83 = NightingaleDPFLRunner.performanceMeasure.getter();
  uint64_t v82 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PluginE2E", 9uLL, 1)._object;
  dispatch thunk of PerformanceMeasure.finish(_:)();
  uint64_t v86 = v25;
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v192 = v86;
  Swift::Int v26 = default argument 1 of NightingaleDPFLRunner.sendLocation(_:_:)();
  NightingaleDPFLRunner.sendLocation(_:_:)(NightingaleTraining_NightingaleDReachLocation_pluginCompleted, v26);
  swift_bridgeObjectRetain();
  uint64_t v100 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any));
  uint64_t v101 = _allocateUninitializedArray<A>(_:)();
  uint64_t v99 = v27;
  uint64_t v28 = NightingaleDPFLRunner.keyMetricsTrainingDurationS.unsafeMutableAddressor();
  outlined init with copy of String(v28, v99);
  uint64_t v29 = v110;
  uint64_t v30 = v99;
  uint64_t v85 = MEMORY[0x263F8D538];
  v99[5] = MEMORY[0x263F8D538];
  v30[2] = v29;
  uint64_t v84 = v30 + 6;
  uint64_t v31 = NightingaleDPFLRunner.keyMetricsE2EDurationS.unsafeMutableAddressor();
  outlined init with copy of String(v31, v84);
  uint64_t v32 = v86;
  uint64_t v33 = v99;
  v99[11] = v85;
  v33[8] = v32;
  uint64_t v87 = v33 + 12;
  uint64_t v34 = NightingaleDPFLRunner.keyMetricsNumberOfAllPregnancies.unsafeMutableAddressor();
  outlined init with copy of String(v34, v87);
  uint64_t v35 = v188;
  uint64_t v36 = v99;
  uint64_t v98 = MEMORY[0x263F8D6C8];
  v99[17] = MEMORY[0x263F8D6C8];
  v36[14] = v35;
  uint64_t v88 = v36 + 18;
  uint64_t v37 = NightingaleDPFLRunner.keyMetricsNumberOfValidPregnancies.unsafeMutableAddressor();
  outlined init with copy of String(v37, v88);
  float v38 = v164;
  uint64_t v39 = v99;
  v99[23] = MEMORY[0x263F8D5C8];
  *((float *)v39 + 40) = v38;
  int v89 = v39 + 24;
  uint64_t v40 = NightingaleDPFLRunner.keyMetricsInvalidDurationPregnanciesCount.unsafeMutableAddressor();
  outlined init with copy of String(v40, v89);
  uint64_t v41 = v161;
  uint64_t v42 = v99;
  v99[29] = v98;
  v42[26] = v41;
  int v90 = v42 + 30;
  uint64_t v43 = NightingaleDPFLRunner.keyMetricsInvalidLMPDeltaPregnanciesCount.unsafeMutableAddressor();
  outlined init with copy of String(v43, v90);
  uint64_t v44 = v157;
  uint64_t v45 = v99;
  v99[35] = v98;
  v45[32] = v44;
  uint64_t v91 = v45 + 36;
  uint64_t v46 = NightingaleDPFLRunner.keyMetricsContainsFlowPregnanciesCount.unsafeMutableAddressor();
  outlined init with copy of String(v46, v91);
  uint64_t v47 = v153;
  uint64_t v48 = v99;
  v99[41] = v98;
  v48[38] = v47;
  uint64_t v92 = v48 + 42;
  uint64_t v49 = NightingaleDPFLRunner.keyMetricsInvalidLMPPregnanciesCount.unsafeMutableAddressor();
  outlined init with copy of String(v49, v92);
  uint64_t v50 = v149;
  uint64_t v51 = v99;
  v99[47] = v98;
  v51[44] = v50;
  uint64_t v93 = v51 + 48;
  BOOL v52 = NightingaleDPFLRunner.keyMetricsInvalidEndPregnanciesCount.unsafeMutableAddressor();
  outlined init with copy of String(v52, v93);
  uint64_t v53 = v145;
  uint64_t v54 = v99;
  v99[53] = v98;
  v54[50] = v53;
  char v94 = v54 + 54;
  char started = NightingaleDPFLRunner.keyMetricsInvalidStartSourcePregnanciesCount.unsafeMutableAddressor();
  outlined init with copy of String(started, v94);
  uint64_t v56 = v141;
  uint64_t v57 = v99;
  v99[59] = v98;
  v57[56] = v56;
  uint64_t v95 = v57 + 60;
  uint64_t v58 = NightingaleDPFLRunner.keyMetricsFailedToQuerySWTCount.unsafeMutableAddressor();
  outlined init with copy of String(v58, v95);
  uint64_t v59 = v133;
  uint64_t v60 = v99;
  v99[65] = v98;
  v60[62] = v59;
  uint64_t v96 = v60 + 66;
  UpdatingFeatures = NightingaleDPFLRunner.keyMetricsFailedToQueryUpdatingFeaturesCount.unsafeMutableAddressor();
  outlined init with copy of String(UpdatingFeatures, v96);
  uint64_t v62 = v137;
  uint64_t v63 = v99;
  v99[71] = v98;
  v63[68] = v62;
  uint64_t v97 = v63 + 72;
  HistoricalPeriods = NightingaleDPFLRunner.keyMetricsFailedToGetHistoricalPeriodsCount.unsafeMutableAddressor();
  outlined init with copy of String(HistoricalPeriods, v97);
  uint64_t v65 = v99;
  uint64_t v66 = v120;
  v99[77] = v98;
  v65[74] = v66;
  _finalizeUninitializedArray<A>(_:)();
  uint64_t v102 = MEMORY[0x263F8D310];
  uint64_t v103 = MEMORY[0x263F8EE58] + 8;
  uint64_t v104 = MEMORY[0x263F8D320];
  Dictionary.init(dictionaryLiteral:)();
  uint64_t v67 = v112;
  uint64_t v68 = Dictionary.merging(_:uniquingKeysWith:)();
  uint64_t v105 = v67;
  uint64_t v106 = v68;
  if (v67) {
    goto LABEL_33;
  }
  uint64_t v77 = v106;
  uint64_t v191 = v106;
  static HIDPFLUtils.checkMetrics(_:)();
  uint64_t v78 = 0;
  uint64_t v79 = 0;
  type metadata accessor for PFLTaskResult();
  outlined copy of Data._Representation(v80, v81);
  uint64_t v76 = PFLTaskResult.__allocating_init(json:vector:)();
  outlined consume of Data._Representation(v80, v81);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v201);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v76;
}

BOOL closure #7 in NightingaleDPFLRunner.runPregnanciesDistribution(hyperParams:modelPath:numberOfRawPregnancies:invalidReasons:swtAvailability:existingMetrics:)(char *a1)
{
  return static PregnancyInvalidReason.== infix(_:_:)(*a1, 7);
}

BOOL closure #8 in NightingaleDPFLRunner.runPregnanciesDistribution(hyperParams:modelPath:numberOfRawPregnancies:invalidReasons:swtAvailability:existingMetrics:)(char *a1)
{
  return static PregnancyInvalidReason.== infix(_:_:)(*a1, 9);
}

BOOL closure #9 in NightingaleDPFLRunner.runPregnanciesDistribution(hyperParams:modelPath:numberOfRawPregnancies:invalidReasons:swtAvailability:existingMetrics:)(char *a1)
{
  return static PregnancyInvalidReason.== infix(_:_:)(*a1, 8);
}

uint64_t closure #10 in NightingaleDPFLRunner.runPregnanciesDistribution(hyperParams:modelPath:numberOfRawPregnancies:invalidReasons:swtAvailability:existingMetrics:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, float a10@<S0>, float a11@<S1>, uint64_t a12)
{
  uint64_t v108 = a9;
  uint64_t v118 = a1;
  uint64_t v144 = a2;
  uint64_t v137 = a3;
  uint64_t v128 = a4;
  uint64_t v129 = a5;
  uint64_t v131 = a6;
  uint64_t v132 = a7;
  uint64_t v109 = a8;
  uint64_t v115 = a12;
  float v116 = a10;
  float v117 = a11;
  uint64_t v180 = 0;
  uint64_t v178 = 0;
  uint64_t v179 = 0;
  uint64_t v176 = 0;
  uint64_t v177 = 0;
  uint64_t v174 = 0;
  uint64_t v175 = 0;
  uint64_t v173 = 0;
  uint64_t v172 = 0;
  int v171 = 0;
  int v170 = 0;
  uint64_t v166 = 0;
  uint64_t v159 = 0;
  uint64_t v158 = 0;
  uint64_t v151 = 0;
  uint64_t v135 = 0;
  uint64_t v110 = type metadata accessor for ShuffleMethod();
  uint64_t v111 = *(void *)(v110 - 8);
  uint64_t v112 = v110 - 8;
  unint64_t v113 = (*(void *)(v111 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v114 = (char *)&v61 - v113;
  uint64_t v119 = type metadata accessor for EspressoFunction();
  uint64_t v120 = *(void *)(v119 - 8);
  uint64_t v121 = v119 - 8;
  unint64_t v122 = (*(void *)(v120 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v13 = MEMORY[0x270FA5388](v118);
  uint64_t v123 = (char *)&v61 - v122;
  unint64_t v124 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v125 = (char *)&v61 - v124;
  unint64_t v126 = (v16 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v138 = (char *)&v61 - v126;
  uint64_t v180 = v17;
  uint64_t v178 = v18;
  uint64_t v179 = v19;
  uint64_t v176 = v20;
  uint64_t v177 = v21;
  uint64_t v174 = v22;
  uint64_t v175 = v23;
  uint64_t v173 = a8;
  uint64_t v172 = v24;
  int v171 = v25;
  int v170 = v26;
  uint64_t v127 = v167;
  outlined init with copy of HealthDataQuery(v17, (uint64_t)v167);
  uint64_t v142 = v168;
  uint64_t v143 = v169;
  uint64_t v136 = __swift_project_boxed_opaque_existential_1(v127, v168);
  static EspressoFunction.training.getter();
  uint64_t v134 = MEMORY[0x263F8D310];
  uint64_t v130 = _allocateUninitializedArray<A>(_:)();
  uint64_t v133 = v27;
  swift_bridgeObjectRetain();
  uint64_t v28 = v129;
  uint64_t v29 = v133;
  *uint64_t v133 = v128;
  v29[1] = v28;
  swift_bridgeObjectRetain();
  uint64_t v30 = v130;
  uint64_t v31 = v132;
  uint64_t v32 = v133;
  v133[2] = v131;
  v32[3] = v31;
  _finalizeUninitializedArray<A>(_:)();
  uint64_t v139 = v30;
  uint64_t v140 = _allocateUninitializedArray<A>(_:)();
  uint64_t v33 = HyperParams.weightNames.getter();
  uint64_t v34 = v141;
  uint64_t v145 = v33;
  dispatch thunk of EspressoTrainer.load(path:functions:inputs:outputs:weights:)();
  uint64_t v146 = v34;
  uint64_t v147 = v34;
  if (v34)
  {
    uint64_t v65 = v147;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v120 + 8))(v138, v119);
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v167);
    uint64_t v66 = v65;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v99 = *(void (**)(char *, uint64_t))(v120 + 8);
    uint64_t v100 = v120 + 8;
    v99(v138, v119);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v167);
    uint64_t v35 = HyperParams.batchSize.getter();
    static HIDPFLUtils.computeEffectiveTrainingSize(_:_:)(1, v35);
    uint64_t v103 = v36;
    uint64_t v166 = v36;
    uint64_t v101 = v163;
    outlined init with copy of HealthDataQuery(v118, (uint64_t)v163);
    uint64_t v104 = v164;
    uint64_t v105 = v165;
    uint64_t v102 = __swift_project_boxed_opaque_existential_1(v101, v164);
    float v37 = HyperParams.learningRate.getter();
    uint64_t v38 = v146;
    float v161 = v37;
    char v162 = 0;
    dispatch thunk of EspressoTrainer.finalize(batchSize:learningRate:)();
    uint64_t v106 = v38;
    uint64_t v107 = v38;
    if (v38)
    {
      uint64_t v64 = v107;
      uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v163);
      uint64_t v66 = v64;
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v163);
      uint64_t v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, [Float]));
      uint64_t v90 = _allocateUninitializedArray<A>(_:)();
      uint64_t v88 = v39;
      swift_bridgeObjectRetain();
      uint64_t v40 = v129;
      uint64_t v41 = v88;
      *uint64_t v88 = v128;
      v41[1] = v40;
      uint64_t v87 = MEMORY[0x263F8D5C8];
      uint64_t v42 = _allocateUninitializedArray<A>(_:)();
      float v43 = v116;
      float v44 = v117;
      *uint64_t v45 = (float)v115;
      v45[1] = v43;
      v45[2] = v44;
      _finalizeUninitializedArray<A>(_:)();
      v88[2] = v42;
      swift_bridgeObjectRetain();
      uint64_t v46 = v132;
      uint64_t v47 = v88;
      v88[3] = v131;
      v47[4] = v46;
      float v160 = 1.0;
      uint64_t v48 = specialized Array.init(repeating:count:)();
      uint64_t v49 = v90;
      v88[5] = v48;
      _finalizeUninitializedArray<A>(_:)();
      uint64_t v91 = v49;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
      uint64_t v92 = Dictionary.init(dictionaryLiteral:)();
      uint64_t v159 = v92;
      uint64_t v93 = v155;
      outlined init with copy of HealthDataQuery(v118, (uint64_t)v155);
      uint64_t v94 = v156;
      uint64_t v95 = v157;
      __swift_project_boxed_opaque_existential_1(v93, v156);
      static EspressoFunction.training.getter();
      uint64_t v50 = v106;
      uint64_t v51 = dispatch thunk of EspressoTrainer.extractWeights(function:)();
      uint64_t v96 = v50;
      uint64_t v97 = v51;
      uint64_t v98 = v50;
      if (v50)
      {
        uint64_t v63 = v98;
        v99(v125, v119);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v155);
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v66 = v63;
      }
      else
      {
        uint64_t v76 = v97;
        v99(v125, v119);
        uint64_t v158 = v76;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v155);
        uint64_t v77 = v152;
        outlined init with copy of HealthDataQuery(v118, (uint64_t)v152);
        uint64_t v83 = v153;
        uint64_t v84 = v154;
        __swift_project_boxed_opaque_existential_1(v77, v153);
        uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Int));
        uint64_t v78 = _allocateUninitializedArray<A>(_:)();
        uint64_t v79 = v52;
        swift_bridgeObjectRetain();
        uint64_t v53 = v129;
        uint64_t v54 = v79;
        *uint64_t v79 = v128;
        v54[1] = v53;
        v54[2] = 3;
        swift_bridgeObjectRetain();
        uint64_t v55 = v132;
        uint64_t v56 = v79;
        v79[3] = v131;
        v56[4] = v55;
        uint64_t v82 = 1;
        v56[5] = 1;
        _finalizeUninitializedArray<A>(_:)();
        uint64_t v81 = Dictionary.init(dictionaryLiteral:)();
        (*(void (**)(char *, void, uint64_t))(v111 + 104))(v114, *MEMORY[0x263F61108], v110);
        uint64_t v57 = v96;
        dispatch thunk of EspressoTrainer.train(_:featureSizes:numSamples:epochs:shuffleMethod:fullBatch:)();
        uint64_t v85 = v57;
        uint64_t v86 = v57;
        if (v57)
        {
          uint64_t v62 = v86;
          (*(void (**)(char *, uint64_t))(v111 + 8))(v114, v110);
          swift_bridgeObjectRelease();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v152);
          outlined destroy of [A]();
          uint64_t result = swift_bridgeObjectRelease();
          uint64_t v66 = v62;
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v111 + 8))(v114, v110);
          swift_bridgeObjectRelease();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v152);
          int v70 = v148;
          outlined init with copy of HealthDataQuery(v118, (uint64_t)v148);
          uint64_t v71 = v149;
          uint64_t v72 = v150;
          __swift_project_boxed_opaque_existential_1(v70, v149);
          static EspressoFunction.training.getter();
          uint64_t v58 = v85;
          uint64_t v59 = dispatch thunk of EspressoTrainer.extractWeights(function:)();
          uint64_t v73 = v58;
          uint64_t v74 = v59;
          uint64_t v75 = v58;
          if (v58)
          {
            uint64_t v61 = v75;
            v99(v123, v119);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v148);
          }
          else
          {
            uint64_t v67 = v74;
            v99(v123, v119);
            uint64_t v68 = &v151;
            uint64_t v151 = v67;
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v148);
            uint64_t v69 = &v158;
            static HIDPFLUtils.inplaceSub(_:_:)(v68);
            uint64_t *v108 = v151;
          }
          outlined destroy of [A]();
          return swift_bridgeObjectRelease();
        }
      }
    }
  }
  return result;
}

uint64_t NightingaleDPFLRunner.runDemographics(hyperParams:modelPath:pregnancies:historicalPeriods:swtAvailabilityStats:numberOfSlices:age:earliestPregrancyLMP:latestPregrancyEndDay:existingMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, Swift::OpaquePointer a4, Swift::OpaquePointer a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9, Swift::UInt32 a10, Swift::UInt32 a11, uint64_t a12)
{
  uint64_t v101 = 0;
  uint64_t v85 = 0;
  uint64_t v84 = 0;
  uint64_t v83 = 0;
  uint64_t v82 = 0;
  uint64_t v78 = 0;
  unint64_t v79 = 0;
  uint64_t v77 = 0;
  uint64_t v117 = a6;
  int v35 = a6;
  char v36 = BYTE4(a6);
  uint64_t v116 = a7;
  int v33 = a7;
  char v37 = BYTE4(a7);
  uint64_t v115 = a8;
  int v40 = a8;
  char v41 = BYTE4(a8);
  uint64_t v114 = a1;
  uint64_t v112 = a2;
  uint64_t v113 = a3;
  rawValue = a4._rawValue;
  uint64_t v110 = a5._rawValue;
  v108[0] = a6;
  v108[1] = BYTE4(a6) & 1;
  v108[2] = a7;
  char v109 = BYTE4(a7) & 1;
  float v107 = a9;
  int v105 = a8;
  char v106 = BYTE4(a8) & 1;
  Swift::UInt32 v104 = a10;
  Swift::UInt32 v103 = a11;
  uint64_t v102 = a12;
  type metadata accessor for Featurizer();
  Featurizer.__allocating_init()();
  Featurizer.cycleStats(pregnancies:periods:earliestPregrancyLMP:latestPregrancyEndDay:)(&v100, a4, a5, a10, a11);
  Swift::Float count = v100.prePregCycleStats.count;
  Swift::Float_optional mean = v100.prePregCycleStats.mean;
  Swift::Float std = v100.prePregCycleStats.std;
  Swift::Float v45 = v100.pregCycleStats.count;
  Swift::Float_optional v46 = v100.pregCycleStats.mean;
  Swift::Float v47 = v100.pregCycleStats.std;
  Swift::Float v48 = v100.postPregCycleStats.count;
  Swift::Float_optional v49 = v100.postPregCycleStats.mean;
  Swift::Float v50 = v100.postPregCycleStats.std;
  swift_release();
  Swift::Float v99 = count;
  Swift::Float value = mean.value;
  Swift::Bool is_nil = mean.is_nil;
  Swift::Float v96 = std;
  Swift::Float v95 = v45;
  Swift::Float v93 = v46.value;
  Swift::Bool v94 = v46.is_nil;
  Swift::Float v92 = v47;
  Swift::Float v91 = v48;
  Swift::Float v89 = v49.value;
  Swift::Bool v90 = v49.is_nil;
  Swift::Float v88 = v50;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  int v54 = v35;
  char v55 = v36 & 1;
  int v56 = v33;
  char v57 = v37 & 1;
  uint64_t v58 = v32;
  uint64_t v59 = a1;
  uint64_t v60 = a2;
  uint64_t v61 = a3;
  int v62 = v40;
  char v63 = v41 & 1;
  Swift::Float v64 = count;
  Swift::Float v65 = mean.value;
  Swift::Bool v66 = mean.is_nil;
  Swift::Float v67 = std;
  Swift::Float v68 = v45;
  Swift::Float v69 = v46.value;
  Swift::Bool v70 = v46.is_nil;
  Swift::Float v71 = v47;
  Swift::Float v72 = v48;
  Swift::Float v73 = v49.value;
  Swift::Bool v74 = v49.is_nil;
  Swift::Float v75 = v50;
  float v76 = a9;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ([Float], Double));
  NightingaleDPFLRunner.sendLocation<A>(location:force:work:)(11, 1, (uint64_t)v53, v12, (uint64_t)&v86);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (v52) {
    return v29;
  }
  uint64_t v26 = v87;
  uint64_t v85 = v86;
  uint64_t v84 = v87;
  NightingaleDPFLRunner.performanceMeasure.getter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Training", 8uLL, 1);
  dispatch thunk of PerformanceMeasure.finish(_:)();
  uint64_t v27 = v13;
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v83 = v27;
  NightingaleDPFLRunner.performanceMeasure.getter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PluginE2E", 9uLL, 1);
  dispatch thunk of PerformanceMeasure.finish(_:)();
  uint64_t v28 = v14;
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v82 = v28;
  Swift::Int v15 = default argument 1 of NightingaleDPFLRunner.sendLocation(_:_:)();
  NightingaleDPFLRunner.sendLocation(_:_:)(NightingaleTraining_NightingaleDReachLocation_pluginCompleted, v15);
  Array.withUnsafeBufferPointer<A>(_:)();
  uint64_t v22 = v80;
  unint64_t v23 = v81;
  uint64_t v78 = v80;
  unint64_t v79 = v81;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any));
  _allocateUninitializedArray<A>(_:)();
  int v25 = v16;
  uint64_t v17 = NightingaleDPFLRunner.keyMetricsBMIDurationS.unsafeMutableAddressor();
  outlined init with copy of String(v17, v25);
  uint64_t v24 = MEMORY[0x263F8D538];
  v25[5] = MEMORY[0x263F8D538];
  v25[2] = v26;
  uint64_t v18 = NightingaleDPFLRunner.keyMetricsTrainingDurationS.unsafeMutableAddressor();
  outlined init with copy of String(v18, v25 + 6);
  v25[11] = v24;
  v25[8] = v27;
  uint64_t v19 = NightingaleDPFLRunner.keyMetricsE2EDurationS.unsafeMutableAddressor();
  outlined init with copy of String(v19, v25 + 12);
  v25[17] = v24;
  v25[14] = v28;
  _finalizeUninitializedArray<A>(_:)();
  Dictionary.init(dictionaryLiteral:)();
  uint64_t v77 = Dictionary.merging(_:uniquingKeysWith:)();
  static HIDPFLUtils.checkMetrics(_:)();
  type metadata accessor for PFLTaskResult();
  outlined copy of Data._Representation(v22, v23);
  uint64_t v21 = PFLTaskResult.__allocating_init(json:vector:)();
  outlined consume of Data._Representation(v22, v23);
  swift_bridgeObjectRelease();
  return v21;
}

void closure #1 in NightingaleDPFLRunner.runDemographics(hyperParams:modelPath:pregnancies:historicalPeriods:swtAvailabilityStats:numberOfSlices:age:earliestPregrancyLMP:latestPregrancyEndDay:existingMetrics:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, float a10@<S0>, float a11@<S1>, float a12@<S2>, float a13@<S3>, float a14@<S4>, float a15@<S5>, float a16@<S6>, uint64_t a17, uint64_t a18)
{
  uint64_t v193 = a9;
  uint64_t v202 = a3;
  uint64_t v203 = a4;
  uint64_t v204 = a5;
  uint64_t v205 = a6;
  float v206 = a10;
  float v209 = a11;
  float v210 = a12;
  float v213 = a13;
  float v214 = a14;
  float v215 = a15;
  float v216 = a16;
  memset(v299, 0, 13);
  uint64_t v298 = 0;
  uint64_t v297 = 0;
  uint64_t v295 = 0;
  uint64_t v296 = 0;
  float v293 = 0.0;
  char v294 = 0;
  int v292 = 0;
  int v290 = 0;
  char v291 = 0;
  int v289 = 0;
  int v288 = 0;
  int v286 = 0;
  char v287 = 0;
  int v285 = 0;
  int v284 = 0;
  int v282 = 0;
  char v283 = 0;
  int v281 = 0;
  int v280 = 0;
  int v279 = 0;
  unsigned int v278 = 0;
  dispatch_group_t v277 = 0;
  int v273 = 0;
  uint64_t v272 = 0;
  uint64_t v270 = 0;
  uint64_t v271 = 0;
  uint64_t v268 = 0;
  uint64_t v269 = 0;
  uint64_t v262 = 0;
  float v253 = 0.0;
  uint64_t v245 = 0;
  uint64_t v244 = 0;
  uint64_t v237 = 0;
  v299[6] = a1;
  v299[7] = a2;
  int v227 = a1;
  int v217 = BYTE4(a1);
  unsigned int v218 = a2;
  int v201 = BYTE4(a2);
  v299[5] = a7;
  float v230 = *(float *)&a7;
  int v231 = BYTE4(a7);
  v299[4] = a8;
  int v207 = a8;
  int v208 = BYTE4(a8);
  v299[3] = a17;
  int v211 = a17;
  int v212 = BYTE4(a17);
  v299[2] = a18;
  int v228 = a18;
  int v229 = BYTE4(a18);
  uint64_t v195 = 0;
  uint64_t v196 = type metadata accessor for ShuffleMethod();
  uint64_t v197 = *(void *)(v196 - 8);
  uint64_t v198 = v196 - 8;
  unint64_t v199 = (*(void *)(v197 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v200 = (char *)&v98 - v199;
  uint64_t v18 = type metadata accessor for EspressoFunction();
  char v19 = v201;
  uint64_t v219 = v18;
  uint64_t v220 = *(void *)(v18 - 8);
  uint64_t v221 = v18 - 8;
  uint64_t v225 = *(void *)(v220 + 64);
  unint64_t v222 = (v225 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v20 = MEMORY[0x270FA5388](v218);
  uint64_t v223 = (char *)&v98 - v222;
  unint64_t v224 = (v225 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v21 = MEMORY[0x270FA5388](v20);
  uint64_t v226 = (char *)&v98 - v224;
  int v22 = MEMORY[0x270FA5388](v21);
  uint64_t v232 = (char *)&v98 - v23;
  LODWORD(v299[0]) = v227;
  BYTE4(v299[0]) = v24 & 1;
  LODWORD(v299[1]) = v22;
  BYTE4(v299[1]) = v19 & 1;
  uint64_t v298 = v25;
  uint64_t v297 = v26;
  uint64_t v295 = v27;
  uint64_t v296 = v28;
  float v293 = v230;
  char v294 = v231 & 1;
  int v292 = v29;
  int v290 = v30;
  char v291 = v31 & 1;
  int v289 = v32;
  int v288 = v33;
  int v286 = v34;
  char v287 = v35 & 1;
  int v285 = v36;
  int v284 = v37;
  int v282 = v228;
  char v283 = v229 & 1;
  int v281 = v38;
  int v280 = v39;
  if (v24 & 1) != 0 || (v192 = v227, v191 = v192, int v279 = v192, (v201))
  {
    lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
    uint64_t v104 = swift_allocError();
    *uint64_t v97 = 46;
    swift_willThrow();
    uint64_t v105 = v104;
  }
  else
  {
    unsigned int v190 = v218;
    unsigned int v180 = v218;
    unsigned int v278 = v218;
    dispatch_group_t v186 = dispatch_group_create();
    dispatch_group_t v277 = v186;
    uint64_t v182 = NightingaleDPFLRunner.performanceMeasure.getter();
    object = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("BMIQuery", 8uLL, 1)._object;
    dispatch thunk of PerformanceMeasure.start(_:)();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v183 = v274;
    outlined init with copy of HealthDataQuery(v202 + 48, (uint64_t)v274);
    uint64_t v184 = v275;
    uint64_t v185 = v276;
    __swift_project_boxed_opaque_existential_1(v183, v275);
    uint64_t v40 = v194;
    (*(void (**)(dispatch_group_t, uint64_t, uint64_t))(v185 + 56))(v186, v203, v184);
    uint64_t v187 = v40;
    int v188 = v41;
    uint64_t v189 = v40;
    if (v40)
    {
      uint64_t v103 = v189;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v274);

      uint64_t v105 = v103;
    }
    else
    {
      int v163 = v188;
      int v273 = v188;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v274);
      uint64_t v165 = NightingaleDPFLRunner.performanceMeasure.getter();
      Builtin::Word v167 = 8;
      int v168 = 1;
      uint64_t v164 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("BMIQuery", 8uLL, 1)._object;
      dispatch thunk of PerformanceMeasure.finish(_:)();
      uint64_t v166 = v42;
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v272 = v166;
      uint64_t v170 = NightingaleDPFLRunner.performanceMeasure.getter();
      uint64_t v169 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Training", v167, v168 & 1)._object;
      dispatch thunk of PerformanceMeasure.start(_:)();
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v171 = HyperParams.inputName.getter();
      uint64_t v172 = v43;
      uint64_t v270 = v171;
      uint64_t v271 = v43;
      uint64_t v173 = HyperParams.labelName.getter();
      uint64_t v174 = v44;
      uint64_t v268 = v173;
      uint64_t v269 = v44;
      uint64_t v175 = HyperParams.modelRepresentation.getter();
      uint64_t v178 = v45;
      Swift::Float_optional v46 = HyperParams.modelRepresentationEIR.unsafeMutableAddressor();
      uint64_t v176 = *(void *)v46;
      uint64_t v177 = *((void *)v46 + 1);
      swift_bridgeObjectRetain();
      int v179 = static String.== infix(_:_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v179)
      {
        uint64_t v162 = type metadata accessor for EspressoEIRTrainer();
        NightingaleDPFLRunner.performanceMeasure.getter();
        uint64_t v47 = EspressoEIRTrainer.__allocating_init(_:)();
        v233[3] = v162;
        v233[4] = MEMORY[0x263F61118];
        v233[0] = v47;
        outlined init with take of HealthDataQuery(v233, v267);
      }
      else
      {
        uint64_t v161 = type metadata accessor for EspressoMILTrainer();
        NightingaleDPFLRunner.performanceMeasure.getter();
        uint64_t v48 = EspressoMILTrainer.__allocating_init(_:)();
        v266[3] = v161;
        v266[4] = MEMORY[0x263F61120];
        v266[0] = v48;
        outlined init with take of HealthDataQuery(v266, v267);
      }
      uint64_t v149 = v263;
      outlined init with copy of HealthDataQuery((uint64_t)v267, (uint64_t)v263);
      uint64_t v156 = v264;
      uint64_t v157 = v265;
      uint64_t v153 = __swift_project_boxed_opaque_existential_1(v149, v264);
      static EspressoFunction.training.getter();
      uint64_t v152 = MEMORY[0x263F8D310];
      uint64_t v150 = _allocateUninitializedArray<A>(_:)();
      uint64_t v151 = v49;
      swift_bridgeObjectRetain();
      uint64_t v50 = v172;
      uint64_t v51 = v151;
      *uint64_t v151 = v171;
      v51[1] = v50;
      swift_bridgeObjectRetain();
      uint64_t v52 = v150;
      uint64_t v53 = v174;
      int v54 = v151;
      v151[2] = v173;
      v54[3] = v53;
      _finalizeUninitializedArray<A>(_:)();
      uint64_t v154 = v52;
      uint64_t v155 = _allocateUninitializedArray<A>(_:)();
      uint64_t v55 = HyperParams.weightNames.getter();
      uint64_t v56 = v187;
      uint64_t v158 = v55;
      dispatch thunk of EspressoTrainer.load(path:functions:inputs:outputs:weights:)();
      uint64_t v159 = v56;
      uint64_t v160 = v56;
      if (v56)
      {
        uint64_t v102 = v160;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v220 + 8))(v232, v219);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v263);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v267);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        uint64_t v105 = v102;
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v140 = *(void (**)(char *, uint64_t))(v220 + 8);
        uint64_t v141 = v220 + 8;
        v140(v232, v219);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v263);
        uint64_t v57 = HyperParams.batchSize.getter();
        static HIDPFLUtils.computeEffectiveTrainingSize(_:_:)(1, v57);
        uint64_t v144 = v58;
        uint64_t v262 = v58;
        uint64_t v142 = v259;
        outlined init with copy of HealthDataQuery((uint64_t)v267, (uint64_t)v259);
        uint64_t v145 = v260;
        uint64_t v146 = v261;
        uint64_t v143 = __swift_project_boxed_opaque_existential_1(v142, v260);
        float v59 = HyperParams.learningRate.getter();
        uint64_t v60 = v159;
        float v257 = v59;
        char v258 = 0;
        dispatch thunk of EspressoTrainer.finalize(batchSize:learningRate:)();
        uint64_t v147 = v60;
        uint64_t v148 = v60;
        if (v60)
        {
          uint64_t v101 = v148;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v259);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v267);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          uint64_t v105 = v101;
        }
        else
        {
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v259);
          float v254 = v230;
          char v255 = v231 & 1;
          swift_retain();
          if (v255) {
            float v256 = (float)HyperParams.defaultAge.getter();
          }
          else {
            float v256 = v254;
          }
          swift_release();
          float v137 = v256;
          float v253 = v256;
          uint64_t v134 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, [Float]));
          uint64_t v135 = _allocateUninitializedArray<A>(_:)();
          uint64_t v136 = v61;
          swift_bridgeObjectRetain();
          uint64_t v62 = v172;
          char v63 = v136;
          *uint64_t v136 = v171;
          v63[1] = v62;
          uint64_t v64 = _allocateUninitializedArray<A>(_:)();
          int v65 = v163;
          float v66 = v206;
          int v67 = v207;
          char v68 = v208;
          uint64_t v138 = v64;
          uint64_t v139 = v69;
          *Swift::Float v69 = v137;
          *((_DWORD *)v69 + 1) = v65;
          v69[2] = v66;
          int v251 = v67;
          char v252 = v68 & 1;
          if (v68) {
            v139[3] = -1.0;
          }
          else {
            *((_DWORD *)v139 + 3) = v251;
          }
          char v70 = v212;
          int v71 = v211;
          float v72 = v210;
          Swift::Float v73 = v139;
          v139[4] = v209;
          v73[5] = v72;
          int v249 = v71;
          char v250 = v70 & 1;
          if (v70) {
            v139[6] = -1.0;
          }
          else {
            *((_DWORD *)v139 + 6) = v249;
          }
          char v74 = v229;
          int v75 = v228;
          float v76 = v214;
          uint64_t v77 = v139;
          v139[7] = v213;
          v77[8] = v76;
          int v247 = v75;
          char v248 = v74 & 1;
          if (v74) {
            v139[9] = -1.0;
          }
          else {
            *((_DWORD *)v139 + 9) = v247;
          }
          uint64_t v78 = v138;
          float v79 = v216;
          uint64_t v80 = v139;
          unsigned int v81 = v180;
          int v82 = v191;
          v139[10] = v215;
          *((_DWORD *)v80 + 11) = v82;
          *((_DWORD *)v80 + 12) = v81;
          v80[13] = v79;
          _finalizeUninitializedArray<A>(_:)();
          v136[2] = v78;
          swift_bridgeObjectRetain();
          uint64_t v83 = v174;
          uint64_t v84 = v136;
          v136[3] = v173;
          v84[4] = v83;
          float v246 = 1.0;
          uint64_t v85 = specialized Array.init(repeating:count:)();
          uint64_t v86 = v135;
          v136[5] = v85;
          _finalizeUninitializedArray<A>(_:)();
          uint64_t v126 = v86;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
          uint64_t v127 = Dictionary.init(dictionaryLiteral:)();
          uint64_t v245 = v127;
          uint64_t v128 = v241;
          outlined init with copy of HealthDataQuery((uint64_t)v267, (uint64_t)v241);
          uint64_t v129 = v242;
          uint64_t v130 = v243;
          __swift_project_boxed_opaque_existential_1(v128, v242);
          static EspressoFunction.training.getter();
          uint64_t v87 = v147;
          uint64_t v88 = dispatch thunk of EspressoTrainer.extractWeights(function:)();
          uint64_t v131 = v87;
          uint64_t v132 = v88;
          uint64_t v133 = v87;
          if (v87)
          {
            uint64_t v100 = v133;
            v140(v226, v219);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v241);
            swift_bridgeObjectRelease();
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v267);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            uint64_t v105 = v100;
          }
          else
          {
            uint64_t v115 = v132;
            v140(v226, v219);
            uint64_t v244 = v115;
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v241);
            uint64_t v116 = v238;
            outlined init with copy of HealthDataQuery((uint64_t)v267, (uint64_t)v238);
            uint64_t v122 = v239;
            uint64_t v123 = v240;
            __swift_project_boxed_opaque_existential_1(v116, v239);
            uint64_t v119 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Int));
            uint64_t v117 = _allocateUninitializedArray<A>(_:)();
            uint64_t v118 = v89;
            swift_bridgeObjectRetain();
            uint64_t v90 = v172;
            Swift::Float v91 = v118;
            *uint64_t v118 = v171;
            v91[1] = v90;
            v91[2] = 14;
            swift_bridgeObjectRetain();
            uint64_t v92 = v174;
            Swift::Float v93 = v118;
            v118[3] = v173;
            v93[4] = v92;
            uint64_t v121 = 1;
            v93[5] = 1;
            _finalizeUninitializedArray<A>(_:)();
            uint64_t v120 = Dictionary.init(dictionaryLiteral:)();
            (*(void (**)(char *, void, uint64_t))(v197 + 104))(v200, *MEMORY[0x263F61108], v196);
            uint64_t v94 = v131;
            dispatch thunk of EspressoTrainer.train(_:featureSizes:numSamples:epochs:shuffleMethod:fullBatch:)();
            uint64_t v124 = v94;
            uint64_t v125 = v94;
            if (v94)
            {
              uint64_t v99 = v125;
              (*(void (**)(char *, uint64_t))(v197 + 8))(v200, v196);
              swift_bridgeObjectRelease();
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v238);
              outlined destroy of [A]();
              swift_bridgeObjectRelease();
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v267);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              uint64_t v105 = v99;
            }
            else
            {
              (*(void (**)(char *, uint64_t))(v197 + 8))(v200, v196);
              swift_bridgeObjectRelease();
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v238);
              char v109 = v234;
              outlined init with copy of HealthDataQuery((uint64_t)v267, (uint64_t)v234);
              uint64_t v110 = v235;
              uint64_t v111 = v236;
              __swift_project_boxed_opaque_existential_1(v109, v235);
              static EspressoFunction.training.getter();
              uint64_t v95 = v124;
              uint64_t v96 = dispatch thunk of EspressoTrainer.extractWeights(function:)();
              uint64_t v112 = v95;
              uint64_t v113 = v96;
              uint64_t v114 = v95;
              if (v95)
              {
                uint64_t v98 = v114;
                v140(v223, v219);
                __swift_destroy_boxed_opaque_existential_1((uint64_t)v234);
              }
              else
              {
                uint64_t v106 = v113;
                v140(v223, v219);
                float v107 = &v237;
                uint64_t v237 = v106;
                __swift_destroy_boxed_opaque_existential_1((uint64_t)v234);
                uint64_t v108 = &v244;
                static HIDPFLUtils.inplaceSub(_:_:)(v107);
                outlined init with copy of [Float](v107, v193);
                v193[1] = v166;
                outlined destroy of [A]();
              }
              outlined destroy of [A]();
              swift_bridgeObjectRelease();
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v267);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
          }
        }
      }
    }
  }
}

uint64_t NightingaleDPFLRunner.runEvals(evalModels:task:hyperParams:historicalPeriods:pregnancies:today:features:existingMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, Swift::OpaquePointer a7, Swift::OpaquePointer a8, Swift::OpaquePointer a9, Swift::OpaquePointer a10, Swift::OpaquePointer a11, Swift::OpaquePointer a12, Swift::OpaquePointer a13, Swift::OpaquePointer a14, Swift::OpaquePointer a15, Swift::OpaquePointer a16, Swift::OpaquePointer a17, Swift::OpaquePointer a18, Swift::OpaquePointer a19, Swift::OpaquePointer a20,Swift::OpaquePointer a21,Swift::OpaquePointer a22,Swift::OpaquePointer a23,Swift::OpaquePointer a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t v68 = *v28;
  uint64_t v114 = 0;
  uint64_t v113 = 0;
  uint64_t v112 = 0;
  v111._rawValue = 0;
  uint64_t v110 = 0;
  uint64_t v109 = 0;
  uint64_t v122 = a1;
  uint64_t v121 = a2;
  uint64_t v120 = a3;
  uint64_t v119 = a4;
  uint64_t v118 = a5;
  int v117 = a6;
  rawValue = a7._rawValue;
  uint64_t v124 = a8._rawValue;
  uint64_t v125 = a9._rawValue;
  uint64_t v126 = a10._rawValue;
  uint64_t v127 = a11._rawValue;
  uint64_t v128 = a12._rawValue;
  uint64_t v129 = a13._rawValue;
  uint64_t v130 = a14._rawValue;
  uint64_t v131 = a15._rawValue;
  uint64_t v132 = a16._rawValue;
  uint64_t v133 = a17._rawValue;
  uint64_t v134 = a18._rawValue;
  uint64_t v135 = a19._rawValue;
  uint64_t v136 = a20._rawValue;
  float v137 = a21._rawValue;
  uint64_t v138 = a22._rawValue;
  uint64_t v139 = a23._rawValue;
  uint64_t v140 = a24._rawValue;
  uint64_t v141 = a25;
  uint64_t v142 = a26;
  uint64_t v143 = a27;
  uint64_t v116 = a28;
  uint64_t v115 = v28;
  swift_bridgeObjectRetain();
  uint64_t v114 = a28;
  NightingaleDPFLRunner.performanceMeasure.getter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Training", 8uLL, 1);
  dispatch thunk of PerformanceMeasure.start(_:)();
  swift_bridgeObjectRelease();
  swift_release();
  outlined retain of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])((uint64_t)&rawValue);
  uint64_t v64 = MEMORY[0x25A2C0820](a26);
  uint64_t v113 = v64;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v30 = HyperParams.batchSize.getter();
  static HIDPFLUtils.computeEffectiveTrainingSize(_:_:)(v64, v30);
  uint64_t v66 = v31;
  uint64_t v112 = v31;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, [Float]));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
  v111._rawValue = (void *)Dictionary.init(dictionaryLiteral:)();
  Swift::Bool v44 = HyperParams.isDaySHRRequired()();
  long long name = *HyperParams.nightingaleDInputDaySHR10.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  transferFeatureToMLInputs(required:feature:stats:name:mlInputs:)(v44, a7, a8, (Swift::String)name, &v111);
  swift_bridgeObjectRelease();
  Swift::Bool v48 = HyperParams.isNightSHRRequired()();
  long long v49 = *HyperParams.nightingaleDInputNightSHR10.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  transferFeatureToMLInputs(required:feature:stats:name:mlInputs:)(v48, a9, a10, (Swift::String)v49, &v111);
  swift_bridgeObjectRelease();
  Swift::Bool v50 = HyperParams.isPSMRequired()();
  long long v51 = *HyperParams.nightingaleDInputPeriodStartMean.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  transferFeatureToMLInputs(required:feature:stats:name:mlInputs:)(v50, a11, a12, (Swift::String)v51, &v111);
  swift_bridgeObjectRelease();
  Swift::Bool v52 = HyperParams.isPSSRequired()();
  long long v53 = *HyperParams.nightingaleDInputPeriodStartStd.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  transferFeatureToMLInputs(required:feature:stats:name:mlInputs:)(v52, a13, a14, (Swift::String)v53, &v111);
  swift_bridgeObjectRelease();
  Swift::Bool v54 = HyperParams.isSWTRequired()();
  long long v55 = *HyperParams.nightingaleDInputAppleSleepingWristTemperature.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  transferFeatureToMLInputs(required:feature:stats:name:mlInputs:)(v54, a17, a18, (Swift::String)v55, &v111);
  swift_bridgeObjectRelease();
  Swift::Bool PeriodStart = HyperParams.isDaysSinceLastPeriodStartRequired()();
  long long v57 = *HyperParams.nightingaleDInputDaysSinceLMS.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  transferFeatureToMLInputs(required:feature:stats:name:mlInputs:)(PeriodStart, a15, a16, (Swift::String)v57, &v111);
  swift_bridgeObjectRelease();
  Swift::Bool v58 = HyperParams.isHRVRequired()();
  long long v59 = *HyperParams.nightingaleDInputHRV.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  transferFeatureToMLInputs(required:feature:stats:name:mlInputs:)(v58, a19, a20, (Swift::String)v59, &v111);
  swift_bridgeObjectRelease();
  Swift::Bool v60 = HyperParams.isRespiratoryRateRequired()();
  long long v61 = *HyperParams.nightingaleDInputRespiratoryRate.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  transferFeatureToMLInputs(required:feature:stats:name:mlInputs:)(v60, a21, a22, (Swift::String)v61, &v111);
  swift_bridgeObjectRelease();
  Swift::Bool v62 = HyperParams.isSpO2Required()();
  long long v63 = *HyperParams.nightingaleDInputSpO2.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  transferFeatureToMLInputs(required:feature:stats:name:mlInputs:)(v62, a23, a24, (Swift::String)v63, &v111);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_retain();
  outlined retain of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])((uint64_t)&rawValue);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v76 = a1;
  uint64_t v77 = a3;
  uint64_t v78 = &v111;
  float v79 = rawValue;
  uint64_t v80 = v124;
  unsigned int v81 = v125;
  int v82 = v126;
  uint64_t v83 = v127;
  uint64_t v84 = v128;
  uint64_t v85 = v129;
  uint64_t v86 = v130;
  uint64_t v87 = v131;
  uint64_t v88 = v132;
  Swift::Float v89 = v133;
  uint64_t v90 = v134;
  Swift::Float v91 = v135;
  uint64_t v92 = v136;
  Swift::Float v93 = v137;
  uint64_t v94 = v138;
  uint64_t v95 = v139;
  uint64_t v96 = v140;
  uint64_t v97 = v141;
  uint64_t v98 = v142;
  uint64_t v99 = v143;
  uint64_t v100 = v64;
  uint64_t v101 = a2;
  uint64_t v102 = v70;
  uint64_t v103 = v66;
  uint64_t v104 = a4;
  uint64_t v105 = a5;
  int v106 = a6;
  float v107 = &v114;
  uint64_t v108 = v68;
  NightingaleDPFLRunner.sendLocation<A>(location:force:work:)(11, 1, (uint64_t)v75, MEMORY[0x263F8EE60] + 8, v74);
  swift_bridgeObjectRelease();
  swift_release();
  outlined release of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])((uint64_t)&rawValue);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v29)
  {
    outlined destroy of [A]();
    outlined destroy of [A]();
    return v74;
  }
  else
  {
    NightingaleDPFLRunner.performanceMeasure.getter();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Training", 8uLL, 1);
    dispatch thunk of PerformanceMeasure.finish(_:)();
    uint64_t v40 = v32;
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v110 = v40;
    NightingaleDPFLRunner.performanceMeasure.getter();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PluginE2E", 9uLL, 1);
    dispatch thunk of PerformanceMeasure.finish(_:)();
    uint64_t v43 = v33;
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v109 = v43;
    Swift::Int v34 = default argument 1 of NightingaleDPFLRunner.sendLocation(_:_:)();
    NightingaleDPFLRunner.sendLocation(_:_:)(NightingaleTraining_NightingaleDReachLocation_pluginCompleted, v34);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any));
    _allocateUninitializedArray<A>(_:)();
    uint64_t v42 = v35;
    int v36 = NightingaleDPFLRunner.keyMetricsTrainingDurationS.unsafeMutableAddressor();
    outlined init with copy of String(v36, v42);
    uint64_t v41 = MEMORY[0x263F8D538];
    v42[5] = MEMORY[0x263F8D538];
    v42[2] = v40;
    int v37 = NightingaleDPFLRunner.keyMetricsE2EDurationS.unsafeMutableAddressor();
    outlined init with copy of String(v37, v42 + 6);
    v42[11] = v41;
    v42[8] = v43;
    _finalizeUninitializedArray<A>(_:)();
    Dictionary.init(dictionaryLiteral:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    Dictionary.merge(_:uniquingKeysWith:)();
    swift_bridgeObjectRetain();
    static HIDPFLUtils.checkMetrics(_:)();
    swift_bridgeObjectRelease();
    type metadata accessor for PFLTaskResult();
    swift_bridgeObjectRetain();
    uint64_t v39 = PFLTaskResult.__allocating_init(json:vector:)();
    outlined destroy of [A]();
    outlined destroy of [A]();
    return v39;
  }
}

void *closure #1 in NightingaleDPFLRunner.runEvals(evalModels:task:hyperParams:historicalPeriods:pregnancies:today:features:existingMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, uint64_t a12)
{
  uint64_t v596 = MEMORY[0x270FA5388](a1);
  uint64_t v588 = v13;
  int v582 = v14;
  int v581 = v15;
  uint64_t v583 = v16;
  uint64_t v584 = v17;
  uint64_t v585 = v18;
  uint64_t v586 = v19;
  uint64_t v592 = a9;
  uint64_t v593 = a10;
  int v594 = a11;
  uint64_t v587 = a12;
  uint64_t v600 = v12;
  uint64_t v580 = 0;
  int v576 = partial apply for closure #2 in NightingaleDPFLRunner.runTraining(modelPath:hyperParams:historicalPeriods:pregnancies:today:features:existingMetrics:);
  uint64_t v577 = closure #1 in NightingaleDPFLRunner.runTraining(modelPath:hyperParams:historicalPeriods:pregnancies:today:features:existingMetrics:);
  uint64_t v578 = closure #36 in NightingaleDPFLRunner.run(task:useCase:context:);
  uint64_t v727 = 0;
  uint64_t v726 = 0;
  uint64_t v725 = 0;
  uint64_t v724 = 0;
  uint64_t v723 = 0;
  uint64_t v722 = 0;
  uint64_t v721 = 0;
  uint64_t v720 = 0;
  uint64_t v719 = 0;
  int v718 = 0;
  uint64_t v717 = 0;
  uint64_t v597 = v716;
  v716[0] = 0;
  v716[1] = 0;
  uint64_t v711 = 0;
  uint64_t v712 = 0;
  uint64_t v710 = 0;
  uint64_t v709 = 0;
  uint64_t v707 = 0;
  uint64_t v708 = 0;
  uint64_t v705 = 0;
  uint64_t v706 = 0;
  uint64_t v703 = 0;
  uint64_t v704 = 0;
  uint64_t v702 = 0;
  uint64_t v700 = 0;
  uint64_t v701 = 0;
  uint64_t v697 = 0;
  Swift::String_optional v696 = (Swift::String_optional)0;
  uint64_t v690 = 0;
  float v681 = 0.0;
  uint64_t v680 = 0;
  uint64_t v676 = 0;
  uint64_t v674 = 0;
  uint64_t v675 = 0;
  int __c = 0;
  memset(v670, 0, sizeof(v670));
  memset(v663, 0, sizeof(v663));
  uint64_t v613 = 0;
  float v610 = 0.0;
  uint64_t v607 = 0;
  uint64_t v20 = v581[1];
  uint64_t v21 = v581[2];
  uint64_t v22 = v581[3];
  uint64_t v23 = v581[4];
  uint64_t v24 = v581[5];
  uint64_t v25 = v581[6];
  uint64_t v26 = v581[7];
  uint64_t v27 = v581[8];
  uint64_t v28 = v581[9];
  uint64_t v29 = v581[10];
  uint64_t v30 = v581[11];
  uint64_t v31 = v581[12];
  uint64_t v32 = v581[13];
  uint64_t v33 = v581[14];
  uint64_t v34 = v581[15];
  uint64_t v35 = v581[16];
  uint64_t v36 = v581[17];
  uint64_t v37 = v581[18];
  uint64_t v38 = v581[19];
  uint64_t v39 = v581[20];
  uint64_t v728 = *v581;
  uint64_t v729 = v20;
  uint64_t v730 = v21;
  uint64_t v731 = v22;
  uint64_t v732 = v23;
  uint64_t v733 = v24;
  uint64_t v734 = v25;
  uint64_t v735 = v26;
  uint64_t v736 = v27;
  uint64_t v737 = v28;
  uint64_t v738 = v29;
  uint64_t v739 = v30;
  uint64_t v740 = v31;
  uint64_t v741 = v32;
  uint64_t v742 = v33;
  uint64_t v743 = v34;
  uint64_t v744 = v35;
  uint64_t v745 = v36;
  uint64_t v746 = v37;
  uint64_t v747 = v38;
  uint64_t v748 = v39;
  uint64_t v589 = type metadata accessor for EspressoFunction();
  uint64_t v590 = *(void *)(v589 - 8);
  uint64_t v591 = v589 - 8;
  uint64_t v40 = MEMORY[0x270FA5388](v596);
  uint64_t v595 = (char *)&v253 - v41;
  uint64_t v727 = v40;
  uint64_t v726 = v42;
  uint64_t v725 = v43;
  uint64_t v724 = v44;
  uint64_t v723 = v45;
  uint64_t v722 = v46;
  uint64_t v721 = v47;
  uint64_t v720 = a9;
  uint64_t v719 = a10;
  int v718 = a11;
  uint64_t v717 = v48;
  swift_bridgeObjectRetain();
  uint64_t v715 = v596;
  uint64_t v598 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  unint64_t v599 = lazy protocol witness table accessor for type [String] and conformance [A]();
  Collection<>.makeIterator()();
  for (uint64_t i = v600; ; uint64_t i = v423)
  {
    uint64_t v573 = i;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[String]>);
    IndexingIterator.next()();
    uint64_t v574 = v713;
    uint64_t v575 = v714;
    if (!v714)
    {
      uint64_t result = v716;
      outlined destroy of [A]();
      return result;
    }
    uint64_t v571 = v574;
    uint64_t v572 = v575;
    uint64_t v525 = v575;
    uint64_t v526 = v574;
    uint64_t v711 = v574;
    uint64_t v712 = v575;
    uint64_t v527 = HyperParams.recipeForModel(model:)(v574, v575);
    uint64_t v710 = v527;
    type metadata accessor for HyperParams();
    swift_bridgeObjectRetain();
    uint64_t v566 = MEMORY[0x263F8D310];
    uint64_t v567 = MEMORY[0x263F8D320];
    uint64_t v50 = _dictionaryUpCast<A, B, C, D>(_:)();
    uint64_t v51 = HyperParams.__allocating_init(recipe:)(v50);
    uint64_t v532 = v51;
    swift_bridgeObjectRelease();
    uint64_t v709 = v51;
    uint64_t v537 = HyperParams.labelName.getter();
    uint64_t v536 = v52;
    uint64_t v707 = v537;
    uint64_t v708 = v52;
    uint64_t v528 = HyperParams.lossName.getter();
    uint64_t v529 = v53;
    uint64_t v705 = v528;
    uint64_t v706 = v53;
    uint64_t v530 = HyperParams.outputName.getter();
    uint64_t v531 = v54;
    uint64_t v703 = v530;
    uint64_t v704 = v54;
    uint64_t v533 = HyperParams.weightNames.getter();
    uint64_t v702 = v533;
    uint64_t v534 = HyperParams.modelRepresentation.getter();
    uint64_t v535 = v55;
    uint64_t v700 = v534;
    uint64_t v701 = v55;
    swift_bridgeObjectRetain();
    outlined retain of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])((uint64_t)&v728);
    uint64_t v561 = v728;
    uint64_t v560 = v729;
    uint64_t v559 = v730;
    uint64_t v558 = v731;
    uint64_t v557 = v732;
    uint64_t v556 = v733;
    uint64_t v555 = v734;
    uint64_t v554 = v735;
    uint64_t v553 = v736;
    uint64_t v552 = v737;
    uint64_t v551 = v738;
    uint64_t v550 = v739;
    uint64_t v549 = v740;
    uint64_t v548 = v741;
    uint64_t v547 = v742;
    uint64_t v546 = v743;
    uint64_t v545 = v744;
    uint64_t v544 = v745;
    uint64_t v543 = v746;
    uint64_t v542 = v748;
    uint64_t v539 = &v699;
    uint64_t v699 = v747;
    v538 = v698;
    v698[0] = v537;
    v698[1] = v536;
    uint64_t v540 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : [Float]]);
    Dictionary.subscript.setter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v565 = *v582;
    swift_bridgeObjectRetain();
    uint64_t v562 = &v253;
    uint64_t v563 = 32;
    MEMORY[0x270FA5388](&v253);
    uint64_t v564 = (char *)&v253 - v563;
    *((void *)v564 + 2) = v56;
    uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
    uint64_t v58 = v573;
    uint64_t v568 = v57;
    uint64_t v59 = Dictionary.mapValues<A>(_:)();
    uint64_t v569 = v58;
    uint64_t v570 = v59;
    if (v58)
    {
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      uint64_t v258 = v503;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v590 + 8))(v595, v589);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v687);
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v695);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = v716;
      outlined destroy of [A]();
      uint64_t v520 = v258;
      return result;
    }
    uint64_t v522 = v570;
    swift_bridgeObjectRelease();
    uint64_t v697 = v522;
    v60._uint64_t countAndFlagsBits = HyperParams.modelPath.getter();
    object = v60._object;
    Swift::String_optional v524 = PFLTask.evalModelPath(path:)(v60);
    swift_bridgeObjectRelease();
    if (!v524.value._object)
    {
      lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
      uint64_t v519 = swift_allocError();
      *long long v61 = 9;
      swift_willThrow();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined destroy of [A]();
      uint64_t result = (void *)v519;
      uint64_t v520 = v519;
      return result;
    }
    Swift::String_optional v521 = v524;
    uint64_t v514 = v524.value._object;
    uint64_t countAndFlagsBits = v524.value._countAndFlagsBits;
    Swift::String_optional v696 = v524;
    Swift::Bool v62 = HyperParams.modelRepresentationEIR.unsafeMutableAddressor();
    uint64_t v516 = *(void *)v62;
    uint64_t v517 = *((void *)v62 + 1);
    swift_bridgeObjectRetain();
    int v518 = static String.== infix(_:_:)();
    swift_bridgeObjectRelease();
    if (v518)
    {
      uint64_t v513 = type metadata accessor for EspressoEIRTrainer();
      NightingaleDPFLRunner.performanceMeasure.getter();
      uint64_t v63 = EspressoEIRTrainer.__allocating_init(_:)();
      v602[3] = v513;
      v602[4] = MEMORY[0x263F61118];
      v602[0] = v63;
      outlined init with take of HealthDataQuery(v602, v695);
    }
    else
    {
      uint64_t v512 = type metadata accessor for EspressoMILTrainer();
      NightingaleDPFLRunner.performanceMeasure.getter();
      uint64_t v64 = EspressoMILTrainer.__allocating_init(_:)();
      v694[3] = v512;
      v694[4] = MEMORY[0x263F61120];
      v694[0] = v64;
      outlined init with take of HealthDataQuery(v694, v695);
    }
    v505 = &v693;
    uint64_t v506 = 32;
    uint64_t v509 = 0;
    swift_beginAccess();
    uint64_t v504 = *(void *)(v588 + 24);
    swift_bridgeObjectRetain();
    swift_endAccess();
    v507 = &v692;
    swift_beginAccess();
    uint64_t v508 = *(void *)(v588 + 24);
    swift_bridgeObjectRetain();
    swift_endAccess();
    uint64_t v65 = v569;
    uint64_t v691 = v508;
    uint64_t v66 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))v577, v509, v598, MEMORY[0x263F8D310], MEMORY[0x263F8E628], v599, MEMORY[0x263F8E658], v541);
    uint64_t v510 = v65;
    uint64_t v511 = v66;
    if (v65) {
      goto LABEL_36;
    }
    uint64_t v489 = v511;
    outlined destroy of [A]();
    uint64_t v497 = MEMORY[0x263F8D310];
    uint64_t v493 = static Array.+ infix(_:_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v490 = _allocateUninitializedArray<A>(_:)();
    uint64_t v491 = v67;
    swift_bridgeObjectRetain();
    uint64_t v68 = v490;
    uint64_t v69 = v536;
    uint64_t v70 = v491;
    *uint64_t v491 = v537;
    v70[1] = v69;
    _finalizeUninitializedArray<A>(_:)();
    uint64_t v492 = v68;
    uint64_t v498 = static Array.+ infix(_:_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v690 = v498;
    v494 = v687;
    outlined init with copy of HealthDataQuery((uint64_t)v695, (uint64_t)v687);
    uint64_t v499 = v688;
    uint64_t v500 = v689;
    __swift_project_boxed_opaque_existential_1(v494, v688);
    static EspressoFunction.evaluation.getter();
    uint64_t v495 = _allocateUninitializedArray<A>(_:)();
    v496 = v71;
    swift_bridgeObjectRetain();
    uint64_t v72 = v529;
    Swift::Float v73 = v496;
    uint64_t *v496 = v528;
    v73[1] = v72;
    swift_bridgeObjectRetain();
    uint64_t v74 = v495;
    uint64_t v75 = v531;
    uint64_t v76 = v496;
    v496[2] = v530;
    v76[3] = v75;
    _finalizeUninitializedArray<A>(_:)();
    uint64_t v77 = v510;
    uint64_t v501 = v74;
    dispatch thunk of EspressoTrainer.load(path:functions:inputs:outputs:weights:)();
    uint64_t v502 = v77;
    uint64_t v503 = v77;
    if (v77) {
      goto LABEL_37;
    }
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v590 + 8))(v595, v589);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v687);
    Swift::OpaquePointer v484 = v684;
    outlined init with copy of HealthDataQuery((uint64_t)v695, (uint64_t)v684);
    uint64_t v485 = v685;
    uint64_t v486 = v686;
    __swift_project_boxed_opaque_existential_1(v484, v685);
    uint64_t v78 = v502;
    int v682 = 0;
    char v683 = 1;
    dispatch thunk of EspressoTrainer.finalize(batchSize:learningRate:)();
    uint64_t v487 = v78;
    uint64_t v488 = v78;
    if (v78)
    {
      uint64_t v257 = v488;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v684);
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v695);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = v716;
      outlined destroy of [A]();
      uint64_t v520 = v257;
      return result;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v684);
    float v681 = 0.0;
    uint64_t v680 = specialized Array.init()();
    Swift::OpaquePointer v477 = v677;
    outlined init with copy of HealthDataQuery((uint64_t)v695, (uint64_t)v677);
    uint64_t v479 = v678;
    uint64_t v480 = v679;
    __swift_project_boxed_opaque_existential_1(v477, v678);
    uint64_t v79 = v487;
    uint64_t v478 = *v582;
    swift_bridgeObjectRetain();
    uint64_t v80 = dispatch thunk of EspressoTrainer.eval(_:featureSizes:numSamples:)();
    uint64_t v481 = v79;
    uint64_t v482 = v80;
    uint64_t v483 = v79;
    if (v79)
    {
      uint64_t v256 = v483;
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v677);
      outlined destroy of [A]();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v695);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = v716;
      outlined destroy of [A]();
      uint64_t v520 = v256;
      return result;
    }
    uint64_t v474 = v482;
    swift_bridgeObjectRelease();
    uint64_t v676 = v474;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v677);
    swift_bridgeObjectRetain();
    uint64_t v673 = v474;
    uint64_t v475 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[String : [Float]]]);
    lazy protocol witness table accessor for type [[String : [Float]]] and conformance [A]();
    Collection<>.makeIterator()();
    for (uint64_t j = v481; ; uint64_t j = v472)
    {
      uint64_t v472 = j;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[[String : [Float]]]>);
      IndexingIterator.next()();
      uint64_t v473 = v672;
      if (!v672) {
        break;
      }
      uint64_t v471 = v473;
      uint64_t v468 = v473;
      uint64_t v613 = v473;
      swift_bridgeObjectRetain();
      Swift::OpaquePointer v469 = v611;
      v611[0] = v528;
      v611[1] = v529;
      MEMORY[0x25A2C04B0](&v612);
      outlined destroy of DefaultStringInterpolation();
      uint64_t v470 = v612;
      if (v612)
      {
        uint64_t v467 = v470;
        uint64_t v462 = v470;
        swift_bridgeObjectRetain();
        uint64_t v461 = &v603;
        uint64_t v603 = v462;
        lazy protocol witness table accessor for type [Float] and conformance [A]();
        Collection.first.getter();
        outlined destroy of [A]();
        float v464 = v604;
        int v463 = v605;
        swift_bridgeObjectRelease();
        float v465 = v464;
        int v466 = v463;
      }
      else
      {
        float v465 = 0.0;
        int v466 = 1;
      }
      float v460 = v465;
      if (v466)
      {
        lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
        uint64_t v458 = swift_allocError();
        *unsigned int v81 = 10;
        swift_willThrow();
        swift_bridgeObjectRelease();
        outlined destroy of [A]();
        swift_bridgeObjectRelease();
        outlined destroy of [A]();
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v695);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = v716;
        outlined destroy of [A]();
        uint64_t v520 = v458;
        return result;
      }
      float v459 = v460;
      float v610 = v460;
      float v681 = v681 + v460;
      swift_bridgeObjectRetain();
      uint64_t v456 = v608;
      v608[0] = v530;
      v608[1] = v531;
      MEMORY[0x25A2C04B0](&v609);
      outlined destroy of DefaultStringInterpolation();
      uint64_t v457 = v609;
      if (!v609)
      {
        lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
        uint64_t v454 = swift_allocError();
        *int v82 = 26;
        swift_willThrow();
        swift_bridgeObjectRelease();
        outlined destroy of [A]();
        swift_bridgeObjectRelease();
        outlined destroy of [A]();
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v695);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = v716;
        outlined destroy of [A]();
        uint64_t v520 = v454;
        return result;
      }
      uint64_t v455 = v457;
      uint64_t v453 = v457;
      uint64_t v607 = v457;
      swift_bridgeObjectRetain();
      uint64_t v452 = &v606;
      uint64_t v606 = v453;
      lazy protocol witness table accessor for type [Float] and conformance [A]();
      Array.append<A>(contentsOf:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    outlined destroy of [A]();
    if (MEMORY[0x25A2C0810](v474, v540) > 0)
    {
      uint64_t v83 = MEMORY[0x25A2C0810](v474, v540);
      float v681 = v681 / (float)v83;
    }
    uint64_t v84 = v472;
    uint64_t v441 = v680;
    swift_bridgeObjectRetain();
    static NightingaleDMetricsProcessor.generateCycleMetrics(hyperParams:outputs:labels:historicalPeriods:sliceEndDays:pregnancies:today:)(v588, v441, v747, v592, v746, v593, v594, v671);
    uint64_t v442 = v84;
    uint64_t v443 = v671[0];
    uint64_t v444 = v671[1];
    uint64_t v445 = v671[2];
    uint64_t v446 = v671[3];
    uint64_t v447 = v671[4];
    uint64_t v448 = v671[5];
    uint64_t v449 = v671[6];
    uint64_t v450 = v671[7];
    uint64_t v451 = v84;
    if (v84)
    {
      uint64_t v255 = v451;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined destroy of [A]();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v695);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = v716;
      outlined destroy of [A]();
      uint64_t v520 = v255;
      return result;
    }
    uint64_t v431 = v450;
    uint64_t v430 = v449;
    uint64_t v429 = v448;
    uint64_t v428 = v447;
    uint64_t v427 = v446;
    uint64_t v426 = v445;
    uint64_t v425 = v444;
    uint64_t v424 = v443;
    swift_bridgeObjectRelease();
    uint64_t v85 = v442;
    v670[0] = v424;
    v670[1] = v425;
    v670[2] = v426;
    v670[3] = v427;
    v670[4] = v428;
    v670[5] = v429;
    v670[6] = v430;
    v670[7] = v431;
    uint64_t v432 = v680;
    swift_bridgeObjectRetain();
    static NightingaleDMetricsProcessor.generateSliceMetrics(hyperParams:outputs:labels:)(v432, v747, (uint64_t)&v664);
    uint64_t v433 = v85;
    uint64_t v434 = v664;
    int v435 = v665;
    uint64_t v436 = v666;
    uint64_t v437 = v667;
    uint64_t v438 = v668;
    uint64_t v439 = v669;
    uint64_t v440 = v85;
    if (v85)
    {
      uint64_t v254 = v440;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined destroy of [A]();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v695);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = v716;
      outlined destroy of [A]();
      uint64_t v520 = v254;
      return result;
    }
    uint64_t v415 = v439;
    uint64_t v416 = v438;
    uint64_t v417 = v437;
    uint64_t v418 = v436;
    int v366 = v435;
    uint64_t v414 = v434;
    swift_bridgeObjectRelease();
    v663[0] = v414;
    LODWORD(v663[1]) = v366;
    v663[2] = v418;
    v663[3] = v417;
    v663[4] = v416;
    v663[5] = v415;
    uint64_t v413 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any));
    uint64_t v411 = _allocateUninitializedArray<A>(_:)();
    uint64_t v412 = v86;
    Builtin::Word v397 = 1;
    uint64_t v394 = 2;
    uint64_t v87 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    int v281 = &v661;
    uint64_t v661 = v87;
    uint64_t v662 = v88;
    id v406 = "";
    Builtin::Word v404 = 0;
    int v405 = 1;
    Swift::String v89 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    uint64_t v275 = v89._object;
    DefaultStringInterpolation.appendLiteral(_:)(v89);
    swift_bridgeObjectRelease();
    v660[2] = v526;
    v660[3] = v525;
    uint64_t v420 = MEMORY[0x263F8D310];
    uint64_t v401 = MEMORY[0x263F8D378];
    uint64_t v402 = MEMORY[0x263F8D370];
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    uint64_t v396 = "_";
    Swift::String v90 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("_", v397, v405 & 1);
    uint64_t v276 = v90._object;
    DefaultStringInterpolation.appendLiteral(_:)(v90);
    swift_bridgeObjectRelease();
    Swift::Float v91 = NightingaleDPFLRunner.keyMetricsCycleTP.unsafeMutableAddressor();
    uint64_t v277 = *(void *)v91;
    uint64_t v278 = *((void *)v91 + 1);
    swift_bridgeObjectRetain();
    int v279 = v660;
    v660[0] = v277;
    v660[1] = v278;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of DefaultStringInterpolation();
    Swift::String v92 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v406, v404, v405 & 1);
    int v280 = v92._object;
    DefaultStringInterpolation.appendLiteral(_:)(v92);
    swift_bridgeObjectRelease();
    uint64_t v283 = v661;
    uint64_t v282 = v662;
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    uint64_t v93 = String.init(stringInterpolation:)();
    uint64_t v94 = v412;
    *uint64_t v412 = v93;
    v94[1] = v95;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v96 = v424;
    uint64_t v97 = v412;
    uint64_t v329 = MEMORY[0x263F8D6C8];
    v412[5] = MEMORY[0x263F8D6C8];
    v97[2] = v96;
    uint64_t v98 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    int v290 = &v658;
    uint64_t v658 = v98;
    uint64_t v659 = v99;
    Swift::String v100 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v406, v404, v405 & 1);
    int v284 = v100._object;
    DefaultStringInterpolation.appendLiteral(_:)(v100);
    swift_bridgeObjectRelease();
    v657[2] = v526;
    v657[3] = v525;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    Swift::String v101 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v396, v397, v405 & 1);
    int v285 = v101._object;
    DefaultStringInterpolation.appendLiteral(_:)(v101);
    swift_bridgeObjectRelease();
    uint64_t v102 = NightingaleDPFLRunner.keyMetricsCycleTPR.unsafeMutableAddressor();
    uint64_t v286 = *(void *)v102;
    uint64_t v287 = *((void *)v102 + 1);
    swift_bridgeObjectRetain();
    int v288 = v657;
    v657[0] = v286;
    v657[1] = v287;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of DefaultStringInterpolation();
    Swift::String v103 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v406, v404, v405 & 1);
    int v289 = v103._object;
    DefaultStringInterpolation.appendLiteral(_:)(v103);
    swift_bridgeObjectRelease();
    uint64_t v292 = v658;
    uint64_t v291 = v659;
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    uint64_t v104 = String.init(stringInterpolation:)();
    uint64_t v105 = v412;
    v412[6] = v104;
    v105[7] = v106;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    float v107 = v412;
    uint64_t v108 = v425;
    v412[11] = v568;
    v107[8] = v108;
    uint64_t v109 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    float v299 = &v655;
    uint64_t v655 = v109;
    uint64_t v656 = v110;
    Swift::String v111 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v406, v404, v405 & 1);
    float v293 = v111._object;
    DefaultStringInterpolation.appendLiteral(_:)(v111);
    swift_bridgeObjectRelease();
    v654[2] = v526;
    v654[3] = v525;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    Swift::String v112 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v396, v397, v405 & 1);
    char v294 = v112._object;
    DefaultStringInterpolation.appendLiteral(_:)(v112);
    swift_bridgeObjectRelease();
    uint64_t v113 = NightingaleDPFLRunner.keyMetricsCycleFP.unsafeMutableAddressor();
    uint64_t v295 = *(void *)v113;
    uint64_t v296 = *((void *)v113 + 1);
    swift_bridgeObjectRetain();
    uint64_t v297 = v654;
    v654[0] = v295;
    v654[1] = v296;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of DefaultStringInterpolation();
    Swift::String v114 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v406, v404, v405 & 1);
    uint64_t v298 = v114._object;
    DefaultStringInterpolation.appendLiteral(_:)(v114);
    swift_bridgeObjectRelease();
    uint64_t v301 = v655;
    uint64_t v300 = v656;
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    uint64_t v115 = String.init(stringInterpolation:)();
    uint64_t v116 = v412;
    v412[12] = v115;
    v116[13] = v117;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v118 = v426;
    uint64_t v119 = v412;
    v412[17] = v329;
    v119[14] = v118;
    uint64_t v120 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    uint64_t v308 = &v652;
    uint64_t v652 = v120;
    uint64_t v653 = v121;
    Swift::String v122 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v406, v404, v405 & 1);
    uint64_t v302 = v122._object;
    DefaultStringInterpolation.appendLiteral(_:)(v122);
    swift_bridgeObjectRelease();
    v651[2] = v526;
    v651[3] = v525;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    Swift::String v123 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v396, v397, v405 & 1);
    uint64_t v303 = v123._object;
    DefaultStringInterpolation.appendLiteral(_:)(v123);
    swift_bridgeObjectRelease();
    uint64_t v124 = NightingaleDPFLRunner.keyMetricsCycleFPR.unsafeMutableAddressor();
    uint64_t v304 = *(void *)v124;
    uint64_t v305 = *((void *)v124 + 1);
    swift_bridgeObjectRetain();
    uint64_t v306 = v651;
    v651[0] = v304;
    v651[1] = v305;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of DefaultStringInterpolation();
    Swift::String v125 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v406, v404, v405 & 1);
    uint64_t v307 = v125._object;
    DefaultStringInterpolation.appendLiteral(_:)(v125);
    swift_bridgeObjectRelease();
    uint64_t v310 = v652;
    uint64_t v309 = v653;
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    uint64_t v126 = String.init(stringInterpolation:)();
    uint64_t v127 = v412;
    v412[18] = v126;
    v127[19] = v128;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v129 = v412;
    uint64_t v130 = v427;
    v412[23] = v568;
    v129[20] = v130;
    uint64_t v131 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    unint64_t v317 = &v649;
    uint64_t v649 = v131;
    uint64_t v650 = v132;
    Swift::String v133 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v406, v404, v405 & 1);
    int v311 = v133._object;
    DefaultStringInterpolation.appendLiteral(_:)(v133);
    swift_bridgeObjectRelease();
    v648[2] = v526;
    v648[3] = v525;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    Swift::String v134 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v396, v397, v405 & 1);
    uint64_t v312 = v134._object;
    DefaultStringInterpolation.appendLiteral(_:)(v134);
    swift_bridgeObjectRelease();
    uint64_t v135 = NightingaleDPFLRunner.keyMetricsNumberOfPregnantCycles.unsafeMutableAddressor();
    uint64_t v313 = *(void *)v135;
    uint64_t v314 = *((void *)v135 + 1);
    swift_bridgeObjectRetain();
    uint64_t v315 = v648;
    v648[0] = v313;
    v648[1] = v314;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of DefaultStringInterpolation();
    Swift::String v136 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v406, v404, v405 & 1);
    uint64_t v316 = v136._object;
    DefaultStringInterpolation.appendLiteral(_:)(v136);
    swift_bridgeObjectRelease();
    uint64_t v319 = v649;
    uint64_t v318 = v650;
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    uint64_t v137 = String.init(stringInterpolation:)();
    uint64_t v138 = v412;
    v412[24] = v137;
    v138[25] = v139;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v140 = v428;
    uint64_t v141 = v412;
    v412[29] = v329;
    v141[26] = v140;
    uint64_t v142 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    float v326 = &v646;
    uint64_t v646 = v142;
    uint64_t v647 = v143;
    Swift::String v144 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v406, v404, v405 & 1);
    uint64_t v320 = v144._object;
    DefaultStringInterpolation.appendLiteral(_:)(v144);
    swift_bridgeObjectRelease();
    v645[2] = v526;
    v645[3] = v525;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    Swift::String v145 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v396, v397, v405 & 1);
    uint64_t v321 = v145._object;
    DefaultStringInterpolation.appendLiteral(_:)(v145);
    swift_bridgeObjectRelease();
    uint64_t v146 = NightingaleDPFLRunner.keyMetricsNumberOfNonPregnantCycles.unsafeMutableAddressor();
    uint64_t v322 = *(void *)v146;
    uint64_t v323 = *((void *)v146 + 1);
    swift_bridgeObjectRetain();
    uint64_t v324 = v645;
    v645[0] = v322;
    v645[1] = v323;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of DefaultStringInterpolation();
    Swift::String v147 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v406, v404, v405 & 1);
    uint64_t v325 = v147._object;
    DefaultStringInterpolation.appendLiteral(_:)(v147);
    swift_bridgeObjectRelease();
    uint64_t v328 = v646;
    uint64_t v327 = v647;
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    uint64_t v148 = String.init(stringInterpolation:)();
    uint64_t v149 = v412;
    v412[30] = v148;
    v149[31] = v150;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v151 = v429;
    uint64_t v152 = v412;
    v412[35] = v329;
    v152[32] = v151;
    uint64_t v153 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    int v336 = &v643;
    uint64_t v643 = v153;
    uint64_t v644 = v154;
    Swift::String v155 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v406, v404, v405 & 1);
    int v330 = v155._object;
    DefaultStringInterpolation.appendLiteral(_:)(v155);
    swift_bridgeObjectRelease();
    v642[2] = v526;
    v642[3] = v525;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    Swift::String v156 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v396, v397, v405 & 1);
    unsigned __int8 v331 = v156._object;
    DefaultStringInterpolation.appendLiteral(_:)(v156);
    swift_bridgeObjectRelease();
    uint64_t v157 = NightingaleDPFLRunner.keyMetricsCycleLatency.unsafeMutableAddressor();
    uint64_t v332 = *(void *)v157;
    uint64_t v333 = *((void *)v157 + 1);
    swift_bridgeObjectRetain();
    uint64_t v334 = v642;
    v642[0] = v332;
    v642[1] = v333;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of DefaultStringInterpolation();
    Swift::String v158 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v406, v404, v405 & 1);
    uint64_t v335 = v158._object;
    DefaultStringInterpolation.appendLiteral(_:)(v158);
    swift_bridgeObjectRelease();
    uint64_t v338 = v643;
    uint64_t v337 = v644;
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    uint64_t v159 = String.init(stringInterpolation:)();
    uint64_t v160 = v412;
    v412[36] = v159;
    v160[37] = v161;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v162 = v412;
    uint64_t v163 = v430;
    v412[41] = v568;
    v162[38] = v163;
    uint64_t v164 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    uint64_t v345 = &v640;
    uint64_t v640 = v164;
    uint64_t v641 = v165;
    Swift::String v166 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v406, v404, v405 & 1);
    uint64_t v339 = v166._object;
    DefaultStringInterpolation.appendLiteral(_:)(v166);
    swift_bridgeObjectRelease();
    v639[2] = v526;
    v639[3] = v525;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    Swift::String v167 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v396, v397, v405 & 1);
    uint64_t v340 = v167._object;
    DefaultStringInterpolation.appendLiteral(_:)(v167);
    swift_bridgeObjectRelease();
    int v168 = NightingaleDPFLRunner.keyMetricsCycleLatencyBuckets.unsafeMutableAddressor();
    uint64_t v341 = *(void *)v168;
    uint64_t v342 = *((void *)v168 + 1);
    swift_bridgeObjectRetain();
    uint64_t v343 = v639;
    v639[0] = v341;
    v639[1] = v342;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of DefaultStringInterpolation();
    Swift::String v169 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v406, v404, v405 & 1);
    int v344 = v169._object;
    DefaultStringInterpolation.appendLiteral(_:)(v169);
    swift_bridgeObjectRelease();
    uint64_t v347 = v640;
    uint64_t v346 = v641;
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    uint64_t v170 = String.init(stringInterpolation:)();
    uint64_t v171 = v412;
    v412[42] = v170;
    v171[43] = v172;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v173 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
    uint64_t v174 = v412;
    uint64_t v175 = v431;
    v412[47] = v173;
    v174[44] = v175;
    uint64_t v176 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    uint64_t v354 = &v637;
    uint64_t v637 = v176;
    uint64_t v638 = v177;
    Swift::String v178 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v406, v404, v405 & 1);
    uint64_t v348 = v178._object;
    DefaultStringInterpolation.appendLiteral(_:)(v178);
    swift_bridgeObjectRelease();
    v636[2] = v526;
    v636[3] = v525;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    Swift::String v179 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v396, v397, v405 & 1);
    uint64_t v349 = v179._object;
    DefaultStringInterpolation.appendLiteral(_:)(v179);
    swift_bridgeObjectRelease();
    unsigned int v180 = NightingaleDPFLRunner.keyMetricsSliceROCScore.unsafeMutableAddressor();
    uint64_t v350 = *(void *)v180;
    uint64_t v351 = *((void *)v180 + 1);
    swift_bridgeObjectRetain();
    uint64_t v352 = v636;
    v636[0] = v350;
    v636[1] = v351;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of DefaultStringInterpolation();
    Swift::String v181 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v406, v404, v405 & 1);
    float v353 = v181._object;
    DefaultStringInterpolation.appendLiteral(_:)(v181);
    swift_bridgeObjectRelease();
    uint64_t v356 = v637;
    uint64_t v355 = v638;
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    uint64_t v182 = String.init(stringInterpolation:)();
    uint64_t v183 = v412;
    v412[48] = v182;
    v183[49] = v184;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v185 = v412;
    uint64_t v186 = v414;
    v412[53] = v568;
    v185[50] = v186;
    uint64_t v187 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    uint64_t v363 = &v634;
    uint64_t v634 = v187;
    uint64_t v635 = v188;
    Swift::String v189 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v406, v404, v405 & 1);
    uint64_t v357 = v189._object;
    DefaultStringInterpolation.appendLiteral(_:)(v189);
    swift_bridgeObjectRelease();
    v633[2] = v526;
    v633[3] = v525;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    Swift::String v190 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v396, v397, v405 & 1);
    uint64_t v358 = v190._object;
    DefaultStringInterpolation.appendLiteral(_:)(v190);
    swift_bridgeObjectRelease();
    int v191 = NightingaleDPFLRunner.keyMetricsSlicePRScore.unsafeMutableAddressor();
    uint64_t v359 = *(void *)v191;
    uint64_t v360 = *((void *)v191 + 1);
    swift_bridgeObjectRetain();
    uint64_t v361 = v633;
    v633[0] = v359;
    v633[1] = v360;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of DefaultStringInterpolation();
    Swift::String v192 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v406, v404, v405 & 1);
    uint64_t v362 = v192._object;
    DefaultStringInterpolation.appendLiteral(_:)(v192);
    swift_bridgeObjectRelease();
    uint64_t v365 = v634;
    uint64_t v364 = v635;
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    uint64_t v193 = String.init(stringInterpolation:)();
    uint64_t v194 = v412;
    v412[54] = v193;
    v194[55] = v195;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    int v196 = v366;
    uint64_t v197 = v412;
    v412[59] = MEMORY[0x263F8D5C8];
    *((_DWORD *)v197 + 112) = v196;
    uint64_t v198 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    uint64_t v373 = &v631;
    uint64_t v631 = v198;
    uint64_t v632 = v199;
    Swift::String v200 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v406, v404, v405 & 1);
    char v367 = v200._object;
    DefaultStringInterpolation.appendLiteral(_:)(v200);
    swift_bridgeObjectRelease();
    v630[2] = v526;
    v630[3] = v525;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    Swift::String v201 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v396, v397, v405 & 1);
    uint64_t v368 = v201._object;
    DefaultStringInterpolation.appendLiteral(_:)(v201);
    swift_bridgeObjectRelease();
    uint64_t v202 = NightingaleDPFLRunner.keyMetricsSliceConfusionMatricsTP.unsafeMutableAddressor();
    uint64_t v369 = *(void *)v202;
    uint64_t v370 = *((void *)v202 + 1);
    swift_bridgeObjectRetain();
    uint64_t v371 = v630;
    v630[0] = v369;
    v630[1] = v370;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of DefaultStringInterpolation();
    Swift::String v203 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v406, v404, v405 & 1);
    uint64_t v372 = v203._object;
    DefaultStringInterpolation.appendLiteral(_:)(v203);
    swift_bridgeObjectRelease();
    uint64_t v375 = v631;
    uint64_t v374 = v632;
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    uint64_t v204 = String.init(stringInterpolation:)();
    uint64_t v205 = v412;
    v412[60] = v204;
    v205[61] = v206;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    int v207 = v412;
    uint64_t v208 = v418;
    v412[65] = v568;
    v207[62] = v208;
    uint64_t v209 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    uint64_t v382 = &v628;
    uint64_t v628 = v209;
    uint64_t v629 = v210;
    Swift::String v211 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v406, v404, v405 & 1);
    uint64_t v376 = v211._object;
    DefaultStringInterpolation.appendLiteral(_:)(v211);
    swift_bridgeObjectRelease();
    v627[2] = v526;
    v627[3] = v525;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    Swift::String v212 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v396, v397, v405 & 1);
    uint64_t v377 = v212._object;
    DefaultStringInterpolation.appendLiteral(_:)(v212);
    swift_bridgeObjectRelease();
    float v213 = NightingaleDPFLRunner.keyMetricsSliceConfusionMatricsFP.unsafeMutableAddressor();
    uint64_t v378 = *(void *)v213;
    uint64_t v379 = *((void *)v213 + 1);
    swift_bridgeObjectRetain();
    uint64_t v380 = v627;
    v627[0] = v378;
    v627[1] = v379;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of DefaultStringInterpolation();
    Swift::String v214 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v406, v404, v405 & 1);
    uint64_t v381 = v214._object;
    DefaultStringInterpolation.appendLiteral(_:)(v214);
    swift_bridgeObjectRelease();
    uint64_t v384 = v628;
    uint64_t v383 = v629;
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    uint64_t v215 = String.init(stringInterpolation:)();
    float v216 = v412;
    v412[66] = v215;
    v216[67] = v217;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unsigned int v218 = v412;
    uint64_t v219 = v417;
    v412[71] = v568;
    v218[68] = v219;
    uint64_t v220 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    uint64_t v391 = &v625;
    uint64_t v625 = v220;
    uint64_t v626 = v221;
    Swift::String v222 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v406, v404, v405 & 1);
    uint64_t v385 = v222._object;
    DefaultStringInterpolation.appendLiteral(_:)(v222);
    swift_bridgeObjectRelease();
    v624[2] = v526;
    v624[3] = v525;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    Swift::String v223 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v396, v397, v405 & 1);
    uint64_t v386 = v223._object;
    DefaultStringInterpolation.appendLiteral(_:)(v223);
    swift_bridgeObjectRelease();
    unint64_t v224 = NightingaleDPFLRunner.keyMetricsSliceConfusionMatricsTN.unsafeMutableAddressor();
    uint64_t v387 = *(void *)v224;
    uint64_t v388 = *((void *)v224 + 1);
    swift_bridgeObjectRetain();
    uint64_t v389 = v624;
    v624[0] = v387;
    v624[1] = v388;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of DefaultStringInterpolation();
    Swift::String v225 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v406, v404, v405 & 1);
    uint64_t v390 = v225._object;
    DefaultStringInterpolation.appendLiteral(_:)(v225);
    swift_bridgeObjectRelease();
    uint64_t v393 = v625;
    uint64_t v392 = v626;
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    uint64_t v226 = String.init(stringInterpolation:)();
    int v227 = v412;
    v412[72] = v226;
    v227[73] = v228;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    int v229 = v412;
    uint64_t v230 = v416;
    v412[77] = v568;
    v229[74] = v230;
    uint64_t v231 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    uint64_t v408 = &v622;
    uint64_t v622 = v231;
    uint64_t v623 = v232;
    Swift::String v233 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v406, v404, v405 & 1);
    uint64_t v395 = v233._object;
    DefaultStringInterpolation.appendLiteral(_:)(v233);
    swift_bridgeObjectRelease();
    v621[2] = v526;
    v621[3] = v525;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    Swift::String v234 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v396, v397, v405 & 1);
    uint64_t v398 = v234._object;
    DefaultStringInterpolation.appendLiteral(_:)(v234);
    swift_bridgeObjectRelease();
    uint64_t v235 = NightingaleDPFLRunner.keyMetricsSliceConfusionMatricsFN.unsafeMutableAddressor();
    uint64_t v399 = *(void *)v235;
    uint64_t v400 = *((void *)v235 + 1);
    swift_bridgeObjectRetain();
    uint64_t v403 = v621;
    v621[0] = v399;
    v621[1] = v400;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of DefaultStringInterpolation();
    Swift::String v236 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v406, v404, v405 & 1);
    uint64_t v407 = v236._object;
    DefaultStringInterpolation.appendLiteral(_:)(v236);
    swift_bridgeObjectRelease();
    uint64_t v410 = v622;
    uint64_t v409 = v623;
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    uint64_t v237 = String.init(stringInterpolation:)();
    float v238 = v412;
    v412[78] = v237;
    v238[79] = v239;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v240 = v411;
    int v241 = v412;
    uint64_t v242 = v415;
    v412[83] = v568;
    v241[80] = v242;
    _finalizeUninitializedArray<A>(_:)();
    uint64_t v419 = v240;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v421 = Dictionary.init(dictionaryLiteral:)();
    uint64_t v243 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    uint64_t v244 = v433;
    uint64_t v422 = v243;
    uint64_t result = (void *)Dictionary.merge(_:uniquingKeysWith:)();
    uint64_t v423 = v244;
    if (v244) {
      break;
    }
    Builtin::Word v260 = 1;
    uint64_t v245 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    uint64_t v272 = &v619;
    uint64_t v619 = v245;
    uint64_t v620 = v246;
    uint64_t v270 = "";
    Builtin::Word v268 = 0;
    int v269 = 1;
    Swift::String v247 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    uint64_t v259 = v247._object;
    DefaultStringInterpolation.appendLiteral(_:)(v247);
    swift_bridgeObjectRelease();
    v618[2] = v526;
    v618[3] = v525;
    uint64_t v264 = MEMORY[0x263F8D310];
    uint64_t v265 = MEMORY[0x263F8D378];
    uint64_t v266 = MEMORY[0x263F8D370];
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    Swift::String v248 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("_", v260, v269 & 1);
    uint64_t v261 = v248._object;
    DefaultStringInterpolation.appendLiteral(_:)(v248);
    swift_bridgeObjectRelease();
    int v249 = NightingaleDPFLRunner.keyMetricsLossBeforeTraining.unsafeMutableAddressor();
    uint64_t v262 = *(void *)v249;
    uint64_t v263 = *((void *)v249 + 1);
    swift_bridgeObjectRetain();
    v267 = v618;
    v618[0] = v262;
    v618[1] = v263;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of DefaultStringInterpolation();
    Swift::String v250 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v270, v268, v269 & 1);
    uint64_t v271 = v250._object;
    DefaultStringInterpolation.appendLiteral(_:)(v250);
    swift_bridgeObjectRelease();
    uint64_t v274 = v619;
    uint64_t v273 = v620;
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    uint64_t v251 = String.init(stringInterpolation:)();
    uint64_t v617 = MEMORY[0x263F8D5C8];
    float v616 = v681;
    uint64_t v614 = v251;
    uint64_t v615 = v252;
    Dictionary.subscript.setter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v695);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall NightingaleDPFLRunner.sendLocation(_:_:)(NightingaleTraining::NightingaleDReachLocation a1, Swift::Int a2)
{
  NightingaleTraining::NightingaleDReachLocation v15 = a1;
  Swift::Int v14 = a2;
  uint64_t v13 = v2;
  uint64_t v6 = NightingaleDPFLRunner.taskId.getter();
  uint64_t v10 = v3;
  v12[1] = a1;
  lazy protocol witness table accessor for type NightingaleDReachLocation and conformance NightingaleDReachLocation();
  uint64_t v7 = String.init<A>(describing:)();
  uint64_t v9 = v4;
  NightingaleDPFLRunner.useCase.getter(v12);
  char v11 = v12[0];
  static NightingaleTelemetry.sendNightingaleReachTelemetryLazy(taskId:location:useCase:errorCode:)(v6, v10, v7, v9, &v11, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

void partial apply for closure #1 in NightingaleDPFLRunner.run(task:useCase:context:)(void *a1@<X8>)
{
  closure #1 in NightingaleDPFLRunner.run(task:useCase:context:)(v1[2], v1[3], v1[4], a1);
}

uint64_t NightingaleDPFLRunner.sendLocationAsync<A>(location:force:work:)(uint64_t a1, char a2, char a3, int *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = v6;
  uint64_t v14 = v8;
  *(void *)(v7 + 72) = v8;
  *(void *)(v7 + 64) = a6;
  *(unsigned char *)(v7 + 114) = a3 & 1;
  *(unsigned char *)(v7 + 113) = a2;
  *(void *)(v7 + 56) = a1;
  *(void *)(v7 + 32) = v7;
  *(unsigned char *)(v7 + 112) = 0;
  *(unsigned char *)(v7 + 120) = 0;
  *(void *)(v7 + 16) = 0;
  *(void *)(v7 + 24) = 0;
  *(void *)(v7 + 40) = 0;
  *(void *)(v7 + 48) = 0;
  *(void *)(v7 + 80) = *(void *)(a6 - 8);
  uint64_t v18 = swift_task_alloc();
  *(void *)(v7 + 88) = v18;
  *(unsigned char *)(v7 + 112) = a2;
  *(unsigned char *)(v7 + 120) = a3 & 1;
  *(void *)(v7 + 16) = a4;
  *(void *)(v7 + 24) = a5;
  *(void *)(v7 + 40) = v14;
  uint64_t v17 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v16 + 96) = v10;
  *uint64_t v10 = *(void *)(v16 + 32);
  v10[1] = NightingaleDPFLRunner.sendLocationAsync<A>(location:force:work:);
  return v17(v18);
}

uint64_t NightingaleDPFLRunner.sendLocationAsync<A>(location:force:work:)()
{
  uint64_t v4 = *v1;
  *(void *)(v4 + 32) = *v1;
  *(void *)(v4 + 104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = NightingaleDPFLRunner.sendLocationAsync<A>(location:force:work:);
  }
  else
  {
    uint64_t v2 = NightingaleDPFLRunner.sendLocationAsync<A>(location:force:work:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  uint64_t v0;
  char v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  Swift::String v1 = *(unsigned char *)(v0 + 114);
  *(void *)(v0 + 32) = v0;
  if (v1) {
    NightingaleDPFLRunner.sendLocation(_:_:)(*(NightingaleTraining::NightingaleDReachLocation *)(v7 + 113), 0);
  }
  uint64_t v6 = *(void *)(v7 + 88);
  uint64_t v5 = *(void *)(v7 + 64);
  uint64_t v4 = *(void *)(v7 + 80);
  (*(void (**)(void))(v4 + 16))(*(void *)(v7 + 56));
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v6, v5);
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(v7 + 32) + 8);
  return v2();
}

{
  uint64_t v0;
  id v1;
  id v2;
  uint64_t (*v3)(void);
  id v5;
  NightingaleTraining::NightingaleDReachLocation v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;

  uint64_t v8 = *(id *)(v0 + 104);
  uint64_t v6 = *(unsigned char *)(v0 + 113);
  *(void *)(v0 + 32) = v0;
  Swift::String v1 = v8;
  *(void *)(v0 + 48) = v8;
  uint64_t v2 = v8;
  uint64_t v5 = (id)_convertErrorToNSError(_:)();
  uint64_t v7 = objc_msgSend(v5, sel_code);

  NightingaleDPFLRunner.sendLocation(_:_:)(v6, (Swift::Int)v7);
  swift_willThrow();

  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)(v9 + 32) + 8);
  return v3();
}

void NightingaleDPFLRunner.sendLocation<A>(location:force:work:)(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v15 = a5;
  int v16 = a1;
  int v17 = a2;
  uint64_t v19 = a3;
  uint64_t v18 = a4;
  uint64_t v23 = v5;
  uint64_t v32 = 0;
  char v31 = 0;
  char v30 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v27 = 0;
  id v26 = 0;
  uint64_t v33 = a4;
  uint64_t v20 = *(void *)(a4 - 8);
  uint64_t v21 = a4 - 8;
  unint64_t v22 = (*(void *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v24 = (char *)&v11 - v22;
  uint64_t v32 = (char *)&v11 - v22;
  char v31 = MEMORY[0x270FA5388](a1);
  char v30 = v7 & 1;
  uint64_t v28 = v8;
  uint64_t v29 = v19;
  uint64_t v27 = v5;
  v8();
  id v25 = v6;
  if (v6)
  {
    id v14 = v25;
    id v9 = v25;
    id v26 = v14;
    id v10 = v14;
    id v12 = (id)_convertErrorToNSError(_:)();
    id v13 = objc_msgSend(v12, sel_code);

    NightingaleDPFLRunner.sendLocation(_:_:)((NightingaleTraining::NightingaleDReachLocation)v16, (Swift::Int)v13);
    swift_willThrow();
  }
  else
  {
    if (v17) {
      NightingaleDPFLRunner.sendLocation(_:_:)((NightingaleTraining::NightingaleDReachLocation)v16, 0);
    }
    (*(void (**)(uint64_t, char *, uint64_t))(v20 + 16))(v15, v24, v18);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v24, v18);
  }
}

uint64_t NightingaleDPFLRunner.queryPregnancies(hyperParams:)(uint64_t a1)
{
  *(void *)(v2 + 200) = v1;
  *(void *)(v2 + 192) = a1;
  *(void *)(v2 + 96) = v2;
  *(void *)(v2 + 104) = 0;
  *(void *)(v2 + 112) = 0;
  *(void *)(v2 + 128) = 0;
  *(void *)(v2 + 144) = 0;
  *(void *)(v2 + 160) = 0;
  *(void *)(v2 + 168) = 0;
  *(_DWORD *)(v2 + 440) = 0;
  uint64_t v3 = type metadata accessor for Logger();
  *(void *)(v2 + 208) = v3;
  *(void *)(v2 + 216) = *(void *)(v3 - 8);
  *(void *)(v2 + 224) = swift_task_alloc();
  *(void *)(v2 + 232) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (lower: Date, upper: Date));
  *(void *)(v2 + 240) = swift_task_alloc();
  *(void *)(v2 + 248) = swift_task_alloc();
  *(void *)(v2 + 256) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClosedRange<Date>);
  *(void *)(v2 + 264) = swift_task_alloc();
  *(void *)(v2 + 272) = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Calendar.Component();
  *(void *)(v2 + 280) = v4;
  *(void *)(v2 + 288) = *(void *)(v4 - 8);
  *(void *)(v2 + 296) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Calendar();
  *(void *)(v2 + 304) = v5;
  *(void *)(v2 + 312) = *(void *)(v5 - 8);
  *(void *)(v2 + 320) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  *(void *)(v2 + 328) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Date();
  *(void *)(v2 + 336) = v6;
  *(void *)(v2 + 344) = *(void *)(v6 - 8);
  *(void *)(v2 + 352) = swift_task_alloc();
  *(void *)(v2 + 360) = swift_task_alloc();
  *(void *)(v2 + 368) = swift_task_alloc();
  *(void *)(v2 + 376) = swift_task_alloc();
  *(void *)(v2 + 384) = swift_task_alloc();
  *(void *)(v2 + 104) = a1;
  *(void *)(v2 + 112) = v1;
  return MEMORY[0x270FA2498](NightingaleDPFLRunner.queryPregnancies(hyperParams:), 0);
}

{
  uint64_t v1;
  void *v2;
  uint64_t (*v3)();
  void *v5;
  uint64_t v6;

  uint64_t v5 = (void *)*v2;
  unsigned char v5[12] = *v2;
  v5[53] = a1;
  v5[54] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v3 = NightingaleDPFLRunner.queryPregnancies(hyperParams:);
  }
  else
  {
    outlined destroy of ClosedRange<Date>(v5[34]);
    swift_bridgeObjectRelease();
    uint64_t v3 = NightingaleDPFLRunner.queryPregnancies(hyperParams:);
  }
  return MEMORY[0x270FA2498](v3, 0);
}

uint64_t NightingaleDPFLRunner.queryPregnancies(hyperParams:)()
{
  uint64_t v43 = *(void *)(v0 + 296);
  uint64_t v42 = *(void *)(v0 + 288);
  uint64_t v44 = *(void *)(v0 + 280);
  *(void *)(v0 + 96) = v0;
  static Calendar.current.getter();
  (*(void (**)(uint64_t, void, uint64_t))(v42 + 104))(v43, *MEMORY[0x263F07870], v44);
  *(_DWORD *)(v0 + 444) = HyperParams.maximumDays.getter();
  lazy protocol witness table accessor for type Int and conformance Int();
  lazy protocol witness table accessor for type Int and conformance Int();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  uint64_t result = SignedInteger<>.init<A>(_:)();
  if (__OFSUB__(0, *(void *)(v0 + 120)))
  {
    __break(1u);
  }
  else
  {
    uint64_t v31 = v41[47];
    uint64_t v40 = v41[42];
    uint64_t v39 = v41[41];
    uint64_t v37 = v41[40];
    uint64_t v38 = v41[38];
    uint64_t v34 = v41[37];
    uint64_t v35 = v41[35];
    uint64_t v30 = v41[43];
    uint64_t v36 = v41[39];
    uint64_t v33 = v41[36];
    Date.init()();
    default argument 3 of Calendar.date(byAdding:value:to:wrappingComponents:)();
    Calendar.date(byAdding:value:to:wrappingComponents:)();
    uint64_t v32 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
    v41[49] = v32;
    v41[50] = (v30 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v32(v31, v40);
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v34, v35);
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v37, v38);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v39, 1, v40) == 1) {
      return _assertionFailure(_:_:file:line:flags:)();
    }
    uint64_t v24 = v41[48];
    uint64_t v25 = v41[46];
    uint64_t v29 = v41[45];
    uint64_t v27 = v41[44];
    uint64_t v28 = v41[42];
    uint64_t v19 = v41[25];
    uint64_t v23 = v41[43];
    uint64_t v18 = *(void (**)(void))(v23 + 32);
    v18();
    outlined init with copy of HealthDataQuery(v19 + 48, (uint64_t)(v41 + 2));
    uint64_t v20 = v41[5];
    uint64_t v21 = v41[6];
    __swift_project_boxed_opaque_existential_1(v41 + 2, v20);
    uint64_t v22 = HyperParams.pregnancySourceList.getter();
    v41[51] = v22;
    Date.init()();
    id v26 = *(void (**)(void))(v23 + 16);
    ((void (*)(uint64_t, uint64_t, uint64_t))v26)(v29, v24, v28);
    ((void (*)(uint64_t, uint64_t, uint64_t))v26)(v27, v25, v28);
    lazy protocol witness table accessor for type Date and conformance Date();
    if ((dispatch thunk of static Comparable.<= infix(_:_:)() & 1) == 0)
    {
      return _assertionFailure(_:_:file:line:flags:)();
    }
    else
    {
      uint64_t v16 = v41[46];
      uint64_t v5 = v41[45];
      uint64_t v15 = v41[42];
      uint64_t v14 = v41[34];
      uint64_t v13 = v41[33];
      uint64_t v10 = v41[32];
      uint64_t v8 = v41[31];
      uint64_t v12 = v41[30];
      uint64_t v7 = v41[29];
      ((void (*)(void))v32)(v41[44]);
      v32(v5, v15);
      uint64_t v9 = v8 + *(int *)(v7 + 48);
      v26();
      ((void (*)(uint64_t, uint64_t, uint64_t))v26)(v9, v16, v15);
      uint64_t v6 = v12 + *(int *)(v7 + 48);
      v26();
      ((void (*)(uint64_t, uint64_t, uint64_t))v26)(v6, v9, v15);
      ((void (*)(uint64_t, uint64_t, uint64_t))v18)(v13, v12, v15);
      v32(v6, v15);
      uint64_t v11 = v12 + *(int *)(v7 + 48);
      v18();
      ((void (*)(uint64_t, uint64_t, uint64_t))v18)(v11, v9, v15);
      ((void (*)(uint64_t, uint64_t, uint64_t))v18)(v13 + *(int *)(v10 + 36), v11, v15);
      v32(v12, v15);
      outlined init with take of ClosedRange<Date>(v13, v14);
      v32(v16, v15);
      int v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 + 8) + **(int **)(v21 + 8));
      uint64_t v3 = (void *)swift_task_alloc();
      v41[52] = v3;
      *uint64_t v3 = v41[12];
      v3[1] = NightingaleDPFLRunner.queryPregnancies(hyperParams:);
      uint64_t v4 = v41[34];
      return v17(v22, v4, v20, v21);
    }
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, void);
  unsigned char *v7;
  unsigned char *v8;
  uint64_t (*v9)();
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint8_t *buf;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint32_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  NSObject *v52;
  os_log_type_t v53;
  uint8_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t (*v57)(uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  uint64_t v59 = v0;
  uint64_t v43 = *(void *)(v0 + 424);
  uint64_t v1 = *(void *)(v0 + 224);
  uint64_t v41 = *(void *)(v0 + 216);
  uint64_t v42 = *(void *)(v0 + 208);
  *(void *)(v0 + 96) = v0;
  *(void *)(v0 + 128) = v43;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  uint64_t v2 = Logging.default.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 16))(v1, v2, v42);
  swift_bridgeObjectRetain();
  uint64_t v44 = swift_allocObject();
  *(void *)(v44 + 16) = v43;
  swift_retain();
  uint64_t v46 = swift_allocObject();
  *(void *)(v46 + 16) = partial apply for implicit closure #1 in NightingaleDPFLRunner.queryPregnancies(hyperParams:);
  *(void *)(v46 + 24) = v44;
  swift_release();
  uint64_t v52 = Logger.logObject.getter();
  uint64_t v53 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 136) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v45 = *(_DWORD *)(v0 + 448);
  uint64_t v48 = swift_allocObject();
  *(unsigned char *)(v48 + 16) = 32;
  long long v49 = swift_allocObject();
  *(unsigned char *)(v49 + 16) = 8;
  uint64_t v47 = swift_allocObject();
  *(void *)(v47 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:);
  *(void *)(v47 + 24) = v46;
  uint64_t v50 = swift_allocObject();
  *(void *)(v50 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v50 + 24) = v47;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v51 = v3;
  swift_retain();
  *uint64_t v51 = partial apply for closure #1 in OSLogArguments.append(_:);
  v51[1] = v48;
  swift_retain();
  v51[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v51[3] = v49;
  swift_retain();
  v51[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v51[5] = v50;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v52, v53))
  {
    uint64_t v4 = *(void *)(v40 + 432);
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v38 = createStorage<A>(capacity:type:)(0);
    uint64_t v39 = createStorage<A>(capacity:type:)(1);
    uint64_t v54 = buf;
    uint64_t v55 = v38;
    uint64_t v56 = v39;
    serialize(_:at:)(2, &v54);
    serialize(_:at:)(1, &v54);
    uint64_t v57 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v58 = v48;
    uint64_t result = closure #1 in osLogInternal(_:log:type:)(&v57, (uint64_t)&v54, (uint64_t)&v55, (uint64_t)&v56);
    if (v4) {
      return result;
    }
    uint64_t v57 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v58 = v49;
    closure #1 in osLogInternal(_:log:type:)(&v57, (uint64_t)&v54, (uint64_t)&v55, (uint64_t)&v56);
    uint64_t v57 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v58 = v50;
    closure #1 in osLogInternal(_:log:type:)(&v57, (uint64_t)&v54, (uint64_t)&v55, (uint64_t)&v56);
    _os_log_impl(&dword_257C1A000, v52, v53, "pregnancies: %s", buf, v45);
    destroyStorage<A>(_:count:)(v38, 0, v36);
    destroyStorage<A>(_:count:)(v39, 1, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x25A2C0D00](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
    uint64_t v35 = 0;
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    uint64_t v35 = *(void *)(v40 + 432);
  }
  uint64_t v34 = *(void *)(v40 + 424);
  uint64_t v30 = *(void *)(v40 + 224);
  uint64_t v31 = *(void *)(v40 + 208);
  uint64_t v29 = *(void *)(v40 + 216);

  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v30, v31);
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Pregnancy?);
  uint64_t v33 = MEMORY[0x25A2C0810](v34);
  *(void *)(v40 + 144) = v33;
  swift_bridgeObjectRetain();
  *(void *)(v40 + 152) = v34;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Pregnancy?]);
  lazy protocol witness table accessor for type [Pregnancy?] and conformance [A]();
  uint64_t result = _ArrayProtocol.filter(_:)();
  if (!v35)
  {
    uint64_t v27 = *(void *)(v40 + 424);
    id v26 = MEMORY[0x25A2C0810](result, v32);
    *(void *)(v40 + 160) = v26;
    swift_bridgeObjectRelease();
    *(void *)(v40 + 176) = v27;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Pregnancy);
    lazy protocol witness table accessor for type [Pregnancy?] and conformance [A]();
    uint64_t v28 = Sequence.compactMap<A>(_:)();
    uint64_t v24 = *(void *)(v40 + 424);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    *(void *)(v40 + 168) = v28;
    uint64_t v25 = MEMORY[0x25A2C0810]();
    swift_bridgeObjectRelease();
    if (v25 == MEMORY[0x25A2C0810](v24, v32))
    {
      *(void *)(v40 + 184) = v28;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Pregnancy]);
      lazy protocol witness table accessor for type [Pregnancy] and conformance [A]();
      Sequence.min(by:)();
      outlined destroy of [A]();
      if (*(void *)(v40 + 80))
      {
        uint64_t v20 = *(void *)(v40 + 80);
        uint64_t v19 = *(void *)(v40 + 88);
        __swift_project_boxed_opaque_existential_1((void *)(v40 + 56), v20);
        uint64_t v21 = (*(uint64_t (**)(uint64_t))(v19 + 8))(v20);
        __swift_destroy_boxed_opaque_existential_1(v40 + 56);
        uint64_t v22 = v21;
        uint64_t v23 = 0;
      }
      else
      {
        outlined destroy of Pregnancy?(v40 + 56);
        uint64_t v22 = 0;
        uint64_t v23 = 1;
      }
      if ((v23 & 1) == 0)
      {
        int v17 = *(void (**)(uint64_t, uint64_t))(v40 + 392);
        uint64_t v18 = *(void *)(v40 + 384);
        uint64_t v16 = *(void *)(v40 + 336);
        *(_DWORD *)(v40 + 440) = v22;
        outlined destroy of [A]();
        swift_bridgeObjectRelease();
        v17(v18, v16);
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(v40 + 96) + 8);
        return v6(v33, v26, v28, v22);
      }
      uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v40 + 392);
      uint64_t v13 = *(void *)(v40 + 384);
      uint64_t v14 = *(void *)(v40 + 336);
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
      swift_allocError();
      *uint64_t v7 = 36;
      swift_willThrow();
      outlined destroy of [A]();
      swift_bridgeObjectRelease();
      v15(v13, v14);
    }
    else
    {
      uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v40 + 392);
      uint64_t v10 = *(void *)(v40 + 384);
      uint64_t v11 = *(void *)(v40 + 336);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
      swift_allocError();
      *uint64_t v8 = 47;
      swift_willThrow();
      outlined destroy of [A]();
      swift_bridgeObjectRelease();
      v12(v10, v11);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = *(uint64_t (**)())(*(void *)(v40 + 96) + 8);
    return v9();
  }
  return result;
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  uint64_t v6 = (void (*)(uint64_t, uint64_t))v0[49];
  uint64_t v4 = v0[48];
  uint64_t v5 = v0[42];
  uint64_t v1 = v0[34];
  v0[12] = v0;
  outlined destroy of ClosedRange<Date>(v1);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  v6(v4, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)())(v0[12] + 8);
  return v2();
}

uint64_t default argument 3 of Calendar.date(byAdding:value:to:wrappingComponents:)()
{
  return 0;
}

uint64_t implicit closure #1 in NightingaleDPFLRunner.queryPregnancies(hyperParams:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  swift_bridgeObjectRetain();
  uint64_t result = a1;
  *a2 = a1;
  return result;
}

BOOL closure #1 in NightingaleDPFLRunner.queryPregnancies(hyperParams:)(uint64_t a1)
{
  return *(void *)(a1 + 24) == 0;
}

void *closure #2 in NightingaleDPFLRunner.queryPregnancies(hyperParams:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return outlined init with copy of Pregnancy?(a1, a2);
}

BOOL closure #3 in NightingaleDPFLRunner.queryPregnancies(hyperParams:)(void *a1, void *a2)
{
  uint64_t v4 = a1[3];
  uint64_t v3 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  unsigned int v8 = (*(uint64_t (**)(uint64_t))(v3 + 8))(v4);
  uint64_t v7 = a2[3];
  uint64_t v6 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v7);
  return v8 < (*(unsigned int (**)(uint64_t))(v6 + 8))(v7);
}

uint64_t NightingaleDPFLRunner.deinit()
{
  swift_release();
  outlined destroy of DefaultStringInterpolation();
  __swift_destroy_boxed_opaque_existential_1(v0 + 48);
  return v2;
}

uint64_t NightingaleDPFLRunner.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void protocol witness for PFLTaskRunner.performCustomConsent() in conformance NightingaleDPFLRunner()
{
}

uint64_t protocol witness for PFLTaskRunner.isDataAvailable() in conformance NightingaleDPFLRunner()
{
  uint64_t v3 = v0;
  *(void *)(v0 + 16) = v0;
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v3 + 24) = v1;
  *uint64_t v1 = *(void *)(v3 + 16);
  v1[1] = protocol witness for PFLTaskRunner.isDataAvailable() in conformance NightingaleDPFLRunner;
  return NightingaleDPFLRunner.isDataAvailable()();
}

uint64_t protocol witness for PFLTaskRunner.isDataAvailable() in conformance NightingaleDPFLRunner(unsigned int a1)
{
  uint64_t v4 = *v1;
  *(void *)(v4 + 16) = *v1;
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(v4 + 16) + 8);
  return v2(a1);
}

uint64_t protocol witness for PFLTaskRunner.run(task:useCase:context:) in conformance NightingaleDPFLRunner(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = v4;
  *(void *)(v4 + 16) = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v7 + 24) = v5;
  *uint64_t v5 = *(void *)(v7 + 16);
  v5[1] = protocol witness for PFLTaskRunner.run(task:useCase:context:) in conformance NightingaleDPFLRunner;
  return NightingaleDPFLRunner.run(task:useCase:context:)(a1, a2, a3, a4);
}

uint64_t protocol witness for PFLTaskRunner.run(task:useCase:context:) in conformance NightingaleDPFLRunner(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 16) = *v2;
  uint64_t v8 = v3 + 16;
  uint64_t v4 = swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v8 + 8);
  }
  else
  {
    uint64_t v4 = a1;
    uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v8 + 8);
  }
  return v5(v4);
}

uint64_t protocol witness for PFLTaskRunner.performCustomTargeting(task:useCase:) in conformance NightingaleDPFLRunner()
{
  return PFLTaskRunner.performCustomTargeting(task:useCase:)();
}

uint64_t protocol witness for PFLTaskRunner.shouldContinueAfterFailure(task:useCase:) in conformance NightingaleDPFLRunner()
{
  return NightingaleDPFLRunner.shouldContinueAfterFailure(task:useCase:)() & 1;
}

uint64_t partial apply for closure #2 in NightingaleDPFLRunner.run(task:useCase:context:)()
{
  uint64_t v4 = v1;
  *(void *)(v1 + 16) = v1;
  uint64_t v6 = *(void *)(v0 + 16);
  uint64_t v5 = *(void *)(v0 + 24);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v4 + 24) = v2;
  *uint64_t v2 = *(void *)(v4 + 16);
  v2[1] = partial apply for closure #2 in NightingaleDPFLRunner.run(task:useCase:context:);
  return closure #2 in NightingaleDPFLRunner.run(task:useCase:context:)(v6, v5);
}

uint64_t partial apply for closure #2 in NightingaleDPFLRunner.run(task:useCase:context:)(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v7 = *v4;
  *(void *)(v7 + 16) = *v4;
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(v7 + 16) + 8);
  return v5(a1, a2, a3, a4);
}

uint64_t partial apply for thunk for @callee_guaranteed @async () -> (@unowned Int, @unowned Int, @owned [Pregnancy], @unowned UInt32, @error @owned Error)(uint64_t a1)
{
  uint64_t v6 = v2;
  *(void *)(v2 + 16) = v2;
  uint64_t v7 = *(int **)(v1 + 16);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v6 + 24) = v3;
  *uint64_t v3 = *(void *)(v6 + 16);
  v3[1] = partial apply for thunk for @callee_guaranteed @async () -> (@unowned Int, @unowned Int, @owned [Pregnancy], @unowned UInt32, @error @owned Error);
  uint64_t v4 = async function pointer to thunk for @callee_guaranteed @async () -> (@unowned Int, @unowned Int, @owned [Pregnancy], @unowned UInt32, @error @owned Error);
  return ((uint64_t (*)(uint64_t, int *))((char *)&async function pointer to thunk for @callee_guaranteed @async () -> (@unowned Int, @unowned Int, @owned [Pregnancy], @unowned UInt32, @error @owned Error)
                                                 + v4))(a1, v7);
}

uint64_t partial apply for thunk for @callee_guaranteed @async () -> (@unowned Int, @unowned Int, @owned [Pregnancy], @unowned UInt32, @error @owned Error)()
{
  uint64_t v3 = *v0;
  *(void *)(v3 + 16) = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v3 + 16) + 8);
  return v1();
}

uint64_t partial apply for closure #3 in NightingaleDPFLRunner.run(task:useCase:context:)(uint64_t a1)
{
  uint64_t v5 = v2;
  *(void *)(v2 + 16) = v2;
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  int v8 = *(_DWORD *)(v1 + 32);
  int v9 = *(_DWORD *)(v1 + 36);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v3;
  *uint64_t v3 = *(void *)(v5 + 16);
  v3[1] = partial apply for thunk for @callee_guaranteed @async () -> (@unowned Int, @unowned Int, @owned [Pregnancy], @unowned UInt32, @error @owned Error);
  return closure #3 in NightingaleDPFLRunner.run(task:useCase:context:)(a1, v6, v7, v8, v9);
}

unint64_t lazy protocol witness table accessor for type NightingalePFLTaskType and conformance NightingalePFLTaskType()
{
  uint64_t v2 = lazy protocol witness table cache variable for type NightingalePFLTaskType and conformance NightingalePFLTaskType;
  if (!lazy protocol witness table cache variable for type NightingalePFLTaskType and conformance NightingalePFLTaskType)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type NightingalePFLTaskType and conformance NightingalePFLTaskType);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type NightingalePFLTaskType and conformance NightingalePFLTaskType;
  if (!lazy protocol witness table cache variable for type NightingalePFLTaskType and conformance NightingalePFLTaskType)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type NightingalePFLTaskType and conformance NightingalePFLTaskType);
    return WitnessTable;
  }
  return v2;
}

uint64_t outlined destroy of PFLError?(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for PFLError();
  uint64_t v4 = *(void *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1)) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  }
  return a1;
}

uint64_t partial apply for closure #8 in NightingaleDPFLRunner.run(task:useCase:context:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #8 in NightingaleDPFLRunner.run(task:useCase:context:)(v1[3], v1[4], v1[5], v1[6], a1);
}

uint64_t partial apply for closure #9 in NightingaleDPFLRunner.run(task:useCase:context:)(void *a1)
{
  return closure #9 in NightingaleDPFLRunner.run(task:useCase:context:)(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

unint64_t lazy protocol witness table accessor for type [Pregnancy] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [Pregnancy] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Pregnancy] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Pregnancy]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [Pregnancy] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type [Pregnancy] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Pregnancy] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Pregnancy]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [Pregnancy] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type [Pregnancy] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Pregnancy] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Pregnancy]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [Pregnancy] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type [PregnancyInvalidReason] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [PregnancyInvalidReason] and conformance [A];
  if (!lazy protocol witness table cache variable for type [PregnancyInvalidReason] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [PregnancyInvalidReason]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [PregnancyInvalidReason] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

void *outlined init with copy of String(void *a1, void *a2)
{
  *a2 = *a1;
  uint64_t v4 = a1[1];
  swift_bridgeObjectRetain();
  uint64_t result = a2;
  a2[1] = v4;
  return result;
}

unint64_t lazy protocol witness table accessor for type SliceDeltaAnchor and conformance SliceDeltaAnchor()
{
  uint64_t v2 = lazy protocol witness table cache variable for type SliceDeltaAnchor and conformance SliceDeltaAnchor;
  if (!lazy protocol witness table cache variable for type SliceDeltaAnchor and conformance SliceDeltaAnchor)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SliceDeltaAnchor and conformance SliceDeltaAnchor);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type SliceDeltaAnchor and conformance SliceDeltaAnchor;
  if (!lazy protocol witness table cache variable for type SliceDeltaAnchor and conformance SliceDeltaAnchor)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type SliceDeltaAnchor and conformance SliceDeltaAnchor);
    return WitnessTable;
  }
  return v2;
}

uint64_t outlined destroy of Pregnancy?(uint64_t a1)
{
  if (*(void *)(a1 + 24)) {
    __swift_destroy_boxed_opaque_existential_1(a1);
  }
  return a1;
}

unint64_t lazy protocol witness table accessor for type [HealthDataRawSampleType] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [HealthDataRawSampleType] and conformance [A];
  if (!lazy protocol witness table cache variable for type [HealthDataRawSampleType] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [HealthDataRawSampleType]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [HealthDataRawSampleType] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type [HealthDataRawSampleType] and conformance [A];
  if (!lazy protocol witness table cache variable for type [HealthDataRawSampleType] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [HealthDataRawSampleType]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [HealthDataRawSampleType] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

uint64_t partial apply for closure #35 in NightingaleDPFLRunner.run(task:useCase:context:)@<X0>(void *a1@<X8>)
{
  return closure #35 in NightingaleDPFLRunner.run(task:useCase:context:)(*(uint64_t **)(v1 + 24), *(uint64_t **)(v1 + 40), *(uint64_t **)(v1 + 48), *(uint64_t **)(v1 + 56), *(uint64_t **)(v1 + 64), *(uint64_t **)(v1 + 72), a1, *(uint64_t **)(v1 + 80), *(uint64_t **)(v1 + 88), *(uint64_t **)(v1 + 96), *(void *)(v1 + 104), *(_DWORD *)(v1 + 112));
}

uint64_t outlined retain of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of (daySHR10: [Float], daySHR10Stats: [Float], nightSHR10: [Float], nightSHR10Stats: [Float], periodStartMean: [Float], periodStartMeanStats: [Float], periodStartStd: [Float], periodStartStdStats: [Float], daysSinceLastPeriodStart: [Float], daysSinceLastPeriodStartStats: [Float], swt: [Float], swtStats: [Float], hrv: [Float], hrvStats: [Float], respiratoryRate: [Float], respiratoryRateStats: [Float], spo2: [Float], spo2Stats: [Float], sliceEndDays: [UInt32], labels: [Float], metrics: [String : Int])(uint64_t a1)
{
  return a1;
}

uint64_t partial apply for closure #37 in NightingaleDPFLRunner.run(task:useCase:context:)(uint64_t a1)
{
  uint64_t v5 = v2;
  *(void *)(v2 + 16) = v2;
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  uint64_t v8 = *(void *)(v1 + 32);
  int v9 = *(_DWORD *)(v1 + 40);
  uint64_t v10 = *(void *)(v1 + 48);
  uint64_t v11 = *(void *)(v1 + 56);
  uint64_t v12 = *(void *)(v1 + 64);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v3;
  *uint64_t v3 = *(void *)(v5 + 16);
  v3[1] = partial apply for thunk for @callee_guaranteed @async () -> (@unowned Int, @unowned Int, @owned [Pregnancy], @unowned UInt32, @error @owned Error);
  return closure #37 in NightingaleDPFLRunner.run(task:useCase:context:)(a1, v6, v7, v8, v9, v10, v11, v12);
}

unint64_t lazy protocol witness table accessor for type [UInt32] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [UInt32] and conformance [A];
  if (!lazy protocol witness table cache variable for type [UInt32] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [UInt32]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [UInt32] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type [UInt32] and conformance [A];
  if (!lazy protocol witness table cache variable for type [UInt32] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [UInt32]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [UInt32] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type [UInt32] and conformance [A];
  if (!lazy protocol witness table cache variable for type [UInt32] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [UInt32]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [UInt32] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

uint64_t outlined destroy of DateComponents?(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DateComponents();
  uint64_t v4 = *(void *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1)) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  }
  return a1;
}

unint64_t lazy protocol witness table accessor for type ClosedRange<UInt32> and conformance <> ClosedRange<A>()
{
  uint64_t v2 = lazy protocol witness table cache variable for type ClosedRange<UInt32> and conformance <> ClosedRange<A>;
  if (!lazy protocol witness table cache variable for type ClosedRange<UInt32> and conformance <> ClosedRange<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ClosedRange<UInt32>);
    lazy protocol witness table accessor for type Int and conformance Int();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type ClosedRange<UInt32> and conformance <> ClosedRange<A>);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type ClosedRange<UInt32> and conformance <> ClosedRange<A>;
  if (!lazy protocol witness table cache variable for type ClosedRange<UInt32> and conformance <> ClosedRange<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ClosedRange<UInt32>);
    lazy protocol witness table accessor for type Int and conformance Int();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type ClosedRange<UInt32> and conformance <> ClosedRange<A>);
    return WitnessTable;
  }
  return v2;
}

uint64_t partial apply for closure #38 in NightingaleDPFLRunner.run(task:useCase:context:)()
{
  return closure #38 in NightingaleDPFLRunner.run(task:useCase:context:)() & 1;
}

uint64_t partial apply for closure #34 in NightingaleDPFLRunner.run(task:useCase:context:)(uint64_t a1)
{
  uint64_t v5 = v2;
  *(void *)(v2 + 16) = v2;
  int v6 = *(_DWORD *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  int v8 = *(_DWORD *)(v1 + 32);
  int v9 = *(_DWORD *)(v1 + 36);
  uint64_t v10 = *(void *)(v1 + 40);
  uint64_t v11 = *(void *)(v1 + 48);
  uint64_t v12 = *(void *)(v1 + 56);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v3;
  *uint64_t v3 = *(void *)(v5 + 16);
  v3[1] = partial apply for thunk for @callee_guaranteed @async () -> (@unowned Int, @unowned Int, @owned [Pregnancy], @unowned UInt32, @error @owned Error);
  return closure #34 in NightingaleDPFLRunner.run(task:useCase:context:)(a1, v6, v7, v8, v9, v10, v11, v12);
}

uint64_t partial apply for closure #33 in NightingaleDPFLRunner.run(task:useCase:context:)(uint64_t a1)
{
  uint64_t v5 = v2;
  *(void *)(v2 + 16) = v2;
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = v1[5];
  uint64_t v10 = v1[6];
  uint64_t v11 = v1[7];
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v3;
  *uint64_t v3 = *(void *)(v5 + 16);
  v3[1] = partial apply for closure #33 in NightingaleDPFLRunner.run(task:useCase:context:);
  return closure #33 in NightingaleDPFLRunner.run(task:useCase:context:)(a1, v6, v7, v8, v9, v10, v11);
}

uint64_t partial apply for closure #33 in NightingaleDPFLRunner.run(task:useCase:context:)()
{
  uint64_t v3 = *v0;
  *(void *)(v3 + 16) = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v3 + 16) + 8);
  return v1();
}

uint64_t partial apply for closure #32 in NightingaleDPFLRunner.run(task:useCase:context:)(uint64_t a1)
{
  uint64_t v5 = v2;
  *(void *)(v2 + 16) = v2;
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = v1[5];
  uint64_t v10 = v1[6];
  uint64_t v11 = v1[7];
  uint64_t v12 = v1[8];
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v3;
  *uint64_t v3 = *(void *)(v5 + 16);
  v3[1] = partial apply for closure #33 in NightingaleDPFLRunner.run(task:useCase:context:);
  return closure #32 in NightingaleDPFLRunner.run(task:useCase:context:)(a1, v6, v7, v8, v9, v10, v11, v12);
}

uint64_t sub_257C75A64()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #22 in NightingaleDPFLRunner.run(task:useCase:context:)(uint64_t a1)
{
  uint64_t v5 = v2;
  *(void *)(v2 + 16) = v2;
  uint64_t v6 = *(void *)(v1 + 16);
  int v7 = *(_DWORD *)(v1 + 24);
  uint64_t v8 = *(void *)(v1 + 32);
  int v9 = *(_DWORD *)(v1 + 40);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v3;
  *uint64_t v3 = *(void *)(v5 + 16);
  v3[1] = partial apply for thunk for @callee_guaranteed @async () -> (@unowned Int, @unowned Int, @owned [Pregnancy], @unowned UInt32, @error @owned Error);
  return closure #22 in NightingaleDPFLRunner.run(task:useCase:context:)(a1, v6, v7, v8, v9);
}

uint64_t partial apply for closure #28 in NightingaleDPFLRunner.run(task:useCase:context:)()
{
  return closure #28 in NightingaleDPFLRunner.run(task:useCase:context:)(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t partial apply for closure #29 in NightingaleDPFLRunner.run(task:useCase:context:)(void *a1)
{
  return closure #29 in NightingaleDPFLRunner.run(task:useCase:context:)(a1, v1) & 1;
}

unint64_t lazy protocol witness table accessor for type HealthDataRawSampleType and conformance HealthDataRawSampleType()
{
  uint64_t v2 = lazy protocol witness table cache variable for type HealthDataRawSampleType and conformance HealthDataRawSampleType;
  if (!lazy protocol witness table cache variable for type HealthDataRawSampleType and conformance HealthDataRawSampleType)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HealthDataRawSampleType and conformance HealthDataRawSampleType);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type HealthDataRawSampleType and conformance HealthDataRawSampleType;
  if (!lazy protocol witness table cache variable for type HealthDataRawSampleType and conformance HealthDataRawSampleType)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HealthDataRawSampleType and conformance HealthDataRawSampleType);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type HealthDataRawSampleType and conformance HealthDataRawSampleType;
  if (!lazy protocol witness table cache variable for type HealthDataRawSampleType and conformance HealthDataRawSampleType)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HealthDataRawSampleType and conformance HealthDataRawSampleType);
    return WitnessTable;
  }
  return v2;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t *__swift_allocate_boxed_opaque_existential_0(uint64_t *result)
{
  uint64_t v3 = result;
  if ((*(_DWORD *)(*(void *)(result[3] - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v1 = swift_allocBox();
    uint64_t result = v2;
    *uint64_t v3 = v1;
  }
  return result;
}

uint64_t partial apply for closure #18 in NightingaleDPFLRunner.run(task:useCase:context:)(uint64_t a1)
{
  uint64_t v5 = v2;
  *(void *)(v2 + 16) = v2;
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v3;
  *uint64_t v3 = *(void *)(v5 + 16);
  v3[1] = partial apply for closure #33 in NightingaleDPFLRunner.run(task:useCase:context:);
  return closure #18 in NightingaleDPFLRunner.run(task:useCase:context:)(a1, v6, v7, v8);
}

unint64_t lazy protocol witness table accessor for type PregnancySource and conformance PregnancySource()
{
  uint64_t v2 = lazy protocol witness table cache variable for type PregnancySource and conformance PregnancySource;
  if (!lazy protocol witness table cache variable for type PregnancySource and conformance PregnancySource)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type PregnancySource and conformance PregnancySource);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type PregnancySource and conformance PregnancySource;
  if (!lazy protocol witness table cache variable for type PregnancySource and conformance PregnancySource)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type PregnancySource and conformance PregnancySource);
    return WitnessTable;
  }
  return v2;
}

id @nonobjc HKHealthStore.init()()
{
  return objc_msgSend(v0, sel_init);
}

uint64_t createStorage<A>(capacity:type:)(uint64_t a1)
{
  if (a1) {
    return static UnsafeMutablePointer.allocate(capacity:)();
  }
  else {
    return 0;
  }
}

uint64_t serialize(_:at:)(uint64_t result, unsigned char **a2)
{
  uint64_t v2 = *a2;
  *uint64_t v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t closure #1 in osLogInternal(_:log:type:)(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t partial apply for closure #1 in osLogInternal(_:log:type:)(uint64_t (**a1)(uint64_t, uint64_t, uint64_t))
{
  return closure #1 in osLogInternal(_:log:type:)(a1, v1[2], v1[3], v1[4]);
}

unint64_t lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [(_:_:_:)] and conformance [A];
  if (!lazy protocol witness table cache variable for type [(_:_:_:)] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [(_:_:_:)]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [(_:_:_:)] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

uint64_t destroyStorage<A>(_:count:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  if (result)
  {
    UnsafeMutablePointer.deinitialize(count:)();
    return MEMORY[0x25A2C0D00](v3, a3);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

uint64_t partial apply for closure #2 in NightingaleDPFLRunner.runTraining(modelPath:hyperParams:historicalPeriods:pregnancies:today:features:existingMetrics:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #2 in NightingaleDPFLRunner.runTraining(modelPath:hyperParams:historicalPeriods:pregnancies:today:features:existingMetrics:)(*(void *)(v1 + 16), a1);
}

uint64_t *partial apply for closure #3 in NightingaleDPFLRunner.runTraining(modelPath:hyperParams:historicalPeriods:pregnancies:today:features:existingMetrics:)@<X0>(float *a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(uint64_t **)(v1 + 32);
  uint64_t v5 = *(void *)(v1 + 40);
  uint64_t v6 = *(void *)(v1 + 48);
  uint64_t v7 = *(void *)(v1 + 56);
  uint64_t v8 = *(void *)(v1 + 64);
  uint64_t v9 = *(void *)(v1 + 72);
  uint64_t v10 = *(void *)(v1 + 80);
  uint64_t v11 = *(void *)(v1 + 88);
  uint64_t v27 = *(void *)(v1 + 104);
  uint64_t v28 = *(void *)(v1 + 112);
  uint64_t v29 = *(void *)(v1 + 120);
  uint64_t v30 = *(void *)(v1 + 128);
  uint64_t v31 = *(void *)(v1 + 136);
  uint64_t v32 = *(void *)(v1 + 144);
  uint64_t v12 = *(void *)(v1 + 152);
  uint64_t v13 = *(void *)(v1 + 160);
  uint64_t v14 = *(void *)(v1 + 168);
  uint64_t v15 = *(void *)(v1 + 176);
  uint64_t v16 = *(void *)(v1 + 184);
  uint64_t v17 = *(void *)(v1 + 192);
  uint64_t v18 = *(void *)(v1 + 200);
  uint64_t v19 = *(void *)(v1 + 208);
  uint64_t v20 = *(void *)(v1 + 216);
  uint64_t v21 = *(void *)(v1 + 224);
  uint64_t v22 = *(void *)(v1 + 232);
  uint64_t v23 = *(void *)(v1 + 240);
  uint64_t v24 = *(void *)(v1 + 248);
  uint64_t v25 = *(void *)(v1 + 256);
  v33[0] = *(void *)(v1 + 96);
  v33[1] = v27;
  v33[2] = v28;
  v33[3] = v29;
  v33[4] = v30;
  v33[5] = v31;
  v33[6] = v32;
  v33[7] = v12;
  v33[8] = v13;
  v33[9] = v14;
  v33[10] = v15;
  v33[11] = v16;
  v33[12] = v17;
  v33[13] = v18;
  v33[14] = v19;
  v33[15] = v20;
  v33[16] = v21;
  v33[17] = v22;
  v33[18] = v23;
  v33[19] = v24;
  v33[20] = v25;
  return closure #3 in NightingaleDPFLRunner.runTraining(modelPath:hyperParams:historicalPeriods:pregnancies:today:features:existingMetrics:)(v2 & 1, v3, v4, v5, v6, v7, v8, v9, a1, v10, v11, v33, *(void *)(v1 + 264), *(void *)(v1 + 272), *(_DWORD *)(v1 + 280), *(void *)(v1 + 288));
}

uint64_t partial apply for closure #6 in NightingaleDPFLRunner.runTraining(modelPath:hyperParams:historicalPeriods:pregnancies:today:features:existingMetrics:)()
{
  return closure #6 in NightingaleDPFLRunner.runTraining(modelPath:hyperParams:historicalPeriods:pregnancies:today:features:existingMetrics:)();
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (((a2 >> 62) & 3) == 1) {
    return swift_release();
  }
  if (((a2 >> 62) & 3) == 2)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (((a2 >> 62) & 3) == 1) {
    return swift_retain();
  }
  if (((a2 >> 62) & 3) == 2)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EspressoFunction and conformance EspressoFunction()
{
  uint64_t v2 = lazy protocol witness table cache variable for type EspressoFunction and conformance EspressoFunction;
  if (!lazy protocol witness table cache variable for type EspressoFunction and conformance EspressoFunction)
  {
    type metadata accessor for EspressoFunction();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type EspressoFunction and conformance EspressoFunction);
    return WitnessTable;
  }
  return v2;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of DefaultStringInterpolation()
{
}

uint64_t partial apply for closure #10 in NightingaleDPFLRunner.runPregnanciesDistribution(hyperParams:modelPath:numberOfRawPregnancies:invalidReasons:swtAvailability:existingMetrics:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #10 in NightingaleDPFLRunner.runPregnanciesDistribution(hyperParams:modelPath:numberOfRawPregnancies:invalidReasons:swtAvailability:existingMetrics:)(*(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 72), a1, *(float *)(v1 + 88), *(float *)(v1 + 92), *(void *)(v1 + 80));
}

void partial apply for closure #1 in NightingaleDPFLRunner.runDemographics(hyperParams:modelPath:pregnancies:historicalPeriods:swtAvailabilityStats:numberOfSlices:age:earliestPregrancyLMP:latestPregrancyEndDay:existingMetrics:)(void *a1@<X8>)
{
  LODWORD(v6) = *(_DWORD *)(v1 + 16);
  BYTE4(v6) = *(unsigned char *)(v1 + 20) & 1;
  LODWORD(v7) = *(_DWORD *)(v1 + 24);
  BYTE4(v7) = *(unsigned char *)(v1 + 28) & 1;
  LODWORD(v5) = *(_DWORD *)(v1 + 64);
  BYTE4(v5) = *(unsigned char *)(v1 + 68) & 1;
  LODWORD(v4) = *(_DWORD *)(v1 + 76);
  BYTE4(v4) = *(unsigned char *)(v1 + 80) & 1;
  LODWORD(v3) = *(_DWORD *)(v1 + 92);
  BYTE4(v3) = *(unsigned char *)(v1 + 96) & 1;
  LODWORD(v2) = *(_DWORD *)(v1 + 108);
  BYTE4(v2) = *(unsigned char *)(v1 + 112) & 1;
  closure #1 in NightingaleDPFLRunner.runDemographics(hyperParams:modelPath:pregnancies:historicalPeriods:swtAvailabilityStats:numberOfSlices:age:earliestPregrancyLMP:latestPregrancyEndDay:existingMetrics:)(v6, v7, *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), v5, v4, a1, *(float *)(v1 + 72), *(float *)(v1 + 84), *(float *)(v1 + 88), *(float *)(v1 + 100), *(float *)(v1 + 104), *(float *)(v1 + 116), *(float *)(v1 + 120), v3, v2);
}

void *partial apply for closure #1 in NightingaleDPFLRunner.runEvals(evalModels:task:hyperParams:historicalPeriods:pregnancies:today:features:existingMetrics:)()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = *(void *)(v0 + 48);
  uint64_t v5 = *(void *)(v0 + 56);
  uint64_t v6 = *(void *)(v0 + 64);
  uint64_t v7 = *(void *)(v0 + 72);
  uint64_t v8 = *(void *)(v0 + 80);
  uint64_t v9 = *(void *)(v0 + 88);
  uint64_t v10 = *(void *)(v0 + 96);
  uint64_t v11 = *(void *)(v0 + 104);
  uint64_t v12 = *(void *)(v0 + 112);
  uint64_t v13 = *(void *)(v0 + 120);
  uint64_t v14 = *(void *)(v0 + 128);
  uint64_t v15 = *(void *)(v0 + 136);
  uint64_t v16 = *(void *)(v0 + 144);
  uint64_t v17 = *(void *)(v0 + 152);
  uint64_t v18 = *(void *)(v0 + 160);
  uint64_t v19 = *(void *)(v0 + 168);
  uint64_t v20 = *(void *)(v0 + 176);
  uint64_t v21 = *(void *)(v0 + 184);
  uint64_t v22 = *(void *)(v0 + 192);
  uint64_t v23 = *(void *)(v0 + 200);
  v25[0] = *(void *)(v0 + 40);
  v25[1] = v4;
  v25[2] = v5;
  v25[3] = v6;
  v25[4] = v7;
  v25[5] = v8;
  v25[6] = v9;
  v25[7] = v10;
  v25[8] = v11;
  v25[9] = v12;
  v25[10] = v13;
  v25[11] = v14;
  v25[12] = v15;
  v25[13] = v16;
  v25[14] = v17;
  v25[15] = v18;
  v25[16] = v19;
  v25[17] = v20;
  v25[18] = v21;
  v25[19] = v22;
  v25[20] = v23;
  return closure #1 in NightingaleDPFLRunner.runEvals(evalModels:task:hyperParams:historicalPeriods:pregnancies:today:features:existingMetrics:)(v1, v2, v3, (uint64_t)v25, *(void *)(v0 + 208), *(void *)(v0 + 216), *(void *)(v0 + 224), *(void *)(v0 + 232), *(void *)(v0 + 240), *(void *)(v0 + 248), *(_DWORD *)(v0 + 256), *(void *)(v0 + 264));
}

unint64_t lazy protocol witness table accessor for type Date and conformance Date()
{
  uint64_t v2 = lazy protocol witness table cache variable for type Date and conformance Date;
  if (!lazy protocol witness table cache variable for type Date and conformance Date)
  {
    type metadata accessor for Date();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date);
    return WitnessTable;
  }
  return v2;
}

uint64_t outlined init with take of ClosedRange<Date>(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 32);
  v6(a2, a1);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClosedRange<Date>);
  ((void (*)(uint64_t, uint64_t, uint64_t))v6)(a2 + *(int *)(v2 + 36), a1 + *(int *)(v2 + 36), v5);
  return a2;
}

uint64_t outlined destroy of ClosedRange<Date>(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void (**)(uint64_t))(*(void *)(v3 - 8) + 8);
  v4(a1);
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClosedRange<Date>);
  ((void (*)(uint64_t, uint64_t))v4)(a1 + *(int *)(v1 + 36), v3);
  return a1;
}

uint64_t sub_257C76A90()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in NightingaleDPFLRunner.queryPregnancies(hyperParams:)@<X0>(void *a1@<X8>)
{
  return implicit closure #1 in NightingaleDPFLRunner.queryPregnancies(hyperParams:)(*(void *)(v1 + 16), a1);
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = a3;
  v7[1] = a4;
  uint64_t v8 = *(void *)(a3 - 8);
  uint64_t v9 = a3 - 8;
  v7[0] = (*(void *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = (void (*)(void))MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)v7 - v7[0];
  v4();
  uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v13 = v5;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v11);
  return v12;
}

uint64_t sub_257C76BBC()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)()
{
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Pregnancy?]);
  unint64_t v1 = lazy protocol witness table accessor for type [Pregnancy?] and conformance [A]();
  return implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(v5, v3, v4, v1);
}

unint64_t lazy protocol witness table accessor for type [Pregnancy?] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [Pregnancy?] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Pregnancy?] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Pregnancy?]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [Pregnancy?] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type [Pregnancy?] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Pregnancy?] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Pregnancy?]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [Pregnancy?] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type [Pregnancy?] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Pregnancy?] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Pregnancy?]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [Pregnancy?] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(uint64_t (*a1)(void))
{
  return a1();
}

void *closure #1 in OSLogArguments.append(_:)(void *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v4 = a4();
  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v5, a3);
  uint64_t v8 = *a1;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  uint64_t result = a1;
  *a1 = v8 + 8;
  return result;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v14 = specialized _StringGuts._deconstructUTF8<A>(scratch:)((uint64_t)&v17, 0, 0, 1, a1, a2);
  uint64_t v15 = v3;
  __int16 v16 = v4;
  uint64_t v11 = v17;
  if (v14)
  {
    v12[3] = swift_getObjectType();
    v12[0] = v14;
    uint64_t v6 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, v6);
      *a3 = v6 + 32;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  }
  else
  {
    void v13[3] = MEMORY[0x263F8DBE0];
    v13[0] = a1;
    v13[1] = a2;
    uint64_t v7 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v13, v7);
      *a3 = v7 + 32;
    }
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }
  return v11;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(uint64_t result, void *a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v17 = (void *)result;
  uint64_t v24 = a6;
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (a2)
      {
        if (!a3) {
          __break(1u);
        }
        int64_t v16 = a3 - (void)a2;
      }
      else
      {
        int64_t v16 = 0;
      }
      int64_t v15 = (a6 & 0xF00000000000000uLL) >> 56;
      if (v15 < v16)
      {
        if (a2)
        {
          v21[0] = a5;
          v21[1] = a6 & (-(uint64_t)bswap64(0xFFuLL) - 1);
          specialized UnsafeMutableRawPointer.initializeMemory<A>(as:from:count:)(v21, v15, a2);
          UnsafeMutableRawBufferPointer.subscript.setter();
          void *v17 = a2;
          uint64_t v11 = 0;
          uint64_t v12 = v15;
          char v13 = 1;
          char v14 = 0;
LABEL_26:
          void v21[2] = v11;
          v21[3] = v12;
          char v22 = v13 & 1;
          char v23 = v14 & 1;
          return (uint64_t)v11;
        }
        goto LABEL_28;
      }
    }
LABEL_13:
    uint64_t v6 = _StringGuts._allocateForDeconstruct()(a5, a6);
    void *v17 = v7;
    uint64_t v11 = v6;
    uint64_t v12 = v8;
    char v13 = 0;
    char v14 = 1;
    goto LABEL_26;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    if ((a6 & 0xFFFFFFFFFFFFFFFLL) != 0xFFFFFFFFFFFFFFE0)
    {
      uint64_t v10 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
      goto LABEL_21;
    }
    __break(1u);
  }
  uint64_t result = _StringObject.sharedUTF8.getter();
  if (!result) {
    goto LABEL_29;
  }
  uint64_t v10 = result;
LABEL_21:
  void *v17 = v10;
  if (a6 < 0)
  {
    uint64_t v9 = 0;
LABEL_25:
    uint64_t v11 = (void *)v9;
    uint64_t v12 = a5 & 0xFFFFFFFFFFFFLL;
    char v13 = 0;
    char v14 = 0;
    goto LABEL_26;
  }
  if ((a6 & 0xFFFFFFFFFFFFFFFLL) != 0)
  {
    swift_unknownObjectRetain();
    uint64_t v9 = a6 & 0xFFFFFFFFFFFFFFFLL;
    goto LABEL_25;
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

void *specialized UnsafeMutableRawPointer.initializeMemory<A>(as:from:count:)(const void *a1, size_t a2, void *__dst)
{
  return __dst;
}

void *_StringGuts._allocateForDeconstruct()(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  uint64_t v4 = v6[2];
  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v4);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v4, 0);
  Array._endMutation()();
  swift_retain();
  uint64_t v5 = specialized Array.count.getter((uint64_t)v6);
  swift_bridgeObjectRelease();
  uint64_t result = (void *)v5;
  if (!__OFSUB__(v5, 1)) {
    return v6;
  }
  __break(1u);
  return result;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2)
{
  v8[2] = a2;
  if ((a2 & 0x1000000000000000) != 0)
  {
    uint64_t v7 = String.UTF8View._foreignCount()();
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    uint64_t v7 = (a2 & 0xF00000000000000uLL) >> 56;
  }
  else
  {
    uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v7) {
    return (void *)specialized ContiguousArray.init()();
  }
  uint64_t v5 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v7, 0);
  swift_retain();
  swift_release();
  uint64_t result = (void *)_StringGuts.copyUTF8(into:)();
  uint64_t v6 = result;
  if (v3)
  {
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t result = v8;
    v8[0] = 0;
    v8[1] = 0xE000000000000000;
    outlined destroy of DefaultStringInterpolation();
    if (v6 == (void *)v7) {
      return v5;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  uint64_t v4 = *v0;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  uint64_t *v0 = v4;
  if ((result & 1) == 0)
  {
    uint64_t v2 = specialized Array.count.getter(*v3);
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 + 1, 1, *v3);
    *char v3 = result;
  }
  return result;
}

uint64_t specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t result)
{
  if (*(void *)(*(void *)v1 + 24) >> 1 < result + 1)
  {
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(*(void *)(*(void *)v1 + 24) >> 1 != 0, result + 1, 1, *v2);
    *uint64_t v2 = result;
  }
  return result;
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, char a2)
{
  uint64_t v5 = a1 + 1;
  uint64_t v4 = *v2;
  swift_bridgeObjectRetain();
  *(void *)(v4 + 16) = v5;
  swift_release();
  uint64_t v6 = *v2;
  swift_retain();
  *(unsigned char *)(v6 + 32 + a1) = a2;
  return swift_release();
}

uint64_t specialized Array.count.getter(uint64_t a1)
{
  return specialized Array._getCount()(a1);
}

void *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  if (a2 < a1) {
    uint64_t v7 = a1;
  }
  else {
    uint64_t v7 = a2;
  }
  if (v7)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v6 = (void *)swift_allocObject();
    if (_swift_stdlib_has_malloc_size())
    {
      size_t v4 = (size_t)v6 + _swift_stdlib_malloc_size(v6);
      swift_retain();
      v6[2] = a1;
      v6[3] = 2 * (v4 - (void)(v6 + 4));
    }
    else
    {
      swift_retain();
      v6[2] = a1;
      v6[3] = 2 * v7;
    }
    swift_release();
    return v6;
  }
  else
  {
    uint64_t v3 = MEMORY[0x263F8EE78];
    swift_retain();
    return (void *)v3;
  }
}

uint64_t specialized ContiguousArray.init()()
{
  uint64_t v1 = MEMORY[0x263F8EE78];
  swift_retain();
  return v1;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3, uint64_t a4)
{
  swift_retain();
  uint64_t result = swift_retain();
  uint64_t v16 = *(void *)(a4 + 24) >> 1;
  if (a3)
  {
    if (v16 < a2)
    {
      if ((unsigned __int128)(v16 * (__int128)2) >> 64 != (2 * v16) >> 63)
      {
        __break(1u);
        return result;
      }
      if (2 * v16 < a2) {
        uint64_t v11 = a2;
      }
      else {
        uint64_t v11 = 2 * v16;
      }
    }
    else
    {
      uint64_t v11 = *(void *)(a4 + 24) >> 1;
    }
  }
  else
  {
    uint64_t v11 = a2;
  }
  int64_t v10 = *(void *)(a4 + 16);
  if (v11 < v10) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v11;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v8 = (void *)swift_allocObject();
    if (_swift_stdlib_has_malloc_size())
    {
      size_t v6 = (size_t)v8 + _swift_stdlib_malloc_size(v8);
      swift_retain();
      v8[2] = v10;
      void v8[3] = 2 * (v6 - (void)(v8 + 4));
    }
    else
    {
      swift_retain();
      v8[2] = v10;
      void v8[3] = 2 * v9;
    }
    swift_release();
    uint64_t v7 = (char *)v8;
  }
  else
  {
    uint64_t v5 = (char *)MEMORY[0x263F8EE78];
    swift_retain();
    uint64_t v7 = v5;
  }
  if (a1)
  {
    swift_release();
    swift_bridgeObjectRelease();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(a4 + 32), v10, v7 + 32);
    *(void *)(a4 + 16) = 0;
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_retain();
    swift_release();
    specialized UnsafeMutablePointer.initialize(from:count:)((const void *)(a4 + 32), v10, v7 + 32);
    swift_unknownObjectRelease();
  }
  return (uint64_t)v7;
}

uint64_t specialized Array._getCount()(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void *specialized UnsafeMutablePointer.initialize(from:count:)(const void *a1, size_t a2, void *__dst)
{
  return memcpy(__dst, a1, a2);
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *result, size_t a2, char *a3)
{
  if (a3 < result || a3 >= &result[a2] || a3 != result) {
    return (char *)memmove(a3, result, a2);
  }
  return result;
}

unsigned char **closure #1 in OSLogArguments.append(_:)(unsigned char **result, uint64_t a2, uint64_t a3, char a4)
{
  size_t v4 = *result;
  *size_t v4 = a4;
  *uint64_t result = v4 + 1;
  return result;
}

uint64_t sub_257C77C10()
{
  return swift_deallocObject();
}

unsigned char **partial apply for closure #1 in OSLogArguments.append(_:)(unsigned char **a1, uint64_t a2, uint64_t a3)
{
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

uint64_t sub_257C77C44()
{
  return swift_deallocObject();
}

uint64_t sub_257C77C70()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)()
{
  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_257C77CBC()
{
  return swift_deallocObject();
}

void *partial apply for closure #1 in OSLogArguments.append(_:)(void *a1, uint64_t a2, uint64_t *a3)
{
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for NightingaleDReachLocation(unsigned __int8 *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 <= 0xF2) {
      goto LABEL_15;
    }
    unsigned int v7 = ((a2 + 13) >> 8) + 1;
    int v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000) {
        int v2 = 4;
      }
      else {
        int v2 = 2;
      }
      int v8 = v2;
    }
    if (v8 == 1) {
      int v6 = a1[1];
    }
    else {
      int v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    }
    if (v6)
    {
      int v5 = (*a1 | ((v6 - 1) << 8)) + 242;
    }
    else
    {
LABEL_15:
      int v3 = *a1 - 14;
      if (v3 < 0) {
        int v3 = -1;
      }
      int v5 = v3;
    }
  }
  else
  {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for NightingaleDReachLocation(unsigned char *result, unsigned int a2, unsigned int a3)
{
  int v7 = 0;
  if (a3 > 0xF2)
  {
    unsigned int v5 = ((a3 + 13) >> 8) + 1;
    int v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000) {
        int v3 = 4;
      }
      else {
        int v3 = 2;
      }
      int v6 = v3;
    }
    int v7 = v6;
  }
  if (a2 > 0xF2)
  {
    unsigned int v4 = ((a2 - 243) >> 8) + 1;
    *uint64_t result = a2 + 13;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2) {
      *uint64_t result = a2 + 13;
    }
  }
  return result;
}

uint64_t getEnumTag for NightingaleDReachLocation(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *destructiveInjectEnumTag for NightingaleDReachLocation(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for NightingaleDReachLocation()
{
  return &type metadata for NightingaleDReachLocation;
}

uint64_t type metadata accessor for NightingaleDPFLRunner()
{
  return self;
}

uint64_t method lookup function for NightingaleDPFLRunner()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NightingaleDPFLRunner.performCustomConsent()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of NightingaleDPFLRunner.isDataAvailable()()
{
  uint64_t v4 = v1;
  *(void *)(v1 + 16) = v1;
  unsigned int v5 = (uint64_t (*)(void))(*(void *)(*(void *)v0 + 200) + **(int **)(*(void *)v0 + 200));
  int v2 = (void *)swift_task_alloc();
  *(void *)(v4 + 24) = v2;
  *int v2 = *(void *)(v4 + 16);
  v2[1] = protocol witness for PFLTaskRunner.isDataAvailable() in conformance NightingaleDPFLRunner;
  return v5();
}

uint64_t dispatch thunk of NightingaleDPFLRunner.shouldContinueAfterFailure(task:useCase:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))() & 1;
}

uint64_t dispatch thunk of NightingaleDPFLRunner.run(task:useCase:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = v5;
  *(void *)(v5 + 16) = v5;
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v4 + 216)
                                                                   + **(int **)(*(void *)v4 + 216));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v8 + 24) = v6;
  *uint64_t v6 = *(void *)(v8 + 16);
  v6[1] = dispatch thunk of NightingaleDPFLRunner.run(task:useCase:context:);
  return v12(a1, a2, a3, a4);
}

uint64_t dispatch thunk of NightingaleDPFLRunner.run(task:useCase:context:)(uint64_t a1)
{
  uint64_t v4 = *v1;
  *(void *)(v4 + 16) = *v1;
  swift_task_dealloc();
  int v2 = *(uint64_t (**)(uint64_t))(*(void *)(v4 + 16) + 8);
  return v2(a1);
}

unint64_t base witness table accessor for Equatable in NightingaleDReachLocation()
{
  return lazy protocol witness table accessor for type NightingaleDReachLocation and conformance NightingaleDReachLocation();
}

void *outlined init with copy of Pregnancy?(void *a1, void *a2)
{
  if (a1[3])
  {
    uint64_t v2 = a1[3];
    a2[3] = v2;
    a2[4] = a1[4];
    (**(void (***)(void))(v2 - 8))();
  }
  else
  {
    memcpy(a2, a1, 0x28uLL);
  }
  return a2;
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v2;
  (**(void (***)(uint64_t))(v2 - 8))(a2);
  return a2;
}

uint64_t _swift_stdlib_has_malloc_size()
{
  return 1;
}

size_t _swift_stdlib_malloc_size(const void *a1)
{
  return malloc_size(a1);
}

unint64_t lazy protocol witness table accessor for type [[String : [Float]]] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [[String : [Float]]] and conformance [A];
  if (!lazy protocol witness table cache variable for type [[String : [Float]]] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [[String : [Float]]]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [[String : [Float]]] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type [Float] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [Float] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Float] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Float]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [Float] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type [Float] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Float] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Float]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [Float] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type [Float] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Float] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Float]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [Float] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type [Float] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Float] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Float]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [Float] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type [Float] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Float] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Float]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [Float] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

void *outlined init with copy of [Float](uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  swift_bridgeObjectRetain();
  uint64_t result = a2;
  *a2 = v4;
  return result;
}

uint64_t sub_257C78A24()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #18 in NightingaleDPFLRunner.run(task:useCase:context:)(uint64_t a1)
{
  uint64_t v5 = v2;
  *(void *)(v2 + 16) = v2;
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  int v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v3;
  *int v3 = *(void *)(v5 + 16);
  v3[1] = partial apply for closure #33 in NightingaleDPFLRunner.run(task:useCase:context:);
  return closure #1 in closure #18 in NightingaleDPFLRunner.run(task:useCase:context:)(a1, v6, v7);
}

uint64_t sub_257C78B40()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #32 in NightingaleDPFLRunner.run(task:useCase:context:)(uint64_t a1)
{
  uint64_t v5 = v2;
  *(void *)(v2 + 16) = v2;
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  int v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v3;
  *int v3 = *(void *)(v5 + 16);
  v3[1] = partial apply for closure #33 in NightingaleDPFLRunner.run(task:useCase:context:);
  return closure #1 in closure #32 in NightingaleDPFLRunner.run(task:useCase:context:)(a1, v6, v7, v8);
}

uint64_t sub_257C78C70()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #33 in NightingaleDPFLRunner.run(task:useCase:context:)(uint64_t a1)
{
  uint64_t v5 = v2;
  *(void *)(v2 + 16) = v2;
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  int v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v3;
  *int v3 = *(void *)(v5 + 16);
  v3[1] = partial apply for closure #33 in NightingaleDPFLRunner.run(task:useCase:context:);
  return closure #1 in closure #33 in NightingaleDPFLRunner.run(task:useCase:context:)(a1, v6, v7, v8);
}

uint64_t sub_257C78DA0()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #34 in NightingaleDPFLRunner.run(task:useCase:context:)(uint64_t a1)
{
  uint64_t v5 = v2;
  *(void *)(v2 + 16) = v2;
  uint64_t v6 = *(void *)(v1 + 16);
  int v7 = *(_DWORD *)(v1 + 24);
  int v8 = *(_DWORD *)(v1 + 28);
  int v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v3;
  *int v3 = *(void *)(v5 + 16);
  v3[1] = partial apply for thunk for @callee_guaranteed @async () -> (@unowned Int, @unowned Int, @owned [Pregnancy], @unowned UInt32, @error @owned Error);
  return closure #1 in closure #34 in NightingaleDPFLRunner.run(task:useCase:context:)(a1, v6, v7, v8);
}

uint64_t sub_257C78EB8()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in closure #37 in NightingaleDPFLRunner.run(task:useCase:context:)(uint64_t a1)
{
  uint64_t v5 = v2;
  *(void *)(v2 + 16) = v2;
  uint64_t v6 = *(void *)(v1 + 16);
  int v7 = *(_DWORD *)(v1 + 24);
  uint64_t v8 = *(void *)(v1 + 32);
  int v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v3;
  *int v3 = *(void *)(v5 + 16);
  v3[1] = partial apply for thunk for @callee_guaranteed @async () -> (@unowned Int, @unowned Int, @owned [Pregnancy], @unowned UInt32, @error @owned Error);
  return closure #3 in closure #37 in NightingaleDPFLRunner.run(task:useCase:context:)(a1, v6, v7, v8);
}

uint64_t sub_257C78FD8()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #3 in NightingaleDPFLRunner.run(task:useCase:context:)(uint64_t a1)
{
  uint64_t v5 = v2;
  *(void *)(v2 + 16) = v2;
  uint64_t v6 = *(void *)(v1 + 16);
  int v7 = *(_DWORD *)(v1 + 24);
  uint64_t v8 = *(void *)(v1 + 32);
  int v9 = *(_DWORD *)(v1 + 40);
  int v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v3;
  *int v3 = *(void *)(v5 + 16);
  v3[1] = partial apply for thunk for @callee_guaranteed @async () -> (@unowned Int, @unowned Int, @owned [Pregnancy], @unowned UInt32, @error @owned Error);
  return closure #1 in closure #3 in NightingaleDPFLRunner.run(task:useCase:context:)(a1, v6, v7, v8, v9);
}

uint64_t HealthDataStoreQuery.__allocating_init(store:)(void *a1)
{
  return HealthDataStoreQuery.init(store:)(a1);
}

uint64_t HealthDataFlowSamples.sampleType.getter()
{
  swift_beginAccess();
  unsigned int v2 = *(unsigned __int8 *)(v0 + 16);
  swift_endAccess();
  return v2;
}

uint64_t HealthDataFlowSamples.sampleType.setter(char a1)
{
  swift_beginAccess();
  *(unsigned char *)(v1 + 16) = a1;
  return swift_endAccess();
}

uint64_t (*HealthDataFlowSamples.sampleType.modify())()
{
  return HealthDataFlowSamples.sampleType.modify;
}

uint64_t HealthDataFlowSamples.sampleType.modify()
{
  return swift_endAccess();
}

uint64_t HealthDataFlowSamples.results.getter()
{
  swift_beginAccess();
  uint64_t v2 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  swift_endAccess();
  return v2;
}

uint64_t HealthDataFlowSamples.results.setter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_beginAccess();
  *(void *)(v1 + 24) = a1;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t (*HealthDataFlowSamples.results.modify())()
{
  return HealthDataFlowSamples.sampleType.modify;
}

uint64_t one-time initialization function for mapping()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, UInt8));
  _allocateUninitializedArray<A>(_:)();
  *(void *)uint64_t v0 = 0;
  *(unsigned char *)(v0 + 8) = 0;
  *(void *)(v0 + 16) = 1;
  *(unsigned char *)(v0 + 24) = 2;
  *(void *)(v0 + 32) = 2;
  *(unsigned char *)(v0 + 40) = 2;
  *(void *)(v0 + 48) = 3;
  *(unsigned char *)(v0 + 56) = 2;
  *(void *)(v0 + 64) = 4;
  *(unsigned char *)(v0 + 72) = 3;
  *(void *)(v0 + 80) = 5;
  *(unsigned char *)(v0 + 88) = 0;
  _finalizeUninitializedArray<A>(_:)();
  uint64_t result = Dictionary.init(dictionaryLiteral:)();
  static HealthDataFlowSamples.mapping = result;
  return result;
}

uint64_t *HealthDataFlowSamples.mapping.unsafeMutableAddressor()
{
  if (one-time initialization token for mapping != -1) {
    swift_once();
  }
  return &static HealthDataFlowSamples.mapping;
}

uint64_t HealthDataFlowSamples.__allocating_init(sampleType:)(char a1)
{
  return HealthDataFlowSamples.init(sampleType:)(a1);
}

uint64_t HealthDataFlowSamples.init(sampleType:)(char a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt32, UInt8));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v1 = Dictionary.init(dictionaryLiteral:)();
  uint64_t result = v4;
  *(void *)(v4 + 24) = v1;
  *(unsigned char *)(v4 + 16) = a1;
  return result;
}

uint64_t HealthDataFlowSamples.result.getter()
{
  swift_beginAccess();
  uint64_t v2 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  swift_endAccess();
  return v2;
}

void HealthDataFlowSamples.append(_:)(uint64_t a1)
{
  uint64_t v10 = a1;
  uint64_t v33 = 0;
  uint64_t v32 = 0;
  id v29 = 0;
  *(_DWORD *)&v28[3] = 0;
  uint64_t v12 = 0;
  uint64_t v17 = type metadata accessor for Date();
  uint64_t v15 = *(void *)(v17 - 8);
  uint64_t v16 = v17 - 8;
  unint64_t v11 = (*(void *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v18 = (char *)v4 - v11;
  uint64_t v33 = MEMORY[0x270FA5388](v10);
  uint64_t v32 = v1;
  char v13 = v31;
  outlined init with copy of Any(v33, (uint64_t)v31);
  type metadata accessor for HKCategorySample();
  swift_dynamicCast();
  id v14 = v30;
  id v29 = v30;
  id v2 = v30;
  id v20 = objc_msgSend(v14, sel_startDate);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  *(Swift::UInt32_optional *)&uint64_t v3 = Date.toJulianDay()();
  *(void *)&v28[11] = v3;
  int v19 = v3;
  int v21 = BYTE4(v3);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v17);

  if ((v21 & 1) == 0)
  {
    int v9 = v19;
    int v5 = v19;
    *(_DWORD *)&v28[3] = v19;
    uint64_t v6 = *HealthDataFlowSamples.mapping.unsafeMutableAddressor();
    swift_bridgeObjectRetain();
    id v27 = objc_msgSend(v14, sel_value);
    MEMORY[0x25A2C04B0](v28, &v27, v6, MEMORY[0x263F8D6C8], MEMORY[0x263F8E778], MEMORY[0x263F8D6D8]);
    int v7 = v28[0];
    int v8 = v28[1];
    swift_bridgeObjectRelease();
    char v25 = v7;
    char v26 = v8 & 1;
    if (v8) {
      v28[2] = 0;
    }
    else {
      v28[2] = v25;
    }
    v4[1] = v24;
    v24[0] = v28[2];
    v24[1] = 0;
    v4[0] = &v23;
    int v23 = v5;
    v4[2] = &v22;
    swift_beginAccess();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : UInt8]);
    Dictionary.subscript.setter();
    swift_endAccess();
  }
}

uint64_t HealthDataFlowSamples.deinit()
{
  outlined destroy of [A]();
  return v1;
}

uint64_t HealthDataFlowSamples.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t protocol witness for HealthDataQueryResult.result.getter in conformance HealthDataFlowSamples@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = HealthDataFlowSamples.result.getter();
  *a1 = result;
  return result;
}

void protocol witness for HealthDataQueryResult.append(_:) in conformance HealthDataFlowSamples(uint64_t a1)
{
}

void HealthDataUInt8Samples.append(_:)(uint64_t a1)
{
  uint64_t v11 = a1;
  uint64_t v34 = 0;
  uint64_t v33 = 0;
  id v30 = 0;
  int v28 = 0;
  uint64_t v13 = 0;
  uint64_t v18 = type metadata accessor for Date();
  uint64_t v16 = *(void *)(v18 - 8);
  uint64_t v17 = v18 - 8;
  unint64_t v12 = (*(void *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  int v19 = (char *)v5 - v12;
  uint64_t v34 = MEMORY[0x270FA5388](v11);
  uint64_t v33 = v1;
  id v14 = v32;
  outlined init with copy of Any(v34, (uint64_t)v32);
  type metadata accessor for HKCategorySample();
  swift_dynamicCast();
  id v15 = v31;
  id v30 = v31;
  id v2 = v31;
  id v21 = objc_msgSend(v15, sel_startDate);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  *(Swift::UInt32_optional *)&uint64_t v3 = Date.toJulianDay()();
  uint64_t v29 = v3;
  int v20 = v3;
  int v22 = BYTE4(v3);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v18);

  if ((v22 & 1) == 0)
  {
    int v10 = v20;
    int v6 = v20;
    int v28 = v20;
    id v4 = objc_msgSend(v15, sel_value);
    void v5[3] = &v26;
    id v26 = v4;
    v5[1] = lazy protocol witness table accessor for type UInt8 and conformance UInt8();
    v5[2] = lazy protocol witness table accessor for type UInt8 and conformance UInt8();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    int v8 = v25;
    v25[0] = v27;
    v25[1] = 0;
    int v7 = &v24;
    int v24 = v6;
    int v9 = &v23;
    swift_beginAccess();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : UInt8]);
    Dictionary.subscript.setter();
    swift_endAccess();
  }
}

void protocol witness for HealthDataQueryResult.append(_:) in conformance HealthDataUInt8Samples(uint64_t a1)
{
}

uint64_t HealthDataBoolSamples.__allocating_init(sampleType:)(char a1)
{
  return HealthDataBoolSamples.init(sampleType:)(a1);
}

uint64_t HealthDataBoolSamples.init(sampleType:)(char a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt32, Bool));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v1 = Dictionary.init(dictionaryLiteral:)();
  uint64_t result = v4;
  *(void *)(v4 + 24) = v1;
  *(unsigned char *)(v4 + 16) = a1;
  return result;
}

void HealthDataBoolSamples.append(_:)(uint64_t a1)
{
  uint64_t v6 = a1;
  uint64_t v27 = 0;
  uint64_t v26 = 0;
  id v23 = 0;
  int v21 = 0;
  uint64_t v8 = 0;
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v13 - 8);
  uint64_t v12 = v13 - 8;
  unint64_t v7 = (*(void *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  id v14 = (char *)v4 - v7;
  uint64_t v27 = MEMORY[0x270FA5388](v6);
  uint64_t v26 = v1;
  int v9 = v25;
  outlined init with copy of Any(v27, (uint64_t)v25);
  type metadata accessor for HKCategorySample();
  swift_dynamicCast();
  id v10 = v24;
  id v23 = v24;
  id v2 = v24;
  id v16 = objc_msgSend(v10, sel_startDate);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  *(Swift::UInt32_optional *)&uint64_t v3 = Date.toJulianDay()();
  uint64_t v22 = v3;
  int v15 = v3;
  int v17 = BYTE4(v3);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v13);

  if ((v17 & 1) == 0)
  {
    int v5 = v15;
    int v21 = v15;
    v4[2] = &v20;
    char v20 = 1;
    v4[1] = &v19;
    int v19 = v15;
    void v4[3] = &v18;
    swift_beginAccess();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : Bool]);
    Dictionary.subscript.setter();
    swift_endAccess();
  }
}

void protocol witness for HealthDataQueryResult.append(_:) in conformance HealthDataBoolSamples(uint64_t a1)
{
}

uint64_t HealthDataCycleFactorSamples.__allocating_init(sampleType:)(char a1)
{
  return HealthDataCycleFactorSamples.init(sampleType:)(a1);
}

uint64_t HealthDataCycleFactorSamples.init(sampleType:)(char a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt8, [(UInt32, UInt32)]));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(UInt32, UInt32)]);
  uint64_t v1 = Dictionary.init(dictionaryLiteral:)();
  uint64_t result = v4;
  *(void *)(v4 + 24) = v1;
  *(unsigned char *)(v4 + 16) = a1;
  return result;
}

void HealthDataCycleFactorSamples.append(_:)(uint64_t a1)
{
  uint64_t v62 = a1;
  uint64_t v97 = 0;
  uint64_t v96 = 0;
  id v93 = 0;
  int v91 = 0;
  int v89 = 0;
  char v86 = 0;
  id v76 = 0;
  uint64_t v64 = 0;
  uint64_t v69 = type metadata accessor for Date();
  uint64_t v67 = *(void *)(v69 - 8);
  uint64_t v68 = v69 - 8;
  unint64_t v63 = (*(void *)(v67 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v70 = (char *)v16 - v63;
  uint64_t v97 = MEMORY[0x270FA5388](v62);
  uint64_t v96 = v1;
  uint64_t v65 = v95;
  outlined init with copy of Any(v97, (uint64_t)v95);
  type metadata accessor for HKSample();
  swift_dynamicCast();
  id v66 = v94;
  id v93 = v94;
  id v74 = objc_msgSend(v94, sel_startDate);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();
  *(Swift::UInt32_optional *)&uint64_t v2 = Date.toJulianDay()();
  uint64_t v92 = v2;
  int v71 = v2;
  int v75 = BYTE4(v2);
  uint64_t v72 = *(void (**)(char *, uint64_t))(v67 + 8);
  uint64_t v73 = v67 + 8;
  v72(v70, v69);

  if ((v75 & 1) == 0)
  {
    int v60 = v71;
    int v56 = v71;
    int v91 = v71;
    id v58 = objc_msgSend(v66, sel_endDate);
    static Date._unconditionallyBridgeFromObjectiveC(_:)();
    *(Swift::UInt32_optional *)&uint64_t v3 = Date.toJulianDay()();
    uint64_t v90 = v3;
    int v57 = v3;
    int v59 = BYTE4(v3);
    v72(v70, v69);

    if ((v59 & 1) == 0)
    {
      int v55 = v57;
      int v47 = v57;
      int v89 = v57;
      unsigned __int8 v87 = 0;
      char v88 = 1;
      uint64_t v48 = 0;
      unint64_t v51 = type metadata accessor for NSObject();
      id v53 = objc_msgSend(v66, sel_sampleType);
      unint64_t v49 = type metadata accessor for HKCategoryType();
      id v50 = (id)*MEMORY[0x263F093C0];
      id v4 = v50;
      id v52 = (id)MEMORY[0x25A2C0C70](v50);
      int v54 = static NSObject.== infix(_:_:)();

      if (v54)
      {
        unsigned __int8 v87 = 0;
        char v88 = 0;
      }
      else
      {
        id v45 = objc_msgSend(v66, sel_sampleType);
        id v43 = (id)*MEMORY[0x263F09348];
        id v5 = v43;
        id v44 = (id)MEMORY[0x25A2C0C70](v43);
        int v46 = static NSObject.== infix(_:_:)();

        if (v46)
        {
          unsigned __int8 v87 = 1;
          char v88 = 0;
        }
        else
        {
          id v41 = objc_msgSend(v66, sel_sampleType);
          id v39 = (id)*MEMORY[0x263F09298];
          id v6 = v39;
          id v40 = (id)MEMORY[0x25A2C0C70](v39);
          int v42 = static NSObject.== infix(_:_:)();

          if (v42)
          {
            id v7 = v66;
            self;
            id v37 = (id)swift_dynamicCastObjCClassUnconditional();
            id v76 = v37;
            id v38 = objc_msgSend(v37, sel_value);
            _HKPrivatePregnancyStartDateSource.rawValue.getter();
            if (v8 == v38)
            {
              unsigned __int8 v87 = 2;
              char v88 = 0;
            }
            else
            {
              _HKPrivatePregnancyStartDateSource.rawValue.getter();
              if (v9 == v38)
              {
                unsigned __int8 v87 = 3;
                char v88 = 0;
              }
              else
              {
                _HKPrivatePregnancyStartDateSource.rawValue.getter();
                if (v10 == v38)
                {
                  unsigned __int8 v87 = 4;
                  char v88 = 0;
                }
                else
                {
                  _HKPrivatePregnancyStartDateSource.rawValue.getter();
                  if (v11 == v38)
                  {
                    unsigned __int8 v87 = 5;
                    char v88 = 0;
                  }
                  else
                  {
                    _HKPrivatePregnancyStartDateSource.rawValue.getter();
                    if (v12 == v38)
                    {
                      unsigned __int8 v87 = 6;
                      char v88 = 0;
                    }
                    else
                    {
                      _HKPrivatePregnancyStartDateSource.rawValue.getter();
                      if (v13 == v38)
                      {
                        unsigned __int8 v87 = 7;
                      }
                      else
                      {
                        _HKPrivatePregnancyStartDateSource.rawValue.getter();
                        unsigned __int8 v87 = 8;
                      }
                      char v88 = 0;
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (v88)
      {
        int v35 = 0;
        int v36 = 1;
      }
      else
      {
        int v35 = NgtMenstrualAlgorithmsPhase.rawValue.getter(v87);
        int v36 = 0;
      }
      int v34 = v35;
      if ((v36 & 1) == 0)
      {
        int v33 = v34;
        int v28 = v34;
        char v86 = v34;
        id v24 = &v85;
        swift_beginAccess();
        uint64_t v26 = *(void *)(v61 + 24);
        swift_bridgeObjectRetain();
        swift_endAccess();
        uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(UInt32, UInt32)]);
        uint64_t v27 = swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        id v31 = &v84;
        uint64_t v84 = v27;
        id v30 = &v83;
        char v83 = v28;
        uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8 : [(UInt32, UInt32)]].Keys);
        lazy protocol witness table accessor for type [UInt8 : [(UInt32, UInt32)]].Keys and conformance [A : B].Keys();
        int v32 = Sequence<>.contains(_:)();
        outlined destroy of [A]();
        if ((v32 & 1) == 0)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt32, UInt32));
          uint64_t v14 = _allocateUninitializedArray<A>(_:)();
          uint64_t v22 = &v79;
          uint64_t v79 = v14;
          int v21 = &v78;
          char v78 = v28;
          id v23 = &v77;
          swift_beginAccess();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8 : [(UInt32, UInt32)]]);
          Dictionary.subscript.setter();
          swift_endAccess();
        }
        int v17 = HealthDataFlowSamples.results.modify();
        char v18 = &v82;
        char v82 = v28;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8 : [(UInt32, UInt32)]]);
        int v19 = (void (*)(void))Dictionary.subscript.modify();
        char v20 = v15;
        if (*v15)
        {
          int v80 = v56;
          int v81 = v47;
          Array.append(_:)();
          v16[1] = 0;
        }
        else
        {
          v16[0] = 0;
        }
        v19();
        v17();
      }
    }
  }
}

uint64_t NgtMenstrualAlgorithmsPhase.rawValue.getter(uint64_t result)
{
  return result;
}

void protocol witness for HealthDataQueryResult.append(_:) in conformance HealthDataCycleFactorSamples(uint64_t a1)
{
}

uint64_t HealthDataSWTSamples.__allocating_init(sampleType:)(char a1)
{
  return HealthDataSWTSamples.init(sampleType:)(a1);
}

uint64_t HealthDataSWTSamples.init(sampleType:)(char a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt32, (Float, String)));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Float, String));
  uint64_t v1 = Dictionary.init(dictionaryLiteral:)();
  uint64_t result = v4;
  *(void *)(v4 + 24) = v1;
  *(unsigned char *)(v4 + 16) = a1;
  return result;
}

void HealthDataSWTSamples.append(_:)(uint64_t a1)
{
  uint64_t v21 = a1;
  uint64_t v42 = 0;
  uint64_t v41 = 0;
  id v38 = 0;
  int v36 = 0;
  uint64_t v23 = 0;
  uint64_t v28 = type metadata accessor for Date();
  uint64_t v26 = *(void *)(v28 - 8);
  uint64_t v27 = v28 - 8;
  unint64_t v22 = (*(void *)(v26 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v29 = (char *)&v7 - v22;
  uint64_t v42 = MEMORY[0x270FA5388](v21);
  uint64_t v41 = v1;
  id v24 = v40;
  outlined init with copy of Any(v42, (uint64_t)v40);
  type metadata accessor for HKQuantitySample();
  swift_dynamicCast();
  id v25 = v39;
  id v38 = v39;
  id v2 = v39;
  id v31 = objc_msgSend(v25, sel_startDate);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  *(Swift::UInt32_optional *)&uint64_t v3 = Date.toJulianDay()();
  uint64_t v37 = v3;
  int v30 = v3;
  int v32 = BYTE4(v3);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v29, v28);

  if ((v32 & 1) == 0)
  {
    int v20 = v30;
    int v15 = v30;
    int v36 = v30;
    id v8 = objc_msgSend(v25, sel_quantity);
    id v7 = objc_msgSend(self, sel_degreeCelsiusUnit);
    objc_msgSend(v8, sel_doubleValueForUnit_);
    Swift::Double v9 = v4;

    Swift::Float v12 = Float.init(_:)(v9);
    id v5 = v25;
    id v10 = objc_msgSend(v25, sel_sourceRevision);

    id v11 = objc_msgSend(v10, sel_source);
    id v19 = objc_msgSend(v11, sel_bundleIdentifier);
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v14 = v6;

    int v17 = v35;
    v35[0] = LODWORD(v12);
    v35[1] = v13;
    v35[2] = v14;
    id v16 = &v34;
    int v34 = v15;
    char v18 = &v33;
    swift_beginAccess();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : (Float, String)]);
    Dictionary.subscript.setter();
    swift_endAccess();
  }
}

void protocol witness for HealthDataQueryResult.append(_:) in conformance HealthDataSWTSamples(uint64_t a1)
{
}

void *HealthDataQuantitySamples.unit.getter()
{
  swift_beginAccess();
  uint64_t v3 = *(void **)(v0 + 32);
  id v1 = v3;
  swift_endAccess();
  return v3;
}

void HealthDataQuantitySamples.unit.setter(void *a1)
{
  id v2 = a1;
  swift_beginAccess();
  uint64_t v3 = *(void **)(v1 + 32);
  *(void *)(v1 + 32) = a1;

  swift_endAccess();
}

uint64_t (*HealthDataQuantitySamples.unit.modify())()
{
  return HealthDataFlowSamples.sampleType.modify;
}

uint64_t HealthDataQuantitySamples.__allocating_init(sampleType:unit:)(char a1, void *a2)
{
  return HealthDataQuantitySamples.init(sampleType:unit:)(a1, a2);
}

uint64_t HealthDataQuantitySamples.init(sampleType:unit:)(char a1, void *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt32, Float));
  _allocateUninitializedArray<A>(_:)();
  *(void *)(v2 + 24) = Dictionary.init(dictionaryLiteral:)();
  *(unsigned char *)(v2 + 16) = a1;
  id v3 = a2;
  *(void *)(v2 + 32) = a2;

  return v7;
}

void HealthDataQuantitySamples.append(_:)(uint64_t a1)
{
  uint64_t v18 = a1;
  uint64_t v41 = 0;
  uint64_t v40 = 0;
  id v37 = 0;
  int v35 = 0;
  uint64_t v20 = 0;
  uint64_t v25 = type metadata accessor for Date();
  uint64_t v23 = *(void *)(v25 - 8);
  uint64_t v24 = v25 - 8;
  unint64_t v19 = (*(void *)(v23 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v26 = (char *)v7 - v19;
  uint64_t v41 = MEMORY[0x270FA5388](v18);
  uint64_t v40 = v1;
  uint64_t v21 = v39;
  outlined init with copy of Any(v41, (uint64_t)v39);
  type metadata accessor for HKQuantitySample();
  swift_dynamicCast();
  id v22 = v38;
  id v37 = v38;
  id v2 = v38;
  id v28 = objc_msgSend(v22, sel_startDate);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  *(Swift::UInt32_optional *)&uint64_t v3 = Date.toJulianDay()();
  uint64_t v36 = v3;
  int v27 = v3;
  int v29 = BYTE4(v3);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v26, v25);

  if ((v29 & 1) == 0)
  {
    int v16 = v27;
    int v11 = v27;
    int v35 = v27;
    id v9 = objc_msgSend(v22, sel_quantity);
    v7[1] = &v34;
    uint64_t v12 = 0;
    swift_beginAccess();
    id v8 = *(id *)(v17 + 32);
    id v4 = v8;
    swift_endAccess();
    objc_msgSend(v9, sel_doubleValueForUnit_, v8);
    Swift::Double v10 = v5;

    Swift::Float v6 = Float.init(_:)(v10);
    uint64_t v14 = &v32;
    Swift::Float v32 = v6;
    char v33 = 0;
    uint64_t v13 = &v31;
    int v31 = v11;
    int v15 = &v30;
    swift_beginAccess();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : Float]);
    Dictionary.subscript.setter();
    swift_endAccess();
  }
}

uint64_t HealthDataQuantitySamples.deinit()
{
  outlined destroy of [A]();

  return v2;
}

uint64_t HealthDataQuantitySamples.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void protocol witness for HealthDataQueryResult.append(_:) in conformance HealthDataQuantitySamples(uint64_t a1)
{
}

uint64_t HealthDataQuantityAverageSamples.__allocating_init(sampleType:unit:)(char a1, void *a2)
{
  return HealthDataQuantityAverageSamples.init(sampleType:unit:)(a1, a2);
}

uint64_t HealthDataQuantityAverageSamples.init(sampleType:unit:)(char a1, void *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt32, [Float]));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
  *(void *)(v2 + 24) = Dictionary.init(dictionaryLiteral:)();
  *(unsigned char *)(v2 + 16) = a1;
  id v3 = a2;
  *(void *)(v2 + 32) = a2;

  return v7;
}

uint64_t HealthDataQuantityAverageSamples.result.getter()
{
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt32, Float));
  _allocateUninitializedArray<A>(_:)();
  Dictionary.init(dictionaryLiteral:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : [Float]]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : Float]);
  lazy protocol witness table accessor for type [UInt32 : [Float]] and conformance [A : B]();
  Sequence.reduce<A>(into:_:)();
  outlined destroy of [A]();
  return v1;
}

uint64_t closure #1 in HealthDataQuantityAverageSamples.result.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
  lazy protocol witness table accessor for type [Float] and conformance [A]();
  uint64_t result = Sequence.reduce<A>(_:_:)();
  if (v4)
  {
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    MEMORY[0x25A2C0820](v3);
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : Float]);
    return Dictionary.subscript.setter();
  }
  return result;
}

float implicit closure #1 in closure #1 in HealthDataQuantityAverageSamples.result.getter@<S0>(float *a1@<X0>, float *a2@<X1>, float *a3@<X8>)
{
  float result = *a1 + *a2;
  *a3 = result;
  return result;
}

void HealthDataQuantityAverageSamples.append(_:)(uint64_t a1)
{
  uint64_t v31 = a1;
  uint64_t v58 = 0;
  uint64_t v57 = 0;
  id v54 = 0;
  int v52 = 0;
  uint64_t v33 = 0;
  uint64_t v38 = type metadata accessor for Date();
  uint64_t v36 = *(void *)(v38 - 8);
  uint64_t v37 = v38 - 8;
  unint64_t v32 = (*(void *)(v36 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  id v39 = (char *)v8 - v32;
  uint64_t v58 = MEMORY[0x270FA5388](v31);
  uint64_t v57 = v1;
  char v34 = v56;
  outlined init with copy of Any(v58, (uint64_t)v56);
  type metadata accessor for HKQuantitySample();
  swift_dynamicCast();
  id v35 = v55;
  id v54 = v55;
  id v2 = v55;
  id v41 = objc_msgSend(v35, sel_startDate);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  *(Swift::UInt32_optional *)&uint64_t v3 = Date.toJulianDay()();
  uint64_t v53 = v3;
  int v40 = v3;
  int v42 = BYTE4(v3);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v39, v38);

  if ((v42 & 1) == 0)
  {
    int v29 = v40;
    int v24 = v40;
    int v52 = v40;
    uint64_t v21 = &v51;
    swift_beginAccess();
    uint64_t v22 = *(void *)(v30 + 24);
    swift_bridgeObjectRetain();
    swift_endAccess();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
    uint64_t v23 = swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    int v27 = &v50;
    uint64_t v50 = v23;
    uint64_t v26 = &v49;
    int v49 = v24;
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : [Float]].Keys);
    lazy protocol witness table accessor for type [UInt32 : [Float]].Keys and conformance [A : B].Keys();
    int v28 = Sequence<>.contains(_:)();
    outlined destroy of [A]();
    if ((v28 & 1) == 0)
    {
      uint64_t v4 = _allocateUninitializedArray<A>(_:)();
      unint64_t v19 = &v45;
      uint64_t v45 = v4;
      uint64_t v18 = &v44;
      int v44 = v24;
      uint64_t v20 = &v43;
      swift_beginAccess();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : [Float]]);
      Dictionary.subscript.setter();
      swift_endAccess();
    }
    uint64_t v14 = HealthDataFlowSamples.results.modify();
    int v15 = &v48;
    int v48 = v24;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : [Float]]);
    int v16 = (void (*)(void))Dictionary.subscript.modify();
    uint64_t v17 = v5;
    if (*v5)
    {
      id v11 = objc_msgSend(v35, sel_quantity);
      id v9 = &v47;
      swift_beginAccess();
      id v10 = *(id *)(v30 + 32);
      id v6 = v10;
      swift_endAccess();
      objc_msgSend(v11, sel_doubleValueForUnit_, v10);
      Swift::Double v12 = v7;

      Swift::Float v46 = Float.init(_:)(v12);
      specialized Array.append(_:)();
      int v13 = 0;
    }
    else
    {
      void v8[3] = 0;
    }
    v16();
    v14();
  }
}

uint64_t protocol witness for HealthDataQueryResult.result.getter in conformance HealthDataQuantityAverageSamples@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = HealthDataQuantityAverageSamples.result.getter();
  *a1 = result;
  return result;
}

void protocol witness for HealthDataQueryResult.append(_:) in conformance HealthDataQuantityAverageSamples(uint64_t a1)
{
}

uint64_t getSampleTypeQueryDecoders()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (HealthDataRawSampleType, HealthDataQueryResult));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v30 = v0;
  unsigned char *v0 = 0;
  uint64_t v17 = type metadata accessor for HealthDataFlowSamples();
  uint64_t v1 = HealthDataFlowSamples.__allocating_init(sampleType:)(0);
  *((void *)v30 + 4) = v17;
  *((void *)v30 + 5) = &protocol witness table for HealthDataFlowSamples;
  *((void *)v30 + 1) = v1;
  v30[48] = 2;
  uint64_t v18 = type metadata accessor for HealthDataUInt8Samples();
  uint64_t v2 = HealthDataFlowSamples.__allocating_init(sampleType:)(2);
  *((void *)v30 + 10) = v18;
  *((void *)v30 + 11) = &protocol witness table for HealthDataUInt8Samples;
  *((void *)v30 + 7) = v2;
  v30[96] = 1;
  uint64_t v19 = type metadata accessor for HealthDataBoolSamples();
  uint64_t v3 = HealthDataBoolSamples.__allocating_init(sampleType:)(1);
  *((void *)v30 + 16) = v19;
  *((void *)v30 + 17) = &protocol witness table for HealthDataBoolSamples;
  *((void *)v30 + 13) = v3;
  v30[144] = 3;
  uint64_t v20 = type metadata accessor for HealthDataCycleFactorSamples();
  uint64_t v4 = HealthDataCycleFactorSamples.__allocating_init(sampleType:)(3);
  *((void *)v30 + 22) = v20;
  *((void *)v30 + 23) = &protocol witness table for HealthDataCycleFactorSamples;
  *((void *)v30 + 19) = v4;
  v30[192] = 7;
  uint64_t v21 = type metadata accessor for HealthDataSWTSamples();
  uint64_t v5 = HealthDataSWTSamples.__allocating_init(sampleType:)(7);
  *((void *)v30 + 28) = v21;
  *((void *)v30 + 29) = &protocol witness table for HealthDataSWTSamples;
  *((void *)v30 + 25) = v5;
  v30[240] = 4;
  uint64_t v22 = type metadata accessor for HealthDataQuantitySamples();
  id v6 = [self (SEL)0x1F7C3A708];
  uint64_t v7 = HealthDataQuantitySamples.__allocating_init(sampleType:unit:)(4, v6);
  *((void *)v30 + 34) = v22;
  *((void *)v30 + 35) = &protocol witness table for HealthDataQuantitySamples;
  *((void *)v30 + 31) = v7;
  v30[288] = 5;
  id v8 = objc_msgSend(self, sel_gramUnitWithMetricPrefix_, 9);
  uint64_t v9 = HealthDataQuantitySamples.__allocating_init(sampleType:unit:)(5, v8);
  *((void *)v30 + 40) = v22;
  *((void *)v30 + 41) = &protocol witness table for HealthDataQuantitySamples;
  *((void *)v30 + 37) = v9;
  v30[336] = 6;
  id v10 = objc_msgSend(self, sel_meterUnit);
  uint64_t v11 = HealthDataQuantitySamples.__allocating_init(sampleType:unit:)(6, v10);
  *((void *)v30 + 46) = v22;
  *((void *)v30 + 47) = &protocol witness table for HealthDataQuantitySamples;
  *((void *)v30 + 43) = v11;
  v30[384] = 8;
  uint64_t v29 = type metadata accessor for HealthDataQuantityAverageSamples();
  id v12 = objc_msgSend(self, sel_secondUnitWithMetricPrefix_, 4);
  uint64_t v13 = HealthDataQuantityAverageSamples.__allocating_init(sampleType:unit:)(8, v12);
  *((void *)v30 + 52) = v29;
  *((void *)v30 + 53) = &protocol witness table for HealthDataQuantityAverageSamples;
  *((void *)v30 + 49) = v13;
  v30[432] = 9;
  id v24 = [self (SEL)0x1F7C3A708];
  id v23 = objc_msgSend(self, sel_minuteUnit);
  id v25 = [v24 (SEL)0x1F7C56572];

  uint64_t v14 = HealthDataQuantityAverageSamples.__allocating_init(sampleType:unit:)(9, v25);
  *((void *)v30 + 58) = v29;
  *((void *)v30 + 59) = &protocol witness table for HealthDataQuantityAverageSamples;
  *((void *)v30 + 55) = v14;
  v30[480] = 10;
  id v27 = [self (SEL)0x1F7C3A708];
  id v26 = objc_msgSend(self, sel_percentUnit);
  id v28 = [v27 (SEL)0x1F7C56572];

  uint64_t v15 = HealthDataQuantityAverageSamples.__allocating_init(sampleType:unit:)(10, v28);
  *((void *)v30 + 64) = v29;
  *((void *)v30 + 65) = &protocol witness table for HealthDataQuantityAverageSamples;
  *((void *)v30 + 61) = v15;
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HealthDataQueryResult);
  lazy protocol witness table accessor for type HealthDataRawSampleType and conformance HealthDataRawSampleType();
  return Dictionary.init(dictionaryLiteral:)();
}

void *HealthDataStoreQuery.store.getter()
{
  swift_beginAccess();
  uint64_t v3 = *(void **)(v0 + 16);
  id v1 = v3;
  swift_endAccess();
  return v3;
}

void HealthDataStoreQuery.store.setter(void *a1)
{
  id v2 = a1;
  swift_beginAccess();
  uint64_t v3 = *(void **)(v1 + 16);
  *(void *)(v1 + 16) = a1;

  swift_endAccess();
}

uint64_t HealthDataStoreQuery.ngtToHK.getter()
{
  swift_beginAccess();
  uint64_t v2 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  swift_endAccess();
  return v2;
}

uint64_t HealthDataStoreQuery.ngtToHK.setter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_beginAccess();
  *(void *)(v1 + 32) = a1;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

void *HealthDataStoreQuery.dayStreamProcessorConfig.getter()
{
  swift_beginAccess();
  uint64_t v3 = *(void **)(v0 + 40);
  id v1 = v3;
  swift_endAccess();
  return v3;
}

void HealthDataStoreQuery.dayStreamProcessorConfig.setter(void *a1)
{
  id v2 = a1;
  swift_beginAccess();
  uint64_t v3 = *(void **)(v1 + 40);
  *(void *)(v1 + 40) = a1;

  swift_endAccess();
}

uint64_t (*HealthDataStoreQuery.dayStreamProcessorConfig.modify())()
{
  return HealthDataFlowSamples.sampleType.modify;
}

uint64_t HealthDataStoreQuery.init(store:)(void *a1)
{
  v1[5] = 0;
  id v2 = a1;
  v1[2] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (HKSampleType, HealthDataRawSampleType));
  _allocateUninitializedArray<A>(_:)();
  type metadata accessor for HKSampleType();
  lazy protocol witness table accessor for type HKSampleType and conformance NSObject();
  v1[3] = Dictionary.init(dictionaryLiteral:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (HealthDataRawSampleType, [HKSampleType]));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKSampleType]);
  lazy protocol witness table accessor for type HealthDataRawSampleType and conformance HealthDataRawSampleType();
  v1[4] = Dictionary.init(dictionaryLiteral:)();
  type metadata accessor for HKCategoryType();
  identifier.Swift::Float value = (HKCategoryTypeIdentifier)*MEMORY[0x263F09380];
  id v3 = (id)*MEMORY[0x263F09380];
  id v55 = (void *)HKCategoryType.init(identifier:)(identifier);
  if (v55)
  {
    id v4 = v55;
    swift_beginAccess();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKSampleType : HealthDataRawSampleType]);
    Dictionary.subscript.setter();
    swift_endAccess();
    _allocateUninitializedArray<A>(_:)();
    char v51 = v5;
    id v6 = v55;
    *char v51 = v55;
    _finalizeUninitializedArray<A>(_:)();
    swift_beginAccess();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HealthDataRawSampleType : [HKSampleType]]);
    Dictionary.subscript.setter();
    swift_endAccess();
  }
  v49.Swift::Float value = (HKCategoryTypeIdentifier)*MEMORY[0x263F093A8];
  id v7 = (id)*MEMORY[0x263F093A8];
  uint64_t v50 = (void *)HKCategoryType.init(identifier:)(v49);
  if (v50)
  {
    id v8 = v50;
    swift_beginAccess();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKSampleType : HealthDataRawSampleType]);
    Dictionary.subscript.setter();
    swift_endAccess();
    _allocateUninitializedArray<A>(_:)();
    int v48 = v9;
    id v10 = v50;
    *int v48 = v50;
    _finalizeUninitializedArray<A>(_:)();
    swift_beginAccess();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HealthDataRawSampleType : [HKSampleType]]);
    Dictionary.subscript.setter();
    swift_endAccess();
  }
  v46.Swift::Float value = (HKCategoryTypeIdentifier)*MEMORY[0x263F09330];
  id v11 = (id)*MEMORY[0x263F09330];
  char v47 = (void *)HKCategoryType.init(identifier:)(v46);
  if (v47)
  {
    id v12 = v47;
    swift_beginAccess();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKSampleType : HealthDataRawSampleType]);
    Dictionary.subscript.setter();
    swift_endAccess();
    _allocateUninitializedArray<A>(_:)();
    uint64_t v45 = v13;
    id v14 = v47;
    *uint64_t v45 = v47;
    _finalizeUninitializedArray<A>(_:)();
    swift_beginAccess();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HealthDataRawSampleType : [HKSampleType]]);
    Dictionary.subscript.setter();
    swift_endAccess();
  }
  type metadata accessor for HKQuantityType();
  v43.Swift::Float value = (HKCategoryTypeIdentifier)*MEMORY[0x263F09BE0];
  id v15 = (id)*MEMORY[0x263F09BE0];
  int v44 = (void *)HKCategoryType.init(identifier:)(v43);
  if (v44)
  {
    id v16 = v44;
    swift_beginAccess();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKSampleType : HealthDataRawSampleType]);
    Dictionary.subscript.setter();
    swift_endAccess();
    _allocateUninitializedArray<A>(_:)();
    int v42 = v17;
    id v18 = v44;
    *int v42 = v44;
    _finalizeUninitializedArray<A>(_:)();
    swift_beginAccess();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HealthDataRawSampleType : [HKSampleType]]);
    Dictionary.subscript.setter();
    swift_endAccess();
  }
  v40.Swift::Float value = (HKCategoryTypeIdentifier)*MEMORY[0x263F09C40];
  id v19 = (id)*MEMORY[0x263F09C40];
  id v41 = (void *)HKCategoryType.init(identifier:)(v40);
  if (v41)
  {
    id v20 = v41;
    swift_beginAccess();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKSampleType : HealthDataRawSampleType]);
    Dictionary.subscript.setter();
    swift_endAccess();
    _allocateUninitializedArray<A>(_:)();
    id v39 = v21;
    id v22 = v41;
    void *v39 = v41;
    _finalizeUninitializedArray<A>(_:)();
    swift_beginAccess();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HealthDataRawSampleType : [HKSampleType]]);
    Dictionary.subscript.setter();
    swift_endAccess();
  }
  v37.Swift::Float value = (HKCategoryTypeIdentifier)*MEMORY[0x263F09C38];
  id v23 = (id)*MEMORY[0x263F09C38];
  uint64_t v38 = (void *)HKCategoryType.init(identifier:)(v37);
  if (v38)
  {
    id v24 = v38;
    swift_beginAccess();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKSampleType : HealthDataRawSampleType]);
    Dictionary.subscript.setter();
    swift_endAccess();
    _allocateUninitializedArray<A>(_:)();
    uint64_t v36 = v25;
    id v26 = v38;
    *uint64_t v36 = v38;
    _finalizeUninitializedArray<A>(_:)();
    swift_beginAccess();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HealthDataRawSampleType : [HKSampleType]]);
    Dictionary.subscript.setter();
    swift_endAccess();
  }
  v34.Swift::Float value = (HKCategoryTypeIdentifier)*MEMORY[0x263F09E50];
  id v27 = (id)*MEMORY[0x263F09E50];
  id v35 = (void *)HKCategoryType.init(identifier:)(v34);
  if (v35)
  {
    id v28 = v35;
    swift_beginAccess();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKSampleType : HealthDataRawSampleType]);
    Dictionary.subscript.setter();
    swift_endAccess();
    _allocateUninitializedArray<A>(_:)();
    uint64_t v33 = v29;
    id v30 = v35;
    *uint64_t v33 = v35;
    _finalizeUninitializedArray<A>(_:)();
    swift_beginAccess();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HealthDataRawSampleType : [HKSampleType]]);
    Dictionary.subscript.setter();
    swift_endAccess();
  }
  id v32 = (id)HKMCCycleFactorsTypes();
  static Array._unconditionallyBridgeFromObjectiveC(_:)();

  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKCategoryType]);
  lazy protocol witness table accessor for type [HKCategoryType] and conformance [A]();
  Sequence.forEach(_:)();
  swift_release();
  swift_bridgeObjectRetain();
  _arrayForceCast<A, B>(_:)();
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HealthDataRawSampleType : [HKSampleType]]);
  Dictionary.subscript.setter();
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v52;
}

unint64_t type metadata accessor for HKCategorySample()
{
  uint64_t v2 = lazy cache variable for type metadata for HKCategorySample;
  if (!lazy cache variable for type metadata for HKCategorySample)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HKCategorySample);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type UInt8 and conformance UInt8()
{
  uint64_t v2 = lazy protocol witness table cache variable for type UInt8 and conformance UInt8;
  if (!lazy protocol witness table cache variable for type UInt8 and conformance UInt8)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type UInt8 and conformance UInt8);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type UInt8 and conformance UInt8;
  if (!lazy protocol witness table cache variable for type UInt8 and conformance UInt8)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type UInt8 and conformance UInt8);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type UInt8 and conformance UInt8;
  if (!lazy protocol witness table cache variable for type UInt8 and conformance UInt8)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type UInt8 and conformance UInt8);
    return WitnessTable;
  }
  return v2;
}

unint64_t type metadata accessor for HKSample()
{
  uint64_t v2 = lazy cache variable for type metadata for HKSample;
  if (!lazy cache variable for type metadata for HKSample)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HKSample);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for NSObject()
{
  uint64_t v2 = lazy cache variable for type metadata for NSObject;
  if (!lazy cache variable for type metadata for NSObject)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for HKCategoryType()
{
  uint64_t v2 = lazy cache variable for type metadata for HKCategoryType;
  if (!lazy cache variable for type metadata for HKCategoryType)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HKCategoryType);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for HKQuantitySample()
{
  uint64_t v2 = lazy cache variable for type metadata for HKQuantitySample;
  if (!lazy cache variable for type metadata for HKQuantitySample)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HKQuantitySample);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t type metadata accessor for HealthDataFlowSamples()
{
  return self;
}

uint64_t type metadata accessor for HealthDataUInt8Samples()
{
  return self;
}

uint64_t type metadata accessor for HealthDataBoolSamples()
{
  return self;
}

uint64_t type metadata accessor for HealthDataCycleFactorSamples()
{
  return self;
}

uint64_t type metadata accessor for HealthDataSWTSamples()
{
  return self;
}

uint64_t type metadata accessor for HealthDataQuantitySamples()
{
  return self;
}

uint64_t type metadata accessor for HealthDataQuantityAverageSamples()
{
  return self;
}

unint64_t type metadata accessor for HKSampleType()
{
  uint64_t v2 = lazy cache variable for type metadata for HKSampleType;
  if (!lazy cache variable for type metadata for HKSampleType)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HKSampleType);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type HKSampleType and conformance NSObject()
{
  uint64_t v2 = lazy protocol witness table cache variable for type HKSampleType and conformance NSObject;
  if (!lazy protocol witness table cache variable for type HKSampleType and conformance NSObject)
  {
    type metadata accessor for HKSampleType();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HKSampleType and conformance NSObject);
    return WitnessTable;
  }
  return v2;
}

HKCategoryType_optional __swiftcall HKCategoryType.init(identifier:)(HKCategoryTypeIdentifier_optional identifier)
{
  id v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  uint64_t v2 = (objc_class *)@nonobjc HKCategoryType.init(identifier:)(identifier.value);
  result.value.super.super.super.Class isa = v2;
  result.Swift::Bool is_nil = v3;
  return result;
}

unint64_t type metadata accessor for HKQuantityType()
{
  uint64_t v2 = lazy cache variable for type metadata for HKQuantityType;
  if (!lazy cache variable for type metadata for HKQuantityType)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HKQuantityType);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t closure #1 in HealthDataStoreQuery.init(store:)(id *a1)
{
  id v1 = *a1;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKSampleType : HealthDataRawSampleType]);
  Dictionary.subscript.setter();
  return swift_endAccess();
}

uint64_t partial apply for closure #1 in HealthDataStoreQuery.init(store:)(id *a1)
{
  return closure #1 in HealthDataStoreQuery.init(store:)(a1);
}

unint64_t lazy protocol witness table accessor for type [HKCategoryType] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [HKCategoryType] and conformance [A];
  if (!lazy protocol witness table cache variable for type [HKCategoryType] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [HKCategoryType]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [HKCategoryType] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

uint64_t HealthDataStoreQuery.queryPregrancies(source:range:)(uint64_t a1, uint64_t a2)
{
  v3[17] = v2;
  v3[16] = a2;
  v3[15] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  v3[5] = 0;
  v3[7] = 0;
  v3[8] = 0;
  uint64_t v4 = type metadata accessor for Date();
  v3[18] = v4;
  v3[19] = *(void *)(v4 - 8);
  v3[20] = swift_task_alloc();
  v3[3] = a1;
  v3[4] = a2;
  v3[5] = v2;
  return MEMORY[0x270FA2498](HealthDataStoreQuery.queryPregrancies(source:range:), 0);
}

uint64_t HealthDataStoreQuery.queryPregrancies(source:range:)()
{
  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v19 = *(void *)(v0 + 152);
  uint64_t v22 = *(void *)(v0 + 144);
  uint64_t v20 = *(void *)(v0 + 128);
  uint64_t v28 = *(void *)(v0 + 120);
  *(void *)(v0 + 16) = v0;
  id v24 = self;
  uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16);
  v21(v1, v20, v22);
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  id v23 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
  v23(v1, v22);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClosedRange<Date>);
  v21(v1, v20 + *(int *)(v2 + 36), v22);
  Class v25 = Date._bridgeToObjectiveC()().super.isa;
  v23(v1, v22);
  type metadata accessor for HKQueryOptions();
  _allocateUninitializedArray<A>(_:)();
  lazy protocol witness table accessor for type HKQueryOptions and conformance HKQueryOptions();
  SetAlgebra<>.init(arrayLiteral:)();
  id v27 = (NSPredicate_optional *)objc_msgSend(v24, sel_predicateForSamplesWithStartDate_endDate_inclusiveEndDates_options_, isa, v25, 1, *(void *)(v0 + 48));
  *(void *)(v0 + 168) = v27;

  *(void *)(v0 + 56) = v27;
  type metadata accessor for HKQueryDescriptor();
  *(void *)(v0 + 64) = _allocateUninitializedArray<A>(_:)();
  *(void *)(v0 + 72) = v28;
  *(unsigned char *)(v0 + 208) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PregnancySource]);
  lazy protocol witness table accessor for type [PregnancySource] and conformance [A]();
  lazy protocol witness table accessor for type PregnancySource and conformance PregnancySource();
  char v29 = Sequence<>.contains(_:)();
  swift_bridgeObjectRetain();
  if (v29)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)(v18 + 80) = *(void *)(v18 + 120);
    *(unsigned char *)(v18 + 209) = 1;
    char v17 = Sequence<>.contains(_:)();
    swift_bridgeObjectRelease();
    if ((v17 & 1) == 0) {
      goto LABEL_5;
    }
  }
  type metadata accessor for HKCategoryType();
  uint64_t v15 = *MEMORY[0x263F093C0];
  id v3 = (id)*MEMORY[0x263F093C0];
  sampleType.super.super.Class isa = (Class)MEMORY[0x25A2C0C70](v15);
  uint64_t v4 = v27;
  *(HKQueryDescriptor *)(v18 + 112) = HKQueryDescriptor.__allocating_init(sampleType:predicate:)(sampleType, v27);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKQueryDescriptor]);
  Array.append(_:)();
LABEL_5:
  *(void *)(v18 + 88) = *(void *)(v18 + 120);
  *(unsigned char *)(v18 + 210) = 2;
  if (Sequence<>.contains(_:)())
  {
    type metadata accessor for HKCategoryType();
    uint64_t v13 = *MEMORY[0x263F093C8];
    id v5 = (id)*MEMORY[0x263F093C8];
    v14.super.super.Class isa = (Class)MEMORY[0x25A2C0C70](v13);
    id v6 = v27;
    *(HKQueryDescriptor *)(v18 + 104) = HKQueryDescriptor.__allocating_init(sampleType:predicate:)(v14, v27);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKQueryDescriptor]);
    Array.append(_:)();
  }
  uint64_t v11 = *(void *)(v18 + 136);
  Swift::String v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("queryPregrancies(source:range:)", 0x1FuLL, 1);
  *(void *)(v18 + 176) = v7._object;
  swift_retain();
  uint64_t v12 = swift_task_alloc();
  *(void *)(v18 + 184) = v12;
  *(void *)(v12 + 16) = v18 + 64;
  *(void *)(v12 + 24) = v11;
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v18 + 192) = v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Pregnancy?]);
  *uint64_t v8 = *(void *)(v18 + 16);
  v8[1] = HealthDataStoreQuery.queryPregrancies(source:range:);
  return MEMORY[0x270FA2360](v18 + 96, 0, 0, v7._countAndFlagsBits, v7._object, partial apply for closure #1 in HealthDataStoreQuery.queryPregrancies(source:range:), v12, v9);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *v1;
  *(void *)(v4 + 16) = *v1;
  *(void *)(v4 + 200) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = HealthDataStoreQuery.queryPregrancies(source:range:);
  }
  else
  {
    swift_task_dealloc();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v2 = HealthDataStoreQuery.queryPregrancies(source:range:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  uint64_t (*v1)(uint64_t);
  id v3;
  uint64_t v4;
  uint64_t v5;

  id v3 = (id)v0[21];
  v0[2] = v0;
  uint64_t v4 = v0[12];
  outlined destroy of [A]();

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0[2] + 8);
  return v1(v4);
}

{
  uint64_t v0;
  uint64_t (*v1)();
  id v3;
  uint64_t v4;
  uint64_t v5;

  id v3 = *(id *)(v0 + 168);
  *(void *)(v0 + 16) = v0;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();
  outlined destroy of [A]();

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)())(*(void *)(v4 + 16) + 8);
  return v1();
}

unint64_t type metadata accessor for HKQueryDescriptor()
{
  uint64_t v2 = lazy cache variable for type metadata for HKQueryDescriptor;
  if (!lazy cache variable for type metadata for HKQueryDescriptor)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HKQueryDescriptor);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type [PregnancySource] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [PregnancySource] and conformance [A];
  if (!lazy protocol witness table cache variable for type [PregnancySource] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [PregnancySource]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [PregnancySource] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type [PregnancySource] and conformance [A];
  if (!lazy protocol witness table cache variable for type [PregnancySource] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [PregnancySource]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [PregnancySource] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

HKQueryDescriptor __swiftcall HKQueryDescriptor.__allocating_init(sampleType:predicate:)(HKSampleType sampleType, NSPredicate_optional *predicate)
{
  id v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return (HKQueryDescriptor)@nonobjc HKQueryDescriptor.init(sampleType:predicate:)(sampleType.super.super.isa, predicate);
}

uint64_t closure #1 in HealthDataStoreQuery.queryPregrancies(source:range:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1;
  uint64_t v11 = a2;
  uint64_t v13 = a3;
  id v10 = partial apply for closure #1 in closure #1 in HealthDataStoreQuery.queryPregrancies(source:range:);
  uint64_t v19 = 0;
  uint64_t v18 = 0;
  uint64_t v17 = 0;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[Pregnancy?], Error>);
  uint64_t v9 = *(void *)(v7 - 8);
  uint64_t v8 = v7 - 8;
  MEMORY[0x270FA5388](v7);
  uint64_t v12 = (char *)&v6 - v3;
  uint64_t v19 = v4;
  uint64_t v18 = v11;
  uint64_t v17 = v13;
  (*(void (**)(char *))(v9 + 16))((char *)&v6 - v3);
  swift_retain();
  uint64_t v14 = v11;
  uint64_t v15 = v12;
  uint64_t v16 = v13;
  autoreleasepool<A>(invoking:)();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v7);
  return swift_release();
}

uint64_t partial apply for closure #1 in HealthDataStoreQuery.queryPregrancies(source:range:)(uint64_t a1)
{
  return closure #1 in HealthDataStoreQuery.queryPregrancies(source:range:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

void closure #1 in closure #1 in HealthDataStoreQuery.queryPregrancies(source:range:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = a1;
  uint64_t v10 = a2;
  uint64_t v22 = a3;
  v7[1] = 0;
  uint64_t v19 = partial apply for closure #1 in closure #1 in closure #1 in HealthDataStoreQuery.queryPregrancies(source:range:);
  uint64_t v30 = 0;
  uint64_t v29 = 0;
  uint64_t v28 = 0;
  id v27 = 0;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[Pregnancy?], Error>);
  uint64_t v13 = *(void *)(v17 - 8);
  uint64_t v14 = v17 - 8;
  uint64_t v11 = v13;
  uint64_t v12 = *(void *)(v13 + 64);
  unint64_t v8 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v16 = (char *)v7 - v8;
  uint64_t v30 = v3;
  uint64_t v29 = v4;
  uint64_t v28 = v5;
  type metadata accessor for HKSampleQuery();
  uint64_t v21 = *v9;
  swift_bridgeObjectRetain();
  uint64_t v18 = 0;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, v10, v17);
  unint64_t v15 = (*(unsigned __int8 *)(v11 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v20 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v20 + v15, v16, v17);
  id v25 = HKSampleQuery.__allocating_init(queryDescriptors:limit:resultsHandler:)(v21, v18, (uint64_t)v19, v20);
  id v27 = v25;
  id v23 = &v26;
  swift_beginAccess();
  id v24 = *(id *)(v22 + 16);
  id v6 = v24;
  swift_endAccess();
  objc_msgSend(v24, sel_executeQuery_, v25);
}

void *closure #1 in closure #1 in closure #1 in HealthDataStoreQuery.queryPregrancies(source:range:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v22 = a2;
  id v17 = a3;
  uint64_t v18 = a4;
  uint64_t v21 = 0;
  uint64_t v19 = partial apply for closure #1 in closure #1 in closure #1 in closure #1 in HealthDataStoreQuery.queryPregrancies(source:range:);
  uint64_t v20 = 0;
  v26[4] = a1;
  v26[3] = a2;
  v26[2] = a3;
  v26[1] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Pregnancy?);
  v26[0] = _allocateUninitializedArray<A>(_:)();
  swift_bridgeObjectRetain();
  if (v22)
  {
    uint64_t v16 = v22;
    uint64_t v23 = v22;
    uint64_t v13 = &v9;
    MEMORY[0x270FA5388](&v9);
    uint64_t v14 = v8;
    v8[2] = v26;
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKSample]);
    lazy protocol witness table accessor for type [HKSample] and conformance [A]();
    Sequence.forEach(_:)();
    outlined destroy of [A]();
  }
  id v4 = v17;
  if (v17)
  {
    id v12 = v17;

    lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
    uint64_t v5 = swift_allocError();
    *id v6 = 35;
    uint64_t v9 = &v24;
    uint64_t v24 = v5;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[Pregnancy?], Error>);
    CheckedContinuation.resume(throwing:)();
  }
  else
  {
    uint64_t v10 = v26[0];
    swift_bridgeObjectRetain();
    uint64_t v11 = &v25;
    uint64_t v25 = v10;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[Pregnancy?], Error>);
    CheckedContinuation.resume(returning:)();
  }
  HKCategoryType_optional result = v26;
  outlined destroy of [A]();
  return result;
}

void closure #1 in closure #1 in closure #1 in closure #1 in HealthDataStoreQuery.queryPregrancies(source:range:)(uint64_t a1, uint64_t a2)
{
  uint64_t v67 = a1;
  uint64_t v68 = a2;
  id v104 = 0;
  uint64_t v103 = 0;
  id v102 = 0;
  unint64_t v88 = 0;
  uint64_t v75 = 0;
  uint64_t v70 = *(void *)(*(void *)(type metadata accessor for Date() - 8) + 64);
  unint64_t v69 = (v70 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v2 = MEMORY[0x270FA5388](0);
  int v71 = &v25[-v69];
  unint64_t v72 = v69;
  MEMORY[0x270FA5388](v2);
  uint64_t v73 = &v25[-v72];
  id v74 = *v3;
  id v104 = v74;
  uint64_t v103 = v4;
  unint64_t v78 = type metadata accessor for NSObject();
  id v80 = objc_msgSend(v74, sel_sampleType);
  unint64_t v76 = type metadata accessor for HKCategoryType();
  id v77 = (id)*MEMORY[0x263F093C0];
  id v5 = v77;
  id v79 = (id)MEMORY[0x25A2C0C70](v77);
  int v81 = static NSObject.== infix(_:_:)();

  if (v81)
  {
    id v6 = v74;
    id v66 = objc_msgSend(v74, sel_metadata);
    if (v66)
    {
      id v65 = v66;
      id v62 = v66;
      uint64_t v63 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v64 = v63;
    }
    else
    {
      uint64_t v64 = 0;
    }
    uint64_t v61 = v64;

    if (v61)
    {
      uint64_t v60 = v61;
      uint64_t v58 = v61;
      id v59 = (id)*MEMORY[0x263F0AB60];
      id v7 = v59;
      uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v57 = v82;
      v82[0] = v8;
      v82[1] = v9;
      MEMORY[0x25A2C04B0](v93);
      outlined destroy of DefaultStringInterpolation();
      swift_bridgeObjectRelease();
    }
    else
    {
      memset(v93, 0, sizeof(v93));
      uint64_t v94 = 0;
    }
    if (v94)
    {
      if (swift_dynamicCast())
      {
        uint64_t v52 = v82[2];
        int v53 = 0;
      }
      else
      {
        uint64_t v52 = 0;
        int v53 = 1;
      }
      uint64_t v55 = v52;
      int v56 = v53;
    }
    else
    {
      uint64_t v54 = 0;
      outlined destroy of Pregnancy?((uint64_t)v93);
      uint64_t v55 = v54;
      int v56 = 1;
    }
    uint64_t v91 = v55;
    char v92 = v56 & 1;
    if (v56) {
      uint64_t v95 = 0;
    }
    else {
      uint64_t v95 = v91;
    }
    _HKPrivatePregnancyStartDateSource.init(rawValue:)();
    unint64_t v89 = v10;
    char v90 = v11 & 1;
    if (v11) {
      unint64_t v96 = 4;
    }
    else {
      unint64_t v96 = v89;
    }
    unint64_t v48 = v96;
    unint64_t v88 = v96;
    id v50 = objc_msgSend(v74, sel_startDate);
    static Date._unconditionallyBridgeFromObjectiveC(_:)();
    id v49 = objc_msgSend(v74, sel_endDate);
    static Date._unconditionallyBridgeFromObjectiveC(_:)();
    char v51 = v105;
    PregnancyFromFactor.init(factorStartDate:factorEndDate:startSource:)((uint64_t)v73, (uint64_t)v71, v48, v105);

    outlined init with take of PregnancyFromFactor?(v51, __src);
    if (__src[40] == 2)
    {
      uint64_t v83 = 0;
      uint64_t v84 = 0;
      uint64_t v85 = 0;
      char v86 = 0;
      unsigned __int8 v87 = 0;
    }
    else
    {
      HKCategoryTypeIdentifier_optional v46 = __dst;
      size_t v47 = 41;
      memcpy(__dst, __src, 0x29uLL);
      char v86 = &type metadata for PregnancyFromFactor;
      unsigned __int8 v87 = &protocol witness table for PregnancyFromFactor;
      uint64_t v83 = swift_allocObject();
      memcpy((void *)(v83 + 16), v46, v47);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Pregnancy?]);
    Array.append(_:)();
  }
  id v44 = objc_msgSend(v74, sel_sampleType);
  id v42 = (id)*MEMORY[0x263F093C8];
  id v12 = v42;
  id v43 = (id)MEMORY[0x25A2C0C70](v42);
  int v45 = static NSObject.== infix(_:_:)();

  if (v45)
  {
    id v13 = v74;
    self;
    id v40 = (id)swift_dynamicCastObjCClassUnconditional();
    id v102 = v40;
    id v41 = objc_msgSend(v40, sel_value);
    _HKPrivatePregnancyStartDateSource.rawValue.getter();
    if (v41 == v14)
    {
      id v35 = objc_msgSend(v74, sel_startDate);
      static Date._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v36 = PregnancyFromTest.init(testDate:)((uint64_t)v73);
      uint64_t v37 = v15;
      uint64_t v38 = v16;
      int v39 = v17;

      if (v39 == 2)
      {
        uint64_t v97 = 0;
        uint64_t v98 = 0;
        uint64_t v99 = 0;
        Swift::String v100 = 0;
        Swift::String v101 = 0;
      }
      else
      {
        unint64_t v31 = v36;
        uint64_t v32 = v37;
        uint64_t v33 = v38;
        int v34 = v39;
        int v29 = v39;
        uint64_t v28 = v38;
        uint64_t v27 = v37;
        unint64_t v26 = v36;
        Swift::String v100 = &type metadata for PregnancyFromTest;
        Swift::String v101 = &protocol witness table for PregnancyFromTest;
        uint64_t v18 = swift_allocObject();
        int v19 = HIDWORD(v26);
        int v20 = v27;
        int v21 = HIDWORD(v27);
        char v22 = v28;
        int v23 = HIDWORD(v28);
        char v24 = v29;
        uint64_t v30 = v18;
        uint64_t v97 = v18;
        *(_DWORD *)(v18 + 16) = v26;
        *(_DWORD *)(v18 + 20) = v19;
        *(_DWORD *)(v18 + 24) = v20;
        *(_DWORD *)(v18 + 28) = v21;
        *(unsigned char *)(v18 + 32) = v22;
        *(_DWORD *)(v18 + 36) = v23;
        *(unsigned char *)(v18 + 40) = v24 & 1;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Pregnancy?]);
      Array.append(_:)();
    }
  }
}

id HKSampleQuery.__allocating_init(queryDescriptors:limit:resultsHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return @nonobjc HKSampleQuery.init(queryDescriptors:limit:resultsHandler:)(a1, a2, a3, a4);
}

uint64_t HealthDataStoreQuery.queryRawSamples(_:_:)(uint64_t a1, uint64_t a2)
{
  v3[8] = v2;
  v3[7] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[14] = 0;
  v3[4] = 0;
  v3[5] = 0;
  v3[15] = a2;
  v3[3] = a1;
  v3[14] = a2;
  v3[4] = v2;
  return MEMORY[0x270FA2498](HealthDataStoreQuery.queryRawSamples(_:_:), 0);
}

uint64_t HealthDataStoreQuery.queryRawSamples(_:_:)()
{
  unsigned int v1 = *(_DWORD *)(v0 + 124);
  unsigned int v2 = *(_DWORD *)(v0 + 120);
  uint64_t v3 = *(void *)(v0 + 56);
  *(void *)(v0 + 16) = v0;
  uint64_t v12 = HealthDataStoreQuery.queryDescriptors(_:_:)(v3, __SPAIR64__(v1, v2));
  *(void *)(v0 + 72) = v12;
  uint64_t v9 = v11[8];
  uint64_t v8 = v11[7];
  v11[5] = v12;
  Swift::String v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("queryRawSamples(_:_:)", 0x15uLL, 1);
  v11[10] = v4._object;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  unint64_t v10 = (void *)swift_task_alloc();
  v11[11] = v10;
  v10[2] = v12;
  v10[3] = v8;
  v10[4] = v9;
  id v5 = (void *)swift_task_alloc();
  v11[12] = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HealthDataRawSampleType : HealthDataQueryResult]);
  *id v5 = v11[2];
  v5[1] = HealthDataStoreQuery.queryRawSamples(_:_:);
  return MEMORY[0x270FA2360](v11 + 6, 0, 0, v4._countAndFlagsBits, v4._object, partial apply for closure #1 in HealthDataStoreQuery.queryRawSamples(_:_:), v10, v6);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;

  Swift::String v4 = *v1;
  *(void *)(v4 + 16) = *v1;
  *(void *)(v4 + 104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    unsigned int v2 = HealthDataStoreQuery.queryRawSamples(_:_:);
  }
  else
  {
    swift_task_dealloc();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    unsigned int v2 = HealthDataStoreQuery.queryRawSamples(_:_:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;
  uint64_t v4;

  *(void *)(v0 + 16) = v0;
  uint64_t v3 = *(void *)(v0 + 48);
  swift_bridgeObjectRelease();
  unsigned int v1 = *(uint64_t (**)(uint64_t))(*(void *)(v0 + 16) + 8);
  return v1(v3);
}

{
  uint64_t v0;
  uint64_t (*v1)();
  uint64_t v3;

  *(void *)(v0 + 16) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unsigned int v1 = *(uint64_t (**)())(*(void *)(v0 + 16) + 8);
  return v1();
}

uint64_t closure #1 in HealthDataStoreQuery.queryRawSamples(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = a1;
  uint64_t v14 = a2;
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  uint64_t v18 = partial apply for closure #1 in closure #1 in HealthDataStoreQuery.queryRawSamples(_:_:);
  uint64_t v26 = 0;
  uint64_t v25 = 0;
  uint64_t v24 = 0;
  uint64_t v23 = 0;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[HealthDataRawSampleType : HealthDataQueryResult], Error>);
  uint64_t v10 = *(void *)(v13 - 8);
  uint64_t v11 = v13 - 8;
  unint64_t v9 = (*(void *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = MEMORY[0x270FA5388](v14);
  int v17 = (char *)&v9 - v9;
  uint64_t v26 = v5;
  uint64_t v25 = v4;
  uint64_t v24 = v6;
  uint64_t v23 = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v17, v12, v13);
  uint64_t v19 = v14;
  uint64_t v20 = v15;
  uint64_t v21 = v16;
  char v22 = v17;
  autoreleasepool<A>(invoking:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v17, v13);
}

void closure #1 in closure #1 in HealthDataStoreQuery.queryRawSamples(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v30 = a1;
  uint64_t v21 = a2;
  uint64_t v32 = a3;
  uint64_t v18 = a4;
  v16[1] = 0;
  uint64_t v28 = partial apply for closure #1 in closure #1 in closure #1 in HealthDataStoreQuery.queryRawSamples(_:_:);
  uint64_t v41 = 0;
  uint64_t v40 = 0;
  uint64_t v39 = 0;
  uint64_t v38 = 0;
  id v37 = 0;
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[HealthDataRawSampleType : HealthDataQueryResult], Error>);
  uint64_t v22 = *(void *)(v26 - 8);
  uint64_t v23 = v26 - 8;
  uint64_t v19 = v22;
  uint64_t v20 = *(void *)(v22 + 64);
  unint64_t v17 = (v20 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v25 = (char *)v16 - v17;
  uint64_t v41 = v4;
  uint64_t v40 = v5;
  uint64_t v39 = v6;
  uint64_t v38 = v7;
  type metadata accessor for HKSampleQuery();
  swift_bridgeObjectRetain();
  uint64_t v27 = 0;
  swift_bridgeObjectRetain();
  swift_retain();
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v25, v18, v26);
  uint64_t v8 = *(unsigned __int8 *)(v19 + 80);
  uint64_t v31 = 32;
  uint64_t v24 = (v8 + 32) & ~v8;
  uint64_t v9 = swift_allocObject();
  uint64_t v10 = v22;
  uint64_t v11 = v24;
  uint64_t v12 = v25;
  uint64_t v13 = v26;
  uint64_t v14 = v32;
  uint64_t v29 = v9;
  *(void *)(v9 + 16) = v21;
  *(void *)(v9 + 24) = v14;
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v9 + v11, v12, v13);
  id v35 = HKSampleQuery.__allocating_init(queryDescriptors:limit:resultsHandler:)(v30, v27, (uint64_t)v28, v29);
  id v37 = v35;
  uint64_t v33 = &v36;
  swift_beginAccess();
  id v34 = *(id *)(v32 + 16);
  id v15 = v34;
  swift_endAccess();
  objc_msgSend(v34, sel_executeQuery_, v35);
}

uint64_t closure #1 in closure #1 in closure #1 in HealthDataStoreQuery.queryRawSamples(_:_:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v14 = a2;
  id v15 = a3;
  uint64_t v19 = a4;
  uint64_t v16 = a5;
  uint64_t v17 = a6;
  uint64_t v20 = 0;
  uint64_t v24 = partial apply for closure #1 in closure #1 in closure #1 in closure #1 in HealthDataStoreQuery.queryRawSamples(_:_:);
  uint64_t v18 = partial apply for closure #2 in closure #1 in closure #1 in closure #1 in HealthDataStoreQuery.queryRawSamples(_:_:);
  uint64_t v35 = 0;
  uint64_t v44 = a1;
  uint64_t v43 = a2;
  id v42 = a3;
  uint64_t v41 = a4;
  uint64_t v40 = a5;
  uint64_t v39 = a6;
  uint64_t SampleTypeQuery = getSampleTypeQueryDecoders()();
  uint64_t v38 = SampleTypeQuery;
  v36[1] = v19;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (HealthDataRawSampleType, HealthDataQueryResult));
  uint64_t v22 = _allocateUninitializedArray<A>(_:)();
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HealthDataQueryResult);
  lazy protocol witness table accessor for type HealthDataRawSampleType and conformance HealthDataRawSampleType();
  uint64_t v28 = v36;
  v36[0] = Dictionary.init(dictionaryLiteral:)();
  swift_bridgeObjectRetain();
  uint64_t v25 = &v30;
  uint64_t v31 = SampleTypeQuery;
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HealthDataRawSampleType]);
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HealthDataRawSampleType : HealthDataQueryResult]);
  lazy protocol witness table accessor for type [HealthDataRawSampleType] and conformance [A]();
  Sequence.reduce<A>(into:_:)();
  uint64_t v29 = 0;
  swift_bridgeObjectRelease();
  uint64_t v13 = v37;
  uint64_t v35 = v37;
  swift_bridgeObjectRetain();
  if (v14)
  {
    v12[6] = v14;
    uint64_t v32 = v14;
    swift_retain();
    swift_bridgeObjectRetain();
    v12[3] = v12;
    MEMORY[0x270FA5388](v12);
    void v12[4] = v11;
    void v11[2] = v16;
    v11[3] = v6;
    v12[5] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKSample]);
    lazy protocol witness table accessor for type [HKSample] and conformance [A]();
    Sequence.forEach(_:)();
    swift_release();
    swift_bridgeObjectRelease();
    outlined destroy of [A]();
  }
  id v7 = v15;
  if (v15)
  {
    unsigned char v12[2] = v15;

    lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
    uint64_t v8 = swift_allocError();
    *uint64_t v9 = 16;
    v12[0] = &v33;
    uint64_t v33 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[HealthDataRawSampleType : HealthDataQueryResult], Error>);
    CheckedContinuation.resume(throwing:)();
  }
  else
  {
    swift_bridgeObjectRetain();
    v12[1] = &v34;
    uint64_t v34 = v13;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[HealthDataRawSampleType : HealthDataQueryResult], Error>);
    CheckedContinuation.resume(returning:)();
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in closure #1 in closure #1 in closure #1 in HealthDataStoreQuery.queryRawSamples(_:_:)(uint64_t a1, char *a2, uint64_t a3)
{
  char v9 = 0;
  uint64_t v8 = 0;
  uint64_t v10 = a1;
  char v9 = *a2;
  uint64_t v8 = a3;
  char v7 = v9;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HealthDataQueryResult);
  unint64_t v3 = lazy protocol witness table accessor for type HealthDataRawSampleType and conformance HealthDataRawSampleType();
  MEMORY[0x25A2C04B0](&v7, a3, &type metadata for HealthDataRawSampleType, v6, v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HealthDataRawSampleType : HealthDataQueryResult]);
  return Dictionary.subscript.setter();
}

uint64_t closure #2 in closure #1 in closure #1 in closure #1 in HealthDataStoreQuery.queryRawSamples(_:_:)(id *a1, uint64_t a2, uint64_t a3)
{
  id v26 = 0;
  uint64_t v25 = 0;
  uint64_t v24 = 0;
  char v21 = 0;
  id v10 = *a1;
  id v26 = v10;
  uint64_t v25 = a2;
  uint64_t v24 = a3;
  id v12 = objc_msgSend(v10, sel_sampleType);
  swift_beginAccess();
  uint64_t v13 = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_endAccess();
  id v22 = v12;
  unint64_t v14 = type metadata accessor for HKSampleType();
  unint64_t v3 = lazy protocol witness table accessor for type HKSampleType and conformance NSObject();
  MEMORY[0x25A2C04B0](&v23, &v22, v13, v14, &type metadata for HealthDataRawSampleType, v3);

  char v15 = v23;
  if (v23 == 11) {
    return swift_bridgeObjectRelease();
  }
  char v21 = v23;
  swift_bridgeObjectRelease();
  char v17 = v15;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HealthDataQueryResult);
  unint64_t v5 = lazy protocol witness table accessor for type HealthDataRawSampleType and conformance HealthDataRawSampleType();
  MEMORY[0x25A2C04B0](v18, &v17, a3, &type metadata for HealthDataRawSampleType, v8, v5);
  if (!v19) {
    return outlined destroy of Pregnancy?((uint64_t)v18);
  }
  uint64_t v7 = v20;
  __swift_project_boxed_opaque_existential_1(v18, v19);
  id v6 = v10;
  v16[3] = type metadata accessor for HKSample();
  v16[0] = v10;
  (*(void (**)(void))(v7 + 24))();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
}

uint64_t HealthDataStoreQuery.queryDescriptors(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v31 = a1;
  id v59 = 0;
  uint64_t v58 = 0;
  uint64_t v57 = 0;
  int v56 = 0;
  uint64_t v55 = 0;
  uint64_t v54 = 0;
  unint64_t v53 = 0;
  uint64_t v52 = 0;
  uint64_t v60 = a2;
  unsigned int v39 = HIDWORD(a2);
  unsigned int v35 = a2;
  uint64_t v25 = 0;
  uint64_t v48 = type metadata accessor for Date();
  HKCategoryTypeIdentifier_optional v46 = *(void **)(v48 - 8);
  uint64_t v47 = v48 - 8;
  unint64_t v20 = (v46[8] + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v2 = MEMORY[0x270FA5388](0);
  uint64_t v21 = (uint64_t)v15 - v20;
  id v59 = (char *)v15 - v20;
  unint64_t v22 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2);
  uint64_t v23 = (uint64_t)v15 - v22;
  uint64_t v58 = (char *)v15 - v22;
  uint64_t v42 = type metadata accessor for DateComponents();
  uint64_t v37 = *(void *)(v42 - 8);
  uint64_t v38 = v42 - 8;
  unint64_t v24 = (*(void *)(v37 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v42);
  uint64_t v41 = (uint64_t)v15 - v24;
  unint64_t v26 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = MEMORY[0x270FA5388](v25);
  uint64_t v27 = (char *)v15 - v26;
  unint64_t v28 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  id v49 = (char *)v15 - v28;
  unint64_t v29 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v40 = (char *)v15 - v29;
  uint64_t v57 = (char *)v15 - v29;
  unint64_t v30 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v8);
  int v45 = (char *)v15 - v30;
  int v56 = (char *)v15 - v30;
  uint64_t v32 = type metadata accessor for Calendar();
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v34 = v32 - 8;
  uint64_t v10 = MEMORY[0x270FA5388](v31);
  char v36 = (char *)v15 - v11;
  uint64_t v55 = (char *)v15 - v11;
  uint64_t v54 = v10;
  unint64_t v53 = __PAIR64__(v39, v35);
  uint64_t v52 = v12;
  static Calendar.current.getter();
  UInt32.getDateComponents()(v35, v41);
  Calendar.date(from:)();
  uint64_t v44 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
  uint64_t v43 = v37 + 8;
  v44(v41, v42);
  UInt32.getDateComponents()(v39, v41);
  Calendar.date(from:)();
  v44(v41, v42);
  outlined init with copy of Date?(v45, v49);
  id v50 = (unsigned int (*)(char *, uint64_t, uint64_t))v46[6];
  char v51 = v46 + 6;
  if (v50(v49, 1, v48) == 1)
  {
    outlined destroy of Date?((uint64_t)v49);
  }
  else
  {
    uint64_t v18 = (void (*)(uint64_t, char *, uint64_t))v46[4];
    uint64_t v19 = v46 + 4;
    v18(v23, v49, v48);
    outlined init with copy of Date?(v40, v27);
    if (v50(v27, 1, v48) != 1)
    {
      v18(v21, v27, v48);
      uint64_t v17 = HealthDataStoreQuery.queryDescriptors(_:_:_:)(v31, v23, v21);
      uint64_t v16 = (void (*)(uint64_t, uint64_t))v46[1];
      v15[2] = v46 + 1;
      v16(v21, v48);
      v16(v23, v48);
      outlined destroy of Date?((uint64_t)v40);
      outlined destroy of Date?((uint64_t)v45);
      (*(void (**)(char *, uint64_t))(v33 + 8))(v36, v32);
      return v17;
    }
    outlined destroy of Date?((uint64_t)v27);
    ((void (*)(uint64_t, uint64_t))v46[1])(v23, v48);
  }
  lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
  v15[1] = swift_allocError();
  *unint64_t v14 = 1;
  swift_willThrow();
  outlined destroy of Date?((uint64_t)v40);
  outlined destroy of Date?((uint64_t)v45);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v36, v32);
  return v15[0];
}

uint64_t partial apply for closure #1 in HealthDataStoreQuery.queryRawSamples(_:_:)(uint64_t a1)
{
  return closure #1 in HealthDataStoreQuery.queryRawSamples(_:_:)(a1, v1[2], v1[3], v1[4]);
}

void *outlined init with copy of Date?(const void *a1, void *a2)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a1, 1))
  {
    uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(a2, a1, *(void *)(*(void *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a2, a1, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
  }
  return a2;
}

uint64_t HealthDataStoreQuery.queryDescriptors(_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v42 = a1;
  uint64_t v27 = a2;
  uint64_t v30 = a3;
  uint64_t v37 = 0;
  id v49 = (void (*)(char *, char *))partial apply for closure #1 in HealthDataStoreQuery.queryDescriptors(_:_:_:);
  unint64_t v24 = closure #2 in HealthDataStoreQuery.queryDescriptors(_:_:_:);
  uint64_t v25 = closure #2 in HealthDataStoreQuery.queryDescriptors(_:_:_:);
  uint64_t v63 = 0;
  uint64_t v62 = 0;
  uint64_t v61 = 0;
  uint64_t v60 = 0;
  id v58 = 0;
  uint64_t v33 = type metadata accessor for Date();
  unint64_t v28 = *(void **)(v33 - 8);
  uint64_t v29 = v33 - 8;
  unint64_t v26 = (v28[8] + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v3 = (char *)&v14 - v26;
  char v36 = (char *)&v14 - v26;
  uint64_t v63 = MEMORY[0x270FA5388](v42);
  uint64_t v62 = v4;
  uint64_t v61 = v5;
  uint64_t v60 = v6;
  id v39 = self;
  uint64_t v32 = (void (*)(char *, uint64_t, uint64_t))v28[2];
  uint64_t v31 = v28 + 2;
  v32(v3, v27, v33);
  v7.super.Class isa = Date._bridgeToObjectiveC()().super.isa;
  uint64_t v8 = v36;
  Class isa = v7.super.isa;
  unsigned int v35 = (void (*)(char *, uint64_t))v28[1];
  uint64_t v34 = v28 + 1;
  v35(v36, v33);
  v32(v8, v30, v33);
  Class v40 = Date._bridgeToObjectiveC()().super.isa;
  v35(v36, v33);
  type metadata accessor for HKQueryOptions();
  uint64_t v38 = _allocateUninitializedArray<A>(_:)();
  lazy protocol witness table accessor for type HKQueryOptions and conformance HKQueryOptions();
  SetAlgebra<>.init(arrayLiteral:)();
  id v44 = objc_msgSend(v39, sel_predicateForSamplesWithStartDate_endDate_inclusiveEndDates_options_, isa, v40, 1, v59);

  id v58 = v44;
  uint64_t v57 = v42;
  swift_retain();
  id v9 = v44;
  int v45 = &v52;
  uint64_t v53 = v43;
  id v54 = v44;
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HealthDataRawSampleType]);
  uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKQueryDescriptor]?);
  unint64_t v10 = lazy protocol witness table accessor for type [HealthDataRawSampleType] and conformance [A]();
  uint64_t v11 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(v49, (uint64_t)v45, v46, v47, MEMORY[0x263F8E628], v10, MEMORY[0x263F8E658], v48);
  uint64_t v50 = 0;
  uint64_t v51 = v11;
  uint64_t v19 = v11;
  swift_release();

  uint64_t v56 = v19;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[HKQueryDescriptor]?]);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKQueryDescriptor]);
  lazy protocol witness table accessor for type [[HKQueryDescriptor]?] and conformance [A]();
  uint64_t v12 = Sequence.compactMap<A>(_:)();
  uint64_t v22 = 0;
  uint64_t v23 = v12;
  uint64_t v15 = v12;
  outlined destroy of [A]();
  uint64_t v55 = v15;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[HKQueryDescriptor]]);
  unint64_t v17 = lazy protocol witness table accessor for type [[HKQueryDescriptor]] and conformance [A]();
  lazy protocol witness table accessor for type [HKQueryDescriptor] and conformance [A]();
  uint64_t v18 = Sequence.flatMap<A>(_:)();
  uint64_t v14 = v18;
  outlined destroy of [A]();

  return v14;
}

uint64_t closure #1 in HealthDataStoreQuery.queryDescriptors(_:_:_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v23 = a4;
  uint64_t v27 = a2;
  id v24 = a3;
  unint64_t v26 = (void (*)(char *, char *))partial apply for closure #1 in closure #1 in HealthDataStoreQuery.queryDescriptors(_:_:_:);
  char v39 = 0;
  uint64_t v38 = 0;
  uint64_t v37 = 0;
  int v29 = *a1;
  char v39 = v29;
  uint64_t v38 = a2;
  uint64_t v37 = a3;
  unint64_t v28 = &v36;
  swift_beginAccess();
  uint64_t v30 = *(void *)(v27 + 32);
  swift_bridgeObjectRetain();
  swift_endAccess();
  uint64_t v32 = &v34;
  char v34 = v29;
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKSampleType]);
  unint64_t v4 = lazy protocol witness table accessor for type HealthDataRawSampleType and conformance HealthDataRawSampleType();
  MEMORY[0x25A2C04B0](&v35, &v34, v30, &type metadata for HealthDataRawSampleType, v31, v4);
  if (v35)
  {
    uint64_t v14 = &v35;
    uint64_t v15 = v35;
    swift_bridgeObjectRetain();
    outlined destroy of [A]();
    uint64_t v33 = v15;
    id v7 = v24;
    uint64_t v16 = &v12;
    MEMORY[0x270FA5388](&v12);
    unint64_t v17 = v11;
    void v11[2] = v8;
    unint64_t v18 = type metadata accessor for HKQueryDescriptor();
    unint64_t v9 = lazy protocol witness table accessor for type [HKSampleType] and conformance [A]();
    uint64_t v10 = v25;
    uint64_t result = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(v26, (uint64_t)v17, v31, v18, MEMORY[0x263F8E628], v9, MEMORY[0x263F8E658], v19);
    uint64_t v20 = v10;
    uint64_t v21 = result;
    if (v10)
    {
      __break(1u);
    }
    else
    {
      uint64_t v13 = v21;

      outlined destroy of [A]();
      swift_bridgeObjectRelease();
      uint64_t result = v20;
      uint64_t *v23 = v13;
      uint64_t v22 = result;
    }
  }
  else
  {
    outlined destroy of [A]();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v6 = v25;
    uint64_t *v23 = 0;
    uint64_t v22 = v6;
  }
  return result;
}

uint64_t partial apply for closure #1 in HealthDataStoreQuery.queryDescriptors(_:_:_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in HealthDataStoreQuery.queryDescriptors(_:_:_:)(a1, *(void *)(v2 + 16), *(void **)(v2 + 24), a2);
}

HKQueryDescriptor closure #1 in closure #1 in HealthDataStoreQuery.queryDescriptors(_:_:_:)@<X0>(id *a1@<X0>, NSPredicate_optional *a2@<X1>, HKQueryDescriptor *a3@<X8>)
{
  id v7 = *a1;
  type metadata accessor for HKQueryDescriptor();
  id v3 = v7;
  unint64_t v4 = a2;
  result.super.Class isa = HKQueryDescriptor.__allocating_init(sampleType:predicate:)((HKSampleType)v7, a2).super.isa;
  a3->super.Class isa = result.super.isa;
  return result;
}

uint64_t closure #2 in HealthDataStoreQuery.queryDescriptors(_:_:_:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t result = swift_bridgeObjectRetain();
  *a2 = v4;
  return result;
}

unint64_t lazy protocol witness table accessor for type [[HKQueryDescriptor]?] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [[HKQueryDescriptor]?] and conformance [A];
  if (!lazy protocol witness table cache variable for type [[HKQueryDescriptor]?] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [[HKQueryDescriptor]?]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [[HKQueryDescriptor]?] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type [[HKQueryDescriptor]] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [[HKQueryDescriptor]] and conformance [A];
  if (!lazy protocol witness table cache variable for type [[HKQueryDescriptor]] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [[HKQueryDescriptor]]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [[HKQueryDescriptor]] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type [HKQueryDescriptor] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [HKQueryDescriptor] and conformance [A];
  if (!lazy protocol witness table cache variable for type [HKQueryDescriptor] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [HKQueryDescriptor]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [HKQueryDescriptor] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

void HealthDataStoreQuery.queryDailyAggSedentaryHeartRate(_:_:_:)(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v109 = a2;
  uint64_t v107 = a3;
  uint64_t v108 = a4;
  char v86 = "Fatal error";
  unsigned __int8 v87 = "Unexpectedly found nil while unwrapping an Optional value";
  unint64_t v88 = "NightingaleTraining/HealthDataStoreQuery.swift";
  uint64_t v127 = 0;
  unint64_t v89 = partial apply for closure #1 in HealthDataStoreQuery.queryDailyAggSedentaryHeartRate(_:_:_:);
  uint64_t v162 = 0;
  unint64_t v161 = 0;
  uint64_t v160 = 0;
  uint64_t v158 = 0;
  uint64_t v159 = 0;
  uint64_t v157 = 0;
  id v156 = 0;
  id v155 = 0;
  id v154 = 0;
  id v153 = 0;
  uint64_t v138 = v152;
  memset(v152, 0, 13);
  unsigned int v148 = 0;
  id v146 = 0;
  Swift::String v145 = 0;
  Class v144 = 0;
  uint64_t v143 = 0;
  Class v142 = 0;
  id v141 = 0;
  uint64_t v163 = a1;
  uint64_t v137 = a1;
  uint64_t v90 = type metadata accessor for Date();
  uint64_t v91 = *(void *)(v90 - 8);
  uint64_t v92 = v90 - 8;
  unint64_t v93 = (*(void *)(v91 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v94 = (char *)&v51 - v93;
  uint64_t v95 = type metadata accessor for Calendar.Identifier();
  uint64_t v96 = *(void *)(v95 - 8);
  uint64_t v97 = v95 - 8;
  unint64_t v98 = (*(void *)(v96 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v127);
  uint64_t v99 = (char *)&v51 - v98;
  uint64_t v100 = type metadata accessor for Calendar();
  uint64_t v101 = *(void *)(v100 - 8);
  uint64_t v102 = v100 - 8;
  unint64_t v103 = (*(void *)(v101 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v100);
  uint64_t v104 = (uint64_t)&v51 - v103;
  unint64_t v105 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?)
                                - 8)
                    + 64)
        + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v127);
  uint64_t v106 = (uint64_t)&v51 - v105;
  uint64_t v110 = type metadata accessor for DateInterval();
  uint64_t v111 = *(void *)(v110 - 8);
  uint64_t v112 = v110 - 8;
  unint64_t v113 = (*(void *)(v111 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v110);
  Swift::String v114 = (char *)&v51 - v113;
  uint64_t v162 = (char *)&v51 - v113;
  unint64_t v161 = __PAIR64__(v5, v137);
  uint64_t v160 = v6;
  uint64_t v158 = v7;
  uint64_t v159 = v8;
  uint64_t v157 = v4;
  unint64_t v115 = 0x263F0A000uLL;
  id v116 = objc_msgSend(self, sel__predicateForObjectsFromAppleWatches);
  id v156 = v116;
  id v123 = self;
  id v118 = (id)*MEMORY[0x263F09A90];
  id v9 = v118;
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v117 = v11;
  id v125 = (id)MEMORY[0x25A2C0590](v10);
  swift_bridgeObjectRelease();

  uint64_t v128 = 1;
  uint64_t v120 = specialized _allocateUninitializedArray<A>(_:)();
  uint64_t v119 = v12;
  _HKPrivatePregnancyStartDateSource.rawValue.getter();
  uint64_t v13 = v119;
  uint64_t v15 = v14;
  uint64_t v16 = v120;
  v119[3] = MEMORY[0x263F8D6C8];
  void *v13 = v15;
  uint64_t v121 = MEMORY[0x263F8EE58] + 8;
  _finalizeUninitializedArray<A>(_:)();
  uint64_t v122 = v16;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v126 = objc_msgSend(v123, sel_predicateForObjectsWithMetadataKey_allowedValues_, v125, isa);

  id v155 = v126;
  type metadata accessor for HKCategoryValueSleepAnalysis();
  uint64_t v129 = 4;
  uint64_t v17 = _allocateUninitializedArray<A>(_:)();
  uint64_t v18 = v129;
  *uint64_t v19 = v128;
  v19[1] = 3;
  void v19[2] = v18;
  v19[3] = 5;
  _finalizeUninitializedArray<A>(_:)();
  uint64_t v130 = v17;
  lazy protocol witness table accessor for type HKCategoryValueSleepAnalysis and conformance HKCategoryValueSleepAnalysis();
  uint64_t v131 = Set.init(arrayLiteral:)();
  lazy protocol witness table accessor for type HKCategoryValueSleepAnalysis and conformance HKCategoryValueSleepAnalysis();
  id v132 = (id)static HKCategoryValuePredicateProviding<>.predicateForSamples(equalTo:)();
  swift_bridgeObjectRelease();
  id v154 = v132;
  unint64_t v133 = 0x263F0A000uLL;
  id v135 = objc_msgSend(self, sel_countUnit);
  id v134 = objc_msgSend(self, sel_minuteUnit);
  id v136 = objc_msgSend(v135, sel_unitDividedByUnit_);

  id v153 = v136;
  uint64_t v151 = v137;
  uint64_t v139 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClosedRange<UInt32>);
  lazy protocol witness table accessor for type ClosedRange<UInt32> and conformance <> ClosedRange<A>();
  Collection<>.makeIterator()();
  while (1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<ClosedRange<UInt32>>);
    IndexingIterator.next()();
    unsigned int v84 = v149;
    if (v150) {
      break;
    }
    unsigned int v83 = v84;
    unsigned int v82 = v84;
    unsigned int v148 = v84;
    dispatch_group_enter(v109);
    (*(void (**)(char *, void, uint64_t))(v96 + 104))(v99, *MEMORY[0x263F07740], v95);
    Calendar.init(identifier:)();
    (*(void (**)(char *, uint64_t))(v96 + 8))(v99, v95);
    sleepDayInterval(morningIndex:calendar:)(v82, v104, v106);
    (*(void (**)(uint64_t, uint64_t))(v101 + 8))(v104, v100);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v111 + 48))(v106, 1, v110) == 1)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v111 + 32))(v114, v106, v110);
    id v54 = self;
    DateInterval.start.getter();
    Class v56 = Date._bridgeToObjectiveC()().super.isa;
    char v52 = *(void (**)(char *, uint64_t))(v91 + 8);
    uint64_t v51 = v91 + 8;
    v52(v94, v90);
    DateInterval.end.getter();
    Class v55 = Date._bridgeToObjectiveC()().super.isa;
    v52(v94, v90);
    uint64_t v67 = 0;
    type metadata accessor for HKQueryOptions();
    uint64_t v53 = _allocateUninitializedArray<A>(_:)();
    lazy protocol witness table accessor for type HKQueryOptions and conformance HKQueryOptions();
    SetAlgebra<>.init(arrayLiteral:)();
    id v81 = objc_msgSend(v54, sel_predicateForSamplesWithStartDate_endDate_options_, v56, v55, v147);

    id v146 = v81;
    unint64_t v61 = type metadata accessor for NSCompoundPredicate();
    unint64_t v63 = type metadata accessor for NSPredicate();
    uint64_t v68 = 2;
    uint64_t v58 = _allocateUninitializedArray<A>(_:)();
    uint64_t v57 = v20;
    id v21 = v81;
    id v22 = v132;
    *uint64_t v57 = v81;
    id v23 = v22;
    v57[1] = v132;
    _finalizeUninitializedArray<A>(_:)();
    id v80 = (NSPredicate_optional *)@nonobjc NSCompoundPredicate.__allocating_init(andPredicateWithSubpredicates:)();
    Swift::String v145 = v80;
    unint64_t v70 = type metadata accessor for HKQueryDescriptor();
    type metadata accessor for HKCategoryType();
    id v59 = (id)*MEMORY[0x263F09410];
    id v24 = v59;
    v60.super.super.Class isa = (Class)MEMORY[0x25A2C0C70](v59);
    uint64_t v25 = v80;
    Class v79 = HKQueryDescriptor.__allocating_init(sampleType:predicate:)(v60, v80).super.isa;
    Class v144 = v79;
    uint64_t v64 = _allocateUninitializedArray<A>(_:)();
    uint64_t v62 = v26;
    id v27 = v116;
    id v28 = v81;
    void *v62 = v116;
    id v29 = v28;
    id v30 = v126;
    v62[1] = v81;
    id v31 = v30;
    v62[2] = v126;
    _finalizeUninitializedArray<A>(_:)();
    unint64_t v78 = (NSPredicate_optional *)@nonobjc NSCompoundPredicate.__allocating_init(andPredicateWithSubpredicates:)();
    uint64_t v143 = v78;
    type metadata accessor for HKQuantityType();
    id v65 = (id)*MEMORY[0x263F09E38];
    id v32 = v65;
    v66.super.super.Class isa = (Class)MEMORY[0x25A2C0C80](v65);
    uint64_t v33 = v78;
    Class v77 = HKQueryDescriptor.__allocating_init(sampleType:predicate:)(v66, v78).super.isa;
    Class v142 = v77;
    type metadata accessor for HKSampleQuery();
    uint64_t v71 = _allocateUninitializedArray<A>(_:)();
    unint64_t v69 = v34;
    uint64_t v35 = v79;
    Class v36 = v77;
    *unint64_t v69 = v79;
    uint64_t v37 = v36;
    uint64_t v38 = v71;
    v69[1] = v77;
    _finalizeUninitializedArray<A>(_:)();
    uint64_t v73 = v38;
    uint64_t v72 = 0;
    swift_retain();
    char v39 = v109;
    id v40 = v136;
    uint64_t v41 = swift_allocObject();
    uint64_t v42 = v108;
    unsigned int v43 = v82;
    id v44 = v109;
    id v45 = v136;
    uint64_t v46 = v72;
    uint64_t v47 = (uint64_t)v89;
    uint64_t v48 = v41;
    uint64_t v49 = v73;
    *(void *)(v48 + 16) = v107;
    *(void *)(v48 + 24) = v42;
    *(_DWORD *)(v48 + 32) = v43;
    *(void *)(v48 + 40) = v44;
    *(void *)(v48 + 48) = v45;
    id v76 = HKSampleQuery.__allocating_init(queryDescriptors:limit:resultsHandler:)(v49, v46, v47, v48);
    id v141 = v76;
    id v74 = &v140;
    swift_beginAccess();
    id v75 = *(id *)(v85 + 16);
    id v50 = v75;
    swift_endAccess();
    objc_msgSend(v75, sel_executeQuery_, v76);

    (*(void (**)(char *, uint64_t))(v111 + 8))(v114, v110);
  }
}

unint64_t type metadata accessor for NSCompoundPredicate()
{
  uint64_t v2 = lazy cache variable for type metadata for NSCompoundPredicate;
  if (!lazy cache variable for type metadata for NSCompoundPredicate)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for NSCompoundPredicate);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for NSPredicate()
{
  uint64_t v2 = lazy cache variable for type metadata for NSPredicate;
  if (!lazy cache variable for type metadata for NSPredicate)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for NSPredicate);
    return ObjCClassMetadata;
  }
  return v2;
}

id @nonobjc NSCompoundPredicate.__allocating_init(andPredicateWithSubpredicates:)()
{
  type metadata accessor for NSPredicate();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  id v2 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_andPredicateWithSubpredicates_, isa);

  swift_bridgeObjectRelease();
  return v2;
}

unint64_t type metadata accessor for HKSampleQuery()
{
  uint64_t v2 = lazy cache variable for type metadata for HKSampleQuery;
  if (!lazy cache variable for type metadata for HKSampleQuery)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HKSampleQuery);
    return ObjCClassMetadata;
  }
  return v2;
}

void closure #1 in HealthDataStoreQuery.queryDailyAggSedentaryHeartRate(_:_:_:)(uint64_t a1, void *a2, void *a3, void (*a4)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *), uint64_t a5, unsigned int a6, NSObject *a7, void *a8)
{
  uint64_t v62 = a2;
  unint64_t v63 = a3;
  uint64_t v64 = a4;
  uint64_t v65 = a5;
  unsigned int v66 = a6;
  dispatch_group_t v67 = a7;
  id v68 = a8;
  unint64_t v69 = (void (*)(char *, char *))partial apply for closure #1 in closure #1 in HealthDataStoreQuery.queryDailyAggSedentaryHeartRate(_:_:_:);
  unint64_t v70 = (void (*)(char *, char *))closure #2 in closure #1 in HealthDataStoreQuery.queryDailyAggSedentaryHeartRate(_:_:_:);
  v96[0]._rawValue = 0;
  v95._rawValue = 0;
  v94._rawValue = 0;
  v93._rawValue = 0;
  v92._rawValue = 0;
  uint64_t v71 = 0;
  v81._rawValue = 0;
  _._rawValue = 0;
  v75._rawValue = 0;
  uint64_t v102 = a1;
  uint64_t v101 = a2;
  uint64_t v100 = a3;
  unint64_t v98 = (void (*)(void, void, void, void, void, void, void, void))a4;
  uint64_t v99 = a5;
  unsigned int v97 = a6;
  v96[3]._rawValue = a7;
  v96[2]._rawValue = a8;
  v96[1]._rawValue = a3;
  BOOL v61 = a3 != 0;
  if (a3)
  {
    swift_retain();
    LODWORD(v73) = 0;
    BYTE4(v73) = 1;
    LODWORD(v72) = 0;
    BYTE4(v72) = 1;
    v64(v66, v73, v72, 0, 1, 0, 1, v63);
    swift_release();
    dispatch_group_leave(v67);
    return;
  }
  swift_bridgeObjectRetain();
  if (!v62)
  {
    dispatch_group_leave(v67);
    return;
  }
  HKSampleType v60 = v62;
  Class v56 = v96;
  v96[0]._rawValue = v62;
  uint64_t v54 = 0;
  type metadata accessor for HKCategorySample();
  Class v55 = &v95;
  v95._rawValue = (void *)Array.init()();
  unint64_t v57 = type metadata accessor for HKQuantitySample();
  v94._rawValue = (void *)Array.init()();
  splitHRAndSleepingHours(_:_:_:)(v96, &v95, &v94);
  rawValue = v94._rawValue;
  swift_bridgeObjectRetain();
  uint64_t v59 = MEMORY[0x25A2C0810](rawValue, v57);
  swift_bridgeObjectRelease();
  if (!v59)
  {
    dispatch_group_leave(v67);
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    return;
  }
  uint64_t v8 = v71;
  id v45 = (void *)consolidateSleepHours(_:)((uint64_t *)&v95);
  swift_bridgeObjectRetain();
  v93._rawValue = v45;
  uint64_t v46 = v94._rawValue;
  swift_bridgeObjectRetain();
  uint64_t v91 = v46;
  id v9 = v68;
  uint64_t v47 = &v17;
  MEMORY[0x270FA5388](&v17);
  uint64_t v48 = v16;
  void v16[2] = v10;
  uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKQuantitySample]);
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (interval: DateInterval, hr: Float));
  unint64_t v11 = lazy protocol witness table accessor for type [HKQuantitySample] and conformance [A]();
  uint64_t v12 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(v69, (uint64_t)v48, v49, v50, MEMORY[0x263F8E628], v11, MEMORY[0x263F8E658], v51);
  uint64_t v52 = v8;
  uint64_t v53 = v12;
  uint64_t v41 = (void *)v12;

  outlined destroy of [A]();
  swift_bridgeObjectRetain();
  v92._rawValue = v41;
  Swift::Float v89 = 0.0;
  char v90 = 1;
  Swift::Float v87 = 0.0;
  char v88 = 1;
  uint64_t v85 = 0;
  char v86 = 1;
  uint64_t v83 = 0;
  char v84 = 1;
  swift_bridgeObjectRetain();
  unsigned int v43 = &v82;
  unsigned int v82 = v45;
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DateInterval]);
  lazy protocol witness table accessor for type [DateInterval] and conformance [A]();
  int v44 = Collection.isEmpty.getter();
  outlined destroy of [A]();
  swift_bridgeObjectRelease();
  if ((v44 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v15 = (void *)specialized Array.init()();
    id v29 = &v81;
    v81._rawValue = v15;
    _._rawValue = (void *)specialized Array.init()();
    splitHR(_:_:_:_:)(v29, &_, &v93, &v92);
    uint64_t v33 = _._rawValue;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v32 = &v79;
    Class v79 = v33;
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
    unint64_t v31 = lazy protocol witness table accessor for type [Float] and conformance [A]();
    int v34 = Collection.isEmpty.getter();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    if ((v34 & 1) == 0)
    {
      Swift::Float v87 = getBottomPercentile(percentile:_:)(10, &_);
      int v28 = 1;
      int v27 = 0;
      char v88 = 0;
      uint64_t v25 = _._rawValue;
      swift_bridgeObjectRetain();
      uint64_t v26 = MEMORY[0x25A2C0820](v25);
      swift_bridgeObjectRelease();
      uint64_t v83 = v26;
      char v84 = v27 & 1 & v28;
    }
    id v23 = v81._rawValue;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v22 = &v78;
    unint64_t v78 = v23;
    int v24 = Collection.isEmpty.getter();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    if ((v24 & 1) == 0)
    {
      Swift::Float v89 = getBottomPercentile(percentile:_:)(10, &v81);
      int v21 = 1;
      int v20 = 0;
      char v90 = 0;
      uint64_t v18 = v81._rawValue;
      swift_bridgeObjectRetain();
      uint64_t v19 = MEMORY[0x25A2C0820](v18);
      swift_bridgeObjectRelease();
      uint64_t v85 = v19;
      char v86 = v20 & 1 & v21;
    }
    outlined destroy of [A]();
    outlined destroy of [A]();
    goto LABEL_18;
  }
  uint64_t v13 = v52;
  v74[1] = v41;
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(interval: DateInterval, hr: Float)]);
  unint64_t v14 = lazy protocol witness table accessor for type [(interval: DateInterval, hr: Float)] and conformance [A]();
  uint64_t v40 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(v70, 0, v39, MEMORY[0x263F8D5C8], MEMORY[0x263F8E628], v14, MEMORY[0x263F8E658], v51);
  if (!v13)
  {
    uint64_t v37 = (void *)v40;
    outlined destroy of [A]();
    swift_bridgeObjectRetain();
    v75._rawValue = v37;
    swift_bridgeObjectRetain();
    Class v36 = v74;
    v74[0] = v37;
    uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
    lazy protocol witness table accessor for type [Float] and conformance [A]();
    int v38 = Collection.isEmpty.getter();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    if ((v38 & 1) == 0)
    {
      Swift::Float v89 = getBottomPercentile(percentile:_:)(10, &v75);
      char v90 = 0;
    }
    outlined destroy of [A]();
LABEL_18:
    swift_retain();
    *(Swift::Float *)&uint64_t v77 = v89;
    BYTE4(v77) = v90 & 1;
    *(Swift::Float *)&uint64_t v76 = v87;
    BYTE4(v76) = v88 & 1;
    v64(v66, v77, v76, v85, v86 & 1, v83, v84 & 1, 0);
    swift_release();
    dispatch_group_leave(v67);
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    return;
  }
  __break(1u);
}

uint64_t sub_257C8319C()
{
  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #1 in HealthDataStoreQuery.queryDailyAggSedentaryHeartRate(_:_:_:)(uint64_t a1, void *a2, void *a3)
{
  closure #1 in HealthDataStoreQuery.queryDailyAggSedentaryHeartRate(_:_:_:)(a1, a2, a3, *(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *))(v3 + 16), *(void *)(v3 + 24), *(_DWORD *)(v3 + 32), *(NSObject **)(v3 + 40), *(void **)(v3 + 48));
}

Swift::Void __swiftcall splitHRAndSleepingHours(_:_:_:)(Swift::OpaquePointer *a1, Swift::OpaquePointer *a2, Swift::OpaquePointer *a3)
{
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKSample]);
  lazy protocol witness table accessor for type [HKSample] and conformance [A]();
  Collection<>.makeIterator()();
  while (1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[HKSample]>);
    IndexingIterator.next()();
    if (!v10) {
      break;
    }
    type metadata accessor for NSObject();
    id v8 = objc_msgSend(v10, sel_sampleType);
    type metadata accessor for HKCategoryType();
    uint64_t v6 = *MEMORY[0x263F09410];
    id v3 = (id)*MEMORY[0x263F09410];
    id v7 = (id)MEMORY[0x25A2C0C70](v6);
    char v9 = static NSObject.== infix(_:_:)();

    id v4 = v10;
    self;
    swift_dynamicCastObjCClassUnconditional();
    if (v9) {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKCategorySample]);
    }
    else {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKQuantitySample]);
    }
    Array.append(_:)();
  }
  outlined destroy of [A]();
  type metadata accessor for HKSample();
  char v5 = default argument 1 of NightingaleDPFLRunner.sendLocationAsync<A>(location:force:work:)();
  Array.removeAll(keepingCapacity:)(v5 & 1);
}

unint64_t lazy protocol witness table accessor for type [HKSample] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [HKSample] and conformance [A];
  if (!lazy protocol witness table cache variable for type [HKSample] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [HKSample]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [HKSample] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type [HKSample] and conformance [A];
  if (!lazy protocol witness table cache variable for type [HKSample] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [HKSample]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [HKSample] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

uint64_t consolidateSleepHours(_:)(uint64_t *a1)
{
  unint64_t v63 = a1;
  uint64_t v51 = 0;
  id v45 = (void (*)(char *, char *))closure #1 in consolidateSleepHours(_:);
  uint64_t v46 = closure #2 in consolidateSleepHours(_:);
  uint64_t v47 = "Fatal error";
  uint64_t v48 = "Range requires lowerBound <= upperBound";
  uint64_t v49 = "Swift/Range.swift";
  Swift::OpaquePointer v92 = 0;
  uint64_t v91 = 0;
  uint64_t v50 = 0;
  uint64_t v87 = 0;
  uint64_t v86 = 0;
  uint64_t v83 = 0;
  uint64_t v84 = 0;
  uint64_t v85 = 0;
  uint64_t v78 = 0;
  uint64_t v52 = type metadata accessor for Date();
  uint64_t v53 = *(void *)(v52 - 8);
  uint64_t v54 = v52 - 8;
  unint64_t v55 = (*(void *)(v53 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v1 = MEMORY[0x270FA5388](0);
  Class v56 = (char *)&v19 - v55;
  unint64_t v57 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v3 = MEMORY[0x270FA5388](v1);
  uint64_t v58 = (char *)&v19 - v57;
  unint64_t v59 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  HKSampleType v60 = (char *)&v19 - v59;
  unint64_t v61 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v5);
  uint64_t v62 = (char *)&v19 - v61;
  uint64_t v64 = type metadata accessor for DateInterval();
  uint64_t v65 = *(void *)(v64 - 8);
  uint64_t v66 = v64 - 8;
  unint64_t v67 = (*(void *)(v65 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v7 = MEMORY[0x270FA5388](v63);
  id v68 = (char *)&v19 - v67;
  unint64_t v69 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  unint64_t v70 = (char *)&v19 - v69;
  unint64_t v71 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
  unint64_t v11 = (void *)MEMORY[0x270FA5388](v9);
  uint64_t v72 = (char *)&v19 - v71;
  Swift::OpaquePointer v92 = (char *)&v19 - v71;
  uint64_t v91 = v11;
  uint64_t v76 = *v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Swift::OpaquePointer v75 = &v90;
  uint64_t v90 = v76;
  uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKCategorySample]);
  unint64_t v74 = lazy protocol witness table accessor for type [HKCategorySample] and conformance [A]();
  int v77 = Collection.isEmpty.getter();
  outlined destroy of [A]();
  swift_bridgeObjectRelease();
  if (v77) {
    return _allocateUninitializedArray<A>(_:)();
  }
  uint64_t v12 = v50;
  uint64_t v40 = *v63;
  swift_bridgeObjectRetain();
  uint64_t v89 = v40;
  uint64_t result = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(v45, 0, v73, v64, MEMORY[0x263F8E628], v74, MEMORY[0x263F8E658], v41);
  uint64_t v42 = v12;
  uint64_t v43 = result;
  if (!v12)
  {
    uint64_t v36 = v43;
    outlined destroy of [A]();
    uint64_t v88 = v36;
    uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DateInterval]);
    lazy protocol witness table accessor for type [DateInterval] and conformance [A]();
    uint64_t v14 = Sequence.sorted(by:)();
    uint64_t v38 = 0;
    uint64_t v39 = v14;
    uint64_t v34 = v14;
    outlined destroy of [A]();
    uint64_t v87 = v34;
    uint64_t v86 = Array.init()();
    Array.subscript.getter();
    uint64_t v35 = MEMORY[0x25A2C0810](v34, v64);
    if (v35 < 1)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    uint64_t v81 = 1;
    uint64_t v82 = v35;
    uint64_t v83 = specialized Collection<>.makeIterator()();
    uint64_t v84 = v15;
    uint64_t v85 = v16;
    for (uint64_t i = v38; ; uint64_t i = v31)
    {
      uint64_t v31 = i;
      uint64_t v79 = specialized IndexingIterator.next()();
      char v80 = v17 & 1;
      uint64_t v32 = v79;
      if (v17) {
        break;
      }
      uint64_t v30 = v32;
      uint64_t v26 = v32;
      uint64_t v78 = v32;
      int v24 = *(void (**)(char *, char *, uint64_t))(v65 + 16);
      uint64_t v25 = v65 + 16;
      v24(v70, v72, v64);
      Array.subscript.getter();
      int v29 = DateInterval.intersects(_:)();
      int v28 = *(void (**)(char *, uint64_t))(v65 + 8);
      uint64_t v27 = v65 + 8;
      v28(v68, v64);
      v28(v70, v64);
      if (v29)
      {
        DateInterval.start.getter();
        Array.subscript.getter();
        DateInterval.start.getter();
        v28(v68, v64);
        unint64_t v21 = lazy protocol witness table accessor for type Date and conformance Date();
        min<A>(_:_:)();
        id v23 = *(void (**)(char *, uint64_t))(v53 + 8);
        uint64_t v22 = v53 + 8;
        v23(v58, v52);
        v23(v60, v52);
        DateInterval.end.getter();
        Array.subscript.getter();
        DateInterval.end.getter();
        v28(v68, v64);
        max<A>(_:_:)();
        v23(v56, v52);
        v23(v58, v52);
        DateInterval.init(start:end:)();
      }
      else
      {
        v24(v70, v72, v64);
        Array.append(_:)();
        Array.subscript.getter();
      }
      (*(void (**)(char *, char *, uint64_t))(v65 + 40))(v72, v70, v64);
    }
    (*(void (**)(char *, char *, uint64_t))(v65 + 16))(v70, v72, v64);
    uint64_t v19 = &v86;
    Array.append(_:)();
    type metadata accessor for HKCategorySample();
    char v18 = default argument 1 of NightingaleDPFLRunner.sendLocationAsync<A>(location:force:work:)();
    Array.removeAll(keepingCapacity:)(v18 & 1);
    uint64_t v20 = v86;
    swift_bridgeObjectRetain();
    (*(void (**)(char *, uint64_t))(v65 + 8))(v72, v64);
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    return v20;
  }
  __break(1u);
  __break(1u);
  return result;
}

void closure #1 in closure #1 in HealthDataStoreQuery.queryDailyAggSedentaryHeartRate(_:_:_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v23 = a3;
  uint64_t v11 = a1;
  uint64_t v19 = a2;
  id v25 = 0;
  uint64_t v24 = 0;
  unint64_t v12 = (*(void *)(*(void *)(type metadata accessor for Date() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v3 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v11 - v12;
  unint64_t v13 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v5 = (id *)MEMORY[0x270FA5388](v3);
  uint64_t v14 = (char *)&v11 - v13;
  id v18 = *v5;
  id v25 = v18;
  uint64_t v24 = v6;
  uint64_t v22 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (interval: DateInterval, hr: Float))
               + 48);
  id v7 = v18;
  id v17 = objc_msgSend(v18, sel_startDate);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  id v8 = v18;
  id v16 = objc_msgSend(v18, sel_endDate);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  DateInterval.init(start:end:)();
  id v20 = objc_msgSend(v18, sel_quantity);
  objc_msgSend(v20, sel_doubleValueForUnit_, v19);
  Swift::Double v21 = v9;

  Swift::Float v10 = Float.init(_:)(v21);
  *(Swift::Float *)(v23 + v22) = v10;
}

uint64_t closure #2 in closure #1 in HealthDataStoreQuery.queryDailyAggSedentaryHeartRate(_:_:_:)@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v14 = a2;
  uint64_t v12 = a1;
  uint64_t v19 = 0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (interval: DateInterval, hr: Float));
  unint64_t v10 = (*(void *)(*(void *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v3 = MEMORY[0x270FA5388](v2);
  id v18 = (char *)&v9 - v10;
  uint64_t v19 = v4;
  uint64_t v13 = *(int *)(v3 + 48);
  uint64_t v11 = *(int *)(v3 + 48);
  uint64_t v17 = type metadata accessor for DateInterval();
  uint64_t v15 = *(void *)(v17 - 8);
  uint64_t v16 = v17 - 8;
  (*(void (**)(char *, uint64_t))(v15 + 16))(v18, v12);
  uint64_t v5 = v14;
  uint64_t v6 = v15;
  int v7 = *(_DWORD *)(v12 + v11);
  *(_DWORD *)&v18[v13] = v7;
  *uint64_t v5 = v7;
  return (*(uint64_t (**)(void))(v6 + 8))();
}

Swift::Void __swiftcall splitHR(_:_:_:_:)(Swift::OpaquePointer *a1, Swift::OpaquePointer *a2, Swift::OpaquePointer *a3, Swift::OpaquePointer *a4)
{
  uint64_t v65 = a1;
  unint64_t v63 = a2;
  id v68 = a3;
  uint64_t v64 = a4;
  uint64_t v87 = 0;
  uint64_t v86 = 0;
  uint64_t v85 = 0;
  uint64_t v84 = 0;
  uint64_t v83 = 0;
  uint64_t v82 = 0;
  uint64_t v81 = 0;
  unint64_t v71 = v80;
  v80[0] = 0;
  v80[1] = 0;
  uint64_t v77 = 0;
  uint64_t v78 = 0;
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (interval: DateInterval, hr: Float));
  uint64_t v40 = *(void *)(v39 - 8);
  uint64_t v41 = v39 - 8;
  unint64_t v42 = (*(void *)(v40 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = MEMORY[0x270FA5388](v39);
  uint64_t v43 = (char *)&v21 - v42;
  unint64_t v44 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  id v45 = (char *)&v21 - v44;
  unint64_t v46 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v6);
  uint64_t v47 = (uint64_t)&v21 - v46;
  uint64_t v87 = (char *)&v21 - v46;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (interval: DateInterval, hr: Float)?);
  unint64_t v48 = (*(void *)(*(void *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v8);
  uint64_t v49 = (char *)&v21 - v48;
  uint64_t v50 = 0;
  uint64_t v51 = type metadata accessor for Date();
  uint64_t v52 = *(void *)(v51 - 8);
  uint64_t v53 = v51 - 8;
  unint64_t v54 = (*(void *)(v52 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v9 = MEMORY[0x270FA5388](v50);
  uint64_t v55 = (uint64_t)&v21 - v54;
  unint64_t v56 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v9);
  uint64_t v57 = (uint64_t)&v21 - v56;
  uint64_t v58 = type metadata accessor for DateInterval();
  uint64_t v59 = *(void *)(v58 - 8);
  uint64_t v60 = v58 - 8;
  unint64_t v61 = (*(void *)(v59 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v58);
  uint64_t v62 = (char *)&v21 - v61;
  uint64_t v86 = (char *)&v21 - v61;
  unint64_t v66 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v11 = MEMORY[0x270FA5388](v65);
  unint64_t v67 = (char *)&v21 - v66;
  uint64_t v85 = v11;
  uint64_t v84 = v12;
  uint64_t v83 = v13;
  uint64_t v82 = v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AugmentedIntervalTree<Date, Any>);
  uint64_t v69 = AugmentedIntervalTree.__allocating_init()();
  uint64_t v81 = v69;
  rawValue = v68->_rawValue;
  swift_bridgeObjectRetain();
  uint64_t v79 = rawValue;
  uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DateInterval]);
  lazy protocol witness table accessor for type [DateInterval] and conformance [A]();
  Collection<>.makeIterator()();
  while (1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[DateInterval]>);
    IndexingIterator.next()();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v67, 1, v58) == 1) {
      break;
    }
    (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v62, v67, v58);
    DateInterval.start.getter();
    DateInterval.end.getter();
    uint64_t v36 = v73;
    memset(v73, 0, sizeof(v73));
    AugmentedIntervalTree.insert(start:end:context:)(v57, v55, v73);
    outlined destroy of Pregnancy?((uint64_t)v36);
    uint64_t v38 = *(void (**)(uint64_t, uint64_t))(v52 + 8);
    uint64_t v37 = v52 + 8;
    v38(v55, v51);
    v38(v57, v51);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v62, v58);
  }
  outlined destroy of [A]();
  uint64_t v34 = v64->_rawValue;
  swift_bridgeObjectRetain();
  uint64_t v76 = v34;
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(interval: DateInterval, hr: Float)]);
  lazy protocol witness table accessor for type [(interval: DateInterval, hr: Float)] and conformance [A]();
  Collection<>.makeIterator()();
  while (1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[(interval: DateInterval, hr: Float)]>);
    IndexingIterator.next()();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v49, 1, v39) == 1) {
      break;
    }
    uint64_t v15 = v45;
    int v28 = *(_DWORD *)&v49[*(int *)(v39 + 48)];
    uint64_t v23 = *(int *)(v39 + 48);
    (*(void (**)(uint64_t))(v59 + 32))(v47);
    uint64_t v16 = v59;
    uint64_t v17 = v39;
    *(_DWORD *)(v47 + v23) = v28;
    uint64_t v24 = *(int *)(v17 + 48);
    uint64_t v26 = *(void (**)(char *))(v16 + 16);
    uint64_t v25 = v16 + 16;
    v26(v15);
    *(_DWORD *)&v15[v24] = v28;
    DateInterval.start.getter();
    id v18 = v43;
    uint64_t v30 = *(void (**)(char *, uint64_t))(v59 + 8);
    uint64_t v29 = v59 + 8;
    v30(v45, v58);
    uint64_t v27 = *(int *)(v39 + 48);
    ((void (*)(char *, uint64_t, uint64_t))v26)(v18, v47, v58);
    *(_DWORD *)&v18[v27] = v28;
    DateInterval.end.getter();
    v30(v43, v58);
    int v33 = AugmentedIntervalTree.overlap(start:end:)(v57, v55);
    uint64_t v32 = *(void (**)(uint64_t, uint64_t))(v52 + 8);
    uint64_t v31 = v52 + 8;
    v32(v55, v51);
    v32(v57, v51);
    if (v33)
    {
      uint64_t v22 = *(int *)(v39 + 48);
      ((void (*)(char *, uint64_t, uint64_t))v26)(v45, v47, v58);
      int v19 = v28;
      *(_DWORD *)&v45[v22] = v28;
      int v74 = v19;
    }
    else
    {
      uint64_t v21 = *(int *)(v39 + 48);
      ((void (*)(char *, uint64_t, uint64_t))v26)(v45, v47, v58);
      int v20 = v28;
      *(_DWORD *)&v45[v21] = v28;
      int v75 = v20;
    }
    specialized Array.append(_:)();
    v30(v45, v58);
    outlined destroy of (interval: DateInterval, hr: Float)(v47);
  }
  outlined destroy of [A]();
  swift_release();
}

uint64_t HealthDataStoreQuery.queryDailyAggSedentaryHeartRate(for:)(uint64_t a1)
{
  v2[17] = v1;
  v2[6] = v2;
  v2[45] = 0;
  v2[7] = 0;
  v2[8] = 0;
  v2[9] = 0;
  v2[10] = 0;
  v2[12] = 0;
  v2[13] = 0;
  v2[14] = 0;
  v2[15] = 0;
  v2[16] = 0;
  v2[46] = a1;
  uint64_t v3 = type metadata accessor for Calendar.Identifier();
  v2[18] = v3;
  v2[19] = *(void *)(v3 - 8);
  v2[20] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Calendar();
  v2[21] = v4;
  v2[22] = *(void *)(v4 - 8);
  v2[23] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
  v2[24] = swift_task_alloc();
  v2[25] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Date();
  v2[26] = v5;
  v2[27] = *(void *)(v5 - 8);
  v2[28] = swift_task_alloc();
  v2[29] = swift_task_alloc();
  v2[30] = swift_task_alloc();
  v2[45] = a1;
  v2[7] = v1;
  return MEMORY[0x270FA2498](HealthDataStoreQuery.queryDailyAggSedentaryHeartRate(for:), 0);
}

uint64_t HealthDataStoreQuery.queryDailyAggSedentaryHeartRate(for:)()
{
  uint64_t v76 = *(void *)(v0 + 200);
  uint64_t v73 = *(void *)(v0 + 184);
  uint64_t v72 = *(void *)(v0 + 176);
  uint64_t v74 = *(void *)(v0 + 168);
  uint64_t v68 = *(void *)(v0 + 160);
  uint64_t v67 = *(void *)(v0 + 152);
  uint64_t v69 = *(void *)(v0 + 144);
  unsigned int v71 = *(_DWORD *)(v0 + 368);
  *(void *)(v0 + 48) = v0;
  id v58 = objc_msgSend(self, sel__predicateForObjectsFromAppleWatches);
  *(void *)(v0 + 248) = v58;
  *(void *)(v0 + 64) = v58;
  id v61 = self;
  id v59 = (id)*MEMORY[0x263F09A90];
  id v1 = (id)*MEMORY[0x263F09A90];
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v63 = (id)MEMORY[0x25A2C0590](v2);
  swift_bridgeObjectRelease();

  specialized _allocateUninitializedArray<A>(_:)();
  uint64_t v60 = v3;
  _HKPrivatePregnancyStartDateSource.rawValue.getter();
  v60[3] = MEMORY[0x263F8D6C8];
  *uint64_t v60 = v4;
  _finalizeUninitializedArray<A>(_:)();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v64 = objc_msgSend(v61, sel_predicateForObjectsWithMetadataKey_allowedValues_, v63, isa);
  *(void *)(v0 + 256) = v64;

  *(void *)(v0 + 72) = v64;
  type metadata accessor for HKCategoryValueSleepAnalysis();
  _allocateUninitializedArray<A>(_:)();
  *uint64_t v5 = 1;
  v5[1] = 3;
  v5[2] = 4;
  void v5[3] = 5;
  _finalizeUninitializedArray<A>(_:)();
  lazy protocol witness table accessor for type HKCategoryValueSleepAnalysis and conformance HKCategoryValueSleepAnalysis();
  Set.init(arrayLiteral:)();
  lazy protocol witness table accessor for type HKCategoryValueSleepAnalysis and conformance HKCategoryValueSleepAnalysis();
  uint64_t v65 = (void *)static HKCategoryValuePredicateProviding<>.predicateForSamples(equalTo:)();
  *(void *)(v0 + 264) = v65;
  swift_bridgeObjectRelease();
  *(void *)(v0 + 80) = v65;
  unint64_t v66 = *(void (**)(uint64_t, void, uint64_t))(v67 + 104);
  v66(v68, *MEMORY[0x263F07740], v69);
  Calendar.init(identifier:)();
  unint64_t v70 = *(void (**)(uint64_t, uint64_t))(v67 + 8);
  v70(v68, v69);
  sleepDayInterval(morningIndex:calendar:)(v71, v73, v76);
  int v75 = *(void (**)(uint64_t, uint64_t))(v72 + 8);
  v75(v73, v74);
  uint64_t v77 = type metadata accessor for DateInterval();
  uint64_t v78 = *(void *)(v77 - 8);
  uint64_t v79 = *(unsigned int (**)(uint64_t, uint64_t))(v78 + 48);
  if (v79(v76, 1) == 1) {
    return _assertionFailure(_:_:file:line:flags:)();
  }
  uint64_t v49 = *(void *)(v57 + 200);
  uint64_t v56 = *(void *)(v57 + 192);
  uint64_t v54 = *(void *)(v57 + 184);
  uint64_t v55 = *(void *)(v57 + 168);
  uint64_t v51 = *(void *)(v57 + 160);
  uint64_t v52 = *(void *)(v57 + 144);
  unsigned int v53 = *(_DWORD *)(v57 + 372);
  DateInterval.start.getter();
  uint64_t v50 = *(void (**)(uint64_t, uint64_t))(v78 + 8);
  v50(v49, v77);
  v66(v51, *MEMORY[0x263F07740], v52);
  Calendar.init(identifier:)();
  v70(v51, v52);
  sleepDayInterval(morningIndex:calendar:)(v53, v54, v56);
  v75(v54, v55);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v79)(v56, 1, v77) == 1) {
    return _assertionFailure(_:_:file:line:flags:)();
  }
  uint64_t v25 = *(void *)(v57 + 240);
  uint64_t v26 = *(void *)(v57 + 232);
  uint64_t v30 = *(void *)(v57 + 224);
  uint64_t v28 = *(void *)(v57 + 208);
  uint64_t v23 = *(void *)(v57 + 192);
  int v46 = *(_DWORD *)(v57 + 372);
  int v45 = *(_DWORD *)(v57 + 368);
  uint64_t v47 = *(void *)(v57 + 136);
  uint64_t v24 = *(void *)(v57 + 216);
  DateInterval.start.getter();
  v50(v23, v77);
  id v31 = self;
  uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16);
  v27(v30, v25, v28);
  Class v33 = Date._bridgeToObjectiveC()().super.isa;
  uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
  *(void *)(v57 + 272) = v29;
  *(void *)(v57 + 280) = (v24 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v29(v30, v28);
  v27(v30, v26, v28);
  Class v32 = Date._bridgeToObjectiveC()().super.isa;
  v29(v30, v28);
  type metadata accessor for HKQueryOptions();
  _allocateUninitializedArray<A>(_:)();
  lazy protocol witness table accessor for type HKQueryOptions and conformance HKQueryOptions();
  SetAlgebra<>.init(arrayLiteral:)();
  id v38 = objc_msgSend(v31, sel_predicateForSamplesWithStartDate_endDate_options_, v33, v32, *(void *)(v57 + 88));
  *(void *)(v57 + 288) = v38;

  *(void *)(v57 + 96) = v38;
  type metadata accessor for NSCompoundPredicate();
  type metadata accessor for NSPredicate();
  _allocateUninitializedArray<A>(_:)();
  uint64_t v34 = v7;
  id v8 = v38;
  void *v34 = v38;
  id v9 = v65;
  v34[1] = v65;
  _finalizeUninitializedArray<A>(_:)();
  uint64_t v36 = (NSPredicate_optional *)@nonobjc NSCompoundPredicate.__allocating_init(andPredicateWithSubpredicates:)();
  *(void *)(v57 + 296) = v36;
  *(void *)(v57 + 104) = v36;
  type metadata accessor for HKQueryDescriptor();
  type metadata accessor for HKCategoryType();
  uint64_t v35 = *MEMORY[0x263F09410];
  id v10 = (id)*MEMORY[0x263F09410];
  sampleType.super.super.Class isa = (Class)MEMORY[0x25A2C0C70](v35);
  uint64_t v11 = v36;
  Class v43 = HKQueryDescriptor.__allocating_init(sampleType:predicate:)(sampleType, v36).super.isa;
  *(void *)(v57 + 304) = v43;
  *(void *)(v57 + 112) = v43;
  _allocateUninitializedArray<A>(_:)();
  uint64_t v39 = v12;
  id v13 = v58;
  void *v39 = v58;
  id v14 = v38;
  v39[1] = v38;
  id v15 = v64;
  v39[2] = v64;
  _finalizeUninitializedArray<A>(_:)();
  uint64_t v41 = (NSPredicate_optional *)@nonobjc NSCompoundPredicate.__allocating_init(andPredicateWithSubpredicates:)();
  *(void *)(v57 + 312) = v41;
  *(void *)(v57 + 120) = v41;
  type metadata accessor for HKQuantityType();
  uint64_t v40 = *MEMORY[0x263F09E38];
  id v16 = (id)*MEMORY[0x263F09E38];
  v42.super.super.Class isa = (Class)MEMORY[0x25A2C0C80](v40);
  uint64_t v17 = v41;
  Class v44 = HKQueryDescriptor.__allocating_init(sampleType:predicate:)(v42, v41).super.isa;
  *(void *)(v57 + 320) = v44;
  *(void *)(v57 + 128) = v44;
  Swift::String v18 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("queryDailyAggSedentaryHeartRate(for:)", 0x25uLL, 1);
  *(void *)(v57 + 328) = v18._object;
  int v19 = v43;
  int v20 = v44;
  swift_retain();
  uint64_t v48 = swift_task_alloc();
  *(void *)(v57 + 336) = v48;
  *(void *)(v48 + 16) = v43;
  *(void *)(v48 + 24) = v44;
  *(_DWORD *)(v48 + 32) = v45;
  *(_DWORD *)(v48 + 36) = v46;
  *(void *)(v48 + 40) = v47;
  uint64_t v21 = (void *)swift_task_alloc();
  *(void *)(v57 + 344) = v21;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (daySHR10s: [UInt32 : Float], nightSHR10s: [UInt32 : Float], daySHRCounts: [UInt32 : Int], nightSHRCounts: [UInt32 : Int]));
  void *v21 = *(void *)(v57 + 48);
  v21[1] = HealthDataStoreQuery.queryDailyAggSedentaryHeartRate(for:);
  return MEMORY[0x270FA2360](v57 + 16, 0, 0, v18._countAndFlagsBits, v18._object, partial apply for closure #1 in HealthDataStoreQuery.queryDailyAggSedentaryHeartRate(for:), v48, v22);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)();
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;

  uint64_t v6 = (void *)*v1;
  v6[6] = *v1;
  v6[44] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = HealthDataStoreQuery.queryDailyAggSedentaryHeartRate(for:);
  }
  else
  {
    uint64_t v5 = (void *)v6[40];
    uint64_t v4 = (void *)v6[38];
    swift_task_dealloc();

    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v2 = HealthDataStoreQuery.queryDailyAggSedentaryHeartRate(for:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  void *v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  id v1 = (void *)v0[40];
  uint64_t v4 = (id)v0[39];
  uint64_t v5 = (id)v0[38];
  uint64_t v6 = (id)v0[37];
  uint64_t v7 = (id)v0[36];
  id v9 = (void (*)(uint64_t, uint64_t))v0[34];
  id v10 = (id)v0[33];
  uint64_t v11 = (id)v0[32];
  uint64_t v12 = (id)v0[31];
  id v13 = v0[30];
  id v14 = v0[29];
  id v8 = v0[26];
  v0[6] = v0;
  id v15 = v0[2];
  id v16 = v0[3];
  uint64_t v17 = v0[4];
  Swift::String v18 = v0[5];

  v9(v14, v8);
  v9(v13, v8);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0[6] + 8);
  return v2(v15, v16, v17, v18);
}

{
  void *v0;
  uint64_t (*v1)();
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  uint64_t v3 = (id)v0[40];
  uint64_t v4 = (id)v0[39];
  uint64_t v5 = (id)v0[38];
  uint64_t v6 = (id)v0[37];
  uint64_t v7 = (id)v0[36];
  id v9 = (void (*)(uint64_t, uint64_t))v0[34];
  id v10 = (id)v0[33];
  uint64_t v11 = (id)v0[32];
  uint64_t v12 = (id)v0[31];
  id v13 = v0[30];
  id v14 = v0[29];
  id v8 = v0[26];
  v0[6] = v0;
  swift_task_dealloc();

  swift_release();
  swift_bridgeObjectRelease();

  v9(v14, v8);
  v9(v13, v8);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v1 = *(uint64_t (**)())(v0[6] + 8);
  return v1();
}

uint64_t closure #1 in HealthDataStoreQuery.queryDailyAggSedentaryHeartRate(for:)(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = a1;
  id v17 = a2;
  id v18 = a3;
  uint64_t v21 = a5;
  id v16 = partial apply for closure #1 in closure #1 in HealthDataStoreQuery.queryDailyAggSedentaryHeartRate(for:);
  uint64_t v31 = 0;
  uint64_t v30 = 0;
  uint64_t v29 = 0;
  unint64_t v28 = 0;
  uint64_t v27 = 0;
  uint64_t v32 = a4;
  uint64_t v20 = a4;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(daySHR10s: [UInt32 : Float], nightSHR10s: [UInt32 : Float], daySHRCounts: [UInt32 : Int], nightSHRCounts: [UInt32 : Int]), Error>);
  v13[0] = *(void *)(v15 - 8);
  v13[1] = v15 - 8;
  uint64_t v5 = (void *)MEMORY[0x270FA5388](v17);
  int v19 = (char *)v13 - v6;
  uint64_t v31 = v14;
  uint64_t v30 = v5;
  uint64_t v29 = v7;
  unint64_t v28 = __PAIR64__(v8, v20);
  uint64_t v27 = v9;
  id v10 = v5;
  id v11 = v18;
  (*(void (**)(char *, uint64_t, uint64_t))(v13[0] + 16))(v19, v14, v15);
  swift_retain();
  id v22 = v17;
  id v23 = v18;
  uint64_t v24 = v19;
  uint64_t v25 = v20;
  uint64_t v26 = v21;
  autoreleasepool<A>(invoking:)();

  (*(void (**)(char *, uint64_t))(v13[0] + 8))(v19, v15);
  return swift_release();
}

void closure #1 in closure #1 in HealthDataStoreQuery.queryDailyAggSedentaryHeartRate(for:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v23 = a1;
  uint64_t v24 = a2;
  uint64_t v28 = a3;
  uint64_t v42 = a5;
  v22[1] = 0;
  uint64_t v39 = partial apply for closure #1 in closure #1 in closure #1 in HealthDataStoreQuery.queryDailyAggSedentaryHeartRate(for:);
  id v52 = 0;
  uint64_t v51 = 0;
  uint64_t v50 = 0;
  unint64_t v49 = 0;
  uint64_t v48 = 0;
  id v47 = 0;
  uint64_t v53 = a4;
  uint64_t v37 = a4;
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(daySHR10s: [UInt32 : Float], nightSHR10s: [UInt32 : Float], daySHRCounts: [UInt32 : Int], nightSHRCounts: [UInt32 : Int]), Error>);
  uint64_t v31 = *(void *)(v35 - 8);
  uint64_t v32 = v35 - 8;
  uint64_t v29 = v31;
  uint64_t v30 = *(void *)(v31 + 64);
  MEMORY[0x270FA5388](0);
  uint64_t v34 = (char *)v22 - v5;
  id v52 = v23;
  uint64_t v51 = v6;
  uint64_t v50 = v7;
  unint64_t v49 = __PAIR64__(v8, v37);
  uint64_t v48 = v9;
  type metadata accessor for HKSampleQuery();
  unint64_t v26 = type metadata accessor for HKQueryDescriptor();
  uint64_t v27 = _allocateUninitializedArray<A>(_:)();
  uint64_t v25 = v10;
  id v11 = v23;
  uint64_t v12 = v24;
  *uint64_t v25 = v23;
  id v13 = v12;
  uint64_t v14 = v27;
  v25[1] = v24;
  _finalizeUninitializedArray<A>(_:)();
  uint64_t v41 = v14;
  uint64_t v38 = 0;
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v34, v28, v35);
  unint64_t v33 = (*(unsigned __int8 *)(v29 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
  unint64_t v36 = (v33 + v30 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  uint64_t v40 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v31 + 32))(v40 + v33, v34, v35);
  int v15 = HIDWORD(v37);
  uint64_t v16 = v38;
  uint64_t v17 = (uint64_t)v39;
  uint64_t v18 = v40;
  uint64_t v19 = v41;
  uint64_t v20 = (_DWORD *)(v40 + v36);
  _DWORD *v20 = v37;
  v20[1] = v15;
  id v45 = HKSampleQuery.__allocating_init(queryDescriptors:limit:resultsHandler:)(v19, v16, v17, v18);
  id v47 = v45;
  Class v43 = &v46;
  swift_beginAccess();
  id v44 = *(id *)(v42 + 16);
  id v21 = v44;
  swift_endAccess();
  objc_msgSend(v44, sel_executeQuery_, v45);
}

void closure #1 in closure #1 in closure #1 in HealthDataStoreQuery.queryDailyAggSedentaryHeartRate(for:)(void *a1, void *a2, id a3, void *a4, void *a5)
{
  v22[0]._rawValue = 0;
  v21[0] = 0;
  uint64_t v20 = 0;
  uint64_t v19 = 0;
  uint64_t v18 = 0;
  v17._rawValue = 0;
  v16._rawValue = 0;
  v22[6]._rawValue = a5;
  v22[5]._rawValue = a1;
  v22[4]._rawValue = a2;
  v22[3]._rawValue = a3;
  v22[2]._rawValue = a4;
  v22[1]._rawValue = a5;
  id v5 = a3;
  if (a3)
  {
    id v6 = a3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(daySHR10s: [UInt32 : Float], nightSHR10s: [UInt32 : Float], daySHRCounts: [UInt32 : Int], nightSHRCounts: [UInt32 : Int]), Error>);
    CheckedContinuation.resume(throwing:)();
  }
  else
  {
    swift_bridgeObjectRetain();
    if (a2)
    {
      v22[0]._rawValue = a2;
      v21[0] = Dictionary.init()();
      uint64_t v20 = Dictionary.init()();
      uint64_t v19 = Dictionary.init()();
      uint64_t v18 = Dictionary.init()();
      type metadata accessor for HKCategorySample();
      v17._rawValue = (void *)Array.init()();
      unint64_t v7 = type metadata accessor for HKQuantitySample();
      v16._rawValue = (void *)Array.init()();
      splitHRAndSleepingHours(_:_:_:)(v22, &v17, &v16);
      rawValue = v16._rawValue;
      swift_bridgeObjectRetain();
      uint64_t v9 = MEMORY[0x25A2C0810](rawValue, v7);
      swift_bridgeObjectRelease();
      if (v9 <= 0)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt32, Float));
        _allocateUninitializedArray<A>(_:)();
        Dictionary.init(dictionaryLiteral:)();
        _allocateUninitializedArray<A>(_:)();
        Dictionary.init(dictionaryLiteral:)();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt32, Int));
        _allocateUninitializedArray<A>(_:)();
        Dictionary.init(dictionaryLiteral:)();
        _allocateUninitializedArray<A>(_:)();
        Dictionary.init(dictionaryLiteral:)();
      }
      else
      {
        extractAggSHRBatched(_:_:_:_:_:_:_:)((uint64_t *)&v17, &v16._rawValue, (uint64_t)a5, (uint64_t)v21, (uint64_t)&v20, (uint64_t)&v19, (uint64_t)&v18);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(daySHR10s: [UInt32 : Float], nightSHR10s: [UInt32 : Float], daySHRCounts: [UInt32 : Int], nightSHRCounts: [UInt32 : Int]), Error>);
      CheckedContinuation.resume(returning:)();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt32, Float));
      _allocateUninitializedArray<A>(_:)();
      uint64_t v10 = Dictionary.init(dictionaryLiteral:)();
      _allocateUninitializedArray<A>(_:)();
      uint64_t v11 = Dictionary.init(dictionaryLiteral:)();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt32, Int));
      _allocateUninitializedArray<A>(_:)();
      uint64_t v12 = Dictionary.init(dictionaryLiteral:)();
      _allocateUninitializedArray<A>(_:)();
      v21[1] = v10;
      void v21[2] = v11;
      v21[3] = v12;
      void v21[4] = Dictionary.init(dictionaryLiteral:)();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(daySHR10s: [UInt32 : Float], nightSHR10s: [UInt32 : Float], daySHRCounts: [UInt32 : Int], nightSHRCounts: [UInt32 : Int]), Error>);
      CheckedContinuation.resume(returning:)();
    }
  }
}

void extractAggSHRBatched(_:_:_:_:_:_:_:)(uint64_t *a1, void **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v226 = &v253;
  uint64_t v220 = a1;
  uint64_t v202 = a2;
  uint64_t v198 = a4;
  uint64_t v199 = a5;
  uint64_t v200 = a6;
  uint64_t v201 = a7;
  uint64_t v170 = "Fatal error";
  uint64_t v171 = "Unexpectedly found nil while unwrapping an Optional value";
  uint64_t v172 = "NightingaleTraining/HealthDataStoreQuery.swift";
  uint64_t v193 = 0;
  uint64_t v173 = partial apply for closure #2 in extractAggSHRBatched(_:_:_:_:_:_:_:);
  uint64_t v174 = (void (*)(char *, char *))closure #2 in closure #1 in HealthDataStoreQuery.queryDailyAggSedentaryHeartRate(_:_:_:);
  uint64_t v175 = partial apply for closure #1 in extractAggSHRBatched(_:_:_:_:_:_:_:);
  uint64_t v290 = 0;
  uint64_t v289 = 0;
  uint64_t v288 = 0;
  uint64_t v287 = 0;
  uint64_t v286 = 0;
  unint64_t v285 = 0;
  memset(v284, 0, sizeof(v284));
  uint64_t v283 = 0;
  v282[2] = 0;
  int v229 = v282;
  v282[0] = 0;
  *(void *)((char *)v282 + 5) = 0;
  v277[7] = 0;
  v277[8] = 0;
  v277[4] = 0;
  v277[5] = 0;
  v277[0] = 0;
  *(void *)((char *)v277 + 5) = 0;
  int v273 = 0;
  v269._id rawValue = 0;
  v268._id rawValue = 0;
  v253._id rawValue = 0;
  uint64_t v232 = 0;
  id v243 = 0;
  unsigned int v240 = 0;
  uint64_t v291 = a3;
  uint64_t v227 = a3;
  uint64_t v176 = type metadata accessor for Date();
  uint64_t v177 = *(void *)(v176 - 8);
  uint64_t v178 = v176 - 8;
  unint64_t v179 = (*(void *)(v177 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v7 = MEMORY[0x270FA5388](0);
  uint64_t v180 = (uint64_t)v69 - v179;
  unint64_t v181 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v7);
  uint64_t v182 = (uint64_t)v69 - v181;
  uint64_t v183 = type metadata accessor for Calendar.Identifier();
  uint64_t v184 = *(void *)(v183 - 8);
  uint64_t v185 = v183 - 8;
  unint64_t v186 = (*(void *)(v184 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v193);
  uint64_t v187 = (char *)v69 - v186;
  uint64_t v188 = type metadata accessor for Calendar();
  uint64_t v189 = *(void *)(v188 - 8);
  uint64_t v190 = v188 - 8;
  unint64_t v191 = (*(void *)(v189 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v188);
  uint64_t v192 = (uint64_t)v69 - v191;
  unint64_t v194 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?)
                                - 8)
                    + 64)
        + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v9 = MEMORY[0x270FA5388](v193);
  uint64_t v195 = (char *)v69 - v194;
  unint64_t v196 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v9);
  uint64_t v197 = (uint64_t)v69 - v196;
  uint64_t v203 = type metadata accessor for DateInterval();
  uint64_t v204 = *(void *)(v203 - 8);
  uint64_t v205 = v203 - 8;
  uint64_t v213 = *(void *)(v204 + 64);
  unint64_t v206 = (v213 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v11 = MEMORY[0x270FA5388](v220);
  int v207 = (char *)v69 - v206;
  unint64_t v208 = (v213 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  uint64_t v13 = v213;
  uint64_t v209 = (char *)v69 - v208;
  *(void *)(v14 + 448) = (char *)v69 - v208;
  unint64_t v210 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v15 = MEMORY[0x270FA5388](v12);
  Swift::String v211 = (char *)v69 - v210;
  unint64_t v212 = (v213 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v16 = MEMORY[0x270FA5388](v15);
  Swift::String v214 = (char *)v69 - v212;
  *(void *)(v17 + 440) = (char *)v69 - v212;
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  unsigned int v19 = v227;
  unsigned int v20 = HIDWORD(v227);
  uint64_t v215 = (char *)v69 - v21;
  v22[54] = (char *)v69 - v21;
  v22[53] = v18;
  v22[52] = v23;
  unint64_t v285 = __PAIR64__(v20, v19);
  v22[50] = v24;
  v22[49] = v25;
  v22[48] = v26;
  v22[47] = v27;
  unint64_t v216 = 0x263F0A000uLL;
  id v218 = objc_msgSend(self, sel_countUnit);
  id v217 = objc_msgSend(self, sel_minuteUnit);
  id v219 = objc_msgSend(v218, sel_unitDividedByUnit_);

  uint64_t v28 = v220;
  v226[46]._id rawValue = v219;
  uint64_t v221 = consolidateSleepHours(_:)(v28);
  v226[45]._id rawValue = (void *)v221;
  uint64_t v222 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(interval: DateInterval, hr: Float)]);
  uint64_t v224 = MEMORY[0x263F8E8F8];
  uint64_t v223 = MEMORY[0x263F8E908];
  v226[44]._id rawValue = (void *)Dictionary.init()();
  uint64_t v225 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DateInterval]);
  v226[43]._id rawValue = (void *)Dictionary.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AugmentedIntervalTree<Date, UInt32>);
  uint64_t v29 = AugmentedIntervalTree.__allocating_init()();
  int v30 = v227;
  int v31 = HIDWORD(v227);
  uint64_t v228 = v29;
  v226[42]._id rawValue = (void *)v29;
  int v280 = v30;
  int v281 = v31;
  uint64_t v230 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClosedRange<UInt32>);
  unint64_t v231 = lazy protocol witness table accessor for type ClosedRange<UInt32> and conformance <> ClosedRange<A>();
  Collection<>.makeIterator()();
  for (uint64_t i = v232; ; uint64_t i = v167)
  {
    uint64_t v167 = i;
    uint64_t v168 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<ClosedRange<UInt32>>);
    IndexingIterator.next()();
    unsigned int v169 = v278;
    if (v279) {
      break;
    }
    unsigned int v166 = v169;
    unsigned int v165 = v169;
    unsigned int v240 = v169;
    uint64_t v162 = 0;
    uint64_t v32 = _allocateUninitializedArray<A>(_:)();
    unint64_t v161 = &v239;
    uint64_t v239 = v32;
    uint64_t v160 = &v238;
    unsigned int v238 = v165;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : [DateInterval]]);
    Dictionary.subscript.setter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (interval: DateInterval, hr: Float));
    uint64_t v33 = _allocateUninitializedArray<A>(_:)();
    uint64_t v164 = &v237;
    uint64_t v237 = v33;
    uint64_t v163 = &v236;
    unsigned int v236 = v165;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : [(interval: DateInterval, hr: Float)]]);
    Dictionary.subscript.setter();
    (*(void (**)(char *, void, uint64_t))(v184 + 104))(v187, *MEMORY[0x263F07740], v183);
    Calendar.init(identifier:)();
    (*(void (**)(char *, uint64_t))(v184 + 8))(v187, v183);
    sleepDayInterval(morningIndex:calendar:)(v165, v192, v197);
    (*(void (**)(uint64_t, uint64_t))(v189 + 8))(v192, v188);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v204 + 48))(v197, 1, v203) == 1)
    {
      char v66 = 2;
      uint64_t v67 = 701;
      int v68 = 0;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v204 + 32))(v215, v197, v203);
    DateInterval.start.getter();
    DateInterval.end.getter();
    unsigned int v234 = v165;
    char v235 = 0;
    AugmentedIntervalTree.insert(start:end:context:)(v182, v180, &v234);
    uint64_t v159 = *(void (**)(uint64_t, uint64_t))(v177 + 8);
    uint64_t v158 = v177 + 8;
    v159(v180, v176);
    v159(v182, v176);
    (*(void (**)(char *, uint64_t))(v204 + 8))(v215, v203);
  }
  uint64_t v34 = v167;
  swift_bridgeObjectRetain();
  v226[35]._id rawValue = (void *)v221;
  unint64_t v156 = lazy protocol witness table accessor for type [DateInterval] and conformance [A]();
  Collection<>.makeIterator()();
  for (uint64_t j = v34; ; uint64_t j = v154)
  {
    uint64_t v155 = j;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[DateInterval]>);
    IndexingIterator.next()();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v204 + 48))(v195, 1, v203) == 1) {
      break;
    }
    uint64_t v35 = v155;
    (*(void (**)(char *, char *, uint64_t))(v204 + 32))(v214, v195, v203);
    DateInterval.start.getter();
    DateInterval.end.getter();
    uint64_t v149 = AugmentedIntervalTree.search(start:end:)(v182, v180);
    unsigned int v148 = *(void (**)(uint64_t, uint64_t))(v177 + 8);
    uint64_t v147 = v177 + 8;
    v148(v180, v176);
    v148(v182, v176);
    uint64_t v241 = v149;
    (*(void (**)(char *, char *, uint64_t))(v204 + 16))(v211, v214, v203);
    char v150 = v69;
    unint64_t v151 = 32;
    MEMORY[0x270FA5388](v69);
    unint64_t v36 = &v69[v151 / 0xFFFFFFFFFFFFFFF8];
    uint64_t v152 = v36;
    void v36[2] = &v283;
    void v36[3] = v37;
    uint64_t v153 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Interval<Date, UInt32>]);
    lazy protocol witness table accessor for type [Interval<Date, UInt32>] and conformance [A]();
    Sequence.forEach(_:)();
    uint64_t v154 = v35;
    if (v35)
    {
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
      return;
    }
    id v146 = *(void (**)(char *, uint64_t))(v204 + 8);
    uint64_t v145 = v204 + 8;
    v146(v211, v203);
    outlined destroy of [A]();
    v146(v214, v203);
  }
  uint64_t v38 = v155;
  outlined destroy of [A]();
  Class v142 = *v202;
  swift_bridgeObjectRetain();
  v226[32]._id rawValue = v142;
  uint64_t v143 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKQuantitySample]);
  lazy protocol witness table accessor for type [HKQuantitySample] and conformance [A]();
  Collection<>.makeIterator()();
  for (uint64_t k = v38; ; uint64_t k = v138)
  {
    uint64_t v140 = k;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[HKQuantitySample]>);
    IndexingIterator.next()();
    id rawValue = v226[31]._rawValue;
    if (!rawValue) {
      break;
    }
    id v139 = rawValue;
    uint64_t v39 = v140;
    id v135 = rawValue;
    id v243 = rawValue;
    id v40 = rawValue;
    id v130 = objc_msgSend(v135, sel_startDate);
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    id v41 = v135;
    id v129 = objc_msgSend(v135, sel_endDate);
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    DateInterval.init(start:end:)();
    DateInterval.start.getter();
    DateInterval.end.getter();
    uint64_t v133 = AugmentedIntervalTree.search(start:end:)(v182, v180);
    id v132 = *(void (**)(uint64_t, uint64_t))(v177 + 8);
    uint64_t v131 = v177 + 8;
    v132(v180, v176);
    v132(v182, v176);
    uint64_t v242 = v133;
    (*(void (**)(char *, char *, uint64_t))(v204 + 16))(v207, v209, v203);
    id v42 = v135;
    id v43 = v219;
    id v134 = v69;
    MEMORY[0x270FA5388](v69);
    id v44 = v207;
    id v45 = v135;
    char v46 = &v69[-6];
    id v136 = &v69[-6];
    v46[2] = v284;
    v46[3] = v44;
    v46[4] = v45;
    v46[5] = v47;
    uint64_t v137 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Interval<Date, UInt32>]);
    lazy protocol witness table accessor for type [Interval<Date, UInt32>] and conformance [A]();
    Sequence.forEach(_:)();
    uint64_t v138 = v39;
    if (v39) {
      goto LABEL_39;
    }
    uint64_t v128 = *(void (**)(char *, uint64_t))(v204 + 8);
    uint64_t v127 = v204 + 8;
    v128(v207, v203);

    outlined destroy of [A]();
    v128(v209, v203);
  }
  outlined destroy of [A]();
  uint64_t v276 = v227;
  Collection<>.makeIterator()();
  for (uint64_t m = v140; ; uint64_t m = v99)
  {
    uint64_t v124 = m;
    IndexingIterator.next()();
    int v125 = v274;
    if (v275) {
      break;
    }
    int v123 = v125;
    int v121 = v125;
    int v273 = v125;
    uint64_t v48 = v226[43]._rawValue;
    int v271 = v125;
    MEMORY[0x25A2C04B0](&v272, &v271, v48, MEMORY[0x263F8E8F8], v225, MEMORY[0x263F8E908]);
    uint64_t v122 = v226[25]._rawValue;
    if (v122)
    {
      uint64_t v120 = v122;
    }
    else
    {
      char v66 = 2;
      uint64_t v67 = 725;
      int v68 = 0;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    id v118 = v120;
    swift_bridgeObjectRetain();
    uint64_t v117 = &v270;
    v226[23]._id rawValue = v118;
    int v119 = Collection.isEmpty.getter();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    if (v119)
    {
      unint64_t v49 = v226[44]._rawValue;
      int v251 = v121;
      MEMORY[0x25A2C04B0](&v252, &v251, v49, MEMORY[0x263F8E8F8], v222, MEMORY[0x263F8E908]);
      uint64_t v116 = v252;
      if (v252)
      {
        uint64_t v115 = v116;
      }
      else
      {
        char v66 = 2;
        uint64_t v67 = 726;
        int v68 = 0;
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      uint64_t v50 = v124;
      v250[1] = v115;
      unint64_t v51 = lazy protocol witness table accessor for type [(interval: DateInterval, hr: Float)] and conformance [A]();
      uint64_t v52 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(v174, 0, v222, MEMORY[0x263F8D5C8], MEMORY[0x263F8E628], v51, MEMORY[0x263F8E658], v112);
      uint64_t v113 = v50;
      uint64_t v114 = v52;
      if (v50) {
        goto LABEL_40;
      }
      uint64_t v110 = (void *)v114;
      outlined destroy of [A]();
      swift_bridgeObjectRetain();
      v226->_id rawValue = v110;
      swift_bridgeObjectRetain();
      uint64_t v109 = v250;
      v250[0] = v110;
      uint64_t v108 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
      lazy protocol witness table accessor for type [Float] and conformance [A]();
      int v111 = Collection.isEmpty.getter();
      outlined destroy of [A]();
      swift_bridgeObjectRelease();
      if ((v111 & 1) == 0)
      {
        Swift::Float v53 = getBottomPercentile(percentile:_:)(10, &v253);
        uint64_t v101 = &v248;
        Swift::Float v248 = v53;
        int v105 = 1;
        int v104 = 0;
        char v249 = 0;
        uint64_t v100 = &v247;
        int v247 = v121;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : Float]);
        Dictionary.subscript.setter();
        uint64_t v102 = v226->_rawValue;
        swift_bridgeObjectRetain();
        uint64_t v103 = MEMORY[0x25A2C0820](v102);
        swift_bridgeObjectRelease();
        uint64_t v107 = &v245;
        uint64_t v245 = v103;
        char v246 = v104 & 1 & v105;
        uint64_t v106 = &v244;
        int v244 = v121;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : Int]);
        Dictionary.subscript.setter();
      }
      outlined destroy of [A]();
      uint64_t v99 = v113;
    }
    else
    {
      v226[22]._id rawValue = (void *)specialized Array.init()();
      uint64_t v54 = specialized Array.init()();
      int v55 = v121;
      v226[21]._id rawValue = (void *)v54;
      uint64_t v96 = &v267;
      int v267 = v55;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : [DateInterval]]);
      unsigned int v97 = (void (*)(void))Dictionary.subscript.modify();
      unint64_t v98 = v56;
      if (!v56->_rawValue)
      {
        char v66 = 2;
        uint64_t v67 = 734;
        int v68 = 0;
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      Swift::OpaquePointer v93 = &v266;
      int v266 = v121;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : [(interval: DateInterval, hr: Float)]]);
      Swift::OpaquePointer v94 = (void (*)(void))Dictionary.subscript.modify();
      Swift::OpaquePointer v95 = v57;
      if (!v57->_rawValue)
      {
        char v66 = 2;
        uint64_t v67 = 734;
        int v68 = 0;
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      splitHR(_:_:_:_:)(&v269, &v268, v98, v95);
      int v87 = 0;
      v94();
      v97();
      uint64_t v91 = v226[21]._rawValue;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v90 = &v265;
      v226[10]._id rawValue = v91;
      uint64_t v88 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
      unint64_t v89 = lazy protocol witness table accessor for type [Float] and conformance [A]();
      int v92 = Collection.isEmpty.getter();
      outlined destroy of [A]();
      swift_bridgeObjectRelease();
      if ((v92 & 1) == 0)
      {
        Swift::Float v58 = getBottomPercentile(percentile:_:)(10, &v268);
        uint64_t v80 = &v257;
        Swift::Float v257 = v58;
        int v84 = 1;
        int v83 = 0;
        char v258 = 0;
        uint64_t v79 = &v256;
        int v256 = v121;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : Float]);
        Dictionary.subscript.setter();
        uint64_t v81 = v226[21]._rawValue;
        swift_bridgeObjectRetain();
        uint64_t v82 = MEMORY[0x25A2C0820](v81);
        swift_bridgeObjectRelease();
        char v59 = v83;
        char v60 = v84;
        int v61 = v121;
        uint64_t v86 = v255;
        v226[2]._id rawValue = (void *)v82;
        v255[8] = v59 & 1 & v60;
        uint64_t v85 = &v254;
        int v254 = v61;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : Int]);
        Dictionary.subscript.setter();
      }
      uint64_t v77 = v226[22]._rawValue;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v76 = &v264;
      v226[9]._id rawValue = v77;
      int v78 = Collection.isEmpty.getter();
      outlined destroy of [A]();
      swift_bridgeObjectRelease();
      if ((v78 & 1) == 0)
      {
        Swift::Float v62 = getBottomPercentile(percentile:_:)(10, &v269);
        v69[2] = &v262;
        Swift::Float v262 = v62;
        int v73 = 1;
        int v72 = 0;
        char v263 = 0;
        v69[1] = &v261;
        int v261 = v121;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : Float]);
        Dictionary.subscript.setter();
        unint64_t v70 = v226[22]._rawValue;
        swift_bridgeObjectRetain();
        uint64_t v71 = MEMORY[0x25A2C0820](v70);
        swift_bridgeObjectRelease();
        char v63 = v72;
        char v64 = v73;
        int v65 = v121;
        int v75 = v260;
        v226[6]._id rawValue = (void *)v71;
        v260[8] = v63 & 1 & v64;
        uint64_t v74 = &v259;
        int v259 = v65;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : Int]);
        Dictionary.subscript.setter();
      }
      outlined destroy of [A]();
      outlined destroy of [A]();
      uint64_t v99 = v124;
    }
  }
  swift_release();
  outlined destroy of [A]();
  outlined destroy of [A]();
  swift_bridgeObjectRelease();
}

uint64_t HealthDataStoreQuery.queryDailyAggSedentaryHeartRateBatched(_:_:)(uint64_t a1, int a2)
{
  *(void *)(v3 + 64) = v2;
  *(_DWORD *)(v3 + 108) = a2;
  *(void *)(v3 + 48) = v3;
  *(void *)(v3 + 100) = 0;
  *(_DWORD *)(v3 + 96) = 0;
  *(void *)(v3 + 56) = 0;
  *(void *)(v3 + 112) = a1;
  *(void *)(v3 + 100) = a1;
  *(_DWORD *)(v3 + 96) = a2;
  *(void *)(v3 + 56) = v2;
  return MEMORY[0x270FA2498](HealthDataStoreQuery.queryDailyAggSedentaryHeartRateBatched(_:_:), 0);
}

uint64_t HealthDataStoreQuery.queryDailyAggSedentaryHeartRateBatched(_:_:)()
{
  int v4 = *(_DWORD *)(v0 + 116);
  int v3 = *(_DWORD *)(v0 + 112);
  uint64_t v5 = *(void *)(v0 + 64);
  int v6 = *(_DWORD *)(v0 + 108);
  *(void *)(v0 + 48) = v0;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (daySHR10s: [UInt32 : Float], nightSHR10s: [UInt32 : Float], daySHRCounts: [UInt32 : Int], nightSHRCounts: [UInt32 : Int]));
  swift_retain();
  uint64_t v8 = swift_task_alloc();
  *(void *)(v0 + 72) = v8;
  *(_DWORD *)(v8 + 16) = v3;
  *(_DWORD *)(v8 + 20) = v4;
  *(void *)(v8 + 24) = v5;
  *(_DWORD *)(v8 + 32) = v6;
  default argument 1 of withThrowingTaskGroup<A, B>(of:returning:isolation:body:)(v9, v9);
  id v1 = (void *)swift_task_alloc();
  *(void *)(v7 + 80) = v1;
  *id v1 = *(void *)(v7 + 48);
  v1[1] = HealthDataStoreQuery.queryDailyAggSedentaryHeartRateBatched(_:_:);
  return MEMORY[0x270FA22B8](v7 + 16, v9, v9, 0, 0, &async function pointer to partial apply for closure #1 in HealthDataStoreQuery.queryDailyAggSedentaryHeartRateBatched(_:_:), v8);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;

  int v4 = *v1;
  *(void *)(v4 + 48) = *v1;
  *(void *)(v4 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = HealthDataStoreQuery.queryDailyAggSedentaryHeartRateBatched(_:_:);
  }
  else
  {
    swift_task_dealloc();
    swift_release();
    uint64_t v2 = HealthDataStoreQuery.queryDailyAggSedentaryHeartRateBatched(_:_:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;

  v0[6] = v0;
  return (*(uint64_t (**)(void, void, void, void))(v0[6] + 8))(v0[2], v0[3], v0[4], v0[5]);
}

{
  uint64_t v0;
  uint64_t (*v1)();
  uint64_t v3;

  *(void *)(v0 + 48) = v0;
  swift_task_dealloc();
  swift_release();
  id v1 = *(uint64_t (**)())(*(void *)(v0 + 48) + 8);
  return v1();
}

uint64_t closure #1 in HealthDataStoreQuery.queryDailyAggSedentaryHeartRateBatched(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  *(_DWORD *)(v5 + 232) = a5;
  *(void *)(v5 + 160) = a4;
  *(void *)(v5 + 152) = a2;
  *(void *)(v5 + 144) = a1;
  *(void *)(v5 + 80) = v5;
  *(void *)(v5 + 88) = 0;
  *(void *)(v5 + 220) = 0;
  *(void *)(v5 + 96) = 0;
  *(_DWORD *)(v5 + 216) = 0;
  *(void *)(v5 + 104) = 0;
  *(void *)(v5 + 112) = 0;
  *(void *)(v5 + 120) = 0;
  *(void *)(v5 + 128) = 0;
  *(_DWORD *)(v5 + 228) = 0;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(void *)(v5 + 236) = a3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ThrowingTaskGroup<(daySHR10s: [UInt32 : Float], nightSHR10s: [UInt32 : Float], daySHRCounts: [UInt32 : Int], nightSHRCounts: [UInt32 : Int]), Error>.Iterator);
  *(void *)(v5 + 168) = v6;
  *(void *)(v5 + 176) = *(void *)(v6 - 8);
  *(void *)(v5 + 184) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  *(void *)(v5 + 192) = swift_task_alloc();
  *(void *)(v5 + 88) = a2;
  *(void *)(v5 + 220) = a3;
  *(void *)(v5 + 96) = a4;
  *(_DWORD *)(v5 + 216) = a5;
  return MEMORY[0x270FA2498](closure #1 in HealthDataStoreQuery.queryDailyAggSedentaryHeartRateBatched(_:_:), 0);
}

uint64_t closure #1 in HealthDataStoreQuery.queryDailyAggSedentaryHeartRateBatched(_:_:)()
{
  int v21 = *(_DWORD *)(v0 + 236);
  *(void *)(v0 + 80) = v0;
  *(void *)(v0 + 104) = Dictionary.init()();
  *(void *)(v0 + 112) = Dictionary.init()();
  *(void *)(v0 + 120) = Dictionary.init()();
  *(void *)(v0 + 128) = Dictionary.init()();
  *(_DWORD *)(v0 + 228) = v21;
  while (*(_DWORD *)(v20 + 228) < *(_DWORD *)(v20 + 240))
  {
    uint64_t v17 = *(void *)(v20 + 192);
    int v15 = *(_DWORD *)(v20 + 240);
    int v14 = *(_DWORD *)(v20 + 236);
    int v18 = *(_DWORD *)(v20 + 232);
    uint64_t v12 = *(void *)(v20 + 160);
    uint64_t v1 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 56))(v17, 1);
    int v13 = *(_DWORD *)(v20 + 228);
    swift_retain();
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = 0;
    *(void *)(v16 + 24) = 0;
    *(void *)(v16 + 32) = v12;
    *(_DWORD *)(v16 + 40) = v13;
    *(_DWORD *)(v16 + 44) = v14;
    *(_DWORD *)(v16 + 48) = v15;
    *(_DWORD *)(v16 + 52) = v18;
    uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ThrowingTaskGroup<(daySHR10s: [UInt32 : Float], nightSHR10s: [UInt32 : Float], daySHRCounts: [UInt32 : Int], nightSHRCounts: [UInt32 : Int]), Error>);
    _sScg7addTask8priority9operationyScPSg_xyYaKYAcntF(v17, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in HealthDataStoreQuery.queryDailyAggSedentaryHeartRateBatched(_:_:), v16, v2);
    uint64_t v3 = outlined destroy of TaskPriority?(v17);
    int v8 = *(_DWORD *)(v20 + 228);
    int v19 = v8 + v18;
    if (__CFADD__(v8, v18))
    {
      __break(1u);
      return MEMORY[0x270FA2058](v3, v4, v5, v6, v7);
    }
    *(_DWORD *)(v20 + 228) = v19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (daySHR10s: [UInt32 : Float], nightSHR10s: [UInt32 : Float], daySHRCounts: [UInt32 : Int], nightSHRCounts: [UInt32 : Int]));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  ThrowingTaskGroup.makeAsyncIterator()();
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v20 + 200) = v10;
  *uint64_t v10 = *(void *)(v20 + 80);
  v10[1] = closure #1 in HealthDataStoreQuery.queryDailyAggSedentaryHeartRateBatched(_:_:);
  uint64_t v6 = *(void *)(v20 + 168);
  uint64_t v3 = v20 + 16;
  uint64_t v5 = 0;
  uint64_t v4 = 0;
  uint64_t v7 = v20 + 136;
  return MEMORY[0x270FA2058](v3, v4, v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *v1;
  *(void *)(v4 + 80) = *v1;
  *(void *)(v4 + 208) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = closure #1 in HealthDataStoreQuery.queryDailyAggSedentaryHeartRateBatched(_:_:);
  }
  else
  {
    uint64_t v2 = closure #1 in HealthDataStoreQuery.queryDailyAggSedentaryHeartRateBatched(_:_:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t result;
  uint64_t (*v3)(void);
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v0[10] = v0;
  int v8 = v0[2];
  uint64_t v9 = v0[3];
  uint64_t v10 = v0[4];
  uint64_t v11 = v0[5];
  if (v8)
  {
    uint64_t v1 = v7[26];
    v7[6] = v8;
    v7[7] = v9;
    v7[8] = v10;
    v7[9] = v11;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : Float]);
    uint64_t result = Dictionary.merge(_:uniquingKeysWith:)();
    if (!v1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      Dictionary.merge(_:uniquingKeysWith:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : Int]);
      Dictionary.merge(_:uniquingKeysWith:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      Dictionary.merge(_:uniquingKeysWith:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v4 = (void *)swift_task_alloc();
      v7[25] = (uint64_t)v4;
      *uint64_t v4 = v7[10];
      v4[1] = closure #1 in HealthDataStoreQuery.queryDailyAggSedentaryHeartRateBatched(_:_:);
      uint64_t v5 = v7[21];
      return MEMORY[0x270FA2058](v7 + 2, 0, 0, v5, v7 + 17);
    }
  }
  else
  {
    uint64_t v6 = (void *)v7[18];
    (*(void (**)(void))(v7[22] + 8))();
    outlined init with copy of [Float](v7 + 13, v6);
    outlined init with copy of [Float](v7 + 14, v6 + 1);
    outlined init with copy of [Float](v7 + 15, v6 + 2);
    v6[3] = v7[16];
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v7[10] + 8);
    return v3();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 176);
  *(void *)(v0 + 80) = v0;
  (*(void (**)(void))(v1 + 8))();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(v0 + 80) + 8);
  return v2();
}

uint64_t closure #1 in closure #1 in HealthDataStoreQuery.queryDailyAggSedentaryHeartRateBatched(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7)
{
  *(_DWORD *)(v7 + 120) = a7;
  *(_DWORD *)(v7 + 116) = a5;
  *(void *)(v7 + 40) = a4;
  *(void *)(v7 + 32) = a1;
  *(void *)(v7 + 16) = v7;
  *(void *)(v7 + 24) = 0;
  *(_DWORD *)(v7 + 88) = 0;
  *(void *)(v7 + 92) = 0;
  *(_DWORD *)(v7 + 104) = 0;
  *(_DWORD *)(v7 + 124) = HIDWORD(a6);
  *(void *)(v7 + 24) = a4;
  *(_DWORD *)(v7 + 88) = a5;
  *(void *)(v7 + 92) = a6;
  *(_DWORD *)(v7 + 104) = a7;
  return MEMORY[0x270FA2498](closure #1 in closure #1 in HealthDataStoreQuery.queryDailyAggSedentaryHeartRateBatched(_:_:), 0);
}

void closure #1 in closure #1 in HealthDataStoreQuery.queryDailyAggSedentaryHeartRateBatched(_:_:)()
{
  int v1 = *(_DWORD *)(v0 + 124);
  int v2 = *(_DWORD *)(v0 + 120);
  int v3 = *(_DWORD *)(v0 + 116);
  *(void *)(v0 + 16) = v0;
  *(_DWORD *)(v0 + 108) = v1;
  int v10 = v2 + v3;
  if (__CFADD__(v2, v3))
  {
    __break(1u);
  }
  else
  {
    unsigned int v7 = *(_DWORD *)(v9 + 116);
    *(_DWORD *)(v9 + 112) = v10;
    min<A>(_:_:)();
    unsigned int v8 = *(_DWORD *)(v9 + 100);
    if (v8 >= v7)
    {
      unsigned int v6 = *(_DWORD *)(v9 + 116);
      uint64_t v5 = (void *)swift_task_alloc();
      *(void *)(v9 + 48) = v5;
      *uint64_t v5 = *(void *)(v9 + 16);
      v5[1] = closure #1 in closure #1 in HealthDataStoreQuery.queryDailyAggSedentaryHeartRateBatched(_:_:);
      HealthDataStoreQuery.queryDailyAggSedentaryHeartRate(for:)(__SPAIR64__(v8, v6));
    }
    else
    {
      _assertionFailure(_:_:file:line:flags:)();
    }
  }
}

uint64_t closure #1 in closure #1 in HealthDataStoreQuery.queryDailyAggSedentaryHeartRateBatched(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v8 = (void *)*v5;
  v8[2] = *v5;
  v8[7] = a1;
  v8[8] = a2;
  v8[9] = a3;
  v8[10] = a4;
  swift_task_dealloc();
  if (v4)
  {
    unsigned int v6 = *(uint64_t (**)(void))(v8[2] + 8);
    return v6();
  }
  else
  {
    return MEMORY[0x270FA2498](closure #1 in closure #1 in HealthDataStoreQuery.queryDailyAggSedentaryHeartRateBatched(_:_:), 0);
  }
}

uint64_t closure #1 in closure #1 in HealthDataStoreQuery.queryDailyAggSedentaryHeartRateBatched(_:_:)()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[9];
  uint64_t v3 = v0[8];
  uint64_t v4 = v0[7];
  uint64_t v5 = (void *)v0[4];
  v0[2] = v0;
  *uint64_t v5 = v4;
  v5[1] = v3;
  v5[2] = v2;
  void v5[3] = v1;
  return (*(uint64_t (**)(void))(v0[2] + 8))();
}

uint64_t _sScg7addTask8priority9operationyScPSg_xyYaKYAcntF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v31 = a1;
  uint64_t v27 = a2;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  unint64_t v32 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = (const void *)MEMORY[0x270FA5388](v31);
  uint64_t v33 = (uint64_t)&v7 - v32;
  outlined init with copy of TaskPriority?(v4, (char *)&v7 - v32);
  uint64_t v34 = type metadata accessor for TaskPriority();
  uint64_t v35 = *(void *)(v34 - 8);
  uint64_t v36 = v34 - 8;
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v35 + 48))(v33, 1) == 1)
  {
    uint64_t v25 = 0;
    outlined destroy of TaskPriority?(v33);
    uint64_t v26 = v25;
  }
  else
  {
    int v24 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v33, v34);
    uint64_t v26 = v24;
  }
  uint64_t v21 = v26 | 0x3100;
  uint64_t v23 = *(void *)(v28 + 16);
  uint64_t v22 = *(void *)(v28 + 24);
  swift_unknownObjectRetain();
  if (v23)
  {
    uint64_t v19 = v23;
    uint64_t v20 = v22;
    uint64_t v13 = v22;
    uint64_t v14 = v23;
    swift_getObjectType();
    uint64_t v15 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v16 = v5;
    swift_unknownObjectRelease();
    uint64_t v17 = v15;
    uint64_t v18 = v16;
  }
  else
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
  }
  uint64_t v8 = v18;
  uint64_t v9 = v17;
  uint64_t v10 = *v30;
  uint64_t v11 = *(void *)(v29 + 16);
  v40[4] = v11;
  uint64_t v12 = 0;
  if (v17 != 0 || v18 != 0)
  {
    v40[0] = 0;
    v40[1] = 0;
    v40[2] = v9;
    v40[3] = v8;
    uint64_t v12 = v40;
  }
  uint64_t v37 = 1;
  uint64_t v38 = v12;
  uint64_t v39 = v10;
  swift_task_create();
  return swift_release();
}

void closure #4 in closure #1 in HealthDataStoreQuery.queryDailyAggSedentaryHeartRateBatched(_:_:)(void *a1@<X1>, void *a2@<X8>)
{
  *a2 = *a1;
}

uint64_t default argument 1 of withThrowingTaskGroup<A, B>(of:returning:isolation:body:)(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t HealthDataStoreQuery.queryMostRecentSample(_:_:_:)(int a1, void *a2, uint64_t a3, uint64_t a4)
{
  int v50 = a1;
  id v53 = a2;
  uint64_t v51 = a3;
  uint64_t v52 = a4;
  uint64_t v46 = 0;
  uint64_t v56 = partial apply for closure #1 in HealthDataStoreQuery.queryMostRecentSample(_:_:_:);
  char v71 = 0;
  unint64_t v70 = 0;
  uint64_t v68 = 0;
  uint64_t v69 = 0;
  uint64_t v67 = 0;
  uint64_t v66 = 0;
  id v65 = 0;
  id v64 = 0;
  uint64_t v41 = type metadata accessor for Date();
  uint64_t v37 = *(void *)(v41 - 8);
  uint64_t v38 = v41 - 8;
  uint64_t v34 = *(void *)(v37 + 64);
  unint64_t v33 = (v34 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v5 = MEMORY[0x270FA5388](v53);
  uint64_t v39 = (uint64_t)&v32 - v33;
  unint64_t v35 = v33;
  unsigned int v6 = MEMORY[0x270FA5388](v5);
  uint64_t v40 = (uint64_t)&v32 - v35;
  char v71 = v7;
  unint64_t v70 = v6;
  uint64_t v68 = v8;
  uint64_t v69 = v9;
  uint64_t v67 = v4;
  dispatch_group_enter(v6);
  uint64_t v54 = 1;
  uint64_t v36 = &type metadata for HealthDataRawSampleType;
  uint64_t v10 = _allocateUninitializedArray<A>(_:)();
  *uint64_t v11 = v50;
  _finalizeUninitializedArray<A>(_:)();
  uint64_t v44 = v10;
  static Date.distantPast.getter();
  Date.init()();
  uint64_t v62 = HealthDataStoreQuery.queryDescriptors(_:_:_:)(v44, v40, v39);
  id v43 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
  uint64_t v42 = v37 + 8;
  v43(v39, v41);
  v43(v40, v41);
  swift_bridgeObjectRelease();
  uint64_t v66 = v62;
  unint64_t v48 = type metadata accessor for NSSortDescriptor();
  id v45 = (id)*MEMORY[0x263F09F88];
  id v12 = v45;
  v13.value._uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSSortDescriptor.__allocating_init(key:ascending:)(0, v13, 0);
  id v61 = v14;

  id v65 = v61;
  type metadata accessor for HKSampleQuery();
  swift_bridgeObjectRetain();
  uint64_t v49 = _allocateUninitializedArray<A>(_:)();
  uint64_t v47 = v15;
  id v16 = v61;
  uint64_t v17 = v49;
  *uint64_t v47 = v61;
  _finalizeUninitializedArray<A>(_:)();
  uint64_t v55 = v17;
  swift_retain();
  id v18 = v53;
  uint64_t v19 = swift_allocObject();
  uint64_t v20 = v51;
  uint64_t v21 = v52;
  id v22 = v53;
  uint64_t v23 = v54;
  uint64_t v24 = v55;
  uint64_t v25 = (uint64_t)v56;
  uint64_t v26 = v19;
  uint64_t v27 = v62;
  *(unsigned char *)(v26 + 16) = v50;
  *(void *)(v26 + 24) = v20;
  *(void *)(v26 + 32) = v21;
  *(void *)(v26 + 40) = v22;
  id v28 = HKSampleQuery.__allocating_init(queryDescriptors:limit:sortDescriptors:resultsHandler:)(v27, v23, v24, v25, v26);
  uint64_t v29 = v57;
  id v60 = v28;
  id v64 = v28;
  Swift::Float v58 = &v63;
  swift_beginAccess();
  id v59 = *(id *)(v29 + 16);
  id v30 = v59;
  swift_endAccess();
  objc_msgSend(v59, sel_executeQuery_, v60);

  return swift_bridgeObjectRelease();
}

void __swiftcall NSSortDescriptor.__allocating_init(key:ascending:)(NSSortDescriptor *__return_ptr retstr, Swift::String_optional key, Swift::Bool ascending)
{
  uint64_t countAndFlagsBits = key.value._countAndFlagsBits;
  object = key.value._object;
  id v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  @nonobjc NSSortDescriptor.init(key:ascending:)(countAndFlagsBits, (uint64_t)object);
}

uint64_t closure #1 in HealthDataStoreQuery.queryMostRecentSample(_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(void), uint64_t a6, NSObject *a7)
{
  id v28 = 0;
  uint64_t v35 = a1;
  uint64_t v34 = a2;
  uint64_t v33 = a3;
  char v32 = a4;
  v31[7] = a5;
  v31[8] = a6;
  v31[6] = a7;
  uint64_t SampleTypeQuery = getSampleTypeQueryDecoders()();
  v31[5] = SampleTypeQuery;
  char v30 = a4;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HealthDataQueryResult);
  unint64_t v7 = lazy protocol witness table accessor for type HealthDataRawSampleType and conformance HealthDataRawSampleType();
  MEMORY[0x25A2C04B0](v31, &v30, SampleTypeQuery, &type metadata for HealthDataRawSampleType, v21, v7);
  swift_bridgeObjectRetain();
  if (a2)
  {
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKSample]);
    lazy protocol witness table accessor for type [HKSample] and conformance [A]();
    Collection.first.getter();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    uint64_t v15 = v23;
  }
  else
  {
    uint64_t v15 = 0;
  }
  if (v15)
  {
    id v28 = v15;
    outlined init with copy of Pregnancy?(v31, v25);
    if (v26)
    {
      uint64_t v14 = v27;
      __swift_project_boxed_opaque_existential_1(v25, v26);
      id v8 = v15;
      v24[3] = type metadata accessor for HKSample();
      v24[0] = v15;
      (*(void (**)(void))(v14 + 24))();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
    }
    else
    {
      outlined destroy of Pregnancy?((uint64_t)v25);
    }
  }
  swift_retain();
  uint64_t v29 = a3;
  if (a3) {
    char v13 = 16;
  }
  else {
    char v13 = 49;
  }
  if (v13 == 49)
  {
    id v12 = 0;
  }
  else
  {
    lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
    uint64_t v9 = swift_allocError();
    *uint64_t v10 = v13;
    id v12 = (void *)v9;
  }
  a5();

  swift_release();
  dispatch_group_leave(a7);
  outlined destroy of Pregnancy?((uint64_t)v31);
  return swift_bridgeObjectRelease();
}

id HKSampleQuery.__allocating_init(queryDescriptors:limit:sortDescriptors:resultsHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v5 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return @nonobjc HKSampleQuery.init(queryDescriptors:limit:sortDescriptors:resultsHandler:)(a1, a2, a3, a4, a5);
}

void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> HealthDataStoreQuery.getDayStreamProcessorConfig(birthDateRequired:shouldUseCachedConfig:)(Swift::tuple_NgtMenstrualAlgorithmsDayStreamProcessorConfig_urCycleLength_Double_urPeriodLength_Double *__return_ptr retstr, Swift::Bool birthDateRequired, Swift::Bool shouldUseCachedConfig)
{
  BOOL v87 = birthDateRequired;
  BOOL v86 = shouldUseCachedConfig;
  uint64_t v80 = partial apply for closure #2 in HealthDataStoreQuery.getDayStreamProcessorConfig(birthDateRequired:shouldUseCachedConfig:);
  v115[1] = *(id *)MEMORY[0x263EF8340];
  int v104 = 0;
  char v103 = 0;
  char v102 = 0;
  uint64_t v101 = 0;
  Class v100 = 0;
  uint64_t v81 = type metadata accessor for DateComponents();
  uint64_t v82 = *(void *)(v81 - 8);
  uint64_t v83 = v81 - 8;
  unint64_t v84 = (*(void *)(v82 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v81);
  uint64_t v85 = &v29[-v84];
  unint64_t v88 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = MEMORY[0x270FA5388](v87);
  unint64_t v89 = &v29[-v88];
  unint64_t v90 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v91 = &v29[-v90];
  unint64_t v92 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  Swift::OpaquePointer v93 = &v29[-v92];
  unint64_t v94 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  char v10 = MEMORY[0x270FA5388](v8);
  Swift::OpaquePointer v95 = &v29[-v94];
  int v104 = &v29[-v94];
  char v103 = v10 & 1;
  char v102 = v11 & 1;
  uint64_t v101 = v3;
  if (v11)
  {
    int v75 = &v105;
    swift_beginAccess();
    id v76 = *(id *)(v78 + 40);
    id v12 = v76;
    swift_endAccess();
    id v77 = v76;
  }
  else
  {
    id v77 = 0;
  }
  v115[0] = v77;
  swift_retain();
  if (v115[0])
  {
    Class v98 = (Class)v115[0];
    uint64_t v74 = v79;
  }
  else
  {
    uint64_t v13 = v79;
    Class v14 = closure #1 in implicit closure #1 in HealthDataStoreQuery.getDayStreamProcessorConfig(birthDateRequired:shouldUseCachedConfig:)(v78);
    uint64_t v71 = v13;
    Class v72 = v14;
    uint64_t v73 = v13;
    if (v13)
    {
      uint64_t v69 = v73;
      outlined destroy of NgtMenstrualAlgorithmsDayStreamProcessorConfig?(v115);
      swift_release();
      uint64_t v70 = v69;
      return;
    }
    Class v98 = v72;
    outlined destroy of NgtMenstrualAlgorithmsDayStreamProcessorConfig?(v115);
    uint64_t v74 = v71;
  }
  uint64_t v64 = v74;
  swift_release();
  Class v66 = v98;
  Class v100 = v98;
  uint64_t v15 = v98;
  id v16 = v66;
  id v65 = &v114;
  swift_beginAccess();
  uint64_t v17 = *(void **)(v78 + 40);
  *(void *)(v78 + 40) = v66;

  swift_endAccess();
  uint64_t v67 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v82 + 56);
  uint64_t v68 = v82 + 56;
  v67(v95, 1, 1, v81);
  if (v87)
  {
    lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
    id v18 = (void *)swift_allocError();
    uint64_t v19 = v64;
    id v61 = v18;
    unsigned char *v20 = 24;
    swift_retain();
    static PFLUtils.rethrow<A>(_:for:)();
    uint64_t v62 = v19;
    uint64_t v63 = v19;
    if (v19)
    {
      uint64_t v33 = v63;
      swift_release();

      outlined destroy of DateComponents?((uint64_t)v95);
      uint64_t v70 = v33;
      return;
    }
    swift_release();

    v67(v93, 0, 1, v81);
    outlined assign with take of DateComponents?(v93, v95);
    uint64_t v60 = v62;
  }
  else
  {
    uint64_t v113 = 0;
    uint64_t v56 = &v112;
    swift_beginAccess();
    id v58 = *(id *)(v78 + 16);
    id v21 = v58;
    swift_endAccess();
    id v99 = v113;
    id v59 = objc_msgSend(v58, sel_dateOfBirthComponentsWithError_, &v99);
    id v57 = v99;
    id v22 = v99;
    uint64_t v23 = v113;
    uint64_t v113 = v57;

    if (v59)
    {
      id v55 = v59;
      id v53 = v59;
      static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v82 + 32))(v91, v85, v81);
      v67(v91, 0, 1, v81);

      uint64_t v54 = v64;
    }
    else
    {
      id v30 = v113;
      id v31 = (id)_convertNSErrorToError(_:)();

      swift_willThrow();
      uint64_t v32 = 0;

      v67(v91, 1, 1, v81);
      uint64_t v54 = v32;
    }
    uint64_t v52 = v54;
    outlined assign with take of DateComponents?(v91, v95);
    uint64_t v60 = v52;
  }
  uint64_t v51 = v60;
  outlined init with copy of DateComponents?(v95, v89);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v82 + 48))(v89, 1, v81) == 1)
  {
    Class v50 = 0;
  }
  else
  {
    Class isa = DateComponents._bridgeToObjectiveC()().super.isa;
    (*(void (**)(unsigned char *, uint64_t))(v82 + 8))(v89, v81);
    Class v50 = isa;
  }
  Class v48 = v50;
  -[objc_class setBirthDateComponents:](v66, sel_setBirthDateComponents_);

  uint64_t v24 = v66;
  id v111 = [(objc_class *)v66 userReportedCycleLength];
  if (v111)
  {
    id v43 = &v111;
    id v44 = v111;
    id v25 = v111;
    outlined destroy of NgtMenstrualAlgorithmsDayStreamProcessorConfig?(v43);
    objc_msgSend(v44, sel_doubleValue);
    uint64_t v45 = v26;

    uint64_t v46 = v45;
    int v47 = 0;
  }
  else
  {
    uint64_t v34 = 0;
    outlined destroy of NgtMenstrualAlgorithmsDayStreamProcessorConfig?(&v111);
    uint64_t v46 = v34;
    int v47 = 1;
  }
  uint64_t v109 = v46;
  char v110 = v47 & 1;
  if (v47) {
    uint64_t v97 = 0;
  }
  else {
    uint64_t v97 = v109;
  }
  uint64_t v42 = v97;
  id v108 = [(objc_class *)v66 userReportedMenstruationLength];
  if (v108)
  {
    uint64_t v37 = &v108;
    id v38 = v108;
    id v27 = v108;
    outlined destroy of NgtMenstrualAlgorithmsDayStreamProcessorConfig?(v37);
    objc_msgSend(v38, sel_doubleValue);
    uint64_t v39 = v28;

    uint64_t v40 = v39;
    int v41 = 0;
  }
  else
  {
    uint64_t v35 = 0;
    outlined destroy of NgtMenstrualAlgorithmsDayStreamProcessorConfig?(&v108);
    uint64_t v40 = v35;
    int v41 = 1;
  }
  uint64_t v106 = v40;
  char v107 = v41 & 1;
  if (v41) {
    uint64_t v96 = 0;
  }
  else {
    uint64_t v96 = v106;
  }
  uint64_t v36 = v96;
  outlined destroy of DateComponents?((uint64_t)v95);
}

Class closure #1 in implicit closure #1 in HealthDataStoreQuery.getDayStreamProcessorConfig(birthDateRequired:shouldUseCachedConfig:)(uint64_t a1)
{
  uint64_t v107 = a1;
  uint64_t v97 = 0;
  Swift::OpaquePointer v95 = partial apply for closure #2 in closure #1 in implicit closure #1 in HealthDataStoreQuery.getDayStreamProcessorConfig(birthDateRequired:shouldUseCachedConfig:);
  uint64_t v96 = partial apply for closure #2 in closure #1 in implicit closure #1 in HealthDataStoreQuery.getDayStreamProcessorConfig(birthDateRequired:shouldUseCachedConfig:);
  v130[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v127 = 0;
  id v126 = 0;
  uint64_t v125 = 0;
  Class v124 = 0;
  id v122 = 0;
  uint64_t v121 = 0;
  id v119 = 0;
  uint64_t v118 = 0;
  id v117 = 0;
  int v116 = 0;
  id v115 = 0;
  int v114 = 0;
  uint64_t v98 = type metadata accessor for Date();
  uint64_t v99 = *(void *)(v98 - 8);
  uint64_t v100 = v98 - 8;
  uint64_t v102 = *(void *)(v99 + 64);
  unint64_t v101 = (v102 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v1 = MEMORY[0x270FA5388](0);
  char v103 = (char *)&v34 - v101;
  uint64_t v127 = (char *)&v34 - v101;
  unint64_t v104 = v101;
  MEMORY[0x270FA5388](v1);
  char v105 = (char *)&v34 - v104;
  id v126 = (char *)&v34 - v104;
  uint64_t v125 = v2;
  type metadata accessor for NgtMenstrualAlgorithmsDayStreamProcessorConfig();
  Class isa = HKHealthStore.__allocating_init()().super.isa;
  Class v124 = isa;
  v130[0] = 0;
  id v108 = &v129;
  swift_beginAccess();
  id v110 = *(id *)(v107 + 16);
  id v3 = v110;
  swift_endAccess();
  id v123 = v130[0];
  id v111 = objc_msgSend(v110, sel__userEnteredMenstrualCycleLengthCharacteristicQuantityWithError_, &v123);
  id v109 = v123;
  id v4 = v123;
  id v5 = v130[0];
  v130[0] = v109;

  if (v111)
  {
    id v93 = v111;
    id v79 = v111;
    id v122 = v111;
    id v80 = objc_msgSend(self, sel_dayUnit);
    objc_msgSend(v79, sel_doubleValueForUnit_);
    uint64_t v81 = v7;

    uint64_t v121 = v81;
    id v82 = (id)MEMORY[0x25A2C0A40]();
    -[objc_class setUserReportedCycleLength:](isa, sel_setUserReportedCycleLength_);

    unint64_t v83 = type metadata accessor for HKCharacteristicType();
    id ObjCClassFromMetadata = (id)swift_getObjCClassFromMetadata();
    id v86 = (id)*MEMORY[0x263F0AA70];
    id v8 = v86;
    uint64_t v84 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v85 = v9;
    swift_bridgeObjectRetain();
    id v88 = (id)MEMORY[0x25A2C0590](v84, v85);
    id v10 = v88;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    id v89 = objc_msgSend(ObjCClassFromMetadata, sel_characteristicTypeForIdentifier_, v88);
    if (v89)
    {
      id v78 = v89;
      id v74 = v89;
      id v115 = v89;
      unint64_t v71 = lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
      id v72 = (id)swift_allocError();
      *char v11 = 22;
      swift_retain();
      id v12 = v74;
      uint64_t v13 = v94;
      uint64_t v73 = &v34;
      MEMORY[0x270FA5388](v72);
      uint64_t v14 = (uint64_t)v74;
      uint64_t v15 = &v34 - 4;
      v15[2] = v107;
      void v15[3] = v14;
      static PFLUtils.rethrow<A>(_:for:)();
      uint64_t v75 = v13;
      uint64_t v76 = v13;
      if (v13)
      {
        uint64_t v36 = v76;
        swift_release();

        outlined destroy of NgtMenstrualAlgorithmsDayStreamProcessorConfig?(v130);
        uint64_t v92 = v36;
        return (Class)v90;
      }
      swift_release();

      *(Swift::UInt32_optional *)&uint64_t v16 = Date.toJulianDay()();
      uint64_t v112 = v16;
      int v70 = v16;
      if ((v16 & 0x100000000) != 0)
      {
        uint64_t v68 = swift_allocError();
        unsigned char *v17 = 14;
        swift_willThrow();
        (*(void (**)(char *, uint64_t))(v99 + 8))(v105, v98);

        outlined destroy of NgtMenstrualAlgorithmsDayStreamProcessorConfig?(v130);
        uint64_t v92 = v68;
        return (Class)v90;
      }
      int v69 = v70;
      int v114 = v70;
      Class v67 = UInt32._bridgeToObjectiveC()().super.super.isa;
      -[objc_class setJulianDayOfUserReportedCycleLength:](isa, sel_setJulianDayOfUserReportedCycleLength_);

      (*(void (**)(char *, uint64_t))(v99 + 8))(v105, v98);
      uint64_t v77 = v75;
    }
    else
    {
      uint64_t v77 = v94;
    }
    uint64_t v62 = v77;
    uint64_t v63 = &v128;
    swift_beginAccess();
    id v65 = *(id *)(v107 + 16);
    id v18 = v65;
    swift_endAccess();
    id v120 = v130[0];
    id v66 = objc_msgSend(v65, sel__userEnteredMenstrualPeriodLengthCharacteristicQuantityWithError_, &v120);
    id v64 = v120;
    id v19 = v120;
    id v20 = v130[0];
    v130[0] = v64;

    if (v66)
    {
      id v61 = v66;
      id v50 = v66;
      id v119 = v66;
      id v51 = objc_msgSend(self, sel_dayUnit);
      objc_msgSend(v50, sel_doubleValueForUnit_);
      uint64_t v52 = v22;

      uint64_t v118 = v52;
      id v53 = (id)MEMORY[0x25A2C0A40]();
      -[objc_class setUserReportedMenstruationLength:](isa, sel_setUserReportedMenstruationLength_);

      id v57 = (id)swift_getObjCClassFromMetadata();
      id v56 = (id)*MEMORY[0x263F0AA78];
      id v23 = v56;
      uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v55 = v24;
      swift_bridgeObjectRetain();
      id v58 = (id)MEMORY[0x25A2C0590](v54, v55);
      id v25 = v58;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      id v59 = objc_msgSend(v57, sel_characteristicTypeForIdentifier_, v58);
      if (!v59)
      {
        uint64_t v48 = v62;
LABEL_21:
        uint64_t v37 = v48;

        outlined destroy of NgtMenstrualAlgorithmsDayStreamProcessorConfig?(v130);
        return isa;
      }
      id v49 = v59;
      id v45 = v59;
      id v117 = v59;
      unint64_t v42 = lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
      id v43 = (id)swift_allocError();
      *uint64_t v26 = 23;
      swift_retain();
      id v27 = v45;
      uint64_t v28 = v62;
      id v44 = &v34;
      MEMORY[0x270FA5388](v43);
      uint64_t v29 = (uint64_t)v45;
      id v30 = &v34 - 4;
      v30[2] = v107;
      v30[3] = v29;
      static PFLUtils.rethrow<A>(_:for:)();
      uint64_t v46 = v28;
      uint64_t v47 = v28;
      if (v28)
      {
        uint64_t v35 = v47;
        swift_release();

        outlined destroy of NgtMenstrualAlgorithmsDayStreamProcessorConfig?(v130);
        uint64_t v92 = v35;
      }
      else
      {
        swift_release();

        *(Swift::UInt32_optional *)&uint64_t v31 = Date.toJulianDay()();
        uint64_t v113 = v31;
        int v41 = v31;
        if ((v31 & 0x100000000) == 0)
        {
          int v40 = v41;
          int v116 = v41;
          Class v38 = UInt32._bridgeToObjectiveC()().super.super.isa;
          -[objc_class setJulianDayOfUserReportedMenstruationLength:](isa, sel_setJulianDayOfUserReportedMenstruationLength_);

          (*(void (**)(char *, uint64_t))(v99 + 8))(v103, v98);
          uint64_t v48 = v46;
          goto LABEL_21;
        }
        uint64_t v39 = swift_allocError();
        unsigned char *v32 = 14;
        swift_willThrow();
        (*(void (**)(char *, uint64_t))(v99 + 8))(v103, v98);

        outlined destroy of NgtMenstrualAlgorithmsDayStreamProcessorConfig?(v130);
        uint64_t v92 = v39;
      }
    }
    else
    {
      lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
      uint64_t v60 = swift_allocError();
      unsigned char *v21 = 33;
      swift_willThrow();

      outlined destroy of NgtMenstrualAlgorithmsDayStreamProcessorConfig?(v130);
      uint64_t v92 = v60;
    }
  }
  else
  {
    lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
    uint64_t v91 = swift_allocError();
    *uint64_t v6 = 32;
    swift_willThrow();
    outlined destroy of NgtMenstrualAlgorithmsDayStreamProcessorConfig?(v130);

    uint64_t v92 = v91;
  }
  return (Class)v90;
}

void closure #1 in closure #1 in implicit closure #1 in HealthDataStoreQuery.getDayStreamProcessorConfig(birthDateRequired:shouldUseCachedConfig:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v12 = a3;
  uint64_t v18 = a1;
  uint64_t v20 = a2;
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v26 = 0;
  uint64_t v25 = 0;
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = v13 - 8;
  unint64_t v16 = (*(void *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v17 = (char *)&v7 - v16;
  uint64_t v26 = MEMORY[0x270FA5388](v18);
  uint64_t v25 = v3;
  uint64_t v28 = 0;
  id v19 = &v27;
  swift_beginAccess();
  id v22 = *(id *)(v18 + 16);
  id v4 = v22;
  swift_endAccess();
  id v24 = v28;
  id v23 = objc_msgSend(v22, sel__modificationDateForCharacteristicWithType_error_, v20, &v24);
  id v21 = v24;
  id v5 = v24;
  uint64_t v6 = v28;
  uint64_t v28 = v21;

  if (v23)
  {
    id v11 = v23;
    id v10 = v23;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v12, v17, v13);
  }
  else
  {
    id v8 = v28;
    uint64_t v9 = _convertNSErrorToError(_:)();

    swift_willThrow();
  }
}

void closure #2 in HealthDataStoreQuery.getDayStreamProcessorConfig(birthDateRequired:shouldUseCachedConfig:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v10 = a2;
  uint64_t v16 = a1;
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v22 = 0;
  uint64_t v11 = type metadata accessor for DateComponents();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = v11 - 8;
  unint64_t v14 = (*(void *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v15 = (char *)&v5 - v14;
  uint64_t v22 = MEMORY[0x270FA5388](v16);
  id v24 = 0;
  uint64_t v17 = &v23;
  swift_beginAccess();
  id v19 = *(id *)(v16 + 16);
  id v2 = v19;
  swift_endAccess();
  id v21 = v24;
  id v20 = objc_msgSend(v19, sel_dateOfBirthComponentsWithError_, &v21);
  id v18 = v21;
  id v3 = v21;
  id v4 = v24;
  id v24 = v18;

  if (v20)
  {
    id v9 = v20;
    id v8 = v20;
    static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v10, v15, v11);
  }
  else
  {
    id v6 = v24;
    uint64_t v7 = _convertNSErrorToError(_:)();

    swift_willThrow();
  }
}

float HealthDataStoreQuery.getBmi(dispatchGroup:hyperParams:)(void *a1, uint64_t a2)
{
  uint64_t v60 = a1;
  uint64_t v58 = a2;
  uint64_t v46 = 0;
  id v53 = partial apply for closure #1 in HealthDataStoreQuery.getBmi(dispatchGroup:hyperParams:);
  uint64_t v55 = partial apply for closure #1 in HealthDataStoreQuery.getBmi(dispatchGroup:hyperParams:);
  id v57 = partial apply for closure #1 in HealthDataStoreQuery.getBmi(dispatchGroup:hyperParams:);
  uint64_t v90 = 0;
  uint64_t v89 = 0;
  uint64_t v88 = 0;
  uint64_t v87 = 0;
  uint64_t v86 = 0;
  uint64_t v85 = 0;
  float v80 = 0.0;
  float v77 = 0.0;
  float v75 = 0.0;
  uint64_t v64 = type metadata accessor for DispatchTimeInterval();
  uint64_t v61 = *(void *)(v64 - 8);
  uint64_t v62 = v64 - 8;
  unint64_t v47 = (*(void *)(v61 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v63 = (uint64_t *)((char *)v19 - v47);
  uint64_t v68 = type metadata accessor for DispatchTime();
  uint64_t v65 = *(void *)(v68 - 8);
  uint64_t v66 = v68 - 8;
  unint64_t v48 = (*(void *)(v65 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v3 = MEMORY[0x270FA5388](v60);
  Class v67 = (char *)v19 - v48;
  unint64_t v49 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  unint64_t v71 = (char *)v19 - v49;
  uint64_t v90 = v5;
  uint64_t v89 = v6;
  uint64_t v88 = v2;
  uint64_t v52 = &unk_270695968;
  uint64_t v50 = 24;
  uint64_t v51 = 7;
  uint64_t v7 = swift_allocObject();
  uint64_t v54 = v7;
  uint64_t v87 = v7 + 16;
  *(_DWORD *)(v7 + 16) = 0;
  int v73 = 1;
  *(unsigned char *)(v7 + 20) = 1;
  uint64_t v8 = swift_allocObject();
  char v9 = v73;
  uint64_t v56 = v8;
  uint64_t v86 = v8 + 16;
  *(_DWORD *)(v8 + 16) = 0;
  *(unsigned char *)(v8 + 20) = v9 & 1;
  uint64_t v10 = swift_allocObject();
  char v11 = v73;
  uint64_t v59 = v10;
  uint64_t v85 = v10 + 16;
  *(_DWORD *)(v10 + 16) = 0;
  *(unsigned char *)(v10 + 20) = v11 & 1;
  swift_retain();
  HealthDataStoreQuery.queryMostRecentSample(_:_:_:)(4, v60, (uint64_t)v53, v54);
  swift_release();
  swift_retain();
  HealthDataStoreQuery.queryMostRecentSample(_:_:_:)(5, v60, (uint64_t)v55, v56);
  swift_release();
  swift_retain();
  HealthDataStoreQuery.queryMostRecentSample(_:_:_:)(6, v60, (uint64_t)v57, v59);
  swift_release();
  static DispatchTime.now()();
  uint64_t v12 = HyperParams.bmiTimeout.getter();
  uint64_t v13 = v61;
  *uint64_t v63 = v12;
  (*(void (**)(void))(v13 + 104))();
  MEMORY[0x25A2C0320](v67, v63);
  (*(void (**)(uint64_t *, uint64_t))(v61 + 8))(v63, v64);
  int v70 = *(void (**)(char *, uint64_t))(v65 + 8);
  uint64_t v69 = v65 + 8;
  v70(v67, v68);
  int v72 = MEMORY[0x25A2C0C90](v71);
  v70(v71, v68);
  if (static DispatchTimeoutResult.== infix(_:_:)())
  {
    lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
    uint64_t v44 = swift_allocError();
    *unint64_t v14 = 17;
    swift_willThrow();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v45 = v44;
  }
  else
  {
    int v41 = &v84;
    swift_beginAccess();
    int v42 = *(_DWORD *)(v54 + 16);
    int v43 = *(unsigned __int8 *)(v54 + 20);
    swift_endAccess();
    int v82 = v42;
    char v83 = v43 & 1;
    BOOL v40 = (v43 & 1) != 0;
    if (v43)
    {
      uint64_t v37 = &v79;
      swift_beginAccess();
      float v38 = *(float *)(v56 + 16);
      int v39 = *(unsigned __int8 *)(v56 + 20);
      swift_endAccess();
      if (v39) {
        goto LABEL_12;
      }
      float v36 = v38;
      float v32 = v38;
      float v77 = v38;
      uint64_t v33 = &v76;
      swift_beginAccess();
      float v34 = *(float *)(v59 + 16);
      int v35 = *(unsigned __int8 *)(v59 + 20);
      swift_endAccess();
      if ((v35 & 1) != 0 || (v31 = v34, float v30 = v34, v75 = v34, v34 < 0.1))
      {
LABEL_12:
        float v26 = (float)HyperParams.defaultBMI.getter();
        char v27 = &v78;
        swift_beginAccess();
        uint64_t v16 = v54;
        *(float *)(v54 + 16) = v26;
        *(unsigned char *)(v16 + 20) = 0;
        swift_endAccess();
      }
      else
      {
        float v28 = (float)(v32 / v30) / v30;
        uint64_t v29 = &v74;
        swift_beginAccess();
        uint64_t v15 = v54;
        *(float *)(v54 + 16) = v28;
        *(unsigned char *)(v15 + 20) = 0;
        swift_endAccess();
      }
    }
    char v23 = &v81;
    swift_beginAccess();
    float v24 = *(float *)(v54 + 16);
    int v25 = *(unsigned __int8 *)(v54 + 20);
    swift_endAccess();
    if ((v25 & 1) == 0)
    {
      float v22 = v24;
      float v21 = v24;
      float v80 = v24;
      swift_release();
      swift_release();
      swift_release();
      return v21;
    }
    lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
    uint64_t v20 = swift_allocError();
    *id v18 = 18;
    swift_willThrow();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v45 = v20;
  }
  return *(float *)&v19[3];
}

uint64_t closure #1 in HealthDataStoreQuery.getBmi(dispatchGroup:hyperParams:)(void *a1, uint64_t a2, uint64_t a3)
{
  float v22 = a1;
  uint64_t v21 = a2;
  uint64_t v20 = a3 + 16;
  outlined init with copy of Pregnancy?(a1, v15);
  if (v16)
  {
    uint64_t v10 = v16;
    uint64_t v8 = v17;
    __swift_project_boxed_opaque_existential_1(v15, v16);
    char v9 = *(void (**)(uint64_t, uint64_t))(v8 + 16);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    __swift_allocate_boxed_opaque_existential_0(v18);
    v9(v10, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  }
  else
  {
    outlined destroy of Pregnancy?((uint64_t)v15);
    memset(v18, 0, sizeof(v18));
    uint64_t AssociatedTypeWitness = 0;
  }
  if (AssociatedTypeWitness)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : Float]);
    if (swift_dynamicCast()) {
      uint64_t v6 = v12;
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v7 = v6;
  }
  else
  {
    outlined destroy of Pregnancy?((uint64_t)v18);
    uint64_t v7 = 0;
  }
  if (v7)
  {
    Dictionary.values.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : Float].Values);
    lazy protocol witness table accessor for type [UInt32 : Float].Values and conformance [A : B].Values();
    Collection.first.getter();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    int v4 = v13;
    char v5 = v14;
  }
  else
  {
    int v4 = 0;
    char v5 = 1;
  }
  swift_beginAccess();
  *(_DWORD *)(a3 + 16) = v4;
  *(unsigned char *)(a3 + 20) = v5 & 1;
  return swift_endAccess();
}

void __swiftcall HealthDataStoreQuery.getMlConfig(heartRateFwEnd10PctModelPath:heartRatePeriod10PctModelPath:wTmpFwEndLstmModelPath:wTmpFwEndRFModelPath:wTmpPeriodLstmModelPath:heartRatePeriodTFModelPaths:heartRatePeriodEnsembleModelPath:)(NgtMenstrualAlgorithmsMLModelConfig *__return_ptr retstr, Swift::String heartRateFwEnd10PctModelPath, Swift::String heartRatePeriod10PctModelPath, Swift::String wTmpFwEndLstmModelPath, Swift::String wTmpFwEndRFModelPath, Swift::String wTmpPeriodLstmModelPath, Swift::OpaquePointer_optional heartRatePeriodTFModelPaths, Swift::String_optional heartRatePeriodEnsembleModelPath)
{
  type metadata accessor for NgtMenstrualAlgorithmsMLModelConfig();
  v23.super.Class isa = HKHealthStore.__allocating_init()().super.isa;
  swift_bridgeObjectRetain();
  id v16 = (id)MEMORY[0x25A2C0590](heartRateFwEnd10PctModelPath._countAndFlagsBits, heartRateFwEnd10PctModelPath._object);
  swift_bridgeObjectRelease();
  [(objc_class *)v23.super.isa setHeartRateFwEnd10PctModelPath:v16];

  swift_bridgeObjectRetain();
  id v18 = (id)MEMORY[0x25A2C0590](heartRatePeriod10PctModelPath._countAndFlagsBits, heartRatePeriod10PctModelPath._object);
  swift_bridgeObjectRelease();
  [(objc_class *)v23.super.isa setHeartRatePeriod10PctModelPath:v18];

  swift_bridgeObjectRetain();
  id v20 = (id)MEMORY[0x25A2C0590](wTmpFwEndLstmModelPath._countAndFlagsBits, wTmpFwEndLstmModelPath._object);
  swift_bridgeObjectRelease();
  [(objc_class *)v23.super.isa setWTmpFwEndLstmModelPath:v20];

  swift_bridgeObjectRetain();
  float v22 = (void *)MEMORY[0x25A2C0590](wTmpFwEndRFModelPath._countAndFlagsBits, wTmpFwEndRFModelPath._object);
  swift_bridgeObjectRelease();
  [(objc_class *)v23.super.isa setWTmpFwEndRFModelPath:v22];

  swift_bridgeObjectRetain();
  float v24 = (void *)MEMORY[0x25A2C0590](wTmpPeriodLstmModelPath._countAndFlagsBits, wTmpPeriodLstmModelPath._object);
  swift_bridgeObjectRelease();
  [(objc_class *)v23.super.isa setWTmpPeriodLstmModelPath:v24];

  if (heartRatePeriodTFModelPaths.value._rawValue)
  {
    swift_bridgeObjectRetain();
    uint64_t rawValue = (uint64_t)heartRatePeriodTFModelPaths.value._rawValue;
  }
  else
  {
    uint64_t rawValue = _allocateUninitializedArray<A>(_:)();
  }
  if (rawValue)
  {
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    Class v13 = isa;
  }
  else
  {
    Class v13 = 0;
  }
  -[objc_class setHeartRatePeriodTFModelPaths:](v23.super.isa, sel_setHeartRatePeriodTFModelPaths_);

  if (heartRatePeriodEnsembleModelPath.value._countAndFlagsBits)
  {
    swift_bridgeObjectRetain();
    v11._uint64_t countAndFlagsBits = *(void *)&heartRatePeriodTFModelPaths.is_nil;
    v11._object = (void *)heartRatePeriodEnsembleModelPath.value._countAndFlagsBits;
  }
  else
  {
    Swift::String v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  }
  if (v11._object)
  {
    uint64_t v9 = MEMORY[0x25A2C0590](v11._countAndFlagsBits);
    swift_bridgeObjectRelease();
    uint64_t v10 = v9;
  }
  else
  {
    uint64_t v10 = 0;
  }
  [(objc_class *)v23.super.isa setHeartRatePeriodEnsembleModelPath:v10];
}

uint64_t HealthDataStoreQuery.deinit()
{
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of NgtMenstrualAlgorithmsDayStreamProcessorConfig?((id *)(v0 + 40));
  return v2;
}

uint64_t HealthDataStoreQuery.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t protocol witness for HealthDataQuery.queryPregrancies(source:range:) in conformance HealthDataStoreQuery(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2;
  *(void *)(v2 + 16) = v2;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v3;
  *uint64_t v3 = *(void *)(v5 + 16);
  v3[1] = protocol witness for PFLTaskRunner.run(task:useCase:context:) in conformance NightingaleDPFLRunner;
  return HealthDataStoreQuery.queryPregrancies(source:range:)(a1, a2);
}

uint64_t protocol witness for HealthDataQuery.queryRawSamples(_:_:) in conformance HealthDataStoreQuery(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2;
  *(void *)(v2 + 16) = v2;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v6 + 24) = v3;
  *uint64_t v3 = *(void *)(v6 + 16);
  v3[1] = protocol witness for HealthDataQuery.queryRawSamples(_:_:) in conformance HealthDataStoreQuery;
  return HealthDataStoreQuery.queryRawSamples(_:_:)(a1, a2);
}

uint64_t protocol witness for HealthDataQuery.queryRawSamples(_:_:) in conformance HealthDataStoreQuery(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 16) = *v2;
  uint64_t v8 = v3 + 16;
  uint64_t v4 = swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v8 + 8);
  }
  else
  {
    uint64_t v4 = a1;
    uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v8 + 8);
  }
  return v5(v4);
}

void protocol witness for HealthDataQuery.queryDailyAggSedentaryHeartRate(_:_:_:) in conformance HealthDataStoreQuery(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4)
{
}

uint64_t protocol witness for HealthDataQuery.queryDailyAggSedentaryHeartRateBatched(_:_:) in conformance HealthDataStoreQuery(uint64_t a1, int a2)
{
  uint64_t v6 = v2;
  *(void *)(v2 + 16) = v2;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v6 + 24) = v3;
  *uint64_t v3 = *(void *)(v6 + 16);
  v3[1] = protocol witness for HealthDataQuery.queryDailyAggSedentaryHeartRateBatched(_:_:) in conformance HealthDataStoreQuery;
  return HealthDataStoreQuery.queryDailyAggSedentaryHeartRateBatched(_:_:)(a1, a2);
}

uint64_t protocol witness for HealthDataQuery.queryDailyAggSedentaryHeartRateBatched(_:_:) in conformance HealthDataStoreQuery(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *v5;
  *(void *)(v6 + 16) = *v5;
  uint64_t v11 = v6 + 16;
  uint64_t v7 = swift_task_dealloc();
  if (v4)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t))(*(void *)v11 + 8);
    return v10(v7);
  }
  else
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v11 + 8);
    return v8(a1, a2, a3, a4);
  }
}

uint64_t protocol witness for HealthDataQuery.queryMostRecentSample(_:_:_:) in conformance HealthDataStoreQuery(int a1, void *a2, uint64_t a3, uint64_t a4)
{
  return HealthDataStoreQuery.queryMostRecentSample(_:_:_:)(a1, a2, a3, a4);
}

double protocol witness for HealthDataQuery.getDayStreamProcessorConfig(birthDateRequired:shouldUseCachedConfig:) in conformance HealthDataStoreQuery@<D0>(char a1@<W0>, char a2@<W1>, Swift::tuple_NgtMenstrualAlgorithmsDayStreamProcessorConfig_urCycleLength_Double_urPeriodLength_Double *a3@<X8>)
{
  HealthDataStoreQuery.getDayStreamProcessorConfig(birthDateRequired:shouldUseCachedConfig:)(a3, a1 & 1, a2 & 1);
  if (v4) {
    return v5;
  }
  return result;
}

float protocol witness for HealthDataQuery.getBmi(dispatchGroup:hyperParams:) in conformance HealthDataStoreQuery(void *a1, uint64_t a2)
{
  float v5 = HealthDataStoreQuery.getBmi(dispatchGroup:hyperParams:)(a1, a2);
  if (v2) {
    return v4;
  }
  else {
    return v5;
  }
}

void protocol witness for HealthDataQuery.getMlConfig(heartRateFwEnd10PctModelPath:heartRatePeriod10PctModelPath:wTmpFwEndLstmModelPath:wTmpFwEndRFModelPath:wTmpPeriodLstmModelPath:heartRatePeriodTFModelPaths:heartRatePeriodEnsembleModelPath:) in conformance HealthDataStoreQuery(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, Swift::String wTmpPeriodLstmModelPath, Swift::OpaquePointer_optional heartRatePeriodTFModelPaths, Swift::String_optional a11)
{
  heartRatePeriodEnsembleModelPath.value._uint64_t countAndFlagsBits = a11.value._countAndFlagsBits;
  HealthDataStoreQuery.getMlConfig(heartRateFwEnd10PctModelPath:heartRatePeriod10PctModelPath:wTmpFwEndLstmModelPath:wTmpFwEndRFModelPath:wTmpPeriodLstmModelPath:heartRatePeriodTFModelPaths:heartRatePeriodEnsembleModelPath:)((NgtMenstrualAlgorithmsMLModelConfig *)a11.value._countAndFlagsBits, *(Swift::String *)&a1, *(Swift::String *)&a3, *(Swift::String *)&a5, *(Swift::String *)&a7, wTmpPeriodLstmModelPath, heartRatePeriodTFModelPaths, heartRatePeriodEnsembleModelPath);
}

void closure #1 in consolidateSleepHours(_:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v12 = a2;
  uint64_t v8 = a1;
  id v17 = 0;
  unint64_t v9 = (*(void *)(*(void *)(type metadata accessor for Date() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v2 = MEMORY[0x270FA5388](v8);
  char v14 = (char *)&v7 - v9;
  unint64_t v10 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  float v4 = (id *)MEMORY[0x270FA5388](v2);
  Class v13 = (char *)&v7 - v10;
  id v11 = *v4;
  id v17 = v11;
  id v5 = v11;
  id v16 = objc_msgSend(v11, sel_startDate);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  id v6 = v11;
  id v15 = objc_msgSend(v11, sel_endDate);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  DateInterval.init(start:end:)();
}

uint64_t closure #2 in consolidateSleepHours(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = a2;
  uint64_t v18 = 0;
  uint64_t v17 = 0;
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v13 - 8);
  uint64_t v10 = v13 - 8;
  unint64_t v6 = (*(void *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v13);
  id v11 = (char *)&v6 - v6;
  unint64_t v7 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)&v6 - v6);
  uint64_t v12 = (char *)&v6 - v7;
  uint64_t v18 = a1;
  uint64_t v17 = v4;
  DateInterval.start.getter();
  DateInterval.start.getter();
  int v16 = static Date.< infix(_:_:)();
  id v15 = *(void (**)(char *, uint64_t))(v9 + 8);
  uint64_t v14 = v9 + 8;
  v15(v11, v13);
  v15(v12, v13);
  return v16 & 1;
}

unint64_t lazy protocol witness table accessor for type [HKCategorySample] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [HKCategorySample] and conformance [A];
  if (!lazy protocol witness table cache variable for type [HKCategorySample] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [HKCategorySample]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [HKCategorySample] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type [DateInterval] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [DateInterval] and conformance [A];
  if (!lazy protocol witness table cache variable for type [DateInterval] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [DateInterval]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [DateInterval] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type [DateInterval] and conformance [A];
  if (!lazy protocol witness table cache variable for type [DateInterval] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [DateInterval]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [DateInterval] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

uint64_t closure #1 in extractAggSHRBatched(_:_:_:_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v23 = a1;
  uint64_t v17 = a2;
  uint64_t v16 = a3;
  uint64_t v13 = "Fatal error";
  uint64_t v14 = "Unexpectedly found nil while unwrapping an Optional value";
  id v15 = "NightingaleTraining/HealthDataStoreQuery.swift";
  uint64_t v28 = 0;
  uint64_t v27 = 0;
  uint64_t v26 = 0;
  uint64_t v18 = type metadata accessor for DateInterval();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = v18 - 8;
  unint64_t v21 = (*(void *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  float v22 = (char *)v9 - v21;
  uint64_t v28 = MEMORY[0x270FA5388](v23);
  uint64_t v27 = v3;
  uint64_t v26 = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Interval<Date, UInt32>);
  unint64_t v6 = (int *)(v23 + *(int *)(v5 + 48));
  int v24 = *v6;
  if (v6[1])
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    int v12 = v24;
  }
  v9[1] = &v25;
  int v25 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : [DateInterval]]);
  uint64_t v10 = (uint64_t (*)(void))Dictionary.subscript.modify();
  id v11 = v7;
  if (*v7)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v22, v16, v18);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DateInterval]);
    Array.append(_:)();
  }
  return v10();
}

uint64_t closure #2 in extractAggSHRBatched(_:_:_:_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v38 = a1;
  uint64_t v32 = a2;
  uint64_t v29 = a3;
  id v30 = a4;
  uint64_t v31 = a5;
  uint64_t v23 = "Fatal error";
  int v24 = "Unexpectedly found nil while unwrapping an Optional value";
  int v25 = "NightingaleTraining/HealthDataStoreQuery.swift";
  uint64_t v45 = 0;
  uint64_t v44 = 0;
  uint64_t v43 = 0;
  uint64_t v42 = 0;
  uint64_t v41 = 0;
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (interval: DateInterval, hr: Float));
  unint64_t v27 = (*(void *)(*(void *)(v26 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v26);
  uint64_t v28 = (char *)&v15 - v27;
  uint64_t v33 = type metadata accessor for DateInterval();
  uint64_t v34 = *(void *)(v33 - 8);
  uint64_t v35 = v33 - 8;
  unint64_t v36 = (*(void *)(v34 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v5 = MEMORY[0x270FA5388](v38);
  uint64_t v37 = (char *)&v15 - v36;
  uint64_t v45 = v5;
  uint64_t v44 = v6;
  uint64_t v43 = v7;
  uint64_t v42 = v8;
  uint64_t v41 = v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Interval<Date, UInt32>);
  id v11 = (int *)(v38 + *(int *)(v10 + 48));
  int v39 = *v11;
  if (v11[1])
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    int v22 = v39;
  }
  uint64_t v19 = &v40;
  int v40 = v22;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : [(interval: DateInterval, hr: Float)]]);
  uint64_t v20 = (uint64_t (*)(void))Dictionary.subscript.modify();
  unint64_t v21 = v12;
  if (*v12)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v37, v29, v33);
    id v15 = objc_msgSend(v30, sel_quantity);
    objc_msgSend(v15, sel_doubleValueForUnit_, v31);
    Swift::Double v16 = v14;

    Swift::Float v18 = Float.init(_:)(v16);
    uint64_t v17 = *(int *)(v26 + 48);
    (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v28, v37, v33);
    *(Swift::Float *)&v28[v17] = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(interval: DateInterval, hr: Float)]);
    Array.append(_:)();
  }
  return v20();
}

uint64_t outlined destroy of (interval: DateInterval, hr: Float)(uint64_t a1)
{
  uint64_t v1 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t))(*(void *)(v1 - 8) + 8))(a1);
  return a1;
}

uint64_t partial apply for closure #1 in HealthDataStoreQuery.queryDailyAggSedentaryHeartRate(for:)(uint64_t a1)
{
  return closure #1 in HealthDataStoreQuery.queryDailyAggSedentaryHeartRate(for:)(a1, *(void **)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

unint64_t lazy protocol witness table accessor for type [HKQuantitySample] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [HKQuantitySample] and conformance [A];
  if (!lazy protocol witness table cache variable for type [HKQuantitySample] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [HKQuantitySample]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [HKQuantitySample] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

uint64_t partial apply for closure #2 in extractAggSHRBatched(_:_:_:_:_:_:_:)(uint64_t a1)
{
  return closure #2 in extractAggSHRBatched(_:_:_:_:_:_:_:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t partial apply for closure #1 in extractAggSHRBatched(_:_:_:_:_:_:_:)(uint64_t a1)
{
  return closure #1 in extractAggSHRBatched(_:_:_:_:_:_:_:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #1 in HealthDataStoreQuery.queryDailyAggSedentaryHeartRateBatched(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v3;
  *(void *)(v3 + 16) = v3;
  uint64_t v8 = *(void *)(v2 + 16);
  uint64_t v9 = *(void *)(v2 + 24);
  int v10 = *(_DWORD *)(v2 + 32);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v6 + 24) = v4;
  *uint64_t v4 = *(void *)(v6 + 16);
  v4[1] = partial apply for closure #33 in NightingaleDPFLRunner.run(task:useCase:context:);
  return closure #1 in HealthDataStoreQuery.queryDailyAggSedentaryHeartRateBatched(_:_:)(a1, a2, v8, v9, v10);
}

unint64_t type metadata accessor for NSSortDescriptor()
{
  uint64_t v2 = lazy cache variable for type metadata for NSSortDescriptor;
  if (!lazy cache variable for type metadata for NSSortDescriptor)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for NSSortDescriptor);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t sub_257C8EC30()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in HealthDataStoreQuery.queryMostRecentSample(_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return closure #1 in HealthDataStoreQuery.queryMostRecentSample(_:_:_:)(a1, a2, a3, *(unsigned char *)(v3 + 16), *(void (**)(void))(v3 + 24), *(void *)(v3 + 32), *(NSObject **)(v3 + 40));
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of NgtMenstrualAlgorithmsDayStreamProcessorConfig?(id *a1)
{
}

void *outlined assign with take of DateComponents?(const void *a1, void *a2)
{
  uint64_t v7 = type metadata accessor for DateComponents();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48);
  if (((unsigned int (*)(void *, uint64_t))v9)(a2, 1))
  {
    if (v9(a1, 1, v7))
    {
      uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
      memcpy(a2, a1, *(void *)(*(void *)(v3 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(a2, a1, v7);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(a2, 0, 1, v7);
    }
  }
  else if (v9(a1, 1, v7))
  {
    (*(void (**)(void *, uint64_t))(v8 + 8))(a2, v7);
    uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
    memcpy(a2, a1, *(void *)(*(void *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 40))(a2, a1, v7);
  }
  return a2;
}

void *outlined init with copy of DateComponents?(const void *a1, void *a2)
{
  uint64_t v6 = type metadata accessor for DateComponents();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a1, 1))
  {
    uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
    memcpy(a2, a1, *(void *)(*(void *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a2, a1, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
  }
  return a2;
}

void partial apply for closure #2 in HealthDataStoreQuery.getDayStreamProcessorConfig(birthDateRequired:shouldUseCachedConfig:)(uint64_t a1@<X8>)
{
  closure #2 in HealthDataStoreQuery.getDayStreamProcessorConfig(birthDateRequired:shouldUseCachedConfig:)(v1, a1);
}

uint64_t sub_257C8F034()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in HealthDataStoreQuery.getBmi(dispatchGroup:hyperParams:)(void *a1, uint64_t a2)
{
  return closure #1 in HealthDataStoreQuery.getBmi(dispatchGroup:hyperParams:)(a1, a2, v2);
}

unint64_t type metadata accessor for NgtMenstrualAlgorithmsMLModelConfig()
{
  uint64_t v2 = lazy cache variable for type metadata for NgtMenstrualAlgorithmsMLModelConfig;
  if (!lazy cache variable for type metadata for NgtMenstrualAlgorithmsMLModelConfig)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for NgtMenstrualAlgorithmsMLModelConfig);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t type metadata accessor for HealthDataStoreQuery()
{
  return self;
}

id @nonobjc HKCategoryType.init(identifier:)(void *a1)
{
  id v4 = objc_msgSend(v1, sel_initWithIdentifier_);

  return v4;
}

id @nonobjc HKQueryDescriptor.init(sampleType:predicate:)(void *a1, void *a2)
{
  id v6 = objc_msgSend(v2, sel_initWithSampleType_predicate_);

  return v6;
}

id @nonobjc HKSampleQuery.init(queryDescriptors:limit:resultsHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for HKQueryDescriptor();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  aBlocuint64_t k = MEMORY[0x263EF8330];
  int v13 = 1107296256;
  int v14 = 0;
  id v15 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed HKSampleQuery, @guaranteed [HKSample]?, @guaranteed Error?) -> ();
  Swift::Double v16 = &block_descriptor_68;
  uint64_t v9 = _Block_copy(&aBlock);
  id v11 = objc_msgSend(v8, sel_initWithQueryDescriptors_limit_resultsHandler_, isa, a2);
  _Block_release(v9);
  swift_release();

  swift_bridgeObjectRelease();
  return v11;
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable (@guaranteed HKSampleQuery, @guaranteed [HKSample]?, @guaranteed Error?) -> ()(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v12 = *(void (**)(void *, uint64_t))(a1 + 32);
  swift_retain();
  id v4 = a2;
  id v5 = a3;
  if (a3)
  {
    type metadata accessor for HKSample();
    uint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v10 = v9;
  }
  else
  {
    uint64_t v10 = 0;
  }
  id v6 = a4;
  if (a4) {
    id v8 = a4;
  }
  else {
    id v8 = 0;
  }
  v12(a2, v10);

  swift_bridgeObjectRelease();
  return swift_release();
}

id @nonobjc NSSortDescriptor.init(key:ascending:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v4 = MEMORY[0x25A2C0590](a1);
    swift_bridgeObjectRelease();
    id v5 = (void *)v4;
  }
  else
  {
    id v5 = 0;
  }
  id v3 = objc_msgSend(v6, sel_initWithKey_ascending_);

  return v3;
}

id @nonobjc HKSampleQuery.init(queryDescriptors:limit:sortDescriptors:resultsHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  type metadata accessor for HKQueryDescriptor();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  type metadata accessor for NSSortDescriptor();
  Class v11 = Array._bridgeToObjectiveC()().super.isa;
  uint64_t v19 = a4;
  uint64_t v20 = a5;
  aBlocuint64_t k = MEMORY[0x263EF8330];
  int v15 = 1107296256;
  int v16 = 0;
  uint64_t v17 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed HKSampleQuery, @guaranteed [HKSample]?, @guaranteed Error?) -> ();
  uint64_t v18 = &block_descriptor;
  uint64_t v10 = _Block_copy(&aBlock);
  id v13 = objc_msgSend(v9, sel_initWithQueryDescriptors_limit_sortDescriptors_resultsHandler_, isa, a2, v11);
  _Block_release(v10);
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v13;
}

unint64_t type metadata accessor for NgtMenstrualAlgorithmsDayStreamProcessorConfig()
{
  uint64_t v2 = lazy cache variable for type metadata for NgtMenstrualAlgorithmsDayStreamProcessorConfig;
  if (!lazy cache variable for type metadata for NgtMenstrualAlgorithmsDayStreamProcessorConfig)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for NgtMenstrualAlgorithmsDayStreamProcessorConfig);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for HKCharacteristicType()
{
  uint64_t v2 = lazy cache variable for type metadata for HKCharacteristicType;
  if (!lazy cache variable for type metadata for HKCharacteristicType)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HKCharacteristicType);
    return ObjCClassMetadata;
  }
  return v2;
}

void partial apply for closure #2 in closure #1 in implicit closure #1 in HealthDataStoreQuery.getDayStreamProcessorConfig(birthDateRequired:shouldUseCachedConfig:)(uint64_t a1@<X8>)
{
  closure #1 in closure #1 in implicit closure #1 in HealthDataStoreQuery.getDayStreamProcessorConfig(birthDateRequired:shouldUseCachedConfig:)(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  swift_retain();
  uint64_t result = a1;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v5;
  return result;
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t sub_257C8F798()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in HealthDataStoreQuery.queryDailyAggSedentaryHeartRateBatched(_:_:)(uint64_t a1)
{
  uint64_t v5 = v2;
  *(void *)(v2 + 16) = v2;
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  uint64_t v8 = *(void *)(v1 + 32);
  int v9 = *(_DWORD *)(v1 + 40);
  uint64_t v10 = *(void *)(v1 + 44);
  int v11 = *(_DWORD *)(v1 + 52);
  id v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v3;
  *id v3 = *(void *)(v5 + 16);
  v3[1] = partial apply for closure #33 in NightingaleDPFLRunner.run(task:useCase:context:);
  return closure #1 in closure #1 in HealthDataStoreQuery.queryDailyAggSedentaryHeartRateBatched(_:_:)(a1, v6, v7, v8, v9, v10, v11);
}

uint64_t outlined destroy of TaskPriority?(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for TaskPriority();
  uint64_t v4 = *(void *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1)) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  }
  return a1;
}

void *outlined init with copy of TaskPriority?(const void *a1, void *a2)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a1, 1))
  {
    uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
    memcpy(a2, a1, *(void *)(*(void *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a2, a1, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
  }
  return a2;
}

void partial apply for closure #1 in closure #1 in HealthDataStoreQuery.queryDailyAggSedentaryHeartRate(for:)()
{
  closure #1 in closure #1 in HealthDataStoreQuery.queryDailyAggSedentaryHeartRate(for:)(*(void **)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48));
}

uint64_t sub_257C8FB14()
{
  uint64_t v2 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(daySHR10s: [UInt32 : Float], nightSHR10s: [UInt32 : Float], daySHRCounts: [UInt32 : Int], nightSHRCounts: [UInt32 : Int]), Error>)
                 - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in closure #1 in HealthDataStoreQuery.queryDailyAggSedentaryHeartRate(for:)(void *a1, void *a2, void *a3)
{
  uint64_t v9 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(daySHR10s: [UInt32 : Float], nightSHR10s: [UInt32 : Float], daySHRCounts: [UInt32 : Int], nightSHRCounts: [UInt32 : Int]), Error>)
                 - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v5 = *(void **)(v3 + ((v4 + *(void *)(v9 + 64) + 3) & 0xFFFFFFFFFFFFFFFCLL));
  closure #1 in closure #1 in closure #1 in HealthDataStoreQuery.queryDailyAggSedentaryHeartRate(for:)(a1, a2, a3, (void *)(v3 + v4), v5);
}

uint64_t block_copy_helper_66(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  swift_retain();
  uint64_t result = a1;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v5;
  return result;
}

uint64_t block_destroy_helper_67()
{
  return swift_release();
}

void partial apply for closure #1 in closure #1 in HealthDataStoreQuery.queryDailyAggSedentaryHeartRate(_:_:_:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  closure #1 in closure #1 in HealthDataStoreQuery.queryDailyAggSedentaryHeartRate(_:_:_:)(a1, *(void *)(v2 + 16), a2);
}

HKQueryDescriptor partial apply for closure #1 in closure #1 in HealthDataStoreQuery.queryDescriptors(_:_:_:)@<X0>(id *a1@<X0>, HKQueryDescriptor *a2@<X8>)
{
  return closure #1 in closure #1 in HealthDataStoreQuery.queryDescriptors(_:_:_:)(a1, *(NSPredicate_optional **)(v2 + 16), a2);
}

unint64_t lazy protocol witness table accessor for type [HKSampleType] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [HKSampleType] and conformance [A];
  if (!lazy protocol witness table cache variable for type [HKSampleType] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [HKSampleType]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [HKSampleType] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

void partial apply for closure #1 in closure #1 in HealthDataStoreQuery.queryRawSamples(_:_:)()
{
  closure #1 in closure #1 in HealthDataStoreQuery.queryRawSamples(_:_:)(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_257C8FE38()
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[HealthDataRawSampleType : HealthDataQueryResult], Error>);
  uint64_t v2 = *(void *)(v4 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_bridgeObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v4);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in HealthDataStoreQuery.queryRawSamples(_:_:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[HealthDataRawSampleType : HealthDataQueryResult], Error>);
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v6 = *(void *)(v3 + 24);
  uint64_t v7 = v3
     + ((*(unsigned __int8 *)(*(void *)(v4 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v4 - 8) + 80));
  return closure #1 in closure #1 in closure #1 in HealthDataStoreQuery.queryRawSamples(_:_:)(a1, a2, a3, v5, v6, v7);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in closure #1 in HealthDataStoreQuery.queryRawSamples(_:_:)(uint64_t a1, char *a2)
{
  return closure #1 in closure #1 in closure #1 in closure #1 in HealthDataStoreQuery.queryRawSamples(_:_:)(a1, a2, *(void *)(v2 + 16));
}

uint64_t partial apply for closure #2 in closure #1 in closure #1 in closure #1 in HealthDataStoreQuery.queryRawSamples(_:_:)(id *a1)
{
  return closure #2 in closure #1 in closure #1 in closure #1 in HealthDataStoreQuery.queryRawSamples(_:_:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

void partial apply for closure #1 in closure #1 in HealthDataStoreQuery.queryPregrancies(source:range:)()
{
  closure #1 in closure #1 in HealthDataStoreQuery.queryPregrancies(source:range:)(*(uint64_t **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_257C90150()
{
  uint64_t v2 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[Pregnancy?], Error>)
                 - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

void *partial apply for closure #1 in closure #1 in closure #1 in HealthDataStoreQuery.queryPregrancies(source:range:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[Pregnancy?], Error>);
  uint64_t v5 = v3
     + ((*(unsigned __int8 *)(*(void *)(v4 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v4 - 8) + 80));
  return closure #1 in closure #1 in closure #1 in HealthDataStoreQuery.queryPregrancies(source:range:)(a1, a2, a3, v5);
}

void partial apply for closure #1 in closure #1 in closure #1 in closure #1 in HealthDataStoreQuery.queryPregrancies(source:range:)(uint64_t a1)
{
  closure #1 in closure #1 in closure #1 in closure #1 in HealthDataStoreQuery.queryPregrancies(source:range:)(a1, *(void *)(v1 + 16));
}

uint64_t sub_257C902D8()
{
  return swift_deallocObject();
}

void *outlined init with take of PregnancyFromFactor?(const void *a1, void *__dst)
{
  return __dst;
}

uint64_t sub_257C90340()
{
  return swift_deallocObject();
}

uint64_t Logging.default.unsafeMutableAddressor()
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  return __swift_project_value_buffer(v0, (uint64_t)static Logging.default);
}

uint64_t one-time initialization function for default()
{
  uint64_t v1 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v1, static Logging.default);
  __swift_project_value_buffer(v1, (uint64_t)static Logging.default);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.priml.Nightingale", 0x1BuLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Training", 8uLL, 1);
  return Logger.init(subsystem:category:)();
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0) {
    return *(void *)a2;
  }
  return v3;
}

uint64_t __swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = a2;
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v2 = swift_slowAlloc();
    *a2 = v2;
    return v2;
  }
  return (uint64_t)v5;
}

ValueMetadata *type metadata accessor for Logging()
{
  return &type metadata for Logging;
}

Swift::Float __swiftcall getBottomPercentile(percentile:_:)(Swift::Int percentile, Swift::OpaquePointer *_)
{
  Swift::Int v28 = percentile;
  unint64_t v27 = _;
  uint64_t v20 = closure #1 in getBottomPercentile(percentile:_:);
  unint64_t v21 = "Fatal error";
  int v22 = "Float value cannot be converted to Int because it is either infinite or NaN";
  uint64_t v23 = "Swift/IntegerTypes.swift";
  int v24 = "Float value cannot be converted to Int because the result would be less than Int.min";
  int v25 = "Float value cannot be converted to Int because the result would be greater than Int.max";
  uint64_t v44 = 0;
  uint64_t v43 = 0;
  uint64_t v26 = 0;
  uint64_t v41 = 0;
  uint64_t v39 = 0;
  uint64_t v29 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v31 = v29 - 8;
  unint64_t v32 = (*(void *)(v30 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v2 = MEMORY[0x270FA5388](v28);
  uint64_t v33 = (char *)&v9 - v32;
  unint64_t v34 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v35 = (char *)&v9 - v34;
  uint64_t v44 = v4;
  uint64_t v43 = v5;
  uint64_t v36 = *v5;
  swift_bridgeObjectRetain();
  uint64_t v37 = MEMORY[0x25A2C0820](v36);
  swift_bridgeObjectRelease();
  if (!v37) {
    return 0.0;
  }
  uint64_t v6 = v26;
  uint64_t rawValue = v27->_rawValue;
  swift_bridgeObjectRetain();
  uint64_t v42 = rawValue;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
  lazy protocol witness table accessor for type [Float] and conformance [A]();
  uint64_t v18 = Sequence.sorted(by:)();
  if (!v6)
  {
    uint64_t v12 = v18;
    outlined destroy of [A]();
    uint64_t v41 = v12;
    float v13 = (float)v28 / 100.0;
    float v14 = v13 * (float)MEMORY[0x25A2C0820]();
    (*(void (**)(char *, void, uint64_t))(v30 + 104))(v35, *MEMORY[0x263F8E220], v29);
    float v40 = v14;
    (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v33, v35, v29);
    int v15 = (*(uint64_t (**)(char *, uint64_t))(v30 + 88))(v33, v29);
    if (v15 != *MEMORY[0x263F8E210])
    {
      if (v15 == *MEMORY[0x263F8E208])
      {
        float v40 = rintf(v14);
        goto LABEL_18;
      }
      if (v15 == *MEMORY[0x263F8E218]) {
        goto LABEL_15;
      }
      if (v15 != *MEMORY[0x263F8E220])
      {
        if (v15 == *MEMORY[0x263F8E1F8])
        {
          float v40 = truncf(v14);
          goto LABEL_18;
        }
        if (v15 != *MEMORY[0x263F8E200])
        {
          Float._roundSlowPath(_:)();
          (*(void (**)(char *, uint64_t))(v30 + 8))(v33, v29);
LABEL_18:
          float v11 = v40;
          (*(void (**)(char *, uint64_t))(v30 + 8))(v35, v29);
          if ((LODWORD(v11) >> 23) == 255)
          {
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
          }
          if (v11 <= -9.2234e18)
          {
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
          }
          if (v11 >= 9.2234e18)
          {
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
          }
          uint64_t v39 = (uint64_t)v11;
          specialized Array.subscript.getter();
          float v38 = v8;
          float v10 = v8;
          swift_bridgeObjectRelease();
          return v10;
        }
        if ((Float.sign.getter() & 1) == 0)
        {
LABEL_15:
          float v40 = ceilf(v14);
          goto LABEL_18;
        }
      }
      float v40 = floorf(v14);
      goto LABEL_18;
    }
    float v40 = roundf(v14);
    goto LABEL_18;
  }
  __break(1u);
  return result;
}

NightingaleTraining::HealthDataRawSampleType_optional __swiftcall HealthDataRawSampleType.init(rawValue:)(Swift::Int rawValue)
{
  switch(rawValue)
  {
    case 0:
      return 0;
    case 1:
      return (NightingaleTraining::HealthDataRawSampleType_optional)1;
    case 2:
      return (NightingaleTraining::HealthDataRawSampleType_optional)2;
    case 3:
      return (NightingaleTraining::HealthDataRawSampleType_optional)3;
    case 4:
      return (NightingaleTraining::HealthDataRawSampleType_optional)4;
    case 5:
      return (NightingaleTraining::HealthDataRawSampleType_optional)5;
    case 6:
      return (NightingaleTraining::HealthDataRawSampleType_optional)6;
    case 7:
      return (NightingaleTraining::HealthDataRawSampleType_optional)7;
    case 8:
      return (NightingaleTraining::HealthDataRawSampleType_optional)8;
    case 9:
      return (NightingaleTraining::HealthDataRawSampleType_optional)9;
    case 10:
      return (NightingaleTraining::HealthDataRawSampleType_optional)10;
  }
  return (NightingaleTraining::HealthDataRawSampleType_optional)11;
}

uint64_t HealthDataRawSampleType.rawValue.getter(char a1)
{
  switch(a1)
  {
    case 1:
      uint64_t v2 = 1;
      break;
    case 2:
      uint64_t v2 = 2;
      break;
    case 3:
      uint64_t v2 = 3;
      break;
    case 4:
      uint64_t v2 = 4;
      break;
    case 5:
      uint64_t v2 = 5;
      break;
    case 6:
      uint64_t v2 = 6;
      break;
    case 7:
      uint64_t v2 = 7;
      break;
    case 8:
      uint64_t v2 = 8;
      break;
    case 9:
      uint64_t v2 = 9;
      break;
    case 10:
      uint64_t v2 = 10;
      break;
    default:
      uint64_t v2 = 0;
      break;
  }
  return v2;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance HealthDataRawSampleType()
{
  return == infix<A>(_:_:)() & 1;
}

NightingaleTraining::HealthDataRawSampleType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance HealthDataRawSampleType@<W0>(Swift::Int *a1@<X0>, NightingaleTraining::HealthDataRawSampleType_optional *a2@<X8>)
{
  result.Swift::Float value = HealthDataRawSampleType.init(rawValue:)(*a1).value;
  a2->Swift::Float value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance HealthDataRawSampleType@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = HealthDataRawSampleType.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance HealthDataRawSampleType()
{
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance HealthDataRawSampleType()
{
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance HealthDataRawSampleType()
{
  return RawRepresentable<>._rawHashValue(seed:)();
}

BOOL closure #1 in getBottomPercentile(percentile:_:)(float *a1, float *a2)
{
  return *a1 < *a2;
}

uint64_t getEnumTagSinglePayload for HealthDataRawSampleType(unsigned __int8 *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 <= 0xF5) {
      goto LABEL_15;
    }
    unsigned int v7 = ((a2 + 10) >> 8) + 1;
    int v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000) {
        int v2 = 4;
      }
      else {
        int v2 = 2;
      }
      int v8 = v2;
    }
    if (v8 == 1) {
      int v6 = a1[1];
    }
    else {
      int v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    }
    if (v6)
    {
      int v5 = (*a1 | ((v6 - 1) << 8)) + 245;
    }
    else
    {
LABEL_15:
      int v3 = *a1 - 11;
      if (v3 < 0) {
        int v3 = -1;
      }
      int v5 = v3;
    }
  }
  else
  {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for HealthDataRawSampleType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  int v7 = 0;
  if (a3 > 0xF5)
  {
    unsigned int v5 = ((a3 + 10) >> 8) + 1;
    int v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000) {
        int v3 = 4;
      }
      else {
        int v3 = 2;
      }
      int v6 = v3;
    }
    int v7 = v6;
  }
  if (a2 > 0xF5)
  {
    unsigned int v4 = ((a2 - 246) >> 8) + 1;
    *uint64_t result = a2 + 10;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2) {
      *uint64_t result = a2 + 10;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HealthDataRawSampleType()
{
  return &type metadata for HealthDataRawSampleType;
}

unint64_t base witness table accessor for Equatable in HealthDataRawSampleType()
{
  return lazy protocol witness table accessor for type HealthDataRawSampleType and conformance HealthDataRawSampleType();
}

uint64_t CalendarPeriodPrediction.__allocating_init(config:mlConfig:urCycleLength:urPeriodLength:)(void *a1, void *a2, double a3, double a4)
{
  return CalendarPeriodPrediction.init(config:mlConfig:urCycleLength:urPeriodLength:)(a1, a2, a3, a4);
}

void *CalendarPeriodPrediction.mlConfig.getter()
{
  swift_beginAccess();
  int v3 = *(void **)(v0 + 24);
  id v1 = v3;
  swift_endAccess();
  return v3;
}

void CalendarPeriodPrediction.mlConfig.setter(void *a1)
{
  id v2 = a1;
  swift_beginAccess();
  int v3 = *(void **)(v1 + 24);
  *(void *)(v1 + 24) = a1;

  swift_endAccess();
}

double CalendarPeriodPrediction.urCycleLength.getter()
{
  swift_beginAccess();
  double v2 = *(double *)(v0 + 32);
  swift_endAccess();
  return v2;
}

uint64_t CalendarPeriodPrediction.urCycleLength.setter(double a1)
{
  swift_beginAccess();
  *(double *)(v1 + 32) = a1;
  return swift_endAccess();
}

double CalendarPeriodPrediction.urPeriodLength.getter()
{
  swift_beginAccess();
  double v2 = *(double *)(v0 + 40);
  swift_endAccess();
  return v2;
}

uint64_t CalendarPeriodPrediction.urPeriodLength.setter(double a1)
{
  swift_beginAccess();
  *(double *)(v1 + 40) = a1;
  return swift_endAccess();
}

uint64_t CalendarPeriodPrediction.init(config:mlConfig:urCycleLength:urPeriodLength:)(void *a1, void *a2, double a3, double a4)
{
  id v5 = a1;
  *(void *)(v4 + 16) = a1;
  *(double *)(v4 + 32) = a3;
  *(double *)(v4 + 40) = a4;
  id v6 = a2;
  *(void *)(v4 + 24) = a2;

  return v12;
}

Swift::tuple_dayInputs_OpaquePointer_chronologicalOrderedCFs_OpaquePointer __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CalendarPeriodPrediction.toAlgorithmInputs(flow:otr:spotting:cycleFactors:swt:)(Swift::OpaquePointer flow, Swift::OpaquePointer otr, Swift::OpaquePointer spotting, Swift::OpaquePointer cycleFactors, Swift::OpaquePointer swt)
{
  uint64_t rawValue = flow._rawValue;
  uint64_t v61 = otr._rawValue;
  uint64_t v65 = spotting._rawValue;
  uint64_t v51 = cycleFactors._rawValue;
  uint64_t v69 = swt._rawValue;
  id v53 = (void (*)(char *, char *))partial apply for closure #1 in CalendarPeriodPrediction.toAlgorithmInputs(flow:otr:spotting:cycleFactors:swt:);
  uint64_t v54 = closure #2 in CalendarPeriodPrediction.toAlgorithmInputs(flow:otr:spotting:cycleFactors:swt:);
  uint64_t v55 = closure #3 in CalendarPeriodPrediction.toAlgorithmInputs(flow:otr:spotting:cycleFactors:swt:);
  uint64_t v56 = (void (*)(char *, char *))partial apply for thunk for @callee_guaranteed (@unowned UInt8, @guaranteed [(start: UInt32, end: UInt32)]) -> (@owned [(type: UInt8, day: UInt32, end: Bool)]);
  id v57 = closure #2 in HealthDataStoreQuery.queryDescriptors(_:_:_:);
  uint64_t v58 = closure #5 in CalendarPeriodPrediction.toAlgorithmInputs(flow:otr:spotting:cycleFactors:swt:);
  uint64_t v68 = &v87;
  uint64_t v87 = 0;
  float v80 = 0;
  *(_DWORD *)&v76[8] = 0;
  id v93 = flow._rawValue;
  uint64_t v92 = otr._rawValue;
  uint64_t v91 = spotting._rawValue;
  uint64_t v90 = cycleFactors._rawValue;
  uint64_t v89 = swt._rawValue;
  uint64_t v88 = v5;
  uint64_t v73 = MEMORY[0x263F8E8F8];
  uint64_t v60 = MEMORY[0x263F8E778];
  uint64_t v74 = MEMORY[0x263F8E908];
  uint64_t v59 = &v86;
  uint64_t v86 = swift_bridgeObjectRetain();
  uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : UInt8].Keys);
  unint64_t v63 = lazy protocol witness table accessor for type [UInt32 : UInt8].Keys and conformance [A : B].Keys();
  uint64_t v87 = Set.init<A>(_:)();
  uint64_t v64 = &v85;
  uint64_t v85 = swift_bridgeObjectRetain();
  uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<UInt32>);
  Set.formUnion<A>(_:)();
  Class v67 = &v84;
  uint64_t v84 = swift_bridgeObjectRetain();
  uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : Bool].Keys);
  lazy protocol witness table accessor for type [UInt32 : Bool].Keys and conformance [A : B].Keys();
  Set.formUnion<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Float, String));
  int v72 = &v83;
  uint64_t v83 = swift_bridgeObjectRetain();
  uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : (Float, String)].Keys);
  lazy protocol witness table accessor for type [UInt32 : (Float, String)].Keys and conformance [A : B].Keys();
  Set.formUnion<A>(_:)();
  uint64_t v75 = v87;
  swift_bridgeObjectRetain();
  *(void *)char v76 = Set.isEmpty.getter();
  swift_bridgeObjectRelease();
  if (v76[0])
  {
    lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
    v22[1] = swift_allocError();
    *uint64_t v19 = 30;
    swift_willThrow();
    outlined destroy of [A]();
    float v11 = v47;
    float v10 = v47;
    goto LABEL_14;
  }
  uint64_t v43 = v87;
  swift_bridgeObjectRetain();
  uint64_t v82 = v43;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v44 = v22;
  MEMORY[0x270FA5388](v22);
  uint64_t v45 = v21;
  void v21[2] = v6;
  v21[3] = v61;
  void v21[4] = v69;
  void v21[5] = v7;
  unint64_t v46 = type metadata accessor for NgtMenstrualAlgorithmsDayInput();
  unint64_t v8 = lazy protocol witness table accessor for type Set<UInt32> and conformance Set<A>();
  uint64_t v9 = v52;
  float v10 = (void *)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(v53, (uint64_t)v45, v70, v46, MEMORY[0x263F8E628], v8, MEMORY[0x263F8E658], (uint64_t)v47);
  uint64_t v48 = v9;
  unint64_t v49 = v10;
  if (v9)
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v39 = v49;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of [A]();
  char v81 = v39;
  uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [NgtMenstrualAlgorithmsDayInput]);
  lazy protocol witness table accessor for type [NgtMenstrualAlgorithmsDayInput] and conformance [A]();
  uint64_t v12 = v48;
  float v10 = (void *)Sequence.sorted(by:)();
  uint64_t v41 = v12;
  uint64_t v42 = v10;
  if (v12)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v32 = v42;
  outlined destroy of [A]();
  float v80 = v32;
  char v79 = v51;
  uint64_t v33 = v21;
  MEMORY[0x270FA5388](v21);
  float v13 = &v21[-4];
  unint64_t v34 = &v21[-4];
  void v13[2] = v55;
  void v13[3] = 0;
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8 : [(start: UInt32, end: UInt32)]]);
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(type: UInt8, day: UInt32, end: Bool)]);
  unint64_t v14 = lazy protocol witness table accessor for type [UInt8 : [(start: UInt32, end: UInt32)]] and conformance [A : B]();
  uint64_t v15 = v41;
  float v10 = (void *)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(v56, (uint64_t)v34, v35, v36, MEMORY[0x263F8E628], v14, MEMORY[0x263F8E658], (uint64_t)v47);
  uint64_t v37 = v15;
  float v38 = v10;
  if (v15)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  char v78 = v38;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[(type: UInt8, day: UInt32, end: Bool)]]);
  unint64_t v28 = lazy protocol witness table accessor for type [[(type: UInt8, day: UInt32, end: Bool)]] and conformance [A]();
  unint64_t v16 = lazy protocol witness table accessor for type [(type: UInt8, day: UInt32, end: Bool)] and conformance [A]();
  uint64_t v17 = v37;
  unint64_t v29 = v16;
  float v10 = (void *)Sequence.flatMap<A>(_:)();
  uint64_t v30 = v17;
  uint64_t v31 = v10;
  if (v17)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  int v24 = v31;
  outlined destroy of [A]();
  uint64_t v18 = v30;
  float v77 = v24;
  float v10 = (void *)Sequence.sorted(by:)();
  uint64_t v25 = v18;
  uint64_t v26 = v10;
  if (v18)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v23 = v26;
  outlined destroy of [A]();
  *(void *)&v76[4] = v23;
  outlined destroy of [A]();
  float v11 = v23;
  float v10 = v32;
LABEL_14:
  result.chronologicalOrderedCFs._uint64_t rawValue = v11;
  result.dayInputs._uint64_t rawValue = v10;
  return result;
}

void closure #1 in CalendarPeriodPrediction.toAlgorithmInputs(flow:otr:spotting:cycleFactors:swt:)(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, HKHealthStore *a6@<X8>)
{
  unsigned int v35 = 0;
  uint64_t v34 = 0;
  uint64_t v33 = 0;
  uint64_t v32 = 0;
  uint64_t v31 = 0;
  Class v30 = 0;
  unsigned int v35 = *a1;
  unsigned int v19 = v35;
  uint64_t v34 = a2;
  uint64_t v33 = a3;
  uint64_t v32 = a4;
  uint64_t v31 = a5;
  type metadata accessor for NgtMenstrualAlgorithmsDayInput();
  Class isa = HKHealthStore.__allocating_init()().super.isa;
  Class v30 = isa;
  [(objc_class *)isa setJulianDay:v35];
  *(_DWORD *)((char *)&v28 + 2) = v35;
  MEMORY[0x25A2C04B0](v29, (char *)&v28 + 2, a2, MEMORY[0x263F8E8F8], MEMORY[0x263F8E778], MEMORY[0x263F8E908]);
  if ((v29[1] & 1) == 0)
  {
    __int16 v6 = NgtMenstrualAlgorithmsOvulationTestResult.init(rawValue:)(v29[0]);
    if ((v6 & 0x100) == 0) {
      [(objc_class *)isa setFlow:v6];
    }
  }
  unsigned int v27 = v19;
  MEMORY[0x25A2C04B0](&v28, &v27, a3, MEMORY[0x263F8E8F8], MEMORY[0x263F8E778], MEMORY[0x263F8E908]);
  if ((v28 & 0x100) == 0)
  {
    __int16 v7 = NgtMenstrualAlgorithmsOvulationTestResult.init(rawValue:)(v28);
    if ((v7 & 0x100) == 0) {
      [(objc_class *)isa setOvulationTestResult:v7];
    }
  }
  unsigned int v24 = v19;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Float, String));
  MEMORY[0x25A2C04B0](&v25, &v24, a4, MEMORY[0x263F8E8F8], v8, MEMORY[0x263F8E908]);
  Swift::Float v12 = *(float *)&v25;
  Swift::String v13 = v26;
  if (v26._object)
  {
    type metadata accessor for NgtMenstrualAlgorithmsWristTemperature();
    Swift::Double v10 = Double.init(_:)(v12);
    swift_bridgeObjectRetain();
    NgtMenstrualAlgorithmsWristTemperature v36 = NgtMenstrualAlgorithmsWristTemperature.__allocating_init(temperature:forWatchIdentifier:)(v10, v13);
    Class v11 = v36.super.isa;
    [(objc_class *)isa setWristTemperature:v36._temperatureCelsius];

    swift_bridgeObjectRelease();
  }
  unsigned int v21 = v19;
  MEMORY[0x25A2C04B0](&v22, &v21, a5, MEMORY[0x263F8E8F8], MEMORY[0x263F8D4F8], MEMORY[0x263F8E908]);
  if (v22 == 2) {
    char v23 = 0;
  }
  else {
    char v23 = v22 & 1;
  }
  [(objc_class *)isa setSpotting:v23 & 1];
  uint64_t v9 = isa;
  a6->super.Class isa = isa;
}

void partial apply for closure #1 in CalendarPeriodPrediction.toAlgorithmInputs(flow:otr:spotting:cycleFactors:swt:)(unsigned int *a1@<X0>, HKHealthStore *a2@<X8>)
{
  closure #1 in CalendarPeriodPrediction.toAlgorithmInputs(flow:otr:spotting:cycleFactors:swt:)(a1, v2[2], v2[3], v2[4], v2[5], a2);
}

unint64_t type metadata accessor for NgtMenstrualAlgorithmsDayInput()
{
  uint64_t v2 = lazy cache variable for type metadata for NgtMenstrualAlgorithmsDayInput;
  if (!lazy cache variable for type metadata for NgtMenstrualAlgorithmsDayInput)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for NgtMenstrualAlgorithmsDayInput);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type Set<UInt32> and conformance Set<A>()
{
  uint64_t v2 = lazy protocol witness table cache variable for type Set<UInt32> and conformance Set<A>;
  if (!lazy protocol witness table cache variable for type Set<UInt32> and conformance Set<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Set<UInt32>);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Set<UInt32> and conformance Set<A>);
    return WitnessTable;
  }
  return v2;
}

uint64_t NgtMenstrualAlgorithmsOvulationTestResult.init(rawValue:)(uint64_t result)
{
  return result;
}

BOOL closure #2 in CalendarPeriodPrediction.toAlgorithmInputs(flow:otr:spotting:cycleFactors:swt:)(id *a1, id *a2)
{
  id v3 = *a2;
  unsigned int v4 = [*a1 (SEL)0x1F75E9795];
  return v4 < [v3 (SEL)0x1F75E9795];
}

unint64_t lazy protocol witness table accessor for type [NgtMenstrualAlgorithmsDayInput] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [NgtMenstrualAlgorithmsDayInput] and conformance [A];
  if (!lazy protocol witness table cache variable for type [NgtMenstrualAlgorithmsDayInput] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [NgtMenstrualAlgorithmsDayInput]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [NgtMenstrualAlgorithmsDayInput] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

uint64_t closure #3 in CalendarPeriodPrediction.toAlgorithmInputs(flow:otr:spotting:cycleFactors:swt:)(char a1, uint64_t a2)
{
  char v13 = a1;
  uint64_t v12 = a2;
  char v11 = a1;
  uint64_t v10 = a2;
  v8[16] = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(start: UInt32, end: UInt32)]);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(type: UInt8, day: UInt32, end: Bool)]);
  unint64_t v2 = lazy protocol witness table accessor for type [(start: UInt32, end: UInt32)] and conformance [A]();
  uint64_t v9 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in closure #3 in CalendarPeriodPrediction.toAlgorithmInputs(flow:otr:spotting:cycleFactors:swt:), (uint64_t)v8, v5, v6, MEMORY[0x263F8E628], v2, MEMORY[0x263F8E658], v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[(type: UInt8, day: UInt32, end: Bool)]]);
  lazy protocol witness table accessor for type [[(type: UInt8, day: UInt32, end: Bool)]] and conformance [A]();
  lazy protocol witness table accessor for type [(type: UInt8, day: UInt32, end: Bool)] and conformance [A]();
  uint64_t v4 = Sequence.flatMap<A>(_:)();
  outlined destroy of [A]();
  return v4;
}

uint64_t closure #1 in closure #3 in CalendarPeriodPrediction.toAlgorithmInputs(flow:otr:spotting:cycleFactors:swt:)@<X0>(int *a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  int v5 = *a1;
  int v7 = a1[1];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (type: UInt8, day: UInt32, end: Bool));
  uint64_t result = _allocateUninitializedArray<A>(_:)();
  *(unsigned char *)uint64_t v4 = a2;
  *(_DWORD *)(v4 + 4) = v5;
  *(unsigned char *)(v4 + 8) = 0;
  *(unsigned char *)(v4 + 12) = a2;
  *(_DWORD *)(v4 + 16) = v7;
  *(unsigned char *)(v4 + 20) = 1;
  _finalizeUninitializedArray<A>(_:)();
  *a3 = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type [[(type: UInt8, day: UInt32, end: Bool)]] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [[(type: UInt8, day: UInt32, end: Bool)]] and conformance [A];
  if (!lazy protocol witness table cache variable for type [[(type: UInt8, day: UInt32, end: Bool)]] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [[(type: UInt8, day: UInt32, end: Bool)]]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [[(type: UInt8, day: UInt32, end: Bool)]] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

BOOL closure #5 in CalendarPeriodPrediction.toAlgorithmInputs(flow:otr:spotting:cycleFactors:swt:)(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 4) < *(_DWORD *)(a2 + 4);
}

Swift::tuple_periods_OpaquePointer_analyses_OpaquePointer __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CalendarPeriodPrediction.analyze(flow:otr:spotting:cycleFactors:)(Swift::OpaquePointer *flow, Swift::OpaquePointer *otr, Swift::OpaquePointer *spotting, Swift::OpaquePointer *cycleFactors)
{
  uint64_t rawValue = 0;
  uint64_t v33 = 0;
  uint64_t v32 = 0;
  uint64_t v31 = 0;
  memset(__b, 0, sizeof(__b));
  uint64_t v39 = flow;
  float v38 = otr;
  uint64_t v37 = spotting;
  NgtMenstrualAlgorithmsWristTemperature v36 = cycleFactors;
  uint64_t v35 = v4;
  flowa = flow->_rawValue;
  swift_bridgeObjectRetain();
  otra = otr->_rawValue;
  swift_bridgeObjectRetain();
  spottinga = spotting->_rawValue;
  swift_bridgeObjectRetain();
  cycleFactorsa = cycleFactors->_rawValue;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt32, (Float, String)));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Float, String));
  uint64_t v27 = Dictionary.init(dictionaryLiteral:)();
  Swift::tuple_dayInputs_OpaquePointer_chronologicalOrderedCFs_OpaquePointer v5 = CalendarPeriodPrediction.toAlgorithmInputs(flow:otr:spotting:cycleFactors:swt:)((Swift::OpaquePointer)flowa, (Swift::OpaquePointer)otra, (Swift::OpaquePointer)spottinga, (Swift::OpaquePointer)cycleFactorsa, (Swift::OpaquePointer)v27);
  if (v6)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_18:
    uint64_t v8 = v14;
    int v7 = v14;
    goto LABEL_21;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t rawValue = v5.dayInputs._rawValue;
  uint64_t v33 = v5.chronologicalOrderedCFs._rawValue;
  uint64_t v18 = CalendarPeriodPrediction.predictHistoricalPeriods(dayInputs:chronologicalOrderedCFs:)((uint64_t)v5.dayInputs._rawValue, (uint64_t)v5.chronologicalOrderedCFs._rawValue);
  uint64_t v32 = v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Float, Float));
  uint64_t v31 = Dictionary.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (start: UInt32, end: UInt32));
  int v7 = (void *)MEMORY[0x25A2C0810](v18);
  if (!__OFSUB__(v7, 1))
  {
    if ((uint64_t)v7 - 1 < 0)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    Array.subscript.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ArraySlice<(start: UInt32, end: UInt32)>);
    lazy protocol witness table accessor for type ArraySlice<(start: UInt32, end: UInt32)> and conformance ArraySlice<A>();
    Collection<>.makeIterator()();
    while (1)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<ArraySlice<(start: UInt32, end: UInt32)>>);
      int v7 = (void *)IndexingIterator.next()();
      if (v29)
      {
        outlined destroy of IndexingIterator<ArraySlice<(start: UInt32, end: UInt32)>>();
        swift_bridgeObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (periodStartMean: Float, periodStartStd: Float));
        uint64_t v15 = _dictionaryUpCast<A, B, C, D>(_:)();
        swift_bridgeObjectRelease();
        outlined destroy of [A]();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        int v7 = (void *)v18;
        uint64_t v8 = (void *)v15;
        goto LABEL_21;
      }
      uint64_t v17 = v28 + 0x100000000;
      if (HIDWORD(v28) == -1) {
        goto LABEL_20;
      }
      CalendarPeriodPrediction.processDayStream(dayInputs:chronologicalOrderedCFs:predictionDay:)((uint64_t)v5.dayInputs._rawValue, v5.chronologicalOrderedCFs._rawValue, HIDWORD(v17));
      unint64_t v16 = v10;
      CalendarPeriodPrediction.extractPeriodStartMeanAndStd(_:_:_:)(v10, HIDWORD(v17), v28);
      if (v12) {
        break;
      }
      if ((v11 & 1) == 0)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : (Float, Float)]);
        Dictionary.subscript.setter();
      }
    }
    outlined destroy of IndexingIterator<ArraySlice<(start: UInt32, end: UInt32)>>();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  __break(1u);
LABEL_20:
  __break(1u);
LABEL_21:
  result.analyses._uint64_t rawValue = v8;
  result.periods._uint64_t rawValue = v7;
  return result;
}

uint64_t CalendarPeriodPrediction.predictOvu(flow:otr:spotting:cycleFactors:swt:pregnancy:)(Swift::OpaquePointer a1, Swift::OpaquePointer a2, Swift::OpaquePointer a3, Swift::OpaquePointer a4, Swift::OpaquePointer a5, void *a6)
{
  uint64_t v55 = a6;
  uint64_t v56 = partial apply for closure #1 in CalendarPeriodPrediction.predictOvu(flow:otr:spotting:cycleFactors:swt:pregnancy:);
  uint64_t v74 = 0;
  uint64_t v73 = 0;
  int v72 = 0;
  id v68 = 0;
  uint64_t rawValue = a1._rawValue;
  float v80 = a2._rawValue;
  char v79 = a3._rawValue;
  char v78 = a4._rawValue;
  float v77 = a5._rawValue;
  char v76 = a6;
  uint64_t v75 = v6;
  Swift::tuple_dayInputs_OpaquePointer_chronologicalOrderedCFs_OpaquePointer v7 = CalendarPeriodPrediction.toAlgorithmInputs(flow:otr:spotting:cycleFactors:swt:)(a1, a2, a3, a4, a5);
  uint64_t v57 = v8;
  Swift::tuple_dayInputs_OpaquePointer_chronologicalOrderedCFs_OpaquePointer v58 = v7;
  uint64_t v59 = v8;
  if (v8)
  {
    uint64_t v24 = v59;
    return v21[3];
  }
  uint64_t v50 = v58.chronologicalOrderedCFs._rawValue;
  uint64_t v51 = v58.dayInputs._rawValue;
  uint64_t v74 = v58.dayInputs._rawValue;
  uint64_t v73 = v58.chronologicalOrderedCFs._rawValue;
  uint64_t v53 = v55[3];
  uint64_t v52 = v55[4];
  __swift_project_boxed_opaque_existential_1(v55, v53);
  uint64_t result = (*(uint64_t (**)(uint64_t))(v52 + 16))(v53);
  Swift::UInt32 v54 = result - 1;
  if (!result)
  {
    __break(1u);
    goto LABEL_21;
  }
  CalendarPeriodPrediction.processDayStream(dayInputs:chronologicalOrderedCFs:predictionDay:)((uint64_t)v51, v50, v54);
  uint64_t v47 = v57;
  uint64_t v48 = v10;
  uint64_t v49 = v57;
  id v40 = v10;
  int v72 = v10;
  id v41 = objc_msgSend(v10, sel_fertilityPredictions);
  type metadata accessor for NgtMenstrualAlgorithmsPrediction();
  uint64_t v70 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v42 = v69;
  outlined init with copy of HealthDataQuery((uint64_t)v55, (uint64_t)v69);
  uint64_t v43 = v21;
  MEMORY[0x270FA5388](v21);
  uint64_t v44 = v20;
  v20[2] = v11;
  uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [NgtMenstrualAlgorithmsPrediction]);
  lazy protocol witness table accessor for type [NgtMenstrualAlgorithmsPrediction] and conformance [A]();
  uint64_t v12 = v47;
  Sequence.first(where:)();
  uint64_t v46 = v12;
  if (v12)
  {
    __break(1u);
    return v21[3];
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v69);
  outlined destroy of [A]();

  id v39 = v71;
  if (!v71)
  {
    lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
    uint64_t v22 = swift_allocError();
    *unsigned int v19 = 38;
    swift_willThrow();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v24 = v22;
    return v21[3];
  }
  id v38 = v39;
  id v37 = v39;
  id v68 = v39;
  id v66 = objc_msgSend(v39, sel_lowRange);
  uint64_t v67 = v13;
  if (_NSRange.upperBound.getter() <= 0)
  {
    lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
    uint64_t v23 = swift_allocError();
    *uint64_t v18 = 39;
    swift_willThrow();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v24 = v23;
    return v21[3];
  }
  id v63 = objc_msgSend(v37, sel_lowRange);
  uint64_t v64 = v14;
  uint64_t v35 = _NSRange.upperBound.getter();
  uint64_t v31 = v55[3];
  uint64_t v30 = v55[4];
  __swift_project_boxed_opaque_existential_1(v55, v31);
  int v15 = (*(uint64_t (**)(uint64_t))(v30 + 40))(v31);
  uint64_t v34 = &v61;
  int v61 = v15;
  unint64_t v32 = lazy protocol witness table accessor for type Int and conformance Int();
  unint64_t v33 = lazy protocol witness table accessor for type Int and conformance Int();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  SignedInteger<>.init<A>(_:)();
  uint64_t result = v35;
  uint64_t v36 = v35 + v62;
  if (!__OFADD__(v35, v62))
  {
    uint64_t v29 = v36 - 1;
    if (!__OFSUB__(v36, 1))
    {
      uint64_t v27 = &v60;
      uint64_t v60 = v29;
      unint64_t v25 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      unint64_t v26 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      unsigned int v28 = v65;

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v28;
    }
    goto LABEL_22;
  }
LABEL_21:
  __break(1u);
LABEL_22:
  __break(1u);
  return result;
}

BOOL closure #1 in CalendarPeriodPrediction.predictOvu(flow:otr:spotting:cycleFactors:swt:pregnancy:)(id *a1, void *a2)
{
  unsigned int v6 = objc_msgSend(*a1, sel_julianDayOfWindowStart);
  uint64_t v5 = a2[3];
  uint64_t v4 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v5);
  return v6 == (*(unsigned int (**)(uint64_t))(v4 + 40))(v5);
}

uint64_t CalendarPeriodPrediction.predictHistoricalPeriods(flow:otr:spotting:cycleFactors:)(void **a1, void **a2, void **a3, void **a4)
{
  v15._uint64_t rawValue = *a1;
  swift_bridgeObjectRetain();
  otr._uint64_t rawValue = *a2;
  swift_bridgeObjectRetain();
  spotting._uint64_t rawValue = *a3;
  swift_bridgeObjectRetain();
  cycleFactors._uint64_t rawValue = *a4;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt32, (Float, String)));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Float, String));
  uint64_t v16 = Dictionary.init(dictionaryLiteral:)();
  Swift::tuple_dayInputs_OpaquePointer_chronologicalOrderedCFs_OpaquePointer v4 = CalendarPeriodPrediction.toAlgorithmInputs(flow:otr:spotting:cycleFactors:swt:)(v15, otr, spotting, cycleFactors, (Swift::OpaquePointer)v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v5) {
    return v7;
  }
  uint64_t v8 = CalendarPeriodPrediction.predictHistoricalPeriods(dayInputs:chronologicalOrderedCFs:)((uint64_t)v4.dayInputs._rawValue, (uint64_t)v4.chronologicalOrderedCFs._rawValue);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t CalendarPeriodPrediction.predictHistoricalPeriods(dayInputs:chronologicalOrderedCFs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v60 = a1;
  uint64_t v51 = a2;
  unsigned int v65 = partial apply for closure #1 in CalendarPeriodPrediction.predictHistoricalPeriods(dayInputs:chronologicalOrderedCFs:);
  uint64_t v52 = partial apply for closure #2 in CalendarPeriodPrediction.predictHistoricalPeriods(dayInputs:chronologicalOrderedCFs:);
  uint64_t v53 = partial apply for thunk for @callee_guaranteed (@unowned UInt8, @unowned UInt32, @unowned Bool) -> ();
  Swift::UInt32 v54 = partial apply for closure #3 in CalendarPeriodPrediction.predictHistoricalPeriods(dayInputs:chronologicalOrderedCFs:);
  uint64_t v55 = closure #4 in CalendarPeriodPrediction.predictHistoricalPeriods(dayInputs:chronologicalOrderedCFs:);
  uint64_t v56 = (void (*)(char *, char *))closure #5 in CalendarPeriodPrediction.predictHistoricalPeriods(dayInputs:chronologicalOrderedCFs:);
  uint64_t v77 = 0;
  uint64_t v75 = 0;
  uint64_t v69 = 0;
  uint64_t v79 = a1;
  uint64_t v78 = a2;
  type metadata accessor for NgtMenstrualAlgorithmsHistoricalAnalyzer();
  Swift::tuple_dayInputs_OpaquePointer_chronologicalOrderedCFs_OpaquePointer v58 = &v76;
  swift_beginAccess();
  uint64_t v59 = *(NgtMenstrualAlgorithmsMLModelConfig **)(v57 + 24);
  uint64_t v2 = v59;
  swift_endAccess();
  NgtMenstrualAlgorithmsHistoricalAnalyzer.__allocating_init(mlConfig:)(v3, v59);
  id v61 = v4;
  uint64_t v75 = v4;
  uint64_t v74 = v60;
  id v5 = v4;
  uint64_t v62 = &v67;
  id v68 = v61;
  uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [NgtMenstrualAlgorithmsDayInput]);
  lazy protocol witness table accessor for type [NgtMenstrualAlgorithmsDayInput] and conformance [A]();
  Sequence.forEach(_:)();
  uint64_t v66 = v64;
  if (v64)
  {
    __break(1u);
    goto LABEL_10;
  }

  uint64_t v73 = v51;
  id v6 = v61;
  uint64_t v44 = &v25;
  uint64_t v45 = 15;
  MEMORY[0x270FA5388](&v25);
  unsigned char v24[2] = v61;
  uint64_t v46 = v24;
  unint64_t v47 = (v45 + 32) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v24);
  uint64_t v7 = (char *)v24 - v47;
  uint64_t v48 = v7;
  *((void *)v7 + 2) = v52;
  *((void *)v7 + 3) = v8;
  uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(type: UInt8, day: UInt32, end: Bool)]);
  lazy protocol witness table accessor for type [(type: UInt8, day: UInt32, end: Bool)] and conformance [A]();
  uint64_t v9 = v66;
  Sequence.forEach(_:)();
  uint64_t v50 = v9;
  if (v9)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  unint64_t v37 = lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
  uint64_t v10 = (void *)swift_allocError();
  id v11 = v61;
  id v40 = v10;
  *uint64_t v12 = 15;
  id v13 = v11;
  id v38 = v24;
  MEMORY[0x270FA5388](v24);
  id v39 = &v24[-4];
  v24[-2] = v14;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [NgtMenstrualAlgorithmsHistoricalCycle]);
  uint64_t v16 = v50;
  uint64_t v41 = v15;
  static PFLUtils.rethrow<A>(_:for:)();
  uint64_t v42 = v16;
  uint64_t v43 = v16;
  if (v16)
  {
LABEL_11:
    uint64_t v26 = v43;

    uint64_t v28 = v26;
    return v36;
  }

  uint64_t v71 = v72;
  lazy protocol witness table accessor for type [NgtMenstrualAlgorithmsHistoricalCycle] and conformance [A]();
  uint64_t v17 = v42;
  uint64_t v18 = Sequence.sorted(by:)();
  uint64_t v34 = v17;
  uint64_t v35 = v18;
  if (v17)
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v30 = v35;
  outlined destroy of [A]();
  uint64_t v70 = v30;
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (start: UInt32, end: UInt32));
  unint64_t v19 = lazy protocol witness table accessor for type [NgtMenstrualAlgorithmsHistoricalCycle] and conformance [A]();
  uint64_t v20 = v34;
  uint64_t v21 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(v56, 0, v41, v31, MEMORY[0x263F8E628], v19, MEMORY[0x263F8E658], v36);
  uint64_t v32 = v20;
  uint64_t v33 = v21;
  if (v20)
  {
LABEL_13:
    __break(1u);
    return v36;
  }
  uint64_t v29 = v33;
  outlined destroy of [A]();
  uint64_t v69 = v29;
  if (MEMORY[0x25A2C0810]() > 0)
  {

    return v29;
  }
  uint64_t v27 = swift_allocError();
  unsigned char *v23 = 12;
  swift_willThrow();
  swift_bridgeObjectRelease();

  uint64_t v28 = v27;
  return v36;
}

unint64_t lazy protocol witness table accessor for type ArraySlice<(start: UInt32, end: UInt32)> and conformance ArraySlice<A>()
{
  uint64_t v2 = lazy protocol witness table cache variable for type ArraySlice<(start: UInt32, end: UInt32)> and conformance ArraySlice<A>;
  if (!lazy protocol witness table cache variable for type ArraySlice<(start: UInt32, end: UInt32)> and conformance ArraySlice<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ArraySlice<(start: UInt32, end: UInt32)>);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type ArraySlice<(start: UInt32, end: UInt32)> and conformance ArraySlice<A>);
    return WitnessTable;
  }
  return v2;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of IndexingIterator<ArraySlice<(start: UInt32, end: UInt32)>>()
{
}

void __swiftcall NgtMenstrualAlgorithmsHistoricalAnalyzer.__allocating_init(mlConfig:)(NgtMenstrualAlgorithmsHistoricalAnalyzer *__return_ptr retstr, NgtMenstrualAlgorithmsMLModelConfig *mlConfig)
{
  id v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  @nonobjc NgtMenstrualAlgorithmsHistoricalAnalyzer.init(mlConfig:)(mlConfig);
}

id closure #1 in CalendarPeriodPrediction.predictHistoricalPeriods(dayInputs:chronologicalOrderedCFs:)(int a1, id a2)
{
  return objc_msgSend(a2, sel_appendDay_);
}

uint64_t closure #2 in CalendarPeriodPrediction.predictHistoricalPeriods(dayInputs:chronologicalOrderedCFs:)(uint64_t a1, unsigned int a2, char a3, void *a4)
{
  uint64_t result = NgtMenstrualAlgorithmsOvulationTestResult.init(rawValue:)(a1);
  if ((result & 0x100) == 0)
  {
    if (a3) {
      return (uint64_t)objc_msgSend(a4, sel_endPhase_onJulianDay_, result, a2);
    }
    else {
      return (uint64_t)objc_msgSend(a4, sel_beginPhase_onJulianDay_, result, a2);
    }
  }
  return result;
}

uint64_t thunk for @callee_guaranteed (@unowned UInt8, @unowned UInt32, @unowned Bool) -> ()(unsigned __int8 *a1, uint64_t (*a2)(void, void, void))
{
  return a2(*a1, *((unsigned int *)a1 + 1), a1[8] & 1);
}

void closure #3 in CalendarPeriodPrediction.predictHistoricalPeriods(dayInputs:chronologicalOrderedCFs:)(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  v8[1] = a1;
  id v9 = 0;
  v8[0] = 0;
  id v7 = objc_msgSend(a1, sel_analyzeWithError_, v8);
  id v6 = v8[0];
  id v2 = v8[0];
  id v3 = v9;
  id v9 = v6;

  if (v7)
  {
    type metadata accessor for NgtMenstrualAlgorithmsHistoricalCycle();
    *a2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    id v4 = v9;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
}

BOOL closure #4 in CalendarPeriodPrediction.predictHistoricalPeriods(dayInputs:chronologicalOrderedCFs:)(id *a1, id *a2)
{
  id v3 = *a2;
  unsigned int v4 = [*a1 (SEL)0x1F9AA09EALL];
  return v4 < [v3 (SEL)0x1F9AA09EALL];
}

id closure #5 in CalendarPeriodPrediction.predictHistoricalPeriods(dayInputs:chronologicalOrderedCFs:)@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id v3 = *a1;
  *a2 = objc_msgSend(*a1, sel_julianDayOfMenstruationStart);
  id result = objc_msgSend(v3, sel_julianDayOfMenstruationEnd);
  a2[1] = result;
  return result;
}

void CalendarPeriodPrediction.processDayStream(dayInputs:chronologicalOrderedCFs:predictionDay:)(uint64_t a1, void *a2, Swift::UInt32 a3)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  unint64_t v47 = 0;
  uint64_t v46 = 0;
  Swift::UInt32 v45 = 0;
  Swift::UInt32 v44 = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  v40[2] = 0;
  v40[3] = 0;
  uint64_t v51 = a1;
  uint64_t v50 = a2;
  Swift::UInt32 v49 = a3;
  uint64_t v48 = v3;
  swift_beginAccess();
  cached = *(NgtMenstrualAlgorithmsDayStreamProcessorConfig **)(v3 + 16);
  unsigned int v4 = cached;
  swift_endAccess();
  CalendarPeriodPrediction.getDayStreamProcessorConfigFromConfig(cached:lastJulianDay:)(v5, cached, a3);
  uint64_t v31 = v6;

  unint64_t v47 = v31;
  type metadata accessor for NgtMenstrualAlgorithmsDayStreamProcessor();
  id v7 = v31;
  swift_beginAccess();
  mlConfig = *(NgtMenstrualAlgorithmsMLModelConfig **)(v30 + 24);
  uint64_t v8 = mlConfig;
  swift_endAccess();
  NgtMenstrualAlgorithmsDayStreamProcessor.__allocating_init(config:mlConfig:)(v9, v31, mlConfig);
  id v34 = v10;
  uint64_t v46 = v10;
  if (a3 < 0x226)
  {
    __break(1u);
    __break(1u);
LABEL_28:
    __break(1u);
    return;
  }
  Swift::UInt32 v45 = a3 - 549;
  Swift::UInt32 v44 = a3;
  type metadata accessor for NgtMenstrualAlgorithmsDayInput();
  uint64_t v11 = MEMORY[0x25A2C0810](a1);
  if (__OFSUB__(v11, 1)) {
    goto LABEL_28;
  }
  if (v11 - 1 < 0)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  uint64_t v41 = specialized Collection<>.makeIterator()();
  uint64_t v42 = v13;
  uint64_t v43 = v14;
  while (1)
  {
    uint64_t v56 = specialized IndexingIterator.next()();
    char v57 = v15 & 1;
    if (v15) {
      break;
    }
    Array.subscript.getter();
    unsigned int v26 = objc_msgSend(v39, sel_julianDay);

    if (v26 < a3 - 549
      || (Array.subscript.getter(), unsigned int v25 = objc_msgSend(v37, sel_julianDay), v37, a3 < v25))
    {
      Array.subscript.getter();
      unsigned int v24 = objc_msgSend(v38, sel_julianDay);

      if (a3 < v24) {
        break;
      }
    }
    else
    {
      Array.subscript.getter();
      objc_msgSend(v34, sel_appendDay_);
    }
  }
  swift_bridgeObjectRetain();
  v40[1] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(type: UInt8, day: UInt32, end: Bool)]);
  lazy protocol witness table accessor for type [(type: UInt8, day: UInt32, end: Bool)] and conformance [A]();
  Collection<>.makeIterator()();
  while (1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[(type: UInt8, day: UInt32, end: Bool)]>);
    IndexingIterator.next()();
    if (v55 == 2 || a3 < v54) {
      break;
    }
    __int16 v35 = NgtMenstrualAlgorithmsOvulationTestResult.init(rawValue:)(v53);
    if ((v35 & 0x100) == 0)
    {
      if (v55) {
        objc_msgSend(v34, sel_endPhase_onJulianDay_, v35, v54);
      }
      else {
        objc_msgSend(v34, sel_beginPhase_onJulianDay_, v35, v54);
      }
    }
  }
  outlined destroy of [A]();
  id v52 = 0;
  v40[0] = 0;
  id v23 = objc_msgSend(v34, sel_analyzeWithMostRecentMenstrualFlowJulianDayUpdated_error_, a3, v40);
  id v22 = v40[0];
  id v16 = v40[0];
  uint64_t v17 = v52;
  id v52 = v22;

  if (v23)
  {
    id v21 = v23;
  }
  else
  {
    id v19 = v52;
    id v20 = (id)_convertNSErrorToError(_:)();

    swift_willThrow();
    id v21 = 0;
  }
  if (!v21)
  {
    lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
    swift_allocError();
    *uint64_t v18 = 2;
    swift_willThrow();
  }
}

void __swiftcall NgtMenstrualAlgorithmsDayStreamProcessor.__allocating_init(config:mlConfig:)(NgtMenstrualAlgorithmsDayStreamProcessor *__return_ptr retstr, NgtMenstrualAlgorithmsDayStreamProcessorConfig *config, NgtMenstrualAlgorithmsMLModelConfig *mlConfig)
{
  id v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  @nonobjc NgtMenstrualAlgorithmsDayStreamProcessor.init(config:mlConfig:)(config, mlConfig);
}

Swift::tuple_Float_Float_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CalendarPeriodPrediction.extractPeriodStartMeanAndStd(_:_:_:)(NgtMenstrualAlgorithmsAnalysis *a1, Swift::UInt32 a2, Swift::UInt32 a3)
{
  uint64_t v11 = [(NgtMenstrualAlgorithmsAnalysis *)a1 menstruationPredictions];
  type metadata accessor for NgtMenstrualAlgorithmsPrediction();
  static Array._unconditionallyBridgeFromObjectiveC(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [NgtMenstrualAlgorithmsPrediction]);
  lazy protocol witness table accessor for type [NgtMenstrualAlgorithmsPrediction] and conformance [A]();
  char v3 = _ArrayProtocol.filter(_:)();
  if (v12)
  {
    __break(1u);
    __break(1u);
  }
  else
  {

    lazy protocol witness table accessor for type [NgtMenstrualAlgorithmsPrediction] and conformance [A]();
    Sequence.sorted(by:)();
    outlined destroy of [A]();
    swift_bridgeObjectRetain();
    lazy protocol witness table accessor for type [NgtMenstrualAlgorithmsPrediction] and conformance [A]();
    Collection.first.getter();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    if (v13)
    {
      objc_msgSend(v13, sel_startProbabilityMean);
      Swift::Float v8 = Float.init(_:)(v6);
      objc_msgSend(v13, sel_startProbabilityStdDev);
      unint64_t v9 = LODWORD(v8) | ((unint64_t)COERCE_UNSIGNED_INT(Float.init(_:)(v7)) << 32);

      char v10 = v9;
    }
    else
    {
      char v10 = 0;
    }
    char v3 = v10;
  }
  result.value._1 = v5;
  result.value._0 = v4;
  result.Swift::Bool is_nil = v3;
  return result;
}

unint64_t type metadata accessor for NgtMenstrualAlgorithmsPrediction()
{
  uint64_t v2 = lazy cache variable for type metadata for NgtMenstrualAlgorithmsPrediction;
  if (!lazy cache variable for type metadata for NgtMenstrualAlgorithmsPrediction)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for NgtMenstrualAlgorithmsPrediction);
    return ObjCClassMetadata;
  }
  return v2;
}

BOOL partial apply for closure #1 in CalendarPeriodPrediction.predictOvu(flow:otr:spotting:cycleFactors:swt:pregnancy:)(id *a1)
{
  return closure #1 in CalendarPeriodPrediction.predictOvu(flow:otr:spotting:cycleFactors:swt:pregnancy:)(a1, *(void **)(v1 + 16));
}

unint64_t lazy protocol witness table accessor for type [NgtMenstrualAlgorithmsPrediction] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [NgtMenstrualAlgorithmsPrediction] and conformance [A];
  if (!lazy protocol witness table cache variable for type [NgtMenstrualAlgorithmsPrediction] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [NgtMenstrualAlgorithmsPrediction]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [NgtMenstrualAlgorithmsPrediction] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type [NgtMenstrualAlgorithmsPrediction] and conformance [A];
  if (!lazy protocol witness table cache variable for type [NgtMenstrualAlgorithmsPrediction] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [NgtMenstrualAlgorithmsPrediction]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [NgtMenstrualAlgorithmsPrediction] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type [NgtMenstrualAlgorithmsPrediction] and conformance [A];
  if (!lazy protocol witness table cache variable for type [NgtMenstrualAlgorithmsPrediction] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [NgtMenstrualAlgorithmsPrediction]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [NgtMenstrualAlgorithmsPrediction] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

unint64_t type metadata accessor for NgtMenstrualAlgorithmsHistoricalAnalyzer()
{
  uint64_t v2 = lazy cache variable for type metadata for NgtMenstrualAlgorithmsHistoricalAnalyzer;
  if (!lazy cache variable for type metadata for NgtMenstrualAlgorithmsHistoricalAnalyzer)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for NgtMenstrualAlgorithmsHistoricalAnalyzer);
    return ObjCClassMetadata;
  }
  return v2;
}

id partial apply for closure #1 in CalendarPeriodPrediction.predictHistoricalPeriods(dayInputs:chronologicalOrderedCFs:)(int a1)
{
  return closure #1 in CalendarPeriodPrediction.predictHistoricalPeriods(dayInputs:chronologicalOrderedCFs:)(a1, *(id *)(v1 + 16));
}

uint64_t partial apply for closure #2 in CalendarPeriodPrediction.predictHistoricalPeriods(dayInputs:chronologicalOrderedCFs:)(uint64_t a1, unsigned int a2, char a3)
{
  return closure #2 in CalendarPeriodPrediction.predictHistoricalPeriods(dayInputs:chronologicalOrderedCFs:)(a1, a2, a3 & 1, *(void **)(v3 + 16));
}

uint64_t partial apply for thunk for @callee_guaranteed (@unowned UInt8, @unowned UInt32, @unowned Bool) -> ()(unsigned __int8 *a1)
{
  return thunk for @callee_guaranteed (@unowned UInt8, @unowned UInt32, @unowned Bool) -> ()(a1, *(uint64_t (**)(void, void, void))(v1 + 16));
}

void partial apply for closure #3 in CalendarPeriodPrediction.predictHistoricalPeriods(dayInputs:chronologicalOrderedCFs:)(uint64_t *a1@<X8>)
{
  closure #3 in CalendarPeriodPrediction.predictHistoricalPeriods(dayInputs:chronologicalOrderedCFs:)(*(void **)(v1 + 16), a1);
}

unint64_t lazy protocol witness table accessor for type [NgtMenstrualAlgorithmsHistoricalCycle] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [NgtMenstrualAlgorithmsHistoricalCycle] and conformance [A];
  if (!lazy protocol witness table cache variable for type [NgtMenstrualAlgorithmsHistoricalCycle] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [NgtMenstrualAlgorithmsHistoricalCycle]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [NgtMenstrualAlgorithmsHistoricalCycle] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type [NgtMenstrualAlgorithmsHistoricalCycle] and conformance [A];
  if (!lazy protocol witness table cache variable for type [NgtMenstrualAlgorithmsHistoricalCycle] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [NgtMenstrualAlgorithmsHistoricalCycle]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [NgtMenstrualAlgorithmsHistoricalCycle] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

BOOL closure #1 in CalendarPeriodPrediction.extractPeriodStartMeanAndStd(_:_:_:)(id *a1, int a2)
{
  id v6 = *a1;
  unsigned __int8 v7 = objc_msgSend(*a1, sel_isOngoingMenstruation);
  id v2 = v6;
  BOOL v4 = (v7 & 1) == 0 && objc_msgSend(v6, sel_julianDayOfWindowStart) == a2;

  return v4;
}

BOOL closure #2 in CalendarPeriodPrediction.extractPeriodStartMeanAndStd(_:_:_:)(id *a1, id *a2)
{
  id v5 = *a2;
  [*a1 (SEL)0x1F9AA1245];
  double v6 = v2;
  [v5 (SEL)0x1F9AA1245];
  return v6 < v3;
}

void __swiftcall CalendarPeriodPrediction.getDayStreamProcessorConfigFromConfig(cached:lastJulianDay:)(NgtMenstrualAlgorithmsDayStreamProcessorConfig *__return_ptr retstr, NgtMenstrualAlgorithmsDayStreamProcessorConfig *cached, Swift::UInt32 lastJulianDay)
{
  uint64_t v43 = cached;
  Swift::UInt32 v41 = lastJulianDay;
  uint64_t v55 = 0;
  int v54 = 0;
  uint64_t v53 = 0;
  Class v52 = 0;
  int v49 = 0;
  int v46 = 0;
  uint64_t v38 = 0;
  uint64_t v33 = type metadata accessor for DateComponents();
  uint64_t v34 = *(void *)(v33 - 8);
  uint64_t v35 = v33 - 8;
  unint64_t v36 = (*(void *)(v34 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v33);
  id v37 = (char *)&v8 - v36;
  unint64_t v39 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v38);
  id v40 = (char *)&v8 - v39;
  uint64_t v55 = v4;
  int v54 = v5;
  uint64_t v53 = v3;
  type metadata accessor for NgtMenstrualAlgorithmsDayStreamProcessorConfig();
  Class isa = HKHealthStore.__allocating_init()().super.isa;
  Class v52 = isa;
  [(objc_class *)isa setTodayAsJulianDay:v41];
  uint64_t v51 = [(NgtMenstrualAlgorithmsDayStreamProcessorConfig *)v43 julianDayOfUserReportedCycleLength];
  if (v51)
  {
    uint64_t v29 = (id *)&v51;
    uint64_t v30 = v51;
    double v6 = v51;
    outlined destroy of NgtMenstrualAlgorithmsDayStreamProcessorConfig?(v29);
    unsigned int v31 = [(NSNumber *)v30 unsignedIntValue];

    uint64_t v32 = v31;
  }
  else
  {
    unsigned int v25 = 0;
    outlined destroy of NgtMenstrualAlgorithmsDayStreamProcessorConfig?((id *)&v51);
    uint64_t v32 = v25 | 0x100000000;
  }
  int v28 = v32;
  if ((v32 & 0x100000000) == 0)
  {
    int v27 = v28;
    int v46 = v28;
    int v45 = v28;
    Swift::UInt32 v44 = v41;
    min<A>(_:_:)();
    Class v26 = UInt32._bridgeToObjectiveC()().super.super.isa;
    -[objc_class setJulianDayOfUserReportedCycleLength:](isa, sel_setJulianDayOfUserReportedCycleLength_);
  }
  uint64_t v50 = [(NgtMenstrualAlgorithmsDayStreamProcessorConfig *)v43 julianDayOfUserReportedMenstruationLength];
  if (v50)
  {
    id v21 = (id *)&v50;
    id v22 = v50;
    unsigned __int8 v7 = v50;
    outlined destroy of NgtMenstrualAlgorithmsDayStreamProcessorConfig?(v21);
    unsigned int v23 = [(NSNumber *)v22 unsignedIntValue];

    uint64_t v24 = v23;
  }
  else
  {
    unsigned int v17 = 0;
    outlined destroy of NgtMenstrualAlgorithmsDayStreamProcessorConfig?((id *)&v50);
    uint64_t v24 = v17 | 0x100000000;
  }
  int v20 = v24;
  if ((v24 & 0x100000000) == 0)
  {
    int v19 = v20;
    int v49 = v20;
    int v48 = v20;
    Swift::UInt32 v47 = v41;
    min<A>(_:_:)();
    Class v18 = UInt32._bridgeToObjectiveC()().super.super.isa;
    -[objc_class setJulianDayOfUserReportedMenstruationLength:](isa, sel_setJulianDayOfUserReportedMenstruationLength_);
  }
  uint64_t v14 = [(NgtMenstrualAlgorithmsDayStreamProcessorConfig *)v43 userReportedCycleLength];
  -[objc_class setUserReportedCycleLength:](isa, sel_setUserReportedCycleLength_);

  char v15 = [(NgtMenstrualAlgorithmsDayStreamProcessorConfig *)v43 userReportedMenstruationLength];
  -[objc_class setUserReportedMenstruationLength:](isa, sel_setUserReportedMenstruationLength_);

  id v16 = [(NgtMenstrualAlgorithmsDayStreamProcessorConfig *)v43 birthDateComponents];
  if (v16)
  {
    uint64_t v13 = v16;
    uint64_t v12 = v16;
    static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v40, v37, v33);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v40, 0, 1, v33);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v34 + 56))(v40, 1, 1, v33);
  }
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v40, 1, v33) == 1)
  {
    Class v11 = 0;
  }
  else
  {
    Class v10 = DateComponents._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v34 + 8))(v40, v33);
    Class v11 = v10;
  }
  Class v9 = v11;
  -[objc_class setBirthDateComponents:](isa, sel_setBirthDateComponents_);
}

unint64_t type metadata accessor for NgtMenstrualAlgorithmsDayStreamProcessor()
{
  uint64_t v2 = lazy cache variable for type metadata for NgtMenstrualAlgorithmsDayStreamProcessor;
  if (!lazy cache variable for type metadata for NgtMenstrualAlgorithmsDayStreamProcessor)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for NgtMenstrualAlgorithmsDayStreamProcessor);
    return ObjCClassMetadata;
  }
  return v2;
}

BOOL partial apply for closure #1 in CalendarPeriodPrediction.extractPeriodStartMeanAndStd(_:_:_:)(id *a1)
{
  return closure #1 in CalendarPeriodPrediction.extractPeriodStartMeanAndStd(_:_:_:)(a1, *(_DWORD *)(v1 + 16));
}

uint64_t CalendarPeriodPrediction.deinit()
{
  return v2;
}

uint64_t CalendarPeriodPrediction.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CalendarPeriodPrediction()
{
  return self;
}

id @nonobjc NgtMenstrualAlgorithmsHistoricalAnalyzer.init(mlConfig:)(void *a1)
{
  id v4 = objc_msgSend(v1, sel_initWithMlConfig_);

  return v4;
}

id @nonobjc NgtMenstrualAlgorithmsDayStreamProcessor.init(config:mlConfig:)(void *a1, void *a2)
{
  id v6 = objc_msgSend(v2, sel_initWithConfig_mlConfig_);

  return v6;
}

unint64_t type metadata accessor for NgtMenstrualAlgorithmsHistoricalCycle()
{
  uint64_t v2 = lazy cache variable for type metadata for NgtMenstrualAlgorithmsHistoricalCycle;
  if (!lazy cache variable for type metadata for NgtMenstrualAlgorithmsHistoricalCycle)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for NgtMenstrualAlgorithmsHistoricalCycle);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t partial apply for closure #1 in closure #3 in CalendarPeriodPrediction.toAlgorithmInputs(flow:otr:spotting:cycleFactors:swt:)@<X0>(int *a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in closure #3 in CalendarPeriodPrediction.toAlgorithmInputs(flow:otr:spotting:cycleFactors:swt:)(a1, *(unsigned char *)(v2 + 16), a2);
}

unint64_t type metadata accessor for NgtMenstrualAlgorithmsWristTemperature()
{
  uint64_t v2 = lazy cache variable for type metadata for NgtMenstrualAlgorithmsWristTemperature;
  if (!lazy cache variable for type metadata for NgtMenstrualAlgorithmsWristTemperature)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for NgtMenstrualAlgorithmsWristTemperature);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t Collection<>.diff()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v28 = a1;
  uint64_t v29 = a2;
  uint64_t v30 = a3;
  uint64_t v26 = 0;
  unsigned int v31 = partial apply for implicit closure #1 in Collection<>.diff();
  uint64_t v32 = MEMORY[0x263F8DC68];
  uint64_t v38 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Sequence.Element, @in_guaranteed A.Sequence.Element) -> (@out A.Sequence.Element);
  uint64_t v46 = 0;
  uint64_t v51 = a1;
  uint64_t v19 = *(void *)(a1 - 8);
  uint64_t v17 = a1 - 8;
  unint64_t v14 = (*(void *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v3 = (char *)&v13 - v14;
  uint64_t v15 = MEMORY[0x263F8D7F0];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v22 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v23 = AssociatedTypeWitness - 8;
  unint64_t v16 = (*(void *)(v22 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v29);
  uint64_t v24 = (char *)&v13 - v16;
  uint64_t v21 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t v27 = *(void *)(v29 + 8);
  uint64_t v47 = AssociatedTypeWitness;
  uint64_t v48 = v28;
  uint64_t v49 = v21;
  uint64_t v50 = v27;
  uint64_t v35 = type metadata accessor for Zip2Sequence();
  unint64_t v18 = (*(void *)(*(void *)(v35 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v35);
  uint64_t v20 = (uint64_t)&v13 - v18;
  uint64_t v46 = v4;
  (*(void (**)(char *))(v19 + 16))(v3);
  default argument 0 of Collection.dropFirst(_:)();
  Collection.dropFirst(_:)();
  zip<A, B>(_:_:)();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v24, AssociatedTypeWitness);
  uint64_t v36 = swift_getAssociatedTypeWitness();
  int v5 = (void *)swift_allocObject();
  uint64_t v6 = v28;
  uint64_t v7 = v29;
  uint64_t v8 = v30;
  Class v9 = v31;
  uint64_t v10 = v36;
  uint64_t v33 = v5;
  v5[2] = v28;
  void v5[3] = v7;
  void v5[4] = v8;
  void v5[5] = v10;
  uint64_t v34 = &v40;
  uint64_t v41 = v6;
  uint64_t v42 = v7;
  uint64_t v43 = v8;
  Swift::UInt32 v44 = v9;
  int v45 = v5;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v39 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))v38, (uint64_t)v34, v35, v36, MEMORY[0x263F8E628], WitnessTable, MEMORY[0x263F8E658], v37);
  uint64_t v13 = v39;
  swift_release();
  outlined destroy of Zip2Sequence<A.SubSequence, A>(v20, AssociatedTypeWitness, v28, v35);
  return v13;
}

uint64_t default argument 0 of Collection.dropFirst(_:)()
{
  return 1;
}

uint64_t implicit closure #1 in Collection<>.diff()()
{
  return dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
}

uint64_t sub_257C96594()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in Collection<>.diff()()
{
  return implicit closure #1 in Collection<>.diff()();
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed A.Sequence.Element, @in_guaranteed A.Sequence.Element) -> (@out A.Sequence.Element)(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return a2(a1, a1 + *(int *)(TupleTypeMetadata2 + 48));
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Sequence.Element, @in_guaranteed A.Sequence.Element) -> (@out A.Sequence.Element)(uint64_t a1)
{
  return thunk for @escaping @callee_guaranteed (@in_guaranteed A.Sequence.Element, @in_guaranteed A.Sequence.Element) -> (@out A.Sequence.Element)(a1, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 40));
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v34 = a1;
  uint64_t v35 = a2;
  uint64_t v82 = a3;
  uint64_t v73 = a4;
  uint64_t v36 = a5;
  uint64_t v81 = a6;
  uint64_t v38 = a8;
  uint64_t v39 = "Fatal error";
  char v40 = "Index out of bounds";
  uint64_t v41 = "Swift/Collection.swift";
  uint64_t v42 = "Range requires lowerBound <= upperBound";
  uint64_t v43 = "Swift/Range.swift";
  Swift::UInt32 v44 = "Index out of range";
  int v45 = "Unexpectedly found nil while unwrapping an Optional value";
  uint64_t v46 = "Swift/Sequence.swift";
  uint64_t v89 = a3;
  uint64_t v88 = a4;
  uint64_t v87 = a5;
  uint64_t v47 = *(void *)(a5 - 8);
  uint64_t v48 = a5 - 8;
  unint64_t v49 = (*(void *)(v47 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](a1);
  uint64_t v50 = (char *)v21 - v49;
  unint64_t v51 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)v21 - v49);
  Class v52 = (char *)v21 - v51;
  unint64_t v53 = (*(void *)(*(void *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)v21 - v51);
  int v54 = (char *)v21 - v53;
  unint64_t v55 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)v21 - v53);
  uint64_t v56 = (char *)v21 - v55;
  uint64_t v57 = MEMORY[0x263F8D3B8];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v74 = 0;
  uint64_t v58 = type metadata accessor for Optional();
  unint64_t v59 = (*(void *)(*(void *)(v58 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v11 = MEMORY[0x270FA5388](v74);
  uint64_t v60 = (char *)v21 - v59;
  unint64_t v61 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v63 = (uint64_t)v21 - v61;
  uint64_t v64 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v65 = AssociatedTypeWitness - 8;
  unint64_t v66 = (*(void *)(v64 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v14 = MEMORY[0x270FA5388](v13);
  char v67 = (char *)v21 - v66;
  uint64_t v77 = *(void *)(v15 - 8);
  uint64_t v78 = v15 - 8;
  unint64_t v68 = (*(void *)(v77 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v14);
  char v76 = (char *)v21 - v68;
  uint64_t v69 = swift_getAssociatedTypeWitness();
  uint64_t v70 = *(void *)(v69 - 8);
  uint64_t v71 = v69 - 8;
  unint64_t v72 = (*(void *)(v70 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v82);
  float v80 = (char *)v21 - v72;
  Swift::Int v83 = dispatch thunk of Sequence.underestimatedCount.getter();
  uint64_t v86 = Array.init()();
  uint64_t v75 = type metadata accessor for ContiguousArray();
  ContiguousArray.reserveCapacity(_:)(v83);
  (*(void (**)(char *, uint64_t, uint64_t))(v77 + 16))(v76, v79, v82);
  dispatch thunk of Sequence.makeIterator()();
  uint64_t result = v83;
  if (v83 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_32:
    __break(1u);
    return result;
  }
  uint64_t v32 = 0;
  for (uint64_t i = v37; ; uint64_t i = v22)
  {
    uint64_t v30 = i;
    uint64_t v31 = v32;
    if (v32 == v83) {
      goto LABEL_16;
    }
    if (v31 < 0 || v31 >= v83) {
      goto LABEL_15;
    }
    uint64_t v84 = v31;
    if (v83 < 0) {
      goto LABEL_14;
    }
    if (v31 >= v83)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_14:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_15:
      _fatalErrorMessage(_:_:file:line:flags:)();
      __break(1u);
LABEL_16:
      uint64_t v84 = 0;
      char v85 = 1;
      uint64_t v28 = v31;
      goto LABEL_17;
    }
    uint64_t v29 = v31 + 1;
    if (__OFADD__(v31, 1)) {
      goto LABEL_32;
    }
    char v85 = 0;
    uint64_t v28 = v29;
LABEL_17:
    uint64_t v27 = v28;
    if (v85) {
      break;
    }
    swift_getAssociatedConformanceWitness();
    dispatch thunk of IteratorProtocol.next()();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v60, 1, AssociatedTypeWitness) == 1)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    uint64_t v20 = v30;
    v34(v60, v50);
    uint64_t v22 = v20;
    if (v20)
    {
      (*(void (**)(char *, uint64_t))(v70 + 8))(v80, v69);
      outlined destroy of ContiguousArray<A1>();
      (*(void (**)(uint64_t, char *, uint64_t))(v47 + 32))(v38, v50, v36);
      (*(void (**)(char *, uint64_t))(v64 + 8))(v60, AssociatedTypeWitness);
      return v21[1];
    }
    (*(void (**)(char *, uint64_t))(v64 + 8))(v60, AssociatedTypeWitness);
    ContiguousArray.append(_:)();
    uint64_t result = v22;
    uint64_t v32 = v27;
  }
  for (uint64_t j = v30; ; uint64_t j = v23)
  {
    uint64_t v25 = j;
    swift_getAssociatedConformanceWitness();
    dispatch thunk of IteratorProtocol.next()();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48))(v63, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(char *, uint64_t))(v70 + 8))(v80, v69);
      outlined destroy of A.Element?(v63, AssociatedTypeWitness);
      uint64_t v24 = v86;
      swift_retain();
      swift_release();
      return v24;
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v64 + 32))(v67, v63, AssociatedTypeWitness);
    uint64_t v18 = v25;
    v34(v67, v52);
    uint64_t v23 = v18;
    if (v18) {
      break;
    }
    (*(void (**)(char *, uint64_t))(v64 + 8))(v67, AssociatedTypeWitness);
    ContiguousArray.append(_:)();
  }
  (*(void (**)(char *, uint64_t))(v64 + 8))(v67, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v70 + 8))(v80, v69);
  outlined destroy of ContiguousArray<A1>();
  (*(void (**)(uint64_t, char *, uint64_t))(v47 + 32))(v38, v52, v36);
  return v21[1];
}

uint64_t outlined destroy of Zip2Sequence<A.SubSequence, A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1;
}

uint64_t Collection<>.cumSum()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v15 = a2;
  uint64_t v10 = a3;
  uint64_t v12 = (void (*)(char *, char *))partial apply for closure #1 in Collection<>.cumSum();
  uint64_t v24 = 0;
  uint64_t v23 = 0;
  uint64_t v25 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = AssociatedTypeWitness - 8;
  unint64_t v9 = (*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v11 = (char *)&v5 - v9;
  uint64_t v24 = (char *)&v5 - v9;
  uint64_t v23 = v3;
  dispatch thunk of static AdditiveArithmetic.zero.getter();
  uint64_t v19 = v13;
  uint64_t v20 = v15;
  uint64_t v21 = v10;
  uint64_t v22 = v11;
  uint64_t v17 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(v12, (uint64_t)v18, v13, AssociatedTypeWitness, MEMORY[0x263F8E628], v15, MEMORY[0x263F8E658], v16);
  uint64_t v6 = v17;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v11, AssociatedTypeWitness);
  return v6;
}

uint64_t closure #1 in Collection<>.cumSum()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v15 = a5;
  id v8[2] = a1;
  uint64_t v10 = a2;
  v8[1] = a4;
  uint64_t v17 = 0;
  uint64_t v16 = 0;
  uint64_t v18 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v12 = AssociatedTypeWitness - 8;
  unint64_t v9 = (*(void *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v5 = MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)v8 - v9;
  uint64_t v17 = v6;
  uint64_t v16 = v5;
  dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v10, AssociatedTypeWitness);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(v15, v13, AssociatedTypeWitness);
}

uint64_t partial apply for closure #1 in Collection<>.cumSum()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in Collection<>.cumSum()(a1, v2[5], v2[2], v2[4], a2);
}

uint64_t default argument 1 of FloatingPoint.isNearlyEqual(to:absoluteTolerance:)()
{
  return dispatch thunk of static FloatingPoint.ulpOfOne.getter();
}

uint64_t FloatingPoint.isNearlyEqual(to:absoluteTolerance:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = a1;
  uint64_t v19 = a2;
  uint64_t v21 = a3;
  uint64_t v14 = a4;
  uint64_t v28 = 0;
  uint64_t v27 = 0;
  uint64_t v26 = 0;
  uint64_t v29 = a3;
  uint64_t v16 = *(void *)(a3 - 8);
  uint64_t v17 = a3 - 8;
  uint64_t v12 = *(void *)(v16 + 64);
  unint64_t v11 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v18 = (char *)&v10 - v11;
  unint64_t v13 = v11;
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  uint64_t v24 = (char *)&v10 - v13;
  uint64_t v28 = v7;
  uint64_t v27 = v19;
  uint64_t v26 = v6;
  uint64_t v15 = *(void *)(v8 + 16);
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  uint64_t v20 = *(void *)(*(void *)(v14 + 24) + 8);
  abs<A>(_:)();
  uint64_t v23 = *(void (**)(char *, uint64_t))(v16 + 8);
  uint64_t v22 = v16 + 8;
  v23(v18, v21);
  int v25 = dispatch thunk of static Comparable.<= infix(_:_:)();
  v23(v24, v21);
  return v25 & 1;
}

uint64_t static MetricsUtils.bucketize(value:buckets:)(uint64_t a1, float a2)
{
  uint64_t v17 = 0;
  float v19 = a2;
  uint64_t v18 = a1;
  uint64_t v16 = 0;
  uint64_t result = MEMORY[0x25A2C0820]();
  if (__OFADD__(result, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v17 = specialized Array.init(repeating:count:)();
    float v12 = a2;
    uint64_t result = static HIDPFLUtils.findClosest<A>(_:lessOrEqualThan:)(a1, (uint64_t)&v12, MEMORY[0x263F8D5C8], MEMORY[0x263F8D5F0], (uint64_t)v13);
    if (v15)
    {
      uint64_t v8 = 0;
      char v9 = 1;
    }
    else
    {
      uint64_t v8 = v14;
      char v9 = 0;
    }
    if ((v9 & 1) != 0 || (!__OFADD__(v8, 1) ? (char v4 = 0) : (char v4 = 1), (v4 & 1) == 0))
    {
      uint64_t v5 = (void (*)(void))specialized Array.subscript.modify();
      *uint64_t v6 = 1;
      v5();
      uint64_t v7 = v17;
      swift_bridgeObjectRetain();
      outlined destroy of [A]();
      return v7;
    }
  }
  __break(1u);
  return result;
}

uint64_t static AUC.binaryClassificationCurve(outputs:labels:)(uint64_t a1, uint64_t a2)
{
  uint64_t v58 = a2;
  uint64_t v70 = closure #1 in static AUC.binaryClassificationCurve(outputs:labels:);
  unint64_t v59 = closure #2 in static AUC.binaryClassificationCurve(outputs:labels:);
  uint64_t v60 = closure #3 in static AUC.binaryClassificationCurve(outputs:labels:);
  unint64_t v61 = (void (*)(char *, char *))partial apply for closure #4 in static AUC.binaryClassificationCurve(outputs:labels:);
  uint64_t v62 = closure #5 in static AUC.binaryClassificationCurve(outputs:labels:);
  uint64_t v63 = (void (*)(char *, char *))closure #3 in static AUC.binaryClassificationCurve(outputs:labels:);
  uint64_t v64 = partial apply for closure #4 in static AUC.binaryClassificationCurve(outputs:labels:);
  uint64_t v65 = (void (*)(char *, char *))partial apply for closure #8 in static AUC.binaryClassificationCurve(outputs:labels:);
  uint64_t v68 = 0;
  uint64_t v90 = 0;
  uint64_t v88 = 0;
  uint64_t v87 = 0;
  uint64_t v80 = 0;
  uint64_t v78 = 0;
  uint64_t v74 = 0;
  v99[2] = a1;
  v99[1] = a2;
  uint64_t v98 = a1;
  uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
  unint64_t v67 = lazy protocol witness table accessor for type [Float] and conformance [A]();
  MEMORY[0x25A2C0660](v99, v66);
  uint64_t v97 = v99[0];
  uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EnumeratedSequence<[Float]>);
  unint64_t v71 = lazy protocol witness table accessor for type EnumeratedSequence<[Float]> and conformance EnumeratedSequence<A>();
  uint64_t v72 = 0;
  uint64_t v73 = Sequence.sorted(by:)();
  uint64_t v52 = v73;
  outlined destroy of [A]();
  uint64_t v96 = v73;
  uint64_t v95 = v73;
  uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(offset: Int, element: Float)]);
  unint64_t v55 = lazy protocol witness table accessor for type [(offset: Int, element: Float)] and conformance [A]();
  uint64_t v56 = 0;
  uint64_t v57 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))closure #2 in static AUC.binaryClassificationCurve(outputs:labels:), 0, v53, MEMORY[0x263F8D5C8], MEMORY[0x263F8E628], v55, MEMORY[0x263F8E658], v54);
  uint64_t v49 = v57;
  uint64_t v94 = v57;
  uint64_t v93 = v73;
  uint64_t v50 = 0;
  uint64_t v51 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))closure #3 in static AUC.binaryClassificationCurve(outputs:labels:), 0, v53, MEMORY[0x263F8D6C8], MEMORY[0x263F8E628], v55, MEMORY[0x263F8E658], v54);
  uint64_t v42 = v51;
  uint64_t v92 = v51;
  uint64_t v91 = v51;
  swift_bridgeObjectRetain();
  uint64_t v43 = &v18;
  MEMORY[0x270FA5388](&v18);
  Swift::UInt32 v44 = v17;
  v17[2] = v2;
  uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
  unint64_t v46 = lazy protocol witness table accessor for type [Int] and conformance [A]();
  uint64_t v3 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(v61, (uint64_t)v44, v45, MEMORY[0x263F8D5C8], MEMORY[0x263F8E628], v46, MEMORY[0x263F8E658], v54);
  uint64_t v47 = 0;
  uint64_t v48 = v3;
  uint64_t v37 = v3;
  swift_bridgeObjectRelease();
  uint64_t v90 = v37;
  uint64_t v89 = v49;
  unint64_t v38 = lazy protocol witness table accessor for type [Float] and conformance [A]();
  uint64_t v39 = Collection<>.diff()(v66, v38, MEMORY[0x263F8D608]);
  uint64_t v88 = v39;
  uint64_t v85 = v39;
  MEMORY[0x25A2C0660](&v86, v66, v67);
  uint64_t v84 = v86;
  uint64_t v4 = Sequence.filter(_:)();
  uint64_t v40 = 0;
  uint64_t v41 = v4;
  uint64_t v83 = v4;
  uint64_t v5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(v63, 0, v53, MEMORY[0x263F8D6C8], MEMORY[0x263F8E628], v55, MEMORY[0x263F8E658], v54);
  uint64_t v35 = 0;
  uint64_t v36 = v5;
  uint64_t v33 = v5;
  outlined destroy of [A]();
  uint64_t v87 = v33;
  uint64_t result = MEMORY[0x25A2C0820](v37);
  uint64_t v34 = result - 1;
  if (!__OFSUB__(result, 1))
  {
    uint64_t v8 = v35;
    uint64_t v82 = v34;
    specialized Array.append(_:)();
    uint64_t v81 = v37;
    uint64_t v29 = Collection<>.cumSum()(v66, v38, MEMORY[0x263F8D608]);
    uint64_t v80 = v29;
    uint64_t v28 = v87;
    swift_bridgeObjectRetain();
    uint64_t v79 = v28;
    swift_bridgeObjectRetain();
    uint64_t v30 = v17;
    char v9 = (void (*)(char *, char *))MEMORY[0x270FA5388](v64);
    v17[-2] = v10;
    uint64_t result = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(v9, (uint64_t)&v17[-4], v11, MEMORY[0x263F8D5C8], MEMORY[0x263F8E628], v12, MEMORY[0x263F8E658], v13);
    uint64_t v31 = v8;
    uint64_t v32 = result;
    if (!v8)
    {
      uint64_t v23 = v32;
      swift_bridgeObjectRelease();
      outlined destroy of [A]();
      uint64_t v78 = v23;
      uint64_t v21 = v87;
      swift_bridgeObjectRetain();
      uint64_t v22 = &v76;
      uint64_t v76 = v21;
      unint64_t v14 = lazy protocol witness table accessor for type [Int] and conformance [A]();
      MEMORY[0x25A2C0660](&v77, v45, v14);
      outlined destroy of [A]();
      uint64_t v75 = v77;
      swift_bridgeObjectRetain();
      uint64_t v24 = v17;
      MEMORY[0x270FA5388](v17);
      int v25 = &v17[-4];
      v17[-2] = v15;
      uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EnumeratedSequence<[Int]>);
      unint64_t v16 = lazy protocol witness table accessor for type EnumeratedSequence<[Int]> and conformance EnumeratedSequence<A>();
      uint64_t v27 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(v65, (uint64_t)v25, v26, MEMORY[0x263F8D5C8], MEMORY[0x263F8E628], v16, MEMORY[0x263F8E658], v54);
      uint64_t v19 = v27;
      swift_bridgeObjectRelease();
      outlined destroy of [A]();
      uint64_t v74 = v19;
      uint64_t v18 = &v87;
      uint64_t v20 = v87;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      outlined destroy of [A]();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v23;
    }
    __break(1u);
    __break(1u);
  }
  __break(1u);
  return result;
}

BOOL closure #1 in static AUC.binaryClassificationCurve(outputs:labels:)(uint64_t a1, uint64_t a2)
{
  return *(float *)(a2 + 8) < *(float *)(a1 + 8);
}

unint64_t lazy protocol witness table accessor for type EnumeratedSequence<[Float]> and conformance EnumeratedSequence<A>()
{
  uint64_t v2 = lazy protocol witness table cache variable for type EnumeratedSequence<[Float]> and conformance EnumeratedSequence<A>;
  if (!lazy protocol witness table cache variable for type EnumeratedSequence<[Float]> and conformance EnumeratedSequence<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for EnumeratedSequence<[Float]>);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type EnumeratedSequence<[Float]> and conformance EnumeratedSequence<A>);
    return WitnessTable;
  }
  return v2;
}

float closure #2 in static AUC.binaryClassificationCurve(outputs:labels:)@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  float result = *(float *)(a1 + 8);
  *a2 = result;
  return result;
}

float closure #3 in static AUC.binaryClassificationCurve(outputs:labels:)@<S0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  float result = *(float *)(a1 + 8);
  *a2 = *(void *)a1;
  return result;
}

uint64_t closure #4 in static AUC.binaryClassificationCurve(outputs:labels:)@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = specialized Array.subscript.getter();
  *a1 = v2;
  return result;
}

uint64_t partial apply for closure #4 in static AUC.binaryClassificationCurve(outputs:labels:)@<X0>(_DWORD *a1@<X8>)
{
  return closure #4 in static AUC.binaryClassificationCurve(outputs:labels:)(a1);
}

unint64_t lazy protocol witness table accessor for type [Int] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [Int] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Int] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Int]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [Int] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type [Int] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Int] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Int]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [Int] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

BOOL closure #5 in static AUC.binaryClassificationCurve(outputs:labels:)()
{
  abs<A>(_:)();
  static Float.ulpOfOne.getter();
  return v0 < v2;
}

float closure #8 in static AUC.binaryClassificationCurve(outputs:labels:)@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  float v5 = (float)*(uint64_t *)(a1 + 8) + 1.0;
  specialized Array.subscript.getter();
  float result = v5 - v2;
  *a2 = result;
  return result;
}

float partial apply for closure #8 in static AUC.binaryClassificationCurve(outputs:labels:)@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  return closure #8 in static AUC.binaryClassificationCurve(outputs:labels:)(a1, a2);
}

unint64_t lazy protocol witness table accessor for type EnumeratedSequence<[Int]> and conformance EnumeratedSequence<A>()
{
  uint64_t v2 = lazy protocol witness table cache variable for type EnumeratedSequence<[Int]> and conformance EnumeratedSequence<A>;
  if (!lazy protocol witness table cache variable for type EnumeratedSequence<[Int]> and conformance EnumeratedSequence<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for EnumeratedSequence<[Int]>);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type EnumeratedSequence<[Int]> and conformance EnumeratedSequence<A>);
    return WitnessTable;
  }
  return v2;
}

uint64_t static AUC.rocCurve(outputs:labels:)(uint64_t a1, uint64_t a2)
{
  id v119 = partial apply for closure #1 in static AUC.rocCurve(outputs:labels:);
  id v120 = (void (*)(char *, char *))closure #3 in static AUC.binaryClassificationCurve(outputs:labels:);
  uint64_t v121 = (void (*)(char *, char *))partial apply for closure #3 in static AUC.rocCurve(outputs:labels:);
  id v122 = partial apply for closure #3 in static AUC.rocCurve(outputs:labels:);
  id v123 = partial apply for closure #5 in static AUC.rocCurve(outputs:labels:);
  Class v124 = (void (*)(char *, char *))partial apply for closure #7 in static AUC.rocCurve(outputs:labels:);
  uint64_t v125 = (void (*)(char *, char *))closure #6 in static AUC.rocCurve(outputs:labels:);
  id v126 = (void (*)(char *, char *))partial apply for closure #9 in static AUC.rocCurve(outputs:labels:);
  uint64_t v127 = (void (*)(char *, char *))closure #6 in static AUC.rocCurve(outputs:labels:);
  char v128 = "Fatal error";
  char v129 = "Unexpectedly found nil while unwrapping an Optional value";
  id v130 = "NightingaleTraining/MetricsUtils.swift";
  uint64_t v160 = 0;
  uint64_t v159 = 0;
  uint64_t v131 = 0;
  v151[0] = 0;
  uint64_t v148 = 0;
  uint64_t v137 = 0;
  v166[2] = a1;
  v166[1] = a2;
  v166[0] = static AUC.binaryClassificationCurve(outputs:labels:)(a1, a2);
  uint64_t v165 = v2;
  uint64_t v164 = v3;
  uint64_t v132 = v166[0];
  swift_bridgeObjectRetain();
  uint64_t v133 = MEMORY[0x25A2C0820](v166[0]);
  swift_bridgeObjectRelease();
  if (v133 <= 2)
  {
    uint64_t v77 = v131;
  }
  else
  {
    uint64_t v4 = v131;
    uint64_t v95 = v166[0];
    swift_bridgeObjectRetain();
    uint64_t v96 = &v150;
    uint64_t v150 = v166[0];
    uint64_t v111 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
    unint64_t v103 = lazy protocol witness table accessor for type [Float] and conformance [A]();
    uint64_t v104 = MEMORY[0x263F8D608];
    uint64_t v97 = Collection<>.diff()(v111, v103, MEMORY[0x263F8D608]);
    outlined destroy of [A]();
    uint64_t v98 = &v149;
    uint64_t v149 = v97;
    uint64_t v99 = Collection<>.diff()(v111, v103, v104);
    outlined destroy of [A]();
    uint64_t v107 = v151;
    v151[0] = v99;
    uint64_t v100 = v165;
    swift_bridgeObjectRetain();
    unint64_t v101 = &v147;
    uint64_t v147 = v100;
    uint64_t v102 = Collection<>.diff()(v111, v103, v104);
    outlined destroy of [A]();
    char v105 = &v146;
    uint64_t v146 = v102;
    uint64_t v106 = Collection<>.diff()(v111, v103, v104);
    outlined destroy of [A]();
    uint64_t v113 = &v148;
    uint64_t v148 = v106;
    float v108 = 1.0;
    float v145 = 1.0;
    specialized Array.append(_:)();
    float v144 = 1.0;
    uint64_t v109 = 0;
    Array.insert(_:at:)();
    float v143 = 1.0;
    specialized Array.append(_:)();
    float v142 = 1.0;
    Array.insert(_:at:)();
    uint64_t v110 = v151[0];
    swift_bridgeObjectRetain();
    uint64_t v112 = &v140;
    uint64_t v140 = v110;
    unint64_t v5 = lazy protocol witness table accessor for type [Float] and conformance [A]();
    MEMORY[0x25A2C0660](&v141, v111, v5);
    outlined destroy of [A]();
    uint64_t v139 = v141;
    int v114 = v36;
    MEMORY[0x270FA5388](v36);
    id v115 = v35;
    v35[2] = v6;
    uint64_t v116 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EnumeratedSequence<[Float]>);
    lazy protocol witness table accessor for type EnumeratedSequence<[Float]> and conformance EnumeratedSequence<A>();
    uint64_t v7 = Sequence.filter(_:)();
    uint64_t v117 = v4;
    uint64_t v118 = v7;
    uint64_t v138 = v7;
    uint64_t v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(offset: Int, element: Float)]);
    unint64_t v8 = lazy protocol witness table accessor for type [(offset: Int, element: Float)] and conformance [A]();
    uint64_t v9 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(v120, 0, v91, MEMORY[0x263F8D6C8], MEMORY[0x263F8E628], v8, MEMORY[0x263F8E658], v92);
    uint64_t v93 = 0;
    uint64_t v94 = v9;
    uint64_t v84 = v9;
    outlined destroy of [A]();
    uint64_t v137 = v84;
    uint64_t v136 = v84;
    uint64_t v85 = v35;
    MEMORY[0x270FA5388](v35);
    uint64_t v86 = v32;
    uint64_t v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
    unint64_t v88 = lazy protocol witness table accessor for type [Int] and conformance [A]();
    uint64_t v10 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(v121, (uint64_t)v86, v87, MEMORY[0x263F8D5C8], MEMORY[0x263F8E628], v88, MEMORY[0x263F8E658], v92);
    uint64_t v89 = 0;
    uint64_t v90 = v10;
    v166[0] = v10;
    swift_bridgeObjectRelease();
    uint64_t v135 = v84;
    uint64_t v81 = v35;
    uint64_t v11 = (void (*)(char *, char *))MEMORY[0x270FA5388](v122);
    uint64_t v15 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(v11, (uint64_t)v32, v12, MEMORY[0x263F8D5C8], MEMORY[0x263F8E628], v13, MEMORY[0x263F8E658], v14);
    uint64_t v82 = 0;
    uint64_t v83 = v15;
    uint64_t v165 = v15;
    swift_bridgeObjectRelease();
    uint64_t v134 = v84;
    uint64_t v78 = v35;
    unint64_t v16 = (void (*)(char *, char *))MEMORY[0x270FA5388](v123);
    uint64_t v34 = &v164;
    uint64_t v20 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(v16, (uint64_t)v32, v17, MEMORY[0x263F8D6C8], MEMORY[0x263F8E628], v18, MEMORY[0x263F8E658], v19);
    uint64_t v79 = 0;
    uint64_t v80 = v20;
    uint64_t v164 = v20;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of [A]();
    outlined destroy of [A]();
    uint64_t v77 = v79;
  }
  uint64_t v66 = v77;
  unint64_t v67 = &v163;
  int v68 = 0;
  int v163 = 0;
  uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
  uint64_t v69 = 0;
  Array.insert(_:at:)();
  int v162 = v68;
  Array.insert(_:at:)();
  uint64_t v70 = &v161;
  uint64_t v161 = 0x7FFFFFFFFFFFFFFFLL;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
  Array.insert(_:at:)();
  uint64_t v160 = specialized Array.init()();
  uint64_t v159 = specialized Array.init()();
  uint64_t v74 = v166[0];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v73 = &v156;
  uint64_t v156 = v74;
  unint64_t v72 = lazy protocol witness table accessor for type [Float] and conformance [A]();
  BidirectionalCollection.last.getter();
  outlined destroy of [A]();
  float v75 = v157;
  int v76 = v158;
  swift_bridgeObjectRelease();
  if (v76)
  {
    v32[0] = 2;
    uint64_t v33 = 98;
    LODWORD(v34) = 0;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    float v65 = v75;
  }
  if (v65 <= 0.0)
  {
    uint64_t v21 = v66;
    uint64_t v62 = v166[0];
    swift_bridgeObjectRetain();
    v151[1] = v62;
    unint64_t v22 = lazy protocol witness table accessor for type [Float] and conformance [A]();
    uint64_t result = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(v125, 0, v71, MEMORY[0x263F8D5C8], MEMORY[0x263F8E628], v22, MEMORY[0x263F8E658], v92);
    uint64_t v63 = v21;
    uint64_t v64 = result;
    if (!v21)
    {
      uint64_t v60 = v64;
      outlined destroy of [A]();
      uint64_t v160 = v60;
      swift_bridgeObjectRelease();
      uint64_t v61 = 0;
      goto LABEL_12;
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v24 = v66;
  unint64_t v55 = v166;
  uint64_t v54 = v166[0];
  swift_bridgeObjectRetain();
  uint64_t v155 = v54;
  uint64_t v56 = v35;
  MEMORY[0x270FA5388](v35);
  uint64_t v57 = v32;
  uint64_t v34 = v25;
  unint64_t v26 = lazy protocol witness table accessor for type [Float] and conformance [A]();
  uint64_t result = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(v124, (uint64_t)v57, v71, MEMORY[0x263F8D5C8], MEMORY[0x263F8E628], v26, MEMORY[0x263F8E658], v92);
  uint64_t v58 = v24;
  uint64_t v59 = result;
  if (v24) {
    goto LABEL_22;
  }
  uint64_t v53 = v59;
  outlined destroy of [A]();
  uint64_t v160 = v53;
  swift_bridgeObjectRelease();
  uint64_t v61 = v58;
LABEL_12:
  uint64_t v48 = v61;
  uint64_t v50 = v165;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v49 = &v152;
  uint64_t v152 = v50;
  BidirectionalCollection.last.getter();
  outlined destroy of [A]();
  float v51 = v153;
  int v52 = v154;
  swift_bridgeObjectRelease();
  if (v52)
  {
    v32[0] = 2;
    uint64_t v33 = 103;
    LODWORD(v34) = 0;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    float v47 = v51;
  }
  if (v47 <= 0.0)
  {
    uint64_t v27 = v48;
    uint64_t v45 = v165;
    swift_bridgeObjectRetain();
    v151[2] = v45;
    unint64_t v28 = lazy protocol witness table accessor for type [Float] and conformance [A]();
    uint64_t result = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(v127, 0, v71, MEMORY[0x263F8D5C8], MEMORY[0x263F8E628], v28, MEMORY[0x263F8E658], v92);
    uint64_t v46 = result;
    if (!v27)
    {
      uint64_t v44 = v46;
      outlined destroy of [A]();
      uint64_t v159 = v44;
      swift_bridgeObjectRelease();
LABEL_20:
      void v36[2] = &v160;
      uint64_t v37 = v160;
      swift_bridgeObjectRetain();
      v36[1] = &v159;
      v36[4] = v159;
      swift_bridgeObjectRetain();
      void v36[3] = &v164;
      v36[5] = v164;
      swift_bridgeObjectRetain();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      return v37;
    }
    goto LABEL_23;
  }
  uint64_t v29 = v48;
  uint64_t v40 = &v165;
  uint64_t v39 = v165;
  swift_bridgeObjectRetain();
  v151[3] = v39;
  uint64_t v41 = v35;
  MEMORY[0x270FA5388](v35);
  uint64_t v42 = v32;
  uint64_t v34 = v30;
  unint64_t v31 = lazy protocol witness table accessor for type [Float] and conformance [A]();
  uint64_t result = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(v126, (uint64_t)v42, v71, MEMORY[0x263F8D5C8], MEMORY[0x263F8E628], v31, MEMORY[0x263F8E658], v92);
  uint64_t v43 = result;
  if (!v29)
  {
    uint64_t v38 = v43;
    outlined destroy of [A]();
    uint64_t v159 = v38;
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
LABEL_24:
  __break(1u);
  return result;
}

uint64_t closure #1 in static AUC.rocCurve(outputs:labels:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v14 = 0;
  int v15 = 0;
  uint64_t v13 = 0;
  int v2 = *((_DWORD *)a1 + 2);
  uint64_t v14 = *a1;
  int v15 = v2;
  uint64_t v13 = a2;
  v12[1] = v2;
  v12[0] = 0;
  unint64_t v8 = lazy protocol witness table accessor for type Float and conformance Float();
  uint64_t v7 = MEMORY[0x263F8D5C8];
  default argument 1 of FloatingPoint.isNearlyEqual(to:absoluteTolerance:)();
  v11[0] = v11[1];
  if (FloatingPoint.isNearlyEqual(to:absoluteTolerance:)((uint64_t)v12, (uint64_t)v11, v7, v8))
  {
    specialized Array.subscript.getter();
    v10[2] = v3;
    v10[1] = v3;
    v10[0] = 0;
    uint64_t v5 = MEMORY[0x263F8D5C8];
    default argument 1 of FloatingPoint.isNearlyEqual(to:absoluteTolerance:)();
    v9[0] = v9[1];
    int v6 = FloatingPoint.isNearlyEqual(to:absoluteTolerance:)((uint64_t)v10, (uint64_t)v9, v5, v8) ^ 1;
  }
  else
  {
    LOBYTE(v6) = 1;
  }
  return v6 & 1;
}

uint64_t closure #3 in static AUC.rocCurve(outputs:labels:)@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = specialized Array.subscript.getter();
  *a1 = v2;
  return result;
}

uint64_t closure #5 in static AUC.rocCurve(outputs:labels:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = MEMORY[0x25A2C09A0]();
  *a1 = result;
  return result;
}

uint64_t closure #6 in static AUC.rocCurve(outputs:labels:)@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = static Float.nan.getter();
  *a1 = v2;
  return result;
}

float closure #7 in static AUC.rocCurve(outputs:labels:)@<S0>(float *a1@<X0>, float *a2@<X8>)
{
  float v5 = *a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
  lazy protocol witness table accessor for type [Float] and conformance [A]();
  BidirectionalCollection.last.getter();
  outlined destroy of [A]();
  swift_bridgeObjectRelease();
  if (v7)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    float v3 = v6;
  }
  float result = v5 / v3;
  *a2 = v5 / v3;
  return result;
}

float partial apply for closure #7 in static AUC.rocCurve(outputs:labels:)@<S0>(float *a1@<X0>, float *a2@<X8>)
{
  return closure #7 in static AUC.rocCurve(outputs:labels:)(a1, a2);
}

float closure #9 in static AUC.rocCurve(outputs:labels:)@<S0>(float *a1@<X0>, float *a2@<X8>)
{
  float v5 = *a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
  lazy protocol witness table accessor for type [Float] and conformance [A]();
  BidirectionalCollection.last.getter();
  outlined destroy of [A]();
  swift_bridgeObjectRelease();
  if (v7)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    float v3 = v6;
  }
  float result = v5 / v3;
  *a2 = v5 / v3;
  return result;
}

float partial apply for closure #9 in static AUC.rocCurve(outputs:labels:)@<S0>(float *a1@<X0>, float *a2@<X8>)
{
  return closure #9 in static AUC.rocCurve(outputs:labels:)(a1, a2);
}

uint64_t partial apply for closure #1 in static AUC.rocCurve(outputs:labels:)(uint64_t *a1)
{
  return closure #1 in static AUC.rocCurve(outputs:labels:)(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t partial apply for closure #3 in static AUC.rocCurve(outputs:labels:)@<X0>(_DWORD *a1@<X8>)
{
  return closure #3 in static AUC.rocCurve(outputs:labels:)(a1);
}

uint64_t partial apply for closure #5 in static AUC.rocCurve(outputs:labels:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #5 in static AUC.rocCurve(outputs:labels:)(a1);
}

uint64_t static AUC.precisionRecallCurve(outputs:labels:)(uint64_t a1, uint64_t a2)
{
  uint64_t v112 = partial apply for closure #1 in static AUC.rocCurve(outputs:labels:);
  uint64_t v113 = (void (*)(char *, char *))closure #3 in static AUC.binaryClassificationCurve(outputs:labels:);
  int v114 = (void (*)(char *, char *))partial apply for closure #3 in static AUC.rocCurve(outputs:labels:);
  id v115 = partial apply for closure #3 in static AUC.rocCurve(outputs:labels:);
  uint64_t v116 = partial apply for closure #5 in static AUC.rocCurve(outputs:labels:);
  uint64_t v117 = implicit closure #1 in static AUC.precisionRecallCurve(outputs:labels:);
  uint64_t v118 = (void (*)(char *, char *))partial apply for thunk for @escaping @callee_guaranteed (@unowned Float, @unowned Float) -> (@unowned Float);
  id v119 = closure #6 in static AUC.precisionRecallCurve(outputs:labels:);
  id v120 = partial apply for thunk for @escaping @callee_guaranteed (@unowned Float, @unowned Float) -> (@unowned Float);
  uint64_t v121 = (void (*)(char *, char *))partial apply for closure #7 in static AUC.precisionRecallCurve(outputs:labels:);
  uint64_t v122 = 0;
  uint64_t v157 = 0;
  uint64_t v152 = 0;
  uint64_t v150 = 0;
  v141[0] = 0;
  uint64_t v138 = 0;
  uint64_t v128 = 0;
  v164[2] = a1;
  v164[1] = a2;
  v164[0] = static AUC.binaryClassificationCurve(outputs:labels:)(a1, a2);
  uint64_t v163 = v2;
  uint64_t v162 = v3;
  uint64_t v123 = v164[0];
  swift_bridgeObjectRetain();
  uint64_t v124 = MEMORY[0x25A2C0820](v164[0]);
  swift_bridgeObjectRelease();
  if (v124 <= 2)
  {
    uint64_t v69 = v122;
  }
  else
  {
    uint64_t v4 = v122;
    uint64_t v87 = v164[0];
    swift_bridgeObjectRetain();
    v140[4] = v164[0];
    uint64_t v103 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
    unint64_t v95 = lazy protocol witness table accessor for type [Float] and conformance [A]();
    default argument 0 of Collection.dropFirst(_:)();
    Collection.dropLast(_:)();
    unint64_t v88 = v140;
    v140[0] = v140[5];
    v140[1] = v140[6];
    v140[2] = v140[7];
    v140[3] = v140[8];
    uint64_t v93 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ArraySlice<Float>);
    unint64_t v94 = lazy protocol witness table accessor for type ArraySlice<Float> and conformance ArraySlice<A>();
    uint64_t v92 = MEMORY[0x263F8D5C8];
    uint64_t v89 = &v139;
    uint64_t v139 = Array.init<A>(_:)();
    uint64_t v96 = MEMORY[0x263F8D608];
    uint64_t v90 = Collection<>.diff()(v103, v95, MEMORY[0x263F8D608]);
    outlined destroy of [A]();
    uint64_t v99 = v141;
    v141[0] = v90;
    uint64_t v91 = v163;
    swift_bridgeObjectRetain();
    v137[5] = v91;
    default argument 0 of Collection.dropFirst(_:)();
    Collection.dropFirst(_:)();
    v137[1] = v137[6];
    v137[2] = v137[7];
    v137[3] = v137[8];
    v137[4] = v137[9];
    uint64_t v97 = v137;
    v137[0] = Array.init<A>(_:)();
    uint64_t v98 = Collection<>.diff()(v103, v95, v96);
    outlined destroy of [A]();
    char v105 = &v138;
    uint64_t v138 = v98;
    float v100 = 1.0;
    float v136 = 1.0;
    specialized Array.append(_:)();
    float v135 = 1.0;
    uint64_t v101 = 0;
    Array.insert(_:at:)();
    float v134 = 1.0;
    specialized Array.append(_:)();
    float v133 = 1.0;
    Array.insert(_:at:)();
    uint64_t v102 = v141[0];
    swift_bridgeObjectRetain();
    uint64_t v104 = &v131;
    uint64_t v131 = v102;
    unint64_t v5 = lazy protocol witness table accessor for type [Float] and conformance [A]();
    MEMORY[0x25A2C0660](&v132, v103, v5);
    outlined destroy of [A]();
    uint64_t v130 = v132;
    uint64_t v106 = v37;
    unint64_t v107 = 32;
    MEMORY[0x270FA5388](v37);
    float v108 = &v37[v107 / 0xFFFFFFFFFFFFFFF8];
    v108[2] = v6;
    uint64_t v109 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EnumeratedSequence<[Float]>);
    lazy protocol witness table accessor for type EnumeratedSequence<[Float]> and conformance EnumeratedSequence<A>();
    uint64_t v7 = Sequence.filter(_:)();
    uint64_t v110 = v4;
    uint64_t v111 = v7;
    uint64_t v129 = v7;
    uint64_t v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(offset: Int, element: Float)]);
    unint64_t v8 = lazy protocol witness table accessor for type [(offset: Int, element: Float)] and conformance [A]();
    uint64_t v9 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(v113, 0, v83, MEMORY[0x263F8D6C8], MEMORY[0x263F8E628], v8, MEMORY[0x263F8E658], v84);
    uint64_t v85 = 0;
    uint64_t v86 = v9;
    uint64_t v76 = v9;
    outlined destroy of [A]();
    uint64_t v128 = v76;
    uint64_t v127 = v76;
    uint64_t v77 = v37;
    MEMORY[0x270FA5388](v37);
    uint64_t v78 = &v37[-4];
    v37[-2] = v164;
    uint64_t v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
    unint64_t v80 = lazy protocol witness table accessor for type [Int] and conformance [A]();
    uint64_t v10 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(v114, (uint64_t)v78, v79, MEMORY[0x263F8D5C8], MEMORY[0x263F8E628], v80, MEMORY[0x263F8E658], v84);
    uint64_t v81 = 0;
    uint64_t v82 = v10;
    v164[0] = v10;
    swift_bridgeObjectRelease();
    uint64_t v126 = v76;
    uint64_t v73 = v37;
    uint64_t v11 = (void (*)(char *, char *))MEMORY[0x270FA5388](v115);
    v37[-2] = &v163;
    uint64_t v15 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(v11, (uint64_t)&v37[-4], v12, MEMORY[0x263F8D5C8], MEMORY[0x263F8E628], v13, MEMORY[0x263F8E658], v14);
    uint64_t v74 = 0;
    uint64_t v75 = v15;
    uint64_t v163 = v15;
    swift_bridgeObjectRelease();
    uint64_t v125 = v76;
    uint64_t v70 = v37;
    unint64_t v16 = (void (*)(char *, char *))MEMORY[0x270FA5388](v116);
    v37[-2] = &v162;
    uint64_t v20 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(v16, (uint64_t)&v37[-4], v17, MEMORY[0x263F8D6C8], MEMORY[0x263F8E628], v18, MEMORY[0x263F8E658], v19);
    uint64_t v71 = 0;
    uint64_t v72 = v20;
    uint64_t v162 = v20;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of [A]();
    outlined destroy of [A]();
    uint64_t v69 = v71;
  }
  uint64_t v21 = v69;
  uint64_t v57 = v164[0];
  swift_bridgeObjectRetain();
  uint64_t v62 = v161;
  v161[0] = v57;
  uint64_t v58 = v163;
  swift_bridgeObjectRetain();
  uint64_t v61 = &v160;
  uint64_t v160 = v58;
  uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
  unint64_t v60 = lazy protocol witness table accessor for type [Float] and conformance [A]();
  zip<A, B>(_:_:)();
  outlined destroy of [A]();
  outlined destroy of [A]();
  uint64_t v158 = v161[1];
  uint64_t v159 = v161[2];
  uint64_t v63 = v37;
  MEMORY[0x270FA5388](v37);
  unint64_t v22 = &v37[-4];
  uint64_t v64 = &v37[-4];
  void v22[2] = v117;
  v22[3] = 0;
  uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zip2Sequence<[Float], [Float]>);
  unint64_t v66 = lazy protocol witness table accessor for type Zip2Sequence<[Float], [Float]> and conformance Zip2Sequence<A, B>();
  uint64_t result = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(v118, (uint64_t)v64, v65, MEMORY[0x263F8D5C8], MEMORY[0x263F8E628], v66, MEMORY[0x263F8E658], v84);
  uint64_t v67 = v21;
  uint64_t v68 = result;
  if (v21)
  {
    __break(1u);
    __break(1u);
    __break(1u);
  }
  else
  {
    uint64_t v52 = v68;
    outlined destroy of Zip2Sequence<[Float], [Float]>();
    uint64_t v157 = v52;
    uint64_t v51 = v164[0];
    swift_bridgeObjectRetain();
    uint64_t v53 = v156;
    v156[0] = v51;
    uint64_t v155 = v52;
    zip<A, B>(_:_:)();
    outlined destroy of [A]();
    uint64_t v153 = v156[1];
    uint64_t v154 = v156[2];
    uint64_t v54 = v37;
    uint64_t v24 = (void (*)(char *, char *))MEMORY[0x270FA5388](v120);
    int v25 = &v37[-4];
    unsigned char v25[2] = v26;
    void v25[3] = 0;
    uint64_t v30 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(v24, (uint64_t)&v37[-4], v27, MEMORY[0x263F8D5C8], MEMORY[0x263F8E628], v28, MEMORY[0x263F8E658], v29);
    uint64_t v55 = 0;
    uint64_t v56 = v30;
    uint64_t v45 = v30;
    outlined destroy of Zip2Sequence<[Float], [Float]>();
    uint64_t v152 = v45;
    float v47 = v164;
    uint64_t v46 = v164[0];
    swift_bridgeObjectRetain();
    uint64_t v151 = v46;
    uint64_t v48 = v37;
    MEMORY[0x270FA5388](v37);
    uint64_t v49 = &v37[-4];
    v37[-2] = v31;
    unint64_t v32 = lazy protocol witness table accessor for type [Float] and conformance [A]();
    uint64_t v50 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(v121, (uint64_t)v49, v59, MEMORY[0x263F8D5C8], MEMORY[0x263F8E628], v32, MEMORY[0x263F8E658], v84);
    uint64_t v40 = v50;
    outlined destroy of [A]();
    uint64_t v150 = v40;
    swift_bridgeObjectRetain();
    v147[1] = v45;
    uint64_t v148 = specialized BidirectionalCollection.reversed()();
    v37[1] = v147;
    v147[0] = v148;
    v37[2] = 1;
    v37[3] = MEMORY[0x263F8D5C8];
    uint64_t v33 = _allocateUninitializedArray<A>(_:)();
    float *v34 = 1.0;
    _finalizeUninitializedArray<A>(_:)();
    v37[0] = &v146;
    uint64_t v146 = v33;
    v37[4] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReversedCollection<[Float]>);
    v37[5] = lazy protocol witness table accessor for type [Float] and conformance [A]();
    v37[6] = lazy protocol witness table accessor for type ReversedCollection<[Float]> and conformance ReversedCollection<A>();
    static RangeReplaceableCollection.+ infix<A>(_:_:)();
    outlined destroy of [A]();
    outlined destroy of [A]();
    uint64_t v44 = v149;
    swift_bridgeObjectRetain();
    v143[1] = v40;
    uint64_t v144 = specialized BidirectionalCollection.reversed()();
    v37[8] = v143;
    v143[0] = v144;
    uint64_t v35 = _allocateUninitializedArray<A>(_:)();
    *uint64_t v36 = 0;
    _finalizeUninitializedArray<A>(_:)();
    v37[7] = &v142;
    uint64_t v142 = v35;
    static RangeReplaceableCollection.+ infix<A>(_:_:)();
    outlined destroy of [A]();
    outlined destroy of [A]();
    uint64_t v42 = v145;
    uint64_t v41 = &v162;
    uint64_t v38 = v162;
    swift_bridgeObjectRetain();
    v141[1] = v38;
    uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
    lazy protocol witness table accessor for type [Int] and conformance [A]();
    uint64_t v43 = Sequence.reversed()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    return v44;
  }
  return result;
}

float implicit closure #1 in static AUC.precisionRecallCurve(outputs:labels:)(float a1, float a2)
{
  return a1 + a2;
}

void thunk for @escaping @callee_guaranteed (@unowned Float, @unowned Float) -> (@unowned Float)(float *a1@<X0>, float (*a2)(float, float)@<X1>, float *a3@<X8>)
{
  *a3 = a2(*a1, a1[1]);
}

void partial apply for thunk for @escaping @callee_guaranteed (@unowned Float, @unowned Float) -> (@unowned Float)(float *a1@<X0>, float *a2@<X8>)
{
  thunk for @escaping @callee_guaranteed (@unowned Float, @unowned Float) -> (@unowned Float)(a1, *(float (**)(float, float))(v2 + 16), a2);
}

unint64_t lazy protocol witness table accessor for type Zip2Sequence<[Float], [Float]> and conformance Zip2Sequence<A, B>()
{
  uint64_t v2 = lazy protocol witness table cache variable for type Zip2Sequence<[Float], [Float]> and conformance Zip2Sequence<A, B>;
  if (!lazy protocol witness table cache variable for type Zip2Sequence<[Float], [Float]> and conformance Zip2Sequence<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Zip2Sequence<[Float], [Float]>);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Zip2Sequence<[Float], [Float]> and conformance Zip2Sequence<A, B>);
    return WitnessTable;
  }
  return v2;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of Zip2Sequence<[Float], [Float]>()
{
}

float closure #6 in static AUC.precisionRecallCurve(outputs:labels:)(float a1, float a2)
{
  *(float *)&v9[4] = a1;
  *(float *)&_DWORD v9[2] = a2;
  *(float *)&v9[1] = a2;
  v9[0] = 0;
  unint64_t v7 = lazy protocol witness table accessor for type Float and conformance Float();
  uint64_t v6 = MEMORY[0x263F8D5C8];
  default argument 1 of FloatingPoint.isNearlyEqual(to:absoluteTolerance:)();
  v8[0] = v8[1];
  if (FloatingPoint.isNearlyEqual(to:absoluteTolerance:)((uint64_t)v9, (uint64_t)v8, v6, v7)) {
    return 0.0;
  }
  else {
    return a1 / a2;
  }
}

float closure #7 in static AUC.precisionRecallCurve(outputs:labels:)@<S0>(float *a1@<X0>, void *a2@<X1>, float *a3@<X8>)
{
  float v19 = 0.0;
  uint64_t v18 = 0;
  float v9 = *a1;
  float v19 = *a1;
  uint64_t v18 = a2;
  uint64_t v10 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v15 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
  lazy protocol witness table accessor for type [Float] and conformance [A]();
  BidirectionalCollection.last.getter();
  outlined destroy of [A]();
  swift_bridgeObjectRelease();
  if (v17)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    int v7 = v16;
  }
  v14[1] = v7;
  v14[0] = 0;
  unint64_t v6 = lazy protocol witness table accessor for type Float and conformance Float();
  uint64_t v5 = MEMORY[0x263F8D5C8];
  default argument 1 of FloatingPoint.isNearlyEqual(to:absoluteTolerance:)();
  v13[0] = v13[1];
  if (FloatingPoint.isNearlyEqual(to:absoluteTolerance:)((uint64_t)v14, (uint64_t)v13, v5, v6))
  {
    float result = 1.0;
    *a3 = 1.0;
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    BidirectionalCollection.last.getter();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    if (v12)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    else
    {
      float v4 = v11;
    }
    float result = v9 / v4;
    *a3 = v9 / v4;
  }
  return result;
}

float partial apply for closure #7 in static AUC.precisionRecallCurve(outputs:labels:)@<S0>(float *a1@<X0>, float *a2@<X8>)
{
  return closure #7 in static AUC.precisionRecallCurve(outputs:labels:)(a1, *(void **)(v2 + 16), a2);
}

unint64_t lazy protocol witness table accessor for type ReversedCollection<[Float]> and conformance ReversedCollection<A>()
{
  uint64_t v2 = lazy protocol witness table cache variable for type ReversedCollection<[Float]> and conformance ReversedCollection<A>;
  if (!lazy protocol witness table cache variable for type ReversedCollection<[Float]> and conformance ReversedCollection<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ReversedCollection<[Float]>);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type ReversedCollection<[Float]> and conformance ReversedCollection<A>);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type ReversedCollection<[Float]> and conformance ReversedCollection<A>;
  if (!lazy protocol witness table cache variable for type ReversedCollection<[Float]> and conformance ReversedCollection<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ReversedCollection<[Float]>);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type ReversedCollection<[Float]> and conformance ReversedCollection<A>);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type ArraySlice<Float> and conformance ArraySlice<A>()
{
  uint64_t v2 = lazy protocol witness table cache variable for type ArraySlice<Float> and conformance ArraySlice<A>;
  if (!lazy protocol witness table cache variable for type ArraySlice<Float> and conformance ArraySlice<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ArraySlice<Float>);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type ArraySlice<Float> and conformance ArraySlice<A>);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type ArraySlice<Float> and conformance ArraySlice<A>;
  if (!lazy protocol witness table cache variable for type ArraySlice<Float> and conformance ArraySlice<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ArraySlice<Float>);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type ArraySlice<Float> and conformance ArraySlice<A>);
    return WitnessTable;
  }
  return v2;
}

void *static AUC.prAUCScore(precison:recall:)(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = v38;
  uint64_t v32 = a1;
  uint64_t v24 = "Fatal error";
  int v25 = "Range requires lowerBound <= upperBound";
  uint64_t v26 = "Swift/Range.swift";
  uint64_t v27 = implicit closure #1 in static AUC.prAUCScore(precison:recall:);
  uint64_t v28 = (void (*)(char *, char *))partial apply for thunk for @escaping @callee_guaranteed (@unowned Float, @unowned Float) -> (@unowned Float);
  uint64_t v29 = implicit closure #1 in closure #1 in HealthDataQuantityAverageSamples.result.getter;
  uint64_t v30 = 0;
  v38[7] = a1;
  v38[6] = a2;
  v37[1] = a2;
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
  unint64_t v2 = lazy protocol witness table accessor for type [Float] and conformance [A]();
  v37[0] = Collection<>.diff()(v31, v2, MEMORY[0x263F8D608]);
  float result = (void *)MEMORY[0x25A2C0820](v32);
  uint64_t v33 = (uint64_t)result - 1;
  if (__OFSUB__(result, 1))
  {
    __break(1u);
  }
  else
  {
    if (v33 < 0)
    {
      char v12 = 2;
      uint64_t v13 = 754;
      LODWORD(v14) = 0;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    uint64_t v5 = v30;
    uint64_t v19 = MEMORY[0x263F8D5C8];
    v16[3] = v36;
    v36[0] = Array.subscript.getter();
    v36[1] = v6;
    void v36[2] = v7;
    void v36[3] = v8;
    v16[1] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ArraySlice<Float>);
    void v16[2] = lazy protocol witness table accessor for type [Float] and conformance [A]();
    lazy protocol witness table accessor for type ArraySlice<Float> and conformance ArraySlice<A>();
    void v16[4] = v37;
    zip<A, B>(_:_:)();
    outlined destroy of IndexingIterator<ArraySlice<(start: UInt32, end: UInt32)>>();
    outlined destroy of [A]();
    uint64_t v9 = v23[4];
    v35[1] = v38[0];
    v35[2] = v38[1];
    void v35[3] = v38[2];
    void v35[4] = v38[3];
    v35[5] = v9;
    v16[5] = v16;
    MEMORY[0x270FA5388](v16);
    char v17 = &v12;
    uint64_t v14 = v27;
    uint64_t v15 = 0;
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zip2Sequence<[Float], ArraySlice<Float>>);
    unint64_t v10 = lazy protocol witness table accessor for type Zip2Sequence<[Float], ArraySlice<Float>> and conformance Zip2Sequence<A, B>();
    uint64_t v11 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(v28, (uint64_t)v17, v18, v19, MEMORY[0x263F8E628], v10, MEMORY[0x263F8E658], v20);
    uint64_t v21 = v5;
    uint64_t v22 = v11;
    v16[0] = v11;
    outlined destroy of Zip2Sequence<[Float], ArraySlice<Float>>();
    v35[0] = v16[0];
    int v34 = 0;
    Sequence.reduce<A>(_:_:)();
    float result = v35;
    outlined destroy of [A]();
  }
  return result;
}

float implicit closure #1 in static AUC.prAUCScore(precison:recall:)(float a1, float a2)
{
  return a1 * a2;
}

unint64_t lazy protocol witness table accessor for type Zip2Sequence<[Float], ArraySlice<Float>> and conformance Zip2Sequence<A, B>()
{
  uint64_t v2 = lazy protocol witness table cache variable for type Zip2Sequence<[Float], ArraySlice<Float>> and conformance Zip2Sequence<A, B>;
  if (!lazy protocol witness table cache variable for type Zip2Sequence<[Float], ArraySlice<Float>> and conformance Zip2Sequence<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Zip2Sequence<[Float], ArraySlice<Float>>);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Zip2Sequence<[Float], ArraySlice<Float>> and conformance Zip2Sequence<A, B>);
    return WitnessTable;
  }
  return v2;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of Zip2Sequence<[Float], ArraySlice<Float>>()
{
}

uint64_t *static AUC.rocAUCScore(tpr:fpr:maxFPR:)(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v63 = a1;
  uint64_t v64 = a2;
  float v65 = a3;
  uint64_t v67 = partial apply for closure #1 in static AUC.rocAUCScore(tpr:fpr:maxFPR:);
  uint64_t v68 = "Fatal error";
  uint64_t v69 = "Unexpectedly found nil while unwrapping an Optional value";
  uint64_t v70 = "NightingaleTraining/MetricsUtils.swift";
  uint64_t v99 = 0;
  float v92 = 0.0;
  uint64_t v91 = 0;
  uint64_t v88 = 0;
  float v76 = 0.0;
  float v75 = 0.0;
  float v74 = 0.0;
  uint64_t v106 = a1;
  uint64_t v105 = a2;
  *(float *)&v104[2] = a3;
  *(float *)&v104[1] = a3;
  uint64_t v71 = v104;
  v104[0] = 1.0;
  unint64_t v73 = lazy protocol witness table accessor for type Float and conformance Float();
  uint64_t v72 = MEMORY[0x263F8D5C8];
  default argument 1 of FloatingPoint.isNearlyEqual(to:absoluteTolerance:)();
  v103[0] = v103[1];
  if ((FloatingPoint.isNearlyEqual(to:absoluteTolerance:)((uint64_t)v104, (uint64_t)v103, v72, v73) & 1) == 0)
  {
    if (v65 >= 1.0 || v65 <= 0.0)
    {
      lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
      uint64_t v26 = swift_allocError();
      *uint64_t v22 = 44;
      swift_willThrow();
      float result = (uint64_t *)v26;
      uint64_t v27 = v26;
      return result;
    }
    uint64_t v100 = v64;
    uint64_t v53 = (uint64_t *)v24;
    MEMORY[0x270FA5388](v24);
    uint64_t v54 = v23;
    v23[4] = v5;
    uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
    unint64_t v6 = lazy protocol witness table accessor for type [Float] and conformance [A]();
    uint64_t v7 = (uint64_t *)v66;
    unint64_t v56 = v6;
    Collection.firstIndex(where:)();
    uint64_t v57 = v7;
    if (v7)
    {
      __break(1u);
LABEL_31:
      uint64_t v25 = (uint64_t)v40;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined destroy of [A]();
      float result = &v91;
      outlined destroy of [A]();
      uint64_t v27 = v25;
      return result;
    }
    float result = v53;
    uint64_t v52 = v101;
    if (v102)
    {
      float result = (uint64_t *)_assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    else
    {
      uint64_t v51 = v52;
    }
    uint64_t v49 = v51;
    uint64_t v99 = v51;
    uint64_t v50 = v51 - 1;
    if (__OFSUB__(v51, 1))
    {
      __break(1u);
    }
    else
    {
      float result = (uint64_t *)specialized Array.subscript.getter();
      float v98 = v9;
      float v47 = v9;
      uint64_t v48 = v49 - 1;
      if (!__OFSUB__(v49, 1))
      {
        specialized Array.subscript.getter();
        float v97 = v11;
        float v44 = v65 - v11;
        float result = (uint64_t *)specialized Array.subscript.getter();
        float v96 = v12;
        float v45 = v12;
        uint64_t v46 = v49 - 1;
        if (!__OFSUB__(v49, 1))
        {
          specialized Array.subscript.getter();
          float v95 = v14;
          float v41 = v44 / (float)(v45 - v14);
          float result = (uint64_t *)specialized Array.subscript.getter();
          float v94 = v15;
          float v42 = v15;
          uint64_t v43 = v49 - 1;
          if (!__OFSUB__(v49, 1))
          {
            specialized Array.subscript.getter();
            float v93 = v17;
            float v32 = v47 + (float)(v41 * (float)(v42 - v17));
            float v92 = v32;
            swift_bridgeObjectRetain();
            v90[5] = v63;
            v90[4] = v49;
            Collection.prefix(upTo:)();
            uint64_t v31 = v90;
            v90[0] = v90[6];
            v90[1] = v90[7];
            v90[2] = v90[8];
            v90[3] = v90[9];
            uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ArraySlice<Float>);
            unint64_t v35 = lazy protocol witness table accessor for type ArraySlice<Float> and conformance ArraySlice<A>();
            uint64_t v33 = MEMORY[0x263F8D5C8];
            uint64_t v91 = Array.init<A>(_:)();
            float v89 = v32;
            specialized Array.append(_:)();
            swift_bridgeObjectRetain();
            uint64_t v83 = v64;
            uint64_t v82 = v49;
            Collection.prefix(upTo:)();
            uint64_t v78 = v84;
            uint64_t v79 = v85;
            uint64_t v80 = v86;
            uint64_t v81 = v87;
            uint64_t v88 = Array.init<A>(_:)();
            float v77 = v65;
            specialized Array.append(_:)();
            uint64_t v18 = v57;
            uint64_t v36 = v88;
            swift_bridgeObjectRetain();
            uint64_t v37 = v91;
            swift_bridgeObjectRetain();
            static AUC.auc(x:y:)(v36, v37);
            uint64_t v38 = v18;
            float v39 = v19;
            uint64_t v40 = v18;
            if (!v18)
            {
              float v29 = v39;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              float v76 = v29;
              float v28 = Float.init(_:)(v65);
              float v20 = Float.init(_:)(2.0);
              float v21 = powf(v28, v20);
              float v75 = 0.5 * Float.init(_:)(v21);
              float v74 = v65;
              float v30 = 0.5 * (float)((float)((float)(v29 - v75) / (float)(v65 - v75)) + 1.0);
              outlined destroy of [A]();
              outlined destroy of [A]();
              float result = v38;
              float v58 = v30;
              uint64_t v59 = v38;
              return result;
            }
            goto LABEL_31;
          }
LABEL_35:
          __break(1u);
          return result;
        }
LABEL_34:
        __break(1u);
        goto LABEL_35;
      }
    }
    __break(1u);
    goto LABEL_34;
  }
  float result = (uint64_t *)static AUC.auc(x:y:)(v64, v63);
  uint64_t v60 = v66;
  float v61 = v4;
  uint64_t v62 = v66;
  if (v66)
  {
    uint64_t v27 = v62;
  }
  else
  {
    float v58 = v61;
    uint64_t v59 = 0;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Float and conformance Float()
{
  uint64_t v2 = lazy protocol witness table cache variable for type Float and conformance Float;
  if (!lazy protocol witness table cache variable for type Float and conformance Float)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Float and conformance Float);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type Float and conformance Float;
  if (!lazy protocol witness table cache variable for type Float and conformance Float)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Float and conformance Float);
    return WitnessTable;
  }
  return v2;
}

uint64_t static AUC.auc(x:y:)(uint64_t a1, uint64_t a2)
{
  uint64_t v51 = a2;
  uint64_t v64 = closure #1 in static AUC.auc(x:y:);
  uint64_t v52 = closure #2 in static AUC.auc(x:y:);
  uint64_t v53 = "Fatal error";
  uint64_t v54 = "Range requires lowerBound <= upperBound";
  uint64_t v55 = "Swift/Range.swift";
  unint64_t v56 = closure #3 in static AUC.auc(x:y:);
  uint64_t v57 = (void (*)(char *, char *))partial apply for thunk for @escaping @callee_guaranteed (@unowned Float, @unowned Float) -> (@unowned Float);
  float v58 = implicit closure #1 in static AUC.prAUCScore(precison:recall:);
  uint64_t v59 = (void (*)(char *, char *))partial apply for thunk for @escaping @callee_guaranteed (@unowned Float, @unowned Float) -> (@unowned Float);
  uint64_t v60 = implicit closure #1 in closure #1 in HealthDataQuantityAverageSamples.result.getter;
  uint64_t v77 = 0;
  uint64_t v93 = a1;
  uint64_t v92 = a2;
  float v91 = 1.0;
  uint64_t v90 = a1;
  uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
  unint64_t v2 = lazy protocol witness table accessor for type [Float] and conformance [A]();
  uint64_t v61 = Collection<>.diff()(v62, v2, MEMORY[0x263F8D608]);
  uint64_t v89 = v61;
  v87[12] = v61;
  unint64_t v65 = lazy protocol witness table accessor for type [Float] and conformance [A]();
  uint64_t result = Sequence.first(where:)();
  uint64_t v66 = v63;
  if (v63)
  {
    __break(1u);
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v88)
  {
    uint64_t v50 = v66;
  }
  else
  {
    uint64_t v67 = v61;
    int v4 = Sequence.allSatisfy(_:)();
    uint64_t v48 = v66;
    int v49 = v4;
    if ((v49 & 1) == 0)
    {
      lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
      uint64_t v47 = swift_allocError();
      *int v5 = 43;
      swift_willThrow();
      return swift_bridgeObjectRelease();
    }
    float v91 = -1.0;
    uint64_t v50 = v48;
  }
  uint64_t v44 = v50;
  uint64_t v45 = MEMORY[0x25A2C0820](v51);
  if (v45 < 1)
  {
    char v19 = 2;
    uint64_t v20 = 754;
    LODWORD(v21) = 0;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  v87[0] = Array.subscript.getter();
  v87[1] = v6;
  v87[2] = v7;
  v87[3] = v8;
  uint64_t result = MEMORY[0x25A2C0820](v51);
  uint64_t v43 = result - 1;
  if (__OFSUB__(result, 1)) {
    goto LABEL_26;
  }
  if (v43 < 0)
  {
    char v19 = 2;
    uint64_t v20 = 754;
    LODWORD(v21) = 0;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  uint64_t v40 = MEMORY[0x263F8D5C8];
  uint64_t v34 = v86;
  v86[0] = Array.subscript.getter();
  v86[1] = v10;
  v86[2] = v11;
  v86[3] = v12;
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ArraySlice<Float>);
  lazy protocol witness table accessor for type ArraySlice<Float> and conformance ArraySlice<A>();
  unint64_t v35 = v87;
  zip<A, B>(_:_:)();
  outlined destroy of IndexingIterator<ArraySlice<(start: UInt32, end: UInt32)>>();
  outlined destroy of IndexingIterator<ArraySlice<(start: UInt32, end: UInt32)>>();
  uint64_t v78 = v87[4];
  uint64_t v79 = v87[5];
  uint64_t v80 = v87[6];
  uint64_t v81 = v87[7];
  uint64_t v82 = v87[8];
  uint64_t v83 = v87[9];
  uint64_t v84 = v87[10];
  uint64_t v85 = v87[11];
  uint64_t v36 = v23;
  unint64_t v37 = 32;
  MEMORY[0x270FA5388](v23);
  uint64_t v13 = &v23[v37 / 0xFFFFFFFFFFFFFFFCLL];
  uint64_t v38 = v13;
  *((void *)v13 + 2) = v56;
  *((void *)v13 + 3) = 0;
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zip2Sequence<ArraySlice<Float>, ArraySlice<Float>>);
  unint64_t v14 = lazy protocol witness table accessor for type Zip2Sequence<ArraySlice<Float>, ArraySlice<Float>> and conformance Zip2Sequence<A, B>();
  uint64_t v15 = v44;
  uint64_t result = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(v57, (uint64_t)v38, v39, v40, MEMORY[0x263F8E628], v14, MEMORY[0x263F8E658], v46);
  uint64_t v41 = v15;
  uint64_t v42 = result;
  if (v15) {
    goto LABEL_23;
  }
  uint64_t v26 = v42;
  outlined destroy of Zip2Sequence<ArraySlice<Float>, ArraySlice<Float>>();
  uint64_t v77 = v26;
  float v27 = v91;
  uint64_t v73 = v26;
  uint64_t v72 = v61;
  zip<A, B>(_:_:)();
  uint64_t v70 = v74;
  uint64_t v71 = v75;
  float v28 = v23;
  MEMORY[0x270FA5388](v23);
  float v29 = &v19;
  float v21 = v58;
  uint64_t v22 = 0;
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zip2Sequence<[Float], [Float]>);
  unint64_t v16 = lazy protocol witness table accessor for type Zip2Sequence<[Float], [Float]> and conformance Zip2Sequence<A, B>();
  uint64_t v17 = v41;
  uint64_t result = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(v59, (uint64_t)v29, v30, MEMORY[0x263F8D5C8], MEMORY[0x263F8E628], v16, MEMORY[0x263F8E658], v46);
  uint64_t v31 = v17;
  uint64_t v32 = result;
  if (!v17)
  {
    uint64_t v24 = v32;
    outlined destroy of Zip2Sequence<[Float], [Float]>();
    uint64_t v18 = v31;
    uint64_t v69 = v24;
    int v68 = 0;
    uint64_t result = Sequence.reduce<A>(_:_:)();
    uint64_t v25 = v18;
    if (!v18)
    {
      outlined destroy of [A]();
      v23[3] = v27 * v76;
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    goto LABEL_25;
  }
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

BOOL closure #1 in static AUC.rocAUCScore(tpr:fpr:maxFPR:)(float *a1, float a2)
{
  return a2 < *a1;
}

BOOL partial apply for closure #1 in static AUC.rocAUCScore(tpr:fpr:maxFPR:)(float *a1)
{
  return closure #1 in static AUC.rocAUCScore(tpr:fpr:maxFPR:)(a1, *(float *)(v1 + 16));
}

BOOL closure #1 in static AUC.auc(x:y:)(float *a1)
{
  return *a1 < 0.0;
}

BOOL closure #2 in static AUC.auc(x:y:)(float *a1)
{
  return *a1 <= 0.0;
}

float closure #3 in static AUC.auc(x:y:)(float a1, float a2)
{
  return (float)(a1 + a2) / 2.0;
}

unint64_t lazy protocol witness table accessor for type Zip2Sequence<ArraySlice<Float>, ArraySlice<Float>> and conformance Zip2Sequence<A, B>()
{
  uint64_t v2 = lazy protocol witness table cache variable for type Zip2Sequence<ArraySlice<Float>, ArraySlice<Float>> and conformance Zip2Sequence<A, B>;
  if (!lazy protocol witness table cache variable for type Zip2Sequence<ArraySlice<Float>, ArraySlice<Float>> and conformance Zip2Sequence<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Zip2Sequence<ArraySlice<Float>, ArraySlice<Float>>);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Zip2Sequence<ArraySlice<Float>, ArraySlice<Float>> and conformance Zip2Sequence<A, B>);
    return WitnessTable;
  }
  return v2;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of Zip2Sequence<ArraySlice<Float>, ArraySlice<Float>>()
{
}

uint64_t static AUC.bucketConfusionMatrix(outputs:labels:numThresholds:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v51 = a1;
  uint64_t v58 = a2;
  uint64_t v52 = a3;
  uint64_t v62 = closure #1 in static AUC.bucketConfusionMatrix(outputs:labels:numThresholds:);
  uint64_t v53 = partial apply for closure #2 in static AUC.bucketConfusionMatrix(outputs:labels:numThresholds:);
  uint64_t v54 = implicit closure #1 in closure #1 in HealthDataQuantityAverageSamples.result.getter;
  uint64_t v55 = implicit closure #1 in closure #1 in HealthDataQuantityAverageSamples.result.getter;
  unint64_t v56 = partial apply for closure #3 in static AUC.bucketConfusionMatrix(outputs:labels:numThresholds:);
  uint64_t v57 = partial apply for closure #3 in static AUC.bucketConfusionMatrix(outputs:labels:numThresholds:);
  uint64_t v59 = 0;
  uint64_t v91 = 0;
  uint64_t v90 = 0;
  uint64_t v89 = 0;
  uint64_t v84 = 0;
  uint64_t v78 = 0;
  int v74 = 0;
  int v70 = 0;
  uint64_t v68 = 0;
  uint64_t v66 = 0;
  uint64_t v98 = a1;
  uint64_t v97 = a2;
  uint64_t v96 = a3;
  swift_bridgeObjectRetain();
  uint64_t v95 = v58;
  uint64_t v94 = v58;
  uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
  unint64_t v63 = lazy protocol witness table accessor for type [Float] and conformance [A]();
  uint64_t v64 = 0;
  uint64_t v65 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))closure #1 in static AUC.bucketConfusionMatrix(outputs:labels:numThresholds:), 0, v60, MEMORY[0x263F8D5C8], MEMORY[0x263F8E628], v63, MEMORY[0x263F8E658], v61);
  uint64_t v47 = v65;
  uint64_t v93 = v65;
  uint64_t v92 = v51;
  uint64_t v48 = v22;
  uint64_t v3 = (void (*)(char *, char *))MEMORY[0x270FA5388](partial apply for closure #2 in static AUC.bucketConfusionMatrix(outputs:labels:numThresholds:));
  void v21[2] = v4;
  uint64_t v8 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(v3, (uint64_t)v21, v5, MEMORY[0x263F8D6C8], MEMORY[0x263F8E628], v6, MEMORY[0x263F8E658], v7);
  uint64_t v49 = 0;
  uint64_t v50 = v8;
  uint64_t v29 = v8;
  uint64_t v91 = v8;
  uint64_t v30 = static AUC.gatherBucket(labels:bucketIndex:numThresholds:)(v58, v8, v52);
  uint64_t v90 = v30;
  uint64_t v35 = static AUC.gatherBucket(labels:bucketIndex:numThresholds:)(v47, v29, v52);
  uint64_t v89 = v35;
  swift_bridgeObjectRetain();
  v86[1] = v30;
  uint64_t v87 = specialized BidirectionalCollection.reversed()();
  uint64_t v31 = v86;
  v86[0] = v87;
  uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReversedCollection<[Float]>);
  unint64_t v36 = lazy protocol witness table accessor for type ReversedCollection<[Float]> and conformance ReversedCollection<A>();
  uint64_t v37 = MEMORY[0x263F8D608];
  uint64_t v32 = Collection<>.cumSum()(v40, v36, MEMORY[0x263F8D608]);
  outlined destroy of [A]();
  v85[1] = v32;
  uint64_t v88 = specialized BidirectionalCollection.reversed()();
  uint64_t v33 = v85;
  v85[0] = v88;
  unint64_t v41 = lazy protocol witness table accessor for type ReversedCollection<[Float]> and conformance ReversedCollection<A>();
  uint64_t v43 = MEMORY[0x263F8D5C8];
  uint64_t v34 = Array.init<A>(_:)();
  uint64_t v84 = v34;
  swift_bridgeObjectRetain();
  v81[1] = v35;
  uint64_t v82 = specialized BidirectionalCollection.reversed()();
  uint64_t v38 = v81;
  v81[0] = v82;
  uint64_t v39 = Collection<>.cumSum()(v40, v36, v37);
  outlined destroy of [A]();
  uint64_t v80 = v39;
  uint64_t v83 = specialized BidirectionalCollection.reversed()();
  uint64_t v79 = v83;
  uint64_t v42 = Array.init<A>(_:)();
  uint64_t v78 = v42;
  uint64_t v76 = v58;
  uint64_t v44 = &v75;
  int v75 = 0;
  unint64_t v45 = lazy protocol witness table accessor for type [Float] and conformance [A]();
  Sequence.reduce<A>(_:_:)();
  uint64_t v46 = 0;
  int v27 = v77;
  int v74 = v77;
  uint64_t v72 = v47;
  int v71 = 0;
  Sequence.reduce<A>(_:_:)();
  uint64_t v28 = 0;
  int v70 = v73;
  uint64_t v69 = v42;
  uint64_t v24 = v21;
  float v9 = (void (*)(char *, char *))MEMORY[0x270FA5388](v56);
  LODWORD(v21[-2]) = v10;
  uint64_t v14 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(v9, (uint64_t)&v21[-4], v11, MEMORY[0x263F8D5C8], MEMORY[0x263F8E628], v12, MEMORY[0x263F8E658], v13);
  uint64_t v25 = 0;
  uint64_t v26 = v14;
  v22[1] = v14;
  uint64_t v68 = v14;
  uint64_t v67 = v34;
  void v22[2] = v21;
  uint64_t v15 = (void (*)(char *, char *))MEMORY[0x270FA5388](v57);
  LODWORD(v21[-2]) = v16;
  uint64_t v23 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(v15, (uint64_t)&v21[-4], v17, MEMORY[0x263F8D5C8], MEMORY[0x263F8E628], v18, MEMORY[0x263F8E658], v19);
  v22[0] = v23;
  uint64_t v66 = v23;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v34;
}

float closure #1 in static AUC.bucketConfusionMatrix(outputs:labels:numThresholds:)@<S0>(float *a1@<X0>, float *a2@<X8>)
{
  float result = 1.0 - *a1;
  *a2 = result;
  return result;
}

float *closure #2 in static AUC.bucketConfusionMatrix(outputs:labels:numThresholds:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v13 = a3;
  uint64_t v20 = a1;
  uint64_t v19 = a2;
  uint64_t v14 = "Fatal error";
  uint64_t v15 = "Float value cannot be converted to Int because it is either infinite or NaN";
  int v16 = "Swift/IntegerTypes.swift";
  uint64_t v17 = "Float value cannot be converted to Int because the result would be less than Int.min";
  uint64_t v18 = "Float value cannot be converted to Int because the result would be greater than Int.max";
  float v34 = 0.0;
  uint64_t v33 = 0;
  uint64_t v21 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = v21 - 8;
  unint64_t v24 = (*(void *)(v22 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v3 = MEMORY[0x270FA5388](v20);
  uint64_t v25 = (char *)&v9 - v24;
  unint64_t v26 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  float result = (float *)MEMORY[0x270FA5388](v3);
  int v27 = (char *)&v9 - v26;
  float v28 = *result;
  float v34 = v28;
  uint64_t v33 = v6;
  uint64_t v29 = v6 - 1;
  if (__OFSUB__(v6, 1))
  {
    __break(1u);
    goto LABEL_32;
  }
  float v11 = v28 * (float)v29;
  (*(void (**)(char *, void, uint64_t))(v22 + 104))(v27, *MEMORY[0x263F8E218], v21);
  float v32 = v11;
  (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v25, v27, v21);
  int v12 = (*(uint64_t (**)(char *, uint64_t))(v22 + 88))(v25, v21);
  if (v12 == *MEMORY[0x263F8E210])
  {
    float v32 = roundf(v11);
    goto LABEL_19;
  }
  if (v12 == *MEMORY[0x263F8E208])
  {
    float v32 = rintf(v11);
    goto LABEL_19;
  }
  if (v12 == *MEMORY[0x263F8E218]) {
    goto LABEL_16;
  }
  if (v12 == *MEMORY[0x263F8E220]) {
    goto LABEL_18;
  }
  if (v12 == *MEMORY[0x263F8E1F8])
  {
    float v32 = truncf(v11);
    goto LABEL_19;
  }
  if (v12 != *MEMORY[0x263F8E200])
  {
    Float._roundSlowPath(_:)();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v25, v21);
    goto LABEL_19;
  }
  if (Float.sign.getter()) {
LABEL_18:
  }
    float v32 = floorf(v11);
  else {
LABEL_16:
  }
    float v32 = ceilf(v11);
LABEL_19:
  float v10 = v32;
  float result = (float *)(*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v27, v21);
  if ((LODWORD(v10) >> 23) == 255)
  {
    float result = (float *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  if (v10 <= -9.2234e18)
  {
    float result = (float *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  if (v10 >= 9.2234e18)
  {
    float result = (float *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  uint64_t v9 = (uint64_t)v10 - 1;
  if (!__OFSUB__((uint64_t)v10, 1))
  {
    uint64_t v31 = v9;
    uint64_t v30 = 0;
    return (float *)max<A>(_:_:)();
  }
LABEL_32:
  __break(1u);
  return result;
}

float *partial apply for closure #2 in static AUC.bucketConfusionMatrix(outputs:labels:numThresholds:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #2 in static AUC.bucketConfusionMatrix(outputs:labels:numThresholds:)(a1, *(void *)(v2 + 16), a2);
}

uint64_t static AUC.gatherBucket(labels:bucketIndex:numThresholds:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = 0;
  uint64_t v12 = a1;
  uint64_t v11 = a2;
  uint64_t v10 = a3;
  int v8 = 0;
  uint64_t v9 = specialized Array.init(repeating:count:)();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
  unint64_t v3 = lazy protocol witness table accessor for type [Int] and conformance [A]();
  MEMORY[0x25A2C0660](&v7, v6, v3);
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EnumeratedSequence<[Int]>);
  lazy protocol witness table accessor for type EnumeratedSequence<[Int]> and conformance EnumeratedSequence<A>();
  Sequence.forEach(_:)();
  swift_bridgeObjectRelease();
  outlined destroy of [A]();
  uint64_t v5 = v9;
  swift_bridgeObjectRetain();
  outlined destroy of [A]();
  return v5;
}

float closure #3 in static AUC.bucketConfusionMatrix(outputs:labels:numThresholds:)@<S0>(float *a1@<X0>, float *a2@<X8>, float a3@<S0>)
{
  float result = a3 - *a1;
  *a2 = result;
  return result;
}

float partial apply for closure #3 in static AUC.bucketConfusionMatrix(outputs:labels:numThresholds:)@<S0>(float *a1@<X0>, float *a2@<X8>)
{
  return closure #3 in static AUC.bucketConfusionMatrix(outputs:labels:numThresholds:)(a1, a2, *(float *)(v2 + 16));
}

uint64_t closure #1 in static AUC.gatherBucket(labels:bucketIndex:numThresholds:)()
{
  specialized Array.subscript.getter();
  float v5 = v0;
  specialized Array.subscript.getter();
  float v6 = v5 + v1;
  uint64_t v2 = (uint64_t (*)(void))specialized Array.subscript.modify();
  *unint64_t v3 = v6;
  return v2();
}

uint64_t partial apply for closure #1 in static AUC.gatherBucket(labels:bucketIndex:numThresholds:)()
{
  return closure #1 in static AUC.gatherBucket(labels:bucketIndex:numThresholds:)();
}

ValueMetadata *type metadata accessor for MetricsUtils()
{
  return &type metadata for MetricsUtils;
}

ValueMetadata *type metadata accessor for AUC()
{
  return &type metadata for AUC;
}

uint64_t outlined destroy of A.Element?(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v5 + 48))(a1, 1)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, a2);
  }
  return a1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of ContiguousArray<A1>()
{
}

BOOL static ImputationStrategy.== infix(_:_:)(char a1, char a2)
{
  return ((a1 & 1) != 0) == (unint64_t)((a2 & 1) != 0);
}

uint64_t ImputationStrategy.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

uint64_t ImputationStrategy.hashValue.getter()
{
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type ImputationStrategy and conformance ImputationStrategy()
{
  uint64_t v2 = lazy protocol witness table cache variable for type ImputationStrategy and conformance ImputationStrategy;
  if (!lazy protocol witness table cache variable for type ImputationStrategy and conformance ImputationStrategy)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type ImputationStrategy and conformance ImputationStrategy);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type ImputationStrategy and conformance ImputationStrategy;
  if (!lazy protocol witness table cache variable for type ImputationStrategy and conformance ImputationStrategy)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type ImputationStrategy and conformance ImputationStrategy);
    return WitnessTable;
  }
  return v2;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ImputationStrategy(unsigned char *a1, unsigned char *a2)
{
  return static ImputationStrategy.== infix(_:_:)(*a1 & 1, *a2 & 1);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance ImputationStrategy()
{
  return ImputationStrategy.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ImputationStrategy()
{
  return ImputationStrategy.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ImputationStrategy(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t static Imputation.imputeFlow(flow:day:days:flowImputed:imputeValue:)(unsigned int a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, unsigned int a5)
{
  swift_bridgeObjectRetain();
  char v10 = Set.contains(_:)();
  swift_bridgeObjectRelease();
  if ((v10 & 1) != 0 && a1 == a4) {
    return a5;
  }
  else {
    return a1;
  }
}

uint64_t static Imputation.impute(required:available:target:strategy:imputedDay:)(uint64_t result, uint64_t a2, int a3, char a4, uint64_t a5)
{
  char v20 = result & 1;
  uint64_t v19 = a2;
  int v18 = a3;
  char v17 = a4 & 1;
  uint64_t v16 = a5;
  if (result)
  {
    if (a4)
    {
      int v13 = a3;
      float result = static HIDPFLUtils.findClosest<A>(_:target:)(a2, (uint64_t)&v13, MEMORY[0x263F8E8F8], MEMORY[0x263F8E910], MEMORY[0x263F8E930], (uint64_t)&v14);
      if (v15)
      {
        int v5 = 0;
        char v6 = 1;
      }
      else
      {
        int v5 = v14;
        char v6 = 0;
      }
      *(_DWORD *)a5 = v5;
      *(unsigned char *)(a5 + 4) = v6 & 1;
    }
    else
    {
      int v10 = a3;
      float result = static HIDPFLUtils.findClosest<A>(_:lessOrEqualThan:)(a2, (uint64_t)&v10, MEMORY[0x263F8E8F8], MEMORY[0x263F8E910], (uint64_t)&v11);
      if (v12)
      {
        int v7 = 0;
        char v8 = 1;
      }
      else
      {
        int v7 = v11;
        char v8 = 0;
      }
      *(_DWORD *)a5 = v7;
      *(unsigned char *)(a5 + 4) = v8 & 1;
    }
  }
  return result;
}

uint64_t static Imputation.ensureImputation(required:available:target:strategy:missingCounter:imputedDay:)(char a1, uint64_t a2, int a3, char a4, void *a5, uint64_t a6)
{
  if ((a1 & 1) == 0
    || (uint64_t result = static Imputation.impute(required:available:target:strategy:imputedDay:)(1, a2, a3, a4 & 1, a6),
        (*(unsigned char *)(a6 + 4) & 1) == 0))
  {
    char v8 = 1;
    return v8 & 1;
  }
  if (!__OFADD__(*a5, 1))
  {
    ++*a5;
    char v8 = 0;
    return v8 & 1;
  }
  __break(1u);
  return result;
}

float static Imputation.imputeCalendarPrediction(calendarPeriodPredictions:target:lastPredictionDay:)(uint64_t a1, int a2, _DWORD *a3)
{
  float v20 = 0.0;
  int v19 = 0;
  uint64_t v23 = a1;
  int v22 = a2;
  uint64_t v21 = a3;
  int v16 = *a3;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (periodStartMean: Float, periodStartStd: Float));
  MEMORY[0x25A2C04B0](&v17, &v16, a1, MEMORY[0x263F8E8F8]);
  if (v18)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v8 = v17;
  }
  int v19 = HIDWORD(v8);
  float v20 = *(float *)&v8;
  int v13 = a2;
  MEMORY[0x25A2C04B0](&v14, &v13, a1, MEMORY[0x263F8E8F8], v12, MEMORY[0x263F8E908]);
  if ((v15 & 1) == 0)
  {
    int v19 = HIDWORD(v14);
    float v20 = *(float *)&v14;
    *a3 = a2;
  }
  float v7 = v20;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  Float.init<A>(_:)();
  float v6 = v3;
  Float.init<A>(_:)();
  return v7 - (float)(v6 - v4);
}

uint64_t getEnumTagSinglePayload for ImputationStrategy(unsigned __int8 *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 <= 0xFE) {
      goto LABEL_15;
    }
    unsigned int v7 = ((a2 + 1) >> 8) + 1;
    int v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000) {
        int v2 = 4;
      }
      else {
        int v2 = 2;
      }
      int v8 = v2;
    }
    if (v8 == 1) {
      int v6 = a1[1];
    }
    else {
      int v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    }
    if (v6)
    {
      int v5 = (*a1 | ((v6 - 1) << 8)) + 254;
    }
    else
    {
LABEL_15:
      int v3 = *a1 - 2;
      if (v3 < 0) {
        int v3 = -1;
      }
      int v5 = v3;
    }
  }
  else
  {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for ImputationStrategy(unsigned char *result, unsigned int a2, unsigned int a3)
{
  int v7 = 0;
  if (a3 > 0xFE)
  {
    unsigned int v5 = ((a3 + 1) >> 8) + 1;
    int v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000) {
        int v3 = 4;
      }
      else {
        int v3 = 2;
      }
      int v6 = v3;
    }
    int v7 = v6;
  }
  if (a2 > 0xFE)
  {
    unsigned int v4 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2) {
      *uint64_t result = a2 + 1;
    }
  }
  return result;
}

uint64_t getEnumTag for ImputationStrategy(unsigned char *a1)
{
  return *a1 & 1;
}

unsigned char *destructiveInjectEnumTag for ImputationStrategy(unsigned char *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ImputationStrategy()
{
  return &type metadata for ImputationStrategy;
}

ValueMetadata *type metadata accessor for Imputation()
{
  return &type metadata for Imputation;
}

unint64_t base witness table accessor for Equatable in ImputationStrategy()
{
  return lazy protocol witness table accessor for type ImputationStrategy and conformance ImputationStrategy();
}

void __swiftcall AggMetrics.init(from:)(NightingaleTraining::AggMetrics *__return_ptr retstr, Swift::OpaquePointer from)
{
  memset(__b, 0, sizeof(__b));
  uint64_t rawValue = from._rawValue;
  float v20 = (float)MEMORY[0x25A2C0810]();
  float v36 = v20;
  uint64_t v22 = MEMORY[0x25A2C0810](from._rawValue, &type metadata for PerSliceMetrics);
  __b[17] = v22;
  uint64_t v35 = from._rawValue;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PerSliceMetrics]);
  unint64_t v25 = lazy protocol witness table accessor for type [PerSliceMetrics] and conformance [A]();
  uint64_t v34 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))closure #1 in AggMetrics.init(from:), 0, v23, MEMORY[0x263F8D5C8], MEMORY[0x263F8E628], v25, MEMORY[0x263F8E658], v24);
  uint64_t v33 = from._rawValue;
  uint64_t v32 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))closure #2 in AggMetrics.init(from:), 0, v23, MEMORY[0x263F8D5C8], MEMORY[0x263F8E628], v25, MEMORY[0x263F8E658], v24);
  uint64_t v31 = from._rawValue;
  uint64_t v30 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))closure #3 in AggMetrics.init(from:), 0, v23, MEMORY[0x263F8D5C8], MEMORY[0x263F8E628], v25, MEMORY[0x263F8E658], v24);
  float v29 = 3.0;
  static PFLStats.lessEqual<A>(vector:value:)();
  uint64_t v16 = Array<A>.sum.getter();
  swift_bridgeObjectRelease();
  __b[1] = v16;
  *(float *)__b = (float)v16 / v20;
  float v28 = 6.0;
  static PFLStats.greater<A>(vector:value:)();
  uint64_t v17 = Array<A>.sum.getter();
  swift_bridgeObjectRelease();
  __b[3] = v17;
  *(float *)&__b[2] = (float)v17 / v20;
  static PFLStats.mean(_:)();
  LODWORD(v18) = v2;
  LODWORD(__b[4]) = v2;
  static PFLStats.sum(_:)();
  HIDWORD(v18) = v3;
  HIDWORD(__b[4]) = v3;
  v26[19] = from._rawValue;
  v26[18] = 0;
  lazy protocol witness table accessor for type [PerSliceMetrics] and conformance [A]();
  Sequence.reduce<A>(_:_:)();
  uint64_t v9 = v27;
  __b[6] = v27;
  float v8 = (float)v27 / v20;
  *(float *)&__b[5] = v8;
  static PFLStats.sum(_:)();
  HIDWORD(v10) = v4;
  HIDWORD(__b[7]) = v4;
  static PFLStats.mean(_:)();
  LODWORD(v10) = v5;
  LODWORD(__b[7]) = v5;
  static PFLStats.greater<A>(vector:value:)();
  uint64_t v11 = Array<A>.sum.getter();
  swift_bridgeObjectRelease();
  __b[9] = v11;
  *(float *)&__b[8] = (float)v11 / v20;
  static PFLStats.sum(_:)();
  HIDWORD(v12) = v6;
  HIDWORD(__b[10]) = v6;
  static PFLStats.mean(_:)();
  LODWORD(v12) = v7;
  LODWORD(__b[10]) = v7;
  static PFLStats.greaterEqual<A>(vector:value:)();
  uint64_t v13 = Array<A>.sum.getter();
  swift_bridgeObjectRelease();
  __b[12] = v13;
  *(float *)&__b[11] = (float)v13 / v20;
  static PFLStats.greaterEqual<A>(vector:value:)();
  uint64_t v14 = Array<A>.sum.getter();
  swift_bridgeObjectRelease();
  __b[14] = v14;
  *(float *)&__b[13] = (float)v14 / v20;
  static PFLStats.greaterEqual<A>(vector:value:)();
  uint64_t v15 = Array<A>.sum.getter();
  swift_bridgeObjectRelease();
  __b[16] = v15;
  *(float *)&__b[15] = (float)v15 / v20;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(float *)unint64_t v26 = (float)v16 / v20;
  v26[1] = v16;
  *(float *)&v26[2] = (float)v17 / v20;
  v26[3] = v17;
  v26[4] = v18;
  *(float *)&void v26[5] = v8;
  v26[6] = v9;
  v26[7] = v10;
  *(float *)&v26[8] = (float)v11 / v20;
  v26[9] = v11;
  v26[10] = v12;
  *(float *)&v26[11] = (float)v13 / v20;
  v26[12] = v13;
  *(float *)&v26[13] = (float)v14 / v20;
  v26[14] = v14;
  *(float *)&v26[15] = (float)v15 / v20;
  v26[16] = v15;
  v26[17] = v22;
  swift_bridgeObjectRelease();
  memcpy(retstr, v26, sizeof(NightingaleTraining::AggMetrics));
}

float closure #1 in AggMetrics.init(from:)@<S0>(uint64_t *a1@<X0>, float *a2@<X8>)
{
  float result = (float)*a1;
  *a2 = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type [PerSliceMetrics] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [PerSliceMetrics] and conformance [A];
  if (!lazy protocol witness table cache variable for type [PerSliceMetrics] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [PerSliceMetrics]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [PerSliceMetrics] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type [PerSliceMetrics] and conformance [A];
  if (!lazy protocol witness table cache variable for type [PerSliceMetrics] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [PerSliceMetrics]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [PerSliceMetrics] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

float closure #2 in AggMetrics.init(from:)@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  float result = (float)*(uint64_t *)(a1 + 16);
  *a2 = result;
  return result;
}

float closure #3 in AggMetrics.init(from:)@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  float result = (float)*(uint64_t *)(a1 + 24);
  *a2 = result;
  return result;
}

BOOL closure #4 in AggMetrics.init(from:)@<W0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = *a1;
  BOOL result = Bool.intValue.getter(*(unsigned char *)(a2 + 8) & 1);
  if (__OFADD__(v6, result)) {
    __break(1u);
  }
  else {
    *a3 = v6 + result;
  }
  return result;
}

uint64_t AggMetrics.toDictionary(prefix:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v68 = v0;
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v1);
  swift_bridgeObjectRelease();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  Swift::String v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("_ep3", 4uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  *(void *)uint64_t v68 = String.init(stringInterpolation:)();
  *(void *)(v68 + 8) = v3;
  int v89 = *v66;
  uint64_t v65 = MEMORY[0x263F8D5C8];
  *(void *)(v68 + 40) = MEMORY[0x263F8D5C8];
  *(_DWORD *)(v68 + 16) = v89;
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  Swift::String v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v4);
  swift_bridgeObjectRelease();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  Swift::String v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("_ep3Num", 7uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  *(void *)(v68 + 48) = String.init(stringInterpolation:)();
  *(void *)(v68 + 56) = v6;
  uint64_t v88 = *((void *)v66 + 1);
  uint64_t v67 = MEMORY[0x263F8D6C8];
  *(void *)(v68 + 88) = MEMORY[0x263F8D6C8];
  *(void *)(v68 + 64) = v88;
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  Swift::String v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v7);
  swift_bridgeObjectRelease();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  Swift::String v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("_nep6", 5uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  *(void *)(v68 + 96) = String.init(stringInterpolation:)();
  *(void *)(v68 + 104) = v9;
  int v87 = v66[4];
  *(void *)(v68 + 136) = v65;
  *(_DWORD *)(v68 + 112) = v87;
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  Swift::String v10 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v10);
  swift_bridgeObjectRelease();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  Swift::String v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("_nep6Num", 8uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  *(void *)(v68 + 144) = String.init(stringInterpolation:)();
  *(void *)(v68 + 152) = v12;
  uint64_t v86 = *((void *)v66 + 3);
  *(void *)(v68 + 184) = v67;
  *(void *)(v68 + 160) = v86;
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  Swift::String v13 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v13);
  swift_bridgeObjectRelease();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  Swift::String v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("_mae", 4uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  *(void *)(v68 + 192) = String.init(stringInterpolation:)();
  *(void *)(v68 + 200) = v15;
  int v85 = v66[8];
  *(void *)(v68 + 232) = v65;
  *(_DWORD *)(v68 + 208) = v85;
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  Swift::String v16 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v16);
  swift_bridgeObjectRelease();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  Swift::String v17 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("_sae", 4uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  *(void *)(v68 + 240) = String.init(stringInterpolation:)();
  *(void *)(v68 + 248) = v18;
  int v84 = v66[9];
  *(void *)(v68 + 280) = v65;
  *(_DWORD *)(v68 + 256) = v84;
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  Swift::String v19 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v19);
  swift_bridgeObjectRelease();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  Swift::String v20 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("_coverage", 9uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  *(void *)(v68 + 288) = String.init(stringInterpolation:)();
  *(void *)(v68 + 296) = v21;
  int v83 = v66[10];
  *(void *)(v68 + 328) = v65;
  *(_DWORD *)(v68 + 304) = v83;
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  Swift::String v22 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v22);
  swift_bridgeObjectRelease();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  Swift::String v23 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("_coverageNum", 0xCuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  *(void *)(v68 + 336) = String.init(stringInterpolation:)();
  *(void *)(v68 + 344) = v24;
  uint64_t v82 = *((void *)v66 + 6);
  *(void *)(v68 + 376) = v67;
  *(void *)(v68 + 352) = v82;
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  Swift::String v25 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v25);
  swift_bridgeObjectRelease();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  Swift::String v26 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("_meanWidth", 0xAuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v26);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  *(void *)(v68 + 384) = String.init(stringInterpolation:)();
  *(void *)(v68 + 392) = v27;
  int v81 = v66[14];
  *(void *)(v68 + 424) = v65;
  *(_DWORD *)(v68 + 400) = v81;
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  Swift::String v28 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v28);
  swift_bridgeObjectRelease();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  Swift::String v29 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("_sumWidth", 9uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v29);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  *(void *)(v68 + 432) = String.init(stringInterpolation:)();
  *(void *)(v68 + 440) = v30;
  int v80 = v66[15];
  *(void *)(v68 + 472) = v65;
  *(_DWORD *)(v68 + 448) = v80;
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  Swift::String v31 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v31);
  swift_bridgeObjectRelease();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  Swift::String v32 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("_uxWidthTolerable", 0x11uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  *(void *)(v68 + 480) = String.init(stringInterpolation:)();
  *(void *)(v68 + 488) = v33;
  int v79 = v66[16];
  *(void *)(v68 + 520) = v65;
  *(_DWORD *)(v68 + 496) = v79;
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  Swift::String v34 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v34);
  swift_bridgeObjectRelease();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  Swift::String v35 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("_uxWidthTolerableNum", 0x14uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v35);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  *(void *)(v68 + 528) = String.init(stringInterpolation:)();
  *(void *)(v68 + 536) = v36;
  uint64_t v78 = *((void *)v66 + 9);
  *(void *)(v68 + 568) = v67;
  *(void *)(v68 + 544) = v78;
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  Swift::String v37 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v37);
  swift_bridgeObjectRelease();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  Swift::String v38 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("_uxOverallMean", 0xEuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v38);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  *(void *)(v68 + 576) = String.init(stringInterpolation:)();
  *(void *)(v68 + 584) = v39;
  int v77 = v66[20];
  *(void *)(v68 + 616) = v65;
  *(_DWORD *)(v68 + 592) = v77;
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  Swift::String v40 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v40);
  swift_bridgeObjectRelease();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  Swift::String v41 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("_uxOverallSum", 0xDuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v41);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  *(void *)(v68 + 624) = String.init(stringInterpolation:)();
  *(void *)(v68 + 632) = v42;
  int v76 = v66[21];
  *(void *)(v68 + 664) = v65;
  *(_DWORD *)(v68 + 640) = v76;
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  Swift::String v43 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v43);
  swift_bridgeObjectRelease();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  Swift::String v44 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("_uxOverallGood", 0xEuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v44);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  *(void *)(v68 + 672) = String.init(stringInterpolation:)();
  *(void *)(v68 + 680) = v45;
  int v75 = v66[22];
  *(void *)(v68 + 712) = v65;
  *(_DWORD *)(v68 + 688) = v75;
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  Swift::String v46 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v46);
  swift_bridgeObjectRelease();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  Swift::String v47 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("_uxOverallGoodNum", 0x11uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v47);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  *(void *)(v68 + 720) = String.init(stringInterpolation:)();
  *(void *)(v68 + 728) = v48;
  uint64_t v74 = *((void *)v66 + 12);
  *(void *)(v68 + 760) = v67;
  *(void *)(v68 + 736) = v74;
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  Swift::String v49 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v49);
  swift_bridgeObjectRelease();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  Swift::String v50 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("_uxOverallOk", 0xCuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v50);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  *(void *)(v68 + 768) = String.init(stringInterpolation:)();
  *(void *)(v68 + 776) = v51;
  int v73 = v66[26];
  *(void *)(v68 + 808) = v65;
  *(_DWORD *)(v68 + 784) = v73;
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  Swift::String v52 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v52);
  swift_bridgeObjectRelease();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  Swift::String v53 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("_uxOverallOkNum", 0xFuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v53);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  *(void *)(v68 + 816) = String.init(stringInterpolation:)();
  *(void *)(v68 + 824) = v54;
  uint64_t v72 = *((void *)v66 + 14);
  *(void *)(v68 + 856) = v67;
  *(void *)(v68 + 832) = v72;
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  Swift::String v55 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v55);
  swift_bridgeObjectRelease();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  Swift::String v56 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("_uxOverallTolerable", 0x13uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v56);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  *(void *)(v68 + 864) = String.init(stringInterpolation:)();
  *(void *)(v68 + 872) = v57;
  int v71 = v66[30];
  *(void *)(v68 + 904) = v65;
  *(_DWORD *)(v68 + 880) = v71;
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  Swift::String v58 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v58);
  swift_bridgeObjectRelease();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  Swift::String v59 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("_uxOverallTolerableNum", 0x16uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v59);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  *(void *)(v68 + 912) = String.init(stringInterpolation:)();
  *(void *)(v68 + 920) = v60;
  uint64_t v70 = *((void *)v66 + 16);
  *(void *)(v68 + 952) = v67;
  *(void *)(v68 + 928) = v70;
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  Swift::String v61 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v61);
  swift_bridgeObjectRelease();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  Swift::String v62 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("_nSlices", 8uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v62);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  *(void *)(v68 + 960) = String.init(stringInterpolation:)();
  *(void *)(v68 + 968) = v63;
  uint64_t v69 = *((void *)v66 + 17);
  *(void *)(v68 + 1000) = v67;
  *(void *)(v68 + 976) = v69;
  _finalizeUninitializedArray<A>(_:)();
  return Dictionary.init(dictionaryLiteral:)();
}

NightingaleTraining::PerSliceMetrics __swiftcall PerSliceMetrics.init(abserr:coverage:width:uxOverall:)(Swift::Int abserr, Swift::Bool coverage, Swift::Int width, Swift::Int uxOverall)
{
  Swift::Bool v4 = coverage;
  result.uxOverall = uxOverall;
  result.width = width;
  result.abserr = abserr;
  result.coverage = v4;
  return result;
}

uint64_t EvalMetricsProcessor.process(labels:outputs:modelMaxNumDaysToNextPeriod:labelEncodingType:intervalCorrectionFactor:)(uint64_t *a1, uint64_t *a2, uint64_t a3, float a4)
{
  uint64_t v20 = *a2;
  swift_bridgeObjectRetain();
  uint64_t v21 = MEMORY[0x25A2C0820](v20);
  swift_bridgeObjectRelease();
  uint64_t v23 = *a1;
  swift_bridgeObjectRetain();
  uint64_t v24 = MEMORY[0x25A2C0830](v23);
  swift_bridgeObjectRelease();
  if (!v24)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  if (v21 == 0x8000000000000000 && v24 == -1)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  uint64_t v14 = v21 / v24;
  HyperParams.labelEncodingTypeRegression.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  char v15 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  if ((v15 & 1) != 0 && v14 == 2)
  {
    uint64_t v11 = *a1;
    swift_bridgeObjectRetain();
    uint64_t v12 = MEMORY[0x25A2C0830](v11);
    swift_bridgeObjectRelease();
    return EvalMetricsProcessor.processModelOutput2(numLabels:outputs:modelMaxNumDaysToNextPeriod:)(v12);
  }
  HyperParams.labelEncodingTypeOnehot.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  char v10 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  if ((v10 & 1) != 0 && v14 == 32)
  {
    uint64_t v8 = *a1;
    swift_bridgeObjectRetain();
    uint64_t v9 = MEMORY[0x25A2C0830](v8);
    swift_bridgeObjectRelease();
    EvalMetricsProcessor.processModelOutput32(numLabels:outputs:modelMaxNumDaysToNextPeriod:intervalCorrectionFactor:minLowRangeStart:)(v9, (uint64_t)a2, (float)a3, a4, 1.0);
    if (!v19) {
      return v4;
    }
  }
  else
  {
    lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
    swift_allocError();
    *Swift::String v5 = 27;
    swift_willThrow();
  }
  return v7;
}

uint64_t EvalMetricsProcessor.processModelOutput2(numLabels:outputs:modelMaxNumDaysToNextPeriod:)(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (darkRedStart: Float, lowRangeStart: Float, lowRangeEnd: Float));
  uint64_t v6 = Array.init()();
  if (a1 < 0)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  specialized Collection<>.makeIterator()();
  while (1)
  {
    uint64_t result = specialized IndexingIterator.next()();
    uint64_t v4 = result;
    if (v2)
    {
      swift_bridgeObjectRetain();
      outlined destroy of [A]();
      return v6;
    }
    if ((unsigned __int128)(2 * (__int128)result) >> 64 != (2 * result) >> 63) {
      break;
    }
    if (__OFADD__(1, 2 * result)) {
      goto LABEL_14;
    }
    uint64_t result = specialized Array.subscript.getter();
    if ((unsigned __int128)(2 * (__int128)v4) >> 64 != (2 * v4) >> 63) {
      goto LABEL_15;
    }
    specialized Array.subscript.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(darkRedStart: Float, lowRangeStart: Float, lowRangeEnd: Float)]);
    Array.append(_:)();
  }
  __break(1u);
LABEL_14:
  __break(1u);
LABEL_15:
  __break(1u);
  return result;
}

void EvalMetricsProcessor.processModelOutput32(numLabels:outputs:modelMaxNumDaysToNextPeriod:intervalCorrectionFactor:minLowRangeStart:)(uint64_t a1, uint64_t a2, float a3, float a4, float a5)
{
  float v136 = &v166;
  uint64_t v137 = a1;
  uint64_t v119 = a2;
  float v116 = a3;
  float v117 = a4;
  float v118 = a5;
  uint64_t v109 = "Fatal error";
  uint64_t v110 = "Range requires lowerBound <= upperBound";
  uint64_t v111 = "Swift/Range.swift";
  uint64_t v112 = "Float value cannot be converted to Int because it is either infinite or NaN";
  uint64_t v113 = "Swift/IntegerTypes.swift";
  int v114 = "Float value cannot be converted to Int because the result would be less than Int.min";
  id v115 = "Float value cannot be converted to Int because the result would be greater than Int.max";
  uint64_t v178 = 0;
  uint64_t v177 = 0;
  int v176 = 0;
  int v175 = 0;
  int v174 = 0;
  uint64_t v173 = 0;
  uint64_t v170 = 0;
  uint64_t v171 = 0;
  uint64_t v172 = 0;
  v168[1] = 0;
  v168[0] = 0;
  uint64_t v166 = 0;
  float v164 = 0.0;
  float v162 = 0.0;
  float v160 = 0.0;
  float v158 = 0.0;
  uint64_t v156 = 0;
  uint64_t v155 = 0;
  uint64_t v154 = 0;
  uint64_t v153 = 0;
  uint64_t v152 = 0;
  uint64_t v151 = 0;
  float v150 = 0.0;
  uint64_t v149 = 0;
  uint64_t v148 = 0;
  float v145 = 0.0;
  float v144 = 0.0;
  float v143 = 0.0;
  char v142 = 0;
  float v141 = 0.0;
  float v140 = 0.0;
  float v139 = 0.0;
  uint64_t v120 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v121 = *(void *)(v120 - 8);
  uint64_t v122 = v120 - 8;
  uint64_t v132 = *(void *)(v121 + 64);
  unint64_t v123 = (v132 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v5 = MEMORY[0x270FA5388](v137);
  uint64_t v124 = (char *)v52 - v123;
  unint64_t v125 = v123;
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  uint64_t v126 = (char *)v52 - v125;
  unint64_t v127 = (v132 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v7 = MEMORY[0x270FA5388](v6);
  uint64_t v128 = (char *)v52 - v127;
  unint64_t v129 = (v132 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v8 = MEMORY[0x270FA5388](v7);
  uint64_t v130 = (char *)v52 - v129;
  unint64_t v131 = (v132 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  float v133 = (char *)v52 - v131;
  unint64_t v134 = (v132 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = MEMORY[0x270FA5388](v9);
  float v135 = (char *)v52 - v134;
  *(void *)(v11 + 152) = v10;
  *(void *)(v11 + 144) = v12;
  int v176 = v13;
  int v175 = v14;
  int v174 = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (darkRedStart: Float, lowRangeStart: Float, lowRangeEnd: Float));
  uint64_t v16 = Array.init()();
  uint64_t v17 = v137;
  v136[14] = v16;
  if (v17 < 0)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  uint64_t v18 = v136;
  uint64_t v19 = v137;
  v136[9] = 0;
  v18[10] = v19;
  uint64_t v20 = specialized Collection<>.makeIterator()();
  uint64_t v21 = v136;
  uint64_t v22 = v108;
  v136[11] = v20;
  v21[12] = v23;
  v21[13] = v24;
  for (uint64_t i = v22; ; uint64_t i = v97)
  {
    uint64_t v105 = i;
    uint64_t v25 = specialized IndexingIterator.next()();
    Swift::String v26 = v136;
    v136[7] = v25;
    char v169 = v27 & 1;
    uint64_t v106 = v26[7];
    if (v27)
    {
      v52[2] = &v173;
      v52[3] = v136[14];
      swift_bridgeObjectRetain();
      outlined destroy of [A]();
      return;
    }
    uint64_t v104 = v106;
    uint64_t v28 = v106;
    uint64_t v102 = v106;
    v136[6] = v106;
    uint64_t v103 = 32 * v28;
    if ((unsigned __int128)(v28 * (__int128)32) >> 64 != (32 * v28) >> 63) {
      break;
    }
    uint64_t v101 = v102 + 1;
    if (__OFADD__(v102, 1)) {
      goto LABEL_134;
    }
    uint64_t v100 = 32 * v101;
    if ((unsigned __int128)(v101 * (__int128)32) >> 64 != (32 * v101) >> 63) {
      goto LABEL_135;
    }
    if (v100 < v103)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    uint64_t v94 = MEMORY[0x263F8D5C8];
    uint64_t v30 = Array.subscript.getter();
    Swift::String v31 = v136;
    uint64_t v93 = &v167;
    v136[1] = v30;
    v31[2] = v32;
    v31[3] = v33;
    v31[4] = v34;
    uint64_t v92 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ArraySlice<Float>);
    lazy protocol witness table accessor for type ArraySlice<Float> and conformance ArraySlice<A>();
    uint64_t v35 = Array.init<A>(_:)();
    uint64_t v95 = v168;
    v136[5] = v35;
    uint64_t v36 = _allocateUninitializedArray<A>(_:)();
    _DWORD *v37 = 1036831949;
    v37[1] = 1045220557;
    void v37[2] = 1061997773;
    v37[3] = 1063675494;
    _finalizeUninitializedArray<A>(_:)();
    uint64_t v38 = v105;
    uint64_t v96 = v36;
    uint64_t v39 = static EvalMetricsProcessor.argQuantile(softmax:quantiles:)();
    uint64_t v97 = v38;
    uint64_t v98 = v39;
    uint64_t v99 = v38;
    if (v38)
    {
      v52[1] = v99;
      swift_bridgeObjectRelease();
      outlined destroy of [A]();
      outlined destroy of [A]();
      return;
    }
    uint64_t v79 = v98;
    swift_bridgeObjectRelease();
    *float v136 = v79;
    specialized Array.subscript.getter();
    float v165 = v40;
    float v78 = v40;
    float v164 = v40;
    specialized Array.subscript.getter();
    float v163 = v41;
    float v81 = v41;
    float v162 = v41;
    specialized Array.subscript.getter();
    float v161 = v42;
    float v80 = v42;
    float v160 = v42;
    specialized Array.subscript.getter();
    float v159 = v43;
    float v82 = v43;
    float v158 = v43;
    float v85 = (float)(v81 + v80) / 2.0;
    uint64_t v90 = (_DWORD *)MEMORY[0x263F8E210];
    uint64_t v44 = *MEMORY[0x263F8E210];
    int v83 = *(void (**)(char *, uint64_t, uint64_t))(v121 + 104);
    uint64_t v84 = v121 + 104;
    v83(v135, v44, v120);
    float v157 = v85;
    uint64_t v86 = *(void (**)(char *, char *, uint64_t))(v121 + 16);
    uint64_t v87 = v121 + 16;
    v86(v133, v135, v120);
    uint64_t v88 = *(uint64_t (**)(char *, uint64_t))(v121 + 88);
    uint64_t v89 = v121 + 88;
    int v91 = v88(v133, v120);
    if (v91 == *v90)
    {
      float v157 = roundf(v85);
    }
    else if (v91 == *MEMORY[0x263F8E208])
    {
      float v157 = rintf(v85);
    }
    else
    {
      if (v91 == *MEMORY[0x263F8E218]) {
        goto LABEL_25;
      }
      if (v91 == *MEMORY[0x263F8E220]) {
        goto LABEL_27;
      }
      if (v91 == *MEMORY[0x263F8E1F8])
      {
        float v157 = truncf(v85);
      }
      else
      {
        if (v91 == *MEMORY[0x263F8E200])
        {
          if (Float.sign.getter())
          {
LABEL_27:
            float v157 = floorf(v85);
            goto LABEL_28;
          }
LABEL_25:
          float v157 = ceilf(v85);
          goto LABEL_28;
        }
        Float._roundSlowPath(_:)();
        (*(void (**)(char *, uint64_t))(v121 + 8))(v133, v120);
      }
    }
LABEL_28:
    int v75 = *(void (**)(char *, uint64_t))(v121 + 8);
    uint64_t v76 = v121 + 8;
    v75(v135, v120);
    float v77 = v157;
    if ((LODWORD(v157) >> 23) == 255)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    if (v77 <= -9.2234e18)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    if (v77 >= 9.2234e18)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    uint64_t v74 = (uint64_t)v77;
    uint64_t v156 = (uint64_t)v77;
    if ((LODWORD(v78) >> 23) == 255)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    if (v78 <= -9.2234e18)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    if (v78 >= 9.2234e18)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    uint64_t v73 = (uint64_t)v78;
    uint64_t v155 = (uint64_t)v78;
    if ((LODWORD(v82) >> 23) == 255)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    if (v82 <= -9.2234e18)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    if (v82 >= 9.2234e18)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    uint64_t v71 = (uint64_t)v82;
    uint64_t v154 = (uint64_t)v82;
    uint64_t v72 = v74 - v73;
    if (__OFSUB__(v74, v73)) {
      goto LABEL_136;
    }
    uint64_t v153 = v72;
    uint64_t v70 = v71 - v74;
    if (__OFSUB__(v71, v74)) {
      goto LABEL_137;
    }
    uint64_t v152 = v70;
    uint64_t v69 = v71 - v73;
    if (__OFSUB__(v71, v73)) {
      goto LABEL_138;
    }
    uint64_t v151 = v69;
    float v68 = (float)v69 * v117;
    float v150 = v68;
    uint64_t v149 = 0;
    uint64_t v148 = 0;
    if (!v69)
    {
      uint64_t v149 = v72;
      uint64_t v148 = v70;
      goto LABEL_104;
    }
    float v65 = v68 * (float)((float)v72 / (float)v69);
    uint64_t v66 = (_DWORD *)MEMORY[0x263F8E210];
    v83(v130, *MEMORY[0x263F8E210], v120);
    float v147 = v65;
    v86(v128, v130, v120);
    int v67 = v88(v128, v120);
    if (v67 == *v66)
    {
      float v147 = roundf(v65);
      goto LABEL_75;
    }
    if (v67 == *MEMORY[0x263F8E208])
    {
      float v147 = rintf(v65);
      goto LABEL_75;
    }
    if (v67 == *MEMORY[0x263F8E218]) {
      goto LABEL_72;
    }
    if (v67 == *MEMORY[0x263F8E220]) {
      goto LABEL_74;
    }
    if (v67 == *MEMORY[0x263F8E1F8])
    {
      float v147 = truncf(v65);
      goto LABEL_75;
    }
    if (v67 != *MEMORY[0x263F8E200])
    {
      Float._roundSlowPath(_:)();
      v75(v128, v120);
      goto LABEL_75;
    }
    if (Float.sign.getter()) {
LABEL_74:
    }
      float v147 = floorf(v65);
    else {
LABEL_72:
    }
      float v147 = ceilf(v65);
LABEL_75:
    v75(v130, v120);
    float v64 = v147;
    if ((LODWORD(v147) >> 23) == 255)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    if (v64 <= -9.2234e18)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    if (v64 >= 9.2234e18)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    uint64_t v149 = (uint64_t)v64;
    float v61 = v68 * (float)((float)v70 / (float)v69);
    Swift::String v62 = (_DWORD *)MEMORY[0x263F8E210];
    v83(v126, *MEMORY[0x263F8E210], v120);
    float v146 = v61;
    v86(v124, v126, v120);
    int v63 = v88(v124, v120);
    if (v63 == *v62)
    {
      float v146 = roundf(v61);
    }
    else if (v63 == *MEMORY[0x263F8E208])
    {
      float v146 = rintf(v61);
    }
    else
    {
      if (v63 == *MEMORY[0x263F8E218]) {
        goto LABEL_93;
      }
      if (v63 == *MEMORY[0x263F8E220]) {
        goto LABEL_95;
      }
      if (v63 == *MEMORY[0x263F8E1F8])
      {
        float v146 = truncf(v61);
      }
      else
      {
        if (v63 == *MEMORY[0x263F8E200])
        {
          if (Float.sign.getter())
          {
LABEL_95:
            float v146 = floorf(v61);
            goto LABEL_96;
          }
LABEL_93:
          float v146 = ceilf(v61);
          goto LABEL_96;
        }
        Float._roundSlowPath(_:)();
        v75(v124, v120);
      }
    }
LABEL_96:
    v75(v126, v120);
    float v60 = v146;
    if ((LODWORD(v146) >> 23) == 255)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    if (v60 <= -9.2234e18)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    if (v60 >= 9.2234e18)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    uint64_t v148 = (uint64_t)v60;
LABEL_104:
    uint64_t v59 = v74 - v149;
    if (__OFSUB__(v74, v149)) {
      goto LABEL_139;
    }
    float v57 = (float)v59;
    float v145 = (float)v59;
    uint64_t v58 = v74 + v148;
    if (__OFADD__(v74, v148)) {
      goto LABEL_140;
    }
    float v144 = (float)v58;
    Swift::Float v56 = Float.init(_:)((float)((float)v58 - v57) + 1.0);
    float v143 = v56;
    char v142 = 0;
    if (v149 > 6 && v56 > 13.0)
    {
      uint64_t v149 = 6;
      char v142 = 1;
    }
    if (v148 > 6 && v56 > 13.0)
    {
      uint64_t v148 = 6;
      char v142 = 1;
    }
    if (v142)
    {
      uint64_t v55 = v74 - v149;
      if (__OFSUB__(v74, v149)) {
        goto LABEL_141;
      }
      float v53 = (float)v55;
      float v145 = (float)v55;
      uint64_t v54 = v74 + v148;
      if (__OFADD__(v74, v148)) {
        goto LABEL_142;
      }
      float v144 = (float)v54;
      float v143 = (float)((float)v54 - v53) + 1.0;
    }
    if (v145 < v118) {
      float v145 = v118;
    }
    float v141 = (float)v74 - 1.0;
    float v140 = v145;
    float v139 = v144;
    v52[4] = v138;
    v138[0] = v141;
    v138[1] = v145;
    v138[2] = v144;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(darkRedStart: Float, lowRangeStart: Float, lowRangeEnd: Float)]);
    Array.append(_:)();
    swift_bridgeObjectRelease();
    outlined destroy of [A]();
  }
  __break(1u);
LABEL_134:
  __break(1u);
LABEL_135:
  __break(1u);
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
}

void __swiftcall EvalMetricsProcessor.calculateMetrics(labels:outputs:)(Swift::tuple_perSliceMetrics_OpaquePointer_aggMetrics_NightingaleTraining_AggMetrics *__return_ptr retstr, Swift::OpaquePointer *labels, Swift::OpaquePointer outputs)
{
  Swift::String v31 = 0;
  v33[25] = labels;
  v33[24] = outputs._rawValue;
  uint64_t rawValue = labels->_rawValue;
  swift_bridgeObjectRetain();
  v33[21] = rawValue;
  v33[20] = outputs._rawValue;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(darkRedStart: Float, lowRangeStart: Float, lowRangeEnd: Float)]);
  lazy protocol witness table accessor for type [UInt32] and conformance [A]();
  lazy protocol witness table accessor for type [(darkRedStart: Float, lowRangeStart: Float, lowRangeEnd: Float)] and conformance [A]();
  zip<A, B>(_:_:)();
  outlined destroy of [A]();
  v33[18] = v33[22];
  v33[19] = v33[23];
  Swift::String v29 = partial apply for closure #1 in EvalMetricsProcessor.calculateMetrics(labels:outputs:);
  uint64_t v30 = 0;
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zip2Sequence<[UInt32], [(darkRedStart: Float, lowRangeStart: Float, lowRangeEnd: Float)]>);
  unint64_t v3 = lazy protocol witness table accessor for type Zip2Sequence<[UInt32], [(darkRedStart: Float, lowRangeStart: Float, lowRangeEnd: Float)]> and conformance Zip2Sequence<A, B>();
  char v27 = (void *)_sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for thunk for @callee_guaranteed (@unowned UInt32, @unowned Float, @unowned Float, @unowned Float) -> (@unowned PerSliceMetrics), (uint64_t)v28, v25, (uint64_t)&type metadata for PerSliceMetrics, MEMORY[0x263F8E628], v3, MEMORY[0x263F8E658], v26);
  outlined destroy of Zip2Sequence<[Float], [Float]>();
  Swift::String v31 = v27;
  swift_bridgeObjectRetain();
  AggMetrics.init(from:)(&v34, (Swift::OpaquePointer)v27);
  memcpy(__dst, &v34, sizeof(__dst));
  memcpy(v33, __dst, 0x90uLL);
  Swift::Float v4 = *(float *)v33;
  Swift::Int v5 = v33[1];
  Swift::Float v6 = *(float *)&v33[2];
  Swift::Int v7 = v33[3];
  uint64_t v8 = v33[4];
  Swift::Float v9 = *(float *)&v33[5];
  Swift::Int v10 = v33[6];
  uint64_t v11 = v33[7];
  Swift::Float v12 = *(float *)&v33[8];
  Swift::Int v13 = v33[9];
  uint64_t v14 = v33[10];
  Swift::Float v15 = *(float *)&v33[11];
  Swift::Int v16 = v33[12];
  Swift::Float v17 = *(float *)&v33[13];
  Swift::Int v18 = v33[14];
  Swift::Float v19 = *(float *)&v33[15];
  Swift::Int v20 = v33[16];
  Swift::Int v21 = v33[17];
  retstr->perSliceMetrics._uint64_t rawValue = v27;
  retstr->aggMetrics.ep3 = v4;
  retstr->aggMetrics.ep3Nuuint64_t m = v5;
  retstr->aggMetrics.nep6 = v6;
  retstr->aggMetrics.nep6Nuuint64_t m = v7;
  *(void *)&retstr->aggMetrics.mae = v8;
  retstr->aggMetrics.coverage = v9;
  retstr->aggMetrics.coverageNuuint64_t m = v10;
  *(void *)&retstr->aggMetrics.meanWidth = v11;
  retstr->aggMetrics.uxWidthTolerable = v12;
  retstr->aggMetrics.uxWidthTolerableNuuint64_t m = v13;
  *(void *)&retstr->aggMetrics.uxOverallMean = v14;
  retstr->aggMetrics.uxOverallGood = v15;
  retstr->aggMetrics.uxOverallGoodNuuint64_t m = v16;
  retstr->aggMetrics.uxOverallOuint64_t k = v17;
  retstr->aggMetrics.uxOverallOkNuuint64_t m = v18;
  retstr->aggMetrics.uxOverallTolerable = v19;
  retstr->aggMetrics.uxOverallTolerableNuuint64_t m = v20;
  retstr->aggMetrics.nSlices = v21;
}

uint64_t closure #1 in EvalMetricsProcessor.calculateMetrics(labels:outputs:)(unsigned int a1, float a2, float a3, float a4)
{
  unsigned int v48 = a1;
  float v67 = a2;
  float v62 = a3;
  float v63 = a4;
  float v43 = "Fatal error";
  uint64_t v44 = "Float value cannot be converted to Int because it is either infinite or NaN";
  uint64_t v45 = "Swift/IntegerTypes.swift";
  Swift::String v46 = "Float value cannot be converted to Int because the result would be less than Int.min";
  Swift::String v47 = "Float value cannot be converted to Int because the result would be greater than Int.max";
  int v97 = 0;
  unint64_t v95 = 0;
  int v96 = 0;
  uint64_t v92 = 0;
  float v91 = 0.0;
  float v90 = 0.0;
  float v89 = 0.0;
  uint64_t v87 = 0;
  uint64_t v85 = 0;
  uint64_t v83 = 0;
  BOOL v82 = 0;
  uint64_t v81 = 0;
  uint64_t v73 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v71 = *(void *)(v73 - 8);
  uint64_t v72 = v73 - 8;
  unint64_t v49 = (*(void *)(v71 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = MEMORY[0x270FA5388](v48);
  Swift::String v50 = (char *)&v24 - v49;
  unint64_t v51 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  Swift::String v52 = (char *)&v24 - v51;
  unint64_t v53 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v54 = (char *)&v24 - v53;
  unint64_t v55 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  Swift::Float v56 = (char *)&v24 - v55;
  unint64_t v57 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v74 = (char *)&v24 - v57;
  unint64_t v58 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
  int v14 = MEMORY[0x270FA5388](v12);
  float v68 = (char *)&v24 - v58;
  int v97 = v14;
  unint64_t v95 = __PAIR64__(v16, v15);
  int v96 = v17;
  float v61 = &v93;
  int v93 = v14;
  unint64_t v59 = lazy protocol witness table accessor for type Int and conformance Int();
  unint64_t v60 = lazy protocol witness table accessor for type Int and conformance Int();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  SignedInteger<>.init<A>(_:)();
  uint64_t v64 = v94;
  uint64_t v92 = v94;
  float v91 = v67;
  float v90 = v62;
  float v89 = v63;
  float v77 = (_DWORD *)MEMORY[0x263F8E210];
  uint64_t v18 = *MEMORY[0x263F8E210];
  float v65 = *(void (**)(char *, uint64_t, uint64_t))(v71 + 104);
  uint64_t v66 = v71 + 104;
  v65(v68, v18, v73);
  float v88 = v67;
  uint64_t v69 = *(void (**)(char *, char *, uint64_t))(v71 + 16);
  uint64_t v70 = v71 + 16;
  v69(v74, v68, v73);
  int v75 = *(uint64_t (**)(char *, uint64_t))(v71 + 88);
  uint64_t v76 = v71 + 88;
  int v78 = v75(v74, v73);
  if (v78 == *v77)
  {
    float v88 = roundf(v67);
    goto LABEL_15;
  }
  if (v78 == *MEMORY[0x263F8E208])
  {
    float v88 = rintf(v67);
    goto LABEL_15;
  }
  if (v78 == *MEMORY[0x263F8E218]) {
    goto LABEL_12;
  }
  if (v78 == *MEMORY[0x263F8E220]) {
    goto LABEL_14;
  }
  if (v78 == *MEMORY[0x263F8E1F8])
  {
    float v88 = truncf(v67);
    goto LABEL_15;
  }
  if (v78 != *MEMORY[0x263F8E200])
  {
    Float._roundSlowPath(_:)();
    (*(void (**)(char *, uint64_t))(v71 + 8))(v74, v73);
    goto LABEL_15;
  }
  if (Float.sign.getter()) {
LABEL_14:
  }
    float v88 = floorf(v67);
  else {
LABEL_12:
  }
    float v88 = ceilf(v67);
LABEL_15:
  float v40 = *(void (**)(char *, uint64_t))(v71 + 8);
  uint64_t v41 = v71 + 8;
  v40(v68, v73);
  float v42 = v88;
  if ((LODWORD(v88) >> 23) == 255)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  if (v42 <= -9.2234e18)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  if (v42 >= 9.2234e18)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  uint64_t v37 = (uint64_t)v42;
  uint64_t v87 = (uint64_t)v42;
  uint64_t v38 = (_DWORD *)MEMORY[0x263F8E210];
  v65(v56, *MEMORY[0x263F8E210], v73);
  float v86 = v62;
  v69(v54, v56, v73);
  int v39 = v75(v54, v73);
  if (v39 == *v38)
  {
    float v86 = roundf(v62);
    goto LABEL_36;
  }
  if (v39 == *MEMORY[0x263F8E208])
  {
    float v86 = rintf(v62);
    goto LABEL_36;
  }
  if (v39 == *MEMORY[0x263F8E218])
  {
LABEL_33:
    float v86 = ceilf(v62);
    goto LABEL_36;
  }
  if (v39 == *MEMORY[0x263F8E220])
  {
LABEL_35:
    float v86 = floorf(v62);
    goto LABEL_36;
  }
  if (v39 == *MEMORY[0x263F8E1F8])
  {
    float v86 = truncf(v62);
    goto LABEL_36;
  }
  if (v39 == *MEMORY[0x263F8E200])
  {
    if ((Float.sign.getter() & 1) == 0) {
      goto LABEL_33;
    }
    goto LABEL_35;
  }
  Float._roundSlowPath(_:)();
  v40(v54, v73);
LABEL_36:
  v40(v56, v73);
  float v36 = v86;
  if ((LODWORD(v86) >> 23) == 255)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  if (v36 <= -9.2234e18)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  if (v36 >= 9.2234e18)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  uint64_t v33 = (uint64_t)v36;
  uint64_t v85 = (uint64_t)v36;
  NightingaleTraining::AggMetrics v34 = (_DWORD *)MEMORY[0x263F8E210];
  v65(v52, *MEMORY[0x263F8E210], v73);
  float v84 = v63;
  v69(v50, v52, v73);
  int v35 = v75(v50, v73);
  if (v35 == *v34)
  {
    float v84 = roundf(v63);
    goto LABEL_57;
  }
  if (v35 == *MEMORY[0x263F8E208])
  {
    float v84 = rintf(v63);
    goto LABEL_57;
  }
  if (v35 == *MEMORY[0x263F8E218]) {
    goto LABEL_54;
  }
  if (v35 == *MEMORY[0x263F8E220]) {
    goto LABEL_56;
  }
  if (v35 == *MEMORY[0x263F8E1F8])
  {
    float v84 = truncf(v63);
    goto LABEL_57;
  }
  if (v35 != *MEMORY[0x263F8E200])
  {
    Float._roundSlowPath(_:)();
    v40(v50, v73);
    goto LABEL_57;
  }
  if (Float.sign.getter()) {
LABEL_56:
  }
    float v84 = floorf(v63);
  else {
LABEL_54:
  }
    float v84 = ceilf(v63);
LABEL_57:
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v40)(v52, v73);
  float v32 = v84;
  if ((LODWORD(v84) >> 23) == 255)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  if (v32 <= -9.2234e18)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  if (v32 >= 9.2234e18)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  uint64_t v31 = (uint64_t)v32;
  uint64_t v83 = (uint64_t)v32;
  BOOL v30 = v64 >= v33 && v31 >= v64;
  BOOL v28 = v30;
  BOOL v82 = v30;
  uint64_t v29 = v31 - v33;
  if (__OFSUB__(v31, v33))
  {
    __break(1u);
LABEL_81:
    __break(1u);
    goto LABEL_82;
  }
  uint64_t v27 = v29 + 1;
  if (__OFADD__(v29, 1)) {
    goto LABEL_81;
  }
  uint64_t v81 = v27;
  uint64_t v26 = v37 - v64;
  if (!__OFSUB__(v37, v64))
  {
    uint64_t v79 = v26;
    abs<A>(_:)();
    Swift::Int v25 = v80;
    Swift::Int v23 = EvalMetricsProcessor.calculateUXOverall(coverage:width:)(v28, v27);
    return (unint64_t)PerSliceMetrics.init(abserr:coverage:width:uxOverall:)(v25, v28, v27, v23);
  }
LABEL_82:
  __break(1u);
  return result;
}

uint64_t EvalMetricsProcessor.calculateUXOverall(coverage:width:)(char a1, uint64_t a2)
{
  if ((a1 & 1) == 0) {
    return 0;
  }
  if (a2 <= 5) {
    return 4;
  }
  if (a2 <= 7) {
    return 3;
  }
  if (a2 > 9) {
    return a2 <= 13;
  }
  return 2;
}

uint64_t thunk for @callee_guaranteed (@unowned UInt32, @unowned Float, @unowned Float, @unowned Float) -> (@unowned PerSliceMetrics)@<X0>(float *a1@<X0>, uint64_t (*a2)(void, float, float, float)@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = a2(*(unsigned int *)a1, a1[1], a1[2], a1[3]);
  *(void *)a3 = result;
  *(unsigned char *)(a3 + 8) = v4 & 1;
  *(void *)(a3 + 16) = v5;
  *(void *)(a3 + 24) = v6;
  return result;
}

uint64_t static EvalMetricsProcessor.argQuantile(softmax:quantiles:)()
{
  swift_bridgeObjectRetain();
  static PFLStats.cumsum(vector:)();
  swift_bridgeObjectRelease();
  uint64_t v5 = specialized Array.init()();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
  lazy protocol witness table accessor for type [Float] and conformance [A]();
  Collection<>.makeIterator()();
  while (1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[Float]>);
    IndexingIterator.next()();
    if (v4)
    {
      outlined destroy of [A]();
      swift_bridgeObjectRetain();
      outlined destroy of [A]();
      swift_bridgeObjectRelease();
      return v5;
    }
    static PFLStats.less<A>(vector:value:)();
    uint64_t result = Array<A>.sum.getter();
    if (!result)
    {
      lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
      swift_allocError();
      *char v2 = 28;
      swift_willThrow();
      swift_bridgeObjectRelease();
      outlined destroy of [A]();
      outlined destroy of [A]();
      swift_bridgeObjectRelease();
      return v3;
    }
    if (__OFSUB__(result, 1)) {
      break;
    }
    specialized Array.subscript.getter();
    specialized Array.subscript.getter();
    specialized Array.subscript.getter();
    specialized Array.append(_:)();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t partial apply for thunk for @callee_guaranteed (@unowned UInt32, @unowned Float, @unowned Float, @unowned Float) -> (@unowned PerSliceMetrics)@<X0>(float *a1@<X0>, uint64_t a2@<X8>)
{
  return thunk for @callee_guaranteed (@unowned UInt32, @unowned Float, @unowned Float, @unowned Float) -> (@unowned PerSliceMetrics)(a1, *(uint64_t (**)(void, float, float, float))(v2 + 16), a2);
}

unint64_t lazy protocol witness table accessor for type Zip2Sequence<[UInt32], [(darkRedStart: Float, lowRangeStart: Float, lowRangeEnd: Float)]> and conformance Zip2Sequence<A, B>()
{
  uint64_t v2 = lazy protocol witness table cache variable for type Zip2Sequence<[UInt32], [(darkRedStart: Float, lowRangeStart: Float, lowRangeEnd: Float)]> and conformance Zip2Sequence<A, B>;
  if (!lazy protocol witness table cache variable for type Zip2Sequence<[UInt32], [(darkRedStart: Float, lowRangeStart: Float, lowRangeEnd: Float)]> and conformance Zip2Sequence<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Zip2Sequence<[UInt32], [(darkRedStart: Float, lowRangeStart: Float, lowRangeEnd: Float)]>);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Zip2Sequence<[UInt32], [(darkRedStart: Float, lowRangeStart: Float, lowRangeEnd: Float)]> and conformance Zip2Sequence<A, B>);
    return WitnessTable;
  }
  return v2;
}

uint64_t initializeBufferWithCopyOfBuffer for AggMetrics(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __swift_memcpy144_8(void *a1, const void *a2)
{
}

uint64_t getEnumTagSinglePayload for AggMetrics(uint64_t a1, int a2)
{
  if (a2)
  {
    if (*(unsigned char *)(a1 + 144)) {
      int v3 = *(_DWORD *)a1;
    }
    else {
      int v3 = -1;
    }
  }
  else
  {
    int v3 = -1;
  }
  return (v3 + 1);
}

void *storeEnumTagSinglePayload for AggMetrics(void *result, int a2, int a3)
{
  int v3 = result + 18;
  if (a2)
  {
    result[15] = 0;
    result[14] = 0;
    result[13] = 0;
    result[12] = 0;
    result[11] = 0;
    result[10] = 0;
    result[9] = 0;
    result[8] = 0;
    result[7] = 0;
    result[6] = 0;
    result[5] = 0;
    result[4] = 0;
    result[3] = 0;
    result[2] = 0;
    result[1] = 0;
    *uint64_t result = (a2 - 1);
    result[17] = 0;
    result[16] = 0;
    if (a3) {
      *int v3 = 1;
    }
  }
  else if (a3)
  {
    *int v3 = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for AggMetrics()
{
  return &type metadata for AggMetrics;
}

__n128 __swift_memcpy32_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for PerSliceMetrics(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 > 0xFE && *(unsigned char *)(a1 + 32))
    {
      int v5 = *(void *)a1 + 254;
    }
    else
    {
      char v3 = *(unsigned char *)(a1 + 8);
      int v4 = -1;
      if ((v3 & 0xFE) != 0) {
        int v4 = v3 & 1 | ((v3 & 0xFE) - 2) & 0x7FFFFFFF;
      }
      int v5 = v4;
    }
  }
  else
  {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PerSliceMetrics(uint64_t result, unsigned int a2, unsigned int a3)
{
  BOOL v3 = a3 > 0xFE;
  if (a2 > 0xFE)
  {
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    if (a3 > 0xFE)
    {
      if (v3) {
        *(unsigned char *)(result + 32) = 1;
      }
      else {
        __break(1u);
      }
    }
  }
  else
  {
    if (a3 > 0xFE)
    {
      if (v3) {
        *(unsigned char *)(result + 32) = 0;
      }
      else {
        __break(1u);
      }
    }
    if (a2) {
      *(unsigned char *)(result + 8) = (a2 - 1) & 1 | (2 * (((a2 - 1) >> 1) + 1));
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PerSliceMetrics()
{
  return &type metadata for PerSliceMetrics;
}

ValueMetadata *type metadata accessor for EvalMetricsProcessor()
{
  return &type metadata for EvalMetricsProcessor;
}

uint64_t PFLTask.taskId.getter()
{
  uint64_t v7 = v0;
  dispatch thunk of PFLTask.recipe.getter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("id", 2uLL, 1);
  MEMORY[0x25A2C04B0](v5);
  outlined destroy of DefaultStringInterpolation();
  swift_bridgeObjectRelease();
  if (v5[3])
  {
    if (swift_dynamicCast()) {
      Swift::String v3 = v4;
    }
    else {
      Swift::String v3 = (Swift::String)0;
    }
    Swift::String v2 = v3;
  }
  else
  {
    outlined destroy of Pregnancy?((uint64_t)v5);
    Swift::String v2 = (Swift::String)0;
  }
  if (v2._object)
  {
    Swift::String v6 = v2;
  }
  else
  {
    Swift::String v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    outlined destroy of DefaultStringInterpolation();
  }
  return v6._countAndFlagsBits;
}

Swift::Double __swiftcall PFLTask.iterationElapsedTime()()
{
  uint64_t v32 = 0;
  double v29 = 0.0;
  uint64_t v19 = type metadata accessor for Date();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = v19 - 8;
  unint64_t v22 = (*(void *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v19);
  Swift::Int v23 = (char *)&v5 - v22;
  uint64_t v32 = v0;
  uint64_t v27 = dispatch thunk of PFLTask.recipe.getter();
  char started = HyperParams.keyIterationStartTime.unsafeMutableAddressor();
  uint64_t v24 = *(void *)started;
  uint64_t v25 = *((void *)started + 1);
  swift_bridgeObjectRetain();
  uint64_t v26 = v30;
  v30[0] = v24;
  v30[1] = v25;
  MEMORY[0x25A2C04B0](v31);
  outlined destroy of DefaultStringInterpolation();
  swift_bridgeObjectRelease();
  if (v31[3])
  {
    type metadata accessor for NSNumber();
    if (swift_dynamicCast()) {
      uint64_t v18 = v28;
    }
    else {
      uint64_t v18 = 0;
    }
    int v17 = v18;
  }
  else
  {
    int v5 = 0;
    outlined destroy of Pregnancy?((uint64_t)v31);
    int v17 = v5;
  }
  id v16 = v17;
  if (v17)
  {
    id v15 = v16;
    id v11 = v16;
    objc_msgSend(v16, sel_doubleValue);
    double v12 = v2;

    double v13 = v12;
    int v14 = 0;
  }
  else
  {
    double v13 = 0.0;
    int v14 = 1;
  }
  double v10 = v13;
  if (v14) {
    return 0.0;
  }
  double v9 = v10;
  double v6 = v10;
  double v29 = v10;
  Date.init()();
  Date.timeIntervalSince1970.getter();
  double v7 = v3;
  (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v19);
  return v7 - v6;
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> PFLTask.getValidModelPath(modelFileSuffix:)(Swift::String modelFileSuffix)
{
  uint64_t countAndFlagsBits = modelFileSuffix._countAndFlagsBits;
  object = modelFileSuffix._object;
  uint64_t v57 = 0;
  uint64_t v58 = 0;
  uint64_t v56 = 0;
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  uint64_t v52 = 0;
  unint64_t v53 = 0;
  Class v51 = 0;
  id v50 = 0;
  uint64_t v38 = 0;
  uint64_t v2 = type metadata accessor for URL.DirectoryHint();
  unint64_t v36 = (*(void *)(*(void *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2);
  uint64_t v37 = (uint64_t)v16 - v36;
  unint64_t v39 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v38);
  float v40 = (char *)v16 - v39;
  uint64_t v43 = type metadata accessor for URL();
  uint64_t v44 = *(void *)(v43 - 8);
  uint64_t v45 = v43 - 8;
  unint64_t v46 = (*(void *)(v44 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v3 = MEMORY[0x270FA5388](countAndFlagsBits);
  uint64_t v47 = (uint64_t)v16 - v46;
  uint64_t v57 = v3;
  uint64_t v58 = v4;
  uint64_t v56 = v1;
  uint64_t v48 = dispatch thunk of PFLTask.attachmentPath(name:)();
  uint64_t v49 = v5;
  if (!v5)
  {
    lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
    uint64_t v20 = swift_allocError();
    *double v12 = 9;
    swift_willThrow();
    uint64_t v21 = v20;
LABEL_6:
    id v11 = v19;
    uint64_t v10 = v16[1];
    goto LABEL_7;
  }
  uint64_t v33 = v48;
  uint64_t v34 = v49;
  uint64_t v25 = v49;
  uint64_t v22 = v48;
  uint64_t v54 = v48;
  uint64_t v55 = v49;
  swift_bridgeObjectRetain();
  id v23 = (id)MEMORY[0x25A2C0590](v22, v25);
  id v24 = objc_msgSend(v23, sel_stringByDeletingLastPathComponent);
  uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  BOOL v28 = v6;
  uint64_t v52 = v27;
  unint64_t v53 = v6;

  swift_bridgeObjectRelease();
  uint64_t v26 = 0;
  type metadata accessor for MLModelConfiguration();
  Class isa = HKHealthStore.__allocating_init()().super.isa;
  Class v51 = isa;
  [(objc_class *)isa setComputeUnits:v26];
  type metadata accessor for MLModel();
  swift_bridgeObjectRetain();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v44 + 56))(v40, 1, 1, v43);
  default argument 1 of URL.init(filePath:directoryHint:relativeTo:)(v37);
  URL.init(filePath:directoryHint:relativeTo:)();
  double v7 = isa;
  uint64_t v8 = v35;
  id v9 = @nonobjc MLModel.__allocating_init(contentsOf:configuration:)(v47, isa);
  BOOL v30 = v8;
  id v31 = v9;
  uint64_t v32 = v8;
  if (v8)
  {
    id v17 = v32;

    id v13 = v17;
    id v50 = v17;
    lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
    uint64_t v18 = swift_allocError();
    *int v14 = 31;
    swift_willThrow();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v21 = v18;
    goto LABEL_6;
  }

  swift_bridgeObjectRelease();
  uint64_t v10 = v27;
  id v11 = v28;
LABEL_7:
  result._object = v11;
  result._uint64_t countAndFlagsBits = v10;
  return result;
}

uint64_t PFLTask.trainingModelPath(taskType:hyperParams:)()
{
  lazy protocol witness table accessor for type NightingalePFLTaskType and conformance NightingalePFLTaskType();
  if (== infix<A>(_:_:)()) {
    char v9 = 1;
  }
  else {
    char v9 = == infix<A>(_:_:)();
  }
  if (v9) {
    char v8 = 1;
  }
  else {
    char v8 = == infix<A>(_:_:)();
  }
  if (v8) {
    char v7 = 1;
  }
  else {
    char v7 = == infix<A>(_:_:)();
  }
  if ((v7 & 1) == 0) {
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
  }
  HyperParams.modelName.getter();
  uint64_t v5 = dispatch thunk of PFLTask.attachmentPath(name:)();
  uint64_t v6 = v0;
  swift_bridgeObjectRelease();
  if (!v6)
  {
    lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
    swift_allocError();
    *uint64_t v1 = 9;
    swift_willThrow();
    return v3;
  }
  return v5;
}

uint64_t PFLTask.evalModelNames(taskType:hyperParams:)()
{
  lazy protocol witness table accessor for type NightingalePFLTaskType and conformance NightingalePFLTaskType();
  if ((== infix<A>(_:_:)() & 1) == 0) {
    return _allocateUninitializedArray<A>(_:)();
  }
  uint64_t v4 = HyperParams.evalModels.getter();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  char v5 = Collection.isEmpty.getter();
  outlined destroy of [A]();
  if (v5)
  {
    lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
    swift_allocError();
    unsigned char *v0 = 9;
    swift_willThrow();
    swift_bridgeObjectRelease();
    return v2;
  }
  return v4;
}

uint64_t default argument 0 of Dictionary.removeAll(keepingCapacity:)()
{
  return 0;
}

Swift::String_optional __swiftcall PFLTask.evalModelPath(path:)(Swift::String path)
{
  uint64_t v1 = dispatch thunk of PFLTask.attachmentPath(name:)();
  result.value._object = v2;
  result.value._uint64_t countAndFlagsBits = v1;
  return result;
}

uint64_t ReachLocation.description.getter(char a1)
{
  switch(a1)
  {
    case 1:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PluginStarted", 0xDuLL, 1)._countAndFlagsBits;
      break;
    case 2:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("CTEnrolled", 0xAuLL, 1)._countAndFlagsBits;
      break;
    case 3:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RawSamplesCompleted", 0x13uLL, 1)._countAndFlagsBits;
      break;
    case 4:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("CalPredCompleted", 0x10uLL, 1)._countAndFlagsBits;
      break;
    case 5:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SHRCompleted", 0xCuLL, 1)._countAndFlagsBits;
      break;
    case 6:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ShadowEvaluationCompleted", 0x19uLL, 1)._countAndFlagsBits;
      break;
    case 7:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("FeaturizationCompleted", 0x16uLL, 1)._countAndFlagsBits;
      break;
    case 8:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PluginCompleted", 0xFuLL, 1)._countAndFlagsBits;
      break;
    case 9:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PluginStopped", 0xDuLL, 1)._countAndFlagsBits;
      break;
    default:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Unknown", 7uLL, 1)._countAndFlagsBits;
      break;
  }
  return countAndFlagsBits;
}

NightingaleTraining::ReachLocation_optional __swiftcall ReachLocation.init(rawValue:)(Swift::Int rawValue)
{
  switch(rawValue)
  {
    case 0:
      return 0;
    case 1:
      return (NightingaleTraining::ReachLocation_optional)1;
    case 3:
      return (NightingaleTraining::ReachLocation_optional)2;
    case 5:
      return (NightingaleTraining::ReachLocation_optional)3;
    case 6:
      return (NightingaleTraining::ReachLocation_optional)4;
    case 7:
      return (NightingaleTraining::ReachLocation_optional)5;
    case 8:
      return (NightingaleTraining::ReachLocation_optional)6;
    case 9:
      return (NightingaleTraining::ReachLocation_optional)7;
    case 10:
      return (NightingaleTraining::ReachLocation_optional)8;
    case 11:
      return (NightingaleTraining::ReachLocation_optional)9;
  }
  return (NightingaleTraining::ReachLocation_optional)10;
}

uint64_t ReachLocation.rawValue.getter(char a1)
{
  switch(a1)
  {
    case 1:
      uint64_t v2 = 1;
      break;
    case 2:
      uint64_t v2 = 3;
      break;
    case 3:
      uint64_t v2 = 5;
      break;
    case 4:
      uint64_t v2 = 6;
      break;
    case 5:
      uint64_t v2 = 7;
      break;
    case 6:
      uint64_t v2 = 8;
      break;
    case 7:
      uint64_t v2 = 9;
      break;
    case 8:
      uint64_t v2 = 10;
      break;
    case 9:
      uint64_t v2 = 11;
      break;
    default:
      uint64_t v2 = 0;
      break;
  }
  return v2;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ReachLocation()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance ReachLocation()
{
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ReachLocation()
{
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance ReachLocation()
{
  return RawRepresentable<>._rawHashValue(seed:)();
}

NightingaleTraining::ReachLocation_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ReachLocation@<W0>(Swift::Int *a1@<X0>, NightingaleTraining::ReachLocation_optional *a2@<X8>)
{
  result.Swift::Float value = ReachLocation.init(rawValue:)(*a1).value;
  a2->Swift::Float value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ReachLocation@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ReachLocation.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ReachLocation()
{
  return ReachLocation.description.getter(*v0);
}

uint64_t PFLTask.modelType.getter()
{
  HyperParams.keyLSTMModelType.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  NightingalePFLModelType.rawValue.getter(1);
  dispatch thunk of PFLTask.parameter<A>(for:default:)();
  swift_bridgeObjectRelease();
  v1.Swift::Float value = NightingalePFLModelType.init(rawValue:)(v3).value;
  if (v1.value == NightingaleTraining_NightingalePFLModelType_unknownDefault) {
    return 1;
  }
  else {
    return v1.value;
  }
}

unint64_t type metadata accessor for NSNumber()
{
  uint64_t v2 = lazy cache variable for type metadata for NSNumber;
  if (!lazy cache variable for type metadata for NSNumber)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for MLModelConfiguration()
{
  uint64_t v2 = lazy cache variable for type metadata for MLModelConfiguration;
  if (!lazy cache variable for type metadata for MLModelConfiguration)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for MLModelConfiguration);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for MLModel()
{
  uint64_t v2 = lazy cache variable for type metadata for MLModel;
  if (!lazy cache variable for type metadata for MLModel)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for MLModel);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t default argument 1 of URL.init(filePath:directoryHint:relativeTo:)@<X0>(uint64_t a1@<X8>)
{
  unsigned int v3 = *MEMORY[0x263F06E50];
  uint64_t v1 = type metadata accessor for URL.DirectoryHint();
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v1 - 8) + 104))(a1, v3);
}

id @nonobjc MLModel.__allocating_init(contentsOf:configuration:)(uint64_t a1, void *a2)
{
  URL._bridgeToObjectiveC()((NSURL *)*MEMORY[0x263EF8340]);
  uint64_t v10 = v2;
  id ObjCClassFromMetadata = (id)swift_getObjCClassFromMetadata();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AutoreleasingUnsafeMutablePointer<NSError?>);
  lazy protocol witness table accessor for type AutoreleasingUnsafeMutablePointer<NSError?> and conformance AutoreleasingUnsafeMutablePointer<A>();
  _convertInOutToPointerArgument<A>(_:)();
  id v12 = objc_msgSend(ObjCClassFromMetadata, sel_modelWithContentsOfURL_configuration_error_, v10, a2, v13);
  id v3 = 0;

  if (v12)
  {

    uint64_t v4 = type metadata accessor for URL();
    (*(void (**)(uint64_t))(*(void *)(v4 - 8) + 8))(a1);
    return v12;
  }
  else
  {
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v6 = type metadata accessor for URL();
    (*(void (**)(uint64_t))(*(void *)(v6 - 8) + 8))(a1);
    return (id)v7;
  }
}

long long *NightingalePFLRunner.keyMetricsLoss.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMetricsLoss != -1) {
    swift_once();
  }
  return &static NightingalePFLRunner.keyMetricsLoss;
}

long long *NightingalePFLRunner.keyNumSlices.unsafeMutableAddressor()
{
  if (one-time initialization token for keyNumSlices != -1) {
    swift_once();
  }
  return &static NightingalePFLRunner.keyNumSlices;
}

long long *NightingalePFLRunner.keyMetricsLossBeforeTraining.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMetricsLossBeforeTraining != -1) {
    swift_once();
  }
  return &static NightingalePFLRunner.keyMetricsLossBeforeTraining;
}

uint64_t one-time initialization function for keyMetricsDayStreamProcessorConfigDurationS()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("DayStreamProcessorConfigDurationS", 0x21uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static NightingalePFLRunner.keyMetricsDayStreamProcessorConfigDurationS = (__int128)v1;
  return result;
}

long long *NightingalePFLRunner.keyMetricsDayStreamProcessorConfigDurationS.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMetricsDayStreamProcessorConfigDurationS != -1) {
    swift_once();
  }
  return &static NightingalePFLRunner.keyMetricsDayStreamProcessorConfigDurationS;
}

uint64_t one-time initialization function for keyMetricsRawSamplesDurationS()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RawSamplesDurationS", 0x13uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static NightingalePFLRunner.keyMetricsRawSamplesDurationS = (__int128)v1;
  return result;
}

long long *NightingalePFLRunner.keyMetricsRawSamplesDurationS.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMetricsRawSamplesDurationS != -1) {
    swift_once();
  }
  return &static NightingalePFLRunner.keyMetricsRawSamplesDurationS;
}

uint64_t one-time initialization function for keyMetricsCalendarPredictionDurationS()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("CalendarPredictionDurationS", 0x1BuLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static NightingalePFLRunner.keyMetricsCalendarPredictionDurationS = (__int128)v1;
  return result;
}

long long *NightingalePFLRunner.keyMetricsCalendarPredictionDurationS.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMetricsCalendarPredictionDurationS != -1) {
    swift_once();
  }
  return &static NightingalePFLRunner.keyMetricsCalendarPredictionDurationS;
}

long long *NightingalePFLRunner.keyMetricsSHRDurationS.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMetricsSHRDurationS != -1) {
    swift_once();
  }
  return &static NightingalePFLRunner.keyMetricsSHRDurationS;
}

long long *NightingalePFLRunner.keyMetricsFeaturizationDurationS.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMetricsFeaturizationDurationS != -1) {
    swift_once();
  }
  return &static NightingalePFLRunner.keyMetricsFeaturizationDurationS;
}

uint64_t one-time initialization function for keyMetricsFeatureRescalingDurationS()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("FeatureRescalingDurationS", 0x19uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static NightingalePFLRunner.keyMetricsFeatureRescalingDurationS = (__int128)v1;
  return result;
}

long long *NightingalePFLRunner.keyMetricsFeatureRescalingDurationS.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMetricsFeatureRescalingDurationS != -1) {
    swift_once();
  }
  return &static NightingalePFLRunner.keyMetricsFeatureRescalingDurationS;
}

long long *NightingalePFLRunner.keyMetricsBMIDurationS.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMetricsBMIDurationS != -1) {
    swift_once();
  }
  return &static NightingalePFLRunner.keyMetricsBMIDurationS;
}

long long *NightingalePFLRunner.keyMetricsTrainingDurationS.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMetricsTrainingDurationS != -1) {
    swift_once();
  }
  return &static NightingalePFLRunner.keyMetricsTrainingDurationS;
}

long long *NightingalePFLRunner.keyMetricsE2EDurationS.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMetricsE2EDurationS != -1) {
    swift_once();
  }
  return &static NightingalePFLRunner.keyMetricsE2EDurationS;
}

long long *NightingalePFLRunner.keyMetricsL2Norm.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMetricsL2Norm != -1) {
    swift_once();
  }
  return &static NightingalePFLRunner.keyMetricsL2Norm;
}

long long *NightingalePFLRunner.keyMetricsIterationElapsedTime.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMetricsIterationElapsedTime != -1) {
    swift_once();
  }
  return &static NightingalePFLRunner.keyMetricsIterationElapsedTime;
}

uint64_t one-time initialization function for keyMetricsShadowEvaluationTime()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ShadowEvaluationTime", 0x14uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static NightingalePFLRunner.keyMetricsShadowEvaluationTime = (__int128)v1;
  return result;
}

long long *NightingalePFLRunner.keyMetricsShadowEvaluationTime.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMetricsShadowEvaluationTime != -1) {
    swift_once();
  }
  return &static NightingalePFLRunner.keyMetricsShadowEvaluationTime;
}

uint64_t default argument 1 of OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return static DispatchQoS.unspecified.getter();
}

uint64_t default argument 2 of OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t default argument 3 of OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)@<X0>(uint64_t a1@<X8>)
{
  unsigned int v3 = *MEMORY[0x263F8F130];
  uint64_t v1 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v1 - 8) + 104))(a1, v3);
}

uint64_t NightingalePFLRunner.location.getter()
{
  swift_beginAccess();
  unsigned int v2 = *(unsigned __int8 *)(v0 + 56);
  swift_endAccess();
  return v2;
}

uint64_t NightingalePFLRunner.location.setter(char a1)
{
  swift_beginAccess();
  *(unsigned char *)(v1 + 56) = a1;
  return swift_endAccess();
}

uint64_t (*NightingalePFLRunner.location.modify())()
{
  return NightingaleDPFLRunner.performanceMeasure.modify;
}

uint64_t NightingalePFLRunner.__allocating_init(useCase:)(char *a1)
{
  char v8 = 0;
  char v8 = *a1;
  char v7 = v8;
  uint64_t v3 = type metadata accessor for HealthDataStoreQuery();
  type metadata accessor for HKHealthStore();
  v1.super.Class isa = HKHealthStore.__allocating_init()().super.isa;
  v6[3] = v3;
  v6[4] = &protocol witness table for HealthDataStoreQuery;
  v6[0] = HealthDataStoreQuery.__allocating_init(store:)(v1.super.isa);
  LODWORD(v5) = 0;
  BYTE4(v5) = 1;
  uint64_t v4 = NightingalePFLRunner.__allocating_init(useCase:query:todayJulianDay:)((uint64_t)&v7, (uint64_t)v6, v5);
  swift_retain();
  uint64_t v9 = v4;
  swift_release();
  return v4;
}

uint64_t NightingalePFLRunner.__allocating_init(useCase:query:todayJulianDay:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = a3;
  char v5 = BYTE4(a3);
  swift_allocObject();
  LODWORD(v8) = v4;
  BYTE4(v8) = v5 & 1;
  return NightingalePFLRunner.init(useCase:query:todayJulianDay:)(a1, a2, v8);
}

uint64_t NightingalePFLRunner.init(useCase:query:todayJulianDay:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v22 = a1;
  uint64_t v33 = a2;
  char v40 = 0;
  uint64_t v39 = 0;
  int v37 = 0;
  char v38 = 0;
  uint64_t v36 = 0;
  uint64_t v41 = a3;
  int v30 = a3;
  int v31 = BYTE4(a3);
  uint64_t v27 = 0;
  unint64_t v20 = (*(void *)(*(void *)(type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v26 = (uint64_t)&v19 - v20;
  unint64_t v21 = (*(void *)(*(void *)(type metadata accessor for OS_dispatch_queue.Attributes() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v27);
  uint64_t v25 = (char *)&v19 - v21;
  type metadata accessor for DispatchQoS();
  int v4 = (unsigned __int8 *)MEMORY[0x270FA5388](v22);
  id v24 = (char *)&v19 - v5;
  int v28 = *v4;
  char v40 = v28;
  uint64_t v39 = v33;
  int v37 = v6;
  int v32 = 1;
  char v38 = v31 & 1;
  uint64_t v36 = v3;
  *(Swift::String *)(v3 + 24) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", v7, 1);
  type metadata accessor for OS_dispatch_queue();
  Swift::String v23 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ReachLocation.queue", 0x13uLL, v32 & 1);
  default argument 1 of OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  default argument 2 of OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  default argument 3 of OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v26);
  uint64_t v8 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v9 = v34;
  *(void *)(v34 + 48) = v8;
  *(unsigned char *)(v9 + 56) = 0;
  type metadata accessor for PerformanceMeasure();
  uint64_t v10 = PerformanceMeasure.__allocating_init()();
  uint64_t v11 = v34;
  char v12 = v28;
  uint64_t v13 = v10;
  uint64_t v14 = v33;
  *(void *)(v34 + 16) = v13;
  *(unsigned char *)(v11 + 40) = v12;
  double v29 = v35;
  outlined init with copy of HealthDataQuery(v14, (uint64_t)v35);
  outlined init with take of HealthDataQuery(v29, (void *)(v11 + 64));
  char v15 = v31;
  char v16 = v32;
  uint64_t v17 = v33;
  *(_DWORD *)(v11 + 104) = v30;
  *(unsigned char *)(v11 + 108) = v15 & 1 & v16;
  __swift_destroy_boxed_opaque_existential_1(v17);
  return v34;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NightingalePFLRunner.performCustomConsent()()
{
  uint64_t v8 = 0;
  outlined init with copy of HealthDataQuery(v0 + 64, (uint64_t)v5);
  uint64_t v2 = v6;
  uint64_t v3 = v7;
  __swift_project_boxed_opaque_existential_1(v5, v6);
  id v4 = (id)(*(uint64_t (**)(void, void, uint64_t))(v3 + 48))(0, 0, v2);
  if (!v1) {

  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
}

uint64_t NightingalePFLRunner.run(task:useCase:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v5 + 4032) = v4;
  *(void *)(v5 + 4024) = a1;
  *(void *)(v5 + 3144) = v5;
  *(void *)(v5 + 3152) = 0;
  *(void *)(v5 + 2936) = 0;
  *(void *)(v5 + 2944) = 0;
  *(void *)(v5 + 3160) = 0;
  *(void *)(v5 + 3168) = 0;
  *(void *)(v5 + 3176) = 0;
  *(unsigned char *)(v5 + 4640) = 0;
  *(void *)(v5 + 3184) = 0;
  *(void *)(v5 + 3192) = 0;
  *(void *)(v5 + 3200) = 0;
  *(void *)(v5 + 3208) = 0;
  *(void *)(v5 + 3216) = 0;
  *(void *)(v5 + 3224) = 0;
  *(unsigned char *)(v5 + 4648) = 0;
  *(void *)(v5 + 2952) = 0;
  *(void *)(v5 + 2960) = 0;
  *(void *)(v5 + 3232) = 0;
  *(void *)(v5 + 3240) = 0;
  *(_DWORD *)(v5 + 4448) = 0;
  *(_DWORD *)(v5 + 4464) = 0;
  *(_DWORD *)(v5 + 4480) = 0;
  *(_DWORD *)(v5 + 4544) = 0;
  *(void *)(v5 + 3288) = 0;
  *(void *)(v5 + 3296) = 0;
  *(void *)(v5 + 3304) = 0;
  *(void *)(v5 + 3312) = 0;
  *(void *)(v5 + 3320) = 0;
  *(void *)(v5 + 3344) = 0;
  *(void *)(v5 + 3352) = 0;
  *(void *)(v5 + 3360) = 0;
  *(void *)(v5 + 3368) = 0;
  *(void *)(v5 + 3416) = 0;
  *(void *)(v5 + 3424) = 0;
  *(void *)(v5 + 3432) = 0;
  *(void *)(v5 + 3440) = 0;
  *(void *)(v5 + 2968) = 0;
  *(void *)(v5 + 2976) = 0;
  *(void *)(v5 + 3448) = 0;
  *(void *)(v5 + 3456) = 0;
  *(void *)(v5 + 3464) = 0;
  *(void *)(v5 + 3480) = 0;
  *(void *)(v5 + 3488) = 0;
  *(_DWORD *)(v5 + 4552) = 0;
  *(void *)(v5 + 3496) = 0;
  *(void *)(v5 + 3504) = 0;
  *(void *)(v5 + 3512) = 0;
  *(void *)(v5 + 3520) = 0;
  *(void *)(v5 + 3528) = 0;
  *(void *)(v5 + 3536) = 0;
  *(void *)(v5 + 3544) = 0;
  *(_DWORD *)(v5 + 4560) = 0;
  *(_DWORD *)(v5 + 4568) = 0;
  *(_DWORD *)(v5 + 4576) = 0;
  *(void *)(v5 + 3552) = 0;
  *(void *)(v5 + 3560) = 0;
  *(void *)(v5 + 3568) = 0;
  *(void *)(v5 + 3576) = 0;
  *(void *)(v5 + 3584) = 0;
  *(void *)(v5 + 3592) = 0;
  *(void *)(v5 + 3600) = 0;
  *(void *)(v5 + 3616) = 0;
  memset((void *)(v5 + 1768), 0, 0x28uLL);
  memset((void *)(v5 + 1416), 0, 0x48uLL);
  *(_DWORD *)(v5 + 4584) = 0;
  *(void *)(v5 + 3672) = 0;
  *(void *)(v5 + 3680) = 0;
  *(void *)(v5 + 3688) = 0;
  *(void *)(v5 + 2984) = 0;
  *(void *)(v5 + 2992) = 0;
  *(void *)(v5 + 3016) = 0;
  *(void *)(v5 + 3024) = 0;
  *(void *)(v5 + 3712) = 0;
  *(void *)(v5 + 3720) = 0;
  *(void *)(v5 + 3728) = 0;
  *(_DWORD *)(v5 + 4524) = 0;
  *(unsigned char *)(v5 + 4528) = 0;
  *(unsigned char *)(v5 + 4656) = 0;
  *(unsigned char *)(v5 + 4664) = 0;
  *(void *)(v5 + 3736) = 0;
  *(void *)(v5 + 3744) = 0;
  *(void *)(v5 + 3752) = 0;
  *(void *)(v5 + 2600) = 0;
  *(void *)(v5 + 2608) = 0;
  *(void *)(v5 + 2616) = 0;
  *(_DWORD *)(v5 + 4532) = 0;
  *(unsigned char *)(v5 + 4536) = 0;
  *(_DWORD *)(v5 + 4592) = 0;
  *(void *)(v5 + 2648) = 0;
  *(void *)(v5 + 2656) = 0;
  *(void *)(v5 + 2664) = 0;
  *(void *)(v5 + 3760) = 0;
  *(_DWORD *)(v5 + 4600) = 0;
  *(_DWORD *)(v5 + 4608) = 0;
  *(_DWORD *)(v5 + 4616) = 0;
  *(_DWORD *)(v5 + 4624) = 0;
  *(void *)(v5 + 3768) = 0;
  *(void *)(v5 + 3776) = 0;
  *(_DWORD *)(v5 + 4632) = 0;
  *(void *)(v5 + 2744) = 0;
  *(void *)(v5 + 2752) = 0;
  *(void *)(v5 + 2760) = 0;
  *(void *)(v5 + 3808) = 0;
  *(void *)(v5 + 3048) = 0;
  *(void *)(v5 + 3056) = 0;
  *(void *)(v5 + 3816) = 0;
  bzero((void *)(v5 + 856), 0x118uLL);
  *(void *)(v5 + 3880) = 0;
  *(void *)(v5 + 3112) = 0;
  *(void *)(v5 + 3120) = 0;
  *(void *)(v5 + 3128) = 0;
  *(void *)(v5 + 3136) = 0;
  *(void *)(v5 + 3920) = 0;
  *(_OWORD *)(v5 + 2424) = 0u;
  *(_OWORD *)(v5 + 2440) = 0u;
  *(void *)(v5 + 3976) = 0;
  uint64_t v6 = type metadata accessor for PFLError();
  *(void *)(v5 + 4040) = v6;
  *(void *)(v5 + 4048) = *(void *)(v6 - 8);
  *(void *)(v5 + 4056) = swift_task_alloc();
  *(void *)(v5 + 4064) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DateComponents();
  *(void *)(v5 + 4072) = v7;
  *(void *)(v5 + 4080) = *(void *)(v7 - 8);
  *(void *)(v5 + 4088) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  *(void *)(v5 + 4096) = swift_task_alloc();
  *(void *)(v5 + 4104) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Logger();
  *(void *)(v5 + 4112) = v8;
  *(void *)(v5 + 4120) = *(void *)(v8 - 8);
  *(void *)(v5 + 4128) = swift_task_alloc();
  *(void *)(v5 + 4136) = swift_task_alloc();
  *(void *)(v5 + 4144) = swift_task_alloc();
  *(void *)(v5 + 4152) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Date();
  *(void *)(v5 + 4160) = v9;
  *(void *)(v5 + 4168) = *(void *)(v9 - 8);
  *(void *)(v5 + 4176) = swift_task_alloc();
  *(void *)(v5 + 3152) = a1;
  *(void *)(v5 + 2936) = a2;
  *(void *)(v5 + 2944) = a3;
  *(void *)(v5 + 3160) = a4;
  *(void *)(v5 + 3168) = v4;
  return MEMORY[0x270FA2498](NightingalePFLRunner.run(task:useCase:context:), 0);
}

uint64_t NightingalePFLRunner.run(task:useCase:context:)()
{
  *(void *)(v0 + 3144) = v0;
  uint64_t v1 = PFLTask.taskId.getter();
  NightingaleDPFLRunner.taskId.setter(v1, v2);
  type metadata accessor for HyperParams();
  dispatch thunk of PFLTask.recipe.getter();
  uint64_t v3 = _dictionaryUpCast<A, B, C, D>(_:)();
  uint64_t v65 = HyperParams.__allocating_init(recipe:)(v3);
  *(void *)(v0 + 4184) = v65;
  swift_bridgeObjectRelease();
  *(void *)(v0 + 3176) = v65;
  NightingaleTraining::NightingalePFLModelType v66 = PFLTask.modelType.getter();
  *(unsigned char *)(v0 + 4645) = v66;
  *(unsigned char *)(v0 + 4640) = v66;
  NightingalePFLRunner.sendLocation(_:hyperParams:)(1, v65);
  *(unsigned char *)(v0 + 4461) = v66;
  *(unsigned char *)(v0 + 4462) = 1;
  *(void *)(v0 + 4192) = lazy protocol witness table accessor for type NightingalePFLModelType and conformance NightingalePFLModelType();
  if (== infix<A>(_:_:)())
  {
    outlined init with copy of HealthDataQuery(*(void *)(v64 + 4032) + 64, v64 + 1488);
    uint64_t v62 = *(void *)(v64 + 1512);
    uint64_t v63 = *(void *)(v64 + 1520);
    __swift_project_boxed_opaque_existential_1((void *)(v64 + 1488), v62);
    v4._uint64_t countAndFlagsBits = HyperParams.heartRateFwEnd10PctModelName.getter();
    Swift::String v5 = PFLTask.getValidModelPath(modelFileSuffix:)(v4);
    if (v6)
    {
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1(v64 + 1488);
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
      v7._uint64_t countAndFlagsBits = HyperParams.heartRatePeriod10PctModelName.getter();
      Swift::String v8 = PFLTask.getValidModelPath(modelFileSuffix:)(v7);
      if (v9)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1(v64 + 1488);
        swift_release();
      }
      else
      {
        swift_bridgeObjectRelease();
        v10._uint64_t countAndFlagsBits = HyperParams.wTmpFwEndLstmModelName.getter();
        Swift::String v11 = PFLTask.getValidModelPath(modelFileSuffix:)(v10);
        if (v12)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          __swift_destroy_boxed_opaque_existential_1(v64 + 1488);
          swift_release();
        }
        else
        {
          swift_bridgeObjectRelease();
          v13._uint64_t countAndFlagsBits = HyperParams.wTmpFwEndRFModelName.getter();
          Swift::String v14 = PFLTask.getValidModelPath(modelFileSuffix:)(v13);
          if (v15)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            __swift_destroy_boxed_opaque_existential_1(v64 + 1488);
            swift_release();
          }
          else
          {
            swift_bridgeObjectRelease();
            v16._uint64_t countAndFlagsBits = HyperParams.wTmpPeriodLstmModelName.getter();
            Swift::String v17 = PFLTask.getValidModelPath(modelFileSuffix:)(v16);
            if (v18)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              __swift_destroy_boxed_opaque_existential_1(v64 + 1488);
              swift_release();
            }
            else
            {
              uint64_t v57 = *(void *)(v64 + 4032);
              swift_bridgeObjectRelease();
              id v56 = (id)(*(uint64_t (**)(uint64_t, void *, uint64_t, void *, uint64_t, void *, uint64_t, void *, uint64_t, void *, void, void, void, uint64_t, uint64_t))(v63 + 64))(v5._countAndFlagsBits, v5._object, v8._countAndFlagsBits, v8._object, v11._countAndFlagsBits, v11._object, v14._countAndFlagsBits, v14._object, v17._countAndFlagsBits, v17._object, 0, 0, 0, v62, v63);
              *(void *)(v64 + 4200) = v56;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              *(void *)(v64 + 3184) = v56;
              __swift_destroy_boxed_opaque_existential_1(v64 + 1488);
              Swift::Double v19 = PFLTask.iterationElapsedTime()();
              *(Swift::Double *)(v64 + 4208) = v19;
              *(Swift::Double *)(v64 + 3192) = v19;
              NightingaleDPFLRunner.performanceMeasure.getter();
              String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PluginE2E", 9uLL, 1);
              dispatch thunk of PerformanceMeasure.start(_:)();
              swift_bridgeObjectRelease();
              swift_release();
              NightingaleDPFLRunner.performanceMeasure.getter();
              String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("DayStreamProcessorConfig", 0x18uLL, 1);
              dispatch thunk of PerformanceMeasure.start(_:)();
              swift_bridgeObjectRelease();
              swift_release();
              outlined init with copy of HealthDataQuery(v57 + 64, v64 + 1528);
              uint64_t v58 = *(void *)(v64 + 1552);
              uint64_t v59 = *(void *)(v64 + 1560);
              __swift_project_boxed_opaque_existential_1((void *)(v64 + 1528), v58);
              char v60 = HyperParams.birthDateRequired.getter();
              char v20 = HyperParams.useCachedDayStreamProcessorConfig.getter();
              id v61 = (id)(*(uint64_t (**)(void, void, uint64_t))(v59 + 48))(v60 & 1, v20 & 1, v58);
              *(void *)(v64 + 4216) = v61;
              *(void *)(v64 + 4224) = v21;
              *(void *)(v64 + 4232) = v22;
              *(void *)(v64 + 3200) = v61;
              *(void *)(v64 + 3208) = v21;
              *(void *)(v64 + 3216) = v22;
              __swift_destroy_boxed_opaque_existential_1(v64 + 1528);
              NightingaleDPFLRunner.performanceMeasure.getter();
              String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("DayStreamProcessorConfig", 0x18uLL, 1);
              dispatch thunk of PerformanceMeasure.finish(_:)();
              uint64_t v53 = v23;
              *(void *)(v64 + 4240) = v23;
              swift_bridgeObjectRelease();
              swift_release();
              *(void *)(v64 + 3224) = v53;
              NightingalePFLRunner.sendLocation(_:hyperParams:)(2, v65);
              char v54 = HyperParams.pflTaskType.getter();
              *(unsigned char *)(v64 + 4646) = v54;
              *(unsigned char *)(v64 + 4648) = v54;
              uint64_t v55 = PFLTask.trainingModelPath(taskType:hyperParams:)();
              *(void *)(v64 + 4248) = v55;
              *(void *)(v64 + 4256) = v24;
              *(void *)(v64 + 2952) = v55;
              *(void *)(v64 + 2960) = v24;
              uint64_t v52 = PFLTask.evalModelNames(taskType:hyperParams:)();
              *(void *)(v64 + 4264) = v52;
              uint64_t v50 = *(void *)(v64 + 4032);
              *(void *)(v64 + 3232) = v52;
              dispatch_group_t v48 = dispatch_group_create();
              *(void *)(v64 + 4272) = v48;
              *(void *)(v64 + 3240) = v48;
              unsigned int v49 = HyperParams.maximumDays.getter();
              *(_DWORD *)(v64 + 4604) = v49;
              *(_DWORD *)(v64 + 4448) = v49;
              unsigned int v51 = HyperParams.minimumDaysAgo.getter();
              *(_DWORD *)(v64 + 4612) = v51;
              *(_DWORD *)(v64 + 4464) = v51;
              if (*(unsigned char *)(v50 + 108))
              {
                uint64_t v43 = *(void *)(v64 + 4176);
                uint64_t v42 = *(void *)(v64 + 4160);
                uint64_t v41 = *(void *)(v64 + 4168);
                Date.init()();
                *(Swift::UInt32_optional *)&uint64_t v25 = Date.toJulianDay()();
                unsigned int v45 = v25;
                char v44 = BYTE4(v25);
                (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v43, v42);
                unsigned int v46 = v45;
                char v47 = v44;
              }
              else
              {
                uint64_t v26 = *(void *)(v64 + 4032);
                if (*(unsigned char *)(v26 + 108)) {
                  return _assertionFailure(_:_:file:line:flags:)();
                }
                unsigned int v46 = *(_DWORD *)(v26 + 104);
                char v47 = *(unsigned char *)(v26 + 108);
              }
              *(_DWORD *)(v64 + 4620) = v46;
              if ((v47 & 1) == 0)
              {
                *(_DWORD *)(v64 + 4480) = v46;
                if (v49 < v46 && v49 >= v51)
                {
                  int v28 = HyperParams.sHRQueryBatchSize.getter();
                  *(_DWORD *)(v64 + 4628) = v28;
                  *(_DWORD *)(v64 + 4544) = v28;
                  *(void *)(v64 + 3248) = 0;
                  *(void *)(v64 + 3256) = 0;
                  *(void *)(v64 + 3264) = 0;
                  *(void *)(v64 + 3272) = 0;
                  *(void *)(v64 + 3280) = 0;
                  *(void *)(v64 + 3288) = Dictionary.init()();
                  *(void *)(v64 + 3296) = Dictionary.init()();
                  *(void *)(v64 + 3304) = Dictionary.init()();
                  *(void *)(v64 + 3312) = Dictionary.init()();
                  NightingaleDPFLRunner.performanceMeasure.getter();
                  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RawSamplesQuery", 0xFuLL, 1);
                  dispatch thunk of PerformanceMeasure.start(_:)();
                  swift_bridgeObjectRelease();
                  swift_release();
                  uint64_t v29 = _allocateUninitializedArray<A>(_:)();
                  *int v30 = 0;
                  v30[1] = 3;
                  void v30[2] = 1;
                  v30[3] = 2;
                  _finalizeUninitializedArray<A>(_:)();
                  *(void *)(v64 + 3320) = v29;
                  if (isSleepingWTNeeded(_:)(v66))
                  {
                    *(unsigned char *)(v64 + 4644) = 7;
                    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HealthDataRawSampleType]);
                    Array.append(_:)();
                  }
                  uint64_t v37 = *(void *)(v64 + 4032);
                  double v39 = (double)HyperParams.rawSampleTimeout.getter();
                  uint64_t v38 = *(void *)(v64 + 3320);
                  swift_bridgeObjectRetain();
                  swift_retain();
                  uint64_t v40 = swift_allocObject();
                  *(void *)(v64 + 4280) = v40;
                  *(void *)(v40 + 16) = v37;
                  *(void *)(v40 + 24) = v38;
                  *(_DWORD *)(v40 + 32) = v46;
                  *(_DWORD *)(v40 + 36) = v49;
                  *(_DWORD *)(v40 + 40) = v51;
                  int v31 = (void *)swift_task_alloc();
                  *(void *)(v64 + 4288) = v31;
                  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HealthDataRawSampleType : HealthDataQueryResult]);
                  v33.n128_f64[0] = v39;
                  *int v31 = *(void *)(v64 + 3144);
                  v31[1] = NightingalePFLRunner.run(task:useCase:context:);
                  return MEMORY[0x270F57130](v64 + 3328, &async function pointer to partial apply for closure #1 in NightingalePFLRunner.run(task:useCase:context:), v40, v32, v33);
                }
              }
              lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
              swift_allocError();
              unsigned char *v34 = 14;
              swift_willThrow();

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              swift_release();
            }
          }
        }
      }
    }
  }
  else
  {
    lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
    swift_allocError();
    *int v35 = 11;
    swift_willThrow();
    swift_release();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v36 = *(uint64_t (**)())(*(void *)(v64 + 3144) + 8);
  return v36();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;

  Swift::String v4 = *v1;
  *(void *)(v4 + 3144) = *v1;
  *(void *)(v4 + 4296) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = NightingalePFLRunner.run(task:useCase:context:);
  }
  else
  {
    swift_release();
    uint64_t v2 = NightingalePFLRunner.run(task:useCase:context:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;

  Swift::String v4 = *v1;
  *(void *)(v4 + 3144) = *v1;
  *(void *)(v4 + 4440) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = NightingalePFLRunner.run(task:useCase:context:);
  }
  else
  {
    swift_release();
    uint64_t v2 = NightingalePFLRunner.run(task:useCase:context:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  id v1;
  unsigned char *v2;
  id v3;
  uint64_t (*v4)();
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  id v15;
  uint64_t v16;

  uint64_t v15 = (id)v0[537];
  v0[393] = v0;
  swift_release();
  uint64_t v1 = v15;
  v0[417] = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast())
  {
    if ((*(unsigned int (**)(void, void))(*(void *)(v14 + 4048) + 88))(*(void *)(v14 + 4064), *(void *)(v14 + 4040)) == *MEMORY[0x263F61130])
    {
      Swift::String v10 = *(id *)(v14 + 4296);
      Swift::String v11 = *(id *)(v14 + 4272);
      uint64_t v12 = *(id *)(v14 + 4216);
      Swift::String v13 = *(id *)(v14 + 4200);
      lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
      swift_allocError();
      *uint64_t v2 = 5;
      swift_willThrow();

      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_release();
      goto LABEL_7;
    }
    (*(void (**)(void, void))(*(void *)(v14 + 4048) + 8))(*(void *)(v14 + 4064), *(void *)(v14 + 4040));
  }
  else
  {
  }
  uint64_t v6 = *(id *)(v14 + 4296);
  Swift::String v7 = *(id *)(v14 + 4272);
  Swift::String v8 = *(id *)(v14 + 4216);
  uint64_t v9 = *(id *)(v14 + 4200);
  uint64_t v3 = v6;
  *(void *)(v14 + 3344) = v6;
  swift_willThrow();

  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
LABEL_7:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  Swift::String v4 = *(uint64_t (**)())(*(void *)(v14 + 3144) + 8);
  return v4();
}

{
  void *v0;
  id v1;
  unsigned char *v2;
  id v3;
  uint64_t (*v4)();
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  id v15;
  uint64_t v16;

  uint64_t v15 = (id)v0[555];
  v0[393] = v0;
  swift_release();
  uint64_t v1 = v15;
  v0[489] = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast())
  {
    if ((*(unsigned int (**)(void, void))(*(void *)(v14 + 4048) + 88))(*(void *)(v14 + 4056), *(void *)(v14 + 4040)) == *MEMORY[0x263F61130])
    {
      Swift::String v10 = *(id *)(v14 + 4440);
      Swift::String v11 = *(id *)(v14 + 4272);
      uint64_t v12 = *(id *)(v14 + 4216);
      Swift::String v13 = *(id *)(v14 + 4200);
      lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
      swift_allocError();
      *uint64_t v2 = 6;
      swift_willThrow();

      outlined destroy of [A]();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_release();
      goto LABEL_7;
    }
    (*(void (**)(void, void))(*(void *)(v14 + 4048) + 8))(*(void *)(v14 + 4056), *(void *)(v14 + 4040));
  }
  else
  {
  }
  uint64_t v6 = *(id *)(v14 + 4440);
  Swift::String v7 = *(id *)(v14 + 4272);
  Swift::String v8 = *(id *)(v14 + 4216);
  uint64_t v9 = *(id *)(v14 + 4200);
  uint64_t v3 = v6;
  *(void *)(v14 + 3920) = v6;
  swift_willThrow();

  outlined destroy of [A]();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
LABEL_7:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  Swift::String v4 = *(uint64_t (**)())(*(void *)(v14 + 3144) + 8);
  return v4();
}

#error "257CA8660: too big function (funcsize=0)"

uint64_t NightingalePFLRunner.run(task:useCase:context:)(uint64_t a1)
{
  uint64_t v408 = v1;
  MEMORY[0x270FA5388](a1);
  uint64_t v364 = *(void *)(v1 + 4184);
  *(void *)(v1 + 3144) = v1;
  uint64_t v359 = *(void *)(v1 + 2392);
  uint64_t v360 = *(void *)(v1 + 2400);
  uint64_t v361 = *(void *)(v1 + 2408);
  uint64_t v362 = *(void *)(v1 + 2416);
  *(void *)(v1 + 2424) = v359;
  *(void *)(v1 + 2432) = v360;
  *(void *)(v1 + 2440) = v361;
  *(void *)(v1 + 2448) = v362;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(void *)(v1 + 3288) = v359;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(void *)(v1 + 3296) = v360;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(void *)(v1 + 3304) = v361;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(void *)(v1 + 3312) = v362;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  NightingaleDPFLRunner.performanceMeasure.getter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SHRQuery", 8uLL, 1);
  dispatch thunk of PerformanceMeasure.finish(_:)();
  uint64_t v363 = v2;
  swift_bridgeObjectRelease();
  swift_release();
  *(void *)(v1 + 3480) = v363;
  NightingalePFLRunner.sendLocation(_:hyperParams:)(5, v364);
  uint64_t v365 = *(void *)(v1 + 4440);
  *(unsigned char *)(v1 + 4537) = *(unsigned char *)(v1 + 4646);
  *(unsigned char *)(v1 + 4538) = 5;
  if ((== infix<A>(_:_:)() & 1) == 0)
  {
    uint64_t urPeriodLength_8 = *(void *)(v1 + 4232);
    Swift::Double urPeriodLength = *(double *)(v1 + 4224);
    NightingaleDPFLRunner.performanceMeasure.getter();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Featurization", 0xDuLL, 1);
    dispatch thunk of PerformanceMeasure.start(_:)();
    swift_bridgeObjectRelease();
    swift_release();
    type metadata accessor for Featurizer();
    uint64_t v50 = Featurizer.__allocating_init()();
    v410.Swift::Float value = urPeriodLength;
    uint64_t v51 = urPeriodLength_8;
    *(void *)(v1 + 3488) = v50;
    LOBYTE(v50) = LOBYTE(urPeriodLength);
    v410.Swift::Bool is_nil = 0;
    double v234 = calculateDummyPeriodLength(urCycleLength:urPeriodLength:)(*(Swift::Double_optional *)(&v50 - 1), v410);
    if (((*(void *)&v234 >> 52) & 0x7FFLL) != 0x7FF && v234 > -1.0 && v234 < 4294967300.0)
    {
      char v230 = *(unsigned char *)(v1 + 4645);
      unsigned int dummyPeriodLength = v234;
      *(_DWORD *)(v1 + 4552) = v234;
      *(void *)(v1 + 3496) = specialized Array.init()();
      *(void *)(v1 + 3504) = specialized Array.init()();
      *(void *)(v1 + 3512) = specialized Array.init()();
      *(void *)(v1 + 3520) = specialized Array.init()();
      *(void *)(v1 + 3528) = specialized Array.init()();
      *(void *)(v1 + 3536) = specialized Array.init()();
      *(void *)(v1 + 3544) = specialized Array.init()();
      Swift::UInt32 v228 = HyperParams.labelSize.getter();
      *(_DWORD *)(v1 + 4560) = v228;
      Swift::UInt32 sliceSize = HyperParams.sliceSize.getter();
      *(_DWORD *)(v1 + 4568) = sliceSize;
      Swift::UInt32 maxNumDaysToNextPeriod = HyperParams.maxNumDaysToNextPeriod.getter();
      *(_DWORD *)(v1 + 4576) = maxNumDaysToNextPeriod;
      memset(&v366, 0, sizeof(v366));
      Swift::Float v367 = 0.0;
      char v368 = 1;
      Swift::Float v369 = 0.0;
      *(unsigned char *)(v1 + 4539) = v230;
      *(unsigned char *)(v1 + 4636) = 1;
      if (== infix<A>(_:_:)())
      {
        historicalPeriods = (Swift::OpaquePointer *)(*(void *)(v1 + 4352) + 16);
        Swift::UInt32 minNumDaysToNextPeriod = HyperParams.minNumDaysToNextPeriod.getter();
        uint64_t minNumOfDaySHRPerSlice = HyperParams.minNumOfDaySHRPerSlice.getter();
        swift_beginAccess();
        Featurizer.featurizeHRPeriodPrediction(flows:daySHR10s:nightSHR10s:calendarPeriodPredictions:historicalPeriods:cycleFactors:dummyPeriodLength:sliceSize:maxNumDaysToNextPeriod:minNumDaysToNextPeriod:minNumOfDaySHRPerSlice:)(&v378, (Swift::OpaquePointer *)(v1 + 3368), (Swift::OpaquePointer *)(v1 + 3288), (Swift::OpaquePointer *)(v1 + 3296), (Swift::OpaquePointer *)(v1 + 3464), historicalPeriods, (Swift::OpaquePointer *)(v1 + 3432), dummyPeriodLength, sliceSize, maxNumDaysToNextPeriod, minNumDaysToNextPeriod, minNumOfDaySHRPerSlice);
        uint64_t rawValue = v378.flow._rawValue;
        uint64_t v222 = v378.daySHR10._rawValue;
        uint64_t v223 = v378.nightSHR10._rawValue;
        uint64_t v224 = v378.periodStartMean._rawValue;
        uint64_t v225 = v378.periodStartStd._rawValue;
        uint64_t v226 = v378.labels._rawValue;
        Swift::tuple_size_Float_mean_Float_std_Float cycleStats = v378.cycleStats;
        Swift::Float v218 = v378.daySHR10CountStats.mean.value;
        Swift::Bool is_nil = v378.daySHR10CountStats.mean.is_nil;
        Swift::Float std = v378.daySHR10CountStats.std;
        swift_endAccess();
        *(void *)(v1 + 1416) = rawValue;
        *(void *)(v1 + 1424) = v222;
        *(void *)(v1 + 1432) = v223;
        *(void *)(v1 + 1440) = v224;
        *(void *)(v1 + 1448) = v225;
        *(void *)(v1 + 1456) = v226;
        *(Swift::tuple_size_Float_mean_Float_std_Float *)(v1 + 1464) = cycleStats;
        *(Swift::Float *)(v1 + 1476) = v218;
        *(unsigned char *)(v1 + 1480) = is_nil;
        *(Swift::Float *)(v1 + 1484) = std;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        *(void *)(v1 + 3496) = rawValue;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        *(void *)(v1 + 3504) = v222;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        *(void *)(v1 + 3512) = v223;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        *(void *)(v1 + 3520) = v224;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        *(void *)(v1 + 3528) = v225;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        *(void *)(v1 + 3544) = v226;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        Swift::tuple_size_Float_mean_Float_std_Float v366 = cycleStats;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        Swift::Float v367 = v218;
        char v368 = is_nil;
        Swift::Float v369 = std;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_81:
        uint64_t v210 = *(void *)(v1 + 3544);
        swift_bridgeObjectRetain();
        uint64_t v211 = MEMORY[0x25A2C0830](v210);
        swift_bridgeObjectRelease();
        if (v211 < HyperParams.minNumSlice.getter())
        {
          id v207 = *(id *)(v1 + 4272);
          id v208 = *(id *)(v1 + 4216);
          id v209 = *(id *)(v1 + 4200);
          lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
          swift_allocError();
          *uint64_t v52 = 8;
          swift_willThrow();
          outlined destroy of [A]();
          outlined destroy of [A]();
          outlined destroy of [A]();
          outlined destroy of [A]();
          outlined destroy of [A]();
          outlined destroy of [A]();
          outlined destroy of [A]();
          swift_release();
          outlined destroy of [A]();
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          outlined destroy of [A]();
          outlined destroy of [A]();
          outlined destroy of [A]();
          outlined destroy of [A]();
          outlined destroy of [A]();
          outlined destroy of [A]();
          outlined destroy of [A]();
          outlined destroy of [A]();
          outlined destroy of [A]();
          outlined destroy of [A]();
          outlined destroy of [A]();
          outlined destroy of [A]();
          outlined destroy of [A]();
          outlined destroy of [A]();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          swift_release();
          goto LABEL_119;
        }
        if (HyperParams.minCycleLenStd.getter() > v366.std || v366.std >= HyperParams.maxCycleLenStd.getter())
        {
          float v145 = *(void **)(v1 + 4272);
          float v146 = *(void **)(v1 + 4216);
          id v147 = *(id *)(v1 + 4200);
          lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
          swift_allocError();
          *float v90 = 25;
          swift_willThrow();
          outlined destroy of [A]();
          outlined destroy of [A]();
          outlined destroy of [A]();
          outlined destroy of [A]();
          outlined destroy of [A]();
          outlined destroy of [A]();
          outlined destroy of [A]();
          swift_release();
          outlined destroy of [A]();
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          outlined destroy of [A]();
          outlined destroy of [A]();
          outlined destroy of [A]();
          outlined destroy of [A]();
          outlined destroy of [A]();
          outlined destroy of [A]();
          outlined destroy of [A]();
          outlined destroy of [A]();
          outlined destroy of [A]();
          outlined destroy of [A]();
          outlined destroy of [A]();
          outlined destroy of [A]();
          outlined destroy of [A]();
          outlined destroy of [A]();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          swift_release();
          goto LABEL_119;
        }
        uint64_t v205 = HyperParams.maxNumSlice.getter();
        *(void *)(v1 + 3552) = v205;
        Swift::Int v206 = NightingalePFLModelType.numFeatures()();
        *(void *)(v1 + 3560) = v206;
        if (v205 == -1) {
          goto LABEL_93;
        }
        uint64_t v203 = *(void *)(v1 + 3544);
        swift_bridgeObjectRetain();
        uint64_t v204 = MEMORY[0x25A2C0830](v203);
        swift_bridgeObjectRelease();
        if (v205 >= v204) {
          goto LABEL_93;
        }
        uint64_t v200 = *(void *)(v1 + 3544);
        swift_bridgeObjectRetain();
        uint64_t v201 = MEMORY[0x25A2C0830](v200);
        swift_bridgeObjectRelease();
        uint64_t result = v201;
        uint64_t v202 = v201 - v205;
        if (__OFSUB__(v201, v205))
        {
          __break(1u);
        }
        else
        {
          *(void *)(v1 + 3600) = v202;
          *(_DWORD *)(v1 + 4556) = sliceSize;
          lazy protocol witness table accessor for type Int and conformance Int();
          lazy protocol witness table accessor for type Int and conformance Int();
          lazy protocol witness table accessor for type UInt32 and conformance UInt32();
          uint64_t result = SignedInteger<>.init<A>(_:)();
          uint64_t v54 = *(void *)(v1 + 3608);
          if ((unsigned __int128)(v202 * (__int128)v54) >> 64 == (v202 * v54) >> 63)
          {
            *(void *)(v1 + 3616) = v202 * v54;
            uint64_t v194 = *(void *)(v1 + 3496);
            swift_bridgeObjectRetain();
            *(void *)(v1 + 3624) = v194;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
            lazy protocol witness table accessor for type [Float] and conformance [A]();
            Collection.dropFirst(_:)();
            uint64_t v55 = *(void *)(v1 + 2016);
            uint64_t v56 = *(void *)(v1 + 2024);
            uint64_t v57 = *(void *)(v1 + 2032);
            *(void *)(v1 + 2040) = *(void *)(v1 + 2008);
            *(void *)(v1 + 2048) = v55;
            *(void *)(v1 + 2056) = v56;
            *(void *)(v1 + 2064) = v57;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ArraySlice<Float>);
            lazy protocol witness table accessor for type ArraySlice<Float> and conformance ArraySlice<A>();
            *(void *)(v1 + 3496) = Array.init<A>(_:)();
            swift_bridgeObjectRelease();
            uint64_t v195 = *(void *)(v1 + 3504);
            swift_bridgeObjectRetain();
            *(void *)(v1 + 3632) = v195;
            Collection.dropFirst(_:)();
            uint64_t v58 = *(void *)(v1 + 2080);
            uint64_t v59 = *(void *)(v1 + 2088);
            uint64_t v60 = *(void *)(v1 + 2096);
            *(void *)(v1 + 2104) = *(void *)(v1 + 2072);
            *(void *)(v1 + 2112) = v58;
            *(void *)(v1 + 2120) = v59;
            *(void *)(v1 + 2128) = v60;
            *(void *)(v1 + 3504) = Array.init<A>(_:)();
            swift_bridgeObjectRelease();
            uint64_t v196 = *(void *)(v1 + 3512);
            swift_bridgeObjectRetain();
            *(void *)(v1 + 3640) = v196;
            Collection.dropFirst(_:)();
            uint64_t v61 = *(void *)(v1 + 2144);
            uint64_t v62 = *(void *)(v1 + 2152);
            uint64_t v63 = *(void *)(v1 + 2160);
            *(void *)(v1 + 2168) = *(void *)(v1 + 2136);
            *(void *)(v1 + 2176) = v61;
            *(void *)(v1 + 2184) = v62;
            *(void *)(v1 + 2192) = v63;
            *(void *)(v1 + 3512) = Array.init<A>(_:)();
            swift_bridgeObjectRelease();
            uint64_t v197 = *(void *)(v1 + 3520);
            swift_bridgeObjectRetain();
            *(void *)(v1 + 3648) = v197;
            Collection.dropFirst(_:)();
            uint64_t v64 = *(void *)(v1 + 2208);
            uint64_t v65 = *(void *)(v1 + 2216);
            uint64_t v66 = *(void *)(v1 + 2224);
            *(void *)(v1 + 2232) = *(void *)(v1 + 2200);
            *(void *)(v1 + 2240) = v64;
            *(void *)(v1 + 2248) = v65;
            *(void *)(v1 + 2256) = v66;
            *(void *)(v1 + 3520) = Array.init<A>(_:)();
            swift_bridgeObjectRelease();
            uint64_t v198 = *(void *)(v1 + 3528);
            swift_bridgeObjectRetain();
            *(void *)(v1 + 3656) = v198;
            Collection.dropFirst(_:)();
            uint64_t v67 = *(void *)(v1 + 2272);
            uint64_t v68 = *(void *)(v1 + 2280);
            uint64_t v69 = *(void *)(v1 + 2288);
            *(void *)(v1 + 2296) = *(void *)(v1 + 2264);
            *(void *)(v1 + 2304) = v67;
            *(void *)(v1 + 2312) = v68;
            *(void *)(v1 + 2320) = v69;
            *(void *)(v1 + 3528) = Array.init<A>(_:)();
            swift_bridgeObjectRelease();
            uint64_t v199 = *(void *)(v1 + 3544);
            swift_bridgeObjectRetain();
            *(void *)(v1 + 3664) = v199;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32]);
            lazy protocol witness table accessor for type [UInt32] and conformance [A]();
            Collection.dropFirst(_:)();
            uint64_t v70 = *(void *)(v1 + 2336);
            uint64_t v71 = *(void *)(v1 + 2344);
            uint64_t v72 = *(void *)(v1 + 2352);
            *(void *)(v1 + 2360) = *(void *)(v1 + 2328);
            *(void *)(v1 + 2368) = v70;
            *(void *)(v1 + 2376) = v71;
            *(void *)(v1 + 2384) = v72;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ArraySlice<UInt32>);
            lazy protocol witness table accessor for type ArraySlice<UInt32> and conformance ArraySlice<A>();
            *(void *)(v1 + 3544) = Array.init<A>(_:)();
            swift_bridgeObjectRelease();
LABEL_93:
            char v192 = default argument 0 of Dictionary.removeAll(keepingCapacity:)();
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : UInt8]);
            Dictionary.removeAll(keepingCapacity:)(v192 & 1);
            char v73 = default argument 0 of Dictionary.removeAll(keepingCapacity:)();
            Dictionary.removeAll(keepingCapacity:)(v73 & 1);
            char v193 = default argument 0 of Dictionary.removeAll(keepingCapacity:)();
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : Bool]);
            Dictionary.removeAll(keepingCapacity:)(v193 & 1);
            if (*(void *)(v1 + 3280))
            {
              char v191 = default argument 0 of Dictionary.removeAll(keepingCapacity:)();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : Float]);
              Dictionary.removeAll(keepingCapacity:)(v191 & 1);
            }
            uint64_t v184 = *(void *)(v1 + 4344);
            uint64_t v183 = *(void *)(v1 + 4304);
            char v189 = *(unsigned char *)(v1 + 4646);
            uint64_t v182 = *(void *)(v1 + 4240);
            uint64_t v188 = *(void *)(v1 + 4208);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (periodStartMean: Float, periodStartStd: Float));
            char v178 = default argument 0 of Dictionary.removeAll(keepingCapacity:)();
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : (periodStartMean: Float, periodStartStd: Float)]);
            Dictionary.removeAll(keepingCapacity:)(v178 & 1);
            swift_beginAccess();
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (start: UInt32, end: UInt32));
            char v179 = default argument 1 of NightingaleDPFLRunner.sendLocationAsync<A>(location:force:work:)();
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(start: UInt32, end: UInt32)]);
            Array.removeAll(keepingCapacity:)(v179 & 1);
            swift_endAccess();
            char v180 = default argument 0 of Dictionary.removeAll(keepingCapacity:)();
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8 : [(start: UInt32, end: UInt32)]]);
            Dictionary.removeAll(keepingCapacity:)(v180 & 1);
            char v181 = default argument 0 of Dictionary.removeAll(keepingCapacity:)();
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : Float]);
            Dictionary.removeAll(keepingCapacity:)(v181 & 1);
            char v74 = default argument 0 of Dictionary.removeAll(keepingCapacity:)();
            Dictionary.removeAll(keepingCapacity:)(v74 & 1);
            NightingaleDPFLRunner.performanceMeasure.getter();
            String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Featurization", 0xDuLL, 1);
            dispatch thunk of PerformanceMeasure.finish(_:)();
            uint64_t v185 = v75;
            swift_bridgeObjectRelease();
            swift_release();
            *(void *)(v1 + 3568) = v185;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any));
            _allocateUninitializedArray<A>(_:)();
            uint64_t v187 = v76;
            float v77 = NightingalePFLRunner.keyMetricsDayStreamProcessorConfigDurationS.unsafeMutableAddressor();
            outlined init with copy of String(v77, v187);
            uint64_t v186 = MEMORY[0x263F8D538];
            v187[5] = MEMORY[0x263F8D538];
            v187[2] = v182;
            int v78 = NightingalePFLRunner.keyMetricsRawSamplesDurationS.unsafeMutableAddressor();
            outlined init with copy of String(v78, v187 + 6);
            v187[11] = v186;
            v187[8] = v183;
            uint64_t v79 = NightingalePFLRunner.keyMetricsCalendarPredictionDurationS.unsafeMutableAddressor();
            outlined init with copy of String(v79, v187 + 12);
            v187[17] = v186;
            v187[14] = v184;
            Swift::Int v80 = NightingalePFLRunner.keyMetricsSHRDurationS.unsafeMutableAddressor();
            outlined init with copy of String(v80, v187 + 18);
            uint64_t v81 = *(void *)(v1 + 3480);
            v187[23] = v186;
            v187[20] = v81;
            BOOL v82 = NightingalePFLRunner.keyMetricsFeaturizationDurationS.unsafeMutableAddressor();
            outlined init with copy of String(v82, v187 + 24);
            v187[29] = v186;
            v187[26] = v185;
            uint64_t v83 = NightingalePFLRunner.keyMetricsIterationElapsedTime.unsafeMutableAddressor();
            outlined init with copy of String(v83, v187 + 30);
            v187[35] = v186;
            v187[32] = v188;
            _finalizeUninitializedArray<A>(_:)();
            uint64_t v190 = Dictionary.init(dictionaryLiteral:)();
            *(void *)(v1 + 3576) = v190;
            *(unsigned char *)(v1 + 4639) = v189;
            *(unsigned char *)(v1 + 4641) = 2;
            if (== infix<A>(_:_:)())
            {
              id v176 = *(id *)(v1 + 4216);
              uint64_t v174 = *(void *)(v1 + 3544);
              swift_bridgeObjectRetain();
              uint64_t v175 = MEMORY[0x25A2C0830](v174);
              swift_bridgeObjectRelease();
              id v177 = objc_msgSend(v176, sel_birthDateComponents);
              if (v177)
              {
                uint64_t v173 = *(void *)(v1 + 4096);
                uint64_t v171 = *(void *)(v1 + 4088);
                uint64_t v172 = *(void *)(v1 + 4072);
                uint64_t v170 = *(void *)(v1 + 4080);
                static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();
                (*(void (**)(uint64_t, uint64_t, uint64_t))(v170 + 32))(v173, v171, v172);
                (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v170 + 56))(v173, 0, 1, v172);
              }
              else
              {
                (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v1 + 4080) + 56))(*(void *)(v1 + 4096), 1, 1, *(void *)(v1 + 4072));
              }
              uint64_t v169 = *(void *)(v1 + 4096);
              char v84 = HyperParams.birthDateRequired.getter();
              uint64_t v370 = calculateAge(components:birthDateRequired:)(v169, v84 & 1);
              if (!v365)
              {
                uint64_t v167 = *(void *)(v1 + 4272);
                uint64_t v166 = *(void *)(v1 + 4256);
                uint64_t v165 = *(void *)(v1 + 4248);
                uint64_t v164 = *(void *)(v1 + 4184);
                outlined destroy of DateComponents?(*(void *)(v1 + 4096));
                *(Swift::Float *)&uint64_t v371 = v366.size;
                BYTE4(v371) = 0;
                *(Swift::Float *)&uint64_t v372 = v366.mean;
                BYTE4(v372) = 0;
                *(Swift::Float *)&uint64_t v373 = v366.std;
                BYTE4(v373) = 0;
                *(Swift::Float *)&uint64_t v374 = v367;
                BYTE4(v374) = v368 & 1;
                *(Swift::Float *)&uint64_t v375 = v369;
                BYTE4(v375) = 0;
                LODWORD(v376) = v370;
                BYTE4(v376) = BYTE4(v370) & 1;
                uint64_t v168 = NightingalePFLRunner.runDemographics(dispatchGroup:hyperParams:modelPath:cycleStats:daySHR10CountStats:numberOfSlices:age:existingMetrics:)(v167, v164, v165, v166, v371, v372, v373, v374, (float)v175, v375, v376, v190);
                id v161 = *(id *)(v1 + 4272);
                id v162 = *(id *)(v1 + 4216);
                id v163 = *(id *)(v1 + 4200);
                swift_bridgeObjectRelease();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                swift_release();
                outlined destroy of [A]();
                swift_release();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_release();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();

                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();

                swift_release();
                uint64_t v247 = v168;
                goto LABEL_107;
              }
              id v101 = *(id *)(v1 + 4272);
              id v102 = *(id *)(v1 + 4216);
              id v103 = *(id *)(v1 + 4200);
              outlined destroy of DateComponents?(*(void *)(v1 + 4096));
              swift_bridgeObjectRelease();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              swift_release();
              outlined destroy of [A]();
              swift_release();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_release();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              swift_release();
            }
            else
            {
              NightingaleTraining::NightingalePFLModelType modelType = *(unsigned char *)(v1 + 4645);
              NightingaleDPFLRunner.performanceMeasure.getter();
              String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("FeatureRescaling", 0x10uLL, 1);
              dispatch thunk of PerformanceMeasure.start(_:)();
              swift_bridgeObjectRelease();
              swift_release();
              Featurizer.standardize(flow:daySHR:nightSHR:psm:pss:swt:modelType:sliceSize:)((Swift::OpaquePointer *)(v1 + 3496), (Swift::OpaquePointer *)(v1 + 3504), (Swift::OpaquePointer *)(v1 + 3512), (Swift::OpaquePointer *)(v1 + 3520), (Swift::OpaquePointer *)(v1 + 3528), (Swift::OpaquePointer *)(v1 + 3536), modelType, sliceSize);
              if (!v85)
              {
                uint64_t v156 = *(void *)(v1 + 4184);
                NightingaleDPFLRunner.performanceMeasure.getter();
                String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("FeatureRescaling", 0x10uLL, 1);
                dispatch thunk of PerformanceMeasure.finish(_:)();
                uint64_t v158 = v86;
                swift_bridgeObjectRelease();
                swift_release();
                *(void *)(v1 + 3584) = v158;
                NightingalePFLRunner.sendLocation(_:hyperParams:)(7, v156);
                swift_bridgeObjectRetain();
                _allocateUninitializedArray<A>(_:)();
                float v157 = v87;
                float v88 = NightingalePFLRunner.keyMetricsFeatureRescalingDurationS.unsafeMutableAddressor();
                outlined init with copy of String(v88, v157);
                v157[5] = MEMORY[0x263F8D538];
                v157[2] = v158;
                _finalizeUninitializedArray<A>(_:)();
                Dictionary.init(dictionaryLiteral:)();
                uint64_t v159 = Dictionary.merging(_:uniquingKeysWith:)();
                char v89 = *(unsigned char *)(v1 + 4646);
                *(void *)(v1 + 3592) = v159;
                *(unsigned char *)(v1 + 4642) = v89;
                *(unsigned char *)(v1 + 4643) = 0;
                if (== infix<A>(_:_:)())
                {
                  uint64_t v155 = NightingalePFLRunner.runTraining(modelPath:hyperParams:modelType:featureFlow:featureDaySHR:featureNightSHR:featurePSM:featurePSS:featureSWT:featureLabel:sliceSize:numFeatures:labelSize:existingMetrics:)(*(void *)(v1 + 4248), *(void *)(v1 + 4256), *(void *)(v1 + 4184), *(unsigned __int8 *)(v1 + 4645), v1 + 3496, v1 + 3504, v1 + 3512, v1 + 3520, (Swift::OpaquePointer *)(v1 + 3528), (Swift::OpaquePointer *)(v1 + 3536), (uint64_t *)(v1 + 3544), sliceSize, v206, v228, v159);
                  id v152 = *(id *)(v1 + 4272);
                  uint64_t v153 = *(void **)(v1 + 4216);
                  id v154 = *(id *)(v1 + 4200);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  swift_release();
                  outlined destroy of [A]();
                  swift_release();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_release();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();

                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();

                  swift_release();
                  uint64_t v247 = v155;
                }
                else
                {
                  uint64_t v151 = NightingalePFLRunner.runEvals(evalModels:task:hyperParams:modelType:featureFlow:featureDaySHR:featureNightSHR:featurePSM:featurePSS:featureSWT:featureLabel:sliceSize:numFeatures:existingMetrics:)(*(void *)(v1 + 4264), *(void *)(v1 + 4024), *(void *)(v1 + 4184), *(unsigned __int8 *)(v1 + 4645), (Swift::OpaquePointer *)(v1 + 3496), (Swift::OpaquePointer *)(v1 + 3504), (Swift::OpaquePointer *)(v1 + 3512), (Swift::OpaquePointer *)(v1 + 3520), (Swift::OpaquePointer *)(v1 + 3528), (Swift::OpaquePointer *)(v1 + 3536), (uint64_t *)(v1 + 3544), sliceSize, v206, v159);
                  id v148 = *(id *)(v1 + 4272);
                  id v149 = *(id *)(v1 + 4216);
                  id v150 = *(id *)(v1 + 4200);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  swift_release();
                  outlined destroy of [A]();
                  swift_release();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_release();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();

                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();

                  swift_release();
                  uint64_t v247 = v151;
                }
LABEL_107:
                swift_task_dealloc();
                swift_task_dealloc();
                swift_task_dealloc();
                swift_task_dealloc();
                swift_task_dealloc();
                swift_task_dealloc();
                swift_task_dealloc();
                swift_task_dealloc();
                swift_task_dealloc();
                swift_task_dealloc();
                uint64_t v91 = v247;
                uint64_t v92 = *(uint64_t (**)(uint64_t))(*(void *)(v1 + 3144) + 8);
                return v92(v91);
              }
              id v98 = *(id *)(v1 + 4272);
              id v99 = *(id *)(v1 + 4216);
              id v100 = *(id *)(v1 + 4200);
              swift_bridgeObjectRelease();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              swift_release();
              outlined destroy of [A]();
              swift_release();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_release();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              swift_release();
            }
LABEL_119:
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            uint64_t v91 = v333;
            uint64_t v92 = *(uint64_t (**)(uint64_t))(*(void *)(v1 + 3144) + 8);
            return v92(v91);
          }
        }
        __break(1u);
        goto LABEL_124;
      }
      *(unsigned char *)(v1 + 4637) = *(unsigned char *)(v1 + 4645);
      *(unsigned char *)(v1 + 4638) = 3;
      if ((== infix<A>(_:_:)() & 1) == 0) {
        goto LABEL_81;
      }
      if (*(void *)(v1 + 3280))
      {
        unint64_t v212 = (Swift::OpaquePointer *)(*(void *)(v1 + 4352) + 16);
        swift_beginAccess();
        Featurizer.featurizeWTPeriodPrediction(_:_:_:_:_:_:_:_:)(&v377, (Swift::OpaquePointer *)(v1 + 3368), (Swift::OpaquePointer *)(v1 + 3280), (Swift::OpaquePointer *)(v1 + 3464), v212, (Swift::OpaquePointer *)(v1 + 3432), dummyPeriodLength, sliceSize, maxNumDaysToNextPeriod);
        Swift::tuple_flow_OpaquePointer_swt_OpaquePointer_periodStartMean_OpaquePointer_periodStartStd_OpaquePointer_labels_OpaquePointer v213 = v377;
        swift_endAccess();
        *(Swift::tuple_flow_OpaquePointer_swt_OpaquePointer_periodStartMean_OpaquePointer_periodStartStd_OpaquePointer_labels_OpaquePointer *)(v1 + 1768) = v213;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        *(void *)(v1 + 3496) = v213.flow._rawValue;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        *(void *)(v1 + 3536) = v213.swt._rawValue;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        *(void *)(v1 + 3520) = v213.periodStartMean._rawValue;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        *(void *)(v1 + 3528) = v213.periodStartStd._rawValue;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        *(void *)(v1 + 3544) = v213.labels._rawValue;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_81;
      }
    }
    return _assertionFailure(_:_:file:line:flags:)();
  }
  uint64_t v357 = *(void *)(v1 + 4272);
  uint64_t v354 = *(void *)(v1 + 4184);
  uint64_t v353 = *(void *)(v1 + 4032);
  NightingaleDPFLRunner.performanceMeasure.getter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("BMIQuery", 8uLL, 1);
  dispatch thunk of PerformanceMeasure.start(_:)();
  swift_bridgeObjectRelease();
  swift_release();
  outlined init with copy of HealthDataQuery(v353 + 64, v1 + 1808);
  uint64_t v355 = *(void *)(v1 + 1832);
  uint64_t v356 = *(void *)(v1 + 1840);
  __swift_project_boxed_opaque_existential_1((void *)(v1 + 1808), v355);
  Swift::Float v358 = (*(float (**)(uint64_t, uint64_t, uint64_t))(v356 + 56))(v357, v354, v355);
  if (v365)
  {
    id v142 = *(id *)(v1 + 4272);
    id v143 = *(id *)(v1 + 4216);
    id v144 = *(id *)(v1 + 4200);
    __swift_destroy_boxed_opaque_existential_1(v1 + 1808);
    outlined destroy of [A]();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_release();
    goto LABEL_119;
  }
  *(Swift::Float *)(v1 + 4584) = v358;
  __swift_destroy_boxed_opaque_existential_1(v1 + 1808);
  NightingaleDPFLRunner.performanceMeasure.getter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("BMIQuery", 8uLL, 1);
  dispatch thunk of PerformanceMeasure.finish(_:)();
  uint64_t v351 = v3;
  swift_bridgeObjectRelease();
  swift_release();
  *(void *)(v1 + 3672) = v351;
  NightingaleDPFLRunner.performanceMeasure.getter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ShadowEvaluation", 0x10uLL, 1);
  dispatch thunk of PerformanceMeasure.start(_:)();
  swift_bridgeObjectRelease();
  swift_release();
  *(void *)(v1 + 3680) = _allocateUninitializedArray<A>(_:)();
  *(void *)(v1 + 3688) = _allocateUninitializedArray<A>(_:)();
  *(void *)(v1 + 3696) = HyperParams.heartRatePeriodTFModelNames.getter();
  uint64_t v352 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  Collection<>.makeIterator()();
  while (1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[String]>);
    IndexingIterator.next()();
    uint64_t modelFileSuffix_8 = *(void *)(v1 + 3008);
    if (!modelFileSuffix_8) {
      break;
    }
    Swift::String v4 = *(Swift::String *)(v1 + 3000);
    *(void *)(v1 + 3128) = v4._countAndFlagsBits;
    *(void *)(v1 + 3136) = modelFileSuffix_8;
    Swift::String v5 = PFLTask.getValidModelPath(modelFileSuffix:)(v4);
    if (v6)
    {
      id v139 = *(id *)(v1 + 4272);
      id v140 = *(id *)(v1 + 4216);
      id v141 = *(id *)(v1 + 4200);
      swift_bridgeObjectRelease();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_release();
      goto LABEL_119;
    }
    Swift::String v406 = v5;
    specialized Array.append(_:)();
    swift_bridgeObjectRelease();
  }
  outlined destroy of [A]();
  *(void *)(v1 + 3704) = HyperParams.heartRatePeriodEnsembleModelNames.getter();
  Collection<>.makeIterator()();
  while (1)
  {
    IndexingIterator.next()();
    uint64_t v349 = *(void *)(v1 + 3040);
    if (!v349) {
      break;
    }
    Swift::String v7 = *(Swift::String *)(v1 + 3032);
    *(void *)(v1 + 3112) = v7._countAndFlagsBits;
    *(void *)(v1 + 3120) = v349;
    Swift::String v8 = PFLTask.getValidModelPath(modelFileSuffix:)(v7);
    if (v9)
    {
      id v136 = *(id *)(v1 + 4272);
      id v137 = *(id *)(v1 + 4216);
      id v138 = *(id *)(v1 + 4200);
      swift_bridgeObjectRelease();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_release();
      goto LABEL_119;
    }
    Swift::String v405 = v8;
    specialized Array.append(_:)();
    swift_bridgeObjectRelease();
  }
  double v346 = *(double *)(v1 + 4232);
  double v345 = *(double *)(v1 + 4224);
  id v347 = *(id *)(v1 + 4216);
  id v343 = *(id *)(v1 + 4200);
  outlined destroy of [A]();
  id v10 = v347;
  *(void *)(v1 + 3712) = v347;
  HyperParams.minDaySHRCountThreshold.getter();
  Class isa = UInt32._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v347, sel_setAwakeSHRCountThreshold_);

  HyperParams.minNightSHRCountThreshold.getter();
  Class v342 = UInt32._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v347, sel_setSleepSHRCountThreshold_);

  id v11 = v343;
  *(void *)(v1 + 3720) = v343;
  swift_bridgeObjectRetain();
  Class v344 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v343, sel_setHeartRatePeriodTFModelPaths_, v344);

  type metadata accessor for ShadowEvaluation();
  id v12 = v347;
  *(void *)(v1 + 3728) = ShadowEvaluation.__allocating_init(config:urCycleLength:urPeriodLength:)(v347, v345, v346);
  id v348 = objc_msgSend(v347, sel_birthDateComponents);
  if (v348)
  {
    uint64_t v340 = *(void *)(v1 + 4104);
    uint64_t v338 = *(void *)(v1 + 4088);
    uint64_t v339 = *(void *)(v1 + 4072);
    uint64_t v337 = *(void *)(v1 + 4080);
    static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v337 + 32))(v340, v338, v339);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v337 + 56))(v340, 0, 1, v339);
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v1 + 4080) + 56))(*(void *)(v1 + 4104), 1, 1, *(void *)(v1 + 4072));
  }
  uint64_t v334 = *(void *)(v1 + 4104);
  char v13 = HyperParams.birthDateRequired.getter();
  uint64_t v379 = calculateAge(components:birthDateRequired:)(v334, v13 & 1);
  float v335 = *(float *)&v379;
  char v336 = BYTE4(v379);
  outlined destroy of DateComponents?(*(void *)(v1 + 4104));
  *(_DWORD *)(v1 + 4524) = v379;
  *(unsigned char *)(v1 + 4528) = v336 & 1;
  float v380 = v335;
  char v381 = v336 & 1;
  if (v336)
  {
    static Float.nan.getter();
    Swift::Float value = v14;
  }
  else
  {
    Swift::Float value = v335;
  }
  uint64_t v327 = (uint64_t *)(*(void *)(v1 + 4352) + 16);
  LODWORD(valueForNA) = 0;
  BYTE4(valueForNA) = 1;
  NightingaleTraining::AgeEnum v326 = getAgeEnum(value:valueForNA:)(value, valueForNA);
  *(unsigned char *)(v1 + 4656) = v326;
  LODWORD(v383) = 0;
  BYTE4(v383) = 1;
  NightingaleTraining::BMIEnum v328 = getBMIEnum(value:valueForNA:)(v358, v383);
  *(unsigned char *)(v1 + 4664) = v328;
  swift_beginAccess();
  uint64_t v330 = *v327;
  swift_bridgeObjectRetain();
  swift_endAccess();
  uint64_t v329 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (start: UInt32, end: UInt32));
  uint64_t v331 = MEMORY[0x25A2C0810](v330);
  swift_bridgeObjectRelease();
  uint64_t result = v331;
  if (__OFSUB__(v331, 1))
  {
LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
    goto LABEL_126;
  }
  if (v331 - 1 <= 0) {
    goto LABEL_70;
  }
  uint64_t v323 = *(void *)(v1 + 4352);
  swift_beginAccess();
  uint64_t v324 = *(void *)(v323 + 16);
  swift_bridgeObjectRetain();
  swift_endAccess();
  uint64_t v325 = MEMORY[0x25A2C0810](v324, v329);
  swift_bridgeObjectRelease();
  if (HyperParams.minimumNEligibleCyclesHistory.getter() >= v325
    || (uint64_t v320 = *(void *)(v1 + 4352),
        swift_beginAccess(),
        uint64_t v321 = *(void *)(v320 + 16),
        swift_bridgeObjectRetain(),
        swift_endAccess(),
        uint64_t v322 = MEMORY[0x25A2C0810](v321, v329),
        swift_bridgeObjectRelease(),
        v322 >= HyperParams.maximumNEligibleCyclesHistory.getter()))
  {
LABEL_70:
    uint64_t v237 = *(void *)(v1 + 4344);
    uint64_t v236 = *(void *)(v1 + 4304);
    id v242 = *(id *)(v1 + 4272);
    uint64_t v235 = *(void *)(v1 + 4240);
    id v243 = *(id *)(v1 + 4216);
    uint64_t v238 = *(void *)(v1 + 4208);
    id v244 = *(id *)(v1 + 4200);
    uint64_t v245 = *(void *)(v1 + 4184);
    NightingaleDPFLRunner.performanceMeasure.getter();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ShadowEvaluation", 0x10uLL, 1);
    dispatch thunk of PerformanceMeasure.finish(_:)();
    uint64_t v241 = v40;
    swift_bridgeObjectRelease();
    swift_release();
    *(void *)(v1 + 3736) = v241;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any));
    _allocateUninitializedArray<A>(_:)();
    unsigned int v240 = v41;
    uint64_t v42 = NightingalePFLRunner.keyMetricsDayStreamProcessorConfigDurationS.unsafeMutableAddressor();
    outlined init with copy of String(v42, v240);
    uint64_t v239 = MEMORY[0x263F8D538];
    v240[5] = MEMORY[0x263F8D538];
    v240[2] = v235;
    uint64_t v43 = NightingalePFLRunner.keyMetricsRawSamplesDurationS.unsafeMutableAddressor();
    outlined init with copy of String(v43, v240 + 6);
    v240[11] = v239;
    v240[8] = v236;
    char v44 = NightingalePFLRunner.keyMetricsCalendarPredictionDurationS.unsafeMutableAddressor();
    outlined init with copy of String(v44, v240 + 12);
    v240[17] = v239;
    v240[14] = v237;
    unsigned int v45 = NightingalePFLRunner.keyMetricsSHRDurationS.unsafeMutableAddressor();
    outlined init with copy of String(v45, v240 + 18);
    uint64_t v46 = *(void *)(v1 + 3480);
    v240[23] = v239;
    v240[20] = v46;
    char v47 = NightingalePFLRunner.keyMetricsBMIDurationS.unsafeMutableAddressor();
    outlined init with copy of String(v47, v240 + 24);
    v240[29] = v239;
    v240[26] = v351;
    dispatch_group_t v48 = NightingalePFLRunner.keyMetricsIterationElapsedTime.unsafeMutableAddressor();
    outlined init with copy of String(v48, v240 + 30);
    v240[35] = v239;
    v240[32] = v238;
    unsigned int v49 = NightingalePFLRunner.keyMetricsShadowEvaluationTime.unsafeMutableAddressor();
    outlined init with copy of String(v49, v240 + 36);
    v240[41] = v239;
    v240[38] = v241;
    _finalizeUninitializedArray<A>(_:)();
    *(void *)(v1 + 3744) = Dictionary.init(dictionaryLiteral:)();
    NightingalePFLRunner.sendLocation(_:hyperParams:)(6, v245);
    type metadata accessor for PFLTaskResult();
    uint64_t v246 = PFLTaskResult.__allocating_init(json:vector:)();
    swift_release();

    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_release();
    uint64_t v247 = v246;
    goto LABEL_107;
  }
  unint64_t v317 = (uint64_t *)(*(void *)(v1 + 4352) + 16);
  *(void *)(v1 + 3752) = _allocateUninitializedArray<A>(_:)();
  swift_beginAccess();
  uint64_t v318 = *v317;
  swift_bridgeObjectRetain();
  swift_endAccess();
  uint64_t v319 = MEMORY[0x25A2C0810](v318, v329);
  swift_bridgeObjectRelease();
  uint64_t result = v319;
  if (__OFSUB__(v319, 1)) {
    goto LABEL_125;
  }
  if (v319 - 1 < 0) {
    return _assertionFailure(_:_:file:line:flags:)();
  }
  uint64_t v384 = 0;
  uint64_t v385 = v319 - 1;
  *(void *)(v1 + 2600) = specialized Collection<>.makeIterator()();
  *(void *)(v1 + 2608) = v18;
  *(void *)(v1 + 2616) = v19;
  while (1)
  {
    uint64_t result = specialized IndexingIterator.next()();
    uint64_t v386 = result;
    char v387 = v20 & 1;
    if (v20) {
      break;
    }
    *(void *)(v1 + 3880) = result;
    if (__OFADD__(result, 1)) {
      goto LABEL_132;
    }
    swift_beginAccess();
    Array.subscript.getter();
    unsigned int v316 = *(_DWORD *)(v1 + 4508);
    swift_endAccess();
    swift_beginAccess();
    Array.subscript.getter();
    unsigned int v315 = *(_DWORD *)(v1 + 4516);
    uint64_t result = swift_endAccess();
    if (v316 < v315) {
      goto LABEL_133;
    }
    *(_DWORD *)(v1 + 4588) = v316 - v315;
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    Float.init<A>(_:)();
    int v404 = v22;
    specialized Array.append(_:)();
  }
  uint64_t v312 = (uint64_t *)(*(void *)(v1 + 4352) + 16);
  v308._uint64_t rawValue = *(void **)(v1 + 3752);
  swift_bridgeObjectRetain();
  meanAndStd(_:_:)(v23, v308, NightingaleTraining_STDMethod_population);
  uint64_t v388 = v24;
  float v389 = v25;
  float v309 = *(float *)&v24;
  char v310 = BYTE4(v24);
  Swift::Float v311 = v25;
  swift_bridgeObjectRelease();
  *(float *)(v1 + 4532) = v309;
  *(unsigned char *)(v1 + 4536) = v310 & 1;
  *(Swift::Float *)(v1 + 4592) = v311;
  swift_beginAccess();
  uint64_t v313 = *v312;
  swift_bridgeObjectRetain();
  swift_endAccess();
  uint64_t v314 = MEMORY[0x25A2C0810](v313, v329);
  swift_bridgeObjectRelease();
  uint64_t result = v314;
  if (!__OFSUB__(v314, 1))
  {
    if (v314 - 1 < 0) {
      return _assertionFailure(_:_:file:line:flags:)();
    }
    uint64_t v390 = 0;
    uint64_t v391 = v314 - 1;
    *(void *)(v1 + 2648) = specialized Collection<>.makeIterator()();
    *(void *)(v1 + 2656) = v27;
    *(void *)(v1 + 2664) = v28;
    while (1)
    {
      uint64_t v392 = specialized IndexingIterator.next()();
      char v393 = v29 & 1;
      uint64_t v307 = v392;
      if (v29)
      {
        outlined destroy of [A]();
        goto LABEL_70;
      }
      *(void *)(v1 + 3760) = v392;
      swift_beginAccess();
      Array.subscript.getter();
      Swift::UInt32 t0 = *(_DWORD *)(v1 + 4484);
      uint64_t result = swift_endAccess();
      *(_DWORD *)(v1 + 4600) = t0;
      if (__OFADD__(v307, 1)) {
        goto LABEL_127;
      }
      swift_beginAccess();
      Array.subscript.getter();
      Swift::UInt32 t1 = *(_DWORD *)(v1 + 4492);
      uint64_t result = swift_endAccess();
      *(_DWORD *)(v1 + 4608) = t1;
      Swift::UInt32 latestDay = t1 - 1;
      if (!t1) {
        goto LABEL_128;
      }
      *(_DWORD *)(v1 + 4616) = latestDay;
      if (latestDay < 0x226) {
        goto LABEL_129;
      }
      Swift::UInt32 earliestDay = t1 - 550;
      if (t1 == 550) {
        goto LABEL_130;
      }
      *(_DWORD *)(v1 + 4624) = earliestDay;
      flow._uint64_t rawValue = *(void **)(v1 + 3368);
      swift_bridgeObjectRetain();
      otr._uint64_t rawValue = *(void **)(v1 + 3416);
      swift_bridgeObjectRetain();
      spotting._uint64_t rawValue = *(void **)(v1 + 3424);
      swift_bridgeObjectRetain();
      cycleFactors._uint64_t rawValue = *(void **)(v1 + 3432);
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt32, (Float, String)));
      _allocateUninitializedArray<A>(_:)();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Float, String));
      uint64_t swt = Dictionary.init(dictionaryLiteral:)();
      daySHR10s._uint64_t rawValue = *(void **)(v1 + 3288);
      swift_bridgeObjectRetain();
      nightSHR10s._uint64_t rawValue = *(void **)(v1 + 3296);
      swift_bridgeObjectRetain();
      daySHRCounts._uint64_t rawValue = *(void **)(v1 + 3304);
      swift_bridgeObjectRetain();
      nightSHRCounts._uint64_t rawValue = *(void **)(v1 + 3312);
      swift_bridgeObjectRetain();
      Swift::tuple_dayInputs_OpaquePointer_chronologicalOrderedCFs_OpaquePointer v31 = ShadowEvaluation.toAlgorithmInputs(flow:otr:spotting:cycleFactors:swt:daySHR10s:nightSHR10s:daySHRCounts:nightSHRCounts:)(flow, otr, spotting, cycleFactors, (Swift::OpaquePointer)swt, daySHR10s, nightSHR10s, daySHRCounts, nightSHRCounts);
      if (v32) {
        break;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(Swift::tuple_dayInputs_OpaquePointer_chronologicalOrderedCFs_OpaquePointer *)(v1 + 3768) = v31;
      float v395 = v309;
      char v396 = v310 & 1;
      if (v310) {
        float v394 = -1.0;
      }
      else {
        float v394 = v395;
      }
      float v292 = v394;
      *(float *)(v1 + 4632) = v394;
      uint64_t v293 = *(void *)(v1 + 3688);
      swift_bridgeObjectRetain();
      *(void *)(v1 + 3792) = v293;
      unint64_t v33 = lazy protocol witness table accessor for type [String] and conformance [A]();
      MEMORY[0x25A2C0660](v352, v33);
      outlined destroy of [A]();
      *(void *)(v1 + 3800) = *(void *)(v1 + 3784);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EnumeratedSequence<[String]>);
      EnumeratedSequence.makeIterator()();
      while (1)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EnumeratedSequence<[String]>.Iterator);
        EnumeratedSequence.Iterator.next()();
        uint64_t v289 = *(void *)(v1 + 2768);
        uint64_t v290 = *(void *)(v1 + 2776);
        uint64_t v291 = *(void *)(v1 + 2784);
        if (!v291) {
          break;
        }
        uint64_t v288 = *(NgtMenstrualAlgorithmsMLModelConfig **)(v1 + 4200);
        *(void *)(v1 + 3808) = v289;
        *(void *)(v1 + 3048) = v290;
        *(void *)(v1 + 3056) = v291;
        swift_bridgeObjectRetain();
        id v287 = (id)MEMORY[0x25A2C0590](v290, v291);
        swift_bridgeObjectRelease();
        [(NgtMenstrualAlgorithmsMLModelConfig *)v288 setHeartRatePeriodEnsembleModelPath:v287];

        ShadowEvaluation.analyze(mlConfig:earliestDay:latestDay:t0:t1:dayInputs:chronologicalOrderedCFs:)((NightingaleTraining::FlycatcherTelemetrics_optional *)(v1 + 16), v288, earliestDay, latestDay, t0, t1, v31.dayInputs, v31.chronologicalOrderedCFs);
        if (v34)
        {
          uint64_t v112 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 4360);
          uint64_t v93 = *(void *)(v1 + 4128);
          uint64_t v111 = *(void *)(v1 + 4112);
          id v94 = v34;
          *(void *)(v1 + 3816) = v34;
          uint64_t v95 = Logging.default.unsafeMutableAddressor();
          v112(v93, v95, v111);
          uint64_t v114 = swift_allocObject();
          *(void *)(v114 + 16) = v307;
          uint64_t v116 = swift_allocObject();
          *(void *)(v116 + 16) = v289;
          id v96 = v34;
          uint64_t v118 = swift_allocObject();
          *(void *)(v118 + 16) = v34;
          default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)();
          swift_bridgeObjectRelease();
          oslog = Logger.logObject.getter();
          os_log_type_t v132 = static os_log_type_t.error.getter();
          *(void *)(v1 + 3824) = 32;
          UnsignedInteger<>.init<A>(_:)();
          uint32_t size = *(_DWORD *)(v1 + 4564);
          uint64_t v121 = swift_allocObject();
          *(unsigned char *)(v121 + 16) = 0;
          uint64_t v122 = swift_allocObject();
          *(unsigned char *)(v122 + 16) = 8;
          uint64_t v115 = swift_allocObject();
          *(void *)(v115 + 16) = partial apply for implicit closure #3 in NightingalePFLRunner.run(task:useCase:context:);
          *(void *)(v115 + 24) = v114;
          uint64_t v123 = swift_allocObject();
          *(void *)(v123 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int);
          *(void *)(v123 + 24) = v115;
          uint64_t v124 = swift_allocObject();
          *(unsigned char *)(v124 + 16) = 0;
          uint64_t v125 = swift_allocObject();
          *(unsigned char *)(v125 + 16) = 8;
          uint64_t v117 = swift_allocObject();
          *(void *)(v117 + 16) = partial apply for implicit closure #3 in NightingalePFLRunner.run(task:useCase:context:);
          *(void *)(v117 + 24) = v116;
          uint64_t v126 = swift_allocObject();
          *(void *)(v126 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int);
          *(void *)(v126 + 24) = v117;
          uint64_t v127 = swift_allocObject();
          *(unsigned char *)(v127 + 16) = 64;
          uint64_t v128 = swift_allocObject();
          *(unsigned char *)(v128 + 16) = 8;
          uint64_t v119 = swift_allocObject();
          *(void *)(v119 + 16) = partial apply for implicit closure #5 in NightingalePFLRunner.run(task:useCase:context:);
          *(void *)(v119 + 24) = v118;
          uint64_t v120 = swift_allocObject();
          *(void *)(v120 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:);
          *(void *)(v120 + 24) = v119;
          uint64_t v129 = swift_allocObject();
          *(void *)(v129 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:);
          *(void *)(v129 + 24) = v120;
          _allocateUninitializedArray<A>(_:)();
          uint64_t v130 = v97;
          swift_retain();
          *uint64_t v130 = partial apply for closure #1 in OSLogArguments.append(_:);
          v130[1] = v121;
          swift_retain();
          id v130[2] = partial apply for closure #1 in OSLogArguments.append(_:);
          v130[3] = v122;
          swift_retain();
          v130[4] = partial apply for closure #1 in OSLogArguments.append<A>(_:);
          v130[5] = v123;
          swift_retain();
          v130[6] = partial apply for closure #1 in OSLogArguments.append(_:);
          v130[7] = v124;
          swift_retain();
          v130[8] = partial apply for closure #1 in OSLogArguments.append(_:);
          v130[9] = v125;
          swift_retain();
          v130[10] = partial apply for closure #1 in OSLogArguments.append<A>(_:);
          v130[11] = v126;
          swift_retain();
          v130[12] = partial apply for closure #1 in OSLogArguments.append(_:);
          v130[13] = v127;
          swift_retain();
          v130[14] = partial apply for closure #1 in OSLogArguments.append(_:);
          v130[15] = v128;
          swift_retain();
          v130[16] = partial apply for closure #1 in OSLogArguments.append(_:);
          v130[17] = v129;
          _finalizeUninitializedArray<A>(_:)();
          swift_bridgeObjectRelease();
          if (os_log_type_enabled(oslog, v132))
          {
            buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
            uint64_t v107 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            uint64_t v109 = createStorage<A>(capacity:type:)(1);
            uint64_t v110 = createStorage<A>(capacity:type:)(0);
            Builtin::Word v397 = buf;
            uint64_t v398 = v109;
            uint64_t v399 = v110;
            serialize(_:at:)(2, &v397);
            serialize(_:at:)(3, &v397);
            uint64_t v400 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
            uint64_t v401 = v121;
            closure #1 in osLogInternal(_:log:type:)(&v400, (uint64_t)&v397, (uint64_t)&v398, (uint64_t)&v399);
            uint64_t v400 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
            uint64_t v401 = v122;
            closure #1 in osLogInternal(_:log:type:)(&v400, (uint64_t)&v397, (uint64_t)&v398, (uint64_t)&v399);
            uint64_t v400 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append<A>(_:);
            uint64_t v401 = v123;
            closure #1 in osLogInternal(_:log:type:)(&v400, (uint64_t)&v397, (uint64_t)&v398, (uint64_t)&v399);
            uint64_t v400 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
            uint64_t v401 = v124;
            closure #1 in osLogInternal(_:log:type:)(&v400, (uint64_t)&v397, (uint64_t)&v398, (uint64_t)&v399);
            uint64_t v400 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
            uint64_t v401 = v125;
            closure #1 in osLogInternal(_:log:type:)(&v400, (uint64_t)&v397, (uint64_t)&v398, (uint64_t)&v399);
            uint64_t v400 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append<A>(_:);
            uint64_t v401 = v126;
            closure #1 in osLogInternal(_:log:type:)(&v400, (uint64_t)&v397, (uint64_t)&v398, (uint64_t)&v399);
            uint64_t v400 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
            uint64_t v401 = v127;
            closure #1 in osLogInternal(_:log:type:)(&v400, (uint64_t)&v397, (uint64_t)&v398, (uint64_t)&v399);
            uint64_t v400 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
            uint64_t v401 = v128;
            closure #1 in osLogInternal(_:log:type:)(&v400, (uint64_t)&v397, (uint64_t)&v398, (uint64_t)&v399);
            uint64_t v400 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
            uint64_t v401 = v129;
            closure #1 in osLogInternal(_:log:type:)(&v400, (uint64_t)&v397, (uint64_t)&v398, (uint64_t)&v399);
            _os_log_impl(&dword_257C1A000, oslog, v132, "Failed to run Shadow Evaluation at periodIdx: %ld ensembleLogicId: %ld, Error: %@", buf, size);
            destroyStorage<A>(_:count:)(v109, 1, v107);
            destroyStorage<A>(_:count:)(v110, 0, MEMORY[0x263F8EE58] + 8);
            MEMORY[0x25A2C0D00](buf, MEMORY[0x263F8E778]);
          }
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          uint64_t v106 = *(void (**)(uint64_t, uint64_t))(v1 + 4408);
          uint64_t v104 = *(void *)(v1 + 4128);
          uint64_t v105 = *(void *)(v1 + 4112);

          v106(v104, v105);
        }
        else
        {
          outlined init with take of FlycatcherTelemetrics?((const void *)(v1 + 16), (void *)(v1 + 576));
          outlined retain of FlycatcherTelemetrics?();
          outlined init with take of FlycatcherTelemetrics?((const void *)(v1 + 576), (void *)(v1 + 296));
          if (_s19NightingaleTraining21FlycatcherTelemetricsVSgWOg(v1 + 296) != 1)
          {
            uint64_t v283 = (uint64_t *)(*(void *)(v1 + 4352) + 16);
            uint64_t v251 = *(void *)(v1 + 328);
            uint64_t v252 = *(void *)(v1 + 336);
            uint64_t v253 = *(void *)(v1 + 344);
            uint64_t v254 = *(void *)(v1 + 352);
            char v255 = *(unsigned char *)(v1 + 360);
            uint64_t v256 = *(void *)(v1 + 368);
            uint64_t v257 = *(void *)(v1 + 376);
            uint64_t v258 = *(void *)(v1 + 384);
            uint64_t v259 = *(void *)(v1 + 392);
            uint64_t v260 = *(void *)(v1 + 400);
            uint64_t v261 = *(void *)(v1 + 408);
            uint64_t v262 = *(void *)(v1 + 416);
            uint64_t v263 = *(void *)(v1 + 424);
            uint64_t v264 = *(void *)(v1 + 432);
            uint64_t v265 = *(void *)(v1 + 440);
            uint64_t v266 = *(void *)(v1 + 448);
            uint64_t v267 = *(void *)(v1 + 456);
            uint64_t v268 = *(void *)(v1 + 464);
            uint64_t v269 = *(void *)(v1 + 472);
            uint64_t v270 = *(void *)(v1 + 480);
            uint64_t v271 = *(void *)(v1 + 488);
            uint64_t v272 = *(void *)(v1 + 496);
            uint64_t v273 = *(void *)(v1 + 504);
            uint64_t v274 = *(void *)(v1 + 512);
            uint64_t v275 = *(void *)(v1 + 520);
            uint64_t v276 = *(void *)(v1 + 528);
            memcpy((void *)(v1 + 856), (const void *)(v1 + 296), 0x118uLL);
            uint64_t v277 = HyperParams.recipeId.getter();
            uint64_t v278 = v35;
            swift_bridgeObjectRetain();
            *(void *)(v1 + 856) = v277;
            *(void *)(v1 + 864) = v278;
            swift_bridgeObjectRelease();
            *(void *)(v1 + 3840) = v307;
            *(void *)(v1 + 3064) = 0;
            *(void *)(v1 + 3072) = 101;
            uint64_t v279 = MEMORY[0x263F8D6C8];
            uint64_t v280 = MEMORY[0x263F8D6E0];
            Comparable.clamp(to:)(v1 + 3064, MEMORY[0x263F8D6C8], MEMORY[0x263F8D6E0], v1 + 3832);
            uint64_t v281 = *(void *)(v1 + 3832);
            *(void *)(v1 + 872) = v281;
            *(void *)(v1 + 3856) = v289;
            *(void *)(v1 + 3080) = 0;
            *(void *)(v1 + 3088) = 11;
            Comparable.clamp(to:)(v1 + 3080, v279, v280, v1 + 3848);
            uint64_t v282 = *(void *)(v1 + 3848);
            *(void *)(v1 + 880) = v282;
            uint64_t v284 = BMIEnum.rawValue.getter(v328);
            *(void *)(v1 + 1120) = v284;
            swift_beginAccess();
            uint64_t v285 = *v283;
            swift_bridgeObjectRetain();
            swift_endAccess();
            uint64_t v286 = MEMORY[0x25A2C0810](v285, v329);
            swift_bridgeObjectRelease();
            uint64_t result = v286;
            if (__OFSUB__(v286, 1)) {
              goto LABEL_131;
            }
            *(void *)(v1 + 3872) = v286 - 1;
            *(void *)(v1 + 3096) = 0;
            *(void *)(v1 + 3104) = 101;
            Comparable.clamp(to:)(v1 + 3096, MEMORY[0x263F8D6C8], MEMORY[0x263F8D6E0], v1 + 3864);
            uint64_t v248 = *(void *)(v1 + 3864);
            *(void *)(v1 + 1096) = v248;
            *(float *)(v1 + 4572) = v292;
            *(_DWORD *)(v1 + 4500) = 0;
            *(_DWORD *)(v1 + 4504) = 1115815936;
            *(float *)(v1 + 4580) = -1.0;
            unint64_t v37 = lazy protocol witness table accessor for type Float and conformance Float();
            uint64_t v249 = BinaryFloatingPoint.clamp(to:nonFiniteValue:)(v1 + 4500, v1 + 4580, MEMORY[0x263F8D5C8], v37);
            *(void *)(v1 + 1104) = v249;
            LODWORD(v403) = -1082130432;
            BYTE4(v403) = 0;
            NightingaleTraining::CycleStdEnum v38 = getCycleStdEnum(value:valueForNA:)(v311, v403);
            uint64_t v250 = CycleStdEnum.rawValue.getter(v38);
            *(void *)(v1 + 1112) = v250;
            uint64_t v39 = AgeEnum.rawValue.getter(v326);
            *(void *)(v1 + 1128) = v39;
            v402[0] = v277;
            v402[1] = v278;
            v402[2] = v281;
            v402[3] = v282;
            v402[4] = v251;
            v402[5] = v252;
            v402[6] = v253;
            v402[7] = v254;
            uint64_t v407 = v248;
            LOBYTE(v402[8]) = v255 & 1;
            v402[9] = v256;
            v402[10] = v257;
            v402[11] = v258;
            v402[12] = v259;
            v402[13] = v260;
            v402[14] = v261;
            v402[15] = v262;
            v402[16] = v263;
            v402[17] = v264;
            v402[18] = v265;
            v402[19] = v266;
            v402[20] = v267;
            v402[21] = v268;
            v402[22] = v269;
            v402[23] = v270;
            v402[24] = v271;
            v402[25] = v272;
            v402[26] = v273;
            v402[27] = v274;
            v402[28] = v275;
            v402[29] = v276;
            v402[30] = v248;
            v402[31] = v249;
            v402[32] = v250;
            v402[33] = v284;
            v402[34] = v39;
            memcpy((void *)(v1 + 1136), v402, 0x118uLL);
            NightingalePFLRunner.sendTelemetrics(flycatcherResults:)((NightingaleTraining::FlycatcherTelemetrics *)(v1 + 1136));
            outlined destroy of DefaultStringInterpolation();
            outlined destroy of DefaultStringInterpolation();
          }
          outlined destroy of DefaultStringInterpolation();
        }
        swift_bridgeObjectRelease();
      }
      outlined destroy of [A]();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    id v133 = *(id *)(v1 + 4272);
    id v134 = *(id *)(v1 + 4216);
    id v135 = *(id *)(v1 + 4200);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of [A]();
    swift_release();

    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_release();
    goto LABEL_119;
  }
LABEL_126:
  __break(1u);
LABEL_127:
  __break(1u);
LABEL_128:
  __break(1u);
LABEL_129:
  __break(1u);
LABEL_130:
  __break(1u);
LABEL_131:
  __break(1u);
LABEL_132:
  __break(1u);
LABEL_133:
  __break(1u);
  return result;
}

uint64_t closure #1 in NightingalePFLRunner.run(task:useCase:context:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  *(_DWORD *)(v6 + 148) = a6;
  *(_DWORD *)(v6 + 140) = a5;
  *(_DWORD *)(v6 + 132) = a4;
  *(void *)(v6 + 96) = a3;
  *(void *)(v6 + 88) = a2;
  *(void *)(v6 + 80) = a1;
  *(void *)(v6 + 56) = v6;
  *(void *)(v6 + 64) = 0;
  *(void *)(v6 + 72) = 0;
  *(_DWORD *)(v6 + 128) = 0;
  *(_DWORD *)(v6 + 136) = 0;
  *(_DWORD *)(v6 + 144) = 0;
  *(void *)(v6 + 64) = a2;
  *(void *)(v6 + 72) = a3;
  *(_DWORD *)(v6 + 128) = a4;
  *(_DWORD *)(v6 + 136) = a5;
  *(_DWORD *)(v6 + 144) = a6;
  return MEMORY[0x270FA2498](closure #1 in NightingalePFLRunner.run(task:useCase:context:), 0);
}

void *closure #1 in NightingalePFLRunner.run(task:useCase:context:)()
{
  unsigned int v12 = *(_DWORD *)(v0 + 140);
  unsigned int v13 = *(_DWORD *)(v0 + 132);
  uint64_t v1 = *(void *)(v0 + 88);
  *(void *)(v0 + 56) = v0;
  outlined init with copy of HealthDataQuery(v1 + 64, v0 + 16);
  uint64_t v10 = *(void *)(v0 + 40);
  uint64_t v11 = *(void *)(v0 + 48);
  uint64_t result = __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v10);
  unsigned int v14 = v13 - v12;
  if (v13 < v12)
  {
    __break(1u);
    goto LABEL_9;
  }
  unsigned int v3 = *(_DWORD *)(v9 + 148);
  unsigned int v4 = *(_DWORD *)(v9 + 132);
  unsigned int v8 = v4 - v3;
  if (v4 < v3)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  if (v8 < v14) {
    return (void *)_assertionFailure(_:_:file:line:flags:)();
  }
  Swift::String v7 = (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))(*(void *)(v11 + 16) + **(int **)(v11 + 16));
  Swift::String v5 = (void *)swift_task_alloc();
  *(void *)(v9 + 104) = v5;
  *Swift::String v5 = *(void *)(v9 + 56);
  v5[1] = closure #1 in NightingalePFLRunner.run(task:useCase:context:);
  uint64_t v6 = *(void *)(v9 + 96);
  return (void *)v7(v6, __PAIR64__(v8, v14), v10, v11);
}

uint64_t closure #1 in NightingalePFLRunner.run(task:useCase:context:)(uint64_t a1)
{
  Swift::String v5 = (void *)*v2;
  v5[7] = *v2;
  v5[14] = a1;
  v5[15] = v1;
  swift_task_dealloc();
  if (v1)
  {
    unsigned int v3 = closure #1 in NightingalePFLRunner.run(task:useCase:context:);
  }
  else
  {
    unsigned int v3 = closure #1 in NightingalePFLRunner.run(task:useCase:context:);
  }
  return MEMORY[0x270FA2498](v3, 0);
}

uint64_t closure #1 in NightingalePFLRunner.run(task:useCase:context:)()
{
  uint64_t v1 = v0[14];
  uint64_t v2 = (void *)v0[10];
  v0[7] = v0;
  *uint64_t v2 = v1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  unsigned int v3 = *(uint64_t (**)(void))(v0[7] + 8);
  return v3();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  *(void *)(v0 + 56) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v3 + 56) + 8);
  return v1();
}

uint64_t implicit closure #1 in NightingalePFLRunner.run(task:useCase:context:)(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v4 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  swift_endAccess();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (start: UInt32, end: UInt32));
  uint64_t v5 = MEMORY[0x25A2C0810](v4, v1);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t closure #2 in NightingalePFLRunner.run(task:useCase:context:)(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6)
{
  *(_DWORD *)(v6 + 164) = a6;
  *(_DWORD *)(v6 + 156) = a5;
  *(_DWORD *)(v6 + 148) = a4;
  *(_DWORD *)(v6 + 140) = a3;
  *(void *)(v6 + 80) = a2;
  *(void *)(v6 + 72) = a1;
  *(void *)(v6 + 56) = v6;
  *(void *)(v6 + 64) = 0;
  *(_DWORD *)(v6 + 136) = 0;
  *(_DWORD *)(v6 + 144) = 0;
  *(_DWORD *)(v6 + 152) = 0;
  *(_DWORD *)(v6 + 160) = 0;
  *(void *)(v6 + 64) = a2;
  *(_DWORD *)(v6 + 136) = a3;
  *(_DWORD *)(v6 + 144) = a4;
  *(_DWORD *)(v6 + 152) = a5;
  *(_DWORD *)(v6 + 160) = a6;
  return MEMORY[0x270FA2498](closure #2 in NightingalePFLRunner.run(task:useCase:context:), 0);
}

void *closure #2 in NightingalePFLRunner.run(task:useCase:context:)()
{
  unsigned int v12 = *(_DWORD *)(v0 + 148);
  unsigned int v13 = *(_DWORD *)(v0 + 140);
  uint64_t v1 = *(void *)(v0 + 80);
  *(void *)(v0 + 56) = v0;
  outlined init with copy of HealthDataQuery(v1 + 64, v0 + 16);
  uint64_t v10 = *(void *)(v0 + 40);
  uint64_t v11 = *(void *)(v0 + 48);
  uint64_t result = __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v10);
  unsigned int v14 = v13 - v12;
  if (v13 < v12)
  {
    __break(1u);
    goto LABEL_9;
  }
  unsigned int v3 = *(_DWORD *)(v9 + 156);
  unsigned int v4 = *(_DWORD *)(v9 + 140);
  unsigned int v8 = v4 - v3;
  if (v4 < v3)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  if (v8 < v14) {
    return (void *)_assertionFailure(_:_:file:line:flags:)();
  }
  Swift::String v7 = (uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 + 32) + **(int **)(v11 + 32));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v9 + 88) = v5;
  *uint64_t v5 = *(void *)(v9 + 56);
  v5[1] = closure #2 in NightingalePFLRunner.run(task:useCase:context:);
  uint64_t v6 = *(unsigned int *)(v9 + 164);
  return (void *)v7(__PAIR64__(v8, v14), v6, v10, v11);
}

uint64_t closure #2 in NightingalePFLRunner.run(task:useCase:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v8 = (void *)*v5;
  v8[7] = *v5;
  v8[12] = v4;
  v8[13] = a1;
  v8[14] = a2;
  v8[15] = a3;
  v8[16] = a4;
  swift_task_dealloc();
  if (v4)
  {
    uint64_t v6 = closure #2 in NightingalePFLRunner.run(task:useCase:context:);
  }
  else
  {
    uint64_t v6 = closure #2 in NightingalePFLRunner.run(task:useCase:context:);
  }
  return MEMORY[0x270FA2498](v6, 0);
}

uint64_t closure #2 in NightingalePFLRunner.run(task:useCase:context:)()
{
  uint64_t v1 = v0[16];
  uint64_t v2 = v0[15];
  uint64_t v3 = v0[14];
  uint64_t v4 = v0[13];
  uint64_t v5 = (void *)v0[9];
  v0[7] = v0;
  *uint64_t v5 = v4;
  v5[1] = v3;
  v5[2] = v2;
  void v5[3] = v1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  uint64_t v6 = *(uint64_t (**)(void))(v0[7] + 8);
  return v6();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  *(void *)(v0 + 56) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v3 + 56) + 8);
  return v1();
}

void *implicit closure #5 in NightingalePFLRunner.run(task:useCase:context:)(void *a1)
{
  id v1 = a1;
  return a1;
}

uint64_t default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t NightingalePFLRunner.runTraining(modelPath:hyperParams:modelType:featureFlow:featureDaySHR:featureNightSHR:featurePSM:featurePSS:featureSWT:featureLabel:sliceSize:numFeatures:labelSize:existingMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, Swift::OpaquePointer *a9, Swift::OpaquePointer *a10, uint64_t *a11, int a12, uint64_t a13, Swift::UInt32 a14, uint64_t a15)
{
  uint64_t v412 = MEMORY[0x270FA5388](a1);
  uint64_t v421 = v17;
  uint64_t v443 = v18;
  int v413 = v19;
  uint64_t v414 = v20;
  uint64_t v415 = v21;
  uint64_t v416 = v22;
  uint64_t v417 = v23;
  uint64_t v418 = a9;
  uint64_t v419 = a10;
  uint64_t v455 = (Swift::OpaquePointer *)a11;
  int v457 = a12;
  uint64_t v432 = a13;
  Swift::UInt32 v420 = a14;
  uint64_t v435 = a15;
  uint64_t v398 = v15;
  uint64_t v399 = v16;
  uint64_t v400 = "Fatal error";
  uint64_t v401 = "Unexpectedly found nil while unwrapping an Optional value";
  uint64_t v402 = "NightingaleTraining/NightingalePFLRunner.swift";
  uint64_t v406 = 0;
  uint64_t v403 = closure #36 in NightingaleDPFLRunner.run(task:useCase:context:);
  int v404 = closure #2 in NightingalePFLRunner.runTraining(modelPath:hyperParams:modelType:featureFlow:featureDaySHR:featureNightSHR:featurePSM:featurePSS:featureSWT:featureLabel:sliceSize:numFeatures:labelSize:existingMetrics:);
  Builtin::Word v436 = 8;
  Swift::String v405 = closure #36 in NightingaleDPFLRunner.run(task:useCase:context:);
  uint64_t v598 = 0;
  uint64_t v596 = 0;
  uint64_t v597 = 0;
  uint64_t v595 = 0;
  char v594 = 0;
  uint64_t v593 = 0;
  uint64_t v592 = 0;
  uint64_t v591 = 0;
  uint64_t v590 = 0;
  uint64_t v589 = 0;
  uint64_t v588 = 0;
  uint64_t v587 = 0;
  int v586 = 0;
  uint64_t v585 = 0;
  int v584 = 0;
  uint64_t v583 = 0;
  uint64_t v582 = 0;
  uint64_t v581 = 0;
  uint64_t v579 = 0;
  uint64_t v580 = 0;
  uint64_t v577 = 0;
  uint64_t v578 = 0;
  uint64_t v575 = 0;
  uint64_t v576 = 0;
  uint64_t v573 = 0;
  uint64_t v574 = 0;
  uint64_t v572 = 0;
  uint64_t v571 = 0;
  uint64_t v570 = 0;
  uint64_t v569 = 0;
  uint64_t v550 = 0;
  uint64_t v551 = 0;
  char v547 = 0;
  float v538 = 0.0;
  uint64_t v537 = 0;
  uint64_t v522 = 0;
  int v519 = 0;
  uint64_t v518 = 0;
  uint64_t v514 = 0;
  uint64_t v513 = 0;
  uint64_t v509 = 0;
  unint64_t v510 = 0;
  uint64_t v495 = 0;
  uint64_t v494 = 0;
  uint64_t v492 = 0;
  uint64_t v493 = 0;
  uint64_t v486 = 0;
  uint64_t v481 = 0;
  float v478 = 0.0;
  uint64_t v475 = 0;
  uint64_t v407 = type metadata accessor for ShuffleMethod();
  uint64_t v408 = *(void *)(v407 - 8);
  uint64_t v409 = v407 - 8;
  unint64_t v410 = (*(void *)(v408 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v411 = (char *)&v154 - v410;
  uint64_t v422 = type metadata accessor for EspressoFunction();
  uint64_t v423 = *(void *)(v422 - 8);
  uint64_t v424 = v422 - 8;
  uint64_t v430 = *(void *)(v423 + 64);
  unint64_t v425 = (v430 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v24 = MEMORY[0x270FA5388](v435);
  uint64_t v426 = (char *)&v154 - v425;
  unint64_t v427 = (v430 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v25 = MEMORY[0x270FA5388](v24);
  uint64_t v428 = (char *)&v154 - v427;
  unint64_t v429 = (v430 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v26 = MEMORY[0x270FA5388](v25);
  uint64_t v431 = (char *)&v154 - v429;
  unint64_t v433 = (v430 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v27 = MEMORY[0x270FA5388](v26);
  uint64_t v434 = (char *)&v154 - v433;
  uint64_t v598 = (char *)&v154 - v433;
  uint64_t v596 = v28;
  uint64_t v597 = v29;
  uint64_t v595 = v30;
  char v594 = v31;
  uint64_t v593 = v32;
  uint64_t v592 = v33;
  uint64_t v591 = v34;
  uint64_t v590 = v35;
  uint64_t v589 = v36;
  uint64_t v588 = v37;
  uint64_t v587 = v455;
  int v586 = v457;
  uint64_t v585 = v432;
  int v584 = v38;
  uint64_t v583 = v27;
  uint64_t v582 = v15;
  swift_bridgeObjectRetain();
  uint64_t v581 = v435;
  uint64_t v438 = NightingaleDPFLRunner.performanceMeasure.getter();
  object = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Training", v436, 1)._object;
  dispatch thunk of PerformanceMeasure.start(_:)();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v452 = HyperParams.inputName.getter();
  uint64_t v453 = v39;
  uint64_t v579 = v452;
  uint64_t v580 = v39;
  uint64_t v439 = HyperParams.labelName.getter();
  uint64_t v440 = v40;
  uint64_t v577 = v439;
  uint64_t v578 = v40;
  uint64_t v441 = HyperParams.lossName.getter();
  uint64_t v442 = v41;
  uint64_t v575 = v441;
  uint64_t v576 = v41;
  uint64_t v444 = HyperParams.outputName.getter();
  uint64_t v445 = v42;
  uint64_t v573 = v444;
  uint64_t v574 = v42;
  v446._uint64_t rawValue = v455->_rawValue;
  swift_bridgeObjectRetain();
  uint64_t v447 = MEMORY[0x25A2C0830](v446._rawValue);
  uint64_t v572 = v447;
  swift_bridgeObjectRelease();
  uint64_t v43 = HyperParams.batchSize.getter();
  uint64_t v448 = static HIDPFLUtils.computeEffectiveTrainingSize(_:_:)(v447, v43);
  uint64_t v449 = v44;
  uint64_t v571 = v448;
  uint64_t v570 = v44;
  uint64_t v450 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, [Float]));
  uint64_t v451 = _allocateUninitializedArray<A>(_:)();
  uint64_t v454 = v45;
  swift_bridgeObjectRetain();
  uint64_t v46 = v453;
  char v47 = v454;
  dispatch_group_t v48 = v455;
  *uint64_t v454 = v452;
  v47[1] = v46;
  int v568 = 0;
  uint64_t rawValue = v48->_rawValue;
  swift_bridgeObjectRetain();
  uint64_t v462 = MEMORY[0x25A2C0830](rawValue);
  swift_bridgeObjectRelease();
  float v460 = &v566;
  int v566 = v457;
  unint64_t v458 = lazy protocol witness table accessor for type Int and conformance Int();
  unint64_t v459 = lazy protocol witness table accessor for type Int and conformance Int();
  unint64_t v461 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  SignedInteger<>.init<A>(_:)();
  uint64_t result = v462;
  uint64_t v463 = v462 * v567;
  if ((unsigned __int128)(v462 * (__int128)v567) >> 64 != (v462 * v567) >> 63)
  {
    __break(1u);
    goto LABEL_95;
  }
  uint64_t v397 = v463 * v432;
  if ((unsigned __int128)(v463 * (__int128)v432) >> 64 != (v463 * v432) >> 63)
  {
LABEL_95:
    __break(1u);
    goto LABEL_96;
  }
  v454[2] = specialized Array.init(repeating:count:)();
  swift_bridgeObjectRetain();
  uint64_t v50 = v440;
  uint64_t v51 = v454;
  uint64_t v52 = v455;
  v454[3] = v439;
  v51[4] = v50;
  int v565 = 0;
  float v394 = v52->_rawValue;
  swift_bridgeObjectRetain();
  uint64_t v395 = MEMORY[0x25A2C0830](v394);
  swift_bridgeObjectRelease();
  Swift::UInt32 v563 = v420;
  SignedInteger<>.init<A>(_:)();
  uint64_t result = v395;
  uint64_t v396 = v395 * v564;
  if ((unsigned __int128)(v395 * (__int128)v564) >> 64 != (v395 * v564) >> 63)
  {
LABEL_96:
    __break(1u);
LABEL_97:
    __break(1u);
    goto LABEL_98;
  }
  uint64_t v53 = specialized Array.init(repeating:count:)();
  uint64_t v54 = v451;
  v454[5] = v53;
  _finalizeUninitializedArray<A>(_:)();
  uint64_t v388 = v54;
  uint64_t v389 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
  uint64_t v569 = Dictionary.init(dictionaryLiteral:)();
  swift_bridgeObjectRetain();
  uint64_t v390 = v562;
  v562[0] = v452;
  v562[1] = v453;
  uint64_t v391 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : [Float]]);
  uint64_t v392 = (void (*)(void))Dictionary.subscript.modify();
  char v393 = v55;
  if (!v55->_rawValue)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  transferFeatureToMLInputs(_:_:_:_:)(v414, v393, NightingaleTraining_NightingaleModelFeatureType_Flow, (NightingaleTraining::NightingalePFLModelType)v413);
  uint64_t v386 = v56;
  uint64_t v387 = v56;
  if (v56)
  {
    uint64_t v169 = v387;
    v392();
    outlined destroy of DefaultStringInterpolation();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of [A]();
    uint64_t v277 = v169;
    return v385;
  }
  v392();
  outlined destroy of DefaultStringInterpolation();
  swift_bridgeObjectRetain();
  uint64_t v560 = v452;
  uint64_t v561 = v453;
  uint64_t v383 = (void (*)(void))Dictionary.subscript.modify();
  uint64_t v384 = v57;
  if (!v57->_rawValue)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  transferFeatureToMLInputs(_:_:_:_:)(v419, v384, NightingaleTraining_NightingaleModelFeatureType_SWT, (NightingaleTraining::NightingalePFLModelType)v413);
  uint64_t v381 = v58;
  uint64_t v382 = v58;
  if (v58)
  {
    uint64_t v168 = v382;
    v383();
    outlined destroy of DefaultStringInterpolation();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of [A]();
    uint64_t v277 = v168;
    return v385;
  }
  v383();
  outlined destroy of DefaultStringInterpolation();
  swift_bridgeObjectRetain();
  uint64_t v558 = v452;
  uint64_t v559 = v453;
  uint64_t v379 = (void (*)(void))Dictionary.subscript.modify();
  float v380 = v59;
  if (!v59->_rawValue)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  transferFeatureToMLInputs(_:_:_:_:)(v415, v380, NightingaleTraining_NightingaleModelFeatureType_DaySHR10, (NightingaleTraining::NightingalePFLModelType)v413);
  uint64_t v377 = v60;
  uint64_t v378 = v60;
  if (v60)
  {
    uint64_t v167 = v378;
    v379();
    outlined destroy of DefaultStringInterpolation();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of [A]();
    uint64_t v277 = v167;
    return v385;
  }
  v379();
  outlined destroy of DefaultStringInterpolation();
  swift_bridgeObjectRetain();
  uint64_t v556 = v452;
  uint64_t v557 = v453;
  uint64_t v375 = (void (*)(void))Dictionary.subscript.modify();
  uint64_t v376 = v61;
  if (!v61->_rawValue)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  transferFeatureToMLInputs(_:_:_:_:)(v416, v376, NightingaleTraining_NightingaleModelFeatureType_NightSHR10, (NightingaleTraining::NightingalePFLModelType)v413);
  uint64_t v373 = v62;
  uint64_t v374 = v62;
  if (v62)
  {
    uint64_t v166 = v374;
    v375();
    outlined destroy of DefaultStringInterpolation();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of [A]();
    uint64_t v277 = v166;
    return v385;
  }
  v375();
  outlined destroy of DefaultStringInterpolation();
  swift_bridgeObjectRetain();
  uint64_t v554 = v452;
  uint64_t v555 = v453;
  uint64_t v371 = (void (*)(void))Dictionary.subscript.modify();
  uint64_t v372 = v63;
  if (!v63->_rawValue)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  transferFeatureToMLInputs(_:_:_:_:)(v417, v372, NightingaleTraining_NightingaleModelFeatureType_PSM, (NightingaleTraining::NightingalePFLModelType)v413);
  uint64_t v369 = v64;
  uint64_t v370 = v64;
  if (v64)
  {
    uint64_t v165 = v370;
    v371();
    outlined destroy of DefaultStringInterpolation();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of [A]();
    uint64_t v277 = v165;
    return v385;
  }
  v371();
  outlined destroy of DefaultStringInterpolation();
  swift_bridgeObjectRetain();
  uint64_t v552 = v452;
  uint64_t v553 = v453;
  Swift::Float v367 = (void (*)(void))Dictionary.subscript.modify();
  char v368 = v65;
  if (!v65->_rawValue)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  transferFeatureToMLInputs(_:_:_:_:)(v418, v368, NightingaleTraining_NightingaleModelFeatureType_PSS, (NightingaleTraining::NightingalePFLModelType)v413);
  uint64_t v365 = v66;
  uint64_t v366 = v66;
  if (v66)
  {
    uint64_t v164 = v366;
    v367();
    outlined destroy of DefaultStringInterpolation();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of [A]();
    uint64_t v277 = v164;
    return v385;
  }
  v367();
  outlined destroy of DefaultStringInterpolation();
  uint64_t v360 = HyperParams.labelEncodingType.getter();
  uint64_t v361 = v67;
  uint64_t v550 = v360;
  uint64_t v551 = v67;
  uint64_t v68 = HyperParams.labelEncodingTypeOnehot.unsafeMutableAddressor();
  uint64_t v362 = *(void *)v68;
  uint64_t v363 = *((void *)v68 + 1);
  swift_bridgeObjectRetain();
  int v364 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  if (v364)
  {
    swift_bridgeObjectRetain();
    uint64_t v464 = v439;
    uint64_t v465 = v440;
    Swift::Float v358 = (void (*)(void))Dictionary.subscript.modify();
    uint64_t v359 = v69;
    if (!v69->_rawValue)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    transferLabelToOnehotEncode(_:_:_:)(v455, v359, v420);
    v358();
    outlined destroy of DefaultStringInterpolation();
  }
  else
  {
    uint64_t v70 = HyperParams.labelEncodingTypeRegression.unsafeMutableAddressor();
    uint64_t v355 = *(void *)v70;
    uint64_t v356 = *((void *)v70 + 1);
    swift_bridgeObjectRetain();
    int v357 = static String.== infix(_:_:)();
    swift_bridgeObjectRelease();
    if (v357)
    {
      swift_bridgeObjectRetain();
      uint64_t result = HyperParams.modelMaxNumDaysToNextPeriod.getter();
      uint64_t v354 = result - 1;
      if (__OFSUB__(result, 1)) {
        goto LABEL_99;
      }
      uint64_t v350 = &v468;
      uint64_t v468 = v354;
      unint64_t v348 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      unint64_t v349 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      Swift::UInt32 v351 = v469;
      uint64_t v466 = v439;
      uint64_t v467 = v440;
      uint64_t v352 = (void (*)(void))Dictionary.subscript.modify();
      uint64_t v353 = v72;
      if (!v72->_rawValue)
      {
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      transferLabelToRegression(_:_:_:_:)(v455, v353, v420, v351);
      v352();
      outlined destroy of DefaultStringInterpolation();
    }
  }
  uint64_t v343 = HyperParams.modelRepresentation.getter();
  uint64_t v346 = v73;
  char v74 = HyperParams.modelRepresentationEIR.unsafeMutableAddressor();
  uint64_t v344 = *(void *)v74;
  uint64_t v345 = *((void *)v74 + 1);
  swift_bridgeObjectRetain();
  int v347 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v347)
  {
    uint64_t v342 = type metadata accessor for EspressoEIRTrainer();
    NightingaleDPFLRunner.performanceMeasure.getter();
    uint64_t v75 = EspressoEIRTrainer.__allocating_init(_:)();
    v470[3] = v342;
    v470[4] = MEMORY[0x263F61118];
    v470[0] = v75;
    outlined init with take of HealthDataQuery(v470, v549);
  }
  else
  {
    uint64_t v341 = type metadata accessor for EspressoMILTrainer();
    NightingaleDPFLRunner.performanceMeasure.getter();
    uint64_t v76 = EspressoMILTrainer.__allocating_init(_:)();
    v548[3] = v341;
    v548[4] = MEMORY[0x263F61120];
    v548[0] = v76;
    outlined init with take of HealthDataQuery(v548, v549);
  }
  int v340 = HyperParams.evalBeforeTrain.getter();
  char v547 = v340 & 1;
  if (v340)
  {
    uint64_t v338 = _allocateUninitializedArray<A>(_:)();
    uint64_t v337 = v77;
    static EspressoFunction.evaluation.getter();
    static EspressoFunction.training.getter();
    uint64_t v78 = v338;
    _finalizeUninitializedArray<A>(_:)();
    uint64_t v339 = v78;
    lazy protocol witness table accessor for type EspressoFunction and conformance EspressoFunction();
    SetAlgebra<>.init(arrayLiteral:)();
  }
  else
  {
    static EspressoFunction.training.getter();
  }
  uint64_t v322 = v544;
  outlined init with copy of HealthDataQuery((uint64_t)v549, (uint64_t)v544);
  uint64_t v332 = v545;
  uint64_t v333 = v546;
  uint64_t v329 = __swift_project_boxed_opaque_existential_1(v322, v545);
  uint64_t v325 = 2;
  uint64_t v328 = MEMORY[0x263F8D310];
  uint64_t v323 = _allocateUninitializedArray<A>(_:)();
  uint64_t v324 = v79;
  swift_bridgeObjectRetain();
  uint64_t v80 = v453;
  uint64_t v81 = v324;
  *uint64_t v324 = v452;
  v81[1] = v80;
  swift_bridgeObjectRetain();
  uint64_t v82 = v323;
  uint64_t v83 = v440;
  char v84 = v324;
  v324[2] = v439;
  v84[3] = v83;
  _finalizeUninitializedArray<A>(_:)();
  uint64_t v330 = v82;
  uint64_t v326 = _allocateUninitializedArray<A>(_:)();
  uint64_t v327 = v85;
  swift_bridgeObjectRetain();
  uint64_t v86 = v442;
  uint64_t v87 = v327;
  *uint64_t v327 = v441;
  v87[1] = v86;
  swift_bridgeObjectRetain();
  uint64_t v88 = v326;
  uint64_t v89 = v445;
  float v90 = v327;
  v327[2] = v444;
  v90[3] = v89;
  _finalizeUninitializedArray<A>(_:)();
  uint64_t v331 = v88;
  uint64_t v91 = HyperParams.weightNames.getter();
  uint64_t v92 = v365;
  uint64_t v334 = v91;
  dispatch thunk of EspressoTrainer.load(path:functions:inputs:outputs:weights:)();
  uint64_t v335 = v92;
  uint64_t v336 = v92;
  if (v92)
  {
    uint64_t v163 = v336;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v544);
    (*(void (**)(char *, uint64_t))(v423 + 8))(v434, v422);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v549);
    swift_bridgeObjectRelease();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of [A]();
    uint64_t v277 = v163;
    return v385;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v544);
  unsigned int v316 = v541;
  outlined init with copy of HealthDataQuery((uint64_t)v549, (uint64_t)v541);
  uint64_t v318 = v542;
  uint64_t v319 = v543;
  unint64_t v317 = __swift_project_boxed_opaque_existential_1(v316, v542);
  float v93 = HyperParams.learningRate.getter();
  uint64_t v94 = v335;
  float v539 = v93;
  char v540 = 0;
  dispatch thunk of EspressoTrainer.finalize(batchSize:learningRate:)();
  uint64_t v320 = v94;
  uint64_t v321 = v94;
  if (v94)
  {
    uint64_t v162 = v321;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v541);
    (*(void (**)(char *, uint64_t))(v423 + 8))(v434, v422);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v549);
    swift_bridgeObjectRelease();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of [A]();
    uint64_t v277 = v162;
    return v385;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v541);
  float v538 = 0.0;
  if ((v340 & 1) == 0)
  {
    uint64_t v261 = v320;
    goto LABEL_61;
  }
  uint64_t v307 = v499;
  outlined init with copy of HealthDataQuery((uint64_t)v549, (uint64_t)v499);
  uint64_t v308 = v500;
  uint64_t v309 = v501;
  char v310 = __swift_project_boxed_opaque_existential_1(v307, v500);
  uint64_t v311 = v569;
  swift_bridgeObjectRetain();
  uint64_t v312 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Int));
  uint64_t v313 = _allocateUninitializedArray<A>(_:)();
  uint64_t v314 = v95;
  swift_bridgeObjectRetain();
  uint64_t v96 = v453;
  int v97 = v314;
  int v98 = v457;
  *uint64_t v314 = v452;
  v97[1] = v96;
  int v497 = v98;
  uint64_t result = SignedInteger<>.init<A>(_:)();
  uint64_t v315 = v432 * v498;
  if ((unsigned __int128)(v432 * (__int128)v498) >> 64 == (v432 * v498) >> 63)
  {
    id v99 = v314;
    v314[2] = v315;
    uint64_t v301 = v99 + 5;
    swift_bridgeObjectRetain();
    uint64_t v100 = v440;
    id v101 = v314;
    Swift::UInt32 v102 = v420;
    v314[3] = v439;
    v101[4] = v100;
    Swift::UInt32 v496 = v102;
    uint64_t v302 = MEMORY[0x263F8D6C8];
    SignedInteger<>.init<A>(_:)();
    _finalizeUninitializedArray<A>(_:)();
    uint64_t v103 = Dictionary.init(dictionaryLiteral:)();
    uint64_t v104 = v320;
    uint64_t v303 = v103;
    uint64_t v105 = dispatch thunk of EspressoTrainer.eval(_:featureSizes:numSamples:)();
    uint64_t v304 = v104;
    uint64_t v305 = v105;
    uint64_t v306 = v104;
    if (v104)
    {
      uint64_t v161 = v306;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v499);
      (*(void (**)(char *, uint64_t))(v423 + 8))(v434, v422);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v549);
      swift_bridgeObjectRelease();
      outlined destroy of [A]();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined destroy of [A]();
      uint64_t v277 = v161;
      return v385;
    }
    uint64_t v298 = v305;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v495 = v298;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v499);
    uint64_t v494 = specialized Array.init()();
    swift_bridgeObjectRetain();
    uint64_t v491 = v298;
    uint64_t v299 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[String : [Float]]]);
    lazy protocol witness table accessor for type [[String : [Float]]] and conformance [A]();
    Collection<>.makeIterator()();
    for (uint64_t i = v304; ; uint64_t i = v296)
    {
      uint64_t v296 = i;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[[String : [Float]]]>);
      IndexingIterator.next()();
      uint64_t v297 = v490;
      if (!v490) {
        break;
      }
      uint64_t v295 = v297;
      uint64_t v292 = v297;
      uint64_t v481 = v297;
      swift_bridgeObjectRetain();
      uint64_t v293 = v479;
      v479[0] = v441;
      v479[1] = v442;
      MEMORY[0x25A2C04B0](&v480);
      outlined destroy of DefaultStringInterpolation();
      uint64_t v294 = v480;
      if (v480)
      {
        uint64_t v291 = v294;
        uint64_t v286 = v294;
        swift_bridgeObjectRetain();
        uint64_t v285 = &v471;
        uint64_t v471 = v286;
        lazy protocol witness table accessor for type [Float] and conformance [A]();
        Collection.first.getter();
        outlined destroy of [A]();
        float v288 = v472;
        int v287 = v473;
        swift_bridgeObjectRelease();
        float v289 = v288;
        int v290 = v287;
      }
      else
      {
        float v289 = 0.0;
        int v290 = 1;
      }
      float v284 = v289;
      if (v290)
      {
        lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
        uint64_t v275 = swift_allocError();
        *uint64_t v107 = 10;
        swift_willThrow();
        swift_bridgeObjectRelease();
        outlined destroy of [A]();
        outlined destroy of [A]();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v423 + 8))(v434, v422);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v549);
        swift_bridgeObjectRelease();
        outlined destroy of [A]();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined destroy of [A]();
        uint64_t v277 = v275;
        return v385;
      }
      float v283 = v284;
      float v478 = v284;
      float v538 = v538 + v284;
      swift_bridgeObjectRetain();
      uint64_t v281 = v476;
      v476[0] = v444;
      v476[1] = v445;
      MEMORY[0x25A2C04B0](&v477);
      outlined destroy of DefaultStringInterpolation();
      uint64_t v282 = v477;
      if (!v477)
      {
        lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
        uint64_t v276 = swift_allocError();
        *uint64_t v106 = 26;
        swift_willThrow();
        swift_bridgeObjectRelease();
        outlined destroy of [A]();
        outlined destroy of [A]();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v423 + 8))(v434, v422);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v549);
        swift_bridgeObjectRelease();
        outlined destroy of [A]();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined destroy of [A]();
        uint64_t v277 = v276;
        return v385;
      }
      uint64_t v280 = v282;
      uint64_t v279 = v282;
      uint64_t v475 = v282;
      swift_bridgeObjectRetain();
      uint64_t v278 = &v474;
      uint64_t v474 = v279;
      lazy protocol witness table accessor for type [Float] and conformance [A]();
      Array.append<A>(contentsOf:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    outlined destroy of [A]();
    int64_t v108 = MEMORY[0x25A2C0810](v298, v391);
    if (v108 > 0)
    {
      int64_t v108 = MEMORY[0x25A2C0810](v298, v391);
      float v538 = v538 / (float)v108;
    }
    HKQueryOptions.init(rawValue:)(v108);
    uint64_t v269 = HyperParams.modelMaxNumDaysToNextPeriod.getter();
    uint64_t v270 = HyperParams.labelEncodingType.getter();
    uint64_t v271 = v109;
    float v110 = HyperParams.intervalCorrectionFactor.getter();
    uint64_t v111 = v296;
    uint64_t v112 = EvalMetricsProcessor.process(labels:outputs:modelMaxNumDaysToNextPeriod:labelEncodingType:intervalCorrectionFactor:)((uint64_t *)v455, &v494, v269, v110);
    uint64_t v272 = v111;
    uint64_t v273 = (void *)v112;
    uint64_t v274 = v111;
    if (v111)
    {
      uint64_t v160 = v274;
      swift_bridgeObjectRelease();
      outlined destroy of [A]();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v423 + 8))(v434, v422);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v549);
      swift_bridgeObjectRelease();
      outlined destroy of [A]();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined destroy of [A]();
      uint64_t v277 = v160;
      return v385;
    }
    v262._uint64_t rawValue = v273;
    swift_bridgeObjectRelease();
    uint64_t v486 = v262._rawValue;
    EvalMetricsProcessor.calculateMetrics(labels:outputs:)(&v485, v455, v262);
    uint64_t v487 = v485.perSliceMetrics._rawValue;
    *(Swift::Float *)uint64_t v488 = v485.aggMetrics.ep3;
    v488[1] = v485.aggMetrics.ep3Num;
    *(Swift::Float *)&v488[2] = v485.aggMetrics.nep6;
    v488[3] = v485.aggMetrics.nep6Num;
    v488[4] = *(void *)&v485.aggMetrics.mae;
    *(Swift::Float *)&v488[5] = v485.aggMetrics.coverage;
    v488[6] = v485.aggMetrics.coverageNum;
    v488[7] = *(void *)&v485.aggMetrics.meanWidth;
    *(Swift::Float *)&v488[8] = v485.aggMetrics.uxWidthTolerable;
    v488[9] = v485.aggMetrics.uxWidthTolerableNum;
    v488[10] = *(void *)&v485.aggMetrics.uxOverallMean;
    *(Swift::Float *)&v488[11] = v485.aggMetrics.uxOverallGood;
    v488[12] = v485.aggMetrics.uxOverallGoodNum;
    *(Swift::Float *)&v488[13] = v485.aggMetrics.uxOverallOk;
    v488[14] = v485.aggMetrics.uxOverallOkNum;
    *(Swift::Float *)&v488[15] = v485.aggMetrics.uxOverallTolerable;
    v488[16] = v485.aggMetrics.uxOverallTolerableNum;
    v488[17] = v485.aggMetrics.nSlices;
    uint64_t v263 = v485.perSliceMetrics._rawValue;
    uint64_t v264 = v488;
    uint64_t v265 = 144;
    memcpy(__dst, v488, sizeof(__dst));
    v488[18] = v485.perSliceMetrics._rawValue;
    memcpy(v489, v488, sizeof(v489));
    uint64_t v266 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PreTraining", 0xBuLL, 1)._object;
    uint64_t v267 = AggMetrics.toDictionary(prefix:)();
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    uint64_t v113 = v272;
    Dictionary.merge(_:uniquingKeysWith:)();
    uint64_t v268 = v113;
    if (v113)
    {
      __break(1u);
      goto LABEL_87;
    }
    uint64_t v260 = v482;
    outlined init with copy of HealthDataQuery((uint64_t)v549, (uint64_t)v482);
    uint64_t v258 = v483;
    uint64_t v259 = v484;
    __swift_project_boxed_opaque_existential_1(v260, v483);
    static EspressoFunction.evaluation.getter();
    dispatch thunk of EspressoTrainer.unload(functions:)();
    (*(void (**)(char *, uint64_t))(v423 + 8))(v431, v422);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v260);
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    uint64_t v261 = v268;
LABEL_61:
    uint64_t v252 = v261;
    uint64_t v251 = v534;
    outlined init with copy of HealthDataQuery((uint64_t)v549, (uint64_t)v534);
    uint64_t v253 = v535;
    uint64_t v254 = v536;
    __swift_project_boxed_opaque_existential_1(v251, v535);
    static EspressoFunction.training.getter();
    uint64_t v114 = v252;
    uint64_t v115 = dispatch thunk of EspressoTrainer.extractWeights(function:)();
    uint64_t v255 = v114;
    uint64_t v256 = v115;
    uint64_t v257 = v114;
    if (!v114)
    {
      uint64_t v241 = v256;
      uint64_t v239 = *(void (**)(char *, uint64_t))(v423 + 8);
      uint64_t v240 = v423 + 8;
      v239(v428, v422);
      uint64_t v537 = v241;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v534);
      id v242 = v531;
      outlined init with copy of HealthDataQuery((uint64_t)v549, (uint64_t)v531);
      uint64_t v243 = v532;
      uint64_t v244 = v533;
      uint64_t v245 = __swift_project_boxed_opaque_existential_1(v242, v532);
      uint64_t v246 = v569;
      swift_bridgeObjectRetain();
      uint64_t v247 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Int));
      uint64_t v248 = _allocateUninitializedArray<A>(_:)();
      uint64_t v249 = v116;
      swift_bridgeObjectRetain();
      uint64_t v117 = v453;
      uint64_t v118 = v249;
      int v119 = v457;
      uint64_t *v249 = v452;
      v118[1] = v117;
      int v529 = v119;
      uint64_t result = SignedInteger<>.init<A>(_:)();
      uint64_t v250 = v432 * v530;
      if ((unsigned __int128)(v432 * (__int128)v530) >> 64 == (v432 * v530) >> 63)
      {
        uint64_t v120 = v249;
        v249[2] = v250;
        int v229 = v120 + 5;
        swift_bridgeObjectRetain();
        uint64_t v121 = v440;
        uint64_t v122 = v249;
        Swift::UInt32 v123 = v420;
        v249[3] = v439;
        v122[4] = v121;
        Swift::UInt32 v528 = v123;
        uint64_t v231 = MEMORY[0x263F8D6C8];
        uint64_t v230 = MEMORY[0x263F8E8F8];
        SignedInteger<>.init<A>(_:)();
        _finalizeUninitializedArray<A>(_:)();
        uint64_t v235 = Dictionary.init(dictionaryLiteral:)();
        uint64_t v124 = HyperParams.epochs.getter();
        double v234 = &v526;
        uint64_t v526 = v124;
        unint64_t v232 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        unint64_t v233 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        lazy protocol witness table accessor for type Int and conformance Int();
        UnsignedInteger<>.init<A>(_:)();
        int v236 = v527;
        HyperParams.inputShuffleMethod.getter(v411);
        HyperParams.fullBatchTraining.getter();
        uint64_t v125 = v255;
        dispatch thunk of EspressoTrainer.train(_:featureSizes:numSamples:epochs:shuffleMethod:fullBatch:)();
        uint64_t v237 = v125;
        uint64_t v238 = v125;
        if (v125)
        {
          uint64_t v156 = v238;
          (*(void (**)(char *, uint64_t))(v408 + 8))(v411, v407);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v531);
          outlined destroy of [A]();
          v239(v434, v422);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v549);
          swift_bridgeObjectRelease();
          outlined destroy of [A]();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined destroy of [A]();
          uint64_t v277 = v156;
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v408 + 8))(v411, v407);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v531);
          uint64_t v225 = MEMORY[0x263F8D310];
          uint64_t v226 = MEMORY[0x263F8D320];
          char v126 = default argument 0 of Dictionary.removeAll(keepingCapacity:)();
          Dictionary.removeAll(keepingCapacity:)(v126 & 1);
          uint64_t v223 = v523;
          outlined init with copy of HealthDataQuery((uint64_t)v549, (uint64_t)v523);
          uint64_t v221 = v524;
          uint64_t v222 = v525;
          __swift_project_boxed_opaque_existential_1(v223, v524);
          static EspressoFunction.training.getter();
          uint64_t v224 = dispatch thunk of EspressoTrainer.extractOutputs(function:)();
          v239(v431, v422);
          uint64_t v522 = v224;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v223);
          swift_bridgeObjectRetain();
          uint64_t v227 = v520;
          v520[0] = v441;
          v520[1] = v442;
          MEMORY[0x25A2C04B0](&v521);
          outlined destroy of DefaultStringInterpolation();
          uint64_t v228 = v521;
          if (v521)
          {
            uint64_t v220 = v228;
            uint64_t v215 = v228;
            swift_bridgeObjectRetain();
            Swift::String v214 = &v502;
            uint64_t v502 = v215;
            lazy protocol witness table accessor for type [Float] and conformance [A]();
            Collection.first.getter();
            outlined destroy of [A]();
            int v217 = v503;
            int v216 = v504;
            swift_bridgeObjectRelease();
            int v218 = v217;
            int v219 = v216;
          }
          else
          {
            int v218 = 0;
            int v219 = 1;
          }
          int v213 = v218;
          if (v219)
          {
            lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
            uint64_t v170 = swift_allocError();
            *uint64_t v153 = 10;
            swift_willThrow();
            swift_bridgeObjectRelease();
            outlined destroy of [A]();
            v239(v434, v422);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v549);
            swift_bridgeObjectRelease();
            outlined destroy of [A]();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            outlined destroy of [A]();
            uint64_t v277 = v170;
          }
          else
          {
            int v212 = v213;
            int v205 = v213;
            int v519 = v213;
            Swift::Int v206 = v515;
            outlined init with copy of HealthDataQuery((uint64_t)v549, (uint64_t)v515);
            uint64_t v207 = v516;
            uint64_t v208 = v517;
            __swift_project_boxed_opaque_existential_1(v206, v516);
            static EspressoFunction.training.getter();
            uint64_t v127 = v237;
            uint64_t v128 = dispatch thunk of EspressoTrainer.extractWeights(function:)();
            uint64_t v209 = v127;
            uint64_t v210 = v128;
            uint64_t v211 = v127;
            if (!v127)
            {
              uint64_t v195 = v210;
              v239(v426, v422);
              uint64_t v203 = &v518;
              uint64_t v518 = v195;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v515);
              static HIDPFLUtils.inplaceSub(_:_:)(v203);
              uint64_t v197 = NightingaleDPFLRunner.performanceMeasure.getter();
              int v199 = 1;
              uint64_t v196 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Training", 8uLL, 1)._object;
              dispatch thunk of PerformanceMeasure.finish(_:)();
              uint64_t v198 = v129;
              swift_bridgeObjectRelease();
              swift_release();
              uint64_t v514 = v198;
              uint64_t v201 = NightingaleDPFLRunner.performanceMeasure.getter();
              uint64_t v200 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PluginE2E", 9uLL, v199 & 1)._object;
              dispatch thunk of PerformanceMeasure.finish(_:)();
              uint64_t v202 = v130;
              swift_bridgeObjectRelease();
              swift_release();
              uint64_t v513 = v202;
              NightingalePFLRunner.sendLocation(_:hyperParams:)(8, v443);
              uint64_t v131 = v209;
              Array.withUnsafeMutableBufferPointer<A>(_:)();
              uint64_t v204 = v131;
              if (v131)
              {
                __break(1u);
              }
              else
              {
                uint64_t v181 = v511;
                unint64_t v182 = v512;
                uint64_t v509 = v511;
                unint64_t v510 = v512;
                uint64_t v190 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any));
                uint64_t v191 = _allocateUninitializedArray<A>(_:)();
                char v189 = v132;
                id v133 = NightingalePFLRunner.keyMetricsTrainingDurationS.unsafeMutableAddressor();
                outlined init with copy of String(v133, v189);
                uint64_t v134 = v198;
                id v135 = v189;
                uint64_t v184 = MEMORY[0x263F8D538];
                v189[5] = MEMORY[0x263F8D538];
                v135[2] = v134;
                uint64_t v183 = v135 + 6;
                id v136 = NightingalePFLRunner.keyMetricsE2EDurationS.unsafeMutableAddressor();
                outlined init with copy of String(v136, v183);
                uint64_t v137 = v202;
                id v138 = v189;
                v189[11] = v184;
                v138[8] = v137;
                uint64_t v185 = v138 + 12;
                id v139 = NightingalePFLRunner.keyMetricsLoss.unsafeMutableAddressor();
                outlined init with copy of String(v139, v185);
                int v140 = v205;
                id v141 = v189;
                uint64_t v188 = MEMORY[0x263F8D5C8];
                v189[17] = MEMORY[0x263F8D5C8];
                *((_DWORD *)v141 + 28) = v140;
                uint64_t v186 = v141 + 18;
                id v142 = NightingalePFLRunner.keyNumSlices.unsafeMutableAddressor();
                outlined init with copy of String(v142, v186);
                uint64_t v143 = v448;
                id v144 = v189;
                v189[23] = MEMORY[0x263F8D6C8];
                v144[20] = v143;
                uint64_t v187 = v144 + 24;
                float v145 = NightingalePFLRunner.keyMetricsLossBeforeTraining.unsafeMutableAddressor();
                outlined init with copy of String(v145, v187);
                float v146 = (float *)v189;
                float v147 = v538;
                v189[29] = v188;
                v146[52] = v147;
                _finalizeUninitializedArray<A>(_:)();
                uint64_t v192 = Dictionary.init(dictionaryLiteral:)();
                uint64_t v148 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
                uint64_t v149 = v204;
                uint64_t v193 = v148;
                Dictionary.merge(_:uniquingKeysWith:)();
                uint64_t v194 = v149;
                if (!v149)
                {
                  if (HyperParams.collectL2Norm.getter())
                  {
                    id v150 = NightingalePFLRunner.keyMetricsL2Norm.unsafeMutableAddressor();
                    uint64_t v179 = *(void *)v150;
                    uint64_t v180 = *((void *)v150 + 1);
                    swift_bridgeObjectRetain();
                    uint64_t v177 = v518;
                    swift_bridgeObjectRetain();
                    static PFLStats.l2Norm(_:)();
                    int v178 = v151;
                    swift_bridgeObjectRelease();
                    uint64_t v508 = MEMORY[0x263F8D5C8];
                    int v507 = v178;
                    uint64_t v505 = v179;
                    uint64_t v506 = v180;
                    Dictionary.subscript.setter();
                  }
                  uint64_t v152 = v194;
                  uint64_t v174 = v581;
                  swift_bridgeObjectRetain();
                  static HIDPFLUtils.checkMetrics(_:)();
                  uint64_t v175 = v152;
                  uint64_t v176 = v152;
                  if (!v152)
                  {
                    swift_bridgeObjectRelease();
                    type metadata accessor for PFLTaskResult();
                    uint64_t v172 = &v581;
                    uint64_t v171 = v581;
                    swift_bridgeObjectRetain();
                    outlined copy of Data._Representation(v181, v182);
                    uint64_t v173 = PFLTaskResult.__allocating_init(json:vector:)();
                    outlined consume of Data._Representation(v181, v182);
                    outlined destroy of [A]();
                    swift_bridgeObjectRelease();
                    outlined destroy of [A]();
                    v239(v434, v422);
                    __swift_destroy_boxed_opaque_existential_1((uint64_t)v549);
                    swift_bridgeObjectRelease();
                    outlined destroy of [A]();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    outlined destroy of [A]();
                    return v173;
                  }
                  goto LABEL_92;
                }
              }
              __break(1u);
LABEL_92:
              uint64_t v154 = v176;
              swift_bridgeObjectRelease();
              outlined consume of Data._Representation(v181, v182);
              outlined destroy of [A]();
              swift_bridgeObjectRelease();
              outlined destroy of [A]();
              v239(v434, v422);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v549);
              swift_bridgeObjectRelease();
              outlined destroy of [A]();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              outlined destroy of [A]();
              uint64_t v277 = v154;
              return v385;
            }
            uint64_t v155 = v211;
            v239(v426, v422);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v515);
            swift_bridgeObjectRelease();
            outlined destroy of [A]();
            v239(v434, v422);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v549);
            swift_bridgeObjectRelease();
            outlined destroy of [A]();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            outlined destroy of [A]();
            uint64_t v277 = v155;
          }
        }
        return v385;
      }
      goto LABEL_97;
    }
LABEL_87:
    uint64_t v159 = v257;
    uint64_t v158 = *(void (**)(char *, uint64_t))(v423 + 8);
    uint64_t v157 = v423 + 8;
    v158(v428, v422);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v534);
    v158(v434, v422);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v549);
    swift_bridgeObjectRelease();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of [A]();
    uint64_t v277 = v159;
    return v385;
  }
LABEL_98:
  __break(1u);
LABEL_99:
  __break(1u);
  return result;
}

uint64_t closure #2 in NightingalePFLRunner.runTraining(modelPath:hyperParams:modelType:featureFlow:featureDaySHR:featureNightSHR:featurePSM:featurePSS:featureSWT:featureLabel:sliceSize:numFeatures:labelSize:existingMetrics:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = MEMORY[0x25A2BFEA0](*a1, a1[1], MEMORY[0x263F8D5C8]);
  *a2 = result;
  a2[1] = v3;
  return result;
}

uint64_t NightingalePFLRunner.runDemographics(dispatchGroup:hyperParams:modelPath:cycleStats:daySHR10CountStats:numberOfSlices:age:existingMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v248 = a1;
  uint64_t v249 = a2;
  uint64_t v250 = a3;
  uint64_t v251 = a4;
  float v256 = a9;
  uint64_t v271 = a12;
  uint64_t v242 = 0;
  uint64_t v240 = closure #2 in NightingalePFLRunner.runTraining(modelPath:hyperParams:modelType:featureFlow:featureDaySHR:featureNightSHR:featurePSM:featurePSS:featureSWT:featureLabel:sliceSize:numFeatures:labelSize:existingMetrics:);
  uint64_t v241 = closure #36 in NightingaleDPFLRunner.run(task:useCase:context:);
  uint64_t v338 = 0;
  uint64_t v337 = 0;
  uint64_t v335 = 0;
  uint64_t v336 = 0;
  uint64_t v333 = 0;
  memset(v334, 0, 13);
  memset(v332, 0, 13);
  int v331 = 0;
  int v329 = 0;
  char v330 = 0;
  uint64_t v328 = 0;
  uint64_t v327 = 0;
  int v326 = 0;
  int v325 = 0;
  int v324 = 0;
  int v323 = 0;
  int v322 = 0;
  int v318 = 0;
  uint64_t v317 = 0;
  uint64_t v315 = 0;
  uint64_t v316 = 0;
  uint64_t v313 = 0;
  uint64_t v314 = 0;
  uint64_t v309 = 0;
  uint64_t v310 = 0;
  uint64_t v305 = 0;
  float v296 = 0.0;
  uint64_t v295 = 0;
  uint64_t v293 = 0;
  uint64_t v286 = 0;
  uint64_t v282 = 0;
  uint64_t v281 = 0;
  uint64_t v277 = 0;
  unint64_t v278 = 0;
  uint64_t v276 = 0;
  uint64_t v344 = a5;
  int v269 = a5;
  int v258 = BYTE4(a5);
  uint64_t v343 = a6;
  int v259 = a6;
  unsigned int v260 = BYTE4(a6);
  uint64_t v342 = a7;
  int v252 = a7;
  int v272 = BYTE4(a7);
  uint64_t v341 = a8;
  int v273 = a8;
  int v253 = BYTE4(a8);
  uint64_t v340 = a10;
  int v254 = a10;
  int v255 = BYTE4(a10);
  uint64_t v339 = a11;
  float v257 = *(float *)&a11;
  int v270 = BYTE4(a11);
  uint64_t v243 = type metadata accessor for ShuffleMethod();
  uint64_t v244 = *(void *)(v243 - 8);
  uint64_t v245 = v243 - 8;
  unint64_t v246 = (*(void *)(v244 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v247 = (char *)&v104 - v246;
  uint64_t v13 = type metadata accessor for EspressoFunction();
  int v14 = v252;
  uint64_t v261 = v13;
  uint64_t v262 = *(void *)(v13 - 8);
  uint64_t v263 = v13 - 8;
  uint64_t v267 = *(void *)(v262 + 64);
  unint64_t v264 = (v267 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v15 = MEMORY[0x270FA5388](v260);
  uint64_t v265 = (char *)&v104 - v264;
  unint64_t v266 = (v267 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v16 = MEMORY[0x270FA5388](v15);
  uint64_t v268 = (char *)&v104 - v266;
  char v17 = MEMORY[0x270FA5388](v16);
  uint64_t v274 = (char *)&v104 - v18;
  uint64_t v338 = v19;
  uint64_t v337 = v20;
  uint64_t v335 = v21;
  uint64_t v336 = v22;
  LODWORD(v333) = v269;
  BYTE4(v333) = v23 & 1;
  LODWORD(v334[0]) = v24;
  BYTE4(v334[0]) = v17 & 1;
  LODWORD(v334[1]) = v14;
  BYTE4(v334[1]) = v272 & 1;
  LODWORD(v332[0]) = v273;
  BYTE4(v332[0]) = v25 & 1;
  LODWORD(v332[1]) = v26;
  BYTE4(v332[1]) = v27 & 1;
  int v331 = v28;
  int v329 = v29;
  char v330 = v270 & 1;
  uint64_t v328 = v271;
  uint64_t v327 = v12;
  if ((v23 & 1) != 0
    || (int v237 = v269,
        (v236 = v237, v326 = v237, (v260 & 1) != 0) || (int v235 = v259, v234 = v235, v325 = v235, (v272 & 1) != 0)))
  {
    lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
    uint64_t v111 = swift_allocError();
    *uint64_t v103 = 20;
    swift_willThrow();
    uint64_t v113 = v111;
    return v118;
  }
  int v233 = v252;
  int v232 = v233;
  int v324 = v233;
  if (v253 & 1) != 0 || (v231 = v273, int v230 = v231, v323 = v231, (v255))
  {
    lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
    uint64_t v112 = swift_allocError();
    *Swift::UInt32 v102 = 21;
    swift_willThrow();
    uint64_t v113 = v112;
    return v118;
  }
  int v229 = v254;
  int v220 = v254;
  int v322 = v254;
  uint64_t v222 = NightingaleDPFLRunner.performanceMeasure.getter();
  object = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("BMIQuery", 8uLL, 1)._object;
  dispatch thunk of PerformanceMeasure.start(_:)();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v223 = v319;
  outlined init with copy of HealthDataQuery(v238 + 64, (uint64_t)v319);
  uint64_t v224 = v320;
  uint64_t v225 = v321;
  __swift_project_boxed_opaque_existential_1(v223, v320);
  uint64_t v30 = v239;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v225 + 56))(v248, v249, v224);
  uint64_t v226 = v30;
  int v227 = v31;
  uint64_t v228 = v30;
  if (v30)
  {
    uint64_t v110 = v228;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v319);
    uint64_t v113 = v110;
    return v118;
  }
  int v203 = v227;
  int v318 = v227;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v319);
  uint64_t v205 = NightingaleDPFLRunner.performanceMeasure.getter();
  Builtin::Word v207 = 8;
  int v208 = 1;
  uint64_t v204 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("BMIQuery", 8uLL, 1)._object;
  dispatch thunk of PerformanceMeasure.finish(_:)();
  uint64_t v206 = v32;
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v317 = v206;
  NightingalePFLRunner.sendLocation(_:hyperParams:)(7, v249);
  uint64_t v210 = NightingaleDPFLRunner.performanceMeasure.getter();
  uint64_t v209 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Training", v207, v208 & 1)._object;
  dispatch thunk of PerformanceMeasure.start(_:)();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v211 = HyperParams.inputName.getter();
  uint64_t v212 = v33;
  uint64_t v315 = v211;
  uint64_t v316 = v33;
  uint64_t v213 = HyperParams.labelName.getter();
  uint64_t v214 = v34;
  uint64_t v313 = v213;
  uint64_t v314 = v34;
  uint64_t v215 = HyperParams.modelRepresentation.getter();
  uint64_t v218 = v35;
  uint64_t v36 = HyperParams.modelRepresentationEIR.unsafeMutableAddressor();
  uint64_t v216 = *(void *)v36;
  uint64_t v217 = *((void *)v36 + 1);
  swift_bridgeObjectRetain();
  int v219 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v219)
  {
    uint64_t v202 = type metadata accessor for EspressoEIRTrainer();
    NightingaleDPFLRunner.performanceMeasure.getter();
    uint64_t v37 = EspressoEIRTrainer.__allocating_init(_:)();
    v275[3] = v202;
    v275[4] = MEMORY[0x263F61118];
    v275[0] = v37;
    outlined init with take of HealthDataQuery(v275, v312);
  }
  else
  {
    uint64_t v201 = type metadata accessor for EspressoMILTrainer();
    NightingaleDPFLRunner.performanceMeasure.getter();
    uint64_t v38 = EspressoMILTrainer.__allocating_init(_:)();
    v311[3] = v201;
    v311[4] = MEMORY[0x263F61120];
    v311[0] = v38;
    outlined init with take of HealthDataQuery(v311, v312);
  }
  uint64_t v188 = HyperParams.lossName.getter();
  uint64_t v189 = v39;
  uint64_t v309 = v188;
  uint64_t v310 = v39;
  uint64_t v184 = v306;
  outlined init with copy of HealthDataQuery((uint64_t)v312, (uint64_t)v306);
  uint64_t v196 = v307;
  uint64_t v197 = v308;
  uint64_t v193 = __swift_project_boxed_opaque_existential_1(v184, v307);
  static EspressoFunction.training.getter();
  uint64_t v187 = 2;
  uint64_t v192 = MEMORY[0x263F8D310];
  uint64_t v185 = _allocateUninitializedArray<A>(_:)();
  uint64_t v186 = v40;
  swift_bridgeObjectRetain();
  uint64_t v41 = v212;
  uint64_t v42 = v186;
  *uint64_t v186 = v211;
  v42[1] = v41;
  swift_bridgeObjectRetain();
  uint64_t v43 = v185;
  uint64_t v44 = v214;
  unsigned int v45 = v186;
  v186[2] = v213;
  v45[3] = v44;
  _finalizeUninitializedArray<A>(_:)();
  uint64_t v194 = v43;
  uint64_t v191 = _allocateUninitializedArray<A>(_:)();
  uint64_t v190 = v46;
  swift_bridgeObjectRetain();
  uint64_t v47 = v189;
  dispatch_group_t v48 = v190;
  uint64_t *v190 = v188;
  v48[1] = v47;
  uint64_t v49 = HyperParams.outputName.getter();
  uint64_t v50 = v190;
  uint64_t v51 = v49;
  uint64_t v52 = v191;
  v190[2] = v51;
  v50[3] = v53;
  _finalizeUninitializedArray<A>(_:)();
  uint64_t v195 = v52;
  uint64_t v54 = HyperParams.weightNames.getter();
  uint64_t v55 = v226;
  uint64_t v198 = v54;
  dispatch thunk of EspressoTrainer.load(path:functions:inputs:outputs:weights:)();
  uint64_t v199 = v55;
  uint64_t v200 = v55;
  if (v55)
  {
    uint64_t v109 = v200;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v262 + 8))(v274, v261);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v306);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v312);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v113 = v109;
    return v118;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v175 = *(void (**)(char *, uint64_t))(v262 + 8);
  uint64_t v176 = v262 + 8;
  v175(v274, v261);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v306);
  uint64_t v56 = HyperParams.batchSize.getter();
  static HIDPFLUtils.computeEffectiveTrainingSize(_:_:)(1, v56);
  uint64_t v179 = v57;
  uint64_t v305 = v57;
  uint64_t v177 = v302;
  outlined init with copy of HealthDataQuery((uint64_t)v312, (uint64_t)v302);
  uint64_t v180 = v303;
  uint64_t v181 = v304;
  int v178 = __swift_project_boxed_opaque_existential_1(v177, v303);
  float v58 = HyperParams.learningRate.getter();
  uint64_t v59 = v199;
  float v300 = v58;
  char v301 = 0;
  dispatch thunk of EspressoTrainer.finalize(batchSize:learningRate:)();
  uint64_t v182 = v59;
  uint64_t v183 = v59;
  if (v59)
  {
    uint64_t v108 = v183;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v302);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v312);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v113 = v108;
    return v118;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v302);
  float v297 = v257;
  char v298 = v270 & 1;
  swift_retain();
  if (v298) {
    float v299 = (float)HyperParams.defaultAge.getter();
  }
  else {
    float v299 = v297;
  }
  swift_release();
  float v160 = v299;
  float v296 = v299;
  uint64_t v164 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, [Float]));
  uint64_t v165 = _allocateUninitializedArray<A>(_:)();
  uint64_t v163 = v60;
  swift_bridgeObjectRetain();
  uint64_t v61 = v212;
  uint64_t v62 = v163;
  *uint64_t v163 = v211;
  v62[1] = v61;
  uint64_t v161 = MEMORY[0x263F8D5C8];
  uint64_t v63 = _allocateUninitializedArray<A>(_:)();
  int v64 = v203;
  int v65 = v236;
  int v66 = v234;
  int v67 = v232;
  int v68 = v230;
  int v69 = v220;
  float v70 = v256;
  uint64_t v162 = v71;
  *uint64_t v71 = v160;
  *((_DWORD *)v71 + 1) = v64;
  *((_DWORD *)v71 + 2) = v65;
  *((_DWORD *)v71 + 3) = v66;
  *((_DWORD *)v71 + 4) = v67;
  *((_DWORD *)v71 + 5) = v68;
  *((_DWORD *)v71 + 6) = v69;
  v71[7] = v70;
  _finalizeUninitializedArray<A>(_:)();
  v163[2] = v63;
  swift_bridgeObjectRetain();
  uint64_t v72 = v214;
  uint64_t v73 = v163;
  v163[3] = v213;
  void v73[4] = v72;
  float v294 = 1.0;
  uint64_t v74 = specialized Array.init(repeating:count:)();
  uint64_t v75 = v165;
  v163[5] = v74;
  _finalizeUninitializedArray<A>(_:)();
  uint64_t v166 = v75;
  uint64_t v167 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
  uint64_t v168 = Dictionary.init(dictionaryLiteral:)();
  swift_bridgeObjectRetain();
  uint64_t v295 = v168;
  uint64_t v169 = v290;
  outlined init with copy of HealthDataQuery((uint64_t)v312, (uint64_t)v290);
  uint64_t v170 = v291;
  uint64_t v171 = v292;
  __swift_project_boxed_opaque_existential_1(v169, v291);
  static EspressoFunction.training.getter();
  uint64_t v76 = v182;
  uint64_t v77 = dispatch thunk of EspressoTrainer.extractWeights(function:)();
  uint64_t v172 = v76;
  uint64_t v173 = v77;
  uint64_t v174 = v76;
  if (v76)
  {
    uint64_t v107 = v174;
    swift_bridgeObjectRelease();
    v175(v268, v261);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v290);
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v312);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v113 = v107;
    return v118;
  }
  uint64_t v149 = v173;
  v175(v268, v261);
  uint64_t v293 = v149;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v290);
  id v150 = v287;
  outlined init with copy of HealthDataQuery((uint64_t)v312, (uint64_t)v287);
  uint64_t v156 = v288;
  uint64_t v157 = v289;
  __swift_project_boxed_opaque_existential_1(v150, v288);
  uint64_t v153 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Int));
  uint64_t v151 = _allocateUninitializedArray<A>(_:)();
  uint64_t v152 = v78;
  swift_bridgeObjectRetain();
  uint64_t v79 = v212;
  uint64_t v80 = v152;
  *uint64_t v152 = v211;
  v80[1] = v79;
  void v80[2] = 8;
  swift_bridgeObjectRetain();
  uint64_t v81 = v214;
  uint64_t v82 = v152;
  v152[3] = v213;
  v82[4] = v81;
  uint64_t v155 = 1;
  v82[5] = 1;
  _finalizeUninitializedArray<A>(_:)();
  uint64_t v154 = Dictionary.init(dictionaryLiteral:)();
  (*(void (**)(char *, void, uint64_t))(v244 + 104))(v247, *MEMORY[0x263F61108], v243);
  uint64_t v83 = v172;
  dispatch thunk of EspressoTrainer.train(_:featureSizes:numSamples:epochs:shuffleMethod:fullBatch:)();
  uint64_t v158 = v83;
  uint64_t v159 = v83;
  if (v83)
  {
    uint64_t v106 = v159;
    (*(void (**)(char *, uint64_t))(v244 + 8))(v247, v243);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v287);
    outlined destroy of [A]();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v312);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v113 = v106;
    return v118;
  }
  (*(void (**)(char *, uint64_t))(v244 + 8))(v247, v243);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v287);
  int v142 = default argument 0 of Dictionary.removeAll(keepingCapacity:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : [Float]]);
  Dictionary.removeAll(keepingCapacity:)(v142 & 1);
  uint64_t v143 = v283;
  outlined init with copy of HealthDataQuery((uint64_t)v312, (uint64_t)v283);
  uint64_t v144 = v284;
  uint64_t v145 = v285;
  __swift_project_boxed_opaque_existential_1(v143, v284);
  static EspressoFunction.training.getter();
  uint64_t v84 = v158;
  uint64_t v85 = dispatch thunk of EspressoTrainer.extractWeights(function:)();
  uint64_t v146 = v84;
  uint64_t v147 = v85;
  uint64_t v148 = v84;
  if (v84)
  {
    uint64_t v105 = v148;
    v175(v265, v261);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v283);
    outlined destroy of [A]();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v312);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v113 = v105;
    return v118;
  }
  uint64_t v132 = v147;
  v175(v265, v261);
  int v140 = &v286;
  uint64_t v286 = v132;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v283);
  static HIDPFLUtils.inplaceSub(_:_:)(v140);
  uint64_t v134 = NightingaleDPFLRunner.performanceMeasure.getter();
  int v136 = 1;
  id v133 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Training", 8uLL, 1)._object;
  dispatch thunk of PerformanceMeasure.finish(_:)();
  uint64_t v135 = v86;
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v282 = v135;
  uint64_t v138 = NightingaleDPFLRunner.performanceMeasure.getter();
  uint64_t v137 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PluginE2E", 9uLL, v136 & 1)._object;
  dispatch thunk of PerformanceMeasure.finish(_:)();
  uint64_t v139 = v87;
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v281 = v139;
  NightingalePFLRunner.sendLocation(_:hyperParams:)(8, v249);
  uint64_t v88 = v146;
  Array.withUnsafeMutableBufferPointer<A>(_:)();
  uint64_t v141 = v88;
  if (v88)
  {
    __break(1u);
LABEL_41:
    __break(1u);
    uint64_t v104 = v117;
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(v119, v120);
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v312);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v113 = v104;
    return v118;
  }
  uint64_t v119 = v279;
  unint64_t v120 = v280;
  uint64_t v277 = v279;
  unint64_t v278 = v280;
  swift_bridgeObjectRetain();
  uint64_t v125 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any));
  uint64_t v126 = _allocateUninitializedArray<A>(_:)();
  uint64_t v124 = v89;
  float v90 = NightingalePFLRunner.keyMetricsBMIDurationS.unsafeMutableAddressor();
  outlined init with copy of String(v90, v124);
  uint64_t v91 = v206;
  uint64_t v92 = v124;
  uint64_t v123 = MEMORY[0x263F8D538];
  v124[5] = MEMORY[0x263F8D538];
  v92[2] = v91;
  uint64_t v121 = v92 + 6;
  float v93 = NightingalePFLRunner.keyMetricsTrainingDurationS.unsafeMutableAddressor();
  outlined init with copy of String(v93, v121);
  uint64_t v94 = v135;
  uint64_t v95 = v124;
  v124[11] = v123;
  v95[8] = v94;
  uint64_t v122 = v95 + 12;
  uint64_t v96 = NightingalePFLRunner.keyMetricsE2EDurationS.unsafeMutableAddressor();
  outlined init with copy of String(v96, v122);
  int v97 = v124;
  uint64_t v98 = v139;
  v124[17] = v123;
  v97[14] = v98;
  _finalizeUninitializedArray<A>(_:)();
  uint64_t v127 = MEMORY[0x263F8D310];
  uint64_t v128 = MEMORY[0x263F8EE58] + 8;
  uint64_t v129 = MEMORY[0x263F8D320];
  Dictionary.init(dictionaryLiteral:)();
  uint64_t v99 = v141;
  uint64_t v100 = Dictionary.merging(_:uniquingKeysWith:)();
  uint64_t v130 = v99;
  uint64_t v131 = v100;
  if (v99) {
    goto LABEL_41;
  }
  uint64_t v115 = v131;
  uint64_t v276 = v131;
  static HIDPFLUtils.checkMetrics(_:)();
  uint64_t v116 = 0;
  uint64_t v117 = 0;
  type metadata accessor for PFLTaskResult();
  outlined copy of Data._Representation(v119, v120);
  uint64_t v114 = PFLTaskResult.__allocating_init(json:vector:)();
  outlined consume of Data._Representation(v119, v120);
  outlined destroy of [A]();
  outlined destroy of [A]();
  outlined destroy of [A]();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v312);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v114;
}

uint64_t NightingalePFLRunner.runEvals(evalModels:task:hyperParams:modelType:featureFlow:featureDaySHR:featureNightSHR:featurePSM:featurePSS:featureSWT:featureLabel:sliceSize:numFeatures:existingMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, Swift::OpaquePointer *a5, Swift::OpaquePointer *a6, Swift::OpaquePointer *a7, Swift::OpaquePointer *a8, Swift::OpaquePointer *a9, Swift::OpaquePointer *a10, uint64_t *a11, int a12, uint64_t a13, uint64_t a14)
{
  uint64_t v317 = a1;
  uint64_t v325 = a2;
  uint64_t v311 = a3;
  int v318 = a4;
  uint64_t v319 = a5;
  uint64_t v320 = a6;
  uint64_t v321 = a7;
  int v322 = a8;
  int v323 = a9;
  int v324 = a10;
  uint64_t v340 = (Swift::OpaquePointer *)a11;
  int v342 = a12;
  uint64_t v329 = a13;
  uint64_t v332 = a14;
  uint64_t v15 = v14;
  uint64_t v334 = v15;
  Builtin::Word v337 = 8;
  uint64_t v312 = "Fatal error";
  uint64_t v313 = "Unexpectedly found nil while unwrapping an Optional value";
  uint64_t v314 = "NightingaleTraining/NightingalePFLRunner.swift";
  uint64_t v315 = closure #36 in NightingaleDPFLRunner.run(task:useCase:context:);
  uint64_t v316 = closure #36 in NightingaleDPFLRunner.run(task:useCase:context:);
  uint64_t v451 = 0;
  uint64_t v450 = 0;
  uint64_t v449 = 0;
  char v448 = 0;
  uint64_t v447 = 0;
  uint64_t v446 = 0;
  uint64_t v445 = 0;
  uint64_t v444 = 0;
  uint64_t v443 = 0;
  uint64_t v442 = 0;
  uint64_t v441 = 0;
  int v440 = 0;
  uint64_t v439 = 0;
  uint64_t v438 = 0;
  uint64_t v437 = 0;
  uint64_t v436 = 0;
  uint64_t v435 = 0;
  uint64_t v434 = 0;
  v433._uint64_t rawValue = 0;
  uint64_t v428 = 0;
  uint64_t v429 = 0;
  uint64_t v424 = 0;
  uint64_t v423 = 0;
  uint64_t v421 = 0;
  uint64_t v422 = 0;
  uint64_t v420 = 0;
  uint64_t v419 = 0;
  uint64_t v417 = 0;
  uint64_t v418 = 0;
  uint64_t v415 = 0;
  uint64_t v416 = 0;
  uint64_t v413 = 0;
  uint64_t v414 = 0;
  uint64_t v411 = 0;
  uint64_t v412 = 0;
  uint64_t v410 = 0;
  Swift::UInt32 v409 = 0;
  uint64_t v408 = 0;
  uint64_t v406 = 0;
  uint64_t v407 = 0;
  uint64_t v404 = 0;
  uint64_t v405 = 0;
  Swift::String_optional v403 = (Swift::String_optional)0;
  uint64_t v402 = 0;
  float v389 = 0.0;
  uint64_t v382 = 0;
  uint64_t v381 = 0;
  uint64_t v379 = 0;
  uint64_t v380 = 0;
  uint64_t v373 = 0;
  uint64_t v364 = 0;
  float v361 = 0.0;
  uint64_t v358 = 0;
  uint64_t v326 = type metadata accessor for EspressoFunction();
  uint64_t v327 = *(void *)(v326 - 8);
  uint64_t v328 = v326 - 8;
  unint64_t v330 = (*(void *)(v327 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v17 = MEMORY[0x270FA5388](a14);
  int v331 = (char *)&v115 - v330;
  uint64_t v451 = v18;
  uint64_t v450 = v19;
  uint64_t v449 = a3;
  char v448 = v20;
  uint64_t v447 = v21;
  uint64_t v446 = v22;
  uint64_t v445 = v23;
  uint64_t v444 = v24;
  uint64_t v443 = v25;
  uint64_t v442 = v26;
  uint64_t v441 = a11;
  int v440 = a12;
  uint64_t v439 = a13;
  uint64_t v438 = v17;
  uint64_t v437 = v27;
  swift_bridgeObjectRetain();
  uint64_t v436 = v332;
  v333._uint64_t rawValue = v340->_rawValue;
  swift_bridgeObjectRetain();
  uint64_t v335 = MEMORY[0x25A2C0830](v333._rawValue);
  uint64_t v435 = v335;
  swift_bridgeObjectRelease();
  uint64_t v28 = HyperParams.batchSize.getter();
  static HIDPFLUtils.computeEffectiveTrainingSize(_:_:)(v335, v28);
  uint64_t v336 = v29;
  uint64_t v434 = v29;
  uint64_t v339 = NightingaleDPFLRunner.performanceMeasure.getter();
  object = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Training", v337, 1)._object;
  dispatch thunk of PerformanceMeasure.start(_:)();
  swift_bridgeObjectRelease();
  swift_release();
  int v432 = 0;
  uint64_t rawValue = v340->_rawValue;
  swift_bridgeObjectRetain();
  uint64_t v347 = MEMORY[0x25A2C0830](rawValue);
  swift_bridgeObjectRelease();
  uint64_t v345 = &v430;
  int v430 = v342;
  unint64_t v343 = lazy protocol witness table accessor for type Int and conformance Int();
  unint64_t v344 = lazy protocol witness table accessor for type Int and conformance Int();
  unint64_t v346 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  SignedInteger<>.init<A>(_:)();
  uint64_t result = v347;
  uint64_t v348 = v347 * v431;
  if ((unsigned __int128)(v347 * (__int128)v431) >> 64 != (v347 * v431) >> 63)
  {
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
    return result;
  }
  uint64_t v310 = v348 * v329;
  if ((unsigned __int128)(v348 * (__int128)v329) >> 64 != (v348 * v329) >> 63) {
    goto LABEL_66;
  }
  v433._uint64_t rawValue = (void *)specialized Array.init(repeating:count:)();
  transferFeatureToMLInputs(_:_:_:_:)(v319, &v433, NightingaleTraining_NightingaleModelFeatureType_Flow, (NightingaleTraining::NightingalePFLModelType)v318);
  uint64_t v308 = v31;
  uint64_t v309 = v31;
  if (v31)
  {
    uint64_t v126 = v309;
    outlined destroy of [A]();
    outlined destroy of [A]();
    uint64_t v178 = v126;
    return v307;
  }
  transferFeatureToMLInputs(_:_:_:_:)(v324, &v433, NightingaleTraining_NightingaleModelFeatureType_SWT, (NightingaleTraining::NightingalePFLModelType)v318);
  uint64_t v305 = v32;
  uint64_t v306 = v32;
  if (v32)
  {
    uint64_t v125 = v306;
    outlined destroy of [A]();
    outlined destroy of [A]();
    uint64_t v178 = v125;
    return v307;
  }
  transferFeatureToMLInputs(_:_:_:_:)(v320, &v433, NightingaleTraining_NightingaleModelFeatureType_DaySHR10, (NightingaleTraining::NightingalePFLModelType)v318);
  uint64_t v303 = v33;
  uint64_t v304 = v33;
  if (v33)
  {
    uint64_t v124 = v304;
    outlined destroy of [A]();
    outlined destroy of [A]();
    uint64_t v178 = v124;
    return v307;
  }
  transferFeatureToMLInputs(_:_:_:_:)(v321, &v433, NightingaleTraining_NightingaleModelFeatureType_NightSHR10, (NightingaleTraining::NightingalePFLModelType)v318);
  uint64_t v301 = v34;
  uint64_t v302 = v34;
  if (v34)
  {
    uint64_t v123 = v302;
    outlined destroy of [A]();
    outlined destroy of [A]();
    uint64_t v178 = v123;
    return v307;
  }
  transferFeatureToMLInputs(_:_:_:_:)(v322, &v433, NightingaleTraining_NightingaleModelFeatureType_PSM, (NightingaleTraining::NightingalePFLModelType)v318);
  uint64_t v299 = v35;
  uint64_t v300 = v35;
  if (v35)
  {
    uint64_t v122 = v300;
    outlined destroy of [A]();
    outlined destroy of [A]();
    uint64_t v178 = v122;
    return v307;
  }
  transferFeatureToMLInputs(_:_:_:_:)(v323, &v433, NightingaleTraining_NightingaleModelFeatureType_PSS, (NightingaleTraining::NightingalePFLModelType)v318);
  uint64_t v297 = v36;
  uint64_t v298 = v36;
  if (v36)
  {
    uint64_t v121 = v298;
    outlined destroy of [A]();
    outlined destroy of [A]();
    uint64_t v178 = v121;
    return v307;
  }
  swift_bridgeObjectRetain();
  uint64_t v427 = v317;
  uint64_t v295 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  Collection<>.makeIterator()();
  for (uint64_t i = v297; ; uint64_t i = v171)
  {
    uint64_t v292 = i;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[String]>);
    IndexingIterator.next()();
    uint64_t v293 = v425;
    uint64_t v294 = v426;
    if (!v426) {
      break;
    }
    uint64_t v290 = v293;
    uint64_t v291 = v294;
    uint64_t v269 = v294;
    uint64_t v270 = v293;
    uint64_t v421 = v293;
    uint64_t v422 = v294;
    uint64_t v271 = HyperParams.recipeForModel(model:)(v293, v294);
    uint64_t v420 = v271;
    type metadata accessor for HyperParams();
    swift_bridgeObjectRetain();
    uint64_t v37 = _dictionaryUpCast<A, B, C, D>(_:)();
    uint64_t v38 = HyperParams.__allocating_init(recipe:)(v37);
    uint64_t v285 = v38;
    swift_bridgeObjectRelease();
    uint64_t v419 = v38;
    uint64_t v272 = HyperParams.inputName.getter();
    uint64_t v273 = v39;
    uint64_t v417 = v272;
    uint64_t v418 = v39;
    uint64_t v274 = HyperParams.labelName.getter();
    uint64_t v275 = v40;
    uint64_t v415 = v274;
    uint64_t v416 = v40;
    uint64_t v276 = HyperParams.lossName.getter();
    uint64_t v277 = v41;
    uint64_t v413 = v276;
    uint64_t v414 = v41;
    uint64_t v278 = HyperParams.outputName.getter();
    uint64_t v279 = v42;
    uint64_t v411 = v278;
    uint64_t v412 = v42;
    uint64_t v280 = HyperParams.weightNames.getter();
    uint64_t v410 = v280;
    Swift::UInt32 v281 = HyperParams.labelSize.getter();
    Swift::UInt32 v409 = v281;
    uint64_t v282 = HyperParams.modelMaxNumDaysToNextPeriod.getter();
    uint64_t v408 = v282;
    uint64_t v283 = HyperParams.modelRepresentation.getter();
    uint64_t v284 = v43;
    uint64_t v406 = v283;
    uint64_t v407 = v43;
    uint64_t v286 = HyperParams.labelEncodingType.getter();
    uint64_t v287 = v44;
    uint64_t v404 = v286;
    uint64_t v405 = v44;
    v45._uint64_t countAndFlagsBits = HyperParams.modelPath.getter();
    uint64_t v288 = v45._object;
    Swift::String_optional v289 = PFLTask.evalModelPath(path:)(v45);
    swift_bridgeObjectRelease();
    if (!v289.value._object)
    {
      lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
      uint64_t v148 = swift_allocError();
      *uint64_t v104 = 9;
      swift_willThrow();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      uint64_t v178 = v148;
      return v307;
    }
    Swift::String_optional v268 = v289;
    int v259 = v289.value._object;
    uint64_t countAndFlagsBits = v289.value._countAndFlagsBits;
    Swift::String_optional v403 = v289;
    uint64_t v261 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, [Float]));
    uint64_t v262 = _allocateUninitializedArray<A>(_:)();
    unint64_t v264 = v46;
    uint64_t v263 = v46 + 2;
    swift_bridgeObjectRetain();
    uint64_t v47 = v273;
    dispatch_group_t v48 = v263;
    uint64_t v49 = v264;
    uint64_t *v264 = v272;
    v49[1] = v47;
    outlined init with copy of [Float]((uint64_t *)&v433, v48);
    swift_bridgeObjectRetain();
    uint64_t v50 = v275;
    uint64_t v51 = v264;
    uint64_t v52 = v340;
    v264[3] = v274;
    v51[4] = v50;
    int v401 = 0;
    uint64_t v265 = v52->_rawValue;
    swift_bridgeObjectRetain();
    uint64_t v266 = MEMORY[0x25A2C0830](v265);
    swift_bridgeObjectRelease();
    v399[11] = v281;
    SignedInteger<>.init<A>(_:)();
    uint64_t result = v266;
    uint64_t v267 = v266 * v400;
    if ((unsigned __int128)(v266 * (__int128)v400) >> 64 != (v266 * v400) >> 63) {
      goto LABEL_67;
    }
    uint64_t v53 = specialized Array.init(repeating:count:)();
    uint64_t v54 = v262;
    v264[5] = v53;
    _finalizeUninitializedArray<A>(_:)();
    uint64_t v254 = v54;
    uint64_t v255 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
    uint64_t v402 = Dictionary.init(dictionaryLiteral:)();
    uint64_t v55 = HyperParams.labelEncodingTypeOnehot.unsafeMutableAddressor();
    uint64_t v256 = *(void *)v55;
    uint64_t v257 = *((void *)v55 + 1);
    swift_bridgeObjectRetain();
    int v258 = static String.== infix(_:_:)();
    swift_bridgeObjectRelease();
    if (v258)
    {
      swift_bridgeObjectRetain();
      uint64_t v251 = v349;
      v349[0] = v274;
      v349[1] = v275;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : [Float]]);
      int v252 = (void (*)(void))Dictionary.subscript.modify();
      int v253 = v56;
      if (!v56->_rawValue)
      {
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      transferLabelToOnehotEncode(_:_:_:)(v340, v253, v281);
      v252();
      outlined destroy of DefaultStringInterpolation();
    }
    else
    {
      uint64_t v57 = HyperParams.labelEncodingTypeRegression.unsafeMutableAddressor();
      uint64_t v248 = *(void *)v57;
      uint64_t v249 = *((void *)v57 + 1);
      swift_bridgeObjectRetain();
      int v250 = static String.== infix(_:_:)();
      swift_bridgeObjectRelease();
      if (v250)
      {
        uint64_t result = swift_bridgeObjectRetain();
        uint64_t v247 = v282 - 1;
        if (__OFSUB__(v282, 1)) {
          goto LABEL_69;
        }
        uint64_t v242 = &v351;
        uint64_t v351 = v247;
        unint64_t v240 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        unint64_t v241 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        lazy protocol witness table accessor for type Int and conformance Int();
        UnsignedInteger<>.init<A>(_:)();
        Swift::UInt32 v243 = v352;
        uint64_t v244 = v350;
        v350[0] = v274;
        v350[1] = v275;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : [Float]]);
        uint64_t v245 = (void (*)(void))Dictionary.subscript.modify();
        unint64_t v246 = v59;
        if (!v59->_rawValue)
        {
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
        }
        transferLabelToRegression(_:_:_:_:)(v340, v246, v281, v243);
        v245();
        outlined destroy of DefaultStringInterpolation();
      }
    }
    uint64_t v60 = HyperParams.modelRepresentationEIR.unsafeMutableAddressor();
    uint64_t v237 = *(void *)v60;
    uint64_t v238 = *((void *)v60 + 1);
    swift_bridgeObjectRetain();
    int v239 = static String.== infix(_:_:)();
    swift_bridgeObjectRelease();
    if (v239)
    {
      uint64_t v236 = type metadata accessor for EspressoEIRTrainer();
      NightingaleDPFLRunner.performanceMeasure.getter();
      uint64_t v61 = EspressoEIRTrainer.__allocating_init(_:)();
      v353[3] = v236;
      v353[4] = MEMORY[0x263F61118];
      v353[0] = v61;
      outlined init with take of HealthDataQuery(v353, v399);
    }
    else
    {
      uint64_t v235 = type metadata accessor for EspressoMILTrainer();
      NightingaleDPFLRunner.performanceMeasure.getter();
      uint64_t v62 = EspressoMILTrainer.__allocating_init(_:)();
      v398[3] = v235;
      v398[4] = MEMORY[0x263F61120];
      v398[0] = v62;
      outlined init with take of HealthDataQuery(v398, v399);
    }
    uint64_t v222 = v395;
    outlined init with copy of HealthDataQuery((uint64_t)v399, (uint64_t)v395);
    uint64_t v230 = v396;
    uint64_t v231 = v397;
    __swift_project_boxed_opaque_existential_1(v222, v396);
    static EspressoFunction.evaluation.getter();
    uint64_t v225 = 2;
    uint64_t v228 = MEMORY[0x263F8D310];
    uint64_t v223 = _allocateUninitializedArray<A>(_:)();
    uint64_t v224 = v63;
    swift_bridgeObjectRetain();
    uint64_t v64 = v273;
    int v65 = v224;
    uint64_t *v224 = v272;
    v65[1] = v64;
    swift_bridgeObjectRetain();
    uint64_t v66 = v223;
    uint64_t v67 = v275;
    int v68 = v224;
    v224[2] = v274;
    v68[3] = v67;
    _finalizeUninitializedArray<A>(_:)();
    uint64_t v229 = v66;
    uint64_t v226 = _allocateUninitializedArray<A>(_:)();
    int v227 = v69;
    swift_bridgeObjectRetain();
    uint64_t v70 = v277;
    uint64_t v71 = v227;
    uint64_t *v227 = v276;
    v71[1] = v70;
    swift_bridgeObjectRetain();
    uint64_t v72 = v226;
    uint64_t v73 = v279;
    uint64_t v74 = v227;
    v227[2] = v278;
    v74[3] = v73;
    _finalizeUninitializedArray<A>(_:)();
    uint64_t v75 = v292;
    uint64_t v232 = v72;
    dispatch thunk of EspressoTrainer.load(path:functions:inputs:outputs:weights:)();
    uint64_t v233 = v75;
    uint64_t v234 = v75;
    if (v75)
    {
      uint64_t v120 = v234;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v327 + 8))(v331, v326);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v395);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v399);
      outlined destroy of [A]();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      uint64_t v178 = v120;
      return v307;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v327 + 8))(v331, v326);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v395);
    uint64_t v217 = v392;
    outlined init with copy of HealthDataQuery((uint64_t)v399, (uint64_t)v392);
    uint64_t v218 = v393;
    uint64_t v219 = v394;
    __swift_project_boxed_opaque_existential_1(v217, v393);
    uint64_t v76 = v233;
    int v390 = 0;
    char v391 = 1;
    dispatch thunk of EspressoTrainer.finalize(batchSize:learningRate:)();
    uint64_t v220 = v76;
    uint64_t v221 = v76;
    if (v76)
    {
      uint64_t v119 = v221;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v392);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v399);
      outlined destroy of [A]();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      uint64_t v178 = v119;
      return v307;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v392);
    float v389 = 0.0;
    int v208 = v386;
    outlined init with copy of HealthDataQuery((uint64_t)v399, (uint64_t)v386);
    uint64_t v209 = v387;
    uint64_t v210 = v388;
    uint64_t v211 = __swift_project_boxed_opaque_existential_1(v208, v387);
    uint64_t v212 = v402;
    swift_bridgeObjectRetain();
    uint64_t v213 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Int));
    uint64_t v214 = _allocateUninitializedArray<A>(_:)();
    uint64_t v215 = v77;
    swift_bridgeObjectRetain();
    uint64_t v78 = v273;
    uint64_t v79 = v215;
    int v80 = v342;
    uint64_t *v215 = v272;
    v79[1] = v78;
    int v384 = v80;
    uint64_t result = SignedInteger<>.init<A>(_:)();
    uint64_t v216 = v329 * v385;
    if ((unsigned __int128)(v329 * (__int128)v385) >> 64 != (v329 * v385) >> 63) {
      goto LABEL_68;
    }
    uint64_t v81 = v215;
    v215[2] = v216;
    uint64_t v202 = v81 + 5;
    swift_bridgeObjectRetain();
    uint64_t v82 = v275;
    uint64_t v83 = v215;
    Swift::UInt32 v84 = v281;
    v215[3] = v274;
    v83[4] = v82;
    Swift::UInt32 v383 = v84;
    uint64_t v203 = MEMORY[0x263F8D6C8];
    SignedInteger<>.init<A>(_:)();
    _finalizeUninitializedArray<A>(_:)();
    uint64_t v85 = Dictionary.init(dictionaryLiteral:)();
    uint64_t v86 = v220;
    uint64_t v204 = v85;
    uint64_t v87 = dispatch thunk of EspressoTrainer.eval(_:featureSizes:numSamples:)();
    uint64_t v205 = v86;
    uint64_t v206 = v87;
    uint64_t v207 = v86;
    if (v86)
    {
      uint64_t v118 = v207;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v386);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v399);
      outlined destroy of [A]();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      uint64_t v178 = v118;
      return v307;
    }
    uint64_t v199 = v206;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v382 = v199;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v386);
    uint64_t v381 = specialized Array.init()();
    swift_bridgeObjectRetain();
    uint64_t v378 = v199;
    uint64_t v200 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[String : [Float]]]);
    lazy protocol witness table accessor for type [[String : [Float]]] and conformance [A]();
    Collection<>.makeIterator()();
    for (uint64_t j = v205; ; uint64_t j = v197)
    {
      uint64_t v197 = j;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[[String : [Float]]]>);
      IndexingIterator.next()();
      uint64_t v198 = v377;
      if (!v377) {
        break;
      }
      uint64_t v196 = v198;
      uint64_t v193 = v198;
      uint64_t v364 = v198;
      swift_bridgeObjectRetain();
      uint64_t v194 = v362;
      v362[0] = v276;
      v362[1] = v277;
      MEMORY[0x25A2C04B0](&v363);
      outlined destroy of DefaultStringInterpolation();
      uint64_t v195 = v363;
      if (v363)
      {
        uint64_t v192 = v195;
        uint64_t v187 = v195;
        swift_bridgeObjectRetain();
        uint64_t v186 = &v354;
        uint64_t v354 = v187;
        lazy protocol witness table accessor for type [Float] and conformance [A]();
        Collection.first.getter();
        outlined destroy of [A]();
        float v189 = v355;
        int v188 = v356;
        swift_bridgeObjectRelease();
        float v190 = v189;
        int v191 = v188;
      }
      else
      {
        float v190 = 0.0;
        int v191 = 1;
      }
      float v185 = v190;
      if (v191)
      {
        lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
        uint64_t v176 = swift_allocError();
        *uint64_t v89 = 10;
        swift_willThrow();
        swift_bridgeObjectRelease();
        outlined destroy of [A]();
        outlined destroy of [A]();
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v399);
        outlined destroy of [A]();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined destroy of [A]();
        outlined destroy of [A]();
        outlined destroy of [A]();
        uint64_t v178 = v176;
        return v307;
      }
      float v184 = v185;
      float v361 = v185;
      float v389 = v389 + v185;
      swift_bridgeObjectRetain();
      uint64_t v182 = v359;
      v359[0] = v278;
      v359[1] = v279;
      MEMORY[0x25A2C04B0](&v360);
      outlined destroy of DefaultStringInterpolation();
      uint64_t v183 = v360;
      if (!v360)
      {
        lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
        uint64_t v177 = swift_allocError();
        *uint64_t v88 = 26;
        swift_willThrow();
        swift_bridgeObjectRelease();
        outlined destroy of [A]();
        outlined destroy of [A]();
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v399);
        outlined destroy of [A]();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined destroy of [A]();
        outlined destroy of [A]();
        outlined destroy of [A]();
        uint64_t v178 = v177;
        return v307;
      }
      uint64_t v181 = v183;
      uint64_t v180 = v183;
      uint64_t v358 = v183;
      swift_bridgeObjectRetain();
      uint64_t v179 = &v357;
      uint64_t v357 = v180;
      lazy protocol witness table accessor for type [Float] and conformance [A]();
      Array.append<A>(contentsOf:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    outlined destroy of [A]();
    uint64_t v175 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : [Float]]);
    int64_t v90 = MEMORY[0x25A2C0810](v199);
    if (v90 > 0)
    {
      int64_t v90 = MEMORY[0x25A2C0810](v199, v175);
      float v389 = v389 / (float)v90;
    }
    HKQueryOptions.init(rawValue:)(v90);
    float v91 = HyperParams.intervalCorrectionFactor.getter();
    uint64_t v92 = v197;
    float v93 = (void *)EvalMetricsProcessor.process(labels:outputs:modelMaxNumDaysToNextPeriod:labelEncodingType:intervalCorrectionFactor:)((uint64_t *)v340, &v381, v282, v91);
    uint64_t v172 = v92;
    v173._uint64_t rawValue = v93;
    uint64_t v174 = v92;
    if (v92)
    {
      uint64_t v117 = v174;
      outlined destroy of [A]();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v399);
      outlined destroy of [A]();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      uint64_t v178 = v117;
      return v307;
    }
    uint64_t v165 = v173._rawValue;
    uint64_t v373 = v173._rawValue;
    EvalMetricsProcessor.calculateMetrics(labels:outputs:)(&v372, v340, v173);
    uint64_t v374 = v372.perSliceMetrics._rawValue;
    *(Swift::Float *)uint64_t v375 = v372.aggMetrics.ep3;
    v375[1] = v372.aggMetrics.ep3Num;
    *(Swift::Float *)&v375[2] = v372.aggMetrics.nep6;
    v375[3] = v372.aggMetrics.nep6Num;
    v375[4] = *(void *)&v372.aggMetrics.mae;
    *(Swift::Float *)&v375[5] = v372.aggMetrics.coverage;
    v375[6] = v372.aggMetrics.coverageNum;
    v375[7] = *(void *)&v372.aggMetrics.meanWidth;
    *(Swift::Float *)&v375[8] = v372.aggMetrics.uxWidthTolerable;
    v375[9] = v372.aggMetrics.uxWidthTolerableNum;
    v375[10] = *(void *)&v372.aggMetrics.uxOverallMean;
    *(Swift::Float *)&v375[11] = v372.aggMetrics.uxOverallGood;
    v375[12] = v372.aggMetrics.uxOverallGoodNum;
    *(Swift::Float *)&v375[13] = v372.aggMetrics.uxOverallOk;
    v375[14] = v372.aggMetrics.uxOverallOkNum;
    *(Swift::Float *)&v375[15] = v372.aggMetrics.uxOverallTolerable;
    v375[16] = v372.aggMetrics.uxOverallTolerableNum;
    v375[17] = v372.aggMetrics.nSlices;
    uint64_t v166 = v372.perSliceMetrics._rawValue;
    uint64_t v167 = v375;
    uint64_t v168 = 144;
    memcpy(__dst, v375, sizeof(__dst));
    v375[18] = v372.perSliceMetrics._rawValue;
    memcpy(v376, v375, sizeof(v376));
    uint64_t v169 = AggMetrics.toDictionary(prefix:)();
    uint64_t v94 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    uint64_t v95 = v172;
    uint64_t v170 = v94;
    Dictionary.merge(_:uniquingKeysWith:)();
    uint64_t v171 = v95;
    if (v95)
    {
      __break(1u);
LABEL_62:
      __break(1u);
      uint64_t v116 = v133;
      swift_bridgeObjectRelease();
      outlined destroy of [A]();
      outlined destroy of [A]();
      uint64_t v178 = v116;
      return v307;
    }
    Builtin::Word v150 = 1;
    uint64_t v96 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    uint64_t v162 = &v370;
    uint64_t v370 = v96;
    uint64_t v371 = v97;
    float v160 = "";
    Builtin::Word v158 = 0;
    int v159 = 1;
    Swift::String v98 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    uint64_t v149 = v98._object;
    DefaultStringInterpolation.appendLiteral(_:)(v98);
    swift_bridgeObjectRelease();
    v369[2] = v270;
    v369[3] = v269;
    uint64_t v154 = MEMORY[0x263F8D310];
    uint64_t v155 = MEMORY[0x263F8D378];
    uint64_t v156 = MEMORY[0x263F8D370];
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    Swift::String v99 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("_", v150, v159 & 1);
    uint64_t v151 = v99._object;
    DefaultStringInterpolation.appendLiteral(_:)(v99);
    swift_bridgeObjectRelease();
    uint64_t v100 = NightingalePFLRunner.keyMetricsLossBeforeTraining.unsafeMutableAddressor();
    uint64_t v152 = *(void *)v100;
    uint64_t v153 = *((void *)v100 + 1);
    swift_bridgeObjectRetain();
    uint64_t v157 = v369;
    v369[0] = v152;
    v369[1] = v153;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of DefaultStringInterpolation();
    Swift::String v101 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v160, v158, v159 & 1);
    uint64_t v161 = v101._object;
    DefaultStringInterpolation.appendLiteral(_:)(v101);
    swift_bridgeObjectRelease();
    uint64_t v164 = v370;
    uint64_t v163 = v371;
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    uint64_t v102 = String.init(stringInterpolation:)();
    uint64_t v368 = MEMORY[0x263F8D5C8];
    float v367 = v389;
    uint64_t v365 = v102;
    uint64_t v366 = v103;
    Dictionary.subscript.setter();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v399);
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  outlined destroy of [A]();
  uint64_t v135 = NightingaleDPFLRunner.performanceMeasure.getter();
  int v136 = 1;
  uint64_t v134 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Training", 8uLL, 1)._object;
  dispatch thunk of PerformanceMeasure.finish(_:)();
  uint64_t v139 = v105;
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v424 = v139;
  uint64_t v138 = NightingaleDPFLRunner.performanceMeasure.getter();
  uint64_t v137 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PluginE2E", 9uLL, v136 & 1)._object;
  dispatch thunk of PerformanceMeasure.finish(_:)();
  uint64_t v143 = v106;
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v423 = v143;
  NightingalePFLRunner.sendLocation(_:hyperParams:)(8, v311);
  uint64_t v144 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any));
  uint64_t v145 = _allocateUninitializedArray<A>(_:)();
  int v142 = v107;
  uint64_t v108 = NightingalePFLRunner.keyMetricsTrainingDurationS.unsafeMutableAddressor();
  outlined init with copy of String(v108, v142);
  uint64_t v109 = v139;
  uint64_t v110 = v142;
  uint64_t v141 = MEMORY[0x263F8D538];
  v142[5] = MEMORY[0x263F8D538];
  v110[2] = v109;
  int v140 = v110 + 6;
  uint64_t v111 = NightingalePFLRunner.keyMetricsE2EDurationS.unsafeMutableAddressor();
  outlined init with copy of String(v111, v140);
  uint64_t v112 = v142;
  uint64_t v113 = v143;
  v142[11] = v141;
  v112[8] = v113;
  _finalizeUninitializedArray<A>(_:)();
  uint64_t v146 = Dictionary.init(dictionaryLiteral:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  uint64_t v114 = v292;
  Dictionary.merge(_:uniquingKeysWith:)();
  uint64_t v147 = v114;
  if (v114) {
    goto LABEL_62;
  }
  uint64_t v131 = v436;
  swift_bridgeObjectRetain();
  static HIDPFLUtils.checkMetrics(_:)();
  uint64_t v132 = 0;
  uint64_t v133 = 0;
  swift_bridgeObjectRelease();
  uint64_t v128 = 0;
  type metadata accessor for PFLTaskResult();
  uint64_t v129 = &v436;
  uint64_t v127 = v436;
  swift_bridgeObjectRetain();
  uint64_t v130 = PFLTaskResult.__allocating_init(json:vector:)();
  outlined destroy of [A]();
  outlined destroy of [A]();
  return v130;
}

uint64_t NightingalePFLRunner.runPlatformTesting(modelPath:hyperParams:metrics:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v118 = a1;
  uint64_t v117 = a2;
  uint64_t v108 = a3;
  uint64_t v115 = a4;
  uint64_t v5 = v4;
  uint64_t v116 = v5;
  uint64_t v110 = "Fatal error";
  uint64_t v111 = "Range requires lowerBound <= upperBound";
  uint64_t v112 = "Swift/Range.swift";
  uint64_t v113 = closure #1 in NightingalePFLRunner.runPlatformTesting(modelPath:hyperParams:metrics:);
  uint64_t v114 = closure #36 in NightingaleDPFLRunner.run(task:useCase:context:);
  uint64_t v155 = 0;
  uint64_t v156 = 0;
  uint64_t v154 = 0;
  uint64_t v153 = 0;
  uint64_t v152 = 0;
  uint64_t v138 = 0;
  uint64_t v135 = 0;
  uint64_t v134 = 0;
  uint64_t v133 = 0;
  uint64_t v119 = type metadata accessor for EspressoFunction();
  uint64_t v120 = *(void *)(v119 - 8);
  uint64_t v121 = v119 - 8;
  uint64_t v123 = *(void *)(v120 + 64);
  unint64_t v122 = (v123 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v7 = MEMORY[0x270FA5388](v118);
  uint64_t v124 = (char *)&v50 - v122;
  unint64_t v125 = v122;
  uint64_t v8 = MEMORY[0x270FA5388](v7);
  uint64_t v126 = (char *)&v50 - v125;
  uint64_t v155 = v8;
  uint64_t v156 = v9;
  uint64_t v154 = a3;
  uint64_t v153 = v10;
  uint64_t v152 = v11;
  uint64_t v127 = HyperParams.modelRepresentation.getter();
  uint64_t v130 = v12;
  uint64_t v13 = HyperParams.modelRepresentationEIR.unsafeMutableAddressor();
  uint64_t v128 = *(void *)v13;
  uint64_t v129 = *((void *)v13 + 1);
  swift_bridgeObjectRetain();
  int v131 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v131)
  {
    uint64_t v107 = type metadata accessor for EspressoEIRTrainer();
    NightingaleDPFLRunner.performanceMeasure.getter();
    uint64_t v14 = EspressoEIRTrainer.__allocating_init(_:)();
    v132[3] = v107;
    v132[4] = MEMORY[0x263F61118];
    v132[0] = v14;
    outlined init with take of HealthDataQuery(v132, __dst);
  }
  else
  {
    uint64_t v106 = type metadata accessor for EspressoMILTrainer();
    NightingaleDPFLRunner.performanceMeasure.getter();
    uint64_t v15 = EspressoMILTrainer.__allocating_init(_:)();
    v150[3] = v106;
    v150[4] = MEMORY[0x263F61120];
    v150[0] = v15;
    outlined init with take of HealthDataQuery(v150, __dst);
  }
  uint64_t v92 = v147;
  outlined init with copy of HealthDataQuery((uint64_t)__dst, (uint64_t)v147);
  uint64_t v101 = v148;
  uint64_t v102 = v149;
  Swift::String v98 = __swift_project_boxed_opaque_existential_1(v92, v148);
  static EspressoFunction.training.getter();
  uint64_t v97 = MEMORY[0x263F8D310];
  uint64_t v94 = _allocateUninitializedArray<A>(_:)();
  float v93 = v16;
  uint64_t v17 = HyperParams.inputName.getter();
  uint64_t v18 = v93;
  *float v93 = v17;
  v18[1] = v19;
  uint64_t v20 = HyperParams.labelName.getter();
  uint64_t v21 = v93;
  uint64_t v22 = v20;
  uint64_t v23 = v94;
  v93[2] = v22;
  v21[3] = v24;
  _finalizeUninitializedArray<A>(_:)();
  uint64_t v99 = v23;
  uint64_t v96 = _allocateUninitializedArray<A>(_:)();
  uint64_t v95 = v25;
  uint64_t v26 = HyperParams.lossName.getter();
  uint64_t v27 = v95;
  uint64_t v28 = v26;
  uint64_t v29 = v96;
  *uint64_t v95 = v28;
  v27[1] = v30;
  _finalizeUninitializedArray<A>(_:)();
  uint64_t v100 = v29;
  uint64_t v31 = HyperParams.weightNames.getter();
  uint64_t v32 = v109;
  uint64_t v103 = v31;
  dispatch thunk of EspressoTrainer.load(path:functions:inputs:outputs:weights:)();
  uint64_t v104 = v32;
  uint64_t v105 = v32;
  if (v32)
  {
    uint64_t v52 = v105;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v120 + 8))(v126, v119);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v147);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)__dst);
    uint64_t v53 = v52;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v83 = *(void (**)(char *, uint64_t))(v120 + 8);
    uint64_t v84 = v120 + 8;
    v83(v126, v119);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v147);
    uint64_t v85 = v144;
    outlined init with copy of HealthDataQuery((uint64_t)__dst, (uint64_t)v144);
    uint64_t v88 = v145;
    uint64_t v89 = v146;
    uint64_t v86 = __swift_project_boxed_opaque_existential_1(v85, v145);
    uint64_t v87 = HyperParams.batchSize.getter();
    float v33 = HyperParams.learningRate.getter();
    uint64_t v34 = v104;
    float v142 = v33;
    char v143 = 0;
    dispatch thunk of EspressoTrainer.finalize(batchSize:learningRate:)();
    uint64_t v90 = v34;
    uint64_t v91 = v34;
    if (v34)
    {
      uint64_t v51 = v91;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v144);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)__dst);
      uint64_t v53 = v51;
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v144);
      uint64_t v77 = v139;
      outlined init with copy of HealthDataQuery((uint64_t)__dst, (uint64_t)v139);
      uint64_t v78 = v140;
      uint64_t v79 = v141;
      __swift_project_boxed_opaque_existential_1(v77, v140);
      static EspressoFunction.training.getter();
      uint64_t v35 = v90;
      uint64_t v36 = dispatch thunk of EspressoTrainer.extractWeights(function:)();
      uint64_t v80 = v35;
      uint64_t v81 = v36;
      uint64_t v82 = v35;
      if (v35)
      {
        uint64_t v50 = v82;
        v83(v124, v119);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v139);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)__dst);
        uint64_t v53 = v50;
      }
      else
      {
        uint64_t v75 = v81;
        v83(v124, v119);
        uint64_t v76 = MEMORY[0x25A2C0820](v75);
        uint64_t v138 = v76;
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v139);
        if (v76 < 0)
        {
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
        }
        uint64_t v136 = 0;
        uint64_t v137 = v76;
        uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
        unint64_t v37 = lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
        uint64_t v38 = v80;
        uint64_t v39 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))v113, 0, v71, MEMORY[0x263F8D5C8], MEMORY[0x263F8E628], v37, MEMORY[0x263F8E658], v72);
        uint64_t v73 = v38;
        uint64_t v74 = v39;
        if (v38)
        {
          __break(1u);
        }
        else
        {
          uint64_t v57 = v74;
          uint64_t v135 = v74;
          uint64_t v59 = NightingaleDPFLRunner.performanceMeasure.getter();
          object = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PluginE2E", 9uLL, 1)._object;
          dispatch thunk of PerformanceMeasure.finish(_:)();
          uint64_t v60 = v40;
          swift_bridgeObjectRelease();
          swift_release();
          uint64_t v134 = v60;
          NightingalePFLRunner.sendLocation(_:hyperParams:)(8, v108);
          swift_bridgeObjectRetain();
          uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any));
          uint64_t v65 = _allocateUninitializedArray<A>(_:)();
          uint64_t v63 = v41;
          uint64_t v42 = NightingalePFLRunner.keyMetricsE2EDurationS.unsafeMutableAddressor();
          outlined init with copy of String(v42, v63);
          uint64_t v43 = v60;
          uint64_t v44 = v63;
          uint64_t v62 = MEMORY[0x263F8D538];
          v63[5] = MEMORY[0x263F8D538];
          v44[2] = v43;
          uint64_t v61 = v44 + 6;
          Swift::String v45 = NightingalePFLRunner.keyMetricsLoss.unsafeMutableAddressor();
          outlined init with copy of String(v45, v61);
          uint64_t v46 = v63;
          v63[11] = v62;
          v46[8] = 0x3F847AE147AE147BLL;
          _finalizeUninitializedArray<A>(_:)();
          uint64_t v66 = MEMORY[0x263F8D310];
          uint64_t v67 = MEMORY[0x263F8EE58] + 8;
          uint64_t v68 = MEMORY[0x263F8D320];
          Dictionary.init(dictionaryLiteral:)();
          uint64_t v47 = v73;
          uint64_t v48 = Dictionary.merging(_:uniquingKeysWith:)();
          uint64_t v69 = v47;
          uint64_t v70 = v48;
          if (!v47)
          {
            uint64_t v54 = v70;
            uint64_t v133 = v70;
            type metadata accessor for PFLTaskResult();
            uint64_t v55 = Array.toData()();
            uint64_t v56 = PFLTaskResult.__allocating_init(json:vector:)();
            swift_bridgeObjectRelease();
            __swift_destroy_boxed_opaque_existential_1((uint64_t)__dst);
            return v56;
          }
        }
        __break(1u);
      }
    }
  }
  return v72;
}

uint64_t closure #1 in NightingalePFLRunner.runPlatformTesting(modelPath:hyperParams:metrics:)()
{
  return static BinaryFloatingPoint<>.random(in:)();
}

uint64_t NightingalePFLRunner.sendLocation(_:hyperParams:)(char a1, uint64_t a2)
{
  char v29 = a1;
  uint64_t v28 = a2;
  uint64_t v27 = v2;
  if ((HyperParams.reportLastReachLocation.getter() & 1) == 0)
  {
    uint64_t v12 = 0;
    goto LABEL_5;
  }
  dispatch_queue_t queue = *(dispatch_queue_t *)(v2 + 48);
  uint64_t v3 = queue;
  swift_retain();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v2;
  *(unsigned char *)(v13 + 24) = a1;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = partial apply for closure #1 in NightingalePFLRunner.sendLocation(_:hyperParams:);
  *(void *)(v14 + 24) = v13;
  swift_retain();
  uint64_t v23 = partial apply for thunk for @callee_guaranteed () -> ();
  uint64_t v24 = v14;
  aBlocuint64_t k = MEMORY[0x263EF8330];
  int v19 = 1107296256;
  int v20 = 0;
  uint64_t v21 = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t v22 = &block_descriptor_0;
  blocuint64_t k = _Block_copy(&aBlock);
  swift_release();
  dispatch_sync(queue, block);
  _Block_release(block);
  uint64_t result = swift_isEscapingClosureAtFileLocation();
  if ((result & 1) == 0)
  {
    outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)partial apply for thunk for @callee_guaranteed () -> ());

    uint64_t v12 = partial apply for closure #1 in NightingalePFLRunner.sendLocation(_:hyperParams:);
LABEL_5:
    uint64_t v9 = NightingaleDPFLRunner.taskId.getter();
    uint64_t v11 = v5;
    v26[1] = a1;
    lazy protocol witness table accessor for type ReachLocation and conformance ReachLocation();
    uint64_t v8 = String.init<A>(describing:)();
    uint64_t v10 = v6;
    NightingaleDPFLRunner.useCase.getter(v26);
    char v25 = v26[0];
    uint64_t v7 = default argument 1 of NightingaleDPFLRunner.sendLocation(_:_:)();
    static NightingaleTelemetry.sendNightingaleReachTelemetryLazy(taskId:location:useCase:errorCode:)(v9, v11, v8, v10, &v25, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v12);
    return outlined consume of (@escaping @callee_guaranteed () -> ())?(0);
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in NightingalePFLRunner.sendLocation(_:hyperParams:)(uint64_t a1, char a2)
{
  return NightingalePFLRunner.location.setter(a2);
}

uint64_t thunk for @callee_guaranteed () -> ()(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

Swift::Void __swiftcall NightingalePFLRunner.sendTelemetrics(flycatcherResults:)(NightingaleTraining::FlycatcherTelemetrics *flycatcherResults)
{
  memcpy(__dst, flycatcherResults, sizeof(__dst));
  uint64_t v5 = flycatcherResults;
  uint64_t v4 = v1;
  memcpy(v3, __dst, sizeof(v3));
  static NightingaleTelemetry.sendNightingaleShadowEvaluationTelemetryLazy(flycatcherResults:)(v3);
}

uint64_t NightingalePFLRunner.deinit()
{
  swift_release();
  outlined destroy of DefaultStringInterpolation();

  __swift_destroy_boxed_opaque_existential_1(v0 + 64);
  return v2;
}

uint64_t NightingalePFLRunner.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void protocol witness for PFLTaskRunner.performCustomConsent() in conformance NightingalePFLRunner()
{
}

uint64_t protocol witness for PFLTaskRunner.isDataAvailable() in conformance NightingalePFLRunner()
{
  Swift::Bool v0 = PFLTaskRunner.isDataAvailable()();
  uint64_t v1 = *(uint64_t (**)(BOOL))(v4 + 8);
  BOOL v2 = v0;
  return v1(v2);
}

uint64_t protocol witness for PFLTaskRunner.run(task:useCase:context:) in conformance NightingalePFLRunner(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = v4;
  *(void *)(v4 + 16) = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v7 + 24) = v5;
  *uint64_t v5 = *(void *)(v7 + 16);
  v5[1] = protocol witness for PFLTaskRunner.run(task:useCase:context:) in conformance NightingaleDPFLRunner;
  return NightingalePFLRunner.run(task:useCase:context:)(a1, a2, a3, a4);
}

unint64_t lazy protocol witness table accessor for type ReachLocation and conformance ReachLocation()
{
  uint64_t v2 = lazy protocol witness table cache variable for type ReachLocation and conformance ReachLocation;
  if (!lazy protocol witness table cache variable for type ReachLocation and conformance ReachLocation)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type ReachLocation and conformance ReachLocation);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type ReachLocation and conformance ReachLocation;
  if (!lazy protocol witness table cache variable for type ReachLocation and conformance ReachLocation)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type ReachLocation and conformance ReachLocation);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type ReachLocation and conformance ReachLocation;
  if (!lazy protocol witness table cache variable for type ReachLocation and conformance ReachLocation)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type ReachLocation and conformance ReachLocation);
    return WitnessTable;
  }
  return v2;
}

unint64_t type metadata accessor for OS_dispatch_queue()
{
  uint64_t v2 = lazy cache variable for type metadata for OS_dispatch_queue;
  if (!lazy cache variable for type metadata for OS_dispatch_queue)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type NightingalePFLModelType and conformance NightingalePFLModelType()
{
  uint64_t v2 = lazy protocol witness table cache variable for type NightingalePFLModelType and conformance NightingalePFLModelType;
  if (!lazy protocol witness table cache variable for type NightingalePFLModelType and conformance NightingalePFLModelType)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type NightingalePFLModelType and conformance NightingalePFLModelType);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type NightingalePFLModelType and conformance NightingalePFLModelType;
  if (!lazy protocol witness table cache variable for type NightingalePFLModelType and conformance NightingalePFLModelType)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type NightingalePFLModelType and conformance NightingalePFLModelType);
    return WitnessTable;
  }
  return v2;
}

uint64_t sub_257CD680C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NightingalePFLRunner.run(task:useCase:context:)(uint64_t a1)
{
  uint64_t v5 = v2;
  *(void *)(v2 + 16) = v2;
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  int v8 = *(_DWORD *)(v1 + 32);
  int v9 = *(_DWORD *)(v1 + 36);
  int v10 = *(_DWORD *)(v1 + 40);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v3;
  *uint64_t v3 = *(void *)(v5 + 16);
  v3[1] = partial apply for thunk for @callee_guaranteed @async () -> (@unowned Int, @unowned Int, @owned [Pregnancy], @unowned UInt32, @error @owned Error);
  return closure #1 in NightingalePFLRunner.run(task:useCase:context:)(a1, v6, v7, v8, v9, v10);
}

uint64_t sub_257CD6944()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in NightingalePFLRunner.run(task:useCase:context:)()
{
  return implicit closure #1 in NightingalePFLRunner.run(task:useCase:context:)(v0);
}

uint64_t specialized static Array._allocateUninitialized(_:)(uint64_t result)
{
  uint64_t v4 = result;
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    if (result > 0)
    {
      type metadata accessor for OS_dispatch_queue.Attributes();
      uint64_t v1 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v1 + 16) = v4;
      uint64_t v3 = v1;
    }
    else
    {
      uint64_t v2 = MEMORY[0x263F8EE78];
      swift_retain();
      uint64_t v3 = v2;
    }
    type metadata accessor for OS_dispatch_queue.Attributes();
    return v3;
  }
  return result;
}

void *implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)(void (*a1)(void))
{
  a1();
  uint64_t v3 = (void *)_swift_stdlib_bridgeErrorToNSError();
  id v1 = v3;
  swift_unknownObjectRelease();
  return v3;
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_257CD6ADC()
{
  return swift_deallocObject();
}

uint64_t sub_257CD6B08()
{
  return swift_deallocObject();
}

uint64_t closure #1 in OSLogArguments.append<A>(_:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v17 = a1;
  uint64_t v21 = a6;
  v13[1] = a7;
  uint64_t v14 = partial apply for closure #1 in serialize<A>(_:at:);
  uint64_t v25 = a6;
  uint64_t v18 = *(void *)(a6 - 8);
  uint64_t v19 = a6 - 8;
  v13[0] = (*(void *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v7 = MEMORY[0x270FA5388](a1);
  uint64_t v20 = (uint64_t)v13 - v13[0];
  v8(v7);
  uint64_t v16 = dispatch thunk of static FixedWidthInteger.bitWidth.getter() >> 3;
  uint64_t v23 = *v17;
  uint64_t v24 = v23 + v16;
  _ss27_withUnprotectedUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v20, v14, (uint64_t)v22, v21, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v15);
  uint64_t v9 = v18;
  uint64_t v10 = v20;
  uint64_t v11 = v21;
  *v17 += v16;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
}

uint64_t closure #1 in serialize<A>(_:at:)()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t _ss27_withUnprotectedUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v17 = a2;
  uint64_t v12 = a5;
  uint64_t v13 = a8;
  uint64_t v23 = a4;
  uint64_t v22 = a5;
  uint64_t v21 = a6;
  uint64_t v14 = *(void *)(a5 - 8);
  uint64_t v15 = a5 - 8;
  unint64_t v16 = (*(void *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v9 = MEMORY[0x270FA5388]();
  uint64_t v18 = (char *)&v12 - v16;
  uint64_t v20 = v9 + *(void *)(*(void *)(v10 - 8) + 64);
  uint64_t result = v17();
  uint64_t v19 = v8;
  if (v8) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v14 + 32))(v13, v18, v12);
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned Int)@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

uint64_t sub_257CD6E30()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int)@<X0>(uint64_t *a1@<X8>)
{
  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

uint64_t sub_257CD6E7C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in OSLogArguments.append<A>(_:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v10 = *(void *)(v3 + 24);
  unint64_t v4 = lazy protocol witness table accessor for type Int and conformance Int();
  uint64_t v5 = MEMORY[0x263F8D6C8];
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v9, v10, v5, v4);
}

unint64_t lazy protocol witness table accessor for type ArraySlice<UInt32> and conformance ArraySlice<A>()
{
  uint64_t v2 = lazy protocol witness table cache variable for type ArraySlice<UInt32> and conformance ArraySlice<A>;
  if (!lazy protocol witness table cache variable for type ArraySlice<UInt32> and conformance ArraySlice<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ArraySlice<UInt32>);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type ArraySlice<UInt32> and conformance ArraySlice<A>);
    return WitnessTable;
  }
  return v2;
}

uint64_t sub_257CD7038()
{
  return swift_deallocObject();
}

__C::HKQueryOptions partial apply for implicit closure #3 in NightingalePFLRunner.run(task:useCase:context:)()
{
  return HKQueryOptions.init(rawValue:)(*(void *)(v0 + 16));
}

uint64_t sub_257CD706C()
{
  return swift_deallocObject();
}

uint64_t sub_257CD7098()
{
  return swift_deallocObject();
}

void *partial apply for implicit closure #5 in NightingalePFLRunner.run(task:useCase:context:)()
{
  return implicit closure #5 in NightingalePFLRunner.run(task:useCase:context:)(*(void **)(v0 + 16));
}

uint64_t sub_257CD70E0()
{
  return swift_deallocObject();
}

uint64_t sub_257CD710C()
{
  return swift_deallocObject();
}

uint64_t sub_257CD7138()
{
  return swift_deallocObject();
}

uint64_t sub_257CD7178()
{
  return swift_deallocObject();
}

uint64_t sub_257CD71B8()
{
  return swift_deallocObject();
}

uint64_t sub_257CD71E4()
{
  return swift_deallocObject();
}

uint64_t sub_257CD7210()
{
  return swift_deallocObject();
}

uint64_t sub_257CD7250()
{
  return swift_deallocObject();
}

uint64_t sub_257CD7290()
{
  return swift_deallocObject();
}

uint64_t sub_257CD72BC()
{
  return swift_deallocObject();
}

uint64_t sub_257CD72E8()
{
  return swift_deallocObject();
}

void *partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)()
{
  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)(*(void (**)(void))(v0 + 16));
}

uint64_t sub_257CD7334()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)()
{
  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)(*(uint64_t (**)(void))(v0 + 16));
}

void closure #1 in OSLogArguments.append(_:)(uint64_t *a1, void **a2, uint64_t a3, uint64_t (*a4)(void))
{
  id v7 = (id)a4();
  uint64_t v8 = *a1;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v8 + 8;
  unint64_t v4 = *a2;
  if (*a2)
  {
    *unint64_t v4 = v7;
    *a2 = v4 + 1;
  }
  else
  {
  }
}

uint64_t sub_257CD74C4()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in OSLogArguments.append(_:)(uint64_t *a1, void **a2, uint64_t a3)
{
  closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

void *outlined init with take of FlycatcherTelemetrics?(const void *a1, void *__dst)
{
  return __dst;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined retain of FlycatcherTelemetrics?()
{
}

uint64_t _s19NightingaleTraining21FlycatcherTelemetricsVSgWOg(uint64_t a1)
{
  int v2 = -1;
  if (!HIDWORD(*(void *)(a1 + 8))) {
    int v2 = *(void *)(a1 + 8);
  }
  return (v2 + 1);
}

uint64_t sub_257CD7790()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in NightingalePFLRunner.run(task:useCase:context:)(uint64_t a1)
{
  uint64_t v5 = v2;
  *(void *)(v2 + 16) = v2;
  uint64_t v6 = *(void *)(v1 + 16);
  int v7 = *(_DWORD *)(v1 + 24);
  int v8 = *(_DWORD *)(v1 + 28);
  int v9 = *(_DWORD *)(v1 + 32);
  int v10 = *(_DWORD *)(v1 + 36);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v3;
  *uint64_t v3 = *(void *)(v5 + 16);
  v3[1] = partial apply for thunk for @callee_guaranteed @async () -> (@unowned Int, @unowned Int, @owned [Pregnancy], @unowned UInt32, @error @owned Error);
  return closure #2 in NightingalePFLRunner.run(task:useCase:context:)(a1, v6, v7, v8, v9, v10);
}

unint64_t lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>()
{
  uint64_t v2 = lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>;
  if (!lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<Int>);
    lazy protocol witness table accessor for type Int and conformance Int();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
    return WitnessTable;
  }
  return v2;
}

uint64_t outlined consume of (@escaping @callee_guaranteed () -> ())?(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_257CD7A1C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NightingalePFLRunner.sendLocation(_:hyperParams:)()
{
  return closure #1 in NightingalePFLRunner.sendLocation(_:hyperParams:)(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t sub_257CD7A68()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @callee_guaranteed () -> ()()
{
  return thunk for @callee_guaranteed () -> ()(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  swift_retain();
  uint64_t result = a1;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v5;
  return result;
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t getEnumTagSinglePayload for ReachLocation(unsigned __int8 *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 <= 0xF6) {
      goto LABEL_15;
    }
    unsigned int v7 = ((a2 + 9) >> 8) + 1;
    int v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000) {
        int v2 = 4;
      }
      else {
        int v2 = 2;
      }
      int v8 = v2;
    }
    if (v8 == 1) {
      int v6 = a1[1];
    }
    else {
      int v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    }
    if (v6)
    {
      int v5 = (*a1 | ((v6 - 1) << 8)) + 246;
    }
    else
    {
LABEL_15:
      int v3 = *a1 - 10;
      if (v3 < 0) {
        int v3 = -1;
      }
      int v5 = v3;
    }
  }
  else
  {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for ReachLocation(unsigned char *result, unsigned int a2, unsigned int a3)
{
  int v7 = 0;
  if (a3 > 0xF6)
  {
    unsigned int v5 = ((a3 + 9) >> 8) + 1;
    int v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000) {
        int v3 = 4;
      }
      else {
        int v3 = 2;
      }
      int v6 = v3;
    }
    int v7 = v6;
  }
  if (a2 > 0xF6)
  {
    unsigned int v4 = ((a2 - 247) >> 8) + 1;
    *uint64_t result = a2 + 9;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2) {
      *uint64_t result = a2 + 9;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ReachLocation()
{
  return &type metadata for ReachLocation;
}

uint64_t type metadata accessor for NightingalePFLRunner()
{
  return self;
}

uint64_t method lookup function for NightingalePFLRunner()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NightingalePFLRunner.performCustomConsent()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of NightingalePFLRunner.shouldContinueAfterFailure(task:useCase:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))() & 1;
}

uint64_t dispatch thunk of NightingalePFLRunner.run(task:useCase:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = v5;
  *(void *)(v5 + 16) = v5;
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v4 + 256)
                                                                   + **(int **)(*(void *)v4 + 256));
  int v6 = (void *)swift_task_alloc();
  *(void *)(v8 + 24) = v6;
  *int v6 = *(void *)(v8 + 16);
  v6[1] = dispatch thunk of NightingaleDPFLRunner.run(task:useCase:context:);
  return v12(a1, a2, a3, a4);
}

uint64_t dispatch thunk of NightingalePFLRunner.sendTelemetrics(flycatcherResults:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 304))();
}

unint64_t base witness table accessor for Equatable in ReachLocation()
{
  return lazy protocol witness table accessor for type ReachLocation and conformance ReachLocation();
}

uint64_t partial apply for closure #1 in serialize<A>(_:at:)()
{
  return closure #1 in serialize<A>(_:at:)();
}

unint64_t lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes()
{
  uint64_t v2 = lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes;
  if (!lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes)
  {
    type metadata accessor for OS_dispatch_queue.Attributes();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A];
  if (!lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type AutoreleasingUnsafeMutablePointer<NSError?> and conformance AutoreleasingUnsafeMutablePointer<A>()
{
  uint64_t v2 = lazy protocol witness table cache variable for type AutoreleasingUnsafeMutablePointer<NSError?> and conformance AutoreleasingUnsafeMutablePointer<A>;
  if (!lazy protocol witness table cache variable for type AutoreleasingUnsafeMutablePointer<NSError?> and conformance AutoreleasingUnsafeMutablePointer<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for AutoreleasingUnsafeMutablePointer<NSError?>);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type AutoreleasingUnsafeMutablePointer<NSError?> and conformance AutoreleasingUnsafeMutablePointer<A>);
    return WitnessTable;
  }
  return v2;
}

NgtMenstrualAlgorithmsWristTemperature __swiftcall NgtMenstrualAlgorithmsWristTemperature.__allocating_init(temperature:forWatchIdentifier:)(Swift::Double temperature, Swift::String forWatchIdentifier)
{
  id v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  int v3 = (objc_class *)@nonobjc NgtMenstrualAlgorithmsWristTemperature.init(temperature:forWatchIdentifier:)(temperature);
  result._temperatureCelsius = v5;
  result._watchIdentifier = v4;
  result.super.Class isa = v3;
  return result;
}

uint64_t ShadowEvaluation.__allocating_init(config:urCycleLength:urPeriodLength:)(void *a1, double a2, double a3)
{
  return ShadowEvaluation.init(config:urCycleLength:urPeriodLength:)(a1, a2, a3);
}

NightingaleTraining::AgeEnum __swiftcall getAgeEnum(value:valueForNA:)(Swift::Float value, Swift::Float_optional *valueForNA)
{
  uint64_t v20 = valueForNA;
  int v8 = (int)valueForNA;
  char v9 = BYTE4(valueForNA);
  Swift::Float v19 = value;
  int v17 = (int)valueForNA;
  char v18 = BYTE4(valueForNA) & 1;
  if (Float.isFinite.getter())
  {
    int v15 = v8;
    char v16 = v9 & 1;
    if (v9)
    {
      char v5 = 0;
    }
    else
    {
      int v11 = v8;
      char v12 = v9 & 1;
      float v13 = value;
      char v14 = 0;
      outlined init with copy of Float?((uint64_t)&v11, (uint64_t)&v10);
      BOOL v4 = (v14 & 1) == 0 && v10 == v13;
      char v5 = v4;
    }
    char v6 = v5;
  }
  else
  {
    char v6 = 1;
  }
  if (v6) {
    return 0;
  }
  if (value < 21.0) {
    return 1;
  }
  if (value < 26.0) {
    return 2;
  }
  if (value < 31.0) {
    return 3;
  }
  if (value < 36.0) {
    return 4;
  }
  if (value < 41.0) {
    return 5;
  }
  if (value >= 46.0) {
    return 7;
  }
  return 6;
}

NightingaleTraining::BMIEnum __swiftcall getBMIEnum(value:valueForNA:)(Swift::Float value, Swift::Float_optional *valueForNA)
{
  uint64_t v20 = valueForNA;
  int v8 = (int)valueForNA;
  char v9 = BYTE4(valueForNA);
  Swift::Float v19 = value;
  int v17 = (int)valueForNA;
  char v18 = BYTE4(valueForNA) & 1;
  if (Float.isFinite.getter())
  {
    int v15 = v8;
    char v16 = v9 & 1;
    if (v9)
    {
      char v5 = 0;
    }
    else
    {
      int v11 = v8;
      char v12 = v9 & 1;
      float v13 = value;
      char v14 = 0;
      outlined init with copy of Float?((uint64_t)&v11, (uint64_t)&v10);
      BOOL v4 = (v14 & 1) == 0 && v10 == v13;
      char v5 = v4;
    }
    char v6 = v5;
  }
  else
  {
    char v6 = 1;
  }
  if (v6) {
    return 0;
  }
  if (value < 18.5) {
    return 1;
  }
  if (value < 25.0) {
    return 2;
  }
  if (value < 30.0) {
    return 3;
  }
  if (value >= 35.0) {
    return 5;
  }
  return 4;
}

uint64_t BMIEnum.rawValue.getter(char a1)
{
  switch(a1)
  {
    case 1:
      uint64_t v2 = 0;
      break;
    case 2:
      uint64_t v2 = 1;
      break;
    case 3:
      uint64_t v2 = 2;
      break;
    case 4:
      uint64_t v2 = 3;
      break;
    case 5:
      uint64_t v2 = 4;
      break;
    default:
      uint64_t v2 = -1;
      break;
  }
  return v2;
}

NightingaleTraining::CycleStdEnum __swiftcall getCycleStdEnum(value:valueForNA:)(Swift::Float value, Swift::Float_optional *valueForNA)
{
  uint64_t v20 = valueForNA;
  int v8 = (int)valueForNA;
  char v9 = BYTE4(valueForNA);
  Swift::Float v19 = value;
  int v17 = (int)valueForNA;
  char v18 = BYTE4(valueForNA) & 1;
  if (Float.isFinite.getter())
  {
    int v15 = v8;
    char v16 = v9 & 1;
    if (v9)
    {
      char v5 = 0;
    }
    else
    {
      int v11 = v8;
      char v12 = v9 & 1;
      float v13 = value;
      char v14 = 0;
      outlined init with copy of Float?((uint64_t)&v11, (uint64_t)&v10);
      BOOL v4 = (v14 & 1) == 0 && v10 == v13;
      char v5 = v4;
    }
    char v6 = v5;
  }
  else
  {
    char v6 = 1;
  }
  if (v6) {
    return 0;
  }
  if (value < 0.5) {
    return 1;
  }
  if (value < 1.0) {
    return 2;
  }
  if (value < 1.5) {
    return 3;
  }
  if (value < 2.0) {
    return 4;
  }
  if (value < 2.5) {
    return 5;
  }
  if (value < 3.0) {
    return 6;
  }
  if (value < 3.5) {
    return 7;
  }
  if (value < 4.0) {
    return 8;
  }
  if (value < 4.5) {
    return 9;
  }
  if (value < 5.0) {
    return 10;
  }
  if (value < 5.5) {
    return 11;
  }
  if (value < 6.0) {
    return 12;
  }
  if (value < 8.0) {
    return 13;
  }
  if (value < 10.0) {
    return 14;
  }
  if (value < 15.0) {
    return 15;
  }
  if (value >= 20.0) {
    return 17;
  }
  return 16;
}

uint64_t CycleStdEnum.rawValue.getter(char a1)
{
  switch(a1)
  {
    case 1:
      uint64_t v2 = 0;
      break;
    case 2:
      uint64_t v2 = 1;
      break;
    case 3:
      uint64_t v2 = 2;
      break;
    case 4:
      uint64_t v2 = 3;
      break;
    case 5:
      uint64_t v2 = 4;
      break;
    case 6:
      uint64_t v2 = 5;
      break;
    case 7:
      uint64_t v2 = 6;
      break;
    case 8:
      uint64_t v2 = 7;
      break;
    case 9:
      uint64_t v2 = 8;
      break;
    case 10:
      uint64_t v2 = 9;
      break;
    case 11:
      uint64_t v2 = 10;
      break;
    case 12:
      uint64_t v2 = 11;
      break;
    case 13:
      uint64_t v2 = 12;
      break;
    case 14:
      uint64_t v2 = 13;
      break;
    case 15:
      uint64_t v2 = 14;
      break;
    case 16:
      uint64_t v2 = 15;
      break;
    case 17:
      uint64_t v2 = 16;
      break;
    default:
      uint64_t v2 = -1;
      break;
  }
  return v2;
}

uint64_t AgeEnum.rawValue.getter(char a1)
{
  switch(a1)
  {
    case 1:
      uint64_t v2 = 0;
      break;
    case 2:
      uint64_t v2 = 1;
      break;
    case 3:
      uint64_t v2 = 2;
      break;
    case 4:
      uint64_t v2 = 3;
      break;
    case 5:
      uint64_t v2 = 4;
      break;
    case 6:
      uint64_t v2 = 5;
      break;
    case 7:
      uint64_t v2 = 6;
      break;
    default:
      uint64_t v2 = -1;
      break;
  }
  return v2;
}

void __swiftcall FlycatcherTelemetrics.init()(NightingaleTraining::FlycatcherTelemetrics *__return_ptr retstr)
{
  bzero(v2, 0x118uLL);
  *(Swift::String *)uint64_t v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  memset(&v2[16], 255, 48);
  v2[64] = 0;
  memset(&v2[72], 255, 208);
  memcpy(__dst, v2, sizeof(__dst));
  memcpy(retstr, __dst, sizeof(NightingaleTraining::FlycatcherTelemetrics));
}

uint64_t default argument 1 of FlycatcherTelemetrics.init(recipeId:cycleIdx:ensembleLogicId:selectedModelId:abserr:widthOneSide:widthTwoSide:coverage:baselineMean:baselineStd:numHistCycles:cycleLen:daysToModel0DRS:daysToModel1DRS:daysToModel2DRS:model0Width:model1Width:model2Width:daysSinceLastPeriod:daysSinceLastContraceptionEnd:daysSinceLastPregnancyEnd:daysSinceLastLactationEnd:sliceDayHRCount:sliceDayHRMean:sliceDayHRStd:sliceNightHRCount:sliceNightHRMean:sliceNightHRStd:numOutliers:numCycles:fullCycleLengthMean:fullCycleLengthStd:bmi:age:)()
{
  return -1;
}

void __swiftcall FlycatcherTelemetrics.init(recipeId:cycleIdx:ensembleLogicId:selectedModelId:abserr:widthOneSide:widthTwoSide:coverage:baselineMean:baselineStd:numHistCycles:cycleLen:daysToModel0DRS:daysToModel1DRS:daysToModel2DRS:model0Width:model1Width:model2Width:daysSinceLastPeriod:daysSinceLastContraceptionEnd:daysSinceLastPregnancyEnd:daysSinceLastLactationEnd:sliceDayHRCount:sliceDayHRMean:sliceDayHRStd:sliceNightHRCount:sliceNightHRMean:sliceNightHRStd:numOutliers:numCycles:fullCycleLengthMean:fullCycleLengthStd:bmi:age:)(NightingaleTraining::FlycatcherTelemetrics *__return_ptr retstr, Swift::String recipeId, Swift::Int cycleIdx, Swift::Int ensembleLogicId, Swift::Int selectedModelId, Swift::Int abserr, Swift::Int widthOneSide, Swift::Int widthTwoSide, Swift::Bool coverage, Swift::Int baselineMean, Swift::Int baselineStd, Swift::Int numHistCycles, Swift::Int cycleLen, Swift::Int daysToModel0DRS, Swift::Int daysToModel1DRS, Swift::Int daysToModel2DRS, Swift::Int model0Width, Swift::Int model1Width, Swift::Int model2Width, Swift::Int daysSinceLastPeriod,Swift::Int daysSinceLastContraceptionEnd,Swift::Int daysSinceLastPregnancyEnd,Swift::Int daysSinceLastLactationEnd,Swift::Int sliceDayHRCount,Swift::Int sliceDayHRMean,Swift::Int sliceDayHRStd,Swift::Int sliceNightHRCount,Swift::Int sliceNightHRMean,Swift::Int sliceNightHRStd,Swift::Int numOutliers,Swift::Int numCycles,Swift::Int fullCycleLengthMean,Swift::Int fullCycleLengthStd,Swift::Int bmi,Swift::Int age)
{
  retstr->recipeId = recipeId;
  retstr->cycleIdx = cycleIdx;
  retstr->ensembleLogicId = ensembleLogicId;
  retstr->selectedModelId = selectedModelId;
  retstr->abserr = abserr;
  retstr->widthOneSide = widthOneSide;
  retstr->widthTwoSide = widthTwoSide;
  retstr->coverage = coverage;
  retstr->baselineMean = baselineMean;
  retstr->baselineStd = baselineStd;
  retstr->numHistCycles = numHistCycles;
  retstr->cycleLen = cycleLen;
  retstr->daysToModel0DRS = daysToModel0DRS;
  retstr->daysToModel1DRS = daysToModel1DRS;
  retstr->daysToModel2DRS = daysToModel2DRS;
  retstr->model0Width = model0Width;
  retstr->model1Width = model1Width;
  retstr->model2Width = model2Width;
  retstr->daysSinceLastPeriod = daysSinceLastPeriod;
  retstr->daysSinceLastContraceptionEnd = daysSinceLastContraceptionEnd;
  retstr->daysSinceLastPregnancyEnd = daysSinceLastPregnancyEnd;
  retstr->daysSinceLastLactationEnd = daysSinceLastLactationEnd;
  retstr->sliceDayHRCount = sliceDayHRCount;
  retstr->sliceDayHRMean = sliceDayHRMean;
  retstr->sliceDayHRStd = sliceDayHRStd;
  retstr->sliceNightHRCount = sliceNightHRCount;
  retstr->sliceNightHRMean = sliceNightHRMean;
  retstr->sliceNightHRStd = sliceNightHRStd;
  retstr->numOutliers = numOutliers;
  retstr->numCycles = numCycles;
  retstr->fullCycleLengthMean = fullCycleLengthMean;
  retstr->fullCycleLengthStd = fullCycleLengthStd;
  retstr->bmuint64_t i = bmi;
  retstr->age = age;
}

NightingaleTraining::AgeEnum_optional __swiftcall AgeEnum.init(rawValue:)(Swift::Int rawValue)
{
  switch(rawValue)
  {
    case -1:
      return 0;
    case 0:
      return (NightingaleTraining::AgeEnum_optional)1;
    case 1:
      return (NightingaleTraining::AgeEnum_optional)2;
    case 2:
      return (NightingaleTraining::AgeEnum_optional)3;
    case 3:
      return (NightingaleTraining::AgeEnum_optional)4;
    case 4:
      return (NightingaleTraining::AgeEnum_optional)5;
    case 5:
      return (NightingaleTraining::AgeEnum_optional)6;
    case 6:
      return (NightingaleTraining::AgeEnum_optional)7;
  }
  return (NightingaleTraining::AgeEnum_optional)8;
}

NightingaleTraining::BMIEnum_optional __swiftcall BMIEnum.init(rawValue:)(Swift::Int rawValue)
{
  switch(rawValue)
  {
    case -1:
      return 0;
    case 0:
      return (NightingaleTraining::BMIEnum_optional)1;
    case 1:
      return (NightingaleTraining::BMIEnum_optional)2;
    case 2:
      return (NightingaleTraining::BMIEnum_optional)3;
    case 3:
      return (NightingaleTraining::BMIEnum_optional)4;
    case 4:
      return (NightingaleTraining::BMIEnum_optional)5;
  }
  return (NightingaleTraining::BMIEnum_optional)6;
}

NightingaleTraining::NumberOfDaysForFactorsEnum_optional __swiftcall NumberOfDaysForFactorsEnum.init(rawValue:)(Swift::Int rawValue)
{
  switch(rawValue)
  {
    case -1:
      return 0;
    case 0:
      return (NightingaleTraining::NumberOfDaysForFactorsEnum_optional)1;
    case 1:
      return (NightingaleTraining::NumberOfDaysForFactorsEnum_optional)2;
    case 2:
      return (NightingaleTraining::NumberOfDaysForFactorsEnum_optional)3;
    case 3:
      return (NightingaleTraining::NumberOfDaysForFactorsEnum_optional)4;
    case 4:
      return (NightingaleTraining::NumberOfDaysForFactorsEnum_optional)5;
    case 5:
      return (NightingaleTraining::NumberOfDaysForFactorsEnum_optional)6;
    case 6:
      return (NightingaleTraining::NumberOfDaysForFactorsEnum_optional)7;
    case 7:
      return (NightingaleTraining::NumberOfDaysForFactorsEnum_optional)8;
  }
  return (NightingaleTraining::NumberOfDaysForFactorsEnum_optional)9;
}

uint64_t NumberOfDaysForFactorsEnum.rawValue.getter(char a1)
{
  switch(a1)
  {
    case 1:
      uint64_t v2 = 0;
      break;
    case 2:
      uint64_t v2 = 1;
      break;
    case 3:
      uint64_t v2 = 2;
      break;
    case 4:
      uint64_t v2 = 3;
      break;
    case 5:
      uint64_t v2 = 4;
      break;
    case 6:
      uint64_t v2 = 5;
      break;
    case 7:
      uint64_t v2 = 6;
      break;
    case 8:
      uint64_t v2 = 7;
      break;
    default:
      uint64_t v2 = -1;
      break;
  }
  return v2;
}

NightingaleTraining::CycleStdEnum_optional __swiftcall CycleStdEnum.init(rawValue:)(Swift::Int rawValue)
{
  switch(rawValue)
  {
    case -1:
      return 0;
    case 0:
      return (NightingaleTraining::CycleStdEnum_optional)1;
    case 1:
      return (NightingaleTraining::CycleStdEnum_optional)2;
    case 2:
      return (NightingaleTraining::CycleStdEnum_optional)3;
    case 3:
      return (NightingaleTraining::CycleStdEnum_optional)4;
    case 4:
      return (NightingaleTraining::CycleStdEnum_optional)5;
    case 5:
      return (NightingaleTraining::CycleStdEnum_optional)6;
    case 6:
      return (NightingaleTraining::CycleStdEnum_optional)7;
    case 7:
      return (NightingaleTraining::CycleStdEnum_optional)8;
    case 8:
      return (NightingaleTraining::CycleStdEnum_optional)9;
    case 9:
      return (NightingaleTraining::CycleStdEnum_optional)10;
    case 10:
      return (NightingaleTraining::CycleStdEnum_optional)11;
    case 11:
      return (NightingaleTraining::CycleStdEnum_optional)12;
    case 12:
      return (NightingaleTraining::CycleStdEnum_optional)13;
    case 13:
      return (NightingaleTraining::CycleStdEnum_optional)14;
    case 14:
      return (NightingaleTraining::CycleStdEnum_optional)15;
    case 15:
      return (NightingaleTraining::CycleStdEnum_optional)16;
    case 16:
      return (NightingaleTraining::CycleStdEnum_optional)17;
  }
  return (NightingaleTraining::CycleStdEnum_optional)18;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AgeEnum()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance AgeEnum()
{
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AgeEnum()
{
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance AgeEnum()
{
  return RawRepresentable<>._rawHashValue(seed:)();
}

NightingaleTraining::AgeEnum_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AgeEnum@<W0>(Swift::Int *a1@<X0>, NightingaleTraining::AgeEnum_optional *a2@<X8>)
{
  result.Swift::Float value = AgeEnum.init(rawValue:)(*a1).value;
  a2->Swift::Float value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AgeEnum@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = AgeEnum.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance BMIEnum()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance BMIEnum()
{
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance BMIEnum()
{
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance BMIEnum()
{
  return RawRepresentable<>._rawHashValue(seed:)();
}

NightingaleTraining::BMIEnum_optional protocol witness for RawRepresentable.init(rawValue:) in conformance BMIEnum@<W0>(Swift::Int *a1@<X0>, NightingaleTraining::BMIEnum_optional *a2@<X8>)
{
  result.Swift::Float value = BMIEnum.init(rawValue:)(*a1).value;
  a2->Swift::Float value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance BMIEnum@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = BMIEnum.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NumberOfDaysForFactorsEnum()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance NumberOfDaysForFactorsEnum()
{
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NumberOfDaysForFactorsEnum()
{
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance NumberOfDaysForFactorsEnum()
{
  return RawRepresentable<>._rawHashValue(seed:)();
}

NightingaleTraining::NumberOfDaysForFactorsEnum_optional protocol witness for RawRepresentable.init(rawValue:) in conformance NumberOfDaysForFactorsEnum@<W0>(Swift::Int *a1@<X0>, NightingaleTraining::NumberOfDaysForFactorsEnum_optional *a2@<X8>)
{
  result.Swift::Float value = NumberOfDaysForFactorsEnum.init(rawValue:)(*a1).value;
  a2->Swift::Float value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance NumberOfDaysForFactorsEnum@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = NumberOfDaysForFactorsEnum.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CycleStdEnum()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CycleStdEnum()
{
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CycleStdEnum()
{
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance CycleStdEnum()
{
  return RawRepresentable<>._rawHashValue(seed:)();
}

NightingaleTraining::CycleStdEnum_optional protocol witness for RawRepresentable.init(rawValue:) in conformance CycleStdEnum@<W0>(Swift::Int *a1@<X0>, NightingaleTraining::CycleStdEnum_optional *a2@<X8>)
{
  result.Swift::Float value = CycleStdEnum.init(rawValue:)(*a1).value;
  a2->Swift::Float value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CycleStdEnum@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CycleStdEnum.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

NightingaleTraining::NumberOfDaysForFactorsEnum __swiftcall getNumberOfDaysForFactors(value:valueForNA:)(Swift::Int value, Swift::Int_optional valueForNA)
{
  Swift::Int v13 = value;
  Swift::Int v11 = valueForNA.value;
  Swift::Bool is_nil = valueForNA.is_nil;
  Swift::Int v7 = valueForNA.value;
  Swift::Bool v8 = valueForNA.is_nil;
  Swift::Int v9 = value;
  char v10 = 0;
  if (!valueForNA.is_nil)
  {
    outlined init with copy of Int?((uint64_t)&v7, (uint64_t)&v6);
    if ((v10 & 1) == 0 && v6 == v9) {
      return 0;
    }
  }
  if (value < 1) {
    return 1;
  }
  if (value < 5) {
    return 2;
  }
  if (value < 10) {
    return 3;
  }
  if (value < 15) {
    return 4;
  }
  if (value < 20) {
    return 5;
  }
  if (value < 25) {
    return 6;
  }
  if (value >= 30) {
    return 8;
  }
  return 7;
}

double ShadowEvaluation.urCycleLength.getter()
{
  swift_beginAccess();
  double v2 = *(double *)(v0 + 24);
  swift_endAccess();
  return v2;
}

uint64_t ShadowEvaluation.urCycleLength.setter(double a1)
{
  swift_beginAccess();
  *(double *)(v1 + 24) = a1;
  return swift_endAccess();
}

uint64_t ShadowEvaluation.init(config:urCycleLength:urPeriodLength:)(void *a1, double a2, double a3)
{
  id v4 = a1;
  *(void *)(v3 + 16) = a1;
  *(double *)(v3 + 24) = a2;
  *(double *)(v3 + 32) = a3;

  return v9;
}

uint64_t outlined init with copy of Float?(uint64_t a1, uint64_t a2)
{
  uint64_t result = a2;
  *(_DWORD *)a2 = *(_DWORD *)a1;
  *(unsigned char *)(a2 + 4) = *(unsigned char *)(a1 + 4);
  return result;
}

unint64_t lazy protocol witness table accessor for type AgeEnum and conformance AgeEnum()
{
  uint64_t v2 = lazy protocol witness table cache variable for type AgeEnum and conformance AgeEnum;
  if (!lazy protocol witness table cache variable for type AgeEnum and conformance AgeEnum)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type AgeEnum and conformance AgeEnum);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type AgeEnum and conformance AgeEnum;
  if (!lazy protocol witness table cache variable for type AgeEnum and conformance AgeEnum)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type AgeEnum and conformance AgeEnum);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type BMIEnum and conformance BMIEnum()
{
  uint64_t v2 = lazy protocol witness table cache variable for type BMIEnum and conformance BMIEnum;
  if (!lazy protocol witness table cache variable for type BMIEnum and conformance BMIEnum)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type BMIEnum and conformance BMIEnum);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type BMIEnum and conformance BMIEnum;
  if (!lazy protocol witness table cache variable for type BMIEnum and conformance BMIEnum)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type BMIEnum and conformance BMIEnum);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type NumberOfDaysForFactorsEnum and conformance NumberOfDaysForFactorsEnum()
{
  uint64_t v2 = lazy protocol witness table cache variable for type NumberOfDaysForFactorsEnum and conformance NumberOfDaysForFactorsEnum;
  if (!lazy protocol witness table cache variable for type NumberOfDaysForFactorsEnum and conformance NumberOfDaysForFactorsEnum)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type NumberOfDaysForFactorsEnum and conformance NumberOfDaysForFactorsEnum);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type NumberOfDaysForFactorsEnum and conformance NumberOfDaysForFactorsEnum;
  if (!lazy protocol witness table cache variable for type NumberOfDaysForFactorsEnum and conformance NumberOfDaysForFactorsEnum)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type NumberOfDaysForFactorsEnum and conformance NumberOfDaysForFactorsEnum);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type CycleStdEnum and conformance CycleStdEnum()
{
  uint64_t v2 = lazy protocol witness table cache variable for type CycleStdEnum and conformance CycleStdEnum;
  if (!lazy protocol witness table cache variable for type CycleStdEnum and conformance CycleStdEnum)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type CycleStdEnum and conformance CycleStdEnum);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type CycleStdEnum and conformance CycleStdEnum;
  if (!lazy protocol witness table cache variable for type CycleStdEnum and conformance CycleStdEnum)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type CycleStdEnum and conformance CycleStdEnum);
    return WitnessTable;
  }
  return v2;
}

uint64_t outlined init with copy of Int?(uint64_t a1, uint64_t a2)
{
  uint64_t result = a2;
  *(void *)a2 = *(void *)a1;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(a1 + 8);
  return result;
}

Swift::tuple_dayInputs_OpaquePointer_chronologicalOrderedCFs_OpaquePointer __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ShadowEvaluation.toAlgorithmInputs(flow:otr:spotting:cycleFactors:swt:daySHR10s:nightSHR10s:daySHRCounts:nightSHRCounts:)(Swift::OpaquePointer flow, Swift::OpaquePointer otr, Swift::OpaquePointer spotting, Swift::OpaquePointer cycleFactors, Swift::OpaquePointer swt, Swift::OpaquePointer daySHR10s, Swift::OpaquePointer nightSHR10s, Swift::OpaquePointer daySHRCounts, Swift::OpaquePointer nightSHRCounts)
{
  uint64_t rawValue = flow._rawValue;
  uint64_t v68 = spotting._rawValue;
  float v58 = cycleFactors._rawValue;
  uint64_t v71 = swt._rawValue;
  uint64_t v74 = daySHR10s._rawValue;
  uint64_t v76 = nightSHR10s._rawValue;
  uint64_t v80 = daySHRCounts._rawValue;
  uint64_t v83 = nightSHRCounts._rawValue;
  uint64_t v60 = (void (*)(char *, char *))partial apply for closure #1 in ShadowEvaluation.toAlgorithmInputs(flow:otr:spotting:cycleFactors:swt:daySHR10s:nightSHR10s:daySHRCounts:nightSHRCounts:);
  uint64_t v61 = closure #2 in CalendarPeriodPrediction.toAlgorithmInputs(flow:otr:spotting:cycleFactors:swt:);
  uint64_t v62 = closure #3 in CalendarPeriodPrediction.toAlgorithmInputs(flow:otr:spotting:cycleFactors:swt:);
  uint64_t v63 = (void (*)(char *, char *))partial apply for thunk for @callee_guaranteed (@unowned UInt8, @guaranteed [(start: UInt32, end: UInt32)]) -> (@owned [(type: UInt8, day: UInt32, end: Bool)]);
  uint64_t v64 = closure #2 in HealthDataStoreQuery.queryDescriptors(_:_:_:);
  uint64_t v65 = closure #5 in CalendarPeriodPrediction.toAlgorithmInputs(flow:otr:spotting:cycleFactors:swt:);
  uint64_t v82 = &v104;
  uint64_t v104 = 0;
  uint64_t v95 = 0;
  *(_DWORD *)&v91[8] = 0;
  uint64_t v114 = flow._rawValue;
  uint64_t v113 = otr._rawValue;
  uint64_t v112 = spotting._rawValue;
  uint64_t v111 = cycleFactors._rawValue;
  uint64_t v110 = swt._rawValue;
  uint64_t v109 = daySHR10s._rawValue;
  uint64_t v108 = nightSHR10s._rawValue;
  uint64_t v107 = daySHRCounts._rawValue;
  uint64_t v106 = nightSHRCounts._rawValue;
  uint64_t v105 = v9;
  uint64_t v88 = MEMORY[0x263F8E8F8];
  uint64_t v89 = MEMORY[0x263F8E908];
  uint64_t v67 = &v103;
  uint64_t v103 = swift_bridgeObjectRetain();
  uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : UInt8].Keys);
  lazy protocol witness table accessor for type [UInt32 : UInt8].Keys and conformance [A : B].Keys();
  uint64_t v104 = Set.init<A>(_:)();
  uint64_t v70 = &v102;
  uint64_t v102 = swift_bridgeObjectRetain();
  uint64_t v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<UInt32>);
  uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : Bool].Keys);
  lazy protocol witness table accessor for type [UInt32 : Bool].Keys and conformance [A : B].Keys();
  Set.formUnion<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Float, String));
  uint64_t v73 = &v101;
  uint64_t v101 = swift_bridgeObjectRetain();
  uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : (Float, String)].Keys);
  lazy protocol witness table accessor for type [UInt32 : (Float, String)].Keys and conformance [A : B].Keys();
  Set.formUnion<A>(_:)();
  uint64_t v77 = MEMORY[0x263F8D5C8];
  uint64_t v75 = &v100;
  uint64_t v100 = swift_bridgeObjectRetain();
  uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : Float].Keys);
  unint64_t v79 = lazy protocol witness table accessor for type [UInt32 : Float].Keys and conformance [A : B].Keys();
  Set.formUnion<A>(_:)();
  v99[1] = swift_bridgeObjectRetain();
  Set.formUnion<A>(_:)();
  uint64_t v84 = MEMORY[0x263F8D6C8];
  uint64_t v81 = v99;
  v99[0] = swift_bridgeObjectRetain();
  uint64_t v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : Int].Keys);
  unint64_t v87 = lazy protocol witness table accessor for type [UInt32 : Int].Keys and conformance [A : B].Keys();
  Set.formUnion<A>(_:)();
  uint64_t v98 = swift_bridgeObjectRetain();
  Set.formUnion<A>(_:)();
  uint64_t v90 = v104;
  swift_bridgeObjectRetain();
  *(void *)uint64_t v91 = Set.isEmpty.getter();
  swift_bridgeObjectRelease();
  if (v91[0])
  {
    lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
    uint64_t v29 = swift_allocError();
    *uint64_t v26 = 30;
    swift_willThrow();
    outlined destroy of [A]();
    char v18 = v54;
    int v17 = v54;
    goto LABEL_14;
  }
  uint64_t v50 = v104;
  swift_bridgeObjectRetain();
  uint64_t v97 = v50;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v51 = &v29;
  MEMORY[0x270FA5388](&v29);
  uint64_t v52 = v28;
  v28[2] = v10;
  v28[3] = v11;
  v28[4] = v12;
  v28[5] = v13;
  v28[6] = v76;
  v28[7] = v83;
  v28[8] = v14;
  unint64_t v53 = type metadata accessor for NgtMenstrualAlgorithmsDayInput();
  unint64_t v15 = lazy protocol witness table accessor for type Set<UInt32> and conformance Set<A>();
  uint64_t v16 = v59;
  int v17 = (void *)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(v60, (uint64_t)v52, v85, v53, MEMORY[0x263F8E628], v15, MEMORY[0x263F8E658], (uint64_t)v54);
  uint64_t v55 = v16;
  uint64_t v56 = v17;
  if (v16)
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v46 = v56;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of [A]();
  uint64_t v96 = v46;
  uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [NgtMenstrualAlgorithmsDayInput]);
  lazy protocol witness table accessor for type [NgtMenstrualAlgorithmsDayInput] and conformance [A]();
  uint64_t v19 = v55;
  int v17 = (void *)Sequence.sorted(by:)();
  uint64_t v48 = v19;
  uint64_t v49 = v17;
  if (v19)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v39 = v49;
  outlined destroy of [A]();
  uint64_t v95 = v39;
  uint64_t v94 = v58;
  uint64_t v40 = v28;
  MEMORY[0x270FA5388](v28);
  uint64_t v20 = &v28[-4];
  uint64_t v41 = &v28[-4];
  v20[2] = v62;
  v20[3] = 0;
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8 : [(start: UInt32, end: UInt32)]]);
  uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(type: UInt8, day: UInt32, end: Bool)]);
  unint64_t v21 = lazy protocol witness table accessor for type [UInt8 : [(start: UInt32, end: UInt32)]] and conformance [A : B]();
  uint64_t v22 = v48;
  int v17 = (void *)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(v63, (uint64_t)v41, v42, v43, MEMORY[0x263F8E628], v21, MEMORY[0x263F8E658], (uint64_t)v54);
  uint64_t v44 = v22;
  Swift::String v45 = v17;
  if (v22)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  float v93 = v45;
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[(type: UInt8, day: UInt32, end: Bool)]]);
  unint64_t v35 = lazy protocol witness table accessor for type [[(type: UInt8, day: UInt32, end: Bool)]] and conformance [A]();
  unint64_t v23 = lazy protocol witness table accessor for type [(type: UInt8, day: UInt32, end: Bool)] and conformance [A]();
  uint64_t v24 = v44;
  unint64_t v36 = v23;
  int v17 = (void *)Sequence.flatMap<A>(_:)();
  uint64_t v37 = v24;
  uint64_t v38 = v17;
  if (v24)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v31 = v38;
  outlined destroy of [A]();
  uint64_t v25 = v37;
  uint64_t v92 = v31;
  int v17 = (void *)Sequence.sorted(by:)();
  uint64_t v32 = v25;
  float v33 = v17;
  if (v25)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v30 = v33;
  outlined destroy of [A]();
  *(void *)&v91[4] = v30;
  outlined destroy of [A]();
  char v18 = v30;
  int v17 = v39;
LABEL_14:
  result.chronologicalOrderedCFs._uint64_t rawValue = v18;
  result.dayInputs._uint64_t rawValue = v17;
  return result;
}

void closure #1 in ShadowEvaluation.toAlgorithmInputs(flow:otr:spotting:cycleFactors:swt:daySHR10s:nightSHR10s:daySHRCounts:nightSHRCounts:)(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, HKHealthStore *a9@<X8>)
{
  unsigned int v64 = 0;
  uint64_t v63 = 0;
  uint64_t v62 = 0;
  uint64_t v61 = 0;
  uint64_t v60 = 0;
  uint64_t v59 = 0;
  uint64_t v58 = 0;
  uint64_t v57 = 0;
  Class v56 = 0;
  int v42 = 0;
  uint64_t v38 = 0;
  int v35 = 0;
  unsigned int v64 = *a1;
  unsigned int v29 = v64;
  uint64_t v63 = a2;
  uint64_t v62 = a3;
  uint64_t v61 = a4;
  uint64_t v60 = a5;
  uint64_t v59 = a6;
  uint64_t v58 = a7;
  uint64_t v57 = a8;
  type metadata accessor for NgtMenstrualAlgorithmsDayInput();
  Class isa = HKHealthStore.__allocating_init()().super.isa;
  Class v56 = isa;
  [(objc_class *)isa setJulianDay:v64];
  unsigned int v54 = v64;
  MEMORY[0x25A2C04B0](v55, &v54, a2, MEMORY[0x263F8E8F8], MEMORY[0x263F8E778], MEMORY[0x263F8E908]);
  if ((v55[1] & 1) == 0)
  {
    __int16 v9 = NgtMenstrualAlgorithmsOvulationTestResult.init(rawValue:)(v55[0]);
    if ((v9 & 0x100) == 0) {
      [(objc_class *)isa setFlow:v9];
    }
  }
  unsigned int v51 = v29;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Float, String));
  MEMORY[0x25A2C04B0](&v52, &v51, a3, MEMORY[0x263F8E8F8], v10, MEMORY[0x263F8E908]);
  Swift::Float v19 = *(float *)&v52;
  Swift::String v20 = v53;
  if (v53._object)
  {
    type metadata accessor for NgtMenstrualAlgorithmsWristTemperature();
    Swift::Double v17 = Double.init(_:)(v19);
    swift_bridgeObjectRetain();
    NgtMenstrualAlgorithmsWristTemperature v65 = NgtMenstrualAlgorithmsWristTemperature.__allocating_init(temperature:forWatchIdentifier:)(v17, v20);
    Class v18 = v65.super.isa;
    [(objc_class *)isa setWristTemperature:v65._temperatureCelsius];

    swift_bridgeObjectRelease();
  }
  unsigned int v49 = v29;
  MEMORY[0x25A2C04B0](&v50, &v49, a4, MEMORY[0x263F8E8F8], MEMORY[0x263F8D5C8], MEMORY[0x263F8E908]);
  if ((v50 & 0x100000000) == 0)
  {
    int v35 = v50;
    unsigned int v32 = v29;
    MEMORY[0x25A2C04B0](&v33, &v32, a5, MEMORY[0x263F8E8F8], MEMORY[0x263F8D6C8], MEMORY[0x263F8E908]);
    if ((v34 & 1) == 0)
    {
      type metadata accessor for NgtMenstrualAlgorithmsHeartRateStatistics();
      Class lowerPercentile = Float._bridgeToObjectiveC()().super.super.isa;
      lazy protocol witness table accessor for type Int32 and conformance Int32();
      lazy protocol witness table accessor for type Int32 and conformance Int32();
      lazy protocol witness table accessor for type Int and conformance Int();
      SignedInteger<>.init<A>(_:)();
      id v16 = (id)NgtMenstrualAlgorithmsHeartRateStatistics.__allocating_init(lowerPercentile:forSampleCount:)((NSNumber)lowerPercentile, forSampleCount);
      -[objc_class setSedentaryHeartRateStatistics:](isa, sel_setSedentaryHeartRateStatistics_);
    }
  }
  unsigned int v47 = v29;
  MEMORY[0x25A2C04B0](&v48, &v47, a6, MEMORY[0x263F8E8F8], MEMORY[0x263F8D5C8], MEMORY[0x263F8E908]);
  if ((v48 & 0x100000000) == 0)
  {
    int v42 = v48;
    unsigned int v39 = v29;
    MEMORY[0x25A2C04B0](&v40, &v39, a7, MEMORY[0x263F8E8F8], MEMORY[0x263F8D6C8], MEMORY[0x263F8E908]);
    uint64_t v14 = v40;
    if ((v41 & 1) == 0)
    {
      uint64_t v38 = v40;
      type metadata accessor for NgtMenstrualAlgorithmsHeartRateStatistics();
      Class v12 = Float._bridgeToObjectiveC()().super.super.isa;
      uint64_t v36 = v14;
      lazy protocol witness table accessor for type Int32 and conformance Int32();
      lazy protocol witness table accessor for type Int32 and conformance Int32();
      lazy protocol witness table accessor for type Int and conformance Int();
      SignedInteger<>.init<A>(_:)();
      id v13 = (id)NgtMenstrualAlgorithmsHeartRateStatistics.__allocating_init(lowerPercentile:forSampleCount:)((NSNumber)v12, v37);
      -[objc_class setSleepHeartRateStatistics:](isa, sel_setSleepHeartRateStatistics_);
    }
  }
  unsigned int v44 = v29;
  MEMORY[0x25A2C04B0](&v45, &v44, a8, MEMORY[0x263F8E8F8], MEMORY[0x263F8D4F8], MEMORY[0x263F8E908]);
  char v43 = v45;
  if (v45 == 2) {
    char v46 = 0;
  }
  else {
    char v46 = v43 & 1;
  }
  [(objc_class *)isa setSpotting:v46 & 1];
  uint64_t v11 = isa;
  a9->super.Class isa = isa;
}

void partial apply for closure #1 in ShadowEvaluation.toAlgorithmInputs(flow:otr:spotting:cycleFactors:swt:daySHR10s:nightSHR10s:daySHRCounts:nightSHRCounts:)(unsigned int *a1@<X0>, HKHealthStore *a2@<X8>)
{
  closure #1 in ShadowEvaluation.toAlgorithmInputs(flow:otr:spotting:cycleFactors:swt:daySHR10s:nightSHR10s:daySHRCounts:nightSHRCounts:)(a1, v2[2], v2[3], v2[4], v2[5], v2[6], v2[7], v2[8], a2);
}

NgtMenstrualAlgorithmsHeartRateStatistics __swiftcall NgtMenstrualAlgorithmsHeartRateStatistics.__allocating_init(lowerPercentile:forSampleCount:)(NSNumber lowerPercentile, Swift::Int32 forSampleCount)
{
  id v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  uint64_t v3 = (objc_class *)@nonobjc NgtMenstrualAlgorithmsHeartRateStatistics.init(lowerPercentile:forSampleCount:)(lowerPercentile.super.super.isa);
  result._sampleCount = v6;
  result.super.Class isa = v3;
  HIDWORD(result._lowerPercentile) = v5;
  LODWORD(result._lowerPercentile) = v4;
  return result;
}

void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ShadowEvaluation.analyze(mlConfig:earliestDay:latestDay:t0:t1:dayInputs:chronologicalOrderedCFs:)(NightingaleTraining::FlycatcherTelemetrics_optional *__return_ptr retstr, NgtMenstrualAlgorithmsMLModelConfig *mlConfig, Swift::UInt32 earliestDay, Swift::UInt32 latestDay, Swift::UInt32 t0, Swift::UInt32 t1, Swift::OpaquePointer dayInputs, Swift::OpaquePointer chronologicalOrderedCFs)
{
  uint64_t v10 = (NgtMenstrualAlgorithmsMLModelConfig *)MEMORY[0x270FA5388](mlConfig);
  uint64_t v309 = &v400;
  int v331 = v352;
  uint64_t v310 = v11;
  uint64_t v329 = v10;
  unsigned int v320 = v12;
  Swift::UInt32 v327 = v13;
  int v317 = v14;
  int v318 = v15;
  uint64_t v334 = v16;
  uint64_t v319 = v17;
  uint64_t v311 = v8;
  uint64_t v312 = v9;
  uint64_t v313 = "Fatal error";
  uint64_t v314 = "Range requires lowerBound <= upperBound";
  uint64_t v315 = "Swift/Range.swift";
  uint64_t v332 = 0;
  uint64_t v316 = partial apply for closure #1 in osLogInternal(_:log:type:);
  uint64_t v404 = *MEMORY[0x263EF8340];
  uint64_t v390 = 0;
  int v389 = 0;
  int v388 = 0;
  int v387 = 0;
  int v386 = 0;
  uint64_t v385 = 0;
  uint64_t v384 = 0;
  uint64_t v383 = 0;
  memset(&v382[16], 0, 56);
  v379[2] = 0;
  bzero(&v395, 0x118uLL);
  v379[1] = 0;
  char v349 = 0;
  int v348 = 0;
  char v347 = 0;
  char v346 = 0;
  uint64_t v345 = 0;
  uint64_t v321 = type metadata accessor for Logger();
  uint64_t v322 = *(void *)(v321 - 8);
  uint64_t v323 = v321 - 8;
  unint64_t v324 = (*(void *)(v322 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v325 = (char *)&v142 - v324;
  uint64_t v390 = MEMORY[0x270FA5388](v329);
  int v389 = v18;
  int v388 = v19;
  int v387 = v20;
  int v386 = v21;
  uint64_t v385 = v22;
  uint64_t v384 = v23;
  uint64_t v383 = v8;
  uint64_t v326 = &v403;
  swift_beginAccess();
  uint64_t v328 = *(NgtMenstrualAlgorithmsDayStreamProcessorConfig **)(v8 + 16);
  uint64_t v24 = v328;
  swift_endAccess();
  ShadowEvaluation.getDayStreamProcessorConfigFromConfig(cached:lastJulianDay:)(v25, v328, v327);
  unint64_t v330 = v26;

  *((void *)v331 + 68) = v330;
  type metadata accessor for NgtMenstrualAlgorithmsDayStreamProcessor();
  uint64_t v27 = v330;
  uint64_t v28 = v329;
  NgtMenstrualAlgorithmsDayStreamProcessor.__allocating_init(config:mlConfig:)(v29, v330, v329);
  id v333 = v30;
  *((void *)v331 + 67) = v30;
  unint64_t v335 = type metadata accessor for NgtMenstrualAlgorithmsDayInput();
  uint64_t v31 = MEMORY[0x25A2C0810](v334);
  uint64_t v336 = v31 - 1;
  if (__OFSUB__(v31, 1))
  {
    __break(1u);
  }
  else
  {
    if (v336 < 0)
    {
      LOBYTE(v139) = 2;
      uint64_t v140 = 754;
      LODWORD(v141) = 0;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    uint64_t v339 = 0;
    uint64_t v340 = v336;
    uint64_t v33 = specialized Collection<>.makeIterator()();
    char v34 = v331;
    uint64_t v35 = v33;
    uint64_t v36 = v312;
    *((void *)v331 + 64) = v35;
    *((void *)v34 + 65) = v37;
    *((void *)v34 + 66) = v38;
    for (uint64_t i = v36; ; uint64_t i = v306)
    {
      uint64_t v306 = i;
      uint64_t v39 = specialized IndexingIterator.next()();
      uint64_t v40 = v309;
      *(void *)(v309 + 12) = v39;
      char v402 = v41 & 1;
      uint64_t v307 = *(void *)((char *)v40 + 12);
      if (v41) {
        break;
      }
      uint64_t v305 = v307;
      uint64_t v302 = v307;
      uint64_t v345 = v307;
      Array.subscript.getter();
      id v303 = v344;
      unsigned int v304 = objc_msgSend(v344, sel_julianDay);

      if (v304 < v320
        || (Array.subscript.getter(),
            id v300 = v342,
            unsigned int v301 = objc_msgSend(v342, sel_julianDay),
            v300,
            v327 < v301))
      {
        Array.subscript.getter();
        id v297 = v343;
        unsigned int v298 = objc_msgSend(v343, sel_julianDay);

        if (v327 < v298) {
          break;
        }
      }
      else
      {
        Array.subscript.getter();
        id v299 = v341;
        objc_msgSend(v333, sel_appendDay_);
      }
    }
    swift_bridgeObjectRetain();
    *((void *)v331 + 61) = v319;
    uint64_t v295 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(type: UInt8, day: UInt32, end: Bool)]);
    lazy protocol witness table accessor for type [(type: UInt8, day: UInt32, end: Bool)] and conformance [A]();
    Collection<>.makeIterator()();
    for (uint64_t j = v306; ; uint64_t j = v292)
    {
      uint64_t v292 = j;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[(type: UInt8, day: UInt32, end: Bool)]>);
      IndexingIterator.next()();
      uint64_t v293 = *(void *)v309;
      int v294 = v401;
      if (v401 == 2) {
        break;
      }
      uint64_t v290 = v293;
      int v291 = v294;
      int v287 = v294;
      unsigned int v288 = HIDWORD(v293);
      unsigned int v289 = v293;
      char v349 = v293;
      int v348 = HIDWORD(v293);
      char v347 = v294 & 1;
      if (v327 < HIDWORD(v293)) {
        break;
      }
      __int16 v337 = NgtMenstrualAlgorithmsOvulationTestResult.init(rawValue:)(v289);
      int v286 = v337;
      if ((v337 & 0x100) == 0)
      {
        int v285 = v286;
        int v284 = v285;
        char v346 = v285;
        if (v287) {
          objc_msgSend(v333, sel_endPhase_onJulianDay_, v284, v288);
        }
        else {
          objc_msgSend(v333, sel_beginPhase_onJulianDay_, v284, v288);
        }
      }
    }
    outlined destroy of [A]();
    uint64_t v42 = v327;
    char v43 = v331;
    id v44 = v333;
    *((void *)v331 + 324) = 0;
    *((void *)v43 + 60) = *((void *)v43 + 324);
    id v283 = objc_msgSend(v44, sel_analyzeWithMostRecentMenstrualFlowJulianDayUpdated_error_, v42, v382);
    id v282 = (id)*((void *)v331 + 60);
    id v45 = v282;
    char v46 = (void *)*((void *)v331 + 324);
    *((void *)v331 + 324) = v282;

    if (v283)
    {
      id v281 = v283;
      id v279 = v283;
      uint64_t v280 = v292;
    }
    else
    {
      uint64_t v145 = 0;
      id v143 = (id)*((void *)v331 + 324);
      id v144 = (id)_convertNSErrorToError(_:)();

      swift_willThrow();
      uint64_t v146 = 0;

      id v279 = v145;
      uint64_t v280 = v146;
    }
    uint64_t v277 = v280;
    uint64_t v278 = v279;
    if (v279)
    {
      uint64_t v276 = v278;
      uint64_t v274 = v278;
      *((void *)v331 + 55) = v278;
      FlycatcherTelemetrics.init()(&v395);
      id v275 = objc_msgSend(v274, sel_telemetry);
      if (v275)
      {
        id v273 = v275;
        unsigned int v47 = v275;
        id v272 = v275;
        *((void *)v331 + 54) = v275;
        id v178 = objc_msgSend(v47, sel_ensembleSelectedModelIdx);
        unint64_t v231 = 0x1F6559000uLL;
        id v179 = [v178 (SEL)0x1F6559B18];

        uint64_t v48 = v331;
        *((void *)v331 + 52) = v179;
        *((void *)v48 + 50) = 0;
        *((void *)v48 + 51) = 11;
        uint64_t v235 = MEMORY[0x263F8D6C8];
        uint64_t v236 = MEMORY[0x263F8D6E0];
        Comparable.clamp(to:)((uint64_t)&v378, MEMORY[0x263F8D6C8], MEMORY[0x263F8D6E0], (uint64_t)v379);
        Swift::Int v252 = *((void *)v331 + 53);
        id v180 = objc_msgSend(v272, sel_baselineMean);
        unint64_t v223 = 0x1F6659000uLL;
        [v180 (SEL)0x1F6659331];
        int v181 = v49;

        uint64_t v50 = v331;
        *((_DWORD *)v331 + 99) = v181;
        uint64_t v183 = (uint64_t)&v377 + 4;
        int v226 = 0;
        *((_DWORD *)v50 + 97) = 0;
        *((_DWORD *)v50 + 98) = 1115815936;
        uint64_t v182 = &v377;
        float v228 = -1.0;
        *((float *)v50 + 96) = -1.0;
        unint64_t v230 = lazy protocol witness table accessor for type Float and conformance Float();
        uint64_t v229 = MEMORY[0x263F8D5C8];
        Swift::Int v258 = BinaryFloatingPoint.clamp(to:nonFiniteValue:)(v183, (uint64_t)v182, MEMORY[0x263F8D5C8], v230);
        id v184 = objc_msgSend(v272, sel_baselineStdUncapped);
        [v184 (SEL)(v223 + 817)];
        Swift::Float v185 = v51;

        LODWORD(v338) = -1082130432;
        int v238 = 1;
        BOOL v210 = 0;
        BYTE4(v338) = 0;
        NightingaleTraining::CycleStdEnum v52 = getCycleStdEnum(value:valueForNA:)(v185, v338);
        Swift::Int v259 = CycleStdEnum.rawValue.getter(v52);
        id v186 = objc_msgSend(v272, sel_numHistoricalCycles);
        id v187 = [v186 (SEL)(v231 + 2840)];

        Swift::String v53 = v331;
        uint64_t v54 = v235;
        uint64_t v55 = v236;
        *((void *)v331 + 46) = v187;
        *((void *)v53 + 44) = 0;
        *((void *)v53 + 45) = 101;
        Comparable.clamp(to:)((uint64_t)&v375, v54, v55, (uint64_t)&v376);
        Swift::Int v260 = *((void *)v331 + 47);
        id v188 = objc_msgSend(v272, sel_daysToModel0Drs);
        id v189 = [v188 (SEL)(v231 + 2840)];

        Class v56 = v331;
        uint64_t v57 = v235;
        uint64_t v58 = v236;
        *((void *)v331 + 42) = v189;
        *((void *)v56 + 40) = 0;
        uint64_t v202 = 65;
        *((void *)v56 + 41) = 65;
        Comparable.clamp(to:)((uint64_t)&v373, v57, v58, (uint64_t)&v374);
        Swift::Int v262 = *((void *)v331 + 43);
        id v190 = objc_msgSend(v272, sel_daysToModel1Drs);
        id v191 = [v190 (SEL)(v231 + 2840)];

        uint64_t v59 = v202;
        uint64_t v60 = v331;
        uint64_t v61 = v235;
        uint64_t v62 = v236;
        *((void *)v331 + 38) = v191;
        *((void *)v60 + 36) = 0;
        *((void *)v60 + 37) = v59;
        Comparable.clamp(to:)((uint64_t)&v371, v61, v62, (uint64_t)&v372);
        Swift::Int v263 = *((void *)v331 + 39);
        id v192 = objc_msgSend(v272, sel_daysToModel2Drs);
        id v193 = [v192 (SEL)(v231 + 2840)];

        uint64_t v63 = v202;
        unsigned int v64 = v331;
        uint64_t v65 = v235;
        uint64_t v66 = v236;
        *((void *)v331 + 34) = v193;
        *((void *)v64 + 32) = 0;
        *((void *)v64 + 33) = v63;
        Comparable.clamp(to:)((uint64_t)&v369, v65, v66, (uint64_t)&v370);
        Swift::Int v264 = *((void *)v331 + 35);
        id v194 = objc_msgSend(v272, sel_model0Width);
        id v195 = [v194 (SEL)(v231 + 2840)];

        uint64_t v67 = v331;
        uint64_t v68 = v235;
        uint64_t v69 = v236;
        *((void *)v331 + 30) = v195;
        *((void *)v67 + 28) = 0;
        uint64_t v234 = 21;
        *((void *)v67 + 29) = 21;
        Comparable.clamp(to:)((uint64_t)&v367, v68, v69, (uint64_t)&v368);
        Swift::Int v256 = *((void *)v331 + 31);
        id v196 = objc_msgSend(v272, sel_model1Width);
        id v197 = [v196 (SEL)(v231 + 2840)];

        uint64_t v70 = v331;
        uint64_t v71 = v234;
        uint64_t v72 = v235;
        uint64_t v73 = v236;
        *((void *)v331 + 26) = v197;
        *((void *)v70 + 24) = 0;
        *((void *)v70 + 25) = v71;
        Comparable.clamp(to:)((uint64_t)&v365, v72, v73, (uint64_t)&v366);
        Swift::Int v74 = *((void *)v331 + 27);
        id v198 = objc_msgSend(v272, sel_model2Width);
        id v199 = [v198 (SEL)(v231 + 2840)];

        uint64_t v75 = v331;
        uint64_t v76 = v234;
        uint64_t v77 = v235;
        uint64_t v78 = v236;
        *((void *)v331 + 22) = v199;
        *((void *)v75 + 20) = 0;
        *((void *)v75 + 21) = v76;
        Comparable.clamp(to:)((uint64_t)&v363, v77, v78, (uint64_t)&v364);
        Swift::Int v79 = *((void *)v331 + 23);
        id v200 = objc_msgSend(v272, sel_daysSinceLastPeriod);
        id v201 = [v200 (SEL)(v231 + 2840)];

        uint64_t v80 = v202;
        uint64_t v81 = v331;
        uint64_t v82 = v235;
        uint64_t v83 = v236;
        *((void *)v331 + 18) = v201;
        *((void *)v81 + 16) = 0;
        *((void *)v81 + 17) = v80;
        Comparable.clamp(to:)((uint64_t)&v361, v82, v83, (uint64_t)&v362);
        Swift::Int v84 = *((void *)v331 + 19);
        id v203 = objc_msgSend(v272, sel_daysSinceLastContraceptionEnd);
        id v204 = [v203 (SEL)(v231 + 2840)];

        v405.Swift::Bool is_nil = v210;
        v405.Swift::Float value = -3;
        Swift::Int v209 = -3;
        NightingaleTraining::NumberOfDaysForFactorsEnum v85 = getNumberOfDaysForFactors(value:valueForNA:)((Swift::Int)v204, v405);
        Swift::Int v86 = NumberOfDaysForFactorsEnum.rawValue.getter(v85);
        id v205 = objc_msgSend(v272, sel_daysSinceLastPregnancyEnd);
        id v206 = [v205 (SEL)(v231 + 2840)];

        v406.Swift::Float value = v209;
        v406.Swift::Bool is_nil = v210;
        NightingaleTraining::NumberOfDaysForFactorsEnum v87 = getNumberOfDaysForFactors(value:valueForNA:)((Swift::Int)v206, v406);
        Swift::Int v88 = NumberOfDaysForFactorsEnum.rawValue.getter(v87);
        id v207 = objc_msgSend(v272, sel_daysSinceLastLactationEnd);
        id v208 = [v207 (SEL)(v231 + 2840)];

        v407.Swift::Float value = v209;
        v407.Swift::Bool is_nil = v210;
        NightingaleTraining::NumberOfDaysForFactorsEnum v89 = getNumberOfDaysForFactors(value:valueForNA:)((Swift::Int)v208, v407);
        Swift::Int v90 = NumberOfDaysForFactorsEnum.rawValue.getter(v89);
        id v211 = objc_msgSend(v272, sel_sliceDayHrCount);
        id v212 = [v211 (SEL)(v231 + 2840)];

        uint64_t v91 = v331;
        uint64_t v92 = v235;
        uint64_t v93 = v236;
        *((void *)v331 + 14) = v212;
        *((void *)v91 + 12) = 0;
        uint64_t v219 = 46;
        *((void *)v91 + 13) = 46;
        Comparable.clamp(to:)((uint64_t)&v359, v92, v93, (uint64_t)&v360);
        Swift::Int v94 = *((void *)v331 + 15);
        id v213 = objc_msgSend(v272, sel_sliceDayHrMean);
        [v213 (SEL)(v223 + 817)];
        int v214 = v95;

        int v96 = v226;
        uint64_t v97 = (float *)v331;
        float v98 = v228;
        uint64_t v99 = v229;
        uint64_t v100 = v230;
        *((_DWORD *)v331 + 23) = v214;
        *((_DWORD *)v97 + 21) = v96;
        int v222 = 1123155968;
        v97[22] = 121.0;
        v97[20] = v98;
        uint64_t v237 = BinaryFloatingPoint.clamp(to:nonFiniteValue:)((uint64_t)&v358 + 4, (uint64_t)&v358, v99, v100);
        id v215 = objc_msgSend(v272, sel_sliceDayHrStd);
        [v215 (SEL)(v223 + 817)];
        int v216 = v101;

        int v102 = v226;
        uint64_t v103 = v331;
        float v104 = v228;
        uint64_t v105 = v229;
        uint64_t v106 = v230;
        *((_DWORD *)v331 + 19) = v216;
        *((_DWORD *)v103 + 17) = v102;
        float v227 = 21.0;
        *((float *)v103 + 18) = 21.0;
        *((float *)v103 + 16) = v104;
        Swift::Int v240 = BinaryFloatingPoint.clamp(to:nonFiniteValue:)((uint64_t)&v357 + 4, (uint64_t)&v357, v105, v106);
        id v217 = objc_msgSend(v272, sel_sliceNightHrCount);
        id v218 = [v217 (SEL)(v231 + 2840)];

        uint64_t v107 = v219;
        uint64_t v108 = v331;
        uint64_t v109 = v235;
        uint64_t v110 = v236;
        *((void *)v331 + 6) = v218;
        *((void *)v108 + 4) = 0;
        *((void *)v108 + 5) = v107;
        Comparable.clamp(to:)((uint64_t)&v355, v109, v110, (uint64_t)&v356);
        Swift::Int v241 = *((void *)v331 + 7);
        id v220 = objc_msgSend(v272, sel_sliceNightHrMean);
        [v220 (SEL)(v223 + 817)];
        int v221 = v111;

        int v112 = v222;
        int v113 = v226;
        uint64_t v114 = (float *)v331;
        float v115 = v228;
        uint64_t v116 = v229;
        uint64_t v117 = v230;
        *((_DWORD *)v331 + 7) = v221;
        *((_DWORD *)v114 + 5) = v113;
        *((_DWORD *)v114 + 6) = v112;
        v114[4] = v115;
        Swift::Int v242 = BinaryFloatingPoint.clamp(to:nonFiniteValue:)((uint64_t)&v354 + 4, (uint64_t)&v354, v116, v117);
        id v224 = objc_msgSend(v272, sel_sliceNightHrStd);
        [v224 (SEL)(v223 + 817)];
        int v225 = v118;

        int v119 = v226;
        float v120 = v227;
        uint64_t v121 = (float *)v331;
        float v122 = v228;
        uint64_t v123 = v229;
        uint64_t v124 = v230;
        *((_DWORD *)v331 + 3) = v225;
        *((_DWORD *)v121 + 1) = v119;
        v121[2] = v120;
        *uint64_t v121 = v122;
        Swift::Int v243 = BinaryFloatingPoint.clamp(to:nonFiniteValue:)((uint64_t)&v353, (uint64_t)v352, v123, v124);
        id v232 = objc_msgSend(v272, sel_numOutliers);
        id v233 = [v232 (SEL)(v231 + 2840)];

        void v350[2] = v233;
        v350[0] = 0;
        v350[1] = v234;
        Comparable.clamp(to:)((uint64_t)v350, v235, v236, (uint64_t)&v351);
        Swift::Int v125 = v237;
        Swift::Int v244 = v351;
        uint64_t v257 = default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)();
        uint64_t v249 = v126;
        Swift::Int v250 = default argument 1 of FlycatcherTelemetrics.init(recipeId:cycleIdx:ensembleLogicId:selectedModelId:abserr:widthOneSide:widthTwoSide:coverage:baselineMean:baselineStd:numHistCycles:cycleLen:daysToModel0DRS:daysToModel1DRS:daysToModel2DRS:model0Width:model1Width:model2Width:daysSinceLastPeriod:daysSinceLastContraceptionEnd:daysSinceLastPregnancyEnd:daysSinceLastLactationEnd:sliceDayHRCount:sliceDayHRMean:sliceDayHRStd:sliceNightHRCount:sliceNightHRMean:sliceNightHRStd:numOutliers:numCycles:fullCycleLengthMean:fullCycleLengthStd:bmi:age:)();
        Swift::Int v251 = default argument 1 of FlycatcherTelemetrics.init(recipeId:cycleIdx:ensembleLogicId:selectedModelId:abserr:widthOneSide:widthTwoSide:coverage:baselineMean:baselineStd:numHistCycles:cycleLen:daysToModel0DRS:daysToModel1DRS:daysToModel2DRS:model0Width:model1Width:model2Width:daysSinceLastPeriod:daysSinceLastContraceptionEnd:daysSinceLastPregnancyEnd:daysSinceLastLactationEnd:sliceDayHRCount:sliceDayHRMean:sliceDayHRStd:sliceNightHRCount:sliceNightHRMean:sliceNightHRStd:numOutliers:numCycles:fullCycleLengthMean:fullCycleLengthStd:bmi:age:)();
        Swift::Int v253 = default argument 1 of FlycatcherTelemetrics.init(recipeId:cycleIdx:ensembleLogicId:selectedModelId:abserr:widthOneSide:widthTwoSide:coverage:baselineMean:baselineStd:numHistCycles:cycleLen:daysToModel0DRS:daysToModel1DRS:daysToModel2DRS:model0Width:model1Width:model2Width:daysSinceLastPeriod:daysSinceLastContraceptionEnd:daysSinceLastPregnancyEnd:daysSinceLastLactationEnd:sliceDayHRCount:sliceDayHRMean:sliceDayHRStd:sliceNightHRCount:sliceNightHRMean:sliceNightHRStd:numOutliers:numCycles:fullCycleLengthMean:fullCycleLengthStd:bmi:age:)();
        Swift::Int v254 = default argument 1 of FlycatcherTelemetrics.init(recipeId:cycleIdx:ensembleLogicId:selectedModelId:abserr:widthOneSide:widthTwoSide:coverage:baselineMean:baselineStd:numHistCycles:cycleLen:daysToModel0DRS:daysToModel1DRS:daysToModel2DRS:model0Width:model1Width:model2Width:daysSinceLastPeriod:daysSinceLastContraceptionEnd:daysSinceLastPregnancyEnd:daysSinceLastLactationEnd:sliceDayHRCount:sliceDayHRMean:sliceDayHRStd:sliceNightHRCount:sliceNightHRMean:sliceNightHRStd:numOutliers:numCycles:fullCycleLengthMean:fullCycleLengthStd:bmi:age:)();
        Swift::Int v255 = default argument 1 of FlycatcherTelemetrics.init(recipeId:cycleIdx:ensembleLogicId:selectedModelId:abserr:widthOneSide:widthTwoSide:coverage:baselineMean:baselineStd:numHistCycles:cycleLen:daysToModel0DRS:daysToModel1DRS:daysToModel2DRS:model0Width:model1Width:model2Width:daysSinceLastPeriod:daysSinceLastContraceptionEnd:daysSinceLastPregnancyEnd:daysSinceLastLactationEnd:sliceDayHRCount:sliceDayHRMean:sliceDayHRStd:sliceNightHRCount:sliceNightHRMean:sliceNightHRStd:numOutliers:numCycles:fullCycleLengthMean:fullCycleLengthStd:bmi:age:)();
        int v239 = default argument 3 of Calendar.date(byAdding:value:to:wrappingComponents:)();
        Swift::Int v261 = default argument 1 of FlycatcherTelemetrics.init(recipeId:cycleIdx:ensembleLogicId:selectedModelId:abserr:widthOneSide:widthTwoSide:coverage:baselineMean:baselineStd:numHistCycles:cycleLen:daysToModel0DRS:daysToModel1DRS:daysToModel2DRS:model0Width:model1Width:model2Width:daysSinceLastPeriod:daysSinceLastContraceptionEnd:daysSinceLastPregnancyEnd:daysSinceLastLactationEnd:sliceDayHRCount:sliceDayHRMean:sliceDayHRStd:sliceNightHRCount:sliceNightHRMean:sliceNightHRStd:numOutliers:numCycles:fullCycleLengthMean:fullCycleLengthStd:bmi:age:)();
        Swift::Int v245 = default argument 1 of FlycatcherTelemetrics.init(recipeId:cycleIdx:ensembleLogicId:selectedModelId:abserr:widthOneSide:widthTwoSide:coverage:baselineMean:baselineStd:numHistCycles:cycleLen:daysToModel0DRS:daysToModel1DRS:daysToModel2DRS:model0Width:model1Width:model2Width:daysSinceLastPeriod:daysSinceLastContraceptionEnd:daysSinceLastPregnancyEnd:daysSinceLastLactationEnd:sliceDayHRCount:sliceDayHRMean:sliceDayHRStd:sliceNightHRCount:sliceNightHRMean:sliceNightHRStd:numOutliers:numCycles:fullCycleLengthMean:fullCycleLengthStd:bmi:age:)();
        Swift::Int v246 = default argument 1 of FlycatcherTelemetrics.init(recipeId:cycleIdx:ensembleLogicId:selectedModelId:abserr:widthOneSide:widthTwoSide:coverage:baselineMean:baselineStd:numHistCycles:cycleLen:daysToModel0DRS:daysToModel1DRS:daysToModel2DRS:model0Width:model1Width:model2Width:daysSinceLastPeriod:daysSinceLastContraceptionEnd:daysSinceLastPregnancyEnd:daysSinceLastLactationEnd:sliceDayHRCount:sliceDayHRMean:sliceDayHRStd:sliceNightHRCount:sliceNightHRMean:sliceNightHRStd:numOutliers:numCycles:fullCycleLengthMean:fullCycleLengthStd:bmi:age:)();
        Swift::Int v247 = default argument 1 of FlycatcherTelemetrics.init(recipeId:cycleIdx:ensembleLogicId:selectedModelId:abserr:widthOneSide:widthTwoSide:coverage:baselineMean:baselineStd:numHistCycles:cycleLen:daysToModel0DRS:daysToModel1DRS:daysToModel2DRS:model0Width:model1Width:model2Width:daysSinceLastPeriod:daysSinceLastContraceptionEnd:daysSinceLastPregnancyEnd:daysSinceLastLactationEnd:sliceDayHRCount:sliceDayHRMean:sliceDayHRStd:sliceNightHRCount:sliceNightHRMean:sliceNightHRStd:numOutliers:numCycles:fullCycleLengthMean:fullCycleLengthStd:bmi:age:)();
        Swift::Int v248 = default argument 1 of FlycatcherTelemetrics.init(recipeId:cycleIdx:ensembleLogicId:selectedModelId:abserr:widthOneSide:widthTwoSide:coverage:baselineMean:baselineStd:numHistCycles:cycleLen:daysToModel0DRS:daysToModel1DRS:daysToModel2DRS:model0Width:model1Width:model2Width:daysSinceLastPeriod:daysSinceLastContraceptionEnd:daysSinceLastPregnancyEnd:daysSinceLastLactationEnd:sliceDayHRCount:sliceDayHRMean:sliceDayHRStd:sliceNightHRCount:sliceNightHRMean:sliceNightHRStd:numOutliers:numCycles:fullCycleLengthMean:fullCycleLengthStd:bmi:age:)();
        uint64_t v127 = default argument 1 of FlycatcherTelemetrics.init(recipeId:cycleIdx:ensembleLogicId:selectedModelId:abserr:widthOneSide:widthTwoSide:coverage:baselineMean:baselineStd:numHistCycles:cycleLen:daysToModel0DRS:daysToModel1DRS:daysToModel2DRS:model0Width:model1Width:model2Width:daysSinceLastPeriod:daysSinceLastContraceptionEnd:daysSinceLastPregnancyEnd:daysSinceLastLactationEnd:sliceDayHRCount:sliceDayHRMean:sliceDayHRStd:sliceNightHRCount:sliceNightHRMean:sliceNightHRStd:numOutliers:numCycles:fullCycleLengthMean:fullCycleLengthStd:bmi:age:)();
        v128._object = v249;
        Swift::Int v265 = v127;
        v128._uint64_t countAndFlagsBits = v257;
        p_Swift::Bool coverage = &coverage;
        uint64_t v267 = &v391;
        FlycatcherTelemetrics.init(recipeId:cycleIdx:ensembleLogicId:selectedModelId:abserr:widthOneSide:widthTwoSide:coverage:baselineMean:baselineStd:numHistCycles:cycleLen:daysToModel0DRS:daysToModel1DRS:daysToModel2DRS:model0Width:model1Width:model2Width:daysSinceLastPeriod:daysSinceLastContraceptionEnd:daysSinceLastPregnancyEnd:daysSinceLastLactationEnd:sliceDayHRCount:sliceDayHRMean:sliceDayHRStd:sliceNightHRCount:sliceNightHRMean:sliceNightHRStd:numOutliers:numCycles:fullCycleLengthMean:fullCycleLengthStd:bmi:age:)(&v391, v128, v250, v251, v252, v253, v254, v255, v239 & v238, v258, v259, v260, v261, v262, v263, v264, v256, v74, v79,
          v84,
          v86,
          v88,
          v90,
          v94,
          v125,
          v240,
          v241,
          v242,
          v243,
          v244,
          v245,
          v246,
          v247,
          v248,
          v265);
        uint64_t v269 = v392;
        uint64_t v270 = 280;
        memcpy(v392, v267, sizeof(v392));
        uint64_t v271 = v393;
        Swift::String_optional v268 = &v395;
        memcpy(v393, &v395, sizeof(v393));
        memcpy(&v395, v392, sizeof(v395));
        outlined destroy of DefaultStringInterpolation();
      }
      id v176 = objc_msgSend(v274, sel_menstruationPredictions);
      unint64_t v173 = type metadata accessor for NgtMenstrualAlgorithmsPrediction();
      uint64_t v174 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v175 = MEMORY[0x25A2C0810](v174, v173);
      swift_bridgeObjectRelease();
      BOOL v177 = v175 == 0;

      if (v177)
      {
        uint64_t v168 = v397;
        _s19NightingaleTraining21FlycatcherTelemetricsVSgWOi0_(v397);
        outlined init with take of FlycatcherTelemetrics?(v168, v310);
      }
      else
      {
        uint64_t v172 = &v395;
        ShadowEvaluation.computePerCycleMetrics(t0:t1:analysis:telemetrics:)(v317, v318, v274, (uint64_t)&v395);
        uint64_t v169 = v394;
        size_t v170 = 280;
        memcpy(v394, v172, sizeof(v394));
        outlined retain of FlycatcherTelemetrics?();
        uint64_t v171 = v396;
        memcpy(v396, v169, v170);
        HKQueryOptions.init(rawValue:)((Swift::UInt)v171);
        outlined init with take of FlycatcherTelemetrics?(v171, v310);
      }
      outlined destroy of DefaultStringInterpolation();
    }
    else
    {
      uint64_t v129 = v325;
      uint64_t v130 = Logging.default.unsafeMutableAddressor();
      (*(void (**)(char *, uint64_t, uint64_t))(v322 + 16))(v129, v130, v321);
      uint64_t v166 = Logger.logObject.getter();
      int v165 = static os_log_type_t.error.getter();
      uint64_t v163 = &v381;
      *((void *)v331 + 58) = 2;
      unint64_t v161 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      unint64_t v162 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v164 = *((_DWORD *)v331 + 119);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
      uint64_t v167 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(v166, (os_log_type_t)v165))
      {
        uint64_t v151 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v149 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v150 = 0;
        uint64_t v152 = createStorage<A>(capacity:type:)(0);
        uint64_t v131 = createStorage<A>(capacity:type:)(v150);
        uint64_t v132 = v152;
        uint64_t v133 = v331;
        uint64_t v153 = v131;
        uint64_t v157 = &v380;
        *((void *)v331 + 57) = v151;
        Builtin::Word v158 = &v399;
        *((void *)v133 + 323) = v132;
        uint64_t v155 = &v398;
        *((void *)v133 + 322) = v131;
        unsigned int v154 = 0;
        serialize(_:at:)(0, &v380);
        serialize(_:at:)(v154, v157);
        *((void *)v331 + 56) = v167;
        uint64_t v156 = &v142;
        MEMORY[0x270FA5388](&v142);
        int v159 = &v138;
        uint64_t v139 = v157;
        uint64_t v140 = (uint64_t)v158;
        uint64_t v141 = v134;
        uint64_t v160 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        uint64_t v135 = v277;
        Sequence.forEach(_:)();
        if (v135)
        {
          __break(1u);
        }
        else
        {
          _os_log_impl(&dword_257C1A000, v166, (os_log_type_t)v165, "Failed to run Shadow Evaluation DayStreamProcessor", v151, v164);
          uint64_t v148 = 0;
          destroyStorage<A>(_:count:)(v152, 0, v149);
          destroyStorage<A>(_:count:)(v153, v148, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x25A2C0D00](v151, MEMORY[0x263F8E778]);
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }

      (*(void (**)(char *, uint64_t))(v322 + 8))(v325, v321);
      lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
      uint64_t v147 = swift_allocError();
      *uint64_t v136 = 2;
      swift_willThrow();
    }
  }
}

void ShadowEvaluation.computePerCycleMetrics(t0:t1:analysis:telemetrics:)(int a1, int a2, void *a3, uint64_t a4)
{
  v80[1] = 0;
  id v74 = 0;
  uint64_t v71 = 0;
  uint64_t v66 = 0;
  uint64_t v63 = 0;
  int v82 = a1;
  int v81 = a2;
  v80[3] = a3;
  void v80[2] = a4;
  int v78 = a2;
  lazy protocol witness table accessor for type Int and conformance Int();
  lazy protocol witness table accessor for type Int and conformance Int();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  SignedInteger<>.init<A>(_:)();
  int v76 = a1;
  SignedInteger<>.init<A>(_:)();
  if (__OFSUB__(v79, v77))
  {
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
    return;
  }
  v75[2] = v79 - v77;
  v75[0] = 0;
  v75[1] = 101;
  Comparable.clamp(to:)((uint64_t)v75, MEMORY[0x263F8D6C8], MEMORY[0x263F8D6E0], (uint64_t)v80);
  *(void *)(a4 + 96) = v80[0];
  id v39 = [a3 (SEL)0x1F9AA0ADCLL];
  unint64_t v40 = type metadata accessor for NgtMenstrualAlgorithmsPrediction();
  static Array._unconditionallyBridgeFromObjectiveC(_:)();
  Array.subscript.getter();
  swift_bridgeObjectRelease();

  id v43 = [a3 (SEL)0x1F9AA0ADCLL];
  uint64_t v41 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v42 = MEMORY[0x25A2C0810](v41, v40);
  swift_bridgeObjectRelease();

  if (v42 > 1)
  {
    id v37 = objc_msgSend(a3, sel_menstruationPredictions);
    static Array._unconditionallyBridgeFromObjectiveC(_:)();
    Array.subscript.getter();
    unsigned __int8 v38 = objc_msgSend(v49, sel_isOngoingMenstruation);

    swift_bridgeObjectRelease();
    if (v38)
    {
      id v36 = objc_msgSend(a3, sel_menstruationPredictions);
      static Array._unconditionallyBridgeFromObjectiveC(_:)();
      Array.subscript.getter();
      id v5 = v74;
      id v74 = v48;

      swift_bridgeObjectRelease();
    }
  }
  int v72 = a1;
  SignedInteger<>.init<A>(_:)();
  id v6 = v74;
  objc_msgSend(v74, sel_startProbabilityMean);
  long double __x = v7;

  double v35 = round(__x);
  if (((*(void *)&v35 >> 52) & 0x7FFLL) == 0x7FF)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  if (v35 <= -9.22337204e18)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  if (v35 >= 9.22337204e18)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  uint64_t v33 = v73 + (uint64_t)v35;
  if (__OFADD__(v73, (uint64_t)v35)) {
    goto LABEL_66;
  }
  uint64_t v71 = v73 + (uint64_t)v35;
  int v69 = a1;
  SignedInteger<>.init<A>(_:)();
  id v9 = v74;
  id v67 = objc_msgSend(v74, sel_lowRange);
  uint64_t v68 = v10;

  uint64_t v11 = _NSRange.lowerBound.getter();
  uint64_t v32 = v70 + v11;
  if (__OFADD__(v70, v11)) {
    goto LABEL_67;
  }
  uint64_t v66 = v70 + v11;
  int v64 = a1;
  SignedInteger<>.init<A>(_:)();
  id v13 = v74;
  objc_msgSend(v74, sel_startProbabilityLowRangeEnd);
  long double v30 = v14;

  double v31 = round(v30);
  if (((*(void *)&v31 >> 52) & 0x7FFLL) == 0x7FF)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  if (v31 <= -9.22337204e18)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  if (v31 >= 9.22337204e18)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  uint64_t v29 = v65 + (uint64_t)v31;
  if (__OFADD__(v65, (uint64_t)v31)) {
    goto LABEL_68;
  }
  uint64_t v63 = v65 + (uint64_t)v31;
  int v61 = a1;
  SignedInteger<>.init<A>(_:)();
  id v16 = v74;
  objc_msgSend(v74, sel_startProbabilityLowRangeStart);
  long double v27 = v17;

  double v28 = round(v27);
  if (((*(void *)&v28 >> 52) & 0x7FFLL) == 0x7FF)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  if (v28 <= -9.22337204e18)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  if (v28 >= 9.22337204e18)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  if (__OFADD__(v62, (uint64_t)v28)) {
    goto LABEL_69;
  }
  if (v32 != v62 + (uint64_t)v28)
  {

    return;
  }
  int v57 = a2;
  SignedInteger<>.init<A>(_:)();
  if (__OFSUB__(v33, v58)) {
    goto LABEL_70;
  }
  v56[3] = v33 - v58;
  uint64_t v25 = MEMORY[0x263F8D6C8];
  uint64_t v26 = MEMORY[0x263F8D6E0];
  abs<A>(_:)();
  v56[2] = v59;
  v56[0] = 0;
  v56[1] = 65;
  Comparable.clamp(to:)((uint64_t)v56, v25, v26, (uint64_t)&v60);
  *(void *)(a4 + 40) = v60;
  if (__OFSUB__(v33, v32)) {
    goto LABEL_71;
  }
  v54[2] = v33 - v32;
  v54[0] = 0;
  v54[1] = 11;
  Comparable.clamp(to:)((uint64_t)v54, MEMORY[0x263F8D6C8], MEMORY[0x263F8D6E0], (uint64_t)&v55);
  *(void *)(a4 + 48) = v55;
  uint64_t v24 = v29 - v32;
  if (__OFSUB__(v29, v32)) {
    goto LABEL_72;
  }
  if (__OFADD__(v24, 1)) {
    goto LABEL_73;
  }
  v52[2] = v24 + 1;
  v52[0] = 0;
  v52[1] = 22;
  Comparable.clamp(to:)((uint64_t)v52, MEMORY[0x263F8D6C8], MEMORY[0x263F8D6E0], (uint64_t)&v53);
  *(void *)(a4 + 56) = v53;
  SignedInteger<>.init<A>(_:)();
  if (v51 < v32)
  {
    BOOL v23 = 0;
  }
  else
  {
    SignedInteger<>.init<A>(_:)();
    BOOL v23 = v29 >= v50;
  }
  *(unsigned char *)(a4 + 64) = v23;
}

void __swiftcall ShadowEvaluation.getDayStreamProcessorConfigFromConfig(cached:lastJulianDay:)(NgtMenstrualAlgorithmsDayStreamProcessorConfig *__return_ptr retstr, NgtMenstrualAlgorithmsDayStreamProcessorConfig *cached, Swift::UInt32 lastJulianDay)
{
  id v45 = cached;
  Swift::UInt32 v43 = lastJulianDay;
  uint64_t v57 = 0;
  int v56 = 0;
  uint64_t v55 = 0;
  Class v54 = 0;
  int v51 = 0;
  int v48 = 0;
  uint64_t v40 = 0;
  uint64_t v35 = type metadata accessor for DateComponents();
  uint64_t v36 = *(void *)(v35 - 8);
  uint64_t v37 = v35 - 8;
  unint64_t v38 = (*(void *)(v36 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v35);
  id v39 = (char *)&v8 - v38;
  unint64_t v41 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v40);
  uint64_t v42 = (char *)&v8 - v41;
  uint64_t v57 = v4;
  int v56 = v5;
  uint64_t v55 = v3;
  type metadata accessor for NgtMenstrualAlgorithmsDayStreamProcessorConfig();
  Class isa = HKHealthStore.__allocating_init()().super.isa;
  Class v54 = isa;
  [(objc_class *)isa setTodayAsJulianDay:v43];
  uint64_t v53 = [(NgtMenstrualAlgorithmsDayStreamProcessorConfig *)v45 julianDayOfUserReportedCycleLength];
  if (v53)
  {
    double v31 = (id *)&v53;
    uint64_t v32 = v53;
    id v6 = v53;
    outlined destroy of NgtMenstrualAlgorithmsDayStreamProcessorConfig?(v31);
    unsigned int v33 = [(NSNumber *)v32 unsignedIntValue];

    uint64_t v34 = v33;
  }
  else
  {
    unsigned int v27 = 0;
    outlined destroy of NgtMenstrualAlgorithmsDayStreamProcessorConfig?((id *)&v53);
    uint64_t v34 = v27 | 0x100000000;
  }
  int v30 = v34;
  if ((v34 & 0x100000000) == 0)
  {
    int v29 = v30;
    int v48 = v30;
    int v47 = v30;
    Swift::UInt32 v46 = v43;
    min<A>(_:_:)();
    Class v28 = UInt32._bridgeToObjectiveC()().super.super.isa;
    -[objc_class setJulianDayOfUserReportedCycleLength:](isa, sel_setJulianDayOfUserReportedCycleLength_);
  }
  NightingaleTraining::CycleStdEnum v52 = [(NgtMenstrualAlgorithmsDayStreamProcessorConfig *)v45 julianDayOfUserReportedMenstruationLength];
  if (v52)
  {
    BOOL v23 = (id *)&v52;
    uint64_t v24 = v52;
    double v7 = v52;
    outlined destroy of NgtMenstrualAlgorithmsDayStreamProcessorConfig?(v23);
    unsigned int v25 = [(NSNumber *)v24 unsignedIntValue];

    uint64_t v26 = v25;
  }
  else
  {
    unsigned int v19 = 0;
    outlined destroy of NgtMenstrualAlgorithmsDayStreamProcessorConfig?((id *)&v52);
    uint64_t v26 = v19 | 0x100000000;
  }
  int v22 = v26;
  if ((v26 & 0x100000000) == 0)
  {
    int v21 = v22;
    int v51 = v22;
    int v50 = v22;
    Swift::UInt32 v49 = v43;
    min<A>(_:_:)();
    Class v20 = UInt32._bridgeToObjectiveC()().super.super.isa;
    -[objc_class setJulianDayOfUserReportedMenstruationLength:](isa, sel_setJulianDayOfUserReportedMenstruationLength_);
  }
  id v16 = [(NgtMenstrualAlgorithmsDayStreamProcessorConfig *)v45 userReportedCycleLength];
  -[objc_class setUserReportedCycleLength:](isa, sel_setUserReportedCycleLength_);

  double v17 = [(NgtMenstrualAlgorithmsDayStreamProcessorConfig *)v45 userReportedMenstruationLength];
  -[objc_class setUserReportedMenstruationLength:](isa, sel_setUserReportedMenstruationLength_);

  int v18 = [(NgtMenstrualAlgorithmsDayStreamProcessorConfig *)v45 birthDateComponents];
  if (v18)
  {
    int v15 = v18;
    double v14 = v18;
    static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v42, v39, v35);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v42, 0, 1, v35);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v36 + 56))(v42, 1, 1, v35);
  }
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v42, 1, v35) == 1)
  {
    Class v13 = 0;
  }
  else
  {
    Class v12 = DateComponents._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v36 + 8))(v42, v35);
    Class v13 = v12;
  }
  Class v9 = v13;
  -[objc_class setBirthDateComponents:](isa, sel_setBirthDateComponents_);

  uint64_t v10 = [(NgtMenstrualAlgorithmsDayStreamProcessorConfig *)v45 awakeSHRCountThreshold];
  -[objc_class setAwakeSHRCountThreshold:](isa, sel_setAwakeSHRCountThreshold_);

  uint64_t v11 = [(NgtMenstrualAlgorithmsDayStreamProcessorConfig *)v45 sleepSHRCountThreshold];
  -[objc_class setSleepSHRCountThreshold:](isa, sel_setSleepSHRCountThreshold_);
}

uint64_t ShadowEvaluation.deinit()
{
  return v2;
}

uint64_t ShadowEvaluation.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

id @nonobjc NgtMenstrualAlgorithmsWristTemperature.init(temperature:forWatchIdentifier:)(double a1)
{
  id v4 = (id)MEMORY[0x25A2C0590]();
  id v5 = objc_msgSend(v3, sel_initWithTemperature_forWatchIdentifier_, a1);

  swift_bridgeObjectRelease();
  return v5;
}

id @nonobjc NgtMenstrualAlgorithmsHeartRateStatistics.init(lowerPercentile:forSampleCount:)(void *a1)
{
  id v4 = objc_msgSend(v1, sel_initWithLowerPercentile_forSampleCount_);

  return v4;
}

void *_s19NightingaleTraining21FlycatcherTelemetricsVSgWOi0_(void *result)
{
  *NgtMenstrualAlgorithmsHeartRateStatistics result = 0;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  result[4] = 0;
  result[5] = 0;
  result[6] = 0;
  result[7] = 0;
  result[8] = 0;
  result[9] = 0;
  result[10] = 0;
  result[11] = 0;
  result[12] = 0;
  result[13] = 0;
  result[14] = 0;
  result[15] = 0;
  result[16] = 0;
  result[17] = 0;
  result[18] = 0;
  result[19] = 0;
  result[20] = 0;
  result[21] = 0;
  result[22] = 0;
  result[23] = 0;
  result[24] = 0;
  result[25] = 0;
  result[26] = 0;
  result[27] = 0;
  result[28] = 0;
  result[29] = 0;
  result[30] = 0;
  result[31] = 0;
  result[32] = 0;
  result[33] = 0;
  result[34] = 0;
  return result;
}

uint64_t destroy for FlycatcherTelemetrics()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for FlycatcherTelemetrics(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  uint64_t result = a1;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  return result;
}

uint64_t assignWithCopy for FlycatcherTelemetrics(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  *(void *)(a1 + 8) = v3;
  swift_bridgeObjectRelease();
  uint64_t result = a1;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64) & 1;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __swift_memcpy280_8(void *a1, const void *a2)
{
}

uint64_t assignWithTake for FlycatcherTelemetrics(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  uint64_t result = a1;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64) & 1;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  return result;
}

uint64_t getEnumTagSinglePayload for FlycatcherTelemetrics(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 280))
    {
      int v4 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      int v3 = -1;
      if (!HIDWORD(*(void *)(a1 + 8))) {
        int v3 = *(void *)(a1 + 8);
      }
      int v4 = v3;
    }
  }
  else
  {
    int v4 = -1;
  }
  return (v4 + 1);
}

void *storeEnumTagSinglePayload for FlycatcherTelemetrics(void *result, int a2, int a3)
{
  int v3 = result + 35;
  if (a2 < 0)
  {
    result[31] = 0;
    result[30] = 0;
    result[29] = 0;
    result[28] = 0;
    result[27] = 0;
    result[26] = 0;
    result[25] = 0;
    result[24] = 0;
    result[23] = 0;
    result[22] = 0;
    result[21] = 0;
    result[20] = 0;
    result[19] = 0;
    result[18] = 0;
    result[17] = 0;
    result[16] = 0;
    result[15] = 0;
    result[14] = 0;
    result[13] = 0;
    result[12] = 0;
    result[11] = 0;
    result[10] = 0;
    result[9] = 0;
    result[8] = 0;
    result[7] = 0;
    result[6] = 0;
    result[5] = 0;
    result[4] = 0;
    result[3] = 0;
    result[2] = 0;
    result[1] = 0;
    *uint64_t result = a2 + 0x80000000;
    result[33] = 0;
    result[32] = 0;
    result[34] = 0;
    if (a3 < 0) {
      *int v3 = 1;
    }
  }
  else
  {
    if (a3 < 0) {
      *int v3 = 0;
    }
    if (a2) {
      result[1] = (a2 - 1);
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FlycatcherTelemetrics()
{
  return &type metadata for FlycatcherTelemetrics;
}

uint64_t getEnumTagSinglePayload for AgeEnum(unsigned __int8 *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 <= 0xF8) {
      goto LABEL_15;
    }
    unsigned int v7 = ((a2 + 7) >> 8) + 1;
    int v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000) {
        int v2 = 4;
      }
      else {
        int v2 = 2;
      }
      int v8 = v2;
    }
    if (v8 == 1) {
      int v6 = a1[1];
    }
    else {
      int v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    }
    if (v6)
    {
      int v5 = (*a1 | ((v6 - 1) << 8)) + 248;
    }
    else
    {
LABEL_15:
      int v3 = *a1 - 8;
      if (v3 < 0) {
        int v3 = -1;
      }
      int v5 = v3;
    }
  }
  else
  {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for AgeEnum(unsigned char *result, unsigned int a2, unsigned int a3)
{
  int v7 = 0;
  if (a3 > 0xF8)
  {
    unsigned int v5 = ((a3 + 7) >> 8) + 1;
    int v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000) {
        int v3 = 4;
      }
      else {
        int v3 = 2;
      }
      int v6 = v3;
    }
    int v7 = v6;
  }
  if (a2 > 0xF8)
  {
    unsigned int v4 = ((a2 - 249) >> 8) + 1;
    *uint64_t result = a2 + 7;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2) {
      *uint64_t result = a2 + 7;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AgeEnum()
{
  return &type metadata for AgeEnum;
}

uint64_t getEnumTagSinglePayload for BMIEnum(unsigned __int8 *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 <= 0xFA) {
      goto LABEL_15;
    }
    unsigned int v7 = ((a2 + 5) >> 8) + 1;
    int v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000) {
        int v2 = 4;
      }
      else {
        int v2 = 2;
      }
      int v8 = v2;
    }
    if (v8 == 1) {
      int v6 = a1[1];
    }
    else {
      int v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    }
    if (v6)
    {
      int v5 = (*a1 | ((v6 - 1) << 8)) + 250;
    }
    else
    {
LABEL_15:
      int v3 = *a1 - 6;
      if (v3 < 0) {
        int v3 = -1;
      }
      int v5 = v3;
    }
  }
  else
  {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for BMIEnum(unsigned char *result, unsigned int a2, unsigned int a3)
{
  int v7 = 0;
  if (a3 > 0xFA)
  {
    unsigned int v5 = ((a3 + 5) >> 8) + 1;
    int v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000) {
        int v3 = 4;
      }
      else {
        int v3 = 2;
      }
      int v6 = v3;
    }
    int v7 = v6;
  }
  if (a2 > 0xFA)
  {
    unsigned int v4 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2) {
      *uint64_t result = a2 + 5;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BMIEnum()
{
  return &type metadata for BMIEnum;
}

uint64_t getEnumTagSinglePayload for NumberOfDaysForFactorsEnum(unsigned __int8 *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 <= 0xF7) {
      goto LABEL_15;
    }
    unsigned int v7 = ((a2 + 8) >> 8) + 1;
    int v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000) {
        int v2 = 4;
      }
      else {
        int v2 = 2;
      }
      int v8 = v2;
    }
    if (v8 == 1) {
      int v6 = a1[1];
    }
    else {
      int v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    }
    if (v6)
    {
      int v5 = (*a1 | ((v6 - 1) << 8)) + 247;
    }
    else
    {
LABEL_15:
      int v3 = *a1 - 9;
      if (v3 < 0) {
        int v3 = -1;
      }
      int v5 = v3;
    }
  }
  else
  {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for NumberOfDaysForFactorsEnum(unsigned char *result, unsigned int a2, unsigned int a3)
{
  int v7 = 0;
  if (a3 > 0xF7)
  {
    unsigned int v5 = ((a3 + 8) >> 8) + 1;
    int v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000) {
        int v3 = 4;
      }
      else {
        int v3 = 2;
      }
      int v6 = v3;
    }
    int v7 = v6;
  }
  if (a2 > 0xF7)
  {
    unsigned int v4 = ((a2 - 248) >> 8) + 1;
    *uint64_t result = a2 + 8;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2) {
      *uint64_t result = a2 + 8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NumberOfDaysForFactorsEnum()
{
  return &type metadata for NumberOfDaysForFactorsEnum;
}

uint64_t getEnumTagSinglePayload for CycleStdEnum(unsigned __int8 *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 <= 0xEE) {
      goto LABEL_15;
    }
    unsigned int v7 = ((a2 + 17) >> 8) + 1;
    int v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000) {
        int v2 = 4;
      }
      else {
        int v2 = 2;
      }
      int v8 = v2;
    }
    if (v8 == 1) {
      int v6 = a1[1];
    }
    else {
      int v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    }
    if (v6)
    {
      int v5 = (*a1 | ((v6 - 1) << 8)) + 238;
    }
    else
    {
LABEL_15:
      int v3 = *a1 - 18;
      if (v3 < 0) {
        int v3 = -1;
      }
      int v5 = v3;
    }
  }
  else
  {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for CycleStdEnum(unsigned char *result, unsigned int a2, unsigned int a3)
{
  int v7 = 0;
  if (a3 > 0xEE)
  {
    unsigned int v5 = ((a3 + 17) >> 8) + 1;
    int v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000) {
        int v3 = 4;
      }
      else {
        int v3 = 2;
      }
      int v6 = v3;
    }
    int v7 = v6;
  }
  if (a2 > 0xEE)
  {
    unsigned int v4 = ((a2 - 239) >> 8) + 1;
    *uint64_t result = a2 + 17;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2) {
      *uint64_t result = a2 + 17;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CycleStdEnum()
{
  return &type metadata for CycleStdEnum;
}

uint64_t type metadata accessor for ShadowEvaluation()
{
  return self;
}

unint64_t base witness table accessor for Equatable in CycleStdEnum()
{
  return lazy protocol witness table accessor for type CycleStdEnum and conformance CycleStdEnum();
}

unint64_t base witness table accessor for Equatable in NumberOfDaysForFactorsEnum()
{
  return lazy protocol witness table accessor for type NumberOfDaysForFactorsEnum and conformance NumberOfDaysForFactorsEnum();
}

unint64_t base witness table accessor for Equatable in BMIEnum()
{
  return lazy protocol witness table accessor for type BMIEnum and conformance BMIEnum();
}

unint64_t base witness table accessor for Equatable in AgeEnum()
{
  return lazy protocol witness table accessor for type AgeEnum and conformance AgeEnum();
}

unint64_t type metadata accessor for NgtMenstrualAlgorithmsHeartRateStatistics()
{
  uint64_t v2 = lazy cache variable for type metadata for NgtMenstrualAlgorithmsHeartRateStatistics;
  if (!lazy cache variable for type metadata for NgtMenstrualAlgorithmsHeartRateStatistics)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for NgtMenstrualAlgorithmsHeartRateStatistics);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t Featurizer.__allocating_init()()
{
  return Featurizer.init()();
}

void __swiftcall meanAndStd(_:_:)(Swift::tuple_mean_Float_optional_std_Float *__return_ptr retstr, Swift::OpaquePointer a2, NightingaleTraining::STDMethod a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  int v10 = 0;
  float v9 = 0.0;
  uint64_t rawValue = a2._rawValue;
  char v11 = a3 & 1;
  if (MEMORY[0x25A2C0820]() > 1)
  {
    int v10 = 0;
    float v9 = 0.0;
    swift_bridgeObjectRetain();
    MEMORY[0x25A2C0820](a2._rawValue);
    lazy protocol witness table accessor for type UInt and conformance UInt();
    lazy protocol witness table accessor for type UInt and conformance UInt();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    swift_bridgeObjectRetain();
    vDSP_normalize((const float *)a2._rawValue + 8, 1, 0, 1, (float *)&v10, &v9, v8);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    if (a3)
    {
      float v5 = (float)MEMORY[0x25A2C0820](a2._rawValue);
      uint64_t v3 = MEMORY[0x25A2C0820](a2._rawValue);
      if (__OFSUB__(v3, 1)) {
        __break(1u);
      }
      else {
        float v9 = v9 * sqrtf(v5 / (float)(v3 - 1));
      }
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
    lazy protocol witness table accessor for type [Float] and conformance [A]();
    Collection.first.getter();
    outlined destroy of [A]();
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> transferFeatureToMLInputs(_:_:_:_:)(Swift::OpaquePointer *a1, Swift::OpaquePointer *a2, NightingaleTraining::NightingaleModelFeatureType a3, NightingaleTraining::NightingalePFLModelType a4)
{
  int v15 = a1;
  id v16 = a2;
  int v17 = a4;
  unsigned int v19 = partial apply for closure #1 in transferFeatureToMLInputs(_:_:_:_:);
  Swift::Int v21 = 0;
  unsigned int v25 = a1;
  uint64_t v24 = a2;
  NightingaleTraining::NightingaleModelFeatureType v23 = a3;
  NightingaleTraining::NightingalePFLModelType v22 = a4;
  Swift::Int_optional v26 = featureIndex(_:_:)(a3, a4);
  Swift::Int value = v26.value;
  if (v26.is_nil)
  {
    uint64_t v13 = v18;
  }
  else
  {
    Swift::Int v14 = value;
    Swift::Int v9 = value;
    Swift::Int v21 = value;
    v8[1] = v8;
    MEMORY[0x270FA5388](v8);
    int v10 = v6;
    v6[2] = v15;
    v6[3] = v9;
    char v7 = v4;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
    uint64_t v5 = v18;
    Array.withUnsafeMutableBufferPointer<A>(_:)();
    uint64_t v11 = v5;
    uint64_t v12 = v5;
    if (!v5)
    {
      specialized default argument 0 of Array.removeAll(keepingCapacity:)();
      specialized Array.removeAll(keepingCapacity:)();
    }
  }
}

Swift::Void __swiftcall transferLabelToOnehotEncode(_:_:_:)(Swift::OpaquePointer *a1, Swift::OpaquePointer *a2, Swift::UInt32 a3)
{
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v19 = 0;
  uint64_t v32 = a1;
  double v31 = a2;
  Swift::UInt32 v30 = a3;
  Swift::UInt32 v28 = a3;
  lazy protocol witness table accessor for type Int and conformance Int();
  lazy protocol witness table accessor for type Int and conformance Int();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  SignedInteger<>.init<A>(_:)();
  uint64_t v12 = v29;
  uint64_t v27 = v29;
  uint64_t rawValue = a1->_rawValue;
  swift_bridgeObjectRetain();
  uint64_t v14 = MEMORY[0x25A2C0830](rawValue);
  swift_bridgeObjectRelease();
  if (v14 < 0)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  uint64_t v22 = 0;
  uint64_t v23 = v14;
  uint64_t v24 = specialized Collection<>.makeIterator()();
  uint64_t v25 = v3;
  uint64_t v26 = v4;
  while (1)
  {
    uint64_t v20 = specialized IndexingIterator.next()();
    char v21 = v5 & 1;
    if (v5) {
      break;
    }
    uint64_t v19 = v20;
    uint64_t v10 = v20 * v12;
    if ((unsigned __int128)(v19 * (__int128)v12) >> 64 != (v19 * v12) >> 63)
    {
      __break(1u);
LABEL_13:
      __break(1u);
      return;
    }
    int v17 = MEMORY[0x25A2C09B0](v20, a1->_rawValue);
    int v16 = v17;
    SignedInteger<>.init<A>(_:)();
    if (__OFADD__(v10, v18)) {
      goto LABEL_13;
    }
    char v7 = (void (*)(unsigned char *, void, uint64_t))specialized Array.subscript.modify();
    *vDSP_Length v8 = 1.0;
    v7(v15, 0, v9);
  }
}

Swift::Void __swiftcall transferLabelToRegression(_:_:_:_:)(Swift::OpaquePointer *a1, Swift::OpaquePointer *a2, Swift::UInt32 a3, Swift::UInt32 a4)
{
  float v38 = 0.0;
  uint64_t v35 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v27 = 0;
  id v45 = a1;
  id v44 = a2;
  Swift::UInt32 v43 = a3;
  Swift::UInt32 v42 = a4;
  uint64_t rawValue = a2->_rawValue;
  swift_bridgeObjectRetain();
  uint64_t v19 = MEMORY[0x25A2C0820](rawValue);
  swift_bridgeObjectRelease();
  char v21 = a1->_rawValue;
  swift_bridgeObjectRetain();
  uint64_t v23 = MEMORY[0x25A2C0830](v21);
  swift_bridgeObjectRelease();
  Swift::UInt32 v40 = a3;
  lazy protocol witness table accessor for type Int and conformance Int();
  lazy protocol witness table accessor for type Int and conformance Int();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  SignedInteger<>.init<A>(_:)();
  if ((unsigned __int128)(v23 * (__int128)v41) >> 64 == (v23 * v41) >> 63)
  {
    if (v19 < v23 * v41)
    {
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Size of regression should >= size of array * stride", 0x33uLL, 1);
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    Swift::UInt32 v39 = a4;
    Float.init<A>(_:)();
    float v13 = v4;
    float v38 = v4;
    Swift::UInt32 v36 = a3;
    SignedInteger<>.init<A>(_:)();
    uint64_t v14 = v37;
    uint64_t v35 = v37;
    int v15 = a1->_rawValue;
    swift_bridgeObjectRetain();
    uint64_t v16 = MEMORY[0x25A2C0830](v15);
    swift_bridgeObjectRelease();
    if (v16 < 0)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    uint64_t v30 = 0;
    uint64_t v31 = v16;
    uint64_t v32 = specialized Collection<>.makeIterator()();
    uint64_t v33 = v5;
    uint64_t v34 = v6;
    while (1)
    {
      uint64_t v28 = specialized IndexingIterator.next()();
      char v29 = v7 & 1;
      if (v7) {
        break;
      }
      uint64_t v27 = v28;
      if ((unsigned __int128)(v14 * (__int128)v27) >> 64 != (v14 * v27) >> 63) {
        goto LABEL_12;
      }
      int v26 = MEMORY[0x25A2C09B0](v28, a1->_rawValue);
      int v25 = v26;
      Float.init<A>(_:)();
      float v12 = v8 / v13;
      uint64_t v9 = (void (*)(char *, void, uint64_t))specialized Array.subscript.modify();
      *uint64_t v10 = v12;
      v9(v24, 0, v11);
    }
  }
  else
  {
    __break(1u);
LABEL_12:
    __break(1u);
  }
}

NightingaleTraining::FeatureStatsOption_optional __swiftcall FeatureStatsOption.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v1 = _allocateUninitializedArray<A>(_:)();
  *(void *)uint64_t v2 = "none";
  *(void *)(v2 + 8) = 4;
  *(unsigned char *)(v2 + 16) = 2;
  *(void *)(v2 + 24) = "perSlice";
  *(void *)(v2 + 32) = 8;
  *(unsigned char *)(v2 + 40) = 2;
  *(void *)(v2 + 48) = "perDevice";
  *(void *)(v2 + 56) = 9;
  *(unsigned char *)(v2 + 64) = 2;
  _finalizeUninitializedArray<A>(_:)();
  Swift::Int v6 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v1, rawValue);
  swift_bridgeObjectRelease();
  switch(v6)
  {
    case 0:
      v7.Swift::Int value = NightingaleTraining_FeatureStatsOption_none;
LABEL_8:
      swift_bridgeObjectRelease();
      return v7;
    case 1:
      v7.Swift::Int value = NightingaleTraining_FeatureStatsOption_perSlice;
      goto LABEL_8;
    case 2:
      v7.Swift::Int value = NightingaleTraining_FeatureStatsOption_perDevice;
      goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  return (NightingaleTraining::FeatureStatsOption_optional)3;
}

uint64_t FeatureStatsOption.rawValue.getter(char a1)
{
  if (!a1) {
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("none", 4uLL, 1)._countAndFlagsBits;
  }
  if (a1 == 1) {
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("perSlice", 8uLL, 1)._countAndFlagsBits;
  }
  else {
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("perDevice", 9uLL, 1)._countAndFlagsBits;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FeatureStatsOption()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance FeatureStatsOption()
{
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance FeatureStatsOption()
{
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance FeatureStatsOption()
{
  return RawRepresentable<>._rawHashValue(seed:)();
}

NightingaleTraining::FeatureStatsOption_optional protocol witness for RawRepresentable.init(rawValue:) in conformance FeatureStatsOption@<W0>(Swift::String *a1@<X0>, NightingaleTraining::FeatureStatsOption_optional *a2@<X8>)
{
  result.Swift::Int value = FeatureStatsOption.init(rawValue:)(*a1).value;
  a2->Swift::Int value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance FeatureStatsOption@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = FeatureStatsOption.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v3;
  return result;
}

void *Featurizer.defaultFlow.unsafeMutableAddressor()
{
  return &static Featurizer.defaultFlow;
}

uint64_t Featurizer.init()()
{
  return v0;
}

void __swiftcall Featurizer.featurizeHRPeriodPrediction(flows:daySHR10s:nightSHR10s:calendarPeriodPredictions:historicalPeriods:cycleFactors:dummyPeriodLength:sliceSize:maxNumDaysToNextPeriod:minNumDaysToNextPeriod:minNumOfDaySHRPerSlice:)(Swift::tuple_flow_OpaquePointer_daySHR10_OpaquePointer_nightSHR10_OpaquePointer_periodStartMean_OpaquePointer_periodStartStd_OpaquePointer_labels_OpaquePointer_cycleStats_tuple_size_Float_mean_Float_std_Float_daySHR10CountStats_tuple_mean_Float_optional_std_Float *__return_ptr retstr, Swift::OpaquePointer *flows, Swift::OpaquePointer *daySHR10s, Swift::OpaquePointer *nightSHR10s, Swift::OpaquePointer *calendarPeriodPredictions, Swift::OpaquePointer *historicalPeriods, Swift::OpaquePointer *cycleFactors, Swift::UInt32 dummyPeriodLength, Swift::UInt32 sliceSize, Swift::UInt32 maxNumDaysToNextPeriod, Swift::UInt32 minNumDaysToNextPeriod, Swift::Int minNumOfDaySHRPerSlice)
{
  uint64_t v305 = 0;
  uint64_t v303 = 0;
  uint64_t v301 = 0;
  uint64_t v299 = 0;
  uint64_t v297 = 0;
  Swift::UInt32 v287 = 0;
  Swift::UInt32 v285 = 0;
  uint64_t v284 = 0;
  featureCaches._uint64_t rawValue = 0;
  Swift::UInt32 lastDayHasFeature = 0;
  int v274 = 0;
  Swift::UInt32 v270 = 0;
  Swift::UInt32 v269 = 0;
  uint64_t v268 = 0;
  memset(__b, 0, sizeof(__b));
  uint64_t v264 = 0;
  uint64_t v263 = 0;
  uint64_t v260 = 0;
  uint64_t v261 = 0;
  uint64_t v262 = 0;
  float v255 = 0.0;
  float v251 = 0.0;
  char v252 = 0;
  float v250 = 0.0;
  Swift::UInt32 currentSliceStart = 0;
  Swift::UInt32 v248 = 0;
  v247._uint64_t rawValue = 0;
  v246._uint64_t rawValue = 0;
  v245._uint64_t rawValue = 0;
  v244._uint64_t rawValue = 0;
  v243._uint64_t rawValue = 0;
  uint64_t v242 = 0;
  uint64_t v241 = 0;
  float v238 = 0.0;
  uint64_t v233 = 0;
  uint64_t v229 = 0;
  Swift::Int v227 = 0;
  char v226 = 0;
  uint64_t v224 = 0;
  int v225 = 0;
  Swift::UInt32 v218 = 0;
  Swift::UInt32 v217 = 0;
  uint64_t v215 = 0;
  int v216 = 0;
  Swift::UInt32 v208 = 0;
  unsigned __int8 v200 = 0;
  Swift::Float v199 = 0.0;
  Swift::Float v198 = 0.0;
  float v197 = 0.0;
  Swift::Float v196 = 0.0;
  uint64_t v189 = 0;
  memset(v190, 0, 12);
  int v187 = 0;
  Swift::UInt32 v184 = 0;
  Swift::UInt32 v183 = 0;
  Swift::UInt32 v182 = 0;
  Swift::UInt32 v181 = 0;
  Swift::UInt32 v180 = 0;
  uint64_t v179 = 0;
  int v177 = 0;
  int v175 = 0;
  int v317 = flows;
  uint64_t v316 = daySHR10s;
  uint64_t v315 = nightSHR10s;
  uint64_t v314 = calendarPeriodPredictions;
  uint64_t v313 = historicalPeriods;
  uint64_t v312 = cycleFactors;
  Swift::UInt32 v311 = dummyPeriodLength;
  Swift::UInt32 v310 = sliceSize;
  Swift::UInt32 v309 = maxNumDaysToNextPeriod;
  Swift::UInt32 v308 = minNumDaysToNextPeriod;
  Swift::Int v307 = minNumOfDaySHRPerSlice;
  uint64_t v306 = v12;
  uint64_t rawValue = historicalPeriods->_rawValue;
  swift_bridgeObjectRetain();
  uint64_t v167 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (start: UInt32, end: UInt32));
  uint64_t v169 = MEMORY[0x25A2C0810](rawValue);
  uint64_t v305 = v169;
  swift_bridgeObjectRelease();
  if (v169 <= 0) {
    goto LABEL_122;
  }
  uint64_t v156 = calendarPeriodPredictions->_rawValue;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (periodStartMean: Float, periodStartStd: Float));
  char v157 = MEMORY[0x25A2C0450](v156, MEMORY[0x263F8E8F8]);
  swift_bridgeObjectRelease();
  if ((v157 & 1) != 0
    || (unsigned int v154 = daySHR10s->_rawValue,
        swift_bridgeObjectRetain(),
        char v155 = MEMORY[0x25A2C0450](v154, MEMORY[0x263F8E8F8], MEMORY[0x263F8D5C8], MEMORY[0x263F8E908]),
        swift_bridgeObjectRelease(),
        (v155 & 1) != 0))
  {
LABEL_122:
    uint64_t v70 = (void *)_allocateUninitializedArray<A>(_:)();
    uint64_t v71 = (void *)_allocateUninitializedArray<A>(_:)();
    int v72 = (void *)_allocateUninitializedArray<A>(_:)();
    uint64_t v73 = (void *)_allocateUninitializedArray<A>(_:)();
    id v74 = (void *)_allocateUninitializedArray<A>(_:)();
    uint64_t v75 = (void *)_allocateUninitializedArray<A>(_:)();
    float v76 = 0.0;
    Swift::Float v77 = 0.0;
    Swift::Float v78 = 0.0;
    Swift::Float v79 = 0.0;
    char v80 = 1;
    Swift::Float v81 = 0.0;
    goto LABEL_123;
  }
  swift_bridgeObjectRetain();
  uint64_t v152 = swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v304 = v152;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : Float].Keys);
  lazy protocol witness table accessor for type [UInt32 : Float].Keys and conformance [A : B].Keys();
  uint64_t v153 = Sequence.sorted(by:)();
  outlined destroy of [A]();
  uint64_t v303 = v153;
  swift_bridgeObjectRetain();
  uint64_t v150 = swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v302 = v150;
  uint64_t v151 = Sequence.sorted(by:)();
  outlined destroy of [A]();
  uint64_t v301 = v151;
  swift_bridgeObjectRetain();
  uint64_t v148 = swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v300 = v148;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : (periodStartMean: Float, periodStartStd: Float)].Keys);
  lazy protocol witness table accessor for type [UInt32 : (periodStartMean: Float, periodStartStd: Float)].Keys and conformance [A : B].Keys();
  uint64_t v149 = Sequence.sorted(by:)();
  outlined destroy of [A]();
  uint64_t v299 = v149;
  id v144 = historicalPeriods->_rawValue;
  swift_bridgeObjectRetain();
  unsigned int v298 = v144;
  uint64_t v145 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(start: UInt32, end: UInt32)]);
  unint64_t v13 = lazy protocol witness table accessor for type [(start: UInt32, end: UInt32)] and conformance [A]();
  uint64_t v147 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))closure #1 in Featurizer.featurizeHRPeriodPrediction(flows:daySHR10s:nightSHR10s:calendarPeriodPredictions:historicalPeriods:cycleFactors:dummyPeriodLength:sliceSize:maxNumDaysToNextPeriod:minNumDaysToNextPeriod:minNumOfDaySHRPerSlice:), 0, v145, MEMORY[0x263F8E8F8], MEMORY[0x263F8E628], v13, MEMORY[0x263F8E658], v146);
  outlined destroy of [A]();
  uint64_t v297 = v147;
  swift_bridgeObjectRetain();
  uint64_t v293 = v153;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32]);
  lazy protocol witness table accessor for type [UInt32] and conformance [A]();
  Collection.first.getter();
  outlined destroy of [A]();
  if (v295)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    int v143 = v294;
  }
  int v292 = v143;
  swift_bridgeObjectRetain();
  uint64_t v289 = v149;
  Collection.first.getter();
  outlined destroy of [A]();
  if (v291)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    int v142 = v290;
  }
  int v288 = v142;
  max<A>(_:_:)();
  Swift::UInt32 v141 = v296;
  Swift::UInt32 v287 = v296;
  if (__OFSUB__(v169, 1))
  {
    __break(1u);
    goto LABEL_125;
  }
  Array.subscript.getter();
  Swift::UInt32 v140 = v286;
  Swift::UInt32 v285 = v286;
  if (v141 >= v286)
  {
LABEL_121:
    uint64_t v37 = _allocateUninitializedArray<A>(_:)();
    uint64_t v38 = _allocateUninitializedArray<A>(_:)();
    uint64_t v39 = _allocateUninitializedArray<A>(_:)();
    uint64_t v40 = _allocateUninitializedArray<A>(_:)();
    uint64_t v41 = _allocateUninitializedArray<A>(_:)();
    uint64_t v42 = _allocateUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v70 = (void *)v37;
    uint64_t v71 = (void *)v38;
    int v72 = (void *)v39;
    uint64_t v73 = (void *)v40;
    id v74 = (void *)v41;
    uint64_t v75 = (void *)v42;
    float v76 = 0.0;
    Swift::Float v77 = 0.0;
    Swift::Float v78 = 0.0;
    Swift::Float v79 = 0.0;
    char v80 = 1;
    Swift::Float v81 = 0.0;
    goto LABEL_123;
  }
  if (v286 < v141)
  {
LABEL_125:
    __break(1u);
    goto LABEL_126;
  }
  if (v286 - v141 < sliceSize) {
    goto LABEL_121;
  }
  uint64_t v284 = findDaysNeedingDummyFlow(_:_:)(historicalPeriods, dummyPeriodLength);
  uint64_t v138 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (flow: UInt8, daySHR10: Float, nightSHR10: Float, periodStartMean: Float, periodStartStd: Float));
  uint64_t v139 = MEMORY[0x263F8E8F8];
  featureCaches._uint64_t rawValue = (void *)Dictionary.init()();
  Swift::UInt32 v279 = v141;
  static HIDPFLUtils.findClosest<A>(_:lessOrEqualThan:)(v153, (uint64_t)&v279, v139, MEMORY[0x263F8E910], (uint64_t)&v280);
  if (v281)
  {
    Swift::UInt32 v136 = 0;
    char v137 = 1;
  }
  else
  {
    Swift::UInt32 v136 = v280;
    char v137 = 0;
  }
  if (v137)
  {
    uint64_t v43 = _allocateUninitializedArray<A>(_:)();
    uint64_t v44 = _allocateUninitializedArray<A>(_:)();
    uint64_t v45 = _allocateUninitializedArray<A>(_:)();
    uint64_t v46 = _allocateUninitializedArray<A>(_:)();
    uint64_t v47 = _allocateUninitializedArray<A>(_:)();
    uint64_t v48 = _allocateUninitializedArray<A>(_:)();
    outlined destroy of [A]();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v70 = (void *)v43;
    uint64_t v71 = (void *)v44;
    int v72 = (void *)v45;
    uint64_t v73 = (void *)v46;
    id v74 = (void *)v47;
    uint64_t v75 = (void *)v48;
    float v76 = 0.0;
    Swift::Float v77 = 0.0;
    Swift::Float v78 = 0.0;
    Swift::Float v79 = 0.0;
    char v80 = 1;
    Swift::Float v81 = 0.0;
    goto LABEL_123;
  }
  Swift::UInt32 lastDayHasFeature = v136;
  Swift::UInt32 v275 = v141;
  static HIDPFLUtils.findClosest<A>(_:lessOrEqualThan:)(v151, (uint64_t)&v275, MEMORY[0x263F8E8F8], MEMORY[0x263F8E910], (uint64_t)&v276);
  if (v277)
  {
    v278.Swift::Int value = 0;
    v278.Swift::Bool is_nil = 1;
  }
  else
  {
    v278.Swift::Int value = v276;
    v278.Swift::Bool is_nil = 0;
  }
  Swift::UInt32 v271 = v141;
  static HIDPFLUtils.findClosest<A>(_:lessOrEqualThan:)(v149, (uint64_t)&v271, MEMORY[0x263F8E8F8], MEMORY[0x263F8E910], (uint64_t)&v272);
  if (v273)
  {
    int v134 = 0;
    char v135 = 1;
  }
  else
  {
    int v134 = v272;
    char v135 = 0;
  }
  if (v135)
  {
    uint64_t v49 = _allocateUninitializedArray<A>(_:)();
    uint64_t v50 = _allocateUninitializedArray<A>(_:)();
    uint64_t v51 = _allocateUninitializedArray<A>(_:)();
    uint64_t v52 = _allocateUninitializedArray<A>(_:)();
    uint64_t v53 = _allocateUninitializedArray<A>(_:)();
    uint64_t v54 = _allocateUninitializedArray<A>(_:)();
    outlined destroy of [A]();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v70 = (void *)v49;
    uint64_t v71 = (void *)v50;
    int v72 = (void *)v51;
    uint64_t v73 = (void *)v52;
    id v74 = (void *)v53;
    uint64_t v75 = (void *)v54;
    float v76 = 0.0;
    Swift::Float v77 = 0.0;
    Swift::Float v78 = 0.0;
    Swift::Float v79 = 0.0;
    char v80 = 1;
    Swift::Float v81 = 0.0;
    goto LABEL_123;
  }
  int v274 = v134;
  Swift::tuple_UInt32_UInt32_optional v319 = findPeriodPredictionLabel(_:_:_:_:)((Swift::OpaquePointer)v147, v141, sliceSize, minNumDaysToNextPeriod);
  if (v319.value._1)
  {
    uint64_t v55 = _allocateUninitializedArray<A>(_:)();
    uint64_t v56 = _allocateUninitializedArray<A>(_:)();
    uint64_t v57 = _allocateUninitializedArray<A>(_:)();
    uint64_t v58 = _allocateUninitializedArray<A>(_:)();
    uint64_t v59 = _allocateUninitializedArray<A>(_:)();
    uint64_t v60 = _allocateUninitializedArray<A>(_:)();
    outlined destroy of [A]();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v70 = (void *)v55;
    uint64_t v71 = (void *)v56;
    int v72 = (void *)v57;
    uint64_t v73 = (void *)v58;
    id v74 = (void *)v59;
    uint64_t v75 = (void *)v60;
    float v76 = 0.0;
    Swift::Float v77 = 0.0;
    Swift::Float v78 = 0.0;
    Swift::Float v79 = 0.0;
    char v80 = 1;
    Swift::Float v81 = 0.0;
    goto LABEL_123;
  }
  Swift::UInt32 v269 = v15;
  Swift::UInt32 v270 = v319.value._0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AugmentedIntervalTree<UInt32, Any>);
  uint64_t v268 = AugmentedIntervalTree.__allocating_init()();
  swift_bridgeObjectRetain();
  Dictionary.makeIterator()();
  memcpy(__b, v318, sizeof(__b));
  for (uint64_t i = 0; ; uint64_t i = v132)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8 : [(start: UInt32, end: UInt32)]].Iterator);
    Dictionary.Iterator.next()();
    if (!v266) {
      break;
    }
    if (v265 == NgtMenstrualAlgorithmsPhase.rawValue.getter(8))
    {
      uint64_t v132 = i;
    }
    else
    {
      swift_retain();
      lazy protocol witness table accessor for type [(start: UInt32, end: UInt32)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_release();
      uint64_t v132 = 0;
    }
    swift_bridgeObjectRelease();
  }
  outlined destroy of [UInt8 : [(start: UInt32, end: UInt32)]].Iterator();
  uint64_t v264 = specialized Array.init()();
  uint64_t v263 = AugmentedIntervalTree.__allocating_init()();
  uint64_t v130 = historicalPeriods->_rawValue;
  swift_bridgeObjectRetain();
  uint64_t v131 = MEMORY[0x25A2C0810](v130, v167);
  swift_bridgeObjectRelease();
  if (__OFSUB__(v131, 1))
  {
LABEL_126:
    __break(1u);
    goto LABEL_127;
  }
  if (v131 - 1 < 0)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  uint64_t v258 = 0;
  uint64_t v259 = v131 - 1;
  uint64_t v260 = specialized Collection<>.makeIterator()();
  uint64_t v261 = v17;
  uint64_t v262 = v18;
  while (1)
  {
    uint64_t v256 = specialized IndexingIterator.next()();
    char v257 = v19 & 1;
    uint64_t v129 = v256;
    if (v19) {
      break;
    }
    uint64_t v179 = v256;
    Array.subscript.getter();
    int v128 = v178;
    int v177 = v178;
    if (__OFADD__(v129, 1)) {
      goto LABEL_136;
    }
    Array.subscript.getter();
    int v127 = v176 - 1;
    if (!v176) {
      goto LABEL_137;
    }
    int v175 = v176 - 1;
    int v174 = v128;
    int v173 = v176 - 1;
    if (AugmentedIntervalTree.overlap(start:end:)((uint64_t)&v174, (uint64_t)&v173))
    {
      v172[0] = v128;
      int v171 = v127;
      memset(v170, 0, sizeof(v170));
      AugmentedIntervalTree.insert(start:end:context:)((uint64_t)v172, (uint64_t)&v171, v170);
      outlined destroy of Pregnancy?((uint64_t)v170);
    }
    else
    {
      v172[3] = v127;
      lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      Float.init<A>(_:)();
      float v126 = v21;
      v172[2] = v128;
      Float.init<A>(_:)();
      *(float *)&v172[1] = v126 - v22;
      specialized Array.append(_:)();
    }
  }
  uint64_t v124 = v264;
  swift_bridgeObjectRetain();
  uint64_t v125 = MEMORY[0x25A2C0820](v124);
  swift_bridgeObjectRelease();
  if (v125 <= 0)
  {
    uint64_t v61 = _allocateUninitializedArray<A>(_:)();
    uint64_t v62 = _allocateUninitializedArray<A>(_:)();
    uint64_t v63 = _allocateUninitializedArray<A>(_:)();
    uint64_t v64 = _allocateUninitializedArray<A>(_:)();
    uint64_t v65 = _allocateUninitializedArray<A>(_:)();
    uint64_t v66 = _allocateUninitializedArray<A>(_:)();
    swift_release();
    outlined destroy of [A]();
    swift_release();
    outlined destroy of [A]();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v70 = (void *)v61;
    uint64_t v71 = (void *)v62;
    int v72 = (void *)v63;
    uint64_t v73 = (void *)v64;
    id v74 = (void *)v65;
    uint64_t v75 = (void *)v66;
    float v76 = 0.0;
    Swift::Float v77 = 0.0;
    Swift::Float v78 = 0.0;
    Swift::Float v79 = 0.0;
    char v80 = 1;
    Swift::Float v81 = 0.0;
LABEL_123:
    retstr->flow._uint64_t rawValue = v70;
    retstr->daySHR10._uint64_t rawValue = v71;
    retstr->nightSHR10._uint64_t rawValue = v72;
    retstr->periodStartMean._uint64_t rawValue = v73;
    retstr->periodStartStd._uint64_t rawValue = v74;
    retstr->labels._uint64_t rawValue = v75;
    retstr->cycleStats.uint32_t size = v76;
    retstr->cycleStats.Swift::Float_optional mean = v77;
    retstr->cycleStats.Swift::Float std = v78;
    retstr->daySHR10CountStats.mean.Swift::Int value = v79;
    retstr->daySHR10CountStats.mean.Swift::Bool is_nil = v80 & 1;
    retstr->daySHR10CountStats.Swift::Float std = v81;
    return;
  }
  uint64_t v119 = v264;
  swift_bridgeObjectRetain();
  uint64_t v120 = MEMORY[0x25A2C0820](v119);
  swift_bridgeObjectRelease();
  float v255 = (float)v120;
  swift_bridgeObjectRetain();
  uint64_t v253 = static PFLStats.meanAndStd(_:)();
  float v254 = v23;
  float v121 = *(float *)&v253;
  char v122 = BYTE4(v253);
  float v123 = v23;
  swift_bridgeObjectRelease();
  float v251 = v121;
  char v252 = v122 & 1;
  float v250 = v123;
  Swift::UInt32 currentSliceStart = v141;
  if (v140 >= sliceSize)
  {
    Swift::UInt32 v248 = v140 - sliceSize;
    v247._uint64_t rawValue = (void *)specialized Array.init()();
    v246._uint64_t rawValue = (void *)specialized Array.init()();
    v245._uint64_t rawValue = (void *)specialized Array.init()();
    v244._uint64_t rawValue = (void *)specialized Array.init()();
    v243._uint64_t rawValue = (void *)specialized Array.init()();
    uint64_t v242 = specialized Array.init()();
    uint64_t v241 = specialized Array.init()();
    uint64_t v118 = i;
    while (v140 - sliceSize >= currentSliceStart)
    {
      if (v269 < maxNumDaysToNextPeriod)
      {
        Swift::UInt32 v235 = currentSliceStart;
        Swift::UInt32 v234 = v270;
        uint64_t disqualifyingDays = AugmentedIntervalTree.search(start:end:)((uint64_t)&v235, (uint64_t)&v234);
        uint64_t v233 = disqualifyingDays;
        swift_bridgeObjectRetain();
        uint64_t v232 = disqualifyingDays;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Interval<UInt32, Any>]);
        lazy protocol witness table accessor for type [Interval<UInt32, Any>] and conformance [A]();
        char v115 = Collection.isEmpty.getter();
        outlined destroy of [A]();
        if (v115)
        {
          Swift::UInt32 v231 = currentSliceStart;
          Swift::UInt32 v230 = currentSliceStart;
          uint64_t v112 = AugmentedIntervalTree.search(start:end:)((uint64_t)&v231, (uint64_t)&v230);
          uint64_t v229 = v112;
          swift_bridgeObjectRetain();
          uint64_t v228 = v112;
          char v113 = Collection.isEmpty.getter();
          outlined destroy of [A]();
          if (v113)
          {
            Swift::Int v227 = 0;
            char v226 = 1;
            Swift::UInt32 v110 = currentSliceStart;
            Swift::UInt32 v111 = currentSliceStart + sliceSize;
            if (__CFADD__(currentSliceStart, sliceSize)) {
              goto LABEL_128;
            }
            if (v111 < currentSliceStart)
            {
              _assertionFailure(_:_:file:line:flags:)();
              __break(1u);
            }
            Swift::UInt32 v222 = v110;
            Swift::UInt32 v223 = v111;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<UInt32>);
            lazy protocol witness table accessor for type Range<UInt32> and conformance <> Range<A>();
            Collection<>.makeIterator()();
            while (1)
            {
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<Range<UInt32>>);
              IndexingIterator.next()();
              if (v221) {
                break;
              }
              int v187 = v220;
              uint64_t v28 = daySHR10s->_rawValue;
              int v185 = v220;
              MEMORY[0x25A2C04B0](&v186, &v185, v28, MEMORY[0x263F8E8F8], MEMORY[0x263F8D5C8], MEMORY[0x263F8E908]);
              if ((v186 & 0x100000000) == 0)
              {
                if (__OFADD__(v227, 1)) {
                  goto LABEL_132;
                }
                ++v227;
              }
            }
            if (v227 < minNumOfDaySHRPerSlice) {
              char v226 = 0;
            }
            if (v226)
            {
              Swift::UInt32 v108 = currentSliceStart;
              Swift::UInt32 v109 = currentSliceStart + sliceSize;
              if (__CFADD__(currentSliceStart, sliceSize)) {
                goto LABEL_131;
              }
              if (v109 < currentSliceStart)
              {
                _assertionFailure(_:_:file:line:flags:)();
                __break(1u);
              }
              Swift::UInt32 v213 = v108;
              Swift::UInt32 v214 = v109;
              Collection<>.makeIterator()();
              while (1)
              {
                IndexingIterator.next()();
                Swift::UInt32 v107 = v211;
                if (v212) {
                  break;
                }
                Swift::UInt32 v208 = v211;
                *(_DWORD *)((char *)&v203 + 3) = v211;
                MEMORY[0x25A2C04B0]((uint64_t *)((char *)&v203 + 7), (char *)&v203 + 3, featureCaches._rawValue, MEMORY[0x263F8E8F8], v138, MEMORY[0x263F8E908]);
                Swift::Float v104 = v204;
                uint64_t v105 = v205;
                Swift::Float v106 = v206;
                if (v207)
                {
                  uint64_t v32 = flows->_rawValue;
                  Swift::UInt32 v202 = v107;
                  MEMORY[0x25A2C04B0](&v203, &v202, v32, MEMORY[0x263F8E8F8], MEMORY[0x263F8E778], MEMORY[0x263F8E908]);
                  __int16 v201 = v203 & 0x1FF;
                  if ((v203 & 0x100) != 0) {
                    BYTE2(v203) = 0;
                  }
                  else {
                    BYTE2(v203) = v201;
                  }
                  unsigned __int8 v100 = static Imputation.imputeFlow(flow:day:days:flowImputed:imputeValue:)(BYTE2(v203), v107, (uint64_t)&v284, 0, 2u);
                  unsigned __int8 v200 = v100;
                  Swift::Float v199 = 0.0;
                  feature = daySHR10s->_rawValue;
                  swift_bridgeObjectRetain();
                  Featurizer.updateFeature(feature:lastDayHasFeature:currentDay:cache:)((Swift::OpaquePointer)feature, &lastDayHasFeature, v107, &v199);
                  swift_bridgeObjectRelease();
                  Swift::Float v198 = 0.0;
                  float v98 = nightSHR10s->_rawValue;
                  swift_bridgeObjectRetain();
                  Featurizer.updateFeature(feature:lastDayHasFeature:currentDay:defaultValue:cache:)((Swift::OpaquePointer)v98, &v278, v107, 64.88, &v198);
                  swift_bridgeObjectRelease();
                  uint64_t v99 = calendarPeriodPredictions->_rawValue;
                  swift_bridgeObjectRetain();
                  float v101 = static Imputation.imputeCalendarPrediction(calendarPeriodPredictions:target:lastPredictionDay:)((uint64_t)v99, v107, &v274);
                  Swift::Float v102 = v33;
                  swift_bridgeObjectRelease();
                  float v197 = v101;
                  Swift::Float v196 = v102;
                  unsigned __int8 v195 = v100;
                  lazy protocol witness table accessor for type UInt8 and conformance UInt8();
                  Float.init<A>(_:)();
                  appendFeature(_:_:_:_:_:_:_:_:_:_:)(v34, &v247, v199, &v246, v198, &v245, v101, &v244, v102, &v243);
                  unint64_t v191 = v100 | ((unint64_t)LODWORD(v199) << 32);
                  unint64_t v192 = LODWORD(v198) | ((unint64_t)LODWORD(v101) << 32);
                  Swift::Float v193 = v102;
                  char v194 = 0;
                  v190[3] = v107;
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : (flow: UInt8, daySHR10: Float, nightSHR10: Float, periodStartMean: Float, periodStartStd: Float)]);
                  Dictionary.subscript.setter();
                }
                else
                {
                  *(void *)&long long v103 = v205;
                  *((float *)&v103 + 2) = v206;
                  LOBYTE(v189) = HIBYTE(v203);
                  *((float *)&v189 + 1) = v204;
                  v190[0] = v205;
                  *(void *)&v190[1] = *(void *)((char *)&v103 + 4);
                  char v188 = HIBYTE(v203);
                  lazy protocol witness table accessor for type UInt8 and conformance UInt8();
                  Float.init<A>(_:)();
                  appendFeature(_:_:_:_:_:_:_:_:_:_:)(v31, &v247, v104, &v246, *(Swift::Float *)&v105, &v245, *((Swift::Float *)&v105 + 1), &v244, v106, &v243);
                }
              }
              Swift::UInt32 v210 = v269;
              specialized Array.append(_:)();
              float v209 = (float)v227;
              specialized Array.append(_:)();
              uint64_t v96 = v118;
            }
            else
            {
              uint64_t v96 = v118;
            }
            Swift::UInt32 v219 = currentSliceStart;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : (flow: UInt8, daySHR10: Float, nightSHR10: Float, periodStartMean: Float, periodStartStd: Float)]);
            Dictionary.removeValue(forKey:)();
            Swift::UInt32 v95 = currentSliceStart + 1;
            if (currentSliceStart == -1) {
              goto LABEL_129;
            }
            ++currentSliceStart;
            Swift::UInt32 v94 = v269 - 1;
            if (!v269) {
              goto LABEL_130;
            }
            --v269;
            if (v94 < minNumDaysToNextPeriod)
            {
              Swift::tuple_UInt32_UInt32_optional v322 = findPeriodPredictionLabel(_:_:_:_:)((Swift::OpaquePointer)v147, v95, sliceSize, minNumDaysToNextPeriod);
              if (v322.value._1)
              {
LABEL_67:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                break;
              }
              Swift::UInt32 v217 = v35;
              Swift::UInt32 v218 = v322.value._0;
              Swift::UInt32 v269 = v35;
              Swift::UInt32 v270 = v322.value._0;
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v118 = v96;
          }
          else
          {
            Swift::tuple_UInt32_UInt32_optional v321 = findPeriodPredictionLabel(disqualifyingDays:currentSliceStart:featureCaches:historicalPeriodsStartDays:sliceSize:minLabel:)((Swift::OpaquePointer)v112, &currentSliceStart, &featureCaches, (Swift::OpaquePointer)v147, sliceSize, minNumDaysToNextPeriod);
            if (v321.value._1) {
              goto LABEL_67;
            }
            Swift::UInt32 v183 = v26;
            Swift::UInt32 v184 = v321.value._0;
            Swift::UInt32 v269 = v26;
            Swift::UInt32 v270 = v321.value._0;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
        }
        else
        {
          Swift::tuple_UInt32_UInt32_optional v320 = findPeriodPredictionLabel(disqualifyingDays:currentSliceStart:featureCaches:historicalPeriodsStartDays:sliceSize:minLabel:)((Swift::OpaquePointer)disqualifyingDays, &currentSliceStart, &featureCaches, (Swift::OpaquePointer)v147, sliceSize, minNumDaysToNextPeriod);
          if (v320.value._1)
          {
            swift_bridgeObjectRelease();
            break;
          }
          Swift::UInt32 v181 = v25;
          Swift::UInt32 v182 = v320.value._0;
          Swift::UInt32 v269 = v25;
          Swift::UInt32 v270 = v320.value._0;
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        Swift::UInt32 v117 = v269 - maxNumDaysToNextPeriod + 1;
        if (v269 - maxNumDaysToNextPeriod == -1) {
          goto LABEL_133;
        }
        Swift::UInt32 v116 = currentSliceStart + v117;
        if (__CFADD__(currentSliceStart, v117)) {
          goto LABEL_134;
        }
        Swift::UInt32 v180 = currentSliceStart + v117;
        evictCaches(_:_:_:)(currentSliceStart, v116, &featureCaches);
        Swift::UInt32 currentSliceStart = v116;
        if (!maxNumDaysToNextPeriod) {
          goto LABEL_135;
        }
        Swift::UInt32 v269 = maxNumDaysToNextPeriod - 1;
      }
    }
    float v239 = 0.0;
    char v240 = 1;
    float v238 = 0.0;
    uint64_t v92 = v241;
    swift_bridgeObjectRetain();
    uint64_t v93 = MEMORY[0x25A2C0820](v92);
    swift_bridgeObjectRelease();
    if (v93 > 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v236 = static PFLStats.meanAndStd(_:)();
      float v237 = v36;
      float v89 = *(float *)&v236;
      char v90 = BYTE4(v236);
      float v91 = v36;
      swift_bridgeObjectRelease();
      float v239 = v89;
      char v240 = v90 & 1;
      float v238 = v91;
    }
    uint64_t v83 = v247._rawValue;
    swift_bridgeObjectRetain();
    Swift::Int v84 = v246._rawValue;
    swift_bridgeObjectRetain();
    NightingaleTraining::NumberOfDaysForFactorsEnum v85 = v245._rawValue;
    swift_bridgeObjectRetain();
    Swift::Int v86 = v244._rawValue;
    swift_bridgeObjectRetain();
    NightingaleTraining::NumberOfDaysForFactorsEnum v87 = v243._rawValue;
    swift_bridgeObjectRetain();
    Swift::Int v88 = (void *)v242;
    swift_bridgeObjectRetain();
    if (v122)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    else
    {
      float v82 = v121;
    }
    float v68 = v239;
    char v67 = v240;
    float v69 = v238;
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    swift_release();
    outlined destroy of [A]();
    swift_release();
    outlined destroy of [A]();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v70 = v83;
    uint64_t v71 = v84;
    int v72 = v85;
    uint64_t v73 = v86;
    id v74 = v87;
    uint64_t v75 = v88;
    float v76 = (float)v120;
    Swift::Float v77 = v82;
    Swift::Float v78 = v123;
    Swift::Float v79 = v68;
    char v80 = v67;
    Swift::Float v81 = v69;
    goto LABEL_123;
  }
LABEL_127:
  __break(1u);
LABEL_128:
  __break(1u);
LABEL_129:
  __break(1u);
LABEL_130:
  __break(1u);
LABEL_131:
  __break(1u);
LABEL_132:
  __break(1u);
  __break(1u);
LABEL_133:
  __break(1u);
LABEL_134:
  __break(1u);
LABEL_135:
  __break(1u);
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
}

BOOL implicit closure #1 in Featurizer.featurizeHRPeriodPrediction(flows:daySHR10s:nightSHR10s:calendarPeriodPredictions:historicalPeriods:cycleFactors:dummyPeriodLength:sliceSize:maxNumDaysToNextPeriod:minNumDaysToNextPeriod:minNumOfDaySHRPerSlice:)(_DWORD *a1, _DWORD *a2)
{
  return *a1 < *a2;
}

_DWORD *closure #1 in Featurizer.featurizeHRPeriodPrediction(flows:daySHR10s:nightSHR10s:calendarPeriodPredictions:historicalPeriods:cycleFactors:dummyPeriodLength:sliceSize:maxNumDaysToNextPeriod:minNumDaysToNextPeriod:minNumOfDaySHRPerSlice:)@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t findDaysNeedingDummyFlow(_:_:)(void *a1, int a2)
{
  int v20 = a2;
  Swift::UInt32 v26 = closure #1 in findDaysNeedingDummyFlow(_:_:);
  float v21 = (void (*)(char *, char *))partial apply for closure #2 in findDaysNeedingDummyFlow(_:_:);
  float v22 = closure #2 in HealthDataStoreQuery.queryDescriptors(_:_:_:);
  uint64_t v24 = 0;
  Swift::Float v34 = a1;
  int v33 = a2;
  uint64_t v23 = *a1;
  swift_bridgeObjectRetain();
  uint64_t v32 = v23;
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(start: UInt32, end: UInt32)]);
  lazy protocol witness table accessor for type [(start: UInt32, end: UInt32)] and conformance [A]();
  uint64_t v27 = 0;
  uint64_t v28 = _ArrayProtocol.filter(_:)();
  uint64_t v31 = v28;
  uint64_t v14 = &v7;
  MEMORY[0x270FA5388](&v7);
  Swift::UInt32 v15 = v6;
  void v6[4] = v2;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32]);
  unint64_t v3 = lazy protocol witness table accessor for type [(start: UInt32, end: UInt32)] and conformance [A]();
  uint64_t v4 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(v21, (uint64_t)v15, v25, v16, MEMORY[0x263F8E628], v3, MEMORY[0x263F8E658], v17);
  uint64_t v18 = 0;
  uint64_t v19 = v4;
  uint64_t v9 = v4;
  outlined destroy of [A]();
  uint64_t v30 = v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[UInt32]]);
  unint64_t v11 = lazy protocol witness table accessor for type [[UInt32]] and conformance [A]();
  unint64_t v12 = lazy protocol witness table accessor for type [UInt32] and conformance [A]();
  uint64_t v13 = Sequence.flatMap<A>(_:)();
  uint64_t v8 = v13;
  outlined destroy of [A]();
  uint64_t v29 = v8;
  return Set.init<A>(_:)();
}

Swift::tuple_UInt32_UInt32_optional __swiftcall findPeriodPredictionLabel(_:_:_:_:)(Swift::OpaquePointer a1, Swift::UInt32 a2, Swift::UInt32 a3, Swift::UInt32 a4)
{
  Swift::UInt32 v13 = a2;
  uint64_t rawValue = a1._rawValue;
  Swift::UInt32 v21 = a2;
  Swift::UInt32 v20 = a3;
  Swift::UInt32 v19 = a4;
  Swift::UInt32 v15 = a2 + a3;
  if (__CFADD__(a2, a3))
  {
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  Swift::UInt32 v12 = v15 + a4;
  if (__CFADD__(v15, a4)) {
    goto LABEL_24;
  }
  if (!v12)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  Swift::UInt32 v16 = v12 - 1;
  LODWORD(a1._rawValue) = static HIDPFLUtils.findClosest<A>(_:greaterOrEqualThan:)((uint64_t)a1._rawValue, (uint64_t)&v16, MEMORY[0x263F8E8F8], MEMORY[0x263F8E910], (uint64_t)&v17);
  if (v18)
  {
    Swift::UInt32 v10 = 0;
    char v11 = 1;
  }
  else
  {
    Swift::UInt32 v10 = v17;
    char v11 = 0;
  }
  if (v11)
  {
    Swift::UInt32 v7 = 0;
    char v8 = 1;
    goto LABEL_22;
  }
  Swift::UInt32 v9 = v13 + a3;
  if (__CFADD__(v13, a3)) {
    goto LABEL_26;
  }
  if (v10 < v9)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (v10 - v9 == -1)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  Swift::UInt32 v7 = v10;
  char v8 = 0;
LABEL_22:
  LODWORD(a1._rawValue) = v7;
  a2 = v8 & 1;
LABEL_29:
  result.value._0 = (Swift::UInt32)a1._rawValue;
  result.Swift::Bool is_nil = a3;
  result.value._1 = a2;
  return result;
}

uint64_t closure #2 in Featurizer.featurizeHRPeriodPrediction(flows:daySHR10s:nightSHR10s:calendarPeriodPredictions:historicalPeriods:cycleFactors:dummyPeriodLength:sliceSize:maxNumDaysToNextPeriod:minNumDaysToNextPeriod:minNumOfDaySHRPerSlice:)(_DWORD *a1, uint64_t a2)
{
  uint64_t v8 = 0;
  uint64_t v7 = 0;
  int v2 = a1[1];
  LODWORD(v8) = *a1;
  HIDWORD(v8) = v2;
  uint64_t v7 = a2;
  int v6 = v8;
  int v5 = v2;
  memset(v4, 0, sizeof(v4));
  AugmentedIntervalTree.insert(start:end:context:)((uint64_t)&v6, (uint64_t)&v5, v4);
  return outlined destroy of Pregnancy?((uint64_t)v4);
}

Swift::Void __swiftcall evictCaches(_:_:_:)(Swift::UInt32 a1, Swift::UInt32 a2, Swift::OpaquePointer *a3)
{
  if (a2 < a1)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<UInt32>);
  lazy protocol witness table accessor for type Range<UInt32> and conformance <> Range<A>();
  Collection<>.makeIterator()();
  while (1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<Range<UInt32>>);
    IndexingIterator.next()();
    if (v3) {
      break;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : (flow: UInt8, daySHR10: Float, nightSHR10: Float, periodStartMean: Float, periodStartStd: Float)]);
    Dictionary.removeValue(forKey:)();
  }
}

{
  char v3;

  if (a2 < a1)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<UInt32>);
  lazy protocol witness table accessor for type Range<UInt32> and conformance <> Range<A>();
  Collection<>.makeIterator()();
  while (1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<Range<UInt32>>);
    IndexingIterator.next()();
    if (v3) {
      break;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : (daySHR10: Float, nightSHR10: Float, periodStartMean: Float, periodStartStd: Float, daysSinceLastPeriodStart: Float, swt: Float, hrv: Float, respiratoryRate: Float, spo2: Float)]);
    Dictionary.removeValue(forKey:)();
  }
}

Swift::tuple_UInt32_UInt32_optional __swiftcall findPeriodPredictionLabel(disqualifyingDays:currentSliceStart:featureCaches:historicalPeriodsStartDays:sliceSize:minLabel:)(Swift::OpaquePointer disqualifyingDays, Swift::UInt32 *currentSliceStart, Swift::OpaquePointer *featureCaches, Swift::OpaquePointer historicalPeriodsStartDays, Swift::UInt32 sliceSize, Swift::UInt32 minLabel)
{
  Swift::UInt32 v6 = maxEnd<A>(_:)((uint64_t)disqualifyingDays._rawValue, MEMORY[0x263F8EE58] + 8);
  Swift::UInt32 v15 = v6 + 1;
  if (v6 == -1)
  {
    __break(1u);
  }
  else
  {
    evictCaches(_:_:_:)(*currentSliceStart, v15, featureCaches);
    *Swift::UInt32 currentSliceStart = v15;
    *(Swift::tuple_UInt32_UInt32_optional *)&Swift::UInt32 v6 = findPeriodPredictionLabel(_:_:_:_:)(historicalPeriodsStartDays, *currentSliceStart, sliceSize, minLabel);
    Swift::UInt32 v7 = v9 & 1;
  }
  result.value._1 = v7;
  result.value._0 = v6;
  result.Swift::Bool is_nil = v8;
  return result;
}

Swift::Void __swiftcall appendFeature(_:_:_:_:_:_:_:_:_:_:)(Swift::Float a1, Swift::OpaquePointer *a2, Swift::Float a3, Swift::OpaquePointer *a4, Swift::Float a5, Swift::OpaquePointer *a6, Swift::Float a7, Swift::OpaquePointer *a8, Swift::Float a9, Swift::OpaquePointer *a10)
{
}

uint64_t Featurizer.ensureAvailability(required:minAvailability:available:range:failedCounter:)(char a1, uint64_t a2, uint64_t a3, void *a4, double a5)
{
  double v22 = a5;
  uint64_t v23 = a2;
  uint64_t v24 = a4;
  uint64_t v25 = partial apply for closure #1 in Featurizer.ensureAvailability(required:minAvailability:available:range:failedCounter:);
  uint64_t v31 = 0;
  uint64_t v26 = 0;
  double v28 = 0.0;
  uint64_t v37 = a3;
  uint64_t v27 = a3;
  char v36 = a1 & 1;
  double v35 = a5;
  uint64_t v34 = a2;
  uint64_t v33 = a3;
  uint64_t v32 = a4;
  if ((a1 & 1) == 0)
  {
    int v21 = 1;
    return v21 & 1;
  }
  swift_bridgeObjectRetain();
  uint64_t v30 = v23;
  uint64_t v17 = v11;
  MEMORY[0x270FA5388](v11);
  char v18 = v10;
  v10[4] = v27;
  v10[5] = v5;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32]);
  lazy protocol witness table accessor for type [UInt32] and conformance [A]();
  uint64_t v20 = _ArrayProtocol.filter(_:)();
  uint64_t v13 = v20;
  uint64_t v14 = MEMORY[0x25A2C0830]();
  swift_bridgeObjectRelease();
  uint64_t result = v14;
  double v15 = (double)v14;
  int v16 = HIDWORD(v27) - v27;
  if (HIDWORD(v27) < v27)
  {
    __break(1u);
    goto LABEL_14;
  }
  int v12 = v16 + 1;
  if (v16 == -1)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v11[1] = &v29;
  int v29 = v12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  uint64_t result = Double.init<A>(_:)();
  double v28 = v15 / v7;
  if (v15 / v7 >= v22)
  {
    int v21 = 1;
    return v21 & 1;
  }
  BOOL v8 = __OFADD__(*v24, 1);
  v11[0] = *v24 + 1;
  char v9 = v8;
  if ((v9 & 1) == 0)
  {
    *uint64_t v24 = v11[0];
    int v21 = 0;
    return v21 & 1;
  }
LABEL_15:
  __break(1u);
  return result;
}

BOOL closure #1 in Featurizer.ensureAvailability(required:minAvailability:available:range:failedCounter:)(_DWORD *a1, uint64_t a2)
{
  return *a1 >= a2 && HIDWORD(a2) >= *a1;
}

Swift::Void __swiftcall Featurizer.updateFeature(feature:lastDayHasFeature:currentDay:cache:)(Swift::OpaquePointer feature, Swift::UInt32 *lastDayHasFeature, Swift::UInt32 currentDay, Swift::Float *cache)
{
  v12[1] = 0;
  uint64_t rawValue = feature._rawValue;
  uint64_t v14 = lastDayHasFeature;
  Swift::UInt32 v13 = currentDay;
  _DWORD v12[2] = cache;
  Swift::UInt32 v11 = currentDay;
  MEMORY[0x25A2C04B0](v12, &v11, feature._rawValue, MEMORY[0x263F8E8F8], MEMORY[0x263F8D5C8], MEMORY[0x263F8E908]);
  if ((v12[0] & 0x100000000) == 0) {
    *Swift::UInt32 lastDayHasFeature = currentDay;
  }
  Swift::UInt32 v9 = *lastDayHasFeature;
  MEMORY[0x25A2C04B0](&v10, &v9, feature._rawValue, MEMORY[0x263F8E8F8], MEMORY[0x263F8D5C8], MEMORY[0x263F8E908]);
  if ((v10 & 0x100000000) != 0)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    int v4 = v10;
  }
  *(_DWORD *)cache = v4;
}

Swift::Void __swiftcall Featurizer.updateFeature(required:feature:lastDay:to:currentDay:cache:)(Swift::Bool required, Swift::OpaquePointer feature, Swift::UInt32_optional *lastDay, Swift::OpaquePointer *to, Swift::UInt32 currentDay, Swift::Float *cache)
{
  if (required)
  {
    if (lastDay->is_nil)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    Featurizer.updateFeature(feature:lastDayHasFeature:currentDay:cache:)(feature, &lastDay->value, currentDay, cache);
    specialized Array.append(_:)();
  }
}

Swift::Void __swiftcall Featurizer.updateFeature(feature:lastDayHasFeature:currentDay:defaultValue:cache:)(Swift::OpaquePointer feature, Swift::UInt32_optional *lastDayHasFeature, Swift::UInt32 currentDay, Swift::Float defaultValue, Swift::Float *cache)
{
  uint64_t v19 = 0;
  int v15 = 0;
  Swift::UInt32 v14 = 0;
  uint64_t rawValue = feature._rawValue;
  uint64_t v23 = lastDayHasFeature;
  Swift::UInt32 v22 = currentDay;
  Swift::Float v21 = defaultValue;
  uint64_t v20 = cache;
  Swift::Float v18 = defaultValue;
  Swift::UInt32 value = lastDayHasFeature->value;
  if (!lastDayHasFeature->is_nil)
  {
    Swift::UInt32 v14 = lastDayHasFeature->value;
    Swift::UInt32 v12 = value;
    MEMORY[0x25A2C04B0](&v13, &v12, feature._rawValue, MEMORY[0x263F8E8F8], MEMORY[0x263F8D5C8], MEMORY[0x263F8E908]);
    if ((v13 & 0x100000000) != 0)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    else
    {
      float v6 = *(float *)&v13;
    }
    Swift::Float v18 = v6;
  }
  Swift::UInt32 v16 = currentDay;
  MEMORY[0x25A2C04B0](&v17, &v16, feature._rawValue, MEMORY[0x263F8E8F8], MEMORY[0x263F8D5C8], MEMORY[0x263F8E908]);
  float v5 = *(float *)&v17;
  if ((v17 & 0x100000000) == 0)
  {
    int v15 = v17;
    lastDayHasFeature->Swift::UInt32 value = currentDay;
    lastDayHasFeature->Swift::Bool is_nil = 0;
    Swift::Float v18 = v5;
  }
  *cache = v18;
}

Swift::Void __swiftcall Featurizer.updateFeature(required:feature:lastDayHasFeature:to:currentDay:defaultValue:cache:)(Swift::Bool required, Swift::OpaquePointer feature, Swift::UInt32_optional *lastDayHasFeature, Swift::OpaquePointer *to, Swift::UInt32 currentDay, Swift::Float defaultValue, Swift::Float *cache)
{
  if (required)
  {
    Featurizer.updateFeature(feature:lastDayHasFeature:currentDay:defaultValue:cache:)(feature, lastDayHasFeature, currentDay, defaultValue, cache);
    specialized Array.append(_:)();
  }
}

void Featurizer.featurizeNightingaleD(pregnancies:swts:hrvs:respiratoryRates:spo2s:daySHR10s:nightSHR10s:calendarPeriodPredictions:historicalPeriods:cycleFactors:hyperParam:today:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12)
{
  uint64_t v14 = MEMORY[0x270FA5388](a1);
  uint64_t v491 = v15;
  uint64_t v512 = v14;
  v513._uint64_t rawValue = v16;
  v514._uint64_t rawValue = v17;
  v515._uint64_t rawValue = v18;
  v516._uint64_t rawValue = v19;
  v527._uint64_t rawValue = v20;
  v517._uint64_t rawValue = v21;
  uint64_t v518 = v22;
  uint64_t v519 = a9;
  uint64_t v520 = a10;
  uint64_t v521 = a11;
  int v522 = a12;
  uint64_t v492 = v12;
  uint64_t v529 = v13;
  uint64_t v530 = implicit closure #1 in Featurizer.featurizeHRPeriodPrediction(flows:daySHR10s:nightSHR10s:calendarPeriodPredictions:historicalPeriods:cycleFactors:dummyPeriodLength:sliceSize:maxNumDaysToNextPeriod:minNumDaysToNextPeriod:minNumOfDaySHRPerSlice:);
  uint64_t v493 = implicit closure #1 in Featurizer.featurizeHRPeriodPrediction(flows:daySHR10s:nightSHR10s:calendarPeriodPredictions:historicalPeriods:cycleFactors:dummyPeriodLength:sliceSize:maxNumDaysToNextPeriod:minNumDaysToNextPeriod:minNumOfDaySHRPerSlice:);
  uint64_t v494 = implicit closure #1 in Featurizer.featurizeHRPeriodPrediction(flows:daySHR10s:nightSHR10s:calendarPeriodPredictions:historicalPeriods:cycleFactors:dummyPeriodLength:sliceSize:maxNumDaysToNextPeriod:minNumDaysToNextPeriod:minNumOfDaySHRPerSlice:);
  uint64_t v495 = implicit closure #1 in Featurizer.featurizeHRPeriodPrediction(flows:daySHR10s:nightSHR10s:calendarPeriodPredictions:historicalPeriods:cycleFactors:dummyPeriodLength:sliceSize:maxNumDaysToNextPeriod:minNumDaysToNextPeriod:minNumOfDaySHRPerSlice:);
  Swift::UInt32 v496 = implicit closure #1 in Featurizer.featurizeHRPeriodPrediction(flows:daySHR10s:nightSHR10s:calendarPeriodPredictions:historicalPeriods:cycleFactors:dummyPeriodLength:sliceSize:maxNumDaysToNextPeriod:minNumDaysToNextPeriod:minNumOfDaySHRPerSlice:);
  int v497 = implicit closure #1 in Featurizer.featurizeHRPeriodPrediction(flows:daySHR10s:nightSHR10s:calendarPeriodPredictions:historicalPeriods:cycleFactors:dummyPeriodLength:sliceSize:maxNumDaysToNextPeriod:minNumDaysToNextPeriod:minNumOfDaySHRPerSlice:);
  uint64_t v498 = implicit closure #1 in Featurizer.featurizeHRPeriodPrediction(flows:daySHR10s:nightSHR10s:calendarPeriodPredictions:historicalPeriods:cycleFactors:dummyPeriodLength:sliceSize:maxNumDaysToNextPeriod:minNumDaysToNextPeriod:minNumOfDaySHRPerSlice:);
  uint64_t v499 = (void (*)(char *, char *))closure #1 in Featurizer.featurizeHRPeriodPrediction(flows:daySHR10s:nightSHR10s:calendarPeriodPredictions:historicalPeriods:cycleFactors:dummyPeriodLength:sliceSize:maxNumDaysToNextPeriod:minNumDaysToNextPeriod:minNumOfDaySHRPerSlice:);
  uint64_t v500 = partial apply for closure #3 in Featurizer.featurizeNightingaleD(pregnancies:swts:hrvs:respiratoryRates:spo2s:daySHR10s:nightSHR10s:calendarPeriodPredictions:historicalPeriods:cycleFactors:hyperParam:today:);
  uint64_t v501 = partial apply for closure #3 in Featurizer.featurizeNightingaleD(pregnancies:swts:hrvs:respiratoryRates:spo2s:daySHR10s:nightSHR10s:calendarPeriodPredictions:historicalPeriods:cycleFactors:hyperParam:today:);
  uint64_t v502 = partial apply for closure #4 in Featurizer.featurizeNightingaleD(pregnancies:swts:hrvs:respiratoryRates:spo2s:daySHR10s:nightSHR10s:calendarPeriodPredictions:historicalPeriods:cycleFactors:hyperParam:today:);
  int v503 = (void (*)(char *, char *))closure #1 in Featurizer.featurizeHRPeriodPrediction(flows:daySHR10s:nightSHR10s:calendarPeriodPredictions:historicalPeriods:cycleFactors:dummyPeriodLength:sliceSize:maxNumDaysToNextPeriod:minNumDaysToNextPeriod:minNumOfDaySHRPerSlice:);
  unsigned __int8 v504 = partial apply for closure #6 in Featurizer.featurizeNightingaleD(pregnancies:swts:hrvs:respiratoryRates:spo2s:daySHR10s:nightSHR10s:calendarPeriodPredictions:historicalPeriods:cycleFactors:hyperParam:today:);
  uint64_t v505 = "Fatal error";
  uint64_t v506 = "Range requires lowerBound <= upperBound";
  int v507 = "Swift/ClosedRange.swift";
  uint64_t v508 = "Unexpectedly found nil while unwrapping an Optional value";
  uint64_t v509 = "NightingaleTraining/Featurizer.swift";
  unint64_t v510 = (void (*)(char *, char *))closure #1 in Featurizer.featurizeHRPeriodPrediction(flows:daySHR10s:nightSHR10s:calendarPeriodPredictions:historicalPeriods:cycleFactors:dummyPeriodLength:sliceSize:maxNumDaysToNextPeriod:minNumDaysToNextPeriod:minNumOfDaySHRPerSlice:);
  to._uint64_t rawValue = 0;
  v735._uint64_t rawValue = 0;
  uint64_t v734 = 0;
  uint64_t v733 = 0;
  uint64_t v732 = 0;
  v731._uint64_t rawValue = 0;
  v730._uint64_t rawValue = 0;
  v729._uint64_t rawValue = 0;
  v728._uint64_t rawValue = 0;
  uint64_t v727 = 0;
  uint64_t v726 = 0;
  uint64_t v725 = 0;
  uint64_t v724 = 0;
  uint64_t v723 = 0;
  uint64_t v722 = 0;
  uint64_t v721 = 0;
  uint64_t v720 = 0;
  uint64_t v719 = 0;
  uint64_t v718 = 0;
  uint64_t v717 = 0;
  uint64_t v716 = 0;
  uint64_t v715 = 0;
  uint64_t v714 = 0;
  v713._uint64_t rawValue = 0;
  uint64_t v711 = 0;
  uint64_t v709 = 0;
  uint64_t v707 = 0;
  uint64_t v705 = 0;
  uint64_t v703 = 0;
  uint64_t v701 = 0;
  uint64_t v699 = 0;
  uint64_t v697 = 0;
  unsigned int v696 = 0;
  uint64_t v695 = 0;
  int __c = 0;
  memset(v694, 0, sizeof(v694));
  v692[0] = 0;
  uint64_t v691 = 0;
  uint64_t v690 = 0;
  uint64_t v689 = 0;
  uint64_t v688 = 0;
  uint64_t v687 = 0;
  uint64_t v686 = 0;
  uint64_t v685 = 0;
  uint64_t v684 = 0;
  uint64_t v683 = 0;
  uint64_t v682 = 0;
  uint64_t v681 = 0;
  uint64_t v680 = 0;
  uint64_t v679 = 0;
  v678[6] = 0;
  v678[7] = 0;
  uint64_t v656 = 0;
  int v646 = 0;
  Swift::UInt32 v634 = 0;
  Swift::UInt32 v633 = 0;
  Swift::UInt32 v618 = 0;
  unsigned __int8 v617 = 0;
  Swift::UInt32 v616 = 0;
  uint64_t v612 = 0;
  v610[0] = 0;
  *(void *)((char *)v610 + 5) = 0;
  float v605 = 0.0;
  unsigned int v598 = 0;
  int v570 = 0;
  float v568 = 0.0;
  int v567 = 0;
  memset(v564, 0, sizeof(v564));
  uint64_t v546 = 0;
  uint64_t v545 = 0;
  char v537 = 0;
  uint64_t v536 = 0;
  uint64_t v749 = v512;
  uint64_t rawValue = v513._rawValue;
  uint64_t v747 = v514._rawValue;
  uint64_t v746 = v515._rawValue;
  uint64_t v745 = v516._rawValue;
  uint64_t v744 = v527._rawValue;
  uint64_t v743 = v517._rawValue;
  uint64_t v742 = v518;
  uint64_t v741 = a9;
  uint64_t v740 = a10;
  uint64_t v739 = a11;
  int v738 = a12;
  uint64_t v737 = v12;
  to._uint64_t rawValue = (void *)specialized Array.init()();
  v735._uint64_t rawValue = (void *)specialized Array.init()();
  uint64_t v734 = specialized Array.init()();
  uint64_t v733 = specialized Array.init()();
  uint64_t v732 = specialized Array.init()();
  v731._uint64_t rawValue = (void *)specialized Array.init()();
  v730._uint64_t rawValue = (void *)specialized Array.init()();
  v729._uint64_t rawValue = (void *)specialized Array.init()();
  v728._uint64_t rawValue = (void *)specialized Array.init()();
  uint64_t v727 = specialized Array.init()();
  uint64_t v726 = specialized Array.init()();
  uint64_t v524 = MEMORY[0x263F8E8F8];
  uint64_t v525 = MEMORY[0x263F8D5C8];
  uint64_t v526 = MEMORY[0x263F8E908];
  uint64_t v725 = Dictionary.init()();
  uint64_t v724 = Dictionary.init()();
  uint64_t v723 = Dictionary.init()();
  uint64_t v722 = specialized Array.init()();
  uint64_t v721 = specialized Array.init()();
  uint64_t v720 = specialized Array.init()();
  uint64_t v719 = specialized Array.init()();
  uint64_t v718 = specialized Array.init()();
  uint64_t v717 = specialized Array.init()();
  uint64_t v716 = specialized Array.init()();
  uint64_t v715 = specialized Array.init()();
  uint64_t v714 = specialized Array.init()();
  uint64_t v523 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (daySHR10: Float, nightSHR10: Float, periodStartMean: Float, periodStartStd: Float, daysSinceLastPeriodStart: Float, swt: Float, hrv: Float, respiratoryRate: Float, spo2: Float));
  v713._uint64_t rawValue = (void *)Dictionary.init()();
  uint64_t v712 = swift_bridgeObjectRetain();
  uint64_t v528 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : Float].Keys);
  unint64_t v531 = lazy protocol witness table accessor for type [UInt32 : Float].Keys and conformance [A : B].Keys();
  uint64_t v532 = v13;
  uint64_t v533 = Sequence.sorted(by:)();
  if (v13)
  {
    __break(1u);
    __break(1u);
    __break(1u);
    __break(1u);
    __break(1u);
    __break(1u);
    __break(1u);
    __break(1u);
    __break(1u);
    __break(1u);
    __break(1u);
LABEL_195:
    __break(1u);
LABEL_196:
    __break(1u);
LABEL_197:
    __break(1u);
LABEL_198:
    uint64_t v177 = v263;
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    uint64_t v178 = v177;
  }
  else
  {
    uint64_t v488 = v533;
    outlined destroy of [A]();
    uint64_t v711 = v533;
    uint64_t v710 = swift_bridgeObjectRetain();
    uint64_t v489 = 0;
    uint64_t v490 = Sequence.sorted(by:)();
    uint64_t v485 = v490;
    outlined destroy of [A]();
    uint64_t v709 = v490;
    uint64_t v708 = swift_bridgeObjectRetain();
    uint64_t v486 = 0;
    uint64_t v487 = Sequence.sorted(by:)();
    uint64_t v482 = v487;
    outlined destroy of [A]();
    uint64_t v707 = v487;
    uint64_t v706 = swift_bridgeObjectRetain();
    uint64_t v483 = 0;
    uint64_t v484 = Sequence.sorted(by:)();
    uint64_t v479 = v484;
    outlined destroy of [A]();
    uint64_t v705 = v484;
    uint64_t v704 = swift_bridgeObjectRetain();
    uint64_t v480 = 0;
    uint64_t v481 = Sequence.sorted(by:)();
    uint64_t v476 = v481;
    outlined destroy of [A]();
    uint64_t v703 = v481;
    uint64_t v702 = swift_bridgeObjectRetain();
    uint64_t v477 = 0;
    uint64_t v478 = Sequence.sorted(by:)();
    uint64_t v472 = v478;
    outlined destroy of [A]();
    uint64_t v701 = v478;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (periodStartMean: Float, periodStartStd: Float));
    uint64_t v700 = swift_bridgeObjectRetain();
    uint64_t v473 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : (periodStartMean: Float, periodStartStd: Float)].Keys);
    lazy protocol witness table accessor for type [UInt32 : (periodStartMean: Float, periodStartStd: Float)].Keys and conformance [A : B].Keys();
    uint64_t v474 = 0;
    uint64_t v475 = Sequence.sorted(by:)();
    uint64_t v466 = v475;
    outlined destroy of [A]();
    uint64_t v699 = v475;
    v698[1] = v519;
    uint64_t v467 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(start: UInt32, end: UInt32)]);
    unint64_t v469 = lazy protocol witness table accessor for type [(start: UInt32, end: UInt32)] and conformance [A]();
    uint64_t v470 = 0;
    uint64_t v471 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(v499, 0, v467, MEMORY[0x263F8E8F8], MEMORY[0x263F8E628], v469, MEMORY[0x263F8E658], v468);
    float v460 = v698;
    v698[0] = v471;
    uint64_t v459 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32]);
    lazy protocol witness table accessor for type [UInt32] and conformance [A]();
    uint64_t v461 = Set.init<A>(_:)();
    uint64_t v697 = v461;
    unsigned int v462 = HyperParams.sliceSize.getter();
    unsigned int v696 = v462;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AugmentedIntervalTree<UInt32, Pregnancy>);
    uint64_t v463 = AugmentedIntervalTree.__allocating_init()();
    uint64_t v695 = v463;
    swift_bridgeObjectRetain();
    uint64_t v464 = v750;
    Dictionary.makeIterator()();
    memcpy(v694, v750, sizeof(v694));
    for (uint64_t i = 0; ; uint64_t i = v445)
    {
      uint64_t v456 = i;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8 : [(start: UInt32, end: UInt32)]].Iterator);
      Dictionary.Iterator.next()();
      uint64_t v457 = v692[1];
      uint64_t v458 = v693;
      if (!v693) {
        break;
      }
      int v454 = v457;
      uint64_t v455 = v458;
      uint64_t v452 = v458;
      int v453 = v457;
      char v537 = v457;
      uint64_t v536 = v458;
      if (v457 == NgtMenstrualAlgorithmsPhase.rawValue.getter(8))
      {
        uint64_t v445 = v456;
      }
      else if (v453 == NgtMenstrualAlgorithmsPhase.rawValue.getter(0))
      {
        uint64_t v445 = v456;
      }
      else
      {
        if (v453 == NgtMenstrualAlgorithmsPhase.rawValue.getter(1))
        {
          if (HyperParams.excludeLactationSlices.getter())
          {
            uint64_t v534 = v452;
            swift_retain();
            lazy protocol witness table accessor for type [(start: UInt32, end: UInt32)] and conformance [A]();
            Sequence.forEach(_:)();
            uint64_t v451 = v456;
            swift_release();
            uint64_t v450 = 0;
          }
          else
          {
            uint64_t v450 = v456;
          }
          uint64_t v449 = v450;
        }
        else
        {
          uint64_t v449 = v456;
        }
        uint64_t v448 = v449;
        if (HyperParams.excludeContraceptionSlices.getter())
        {
          uint64_t v535 = v452;
          swift_retain();
          lazy protocol witness table accessor for type [(start: UInt32, end: UInt32)] and conformance [A]();
          Sequence.forEach(_:)();
          uint64_t v447 = v448;
          swift_release();
          uint64_t v446 = 0;
        }
        else
        {
          uint64_t v446 = v448;
        }
        uint64_t v445 = v446;
      }
      uint64_t v444 = v445;
      swift_bridgeObjectRelease();
    }
    outlined destroy of [UInt8 : [(start: UInt32, end: UInt32)]].Iterator();
    if (HyperParams.excludeOtherPregnancySlices.getter())
    {
      uint64_t v538 = v512;
      swift_retain();
      uint64_t v442 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Pregnancy]);
      lazy protocol witness table accessor for type [Pregnancy] and conformance [A]();
      Sequence.forEach(_:)();
      uint64_t v443 = v456;
      swift_release();
      uint64_t v441 = 0;
    }
    else
    {
      uint64_t v441 = v456;
    }
    uint64_t v439 = v441;
    v692[0] = 0;
    uint64_t v691 = 0;
    uint64_t v690 = 0;
    uint64_t v689 = 0;
    uint64_t v688 = 0;
    uint64_t v687 = 0;
    uint64_t v686 = 0;
    uint64_t v685 = 0;
    uint64_t v684 = 0;
    uint64_t v683 = 0;
    uint64_t v682 = 0;
    uint64_t v681 = 0;
    uint64_t v680 = 0;
    uint64_t v679 = 0;
    swift_bridgeObjectRetain();
    v678[5] = v512;
    uint64_t v438 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Pregnancy]);
    lazy protocol witness table accessor for type [Pregnancy] and conformance [A]();
    Collection<>.makeIterator()();
    uint64_t v440 = v441;
    while (1)
    {
      uint64_t v437 = v440;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[Pregnancy]>);
      IndexingIterator.next()();
      if (!v678[3]) {
        break;
      }
      uint64_t v428 = v653;
      outlined init with take of HealthDataQuery(v678, v653);
      uint64_t v430 = v654;
      uint64_t v429 = v655;
      __swift_project_boxed_opaque_existential_1(v428, v654);
      int v23 = (*(uint64_t (**)(uint64_t))(v429 + 56))(v430);
      Swift::OpaquePointer v433 = &v650;
      int v650 = v23;
      unint64_t v431 = lazy protocol witness table accessor for type Int and conformance Int();
      unint64_t v432 = lazy protocol witness table accessor for type Int and conformance Int();
      unint64_t v434 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      SignedInteger<>.init<A>(_:)();
      uint64_t v435 = v651;
      uint64_t v24 = HyperParams.minSliceAnchorDelta.getter();
      uint64_t v436 = v435 + v24;
      if (__OFADD__(v435, v24))
      {
        __break(1u);
LABEL_208:
        __break(1u);
LABEL_209:
        __break(1u);
LABEL_210:
        __break(1u);
LABEL_211:
        __break(1u);
LABEL_212:
        __break(1u);
LABEL_213:
        __break(1u);
LABEL_214:
        __break(1u);
LABEL_215:
        __break(1u);
LABEL_216:
        __break(1u);
LABEL_217:
        __break(1u);
LABEL_218:
        __break(1u);
LABEL_219:
        __break(1u);
LABEL_220:
        __break(1u);
LABEL_221:
        __break(1u);
LABEL_222:
        __break(1u);
LABEL_223:
        __break(1u);
LABEL_224:
        __break(1u);
LABEL_225:
        __break(1u);
LABEL_226:
        __break(1u);
LABEL_227:
        __break(1u);
LABEL_228:
        __break(1u);
LABEL_229:
        __break(1u);
        return;
      }
      unsigned int v648 = v462;
      SignedInteger<>.init<A>(_:)();
      uint64_t v427 = v436 - v649;
      if (__OFSUB__(v436, v649)) {
        goto LABEL_208;
      }
      uint64_t v426 = v427 + 1;
      if (__OFADD__(v427, 1)) {
        goto LABEL_209;
      }
      uint64_t v417 = &v647;
      uint64_t v647 = v426;
      unint64_t v415 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      unint64_t v416 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      unint64_t v418 = lazy protocol witness table accessor for type Int and conformance Int();
      uint64_t v423 = MEMORY[0x263F8E8F8];
      uint64_t v422 = MEMORY[0x263F8D6C8];
      UnsignedInteger<>.init<A>(_:)();
      Swift::UInt32 v419 = v652;
      int v646 = v652;
      uint64_t v421 = v654;
      uint64_t v420 = v655;
      __swift_project_boxed_opaque_existential_1(v653, v654);
      int v642 = (*(uint64_t (**)(uint64_t))(v420 + 56))(v421);
      SignedInteger<>.init<A>(_:)();
      uint64_t v424 = v643;
      uint64_t v28 = HyperParams.maxSliceAnchorDelta.getter();
      uint64_t v425 = v424 + v28;
      if (__OFADD__(v424, v28)) {
        goto LABEL_210;
      }
      uint64_t v411 = &v641;
      uint64_t v641 = v425;
      int v639 = v522;
      uint64_t v410 = MEMORY[0x263F8D6C8];
      uint64_t v412 = MEMORY[0x263F8E8F8];
      SignedInteger<>.init<A>(_:)();
      uint64_t v638 = v640;
      min<A>(_:_:)();
      uint64_t v413 = v644;
      unsigned int v636 = v462;
      SignedInteger<>.init<A>(_:)();
      uint64_t v414 = v413 - v637;
      if (__OFSUB__(v413, v637)) {
        goto LABEL_211;
      }
      uint64_t v409 = v414 + 1;
      if (__OFADD__(v414, 1)) {
        goto LABEL_212;
      }
      uint64_t v635 = v409;
      UnsignedInteger<>.init<A>(_:)();
      Swift::UInt32 v405 = v645;
      Swift::UInt32 v634 = v645;
      Swift::UInt32 v633 = v419;
      uint64_t v408 = &v631;
      int v407 = 0;
      int v631 = 0;
      int v406 = 1;
      char v632 = 1;
      unsigned int v629 = 0;
      char v630 = 1;
      v628.Swift::UInt32 value = 0;
      v628.Swift::Bool is_nil = 1;
      v627.Swift::UInt32 value = 0;
      v627.Swift::Bool is_nil = 1;
      v626.Swift::UInt32 value = 0;
      v626.Swift::Bool is_nil = 1;
      v625.Swift::UInt32 value = 0;
      v625.Swift::Bool is_nil = 1;
      v624.Swift::UInt32 value = 0;
      v624.Swift::Bool is_nil = 1;
      Swift::Bool v32 = HyperParams.isCalendarPeriodPredictionRequired()();
      if (static Imputation.ensureImputation(required:available:target:strategy:missingCounter:imputedDay:)(v32, v466, v419, v407, v692, (uint64_t)v408))
      {
        BOOL PeriodStart = HyperParams.isDaysSinceLastPeriodStartRequired()();
        uint64_t v34 = v437;
        BOOL v402 = PeriodStart;
        uint64_t v623 = v519;
        uint64_t v35 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(v503, 0, v467, MEMORY[0x263F8E8F8], MEMORY[0x263F8E628], v469, MEMORY[0x263F8E658], v468);
        uint64_t v403 = v34;
        uint64_t v404 = v35;
        if (v34) {
          goto LABEL_195;
        }
        uint64_t v400 = v404;
        int v401 = v419 - 1;
        if (!v419) {
          goto LABEL_213;
        }
        int v399 = static Imputation.ensureImputation(required:available:target:strategy:missingCounter:imputedDay:)(v402, v400, v401, 0, &v691, (uint64_t)&v629);
        swift_bridgeObjectRelease();
        if ((v399 & 1) != 0
          && (Swift::Bool v36 = HyperParams.isDaySHRRequired()(),
              (static Imputation.ensureImputation(required:available:target:strategy:missingCounter:imputedDay:)(v36, v488, v419, 1, &v690, (uint64_t)&v628) & 1) != 0)&& (v37 = HyperParams.isSWTRequired()(), (static Imputation.ensureImputation(required:available:target:strategy:missingCounter:imputedDay:)(v37, v482, v419, 1, &v689, (uint64_t)&v627) & 1) != 0)&& (Swift::Bool v38 = HyperParams.isHRVRequired()(), (static Imputation.ensureImputation(required:available:target:strategy:missingCounter:imputedDay:)(v38, v479, v419,
                 1,
                 &v688,
                 (uint64_t)&v626) & 1) != 0)
          && (Swift::Bool v39 = HyperParams.isRespiratoryRateRequired()(),
              (static Imputation.ensureImputation(required:available:target:strategy:missingCounter:imputedDay:)(v39, v472, v419, 1, &v687, (uint64_t)&v625) & 1) != 0)&& (Swift::Bool v40 = HyperParams.isSpO2Required()(), (static Imputation.ensureImputation(required:available:target:strategy:missingCounter:imputedDay:)(v40, v476, v419, 1, &v686, (uint64_t)&v624) & 1) != 0))
        {
          int v619 = v419;
          static HIDPFLUtils.findClosest<A>(_:lessOrEqualThan:)(v485, (uint64_t)&v619, MEMORY[0x263F8E8F8], MEMORY[0x263F8E910], (uint64_t)&v620);
          uint64_t v398 = v620;
          if (v621)
          {
            v622.Swift::UInt32 value = 0;
            v622.Swift::Bool is_nil = 1;
          }
          else
          {
            int v397 = v398;
            v622.Swift::UInt32 value = v398;
            v622.Swift::Bool is_nil = 0;
          }
          uint64_t v396 = v403;
          while (1)
          {
            uint64_t v395 = v396;
            if (v405 < v633) {
              break;
            }
            Swift::UInt32 v394 = v633 + 1;
            if (v633 == -1) {
              goto LABEL_214;
            }
            Swift::UInt32 v618 = v394;
            unsigned __int8 v617 = 1;
            Swift::UInt32 v393 = v633 + v462;
            if (__CFADD__(v633, v462)) {
              goto LABEL_215;
            }
            Swift::UInt32 v392 = v393 - 1;
            if (!v393) {
              goto LABEL_216;
            }
            Swift::UInt32 v616 = v392;
            Swift::UInt32 v615 = v633;
            Swift::UInt32 v614 = v392;
            v613[5] = AugmentedIntervalTree.search(start:end:)((uint64_t)&v615, (uint64_t)&v614);
            int v386 = v613;
            outlined init with copy of HealthDataQuery((uint64_t)v653, (uint64_t)v613);
            int v387 = &v169;
            MEMORY[0x270FA5388](&v169);
            int v388 = &v166;
            uint64_t v168 = v42;
            uint64_t v389 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Interval<UInt32, Pregnancy>]);
            lazy protocol witness table accessor for type [Interval<UInt32, Pregnancy>] and conformance [A]();
            uint64_t v43 = v395;
            uint64_t v44 = _ArrayProtocol.filter(_:)();
            uint64_t v390 = v43;
            uint64_t v391 = v44;
            if (v43) {
              goto LABEL_196;
            }
            uint64_t v383 = v391;
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v613);
            uint64_t v612 = v383;
            swift_bridgeObjectRetain();
            uint64_t v384 = &v611;
            uint64_t v611 = v383;
            lazy protocol witness table accessor for type [Interval<UInt32, Pregnancy>] and conformance [A]();
            int v385 = Collection.isEmpty.getter();
            outlined destroy of [A]();
            if ((v385 & 1) == 0)
            {
              uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Pregnancy);
              int v46 = maxEnd<A>(_:)(v383, v45);
              Swift::UInt32 v382 = v46 + 1;
              if (v46 == -1) {
                goto LABEL_227;
              }
              Swift::UInt32 v618 = v382;
              Swift::UInt32 v541 = v382;
              uint64_t v378 = MEMORY[0x263F8D6C8];
              uint64_t v379 = MEMORY[0x263F8E8F8];
              SignedInteger<>.init<A>(_:)();
              uint64_t v380 = v542;
              Swift::UInt32 v539 = v633;
              SignedInteger<>.init<A>(_:)();
              uint64_t v381 = v380 - v540;
              if (__OFSUB__(v380, v540)) {
                goto LABEL_228;
              }
              uint64_t v377 = v679 + v381;
              if (__OFADD__(v679, v381)) {
                goto LABEL_229;
              }
              uint64_t v679 = v377;
              unsigned __int8 v617 = 0;
            }
            if (v617)
            {
              uint64_t v376 = v654;
              uint64_t v375 = v655;
              __swift_project_boxed_opaque_existential_1(v653, v654);
              if ((*(uint64_t (**)(uint64_t))(v375 + 64))(v376))
              {
                uint64_t v372 = v654;
                uint64_t v371 = v655;
                __swift_project_boxed_opaque_existential_1(v653, v654);
                int v549 = (*(uint64_t (**)(uint64_t))(v371 + 56))(v372);
                SignedInteger<>.init<A>(_:)();
                uint64_t v373 = v550;
                uint64_t started = HyperParams.pregLabelStartAnchorDelta.getter();
                uint64_t v374 = v373 + started;
                if (__OFADD__(v373, started)) {
                  goto LABEL_224;
                }
                Swift::UInt32 v547 = v392;
                SignedInteger<>.init<A>(_:)();
                uint64_t v370 = v374 - v548;
                if (__OFSUB__(v374, v548)) {
                  goto LABEL_225;
                }
                uint64_t v546 = v370;
                uint64_t v369 = v654;
                uint64_t v368 = v655;
                __swift_project_boxed_opaque_existential_1(v653, v654);
                (*(void (**)(uint64_t))(v368 + 48))(v369);
                if (PregnancySource.isFactorType()()) {
                  uint64_t v367 = HyperParams.dropNegativeSlicesForInferredFactorLMP.getter();
                }
                else {
                  uint64_t v367 = HyperParams.dropNegativeSlicesForInferredTestLMP.getter();
                }
                uint64_t v366 = v367;
                uint64_t v545 = v367;
                if (v370 > 0)
                {
                  unsigned __int8 v617 = v366 < v370;
                  if (v366 >= v370)
                  {
                    Swift::UInt32 v364 = v633;
                    uint64_t v543 = v370;
                    UnsignedInteger<>.init<A>(_:)();
                    Swift::UInt32 v365 = v364 + v544;
                    if (__CFADD__(v364, v544)) {
                      goto LABEL_226;
                    }
                    Swift::UInt32 v618 = v365;
                  }
                }
              }
            }
            int v363 = v617;
            swift_retain();
            swift_retain();
            swift_bridgeObjectRetain();
            if (v363)
            {
              BOOL v358 = HyperParams.isDaySHRRequired()();
              double v359 = HyperParams.minDaySHRAvailability.getter();
              uint64_t v360 = MEMORY[0x263F8E8F8];
              uint64_t v552 = swift_bridgeObjectRetain();
              uint64_t v361 = Array.init<A>(_:)();
              Swift::UInt32 v362 = v633;
              if (v392 < v633)
              {
                LOBYTE(v166) = 2;
                uint64_t v167 = 347;
                LODWORD(v168) = 0;
                _assertionFailure(_:_:file:line:flags:)();
                __break(1u);
              }
              unint64_t v551 = __PAIR64__(v392, v362);
              int v356 = Featurizer.ensureAvailability(required:minAvailability:available:range:failedCounter:)(v358, v361, __SPAIR64__(v392, v362), &v685, v359);
              swift_bridgeObjectRelease();
              int v357 = v356;
            }
            else
            {
              int v357 = 0;
            }
            int v355 = v357;
            swift_release();
            swift_release();
            swift_bridgeObjectRelease();
            unsigned __int8 v617 = v355 & 1;
            swift_retain();
            swift_retain();
            swift_bridgeObjectRetain();
            if (v355)
            {
              BOOL v350 = HyperParams.isNightSHRRequired()();
              double v351 = HyperParams.minNightSHRAvailability.getter();
              uint64_t v352 = MEMORY[0x263F8E8F8];
              uint64_t v554 = swift_bridgeObjectRetain();
              uint64_t v353 = Array.init<A>(_:)();
              Swift::UInt32 v354 = v633;
              if (v392 < v633)
              {
                LOBYTE(v166) = 2;
                uint64_t v167 = 347;
                LODWORD(v168) = 0;
                _assertionFailure(_:_:file:line:flags:)();
                __break(1u);
              }
              unint64_t v553 = __PAIR64__(v392, v354);
              int v348 = Featurizer.ensureAvailability(required:minAvailability:available:range:failedCounter:)(v350, v353, __SPAIR64__(v392, v354), &v684, v351);
              swift_bridgeObjectRelease();
              int v349 = v348;
            }
            else
            {
              int v349 = 0;
            }
            int v347 = v349;
            swift_release();
            swift_release();
            swift_bridgeObjectRelease();
            unsigned __int8 v617 = v347 & 1;
            swift_retain();
            swift_retain();
            swift_bridgeObjectRetain();
            if (v347)
            {
              BOOL v342 = HyperParams.isSWTRequired()();
              double v343 = HyperParams.minWristTempAvailability.getter();
              uint64_t v344 = MEMORY[0x263F8E8F8];
              uint64_t v556 = swift_bridgeObjectRetain();
              uint64_t v345 = Array.init<A>(_:)();
              Swift::UInt32 v346 = v633;
              if (v392 < v633)
              {
                LOBYTE(v166) = 2;
                uint64_t v167 = 347;
                LODWORD(v168) = 0;
                _assertionFailure(_:_:file:line:flags:)();
                __break(1u);
              }
              unint64_t v555 = __PAIR64__(v392, v346);
              int v340 = Featurizer.ensureAvailability(required:minAvailability:available:range:failedCounter:)(v342, v345, __SPAIR64__(v392, v346), &v683, v343);
              swift_bridgeObjectRelease();
              int v341 = v340;
            }
            else
            {
              int v341 = 0;
            }
            int v339 = v341;
            swift_release();
            swift_release();
            swift_bridgeObjectRelease();
            unsigned __int8 v617 = v339 & 1;
            swift_retain();
            swift_retain();
            swift_bridgeObjectRetain();
            if (v339)
            {
              BOOL v334 = HyperParams.isHRVRequired()();
              double v335 = HyperParams.minHRVAvailability.getter();
              uint64_t v336 = MEMORY[0x263F8E8F8];
              uint64_t v558 = swift_bridgeObjectRetain();
              uint64_t v337 = Array.init<A>(_:)();
              Swift::UInt32 v338 = v633;
              if (v392 < v633)
              {
                LOBYTE(v166) = 2;
                uint64_t v167 = 347;
                LODWORD(v168) = 0;
                _assertionFailure(_:_:file:line:flags:)();
                __break(1u);
              }
              unint64_t v557 = __PAIR64__(v392, v338);
              int v332 = Featurizer.ensureAvailability(required:minAvailability:available:range:failedCounter:)(v334, v337, __SPAIR64__(v392, v338), &v682, v335);
              swift_bridgeObjectRelease();
              int v333 = v332;
            }
            else
            {
              int v333 = 0;
            }
            int v331 = v333;
            swift_release();
            swift_release();
            swift_bridgeObjectRelease();
            unsigned __int8 v617 = v331 & 1;
            swift_retain();
            swift_retain();
            swift_bridgeObjectRetain();
            if (v331)
            {
              BOOL v326 = HyperParams.isSpO2Required()();
              double v327 = HyperParams.minSpO2Availability.getter();
              uint64_t v328 = MEMORY[0x263F8E8F8];
              uint64_t v560 = swift_bridgeObjectRetain();
              uint64_t v329 = Array.init<A>(_:)();
              Swift::UInt32 v330 = v633;
              if (v392 < v633)
              {
                LOBYTE(v166) = 2;
                uint64_t v167 = 347;
                LODWORD(v168) = 0;
                _assertionFailure(_:_:file:line:flags:)();
                __break(1u);
              }
              unint64_t v559 = __PAIR64__(v392, v330);
              int v324 = Featurizer.ensureAvailability(required:minAvailability:available:range:failedCounter:)(v326, v329, __SPAIR64__(v392, v330), &v680, v327);
              swift_bridgeObjectRelease();
              int v325 = v324;
            }
            else
            {
              int v325 = 0;
            }
            int v323 = v325;
            swift_release();
            swift_release();
            swift_bridgeObjectRelease();
            unsigned __int8 v617 = v323 & 1;
            swift_retain();
            swift_retain();
            swift_bridgeObjectRetain();
            if (v323)
            {
              BOOL v318 = HyperParams.isRespiratoryRateRequired()();
              double v319 = HyperParams.minRespiratoryRateAvailability.getter();
              uint64_t v320 = MEMORY[0x263F8E8F8];
              uint64_t v562 = swift_bridgeObjectRetain();
              uint64_t v321 = Array.init<A>(_:)();
              Swift::UInt32 v322 = v633;
              if (v392 < v633)
              {
                LOBYTE(v166) = 2;
                uint64_t v167 = 347;
                LODWORD(v168) = 0;
                _assertionFailure(_:_:file:line:flags:)();
                __break(1u);
              }
              unint64_t v561 = __PAIR64__(v392, v322);
              int v316 = Featurizer.ensureAvailability(required:minAvailability:available:range:failedCounter:)(v318, v321, __SPAIR64__(v392, v322), &v681, v319);
              swift_bridgeObjectRelease();
              int v317 = v316;
            }
            else
            {
              int v317 = 0;
            }
            int v315 = v317;
            swift_release();
            swift_release();
            swift_bridgeObjectRelease();
            unsigned __int8 v617 = v315 & 1;
            if (v315)
            {
              Swift::UInt32 v307 = v633;
              if (v392 < v633)
              {
                LOBYTE(v166) = 2;
                uint64_t v167 = 347;
                LODWORD(v168) = 0;
                _assertionFailure(_:_:file:line:flags:)();
                __break(1u);
              }
              Swift::UInt32 v608 = v307;
              Swift::UInt32 v609 = v392;
              uint64_t v305 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClosedRange<UInt32>);
              lazy protocol witness table accessor for type ClosedRange<UInt32> and conformance <> ClosedRange<A>();
              Collection<>.makeIterator()();
              uint64_t v306 = v390;
              while (1)
              {
                uint64_t v303 = v306;
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<ClosedRange<UInt32>>);
                IndexingIterator.next()();
                unsigned int v304 = v606;
                if (v607) {
                  break;
                }
                unsigned int v302 = v304;
                unsigned int v296 = v304;
                unsigned int v598 = v304;
                unsigned int v594 = v304;
                MEMORY[0x25A2C04B0](v595, &v594, v713._rawValue, MEMORY[0x263F8E8F8], v523, MEMORY[0x263F8E908]);
                uint64_t v297 = v595[0];
                uint64_t v298 = v595[1];
                uint64_t v299 = v595[2];
                uint64_t v300 = v595[3];
                int v301 = v596;
                if (v597)
                {
                  int v290 = 0;
                  Swift::Float v585 = 0.0;
                  int v586 = 0;
                  float v587 = 0.0;
                  int v588 = 0;
                  int v589 = 0;
                  int v590 = 0;
                  int v591 = 0;
                  int v592 = 0;
                  int v593 = 0;
                  if (HyperParams.isCalendarPeriodPredictionRequired()())
                  {
                    if (v632)
                    {
                      LOBYTE(v166) = 2;
                      uint64_t v167 = 604;
                      LODWORD(v168) = 0;
                      _assertionFailure(_:_:file:line:flags:)();
                      __break(1u);
                    }
                    float v288 = static Imputation.imputeCalendarPrediction(calendarPeriodPredictions:target:lastPredictionDay:)(v518, v296, &v631);
                    int v289 = v62;
                    float v568 = v288;
                    int v567 = v62;
                    if (HyperParams.isPSMRequired()())
                    {
                      float v565 = v288;
                      specialized Array.append(_:)();
                      float v587 = v288;
                    }
                    if (HyperParams.isPSSRequired()())
                    {
                      int v566 = v289;
                      specialized Array.append(_:)();
                      int v588 = v289;
                    }
                  }
                  if (HyperParams.isDaysSinceLastPeriodStartRequired()())
                  {
                    unsigned int v287 = v296 - 1;
                    if (!v296) {
                      goto LABEL_220;
                    }
                    unsigned int v572 = v287;
                    if (Set.contains(_:)())
                    {
                      unsigned int v286 = v296 - 1;
                      if (!v296) {
                        goto LABEL_222;
                      }
                      unsigned int v629 = v286;
                      char v630 = 0;
                    }
                    unsigned int v285 = v629;
                    if (v630)
                    {
                      LOBYTE(v166) = 2;
                      uint64_t v167 = 619;
                      LODWORD(v168) = 0;
                      _assertionFailure(_:_:file:line:flags:)();
                      __break(1u);
                    }
                    else
                    {
                      unsigned int v284 = v285;
                    }
                    unsigned int v283 = v296 - v284;
                    if (v296 < v284) {
                      goto LABEL_221;
                    }
                    unsigned int v571 = v283;
                    Float.init<A>(_:)();
                    int v282 = v63;
                    int v570 = v63;
                    int v569 = v63;
                    specialized Array.append(_:)();
                    int v589 = v282;
                  }
                  Swift::Bool v64 = HyperParams.isDaySHRRequired()();
                  int v280 = 1;
                  int v274 = &v585;
                  Featurizer.updateFeature(required:feature:lastDay:to:currentDay:cache:)(v64, v527, &v628, &to, v296, &v585);
                  Swift::Bool v65 = HyperParams.isNightSHRRequired()();
                  Featurizer.updateFeature(required:feature:lastDayHasFeature:to:currentDay:defaultValue:cache:)(v65, v517, &v622, &v735, v296, 64.88, v274 + 1);
                  Swift::Bool v66 = HyperParams.isSWTRequired()();
                  Featurizer.updateFeature(required:feature:lastDay:to:currentDay:cache:)(v66, v513, &v627, &v731, v296, v274 + 5);
                  Swift::Bool v67 = HyperParams.isHRVRequired()();
                  Featurizer.updateFeature(required:feature:lastDay:to:currentDay:cache:)(v67, v514, &v626, &v730, v296, v274 + 6);
                  Swift::Bool v68 = HyperParams.isRespiratoryRateRequired()();
                  Featurizer.updateFeature(required:feature:lastDay:to:currentDay:cache:)(v68, v515, &v625, &v729, v296, v274 + 7);
                  Swift::Bool v69 = HyperParams.isSpO2Required()();
                  Featurizer.updateFeature(required:feature:lastDay:to:currentDay:cache:)(v69, v516, &v624, &v728, v296, v274 + 8);
                  uint64_t v276 = v583;
                  *(Swift::Float *)uint64_t v583 = v585;
                  v583[1] = v586;
                  *(float *)&v583[2] = v587;
                  v583[3] = v588;
                  v583[4] = v589;
                  v583[5] = v590;
                  v583[6] = v591;
                  v583[7] = v592;
                  v583[8] = v593;
                  int v279 = 0;
                  char v584 = 0;
                  Swift::UInt32 v275 = &v582;
                  unsigned int v582 = v296;
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : (daySHR10: Float, nightSHR10: Float, periodStartMean: Float, periodStartStd: Float, daysSinceLastPeriodStart: Float, swt: Float, hrv: Float, respiratoryRate: Float, spo2: Float)]);
                  Dictionary.subscript.setter();
                  Swift::UInt32_optional v278 = &v580;
                  float v580 = v587;
                  char v581 = v279 & 1 & v280;
                  char v277 = &v579;
                  unsigned int v579 = v296;
                  uint64_t v281 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : Float]);
                  Dictionary.subscript.setter();
                  int v577 = v588;
                  char v578 = v279 & 1 & v280;
                  unsigned int v576 = v296;
                  Dictionary.subscript.setter();
                  int v574 = v589;
                  char v575 = v279 & 1 & v280;
                  unsigned int v573 = v296;
                  Dictionary.subscript.setter();
                  uint64_t v306 = v303;
                }
                else
                {
                  uint64_t v291 = v297;
                  uint64_t v292 = v298;
                  uint64_t v293 = v299;
                  uint64_t v294 = v300;
                  int v295 = v301;
                  *(void *)uint64_t v564 = v297;
                  *(void *)&v564[8] = v298;
                  *(void *)&v564[16] = v299;
                  *(void *)&v564[24] = v300;
                  *(_DWORD *)&v564[32] = v301;
                  int v166 = v301;
                  uint64_t v167 = (uint64_t)&v729;
                  uint64_t v168 = &v728;
                  appendFeature(hyperParams:_:_:_:_:_:_:_:_:_:_:)();
                  uint64_t v306 = v303;
                }
              }
              float v605 = 0.0;
              Swift::UInt32 v603 = v392;
              uint64_t v270 = MEMORY[0x263F8D6C8];
              uint64_t v271 = MEMORY[0x263F8E8F8];
              SignedInteger<>.init<A>(_:)();
              uint64_t v267 = v604;
              uint64_t v269 = v654;
              uint64_t v268 = v655;
              __swift_project_boxed_opaque_existential_1(v653, v654);
              int v601 = (*(uint64_t (**)(uint64_t))(v268 + 56))(v269);
              SignedInteger<>.init<A>(_:)();
              uint64_t v272 = v602;
              uint64_t v70 = HyperParams.pregLabelStartAnchorDelta.getter();
              uint64_t v273 = v272 + v70;
              if (__OFADD__(v272, v70)) {
                goto LABEL_217;
              }
              if (v267 >= v273) {
                float v605 = 1.0;
              }
              float v600 = v605;
              specialized Array.append(_:)();
              Swift::UInt32 v599 = v392;
              specialized Array.append(_:)();
              Swift::UInt32 v265 = v633;
              Swift::UInt32 v266 = v633 + 1;
              if (v633 == -1) {
                goto LABEL_218;
              }
              evictCaches(_:_:_:)(v265, v266, &v713);
              Swift::UInt32 v264 = v633 + 1;
              if (v633 == -1) {
                goto LABEL_219;
              }
              Swift::UInt32 v633 = v264;
              swift_bridgeObjectRelease();
              uint64_t v396 = v303;
            }
            else
            {
              evictCaches(_:_:_:)(v633, v618, &v713);
              Swift::UInt32 v633 = v618;
              Swift::Bool v53 = HyperParams.isCalendarPeriodPredictionRequired()();
              static Imputation.impute(required:available:target:strategy:imputedDay:)(v53, v466, v618, 0, (uint64_t)&v631);
              BOOL v54 = HyperParams.isDaysSinceLastPeriodStartRequired()();
              uint64_t v55 = v390;
              BOOL v312 = v54;
              uint64_t v563 = v519;
              uint64_t v56 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(v510, 0, v467, MEMORY[0x263F8E8F8], MEMORY[0x263F8E628], v469, MEMORY[0x263F8E658], v468);
              uint64_t v313 = v55;
              uint64_t v314 = v56;
              if (v55) {
                goto LABEL_197;
              }
              uint64_t v310 = v314;
              int v311 = v618 - 1;
              if (!v618) {
                goto LABEL_223;
              }
              int v309 = 1;
              static Imputation.impute(required:available:target:strategy:imputedDay:)(v312, v310, v311, 0, (uint64_t)&v629);
              swift_bridgeObjectRelease();
              Swift::Bool v57 = HyperParams.isDaySHRRequired()();
              Swift::UInt32 v308 = &v628;
              static Imputation.impute(required:available:target:strategy:imputedDay:)(v57, v488, v618, v309, (uint64_t)&v628);
              Swift::Bool v58 = HyperParams.isSWTRequired()();
              static Imputation.impute(required:available:target:strategy:imputedDay:)(v58, v482, v618, v309, (uint64_t)v308);
              Swift::Bool v59 = HyperParams.isHRVRequired()();
              static Imputation.impute(required:available:target:strategy:imputedDay:)(v59, v479, v618, v309, (uint64_t)&v626);
              Swift::Bool v60 = HyperParams.isRespiratoryRateRequired()();
              static Imputation.impute(required:available:target:strategy:imputedDay:)(v60, v472, v618, v309, (uint64_t)&v625);
              Swift::Bool v61 = HyperParams.isSpO2Required()();
              static Imputation.impute(required:available:target:strategy:imputedDay:)(v61, v476, v618, v309, (uint64_t)&v624);
              swift_bridgeObjectRelease();
              uint64_t v396 = v313;
            }
          }
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v653);
          uint64_t v440 = v395;
        }
        else
        {
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v653);
          uint64_t v440 = v403;
        }
      }
      else
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v653);
        uint64_t v440 = v437;
      }
    }
    outlined destroy of [A]();
    int v72 = HyperParams.daySHRStatsOption.getter();
    uint64_t v73 = v437;
    int v259 = v72;
    uint64_t v260 = v726;
    swift_bridgeObjectRetain();
    uint64_t v74 = Featurizer.stats(option:sliceEndDays:feature:sliceSize:)(v259, v260, (uint64_t)v527._rawValue, v462);
    uint64_t v261 = v73;
    uint64_t v262 = v74;
    uint64_t v263 = v73;
    if (v73) {
      goto LABEL_198;
    }
    uint64_t v253 = v262;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v722 = v253;
    swift_bridgeObjectRelease();
    int v75 = HyperParams.nightSHRStatsOption.getter();
    uint64_t v76 = v261;
    int v254 = v75;
    uint64_t v255 = v726;
    swift_bridgeObjectRetain();
    uint64_t v77 = Featurizer.stats(option:sliceEndDays:feature:sliceSize:)(v254, v255, (uint64_t)v517._rawValue, v462);
    uint64_t v256 = v76;
    uint64_t v257 = v77;
    uint64_t v258 = v76;
    if (v76)
    {
      uint64_t v176 = v258;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      outlined destroy of [A]();
      uint64_t v178 = v176;
    }
    else
    {
      uint64_t v246 = v257;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      uint64_t v721 = v246;
      swift_bridgeObjectRelease();
      int v78 = HyperParams.pSMStatsOption.getter();
      uint64_t v79 = v256;
      int v247 = v78;
      uint64_t v248 = v726;
      swift_bridgeObjectRetain();
      uint64_t v249 = v725;
      swift_bridgeObjectRetain();
      uint64_t v80 = Featurizer.stats(option:sliceEndDays:feature:sliceSize:)(v247, v248, v249, v462);
      uint64_t v250 = v79;
      uint64_t v251 = v80;
      uint64_t v252 = v79;
      if (v79)
      {
        uint64_t v175 = v252;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined destroy of [A]();
        outlined destroy of [A]();
        outlined destroy of [A]();
        outlined destroy of [A]();
        outlined destroy of [A]();
        outlined destroy of [A]();
        outlined destroy of [A]();
        outlined destroy of [A]();
        outlined destroy of [A]();
        outlined destroy of [A]();
        outlined destroy of [A]();
        outlined destroy of [A]();
        outlined destroy of [A]();
        outlined destroy of [A]();
        outlined destroy of [A]();
        outlined destroy of [A]();
        outlined destroy of [A]();
        outlined destroy of [A]();
        outlined destroy of [A]();
        outlined destroy of [A]();
        outlined destroy of [A]();
        outlined destroy of [A]();
        outlined destroy of [A]();
        outlined destroy of [A]();
        uint64_t v178 = v175;
      }
      else
      {
        uint64_t v239 = v251;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        uint64_t v720 = v239;
        swift_bridgeObjectRelease();
        int v81 = HyperParams.pSSStatsOption.getter();
        uint64_t v82 = v250;
        int v240 = v81;
        uint64_t v241 = v726;
        swift_bridgeObjectRetain();
        uint64_t v242 = v724;
        swift_bridgeObjectRetain();
        uint64_t v83 = Featurizer.stats(option:sliceEndDays:feature:sliceSize:)(v240, v241, v242, v462);
        uint64_t v243 = v82;
        uint64_t v244 = v83;
        uint64_t v245 = v82;
        if (v82)
        {
          uint64_t v174 = v245;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined destroy of [A]();
          outlined destroy of [A]();
          outlined destroy of [A]();
          outlined destroy of [A]();
          outlined destroy of [A]();
          outlined destroy of [A]();
          outlined destroy of [A]();
          outlined destroy of [A]();
          outlined destroy of [A]();
          outlined destroy of [A]();
          outlined destroy of [A]();
          outlined destroy of [A]();
          outlined destroy of [A]();
          outlined destroy of [A]();
          outlined destroy of [A]();
          outlined destroy of [A]();
          outlined destroy of [A]();
          outlined destroy of [A]();
          outlined destroy of [A]();
          outlined destroy of [A]();
          outlined destroy of [A]();
          outlined destroy of [A]();
          outlined destroy of [A]();
          outlined destroy of [A]();
          uint64_t v178 = v174;
        }
        else
        {
          uint64_t v232 = v244;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          uint64_t v719 = v232;
          swift_bridgeObjectRelease();
          int PeriodStartStats = HyperParams.daysSinceLastPeriodStartStatsOption.getter();
          uint64_t v85 = v243;
          int v233 = PeriodStartStats;
          uint64_t v234 = v726;
          swift_bridgeObjectRetain();
          uint64_t v235 = v723;
          swift_bridgeObjectRetain();
          uint64_t v86 = Featurizer.stats(option:sliceEndDays:feature:sliceSize:)(v233, v234, v235, v462);
          uint64_t v236 = v85;
          uint64_t v237 = v86;
          uint64_t v238 = v85;
          if (v85)
          {
            uint64_t v173 = v238;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            outlined destroy of [A]();
            outlined destroy of [A]();
            outlined destroy of [A]();
            outlined destroy of [A]();
            outlined destroy of [A]();
            outlined destroy of [A]();
            outlined destroy of [A]();
            outlined destroy of [A]();
            outlined destroy of [A]();
            outlined destroy of [A]();
            outlined destroy of [A]();
            outlined destroy of [A]();
            outlined destroy of [A]();
            outlined destroy of [A]();
            outlined destroy of [A]();
            outlined destroy of [A]();
            outlined destroy of [A]();
            outlined destroy of [A]();
            outlined destroy of [A]();
            outlined destroy of [A]();
            outlined destroy of [A]();
            outlined destroy of [A]();
            outlined destroy of [A]();
            outlined destroy of [A]();
            uint64_t v178 = v173;
          }
          else
          {
            uint64_t v226 = v237;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRetain();
            uint64_t v718 = v226;
            swift_bridgeObjectRelease();
            int v87 = HyperParams.sWTStatsOption.getter();
            uint64_t v88 = v236;
            int v227 = v87;
            uint64_t v228 = v726;
            swift_bridgeObjectRetain();
            uint64_t v89 = Featurizer.stats(option:sliceEndDays:feature:sliceSize:)(v227, v228, (uint64_t)v513._rawValue, v462);
            uint64_t v229 = v88;
            uint64_t v230 = v89;
            uint64_t v231 = v88;
            if (v88)
            {
              uint64_t v172 = v231;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_release();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              outlined destroy of [A]();
              uint64_t v178 = v172;
            }
            else
            {
              uint64_t v220 = v230;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRetain();
              uint64_t v717 = v220;
              swift_bridgeObjectRelease();
              int v90 = HyperParams.hrvStatsOption.getter();
              uint64_t v91 = v229;
              int v221 = v90;
              uint64_t v222 = v726;
              swift_bridgeObjectRetain();
              uint64_t v92 = Featurizer.stats(option:sliceEndDays:feature:sliceSize:)(v221, v222, (uint64_t)v514._rawValue, v462);
              uint64_t v223 = v91;
              uint64_t v224 = v92;
              uint64_t v225 = v91;
              if (v91)
              {
                uint64_t v171 = v225;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_release();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                outlined destroy of [A]();
                uint64_t v178 = v171;
              }
              else
              {
                uint64_t v214 = v224;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRetain();
                uint64_t v716 = v214;
                swift_bridgeObjectRelease();
                int v93 = HyperParams.respiratoryRateStatsOption.getter();
                uint64_t v94 = v223;
                int v215 = v93;
                uint64_t v216 = v726;
                swift_bridgeObjectRetain();
                uint64_t v95 = Featurizer.stats(option:sliceEndDays:feature:sliceSize:)(v215, v216, (uint64_t)v515._rawValue, v462);
                uint64_t v217 = v94;
                uint64_t v218 = v95;
                uint64_t v219 = v94;
                if (v94)
                {
                  uint64_t v170 = v219;
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_release();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  outlined destroy of [A]();
                  uint64_t v178 = v170;
                }
                else
                {
                  uint64_t v208 = v218;
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRetain();
                  uint64_t v715 = v208;
                  swift_bridgeObjectRelease();
                  int v96 = HyperParams.spO2StatsOption.getter();
                  uint64_t v97 = v217;
                  int v209 = v96;
                  uint64_t v210 = v726;
                  swift_bridgeObjectRetain();
                  uint64_t v98 = Featurizer.stats(option:sliceEndDays:feature:sliceSize:)(v209, v210, (uint64_t)v516._rawValue, v462);
                  uint64_t v211 = v97;
                  uint64_t v212 = v98;
                  uint64_t v213 = v97;
                  if (v97)
                  {
                    uint64_t v169 = v213;
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_release();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    outlined destroy of [A]();
                    outlined destroy of [A]();
                    outlined destroy of [A]();
                    outlined destroy of [A]();
                    outlined destroy of [A]();
                    outlined destroy of [A]();
                    outlined destroy of [A]();
                    outlined destroy of [A]();
                    outlined destroy of [A]();
                    outlined destroy of [A]();
                    outlined destroy of [A]();
                    outlined destroy of [A]();
                    outlined destroy of [A]();
                    outlined destroy of [A]();
                    outlined destroy of [A]();
                    outlined destroy of [A]();
                    outlined destroy of [A]();
                    outlined destroy of [A]();
                    outlined destroy of [A]();
                    outlined destroy of [A]();
                    outlined destroy of [A]();
                    outlined destroy of [A]();
                    outlined destroy of [A]();
                    outlined destroy of [A]();
                    uint64_t v178 = v169;
                  }
                  else
                  {
                    uint64_t v99 = v246;
                    uint64_t v100 = v253;
                    uint64_t v204 = v212;
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRetain();
                    int v185 = &v714;
                    uint64_t v714 = v204;
                    swift_bridgeObjectRelease();
                    uint64_t v184 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Int));
                    uint64_t v183 = _allocateUninitializedArray<A>(_:)();
                    uint64_t v182 = v101;
                    int v180 = 1;
                    Swift::String v102 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("MissingLastCalendarPeriodPredictionDay", 0x26uLL, 1);
                    char v103 = v180;
                    uint64_t v104 = v182;
                    *(Swift::String *)uint64_t v182 = v102;
                    *(void *)(v104 + 16) = v692[0];
                    Swift::String v105 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("MissingLastHistoricalPeriodStartDay", 0x23uLL, v103 & 1);
                    char v106 = v180;
                    uint64_t v107 = v182;
                    *(Swift::String *)(v182 + 24) = v105;
                    *(void *)(v107 + 40) = v691;
                    Swift::String v108 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("MissingLastDaySHRDay", 0x14uLL, v106 & 1);
                    char v109 = v180;
                    uint64_t v110 = v182;
                    *(Swift::String *)(v182 + 48) = v108;
                    *(void *)(v110 + 64) = v690;
                    uint64_t v179 = 17;
                    Swift::String v111 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("MissingLastSWTDay", 0x11uLL, v109 & 1);
                    char v112 = v180;
                    uint64_t v113 = v182;
                    Builtin::Word v114 = v179;
                    *(Swift::String *)(v182 + 72) = v111;
                    *(void *)(v113 + 88) = v689;
                    Swift::String v115 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("MissingLastHRVDay", v114, v112 & 1);
                    char v116 = v180;
                    uint64_t v117 = v182;
                    *(Swift::String *)(v182 + 96) = v115;
                    *(void *)(v117 + 112) = v688;
                    Swift::String v118 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("MissingLastRespiratoryRateDay", 0x1DuLL, v116 & 1);
                    char v119 = v180;
                    uint64_t v120 = v182;
                    *(Swift::String *)(v182 + 120) = v118;
                    *(void *)(v120 + 136) = v687;
                    Swift::String v121 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("MissingLastSpO2Day", 0x12uLL, v119 & 1);
                    char v122 = v180;
                    uint64_t v123 = v182;
                    *(Swift::String *)(v182 + 144) = v121;
                    *(void *)(v123 + 160) = v686;
                    Swift::String v124 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("FailedDaySHRAvailability", 0x18uLL, v122 & 1);
                    char v125 = v180;
                    uint64_t v126 = v182;
                    *(Swift::String *)(v182 + 168) = v124;
                    *(void *)(v126 + 184) = v685;
                    Swift::String v127 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("FailedNightSHRAvailability", 0x1AuLL, v125 & 1);
                    char v128 = v180;
                    uint64_t v129 = v182;
                    *(Swift::String *)(v182 + 192) = v127;
                    *(void *)(v129 + 208) = v684;
                    uint64_t v181 = 21;
                    Swift::String v130 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("FailedSWTAvailability", 0x15uLL, v128 & 1);
                    char v131 = v180;
                    uint64_t v132 = v182;
                    Builtin::Word v133 = v181;
                    *(Swift::String *)(v182 + 216) = v130;
                    *(void *)(v132 + 232) = v683;
                    Swift::String v134 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("FailedHRVAvailability", v133, v131 & 1);
                    char v135 = v180;
                    uint64_t v136 = v182;
                    *(Swift::String *)(v182 + 240) = v134;
                    *(void *)(v136 + 256) = v682;
                    Swift::String v137 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("FailedRespiratoryRateAvailability", 0x21uLL, v135 & 1);
                    char v138 = v180;
                    uint64_t v139 = v182;
                    *(Swift::String *)(v182 + 264) = v137;
                    *(void *)(v139 + 280) = v681;
                    Swift::String v140 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("FailedSpO2Availability", 0x16uLL, v138 & 1);
                    char v141 = v180;
                    uint64_t v142 = v182;
                    Builtin::Word v143 = v181;
                    *(Swift::String *)(v182 + 288) = v140;
                    *(void *)(v142 + 304) = v680;
                    Swift::String v144 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ExcludedSlicesDueToCF", v143, v141 & 1);
                    uint64_t v145 = v182;
                    *(Swift::String *)(v182 + 312) = v144;
                    *(void *)(v145 + 328) = v679;
                    _finalizeUninitializedArray<A>(_:)();
                    uint64_t v207 = Dictionary.init(dictionaryLiteral:)();
                    uint64_t v656 = v207;
                    p_Swift::OpaquePointer to = &to;
                    uint64_t v146 = to._rawValue;
                    swift_bridgeObjectRetain();
                    unsigned __int8 v195 = &v735;
                    uint64_t v147 = v735._rawValue;
                    swift_bridgeObjectRetain();
                    char v194 = &v734;
                    uint64_t v197 = v734;
                    swift_bridgeObjectRetain();
                    Swift::Float v193 = &v733;
                    uint64_t v198 = v733;
                    swift_bridgeObjectRetain();
                    unint64_t v192 = &v732;
                    uint64_t v199 = v732;
                    swift_bridgeObjectRetain();
                    unint64_t v191 = &v731;
                    unsigned __int8 v200 = v731._rawValue;
                    swift_bridgeObjectRetain();
                    id v190 = &v730;
                    __int16 v201 = v730._rawValue;
                    swift_bridgeObjectRetain();
                    uint64_t v189 = &v729;
                    Swift::UInt32 v202 = v729._rawValue;
                    swift_bridgeObjectRetain();
                    char v188 = &v728;
                    uint64_t v203 = v728._rawValue;
                    swift_bridgeObjectRetain();
                    uint64_t v186 = &v726;
                    uint64_t v205 = v726;
                    swift_bridgeObjectRetain();
                    int v187 = &v727;
                    uint64_t v206 = v727;
                    swift_bridgeObjectRetain();
                    swift_release();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    outlined destroy of [A]();
                    outlined destroy of [A]();
                    outlined destroy of [A]();
                    outlined destroy of [A]();
                    outlined destroy of [A]();
                    outlined destroy of [A]();
                    outlined destroy of [A]();
                    outlined destroy of [A]();
                    outlined destroy of [A]();
                    outlined destroy of [A]();
                    outlined destroy of [A]();
                    outlined destroy of [A]();
                    outlined destroy of [A]();
                    outlined destroy of [A]();
                    outlined destroy of [A]();
                    outlined destroy of [A]();
                    outlined destroy of [A]();
                    outlined destroy of [A]();
                    outlined destroy of [A]();
                    outlined destroy of [A]();
                    outlined destroy of [A]();
                    outlined destroy of [A]();
                    outlined destroy of [A]();
                    outlined destroy of [A]();
                    uint64_t v148 = v491;
                    int v657 = v146;
                    uint64_t v658 = v100;
                    uint64_t v659 = v147;
                    uint64_t v660 = v99;
                    uint64_t v661 = v197;
                    uint64_t v662 = v239;
                    uint64_t v663 = v198;
                    uint64_t v664 = v232;
                    uint64_t v665 = v199;
                    uint64_t v666 = v226;
                    uint64_t v667 = v200;
                    uint64_t v668 = v220;
                    uint64_t v669 = v201;
                    uint64_t v670 = v214;
                    uint64_t v671 = v202;
                    uint64_t v672 = v208;
                    uint64_t v673 = v203;
                    uint64_t v674 = v204;
                    uint64_t v675 = v205;
                    uint64_t v676 = v206;
                    uint64_t v677 = v207;
                    uint64_t v149 = v197;
                    uint64_t v150 = v239;
                    uint64_t v151 = v198;
                    uint64_t v152 = v232;
                    uint64_t v153 = v199;
                    uint64_t v154 = v226;
                    char v155 = v200;
                    uint64_t v156 = v220;
                    char v157 = v201;
                    uint64_t v158 = v214;
                    int v159 = v202;
                    uint64_t v160 = v208;
                    unint64_t v161 = v203;
                    uint64_t v162 = v204;
                    uint64_t v163 = v205;
                    uint64_t v164 = v206;
                    uint64_t v165 = v207;
                    *uint64_t v491 = v146;
                    v148[1] = v100;
                    v148[2] = v147;
                    v148[3] = v99;
                    v148[4] = v149;
                    v148[5] = v150;
                    v148[6] = v151;
                    v148[7] = v152;
                    v148[8] = v153;
                    v148[9] = v154;
                    v148[10] = v155;
                    v148[11] = v156;
                    v148[12] = v157;
                    v148[13] = v158;
                    v148[14] = v159;
                    v148[15] = v160;
                    v148[16] = v161;
                    v148[17] = v162;
                    v148[18] = v163;
                    v148[19] = v164;
                    v148[20] = v165;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t closure #2 in Featurizer.featurizeNightingaleD(pregnancies:swts:hrvs:respiratoryRates:spo2s:daySHR10s:nightSHR10s:calendarPeriodPredictions:historicalPeriods:cycleFactors:hyperParam:today:)(_DWORD *a1, uint64_t a2)
{
  uint64_t v8 = 0;
  uint64_t v7 = 0;
  int v2 = a1[1];
  LODWORD(v8) = *a1;
  HIDWORD(v8) = v2;
  uint64_t v7 = a2;
  int v6 = v8;
  int v5 = v2;
  memset(v4, 0, sizeof(v4));
  AugmentedIntervalTree.insert(start:end:context:)((uint64_t)&v6, (uint64_t)&v5, v4);
  return outlined destroy of Pregnancy?((uint64_t)v4);
}

uint64_t closure #4 in Featurizer.featurizeNightingaleD(pregnancies:swts:hrvs:respiratoryRates:spo2s:daySHR10s:nightSHR10s:calendarPeriodPredictions:historicalPeriods:cycleFactors:hyperParam:today:)(void *a1, uint64_t a2)
{
  uint64_t v12 = a1;
  uint64_t v11 = a2;
  uint64_t v4 = a1[3];
  uint64_t v3 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  int v10 = (*(uint64_t (**)(uint64_t))(v3 + 8))(v4);
  uint64_t v6 = a1[3];
  uint64_t v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v6);
  int v9 = (*(uint64_t (**)(uint64_t))(v5 + 16))(v6);
  outlined init with copy of HealthDataQuery((uint64_t)a1, (uint64_t)v8);
  AugmentedIntervalTree.insert(start:end:context:)((uint64_t)&v10, (uint64_t)&v9, v8);
  return outlined destroy of Pregnancy?((uint64_t)v8);
}

uint64_t closure #6 in Featurizer.featurizeNightingaleD(pregnancies:swts:hrvs:respiratoryRates:spo2s:daySHR10s:nightSHR10s:calendarPeriodPredictions:historicalPeriods:cycleFactors:hyperParam:today:)(uint64_t a1, void *a2)
{
  uint64_t v20 = a1;
  uint64_t v19 = a2;
  outlined init with copy of Pregnancy?((void *)(a1 + 8), v15);
  if (!v15[3])
  {
    outlined destroy of Pregnancy?((uint64_t)v15);
LABEL_7:
    char v3 = 1;
    return v3 & 1;
  }
  outlined init with take of HealthDataQuery(v15, __dst);
  uint64_t v10 = a2[3];
  uint64_t v9 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v10);
  int v13 = (*(uint64_t (**)(uint64_t))(v9 + 8))(v10);
  uint64_t v12 = v17;
  uint64_t v11 = v18;
  __swift_project_boxed_opaque_existential_1(__dst, v17);
  if (v13 != (*(unsigned int (**)(uint64_t))(v11 + 8))(v12)
    || (uint64_t v5 = a2[3],
        uint64_t v4 = a2[4],
        __swift_project_boxed_opaque_existential_1(a2, v5),
        int v8 = (*(uint64_t (**)(uint64_t))(v4 + 16))(v5),
        uint64_t v7 = v17,
        uint64_t v6 = v18,
        __swift_project_boxed_opaque_existential_1(__dst, v17),
        v8 != (*(unsigned int (**)(uint64_t))(v6 + 16))(v7)))
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)__dst);
    goto LABEL_7;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)__dst);
  char v3 = 0;
  return v3 & 1;
}

uint64_t maxEnd<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = a1;
  uint64_t v6 = a2;
  uint64_t v13 = 0;
  uint64_t v16 = MEMORY[0x263F8D4D0];
  uint64_t v27 = 0;
  uint64_t v26 = 0;
  unsigned int v25 = 0;
  uint64_t v17 = v24;
  v24[0] = 0;
  v24[1] = 0;
  uint64_t v28 = a2;
  uint64_t v15 = type metadata accessor for Interval();
  uint64_t v7 = *(void *)(v15 - 8);
  uint64_t v8 = v15 - 8;
  unint64_t v9 = (*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v10 = (char *)&v4 - v9;
  uint64_t v27 = (char *)&v4 - v9;
  unint64_t v11 = (*(void *)(*(void *)(type metadata accessor for Optional() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v2 = MEMORY[0x270FA5388](v14);
  uint64_t v12 = (char *)&v4 - v11;
  uint64_t v26 = v2;
  unsigned int v25 = 0;
  swift_bridgeObjectRetain();
  uint64_t v23 = v14;
  uint64_t v18 = type metadata accessor for Array();
  uint64_t WitnessTable = swift_getWitnessTable();
  Collection<>.makeIterator()();
  while (1)
  {
    type metadata accessor for IndexingIterator();
    IndexingIterator.next()();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v15) == 1) {
      break;
    }
    uint64_t v5 = type metadata accessor for Optional();
    outlined init with take of Interval<UInt32, A>(v12, v10, v6, v5, v15);
    unsigned int v21 = v25;
    int v20 = *((_DWORD *)v10 + 1);
    max<A>(_:_:)();
    unsigned int v25 = v22;
    outlined destroy of Interval<UInt32, A>((uint64_t)v10, v6, v5, v15);
  }
  outlined destroy of [A]();
  return v25;
}

uint64_t appendFeature(hyperParams:_:_:_:_:_:_:_:_:_:_:)()
{
  if (HyperParams.isDaySHRRequired()()) {
    specialized Array.append(_:)();
  }
  if (HyperParams.isNightSHRRequired()()) {
    specialized Array.append(_:)();
  }
  if (HyperParams.isPSMRequired()()) {
    specialized Array.append(_:)();
  }
  if (HyperParams.isPSSRequired()()) {
    specialized Array.append(_:)();
  }
  if (HyperParams.isDaysSinceLastPeriodStartRequired()()) {
    specialized Array.append(_:)();
  }
  if (HyperParams.isSWTRequired()()) {
    specialized Array.append(_:)();
  }
  if (HyperParams.isHRVRequired()()) {
    specialized Array.append(_:)();
  }
  if (HyperParams.isRespiratoryRateRequired()()) {
    specialized Array.append(_:)();
  }
  uint64_t result = HyperParams.isSpO2Required()();
  if (result) {
    return specialized Array.append(_:)();
  }
  return result;
}

void __swiftcall Featurizer.cycleStats(pregnancies:periods:earliestPregrancyLMP:latestPregrancyEndDay:)(Swift::tuple_prePregCycleStats_tuple_count_Float_mean_Float_optional_std_Float_pregCycleStats_tuple_count_Float_mean_Float_optional_std_Float_postPregCycleStats_tuple_count_Float_mean_Float_optional_std_Float *__return_ptr retstr, Swift::OpaquePointer pregnancies, Swift::OpaquePointer periods, Swift::UInt32 earliestPregrancyLMP, Swift::UInt32 latestPregrancyEndDay)
{
  uint64_t v158 = retstr;
  uint64_t rawValue = pregnancies._rawValue;
  int v166 = periods._rawValue;
  Swift::UInt32 v167 = earliestPregrancyLMP;
  Swift::UInt32 v160 = latestPregrancyEndDay;
  uint64_t v170 = partial apply for closure #1 in Featurizer.cycleStats(pregnancies:periods:earliestPregrancyLMP:latestPregrancyEndDay:);
  unint64_t v161 = partial apply for closure #2 in Featurizer.cycleStats(pregnancies:periods:earliestPregrancyLMP:latestPregrancyEndDay:);
  uint64_t v162 = partial apply for closure #3 in Featurizer.cycleStats(pregnancies:periods:earliestPregrancyLMP:latestPregrancyEndDay:);
  uint64_t v163 = "Fatal error";
  uint64_t v164 = "Range requires lowerBound <= upperBound";
  uint64_t v165 = "Swift/Range.swift";
  uint64_t v247 = 0;
  uint64_t v245 = 0;
  uint64_t v243 = 0;
  uint64_t v241 = 0;
  int v240 = 0;
  uint64_t v237 = 0;
  uint64_t v238 = 0;
  uint64_t v239 = 0;
  uint64_t v232 = 0;
  uint64_t v231 = 0;
  v230[6] = 0;
  v230[7] = 0;
  uint64_t v227 = 0;
  uint64_t v228 = 0;
  uint64_t v229 = 0;
  uint64_t v222 = 0;
  uint64_t v219 = 0;
  uint64_t v220 = 0;
  uint64_t v221 = 0;
  uint64_t v211 = 0;
  float v212 = 0.0;
  uint64_t v207 = 0;
  float v208 = 0.0;
  uint64_t v203 = 0;
  float v204 = 0.0;
  uint64_t v202 = 0;
  uint64_t v197 = 0;
  uint64_t v195 = 0;
  uint64_t v179 = 0;
  uint64_t v177 = 0;
  uint64_t v251 = pregnancies._rawValue;
  uint64_t v250 = periods._rawValue;
  Swift::UInt32 v249 = earliestPregrancyLMP;
  Swift::UInt32 v248 = latestPregrancyEndDay;
  swift_bridgeObjectRetain();
  uint64_t v246 = v166;
  uint64_t v168 = v174;
  v174[4] = v167;
  uint64_t v169 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(start: UInt32, end: UInt32)]);
  unint64_t v171 = lazy protocol witness table accessor for type [(start: UInt32, end: UInt32)] and conformance [A]();
  uint64_t v172 = 0;
  uint64_t v173 = _ArrayProtocol.filter(_:)();
  uint64_t v154 = v173;
  uint64_t v245 = v173;
  swift_bridgeObjectRetain();
  uint64_t v244 = v166;
  char v155 = &v61;
  MEMORY[0x270FA5388](partial apply for closure #2 in Featurizer.cycleStats(pregnancies:periods:earliestPregrancyLMP:latestPregrancyEndDay:));
  v60[4] = v167;
  v60[5] = v5;
  uint64_t v6 = _ArrayProtocol.filter(_:)();
  uint64_t v156 = 0;
  uint64_t v157 = v6;
  uint64_t v150 = v6;
  uint64_t v243 = v6;
  swift_bridgeObjectRetain();
  uint64_t v242 = v166;
  uint64_t v151 = v60;
  MEMORY[0x270FA5388](v162);
  uint64_t v7 = _ArrayProtocol.filter(_:)();
  uint64_t v152 = 0;
  uint64_t v153 = v7;
  uint64_t v147 = v7;
  uint64_t v241 = v7;
  int v240 = (void *)specialized Array.init()();
  uint64_t v148 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (start: UInt32, end: UInt32));
  uint64_t v149 = MEMORY[0x25A2C0810](v154);
  if (v149 < 0)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  uint64_t v235 = 0;
  uint64_t v236 = v149;
  uint64_t v237 = specialized Collection<>.makeIterator()();
  uint64_t v238 = v8;
  uint64_t v239 = v9;
  for (uint64_t i = v152; ; uint64_t i = v144)
  {
    uint64_t v144 = i;
    uint64_t v233 = specialized IndexingIterator.next()();
    char v234 = v10 & 1;
    uint64_t v145 = v233;
    if (v10) {
      break;
    }
    uint64_t v143 = v145;
    uint64_t v140 = v145;
    uint64_t v179 = v145;
    Array.subscript.getter();
    int v141 = v178;
    uint64_t v177 = v178;
    uint64_t v11 = MEMORY[0x25A2C0810](v154, v148);
    uint64_t v142 = v11 - 1;
    if (__OFSUB__(v11, 1)) {
      goto LABEL_68;
    }
    if (v140 == v142)
    {
      uint64_t v136 = v175;
      v175[0] = v167;
      unint64_t v138 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      uint64_t v137 = MEMORY[0x263F8E8F8];
      Float.init<A>(_:)();
      float v139 = v13;
      v174[9] = v141;
      Float.init<A>(_:)();
      *(float *)&v174[8] = v139 - v14;
      specialized Array.append(_:)();
    }
    else
    {
      uint64_t v135 = v140 + 1;
      if (__OFADD__(v140, 1)) {
        goto LABEL_69;
      }
      Array.subscript.getter();
      char v131 = v176;
      v176[0] = v176[1];
      unint64_t v133 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      uint64_t v132 = MEMORY[0x263F8E8F8];
      Float.init<A>(_:)();
      float v134 = v16;
      v175[2] = v141;
      Float.init<A>(_:)();
      *(float *)&v175[1] = v134 - v17;
      specialized Array.append(_:)();
    }
  }
  uint64_t v232 = (void *)specialized Array.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AugmentedIntervalTree<UInt32, Any>);
  uint64_t v128 = AugmentedIntervalTree.__allocating_init()();
  uint64_t v231 = v128;
  swift_bridgeObjectRetain();
  v230[5] = rawValue;
  uint64_t v129 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Pregnancy]);
  lazy protocol witness table accessor for type [Pregnancy] and conformance [A]();
  Collection<>.makeIterator()();
  for (uint64_t j = v144; ; uint64_t j = v127)
  {
    uint64_t v127 = j;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[Pregnancy]>);
    IndexingIterator.next()();
    if (!v230[3]) {
      break;
    }
    uint64_t v126 = v183;
    outlined init with take of HealthDataQuery(v230, v183);
    uint64_t v121 = v184;
    uint64_t v120 = v185;
    __swift_project_boxed_opaque_existential_1(v126, v184);
    int v18 = (*(uint64_t (**)(uint64_t))(v120 + 40))(v121);
    Swift::String v124 = &v182;
    int v182 = v18;
    uint64_t v123 = v184;
    uint64_t v122 = v185;
    __swift_project_boxed_opaque_existential_1(v126, v184);
    int v181 = (*(uint64_t (**)(uint64_t))(v122 + 16))(v123);
    char v125 = v180;
    memset(v180, 0, sizeof(v180));
    AugmentedIntervalTree.insert(start:end:context:)((uint64_t)v124, (uint64_t)&v181, v180);
    outlined destroy of Pregnancy?((uint64_t)v125);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v126);
  }
  outlined destroy of [A]();
  uint64_t v119 = MEMORY[0x25A2C0810](v150, v148);
  if (v119 < 0)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  uint64_t v225 = 0;
  uint64_t v226 = v119;
  uint64_t v227 = specialized Collection<>.makeIterator()();
  uint64_t v228 = v19;
  uint64_t v229 = v20;
  for (uint64_t k = v127; ; uint64_t k = v116)
  {
    uint64_t v116 = k;
    uint64_t v223 = specialized IndexingIterator.next()();
    char v224 = v21 & 1;
    uint64_t v117 = v223;
    if (v21) {
      break;
    }
    uint64_t v115 = v117;
    uint64_t v112 = v117;
    uint64_t v197 = v117;
    Array.subscript.getter();
    int v113 = v196;
    uint64_t v195 = v196;
    uint64_t v22 = MEMORY[0x25A2C0810](v150, v148);
    uint64_t v114 = v22 - 1;
    if (__OFSUB__(v22, 1)) {
      goto LABEL_63;
    }
    if (v112 == v114)
    {
      v190[0] = v113;
      Swift::UInt32 v111 = v160 + 1;
      if (v160 == -1) {
        goto LABEL_67;
      }
      Swift::UInt32 v189 = v111;
      if ((AugmentedIntervalTree.overlap(start:end:)((uint64_t)v190, (uint64_t)&v189) & 1) == 0)
      {
        uint64_t v107 = &v188;
        Swift::UInt32 v188 = v160;
        unint64_t v109 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        uint64_t v108 = MEMORY[0x263F8E8F8];
        Float.init<A>(_:)();
        float v110 = v24;
        int v187 = v113;
        Float.init<A>(_:)();
        float v186 = (float)(v110 - v25) + 1.0;
        specialized Array.append(_:)();
      }
    }
    else
    {
      int v194 = v113;
      uint64_t v106 = v112 + 1;
      if (__OFADD__(v112, 1)) {
        goto LABEL_64;
      }
      Array.subscript.getter();
      int v105 = v193 - 1;
      if (!v193) {
        goto LABEL_65;
      }
      int v192 = v105;
      if ((AugmentedIntervalTree.overlap(start:end:)((uint64_t)&v194, (uint64_t)&v192) & 1) == 0)
      {
        uint64_t v104 = v112 + 1;
        if (__OFADD__(v112, 1)) {
          goto LABEL_66;
        }
        Array.subscript.getter();
        uint64_t v100 = v191;
        v191[0] = v191[1];
        unint64_t v102 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        uint64_t v101 = MEMORY[0x263F8E8F8];
        Float.init<A>(_:)();
        float v103 = v28;
        v190[2] = v113;
        Float.init<A>(_:)();
        *(float *)&v190[1] = v103 - v29;
        specialized Array.append(_:)();
      }
    }
  }
  uint64_t v222 = (void *)specialized Array.init()();
  uint64_t v99 = MEMORY[0x25A2C0810](v147, v148);
  if (v99 < 0)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  uint64_t v217 = 0;
  uint64_t v218 = v99;
  uint64_t v219 = specialized Collection<>.makeIterator()();
  uint64_t v220 = v30;
  uint64_t v221 = v31;
  for (uint64_t m = v116; ; uint64_t m = v96)
  {
    uint64_t v96 = m;
    uint64_t v215 = specialized IndexingIterator.next()();
    char v216 = v32 & 1;
    uint64_t v97 = v215;
    if (v32)
    {
      uint64_t v74 = &v240;
      v62._uint64_t rawValue = v240;
      swift_bridgeObjectRetain();
      int v64 = 0;
      meanAndStd(_:_:)(v38, v62, NightingaleTraining_STDMethod_population);
      uint64_t v213 = v39;
      float v214 = v40;
      float v76 = *(float *)&v39;
      int v77 = BYTE4(v39);
      float v78 = v40;
      swift_bridgeObjectRelease();
      *(float *)&uint64_t v211 = v76;
      int v86 = 1;
      BYTE4(v211) = v77 & 1;
      float v212 = v78;
      uint64_t v73 = &v232;
      v63._uint64_t rawValue = v232;
      swift_bridgeObjectRetain();
      meanAndStd(_:_:)(v41, v63, (NightingaleTraining::STDMethod)v64);
      uint64_t v209 = v42;
      float v210 = v43;
      float v80 = *(float *)&v42;
      int v81 = BYTE4(v42);
      float v82 = v43;
      swift_bridgeObjectRelease();
      *(float *)&uint64_t v207 = v80;
      BYTE4(v207) = v81 & 1 & v86;
      float v208 = v82;
      int v72 = &v222;
      v65._uint64_t rawValue = v222;
      swift_bridgeObjectRetain();
      meanAndStd(_:_:)(v44, v65, (NightingaleTraining::STDMethod)v64);
      uint64_t v205 = v45;
      float v206 = v46;
      float v84 = *(float *)&v45;
      int v85 = BYTE4(v45);
      float v87 = v46;
      swift_bridgeObjectRelease();
      *(float *)&uint64_t v203 = v84;
      BYTE4(v203) = v85 & 1 & v86;
      float v204 = v87;
      Swift::Bool v66 = v240;
      swift_bridgeObjectRetain();
      uint64_t v67 = MEMORY[0x25A2C0820](v66);
      swift_bridgeObjectRelease();
      Swift::Float v75 = (float)v67;
      Swift::Bool v68 = v232;
      swift_bridgeObjectRetain();
      uint64_t v69 = MEMORY[0x25A2C0820](v68);
      swift_bridgeObjectRelease();
      float v79 = (float)v69;
      uint64_t v70 = v222;
      swift_bridgeObjectRetain();
      uint64_t v71 = MEMORY[0x25A2C0820](v70);
      swift_bridgeObjectRelease();
      float v83 = (float)v71;
      outlined destroy of [A]();
      swift_release();
      outlined destroy of [A]();
      outlined destroy of [A]();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      Swift::Float v47 = v76;
      char v48 = v77;
      Swift::Float v49 = v78;
      float v50 = v79;
      Swift::Float v51 = v80;
      char v52 = v81;
      Swift::Float v53 = v82;
      float v54 = v83;
      Swift::Float v55 = v84;
      char v56 = v85;
      char v57 = v86;
      Swift::Bool v58 = v158;
      Swift::Float v59 = v87;
      v158->prePregCycleStats.Swift::Float count = v75;
      v58->prePregCycleStats.mean.Swift::UInt32 value = v47;
      v58->prePregCycleStats.mean.Swift::Bool is_nil = v48 & 1 & v57;
      v58->prePregCycleStats.Swift::Float std = v49;
      v58->pregCycleStats.Swift::Float count = v50;
      v58->pregCycleStats.mean.Swift::UInt32 value = v51;
      v58->pregCycleStats.mean.Swift::Bool is_nil = v52 & 1 & v57;
      v58->pregCycleStats.Swift::Float std = v53;
      v58->postPregCycleStats.Swift::Float count = v54;
      v58->postPregCycleStats.mean.Swift::UInt32 value = v55;
      v58->postPregCycleStats.mean.Swift::Bool is_nil = v56 & 1 & v57;
      v58->postPregCycleStats.Swift::Float std = v59;
      return;
    }
    uint64_t v95 = v97;
    uint64_t v93 = v97;
    uint64_t v202 = v97;
    uint64_t v33 = MEMORY[0x25A2C0810](v147, v148);
    uint64_t v94 = v33 - 1;
    if (__OFSUB__(v33, 1)) {
      break;
    }
    if (v93 != v94)
    {
      uint64_t v92 = v93 + 1;
      if (__OFADD__(v93, 1)) {
        goto LABEL_62;
      }
      Array.subscript.getter();
      uint64_t v88 = v201;
      v201[0] = v201[1];
      unint64_t v90 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      uint64_t v89 = MEMORY[0x263F8E8F8];
      Float.init<A>(_:)();
      float v91 = v36;
      Array.subscript.getter();
      int v199 = v200;
      Float.init<A>(_:)();
      float v198 = v91 - v37;
      specialized Array.append(_:)();
    }
  }
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
}

BOOL closure #1 in Featurizer.cycleStats(pregnancies:periods:earliestPregrancyLMP:latestPregrancyEndDay:)(unsigned int *a1, unsigned int a2)
{
  return *a1 < a2;
}

BOOL closure #2 in Featurizer.cycleStats(pregnancies:periods:earliestPregrancyLMP:latestPregrancyEndDay:)(unsigned int *a1, unsigned int a2, unsigned int a3)
{
  return *a1 >= a2 && a3 >= *a1;
}

BOOL closure #3 in Featurizer.cycleStats(pregnancies:periods:earliestPregrancyLMP:latestPregrancyEndDay:)(unsigned int *a1, unsigned int a2)
{
  return a2 < *a1;
}

uint64_t Featurizer.stats(option:sliceEndDays:feature:sliceSize:)(int a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v100 = a1;
  uint64_t v101 = a2;
  uint64_t v102 = a3;
  unsigned int v103 = a4;
  int v105 = "Fatal error";
  uint64_t v106 = "Range requires lowerBound <= upperBound";
  uint64_t v107 = "Swift/ClosedRange.swift";
  uint64_t v108 = partial apply for closure #3 in Featurizer.stats(option:sliceEndDays:feature:sliceSize:);
  unint64_t v109 = (void (*)(char *, char *))closure #4 in Featurizer.stats(option:sliceEndDays:feature:sliceSize:);
  float v110 = "Swift/Range.swift";
  Swift::UInt32 v111 = partial apply for closure #3 in Featurizer.stats(option:sliceEndDays:feature:sliceSize:);
  uint64_t v112 = (void (*)(char *, char *))closure #2 in Featurizer.stats(option:sliceEndDays:feature:sliceSize:);
  v158[1] = 0;
  v158[0] = 0;
  uint64_t v156 = 0;
  uint64_t v154 = 0;
  uint64_t v155 = 0;
  uint64_t rawValue = 0;
  int v145 = 0;
  char v146 = 0;
  int v144 = 0;
  int v143 = 0;
  uint64_t v140 = 0;
  uint64_t v141 = 0;
  uint64_t v142 = 0;
  uint64_t v135 = 0;
  unsigned int v132 = 0;
  uint64_t v129 = 0;
  uint64_t v130 = 0;
  unsigned int v125 = 0;
  uint64_t v124 = 0;
  int v118 = 0;
  char v119 = 0;
  int v117 = 0;
  int v116 = 0;
  char v162 = a1;
  uint64_t v161 = a2;
  uint64_t v160 = a3;
  unsigned int v159 = a4;
  int v157 = 0;
  uint64_t result = MEMORY[0x25A2C0830]();
  uint64_t v113 = 2 * result;
  if ((unsigned __int128)(result * (__int128)2) >> 64 == (2 * result) >> 63)
  {
    v158[0] = specialized Array.init(repeating:count:)();
    if (!(_BYTE)v100)
    {
      uint64_t v99 = v104;
LABEL_40:
      v30[1] = v99;
      v30[0] = v158;
      uint64_t v31 = v158[0];
      swift_bridgeObjectRetain();
      outlined destroy of [A]();
      return v31;
    }
    if (v100 == 1)
    {
      swift_bridgeObjectRetain();
      uint64_t v128 = v101;
      uint64_t v97 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32]);
      lazy protocol witness table accessor for type [UInt32] and conformance [A]();
      Collection<>.makeIterator()();
      for (uint64_t i = v104; ; uint64_t i = v81)
      {
        uint64_t v95 = i;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[UInt32]>);
        IndexingIterator.next()();
        unsigned int v96 = v126;
        if (v127)
        {
          outlined destroy of [A]();
          uint64_t v99 = v95;
          goto LABEL_40;
        }
        unsigned int v94 = v96;
        unsigned int v92 = v96;
        unsigned int v125 = v96;
        uint64_t result = Set.init()();
        uint64_t v124 = result;
        unsigned int v93 = v92 - v103;
        if (v92 < v103) {
          goto LABEL_52;
        }
        unsigned int v91 = v93 + 1;
        if (v93 == -1) {
          goto LABEL_53;
        }
        if (v92 < v91)
        {
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
        }
        int v85 = v123;
        v123[0] = v91;
        v123[1] = v92;
        uint64_t v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<UInt32>);
        uint64_t v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClosedRange<UInt32>);
        lazy protocol witness table accessor for type ClosedRange<UInt32> and conformance <> ClosedRange<A>();
        float v87 = &v124;
        Set.formUnion<A>(_:)();
        uint64_t v5 = v95;
        swift_bridgeObjectRetain();
        uint64_t v88 = v30;
        MEMORY[0x270FA5388](v111);
        uint64_t v6 = Dictionary.filter(_:)();
        uint64_t v89 = v5;
        uint64_t v90 = v6;
        if (v5) {
          break;
        }
        v122[1] = v90;
        uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : Float]);
        unint64_t v7 = lazy protocol witness table accessor for type [UInt32 : Float] and conformance [A : B]();
        uint64_t v8 = v89;
        uint64_t v9 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(v112, 0, v80, MEMORY[0x263F8D5C8], MEMORY[0x263F8E628], v7, MEMORY[0x263F8E658], v86);
        uint64_t v81 = v8;
        uint64_t v82 = v9;
        if (v8) {
          goto LABEL_42;
        }
        uint64_t v73 = v82;
        outlined destroy of [A]();
        Swift::Float v75 = v122;
        v122[0] = v73;
        uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
        lazy protocol witness table accessor for type [Float] and conformance [A]();
        v76._uint64_t rawValue = (void *)Sequence<>.sorted()();
        outlined destroy of [A]();
        meanAndStd(_:_:)(v10, v76, NightingaleTraining_STDMethod_population);
        uint64_t v120 = v11;
        int v121 = v12;
        int v77 = v11;
        int v79 = BYTE4(v11);
        int v78 = v12;
        swift_bridgeObjectRelease();
        int v118 = v77;
        char v119 = v79 & 1;
        int v117 = v78;
        if (v79)
        {
          lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
          uint64_t v69 = swift_allocError();
          unsigned char *v13 = 41;
          swift_willThrow();
          outlined destroy of [A]();
          outlined destroy of [A]();
          outlined destroy of [A]();
          uint64_t v70 = v69;
          return v86;
        }
        int v72 = v77;
        int v116 = v77;
        int v115 = v77;
        uint64_t v71 = v158;
        specialized Array.append(_:)();
        int v114 = v78;
        specialized Array.append(_:)();
        outlined destroy of [A]();
      }
      __break(1u);
LABEL_42:
      __break(1u);
    }
    else
    {
      uint64_t v156 = Set.init()();
      swift_bridgeObjectRetain();
      uint64_t v153 = v101;
      uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32]);
      lazy protocol witness table accessor for type [UInt32] and conformance [A]();
      Collection<>.makeIterator()();
      for (uint64_t j = v104; ; uint64_t j = v65)
      {
        uint64_t v65 = j;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[UInt32]>);
        uint64_t result = IndexingIterator.next()();
        unsigned int v66 = v151;
        if (v152) {
          break;
        }
        unsigned int v64 = v66;
        unsigned int v62 = v66;
        unsigned int v132 = v66;
        unsigned int v63 = v66 - v103;
        if (v66 < v103) {
          goto LABEL_50;
        }
        unsigned int v61 = v63 + 1;
        if (v63 == -1) {
          goto LABEL_51;
        }
        if (v62 < v61)
        {
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
        }
        Swift::Bool v60 = v131;
        v131[0] = v61;
        v131[1] = v62;
        uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<UInt32>);
        uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClosedRange<UInt32>);
        lazy protocol witness table accessor for type ClosedRange<UInt32> and conformance <> ClosedRange<A>();
        Set.formUnion<A>(_:)();
      }
      outlined destroy of [A]();
      uint64_t v14 = v65;
      swift_bridgeObjectRetain();
      Swift::Float v55 = v30;
      MEMORY[0x270FA5388](v108);
      uint64_t v15 = Dictionary.filter(_:)();
      uint64_t v56 = v14;
      uint64_t v57 = v15;
      if (!v14)
      {
        v150[1] = v57;
        uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : Float]);
        unint64_t v16 = lazy protocol witness table accessor for type [UInt32 : Float] and conformance [A : B]();
        uint64_t v17 = v56;
        uint64_t v18 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(v109, 0, v52, MEMORY[0x263F8D5C8], MEMORY[0x263F8E628], v16, MEMORY[0x263F8E658], v86);
        uint64_t v53 = v17;
        uint64_t v54 = v18;
        if (!v17)
        {
          uint64_t v46 = v54;
          outlined destroy of [A]();
          char v48 = v150;
          v150[0] = v46;
          uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
          lazy protocol witness table accessor for type [Float] and conformance [A]();
          v49._uint64_t rawValue = (void *)Sequence<>.sorted()();
          outlined destroy of [A]();
          uint64_t rawValue = v49._rawValue;
          meanAndStd(_:_:)((Swift::tuple_mean_Float_optional_std_Float *)v49._rawValue, v49, NightingaleTraining_STDMethod_population);
          uint64_t v147 = v19;
          int v148 = v20;
          int v50 = v19;
          int v51 = v20;
          int v145 = v19;
          char v146 = BYTE4(v19) & 1;
          int v144 = v20;
          if ((v19 & 0x100000000) == 0)
          {
            int v45 = v50;
            int v43 = v50;
            int v143 = v50;
            uint64_t v44 = MEMORY[0x25A2C0830](v101);
            if (v44 < 0)
            {
              _assertionFailure(_:_:file:line:flags:)();
              __break(1u);
            }
            uint64_t v138 = 0;
            uint64_t v139 = v44;
            uint64_t v140 = specialized Collection<>.makeIterator()();
            uint64_t v141 = v21;
            uint64_t v142 = v22;
            for (uint64_t k = v53; ; uint64_t k = v40)
            {
              uint64_t v40 = k;
              uint64_t result = specialized IndexingIterator.next()();
              uint64_t v136 = result;
              char v137 = v23 & 1;
              uint64_t v41 = result;
              if (v23) {
                break;
              }
              uint64_t v39 = v41;
              uint64_t v37 = v41;
              uint64_t v135 = v41;
              uint64_t v38 = 2 * v41;
              if ((unsigned __int128)(2 * (__int128)v39) >> 64 != (2 * v39) >> 63) {
                goto LABEL_47;
              }
              uint64_t v35 = &v134;
              float v24 = (uint64_t (*)(void))specialized Array.subscript.modify();
              *float v25 = v43;
              uint64_t result = v24();
              uint64_t v36 = 2 * v37;
              if ((unsigned __int128)(2 * (__int128)v37) >> 64 != (2 * v37) >> 63) {
                goto LABEL_48;
              }
              uint64_t v34 = v36 + 1;
              if (__OFADD__(v36, 1)) {
                goto LABEL_49;
              }
              uint64_t v33 = &v133;
              uint64_t v27 = (void (*)(void))specialized Array.subscript.modify();
              _DWORD *v28 = v51;
              v27();
            }
            swift_bridgeObjectRelease();
            outlined destroy of [A]();
            uint64_t v99 = v40;
            goto LABEL_40;
          }
          lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
          uint64_t v32 = swift_allocError();
          unsigned char *v29 = 41;
          swift_willThrow();
          swift_bridgeObjectRelease();
          outlined destroy of [A]();
          outlined destroy of [A]();
          uint64_t v70 = v32;
          return v86;
        }
LABEL_44:
        __break(1u);
        return v86;
      }
    }
    __break(1u);
    goto LABEL_44;
  }
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
  return result;
}

uint64_t closure #1 in Featurizer.stats(option:sliceEndDays:feature:sliceSize:)()
{
  swift_bridgeObjectRetain();
  char v1 = Set.contains(_:)();
  swift_bridgeObjectRelease();
  return v1 & 1;
}

float closure #2 in Featurizer.stats(option:sliceEndDays:feature:sliceSize:)@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  float result = *(float *)(a1 + 4);
  *a2 = result;
  return result;
}

void closure #4 in Featurizer.stats(option:sliceEndDays:feature:sliceSize:)(uint64_t a1@<X0>, Swift::Float *a2@<X8>)
{
  *a2 = Float.init(_:)(*(Swift::Float *)(a1 + 4));
}

void __swiftcall Featurizer.featurizeWTPeriodPrediction(_:_:_:_:_:_:_:_:)(Swift::tuple_flow_OpaquePointer_swt_OpaquePointer_periodStartMean_OpaquePointer_periodStartStd_OpaquePointer_labels_OpaquePointer *__return_ptr retstr, Swift::OpaquePointer *a2, Swift::OpaquePointer *a3, Swift::OpaquePointer *a4, Swift::OpaquePointer *a5, Swift::OpaquePointer *a6, Swift::UInt32 a7, Swift::UInt32 a8, Swift::UInt32 a9)
{
  char v10 = (void *)_allocateUninitializedArray<A>(_:)();
  uint64_t v11 = (void *)_allocateUninitializedArray<A>(_:)();
  int v12 = (void *)_allocateUninitializedArray<A>(_:)();
  float v13 = (void *)_allocateUninitializedArray<A>(_:)();
  uint64_t v9 = (void *)_allocateUninitializedArray<A>(_:)();
  retstr->flow._uint64_t rawValue = v10;
  retstr->swt._uint64_t rawValue = v11;
  retstr->periodStartMean._uint64_t rawValue = v12;
  retstr->periodStartStd._uint64_t rawValue = v13;
  retstr->labels._uint64_t rawValue = v9;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Featurizer.standardize(flow:daySHR:nightSHR:psm:pss:swt:modelType:sliceSize:)(Swift::OpaquePointer *flow, Swift::OpaquePointer *daySHR, Swift::OpaquePointer *nightSHR, Swift::OpaquePointer *psm, Swift::OpaquePointer *pss, Swift::OpaquePointer *swt, NightingaleTraining::NightingalePFLModelType modelType, Swift::UInt32 sliceSize)
{
  standardizeFlow(_:_:)(flow, modelType);
  if (!v8)
  {
    standardizeDaySHR(_:_:)(daySHR, modelType);
    if (!v9)
    {
      standardizeNightSHR(_:_:)(nightSHR, modelType);
      if (!v10)
      {
        standardizePSM(_:_:)(psm, modelType);
        if (!v11)
        {
          standardizePSS(_:_:)(pss, modelType);
          if (!v12) {
            centerSWT(_:_:_:)(swt, modelType, sliceSize);
          }
        }
      }
    }
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> standardizeFlow(_:_:)(Swift::OpaquePointer *a1, NightingaleTraining::NightingalePFLModelType a2)
{
  lazy protocol witness table accessor for type NightingalePFLModelType and conformance NightingalePFLModelType();
  if (== infix<A>(_:_:)()) {
    char v6 = 1;
  }
  else {
    char v6 = == infix<A>(_:_:)();
  }
  if (v6)
  {
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
    unint64_t v2 = lazy protocol witness table accessor for type [Float] and conformance [A]();
    standardize<A>(values:mean:std:)((uint64_t)a1, v5, v2);
  }
  else if (== infix<A>(_:_:)())
  {
    uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
    unint64_t v3 = lazy protocol witness table accessor for type [Float] and conformance [A]();
    standardize<A>(values:mean:std:)((uint64_t)a1, v4, v3);
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> standardizeDaySHR(_:_:)(Swift::OpaquePointer *a1, NightingaleTraining::NightingalePFLModelType a2)
{
  lazy protocol witness table accessor for type NightingalePFLModelType and conformance NightingalePFLModelType();
  if (== infix<A>(_:_:)()) {
    char v4 = 1;
  }
  else {
    char v4 = == infix<A>(_:_:)();
  }
  if (v4)
  {
    uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
    unint64_t v2 = lazy protocol witness table accessor for type [Float] and conformance [A]();
    standardize<A>(values:mean:std:)((uint64_t)a1, v3, v2);
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> standardizeNightSHR(_:_:)(Swift::OpaquePointer *a1, NightingaleTraining::NightingalePFLModelType a2)
{
  lazy protocol witness table accessor for type NightingalePFLModelType and conformance NightingalePFLModelType();
  if (== infix<A>(_:_:)()) {
    char v4 = 1;
  }
  else {
    char v4 = == infix<A>(_:_:)();
  }
  if (v4)
  {
    uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
    unint64_t v2 = lazy protocol witness table accessor for type [Float] and conformance [A]();
    standardize<A>(values:mean:std:)((uint64_t)a1, v3, v2);
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> standardizePSM(_:_:)(Swift::OpaquePointer *a1, NightingaleTraining::NightingalePFLModelType a2)
{
  lazy protocol witness table accessor for type NightingalePFLModelType and conformance NightingalePFLModelType();
  if (== infix<A>(_:_:)()) {
    char v6 = 1;
  }
  else {
    char v6 = == infix<A>(_:_:)();
  }
  if (v6)
  {
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
    unint64_t v2 = lazy protocol witness table accessor for type [Float] and conformance [A]();
    standardize<A>(values:mean:std:)((uint64_t)a1, v5, v2);
  }
  else if (== infix<A>(_:_:)())
  {
    uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
    unint64_t v3 = lazy protocol witness table accessor for type [Float] and conformance [A]();
    standardize<A>(values:mean:std:)((uint64_t)a1, v4, v3);
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> standardizePSS(_:_:)(Swift::OpaquePointer *a1, NightingaleTraining::NightingalePFLModelType a2)
{
  lazy protocol witness table accessor for type NightingalePFLModelType and conformance NightingalePFLModelType();
  if (== infix<A>(_:_:)()) {
    char v6 = 1;
  }
  else {
    char v6 = == infix<A>(_:_:)();
  }
  if (v6)
  {
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
    unint64_t v2 = lazy protocol witness table accessor for type [Float] and conformance [A]();
    standardize<A>(values:mean:std:)((uint64_t)a1, v5, v2);
  }
  else if (== infix<A>(_:_:)())
  {
    uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
    unint64_t v3 = lazy protocol witness table accessor for type [Float] and conformance [A]();
    standardize<A>(values:mean:std:)((uint64_t)a1, v4, v3);
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> centerSWT(_:_:_:)(Swift::OpaquePointer *a1, NightingaleTraining::NightingalePFLModelType a2, Swift::UInt32 a3)
{
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  uint64_t v32 = 0;
  Swift::OpaquePointer v49 = a1;
  NightingaleTraining::NightingalePFLModelType v48 = a2;
  Swift::UInt32 v47 = a3;
  Swift::UInt32 v45 = a3;
  lazy protocol witness table accessor for type Int and conformance Int();
  lazy protocol witness table accessor for type Int and conformance Int();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  SignedInteger<>.init<A>(_:)();
  uint64_t v29 = v46;
  uint64_t v44 = v46;
  NightingaleTraining::NightingalePFLModelType v43 = a2;
  char v42 = 3;
  lazy protocol witness table accessor for type NightingalePFLModelType and conformance NightingalePFLModelType();
  if (== infix<A>(_:_:)())
  {
    char v25 = 1;
  }
  else
  {
    NightingaleTraining::NightingalePFLModelType v41 = a2;
    char v40 = 2;
    char v25 = == infix<A>(_:_:)();
  }
  if (v25)
  {
    uint64_t rawValue = a1->_rawValue;
    swift_bridgeObjectRetain();
    uint64_t v24 = MEMORY[0x25A2C0820](rawValue);
    swift_bridgeObjectRelease();
    if (!v46)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    if (v24 == 0x8000000000000000 && v46 == -1)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    if (v24 % v46)
    {
      lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
      swift_allocError();
      *uint64_t v14 = 7;
      swift_willThrow();
    }
    else
    {
      uint64_t v21 = a1->_rawValue;
      swift_bridgeObjectRetain();
      uint64_t v22 = MEMORY[0x25A2C0820](v21);
      swift_bridgeObjectRelease();
      if (!v46)
      {
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      if (v22 == 0x8000000000000000 && v46 == -1)
      {
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      if (v22 / v46 < 0)
      {
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      uint64_t v35 = 0;
      uint64_t v36 = v22 / v46;
      uint64_t v37 = specialized Collection<>.makeIterator()();
      uint64_t v38 = v3;
      uint64_t v39 = v4;
      for (uint64_t i = v27; ; uint64_t i = 0)
      {
        uint64_t v33 = specialized IndexingIterator.next()();
        char v34 = v5 & 1;
        uint64_t v19 = v33;
        if (v5) {
          break;
        }
        uint64_t v32 = v33;
        if ((unsigned __int128)(v32 * (__int128)v29) >> 64 != (v32 * v29) >> 63)
        {
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
LABEL_49:
          __break(1u);
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
          return;
        }
        uint64_t v18 = v33 + 1;
        if (__OFADD__(v33, 1)) {
          goto LABEL_47;
        }
        if ((unsigned __int128)(v18 * (__int128)v29) >> 64 != (v18 * v29) >> 63) {
          goto LABEL_48;
        }
        if (v18 * v29 < v33 * v29)
        {
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
        }
        v31[0] = Array.subscript.getter();
        v31[1] = v7;
        v31[2] = v8;
        v31[3] = v9;
        uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ArraySlice<Float>);
        unint64_t v17 = lazy protocol witness table accessor for type ArraySlice<Float> and conformance ArraySlice<A>();
        standardize<A>(values:mean:std:)((uint64_t)v31, v16, v17);
        if (i)
        {
          swift_unknownObjectRetain();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
          Array.subscript.setter();
          outlined destroy of IndexingIterator<ArraySlice<(start: UInt32, end: UInt32)>>();
          return;
        }
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
        Array.subscript.setter();
        if ((unsigned __int128)(v19 * (__int128)v29) >> 64 != (v19 * v29) >> 63) {
          goto LABEL_49;
        }
        uint64_t v15 = v19 + 1;
        if (__OFADD__(v19, 1)) {
          goto LABEL_50;
        }
        if ((unsigned __int128)(v15 * (__int128)v29) >> 64 != (v15 * v29) >> 63) {
          goto LABEL_51;
        }
        if (v15 * v29 < v19 * v29)
        {
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
        }
        v30[0] = Array.subscript.getter();
        v30[1] = v11;
        void v30[2] = v12;
        v30[3] = v13;
        center<A>(values:)((uint64_t)v30, v16, v17);
        Array.subscript.setter();
      }
    }
  }
}

uint64_t Featurizer.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

BOOL closure #1 in findDaysNeedingDummyFlow(_:_:)(_DWORD *a1)
{
  return *a1 == a1[1];
}

uint64_t closure #2 in findDaysNeedingDummyFlow(_:_:)@<X0>(uint64_t *a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v18 = a3;
  int v19 = a2;
  uint64_t v21 = "Fatal error";
  uint64_t v22 = "Range requires lowerBound <= upperBound";
  char v23 = "Swift/Range.swift";
  uint64_t v24 = (void (*)(char *, char *))partial apply for closure #1 in closure #2 in findDaysNeedingDummyFlow(_:_:);
  uint64_t v29 = 0;
  int v28 = 0;
  uint64_t v25 = *a1;
  uint64_t v29 = v25;
  int v28 = a2;
  if (!a2)
  {
    char v7 = 2;
    uint64_t v8 = 754;
    int v9 = 0;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  int v26 = 1;
  int v27 = v19;
  uint64_t v12 = &v11;
  MEMORY[0x270FA5388](&v11);
  uint64_t v13 = &v7;
  int v9 = v25;
  int v10 = v3;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<UInt32>);
  unint64_t v4 = lazy protocol witness table accessor for type Range<UInt32> and conformance <> Range<A>();
  uint64_t v5 = v20;
  uint64_t result = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(v24, (uint64_t)v13, v14, MEMORY[0x263F8E8F8], MEMORY[0x263F8E628], v4, MEMORY[0x263F8E658], v15);
  uint64_t v16 = v5;
  uint64_t v17 = result;
  if (v5)
  {
    __break(1u);
  }
  else
  {
    uint64_t result = (uint64_t)v12;
    *uint64_t v18 = v17;
  }
  return result;
}

_DWORD *closure #1 in closure #2 in findDaysNeedingDummyFlow(_:_:)@<X0>(_DWORD *result@<X0>, int a2@<W1>, _DWORD *a3@<X8>)
{
  if (__CFADD__(a2, *result)) {
    __break(1u);
  }
  else {
    *a3 = a2 + *result;
  }
  return result;
}

void *standardize<A>(values:mean:std:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v15 = a1;
  uint64_t v22 = a2;
  uint64_t v19 = a3;
  uint64_t v25 = 0;
  uint64_t v17 = partial apply for closure #1 in standardize<A>(values:mean:std:);
  uint64_t v31 = 0;
  int v30 = 0;
  int v29 = 0;
  int v28 = 0;
  int v27 = 0;
  uint64_t v26 = 0;
  uint64_t v32 = a2;
  uint64_t v20 = *(void *)(a2 - 8);
  uint64_t v21 = a2 - 8;
  unint64_t v18 = (*(void *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](a1);
  char v23 = (char *)&v11 - v18;
  uint64_t v31 = v3;
  int v30 = v4;
  int v29 = v5;
  int v28 = v4;
  int v27 = v5;
  (*(void (**)(char *))(v20 + 16))((char *)&v11 - v18);
  uint64_t v24 = (*(uint64_t (**)(uint64_t))(v19 + 24))(v22);
  uint64_t v26 = v24;
  (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v22);
  if (v25 >= v24)
  {
    uint64_t result = v16;
    uint64_t v11 = v16;
  }
  else
  {
    char v6 = v16;
    uint64_t v12 = &v11;
    uint64_t v7 = MEMORY[0x270FA5388](v17);
    uint64_t v8 = (uint64_t *)(&v11 - 6);
    void v8[2] = v24;
    void v8[3] = (uint64_t)&v28;
    void v8[4] = (uint64_t)&v27;
    (*(void (**)(uint64_t))(v9 + 16))(v7);
    uint64_t v13 = v6;
    uint64_t v14 = v6;
    if (v6)
    {
      return v12;
    }
    else
    {
      uint64_t result = 0;
      uint64_t v11 = 0;
    }
  }
  return result;
}

void closure #1 in standardize<A>(values:mean:std:)(void *a1, uint64_t a2, uint64_t a3, const float *a4)
{
  uint64_t v7 = (float *)MEMORY[0x25A2C0D40](*a1, a1[1], MEMORY[0x263F8D5C8]);
  if (v7)
  {
    lazy protocol witness table accessor for type Int and conformance Int();
    lazy protocol witness table accessor for type Int32 and conformance Int32();
    numericCast<A, B>(_:)();
    numericCast<A, B>(_:)();
    numericCast<A, B>(_:)();
    cblas_saxpy_NEWLAPACK();
    numericCast<A, B>(_:)();
    numericCast<A, B>(_:)();
    lazy protocol witness table accessor for type UInt and conformance UInt();
    numericCast<A, B>(_:)();
    vDSP_vsdiv(v7, v10, a4, v7, v9, v8);
  }
  else
  {
    uint64_t v5 = type metadata accessor for PFLError();
    lazy protocol witness table accessor for type PFLError and conformance PFLError();
    swift_allocError();
    (*(void (**)(uint64_t, void))(*(void *)(v5 - 8) + 104))(v4, *MEMORY[0x263F61128]);
    swift_willThrow();
  }
}

void *center<A>(values:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v14 = a1;
  uint64_t v21 = a2;
  uint64_t v18 = a3;
  uint64_t v24 = 0;
  uint64_t v16 = partial apply for closure #1 in center<A>(values:);
  uint64_t v27 = 0;
  int v26 = 0;
  uint64_t v25 = 0;
  uint64_t v28 = a2;
  uint64_t v19 = *(void *)(a2 - 8);
  uint64_t v20 = a2 - 8;
  unint64_t v17 = (*(void *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](a1);
  uint64_t v22 = (char *)&v10 - v17;
  uint64_t v27 = v3;
  int v26 = 0;
  (*(void (**)(char *))(v19 + 16))((char *)&v10 - v17);
  uint64_t v23 = (*(uint64_t (**)(uint64_t))(v18 + 24))(v21);
  uint64_t v25 = v23;
  (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v21);
  if (v24 >= v23)
  {
    uint64_t result = v15;
    vDSP_Stride v10 = v15;
  }
  else
  {
    uint64_t v4 = v15;
    uint64_t v11 = &v10;
    uint64_t v5 = MEMORY[0x270FA5388](v16);
    uint64_t v6 = v23;
    uint64_t v7 = (uint64_t *)(&v10 - 4);
    void v7[2] = (uint64_t)&v26;
    v7[3] = v6;
    (*(void (**)(uint64_t))(v8 + 16))(v5);
    uint64_t v12 = v4;
    uint64_t v13 = v4;
    if (v4)
    {
      return v11;
    }
    else
    {
      uint64_t result = 0;
      vDSP_Stride v10 = 0;
    }
  }
  return result;
}

uint64_t closure #1 in center<A>(values:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = a2;
  uint64_t v21 = a3;
  uint64_t v23 = partial apply for closure #1 in closure #1 in center<A>(values:);
  uint64_t v30 = 0;
  uint64_t v33 = a1;
  uint64_t v32 = a2;
  uint64_t v31 = a3;
  uint64_t v24 = MEMORY[0x25A2C0D40](*a1, a1[1], MEMORY[0x263F8D5C8]);
  if (v24)
  {
    uint64_t v19 = v24;
    uint64_t v4 = v22;
    uint64_t v15 = v24;
    uint64_t v30 = v24;
    uint64_t v14 = v11;
    uint64_t v5 = MEMORY[0x270FA5388](v20);
    v10[2] = v15;
    _DWORD v10[3] = v6;
    uint64_t result = _ss24withUnsafeMutablePointer2to_q0_xz_q0_SpyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v5, v7, (uint64_t)v10, MEMORY[0x263F8D5C8], MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v8);
    uint64_t v16 = v4;
    if (v4)
    {
      __break(1u);
    }
    else
    {
      v11[0] = &v28;
      uint64_t v28 = v21;
      v11[3] = lazy protocol witness table accessor for type Int and conformance Int();
      void v11[4] = lazy protocol witness table accessor for type Int32 and conformance Int32();
      v11[1] = MEMORY[0x263F8D6C8];
      void v11[2] = MEMORY[0x263F8E548];
      numericCast<A, B>(_:)();
      int v12 = v29;
      uint64_t v26 = 0;
      numericCast<A, B>(_:)();
      int v13 = v27;
      uint64_t v25 = 1;
      numericCast<A, B>(_:)();
      return cblas_saxpy_NEWLAPACK();
    }
  }
  else
  {
    uint64_t v17 = type metadata accessor for PFLError();
    lazy protocol witness table accessor for type PFLError and conformance PFLError();
    uint64_t v18 = swift_allocError();
    (*(void (**)(uint64_t, void))(*(void *)(v17 - 8) + 104))(v3, *MEMORY[0x263F61128]);
    return swift_willThrow();
  }
  return result;
}

void closure #1 in closure #1 in center<A>(values:)(float *a1, const float *a2)
{
  lazy protocol witness table accessor for type Int and conformance Int();
  numericCast<A, B>(_:)();
  lazy protocol witness table accessor for type UInt and conformance UInt();
  numericCast<A, B>(_:)();
  vDSP_meanv(a2, v5, a1, v4);
}

uint64_t _ss24withUnsafeMutablePointer2to_q0_xz_q0_SpyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v17 = a2;
  uint64_t v12 = a5;
  uint64_t v13 = a8;
  uint64_t v22 = a4;
  uint64_t v21 = a5;
  uint64_t v20 = a6;
  uint64_t v14 = *(void *)(a5 - 8);
  uint64_t v15 = a5 - 8;
  unint64_t v16 = (*(void *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v9 = MEMORY[0x270FA5388]();
  uint64_t v18 = (char *)&v11 - v16;
  uint64_t result = v17(v9);
  uint64_t v19 = v8;
  if (v8) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v14 + 32))(v13, v18, v12);
  }
  return result;
}

uint64_t closure #1 in transferFeatureToMLInputs(_:_:_:_:)(void *a1, uint64_t *a2)
{
  if (MEMORY[0x25A2C0D40](*a1, a1[1], MEMORY[0x263F8D5C8]))
  {
    uint64_t v4 = *a2;
    swift_bridgeObjectRetain();
    MEMORY[0x25A2C0820](v4);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type Int and conformance Int();
    lazy protocol witness table accessor for type Int32 and conformance Int32();
    numericCast<A, B>(_:)();
    numericCast<A, B>(_:)();
    NightingalePFLModelType.numFeatures()();
    numericCast<A, B>(_:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    cblas_scopy_NEWLAPACK();
    swift_unknownObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = type metadata accessor for PFLError();
    lazy protocol witness table accessor for type PFLError and conformance PFLError();
    swift_allocError();
    (*(void (**)(uint64_t, void))(*(void *)(v5 - 8) + 104))(v2, *MEMORY[0x263F61128]);
    return swift_willThrow();
  }
}

uint64_t partial apply for closure #1 in transferFeatureToMLInputs(_:_:_:_:)(void *a1)
{
  return closure #1 in transferFeatureToMLInputs(_:_:_:_:)(a1, *(uint64_t **)(v1 + 16));
}

unint64_t lazy protocol witness table accessor for type FeatureStatsOption and conformance FeatureStatsOption()
{
  uint64_t v2 = lazy protocol witness table cache variable for type FeatureStatsOption and conformance FeatureStatsOption;
  if (!lazy protocol witness table cache variable for type FeatureStatsOption and conformance FeatureStatsOption)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type FeatureStatsOption and conformance FeatureStatsOption);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type FeatureStatsOption and conformance FeatureStatsOption;
  if (!lazy protocol witness table cache variable for type FeatureStatsOption and conformance FeatureStatsOption)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type FeatureStatsOption and conformance FeatureStatsOption);
    return WitnessTable;
  }
  return v2;
}

uint64_t STDMethod.hashValue.getter()
{
  return _hashValue<A>(for:)();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance STDMethod()
{
  return STDMethod.hashValue.getter();
}

unint64_t lazy protocol witness table accessor for type Range<UInt32> and conformance <> Range<A>()
{
  uint64_t v2 = lazy protocol witness table cache variable for type Range<UInt32> and conformance <> Range<A>;
  if (!lazy protocol witness table cache variable for type Range<UInt32> and conformance <> Range<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<UInt32>);
    lazy protocol witness table accessor for type Int and conformance Int();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Range<UInt32> and conformance <> Range<A>);
    return WitnessTable;
  }
  return v2;
}

uint64_t partial apply for closure #2 in Featurizer.featurizeHRPeriodPrediction(flows:daySHR10s:nightSHR10s:calendarPeriodPredictions:historicalPeriods:cycleFactors:dummyPeriodLength:sliceSize:maxNumDaysToNextPeriod:minNumDaysToNextPeriod:minNumOfDaySHRPerSlice:)(_DWORD *a1)
{
  return closure #2 in Featurizer.featurizeHRPeriodPrediction(flows:daySHR10s:nightSHR10s:calendarPeriodPredictions:historicalPeriods:cycleFactors:dummyPeriodLength:sliceSize:maxNumDaysToNextPeriod:minNumDaysToNextPeriod:minNumOfDaySHRPerSlice:)(a1, v1);
}

uint64_t partial apply for closure #2 in findDaysNeedingDummyFlow(_:_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #2 in findDaysNeedingDummyFlow(_:_:)(a1, *(_DWORD *)(v2 + 16), a2);
}

unint64_t lazy protocol witness table accessor for type [[UInt32]] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [[UInt32]] and conformance [A];
  if (!lazy protocol witness table cache variable for type [[UInt32]] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [[UInt32]]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [[UInt32]] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

BOOL partial apply for closure #1 in Featurizer.ensureAvailability(required:minAvailability:available:range:failedCounter:)(_DWORD *a1)
{
  return closure #1 in Featurizer.ensureAvailability(required:minAvailability:available:range:failedCounter:)(a1, *(void *)(v1 + 16));
}

uint64_t partial apply for closure #6 in Featurizer.featurizeNightingaleD(pregnancies:swts:hrvs:respiratoryRates:spo2s:daySHR10s:nightSHR10s:calendarPeriodPredictions:historicalPeriods:cycleFactors:hyperParam:today:)(uint64_t a1)
{
  return closure #6 in Featurizer.featurizeNightingaleD(pregnancies:swts:hrvs:respiratoryRates:spo2s:daySHR10s:nightSHR10s:calendarPeriodPredictions:historicalPeriods:cycleFactors:hyperParam:today:)(a1, *(void **)(v1 + 16)) & 1;
}

uint64_t partial apply for closure #4 in Featurizer.featurizeNightingaleD(pregnancies:swts:hrvs:respiratoryRates:spo2s:daySHR10s:nightSHR10s:calendarPeriodPredictions:historicalPeriods:cycleFactors:hyperParam:today:)(void *a1)
{
  return closure #4 in Featurizer.featurizeNightingaleD(pregnancies:swts:hrvs:respiratoryRates:spo2s:daySHR10s:nightSHR10s:calendarPeriodPredictions:historicalPeriods:cycleFactors:hyperParam:today:)(a1, v1);
}

uint64_t partial apply for closure #3 in Featurizer.featurizeNightingaleD(pregnancies:swts:hrvs:respiratoryRates:spo2s:daySHR10s:nightSHR10s:calendarPeriodPredictions:historicalPeriods:cycleFactors:hyperParam:today:)(_DWORD *a1)
{
  return closure #2 in Featurizer.featurizeNightingaleD(pregnancies:swts:hrvs:respiratoryRates:spo2s:daySHR10s:nightSHR10s:calendarPeriodPredictions:historicalPeriods:cycleFactors:hyperParam:today:)(a1, v1);
}

char *outlined init with take of Interval<UInt32, A>(char *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_DWORD *)a2 = *(_DWORD *)a1;
  *((_DWORD *)a2 + 1) = *((_DWORD *)a1 + 1);
  uint64_t v10 = *(int *)(a5 + 48);
  uint64_t v11 = *(void *)(a3 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v11 + 48))(&a1[v10], 1))
  {
    memcpy(&a2[v10], &a1[v10], *(void *)(*(void *)(a4 - 8) + 64));
  }
  else
  {
    (*(void (**)(void))(v11 + 32))();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(&a2[v10], 0, 1, a3);
  }
  return a2;
}

uint64_t outlined destroy of Interval<UInt32, A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(int *)(a4 + 48);
  uint64_t v8 = *(void *)(a2 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v8 + 48))(a1 + v7, 1)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1 + v7, a2);
  }
  return a1;
}

BOOL partial apply for closure #1 in Featurizer.cycleStats(pregnancies:periods:earliestPregrancyLMP:latestPregrancyEndDay:)(unsigned int *a1)
{
  return closure #1 in Featurizer.cycleStats(pregnancies:periods:earliestPregrancyLMP:latestPregrancyEndDay:)(a1, *(_DWORD *)(v1 + 16));
}

BOOL partial apply for closure #2 in Featurizer.cycleStats(pregnancies:periods:earliestPregrancyLMP:latestPregrancyEndDay:)(unsigned int *a1)
{
  return closure #2 in Featurizer.cycleStats(pregnancies:periods:earliestPregrancyLMP:latestPregrancyEndDay:)(a1, *(_DWORD *)(v1 + 16), *(_DWORD *)(v1 + 20));
}

BOOL partial apply for closure #3 in Featurizer.cycleStats(pregnancies:periods:earliestPregrancyLMP:latestPregrancyEndDay:)(unsigned int *a1)
{
  return closure #3 in Featurizer.cycleStats(pregnancies:periods:earliestPregrancyLMP:latestPregrancyEndDay:)(a1, *(_DWORD *)(v1 + 16));
}

uint64_t partial apply for closure #3 in Featurizer.stats(option:sliceEndDays:feature:sliceSize:)()
{
  return closure #1 in Featurizer.stats(option:sliceEndDays:feature:sliceSize:)() & 1;
}

void partial apply for closure #1 in standardize<A>(values:mean:std:)(void *a1)
{
  closure #1 in standardize<A>(values:mean:std:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(const float **)(v1 + 32));
}

uint64_t partial apply for closure #1 in center<A>(values:)(void *a1)
{
  return closure #1 in center<A>(values:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

unint64_t lazy protocol witness table accessor for type STDMethod and conformance STDMethod()
{
  uint64_t v2 = lazy protocol witness table cache variable for type STDMethod and conformance STDMethod;
  if (!lazy protocol witness table cache variable for type STDMethod and conformance STDMethod)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type STDMethod and conformance STDMethod);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type STDMethod and conformance STDMethod;
  if (!lazy protocol witness table cache variable for type STDMethod and conformance STDMethod)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type STDMethod and conformance STDMethod);
    return WitnessTable;
  }
  return v2;
}

uint64_t getEnumTagSinglePayload for FeatureStatsOption(unsigned __int8 *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 <= 0xFD) {
      goto LABEL_15;
    }
    unsigned int v7 = ((a2 + 2) >> 8) + 1;
    int v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000) {
        int v2 = 4;
      }
      else {
        int v2 = 2;
      }
      int v8 = v2;
    }
    if (v8 == 1) {
      int v6 = a1[1];
    }
    else {
      int v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    }
    if (v6)
    {
      int v5 = (*a1 | ((v6 - 1) << 8)) + 253;
    }
    else
    {
LABEL_15:
      int v3 = *a1 - 3;
      if (v3 < 0) {
        int v3 = -1;
      }
      int v5 = v3;
    }
  }
  else
  {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for FeatureStatsOption(unsigned char *result, unsigned int a2, unsigned int a3)
{
  int v7 = 0;
  if (a3 > 0xFD)
  {
    unsigned int v5 = ((a3 + 2) >> 8) + 1;
    int v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000) {
        int v3 = 4;
      }
      else {
        int v3 = 2;
      }
      int v6 = v3;
    }
    int v7 = v6;
  }
  if (a2 > 0xFD)
  {
    unsigned int v4 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2) {
      *uint64_t result = a2 + 2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FeatureStatsOption()
{
  return &type metadata for FeatureStatsOption;
}

uint64_t type metadata accessor for Featurizer()
{
  return self;
}

ValueMetadata *type metadata accessor for STDMethod()
{
  return &type metadata for STDMethod;
}

unint64_t base witness table accessor for Equatable in FeatureStatsOption()
{
  return lazy protocol witness table accessor for type FeatureStatsOption and conformance FeatureStatsOption();
}

unint64_t base witness table accessor for Equatable in STDMethod()
{
  return lazy protocol witness table accessor for type STDMethod and conformance STDMethod();
}

unint64_t lazy protocol witness table accessor for type PFLError and conformance PFLError()
{
  uint64_t v2 = lazy protocol witness table cache variable for type PFLError and conformance PFLError;
  if (!lazy protocol witness table cache variable for type PFLError and conformance PFLError)
  {
    type metadata accessor for PFLError();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type PFLError and conformance PFLError);
    return WitnessTable;
  }
  return v2;
}

void partial apply for closure #1 in closure #1 in center<A>(values:)(float *a1)
{
  closure #1 in closure #1 in center<A>(values:)(a1, *(const float **)(v1 + 16));
}

_DWORD *partial apply for closure #1 in closure #2 in findDaysNeedingDummyFlow(_:_:)@<X0>(_DWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  return closure #1 in closure #2 in findDaysNeedingDummyFlow(_:_:)(a1, *(void *)(v2 + 16), a2);
}

uint64_t mergePregnancies(pregnancies:strategy:)(uint64_t a1, char a2)
{
  uint64_t v58 = 0;
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  uint64_t v46 = 0;
  __src[7] = 0;
  __src[8] = 0;
  uint64_t v44 = 0;
  uint64_t v40 = 0;
  uint64_t v38 = 0;
  memset(__b, 0, sizeof(__b));
  uint64_t v60 = a1;
  char v59 = a2 & 1;
  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AugmentedIntervalTree<UInt32, Pregnancy>);
    uint64_t v29 = AugmentedIntervalTree.__allocating_init()();
    uint64_t v58 = v29;
    swift_bridgeObjectRetain();
    uint64_t v55 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Pregnancy]);
    lazy protocol witness table accessor for type [Pregnancy] and conformance [A]();
    Collection<>.makeIterator()();
    for (uint64_t i = 0; ; uint64_t i = v20)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[Pregnancy]>);
      IndexingIterator.next()();
      if (!v54) {
        break;
      }
      outlined init with take of HealthDataQuery(v53, __dst);
      uint64_t v22 = v50;
      uint64_t v21 = v51;
      __swift_project_boxed_opaque_existential_1(__dst, v50);
      int v48 = (*(uint64_t (**)(uint64_t))(v21 + 8))(v22);
      uint64_t v24 = v50;
      uint64_t v23 = v51;
      __swift_project_boxed_opaque_existential_1(__dst, v50);
      int v47 = (*(uint64_t (**)(uint64_t))(v23 + 16))(v24);
      uint64_t v25 = AugmentedIntervalTree.search(start:end:)((uint64_t)&v48, (uint64_t)&v47);
      uint64_t v46 = v25;
      swift_bridgeObjectRetain();
      __src[9] = v25;
      uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Interval<UInt32, Pregnancy>]);
      unint64_t v27 = lazy protocol witness table accessor for type [Interval<UInt32, Pregnancy>] and conformance [A]();
      char v28 = Collection.isEmpty.getter();
      outlined destroy of [A]();
      if (v28)
      {
        uint64_t v17 = v50;
        uint64_t v16 = v51;
        __swift_project_boxed_opaque_existential_1(__dst, v50);
        int v36 = (*(uint64_t (**)(uint64_t))(v16 + 8))(v17);
        uint64_t v19 = v50;
        uint64_t v18 = v51;
        __swift_project_boxed_opaque_existential_1(__dst, v50);
        int v35 = (*(uint64_t (**)(uint64_t))(v18 + 16))(v19);
        outlined init with copy of HealthDataQuery((uint64_t)__dst, (uint64_t)v34);
        AugmentedIntervalTree.insert(start:end:context:)((uint64_t)&v36, (uint64_t)&v35, v34);
        outlined destroy of Pregnancy?((uint64_t)v34);
        uint64_t v20 = i;
      }
      else
      {
        swift_bridgeObjectRetain();
        __src[6] = v25;
        Collection<>.makeIterator()();
        while (1)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[Interval<UInt32, Pregnancy>]>);
          IndexingIterator.next()();
          if (__src[4] == 1) {
            break;
          }
          memcpy(__b, __src, sizeof(__b));
          AugmentedIntervalTree.delete(interval:)((uint64_t)__b);
          outlined destroy of Interval<UInt32, Pregnancy>((uint64_t)__b);
        }
        outlined destroy of [A]();
        uint64_t v43 = v25;
        uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Pregnancy);
        uint64_t v44 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))closure #1 in mergePregnancies(pregnancies:strategy:), 0, v26, v15, MEMORY[0x263F8E628], v27, MEMORY[0x263F8E658], v14);
        outlined init with copy of HealthDataQuery((uint64_t)__dst, (uint64_t)v42);
        Array.append(_:)();
        uint64_t v12 = v44;
        swift_bridgeObjectRetain();
        uint64_t v41 = v12;
        lazy protocol witness table accessor for type [Pregnancy] and conformance [A]();
        uint64_t v13 = _ArrayProtocol.filter(_:)();
        uint64_t v40 = v13;
        uint64_t v10 = v44;
        swift_bridgeObjectRetain();
        uint64_t v39 = v10;
        uint64_t v11 = _ArrayProtocol.filter(_:)();
        uint64_t v38 = v11;
        BOOL v9 = MEMORY[0x25A2C0810](v13, v15) <= 0;
        swift_bridgeObjectRetain();
        BOOL v8 = !v9 && MEMORY[0x25A2C0810](v11, v15) > 0;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        BOOL v7 = v8 || MEMORY[0x25A2C0810](v13, v15) == 0;
        swift_bridgeObjectRelease();
        if (v7) {
          merge(pregnancies:tree:)(v11, v29);
        }
        else {
          merge(pregnancies:tree:)(v13, v29);
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined destroy of [A]();
        uint64_t v20 = 0;
      }
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)__dst);
    }
    outlined destroy of [A]();
    uint64_t v52 = AugmentedIntervalTree.allIntervals()();
    uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Interval<UInt32, Pregnancy>]);
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Pregnancy);
    unint64_t v2 = lazy protocol witness table accessor for type [Interval<UInt32, Pregnancy>] and conformance [A]();
    uint64_t v6 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))closure #4 in mergePregnancies(pregnancies:strategy:), 0, v4, v5, MEMORY[0x263F8E628], v2, MEMORY[0x263F8E658], v14);
    outlined destroy of [A]();
    swift_release();
    return v6;
  }
  else
  {
    swift_bridgeObjectRetain();
    return a1;
  }
}

BOOL static PregnancyInvalidReason.== infix(_:_:)(char a1, char a2)
{
  switch(a1)
  {
    case 1:
      uint64_t v4 = 1;
      break;
    case 2:
      uint64_t v4 = 2;
      break;
    case 3:
      uint64_t v4 = 3;
      break;
    case 4:
      uint64_t v4 = 4;
      break;
    case 5:
      uint64_t v4 = 5;
      break;
    case 6:
      uint64_t v4 = 6;
      break;
    case 7:
      uint64_t v4 = 7;
      break;
    case 8:
      uint64_t v4 = 8;
      break;
    case 9:
      uint64_t v4 = 9;
      break;
    default:
      uint64_t v4 = 0;
      break;
  }
  switch(a2)
  {
    case 1:
      uint64_t v3 = 1;
      break;
    case 2:
      uint64_t v3 = 2;
      break;
    case 3:
      uint64_t v3 = 3;
      break;
    case 4:
      uint64_t v3 = 4;
      break;
    case 5:
      uint64_t v3 = 5;
      break;
    case 6:
      uint64_t v3 = 6;
      break;
    case 7:
      uint64_t v3 = 7;
      break;
    case 8:
      uint64_t v3 = 8;
      break;
    case 9:
      uint64_t v3 = 9;
      break;
    default:
      uint64_t v3 = 0;
      break;
  }
  return v4 == v3;
}

Swift::Bool __swiftcall PregnancySource.isFactorType()()
{
  lazy protocol witness table accessor for type PregnancySource and conformance PregnancySource();
  if (== infix<A>(_:_:)()) {
    char v1 = 1;
  }
  else {
    char v1 = == infix<A>(_:_:)();
  }
  return v1 & 1;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v30 = a1;
  uint64_t v31 = a2;
  uint64_t v55 = a3;
  uint64_t v45 = a4;
  uint64_t v32 = a5;
  uint64_t v54 = a6;
  uint64_t v34 = a8;
  int v35 = "Fatal error";
  int v36 = "Index out of bounds";
  uint64_t v37 = "Swift/Collection.swift";
  uint64_t v38 = "Range requires lowerBound <= upperBound";
  uint64_t v39 = "Swift/Range.swift";
  uint64_t v40 = "Index out of range";
  uint64_t v70 = a3;
  uint64_t v69 = a4;
  uint64_t v68 = a5;
  uint64_t v41 = *(void *)(a5 - 8);
  uint64_t v42 = a5 - 8;
  unint64_t v43 = (*(void *)(v41 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](a1);
  uint64_t v44 = (char *)&v15 - v43;
  uint64_t v46 = 0;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v48 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v49 = AssociatedTypeWitness - 8;
  unint64_t v50 = (*(void *)(v48 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v8 = MEMORY[0x270FA5388](v46);
  uint64_t v51 = (char *)&v15 - v50;
  unint64_t v52 = (*(void *)(*(void *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v8);
  uint64_t v53 = (char *)&v15 - v52;
  uint64_t v56 = swift_getAssociatedTypeWitness();
  uint64_t v57 = *(void *)(v56 - 8);
  uint64_t v58 = v56 - 8;
  unint64_t v59 = (*(void *)(v57 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = MEMORY[0x270FA5388](v55);
  uint64_t v60 = (char *)&v15 - v59;
  unint64_t v61 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v10);
  unsigned int v62 = (char *)&v15 - v61;
  Swift::Int v63 = dispatch thunk of Collection.count.getter();
  if (v63)
  {
    uint64_t v67 = Array.init()();
    uint64_t v29 = type metadata accessor for ContiguousArray();
    ContiguousArray.reserveCapacity(_:)(v63);
    uint64_t result = dispatch thunk of Collection.startIndex.getter();
    if (v63 >= 0)
    {
      uint64_t v27 = 0;
      for (uint64_t i = v33; ; uint64_t i = v18)
      {
        uint64_t v25 = i;
        uint64_t v26 = v27;
        if (v27 == v63) {
          goto LABEL_17;
        }
        if (v26 < 0 || v26 >= v63) {
          goto LABEL_16;
        }
        uint64_t v65 = v26;
        if (v63 < 0) {
          goto LABEL_15;
        }
        if (v26 >= v63) {
          break;
        }
        uint64_t v24 = v26 + 1;
        if (__OFADD__(v26, 1))
        {
          __break(1u);
          return result;
        }
        char v66 = 0;
        uint64_t v23 = v24;
LABEL_18:
        uint64_t v22 = v23;
        if (v66)
        {
          (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v60, v62, v56);
          _expectEnd<A>(of:is:)();
          (*(void (**)(char *, uint64_t))(v57 + 8))(v60, v56);
          uint64_t v19 = v67;
          swift_retain();
          swift_release();
          uint64_t v20 = v19;
          uint64_t v21 = v25;
          return v20;
        }
        uint64_t v17 = &v64;
        uint64_t v16 = (void (*)(void))dispatch thunk of Collection.subscript.read();
        (*(void (**)(char *))(v48 + 16))(v51);
        v16();
        uint64_t v14 = v25;
        v30(v51, v44);
        uint64_t v18 = v14;
        if (v14)
        {
          (*(void (**)(char *, uint64_t))(v48 + 8))(v51, AssociatedTypeWitness);
          (*(void (**)(char *, uint64_t))(v57 + 8))(v62, v56);
          outlined destroy of ContiguousArray<A1>();
          (*(void (**)(uint64_t, char *, uint64_t))(v41 + 32))(v34, v44, v32);
          return v15;
        }
        (*(void (**)(char *, uint64_t))(v48 + 8))(v51, AssociatedTypeWitness);
        ContiguousArray.append(_:)();
        dispatch thunk of Collection.formIndex(after:)();
        uint64_t result = v18;
        uint64_t v27 = v22;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_15:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_16:
      _fatalErrorMessage(_:_:file:line:flags:)();
      __break(1u);
LABEL_17:
      uint64_t v65 = 0;
      char v66 = 1;
      uint64_t v23 = v26;
      goto LABEL_18;
    }
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  uint64_t v20 = static Array._allocateUninitialized(_:)();
  uint64_t v21 = v33;
  return v20;
}

uint64_t PregnancyFromFactor.init(factorStartDate:factorEndDate:startSource:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  int v47 = a4;
  uint64_t v48 = a1;
  uint64_t v61 = a2;
  unint64_t v60 = a3;
  int v79 = 0;
  memset(__b, 0, 0x29uLL);
  uint64_t v77 = 0;
  uint64_t v76 = 0;
  uint64_t v75 = 0;
  int v73 = 0;
  int v71 = 0;
  uint64_t v70 = 0;
  int v68 = 0;
  unint64_t v54 = 0;
  uint64_t v49 = type metadata accessor for Date();
  uint64_t v50 = *(void *)(v49 - 8);
  uint64_t v51 = v49 - 8;
  unint64_t v52 = (*(void *)(v50 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v53 = (char *)&v20 - v52;
  uint64_t v55 = type metadata accessor for Calendar();
  uint64_t v56 = *(void *)(v55 - 8);
  uint64_t v57 = v55 - 8;
  unint64_t v58 = (*(void *)(v56 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v54);
  unint64_t v59 = (char *)&v20 - v58;
  uint64_t v62 = type metadata accessor for DateComponents();
  uint64_t v63 = *(void *)(v62 - 8);
  uint64_t v64 = v62 - 8;
  unint64_t v65 = (*(void *)(v63 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v62);
  char v66 = (char *)&v20 - v65;
  int v79 = (char *)&v20 - v65;
  uint64_t v77 = a1;
  uint64_t v76 = v5;
  uint64_t v75 = v6;
  *(Swift::UInt32_optional *)&uint64_t v7 = Date.toJulianDay()();
  uint64_t v74 = v7;
  int v67 = v7;
  if ((v7 & 0x100000000) != 0) {
    goto LABEL_16;
  }
  int v46 = v67;
  LODWORD(v45) = v67;
  int v73 = v67;
  *(Swift::UInt32_optional *)&uint64_t v8 = Date.toJulianDay()();
  uint64_t v72 = v8;
  HIDWORD(v45) = v8;
  if ((v8 & 0x100000000) != 0) {
    goto LABEL_16;
  }
  int v44 = HIDWORD(v45);
  unsigned int v38 = HIDWORD(v45);
  int v71 = HIDWORD(v45);
  __b[0] = v45;
  __b[2] = v60;
  LODWORD(__b[3]) = v45;
  __b[4] = 0;
  LOBYTE(__b[5]) = 0;
  static Calendar.current.getter();
  uint64_t v40 = type metadata accessor for Calendar.Component();
  uint64_t v39 = _allocateUninitializedArray<A>(_:)();
  (*(void (**)(uint64_t, void))(*(void *)(v40 - 8) + 104))(v9, *MEMORY[0x263F078A0]);
  uint64_t v10 = v39;
  _finalizeUninitializedArray<A>(_:)();
  uint64_t v41 = v10;
  lazy protocol witness table accessor for type Calendar.Component and conformance Calendar.Component();
  uint64_t v42 = Set.init(arrayLiteral:)();
  Calendar.dateComponents(_:from:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v56 + 8))(v59, v55);
  uint64_t v43 = DateComponents.year.getter();
  if ((v11 & 1) != 0 || (uint64_t v37 = v43, v70 = v43, v43 <= 3000))
  {
    LOBYTE(__b[1]) = 0;
    HIDWORD(__b[3]) = v38;
    goto LABEL_15;
  }
  Date.init()();
  *(Swift::UInt32_optional *)&uint64_t v12 = Date.toJulianDay()();
  uint64_t v69 = v12;
  int v35 = v12;
  int v36 = BYTE4(v12);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v53, v49);
  if (v36)
  {
    (*(void (**)(char *, uint64_t))(v63 + 8))(v66, v62);
LABEL_16:
    unint64_t v22 = 0;
    uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
    uint64_t v20 = v50 + 8;
    v21(v61, v49);
    uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v21)(v48, v49);
    unint64_t v28 = v22;
    unint64_t v29 = v22;
    unint64_t v30 = v22;
    unint64_t v31 = v22;
    unint64_t v32 = v54;
    int v33 = 2;
    goto LABEL_17;
  }
  int v34 = v35;
  int v68 = v35;
  LOBYTE(__b[1]) = 1;
  HIDWORD(__b[3]) = v35;
LABEL_15:
  (*(void (**)(char *, uint64_t))(v63 + 8))(v66, v62);
  unint64_t v26 = LOBYTE(__b[1]);
  unint64_t v25 = v45 | ((unint64_t)v38 << 32);
  unint64_t v27 = v45 | ((unint64_t)HIDWORD(__b[3]) << 32);
  uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
  uint64_t v23 = v50 + 8;
  v24(v61, v49);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v24)(v48, v49);
  unint64_t v28 = v25;
  unint64_t v29 = v26;
  unint64_t v30 = v60;
  unint64_t v31 = v27;
  unint64_t v32 = v54;
  int v33 = 0;
LABEL_17:
  uint64_t v14 = v47;
  unint64_t v15 = v29;
  unint64_t v16 = v30;
  unint64_t v17 = v31;
  unint64_t v18 = v32;
  char v19 = v33;
  *int v47 = v28;
  v14[1] = v15;
  _DWORD v14[2] = v16;
  v14[3] = v17;
  v14[4] = v18;
  *((unsigned char *)v14 + 40) = v19;
  return result;
}

unint64_t PregnancyFromTest.init(testDate:)(uint64_t a1)
{
  *(Swift::UInt32_optional *)&uint64_t v1 = Date.toJulianDay()();
  unsigned int v7 = v1;
  if ((v1 & 0x100000000) != 0)
  {
    uint64_t v2 = type metadata accessor for Date();
    (*(void (**)(uint64_t))(*(void *)(v2 - 8) + 8))(a1);
    return 0;
  }
  else
  {
    uint64_t v3 = type metadata accessor for Date();
    (*(void (**)(uint64_t))(*(void *)(v3 - 8) + 8))(a1);
    return v7 | ((unint64_t)v7 << 32);
  }
}

NightingaleTraining::PregnancySource_optional __swiftcall PregnancySource.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v1 = _allocateUninitializedArray<A>(_:)();
  *(void *)uint64_t v2 = "HKPregnancyFactorWithEnd";
  *(void *)(v2 + 8) = 24;
  *(unsigned char *)(v2 + 16) = 2;
  *(void *)(v2 + 24) = "HKPregnancyFactorWithoutEnd";
  *(void *)(v2 + 32) = 27;
  *(unsigned char *)(v2 + 40) = 2;
  *(void *)(v2 + 48) = "HKPregnancyTestPositive";
  *(void *)(v2 + 56) = 23;
  *(unsigned char *)(v2 + 64) = 2;
  _finalizeUninitializedArray<A>(_:)();
  Swift::Int v6 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v1, rawValue);
  swift_bridgeObjectRelease();
  switch(v6)
  {
    case 0:
      v7.Swift::UInt32 value = NightingaleTraining_PregnancySource_pregnancyFactorWithEnd;
LABEL_8:
      swift_bridgeObjectRelease();
      return v7;
    case 1:
      v7.Swift::UInt32 value = NightingaleTraining_PregnancySource_pregnancyFactorWithoutEnd;
      goto LABEL_8;
    case 2:
      v7.Swift::UInt32 value = NightingaleTraining_PregnancySource_pregnancyTestPositive;
      goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  return (NightingaleTraining::PregnancySource_optional)3;
}

uint64_t PregnancySource.rawValue.getter(char a1)
{
  if (!a1) {
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HKPregnancyFactorWithEnd", 0x18uLL, 1)._countAndFlagsBits;
  }
  if (a1 == 1) {
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HKPregnancyFactorWithoutEnd", 0x1BuLL, 1)._countAndFlagsBits;
  }
  else {
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HKPregnancyTestPositive", 0x17uLL, 1)._countAndFlagsBits;
  }
}

uint64_t PregnancyInvalidReason.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

uint64_t PregnancyInvalidReason.hashValue.getter()
{
  return _hashValue<A>(for:)();
}

NightingaleTraining::SliceDeltaAnchor_optional __swiftcall SliceDeltaAnchor.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v1 = _allocateUninitializedArray<A>(_:)();
  *(void *)uint64_t v2 = "LMP";
  *(void *)(v2 + 8) = 3;
  *(unsigned char *)(v2 + 16) = 2;
  *(void *)(v2 + 24) = "OvuEst";
  *(void *)(v2 + 32) = 6;
  *(unsigned char *)(v2 + 40) = 2;
  _finalizeUninitializedArray<A>(_:)();
  Swift::Int v6 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v1, rawValue);
  swift_bridgeObjectRelease();
  if (!v6)
  {
    char v7 = 0;
LABEL_6:
    swift_bridgeObjectRelease();
    return (NightingaleTraining::SliceDeltaAnchor_optional)(v7 & 1);
  }
  if (v6 == 1)
  {
    char v7 = 1;
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();
  return (NightingaleTraining::SliceDeltaAnchor_optional)2;
}

uint64_t SliceDeltaAnchor.rawValue.getter(char a1)
{
  if (a1) {
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("OvuEst", 6uLL, 1)._countAndFlagsBits;
  }
  else {
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("LMP", 3uLL, 1)._countAndFlagsBits;
  }
}

NightingaleTraining::OverlapPregnanciesStrategy_optional __swiftcall OverlapPregnanciesStrategy.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v1 = _allocateUninitializedArray<A>(_:)();
  *(void *)uint64_t v2 = "NoOp";
  *(void *)(v2 + 8) = 4;
  *(unsigned char *)(v2 + 16) = 2;
  *(void *)(v2 + 24) = "Merge";
  *(void *)(v2 + 32) = 5;
  *(unsigned char *)(v2 + 40) = 2;
  _finalizeUninitializedArray<A>(_:)();
  Swift::Int v6 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v1, rawValue);
  swift_bridgeObjectRelease();
  if (!v6)
  {
    char v7 = 0;
LABEL_6:
    swift_bridgeObjectRelease();
    return (NightingaleTraining::OverlapPregnanciesStrategy_optional)(v7 & 1);
  }
  if (v6 == 1)
  {
    char v7 = 1;
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();
  return (NightingaleTraining::OverlapPregnanciesStrategy_optional)2;
}

uint64_t OverlapPregnanciesStrategy.rawValue.getter(char a1)
{
  if (a1) {
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Merge", 5uLL, 1)._countAndFlagsBits;
  }
  else {
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("NoOp", 4uLL, 1)._countAndFlagsBits;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PregnancySource()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance PregnancySource()
{
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PregnancySource()
{
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance PregnancySource()
{
  return RawRepresentable<>._rawHashValue(seed:)();
}

NightingaleTraining::PregnancySource_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PregnancySource@<W0>(Swift::String *a1@<X0>, NightingaleTraining::PregnancySource_optional *a2@<X8>)
{
  result.Swift::UInt32 value = PregnancySource.init(rawValue:)(*a1).value;
  a2->Swift::UInt32 value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PregnancySource@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = PregnancySource.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v3;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PregnancyInvalidReason(char *a1, char *a2)
{
  return static PregnancyInvalidReason.== infix(_:_:)(*a1, *a2);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance PregnancyInvalidReason()
{
  return PregnancyInvalidReason.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PregnancyInvalidReason()
{
  return PregnancyInvalidReason.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SliceDeltaAnchor()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance SliceDeltaAnchor()
{
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SliceDeltaAnchor()
{
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance SliceDeltaAnchor()
{
  return RawRepresentable<>._rawHashValue(seed:)();
}

NightingaleTraining::SliceDeltaAnchor_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SliceDeltaAnchor@<W0>(Swift::String *a1@<X0>, NightingaleTraining::SliceDeltaAnchor_optional *a2@<X8>)
{
  result.Swift::UInt32 value = SliceDeltaAnchor.init(rawValue:)(*a1).value;
  a2->Swift::UInt32 value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance SliceDeltaAnchor@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = SliceDeltaAnchor.rawValue.getter(*v1 & 1);
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance OverlapPregnanciesStrategy()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance OverlapPregnanciesStrategy()
{
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance OverlapPregnanciesStrategy()
{
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance OverlapPregnanciesStrategy()
{
  return RawRepresentable<>._rawHashValue(seed:)();
}

NightingaleTraining::OverlapPregnanciesStrategy_optional protocol witness for RawRepresentable.init(rawValue:) in conformance OverlapPregnanciesStrategy@<W0>(Swift::String *a1@<X0>, NightingaleTraining::OverlapPregnanciesStrategy_optional *a2@<X8>)
{
  result.Swift::UInt32 value = OverlapPregnanciesStrategy.init(rawValue:)(*a1).value;
  a2->Swift::UInt32 value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance OverlapPregnanciesStrategy@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = OverlapPregnanciesStrategy.rawValue.getter(*v1 & 1);
  *a1 = result;
  a1[1] = v3;
  return result;
}

Swift::Int __swiftcall Pregnancy.duration()()
{
  uint64_t v4 = v0;
  uint64_t v5 = v1;
  (*(void (**)(void))(v1 + 16))();
  lazy protocol witness table accessor for type Int and conformance Int();
  lazy protocol witness table accessor for type Int and conformance Int();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  SignedInteger<>.init<A>(_:)();
  (*(void (**)(uint64_t))(v5 + 8))(v4);
  Swift::Int result = SignedInteger<>.init<A>(_:)();
  if (!__OFSUB__(v7, v6)) {
    return v7 - v6;
  }
  __break(1u);
  return result;
}

Swift::Bool __swiftcall Pregnancy.containsFlow(excludePregnanciesContainingFlow:maxLMPTolerableFlowDelta:flows:)(Swift::Bool excludePregnanciesContainingFlow, Swift::UInt32 maxLMPTolerableFlowDelta, Swift::OpaquePointer flows)
{
  uint64_t v13 = v3;
  uint64_t v14 = v4;
  uint64_t v23 = 0;
  uint64_t v21 = 0;
  int v22 = 0;
  *(_DWORD *)((char *)&v16 + 3) = 0;
  uint64_t v27 = v3;
  Swift::Bool v26 = excludePregnanciesContainingFlow;
  Swift::UInt32 v25 = maxLMPTolerableFlowDelta;
  uint64_t rawValue = flows._rawValue;
  if (excludePregnanciesContainingFlow)
  {
    int v5 = (*(uint64_t (**)())(v4 + 40))();
    Swift::UInt32 v9 = maxLMPTolerableFlowDelta + v5;
    if (__CFADD__(maxLMPTolerableFlowDelta, v5))
    {
      __break(1u);
    }
    else if (v9 != -1)
    {
      unsigned int v8 = (*(uint64_t (**)(uint64_t))(v14 + 16))(v13);
      if (v8 < v9 + 1)
      {
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      Swift::UInt32 v19 = v9 + 1;
      unsigned int v20 = v8;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<UInt32>);
      lazy protocol witness table accessor for type Range<UInt32> and conformance <> Range<A>();
      Collection<>.makeIterator()();
      while (1)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<Range<UInt32>>);
        IndexingIterator.next()();
        if (v18) {
          break;
        }
        *(_DWORD *)((char *)&v16 + 3) = v17;
        int v15 = v17;
        MEMORY[0x25A2C04B0](&v16, &v15, flows._rawValue, MEMORY[0x263F8E8F8], MEMORY[0x263F8E778], MEMORY[0x263F8E908]);
        if ((v16 & 0x100) != 0) {
          BYTE2(v16) = 0;
        }
        else {
          BYTE2(v16) = v16;
        }
        if (BYTE2(v16))
        {
          char v10 = 1;
          goto LABEL_19;
        }
      }
      char v10 = 0;
      goto LABEL_19;
    }
    __break(1u);
    return v5;
  }
  char v10 = 0;
LABEL_19:
  LOBYTE(v5) = v10;
  return v5;
}

NightingaleTraining::PregnancyInvalidReason __swiftcall Pregnancy.checkDuration(minDuration:maxDuration:minLMPDelta:maxLMPDelta:)(Swift::Int minDuration, Swift::Int maxDuration, Swift::Int minLMPDelta, Swift::Int maxLMPDelta)
{
  uint64_t v14 = v4;
  uint64_t v15 = v5;
  uint64_t v17 = (*(uint64_t (**)(void))(v5 + 96))();
  if (v17 < minDuration || maxDuration < v17) {
    return 1;
  }
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(v15 + 88))(v14);
  if (v8 < minLMPDelta || maxLMPDelta < v8) {
    return 2;
  }
  else {
    return 0;
  }
}

void *closure #1 in mergePregnancies(pregnancies:strategy:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  void v4[5] = a1;
  outlined init with copy of Pregnancy?((void *)(a1 + 8), v4);
  if (!v4[3])
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return outlined init with take of HealthDataQuery(v4, a2);
}

uint64_t closure #2 in mergePregnancies(pregnancies:strategy:)(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v2 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  (*(void (**)(uint64_t))(v2 + 48))(v3);
  lazy protocol witness table accessor for type PregnancySource and conformance PregnancySource();
  return == infix<A>(_:_:)() & 1;
}

uint64_t closure #3 in mergePregnancies(pregnancies:strategy:)(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v2 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  (*(void (**)(uint64_t))(v2 + 48))(v3);
  lazy protocol witness table accessor for type PregnancySource and conformance PregnancySource();
  return (dispatch thunk of static Equatable.== infix(_:_:)() ^ 1) & 1;
}

uint64_t merge(pregnancies:tree:)(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = a1;
  uint64_t v27 = a2;
  int v34 = closure #3 in NightingaleDPFLRunner.queryPregnancies(hyperParams:);
  unint64_t v28 = closure #20 in NightingaleDPFLRunner.run(task:useCase:context:);
  unint64_t v29 = "Fatal error";
  unint64_t v30 = "Unexpectedly found nil while unwrapping an Optional value";
  unint64_t v31 = "NightingaleTraining/Pregnancy.swift";
  uint64_t v32 = 0;
  uint64_t v53 = a1;
  uint64_t v52 = a2;
  uint64_t v46 = a1;
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Pregnancy]);
  unint64_t v35 = lazy protocol witness table accessor for type [Pregnancy] and conformance [A]();
  Sequence.min(by:)();
  uint64_t v36 = 0;
  if (!v48)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  outlined init with take of HealthDataQuery(v47, &__dst);
  uint64_t v40 = v26;
  Sequence.max(by:)();
  if (!v42)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  uint64_t v24 = &v43;
  outlined init with take of HealthDataQuery(v41, &v43);
  uint64_t v7 = v44;
  uint64_t v6 = v45;
  __swift_project_boxed_opaque_existential_1(&v43, v44);
  unsigned int v10 = (*(uint64_t (**)(uint64_t))(v6 + 16))(v7);
  p_dst = &__dst;
  uint64_t v8 = v50;
  uint64_t v9 = v51;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&__dst, v50);
  (*(void (**)(void, uint64_t))(v9 + 24))(v10, v8);
  uint64_t v15 = v50;
  uint64_t v12 = v51;
  __swift_project_boxed_opaque_existential_1(&__dst, v50);
  uint64_t v13 = *(void *)(v15 - 8);
  uint64_t v14 = v15 - 8;
  uint64_t v2 = *(void *)(v13 + 64);
  uint64_t v23 = &v5;
  unint64_t v11 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](&v5);
  uint64_t v16 = (char *)&v5 - v11;
  (*(void (**)(char *))(v13 + 16))((char *)&v5 - v11);
  int v17 = (*(uint64_t (**)(uint64_t))(v12 + 8))(v15);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v15);
  uint64_t v21 = &v39;
  int v39 = v17;
  uint64_t v19 = v50;
  uint64_t v18 = v51;
  __swift_project_boxed_opaque_existential_1(p_dst, v50);
  int v3 = (*(uint64_t (**)(uint64_t))(v18 + 16))(v19);
  unsigned int v20 = &v38;
  int v38 = v3;
  int v22 = v37;
  outlined init with copy of HealthDataQuery((uint64_t)p_dst, (uint64_t)v37);
  AugmentedIntervalTree.insert(start:end:context:)((uint64_t)v21, (uint64_t)v20, v22);
  outlined destroy of Pregnancy?((uint64_t)v22);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)p_dst);
}

void *closure #4 in mergePregnancies(pregnancies:strategy:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  void v4[5] = a1;
  outlined init with copy of Pregnancy?((void *)(a1 + 8), v4);
  if (!v4[3])
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return outlined init with take of HealthDataQuery(v4, a2);
}

uint64_t PregnancyFromTest.startDay.getter(uint64_t a1)
{
  return HIDWORD(a1);
}

uint64_t PregnancyFromTest.endDay.getter(uint64_t a1, unsigned int a2)
{
  return a2;
}

uint64_t PregnancyFromTest.endDay.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 8) = result;
  return result;
}

__C::HKQueryOptions (__swiftcall *PregnancyFromTest.endDay.modify())(Swift::UInt rawValue)
{
  return HKQueryOptions.init(rawValue:);
}

uint64_t PregnancyFromTest.lmp.getter(uint64_t a1, uint64_t a2)
{
  return HIDWORD(a2);
}

uint64_t PregnancyFromTest.source.getter(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return a3;
}

uint64_t PregnancyFromTest.sliceAnchor.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return HIDWORD(a3);
}

uint64_t PregnancyFromTest.inferredLMP.getter(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return a4 & 1;
}

uint64_t PregnancyFromTest.inferredLMP.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 24) = result & 1;
  return result;
}

__C::HKQueryOptions (__swiftcall *PregnancyFromTest.inferredLMP.modify())(Swift::UInt rawValue)
{
  return HKQueryOptions.init(rawValue:);
}

Swift::Int __swiftcall PregnancyFromTest.lmpDelta()()
{
  lazy protocol witness table accessor for type Int and conformance Int();
  lazy protocol witness table accessor for type Int and conformance Int();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  SignedInteger<>.init<A>(_:)();
  Swift::Int result = SignedInteger<>.init<A>(_:)();
  if (!__OFSUB__(v3, v2)) {
    return v3 - v2;
  }
  __break(1u);
  return result;
}

NightingaleTraining::PregnancyInvalidReason __swiftcall PregnancyFromTest.ensureValid(minDuration:maxDuration:minLMPDelta:maxLMPDelta:excludePregnanciesContainingFlow:maxLMPTolerableFlowDelta:flows:startSources:)(Swift::Int minDuration, Swift::Int maxDuration, Swift::Int minLMPDelta, Swift::Int maxLMPDelta, Swift::Bool excludePregnanciesContainingFlow, Swift::UInt32 maxLMPTolerableFlowDelta, Swift::OpaquePointer flows, Swift::OpaquePointer startSources)
{
  if (!v16) {
    return 4;
  }
  if (v15) {
    BOOL v10 = v17 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    return 5;
  }
  NightingaleTraining::PregnancyInvalidReason v9 = Pregnancy.checkDuration(minDuration:maxDuration:minLMPDelta:maxLMPDelta:)(minDuration, maxDuration, minLMPDelta, maxLMPDelta);
  if (!static PregnancyInvalidReason.== infix(_:_:)(v9, 0)) {
    return v9;
  }
  if (Pregnancy.containsFlow(excludePregnanciesContainingFlow:maxLMPTolerableFlowDelta:flows:)(excludePregnanciesContainingFlow, maxLMPTolerableFlowDelta, flows))
  {
    return 3;
  }
  return 0;
}

Swift::Void __swiftcall PregnancyFromTest.update(historicalPeriods:useSeahorseInferredStartdate:useInferredLMP:)(Swift::OpaquePointer historicalPeriods, Swift::Bool useSeahorseInferredStartdate, Swift::Bool useInferredLMP)
{
  uint64_t rawValue = historicalPeriods._rawValue;
  BOOL v33 = useSeahorseInferredStartdate;
  BOOL v32 = useInferredLMP;
  uint64_t v43 = (void (*)(char *, char *))closure #1 in Featurizer.featurizeHRPeriodPrediction(flows:daySHR10s:nightSHR10s:calendarPeriodPredictions:historicalPeriods:cycleFactors:dummyPeriodLength:sliceSize:maxNumDaysToNextPeriod:minNumDaysToNextPeriod:minNumOfDaySHRPerSlice:);
  uint64_t v60 = 0;
  char v59 = 0;
  char v58 = 0;
  uint64_t v57 = 0;
  uint64_t v40 = 0;
  uint64_t v55 = 0;
  int v47 = 0;
  int v46 = 0;
  int v45 = 0;
  uint64_t v35 = type metadata accessor for Date();
  uint64_t v36 = *(void *)(v35 - 8);
  uint64_t v37 = v35 - 8;
  unint64_t v38 = (*(void *)(v36 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  int v39 = (char *)v13 - v38;
  uint64_t v60 = MEMORY[0x270FA5388](rawValue);
  char v59 = v4 & 1;
  char v58 = v5 & 1;
  uint64_t v57 = v3;
  uint64_t v56 = v60;
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(start: UInt32, end: UInt32)]);
  unint64_t v6 = lazy protocol witness table accessor for type [(start: UInt32, end: UInt32)] and conformance [A]();
  uint64_t v44 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(v43, v40, v41, MEMORY[0x263F8E8F8], MEMORY[0x263F8E628], v6, MEMORY[0x263F8E658], v42);
  uint64_t v29 = v44;
  uint64_t v55 = v44;
  BOOL v7 = *v31 != 0;
  int v30 = *v31 - 1;
  char v8 = !v7;
  if (v8)
  {
    __break(1u);
  }
  else
  {
    int v52 = v30;
    static HIDPFLUtils.findClosest<A>(_:lessOrEqualThan:)(v29, (uint64_t)&v52, MEMORY[0x263F8E8F8], MEMORY[0x263F8E910], (uint64_t)&v53);
    uint64_t v28 = v53;
    if (v54)
    {
      int v25 = 0;
      int v26 = 1;
    }
    else
    {
      int v27 = v28;
      int v25 = v28;
      int v26 = 0;
    }
    int v24 = v25;
    if (v26)
    {
      if (!v32) {
        goto LABEL_11;
      }
      NightingaleTraining::PregnancyInvalidReason v9 = v31;
      v31[3] = *v31;
      *((unsigned char *)v9 + 24) = 1;
    }
    else
    {
      int v23 = v24;
      int v45 = v24;
      v31[3] = v24;
    }
    BOOL v7 = __CFADD__(*v31, 1);
    int v22 = *v31 + 1;
    char v10 = v7;
    if ((v10 & 1) == 0)
    {
      int v49 = v22;
      static HIDPFLUtils.findClosest<A>(_:greaterOrEqualThan:)(v29, (uint64_t)&v49, MEMORY[0x263F8E8F8], MEMORY[0x263F8E910], (uint64_t)&v50);
      uint64_t v21 = v50;
      if (v51)
      {
        int v18 = 0;
        int v19 = 1;
      }
      else
      {
        int v20 = v21;
        int v18 = v21;
        int v19 = 0;
      }
      int v17 = v18;
      if ((v19 & 1) == 0)
      {
        int v16 = v17;
        int v46 = v17;
        v31[2] = v17;
LABEL_25:
        uint64_t v12 = v31;
        v31[1] = v31[3];
        v12[5] = v12[3];
        swift_bridgeObjectRelease();
        return;
      }
      Date.init()();
      *(Swift::UInt32_optional *)&uint64_t v11 = Date.toJulianDay()();
      uint64_t v48 = v11;
      int v14 = v11;
      int v15 = BYTE4(v11);
      (*(void (**)(char *, uint64_t))(v36 + 8))(v39, v35);
      if ((v15 & 1) == 0)
      {
        void v13[2] = v14;
        int v47 = v14;
        v31[2] = v14;
        goto LABEL_25;
      }
LABEL_11:
      swift_bridgeObjectRelease();
      return;
    }
  }
  __break(1u);
}

Swift::Void __swiftcall PregnancyFromTest.updateSliceAnchor(day:)(Swift::UInt32 day)
{
  *(_DWORD *)(v1 + 20) = day;
}

uint64_t PregnancyFromFactor.source.getter()
{
  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t PregnancyFromFactor.startDay.getter()
{
  return *(unsigned int *)(v0 + 24);
}

uint64_t PregnancyFromFactor.endDay.getter()
{
  return *(unsigned int *)(v0 + 28);
}

uint64_t PregnancyFromFactor.endDay.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 28) = result;
  return result;
}

__C::HKQueryOptions (__swiftcall *PregnancyFromFactor.endDay.modify())(Swift::UInt rawValue)
{
  return HKQueryOptions.init(rawValue:);
}

uint64_t PregnancyFromFactor.lmp.getter()
{
  return *(unsigned int *)(v0 + 32);
}

uint64_t PregnancyFromFactor.sliceAnchor.getter()
{
  return *(unsigned int *)(v0 + 36);
}

uint64_t PregnancyFromFactor.inferredLMP.getter()
{
  return *(unsigned char *)(v0 + 40) & 1;
}

uint64_t PregnancyFromFactor.inferredLMP.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 40) = result & 1;
  return result;
}

__C::HKQueryOptions (__swiftcall *PregnancyFromFactor.inferredLMP.modify())(Swift::UInt rawValue)
{
  return HKQueryOptions.init(rawValue:);
}

uint64_t protocol witness for Pregnancy.startDay.getter in conformance PregnancyFromTest()
{
  return PregnancyFromTest.startDay.getter(*v0);
}

uint64_t protocol witness for Pregnancy.endDay.getter in conformance PregnancyFromTest()
{
  return PregnancyFromTest.endDay.getter(*v0, v0[1]);
}

uint64_t protocol witness for Pregnancy.endDay.setter in conformance PregnancyFromTest(uint64_t a1)
{
  return PregnancyFromTest.endDay.setter(a1);
}

void (*protocol witness for Pregnancy.endDay.modify in conformance PregnancyFromTest(void *a1))(void **a1, char a2)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = PregnancyFromTest.endDay.modify();
  return protocol witness for Pregnancy.endDay.modify in conformance PregnancyFromTest;
}

void protocol witness for Pregnancy.endDay.modify in conformance PregnancyFromTest(void **a1, char a2)
{
  uint64_t v2 = (void (**)(void *, uint64_t))*a1;
  if (a2) {
    v2[4](v2, 1);
  }
  else {
    v2[4](v2, 0);
  }
  free(v2);
}

uint64_t protocol witness for Pregnancy.lmp.getter in conformance PregnancyFromTest()
{
  return PregnancyFromTest.lmp.getter(*v0, v0[1]);
}

uint64_t protocol witness for Pregnancy.source.getter in conformance PregnancyFromTest()
{
  return PregnancyFromTest.source.getter(*(void *)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
}

uint64_t protocol witness for Pregnancy.sliceAnchor.getter in conformance PregnancyFromTest()
{
  LOBYTE(v2) = *(unsigned char *)(v0 + 16);
  HIDWORD(v2) = *(_DWORD *)(v0 + 20);
  return PregnancyFromTest.sliceAnchor.getter(*(void *)v0, *(void *)(v0 + 8), v2);
}

uint64_t protocol witness for Pregnancy.inferredLMP.getter in conformance PregnancyFromTest()
{
  LOBYTE(v2) = *(unsigned char *)(v0 + 16);
  HIDWORD(v2) = *(_DWORD *)(v0 + 20);
  return PregnancyFromTest.inferredLMP.getter(*(void *)v0, *(void *)(v0 + 8), v2, *(unsigned char *)(v0 + 24) & 1) & 1;
}

uint64_t protocol witness for Pregnancy.inferredLMP.setter in conformance PregnancyFromTest(char a1)
{
  return PregnancyFromTest.inferredLMP.setter(a1 & 1);
}

void (*protocol witness for Pregnancy.inferredLMP.modify in conformance PregnancyFromTest(void *a1))(void **a1, char a2)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = PregnancyFromTest.inferredLMP.modify();
  return protocol witness for Pregnancy.endDay.modify in conformance PregnancyFromTest;
}

Swift::Int protocol witness for Pregnancy.lmpDelta() in conformance PregnancyFromTest()
{
  return PregnancyFromTest.lmpDelta()();
}

Swift::Int protocol witness for Pregnancy.duration() in conformance PregnancyFromTest()
{
  return Pregnancy.duration()();
}

void protocol witness for Pregnancy.update(historicalPeriods:useSeahorseInferredStartdate:useInferredLMP:) in conformance PregnancyFromTest(Swift::OpaquePointer a1, char a2, char a3)
{
}

void protocol witness for Pregnancy.updateSliceAnchor(day:) in conformance PregnancyFromTest(Swift::UInt32 a1)
{
}

uint64_t protocol witness for Pregnancy.ensureValid(minDuration:maxDuration:minLMPDelta:maxLMPDelta:excludePregnanciesContainingFlow:maxLMPTolerableFlowDelta:flows:startSources:) in conformance PregnancyFromTest(Swift::Int a1, Swift::Int a2, Swift::Int a3, Swift::Int a4, char a5, Swift::UInt32 a6, Swift::OpaquePointer a7, Swift::OpaquePointer a8)
{
  return PregnancyFromTest.ensureValid(minDuration:maxDuration:minLMPDelta:maxLMPDelta:excludePregnanciesContainingFlow:maxLMPTolerableFlowDelta:flows:startSources:)(a1, a2, a3, a4, a5 & 1, a6, a7, a8);
}

Swift::Void __swiftcall PregnancyFromFactor.update(historicalPeriods:useSeahorseInferredStartdate:useInferredLMP:)(Swift::OpaquePointer historicalPeriods, Swift::Bool useSeahorseInferredStartdate, Swift::Bool useInferredLMP)
{
  uint64_t v17 = 0;
  uint64_t rawValue = historicalPeriods._rawValue;
  Swift::Bool v19 = useSeahorseInferredStartdate;
  Swift::Bool v18 = useInferredLMP;
  int v16 = historicalPeriods._rawValue;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(start: UInt32, end: UInt32)]);
  unint64_t v3 = lazy protocol witness table accessor for type [(start: UInt32, end: UInt32)] and conformance [A]();
  uint64_t v15 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))closure #1 in Featurizer.featurizeHRPeriodPrediction(flows:daySHR10s:nightSHR10s:calendarPeriodPredictions:historicalPeriods:cycleFactors:dummyPeriodLength:sliceSize:maxNumDaysToNextPeriod:minNumDaysToNextPeriod:minNumOfDaySHRPerSlice:), 0, v10, MEMORY[0x263F8E8F8], MEMORY[0x263F8E628], v3, MEMORY[0x263F8E658], v11);
  int v12 = *(_DWORD *)(v9 + 24);
  static HIDPFLUtils.findClosest<A>(_:lessOrEqualThan:)(v15, (uint64_t)&v12, MEMORY[0x263F8E8F8], MEMORY[0x263F8E910], (uint64_t)&v13);
  if (v14)
  {
    int v5 = 0;
    char v6 = 1;
  }
  else
  {
    int v5 = v13;
    char v6 = 0;
  }
  if (v6)
  {
    if (!useInferredLMP)
    {
      swift_bridgeObjectRelease();
      return;
    }
    *(_DWORD *)(v9 + 32) = *(_DWORD *)v9;
    *(unsigned char *)(v9 + 40) = 1;
  }
  else
  {
    *(_DWORD *)(v9 + 32) = v5;
  }
  if (useSeahorseInferredStartdate)
  {
    type metadata accessor for _HKPrivatePregnancyStartDateSource();
    lazy protocol witness table accessor for type _HKPrivatePregnancyStartDateSource and conformance _HKPrivatePregnancyStartDateSource();
    char v4 = == infix<A>(_:_:)();
  }
  else
  {
    char v4 = 1;
  }
  if (v4) {
    *(_DWORD *)(v9 + 24) = *(_DWORD *)(v9 + 32);
  }
  *(_DWORD *)(v9 + 36) = *(_DWORD *)(v9 + 32);
  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall PregnancyFromFactor.updateSliceAnchor(day:)(Swift::UInt32 day)
{
  *(_DWORD *)(v1 + 36) = day;
}

NightingaleTraining::PregnancyInvalidReason __swiftcall PregnancyFromFactor.ensureValid(minDuration:maxDuration:minLMPDelta:maxLMPDelta:excludePregnanciesContainingFlow:maxLMPTolerableFlowDelta:flows:startSources:)(Swift::Int minDuration, Swift::Int maxDuration, Swift::Int minLMPDelta, Swift::Int maxLMPDelta, Swift::Bool excludePregnanciesContainingFlow, Swift::UInt32 maxLMPTolerableFlowDelta, Swift::OpaquePointer flows, Swift::OpaquePointer startSources)
{
  NightingaleTraining::PregnancyInvalidReason v21 = NightingaleTraining_PregnancyInvalidReason_valid;
  Swift::Int v31 = minDuration;
  Swift::Int v30 = maxDuration;
  Swift::Int v29 = minLMPDelta;
  Swift::Int v28 = maxLMPDelta;
  Swift::Bool v27 = excludePregnanciesContainingFlow;
  Swift::UInt32 v26 = maxLMPTolerableFlowDelta;
  uint64_t rawValue = flows._rawValue;
  int v24 = startSources._rawValue;
  uint64_t v23 = v8;
  if (!*(_DWORD *)(v8 + 32)) {
    return 4;
  }
  memcpy(__dst, __src, sizeof(__dst));
  NightingaleTraining::PregnancyInvalidReason v10 = Pregnancy.checkDuration(minDuration:maxDuration:minLMPDelta:maxLMPDelta:)(minDuration, maxDuration, minLMPDelta, maxLMPDelta);
  NightingaleTraining::PregnancyInvalidReason v21 = v10;
  if (!static PregnancyInvalidReason.== infix(_:_:)(v10, 0)) {
    return v10;
  }
  memcpy(v20, __src, sizeof(v20));
  if (Pregnancy.containsFlow(excludePregnanciesContainingFlow:maxLMPTolerableFlowDelta:flows:)(excludePregnanciesContainingFlow, maxLMPTolerableFlowDelta, flows))
  {
    return 3;
  }
  uint64_t v32 = __src[2];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [_HKPrivatePregnancyStartDateSource]);
  lazy protocol witness table accessor for type [_HKPrivatePregnancyStartDateSource] and conformance [A]();
  lazy protocol witness table accessor for type _HKPrivatePregnancyStartDateSource and conformance _HKPrivatePregnancyStartDateSource();
  if (Sequence<>.contains(_:)()) {
    return 0;
  }
  else {
    return 6;
  }
}

Swift::Int __swiftcall PregnancyFromFactor.lmpDelta()()
{
  lazy protocol witness table accessor for type Int and conformance Int();
  lazy protocol witness table accessor for type Int and conformance Int();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  SignedInteger<>.init<A>(_:)();
  Swift::Int result = SignedInteger<>.init<A>(_:)();
  if (!__OFSUB__(v3, v2)) {
    return v3 - v2;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Pregnancy.startDay.getter in conformance PregnancyFromFactor()
{
  memcpy(v2, v0, sizeof(v2));
  return PregnancyFromFactor.startDay.getter();
}

uint64_t protocol witness for Pregnancy.endDay.getter in conformance PregnancyFromFactor()
{
  memcpy(v2, v0, sizeof(v2));
  return PregnancyFromFactor.endDay.getter();
}

uint64_t protocol witness for Pregnancy.endDay.setter in conformance PregnancyFromFactor(uint64_t a1)
{
  return PregnancyFromFactor.endDay.setter(a1);
}

void (*protocol witness for Pregnancy.endDay.modify in conformance PregnancyFromFactor(void *a1))(void **a1, char a2)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = PregnancyFromFactor.endDay.modify();
  return protocol witness for Pregnancy.endDay.modify in conformance PregnancyFromTest;
}

uint64_t protocol witness for Pregnancy.lmp.getter in conformance PregnancyFromFactor()
{
  memcpy(v2, v0, sizeof(v2));
  return PregnancyFromFactor.lmp.getter();
}

uint64_t protocol witness for Pregnancy.source.getter in conformance PregnancyFromFactor()
{
  memcpy(v2, v0, sizeof(v2));
  return PregnancyFromFactor.source.getter();
}

uint64_t protocol witness for Pregnancy.sliceAnchor.getter in conformance PregnancyFromFactor()
{
  memcpy(v2, v0, sizeof(v2));
  return PregnancyFromFactor.sliceAnchor.getter();
}

uint64_t protocol witness for Pregnancy.inferredLMP.getter in conformance PregnancyFromFactor()
{
  memcpy(v2, v0, sizeof(v2));
  return PregnancyFromFactor.inferredLMP.getter() & 1;
}

uint64_t protocol witness for Pregnancy.inferredLMP.setter in conformance PregnancyFromFactor(char a1)
{
  return PregnancyFromFactor.inferredLMP.setter(a1 & 1);
}

void (*protocol witness for Pregnancy.inferredLMP.modify in conformance PregnancyFromFactor(void *a1))(void **a1, char a2)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = PregnancyFromFactor.inferredLMP.modify();
  return protocol witness for Pregnancy.endDay.modify in conformance PregnancyFromTest;
}

Swift::Int protocol witness for Pregnancy.lmpDelta() in conformance PregnancyFromFactor()
{
  memcpy(v2, v0, sizeof(v2));
  return PregnancyFromFactor.lmpDelta()();
}

void protocol witness for Pregnancy.update(historicalPeriods:useSeahorseInferredStartdate:useInferredLMP:) in conformance PregnancyFromFactor(Swift::OpaquePointer a1, char a2, char a3)
{
}

void protocol witness for Pregnancy.updateSliceAnchor(day:) in conformance PregnancyFromFactor(Swift::UInt32 a1)
{
}

uint64_t protocol witness for Pregnancy.ensureValid(minDuration:maxDuration:minLMPDelta:maxLMPDelta:excludePregnanciesContainingFlow:maxLMPTolerableFlowDelta:flows:startSources:) in conformance PregnancyFromFactor(Swift::Int a1, Swift::Int a2, Swift::Int a3, Swift::Int a4, char a5, Swift::UInt32 a6, Swift::OpaquePointer a7, Swift::OpaquePointer a8)
{
  memcpy(__dst, v8, sizeof(__dst));
  return PregnancyFromFactor.ensureValid(minDuration:maxDuration:minLMPDelta:maxLMPDelta:excludePregnanciesContainingFlow:maxLMPTolerableFlowDelta:flows:startSources:)(a1, a2, a3, a4, a5 & 1, a6, a7, a8);
}

uint64_t outlined destroy of Interval<UInt32, Pregnancy>(uint64_t a1)
{
  if (*(void *)(a1 + 32)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  }
  return a1;
}

unint64_t lazy protocol witness table accessor for type PregnancyInvalidReason and conformance PregnancyInvalidReason()
{
  uint64_t v2 = lazy protocol witness table cache variable for type PregnancyInvalidReason and conformance PregnancyInvalidReason;
  if (!lazy protocol witness table cache variable for type PregnancyInvalidReason and conformance PregnancyInvalidReason)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type PregnancyInvalidReason and conformance PregnancyInvalidReason);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type PregnancyInvalidReason and conformance PregnancyInvalidReason;
  if (!lazy protocol witness table cache variable for type PregnancyInvalidReason and conformance PregnancyInvalidReason)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type PregnancyInvalidReason and conformance PregnancyInvalidReason);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type OverlapPregnanciesStrategy and conformance OverlapPregnanciesStrategy()
{
  uint64_t v2 = lazy protocol witness table cache variable for type OverlapPregnanciesStrategy and conformance OverlapPregnanciesStrategy;
  if (!lazy protocol witness table cache variable for type OverlapPregnanciesStrategy and conformance OverlapPregnanciesStrategy)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type OverlapPregnanciesStrategy and conformance OverlapPregnanciesStrategy);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type OverlapPregnanciesStrategy and conformance OverlapPregnanciesStrategy;
  if (!lazy protocol witness table cache variable for type OverlapPregnanciesStrategy and conformance OverlapPregnanciesStrategy)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type OverlapPregnanciesStrategy and conformance OverlapPregnanciesStrategy);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type [_HKPrivatePregnancyStartDateSource] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [_HKPrivatePregnancyStartDateSource] and conformance [A];
  if (!lazy protocol witness table cache variable for type [_HKPrivatePregnancyStartDateSource] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [_HKPrivatePregnancyStartDateSource]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [_HKPrivatePregnancyStartDateSource] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type [_HKPrivatePregnancyStartDateSource] and conformance [A];
  if (!lazy protocol witness table cache variable for type [_HKPrivatePregnancyStartDateSource] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [_HKPrivatePregnancyStartDateSource]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [_HKPrivatePregnancyStartDateSource] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

ValueMetadata *type metadata accessor for PregnancySource()
{
  return &type metadata for PregnancySource;
}

ValueMetadata *type metadata accessor for PregnancyInvalidReason()
{
  return &type metadata for PregnancyInvalidReason;
}

ValueMetadata *type metadata accessor for SliceDeltaAnchor()
{
  return &type metadata for SliceDeltaAnchor;
}

ValueMetadata *type metadata accessor for OverlapPregnanciesStrategy()
{
  return &type metadata for OverlapPregnanciesStrategy;
}

__n128 __swift_memcpy25_4(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 9);
  *(__n128 *)(a1 + 9) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for PregnancyFromTest(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFF && *(unsigned char *)(a1 + 25))
    {
      int v4 = *(_DWORD *)a1 + 254;
    }
    else
    {
      int v3 = -1;
      if ((*(unsigned char *)(a1 + 24) & 0xFE) != 0) {
        int v3 = (*(unsigned __int8 *)(a1 + 24) + 2147483646) & 0x7FFFFFFF;
      }
      int v4 = v3;
    }
  }
  else
  {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PregnancyFromTest(uint64_t result, unsigned int a2, unsigned int a3)
{
  int v3 = (unsigned char *)(result + 25);
  if (a2 > 0xFE)
  {
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)(result + 8) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *int v3 = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *int v3 = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PregnancyFromTest()
{
  return &type metadata for PregnancyFromTest;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __swift_memcpy41_8(void *a1, const void *a2)
{
}

uint64_t getEnumTagSinglePayload for PregnancyFromFactor(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFF && *(unsigned char *)(a1 + 41))
    {
      int v4 = *(_DWORD *)a1 + 254;
    }
    else
    {
      int v3 = -1;
      if ((*(unsigned char *)(a1 + 40) & 0xFE) != 0) {
        int v3 = (*(unsigned __int8 *)(a1 + 40) + 2147483646) & 0x7FFFFFFF;
      }
      int v4 = v3;
    }
  }
  else
  {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PregnancyFromFactor(uint64_t result, unsigned int a2, unsigned int a3)
{
  int v3 = (unsigned char *)(result + 41);
  if (a2 > 0xFE)
  {
    *(void *)(result + 24) = 0;
    *(void *)(result + 16) = 0;
    *(void *)(result + 8) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 32) = 0;
    *(unsigned char *)(result + 40) = 0;
    if (a3 >= 0xFF) {
      *int v3 = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *int v3 = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 40) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PregnancyFromFactor()
{
  return &type metadata for PregnancyFromFactor;
}

unint64_t base witness table accessor for Equatable in OverlapPregnanciesStrategy()
{
  return lazy protocol witness table accessor for type OverlapPregnanciesStrategy and conformance OverlapPregnanciesStrategy();
}

unint64_t base witness table accessor for Equatable in SliceDeltaAnchor()
{
  return lazy protocol witness table accessor for type SliceDeltaAnchor and conformance SliceDeltaAnchor();
}

unint64_t base witness table accessor for Equatable in PregnancySource()
{
  return lazy protocol witness table accessor for type PregnancySource and conformance PregnancySource();
}

unint64_t base witness table accessor for Equatable in PregnancyInvalidReason()
{
  return lazy protocol witness table accessor for type PregnancyInvalidReason and conformance PregnancyInvalidReason();
}

uint64_t static NightingaleDMetricsProcessor.generateCycleMetrics(hyperParams:outputs:labels:historicalPeriods:sliceEndDays:pregnancies:today:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t *a8@<X8>)
{
  uint64_t v236 = a8;
  uint64_t v237 = a1;
  uint64_t v238 = a2;
  uint64_t v239 = a3;
  uint64_t v240 = a4;
  uint64_t v241 = a5;
  uint64_t v266 = a6;
  int v242 = a7;
  uint64_t v267 = 0;
  uint64_t v244 = closure #20 in NightingaleDPFLRunner.run(task:useCase:context:);
  uint64_t v245 = partial apply for closure #2 in static NightingaleDMetricsProcessor.generateCycleMetrics(hyperParams:outputs:labels:historicalPeriods:sliceEndDays:pregnancies:today:);
  uint64_t v246 = (void (*)(char *, char *))partial apply for closure #3 in static NightingaleDMetricsProcessor.generateCycleMetrics(hyperParams:outputs:labels:historicalPeriods:sliceEndDays:pregnancies:today:);
  uint64_t v247 = closure #4 in static NightingaleDMetricsProcessor.generateCycleMetrics(hyperParams:outputs:labels:historicalPeriods:sliceEndDays:pregnancies:today:);
  Swift::UInt32 v248 = partial apply for closure #3 in static NightingaleDMetricsProcessor.generateCycleMetrics(hyperParams:outputs:labels:historicalPeriods:sliceEndDays:pregnancies:today:);
  Swift::UInt32 v249 = partial apply for closure #6 in static NightingaleDMetricsProcessor.generateCycleMetrics(hyperParams:outputs:labels:historicalPeriods:sliceEndDays:pregnancies:today:);
  uint64_t v250 = "Fatal error";
  uint64_t v251 = "Range requires lowerBound <= upperBound";
  uint64_t v252 = "Swift/Range.swift";
  uint64_t v253 = partial apply for closure #7 in static NightingaleDMetricsProcessor.generateCycleMetrics(hyperParams:outputs:labels:historicalPeriods:sliceEndDays:pregnancies:today:);
  int v254 = partial apply for closure #8 in static NightingaleDMetricsProcessor.generateCycleMetrics(hyperParams:outputs:labels:historicalPeriods:sliceEndDays:pregnancies:today:);
  uint64_t v255 = (void (*)(char *, char *))closure #9 in static NightingaleDMetricsProcessor.generateCycleMetrics(hyperParams:outputs:labels:historicalPeriods:sliceEndDays:pregnancies:today:);
  uint64_t v256 = implicit closure #1 in static NightingaleDMetricsProcessor.generateCycleMetrics(hyperParams:outputs:labels:historicalPeriods:sliceEndDays:pregnancies:today:);
  uint64_t v257 = (void (*)(char *, char *))closure #10 in static NightingaleDMetricsProcessor.generateCycleMetrics(hyperParams:outputs:labels:historicalPeriods:sliceEndDays:pregnancies:today:);
  uint64_t v258 = implicit closure #1 in static NightingaleDMetricsProcessor.generateCycleMetrics(hyperParams:outputs:labels:historicalPeriods:sliceEndDays:pregnancies:today:);
  int v259 = (void (*)(char *, char *))closure #11 in static NightingaleDMetricsProcessor.generateCycleMetrics(hyperParams:outputs:labels:historicalPeriods:sliceEndDays:pregnancies:today:);
  uint64_t v260 = implicit closure #1 in static NightingaleDMetricsProcessor.generateCycleMetrics(hyperParams:outputs:labels:historicalPeriods:sliceEndDays:pregnancies:today:);
  uint64_t v261 = (void (*)(char *, char *))closure #12 in static NightingaleDMetricsProcessor.generateCycleMetrics(hyperParams:outputs:labels:historicalPeriods:sliceEndDays:pregnancies:today:);
  uint64_t v262 = closure #13 in static NightingaleDMetricsProcessor.generateCycleMetrics(hyperParams:outputs:labels:historicalPeriods:sliceEndDays:pregnancies:today:);
  uint64_t v263 = (void (*)(char *, char *))closure #14 in static NightingaleDMetricsProcessor.generateCycleMetrics(hyperParams:outputs:labels:historicalPeriods:sliceEndDays:pregnancies:today:);
  Swift::UInt32 v264 = "Unexpectedly found nil while unwrapping an Optional value";
  Swift::UInt32 v265 = "NightingaleTraining/NightingaleDMetricsProcessor.swift";
  uint64_t v371 = 0;
  uint64_t v366 = 0;
  uint64_t v361 = 0;
  uint64_t v360 = 0;
  uint64_t v359 = 0;
  uint64_t v355 = 0;
  uint64_t v356 = 0;
  uint64_t v357 = 0;
  uint64_t v349 = 0;
  uint64_t v347 = 0;
  uint64_t v348 = 0;
  uint64_t v341 = 0;
  uint64_t v336 = 0;
  uint64_t v331 = 0;
  uint64_t v330 = 0;
  uint64_t v328 = 0;
  uint64_t v325 = 0;
  uint64_t v317 = 0;
  uint64_t v307 = 0;
  uint64_t v306 = 0;
  char v305 = 0;
  unsigned int v287 = 0;
  unsigned int v286 = 0;
  unsigned int v281 = 0;
  unsigned int v280 = 0;
  uint64_t v279 = 0;
  uint64_t v277 = 0;
  uint64_t v379 = a1;
  uint64_t v378 = a2;
  uint64_t v377 = a3;
  uint64_t v376 = a4;
  uint64_t v375 = a5;
  uint64_t v374 = a6;
  int v373 = a7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Pregnancy);
  if (MEMORY[0x25A2C0810](v266, v8) <= 0
    || (uint64_t v235 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (start: UInt32, end: UInt32)),
        MEMORY[0x25A2C0810](v240) <= 0)
    || MEMORY[0x25A2C0820](v238) <= 0
    || (uint64_t v234 = MEMORY[0x25A2C0820](v238), v234 != MEMORY[0x25A2C0820](v239))
    || (uint64_t v233 = MEMORY[0x25A2C0820](v238), v233 != MEMORY[0x25A2C0830](v241)))
  {
    lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
    v79[1] = swift_allocError();
    *int v73 = 42;
    return swift_willThrow();
  }
  uint64_t v372 = v266;
  uint64_t v229 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Pregnancy]);
  unint64_t v230 = lazy protocol witness table accessor for type [Pregnancy] and conformance [A]();
  uint64_t result = Sequence.sorted(by:)();
  uint64_t v231 = v243;
  uint64_t v232 = result;
  if (v243)
  {
    __break(1u);
    __break(1u);
    goto LABEL_111;
  }
  uint64_t v222 = v232;
  uint64_t v371 = v232;
  uint64_t v369 = v238;
  uint64_t v223 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
  unint64_t v224 = lazy protocol witness table accessor for type [Float] and conformance [A]();
  MEMORY[0x25A2C0660](&v370, v223);
  uint64_t v368 = v370;
  swift_retain();
  uint64_t v225 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EnumeratedSequence<[Float]>);
  unint64_t v226 = lazy protocol witness table accessor for type EnumeratedSequence<[Float]> and conformance EnumeratedSequence<A>();
  uint64_t v227 = 0;
  uint64_t v228 = Sequence.filter(_:)();
  uint64_t v214 = v228;
  swift_release();
  uint64_t v367 = v228;
  swift_bridgeObjectRetain();
  uint64_t v215 = v79;
  MEMORY[0x270FA5388](v79);
  char v216 = v78;
  v78[2] = v10;
  uint64_t v217 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(offset: Int, element: Float)]);
  unint64_t v11 = lazy protocol witness table accessor for type [(offset: Int, element: Float)] and conformance [A]();
  uint64_t v12 = v227;
  unint64_t v219 = v11;
  uint64_t result = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(v246, (uint64_t)v216, v217, MEMORY[0x263F8E8F8], MEMORY[0x263F8E628], v11, MEMORY[0x263F8E658], v218);
  uint64_t v220 = v12;
  uint64_t v221 = result;
  if (v12)
  {
LABEL_111:
    __break(1u);
    goto LABEL_112;
  }
  uint64_t v211 = v221;
  swift_bridgeObjectRelease();
  outlined destroy of [A]();
  uint64_t v366 = v211;
  uint64_t v364 = v239;
  MEMORY[0x25A2C0660](&v365, v223, v224);
  uint64_t v13 = v220;
  uint64_t v363 = v365;
  uint64_t result = Sequence.filter(_:)();
  uint64_t v212 = v13;
  uint64_t v213 = result;
  if (v13)
  {
LABEL_112:
    __break(1u);
    __break(1u);
LABEL_113:
    __break(1u);
LABEL_114:
    __break(1u);
LABEL_115:
    __break(1u);
LABEL_116:
    __break(1u);
    goto LABEL_117;
  }
  uint64_t v362 = v213;
  swift_bridgeObjectRetain();
  float v208 = v78;
  char v14 = (void (*)(char *, char *))MEMORY[0x270FA5388](v248);
  unint64_t v76 = v15;
  uint64_t v19 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(v14, (uint64_t)&v74, v16, MEMORY[0x263F8E8F8], MEMORY[0x263F8E628], v17, MEMORY[0x263F8E658], v18);
  uint64_t v209 = 0;
  uint64_t v210 = v19;
  uint64_t v205 = v19;
  swift_bridgeObjectRelease();
  outlined destroy of [A]();
  uint64_t v361 = v205;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClosedRange<UInt32>);
  uint64_t v360 = Array.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AugmentedIntervalTree<UInt32, Any>);
  uint64_t v20 = AugmentedIntervalTree.__allocating_init()();
  uint64_t v21 = v209;
  uint64_t v206 = v20;
  uint64_t v359 = v20;
  uint64_t v358 = v222;
  swift_retain();
  uint64_t result = Sequence.forEach(_:)();
  uint64_t v207 = v21;
  if (v21) {
    goto LABEL_113;
  }
  swift_release();
  uint64_t v204 = MEMORY[0x25A2C0810](v240, v235);
  if (v204 < 0)
  {
    char v74 = 2;
    uint64_t v75 = 754;
    LODWORD(v76) = 0;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  uint64_t v353 = 0;
  uint64_t v354 = v204;
  uint64_t v355 = specialized Collection<>.makeIterator()();
  uint64_t v356 = v22;
  uint64_t v357 = v23;
  for (uint64_t i = v207; ; uint64_t i = v199)
  {
    uint64_t v201 = i;
    uint64_t v351 = specialized IndexingIterator.next()();
    char v352 = v24 & 1;
    uint64_t v202 = v351;
    if (v24) {
      break;
    }
    uint64_t v200 = v202;
    uint64_t v196 = v202;
    uint64_t v279 = v202;
    Array.subscript.getter();
    uint64_t v25 = v201;
    unsigned int v198 = v278;
    uint64_t v277 = v278;
    uint64_t v275 = v222;
    uint64_t v197 = v78;
    MEMORY[0x270FA5388](v253);
    unint64_t v76 = __PAIR64__(v26, v198);
    uint64_t result = Sequence.first(where:)();
    uint64_t v199 = v25;
    if (v25) {
      goto LABEL_114;
    }
    BOOL v195 = v276[3] == 0;
    BOOL v194 = v195;
    outlined destroy of Pregnancy?((uint64_t)v276);
    if (v194)
    {
      uint64_t result = MEMORY[0x25A2C0810](v240, v235);
      uint64_t v193 = result - 1;
      if (__OFSUB__(result, 1)) {
        goto LABEL_128;
      }
      if (v196 == v193)
      {
        unsigned int v270 = v198;
        int v269 = v242;
        int v192 = v268;
        memset(v268, 0, sizeof(v268));
        AugmentedIntervalTree.insert(start:end:context:)((uint64_t)&v270, (uint64_t)&v269, v268);
        outlined destroy of Pregnancy?((uint64_t)v192);
      }
      else
      {
        unsigned int v274 = v198;
        uint64_t v191 = v196 + 1;
        if (__OFADD__(v196, 1)) {
          goto LABEL_129;
        }
        uint64_t result = Array.subscript.getter();
        int v190 = v273 - 1;
        if (!v273) {
          goto LABEL_130;
        }
        int v272 = v190;
        Swift::UInt32 v189 = v271;
        memset(v271, 0, sizeof(v271));
        AugmentedIntervalTree.insert(start:end:context:)((uint64_t)&v274, (uint64_t)&v272, v271);
        outlined destroy of Pregnancy?((uint64_t)v189);
      }
    }
  }
  uint64_t v350 = v241;
  swift_retain();
  uint64_t v185 = v78;
  MEMORY[0x270FA5388](v78);
  float v186 = &v74;
  unint64_t v76 = v29;
  uint64_t v77 = &v360;
  uint64_t v187 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32]);
  lazy protocol witness table accessor for type [UInt32] and conformance [A]();
  uint64_t v30 = v201;
  uint64_t result = Sequence.forEach(_:)();
  uint64_t v188 = v30;
  if (v30) {
    goto LABEL_115;
  }
  swift_release();
  uint64_t v181 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (start: UInt32, end: UInt32, label: Int, detect: Bool, latency: Int?));
  uint64_t v349 = Array.init()();
  uint64_t v182 = v360;
  swift_bridgeObjectRetain();
  uint64_t v346 = v182;
  uint64_t v183 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ClosedRange<UInt32>]);
  lazy protocol witness table accessor for type [ClosedRange<UInt32>] and conformance [A]();
  Collection<>.makeIterator()();
  for (uint64_t j = v188; ; uint64_t j = v179)
  {
    uint64_t v179 = j;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for IndexingIterator<[ClosedRange<UInt32>]>);
    IndexingIterator.next()();
    uint64_t v180 = v344;
    if (v345) {
      break;
    }
    uint64_t v178 = v180;
    unsigned int v175 = HIDWORD(v180);
    int v176 = v180;
    uint64_t v307 = v180;
    uint64_t v306 = 0;
    char v305 = 0;
    uint64_t v303 = 0;
    char v304 = 1;
    unsigned int v301 = 0;
    char v302 = 1;
    unsigned int v299 = 0;
    char v300 = 1;
    int v296 = v180;
    static HIDPFLUtils.findClosest<A>(_:greaterOrEqualThan:)(v211, (uint64_t)&v296, MEMORY[0x263F8E8F8], MEMORY[0x263F8E910], (uint64_t)&v297);
    uint64_t v177 = v297;
    if (v298)
    {
      uint64_t v173 = 0x100000000;
    }
    else
    {
      int v174 = v177;
      uint64_t v173 = v177;
    }
    unsigned int v172 = v173;
    if ((v173 & 0x100000000) == 0)
    {
      unsigned int v171 = v172;
      unsigned int v170 = v172;
      unsigned int v280 = v172;
      if (v175 >= v171)
      {
        char v305 = 1;
        unsigned int v301 = v170;
        char v302 = 0;
      }
    }
    int v293 = v176;
    static HIDPFLUtils.findClosest<A>(_:greaterOrEqualThan:)(v205, (uint64_t)&v293, MEMORY[0x263F8E8F8], MEMORY[0x263F8E910], (uint64_t)&v294);
    uint64_t v169 = v294;
    if (v295)
    {
      uint64_t v167 = 0x100000000;
    }
    else
    {
      int v168 = v169;
      uint64_t v167 = v169;
    }
    unsigned int v166 = v167;
    if ((v167 & 0x100000000) == 0)
    {
      unsigned int v165 = v166;
      unsigned int v164 = v166;
      unsigned int v281 = v166;
      if (v175 >= v165)
      {
        uint64_t v306 = 1;
        unsigned int v299 = v164;
        char v300 = 0;
      }
    }
    unsigned int v163 = v301;
    if ((v302 & 1) == 0)
    {
      unsigned int v162 = v163;
      unsigned int v160 = v162;
      unsigned int v287 = v162;
      unsigned int v161 = v299;
      if ((v300 & 1) == 0)
      {
        unsigned int v159 = v161;
        unsigned int v152 = v161;
        unsigned int v286 = v161;
        uint64_t v150 = &v284;
        unsigned int v284 = v160;
        unint64_t v154 = lazy protocol witness table accessor for type Int and conformance Int();
        unint64_t v155 = lazy protocol witness table accessor for type Int and conformance Int();
        unint64_t v156 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        uint64_t v151 = MEMORY[0x263F8D6C8];
        uint64_t v153 = MEMORY[0x263F8E8F8];
        SignedInteger<>.init<A>(_:)();
        uint64_t v157 = v285;
        unsigned int v282 = v152;
        uint64_t result = SignedInteger<>.init<A>(_:)();
        uint64_t v158 = v157 - v283;
        if (__OFSUB__(v157, v283)) {
          goto LABEL_127;
        }
        uint64_t v303 = v158;
        char v304 = 0;
      }
    }
    uint64_t v149 = v288;
    v288[0] = v176;
    v288[1] = v175;
    uint64_t v289 = v306;
    char v290 = v305 & 1;
    uint64_t v291 = v303;
    char v292 = v304 & 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(start: UInt32, end: UInt32, label: Int, detect: Bool, latency: Int?)]);
    Array.append(_:)();
  }
  outlined destroy of [A]();
  uint64_t v144 = v349;
  swift_bridgeObjectRetain();
  v342[2] = v144;
  uint64_t v145 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(start: UInt32, end: UInt32, label: Int, detect: Bool, latency: Int?)]);
  unint64_t v32 = lazy protocol witness table accessor for type [(start: UInt32, end: UInt32, label: Int, detect: Bool, latency: Int?)] and conformance [A]();
  uint64_t v33 = v179;
  unint64_t v146 = v32;
  uint64_t result = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(v255, 0, v145, MEMORY[0x263F8D6C8], MEMORY[0x263F8E628], v32, MEMORY[0x263F8E658], v218);
  uint64_t v147 = v33;
  uint64_t v148 = result;
  if (v33) {
    goto LABEL_116;
  }
  uint64_t v139 = v148;
  outlined destroy of [A]();
  v342[1] = v139;
  uint64_t v141 = v342;
  v342[0] = 0;
  uint64_t v140 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
  unint64_t v34 = lazy protocol witness table accessor for type [Int] and conformance [A]();
  uint64_t v35 = v147;
  unint64_t v142 = v34;
  uint64_t result = Sequence.reduce<A>(_:_:)();
  uint64_t v143 = v35;
  if (v35)
  {
LABEL_117:
    __break(1u);
    goto LABEL_118;
  }
  outlined destroy of [A]();
  uint64_t v36 = v143;
  uint64_t v135 = v343;
  uint64_t v341 = v343;
  uint64_t v136 = v349;
  swift_bridgeObjectRetain();
  uint64_t v339 = v136;
  uint64_t result = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(v257, 0, v145, MEMORY[0x263F8D6C8], MEMORY[0x263F8E628], v146, MEMORY[0x263F8E658], v218);
  uint64_t v137 = v36;
  uint64_t v138 = result;
  if (v36)
  {
LABEL_118:
    __break(1u);
    goto LABEL_119;
  }
  uint64_t v133 = v138;
  outlined destroy of [A]();
  uint64_t v37 = v137;
  uint64_t v338 = v133;
  uint64_t v337 = 0;
  uint64_t result = Sequence.reduce<A>(_:_:)();
  uint64_t v134 = v37;
  if (v37)
  {
LABEL_119:
    __break(1u);
    goto LABEL_120;
  }
  outlined destroy of [A]();
  uint64_t v38 = v134;
  uint64_t v129 = v340;
  uint64_t v336 = v340;
  uint64_t v130 = v349;
  swift_bridgeObjectRetain();
  uint64_t v334 = v130;
  uint64_t result = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(v259, 0, v145, MEMORY[0x263F8D6C8], MEMORY[0x263F8E628], v146, MEMORY[0x263F8E658], v218);
  uint64_t v131 = v38;
  uint64_t v132 = result;
  if (v38)
  {
LABEL_120:
    __break(1u);
    goto LABEL_121;
  }
  uint64_t v127 = v132;
  outlined destroy of [A]();
  uint64_t v39 = v131;
  uint64_t v333 = v127;
  uint64_t v332 = 0;
  uint64_t result = Sequence.reduce<A>(_:_:)();
  uint64_t v128 = v39;
  if (v39)
  {
LABEL_121:
    __break(1u);
LABEL_122:
    __break(1u);
    goto LABEL_123;
  }
  outlined destroy of [A]();
  uint64_t v124 = v335;
  uint64_t v331 = v335;
  uint64_t v123 = v349;
  swift_bridgeObjectRetain();
  uint64_t v125 = MEMORY[0x25A2C0810](v123, v181);
  swift_bridgeObjectRelease();
  uint64_t result = v125;
  uint64_t v126 = v125 - v124;
  if (__OFSUB__(v125, v124)) {
    goto LABEL_125;
  }
  uint64_t v330 = v126;
  uint64_t v120 = v349;
  swift_bridgeObjectRetain();
  v329[3] = v120;
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Int?);
  uint64_t v42 = v128;
  uint64_t result = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(v261, 0, v145, v41, MEMORY[0x263F8E628], v146, MEMORY[0x263F8E658], v218);
  uint64_t v121 = v42;
  uint64_t v122 = result;
  if (v42) {
    goto LABEL_122;
  }
  uint64_t v116 = v122;
  outlined destroy of [A]();
  v329[2] = v116;
  uint64_t v117 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int?]);
  lazy protocol witness table accessor for type [Int?] and conformance [A]();
  uint64_t v43 = v121;
  uint64_t result = Sequence.compactMap<A>(_:)();
  uint64_t v118 = v43;
  uint64_t v119 = result;
  if (v43)
  {
LABEL_123:
    __break(1u);
    goto LABEL_124;
  }
  uint64_t v113 = v119;
  outlined destroy of [A]();
  v329[1] = v113;
  unint64_t v44 = lazy protocol witness table accessor for type [Int] and conformance [A]();
  uint64_t v45 = v118;
  uint64_t result = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(v263, 0, v140, MEMORY[0x263F8D5C8], MEMORY[0x263F8E628], v44, MEMORY[0x263F8E658], v218);
  uint64_t v114 = v45;
  uint64_t v115 = result;
  if (v45)
  {
LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
    goto LABEL_126;
  }
  uint64_t v109 = v115;
  outlined destroy of [A]();
  float v110 = v329;
  v329[0] = v109;
  uint64_t v111 = Sequence<>.sorted()();
  outlined destroy of [A]();
  uint64_t v328 = v111;
  float v326 = 0.0;
  char v327 = 1;
  uint64_t result = MEMORY[0x25A2C0820]();
  uint64_t v112 = result;
  uint64_t v325 = result;
  if (result <= 0)
  {
LABEL_83:
    float v323 = 0.0;
    char v324 = 1;
    float v321 = 0.0;
    char v322 = 1;
    if (v124 > 0)
    {
      float v323 = (float)v135 / (float)v124;
      char v324 = 0;
    }
    if (v126 > 0)
    {
      float v321 = (float)v129 / (float)v126;
      char v322 = 0;
    }
    float v318 = v326;
    char v319 = v327 & 1;
    if (v327) {
      float v320 = -2000.0;
    }
    else {
      float v320 = v318;
    }
    float v104 = v320;
    uint64_t v105 = HyperParams.latencyBuckets.getter();
    uint64_t v106 = static MetricsUtils.bucketize(value:buckets:)(v105, v104);
    swift_bridgeObjectRelease();
    uint64_t v317 = v106;
    float v315 = v323;
    char v316 = v324 & 1;
    BOOL v103 = (v324 & 1) != 0;
    if (v324)
    {
      uint64_t v101 = MEMORY[0x263F8D5C8];
      uint64_t v50 = _allocateUninitializedArray<A>(_:)();
      *(_DWORD *)uint64_t v51 = 0;
      *(float *)(v51 + 4) = 1.0;
      _finalizeUninitializedArray<A>(_:)();
      uint64_t v102 = v50;
    }
    else
    {
      uint64_t v98 = _allocateUninitializedArray<A>(_:)();
      uint64_t v99 = v52;
      float v100 = v323;
      if (v324)
      {
        char v74 = 2;
        uint64_t v75 = 125;
        LODWORD(v76) = 0;
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      else
      {
        float v97 = v100;
      }
      uint64_t v53 = v98;
      char v54 = v99;
      *(float *)uint64_t v99 = v97;
      v54[1] = 0;
      _finalizeUninitializedArray<A>(_:)();
      uint64_t v102 = v53;
    }
    uint64_t v96 = v102;
    float v313 = v321;
    char v314 = v322 & 1;
    BOOL v95 = (v322 & 1) != 0;
    if (v322)
    {
      uint64_t v93 = MEMORY[0x263F8D5C8];
      uint64_t v55 = _allocateUninitializedArray<A>(_:)();
      *(_DWORD *)uint64_t v56 = 0;
      *(float *)(v56 + 4) = 1.0;
      _finalizeUninitializedArray<A>(_:)();
      uint64_t v94 = v55;
    }
    else
    {
      uint64_t v90 = _allocateUninitializedArray<A>(_:)();
      unsigned int v91 = v57;
      float v92 = v321;
      if (v322)
      {
        char v74 = 2;
        uint64_t v75 = 126;
        LODWORD(v76) = 0;
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      else
      {
        float v89 = v92;
      }
      uint64_t v58 = v90;
      char v59 = v91;
      *(float *)unsigned int v91 = v89;
      v59[1] = 0;
      _finalizeUninitializedArray<A>(_:)();
      uint64_t v94 = v58;
    }
    uint64_t v88 = v94;
    float v311 = v326;
    char v312 = v327 & 1;
    BOOL v87 = (v327 & 1) != 0;
    if (v327)
    {
      uint64_t v85 = MEMORY[0x263F8D5C8];
      uint64_t v60 = _allocateUninitializedArray<A>(_:)();
      *(_DWORD *)uint64_t v61 = 0;
      *(float *)(v61 + 4) = 1.0;
      _finalizeUninitializedArray<A>(_:)();
      uint64_t v86 = v60;
    }
    else
    {
      uint64_t v82 = _allocateUninitializedArray<A>(_:)();
      uint64_t v83 = v62;
      float v84 = v326;
      if (v327)
      {
        char v74 = 2;
        uint64_t v75 = 128;
        LODWORD(v76) = 0;
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      else
      {
        float v81 = v84;
      }
      uint64_t v63 = v82;
      uint64_t v64 = v83;
      *(float *)uint64_t v83 = v81;
      v64[1] = 0;
      _finalizeUninitializedArray<A>(_:)();
      uint64_t v86 = v63;
    }
    uint64_t v80 = v86;
    swift_bridgeObjectRelease();
    outlined destroy of [A]();
    swift_release();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v65 = v96;
    uint64_t v66 = v129;
    uint64_t v67 = v88;
    uint64_t v68 = v124;
    uint64_t v69 = v126;
    uint64_t v70 = v80;
    uint64_t v71 = v106;
    uint64_t v72 = v236;
    uint64_t *v236 = v135;
    v72[1] = v65;
    v72[2] = v66;
    v72[3] = v67;
    v72[4] = v68;
    v72[5] = v69;
    v72[6] = v70;
    v72[7] = v71;
    return result;
  }
  if (v112 % 2)
  {
    specialized Array.subscript.getter();
    float v308 = v46;
    float v326 = v46;
    char v327 = 0;
    goto LABEL_83;
  }
  uint64_t v108 = v112 - 1;
  if (!__OFSUB__(v112, 1))
  {
    specialized Array.subscript.getter();
    float v310 = v48;
    float v107 = v48;
    specialized Array.subscript.getter();
    float v309 = v49;
    float v326 = (float)(v107 + v49) / 2.0;
    char v327 = 0;
    goto LABEL_83;
  }
LABEL_126:
  __break(1u);
LABEL_127:
  __break(1u);
LABEL_128:
  __break(1u);
LABEL_129:
  __break(1u);
LABEL_130:
  __break(1u);
  return result;
}

uint64_t static NightingaleDMetricsProcessor.generateSliceMetrics(hyperParams:outputs:labels:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v29 = static AUC.rocCurve(outputs:labels:)(a1, a2);
  uint64_t v28 = v3;
  swift_bridgeObjectRelease();
  int v33 = 0;
  char v34 = 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
  lazy protocol witness table accessor for type [Float] and conformance [A]();
  Sequence.first(where:)();
  if (v30)
  {
    __break(1u);
    __break(1u);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    if (v32)
    {
      Sequence.first(where:)();
      if (v31)
      {
        float v4 = HyperParams.maxFPR.getter();
        static AUC.rocAUCScore(tpr:fpr:maxFPR:)(v29, v28, v4);
        int v33 = v5;
        char v34 = 0;
      }
    }
    uint64_t v18 = static AUC.precisionRecallCurve(outputs:labels:)(a1, a2);
    uint64_t v19 = v6;
    swift_bridgeObjectRelease();
    static AUC.prAUCScore(precison:recall:)(v18, v19);
    int v20 = v7;
    uint64_t v8 = HyperParams.confusionMatrixNumThresholds.getter();
    uint64_t v21 = static AUC.bucketConfusionMatrix(outputs:labels:numThresholds:)(a1, a2, v8);
    uint64_t v22 = v9;
    uint64_t v23 = v10;
    uint64_t v24 = v11;
    uint64_t v12 = _allocateUninitializedArray<A>(_:)();
    if (v34)
    {
      *(_DWORD *)uint64_t v13 = 0;
      *(float *)(v13 + 4) = 1.0;
      _finalizeUninitializedArray<A>(_:)();
      uint64_t v15 = v12;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = v15;
      uint64_t v17 = v15;
    }
    else
    {
      *(_DWORD *)uint64_t v13 = v33;
      *(_DWORD *)(v13 + 4) = 0;
      _finalizeUninitializedArray<A>(_:)();
      uint64_t v16 = v12;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = v16;
      uint64_t v17 = v16;
    }
    *(void *)a3 = v17;
    *(_DWORD *)(a3 + 8) = v20;
    *(void *)(a3 + 16) = v21;
    *(void *)(a3 + 24) = v22;
    *(void *)(a3 + 32) = v23;
    *(void *)(a3 + 40) = v24;
  }
  return result;
}

NightingaleTraining::NightingaleDMetricsProcessEngine_optional __swiftcall NightingaleDMetricsProcessEngine.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v1 = _allocateUninitializedArray<A>(_:)();
  *(void *)uint64_t v2 = "native";
  *(void *)(v2 + 8) = 6;
  *(unsigned char *)(v2 + 16) = 2;
  *(void *)(v2 + 24) = "morpheus";
  *(void *)(v2 + 32) = 8;
  *(unsigned char *)(v2 + 40) = 2;
  _finalizeUninitializedArray<A>(_:)();
  Swift::Int v6 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v1, rawValue);
  swift_bridgeObjectRelease();
  if (!v6)
  {
    char v7 = 0;
LABEL_6:
    swift_bridgeObjectRelease();
    return (NightingaleTraining::NightingaleDMetricsProcessEngine_optional)(v7 & 1);
  }
  if (v6 == 1)
  {
    char v7 = 1;
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();
  return (NightingaleTraining::NightingaleDMetricsProcessEngine_optional)2;
}

uint64_t NightingaleDMetricsProcessEngine.rawValue.getter(char a1)
{
  if (a1) {
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("morpheus", 8uLL, 1)._countAndFlagsBits;
  }
  else {
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("native", 6uLL, 1)._countAndFlagsBits;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NightingaleDMetricsProcessEngine()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance NightingaleDMetricsProcessEngine()
{
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NightingaleDMetricsProcessEngine()
{
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance NightingaleDMetricsProcessEngine()
{
  return RawRepresentable<>._rawHashValue(seed:)();
}

NightingaleTraining::NightingaleDMetricsProcessEngine_optional protocol witness for RawRepresentable.init(rawValue:) in conformance NightingaleDMetricsProcessEngine@<W0>(Swift::String *a1@<X0>, NightingaleTraining::NightingaleDMetricsProcessEngine_optional *a2@<X8>)
{
  result.Swift::UInt32 value = NightingaleDMetricsProcessEngine.init(rawValue:)(*a1).value;
  a2->Swift::UInt32 value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance NightingaleDMetricsProcessEngine@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = NightingaleDMetricsProcessEngine.rawValue.getter(*v1 & 1);
  *a1 = result;
  a1[1] = v3;
  return result;
}

BOOL closure #2 in static NightingaleDMetricsProcessor.generateCycleMetrics(hyperParams:outputs:labels:historicalPeriods:sliceEndDays:pregnancies:today:)(uint64_t a1)
{
  float v2 = *(float *)(a1 + 8);
  return HyperParams.outputPostProcThreshold.getter() < v2;
}

BOOL partial apply for closure #2 in static NightingaleDMetricsProcessor.generateCycleMetrics(hyperParams:outputs:labels:historicalPeriods:sliceEndDays:pregnancies:today:)(uint64_t a1)
{
  return closure #2 in static NightingaleDMetricsProcessor.generateCycleMetrics(hyperParams:outputs:labels:historicalPeriods:sliceEndDays:pregnancies:today:)(a1);
}

uint64_t closure #3 in static NightingaleDMetricsProcessor.generateCycleMetrics(hyperParams:outputs:labels:historicalPeriods:sliceEndDays:pregnancies:today:)@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = MEMORY[0x25A2C09B0]();
  *a1 = result;
  return result;
}

uint64_t partial apply for closure #3 in static NightingaleDMetricsProcessor.generateCycleMetrics(hyperParams:outputs:labels:historicalPeriods:sliceEndDays:pregnancies:today:)@<X0>(_DWORD *a1@<X8>)
{
  return closure #3 in static NightingaleDMetricsProcessor.generateCycleMetrics(hyperParams:outputs:labels:historicalPeriods:sliceEndDays:pregnancies:today:)(a1);
}

BOOL closure #4 in static NightingaleDMetricsProcessor.generateCycleMetrics(hyperParams:outputs:labels:historicalPeriods:sliceEndDays:pregnancies:today:)()
{
  abs<A>(_:)();
  static Float.ulpOfOne.getter();
  return v2 <= v0;
}

uint64_t closure #6 in static NightingaleDMetricsProcessor.generateCycleMetrics(hyperParams:outputs:labels:historicalPeriods:sliceEndDays:pregnancies:today:)(void *a1, uint64_t a2)
{
  uint64_t v12 = a1;
  uint64_t v11 = a2;
  uint64_t v4 = a1[3];
  uint64_t v3 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  int v10 = (*(uint64_t (**)(uint64_t))(v3 + 40))(v4);
  uint64_t v7 = a1[3];
  uint64_t v6 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  int v9 = (*(uint64_t (**)(uint64_t))(v6 + 16))(v7);
  memset(v8, 0, sizeof(v8));
  AugmentedIntervalTree.insert(start:end:context:)((uint64_t)&v10, (uint64_t)&v9, v8);
  return outlined destroy of Pregnancy?((uint64_t)v8);
}

uint64_t partial apply for closure #6 in static NightingaleDMetricsProcessor.generateCycleMetrics(hyperParams:outputs:labels:historicalPeriods:sliceEndDays:pregnancies:today:)(void *a1)
{
  return closure #6 in static NightingaleDMetricsProcessor.generateCycleMetrics(hyperParams:outputs:labels:historicalPeriods:sliceEndDays:pregnancies:today:)(a1, v1);
}

BOOL closure #7 in static NightingaleDMetricsProcessor.generateCycleMetrics(hyperParams:outputs:labels:historicalPeriods:sliceEndDays:pregnancies:today:)(void *a1, int a2)
{
  uint64_t v4 = a1[3];
  uint64_t v3 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  return a2 == (*(unsigned int (**)(uint64_t))(v3 + 40))(v4);
}

uint64_t closure #8 in static NightingaleDMetricsProcessor.generateCycleMetrics(hyperParams:outputs:labels:historicalPeriods:sliceEndDays:pregnancies:today:)(int *a1, uint64_t a2, uint64_t a3)
{
  int v9 = 0;
  uint64_t v8 = 0;
  uint64_t v7 = 0;
  int v9 = *a1;
  uint64_t v8 = a2;
  uint64_t v7 = a3;
  int v6 = v9;
  int v5 = v9;
  AugmentedIntervalTree.search(start:end:)((uint64_t)&v6, (uint64_t)&v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Interval<UInt32, Any>]);
  lazy protocol witness table accessor for type [Interval<UInt32, Any>] and conformance [A]();
  uint64_t result = Sequence.forEach(_:)();
  if (!v4) {
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t partial apply for closure #8 in static NightingaleDMetricsProcessor.generateCycleMetrics(hyperParams:outputs:labels:historicalPeriods:sliceEndDays:pregnancies:today:)(int *a1)
{
  return closure #8 in static NightingaleDMetricsProcessor.generateCycleMetrics(hyperParams:outputs:labels:historicalPeriods:sliceEndDays:pregnancies:today:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

unint64_t lazy protocol witness table accessor for type [ClosedRange<UInt32>] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [ClosedRange<UInt32>] and conformance [A];
  if (!lazy protocol witness table cache variable for type [ClosedRange<UInt32>] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [ClosedRange<UInt32>]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [ClosedRange<UInt32>] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type [ClosedRange<UInt32>] and conformance [A];
  if (!lazy protocol witness table cache variable for type [ClosedRange<UInt32>] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [ClosedRange<UInt32>]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [ClosedRange<UInt32>] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

uint64_t closure #1 in closure #8 in static NightingaleDMetricsProcessor.generateCycleMetrics(hyperParams:outputs:labels:historicalPeriods:sliceEndDays:pregnancies:today:)(_DWORD *a1)
{
  swift_bridgeObjectRetain();
  if (a1[1] < *a1)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ClosedRange<UInt32>]);
  lazy protocol witness table accessor for type [ClosedRange<UInt32>] and conformance [A]();
  lazy protocol witness table accessor for type ClosedRange<UInt32> and conformance ClosedRange<A>();
  unsigned int v2 = Sequence<>.contains(_:)();
  outlined destroy of [A]();
  uint64_t result = v2;
  if ((v2 & 1) == 0)
  {
    if (a1[1] < *a1)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    return Array.append(_:)();
  }
  return result;
}

uint64_t closure #9 in static NightingaleDMetricsProcessor.generateCycleMetrics(hyperParams:outputs:labels:historicalPeriods:sliceEndDays:pregnancies:today:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  memset(__b, 0, 0x21uLL);
  uint64_t result = a1;
  int v3 = *(_DWORD *)(a1 + 4);
  uint64_t v10 = *(void *)(a1 + 8);
  char v4 = *(unsigned char *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  char v6 = *(unsigned char *)(a1 + 32);
  LODWORD(__b[0]) = *(_DWORD *)a1;
  HIDWORD(__b[0]) = v3;
  __b[1] = v10;
  LOBYTE(__b[2]) = v4 & 1;
  __b[3] = v5;
  LOBYTE(__b[4]) = v6 & 1;
  BOOL v7 = (v4 & 1) != 0 && v10 == 1;
  *a2 = v7;
  return result;
}

void *implicit closure #1 in static NightingaleDMetricsProcessor.generateCycleMetrics(hyperParams:outputs:labels:historicalPeriods:sliceEndDays:pregnancies:today:)@<X0>(void *result@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  if (__OFADD__(*result, *a2)) {
    __break(1u);
  }
  else {
    *a3 = *result + *a2;
  }
  return result;
}

uint64_t closure #10 in static NightingaleDMetricsProcessor.generateCycleMetrics(hyperParams:outputs:labels:historicalPeriods:sliceEndDays:pregnancies:today:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  memset(__b, 0, 0x21uLL);
  uint64_t result = a1;
  int v3 = *(_DWORD *)(a1 + 4);
  uint64_t v10 = *(void *)(a1 + 8);
  char v4 = *(unsigned char *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  char v6 = *(unsigned char *)(a1 + 32);
  LODWORD(__b[0]) = *(_DWORD *)a1;
  HIDWORD(__b[0]) = v3;
  __b[1] = v10;
  LOBYTE(__b[2]) = v4 & 1;
  __b[3] = v5;
  LOBYTE(__b[4]) = v6 & 1;
  BOOL v7 = (v4 & 1) != 0 && v10 == 0;
  *a2 = v7;
  return result;
}

uint64_t closure #11 in static NightingaleDMetricsProcessor.generateCycleMetrics(hyperParams:outputs:labels:historicalPeriods:sliceEndDays:pregnancies:today:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  memset(__b, 0, 0x21uLL);
  uint64_t result = a1;
  *a2 = *(void *)(a1 + 8) == 1;
  return result;
}

uint64_t closure #12 in static NightingaleDMetricsProcessor.generateCycleMetrics(hyperParams:outputs:labels:historicalPeriods:sliceEndDays:pregnancies:today:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  memset(__b, 0, 0x21uLL);
  uint64_t result = a1;
  char v3 = *(unsigned char *)(a1 + 32);
  *(void *)a2 = *(void *)(a1 + 24);
  *(unsigned char *)(a2 + 8) = v3 & 1;
  return result;
}

uint64_t closure #13 in static NightingaleDMetricsProcessor.generateCycleMetrics(hyperParams:outputs:labels:historicalPeriods:sliceEndDays:pregnancies:today:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(unsigned char *)(result + 8) & 1;
  *(void *)a2 = *(void *)result;
  *(unsigned char *)(a2 + 8) = v2;
  return result;
}

unint64_t lazy protocol witness table accessor for type [Int?] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [Int?] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Int?] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Int?]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [Int?] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

float closure #14 in static NightingaleDMetricsProcessor.generateCycleMetrics(hyperParams:outputs:labels:historicalPeriods:sliceEndDays:pregnancies:today:)@<S0>(uint64_t *a1@<X0>, float *a2@<X8>)
{
  float result = (float)*a1;
  *a2 = result;
  return result;
}

uint64_t closure #1 in static NightingaleDMetricsProcessor.generateSliceMetrics(hyperParams:outputs:labels:)()
{
  return (Float.isFinite.getter() ^ 1) & 1;
}

BOOL partial apply for closure #7 in static NightingaleDMetricsProcessor.generateCycleMetrics(hyperParams:outputs:labels:historicalPeriods:sliceEndDays:pregnancies:today:)(void *a1)
{
  return closure #7 in static NightingaleDMetricsProcessor.generateCycleMetrics(hyperParams:outputs:labels:historicalPeriods:sliceEndDays:pregnancies:today:)(a1, *(void *)(v1 + 16));
}

unint64_t lazy protocol witness table accessor for type NightingaleDMetricsProcessEngine and conformance NightingaleDMetricsProcessEngine()
{
  uint64_t v2 = lazy protocol witness table cache variable for type NightingaleDMetricsProcessEngine and conformance NightingaleDMetricsProcessEngine;
  if (!lazy protocol witness table cache variable for type NightingaleDMetricsProcessEngine and conformance NightingaleDMetricsProcessEngine)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type NightingaleDMetricsProcessEngine and conformance NightingaleDMetricsProcessEngine);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type NightingaleDMetricsProcessEngine and conformance NightingaleDMetricsProcessEngine;
  if (!lazy protocol witness table cache variable for type NightingaleDMetricsProcessEngine and conformance NightingaleDMetricsProcessEngine)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type NightingaleDMetricsProcessEngine and conformance NightingaleDMetricsProcessEngine);
    return WitnessTable;
  }
  return v2;
}

ValueMetadata *type metadata accessor for NightingaleDMetricsProcessEngine()
{
  return &type metadata for NightingaleDMetricsProcessEngine;
}

ValueMetadata *type metadata accessor for NightingaleDMetricsProcessor()
{
  return &type metadata for NightingaleDMetricsProcessor;
}

unint64_t base witness table accessor for Equatable in NightingaleDMetricsProcessEngine()
{
  return lazy protocol witness table accessor for type NightingaleDMetricsProcessEngine and conformance NightingaleDMetricsProcessEngine();
}

uint64_t partial apply for closure #1 in closure #8 in static NightingaleDMetricsProcessor.generateCycleMetrics(hyperParams:outputs:labels:historicalPeriods:sliceEndDays:pregnancies:today:)(_DWORD *a1)
{
  return closure #1 in closure #8 in static NightingaleDMetricsProcessor.generateCycleMetrics(hyperParams:outputs:labels:historicalPeriods:sliceEndDays:pregnancies:today:)(a1);
}

unint64_t lazy protocol witness table accessor for type ClosedRange<UInt32> and conformance ClosedRange<A>()
{
  uint64_t v2 = lazy protocol witness table cache variable for type ClosedRange<UInt32> and conformance ClosedRange<A>;
  if (!lazy protocol witness table cache variable for type ClosedRange<UInt32> and conformance ClosedRange<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ClosedRange<UInt32>);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type ClosedRange<UInt32> and conformance ClosedRange<A>);
    return WitnessTable;
  }
  return v2;
}

uint64_t AugmentedIntervalTree.__allocating_init()()
{
  return AugmentedIntervalTree.init()();
}

uint64_t Interval.init(start:end:context:)@<X0>(char *a1@<X0>, char *a2@<X1>, const void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v24 = a7;
  uint64_t v42 = a1;
  uint64_t v43 = a2;
  uint64_t v35 = a3;
  uint64_t v47 = a4;
  uint64_t v36 = a5;
  uint64_t v48 = a6;
  uint64_t v25 = "Precondition failed";
  unsigned int v26 = "NightingaleTraining/AugmentedTree.swift";
  uint64_t v53 = 0;
  uint64_t v52 = 0;
  uint64_t v51 = 0;
  uint64_t v50 = 0;
  uint64_t v55 = a4;
  uint64_t v54 = a5;
  uint64_t v27 = 0;
  uint64_t v28 = type metadata accessor for Optional();
  unint64_t v29 = (*(void *)(*(void *)(v28 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v7 = MEMORY[0x270FA5388](0);
  uint64_t v30 = (char *)v19 - v29;
  uint64_t v40 = *(void **)(v8 - 8);
  uint64_t v41 = v8 - 8;
  unint64_t v31 = (v40[8] + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  char v32 = (char *)v19 - v31;
  unint64_t v33 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  float v46 = (char *)v19 - v33;
  unint64_t v34 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v11);
  float v49 = (char *)v19 - v34;
  uint64_t v37 = type metadata accessor for Interval();
  unint64_t v38 = (*(void *)(*(void *)(v37 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v13 = MEMORY[0x270FA5388](v37);
  uint64_t v39 = (uint64_t)v19 - v38;
  uint64_t v53 = (char *)v19 - v38;
  uint64_t v52 = v14;
  uint64_t v51 = v15;
  uint64_t v50 = v16;
  (*(void (**)(char *, uint64_t))(*(void *)(v17 - 8) + 56))((char *)v19 + *(int *)(v13 + 48) - v38, 1);
  uint64_t v45 = (void (*)(char *, char *, uint64_t))v40[2];
  unint64_t v44 = v40 + 2;
  v45(v49, v42, v47);
  v45(v46, v43, v47);
  if ((dispatch thunk of static Comparable.<= infix(_:_:)() & 1) == 0)
  {
    uint64_t v23 = 39;
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("start should be less or equal than end.", 0x27uLL, 1);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  uint64_t v22 = (void (*)(char *, uint64_t))v40[1];
  uint64_t v21 = v40 + 1;
  v22(v49, v47);
  v22(v46, v47);
  v45(v32, v42, v47);
  int v20 = (void (*)(uint64_t, char *, uint64_t))v40[4];
  v19[1] = v40 + 4;
  v20(v39, v32, v47);
  v45(v32, v43, v47);
  v20(v39 + *(int *)(v37 + 44), v32, v47);
  outlined init with copy of B?(v35, v30, v36, v28);
  outlined assign with take of B?(v30, (void *)(v39 + *(int *)(v37 + 48)), v36, v28);
  outlined init with copy of Interval<A, B>(v39, v24, v47, v36, v28, v37);
  outlined destroy of B?((uint64_t)v35, v36);
  v22(v43, v47);
  v22(v42, v47);
  return outlined destroy of Interval<A, B>(v39, v47, v36, v28, v37);
}

uint64_t Interval.overlaps(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v33 = a1;
  uint64_t v32 = a2;
  uint64_t v37 = 0;
  uint64_t v35 = 0;
  unint64_t v12 = (*(void *)(*(void *)(a2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v3 = MEMORY[0x270FA5388](a1);
  uint64_t v28 = &v8[-v12];
  unint64_t v13 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v3);
  unsigned int v26 = &v8[-v13];
  uint64_t v29 = *(void *)(v5 + 16);
  uint64_t v38 = v29;
  int v20 = *(void **)(v29 - 8);
  uint64_t v21 = v29 - 8;
  uint64_t v15 = v20[8];
  unint64_t v14 = (v15 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](&v8[-v13]);
  uint64_t v22 = &v8[-v14];
  unint64_t v16 = (v15 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](&v8[-v14]);
  uint64_t v23 = &v8[-v16];
  uint64_t v37 = v33;
  uint64_t v30 = *(void *)(v6 + 24);
  uint64_t v36 = v30;
  uint64_t v35 = v2;
  uint64_t v18 = (void (*)(void))v20[2];
  uint64_t v17 = v20 + 2;
  v18();
  ((void (*)(unsigned char *, uint64_t, uint64_t))v18)(v22, v33, v29);
  uint64_t v19 = *(void *)(v32 + 32);
  int v34 = dispatch thunk of static Comparable.>= infix(_:_:)();
  uint64_t v25 = (void (*)(unsigned char *, uint64_t))v20[1];
  uint64_t v24 = v20 + 1;
  v25(v22, v29);
  v25(v23, v29);
  uint64_t v31 = type metadata accessor for Optional();
  outlined init with copy of Interval<A, B>(v27, (uint64_t)v26, v29, v30, v31, v32);
  outlined init with copy of Interval<A, B>(v33, (uint64_t)v28, v29, v30, v31, v32);
  if (v34)
  {
    ((void (*)(unsigned char *, unsigned char *, uint64_t))v18)(v23, v26, v29);
    ((void (*)(unsigned char *, unsigned char *, uint64_t))v18)(v22, &v28[*(int *)(v32 + 44)], v29);
    int v10 = dispatch thunk of static Comparable.<= infix(_:_:)();
    v25(v22, v29);
    v25(v23, v29);
    int v11 = v10;
  }
  else
  {
    int v11 = 0;
  }
  int v9 = v11;
  outlined destroy of Interval<A, B>((uint64_t)v26, v29, v30, v31, v32);
  outlined destroy of Interval<A, B>((uint64_t)v28, v29, v30, v31, v32);
  return v9 & 1;
}

uint64_t Interval.description.getter(uint64_t a1)
{
  uint64_t v15 = a1;
  uint64_t v32 = 0;
  uint64_t v20 = *(void *)(a1 + 16);
  uint64_t v33 = v20;
  int v11 = *(void **)(v20 - 8);
  uint64_t v12 = v20 - 8;
  unint64_t v9 = (v11[8] + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v19 = (char *)&v8 - v9;
  uint64_t v32 = v1;
  uint64_t v31 = *(void *)(MEMORY[0x270FA5388](a1) + 24);
  Builtin::Word v13 = 2;
  uint64_t v2 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  unsigned int v26 = &v29;
  uint64_t v29 = v2;
  uint64_t v30 = v3;
  Builtin::Word v23 = 1;
  int v24 = 1;
  Swift::String v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("[", 1uLL, 1);
  object = v4._object;
  DefaultStringInterpolation.appendLiteral(_:)(v4);
  swift_bridgeObjectRelease();
  uint64_t v18 = (void (*)(char *, uint64_t, uint64_t))v11[2];
  uint64_t v17 = v11 + 2;
  v18(v19, v16, v20);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  uint64_t v22 = (void (*)(char *, uint64_t))v11[1];
  uint64_t v21 = v11 + 1;
  v22(v19, v20);
  Swift::String v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", ", v13, v24 & 1);
  unint64_t v14 = v5._object;
  DefaultStringInterpolation.appendLiteral(_:)(v5);
  swift_bridgeObjectRelease();
  v18(v19, v16 + *(int *)(v15 + 44), v20);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v22(v19, v20);
  Swift::String v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("]", v23, v24 & 1);
  uint64_t v25 = v6._object;
  DefaultStringInterpolation.appendLiteral(_:)(v6);
  swift_bridgeObjectRelease();
  uint64_t v28 = v29;
  uint64_t v27 = v30;
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  return String.init(stringInterpolation:)();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Interval<A, B>(uint64_t a1)
{
  return Interval.description.getter(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Interval<A, B>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return static Interval.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4]) & 1;
}

uint64_t static Interval.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v32 = a1;
  uint64_t v38 = a2;
  uint64_t v34 = a3;
  uint64_t v35 = a4;
  uint64_t v22 = a5;
  uint64_t v41 = 0;
  uint64_t v40 = 0;
  uint64_t v43 = a3;
  uint64_t v42 = a4;
  uint64_t v30 = 0;
  uint64_t v37 = type metadata accessor for Interval();
  unint64_t v15 = (*(void *)(*(void *)(v37 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v5 = MEMORY[0x270FA5388](v37);
  uint64_t v33 = &v11[-v15];
  unint64_t v16 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v31 = &v11[-v16];
  int v24 = *(void **)(v8 - 8);
  uint64_t v25 = v8 - 8;
  uint64_t v18 = v24[8];
  unint64_t v17 = (v18 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v7);
  unsigned int v26 = &v11[-v17];
  unint64_t v19 = (v18 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](&v11[-v17]);
  uint64_t v27 = &v11[-v19];
  uint64_t v41 = v9;
  uint64_t v40 = v38;
  uint64_t v21 = (void (*)(void))v24[2];
  uint64_t v20 = v24 + 2;
  v21();
  ((void (*)(unsigned char *, uint64_t, uint64_t))v21)(v26, v38, v34);
  uint64_t v23 = *(void *)(v22 + 8);
  int v39 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v29 = (void (*)(unsigned char *, uint64_t))v24[1];
  uint64_t v28 = v24 + 1;
  v29(v26, v34);
  v29(v27, v34);
  uint64_t v36 = type metadata accessor for Optional();
  outlined init with copy of Interval<A, B>(v32, (uint64_t)v31, v34, v35, v36, v37);
  outlined init with copy of Interval<A, B>(v38, (uint64_t)v33, v34, v35, v36, v37);
  if (v39)
  {
    ((void (*)(unsigned char *, unsigned char *, uint64_t))v21)(v27, &v31[*(int *)(v37 + 44)], v34);
    ((void (*)(unsigned char *, unsigned char *, uint64_t))v21)(v26, &v33[*(int *)(v37 + 44)], v34);
    int v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    v29(v26, v34);
    v29(v27, v34);
    int v14 = v13;
  }
  else
  {
    int v14 = 0;
  }
  int v12 = v14;
  outlined destroy of Interval<A, B>((uint64_t)v31, v34, v35, v36, v37);
  outlined destroy of Interval<A, B>((uint64_t)v33, v34, v35, v36, v37);
  return v12 & 1;
}

BOOL static Interval.< infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = a1;
  uint64_t v16 = a2;
  uint64_t v24 = a3;
  uint64_t v12 = a4;
  uint64_t v19 = a5;
  uint64_t v29 = 0;
  uint64_t v28 = 0;
  uint64_t v31 = a3;
  uint64_t v30 = a4;
  uint64_t v20 = *(void **)(a3 - 8);
  uint64_t v21 = a3 - 8;
  uint64_t v14 = v20[8];
  unint64_t v13 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](a1);
  uint64_t v22 = (char *)&v7 - v13;
  unint64_t v15 = v13;
  MEMORY[0x270FA5388]((char *)&v7 - v13);
  uint64_t v23 = (char *)&v7 - v15;
  uint64_t v29 = v5;
  uint64_t v28 = v16;
  uint64_t v18 = (void (*)(void))v20[2];
  unint64_t v17 = v20 + 2;
  v18();
  ((void (*)(char *, uint64_t, uint64_t))v18)(v22, v16, v24);
  int v27 = dispatch thunk of static Comparable.< infix(_:_:)();
  unsigned int v26 = (void (*)(char *, uint64_t))v20[1];
  uint64_t v25 = v20 + 1;
  v26(v22, v24);
  v26(v23, v24);
  if (v27)
  {
    return 1;
  }
  else
  {
    ((void (*)(char *, uint64_t, uint64_t))v18)(v23, v11, v24);
    ((void (*)(char *, uint64_t, uint64_t))v18)(v22, v16, v24);
    int v9 = dispatch thunk of static Comparable.> infix(_:_:)();
    v26(v22, v24);
    v26(v23, v24);
    if (v9)
    {
      return 0;
    }
    else
    {
      uint64_t v7 = type metadata accessor for Interval();
      ((void (*)(char *, uint64_t, uint64_t))v18)(v23, v11 + *(int *)(v7 + 44), v24);
      ((void (*)(char *, uint64_t, uint64_t))v18)(v22, v16 + *(int *)(v7 + 44), v24);
      int v8 = dispatch thunk of static Comparable.< infix(_:_:)();
      v26(v22, v24);
      v26(v23, v24);
      return (v8 & 1) != 0;
    }
  }
}

BOOL static Interval.> infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = a1;
  uint64_t v16 = a2;
  uint64_t v24 = a3;
  uint64_t v12 = a4;
  uint64_t v19 = a5;
  uint64_t v29 = 0;
  uint64_t v28 = 0;
  uint64_t v31 = a3;
  uint64_t v30 = a4;
  uint64_t v20 = *(void **)(a3 - 8);
  uint64_t v21 = a3 - 8;
  uint64_t v14 = v20[8];
  unint64_t v13 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](a1);
  uint64_t v22 = (char *)&v7 - v13;
  unint64_t v15 = v13;
  MEMORY[0x270FA5388]((char *)&v7 - v13);
  uint64_t v23 = (char *)&v7 - v15;
  uint64_t v29 = v5;
  uint64_t v28 = v16;
  uint64_t v18 = (void (*)(void))v20[2];
  unint64_t v17 = v20 + 2;
  v18();
  ((void (*)(char *, uint64_t, uint64_t))v18)(v22, v16, v24);
  int v27 = dispatch thunk of static Comparable.> infix(_:_:)();
  unsigned int v26 = (void (*)(char *, uint64_t))v20[1];
  uint64_t v25 = v20 + 1;
  v26(v22, v24);
  v26(v23, v24);
  if (v27)
  {
    return 1;
  }
  else
  {
    ((void (*)(char *, uint64_t, uint64_t))v18)(v23, v11, v24);
    ((void (*)(char *, uint64_t, uint64_t))v18)(v22, v16, v24);
    int v9 = dispatch thunk of static Comparable.< infix(_:_:)();
    v26(v22, v24);
    v26(v23, v24);
    if (v9)
    {
      return 0;
    }
    else
    {
      uint64_t v7 = type metadata accessor for Interval();
      ((void (*)(char *, uint64_t, uint64_t))v18)(v23, v11 + *(int *)(v7 + 44), v24);
      ((void (*)(char *, uint64_t, uint64_t))v18)(v22, v16 + *(int *)(v7 + 44), v24);
      int v8 = dispatch thunk of static Comparable.> infix(_:_:)();
      v26(v22, v24);
      v26(v23, v24);
      return (v8 & 1) != 0;
    }
  }
}

uint64_t AVLTreeNode.interval.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = *v1;
  uint64_t v9 = (uint64_t)v1 + *(void *)(*v1 + 104);
  swift_beginAccess();
  uint64_t v5 = *(void *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 88);
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v2 = type metadata accessor for Interval();
  outlined init with copy of Interval<A, B>(v9, a1, v5, v6, v7, v2);
  return swift_endAccess();
}

uint64_t AVLTreeNode.interval.setter(uint64_t a1)
{
  uint64_t v8 = a1;
  v3[0] = *(void *)v1;
  uint64_t v9 = *(void *)(v3[0] + 80);
  uint64_t v10 = *(void *)(v3[0] + 88);
  v3[1] = 0;
  uint64_t v12 = type metadata accessor for Interval();
  unint64_t v4 = (*(void *)(*(void *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v5 = (uint64_t)v3 - v4;
  uint64_t v11 = type metadata accessor for Optional();
  outlined init with copy of Interval<A, B>(v8, v5, v9, v10, v11, v12);
  uint64_t v6 = v1 + *(void *)(*(void *)v1 + 104);
  uint64_t v7 = &v13;
  swift_beginAccess();
  outlined assign with take of Interval<A, B>(v5, v6, v9, v10, v11, v12);
  swift_endAccess();
  return outlined destroy of Interval<A, B>(v8, v9, v10, v11, v12);
}

uint64_t (*AVLTreeNode.interval.modify())()
{
  return HealthDataFlowSamples.sampleType.modify;
}

uint64_t AVLTreeNode.maxEnd.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v5 = (uint64_t)v1 + *(void *)(*v1 + 112);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 16))(a1, v5);
  return swift_endAccess();
}

uint64_t AVLTreeNode.maxEnd.setter(uint64_t a1)
{
  uint64_t v10 = a1;
  uint64_t v11 = *(void *)(*(void *)v1 + 80);
  uint64_t v8 = *(void *)(v11 - 8);
  uint64_t v9 = v11 - 8;
  unint64_t v4 = (*(void *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v3 - v4;
  (*(void (**)(void))(v8 + 16))();
  uint64_t v5 = v1 + *(void *)(*(void *)v1 + 112);
  uint64_t v7 = &v12;
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 40))(v5, v6, v11);
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v10, v11);
}

uint64_t (*AVLTreeNode.maxEnd.modify())()
{
  return HealthDataFlowSamples.sampleType.modify;
}

uint64_t AVLTreeNode.minStart.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v5 = (uint64_t)v1 + *(void *)(*v1 + 120);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 16))(a1, v5);
  return swift_endAccess();
}

uint64_t AVLTreeNode.minStart.setter(uint64_t a1)
{
  uint64_t v10 = a1;
  uint64_t v11 = *(void *)(*(void *)v1 + 80);
  uint64_t v8 = *(void *)(v11 - 8);
  uint64_t v9 = v11 - 8;
  unint64_t v4 = (*(void *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v3 - v4;
  (*(void (**)(void))(v8 + 16))();
  uint64_t v5 = v1 + *(void *)(*(void *)v1 + 120);
  uint64_t v7 = &v12;
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 40))(v5, v6, v11);
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v10, v11);
}

uint64_t (*AVLTreeNode.minStart.modify())()
{
  return HealthDataFlowSamples.sampleType.modify;
}

uint64_t AVLTreeNode.left.getter()
{
  uint64_t v2 = (uint64_t *)(v0 + *(void *)(*(void *)v0 + 128));
  swift_beginAccess();
  uint64_t v3 = *v2;
  swift_retain();
  swift_endAccess();
  return v3;
}

uint64_t AVLTreeNode.left.setter(uint64_t a1)
{
  swift_retain();
  uint64_t v3 = (void *)(v1 + *(void *)(*(void *)v1 + 128));
  swift_beginAccess();
  *uint64_t v3 = a1;
  swift_release();
  swift_endAccess();
  return swift_release();
}

uint64_t (*AVLTreeNode.left.modify())()
{
  return HealthDataFlowSamples.sampleType.modify;
}

uint64_t AVLTreeNode.right.getter()
{
  uint64_t v2 = (uint64_t *)(v0 + *(void *)(*(void *)v0 + 136));
  swift_beginAccess();
  uint64_t v3 = *v2;
  swift_retain();
  swift_endAccess();
  return v3;
}

uint64_t AVLTreeNode.right.setter(uint64_t a1)
{
  swift_retain();
  uint64_t v3 = (void *)(v1 + *(void *)(*(void *)v1 + 136));
  swift_beginAccess();
  *uint64_t v3 = a1;
  swift_release();
  swift_endAccess();
  return swift_release();
}

uint64_t (*AVLTreeNode.right.modify())()
{
  return HealthDataFlowSamples.sampleType.modify;
}

uint64_t AVLTreeNode.height.getter()
{
  uint64_t v2 = (uint64_t *)(v0 + *(void *)(*(void *)v0 + 144));
  swift_beginAccess();
  uint64_t v3 = *v2;
  swift_endAccess();
  return v3;
}

uint64_t AVLTreeNode.height.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + *(void *)(*(void *)v1 + 144));
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_endAccess();
}

uint64_t (*AVLTreeNode.height.modify())()
{
  return HealthDataFlowSamples.sampleType.modify;
}

uint64_t AVLTreeNode.__allocating_init(interval:)(uint64_t a1)
{
  return AVLTreeNode.init(interval:)(a1);
}

uint64_t AVLTreeNode.init(interval:)(uint64_t a1)
{
  uint64_t v28 = a1;
  uint64_t v31 = 0;
  uint64_t v30 = 0;
  uint64_t v13 = *v1;
  uint64_t v24 = *(void *)(v13 + 80);
  uint64_t v33 = v24;
  uint64_t v18 = *(void **)(v24 - 8);
  uint64_t v17 = v24 - 8;
  unint64_t v12 = (v18[8] + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](a1);
  uint64_t v21 = (char *)&v12 - v12;
  uint64_t v25 = *(void *)(v13 + 88);
  uint64_t v32 = v25;
  uint64_t v14 = 0;
  uint64_t v27 = type metadata accessor for Interval();
  unint64_t v15 = (*(void *)(*(void *)(v27 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v2 = MEMORY[0x270FA5388](v14);
  uint64_t v16 = (uint64_t)&v12 - v15;
  uint64_t v31 = v3;
  uint64_t v30 = v1;
  *(uint64_t *)((char *)v1 + *(void *)(*v1 + 128)) = v2;
  *(uint64_t *)((char *)v1 + *(void *)(*v1 + 136)) = v2;
  uint64_t v26 = type metadata accessor for Optional();
  outlined init with copy of Interval<A, B>(v28, v16, v24, v25, v26, v27);
  outlined init with take of Interval<A, B>(v16, (uint64_t)v1 + *(void *)(*v1 + 104), v24, v25, v26, v27);
  uint64_t v4 = *(int *)(v27 + 44);
  uint64_t v20 = (void (*)(char *, uint64_t, uint64_t))v18[2];
  uint64_t v19 = v18 + 2;
  v20(v21, v28 + v4, v24);
  uint64_t v5 = *(void *)(*v1 + 112);
  uint64_t v23 = (void (*)(char *, char *, uint64_t))v18[4];
  uint64_t v22 = v18 + 4;
  v23((char *)v1 + v5, v21, v24);
  v20(v21, v28, v24);
  v23((char *)v1 + *(void *)(*v1 + 120), v21, v24);
  uint64_t v6 = v24;
  uint64_t v7 = v25;
  uint64_t v8 = v26;
  uint64_t v9 = v27;
  uint64_t v10 = v28;
  *(uint64_t *)((char *)v1 + *(void *)(*v1 + 144)) = 1;
  outlined destroy of Interval<A, B>(v10, v6, v7, v8, v9);
  return v29;
}

Swift::Void __swiftcall AVLTreeNode.updateMaxEnd()()
{
  BOOL v87 = 0;
  uint64_t v86 = 0;
  uint64_t v84 = 0;
  unint64_t v44 = *(void **)v0;
  uint64_t v30 = v0;
  uint64_t v64 = v44[10];
  uint64_t v88 = v64;
  uint64_t v47 = 0;
  uint64_t v31 = type metadata accessor for Optional();
  uint64_t v33 = *(void *)(*(void *)(v31 - 8) + 64);
  unint64_t v32 = (v33 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v1 = MEMORY[0x270FA5388](0);
  uint64_t v34 = (char *)v8 - v32;
  unint64_t v35 = v32;
  uint64_t v2 = MEMORY[0x270FA5388](v1);
  uint64_t v36 = (char *)v8 - v35;
  uint64_t v61 = *(void *)(v3 - 8);
  uint64_t v62 = v3 - 8;
  uint64_t v42 = *(void *)(v61 + 64);
  unint64_t v37 = (v42 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v38 = (char *)v8 - v37;
  BOOL v87 = (char *)v8 - v37;
  unint64_t v39 = (v42 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v40 = (char *)v8 - v39;
  uint64_t v86 = (char *)v8 - v39;
  unint64_t v41 = (v42 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  uint64_t v57 = (char *)v8 - v41;
  unint64_t v43 = (v42 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v6);
  uint64_t v63 = (char *)v8 - v43;
  uint64_t v50 = v44[11];
  uint64_t v85 = v50;
  uint64_t v45 = v44[12];
  uint64_t v52 = type metadata accessor for Interval();
  unint64_t v46 = (*(void *)(*(void *)(v52 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v52);
  uint64_t v53 = (uint64_t)v8 - v46;
  uint64_t v84 = v0;
  uint64_t v48 = v0 + *(void *)(*(void *)v0 + 104);
  float v49 = &v83;
  uint64_t v67 = 32;
  uint64_t v68 = 0;
  swift_beginAccess();
  uint64_t v51 = type metadata accessor for Optional();
  outlined init with copy of Interval<A, B>(v48, v53, v64, v50, v51, v52);
  swift_endAccess();
  uint64_t v7 = *(int *)(v52 + 44);
  uint64_t v55 = *(void (**)(char *, uint64_t, uint64_t))(v61 + 16);
  uint64_t v54 = v61 + 16;
  v55(v63, v53 + v7, v64);
  outlined destroy of Interval<A, B>(v53, v64, v50, v51, v52);
  v55(v57, (uint64_t)v63, v64);
  uint64_t v56 = v0 + *(void *)(*(void *)v0 + 112);
  uint64_t v60 = &v82;
  swift_beginAccess();
  uint64_t v58 = *(void (**)(uint64_t, char *, uint64_t))(v61 + 40);
  uint64_t v59 = v61 + 40;
  v58(v56, v57, v64);
  swift_endAccess();
  uint64_t v65 = *(void (**)(char *, uint64_t))(v61 + 8);
  uint64_t v66 = v61 + 8;
  v65(v63, v64);
  uint64_t v69 = (uint64_t *)(v0 + *(void *)(*(void *)v0 + 128));
  uint64_t v70 = &v80;
  swift_beginAccess();
  uint64_t v71 = *v69;
  swift_retain();
  swift_endAccess();
  uint64_t v81 = v71;
  if (v71)
  {
    uint64_t v25 = &v81;
    uint64_t v28 = v81;
    swift_retain();
    outlined destroy of ContiguousArray<A1>();
    uint64_t v26 = v28 + *(void *)(*(void *)v28 + 112);
    uint64_t v27 = &v72;
    swift_beginAccess();
    v55(v36, v26, v64);
    swift_endAccess();
    swift_release();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v61 + 56))(v36, 0, 1, v64);
  }
  else
  {
    outlined destroy of ContiguousArray<A1>();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v61 + 56))(v36, 1, 1, v64);
  }
  uint64_t v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v61 + 48);
  uint64_t v24 = v61 + 48;
  if (v23((uint64_t)v36, 1, v64) == 1)
  {
    outlined destroy of B?((uint64_t)v36, v64);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v61 + 32))(v40, v36, v64);
    uint64_t v18 = v29 + *(void *)(*(void *)v29 + 112);
    uint64_t v19 = &v74;
    uint64_t v20 = 0;
    swift_beginAccess();
    v55(v57, v18, v64);
    swift_endAccess();
    max<A>(_:_:)();
    v65(v57, v64);
    v55(v57, (uint64_t)v63, v64);
    uint64_t v21 = v29 + *(void *)(*(void *)v29 + 112);
    uint64_t v22 = &v73;
    swift_beginAccess();
    v58(v21, v57, v64);
    swift_endAccess();
    v65(v63, v64);
    v65(v40, v64);
  }
  unint64_t v15 = (uint64_t *)(v29 + *(void *)(*(void *)v29 + 136));
  uint64_t v16 = &v78;
  swift_beginAccess();
  uint64_t v17 = *v15;
  swift_retain();
  swift_endAccess();
  uint64_t v79 = v17;
  if (v17)
  {
    uint64_t v11 = &v79;
    uint64_t v14 = v79;
    swift_retain();
    outlined destroy of ContiguousArray<A1>();
    uint64_t v12 = v14 + *(void *)(*(void *)v14 + 112);
    uint64_t v13 = &v75;
    swift_beginAccess();
    v55(v34, v12, v64);
    swift_endAccess();
    swift_release();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v61 + 56))(v34, 0, 1, v64);
  }
  else
  {
    outlined destroy of ContiguousArray<A1>();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v61 + 56))(v34, 1, 1, v64);
  }
  if (v23((uint64_t)v34, 1, v64) == 1)
  {
    outlined destroy of B?((uint64_t)v34, v64);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v61 + 32))(v38, v34, v64);
    v8[0] = v29 + *(void *)(*(void *)v29 + 112);
    v8[1] = &v77;
    void v8[2] = 0;
    swift_beginAccess();
    v55(v57, v8[0], v64);
    swift_endAccess();
    max<A>(_:_:)();
    v65(v57, v64);
    v55(v57, (uint64_t)v63, v64);
    uint64_t v9 = v29 + *(void *)(*(void *)v29 + 112);
    uint64_t v10 = &v76;
    swift_beginAccess();
    v58(v9, v57, v64);
    swift_endAccess();
    v65(v63, v64);
    v65(v38, v64);
  }
}

Swift::Void __swiftcall AVLTreeNode.updateMinStart()()
{
  uint64_t v59 = 0;
  uint64_t v57 = 0;
  uint64_t v22 = *(void **)v0;
  uint64_t v13 = v0;
  uint64_t v42 = v22[10];
  uint64_t v60 = v42;
  uint64_t v25 = 0;
  uint64_t v14 = type metadata accessor for Optional();
  unint64_t v15 = (*(void *)(*(void *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v1 = MEMORY[0x270FA5388](0);
  uint64_t v16 = (char *)v5 - v15;
  uint64_t v39 = *(void *)(v2 - 8);
  uint64_t v40 = v2 - 8;
  uint64_t v20 = *(void *)(v39 + 64);
  unint64_t v17 = (v20 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v3 = MEMORY[0x270FA5388](v1);
  uint64_t v18 = (char *)v5 - v17;
  uint64_t v59 = (char *)v5 - v17;
  unint64_t v19 = (v20 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = MEMORY[0x270FA5388](v3);
  unint64_t v35 = (char *)v5 - v19;
  unint64_t v21 = (v20 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v4);
  unint64_t v41 = (char *)v5 - v21;
  uint64_t v28 = v22[11];
  uint64_t v58 = v28;
  uint64_t v23 = v22[12];
  uint64_t v30 = type metadata accessor for Interval();
  unint64_t v24 = (*(void *)(*(void *)(v30 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v30);
  uint64_t v31 = (uint64_t)v5 - v24;
  uint64_t v57 = v0;
  uint64_t v26 = v0 + *(void *)(*(void *)v0 + 104);
  uint64_t v27 = &v56;
  uint64_t v45 = 32;
  uint64_t v46 = 0;
  swift_beginAccess();
  uint64_t v29 = type metadata accessor for Optional();
  outlined init with copy of Interval<A, B>(v26, v31, v42, v28, v29, v30);
  swift_endAccess();
  uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v39 + 16);
  uint64_t v32 = v39 + 16;
  v33(v41, v31, v42);
  outlined destroy of Interval<A, B>(v31, v42, v28, v29, v30);
  v33(v35, (uint64_t)v41, v42);
  uint64_t v34 = v0 + *(void *)(*(void *)v0 + 120);
  uint64_t v38 = &v55;
  swift_beginAccess();
  uint64_t v36 = *(void (**)(uint64_t, char *, uint64_t))(v39 + 40);
  uint64_t v37 = v39 + 40;
  v36(v34, v35, v42);
  swift_endAccess();
  unint64_t v43 = *(void (**)(char *, uint64_t))(v39 + 8);
  uint64_t v44 = v39 + 8;
  v43(v41, v42);
  uint64_t v47 = (uint64_t *)(v0 + *(void *)(*(void *)v0 + 128));
  uint64_t v48 = &v53;
  swift_beginAccess();
  uint64_t v49 = *v47;
  swift_retain();
  swift_endAccess();
  uint64_t v54 = v49;
  if (v49)
  {
    uint64_t v8 = &v54;
    uint64_t v11 = v54;
    swift_retain();
    outlined destroy of ContiguousArray<A1>();
    uint64_t v9 = v11 + *(void *)(*(void *)v11 + 120);
    uint64_t v10 = &v50;
    swift_beginAccess();
    v33(v16, v9, v42);
    swift_endAccess();
    swift_release();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v16, 0, 1, v42);
  }
  else
  {
    outlined destroy of ContiguousArray<A1>();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v39 + 56))(v16, 1, 1, v42);
  }
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v16, 1, v42) == 1)
  {
    outlined destroy of B?((uint64_t)v16, v42);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v18, v16, v42);
    v5[0] = v12 + *(void *)(*(void *)v12 + 120);
    v5[1] = &v52;
    v5[2] = 0;
    swift_beginAccess();
    v33(v35, v5[0], v42);
    swift_endAccess();
    min<A>(_:_:)();
    v43(v35, v42);
    v33(v35, (uint64_t)v41, v42);
    uint64_t v6 = v12 + *(void *)(*(void *)v12 + 120);
    uint64_t v7 = &v51;
    swift_beginAccess();
    v36(v6, v35, v42);
    swift_endAccess();
    v43(v41, v42);
    v43(v18, v42);
  }
}

uint64_t AVLTreeNode.description.getter(uint64_t a1)
{
  char v50 = 0;
  uint64_t v10 = *v1;
  uint64_t v28 = *(void *)(v10 + 80);
  uint64_t v52 = v28;
  uint64_t v16 = *(void **)(v28 - 8);
  uint64_t v17 = v28 - 8;
  unint64_t v9 = (v16[8] + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](a1);
  uint64_t v27 = (char *)&v9 - v9;
  uint64_t v23 = *(void *)(v10 + 88);
  uint64_t v51 = v23;
  uint64_t v13 = 0;
  uint64_t v25 = type metadata accessor for Interval();
  unint64_t v11 = (*(void *)(*(void *)(v25 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v25);
  uint64_t v26 = (uint64_t)&v9 - v11;
  char v50 = v1;
  uint64_t v2 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  unint64_t v41 = &v48;
  uint64_t v48 = v2;
  uint64_t v49 = v3;
  Builtin::Word v38 = 1;
  int v39 = 1;
  Swift::String v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("[", 1uLL, 1);
  object = v4._object;
  DefaultStringInterpolation.appendLiteral(_:)(v4);
  swift_bridgeObjectRelease();
  uint64_t v14 = v32 + *(void *)(*(void *)v32 + 104);
  unint64_t v15 = &v47;
  uint64_t v33 = 32;
  uint64_t v34 = 0;
  swift_beginAccess();
  uint64_t v24 = type metadata accessor for Optional();
  outlined init with copy of Interval<A, B>(v14, v26, v28, v23, v24, v25);
  swift_endAccess();
  uint64_t v22 = (void (*)(char *, uint64_t, uint64_t))v16[2];
  unint64_t v21 = v16 + 2;
  v22(v27, v26, v28);
  outlined destroy of Interval<A, B>(v26, v28, v23, v24, v25);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  uint64_t v30 = (void (*)(char *, uint64_t))v16[1];
  uint64_t v29 = v16 + 1;
  v30(v27, v28);
  Swift::String v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(",", v38, v39 & 1);
  uint64_t v18 = v5._object;
  DefaultStringInterpolation.appendLiteral(_:)(v5);
  swift_bridgeObjectRelease();
  uint64_t v19 = v32 + *(void *)(*(void *)v32 + 104);
  uint64_t v20 = &v46;
  swift_beginAccess();
  outlined init with copy of Interval<A, B>(v19, v26, v28, v23, v24, v25);
  swift_endAccess();
  v22(v27, v26 + *(int *)(v25 + 44), v28);
  outlined destroy of Interval<A, B>(v26, v28, v23, v24, v25);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v30(v27, v28);
  Swift::String v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("](", 2uLL, v39 & 1);
  uint64_t v31 = v6._object;
  DefaultStringInterpolation.appendLiteral(_:)(v6);
  swift_bridgeObjectRelease();
  unint64_t v35 = (uint64_t *)(v32 + *(void *)(*(void *)v32 + 144));
  uint64_t v36 = &v45;
  swift_beginAccess();
  uint64_t v37 = *v35;
  swift_endAccess();
  uint64_t v44 = v37;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  Swift::String v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(")", v38, v39 & 1);
  uint64_t v40 = v7._object;
  DefaultStringInterpolation.appendLiteral(_:)(v7);
  swift_bridgeObjectRelease();
  uint64_t v43 = v48;
  uint64_t v42 = v49;
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  return String.init(stringInterpolation:)();
}

BOOL AVLTreeNode.isLeaf.getter()
{
  Swift::String v6 = (uint64_t *)(v0 + *(void *)(*(void *)v0 + 128));
  swift_beginAccess();
  uint64_t v7 = *v6;
  swift_retain();
  swift_endAccess();
  outlined destroy of ContiguousArray<A1>();
  swift_retain();
  if (v7)
  {
    BOOL v2 = 0;
  }
  else
  {
    uint64_t v3 = (uint64_t *)(v5 + *(void *)(*(void *)v5 + 136));
    swift_beginAccess();
    uint64_t v4 = *v3;
    swift_retain();
    swift_endAccess();
    outlined destroy of ContiguousArray<A1>();
    BOOL v2 = v4 == 0;
  }
  swift_release();
  return v2;
}

uint64_t AVLTreeNode.deinit()
{
  uint64_t v6 = *(void *)(*(void *)v0 + 80);
  uint64_t v4 = *(void *)(*(void *)v0 + 88);
  uint64_t v3 = *(void *)(*(void *)v0 + 104);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v1 = type metadata accessor for Interval();
  outlined destroy of Interval<A, B>(v0 + v3, v6, v4, v5, v1);
  uint64_t v7 = *(void (**)(uint64_t))(*(void *)(v6 - 8) + 8);
  v7(v0 + *(void *)(*(void *)v0 + 112));
  ((void (*)(uint64_t, uint64_t))v7)(v0 + *(void *)(*(void *)v0 + 120), v6);
  outlined destroy of ContiguousArray<A1>();
  outlined destroy of ContiguousArray<A1>();
  return v8;
}

uint64_t AVLTreeNode.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AVLTreeNode<A, B>(uint64_t a1)
{
  return AVLTreeNode.description.getter(a1);
}

uint64_t AugmentedIntervalTree.root.getter()
{
  swift_beginAccess();
  uint64_t v2 = *(void *)(v0 + 16);
  swift_retain();
  swift_endAccess();
  return v2;
}

uint64_t AugmentedIntervalTree.root.setter(uint64_t a1)
{
  swift_retain();
  swift_beginAccess();
  *(void *)(v1 + 16) = a1;
  swift_release();
  swift_endAccess();
  return swift_release();
}

uint64_t AugmentedIntervalTree.numNodes.getter()
{
  swift_beginAccess();
  uint64_t v2 = *(void *)(v0 + 24);
  swift_endAccess();
  return v2;
}

uint64_t AugmentedIntervalTree.numNodes.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 24) = a1;
  return swift_endAccess();
}

uint64_t AugmentedIntervalTree.init()()
{
  *(void *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = 0;
  swift_beginAccess();
  *(void *)(v0 + 16) = 0;
  swift_release();
  swift_endAccess();
  return v2;
}

uint64_t type metadata accessor for Interval()
{
  return __swift_instantiateGenericMetadata();
}

void *outlined init with copy of B?(const void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *(void *)(a3 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v9 + 48))(a1, 1))
  {
    memcpy(a2, a1, *(void *)(*(void *)(a4 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(a2, a1, a3);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(a2, 0, 1, a3);
  }
  return a2;
}

void *outlined assign with take of B?(const void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *(void *)(a3 - 8);
  uint64_t v10 = *(unsigned int (**)(void))(v9 + 48);
  if (v10())
  {
    if (((unsigned int (*)(const void *, uint64_t, uint64_t))v10)(a1, 1, a3))
    {
      memcpy(a2, a1, *(void *)(*(void *)(a4 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(a2, a1, a3);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(a2, 0, 1, a3);
    }
  }
  else if (((unsigned int (*)(const void *, uint64_t, uint64_t))v10)(a1, 1, a3))
  {
    (*(void (**)(void *, uint64_t))(v9 + 8))(a2, a3);
    memcpy(a2, a1, *(void *)(*(void *)(a4 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 40))(a2, a1, a3);
  }
  return a2;
}

uint64_t outlined init with copy of Interval<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *(void (**)(void))(*(void *)(a3 - 8) + 16);
  v10();
  ((void (*)(uint64_t, uint64_t, uint64_t))v10)(a2 + *(int *)(a6 + 44), a1 + *(int *)(a6 + 44), a3);
  uint64_t v14 = *(int *)(a6 + 48);
  uint64_t v15 = *(void *)(a4 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v15 + 48))(a1 + v14, 1))
  {
    memcpy((void *)(a2 + v14), (const void *)(a1 + v14), *(void *)(*(void *)(a5 - 8) + 64));
  }
  else
  {
    (*(void (**)(void))(v15 + 16))();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(a2 + v14, 0, 1, a4);
  }
  return a2;
}

uint64_t outlined destroy of B?(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v5 + 48))(a1, 1)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, a2);
  }
  return a1;
}

uint64_t outlined destroy of Interval<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *(void (**)(void))(*(void *)(a2 - 8) + 8);
  v7();
  ((void (*)(uint64_t, uint64_t))v7)(a1 + *(int *)(a5 + 44), a2);
  uint64_t v11 = *(int *)(a5 + 48);
  uint64_t v12 = *(void *)(a3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v12 + 48))(a1 + v11, 1)) {
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1 + v11, a3);
  }
  return a1;
}

uint64_t outlined assign with take of Interval<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *(void (**)(void))(*(void *)(a3 - 8) + 40);
  v10();
  ((void (*)(uint64_t, uint64_t, uint64_t))v10)(a2 + *(int *)(a6 + 44), a1 + *(int *)(a6 + 44), a3);
  uint64_t v14 = *(int *)(a6 + 48);
  uint64_t v15 = *(void *)(a4 - 8);
  uint64_t v16 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (((unsigned int (*)(uint64_t, uint64_t))v16)(a2 + v14, 1))
  {
    if (v16(a1 + v14, 1, a4))
    {
      memcpy((void *)(a2 + v14), (const void *)(a1 + v14), *(void *)(*(void *)(a5 - 8) + 64));
    }
    else
    {
      (*(void (**)(void))(v15 + 32))();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(a2 + v14, 0, 1, a4);
    }
  }
  else if (v16(a1 + v14, 1, a4))
  {
    (*(void (**)(void))(v15 + 8))();
    memcpy((void *)(a2 + v14), (const void *)(a1 + v14), *(void *)(*(void *)(a5 - 8) + 64));
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 40))(a2 + v14, a1 + v14, a4);
  }
  return a2;
}

uint64_t outlined init with take of Interval<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *(void (**)(void))(*(void *)(a3 - 8) + 32);
  v10();
  ((void (*)(uint64_t, uint64_t, uint64_t))v10)(a2 + *(int *)(a6 + 44), a1 + *(int *)(a6 + 44), a3);
  uint64_t v14 = *(int *)(a6 + 48);
  uint64_t v15 = *(void *)(a4 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v15 + 48))(a1 + v14, 1))
  {
    memcpy((void *)(a2 + v14), (const void *)(a1 + v14), *(void *)(*(void *)(a5 - 8) + 64));
  }
  else
  {
    (*(void (**)(void))(v15 + 32))();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(a2 + v14, 0, 1, a4);
  }
  return a2;
}

uint64_t AugmentedIntervalTree.height.getter()
{
  swift_beginAccess();
  uint64_t v6 = *(void *)(v0 + 16);
  swift_retain();
  swift_endAccess();
  if (v6)
  {
    swift_retain();
    outlined destroy of ContiguousArray<A1>();
    uint64_t v2 = (uint64_t *)(v6 + *(void *)(*(void *)v6 + 144));
    swift_beginAccess();
    uint64_t v3 = *v2;
    swift_endAccess();
    swift_release();
    uint64_t v4 = v3;
    char v5 = 0;
  }
  else
  {
    outlined destroy of ContiguousArray<A1>();
    uint64_t v4 = 0;
    char v5 = 1;
  }
  if (v5) {
    return 0;
  }
  else {
    return v4;
  }
}

uint64_t AugmentedIntervalTree.insert(start:end:context:)(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v33 = a1;
  uint64_t v48 = a2;
  char v46 = a3;
  uint64_t v24 = "Precondition failed";
  uint64_t v25 = "NightingaleTraining/AugmentedTree.swift";
  uint64_t v62 = 0;
  uint64_t v61 = 0;
  uint64_t v60 = 0;
  uint64_t v59 = 0;
  uint64_t v58 = 0;
  uint64_t v57 = 0;
  uint64_t v32 = (void *)*v3;
  uint64_t v26 = v3;
  uint64_t v27 = v32[11];
  uint64_t v64 = v27;
  uint64_t v28 = 0;
  uint64_t v29 = type metadata accessor for Optional();
  unint64_t v30 = (*(void *)(*(void *)(v29 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v31 = (char *)v13 - v30;
  uint64_t v52 = v32[10];
  uint64_t v63 = v52;
  uint64_t v53 = v32[12];
  uint64_t v34 = type metadata accessor for Interval();
  unint64_t v35 = (*(void *)(*(void *)(v34 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v34);
  uint64_t v36 = (uint64_t)v13 - v35;
  unint64_t v37 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v5 = MEMORY[0x270FA5388]((char *)v13 - v35);
  uint64_t v38 = (uint64_t)v13 - v37;
  uint64_t v62 = (char *)v13 - v37;
  char v47 = *(void **)(v6 - 8);
  uint64_t v39 = v6 - 8;
  uint64_t v45 = v47[8];
  unint64_t v40 = (v45 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v5);
  unint64_t v41 = (char *)v13 - v40;
  unint64_t v42 = (v45 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)v13 - v40);
  uint64_t v43 = (char *)v13 - v42;
  unint64_t v44 = (v45 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)v13 - v42);
  uint64_t v51 = (char *)v13 - v44;
  MEMORY[0x270FA5388]((char *)v13 - v44);
  uint64_t v54 = (char *)v13 - v7;
  uint64_t v61 = v8;
  uint64_t v60 = v48;
  uint64_t v59 = v46;
  uint64_t v58 = v3;
  char v50 = (void (*)(void))v47[2];
  uint64_t v49 = v47 + 2;
  v50();
  ((void (*)(char *, uint64_t, uint64_t))v50)(v51, v48, v52);
  if ((dispatch thunk of static Comparable.<= infix(_:_:)() & 1) == 0)
  {
    uint64_t v22 = 39;
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("start should be less or equal than end.", 0x27uLL, 1);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  uint64_t v19 = (void (*)(char *, uint64_t))v47[1];
  uint64_t v18 = v47 + 1;
  v19(v54, v52);
  v19(v51, v52);
  ((void (*)(char *, uint64_t, uint64_t))v50)(v43, v33, v52);
  ((void (*)(char *, uint64_t, uint64_t))v50)(v41, v48, v52);
  outlined init with copy of B?(v46, v31, v27, v29);
  Interval.init(start:end:context:)(v43, v41, v31, v52, v27, v53, v38);
  type metadata accessor for AVLTreeNode();
  outlined init with copy of Interval<A, B>(v38, v36, v52, v27, v29, v34);
  uint64_t v20 = AVLTreeNode.__allocating_init(interval:)(v36);
  uint64_t v57 = v20;
  uint64_t result = swift_beginAccess();
  uint64_t v10 = *(void *)(v23 + 24);
  uint64_t v21 = v10 + 1;
  if (__OFADD__(v10, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v12 = v23;
    *(void *)(v23 + 24) = v21;
    swift_endAccess();
    v13[1] = &v56;
    uint64_t v15 = 0;
    swift_beginAccess();
    uint64_t v14 = *(void *)(v12 + 16);
    swift_retain();
    swift_endAccess();
    uint64_t v17 = AugmentedIntervalTree.insertNode(_:_:)(v14, v20);
    swift_release();
    swift_retain();
    uint64_t v16 = &v55;
    swift_beginAccess();
    *(void *)(v23 + 16) = v17;
    swift_release();
    swift_endAccess();
    swift_release();
    swift_release();
    return outlined destroy of Interval<A, B>(v38, v52, v27, v29, v34);
  }
  return result;
}

uint64_t type metadata accessor for AVLTreeNode()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t *AugmentedIntervalTree.delete(interval:)(uint64_t a1)
{
  uint64_t v16 = 0;
  uint64_t v13 = 0;
  uint64_t v6 = *v1;
  uint64_t v16 = a1;
  uint64_t v15 = *(void *)(v6 + 80);
  uint64_t v14 = *(void *)(v6 + 88);
  uint64_t v13 = v1;
  swift_beginAccess();
  uint64_t v9 = v1[2];
  swift_retain();
  swift_endAccess();
  uint64_t v10 = AugmentedIntervalTree.deleteInterval(_:_:)(v9, a1);
  swift_release();
  swift_retain();
  swift_beginAccess();
  *(void *)(v8 + 16) = v10;
  swift_release();
  swift_endAccess();
  swift_release();
  swift_beginAccess();
  uint64_t v11 = *(void *)(v8 + 16);
  swift_retain();
  swift_endAccess();
  uint64_t v12 = v11;
  uint64_t result = &v12;
  outlined destroy of ContiguousArray<A1>();
  if (v11)
  {
    uint64_t result = (uint64_t *)swift_beginAccess();
    uint64_t v3 = *(void *)(v8 + 24);
    uint64_t v5 = v3 - 1;
    if (__OFSUB__(v3, 1))
    {
      __break(1u);
    }
    else
    {
      *(void *)(v8 + 24) = v5;
      return (uint64_t *)swift_endAccess();
    }
  }
  return result;
}

uint64_t AugmentedIntervalTree.overlap(start:end:)(uint64_t a1, uint64_t a2)
{
  uint64_t v59 = a1;
  uint64_t v74 = a2;
  uint64_t v48 = "Precondition failed";
  uint64_t v49 = "NightingaleTraining/AugmentedTree.swift";
  uint64_t v54 = 0;
  uint64_t v50 = MEMORY[0x263F8D4D0];
  uint64_t v51 = MEMORY[0x263F8D4D8];
  uint64_t v101 = 0;
  uint64_t v100 = 0;
  uint64_t v99 = 0;
  uint64_t v98 = 0;
  uint64_t v94 = 0;
  uint64_t v90 = 0;
  uint64_t v86 = 0;
  uint64_t v82 = 0;
  uint64_t v58 = (void *)*v2;
  uint64_t v52 = v2;
  uint64_t v53 = v58[11];
  uint64_t v103 = v53;
  uint64_t v55 = type metadata accessor for Optional();
  unint64_t v56 = (*(void *)(*(void *)(v55 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v57 = (char *)v8 - v56;
  uint64_t v78 = v58[10];
  uint64_t v102 = v78;
  uint64_t v79 = v58[12];
  uint64_t v60 = type metadata accessor for Interval();
  unint64_t v61 = (*(void *)(*(void *)(v60 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v60);
  uint64_t v62 = (uint64_t)v8 - v61;
  unint64_t v63 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)v8 - v61);
  uint64_t v64 = (uint64_t)v8 - v63;
  uint64_t v73 = *(void **)(v4 - 8);
  uint64_t v65 = v4 - 8;
  uint64_t v71 = v73[8];
  unint64_t v66 = (v71 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)v8 - v63);
  uint64_t v67 = (char *)v8 - v66;
  unint64_t v68 = (v71 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)v8 - v66);
  uint64_t v69 = (char *)v8 - v68;
  unint64_t v70 = (v71 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)v8 - v68);
  char v77 = (char *)v8 - v70;
  unint64_t v72 = (v71 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)v8 - v70);
  char v80 = (char *)v8 - v72;
  uint64_t v101 = v5;
  uint64_t v100 = v74;
  uint64_t v99 = v2;
  char v76 = (void (*)(void))v73[2];
  char v75 = v73 + 2;
  v76();
  ((void (*)(char *, uint64_t, uint64_t))v76)(v77, v74, v78);
  if ((dispatch thunk of static Comparable.<= infix(_:_:)() & 1) == 0)
  {
    uint64_t v46 = 39;
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("start should be less or equal than end.", 0x27uLL, 1);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  unint64_t v42 = (void (*)(char *, uint64_t))v73[1];
  unint64_t v41 = v73 + 1;
  v42(v80, v78);
  v42(v77, v78);
  uint64_t v43 = type metadata accessor for AVLTreeNode();
  uint64_t v98 = Array.init()();
  unint64_t v44 = &v97;
  swift_beginAccess();
  uint64_t v45 = *(void *)(v47 + 16);
  swift_retain();
  swift_endAccess();
  if (v45)
  {
    uint64_t v40 = v45;
    uint64_t v39 = v45;
    uint64_t v82 = v45;
    swift_retain();
    uint64_t v38 = &v81;
    uint64_t v81 = v39;
    type metadata accessor for Array();
    Array.append(_:)();
    swift_release();
  }
  while (1)
  {
    uint64_t v36 = v98;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v35 = &v96;
    uint64_t v96 = v36;
    uint64_t v34 = type metadata accessor for Array();
    swift_getWitnessTable();
    int v37 = Collection.isEmpty.getter();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    if (v37) {
      break;
    }
    swift_getWitnessTable();
    RangeReplaceableCollection.removeFirst()();
    uint64_t v6 = v64;
    uint64_t v30 = v95;
    uint64_t v94 = v95;
    uint64_t v31 = v95 + *(void *)(*(void *)v95 + 104);
    uint64_t v32 = &v93;
    swift_beginAccess();
    outlined init with copy of Interval<A, B>(v31, v6, v78, v53, v55, v60);
    swift_endAccess();
    ((void (*)(char *, uint64_t, uint64_t))v76)(v69, v59, v78);
    ((void (*)(char *, uint64_t, uint64_t))v76)(v67, v74, v78);
    (*(void (**)(char *, uint64_t))(*(void *)(v53 - 8) + 56))(v57, 1);
    Interval.init(start:end:context:)(v69, v67, v57, v78, v53, v79, v62);
    int v33 = Interval.overlaps(with:)(v62, v60);
    outlined destroy of Interval<A, B>(v62, v78, v53, v55, v60);
    outlined destroy of Interval<A, B>(v64, v78, v53, v55, v60);
    if (v33)
    {
      swift_release();
      outlined destroy of [A]();
      int v29 = 1;
      return v29 & 1;
    }
    uint64_t v26 = (uint64_t *)(v30 + *(void *)(*(void *)v30 + 128));
    uint64_t v27 = &v92;
    swift_beginAccess();
    uint64_t v28 = *v26;
    swift_retain();
    swift_endAccess();
    if (v28)
    {
      uint64_t v25 = v28;
      uint64_t v21 = v28;
      uint64_t v86 = v28;
      uint64_t v22 = v25 + *(void *)(*(void *)v25 + 112);
      uint64_t v23 = &v85;
      swift_beginAccess();
      ((void (*)(char *, uint64_t, uint64_t))v76)(v69, v22, v78);
      swift_endAccess();
      int v24 = dispatch thunk of static Comparable.>= infix(_:_:)();
      v42(v69, v78);
      if (v24)
      {
        uint64_t v18 = v21 + *(void *)(*(void *)v21 + 120);
        uint64_t v19 = &v84;
        swift_beginAccess();
        ((void (*)(char *, uint64_t, uint64_t))v76)(v69, v18, v78);
        swift_endAccess();
        int v20 = dispatch thunk of static Comparable.<= infix(_:_:)();
        v42(v69, v78);
        if (v20)
        {
          swift_retain();
          uint64_t v83 = v21;
          Array.append(_:)();
        }
      }
      swift_release();
    }
    uint64_t v15 = (uint64_t *)(v30 + *(void *)(*(void *)v30 + 136));
    uint64_t v16 = &v91;
    swift_beginAccess();
    uint64_t v17 = *v15;
    swift_retain();
    swift_endAccess();
    if (v17)
    {
      uint64_t v14 = v17;
      uint64_t v10 = v17;
      uint64_t v90 = v17;
      uint64_t v11 = v14 + *(void *)(*(void *)v14 + 112);
      uint64_t v12 = &v89;
      swift_beginAccess();
      ((void (*)(char *, uint64_t, uint64_t))v76)(v69, v11, v78);
      swift_endAccess();
      int v13 = dispatch thunk of static Comparable.>= infix(_:_:)();
      v42(v69, v78);
      if (v13)
      {
        v8[0] = v10 + *(void *)(*(void *)v10 + 120);
        v8[1] = &v88;
        swift_beginAccess();
        ((void (*)(char *, void, uint64_t))v76)(v69, v8[0], v78);
        swift_endAccess();
        int v9 = dispatch thunk of static Comparable.<= infix(_:_:)();
        v42(v69, v78);
        if (v9)
        {
          swift_retain();
          uint64_t v87 = v10;
          Array.append(_:)();
        }
      }
      swift_release();
    }
    swift_release();
  }
  outlined destroy of [A]();
  int v29 = 0;
  return v29 & 1;
}

uint64_t AugmentedIntervalTree.search(start:end:)(uint64_t a1, uint64_t a2)
{
  uint64_t v64 = a1;
  uint64_t v79 = a2;
  uint64_t v53 = "Precondition failed";
  uint64_t v54 = "NightingaleTraining/AugmentedTree.swift";
  uint64_t v59 = 0;
  uint64_t v55 = MEMORY[0x263F8D4D0];
  uint64_t v56 = MEMORY[0x263F8D4D8];
  uint64_t v107 = 0;
  uint64_t v106 = 0;
  uint64_t v105 = 0;
  uint64_t v104 = 0;
  uint64_t v103 = 0;
  uint64_t v99 = 0;
  uint64_t v95 = 0;
  uint64_t v91 = 0;
  uint64_t v87 = 0;
  unint64_t v63 = (void *)*v2;
  uint64_t v57 = v2;
  uint64_t v58 = v63[11];
  uint64_t v109 = v58;
  uint64_t v60 = type metadata accessor for Optional();
  unint64_t v61 = (*(void *)(*(void *)(v60 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v62 = (char *)&v8 - v61;
  uint64_t v83 = v63[10];
  uint64_t v108 = v83;
  uint64_t v84 = v63[12];
  uint64_t v65 = type metadata accessor for Interval();
  unint64_t v66 = (*(void *)(*(void *)(v65 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v65);
  uint64_t v67 = (uint64_t)&v8 - v66;
  unint64_t v68 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)&v8 - v66);
  uint64_t v69 = (uint64_t)&v8 - v68;
  uint64_t v78 = *(void **)(v4 - 8);
  uint64_t v70 = v4 - 8;
  uint64_t v76 = v78[8];
  unint64_t v71 = (v76 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)&v8 - v68);
  unint64_t v72 = (char *)&v8 - v71;
  unint64_t v73 = (v76 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)&v8 - v71);
  uint64_t v74 = (char *)&v8 - v73;
  unint64_t v75 = (v76 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)&v8 - v73);
  uint64_t v82 = (char *)&v8 - v75;
  unint64_t v77 = (v76 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)&v8 - v75);
  uint64_t v85 = (char *)&v8 - v77;
  uint64_t v107 = v5;
  uint64_t v106 = v79;
  uint64_t v105 = v2;
  uint64_t v81 = (void (*)(void))v78[2];
  char v80 = v78 + 2;
  v81();
  ((void (*)(char *, uint64_t, uint64_t))v81)(v82, v79, v83);
  if ((dispatch thunk of static Comparable.<= infix(_:_:)() & 1) == 0)
  {
    uint64_t v51 = 39;
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("start should be less or equal than end.", 0x27uLL, 1);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  uint64_t v46 = (void (*)(char *, uint64_t))v78[1];
  uint64_t v45 = v78 + 1;
  v46(v85, v83);
  v46(v82, v83);
  uint64_t v47 = 0;
  uint64_t v104 = _allocateUninitializedArray<A>(_:)();
  uint64_t v48 = type metadata accessor for AVLTreeNode();
  uint64_t v103 = Array.init()();
  uint64_t v49 = &v102;
  swift_beginAccess();
  uint64_t v50 = *(void *)(v52 + 16);
  swift_retain();
  swift_endAccess();
  if (v50)
  {
    uint64_t v44 = v50;
    uint64_t v43 = v50;
    uint64_t v87 = v50;
    swift_retain();
    unint64_t v42 = &v86;
    uint64_t v86 = v43;
    type metadata accessor for Array();
    Array.append(_:)();
    swift_release();
  }
  while (1)
  {
    uint64_t v40 = v103;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v39 = &v101;
    uint64_t v101 = v40;
    uint64_t v38 = type metadata accessor for Array();
    swift_getWitnessTable();
    int v41 = Collection.isEmpty.getter();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    if (v41) {
      break;
    }
    swift_getWitnessTable();
    RangeReplaceableCollection.removeFirst()();
    uint64_t v6 = v69;
    uint64_t v34 = v100;
    uint64_t v99 = v100;
    uint64_t v35 = v100 + *(void *)(*(void *)v100 + 104);
    uint64_t v36 = &v98;
    swift_beginAccess();
    outlined init with copy of Interval<A, B>(v35, v6, v83, v58, v60, v65);
    swift_endAccess();
    ((void (*)(char *, uint64_t, uint64_t))v81)(v74, v64, v83);
    ((void (*)(char *, uint64_t, uint64_t))v81)(v72, v79, v83);
    (*(void (**)(char *, uint64_t))(*(void *)(v58 - 8) + 56))(v62, 1);
    Interval.init(start:end:context:)(v74, v72, v62, v83, v58, v84, v67);
    int v37 = Interval.overlaps(with:)(v67, v65);
    outlined destroy of Interval<A, B>(v67, v83, v58, v60, v65);
    outlined destroy of Interval<A, B>(v69, v83, v58, v60, v65);
    if (v37)
    {
      uint64_t v32 = v34 + *(void *)(*(void *)v34 + 104);
      int v33 = v88;
      swift_beginAccess();
      outlined init with copy of Interval<A, B>(v32, v69, v83, v58, v60, v65);
      swift_endAccess();
      type metadata accessor for Array();
      Array.append(_:)();
    }
    int v29 = (uint64_t *)(v34 + *(void *)(*(void *)v34 + 128));
    uint64_t v30 = &v97;
    swift_beginAccess();
    uint64_t v31 = *v29;
    swift_retain();
    swift_endAccess();
    if (v31)
    {
      uint64_t v28 = v31;
      uint64_t v24 = v31;
      uint64_t v91 = v31;
      uint64_t v25 = v28 + *(void *)(*(void *)v28 + 112);
      uint64_t v26 = &v90;
      swift_beginAccess();
      ((void (*)(char *, uint64_t, uint64_t))v81)(v74, v25, v83);
      swift_endAccess();
      int v27 = dispatch thunk of static Comparable.>= infix(_:_:)();
      v46(v74, v83);
      if (v27)
      {
        uint64_t v21 = v24 + *(void *)(*(void *)v24 + 120);
        uint64_t v22 = &v89;
        swift_beginAccess();
        ((void (*)(char *, uint64_t, uint64_t))v81)(v74, v21, v83);
        swift_endAccess();
        int v23 = dispatch thunk of static Comparable.<= infix(_:_:)();
        v46(v74, v83);
        if (v23)
        {
          swift_retain();
          v88[3] = v24;
          Array.append(_:)();
        }
      }
      swift_release();
    }
    uint64_t v18 = (uint64_t *)(v34 + *(void *)(*(void *)v34 + 136));
    uint64_t v19 = &v96;
    swift_beginAccess();
    uint64_t v20 = *v18;
    swift_retain();
    swift_endAccess();
    if (v20)
    {
      uint64_t v17 = v20;
      uint64_t v13 = v20;
      uint64_t v95 = v20;
      uint64_t v14 = v17 + *(void *)(*(void *)v17 + 112);
      uint64_t v15 = &v94;
      swift_beginAccess();
      ((void (*)(char *, uint64_t, uint64_t))v81)(v74, v14, v83);
      swift_endAccess();
      int v16 = dispatch thunk of static Comparable.>= infix(_:_:)();
      v46(v74, v83);
      if (v16)
      {
        uint64_t v10 = v13 + *(void *)(*(void *)v13 + 120);
        uint64_t v11 = &v93;
        swift_beginAccess();
        ((void (*)(char *, uint64_t, uint64_t))v81)(v74, v10, v83);
        swift_endAccess();
        int v12 = dispatch thunk of static Comparable.<= infix(_:_:)();
        v46(v74, v83);
        if (v12)
        {
          swift_retain();
          uint64_t v92 = v13;
          Array.append(_:)();
        }
      }
      swift_release();
    }
    swift_release();
  }
  uint64_t v8 = &v104;
  uint64_t v9 = v104;
  swift_bridgeObjectRetain();
  outlined destroy of [A]();
  outlined destroy of [A]();
  return v9;
}

uint64_t AugmentedIntervalTree.description.getter()
{
  uint64_t v80 = MEMORY[0x263F8D4D0];
  uint64_t v81 = MEMORY[0x263F8D4D8];
  uint64_t v82 = &protocol conformance descriptor for Interval<A, B>;
  uint64_t v121 = 0;
  uint64_t v119 = 0;
  v118._uint64_t countAndFlagsBits = 0;
  v118._object = 0;
  uint64_t v117 = 0;
  uint64_t v113 = 0;
  uint64_t v112 = 0;
  uint64_t v110 = 0;
  uint64_t v111 = 0;
  uint64_t v108 = 0;
  uint64_t v109 = 0;
  uint64_t v97 = 0;
  uint64_t v94 = 0;
  uint64_t v85 = (void *)*v0;
  uint64_t v83 = v85[10];
  uint64_t v123 = v83;
  uint64_t v84 = v85[11];
  uint64_t v122 = v84;
  uint64_t v86 = v85[12];
  uint64_t v87 = type metadata accessor for Interval();
  unint64_t v88 = (*(void *)(*(void *)(v87 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v87);
  uint64_t v89 = (uint64_t)&v21 - v88;
  uint64_t v121 = v0;
  uint64_t v90 = &v120;
  swift_beginAccess();
  uint64_t v91 = v0[2];
  swift_retain();
  swift_endAccess();
  if (!v91)
  {
    Swift::String v23 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Empty tree", 0xAuLL, 1);
    return v23._countAndFlagsBits;
  }
  uint64_t v79 = v91;
  uint64_t v76 = v91;
  uint64_t v119 = v91;
  uint64_t v74 = 0;
  Swift::String v118 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  type metadata accessor for AVLTreeNode();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v75 = _allocateUninitializedArray<A>(_:)();
  unint64_t v77 = v1;
  swift_retain();
  uint64_t v2 = v75;
  uint64_t v3 = v77;
  *unint64_t v77 = v76;
  v3[1] = 0;
  _finalizeUninitializedArray<A>(_:)();
  uint64_t v117 = v2;
  while (1)
  {
    uint64_t v72 = v117;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v71 = &v116;
    uint64_t v116 = v72;
    uint64_t v70 = type metadata accessor for Array();
    swift_getWitnessTable();
    int v73 = Collection.isEmpty.getter();
    outlined destroy of [A]();
    swift_bridgeObjectRelease();
    if (v73)
    {
      uint64_t v21 = &v118;
      Swift::String v22 = v118;
      swift_bridgeObjectRetain();
      outlined destroy of [A]();
      outlined destroy of DefaultStringInterpolation();
      swift_release();
      Swift::String v23 = v22;
      return v23._countAndFlagsBits;
    }
    uint64_t v65 = &v114;
    swift_getWitnessTable();
    RangeReplaceableCollection.removeFirst()();
    uint64_t v66 = v114;
    uint64_t v67 = v115;
    uint64_t v113 = v114;
    uint64_t v112 = v115;
    Swift::String v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("    ", 4uLL, 1);
    uint64_t v68 = MEMORY[0x25A2C0610](v4._countAndFlagsBits, v4._object, v67);
    uint64_t v69 = v5;
    uint64_t v110 = v68;
    uint64_t v111 = v5;
    if (AVLTreeNode.isLeaf.getter())
    {
      Swift::String v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("└──", 9uLL, 0);
      object = v8._object;
      uint64_t countAndFlagsBits = v8._countAndFlagsBits;
    }
    else
    {
      Swift::String v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("├──", 9uLL, 0);
      object = v9._object;
      uint64_t countAndFlagsBits = v9._countAndFlagsBits;
    }
    uint64_t v63 = countAndFlagsBits;
    uint64_t v64 = object;
    int v37 = object;
    uint64_t v36 = countAndFlagsBits;
    uint64_t v108 = countAndFlagsBits;
    uint64_t v109 = object;
    uint64_t v10 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    uint64_t v53 = &v106;
    uint64_t v106 = v10;
    uint64_t v107 = v11;
    uint64_t v34 = "";
    Builtin::Word v42 = 0;
    int v51 = 1;
    Swift::String v12 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    int v33 = v12._object;
    DefaultStringInterpolation.appendLiteral(_:)(v12);
    swift_bridgeObjectRelease();
    uint64_t v104 = v68;
    uint64_t v105 = v69;
    uint64_t v38 = MEMORY[0x263F8D310];
    uint64_t v39 = MEMORY[0x263F8D378];
    uint64_t v40 = MEMORY[0x263F8D370];
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    Swift::String v13 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v34, v42, v51 & 1);
    uint64_t v35 = v13._object;
    DefaultStringInterpolation.appendLiteral(_:)(v13);
    swift_bridgeObjectRelease();
    uint64_t v102 = v36;
    uint64_t v103 = v37;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    Swift::String v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" ", 1uLL, v51 & 1);
    int v41 = v14._object;
    DefaultStringInterpolation.appendLiteral(_:)(v14);
    swift_bridgeObjectRelease();
    uint64_t v43 = v66 + *(void *)(*(void *)v66 + 104);
    uint64_t v44 = &v101;
    uint64_t v58 = 32;
    uint64_t v59 = 0;
    swift_beginAccess();
    uint64_t v45 = type metadata accessor for Optional();
    outlined init with copy of Interval<A, B>(v43, v89, v83, v84, v45, v87);
    swift_endAccess();
    swift_getWitnessTable();
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of Interval<A, B>(v89, v83, v84, v45, v87);
    Builtin::Word v50 = 2;
    Swift::String v15 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" (", 2uLL, v51 & 1);
    uint64_t v46 = v15._object;
    DefaultStringInterpolation.appendLiteral(_:)(v15);
    swift_bridgeObjectRelease();
    uint64_t v47 = (uint64_t *)(v66 + *(void *)(*(void *)v66 + 144));
    uint64_t v48 = &v100;
    swift_beginAccess();
    uint64_t v49 = *v47;
    swift_endAccess();
    void v99[3] = v49;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    Swift::String v16 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(")\n", v50, v51 & 1);
    uint64_t v52 = v16._object;
    DefaultStringInterpolation.appendLiteral(_:)(v16);
    swift_bridgeObjectRelease();
    uint64_t v55 = v106;
    uint64_t v54 = v107;
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    uint64_t v56 = String.init(stringInterpolation:)();
    uint64_t v57 = v17;
    static String.+= infix(_:_:)();
    swift_bridgeObjectRelease();
    uint64_t v60 = (uint64_t *)(v66 + *(void *)(*(void *)v66 + 128));
    unint64_t v61 = v99;
    swift_beginAccess();
    uint64_t v62 = *v60;
    swift_retain();
    swift_endAccess();
    if (v62)
    {
      uint64_t v32 = v62;
      uint64_t v30 = v62;
      uint64_t v94 = v62;
      uint64_t result = swift_retain();
      uint64_t v31 = v67 + 1;
      if (__OFADD__(v67, 1)) {
        goto LABEL_28;
      }
      uint64_t v92 = v30;
      uint64_t v93 = v31;
      Array.append(_:)();
      swift_release();
    }
    int v27 = (uint64_t *)(v66 + *(void *)(*(void *)v66 + 136));
    uint64_t v28 = &v98;
    swift_beginAccess();
    uint64_t v29 = *v27;
    swift_retain();
    swift_endAccess();
    if (v29) {
      break;
    }
LABEL_23:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
  }
  uint64_t v26 = v29;
  uint64_t v24 = v29;
  uint64_t v97 = v29;
  uint64_t result = swift_retain();
  uint64_t v25 = v67 + 1;
  if (!__OFADD__(v67, 1))
  {
    uint64_t v95 = v24;
    uint64_t v96 = v25;
    Array.append(_:)();
    swift_release();
    goto LABEL_23;
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t AugmentedIntervalTree.insertNode(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v116 = a1;
  uint64_t v106 = a2;
  uint64_t v99 = "Fatal error";
  uint64_t v100 = "Unexpectedly found nil while unwrapping an Optional value";
  char v101 = "NightingaleTraining/AugmentedTree.swift";
  uint64_t v143 = 0;
  uint64_t v142 = 0;
  uint64_t v141 = 0;
  uint64_t v139 = 0;
  uint64_t v129 = 0;
  uint64_t v104 = (void *)*v2;
  uint64_t v102 = v104[10];
  uint64_t v145 = v102;
  uint64_t v103 = v104[11];
  uint64_t v144 = v103;
  uint64_t v105 = v104[12];
  uint64_t v107 = type metadata accessor for Interval();
  unint64_t v108 = (*(void *)(*(void *)(v107 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v3 = MEMORY[0x270FA5388](v116);
  uint64_t v109 = (uint64_t)v13 - v108;
  unint64_t v110 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v111 = (uint64_t)v13 - v110;
  unint64_t v112 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v113 = (uint64_t)v13 - v112;
  unint64_t v114 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v115 = (uint64_t)v13 - v114;
  uint64_t v143 = v9;
  uint64_t v142 = v10;
  uint64_t v141 = v2;
  swift_retain();
  if (!v116)
  {
    v13[0] = v106 + *(void *)(*(void *)v106 + 144);
    v13[1] = &v140;
    swift_beginAccess();
    *(void *)v13[0] = 1;
    swift_endAccess();
    swift_retain();
    return v106;
  }
  uint64_t v98 = v116;
  uint64_t v91 = v116;
  uint64_t v139 = v116;
  uint64_t v89 = v106 + *(void *)(*(void *)v106 + 104);
  uint64_t v90 = &v138;
  uint64_t v92 = 32;
  uint64_t v93 = 0;
  swift_beginAccess();
  uint64_t v96 = type metadata accessor for Optional();
  outlined init with copy of Interval<A, B>(v89, v115, v102, v103, v96, v107);
  swift_endAccess();
  uint64_t v94 = v91 + *(void *)(*(void *)v91 + 104);
  uint64_t v95 = &v137;
  swift_beginAccess();
  outlined init with copy of Interval<A, B>(v94, v113, v102, v103, v96, v107);
  swift_endAccess();
  BOOL v97 = static Interval.< infix(_:_:)(v115, v113, v102, v103, v105);
  outlined destroy of Interval<A, B>(v113, v102, v103, v96, v107);
  outlined destroy of Interval<A, B>(v115, v102, v103, v96, v107);
  if (v97)
  {
    uint64_t v82 = (uint64_t *)(v91 + *(void *)(*(void *)v91 + 128));
    uint64_t v83 = &v118;
    uint64_t v85 = 0;
    swift_beginAccess();
    uint64_t v84 = *v82;
    swift_retain();
    swift_endAccess();
    uint64_t v88 = AugmentedIntervalTree.insertNode(_:_:)(v84, v106);
    swift_release();
    swift_retain();
    uint64_t v86 = (uint64_t *)(v91 + *(void *)(*(void *)v91 + 128));
    uint64_t v87 = &v117;
    swift_beginAccess();
    *uint64_t v86 = v88;
  }
  else
  {
    uint64_t v75 = (uint64_t *)(v91 + *(void *)(*(void *)v91 + 136));
    uint64_t v76 = &v136;
    uint64_t v78 = 0;
    swift_beginAccess();
    uint64_t v77 = *v75;
    swift_retain();
    swift_endAccess();
    uint64_t v81 = AugmentedIntervalTree.insertNode(_:_:)(v77, v106);
    swift_release();
    swift_retain();
    uint64_t v79 = (uint64_t *)(v91 + *(void *)(*(void *)v91 + 136));
    uint64_t v80 = &v135;
    swift_beginAccess();
    *uint64_t v79 = v81;
  }
  swift_release();
  swift_endAccess();
  swift_release();
  uint64_t v63 = (uint64_t *)(v91 + *(void *)(*(void *)v91 + 128));
  uint64_t v64 = &v133;
  uint64_t v67 = 32;
  uint64_t v68 = 0;
  swift_beginAccess();
  uint64_t v65 = *v63;
  swift_retain();
  swift_endAccess();
  uint64_t v66 = AugmentedIntervalTree.height(_:)(v65);
  swift_release();
  int v73 = &v132;
  uint64_t v132 = v66;
  uint64_t v69 = (uint64_t *)(v91 + *(void *)(*(void *)v91 + 136));
  uint64_t v70 = &v131;
  swift_beginAccess();
  uint64_t v71 = *v69;
  swift_retain();
  swift_endAccess();
  uint64_t v72 = AugmentedIntervalTree.height(_:)(v71);
  swift_release();
  v130[3] = v72;
  uint64_t result = max<A>(_:_:)();
  uint64_t v74 = v134 + 1;
  if (!__OFADD__(v134, 1))
  {
    uint64_t v59 = (void *)(v91 + *(void *)(*(void *)v91 + 144));
    uint64_t v60 = v130;
    swift_beginAccess();
    *uint64_t v59 = v74;
    swift_endAccess();
    AVLTreeNode.updateMaxEnd()();
    AVLTreeNode.updateMinStart()();
    swift_retain();
    uint64_t v61 = v91;
    uint64_t v62 = AugmentedIntervalTree.balance(_:)(v91);
    swift_release();
    uint64_t v129 = v62;
    if (v62 <= 1)
    {
      if (v62 >= -1)
      {
        return v91;
      }
      else
      {
        uint64_t v29 = v106 + *(void *)(*(void *)v106 + 104);
        uint64_t v30 = &v128;
        uint64_t v31 = 32;
        uint64_t v32 = 0;
        swift_beginAccess();
        outlined init with copy of Interval<A, B>(v29, v109, v102, v103, v96, v107);
        swift_endAccess();
        int v33 = (uint64_t *)(v91 + *(void *)(*(void *)v91 + 136));
        uint64_t v34 = &v127;
        swift_beginAccess();
        uint64_t v35 = *v33;
        swift_retain();
        swift_endAccess();
        if (v35)
        {
          uint64_t v28 = v35;
        }
        else
        {
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
        }
        uint64_t v26 = v28;
        uint64_t v24 = v28 + *(void *)(*(void *)v28 + 104);
        uint64_t v25 = &v126;
        swift_beginAccess();
        outlined init with copy of Interval<A, B>(v24, v115, v102, v103, v96, v107);
        swift_endAccess();
        swift_release();
        BOOL v27 = static Interval.< infix(_:_:)(v109, v115, v102, v103, v105);
        outlined destroy of Interval<A, B>(v115, v102, v103, v96, v107);
        outlined destroy of Interval<A, B>(v109, v102, v103, v96, v107);
        if (v27)
        {
          uint64_t v21 = (uint64_t *)(v91 + *(void *)(*(void *)v91 + 136));
          Swift::String v22 = &v125;
          swift_beginAccess();
          uint64_t v23 = *v21;
          swift_retain();
          swift_endAccess();
          if (v23)
          {
            uint64_t v20 = v23;
          }
          else
          {
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
          }
          uint64_t v15 = v20;
          uint64_t v18 = AugmentedIntervalTree.rotateRight(_:)(v20);
          swift_release();
          swift_retain();
          Swift::String v16 = (uint64_t *)(v91 + *(void *)(*(void *)v91 + 136));
          uint64_t v17 = &v124;
          swift_beginAccess();
          uint64_t *v16 = v18;
          swift_release();
          swift_endAccess();
          swift_release();
          uint64_t v19 = AugmentedIntervalTree.rotateLeft(_:)(v91);
          swift_release();
          return v19;
        }
        else
        {
          uint64_t v14 = AugmentedIntervalTree.rotateLeft(_:)(v91);
          swift_release();
          return v14;
        }
      }
    }
    else
    {
      uint64_t v52 = v106 + *(void *)(*(void *)v106 + 104);
      uint64_t v53 = &v123;
      uint64_t v54 = 32;
      uint64_t v55 = 0;
      swift_beginAccess();
      outlined init with copy of Interval<A, B>(v52, v111, v102, v103, v96, v107);
      swift_endAccess();
      uint64_t v56 = (uint64_t *)(v91 + *(void *)(*(void *)v91 + 128));
      uint64_t v57 = &v122;
      swift_beginAccess();
      uint64_t v58 = *v56;
      swift_retain();
      swift_endAccess();
      if (v58)
      {
        uint64_t v51 = v58;
      }
      else
      {
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      uint64_t v49 = v51;
      uint64_t v47 = v51 + *(void *)(*(void *)v51 + 104);
      uint64_t v48 = &v121;
      swift_beginAccess();
      outlined init with copy of Interval<A, B>(v47, v115, v102, v103, v96, v107);
      swift_endAccess();
      swift_release();
      BOOL v50 = static Interval.< infix(_:_:)(v111, v115, v102, v103, v105);
      outlined destroy of Interval<A, B>(v115, v102, v103, v96, v107);
      outlined destroy of Interval<A, B>(v111, v102, v103, v96, v107);
      if (v50)
      {
        uint64_t v45 = AugmentedIntervalTree.rotateRight(_:)(v91);
        swift_release();
        return v45;
      }
      else
      {
        Builtin::Word v42 = (uint64_t *)(v91 + *(void *)(*(void *)v91 + 128));
        uint64_t v43 = &v120;
        swift_beginAccess();
        uint64_t v44 = *v42;
        swift_retain();
        swift_endAccess();
        if (v44)
        {
          uint64_t v41 = v44;
        }
        else
        {
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
        }
        uint64_t v36 = v41;
        uint64_t v39 = AugmentedIntervalTree.rotateLeft(_:)(v41);
        swift_release();
        swift_retain();
        int v37 = (uint64_t *)(v91 + *(void *)(*(void *)v91 + 128));
        uint64_t v38 = &v119;
        swift_beginAccess();
        uint64_t *v37 = v39;
        swift_release();
        swift_endAccess();
        swift_release();
        uint64_t v40 = AugmentedIntervalTree.rotateRight(_:)(v91);
        swift_release();
        return v40;
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t AugmentedIntervalTree.rotateLeft(_:)(uint64_t a1)
{
  uint64_t v20 = (uint64_t *)(a1 + *(void *)(*(void *)a1 + 136));
  swift_beginAccess();
  uint64_t v21 = *v20;
  swift_retain();
  swift_endAccess();
  if (v21)
  {
    uint64_t v18 = v21;
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  uint64_t v10 = (uint64_t *)(v18 + *(void *)(*(void *)v18 + 128));
  swift_beginAccess();
  uint64_t v13 = *v10;
  swift_retain();
  swift_endAccess();
  swift_retain();
  swift_retain();
  uint64_t v11 = (void *)(v18 + *(void *)(*(void *)v18 + 128));
  swift_beginAccess();
  *uint64_t v11 = a1;
  swift_release();
  swift_endAccess();
  swift_release();
  swift_retain();
  swift_retain();
  Swift::String v12 = (void *)(a1 + *(void *)(*(void *)a1 + 136));
  swift_beginAccess();
  *Swift::String v12 = v13;
  swift_release();
  swift_endAccess();
  swift_release();
  uint64_t v14 = (uint64_t *)(a1 + *(void *)(*(void *)a1 + 128));
  swift_beginAccess();
  uint64_t v15 = *v14;
  swift_retain();
  swift_endAccess();
  AugmentedIntervalTree.height(_:)(v15);
  swift_release();
  Swift::String v16 = (uint64_t *)(a1 + *(void *)(*(void *)a1 + 136));
  swift_beginAccess();
  uint64_t v17 = *v16;
  swift_retain();
  swift_endAccess();
  AugmentedIntervalTree.height(_:)(v17);
  swift_release();
  uint64_t result = max<A>(_:_:)();
  if (__OFADD__(v23, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = (void *)(a1 + *(void *)(*(void *)a1 + 144));
    swift_beginAccess();
    *uint64_t v5 = v23 + 1;
    swift_endAccess();
    uint64_t v6 = (uint64_t *)(v18 + *(void *)(*(void *)v18 + 128));
    swift_beginAccess();
    uint64_t v7 = *v6;
    swift_retain();
    swift_endAccess();
    AugmentedIntervalTree.height(_:)(v7);
    swift_release();
    uint64_t v8 = (uint64_t *)(v18 + *(void *)(*(void *)v18 + 136));
    swift_beginAccess();
    uint64_t v9 = *v8;
    swift_retain();
    swift_endAccess();
    AugmentedIntervalTree.height(_:)(v9);
    swift_release();
    uint64_t result = max<A>(_:_:)();
    if (!__OFADD__(v22, 1))
    {
      uint64_t v4 = (void *)(v18 + *(void *)(*(void *)v18 + 144));
      swift_beginAccess();
      *uint64_t v4 = v22 + 1;
      swift_endAccess();
      AVLTreeNode.updateMaxEnd()();
      AVLTreeNode.updateMaxEnd()();
      AVLTreeNode.updateMinStart()();
      swift_release();
      return v18;
    }
  }
  __break(1u);
  return result;
}

uint64_t AugmentedIntervalTree.rotateRight(_:)(uint64_t a1)
{
  uint64_t v20 = (uint64_t *)(a1 + *(void *)(*(void *)a1 + 128));
  swift_beginAccess();
  uint64_t v21 = *v20;
  swift_retain();
  swift_endAccess();
  if (v21)
  {
    uint64_t v18 = v21;
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  uint64_t v10 = (uint64_t *)(v18 + *(void *)(*(void *)v18 + 136));
  swift_beginAccess();
  uint64_t v13 = *v10;
  swift_retain();
  swift_endAccess();
  swift_retain();
  swift_retain();
  uint64_t v11 = (void *)(v18 + *(void *)(*(void *)v18 + 136));
  swift_beginAccess();
  *uint64_t v11 = a1;
  swift_release();
  swift_endAccess();
  swift_release();
  swift_retain();
  swift_retain();
  Swift::String v12 = (void *)(a1 + *(void *)(*(void *)a1 + 128));
  swift_beginAccess();
  *Swift::String v12 = v13;
  swift_release();
  swift_endAccess();
  swift_release();
  uint64_t v14 = (uint64_t *)(a1 + *(void *)(*(void *)a1 + 128));
  swift_beginAccess();
  uint64_t v15 = *v14;
  swift_retain();
  swift_endAccess();
  AugmentedIntervalTree.height(_:)(v15);
  swift_release();
  Swift::String v16 = (uint64_t *)(a1 + *(void *)(*(void *)a1 + 136));
  swift_beginAccess();
  uint64_t v17 = *v16;
  swift_retain();
  swift_endAccess();
  AugmentedIntervalTree.height(_:)(v17);
  swift_release();
  uint64_t result = max<A>(_:_:)();
  if (__OFADD__(v23, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = (void *)(a1 + *(void *)(*(void *)a1 + 144));
    swift_beginAccess();
    *uint64_t v5 = v23 + 1;
    swift_endAccess();
    uint64_t v6 = (uint64_t *)(v18 + *(void *)(*(void *)v18 + 128));
    swift_beginAccess();
    uint64_t v7 = *v6;
    swift_retain();
    swift_endAccess();
    AugmentedIntervalTree.height(_:)(v7);
    swift_release();
    uint64_t v8 = (uint64_t *)(v18 + *(void *)(*(void *)v18 + 136));
    swift_beginAccess();
    uint64_t v9 = *v8;
    swift_retain();
    swift_endAccess();
    AugmentedIntervalTree.height(_:)(v9);
    swift_release();
    uint64_t result = max<A>(_:_:)();
    if (!__OFADD__(v22, 1))
    {
      uint64_t v4 = (void *)(v18 + *(void *)(*(void *)v18 + 144));
      swift_beginAccess();
      *uint64_t v4 = v22 + 1;
      swift_endAccess();
      AVLTreeNode.updateMaxEnd()();
      AVLTreeNode.updateMaxEnd()();
      AVLTreeNode.updateMinStart()();
      swift_release();
      return v18;
    }
  }
  __break(1u);
  return result;
}

uint64_t AugmentedIntervalTree.balance(_:)(uint64_t a1)
{
  swift_retain();
  if (a1)
  {
    uint64_t v8 = (uint64_t *)(a1 + *(void *)(*(void *)a1 + 128));
    swift_beginAccess();
    uint64_t v9 = *v8;
    swift_retain();
    swift_endAccess();
    swift_release();
    uint64_t v10 = v9;
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v7 = AugmentedIntervalTree.height(_:)(v10);
  swift_release();
  swift_retain();
  if (a1)
  {
    uint64_t v4 = (uint64_t *)(a1 + *(void *)(*(void *)a1 + 136));
    swift_beginAccess();
    uint64_t v5 = *v4;
    swift_retain();
    swift_endAccess();
    swift_release();
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v3 = AugmentedIntervalTree.height(_:)(v6);
  swift_release();
  uint64_t result = v3;
  if (!__OFSUB__(v7, v3)) {
    return v7 - v3;
  }
  __break(1u);
  return result;
}

uint64_t AugmentedIntervalTree.height(_:)(uint64_t a1)
{
  swift_retain();
  if (a1)
  {
    uint64_t v2 = (uint64_t *)(a1 + *(void *)(*(void *)a1 + 144));
    swift_beginAccess();
    uint64_t v3 = *v2;
    swift_endAccess();
    swift_release();
    uint64_t v4 = v3;
    char v5 = 0;
  }
  else
  {
    uint64_t v4 = 0;
    char v5 = 1;
  }
  if (v5) {
    return 0;
  }
  else {
    return v4;
  }
}

uint64_t AugmentedIntervalTree.deleteInterval(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v153 = a1;
  uint64_t v147 = a2;
  uint64_t v132 = "Fatal error";
  char v133 = "Unexpectedly found nil while unwrapping an Optional value";
  uint64_t v134 = "NightingaleTraining/AugmentedTree.swift";
  uint64_t v195 = 0;
  uint64_t v194 = 0;
  uint64_t v193 = 0;
  uint64_t v192 = 0;
  uint64_t v184 = 0;
  uint64_t v171 = 0;
  uint64_t v158 = 0;
  uint64_t v144 = (void *)*v2;
  uint64_t v135 = v144[10];
  uint64_t v197 = v135;
  uint64_t v136 = *(void *)(v135 - 8);
  uint64_t v137 = v135 - 8;
  uint64_t v139 = *(void *)(v136 + 64);
  unint64_t v138 = (v139 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](a1);
  char v140 = (char *)&v9 - v138;
  unint64_t v141 = v138;
  MEMORY[0x270FA5388]((char *)&v9 - v138);
  uint64_t v142 = (char *)&v9 - v141;
  uint64_t v143 = v144[11];
  uint64_t v196 = v143;
  uint64_t v145 = v144[12];
  uint64_t v146 = 0;
  uint64_t v148 = type metadata accessor for Interval();
  unint64_t v149 = (*(void *)(*(void *)(v148 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v3 = MEMORY[0x270FA5388](v153);
  uint64_t v150 = (uint64_t)&v9 - v149;
  unint64_t v151 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v152 = (uint64_t)&v9 - v151;
  uint64_t v195 = v5;
  uint64_t v194 = v6;
  uint64_t v193 = v2;
  swift_retain();
  if (!v153) {
    return v146;
  }
  uint64_t v131 = v153;
  uint64_t v126 = v153;
  uint64_t v192 = v153;
  uint64_t v127 = v131 + *(void *)(*(void *)v131 + 104);
  uint64_t v128 = &v191;
  swift_beginAccess();
  uint64_t v129 = type metadata accessor for Optional();
  outlined init with copy of Interval<A, B>(v127, v152, v135, v143, v129, v148);
  swift_endAccess();
  BOOL v130 = static Interval.< infix(_:_:)(v147, v152, v135, v143, v145);
  outlined destroy of Interval<A, B>(v152, v135, v143, v129, v148);
  if (v130)
  {
    uint64_t v119 = (uint64_t *)(v126 + *(void *)(*(void *)v126 + 128));
    uint64_t v120 = &v155;
    uint64_t v122 = 0;
    swift_beginAccess();
    uint64_t v121 = *v119;
    swift_retain();
    swift_endAccess();
    uint64_t v125 = AugmentedIntervalTree.deleteInterval(_:_:)(v121, v147);
    swift_release();
    swift_retain();
    uint64_t v123 = (uint64_t *)(v126 + *(void *)(*(void *)v126 + 128));
    uint64_t v124 = &v154;
    swift_beginAccess();
    *uint64_t v123 = v125;
    swift_release();
    swift_endAccess();
    swift_release();
  }
  else
  {
    uint64_t v116 = v126 + *(void *)(*(void *)v126 + 104);
    uint64_t v117 = &v190;
    swift_beginAccess();
    outlined init with copy of Interval<A, B>(v116, v152, v135, v143, v129, v148);
    swift_endAccess();
    BOOL v118 = static Interval.> infix(_:_:)(v147, v152, v135, v143, v145);
    outlined destroy of Interval<A, B>(v152, v135, v143, v129, v148);
    if (v118)
    {
      uint64_t v109 = (uint64_t *)(v126 + *(void *)(*(void *)v126 + 136));
      unint64_t v110 = v157;
      uint64_t v112 = 0;
      swift_beginAccess();
      uint64_t v111 = *v109;
      swift_retain();
      swift_endAccess();
      uint64_t v115 = AugmentedIntervalTree.deleteInterval(_:_:)(v111, v147);
      swift_release();
      swift_retain();
      uint64_t v113 = (uint64_t *)(v126 + *(void *)(*(void *)v126 + 136));
      unint64_t v114 = &v156;
      swift_beginAccess();
      *uint64_t v113 = v115;
      swift_release();
      swift_endAccess();
      swift_release();
    }
    else
    {
      uint64_t v106 = (uint64_t *)(v126 + *(void *)(*(void *)v126 + 128));
      uint64_t v107 = &v189;
      swift_beginAccess();
      uint64_t v108 = *v106;
      swift_retain();
      swift_endAccess();
      uint64_t v188 = v108;
      BOOL v105 = v108 == 0;
      BOOL v104 = v105;
      outlined destroy of ContiguousArray<A1>();
      swift_retain();
      if (v104)
      {
        int v103 = 1;
      }
      else
      {
        uint64_t v100 = (uint64_t *)(v126 + *(void *)(*(void *)v126 + 136));
        char v101 = &v187;
        swift_beginAccess();
        uint64_t v102 = *v100;
        swift_retain();
        swift_endAccess();
        uint64_t v186 = v102;
        BOOL v99 = v102 == 0;
        BOOL v98 = v99;
        outlined destroy of ContiguousArray<A1>();
        int v103 = v98;
      }
      int v97 = v103;
      swift_release();
      if (v97)
      {
        uint64_t v94 = (uint64_t *)(v126 + *(void *)(*(void *)v126 + 128));
        uint64_t v95 = &v161;
        swift_beginAccess();
        uint64_t v96 = *v94;
        swift_retain();
        swift_endAccess();
        uint64_t v160 = v96;
        swift_retain();
        if (v160)
        {
          uint64_t v162 = v160;
        }
        else
        {
          uint64_t v91 = (uint64_t *)(v126 + *(void *)(*(void *)v126 + 136));
          uint64_t v92 = &v159;
          swift_beginAccess();
          uint64_t v93 = *v91;
          swift_retain();
          swift_endAccess();
          uint64_t v162 = v93;
          outlined destroy of ContiguousArray<A1>();
        }
        swift_release();
        uint64_t v90 = v162;
        uint64_t v158 = v162;
        v157[3] = v162;
        BOOL v89 = v162 == 0;
        if (v162)
        {
          swift_release();
          return v90;
        }
        else
        {
          swift_release();
          swift_release();
          return v146;
        }
      }
      uint64_t v85 = (uint64_t *)(v126 + *(void *)(*(void *)v126 + 136));
      uint64_t v86 = &v185;
      swift_beginAccess();
      uint64_t v87 = *v85;
      swift_retain();
      swift_endAccess();
      if (v87)
      {
        uint64_t v84 = v87;
      }
      else
      {
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      uint64_t v61 = v84;
      uint64_t v83 = AugmentedIntervalTree.minValueNode(_:)(v84);
      swift_release();
      uint64_t v184 = v83;
      uint64_t v62 = v184 + *(void *)(*(void *)v184 + 104);
      uint64_t v63 = &v183;
      uint64_t v74 = 32;
      uint64_t v79 = 0;
      swift_beginAccess();
      outlined init with copy of Interval<A, B>(v62, v152, v135, v143, v129, v148);
      swift_endAccess();
      outlined init with copy of Interval<A, B>(v152, v150, v135, v143, v129, v148);
      uint64_t v64 = v126 + *(void *)(*(void *)v126 + 104);
      uint64_t v65 = &v182;
      uint64_t v78 = 33;
      swift_beginAccess();
      outlined assign with take of Interval<A, B>(v150, v64, v135, v143, v129, v148);
      swift_endAccess();
      outlined destroy of Interval<A, B>(v152, v135, v143, v129, v148);
      uint64_t v66 = v83 + *(void *)(*(void *)v83 + 112);
      uint64_t v67 = &v181;
      swift_beginAccess();
      uint64_t v69 = *(void (**)(char *, uint64_t, uint64_t))(v136 + 16);
      uint64_t v68 = v136 + 16;
      v69(v142, v66, v135);
      swift_endAccess();
      v69(v140, (uint64_t)v142, v135);
      uint64_t v70 = v126 + *(void *)(*(void *)v126 + 112);
      uint64_t v71 = &v180;
      swift_beginAccess();
      (*(void (**)(uint64_t, char *, uint64_t))(v136 + 40))(v70, v140, v135);
      swift_endAccess();
      (*(void (**)(char *, uint64_t))(v136 + 8))(v142, v135);
      uint64_t v72 = (uint64_t *)(v126 + *(void *)(*(void *)v126 + 136));
      int v73 = &v179;
      swift_beginAccess();
      uint64_t v77 = *v72;
      swift_retain();
      swift_endAccess();
      uint64_t v75 = v83 + *(void *)(*(void *)v83 + 104);
      uint64_t v76 = &v178;
      swift_beginAccess();
      outlined init with copy of Interval<A, B>(v75, v152, v135, v143, v129, v148);
      swift_endAccess();
      uint64_t v82 = AugmentedIntervalTree.deleteInterval(_:_:)(v77, v152);
      outlined destroy of Interval<A, B>(v152, v135, v143, v129, v148);
      swift_release();
      swift_retain();
      uint64_t v80 = (uint64_t *)(v126 + *(void *)(*(void *)v126 + 136));
      uint64_t v81 = &v177;
      swift_beginAccess();
      *uint64_t v80 = v82;
      swift_release();
      swift_endAccess();
      swift_release();
      swift_release();
    }
  }
  uint64_t v49 = (uint64_t *)(v126 + *(void *)(*(void *)v126 + 128));
  BOOL v50 = &v175;
  uint64_t v53 = 32;
  uint64_t v54 = 0;
  swift_beginAccess();
  uint64_t v51 = *v49;
  swift_retain();
  swift_endAccess();
  uint64_t v52 = AugmentedIntervalTree.height(_:)(v51);
  swift_release();
  uint64_t v59 = &v174;
  uint64_t v174 = v52;
  uint64_t v55 = (uint64_t *)(v126 + *(void *)(*(void *)v126 + 136));
  uint64_t v56 = &v173;
  swift_beginAccess();
  uint64_t v57 = *v55;
  swift_retain();
  swift_endAccess();
  uint64_t v58 = AugmentedIntervalTree.height(_:)(v57);
  swift_release();
  v172[3] = v58;
  uint64_t result = max<A>(_:_:)();
  uint64_t v60 = v176 + 1;
  if (!__OFADD__(v176, 1))
  {
    uint64_t v45 = (void *)(v126 + *(void *)(*(void *)v126 + 144));
    uint64_t v46 = v172;
    swift_beginAccess();
    *uint64_t v45 = v60;
    swift_endAccess();
    AVLTreeNode.updateMaxEnd()();
    AVLTreeNode.updateMinStart()();
    swift_retain();
    uint64_t v47 = v126;
    uint64_t v48 = AugmentedIntervalTree.balance(_:)(v126);
    swift_release();
    uint64_t v171 = v48;
    if (v48 <= 1) {
      goto LABEL_48;
    }
    uint64_t v41 = (uint64_t *)(v126 + *(void *)(*(void *)v126 + 128));
    Builtin::Word v42 = &v163;
    swift_beginAccess();
    uint64_t v43 = *v41;
    swift_retain();
    swift_endAccess();
    uint64_t v44 = AugmentedIntervalTree.balance(_:)(v43);
    swift_release();
    if (v44 < 0)
    {
LABEL_48:
      if (v48 <= 1) {
        goto LABEL_49;
      }
      uint64_t v36 = (uint64_t *)(v126 + *(void *)(*(void *)v126 + 128));
      int v37 = &v166;
      swift_beginAccess();
      uint64_t v38 = *v36;
      swift_retain();
      swift_endAccess();
      uint64_t v39 = AugmentedIntervalTree.balance(_:)(v38);
      swift_release();
      if (v39 >= 0)
      {
LABEL_49:
        if (v48 >= -1) {
          goto LABEL_50;
        }
        uint64_t v23 = (uint64_t *)(v126 + *(void *)(*(void *)v126 + 136));
        uint64_t v24 = &v167;
        swift_beginAccess();
        uint64_t v25 = *v23;
        swift_retain();
        swift_endAccess();
        uint64_t v26 = AugmentedIntervalTree.balance(_:)(v25);
        swift_release();
        if (v26 > 0)
        {
LABEL_50:
          if (v48 >= -1) {
            return v126;
          }
          uint64_t v18 = (uint64_t *)(v126 + *(void *)(*(void *)v126 + 136));
          uint64_t v19 = &v170;
          swift_beginAccess();
          uint64_t v20 = *v18;
          swift_retain();
          swift_endAccess();
          uint64_t v21 = AugmentedIntervalTree.balance(_:)(v20);
          swift_release();
          if (v21 <= 0)
          {
            return v126;
          }
          else
          {
            uint64_t v15 = (uint64_t *)(v126 + *(void *)(*(void *)v126 + 136));
            Swift::String v16 = &v169;
            swift_beginAccess();
            uint64_t v17 = *v15;
            swift_retain();
            swift_endAccess();
            if (v17)
            {
              uint64_t v14 = v17;
            }
            else
            {
              _assertionFailure(_:_:file:line:flags:)();
              __break(1u);
            }
            uint64_t v9 = v14;
            uint64_t v12 = AugmentedIntervalTree.rotateRight(_:)(v14);
            swift_release();
            swift_retain();
            uint64_t v10 = (uint64_t *)(v126 + *(void *)(*(void *)v126 + 136));
            uint64_t v11 = &v168;
            swift_beginAccess();
            *uint64_t v10 = v12;
            swift_release();
            swift_endAccess();
            swift_release();
            uint64_t v13 = AugmentedIntervalTree.rotateLeft(_:)(v126);
            swift_release();
            return v13;
          }
        }
        else
        {
          uint64_t v22 = AugmentedIntervalTree.rotateLeft(_:)(v126);
          swift_release();
          return v22;
        }
      }
      else
      {
        int v33 = (uint64_t *)(v126 + *(void *)(*(void *)v126 + 128));
        uint64_t v34 = &v165;
        swift_beginAccess();
        uint64_t v35 = *v33;
        swift_retain();
        swift_endAccess();
        if (v35)
        {
          uint64_t v32 = v35;
        }
        else
        {
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
        }
        uint64_t v27 = v32;
        uint64_t v30 = AugmentedIntervalTree.rotateLeft(_:)(v32);
        swift_release();
        swift_retain();
        uint64_t v28 = (uint64_t *)(v126 + *(void *)(*(void *)v126 + 128));
        uint64_t v29 = &v164;
        swift_beginAccess();
        uint64_t *v28 = v30;
        swift_release();
        swift_endAccess();
        swift_release();
        uint64_t v31 = AugmentedIntervalTree.rotateRight(_:)(v126);
        swift_release();
        return v31;
      }
    }
    else
    {
      uint64_t v40 = AugmentedIntervalTree.rotateRight(_:)(v126);
      swift_release();
      return v40;
    }
  }
  __break(1u);
  return result;
}

uint64_t AugmentedIntervalTree.minValueNode(_:)(uint64_t a1)
{
  swift_retain();
  uint64_t v10 = a1;
  while (1)
  {
    if (v10)
    {
      swift_retain();
      uint64_t v6 = (uint64_t *)(v10 + *(void *)(*(void *)v10 + 128));
      swift_beginAccess();
      uint64_t v7 = *v6;
      swift_retain();
      swift_endAccess();
      swift_release();
      uint64_t v8 = v7;
    }
    else
    {
      uint64_t v8 = 0;
    }
    outlined destroy of ContiguousArray<A1>();
    if (!v8) {
      break;
    }
    if (v10)
    {
      swift_retain();
      uint64_t v3 = (uint64_t *)(v10 + *(void *)(*(void *)v10 + 128));
      swift_beginAccess();
      uint64_t v4 = *v3;
      swift_retain();
      swift_endAccess();
      swift_release();
      uint64_t v5 = v4;
    }
    else
    {
      uint64_t v5 = 0;
    }
    uint64_t v10 = v5;
    swift_release();
  }
  swift_retain();
  if (v10)
  {
    uint64_t v2 = v10;
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  outlined destroy of ContiguousArray<A1>();
  return v2;
}

uint64_t AugmentedIntervalTree.allIntervals()()
{
  swift_beginAccess();
  uint64_t v2 = *(void *)(v0 + 16);
  swift_retain();
  swift_endAccess();
  uint64_t v3 = AugmentedIntervalTree.allIntervals(root:)(v2);
  swift_release();
  return v3;
}

uint64_t AugmentedIntervalTree.allIntervals(root:)(uint64_t a1)
{
  uint64_t v34 = a1;
  uint64_t v29 = 0;
  uint64_t v25 = MEMORY[0x263F8D4B8];
  uint64_t v43 = 0;
  Builtin::Word v42 = 0;
  uint64_t v41 = 0;
  uint64_t v40 = 0;
  uint64_t v28 = *v1;
  uint64_t v26 = *(void *)(v28 + 80);
  uint64_t v45 = v26;
  uint64_t v27 = *(void *)(v28 + 88);
  uint64_t v44 = v27;
  uint64_t v30 = type metadata accessor for Interval();
  unint64_t v31 = (*(void *)(*(void *)(v30 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v32 = (uint64_t)v5 - v31;
  uint64_t v43 = v2;
  Builtin::Word v42 = v1;
  uint64_t v33 = _allocateUninitializedArray<A>(_:)();
  swift_bridgeObjectRetain();
  uint64_t v41 = v33;
  swift_retain();
  if (v34)
  {
    uint64_t v24 = v34;
    uint64_t v20 = v34;
    swift_bridgeObjectRelease();
    uint64_t v40 = v20;
    v5[0] = v20 + *(void *)(*(void *)v20 + 128);
    v5[1] = &v39;
    uint64_t v12 = 32;
    uint64_t v13 = 0;
    swift_beginAccess();
    uint64_t v6 = *(void *)v5[0];
    swift_retain();
    swift_endAccess();
    uint64_t v7 = AugmentedIntervalTree.allIntervals(root:)(v6);
    swift_release();
    uint64_t v8 = &v38;
    uint64_t v38 = v7;
    uint64_t v9 = 0;
    uint64_t v18 = type metadata accessor for Array();
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v21 = &v41;
    Array.append<A>(contentsOf:)();
    uint64_t v10 = v20 + *(void *)(*(void *)v20 + 104);
    uint64_t v11 = &v37;
    swift_beginAccess();
    uint64_t v3 = type metadata accessor for Optional();
    outlined init with copy of Interval<A, B>(v10, v32, v26, v27, v3, v30);
    swift_endAccess();
    Array.append(_:)();
    uint64_t v14 = (uint64_t *)(v20 + *(void *)(*(void *)v20 + 136));
    uint64_t v15 = &v36;
    swift_beginAccess();
    uint64_t v16 = *v14;
    swift_retain();
    swift_endAccess();
    uint64_t v17 = AugmentedIntervalTree.allIntervals(root:)(v16);
    swift_release();
    uint64_t v35 = v17;
    Array.append<A>(contentsOf:)();
    uint64_t v22 = v41;
    swift_bridgeObjectRetain();
    swift_release();
    outlined destroy of [A]();
    return v22;
  }
  else
  {
    outlined destroy of [A]();
    return v33;
  }
}

uint64_t AugmentedIntervalTree.deinit()
{
  outlined destroy of ContiguousArray<A1>();
  return v1;
}

uint64_t AugmentedIntervalTree.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AugmentedIntervalTree<A, B>()
{
  return AugmentedIntervalTree.description.getter();
}

uint64_t type metadata instantiation function for Interval()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for Interval()
{
  uint64_t v3 = swift_checkMetadataState();
  if (v0 <= 0x3F)
  {
    uint64_t v3 = type metadata accessor for Optional();
    if (v1 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return v3;
}

unint64_t initializeBufferWithCopyOfBuffer for Interval(char *a1, uint64_t *a2, uint64_t a3)
{
  int v16 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v16 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    swift_retain();
    *(void *)a1 = v11;
    return *(void *)a1 + ((v16 + 16) & ~(unint64_t)v16);
  }
  else
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void (**)(char *, char *, uint64_t))(*(void *)(v5 - 8) + 16);
    ((void (*)(char *, uint64_t *))v6)(a1, a2);
    v6(&a1[*(int *)(a3 + 44)], (char *)a2 + *(int *)(a3 + 44), v5);
    uint64_t __dst = &a1[*(int *)(a3 + 48)];
    __src = (char *)a2 + *(int *)(a3 + 48);
    uint64_t v9 = *(void *)(a3 + 24);
    uint64_t v10 = *(void *)(v9 - 8);
    if ((*(unsigned int (**)(void))(v10 + 48))())
    {
      uint64_t v3 = type metadata accessor for Optional();
      memcpy(__dst, __src, *(void *)(*(void *)(v3 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(__dst, __src, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(__dst, 0, 1, v9);
    }
    return (unint64_t)a1;
  }
}

uint64_t destroy for Interval(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v3 = *(void (**)(void))(*(void *)(v9 - 8) + 8);
  v3();
  ((void (*)(uint64_t, uint64_t))v3)(a1 + *(int *)(a2 + 44), v9);
  uint64_t v6 = *(int *)(a2 + 48);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 48))(a1 + v6, 1);
  if (!result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(a1 + v6, v7);
  }
  return result;
}

uint64_t initializeWithCopy for Interval(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v12 = *(void *)(a3 + 16);
  uint64_t v5 = *(void (**)(void))(*(void *)(v12 - 8) + 16);
  v5();
  ((void (*)(uint64_t, uint64_t, uint64_t))v5)(a1 + *(int *)(a3 + 44), a2 + *(int *)(a3 + 44), v12);
  uint64_t v9 = *(int *)(a3 + 48);
  uint64_t v10 = *(void *)(a3 + 24);
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v11 + 48))(a2 + v9, 1))
  {
    uint64_t v3 = type metadata accessor for Optional();
    memcpy((void *)(a1 + v9), (const void *)(a2 + v9), *(void *)(*(void *)(v3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void))(v11 + 16))();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(a1 + v9, 0, 1, v10);
  }
  return a1;
}

uint64_t assignWithCopy for Interval(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v14 = *(void *)(a3 + 16);
  uint64_t v7 = *(void (**)(void))(*(void *)(v14 - 8) + 24);
  v7();
  ((void (*)(uint64_t, uint64_t, uint64_t))v7)(a1 + *(int *)(a3 + 44), a2 + *(int *)(a3 + 44), v14);
  uint64_t v10 = *(int *)(a3 + 48);
  uint64_t v11 = *(void *)(a3 + 24);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  if (((unsigned int (*)(uint64_t, uint64_t))v13)(a1 + v10, 1))
  {
    if (v13(a2 + v10, 1, v11))
    {
      uint64_t v4 = type metadata accessor for Optional();
      memcpy((void *)(a1 + v10), (const void *)(a2 + v10), *(void *)(*(void *)(v4 - 8) + 64));
    }
    else
    {
      (*(void (**)(void))(v12 + 16))();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(a1 + v10, 0, 1, v11);
    }
  }
  else if (v13(a2 + v10, 1, v11))
  {
    (*(void (**)(void))(v12 + 8))();
    uint64_t v3 = type metadata accessor for Optional();
    memcpy((void *)(a1 + v10), (const void *)(a2 + v10), *(void *)(*(void *)(v3 - 8) + 64));
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 24))(a1 + v10, a2 + v10, v11);
  }
  return a1;
}

uint64_t initializeWithTake for Interval(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v12 = *(void *)(a3 + 16);
  uint64_t v5 = *(void (**)(void))(*(void *)(v12 - 8) + 32);
  v5();
  ((void (*)(uint64_t, uint64_t, uint64_t))v5)(a1 + *(int *)(a3 + 44), a2 + *(int *)(a3 + 44), v12);
  uint64_t v9 = *(int *)(a3 + 48);
  uint64_t v10 = *(void *)(a3 + 24);
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v11 + 48))(a2 + v9, 1))
  {
    uint64_t v3 = type metadata accessor for Optional();
    memcpy((void *)(a1 + v9), (const void *)(a2 + v9), *(void *)(*(void *)(v3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void))(v11 + 32))();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(a1 + v9, 0, 1, v10);
  }
  return a1;
}

uint64_t assignWithTake for Interval(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v14 = *(void *)(a3 + 16);
  uint64_t v7 = *(void (**)(void))(*(void *)(v14 - 8) + 40);
  v7();
  ((void (*)(uint64_t, uint64_t, uint64_t))v7)(a1 + *(int *)(a3 + 44), a2 + *(int *)(a3 + 44), v14);
  uint64_t v10 = *(int *)(a3 + 48);
  uint64_t v11 = *(void *)(a3 + 24);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  if (((unsigned int (*)(uint64_t, uint64_t))v13)(a1 + v10, 1))
  {
    if (v13(a2 + v10, 1, v11))
    {
      uint64_t v4 = type metadata accessor for Optional();
      memcpy((void *)(a1 + v10), (const void *)(a2 + v10), *(void *)(*(void *)(v4 - 8) + 64));
    }
    else
    {
      (*(void (**)(void))(v12 + 32))();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(a1 + v10, 0, 1, v11);
    }
  }
  else if (v13(a2 + v10, 1, v11))
  {
    (*(void (**)(void))(v12 + 8))();
    uint64_t v3 = type metadata accessor for Optional();
    memcpy((void *)(a1 + v10), (const void *)(a2 + v10), *(void *)(*(void *)(v3 - 8) + 64));
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 40))(a1 + v10, a2 + v10, v11);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for Interval()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_257D03F7C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v9 = *(void *)(a3 + 16);
  if (a2 == *(_DWORD *)(*(void *)(v9 - 8) + 84))
  {
    return (*(unsigned int (**)(uint64_t, void, uint64_t))(*(void *)(v9 - 8) + 48))(a1, a2, v9);
  }
  else
  {
    uint64_t v4 = type metadata accessor for Optional();
    if (a2 == *(_DWORD *)(*(void *)(v4 - 8) + 84)) {
      return (*(unsigned int (**)(uint64_t, void, uint64_t))(*(void *)(v4 - 8) + 48))(a1 + *(int *)(a3 + 48), a2, v4);
    }
    else {
      __break(1u);
    }
  }
  return v5;
}

uint64_t storeEnumTagSinglePayload for Interval()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_257D0410C(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v9 = *(void *)(a4 + 16);
  if (a3 == *(_DWORD *)(*(void *)(v9 - 8) + 84)) {
    return (*(uint64_t (**)(uint64_t, void, void, uint64_t))(*(void *)(v9 - 8) + 56))(a1, a2, a2, v9);
  }
  uint64_t result = type metadata accessor for Optional();
  if (a3 == *(_DWORD *)(*(void *)(result - 8) + 84)) {
    return (*(uint64_t (**)(uint64_t, void, void, uint64_t))(*(void *)(result - 8) + 56))(a1 + *(int *)(a4 + 48), a2, a2, result);
  }
  __break(1u);
  return result;
}

uint64_t type metadata instantiation function for AVLTreeNode()
{
  return swift_allocateGenericClassMetadata();
}

uint64_t type metadata completion function for AVLTreeNode()
{
  uint64_t inited = type metadata accessor for Interval();
  if (v0 <= 0x3F)
  {
    uint64_t inited = swift_checkMetadataState();
    if (v1 <= 0x3F)
    {
      uint64_t inited = swift_initClassMetadata2();
      if (!inited) {
        return 0;
      }
    }
  }
  return inited;
}

uint64_t type metadata completion function for AugmentedIntervalTree()
{
  uint64_t inited = swift_initClassMetadata2();
  if (!inited) {
    return 0;
  }
  return inited;
}

uint64_t type metadata accessor for AugmentedIntervalTree()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

uint64_t HIDPFLError.rawValue.getter(char a1)
{
  switch(a1)
  {
    case 1:
      uint64_t v2 = 9701;
      break;
    case 2:
      uint64_t v2 = 9702;
      break;
    case 3:
      uint64_t v2 = 9703;
      break;
    case 4:
      uint64_t v2 = 9704;
      break;
    case 5:
      uint64_t v2 = 9705;
      break;
    case 6:
      uint64_t v2 = 9706;
      break;
    case 7:
      uint64_t v2 = 9707;
      break;
    case 8:
      uint64_t v2 = 9708;
      break;
    case 9:
      uint64_t v2 = 9712;
      break;
    case 10:
      uint64_t v2 = 9713;
      break;
    case 11:
      uint64_t v2 = 9714;
      break;
    case 12:
      uint64_t v2 = 9715;
      break;
    case 13:
      uint64_t v2 = 9716;
      break;
    case 14:
      uint64_t v2 = 9717;
      break;
    case 15:
      uint64_t v2 = 9718;
      break;
    case 16:
      uint64_t v2 = 9719;
      break;
    case 17:
      uint64_t v2 = 9720;
      break;
    case 18:
      uint64_t v2 = 9721;
      break;
    case 19:
      uint64_t v2 = 9722;
      break;
    case 20:
      uint64_t v2 = 9723;
      break;
    case 21:
      uint64_t v2 = 9724;
      break;
    case 22:
      uint64_t v2 = 9725;
      break;
    case 23:
      uint64_t v2 = 9726;
      break;
    case 24:
      uint64_t v2 = 9727;
      break;
    case 25:
      uint64_t v2 = 9728;
      break;
    case 26:
      uint64_t v2 = 9729;
      break;
    case 27:
      uint64_t v2 = 9730;
      break;
    case 28:
      uint64_t v2 = 9731;
      break;
    case 29:
      uint64_t v2 = 9732;
      break;
    case 30:
      uint64_t v2 = 9733;
      break;
    case 31:
      uint64_t v2 = 9734;
      break;
    case 32:
      uint64_t v2 = 9735;
      break;
    case 33:
      uint64_t v2 = 9736;
      break;
    case 34:
      uint64_t v2 = 9799;
      break;
    case 35:
      uint64_t v2 = 9800;
      break;
    case 36:
      uint64_t v2 = 9801;
      break;
    case 37:
      uint64_t v2 = 9802;
      break;
    case 38:
      uint64_t v2 = 9803;
      break;
    case 39:
      uint64_t v2 = 9804;
      break;
    case 40:
      uint64_t v2 = 9805;
      break;
    case 41:
      uint64_t v2 = 9806;
      break;
    case 42:
      uint64_t v2 = 9807;
      break;
    case 43:
      uint64_t v2 = 9808;
      break;
    case 44:
      uint64_t v2 = 9809;
      break;
    case 45:
      uint64_t v2 = 9810;
      break;
    case 46:
      uint64_t v2 = 9811;
      break;
    case 47:
      uint64_t v2 = 9812;
      break;
    case 48:
      uint64_t v2 = 9813;
      break;
    default:
      uint64_t v2 = 9700;
      break;
  }
  return v2;
}

NightingaleTraining::HIDPFLError_optional __swiftcall HIDPFLError.init(rawValue:)(Swift::Int rawValue)
{
  switch(rawValue)
  {
    case 9700:
      return 0;
    case 9701:
      return (NightingaleTraining::HIDPFLError_optional)1;
    case 9702:
      return (NightingaleTraining::HIDPFLError_optional)2;
    case 9703:
      return (NightingaleTraining::HIDPFLError_optional)3;
    case 9704:
      return (NightingaleTraining::HIDPFLError_optional)4;
    case 9705:
      return (NightingaleTraining::HIDPFLError_optional)5;
    case 9706:
      return (NightingaleTraining::HIDPFLError_optional)6;
    case 9707:
      return (NightingaleTraining::HIDPFLError_optional)7;
    case 9708:
      return (NightingaleTraining::HIDPFLError_optional)8;
    case 9712:
      return (NightingaleTraining::HIDPFLError_optional)9;
    case 9713:
      return (NightingaleTraining::HIDPFLError_optional)10;
    case 9714:
      return (NightingaleTraining::HIDPFLError_optional)11;
    case 9715:
      return (NightingaleTraining::HIDPFLError_optional)12;
    case 9716:
      return (NightingaleTraining::HIDPFLError_optional)13;
    case 9717:
      return (NightingaleTraining::HIDPFLError_optional)14;
    case 9718:
      return (NightingaleTraining::HIDPFLError_optional)15;
    case 9719:
      return (NightingaleTraining::HIDPFLError_optional)16;
    case 9720:
      return (NightingaleTraining::HIDPFLError_optional)17;
    case 9721:
      return (NightingaleTraining::HIDPFLError_optional)18;
    case 9722:
      return (NightingaleTraining::HIDPFLError_optional)19;
    case 9723:
      return (NightingaleTraining::HIDPFLError_optional)20;
    case 9724:
      return (NightingaleTraining::HIDPFLError_optional)21;
    case 9725:
      return (NightingaleTraining::HIDPFLError_optional)22;
    case 9726:
      return (NightingaleTraining::HIDPFLError_optional)23;
    case 9727:
      return (NightingaleTraining::HIDPFLError_optional)24;
    case 9728:
      return (NightingaleTraining::HIDPFLError_optional)25;
    case 9729:
      return (NightingaleTraining::HIDPFLError_optional)26;
    case 9730:
      return (NightingaleTraining::HIDPFLError_optional)27;
    case 9731:
      return (NightingaleTraining::HIDPFLError_optional)28;
    case 9732:
      return (NightingaleTraining::HIDPFLError_optional)29;
    case 9733:
      return (NightingaleTraining::HIDPFLError_optional)30;
    case 9734:
      return (NightingaleTraining::HIDPFLError_optional)31;
    case 9735:
      return (NightingaleTraining::HIDPFLError_optional)32;
    case 9736:
      return (NightingaleTraining::HIDPFLError_optional)33;
    case 9799:
      return (NightingaleTraining::HIDPFLError_optional)34;
    case 9800:
      return (NightingaleTraining::HIDPFLError_optional)35;
    case 9801:
      return (NightingaleTraining::HIDPFLError_optional)36;
    case 9802:
      return (NightingaleTraining::HIDPFLError_optional)37;
    case 9803:
      return (NightingaleTraining::HIDPFLError_optional)38;
    case 9804:
      return (NightingaleTraining::HIDPFLError_optional)39;
    case 9805:
      return (NightingaleTraining::HIDPFLError_optional)40;
    case 9806:
      return (NightingaleTraining::HIDPFLError_optional)41;
    case 9807:
      return (NightingaleTraining::HIDPFLError_optional)42;
    case 9808:
      return (NightingaleTraining::HIDPFLError_optional)43;
    case 9809:
      return (NightingaleTraining::HIDPFLError_optional)44;
    case 9810:
      return (NightingaleTraining::HIDPFLError_optional)45;
    case 9811:
      return (NightingaleTraining::HIDPFLError_optional)46;
    case 9812:
      return (NightingaleTraining::HIDPFLError_optional)47;
    case 9813:
      return (NightingaleTraining::HIDPFLError_optional)48;
  }
  return (NightingaleTraining::HIDPFLError_optional)49;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance HIDPFLError()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance HIDPFLError()
{
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance HIDPFLError()
{
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance HIDPFLError()
{
  return RawRepresentable<>._rawHashValue(seed:)();
}

NightingaleTraining::HIDPFLError_optional protocol witness for RawRepresentable.init(rawValue:) in conformance HIDPFLError@<W0>(Swift::Int *a1@<X0>, NightingaleTraining::HIDPFLError_optional *a2@<X8>)
{
  result.Swift::UInt32 value = HIDPFLError.init(rawValue:)(*a1).value;
  a2->Swift::UInt32 value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance HIDPFLError@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = HIDPFLError.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t protocol witness for Error._domain.getter in conformance HIDPFLError()
{
  return Error._domain.getter();
}

uint64_t protocol witness for Error._code.getter in conformance HIDPFLError()
{
  return Error<>._code.getter();
}

uint64_t protocol witness for Error._userInfo.getter in conformance HIDPFLError()
{
  return Error._userInfo.getter();
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance HIDPFLError()
{
  return Error._getEmbeddedNSError()();
}

uint64_t getEnumTagSinglePayload for HIDPFLError(unsigned __int8 *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 <= 0xCF) {
      goto LABEL_15;
    }
    unsigned int v7 = ((a2 + 48) >> 8) + 1;
    int v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000) {
        int v2 = 4;
      }
      else {
        int v2 = 2;
      }
      int v8 = v2;
    }
    if (v8 == 1) {
      int v6 = a1[1];
    }
    else {
      int v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    }
    if (v6)
    {
      int v5 = (*a1 | ((v6 - 1) << 8)) + 207;
    }
    else
    {
LABEL_15:
      int v3 = *a1 - 49;
      if (v3 < 0) {
        int v3 = -1;
      }
      int v5 = v3;
    }
  }
  else
  {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for HIDPFLError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  int v7 = 0;
  if (a3 > 0xCF)
  {
    unsigned int v5 = ((a3 + 48) >> 8) + 1;
    int v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000) {
        int v3 = 4;
      }
      else {
        int v3 = 2;
      }
      int v6 = v3;
    }
    int v7 = v6;
  }
  if (a2 > 0xCF)
  {
    unsigned int v4 = ((a2 - 208) >> 8) + 1;
    *uint64_t result = a2 + 48;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2) {
      *uint64_t result = a2 + 48;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HIDPFLError()
{
  return &type metadata for HIDPFLError;
}

unint64_t base witness table accessor for Equatable in HIDPFLError()
{
  return lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
}

uint64_t calculateAge(components:birthDateRequired:)(uint64_t a1, int a2)
{
  uint64_t v23 = a1;
  int v22 = a2;
  char v36 = 0;
  uint64_t v35 = 0;
  uint64_t v34 = 0;
  char v33 = 0;
  double v31 = 0.0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  unint64_t v13 = (*(void *)(*(void *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2);
  uint64_t v14 = (uint64_t)v9 - v13;
  uint64_t v20 = 0;
  uint64_t v15 = type metadata accessor for Date();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = v15 - 8;
  unint64_t v18 = (*(void *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)v9 - v18;
  char v36 = (char *)v9 - v18;
  unint64_t v21 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v20);
  uint64_t v30 = (uint64_t)v9 - v21;
  uint64_t v29 = type metadata accessor for DateComponents();
  uint64_t v26 = *(void *)(v29 - 8);
  uint64_t v27 = v29 - 8;
  unint64_t v24 = (*(void *)(v26 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  int v3 = (const void *)MEMORY[0x270FA5388](v23);
  uint64_t v25 = (char *)v9 - v24;
  uint64_t v35 = (char *)v9 - v24;
  uint64_t v34 = v3;
  unsigned int v28 = 1;
  char v33 = v4 & 1;
  outlined init with copy of DateComponents?(v3, v5);
  if ((*(unsigned int (**)(uint64_t, void, uint64_t))(v26 + 48))(v30, v28, v29) == 1)
  {
    outlined destroy of DateComponents?(v30);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v26 + 32))(v25, v30, v29);
    DateComponents.date.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v16 + 32))(v19, v14, v15);
      Date.timeIntervalSinceNow.getter();
      double v31 = v6 / -31557600.0;
      Swift::Float v10 = Float.init(_:)(v6 / -31557600.0);
      (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
      (*(void (**)(char *, uint64_t))(v26 + 8))(v25, v29);
      Swift::Float v11 = v10;
      int v12 = 0;
      goto LABEL_9;
    }
    outlined destroy of Date?(v14);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v25, v29);
  }
  if (v22)
  {
    lazy protocol witness table accessor for type HIDPFLError and conformance HIDPFLError();
    _DWORD v9[2] = swift_allocError();
    *int v7 = 19;
    swift_willThrow();
    return v9[1];
  }
  Swift::Float v11 = 0.0;
  int v12 = 1;
LABEL_9:
  *(Swift::Float *)&uint64_t v32 = v11;
  BYTE4(v32) = v12 & 1;
  return v32;
}

uint64_t NightingalePFLModelType.rawValue.getter(char a1)
{
  switch(a1)
  {
    case 1:
      uint64_t v2 = 1;
      break;
    case 2:
      uint64_t v2 = 2;
      break;
    case 3:
      uint64_t v2 = 3;
      break;
    default:
      uint64_t v2 = 0;
      break;
  }
  return v2;
}

NightingaleTraining::NightingalePFLModelType_optional __swiftcall NightingalePFLModelType.init(rawValue:)(Swift::Int rawValue)
{
  switch(rawValue)
  {
    case 0:
      return 0;
    case 1:
      return (NightingaleTraining::NightingalePFLModelType_optional)1;
    case 2:
      return (NightingaleTraining::NightingalePFLModelType_optional)2;
    case 3:
      return (NightingaleTraining::NightingalePFLModelType_optional)3;
  }
  return (NightingaleTraining::NightingalePFLModelType_optional)4;
}

Swift::Bool __swiftcall isSleepingWTNeeded(_:)(NightingaleTraining::NightingalePFLModelType a1)
{
  lazy protocol witness table accessor for type NightingalePFLModelType and conformance NightingalePFLModelType();
  if (== infix<A>(_:_:)()) {
    char v2 = 1;
  }
  else {
    char v2 = == infix<A>(_:_:)();
  }
  return v2 & 1;
}

Swift::Bool __swiftcall isSHRNeeded(_:)(NightingaleTraining::NightingalePFLModelType a1)
{
  lazy protocol witness table accessor for type NightingalePFLModelType and conformance NightingalePFLModelType();
  if (== infix<A>(_:_:)()) {
    char v2 = 1;
  }
  else {
    char v2 = == infix<A>(_:_:)();
  }
  return v2 & 1;
}

Swift::Double __swiftcall calculateDummyPeriodLength(urCycleLength:urPeriodLength:)(Swift::Double_optional urCycleLength, Swift::Double_optional urPeriodLength)
{
  if (urPeriodLength.is_nil || (v3 & 1) != 0 || v2 >= *(double *)&urCycleLength.is_nil) {
    return 4.0;
  }
  else {
    return v2;
  }
}

Swift::Int __swiftcall NightingalePFLModelType.numFeatures()()
{
  switch(v0)
  {
    case 2:
      Swift::Int v2 = 1;
      break;
    case 3:
      Swift::Int v2 = 4;
      break;
    default:
      Swift::Int v2 = 5;
      break;
  }
  return v2;
}

Swift::Int_optional __swiftcall featureIndex(_:_:)(NightingaleTraining::NightingaleModelFeatureType a1, NightingaleTraining::NightingalePFLModelType a2)
{
  switch(a1)
  {
    case NightingaleTraining_NightingaleModelFeatureType_SWT:
      lazy protocol witness table accessor for type NightingalePFLModelType and conformance NightingalePFLModelType();
      if (== infix<A>(_:_:)()) {
        char v8 = 1;
      }
      else {
        char v8 = == infix<A>(_:_:)();
      }
      if ((v8 & 1) == 0) {
        goto LABEL_43;
      }
      uint64_t v9 = 0;
      char v10 = 0;
      break;
    case NightingaleTraining_NightingaleModelFeatureType_DaySHR10:
      lazy protocol witness table accessor for type NightingalePFLModelType and conformance NightingalePFLModelType();
      if (== infix<A>(_:_:)()) {
        char v7 = 1;
      }
      else {
        char v7 = == infix<A>(_:_:)();
      }
      if ((v7 & 1) == 0) {
        goto LABEL_43;
      }
      uint64_t v9 = 0;
      char v10 = 0;
      break;
    case NightingaleTraining_NightingaleModelFeatureType_NightSHR10:
      lazy protocol witness table accessor for type NightingalePFLModelType and conformance NightingalePFLModelType();
      if (== infix<A>(_:_:)()) {
        char v6 = 1;
      }
      else {
        char v6 = == infix<A>(_:_:)();
      }
      if ((v6 & 1) == 0) {
        goto LABEL_43;
      }
      uint64_t v9 = 1;
      char v10 = 0;
      break;
    case NightingaleTraining_NightingaleModelFeatureType_PSM:
      lazy protocol witness table accessor for type NightingalePFLModelType and conformance NightingalePFLModelType();
      if (== infix<A>(_:_:)()) {
        char v5 = 1;
      }
      else {
        char v5 = == infix<A>(_:_:)();
      }
      if (v5)
      {
        uint64_t v9 = 3;
        char v10 = 0;
      }
      else
      {
        if ((== infix<A>(_:_:)() & 1) == 0) {
          goto LABEL_43;
        }
        uint64_t v9 = 2;
        char v10 = 0;
      }
      break;
    case NightingaleTraining_NightingaleModelFeatureType_PSS:
      lazy protocol witness table accessor for type NightingalePFLModelType and conformance NightingalePFLModelType();
      if (== infix<A>(_:_:)()) {
        char v4 = 1;
      }
      else {
        char v4 = == infix<A>(_:_:)();
      }
      if (v4)
      {
        uint64_t v9 = 4;
        char v10 = 0;
      }
      else
      {
        if ((== infix<A>(_:_:)() & 1) == 0) {
          goto LABEL_43;
        }
        uint64_t v9 = 3;
        char v10 = 0;
      }
      break;
    default:
      lazy protocol witness table accessor for type NightingalePFLModelType and conformance NightingalePFLModelType();
      if (== infix<A>(_:_:)()) {
        char v11 = 1;
      }
      else {
        char v11 = == infix<A>(_:_:)();
      }
      if (v11)
      {
        uint64_t v9 = 2;
        char v10 = 0;
      }
      else if (== infix<A>(_:_:)())
      {
        uint64_t v9 = 1;
        char v10 = 0;
      }
      else
      {
LABEL_43:
        uint64_t v9 = 0;
        char v10 = 1;
      }
      break;
  }
  Swift::Int v2 = v9;
  Swift::Bool v3 = v10 & 1;
  result.Swift::UInt32 value = v2;
  result.Swift::Bool is_nil = v3;
  return result;
}

NightingaleTraining::NightingaleModelFeatureType_optional __swiftcall NightingaleModelFeatureType.init(rawValue:)(Swift::Int rawValue)
{
  switch(rawValue)
  {
    case 0:
      return 0;
    case 1:
      return (NightingaleTraining::NightingaleModelFeatureType_optional)1;
    case 3:
      return (NightingaleTraining::NightingaleModelFeatureType_optional)2;
    case 4:
      return (NightingaleTraining::NightingaleModelFeatureType_optional)3;
    case 5:
      return (NightingaleTraining::NightingaleModelFeatureType_optional)4;
    case 6:
      return (NightingaleTraining::NightingaleModelFeatureType_optional)5;
  }
  return (NightingaleTraining::NightingaleModelFeatureType_optional)6;
}

uint64_t NightingaleModelFeatureType.rawValue.getter(char a1)
{
  switch(a1)
  {
    case 1:
      uint64_t v2 = 1;
      break;
    case 2:
      uint64_t v2 = 3;
      break;
    case 3:
      uint64_t v2 = 4;
      break;
    case 4:
      uint64_t v2 = 5;
      break;
    case 5:
      uint64_t v2 = 6;
      break;
    default:
      uint64_t v2 = 0;
      break;
  }
  return v2;
}

NightingaleTraining::NightingalePFLTaskType_optional __swiftcall NightingalePFLTaskType.init(rawValue:)(Swift::Int rawValue)
{
  switch(rawValue)
  {
    case 0:
      return 0;
    case 1:
      return (NightingaleTraining::NightingalePFLTaskType_optional)1;
    case 2:
      return (NightingaleTraining::NightingalePFLTaskType_optional)2;
    case 3:
      return (NightingaleTraining::NightingalePFLTaskType_optional)3;
    case 4:
      return (NightingaleTraining::NightingalePFLTaskType_optional)4;
    case 5:
      return (NightingaleTraining::NightingalePFLTaskType_optional)5;
  }
  return (NightingaleTraining::NightingalePFLTaskType_optional)6;
}

uint64_t NightingalePFLTaskType.rawValue.getter(char a1)
{
  switch(a1)
  {
    case 1:
      uint64_t v2 = 1;
      break;
    case 2:
      uint64_t v2 = 2;
      break;
    case 3:
      uint64_t v2 = 3;
      break;
    case 4:
      uint64_t v2 = 4;
      break;
    case 5:
      uint64_t v2 = 5;
      break;
    default:
      uint64_t v2 = 0;
      break;
  }
  return v2;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NightingalePFLModelType()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance NightingalePFLModelType()
{
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NightingalePFLModelType()
{
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance NightingalePFLModelType()
{
  return RawRepresentable<>._rawHashValue(seed:)();
}

NightingaleTraining::NightingalePFLModelType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance NightingalePFLModelType@<W0>(Swift::Int *a1@<X0>, NightingaleTraining::NightingalePFLModelType_optional *a2@<X8>)
{
  result.Swift::UInt32 value = NightingalePFLModelType.init(rawValue:)(*a1).value;
  a2->Swift::UInt32 value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance NightingalePFLModelType@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = NightingalePFLModelType.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NightingaleModelFeatureType()
{
  return == infix<A>(_:_:)() & 1;
}

unint64_t lazy protocol witness table accessor for type NightingaleModelFeatureType and conformance NightingaleModelFeatureType()
{
  uint64_t v2 = lazy protocol witness table cache variable for type NightingaleModelFeatureType and conformance NightingaleModelFeatureType;
  if (!lazy protocol witness table cache variable for type NightingaleModelFeatureType and conformance NightingaleModelFeatureType)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type NightingaleModelFeatureType and conformance NightingaleModelFeatureType);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type NightingaleModelFeatureType and conformance NightingaleModelFeatureType;
  if (!lazy protocol witness table cache variable for type NightingaleModelFeatureType and conformance NightingaleModelFeatureType)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type NightingaleModelFeatureType and conformance NightingaleModelFeatureType);
    return WitnessTable;
  }
  return v2;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance NightingaleModelFeatureType()
{
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NightingaleModelFeatureType()
{
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance NightingaleModelFeatureType()
{
  return RawRepresentable<>._rawHashValue(seed:)();
}

NightingaleTraining::NightingaleModelFeatureType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance NightingaleModelFeatureType@<W0>(Swift::Int *a1@<X0>, NightingaleTraining::NightingaleModelFeatureType_optional *a2@<X8>)
{
  result.Swift::UInt32 value = NightingaleModelFeatureType.init(rawValue:)(*a1).value;
  a2->Swift::UInt32 value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance NightingaleModelFeatureType@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = NightingaleModelFeatureType.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NightingalePFLTaskType()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance NightingalePFLTaskType()
{
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NightingalePFLTaskType()
{
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance NightingalePFLTaskType()
{
  return RawRepresentable<>._rawHashValue(seed:)();
}

NightingaleTraining::NightingalePFLTaskType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance NightingalePFLTaskType@<W0>(Swift::Int *a1@<X0>, NightingaleTraining::NightingalePFLTaskType_optional *a2@<X8>)
{
  result.Swift::UInt32 value = NightingalePFLTaskType.init(rawValue:)(*a1).value;
  a2->Swift::UInt32 value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance NightingalePFLTaskType@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = NightingalePFLTaskType.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for NightingalePFLModelType(unsigned __int8 *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 <= 0xFC) {
      goto LABEL_15;
    }
    unsigned int v7 = ((a2 + 3) >> 8) + 1;
    int v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000) {
        int v2 = 4;
      }
      else {
        int v2 = 2;
      }
      int v8 = v2;
    }
    if (v8 == 1) {
      int v6 = a1[1];
    }
    else {
      int v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    }
    if (v6)
    {
      int v5 = (*a1 | ((v6 - 1) << 8)) + 252;
    }
    else
    {
LABEL_15:
      int v3 = *a1 - 4;
      if (v3 < 0) {
        int v3 = -1;
      }
      int v5 = v3;
    }
  }
  else
  {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for NightingalePFLModelType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  int v7 = 0;
  if (a3 > 0xFC)
  {
    unsigned int v5 = ((a3 + 3) >> 8) + 1;
    int v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000) {
        int v3 = 4;
      }
      else {
        int v3 = 2;
      }
      int v6 = v3;
    }
    int v7 = v6;
  }
  if (a2 > 0xFC)
  {
    unsigned int v4 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2) {
      *uint64_t result = a2 + 3;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NightingalePFLModelType()
{
  return &type metadata for NightingalePFLModelType;
}

ValueMetadata *type metadata accessor for NightingaleModelFeatureType()
{
  return &type metadata for NightingaleModelFeatureType;
}

ValueMetadata *type metadata accessor for NightingalePFLTaskType()
{
  return &type metadata for NightingalePFLTaskType;
}

unint64_t base witness table accessor for Equatable in NightingalePFLTaskType()
{
  return lazy protocol witness table accessor for type NightingalePFLTaskType and conformance NightingalePFLTaskType();
}

unint64_t base witness table accessor for Equatable in NightingaleModelFeatureType()
{
  return lazy protocol witness table accessor for type NightingaleModelFeatureType and conformance NightingaleModelFeatureType();
}

unint64_t base witness table accessor for Equatable in NightingalePFLModelType()
{
  return lazy protocol witness table accessor for type NightingalePFLModelType and conformance NightingalePFLModelType();
}

uint64_t HyperParams.__allocating_init(recipe:)(uint64_t a1)
{
  return HyperParams.init(recipe:)(a1);
}

long long *HyperParams.nightingaleDInputDaySHR10.unsafeMutableAddressor()
{
  if (one-time initialization token for nightingaleDInputDaySHR10 != -1) {
    swift_once();
  }
  return &static HyperParams.nightingaleDInputDaySHR10;
}

long long *HyperParams.nightingaleDInputNightSHR10.unsafeMutableAddressor()
{
  if (one-time initialization token for nightingaleDInputNightSHR10 != -1) {
    swift_once();
  }
  return &static HyperParams.nightingaleDInputNightSHR10;
}

long long *HyperParams.nightingaleDInputPeriodStartMean.unsafeMutableAddressor()
{
  if (one-time initialization token for nightingaleDInputPeriodStartMean != -1) {
    swift_once();
  }
  return &static HyperParams.nightingaleDInputPeriodStartMean;
}

long long *HyperParams.nightingaleDInputPeriodStartStd.unsafeMutableAddressor()
{
  if (one-time initialization token for nightingaleDInputPeriodStartStd != -1) {
    swift_once();
  }
  return &static HyperParams.nightingaleDInputPeriodStartStd;
}

long long *HyperParams.nightingaleDInputAppleSleepingWristTemperature.unsafeMutableAddressor()
{
  if (one-time initialization token for nightingaleDInputAppleSleepingWristTemperature != -1) {
    swift_once();
  }
  return &static HyperParams.nightingaleDInputAppleSleepingWristTemperature;
}

long long *HyperParams.nightingaleDInputDaysSinceLMS.unsafeMutableAddressor()
{
  if (one-time initialization token for nightingaleDInputDaysSinceLMS != -1) {
    swift_once();
  }
  return &static HyperParams.nightingaleDInputDaysSinceLMS;
}

long long *HyperParams.nightingaleDInputHRV.unsafeMutableAddressor()
{
  if (one-time initialization token for nightingaleDInputHRV != -1) {
    swift_once();
  }
  return &static HyperParams.nightingaleDInputHRV;
}

long long *HyperParams.nightingaleDInputRespiratoryRate.unsafeMutableAddressor()
{
  if (one-time initialization token for nightingaleDInputRespiratoryRate != -1) {
    swift_once();
  }
  return &static HyperParams.nightingaleDInputRespiratoryRate;
}

long long *HyperParams.nightingaleDInputSpO2.unsafeMutableAddressor()
{
  if (one-time initialization token for nightingaleDInputSpO2 != -1) {
    swift_once();
  }
  return &static HyperParams.nightingaleDInputSpO2;
}

long long *HyperParams.modelRepresentationEIR.unsafeMutableAddressor()
{
  if (one-time initialization token for modelRepresentationEIR != -1) {
    swift_once();
  }
  return &static HyperParams.modelRepresentationEIR;
}

long long *HyperParams.labelEncodingTypeRegression.unsafeMutableAddressor()
{
  if (one-time initialization token for labelEncodingTypeRegression != -1) {
    swift_once();
  }
  return &static HyperParams.labelEncodingTypeRegression;
}

long long *HyperParams.labelEncodingTypeOnehot.unsafeMutableAddressor()
{
  if (one-time initialization token for labelEncodingTypeOnehot != -1) {
    swift_once();
  }
  return &static HyperParams.labelEncodingTypeOnehot;
}

long long *HyperParams.keyLSTMModelType.unsafeMutableAddressor()
{
  if (one-time initialization token for keyLSTMModelType != -1) {
    swift_once();
  }
  return &static HyperParams.keyLSTMModelType;
}

long long *HyperParams.keyIterationStartTime.unsafeMutableAddressor()
{
  if (one-time initialization token for keyIterationStartTime != -1) {
    swift_once();
  }
  return &static HyperParams.keyIterationStartTime;
}

void *HyperParams.noMaxNumSliceLimit.unsafeMutableAddressor()
{
  return &static HyperParams.noMaxNumSliceLimit;
}

uint64_t one-time initialization function for keyLSTMModelType()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("LSTMModelType", 0xDuLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static HyperParams.keyLSTMModelType = (__int128)v1;
  return result;
}

uint64_t one-time initialization function for keyMaximumDays()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("MaximumDays", 0xBuLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static HyperParams.keyMaximumDays = (__int128)v1;
  return result;
}

long long *HyperParams.keyMaximumDays.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMaximumDays != -1) {
    swift_once();
  }
  return &static HyperParams.keyMaximumDays;
}

uint64_t one-time initialization function for keySHRQueryBatchSize()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SHRQueryBatchSize", 0x11uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static HyperParams.keySHRQueryBatchSize = (__int128)v1;
  return result;
}

long long *HyperParams.keySHRQueryBatchSize.unsafeMutableAddressor()
{
  if (one-time initialization token for keySHRQueryBatchSize != -1) {
    swift_once();
  }
  return &static HyperParams.keySHRQueryBatchSize;
}

uint64_t one-time initialization function for keySliceSize()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SliceSize", 9uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static HyperParams.keySliceSize = (__int128)v1;
  return result;
}

long long *HyperParams.keySliceSize.unsafeMutableAddressor()
{
  if (one-time initialization token for keySliceSize != -1) {
    swift_once();
  }
  return &static HyperParams.keySliceSize;
}

uint64_t one-time initialization function for keyRawSampleTimeout()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RawSampleTimeout", 0x10uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static HyperParams.keyRawSampleTimeout = (__int128)v1;
  return result;
}

long long *HyperParams.keyRawSampleTimeout.unsafeMutableAddressor()
{
  if (one-time initialization token for keyRawSampleTimeout != -1) {
    swift_once();
  }
  return &static HyperParams.keyRawSampleTimeout;
}

uint64_t one-time initialization function for keySHRTimeout()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SHRTimeout", 0xAuLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static HyperParams.keySHRTimeout = (__int128)v1;
  return result;
}

long long *HyperParams.keySHRTimeout.unsafeMutableAddressor()
{
  if (one-time initialization token for keySHRTimeout != -1) {
    swift_once();
  }
  return &static HyperParams.keySHRTimeout;
}

uint64_t one-time initialization function for keyBMITimeout()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("BMITimeout", 0xAuLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static HyperParams.keyBMITimeout = (__int128)v1;
  return result;
}

long long *HyperParams.keyBMITimeout.unsafeMutableAddressor()
{
  if (one-time initialization token for keyBMITimeout != -1) {
    swift_once();
  }
  return &static HyperParams.keyBMITimeout;
}

uint64_t one-time initialization function for keyLabelSize()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("LabelSize", 9uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static HyperParams.keyLabelSize = (__int128)v1;
  return result;
}

long long *HyperParams.keyLabelSize.unsafeMutableAddressor()
{
  if (one-time initialization token for keyLabelSize != -1) {
    swift_once();
  }
  return &static HyperParams.keyLabelSize;
}

uint64_t one-time initialization function for keyMaxNumDaysToNextPeriod()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("MaxNumDaysToNextPeriod", 0x16uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static HyperParams.keyMaxNumDaysToNextPeriod = (__int128)v1;
  return result;
}

long long *HyperParams.keyMaxNumDaysToNextPeriod.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMaxNumDaysToNextPeriod != -1) {
    swift_once();
  }
  return &static HyperParams.keyMaxNumDaysToNextPeriod;
}

uint64_t one-time initialization function for keyModelRepresentation()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ModelRepresentation", 0x13uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static HyperParams.keyModelRepresentation = (__int128)v1;
  return result;
}

long long *HyperParams.keyModelRepresentation.unsafeMutableAddressor()
{
  if (one-time initialization token for keyModelRepresentation != -1) {
    swift_once();
  }
  return &static HyperParams.keyModelRepresentation;
}

uint64_t one-time initialization function for keyBatchSize()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("batchSize", 9uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static HyperParams.keyBatchSize = (__int128)v1;
  return result;
}

long long *HyperParams.keyBatchSize.unsafeMutableAddressor()
{
  if (one-time initialization token for keyBatchSize != -1) {
    swift_once();
  }
  return &static HyperParams.keyBatchSize;
}

uint64_t one-time initialization function for keyModelName()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ModelName", 9uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static HyperParams.keyModelName = (__int128)v1;
  return result;
}

long long *HyperParams.keyModelName.unsafeMutableAddressor()
{
  if (one-time initialization token for keyModelName != -1) {
    swift_once();
  }
  return &static HyperParams.keyModelName;
}

uint64_t one-time initialization function for keyLearningRate()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("LearningRate", 0xCuLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static HyperParams.keyLearningRate = (__int128)v1;
  return result;
}

long long *HyperParams.keyLearningRate.unsafeMutableAddressor()
{
  if (one-time initialization token for keyLearningRate != -1) {
    swift_once();
  }
  return &static HyperParams.keyLearningRate;
}

uint64_t one-time initialization function for keyMinNumSlice()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("MinNumSlice", 0xBuLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static HyperParams.keyMinNumSlice = (__int128)v1;
  return result;
}

long long *HyperParams.keyMinNumSlice.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMinNumSlice != -1) {
    swift_once();
  }
  return &static HyperParams.keyMinNumSlice;
}

uint64_t one-time initialization function for keyMaxNumSlice()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("MaxNumSlice", 0xBuLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static HyperParams.keyMaxNumSlice = (__int128)v1;
  return result;
}

long long *HyperParams.keyMaxNumSlice.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMaxNumSlice != -1) {
    swift_once();
  }
  return &static HyperParams.keyMaxNumSlice;
}

uint64_t one-time initialization function for keyModelInputName()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ModelInputName", 0xEuLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static HyperParams.keyModelInputName = (__int128)v1;
  return result;
}

long long *HyperParams.keyModelInputName.unsafeMutableAddressor()
{
  if (one-time initialization token for keyModelInputName != -1) {
    swift_once();
  }
  return &static HyperParams.keyModelInputName;
}

uint64_t one-time initialization function for keyModelLabelName()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ModelLabelName", 0xEuLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static HyperParams.keyModelLabelName = (__int128)v1;
  return result;
}

long long *HyperParams.keyModelLabelName.unsafeMutableAddressor()
{
  if (one-time initialization token for keyModelLabelName != -1) {
    swift_once();
  }
  return &static HyperParams.keyModelLabelName;
}

uint64_t one-time initialization function for keyModelLossName()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ModelLossName", 0xDuLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static HyperParams.keyModelLossName = (__int128)v1;
  return result;
}

long long *HyperParams.keyModelLossName.unsafeMutableAddressor()
{
  if (one-time initialization token for keyModelLossName != -1) {
    swift_once();
  }
  return &static HyperParams.keyModelLossName;
}

uint64_t one-time initialization function for keyModelOutputName()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ModelOutputName", 0xFuLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static HyperParams.keyModelOutputName = (__int128)v1;
  return result;
}

long long *HyperParams.keyModelOutputName.unsafeMutableAddressor()
{
  if (one-time initialization token for keyModelOutputName != -1) {
    swift_once();
  }
  return &static HyperParams.keyModelOutputName;
}

uint64_t one-time initialization function for keyModelOrderedWeightNames()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ModelOrderedWeightNames", 0x17uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static HyperParams.keyModelOrderedWeightNames = (__int128)v1;
  return result;
}

long long *HyperParams.keyModelOrderedWeightNames.unsafeMutableAddressor()
{
  if (one-time initialization token for keyModelOrderedWeightNames != -1) {
    swift_once();
  }
  return &static HyperParams.keyModelOrderedWeightNames;
}

uint64_t one-time initialization function for keyModelLabelEncodingType()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ModelLabelEncodingType", 0x16uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static HyperParams.keyModelLabelEncodingType = (__int128)v1;
  return result;
}

long long *HyperParams.keyModelLabelEncodingType.unsafeMutableAddressor()
{
  if (one-time initialization token for keyModelLabelEncodingType != -1) {
    swift_once();
  }
  return &static HyperParams.keyModelLabelEncodingType;
}

uint64_t one-time initialization function for keyReportLastReachLocation()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ReportLastReachLocation", 0x17uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static HyperParams.keyReportLastReachLocation = (__int128)v1;
  return result;
}

long long *HyperParams.keyReportLastReachLocation.unsafeMutableAddressor()
{
  if (one-time initialization token for keyReportLastReachLocation != -1) {
    swift_once();
  }
  return &static HyperParams.keyReportLastReachLocation;
}

uint64_t one-time initialization function for keyPFLTaskType()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PFLTaskType", 0xBuLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static HyperParams.keyPFLTaskType = (__int128)v1;
  return result;
}

long long *HyperParams.keyPFLTaskType.unsafeMutableAddressor()
{
  if (one-time initialization token for keyPFLTaskType != -1) {
    swift_once();
  }
  return &static HyperParams.keyPFLTaskType;
}

uint64_t one-time initialization function for keyDefaultBMI()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("DefaultBMI", 0xAuLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static HyperParams.keyDefaultBMI = (__int128)v1;
  return result;
}

long long *HyperParams.keyDefaultBMI.unsafeMutableAddressor()
{
  if (one-time initialization token for keyDefaultBMI != -1) {
    swift_once();
  }
  return &static HyperParams.keyDefaultBMI;
}

uint64_t one-time initialization function for keyDefaultAge()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("DefaultAge", 0xAuLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static HyperParams.keyDefaultAge = (__int128)v1;
  return result;
}

long long *HyperParams.keyDefaultAge.unsafeMutableAddressor()
{
  if (one-time initialization token for keyDefaultAge != -1) {
    swift_once();
  }
  return &static HyperParams.keyDefaultAge;
}

uint64_t one-time initialization function for keyMinNumOfDaySHRPerSlice()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("MinNumOfDaySHRPerSlice", 0x16uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static HyperParams.keyMinNumOfDaySHRPerSlice = (__int128)v1;
  return result;
}

long long *HyperParams.keyMinNumOfDaySHRPerSlice.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMinNumOfDaySHRPerSlice != -1) {
    swift_once();
  }
  return &static HyperParams.keyMinNumOfDaySHRPerSlice;
}

uint64_t one-time initialization function for keyNumLocalIterations()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("NumLocalIterations", 0x12uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static HyperParams.keyNumLocalIterations = (__int128)v1;
  return result;
}

long long *HyperParams.keyNumLocalIterations.unsafeMutableAddressor()
{
  if (one-time initialization token for keyNumLocalIterations != -1) {
    swift_once();
  }
  return &static HyperParams.keyNumLocalIterations;
}

uint64_t one-time initialization function for keyBirthDateRequired()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("BirthDateRequired", 0x11uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static HyperParams.keyBirthDateRequired = (__int128)v1;
  return result;
}

long long *HyperParams.keyBirthDateRequired.unsafeMutableAddressor()
{
  if (one-time initialization token for keyBirthDateRequired != -1) {
    swift_once();
  }
  return &static HyperParams.keyBirthDateRequired;
}

uint64_t one-time initialization function for keyInputShuffleMethod()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("InputShuffleMethod", 0x12uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static HyperParams.keyInputShuffleMethod = (__int128)v1;
  return result;
}

long long *HyperParams.keyInputShuffleMethod.unsafeMutableAddressor()
{
  if (one-time initialization token for keyInputShuffleMethod != -1) {
    swift_once();
  }
  return &static HyperParams.keyInputShuffleMethod;
}

uint64_t one-time initialization function for keyFullBatchTraining()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("FullBatchTraining", 0x11uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static HyperParams.keyFullBatchTraining = (__int128)v1;
  return result;
}

long long *HyperParams.keyFullBatchTraining.unsafeMutableAddressor()
{
  if (one-time initialization token for keyFullBatchTraining != -1) {
    swift_once();
  }
  return &static HyperParams.keyFullBatchTraining;
}

uint64_t one-time initialization function for keyEvalBeforeTrain()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("EvalBeforeTrain", 0xFuLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static HyperParams.keyEvalBeforeTrain = (__int128)v1;
  return result;
}

long long *HyperParams.keyEvalBeforeTrain.unsafeMutableAddressor()
{
  if (one-time initialization token for keyEvalBeforeTrain != -1) {
    swift_once();
  }
  return &static HyperParams.keyEvalBeforeTrain;
}

uint64_t one-time initialization function for keyCollectL2Norm()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("CollectL2Norm", 0xDuLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static HyperParams.keyCollectL2Noruint64_t m = (__int128)v1;
  return result;
}

long long *HyperParams.keyCollectL2Norm.unsafeMutableAddressor()
{
  if (one-time initialization token for keyCollectL2Norm != -1) {
    swift_once();
  }
  return &static HyperParams.keyCollectL2Norm;
}

uint64_t one-time initialization function for keyModelMaxNumDaysToNextPeriod()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ModelMaxNumDaysToNextPeriod", 0x1BuLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static HyperParams.keyModelMaxNumDaysToNextPeriod = (__int128)v1;
  return result;
}

long long *HyperParams.keyModelMaxNumDaysToNextPeriod.unsafeMutableAddressor()
{
  if (one-time initialization token for keyModelMaxNumDaysToNextPeriod != -1) {
    swift_once();
  }
  return &static HyperParams.keyModelMaxNumDaysToNextPeriod;
}

uint64_t one-time initialization function for keyMinCycleLenStd()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("MinCycleLenStd", 0xEuLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static HyperParams.keyMinCycleLenStd = (__int128)v1;
  return result;
}

long long *HyperParams.keyMinCycleLenStd.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMinCycleLenStd != -1) {
    swift_once();
  }
  return &static HyperParams.keyMinCycleLenStd;
}

uint64_t one-time initialization function for keyMaxCycleLenStd()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("MaxCycleLenStd", 0xEuLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static HyperParams.keyMaxCycleLenStd = (__int128)v1;
  return result;
}

long long *HyperParams.keyMaxCycleLenStd.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMaxCycleLenStd != -1) {
    swift_once();
  }
  return &static HyperParams.keyMaxCycleLenStd;
}

uint64_t one-time initialization function for keyEvalModels()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("EvalModels", 0xAuLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static HyperParams.keyEvalModels = (__int128)v1;
  return result;
}

long long *HyperParams.keyEvalModels.unsafeMutableAddressor()
{
  if (one-time initialization token for keyEvalModels != -1) {
    swift_once();
  }
  return &static HyperParams.keyEvalModels;
}

uint64_t one-time initialization function for keyMinNumDaysToNextPeriod()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("MinNumDaysToNextPeriod", 0x16uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static HyperParams.keyMinNumDaysToNextPeriod = (__int128)v1;
  return result;
}

long long *HyperParams.keyMinNumDaysToNextPeriod.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMinNumDaysToNextPeriod != -1) {
    swift_once();
  }
  return &static HyperParams.keyMinNumDaysToNextPeriod;
}

uint64_t one-time initialization function for keyModelPath()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ModelPath", 9uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static HyperParams.keyModelPath = (__int128)v1;
  return result;
}

long long *HyperParams.keyModelPath.unsafeMutableAddressor()
{
  if (one-time initialization token for keyModelPath != -1) {
    swift_once();
  }
  return &static HyperParams.keyModelPath;
}

uint64_t one-time initialization function for keyIterationStartTime()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("IterationStartTime", 0x12uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static HyperParams.keyIterationStartTime = (__int128)v1;
  return result;
}

uint64_t one-time initialization function for keyIntervalCorrectionFactor()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("IntervalCorrectionFactor", 0x18uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static HyperParams.keyIntervalCorrectionFactor = (__int128)v1;
  return result;
}

long long *HyperParams.keyIntervalCorrectionFactor.unsafeMutableAddressor()
{
  if (one-time initialization token for keyIntervalCorrectionFactor != -1) {
    swift_once();
  }
  return &static HyperParams.keyIntervalCorrectionFactor;
}

uint64_t one-time initialization function for keyMinDaysAgo()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("MinDaysAgo", 0xAuLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static HyperParams.keyMinDaysAgo = (__int128)v1;
  return result;
}

long long *HyperParams.keyMinDaysAgo.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMinDaysAgo != -1) {
    swift_once();
  }
  return &static HyperParams.keyMinDaysAgo;
}

uint64_t one-time initialization function for keyMinNEligibleCyclesHistory()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("MinNEligibleCyclesHistory", 0x19uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static HyperParams.keyMinNEligibleCyclesHistory = (__int128)v1;
  return result;
}

long long *HyperParams.keyMinNEligibleCyclesHistory.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMinNEligibleCyclesHistory != -1) {
    swift_once();
  }
  return &static HyperParams.keyMinNEligibleCyclesHistory;
}

uint64_t one-time initialization function for keyMaxNEligibleCyclesHistory()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("MaxNEligibleCyclesHistory", 0x19uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static HyperParams.keyMaxNEligibleCyclesHistory = (__int128)v1;
  return result;
}

long long *HyperParams.keyMaxNEligibleCyclesHistory.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMaxNEligibleCyclesHistory != -1) {
    swift_once();
  }
  return &static HyperParams.keyMaxNEligibleCyclesHistory;
}

uint64_t one-time initialization function for keyMinDaySHRCountThreshold()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("MinDaySHRCountThreshold", 0x17uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static HyperParams.keyMinDaySHRCountThreshold = (__int128)v1;
  return result;
}

long long *HyperParams.keyMinDaySHRCountThreshold.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMinDaySHRCountThreshold != -1) {
    swift_once();
  }
  return &static HyperParams.keyMinDaySHRCountThreshold;
}

uint64_t one-time initialization function for keyMinNightSHRCountThreshold()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("MinNightSHRCountThreshold", 0x19uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static HyperParams.keyMinNightSHRCountThreshold = (__int128)v1;
  return result;
}

long long *HyperParams.keyMinNightSHRCountThreshold.unsafeMutableAddressor()
{
  if (one-time initialization token for keyMinNightSHRCountThreshold != -1) {
    swift_once();
  }
  return &static HyperParams.keyMinNightSHRCountThreshold;
}

uint64_t one-time initialization function for keyHeartRateFwEnd10PctModelName()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeartRateFwEnd10PctModelName", 0x1CuLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static HyperParams.keyHeartRateFwEnd10PctModelName = (__int128)v1;
  return result;
}

long long *HyperParams.keyHeartRateFwEnd10PctModelName.unsafeMutableAddressor()
{
  if (one-time initialization token for keyHeartRateFwEnd10PctModelName != -1) {
    swift_once();
  }
  return &static HyperParams.keyHeartRateFwEnd10PctModelName;
}

uint64_t one-time initialization function for keyHeartRatePeriod10PctModelName()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeartRatePeriod10PctModelName", 0x1DuLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static HyperParams.keyHeartRatePeriod10PctModelName = (__int128)v1;
  return result;
}